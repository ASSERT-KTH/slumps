apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: swam-strac-
spec:
  entrypoint: multiple-runs
  volumeClaimTemplates:
  - metadata:
      name: result-directory
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1000Gi
  templates:
  - name: multiple-runs
    parallelism: 6
    steps:
    - - name: download
        template: donwload-all
    - - name: evaluate
        template: evaluate
        arguments:
          parameters:
            - name: namespace
              value: "{{item}}"
        withParam: "{{steps.download.outputs.parameters.namespaces}}"
        continueOn:
          failed: true
    - - name: merge
        template: merge
  - name: donwload-all
    outputs:
      parameters:
        - name: namespaces
          valueFrom: 
            path: "/out.txt"
    script:
      image: madshansen/docker-git-ftp
      command: [bash]
      source: |
         apt-get update && apt-get install -y python && git clone https://github.com/KTH/slumps.git && ls -l /slumps/benchmark_programs/variants && cp -r /slumps/benchmark_programs/variants /programs && python -c "import json,os;  print(json.dumps(os.listdir('/programs/variants')))" > /out.txt && cat /out.txt
    
      volumeMounts:
      - name: result-directory
        mountPath: /programs
  - name: evaluate
    inputs:
      parameters:
        - name: namespace
    parallelism: 3
    steps: 
    - - name: organize
        template: organize
        arguments:
          parameters:
            - name: namespace
              value: "{{inputs.parameters.namespace}}"
    - - name: eval
        template: execute-swam
        arguments:
          parameters:
            - name: program 
              value: "{{item}}"
            - name: namespace 
              value: "{{inputs.parameters.namespace}}"
        withParam: "{{steps.organize.outputs.parameters.variants}}"
        continueOn:
          failed: true
    - - name: collect-traces # - - collect the traces and stdout, then build the STRAC json 
        template: collect-traces
        arguments:
          parameters:
            - name: namespace
              value: "{{inputs.parameters.namespace}}"
        continueOn:
          failed: true
    - - name: run-STRAC-mem
        template: run-STRAC
        arguments:
          parameters:
            - name: payload
              value: "/programs/traces/{{inputs.parameters.namespace}}/memSTRAC.json"
            - name: namespace
              value: "{{inputs.parameters.namespace}}"
        continueOn:
          failed: true
    - - name: run-STRAC-stack
        template: run-STRAC
        arguments:
          parameters:
            - name: payload
              value: "/programs/traces/{{inputs.parameters.namespace}}/stackSTRAC.json"
            - name: namespace
              value: "{{inputs.parameters.namespace}}"
        continueOn:
          failed: true
    - - name: run-STRAC-opcode
        template: run-STRAC
        arguments:
          parameters:
            - name: payload
              value: "/programs/traces/{{inputs.parameters.namespace}}/opcodeSTRAC.json"
            - name: namespace
              value: "{{inputs.parameters.namespace}}"
        continueOn:
          failed: true
    - - name: run-STRAC-static
        template: run-STRAC
        arguments:
          parameters:
            - name: payload
              value: "/programs/traces/{{inputs.parameters.namespace}}/staticSTRAC.json"
            - name: namespace
              value: "{{inputs.parameters.namespace}}"
        continueOn:
          failed: true
    - - name: analyze-data
        template: plot
        arguments:
          parameters:
            - name: namespace
              value: "{{inputs.parameters.namespace}}"
        continueOn:
          failed: true
    # - - call STRAC 4 times (mem, stack, static and opcodes) with the specific json
    # - - collect the json in artifacts with merge
    # - - plot the heat maps
  - name: organize 
    inputs:
      parameters:
        - name: namespace
    script:
      image: python:alpine3.6
      command: [python]
      source: |
        
        import os
        import json


        def main(folder):
            names = []
            for f in os.listdir(folder):

                names.append(f)
              
            open("/names.json", 'w').write(json.dumps(names))

            print(names, len(json.dumps(names)))
        main("/programs/variants/{{inputs.parameters.namespace}}")
      volumeMounts:
      - name: result-directory
        mountPath: /programs
    outputs:
      parameters:
        - name: variants
          valueFrom: 
            path: "/names.json"

  - name: execute-swam
    inputs:
      parameters:
        - name: program
        - name: namespace
    script:
      image: adoptopenjdk/openjdk12
      command: ["bash"]
      source: |
        mkdir -p /programs/results && mkdir -p /programs/traces/{{inputs.parameters.namespace}} && apt-get update && apt-get install -y wget && wget https://github.com/KTH/slumps/raw/master/kubernetes/binaries/swam.jar && java -jar swam.jar /programs/variants/{{inputs.parameters.namespace}}/{{inputs.parameters.program}} /programs/traces/{{inputs.parameters.namespace}} && ls /programs/traces/{{inputs.parameters.namespace}}
      volumeMounts:
        - name: result-directory
          mountPath: /programs
    activeDeadlineSeconds: 3600 # Adding timeout for swam interpreter
  - name: collect-traces
    inputs:
      parameters:
        - name: namespace
    script:
      image: continuumio/anaconda3
      command: ["bash"] 
      source: |
        wget https://raw.githubusercontent.com/KTH/slumps/master/kubernetes/scripts/collect.py && ls && python3 collect.py '{{inputs.parameters.namespace}}' '/programs/traces/{{inputs.parameters.namespace}}' 

      volumeMounts:
        - name: result-directory
          mountPath: /programs
        
  - name: run-STRAC
    inputs:
      parameters:
        - name: payload
        - name: namespace
    script:
      image: adoptopenjdk/openjdk12
      command: ["bash"] 
      source: |
        apt-get update && apt-get install -y wget unzip && cd /programs/traces/{{inputs.parameters.namespace}} && wget https://github.com/KTH/slumps/raw/master/kubernetes/binaries/STRAC.zip && unzip -o STRAC.zip -d STRAC &&  cp STRAC/log4j.properties log4j.properties && java -jar STRAC/STRAC-align-0.1.jar {{inputs.parameters.payload}} && rm -rf STRAC && rm STRAC.zip
      volumeMounts:
        - name: result-directory
          mountPath: /programs
  - name: plot
    inputs:
      parameters:
        - name: namespace
    script:
      image: continuumio/anaconda3
      command: ["bash"] 
      source: |
        mkdir -p /programs/results/{{inputs.parameters.namespace}} && wget https://raw.githubusercontent.com/KTH/slumps/master/kubernetes/scripts/plot.py && python3 plot.py /programs/traces/{{inputs.parameters.namespace}}/{{inputs.parameters.namespace}}.mem.json {{inputs.parameters.namespace}} mem_DTW /programs/results/{{inputs.parameters.namespace}} && python3 plot.py /programs/traces/{{inputs.parameters.namespace}}/{{inputs.parameters.namespace}}.static.json {{inputs.parameters.namespace}} static_DTW /programs/results/{{inputs.parameters.namespace}} && python3 plot.py /programs/traces/{{inputs.parameters.namespace}}/{{inputs.parameters.namespace}}.stack.json {{inputs.parameters.namespace}} stack_DTW /programs/results/{{inputs.parameters.namespace}} && python3 plot.py /programs/traces/{{inputs.parameters.namespace}}/{{inputs.parameters.namespace}}.opcode.json {{inputs.parameters.namespace}} opcode_DTW /programs/results/{{inputs.parameters.namespace}}

      volumeMounts:
        - name: result-directory
          mountPath: /programs
    outputs:
      artifacts:
        - name: results
          path: "/programs/results"
  - name: merge
    script:
      image: python:alpine3.6
      command: ["python"] 
      source: |
        
        print('Merging')
      volumeMounts:
        - name: result-directory
          mountPath: /programs
      
    outputs:
      artifacts:
        - name: traces
          path: "/programs/traces"
        - name: results
          path: "/programs/results"
    

