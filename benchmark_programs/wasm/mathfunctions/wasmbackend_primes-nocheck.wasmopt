
; function: $0

; function: $1

; start LHS (in $1)
%0:i32 = var
%1:i32 = var
%2 = sub %0, %1
infer %2


; start LHS (in $1)
%0:i32 = var
%1:i32 = var
%2 = sub %0, %1
%3 = and %2, -16:i32
infer %3


; function: $2

; start LHS (in $2)
%0:i32 = var
%1 = slt %0, 2:i32
infer %1


; start LHS (in $2)
%0:i32 = var
%1 = add %0, -48:i32
infer %1


; start LHS (in $2)
%0:i32 = var
%1 = add %0, -48:i32 (hasExternalUses)
%2 = ult 5:i32, %1
infer %2


; start LHS (in $2)
%0:i32 = var
%1 = add %0, -48:i32 (hasExternalUses)
%2 = sub %1, 1:i32
infer %2


; start LHS (in $2)
%0:i32 = var
%1 = xor %0, 1:i32
infer %1


; start LHS (in $2)
%0:i32 = var
%1 = xor %0, 1:i32
%2 = eq %1, 0:i32
infer %2


; start LHS (in $2)
%0:i32 = var
%1 = add %0, -1:i32
%2:i32 = var
%3 = xor %2, 1:i32
%4 = eq %3, 0:i32
pc %4 1
infer %1


; start LHS (in $2)
%0:i32 = var
%1:i32 = var
%2 = add %1, -1:i32
%3 = urem %0, %2
%4:i32 = var
%5 = xor %4, 1:i32
%6 = eq %5, 0:i32
pc %6 1
infer %3


; start LHS (in $2)
%0:i32 = var
%1:i32 = var
%2 = add %1, -1:i32
%3 = urem %0, %2
%4 = eq %3, 0:i32
%5:i32 = var
%6 = xor %5, 1:i32
%7 = eq %6, 0:i32
pc %7 1
infer %4


; start LHS (in $2)
%0:i32 = var
%1 = add %0, 1:i32
%2:i32 = var
%3 = xor %2, 1:i32
%4 = eq %3, 0:i32
pc %4 1
infer %1


; start LHS (in $2)
%0:i32 = var
%1 = xor %0, 1:i32
%2:i32 = var
%3 = xor %2, 1:i32
%4 = eq %3, 0:i32
pc %4 1
infer %1


; start LHS (in $2)
%0:i32 = var
%1 = xor %0, 1:i32
%2 = eq %1, 0:i32
%3:i32 = var
%4 = xor %3, 1:i32
%5 = eq %4, 0:i32
pc %5 1
infer %2


; start LHS (in $2)
%0:i32 = var
%1 = add %0, 1:i32
infer %1


; start LHS (in $2)
%0 = block 2
%1:i32 = var
%2:i32 = var
%3 = phi %0, %1, %2
%4 = add %3, 1:i32
infer %4


; start LHS (in $2)
%0 = block 2
%1:i32 = var
%2:i32 = var
%3 = add %2, 1:i32
%4 = phi %0, %1, %3
%5:i32 = var
%6:i32 = var
%7 = phi %0, %5, %6
%8 = slt %4, %7
infer %8

