
; function: $0

; start LHS (in $0)
%0:i32 = var
%1 = and %0, 32:i32
infer %1


; start LHS (in $0)
%0:i32 = var
%1 = and %0, 32:i32
%2 = eq %1, 0:i32
infer %2


; function: $1

; start LHS (in $1)
%0:i32 = var
%1 = add %0, 256:i32
infer %1


; start LHS (in $1)
%0:i32 = var
%1:i32 = var
%2 = slt %0, %1
infer %2


; start LHS (in $1)
%0:i32 = var
%1 = and %0, 73728:i32
infer %1


; start LHS (in $1)
%0:i32 = var
%1 = and %0, 73728:i32
%2 = eq %1, 0:i32
infer %2


; start LHS (in $1)
%0:i32 = var
%1:i32 = var
%2 = slt %0, %1
%3:i32 = zext %2
%4:i32 = var
%5 = and %4, 73728:i32
%6 = eq %5, 0:i32
%7:i32 = zext %6
%8 = and %3, %7
infer %8


; start LHS (in $1)
%0:i32 = var
%1 = shl %0, 24:i32
%2:i32 = var
%3:i32 = var
%4 = slt %2, %3
%5:i32 = zext %4
%6:i32 = var
%7 = and %6, 73728:i32
%8 = eq %7, 0:i32
%9:i32 = zext %8
%10 = and %5, %9
%11 = ne %10, 0:i32
pc %11 1:i1
infer %1


; start LHS (in $1)
%0:i32 = var
%1 = shl %0, 24:i32
%2 = ashr %1, 24:i32
%3:i32 = var
%4:i32 = var
%5 = slt %3, %4
%6:i32 = zext %5
%7:i32 = var
%8 = and %7, 73728:i32
%9 = eq %8, 0:i32
%10:i32 = zext %9
%11 = and %6, %10
%12 = ne %11, 0:i32
pc %12 1:i1
infer %2


; start LHS (in $1)
%0:i32 = var
%1:i32 = var
%2 = sub %0, %1
%3 = slt %1, %0
%4:i32 = zext %3
%5:i32 = var
%6 = and %5, 73728:i32
%7 = eq %6, 0:i32
%8:i32 = zext %7
%9 = and %4, %8
%10 = ne %9, 0:i32
pc %10 1:i1
infer %2


; start LHS (in $1)
%0:i32 = var
%1:i32 = var
%2 = sub %0, %1 (hasExternalUses)
%3 = ult %2, 256:i32
%4 = slt %1, %0
%5:i32 = zext %4
%6:i32 = var
%7 = and %6, 73728:i32
%8 = eq %7, 0:i32
%9:i32 = zext %8
%10 = and %5, %9
%11 = ne %10, 0:i32
pc %11 1:i1
infer %3


; start LHS (in $1)
%0:i32 = var
%1:i32 = var
%2 = sub %0, %1 (hasExternalUses)
%3 = ult 255:i32, %2
%4 = slt %1, %0
%5:i32 = zext %4
%6:i32 = var
%7 = and %6, 73728:i32
%8 = eq %7, 0:i32
%9:i32 = zext %8
%10 = and %5, %9
%11 = ne %10, 0:i32
pc %11 1:i1
infer %3


; start LHS (in $1)
%0:i32 = var
%1:i32 = var
%2 = sub %0, %1
%3 = sub %0, %1
%4 = ult 255:i32, %3
%5 = slt %1, %0
%6:i32 = zext %5
%7:i32 = var
%8 = and %7, 73728:i32
%9 = eq %8, 0:i32
%10:i32 = zext %9
%11 = and %6, %10
%12 = ne %11, 0:i32
pc %4 1:i1
pc %12 1:i1
infer %2


; start LHS (in $1)
%0:i32 = var
%1 = add %0, -256:i32
%2:i32 = var
%3:i32 = var
%4 = sub %2, %3
%5 = ult 255:i32, %4
%6 = slt %3, %2
%7:i32 = zext %6
%8:i32 = var
%9 = and %8, 73728:i32
%10 = eq %9, 0:i32
%11:i32 = zext %10
%12 = and %7, %11
%13 = ne %12, 0:i32
pc %5 1:i1
pc %13 1:i1
infer %1


; start LHS (in $1)
%0:i32 = var
%1 = add %0, -256:i32
%2 = ult 255:i32, %1
%3:i32 = var
%4:i32 = var
%5 = sub %3, %4
%6 = ult 255:i32, %5
%7 = slt %4, %3
%8:i32 = zext %7
%9:i32 = var
%10 = and %9, 73728:i32
%11 = eq %10, 0:i32
%12:i32 = zext %11
%13 = and %8, %12
%14 = ne %13, 0:i32
pc %6 1:i1
pc %14 1:i1
infer %2


; start LHS (in $1)
%0:i32 = var
%1:i32 = var
%2 = sub %0, %1
%3 = and %2, 255:i32
%4 = sub %0, %1
%5 = ult 255:i32, %4
%6 = slt %1, %0
%7:i32 = zext %6
%8:i32 = var
%9 = and %8, 73728:i32
%10 = eq %9, 0:i32
%11:i32 = zext %10
%12 = and %7, %11
%13 = ne %12, 0:i32
pc %5 1:i1
pc %13 1:i1
infer %3


; function: $2

; start LHS (in $2)
%0:i32 = var
%1 = slt 0:i32, %0
infer %1


; start LHS (in $2)
%0:i32 = var
%1:i32 = var
%2 = add %0, %1
infer %2


; start LHS (in $2)
%0:i32 = var
%1:i32 = var
%2 = add %0, %1 (hasExternalUses)
%3 = slt %2, %0
infer %3


; start LHS (in $2)
%0:i32 = var
%1 = slt 0:i32, %0
%2:i32 = zext %1
%3:i32 = var
%4 = add %3, %0 (hasExternalUses)
%5 = slt %4, %3
%6:i32 = zext %5
%7 = and %2, %6
infer %7


; start LHS (in $2)
%0:i32 = var
%1:i32 = var
%2 = add %0, %1 (hasExternalUses)
%3 = slt %2, 0:i32
infer %3


; start LHS (in $2)
%0:i32 = var
%1 = slt 0:i32, %0
%2:i32 = zext %1
%3:i32 = var
%4 = add %3, %0 (hasExternalUses)
%5 = slt %4, %3
%6:i32 = zext %5
%7 = and %2, %6
%8 = slt %4, 0:i32
%9:i32 = zext %8
%10 = or %7, %9
infer %10


; start LHS (in $2)
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3 = add %1, %2 (hasExternalUses)
%4 = slt %0, %3
infer %4


; start LHS (in $2)
%0:i32 = var
%1 = eq %0, 0:i32
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5 = add %3, %4
%6 = slt %2, %5
pc %6 1:i1
infer %1


; function: $3

; function: $4

; start LHS (in $4)
%0:i64 = var
%1 = ult 4294967295:i64, %0
infer %1


; start LHS (in $4)
%0:i32 = var
%1 = add %0, -1:i32
%2:i64 = var
%3 = ult 4294967295:i64, %2
pc %3 1:i1
infer %1


; start LHS (in $4)
%0:i64 = var
%1 = urem %0, 10:i64
%2:i64 = var
%3 = ult 4294967295:i64, %2
pc %3 1:i1
infer %1


; start LHS (in $4)
%0:i32 = var
%1 = and %0, 255:i32
%2:i64 = var
%3 = ult 4294967295:i64, %2
pc %3 1:i1
infer %1


; start LHS (in $4)
%0:i32 = var
%1 = and %0, 255:i32
%2 = or %1, 48:i32
%3:i64 = var
%4 = ult 4294967295:i64, %3
pc %4 1:i1
infer %2


; start LHS (in $4)
%0:i64 = var
%1 = udiv %0, 10:i64
%2:i64 = var
%3 = ult 4294967295:i64, %2
pc %3 1:i1
infer %1


; start LHS (in $4)
%0:i64 = var
%1 = ult 42949672959:i64, %0
%2:i64 = var
%3 = ult 4294967295:i64, %2
pc %3 1:i1
infer %1


; start LHS (in $4)
%0:i32 = var
%1 = add %0, -1:i32
%2 = block 2
%3:i64 = var
%4 = ult 4294967295:i64, %3
blockpc %2 0 %4 1:i1
%5:i32 = zext %4
%6 = eq %5, 0:i32
blockpc %2 1 %6 1:i1
%7:i32 = var
%8:i32 = var
%9 = phi %2, %7, %8
%10 = ne %9, 0:i32
pc %10 1:i1
infer %1


; start LHS (in $4)
%0:i32 = var
%1 = urem %0, 10:i32
%2 = block 2
%3:i64 = var
%4 = ult 4294967295:i64, %3
blockpc %2 0 %4 1:i1
%5:i32 = zext %4
%6 = eq %5, 0:i32
blockpc %2 1 %6 1:i1
%7:i32 = var
%8:i32 = var
%9 = phi %2, %7, %8
%10 = ne %9, 0:i32
pc %10 1:i1
infer %1


; start LHS (in $4)
%0:i32 = var
%1 = urem %0, 10:i32
%2 = or %1, 48:i32
%3 = block 2
%4:i64 = var
%5 = ult 4294967295:i64, %4
blockpc %3 0 %5 1:i1
%6:i32 = zext %5
%7 = eq %6, 0:i32
blockpc %3 1 %7 1:i1
%8:i32 = var
%9:i32 = var
%10 = phi %3, %8, %9
%11 = ne %10, 0:i32
pc %11 1:i1
infer %2


; start LHS (in $4)
%0:i32 = var
%1 = udiv %0, 10:i32
%2 = block 2
%3:i64 = var
%4 = ult 4294967295:i64, %3
blockpc %2 0 %4 1:i1
%5:i32 = zext %4
%6 = eq %5, 0:i32
blockpc %2 1 %6 1:i1
%7:i32 = var
%8:i32 = var
%9 = phi %2, %7, %8
%10 = ne %9, 0:i32
pc %10 1:i1
infer %1


; start LHS (in $4)
%0:i32 = var
%1 = ule 10:i32, %0
%2 = block 2
%3:i64 = var
%4 = ult 4294967295:i64, %3
blockpc %2 0 %4 1:i1
%5:i32 = zext %4
%6 = eq %5, 0:i32
blockpc %2 1 %6 1:i1
%7:i32 = var
%8:i32 = var
%9 = phi %2, %7, %8
%10 = ne %9, 0:i32
pc %10 1:i1
infer %1


; function: $5

; start LHS (in $5)
%0:i32 = var
%1:i32 = var
%2 = add %0, %1
infer %2


; start LHS (in $5)
%0:i32 = var
%1 = and %0, 255:i32
infer %1


; start LHS (in $5)
%0:i32 = var
%1 = sle 67:i32, %0
infer %1


; start LHS (in $5)
%0:i32 = var
%1 = and %0, 3:i32
%2:i32 = var
%3 = sle 67:i32, %2
pc %3 1:i1
infer %1


; start LHS (in $5)
%0:i32 = var
%1 = add %0, 1:i32
%2 = and %0, 3:i32
%3 = ne %2, 0:i32
%4:i32 = var
%5 = sle 67:i32, %4
pc %3 1:i1
pc %5 1:i1
infer %1


; start LHS (in $5)
%0:i32 = var
%1:i32 = var
%2 = add %0, %1 (hasExternalUses)
%3 = and %2, -4:i32
%4 = sle 67:i32, %1
pc %4 1:i1
infer %3


; start LHS (in $5)
%0:i32 = var
%1:i32 = var
%2 = add %0, %1 (hasExternalUses)
%3 = and %2, -4:i32 (hasExternalUses)
%4 = add %3, -64:i32
%5 = sle 67:i32, %1
pc %5 1:i1
infer %4


; start LHS (in $5)
%0:i32 = var
%1 = and %0, 255:i32 (hasExternalUses)
%2 = shl %1, 8:i32
%3:i32 = var
%4 = sle 67:i32, %3
pc %4 1:i1
infer %2


; start LHS (in $5)
%0:i32 = var
%1 = and %0, 255:i32 (hasExternalUses)
%2 = shl %1, 8:i32
%3 = or %1, %2
%4:i32 = var
%5 = sle 67:i32, %4
pc %5 1:i1
infer %3


; start LHS (in $5)
%0:i32 = var
%1 = and %0, 255:i32 (hasExternalUses)
%2 = shl %1, 16:i32
%3:i32 = var
%4 = sle 67:i32, %3
pc %4 1:i1
infer %2


; start LHS (in $5)
%0:i32 = var
%1 = and %0, 255:i32 (hasExternalUses)
%2 = shl %1, 8:i32
%3 = or %1, %2
%4 = shl %1, 16:i32
%5 = or %3, %4
%6:i32 = var
%7 = sle 67:i32, %6
pc %7 1:i1
infer %5


; start LHS (in $5)
%0:i32 = var
%1 = and %0, 255:i32 (hasExternalUses)
%2 = shl %1, 24:i32
%3:i32 = var
%4 = sle 67:i32, %3
pc %4 1:i1
infer %2


; start LHS (in $5)
%0:i32 = var
%1 = and %0, 255:i32 (hasExternalUses)
%2 = shl %1, 8:i32
%3 = or %1, %2
%4 = shl %1, 16:i32
%5 = or %3, %4
%6 = shl %1, 24:i32
%7 = or %5, %6
%8:i32 = var
%9 = sle 67:i32, %8
pc %9 1:i1
infer %7


; start LHS (in $5)
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3 = add %1, %2 (hasExternalUses)
%4 = and %3, -4:i32 (hasExternalUses)
%5 = add %4, -64:i32
%6 = sle %0, %5
%7 = sle 67:i32, %2
pc %7 1:i1
infer %6


; start LHS (in $5)
%0:i32 = var
%1 = sub %0, -64:i32
%2:i32 = var
%3:i32 = var
%4 = add %2, %3
%5 = and %4, -4:i32
%6 = add %5, -64:i32
%7 = sle %0, %6
%8 = sle 67:i32, %3
pc %7 1:i1
pc %8 1:i1
infer %1


; start LHS (in $5)
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3 = add %1, %2 (hasExternalUses)
%4 = and %3, -4:i32 (hasExternalUses)
%5 = slt %0, %4
%6 = sle 67:i32, %2
pc %6 1:i1
infer %5


; start LHS (in $5)
%0:i32 = var
%1 = add %0, 4:i32
%2:i32 = var
%3:i32 = var
%4 = add %2, %3
%5 = and %4, -4:i32
%6 = slt %0, %5
%7 = sle 67:i32, %3
pc %6 1:i1
pc %7 1:i1
infer %1


; start LHS (in $5)
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3 = add %1, %2 (hasExternalUses)
%4 = slt %0, %3
infer %4


; start LHS (in $5)
%0:i32 = var
%1 = add %0, 1:i32
%2:i32 = var
%3:i32 = var
%4 = add %2, %3
%5 = slt %0, %4
pc %5 1:i1
infer %1


; start LHS (in $5)
%0:i32 = var
%1:i32 = var
%2 = add %0, %1 (hasExternalUses)
%3 = sub %2, %1
infer %3


; function: $6

; start LHS (in $6)
%0:i32 = var
%1 = add %0, 16:i32
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = ult %0, 245:i32
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 11:i32
%2 = ult %0, 245:i32
pc %2 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 11:i32
%2 = and %1, -8:i32
%3 = ult %0, 245:i32
pc %3 1:i1
infer %2


; start LHS (in $6)
%0:i32 = var
%1 = ult %0, 11:i32
%2 = ult %0, 245:i32
pc %2 1:i1
infer %1


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = add %1, 11:i32
%3 = and %2, -8:i32 (hasExternalUses)
%4 = phi %0, 16:i32, %3
%5 = lshr %4, 3:i32
%6 = ult %1, 11:i32
blockpc %0 0 %6 1:i1
%7:i32 = zext %6
%8 = eq %7, 0:i32
blockpc %0 1 %8 1:i1
%9 = ult %1, 245:i32
pc %9 1:i1
infer %5


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = add %2, 11:i32
%4 = and %3, -8:i32 (hasExternalUses)
%5 = phi %1, 16:i32, %4
%6 = lshr %5, 3:i32 (hasExternalUses)
%7 = lshr %0, %6
%8 = ult %2, 11:i32
blockpc %1 0 %8 1:i1
%9:i32 = zext %8
%10 = eq %9, 0:i32
blockpc %1 1 %10 1:i1
%11 = ult %2, 245:i32
pc %11 1:i1
infer %7


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = add %2, 11:i32
%4 = and %3, -8:i32 (hasExternalUses)
%5 = phi %1, 16:i32, %4
%6 = lshr %5, 3:i32 (hasExternalUses)
%7 = lshr %0, %6 (hasExternalUses)
%8 = and %7, 3:i32
%9 = ult %2, 11:i32
blockpc %1 0 %9 1:i1
%10:i32 = zext %9
%11 = eq %10, 0:i32
blockpc %1 1 %11 1:i1
%12 = ult %2, 245:i32
pc %12 1:i1
infer %8


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = add %2, 11:i32
%4 = and %3, -8:i32 (hasExternalUses)
%5 = phi %1, 16:i32, %4
%6 = lshr %5, 3:i32 (hasExternalUses)
%7 = lshr %0, %6 (hasExternalUses)
%8 = and %7, 1:i32
%9 = ult %2, 11:i32
blockpc %1 0 %9 1:i1
%10:i32 = zext %9
%11 = eq %10, 0:i32
blockpc %1 1 %11 1:i1
%12 = and %7, 3:i32
%13 = ne %12, 0:i32
%14 = ult %2, 245:i32
pc %13 1:i1
pc %14 1:i1
infer %8


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = add %2, 11:i32
%4 = and %3, -8:i32 (hasExternalUses)
%5 = phi %1, 16:i32, %4
%6 = lshr %5, 3:i32 (hasExternalUses)
%7 = lshr %0, %6 (hasExternalUses)
%8 = and %7, 1:i32
%9 = xor %8, 1:i32
%10 = ult %2, 11:i32
blockpc %1 0 %10 1:i1
%11:i32 = zext %10
%12 = eq %11, 0:i32
blockpc %1 1 %12 1:i1
%13 = and %7, 3:i32
%14 = ne %13, 0:i32
%15 = ult %2, 245:i32
pc %14 1:i1
pc %15 1:i1
infer %9


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = add %2, 11:i32
%4 = and %3, -8:i32 (hasExternalUses)
%5 = phi %1, 16:i32, %4
%6 = lshr %5, 3:i32 (hasExternalUses)
%7 = lshr %0, %6 (hasExternalUses)
%8 = and %7, 1:i32
%9 = xor %8, 1:i32
%10 = add %9, %6
%11 = ult %2, 11:i32
blockpc %1 0 %11 1:i1
%12:i32 = zext %11
%13 = eq %12, 0:i32
blockpc %1 1 %13 1:i1
%14 = and %7, 3:i32
%15 = ne %14, 0:i32
%16 = ult %2, 245:i32
pc %15 1:i1
pc %16 1:i1
infer %10


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = add %2, 11:i32
%4 = and %3, -8:i32 (hasExternalUses)
%5 = phi %1, 16:i32, %4
%6 = lshr %5, 3:i32 (hasExternalUses)
%7 = lshr %0, %6 (hasExternalUses)
%8 = and %7, 1:i32
%9 = xor %8, 1:i32
%10 = add %9, %6 (hasExternalUses)
%11 = shl %10, 3:i32
%12 = ult %2, 11:i32
blockpc %1 0 %12 1:i1
%13:i32 = zext %12
%14 = eq %13, 0:i32
blockpc %1 1 %14 1:i1
%15 = and %7, 3:i32
%16 = ne %15, 0:i32
%17 = ult %2, 245:i32
pc %16 1:i1
pc %17 1:i1
infer %11


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = and %2, -8:i32 (hasExternalUses)
%4 = phi %1, 16:i32, %3
%5 = lshr %4, 3:i32 (hasExternalUses)
%6 = lshr %0, %5 (hasExternalUses)
%7 = and %6, 1:i32
%8 = xor %7, 1:i32
%9 = add %8, %5 (hasExternalUses)
%10 = shl %9, 3:i32
%11 = add %10, 3996:i32
%12:i32 = var
%13 = ult %12, 11:i32
blockpc %1 0 %13 1:i1
%14:i32 = zext %13
%15 = eq %14, 0:i32
blockpc %1 1 %15 1:i1
%16 = and %6, 3:i32
%17 = ne %16, 0:i32
%18 = ult %12, 245:i32
pc %17 1:i1
pc %18 1:i1
infer %11


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = phi %1, 16:i32, %2
%4 = lshr %3, 3:i32 (hasExternalUses)
%5 = lshr %0, %4 (hasExternalUses)
%6 = and %5, 1:i32
%7 = xor %6, 1:i32
%8 = add %7, %4 (hasExternalUses)
%9 = shl %8, 3:i32
%10 = add %9, 3996:i32 (hasExternalUses)
%11 = add %10, 8:i32
%12:i32 = var
%13 = ult %12, 11:i32
blockpc %1 0 %13 1:i1
%14:i32 = zext %13
%15 = eq %14, 0:i32
blockpc %1 1 %15 1:i1
%16 = and %5, 3:i32
%17 = ne %16, 0:i32
%18 = ult %12, 245:i32
pc %17 1:i1
pc %18 1:i1
infer %11


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 8:i32
%2:i32 = var
%3 = block 2
%4:i32 = var
%5 = ult %4, 11:i32
blockpc %3 0 %5 1:i1
%6:i32 = zext %5
%7 = eq %6, 0:i32
blockpc %3 1 %7 1:i1
%8 = add %4, 11:i32
%9 = and %8, -8:i32
%10 = phi %3, 16:i32, %9
%11 = lshr %10, 3:i32
%12 = lshr %2, %11
%13 = and %12, 3:i32
%14 = ne %13, 0:i32
%15 = ult %4, 245:i32
pc %14 1:i1
pc %15 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = block 2
%3:i32 = var
%4 = phi %2, 16:i32, %3
%5 = lshr %4, 3:i32 (hasExternalUses)
%6 = lshr %1, %5 (hasExternalUses)
%7 = and %6, 1:i32
%8 = xor %7, 1:i32
%9 = add %8, %5 (hasExternalUses)
%10 = shl %9, 3:i32
%11 = add %10, 3996:i32 (hasExternalUses)
%12 = eq %0, %11
%13:i32 = var
%14 = ult %13, 11:i32
blockpc %2 0 %14 1:i1
%15:i32 = zext %14
%16 = eq %15, 0:i32
blockpc %2 1 %16 1:i1
%17 = and %6, 3:i32
%18 = ne %17, 0:i32
%19 = ult %13, 245:i32
pc %18 1:i1
pc %19 1:i1
infer %12


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = add %2, 11:i32
%4 = and %3, -8:i32 (hasExternalUses)
%5 = phi %1, 16:i32, %4
%6 = lshr %5, 3:i32 (hasExternalUses)
%7 = lshr %0, %6 (hasExternalUses)
%8 = and %7, 1:i32
%9 = xor %8, 1:i32
%10 = add %9, %6 (hasExternalUses)
%11 = shl 1:i32, %10
%12 = ult %2, 11:i32
blockpc %1 0 %12 1:i1
%13:i32 = zext %12
%14 = eq %13, 0:i32
blockpc %1 1 %14 1:i1
%15:i32 = var
%16 = shl %10, 3:i32
%17 = add %16, 3996:i32
%18 = eq %15, %17
%19 = and %7, 3:i32
%20 = ne %19, 0:i32
%21 = ult %2, 245:i32
pc %18 1:i1
pc %20 1:i1
pc %21 1:i1
infer %11


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = and %2, -8:i32 (hasExternalUses)
%4 = phi %1, 16:i32, %3
%5 = lshr %4, 3:i32 (hasExternalUses)
%6 = lshr %0, %5 (hasExternalUses)
%7 = and %6, 1:i32
%8 = xor %7, 1:i32
%9 = add %8, %5 (hasExternalUses)
%10 = shl 1:i32, %9
%11 = xor %10, -1:i32
%12:i32 = var
%13 = ult %12, 11:i32
blockpc %1 0 %13 1:i1
%14:i32 = zext %13
%15 = eq %14, 0:i32
blockpc %1 1 %15 1:i1
%16:i32 = var
%17 = shl %9, 3:i32
%18 = add %17, 3996:i32
%19 = eq %16, %18
%20 = and %6, 3:i32
%21 = ne %20, 0:i32
%22 = ult %12, 245:i32
pc %19 1:i1
pc %21 1:i1
pc %22 1:i1
infer %11


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = phi %1, 16:i32, %2
%4 = lshr %3, 3:i32 (hasExternalUses)
%5 = lshr %0, %4 (hasExternalUses)
%6 = and %5, 1:i32
%7 = xor %6, 1:i32
%8 = add %7, %4 (hasExternalUses)
%9 = shl 1:i32, %8
%10 = xor %9, -1:i32
%11 = and %0, %10
%12:i32 = var
%13 = ult %12, 11:i32
blockpc %1 0 %13 1:i1
%14:i32 = zext %13
%15 = eq %14, 0:i32
blockpc %1 1 %15 1:i1
%16:i32 = var
%17 = shl %8, 3:i32
%18 = add %17, 3996:i32
%19 = eq %16, %18
%20 = and %5, 3:i32
%21 = ne %20, 0:i32
%22 = ult %12, 245:i32
pc %19 1:i1
pc %21 1:i1
pc %22 1:i1
infer %11


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = add %2, 11:i32
%4 = and %3, -8:i32 (hasExternalUses)
%5 = phi %1, 16:i32, %4
%6 = lshr %5, 3:i32 (hasExternalUses)
%7 = lshr %0, %6 (hasExternalUses)
%8 = and %7, 1:i32
%9 = xor %8, 1:i32
%10 = add %9, %6 (hasExternalUses)
%11 = shl %10, 3:i32
%12 = ult %2, 11:i32
blockpc %1 0 %12 1:i1
%13:i32 = zext %12
%14 = eq %13, 0:i32
blockpc %1 1 %14 1:i1
%15 = and %7, 3:i32
%16 = ne %15, 0:i32
%17 = ult %2, 245:i32
pc %16 1:i1
pc %17 1:i1
infer %11


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = and %2, -8:i32 (hasExternalUses)
%4 = phi %1, 16:i32, %3
%5 = lshr %4, 3:i32 (hasExternalUses)
%6 = lshr %0, %5 (hasExternalUses)
%7 = and %6, 1:i32
%8 = xor %7, 1:i32
%9 = add %8, %5 (hasExternalUses)
%10 = shl %9, 3:i32 (hasExternalUses)
%11 = or %10, 3:i32
%12:i32 = var
%13 = ult %12, 11:i32
blockpc %1 0 %13 1:i1
%14:i32 = zext %13
%15 = eq %14, 0:i32
blockpc %1 1 %15 1:i1
%16 = and %6, 3:i32
%17 = ne %16, 0:i32
%18 = ult %12, 245:i32
pc %17 1:i1
pc %18 1:i1
infer %11


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = block 2
%3:i32 = var
%4 = and %3, -8:i32 (hasExternalUses)
%5 = phi %2, 16:i32, %4
%6 = lshr %5, 3:i32 (hasExternalUses)
%7 = lshr %1, %6 (hasExternalUses)
%8 = and %7, 1:i32
%9 = xor %8, 1:i32
%10 = add %9, %6 (hasExternalUses)
%11 = shl %10, 3:i32 (hasExternalUses)
%12 = add %0, %11
%13:i32 = var
%14 = ult %13, 11:i32
blockpc %2 0 %14 1:i1
%15:i32 = zext %14
%16 = eq %15, 0:i32
blockpc %2 1 %16 1:i1
%17 = and %7, 3:i32
%18 = ne %17, 0:i32
%19 = ult %13, 245:i32
pc %18 1:i1
pc %19 1:i1
infer %12


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = block 2
%3:i32 = var
%4 = phi %2, 16:i32, %3
%5 = lshr %4, 3:i32 (hasExternalUses)
%6 = lshr %1, %5 (hasExternalUses)
%7 = and %6, 1:i32
%8 = xor %7, 1:i32
%9 = add %8, %5 (hasExternalUses)
%10 = shl %9, 3:i32 (hasExternalUses)
%11 = add %0, %10
%12 = add %11, 4:i32
%13:i32 = var
%14 = ult %13, 11:i32
blockpc %2 0 %14 1:i1
%15:i32 = zext %14
%16 = eq %15, 0:i32
blockpc %2 1 %16 1:i1
%17 = and %6, 3:i32
%18 = ne %17, 0:i32
%19 = ult %13, 245:i32
pc %18 1:i1
pc %19 1:i1
infer %12


; start LHS (in $6)
%0:i32 = var
%1 = or %0, 1:i32
%2:i32 = var
%3 = block 2
%4:i32 = var
%5 = ult %4, 11:i32
blockpc %3 0 %5 1:i1
%6:i32 = zext %5
%7 = eq %6, 0:i32
blockpc %3 1 %7 1:i1
%8 = add %4, 11:i32
%9 = and %8, -8:i32
%10 = phi %3, 16:i32, %9
%11 = lshr %10, 3:i32
%12 = lshr %2, %11
%13 = and %12, 3:i32
%14 = ne %13, 0:i32
%15 = ult %4, 245:i32
pc %14 1:i1
pc %15 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = add %2, 11:i32
%4 = and %3, -8:i32 (hasExternalUses)
%5 = phi %1, 16:i32, %4
%6 = ult %0, %5
%7 = ult %2, 11:i32
blockpc %1 0 %7 1:i1
%8:i32 = zext %7
%9 = eq %8, 0:i32
blockpc %1 1 %9 1:i1
%10 = ult %2, 245:i32
pc %10 1:i1
infer %6


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = add %2, 11:i32
%4 = and %3, -8:i32 (hasExternalUses)
%5 = phi %1, 16:i32, %4
%6 = lshr %5, 3:i32 (hasExternalUses)
%7 = lshr %0, %6 (hasExternalUses)
%8 = shl %7, %6
%9 = ult %2, 11:i32
blockpc %1 0 %9 1:i1
%10:i32 = zext %9
%11 = eq %10, 0:i32
blockpc %1 1 %11 1:i1
%12 = ne %7, 0:i32
%13:i32 = var
%14 = phi %1, 16:i32, %4
%15 = ult %13, %14
%16 = ult %2, 245:i32
pc %12 1:i1
pc %15 1:i1
pc %16 1:i1
infer %8


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = add %1, 11:i32
%3 = and %2, -8:i32 (hasExternalUses)
%4 = phi %0, 16:i32, %3
%5 = lshr %4, 3:i32 (hasExternalUses)
%6 = shl 2:i32, %5
%7 = ult %1, 11:i32
blockpc %0 0 %7 1:i1
%8:i32 = zext %7
%9 = eq %8, 0:i32
blockpc %0 1 %9 1:i1
%10:i32 = var
%11 = lshr %10, %5
%12 = ne %11, 0:i32
%13:i32 = var
%14 = phi %0, 16:i32, %3
%15 = ult %13, %14
%16 = ult %1, 245:i32
pc %12 1:i1
pc %15 1:i1
pc %16 1:i1
infer %6


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = add %1, 11:i32
%3 = and %2, -8:i32 (hasExternalUses)
%4 = phi %0, 16:i32, %3
%5 = lshr %4, 3:i32 (hasExternalUses)
%6 = shl 2:i32, %5 (hasExternalUses)
%7 = sub 0:i32, %6
%8 = ult %1, 11:i32
blockpc %0 0 %8 1:i1
%9:i32 = zext %8
%10 = eq %9, 0:i32
blockpc %0 1 %10 1:i1
%11:i32 = var
%12 = lshr %11, %5
%13 = ne %12, 0:i32
%14:i32 = var
%15 = phi %0, 16:i32, %3
%16 = ult %14, %15
%17 = ult %1, 245:i32
pc %13 1:i1
pc %16 1:i1
pc %17 1:i1
infer %7


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = add %1, 11:i32
%3 = and %2, -8:i32 (hasExternalUses)
%4 = phi %0, 16:i32, %3
%5 = lshr %4, 3:i32 (hasExternalUses)
%6 = shl 2:i32, %5
%7 = sub 0:i32, %6
%8 = or %6, %7
%9 = ult %1, 11:i32
blockpc %0 0 %9 1:i1
%10:i32 = zext %9
%11 = eq %10, 0:i32
blockpc %0 1 %11 1:i1
%12:i32 = var
%13 = lshr %12, %5
%14 = ne %13, 0:i32
%15:i32 = var
%16 = phi %0, 16:i32, %3
%17 = ult %15, %16
%18 = ult %1, 245:i32
pc %14 1:i1
pc %17 1:i1
pc %18 1:i1
infer %8


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = add %2, 11:i32
%4 = and %3, -8:i32 (hasExternalUses)
%5 = phi %1, 16:i32, %4
%6 = lshr %5, 3:i32 (hasExternalUses)
%7 = lshr %0, %6 (hasExternalUses)
%8 = shl %7, %6
%9 = shl 2:i32, %6
%10 = sub 0:i32, %9
%11 = or %9, %10
%12 = and %8, %11
%13 = ult %2, 11:i32
blockpc %1 0 %13 1:i1
%14:i32 = zext %13
%15 = eq %14, 0:i32
blockpc %1 1 %15 1:i1
%16 = ne %7, 0:i32
%17:i32 = var
%18 = phi %1, 16:i32, %4
%19 = ult %17, %18
%20 = ult %2, 245:i32
pc %16 1:i1
pc %19 1:i1
pc %20 1:i1
infer %12


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = add %2, 11:i32
%4 = and %3, -8:i32 (hasExternalUses)
%5 = phi %1, 16:i32, %4
%6 = lshr %5, 3:i32 (hasExternalUses)
%7 = lshr %0, %6 (hasExternalUses)
%8 = shl %7, %6
%9 = shl 2:i32, %6
%10 = sub 0:i32, %9
%11 = or %9, %10
%12 = and %8, %11 (hasExternalUses)
%13 = sub 0:i32, %12
%14 = ult %2, 11:i32
blockpc %1 0 %14 1:i1
%15:i32 = zext %14
%16 = eq %15, 0:i32
blockpc %1 1 %16 1:i1
%17 = ne %7, 0:i32
%18:i32 = var
%19 = phi %1, 16:i32, %4
%20 = ult %18, %19
%21 = ult %2, 245:i32
pc %17 1:i1
pc %20 1:i1
pc %21 1:i1
infer %13


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = add %2, 11:i32
%4 = and %3, -8:i32 (hasExternalUses)
%5 = phi %1, 16:i32, %4
%6 = lshr %5, 3:i32 (hasExternalUses)
%7 = lshr %0, %6 (hasExternalUses)
%8 = shl %7, %6
%9 = shl 2:i32, %6
%10 = sub 0:i32, %9
%11 = or %9, %10
%12 = and %8, %11
%13 = sub 0:i32, %12
%14 = and %12, %13
%15 = ult %2, 11:i32
blockpc %1 0 %15 1:i1
%16:i32 = zext %15
%17 = eq %16, 0:i32
blockpc %1 1 %17 1:i1
%18 = ne %7, 0:i32
%19:i32 = var
%20 = phi %1, 16:i32, %4
%21 = ult %19, %20
%22 = ult %2, 245:i32
pc %18 1:i1
pc %21 1:i1
pc %22 1:i1
infer %14


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = add %2, 11:i32
%4 = and %3, -8:i32 (hasExternalUses)
%5 = phi %1, 16:i32, %4
%6 = lshr %5, 3:i32 (hasExternalUses)
%7 = lshr %0, %6 (hasExternalUses)
%8 = shl %7, %6
%9 = shl 2:i32, %6
%10 = sub 0:i32, %9
%11 = or %9, %10
%12 = and %8, %11
%13 = sub 0:i32, %12
%14 = and %12, %13
%15 = add %14, -1:i32
%16 = ult %2, 11:i32
blockpc %1 0 %16 1:i1
%17:i32 = zext %16
%18 = eq %17, 0:i32
blockpc %1 1 %18 1:i1
%19 = ne %7, 0:i32
%20:i32 = var
%21 = phi %1, 16:i32, %4
%22 = ult %20, %21
%23 = ult %2, 245:i32
pc %19 1:i1
pc %22 1:i1
pc %23 1:i1
infer %15


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = and %2, -8:i32 (hasExternalUses)
%4 = phi %1, 16:i32, %3
%5 = lshr %4, 3:i32 (hasExternalUses)
%6 = lshr %0, %5 (hasExternalUses)
%7 = shl %6, %5
%8 = shl 2:i32, %5
%9 = sub 0:i32, %8
%10 = or %8, %9
%11 = and %7, %10
%12 = sub 0:i32, %11
%13 = and %11, %12
%14 = add %13, -1:i32 (hasExternalUses)
%15 = lshr %14, 12:i32
%16:i32 = var
%17 = ult %16, 11:i32
blockpc %1 0 %17 1:i1
%18:i32 = zext %17
%19 = eq %18, 0:i32
blockpc %1 1 %19 1:i1
%20 = ne %6, 0:i32
%21:i32 = var
%22 = phi %1, 16:i32, %3
%23 = ult %21, %22
%24 = ult %16, 245:i32
pc %20 1:i1
pc %23 1:i1
pc %24 1:i1
infer %15


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = phi %1, 16:i32, %2
%4 = lshr %3, 3:i32 (hasExternalUses)
%5 = lshr %0, %4 (hasExternalUses)
%6 = shl %5, %4
%7 = shl 2:i32, %4
%8 = sub 0:i32, %7
%9 = or %7, %8
%10 = and %6, %9
%11 = sub 0:i32, %10
%12 = and %10, %11
%13 = add %12, -1:i32 (hasExternalUses)
%14 = lshr %13, 12:i32
%15 = and %14, 16:i32
%16:i32 = var
%17 = ult %16, 11:i32
blockpc %1 0 %17 1:i1
%18:i32 = zext %17
%19 = eq %18, 0:i32
blockpc %1 1 %19 1:i1
%20 = ne %5, 0:i32
%21:i32 = var
%22 = phi %1, 16:i32, %2
%23 = ult %21, %22
%24 = ult %16, 245:i32
pc %20 1:i1
pc %23 1:i1
pc %24 1:i1
infer %15


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = and %2, -8:i32 (hasExternalUses)
%4 = phi %1, 16:i32, %3
%5 = lshr %4, 3:i32 (hasExternalUses)
%6 = lshr %0, %5 (hasExternalUses)
%7 = shl %6, %5
%8 = shl 2:i32, %5
%9 = sub 0:i32, %8
%10 = or %8, %9
%11 = and %7, %10
%12 = sub 0:i32, %11
%13 = and %11, %12
%14 = add %13, -1:i32
%15 = lshr %14, 12:i32
%16 = and %15, 16:i32 (hasExternalUses)
%17 = lshr %14, %16
%18:i32 = var
%19 = ult %18, 11:i32
blockpc %1 0 %19 1:i1
%20:i32 = zext %19
%21 = eq %20, 0:i32
blockpc %1 1 %21 1:i1
%22 = ne %6, 0:i32
%23:i32 = var
%24 = phi %1, 16:i32, %3
%25 = ult %23, %24
%26 = ult %18, 245:i32
pc %22 1:i1
pc %25 1:i1
pc %26 1:i1
infer %17


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = phi %1, 16:i32, %2
%4 = lshr %3, 3:i32 (hasExternalUses)
%5 = lshr %0, %4 (hasExternalUses)
%6 = shl %5, %4
%7 = shl 2:i32, %4
%8 = sub 0:i32, %7
%9 = or %7, %8
%10 = and %6, %9
%11 = sub 0:i32, %10
%12 = and %10, %11
%13 = add %12, -1:i32
%14 = lshr %13, 12:i32
%15 = and %14, 16:i32 (hasExternalUses)
%16 = lshr %13, %15 (hasExternalUses)
%17 = lshr %16, 5:i32
%18:i32 = var
%19 = ult %18, 11:i32
blockpc %1 0 %19 1:i1
%20:i32 = zext %19
%21 = eq %20, 0:i32
blockpc %1 1 %21 1:i1
%22 = ne %5, 0:i32
%23:i32 = var
%24 = phi %1, 16:i32, %2
%25 = ult %23, %24
%26 = ult %18, 245:i32
pc %22 1:i1
pc %25 1:i1
pc %26 1:i1
infer %17


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = phi %1, 16:i32, %2
%4 = lshr %3, 3:i32 (hasExternalUses)
%5 = lshr %0, %4 (hasExternalUses)
%6 = shl %5, %4
%7 = shl 2:i32, %4
%8 = sub 0:i32, %7
%9 = or %7, %8
%10 = and %6, %9
%11 = sub 0:i32, %10
%12 = and %10, %11
%13 = add %12, -1:i32
%14 = lshr %13, 12:i32
%15 = and %14, 16:i32 (hasExternalUses)
%16 = lshr %13, %15 (hasExternalUses)
%17 = lshr %16, 5:i32
%18 = and %17, 8:i32
%19:i32 = var
%20 = ult %19, 11:i32
blockpc %1 0 %20 1:i1
%21:i32 = zext %20
%22 = eq %21, 0:i32
blockpc %1 1 %22 1:i1
%23 = ne %5, 0:i32
%24:i32 = var
%25 = phi %1, 16:i32, %2
%26 = ult %24, %25
%27 = ult %19, 245:i32
pc %23 1:i1
pc %26 1:i1
pc %27 1:i1
infer %18


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = lshr %0, %1 (hasExternalUses)
%3 = shl %2, %1
%4 = shl 2:i32, %1
%5 = sub 0:i32, %4
%6 = or %4, %5
%7 = and %3, %6
%8 = sub 0:i32, %7
%9 = and %7, %8
%10 = add %9, -1:i32
%11 = lshr %10, 12:i32
%12 = and %11, 16:i32
%13 = lshr %10, %12 (hasExternalUses)
%14 = lshr %13, 5:i32
%15 = and %14, 8:i32 (hasExternalUses)
%16 = or %15, %12
%17 = ne %2, 0:i32
%18:i32 = var
%19 = block 2
%20:i32 = var
%21 = ult %20, 11:i32
blockpc %19 0 %21 1:i1
%22:i32 = zext %21
%23 = eq %22, 0:i32
blockpc %19 1 %23 1:i1
%24 = add %20, 11:i32
%25 = and %24, -8:i32
%26 = phi %19, 16:i32, %25
%27 = ult %18, %26
%28:i32 = var
pc %17 1:i1
pc %27 1:i1
pc %28 1:i1
infer %16


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = phi %1, 16:i32, %2
%4 = lshr %3, 3:i32 (hasExternalUses)
%5 = lshr %0, %4 (hasExternalUses)
%6 = shl %5, %4
%7 = shl 2:i32, %4
%8 = sub 0:i32, %7
%9 = or %7, %8
%10 = and %6, %9
%11 = sub 0:i32, %10
%12 = and %10, %11
%13 = add %12, -1:i32
%14 = lshr %13, 12:i32
%15 = and %14, 16:i32 (hasExternalUses)
%16 = lshr %13, %15
%17 = lshr %16, 5:i32
%18 = and %17, 8:i32 (hasExternalUses)
%19 = lshr %16, %18
%20:i32 = var
%21 = ult %20, 11:i32
blockpc %1 0 %21 1:i1
%22:i32 = zext %21
%23 = eq %22, 0:i32
blockpc %1 1 %23 1:i1
%24 = ne %5, 0:i32
%25:i32 = var
%26 = phi %1, 16:i32, %2
%27 = ult %25, %26
%28:i32 = var
pc %24 1:i1
pc %27 1:i1
pc %28 1:i1
infer %19


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = phi %1, 16:i32, %2
%4 = lshr %3, 3:i32 (hasExternalUses)
%5 = lshr %0, %4 (hasExternalUses)
%6 = shl %5, %4
%7 = shl 2:i32, %4
%8 = sub 0:i32, %7
%9 = or %7, %8
%10 = and %6, %9
%11 = sub 0:i32, %10
%12 = and %10, %11
%13 = add %12, -1:i32
%14 = lshr %13, 12:i32
%15 = and %14, 16:i32 (hasExternalUses)
%16 = lshr %13, %15
%17 = lshr %16, 5:i32
%18 = and %17, 8:i32 (hasExternalUses)
%19 = lshr %16, %18 (hasExternalUses)
%20 = lshr %19, 2:i32
%21:i32 = var
%22 = ult %21, 11:i32
blockpc %1 0 %22 1:i1
%23:i32 = zext %22
%24 = eq %23, 0:i32
blockpc %1 1 %24 1:i1
%25 = ne %5, 0:i32
%26:i32 = var
%27 = phi %1, 16:i32, %2
%28 = ult %26, %27
%29:i32 = var
pc %25 1:i1
pc %28 1:i1
pc %29 1:i1
infer %20


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = lshr %0, %1 (hasExternalUses)
%3 = shl %2, %1
%4 = shl 2:i32, %1
%5 = sub 0:i32, %4
%6 = or %4, %5
%7 = and %3, %6
%8 = sub 0:i32, %7
%9 = and %7, %8
%10 = add %9, -1:i32
%11 = lshr %10, 12:i32
%12 = and %11, 16:i32 (hasExternalUses)
%13 = lshr %10, %12
%14 = lshr %13, 5:i32
%15 = and %14, 8:i32 (hasExternalUses)
%16 = lshr %13, %15 (hasExternalUses)
%17 = lshr %16, 2:i32
%18 = and %17, 4:i32
%19 = ne %2, 0:i32
%20:i32 = var
%21 = block 2
%22:i32 = var
%23 = ult %22, 11:i32
blockpc %21 0 %23 1:i1
%24:i32 = zext %23
%25 = eq %24, 0:i32
blockpc %21 1 %25 1:i1
%26 = add %22, 11:i32
%27 = and %26, -8:i32
%28 = phi %21, 16:i32, %27
%29 = ult %20, %28
%30:i32 = var
pc %19 1:i1
pc %29 1:i1
pc %30 1:i1
infer %18


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = shl %0, %1
%3:i32 = var
%4:i32 = var
%5 = or %3, %4
%6 = and %2, %5
%7 = sub 0:i32, %6
%8 = and %6, %7
%9 = add %8, -1:i32
%10 = lshr %9, 12:i32
%11 = and %10, 16:i32
%12 = lshr %9, %11
%13 = lshr %12, 5:i32
%14 = and %13, 8:i32
%15 = or %14, %11
%16 = lshr %12, %14 (hasExternalUses)
%17 = lshr %16, 2:i32
%18 = and %17, 4:i32 (hasExternalUses)
%19 = or %15, %18
%20 = ne %0, 0:i32
%21:i32 = var
%22 = block 2
%23:i32 = var
%24 = ult %23, 11:i32
blockpc %22 0 %24 1:i1
%25:i32 = zext %24
%26 = eq %25, 0:i32
blockpc %22 1 %26 1:i1
%27 = add %23, 11:i32
%28 = and %27, -8:i32
%29 = phi %22, 16:i32, %28
%30 = ult %21, %29
%31:i32 = var
pc %20 1:i1
pc %30 1:i1
pc %31 1:i1
infer %19


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = phi %1, 16:i32, %2
%4 = lshr %3, 3:i32 (hasExternalUses)
%5 = lshr %0, %4 (hasExternalUses)
%6 = shl %5, %4
%7 = shl 2:i32, %4
%8 = sub 0:i32, %7
%9 = or %7, %8
%10 = and %6, %9
%11 = sub 0:i32, %10
%12 = and %10, %11
%13 = add %12, -1:i32
%14 = lshr %13, 12:i32
%15 = and %14, 16:i32 (hasExternalUses)
%16 = lshr %13, %15
%17 = lshr %16, 5:i32
%18 = and %17, 8:i32 (hasExternalUses)
%19 = lshr %16, %18
%20 = lshr %19, 2:i32
%21 = and %20, 4:i32 (hasExternalUses)
%22 = lshr %19, %21
%23:i32 = var
%24 = ult %23, 11:i32
blockpc %1 0 %24 1:i1
%25:i32 = zext %24
%26 = eq %25, 0:i32
blockpc %1 1 %26 1:i1
%27 = ne %5, 0:i32
%28:i32 = var
%29:i32 = var
pc %27 1:i1
pc %28 1:i1
pc %29 1:i1
infer %22


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = lshr %0, %1 (hasExternalUses)
%3 = shl %2, %1
%4 = shl 2:i32, %1
%5 = sub 0:i32, %4
%6 = or %4, %5
%7 = and %3, %6
%8 = sub 0:i32, %7
%9 = and %7, %8
%10 = add %9, -1:i32
%11 = lshr %10, 12:i32
%12 = and %11, 16:i32 (hasExternalUses)
%13 = lshr %10, %12
%14 = lshr %13, 5:i32
%15 = and %14, 8:i32 (hasExternalUses)
%16 = lshr %13, %15
%17 = lshr %16, 2:i32
%18 = and %17, 4:i32 (hasExternalUses)
%19 = lshr %16, %18 (hasExternalUses)
%20 = lshr %19, 1:i32
%21 = ne %2, 0:i32
%22:i32 = var
%23 = block 2
%24:i32 = var
%25 = ult %24, 11:i32
blockpc %23 0 %25 1:i1
%26:i32 = zext %25
%27 = eq %26, 0:i32
blockpc %23 1 %27 1:i1
%28:i32 = var
%29 = phi %23, 16:i32, %28
%30 = ult %22, %29
%31:i32 = var
pc %21 1:i1
pc %30 1:i1
pc %31 1:i1
infer %20


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = shl %0, %1
%3:i32 = var
%4:i32 = var
%5 = or %3, %4
%6 = and %2, %5
%7 = sub 0:i32, %6
%8 = and %6, %7
%9 = add %8, -1:i32
%10 = lshr %9, 12:i32
%11 = and %10, 16:i32 (hasExternalUses)
%12 = lshr %9, %11
%13 = lshr %12, 5:i32
%14 = and %13, 8:i32 (hasExternalUses)
%15 = lshr %12, %14
%16 = lshr %15, 2:i32
%17 = and %16, 4:i32 (hasExternalUses)
%18 = lshr %15, %17 (hasExternalUses)
%19 = lshr %18, 1:i32
%20 = and %19, 2:i32
%21 = ne %0, 0:i32
%22:i32 = var
%23 = block 2
%24:i32 = var
%25 = ult %24, 11:i32
blockpc %23 0 %25 1:i1
%26:i32 = zext %25
%27 = eq %26, 0:i32
blockpc %23 1 %27 1:i1
%28:i32 = var
%29 = phi %23, 16:i32, %28
%30 = ult %22, %29
%31:i32 = var
pc %21 1:i1
pc %30 1:i1
pc %31 1:i1
infer %20


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = and %0, %1
%3 = sub 0:i32, %2
%4 = and %2, %3
%5 = add %4, -1:i32
%6 = lshr %5, 12:i32
%7 = and %6, 16:i32
%8 = lshr %5, %7
%9 = lshr %8, 5:i32
%10 = and %9, 8:i32
%11 = or %10, %7
%12 = lshr %8, %10
%13 = lshr %12, 2:i32
%14 = and %13, 4:i32
%15 = or %11, %14
%16 = lshr %12, %14 (hasExternalUses)
%17 = lshr %16, 1:i32
%18 = and %17, 2:i32 (hasExternalUses)
%19 = or %15, %18
%20:i32 = var
%21 = block 2
%22:i32 = var
%23 = ult %22, 11:i32
blockpc %21 0 %23 1:i1
%24:i32 = zext %23
%25 = eq %24, 0:i32
blockpc %21 1 %25 1:i1
%26 = add %22, 11:i32
%27 = and %26, -8:i32
%28 = phi %21, 16:i32, %27
%29 = lshr %28, 3:i32
%30 = lshr %20, %29
%31 = ne %30, 0:i32
%32:i32 = var
%33:i32 = var
pc %31 1:i1
pc %32 1:i1
pc %33 1:i1
infer %19


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = lshr %0, %1 (hasExternalUses)
%3 = shl %2, %1
%4 = shl 2:i32, %1
%5 = sub 0:i32, %4
%6 = or %4, %5
%7 = and %3, %6
%8 = sub 0:i32, %7
%9 = and %7, %8
%10 = add %9, -1:i32
%11 = lshr %10, 12:i32
%12 = and %11, 16:i32 (hasExternalUses)
%13 = lshr %10, %12
%14 = lshr %13, 5:i32
%15 = and %14, 8:i32 (hasExternalUses)
%16 = lshr %13, %15
%17 = lshr %16, 2:i32
%18 = and %17, 4:i32 (hasExternalUses)
%19 = lshr %16, %18
%20 = lshr %19, 1:i32
%21 = and %20, 2:i32 (hasExternalUses)
%22 = lshr %19, %21
%23 = ne %2, 0:i32
%24:i32 = var
%25 = block 2
%26:i32 = var
%27 = ult %26, 11:i32
blockpc %25 0 %27 1:i1
%28:i32 = zext %27
%29 = eq %28, 0:i32
blockpc %25 1 %29 1:i1
%30:i32 = var
%31 = phi %25, 16:i32, %30
%32 = ult %24, %31
%33:i32 = var
pc %23 1:i1
pc %32 1:i1
pc %33 1:i1
infer %22


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = shl %0, %1
%3:i32 = var
%4:i32 = var
%5 = or %3, %4
%6 = and %2, %5
%7 = sub 0:i32, %6
%8 = and %6, %7
%9 = add %8, -1:i32
%10 = lshr %9, 12:i32
%11 = and %10, 16:i32 (hasExternalUses)
%12 = lshr %9, %11
%13 = lshr %12, 5:i32
%14 = and %13, 8:i32 (hasExternalUses)
%15 = lshr %12, %14
%16 = lshr %15, 2:i32
%17 = and %16, 4:i32 (hasExternalUses)
%18 = lshr %15, %17
%19 = lshr %18, 1:i32
%20 = and %19, 2:i32 (hasExternalUses)
%21 = lshr %18, %20 (hasExternalUses)
%22 = lshr %21, 1:i32
%23 = ne %0, 0:i32
%24:i32 = var
%25 = block 2
%26:i32 = var
%27 = ult %26, 11:i32
blockpc %25 0 %27 1:i1
%28:i32 = zext %27
%29 = eq %28, 0:i32
blockpc %25 1 %29 1:i1
%30:i32 = var
%31 = phi %25, 16:i32, %30
%32 = ult %24, %31
%33:i32 = var
pc %23 1:i1
pc %32 1:i1
pc %33 1:i1
infer %22


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = and %0, %1
%3 = sub 0:i32, %2
%4 = and %2, %3
%5 = add %4, -1:i32
%6 = lshr %5, 12:i32
%7 = and %6, 16:i32 (hasExternalUses)
%8 = lshr %5, %7
%9 = lshr %8, 5:i32
%10 = and %9, 8:i32 (hasExternalUses)
%11 = lshr %8, %10
%12 = lshr %11, 2:i32
%13 = and %12, 4:i32 (hasExternalUses)
%14 = lshr %11, %13
%15 = lshr %14, 1:i32
%16 = and %15, 2:i32 (hasExternalUses)
%17 = lshr %14, %16 (hasExternalUses)
%18 = lshr %17, 1:i32
%19 = and %18, 1:i32
%20:i32 = var
%21 = block 2
%22:i32 = var
%23 = ult %22, 11:i32
blockpc %21 0 %23 1:i1
%24:i32 = zext %23
%25 = eq %24, 0:i32
blockpc %21 1 %25 1:i1
%26 = add %22, 11:i32
%27 = and %26, -8:i32
%28 = phi %21, 16:i32, %27
%29 = lshr %28, 3:i32
%30 = lshr %20, %29
%31 = ne %30, 0:i32
%32:i32 = var
%33:i32 = var
pc %31 1:i1
pc %32 1:i1
pc %33 1:i1
infer %19


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = and %0, %1
%3 = add %2, -1:i32
%4 = lshr %3, 12:i32
%5 = and %4, 16:i32
%6 = lshr %3, %5
%7 = lshr %6, 5:i32
%8 = and %7, 8:i32
%9 = or %8, %5
%10 = lshr %6, %8
%11 = lshr %10, 2:i32
%12 = and %11, 4:i32
%13 = or %9, %12
%14 = lshr %10, %12
%15 = lshr %14, 1:i32
%16 = and %15, 2:i32
%17 = or %13, %16
%18 = lshr %14, %16 (hasExternalUses)
%19 = lshr %18, 1:i32
%20 = and %19, 1:i32 (hasExternalUses)
%21 = or %17, %20
%22:i32 = var
%23 = block 2
%24:i32 = var
%25 = ult %24, 11:i32
blockpc %23 0 %25 1:i1
%26:i32 = zext %25
%27 = eq %26, 0:i32
blockpc %23 1 %27 1:i1
%28:i32 = var
%29 = phi %23, 16:i32, %28
%30 = lshr %29, 3:i32
%31 = lshr %22, %30
%32 = ne %31, 0:i32
%33:i32 = var
%34:i32 = var
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
infer %21


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = shl %0, %1
%3:i32 = var
%4:i32 = var
%5 = or %3, %4
%6 = and %2, %5
%7 = sub 0:i32, %6
%8 = and %6, %7
%9 = add %8, -1:i32
%10 = lshr %9, 12:i32
%11 = and %10, 16:i32 (hasExternalUses)
%12 = lshr %9, %11
%13 = lshr %12, 5:i32
%14 = and %13, 8:i32 (hasExternalUses)
%15 = lshr %12, %14
%16 = lshr %15, 2:i32
%17 = and %16, 4:i32 (hasExternalUses)
%18 = lshr %15, %17
%19 = lshr %18, 1:i32
%20 = and %19, 2:i32 (hasExternalUses)
%21 = lshr %18, %20
%22 = lshr %21, 1:i32
%23 = and %22, 1:i32 (hasExternalUses)
%24 = lshr %21, %23
%25 = ne %0, 0:i32
%26:i32 = var
%27 = block 2
%28:i32 = var
%29 = ult %28, 11:i32
blockpc %27 0 %29 1:i1
%30:i32 = var
blockpc %27 1 %30 1:i1
%31:i32 = var
%32 = phi %27, 16:i32, %31
%33 = ult %26, %32
%34:i32 = var
pc %25 1:i1
pc %33 1:i1
pc %34 1:i1
infer %24


; start LHS (in $6)
%0:i32 = var
%1 = add %0, -1:i32 (hasExternalUses)
%2:i32 = var
%3 = and %2, 16:i32
%4 = lshr %1, %3
%5 = lshr %4, 5:i32
%6 = and %5, 8:i32
%7 = or %6, %3
%8 = lshr %4, %6
%9 = lshr %8, 2:i32
%10 = and %9, 4:i32
%11 = or %7, %10
%12 = lshr %8, %10
%13 = lshr %12, 1:i32
%14 = and %13, 2:i32
%15 = or %11, %14
%16 = lshr %12, %14
%17 = lshr %16, 1:i32
%18 = and %17, 1:i32
%19 = or %15, %18
%20 = lshr %16, %18
%21 = add %19, %20
%22:i32 = var
%23 = block 2
%24:i32 = var
%25 = ult %24, 11:i32
blockpc %23 0 %25 1:i1
%26:i32 = zext %25
%27 = eq %26, 0:i32
blockpc %23 1 %27 1:i1
%28:i32 = var
%29 = phi %23, 16:i32, %28
%30 = lshr %29, 3:i32
%31 = lshr %22, %30
%32 = ne %31, 0:i32
%33:i32 = var
%34:i32 = var
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
infer %21


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = lshr %0, %1
%3 = lshr %2, 5:i32
%4 = and %3, 8:i32
%5 = or %4, %1
%6 = lshr %2, %4
%7 = lshr %6, 2:i32
%8 = and %7, 4:i32
%9 = or %5, %8
%10 = lshr %6, %8
%11 = lshr %10, 1:i32
%12 = and %11, 2:i32
%13 = or %9, %12
%14 = lshr %10, %12
%15 = lshr %14, 1:i32
%16 = and %15, 1:i32
%17 = or %13, %16
%18 = lshr %14, %16
%19 = add %17, %18 (hasExternalUses)
%20 = shl %19, 3:i32
%21:i32 = var
%22 = block 2
%23:i32 = var
%24 = ult %23, 11:i32
blockpc %22 0 %24 1:i1
%25:i32 = zext %24
%26 = eq %25, 0:i32
blockpc %22 1 %26 1:i1
%27 = add %23, 11:i32
%28 = and %27, -8:i32
%29 = phi %22, 16:i32, %28
%30 = lshr %29, 3:i32
%31 = lshr %21, %30
%32 = ne %31, 0:i32
%33:i32 = var
%34:i32 = var
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
infer %20


; start LHS (in $6)
%0:i32 = var
%1 = lshr %0, 5:i32
%2 = and %1, 8:i32
%3:i32 = var
%4 = lshr %3, 12:i32
%5 = and %4, 16:i32 (hasExternalUses)
%6 = or %2, %5
%7 = lshr %0, %2
%8 = lshr %7, 2:i32
%9 = and %8, 4:i32
%10 = or %6, %9
%11 = lshr %7, %9
%12 = lshr %11, 1:i32
%13 = and %12, 2:i32
%14 = or %10, %13
%15 = lshr %11, %13
%16 = lshr %15, 1:i32
%17 = and %16, 1:i32
%18 = or %14, %17
%19 = lshr %15, %17
%20 = add %18, %19 (hasExternalUses)
%21 = shl %20, 3:i32
%22 = add %21, 3996:i32
%23:i32 = var
%24 = block 2
%25:i32 = var
%26 = ult %25, 11:i32
blockpc %24 0 %26 1:i1
%27:i32 = zext %26
%28 = eq %27, 0:i32
blockpc %24 1 %28 1:i1
%29:i32 = var
%30 = phi %24, 16:i32, %29
%31 = lshr %30, 3:i32
%32 = lshr %23, %31
%33 = ne %32, 0:i32
%34:i32 = var
%35:i32 = var
pc %33 1:i1
pc %34 1:i1
pc %35 1:i1
infer %22


; start LHS (in $6)
%0:i32 = var
%1 = and %0, 8:i32 (hasExternalUses)
%2:i32 = var
%3 = and %2, 16:i32 (hasExternalUses)
%4 = or %1, %3
%5:i32 = var
%6 = lshr %5, 2:i32
%7 = and %6, 4:i32
%8 = or %4, %7
%9 = lshr %5, %7
%10 = lshr %9, 1:i32
%11 = and %10, 2:i32
%12 = or %8, %11
%13 = lshr %9, %11
%14 = lshr %13, 1:i32
%15 = and %14, 1:i32
%16 = or %12, %15
%17 = lshr %13, %15
%18 = add %16, %17 (hasExternalUses)
%19 = shl %18, 3:i32
%20 = add %19, 3996:i32 (hasExternalUses)
%21 = add %20, 8:i32
%22:i32 = var
%23 = block 2
%24:i32 = var
%25 = ult %24, 11:i32
blockpc %23 0 %25 1:i1
%26:i32 = zext %25
%27 = eq %26, 0:i32
blockpc %23 1 %27 1:i1
%28:i32 = var
%29 = phi %23, 16:i32, %28
%30 = lshr %29, 3:i32
%31 = lshr %22, %30
%32 = ne %31, 0:i32
%33:i32 = var
%34:i32 = var
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
infer %21


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 8:i32
%2:i32 = var
%3 = block 2
%4:i32 = var
%5 = ult %4, 11:i32
blockpc %3 0 %5 1:i1
%6:i32 = zext %5
%7 = eq %6, 0:i32
blockpc %3 1 %7 1:i1
%8 = add %4, 11:i32
%9 = and %8, -8:i32
%10 = phi %3, 16:i32, %9
%11 = lshr %10, 3:i32
%12 = lshr %2, %11
%13 = ne %12, 0:i32
%14:i32 = var
%15 = phi %3, 16:i32, %9
%16 = ult %14, %15
%17 = ult %4, 245:i32
pc %13 1:i1
pc %16 1:i1
pc %17 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = and %1, 8:i32 (hasExternalUses)
%3:i32 = var
%4 = and %3, 16:i32 (hasExternalUses)
%5 = or %2, %4
%6:i32 = var
%7 = lshr %6, 2:i32
%8 = and %7, 4:i32
%9 = or %5, %8
%10 = lshr %6, %8
%11 = lshr %10, 1:i32
%12 = and %11, 2:i32
%13 = or %9, %12
%14 = lshr %10, %12
%15 = lshr %14, 1:i32
%16 = and %15, 1:i32
%17 = or %13, %16
%18 = lshr %14, %16
%19 = add %17, %18 (hasExternalUses)
%20 = shl %19, 3:i32
%21 = add %20, 3996:i32 (hasExternalUses)
%22 = eq %0, %21
%23:i32 = var
%24 = block 2
%25:i32 = var
%26 = ult %25, 11:i32
blockpc %24 0 %26 1:i1
%27:i32 = zext %26
%28 = eq %27, 0:i32
blockpc %24 1 %28 1:i1
%29:i32 = var
%30 = phi %24, 16:i32, %29
%31 = lshr %30, 3:i32
%32 = lshr %23, %31
%33 = ne %32, 0:i32
%34:i32 = var
%35:i32 = var
pc %33 1:i1
pc %34 1:i1
pc %35 1:i1
infer %22


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = lshr %0, %1
%3 = lshr %2, 5:i32
%4 = and %3, 8:i32
%5 = or %4, %1
%6 = lshr %2, %4
%7 = lshr %6, 2:i32
%8 = and %7, 4:i32
%9 = or %5, %8
%10 = lshr %6, %8
%11 = lshr %10, 1:i32
%12 = and %11, 2:i32
%13 = or %9, %12
%14 = lshr %10, %12
%15 = lshr %14, 1:i32
%16 = and %15, 1:i32
%17 = or %13, %16
%18 = lshr %14, %16
%19 = add %17, %18 (hasExternalUses)
%20 = shl 1:i32, %19
%21:i32 = var
%22 = shl %19, 3:i32
%23 = add %22, 3996:i32
%24 = eq %21, %23
%25:i32 = var
%26 = block 2
%27:i32 = var
%28 = ult %27, 11:i32
blockpc %26 0 %28 1:i1
%29:i32 = var
blockpc %26 1 %29 1:i1
%30:i32 = var
%31 = phi %26, 16:i32, %30
%32 = lshr %31, 3:i32
%33 = lshr %25, %32
%34 = ne %33, 0:i32
%35:i32 = var
%36:i32 = var
pc %24 1:i1
pc %34 1:i1
pc %35 1:i1
pc %36 1:i1
infer %20


; start LHS (in $6)
%0:i32 = var
%1 = lshr %0, 5:i32
%2 = and %1, 8:i32
%3:i32 = var
%4 = lshr %3, 12:i32
%5 = and %4, 16:i32 (hasExternalUses)
%6 = or %2, %5
%7 = lshr %0, %2
%8 = lshr %7, 2:i32
%9 = and %8, 4:i32
%10 = or %6, %9
%11 = lshr %7, %9
%12 = lshr %11, 1:i32
%13 = and %12, 2:i32
%14 = or %10, %13
%15 = lshr %11, %13
%16 = lshr %15, 1:i32
%17 = and %16, 1:i32
%18 = or %14, %17
%19 = lshr %15, %17
%20 = add %18, %19 (hasExternalUses)
%21 = shl 1:i32, %20
%22 = xor %21, -1:i32
%23:i32 = var
%24 = shl %20, 3:i32
%25 = add %24, 3996:i32
%26 = eq %23, %25
%27:i32 = var
%28 = block 2
%29:i32 = var
%30 = ult %29, 11:i32
blockpc %28 0 %30 1:i1
%31:i32 = var
blockpc %28 1 %31 1:i1
%32:i32 = var
%33 = phi %28, 16:i32, %32
%34 = lshr %33, 3:i32
%35 = lshr %27, %34
%36 = ne %35, 0:i32
%37:i32 = var
%38:i32 = var
pc %26 1:i1
pc %36 1:i1
pc %37 1:i1
pc %38 1:i1
infer %22


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = and %1, 8:i32 (hasExternalUses)
%3:i32 = var
%4 = and %3, 16:i32 (hasExternalUses)
%5 = or %2, %4
%6:i32 = var
%7 = lshr %6, 2:i32
%8 = and %7, 4:i32
%9 = or %5, %8
%10 = lshr %6, %8
%11 = lshr %10, 1:i32
%12 = and %11, 2:i32
%13 = or %9, %12
%14 = lshr %10, %12
%15 = lshr %14, 1:i32
%16 = and %15, 1:i32
%17 = or %13, %16
%18 = lshr %14, %16
%19 = add %17, %18 (hasExternalUses)
%20 = shl 1:i32, %19
%21 = xor %20, -1:i32
%22 = and %0, %21
%23:i32 = var
%24 = shl %19, 3:i32
%25 = add %24, 3996:i32
%26 = eq %23, %25
%27 = block 2
%28:i32 = var
%29 = ult %28, 11:i32
blockpc %27 0 %29 1:i1
%30:i32 = var
blockpc %27 1 %30 1:i1
%31:i32 = var
%32 = phi %27, 16:i32, %31
%33 = lshr %32, 3:i32
%34 = lshr %0, %33
%35 = ne %34, 0:i32
%36:i32 = var
%37:i32 = var
pc %26 1:i1
pc %35 1:i1
pc %36 1:i1
pc %37 1:i1
infer %22


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = add %1, 11:i32
%3 = and %2, -8:i32 (hasExternalUses)
%4 = phi %0, 16:i32, %3
%5 = or %4, 3:i32
%6 = ult %1, 11:i32
blockpc %0 0 %6 1:i1
%7:i32 = zext %6
%8 = eq %7, 0:i32
blockpc %0 1 %8 1:i1
%9:i32 = var
%10 = phi %0, 16:i32, %3
%11 = lshr %10, 3:i32
%12 = lshr %9, %11
%13 = ne %12, 0:i32
%14:i32 = var
%15 = ult %14, %4
%16 = ult %1, 245:i32
pc %13 1:i1
pc %15 1:i1
pc %16 1:i1
infer %5


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = add %2, 11:i32
%4 = and %3, -8:i32 (hasExternalUses)
%5 = phi %1, 16:i32, %4
%6 = add %0, %5
%7 = ult %2, 11:i32
blockpc %1 0 %7 1:i1
%8:i32 = zext %7
%9 = eq %8, 0:i32
blockpc %1 1 %9 1:i1
%10:i32 = var
%11 = phi %1, 16:i32, %4
%12 = lshr %11, 3:i32
%13 = lshr %10, %12
%14 = ne %13, 0:i32
%15:i32 = var
%16 = ult %15, %5
%17 = ult %2, 245:i32
pc %14 1:i1
pc %16 1:i1
pc %17 1:i1
infer %6


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = lshr %0, %1
%3 = lshr %2, 5:i32
%4 = and %3, 8:i32
%5 = or %4, %1
%6 = lshr %2, %4
%7 = lshr %6, 2:i32
%8 = and %7, 4:i32
%9 = or %5, %8
%10 = lshr %6, %8
%11 = lshr %10, 1:i32
%12 = and %11, 2:i32
%13 = or %9, %12
%14 = lshr %10, %12
%15 = lshr %14, 1:i32
%16 = and %15, 1:i32
%17 = or %13, %16
%18 = lshr %14, %16
%19 = add %17, %18 (hasExternalUses)
%20 = shl %19, 3:i32
%21:i32 = var
%22 = block 2
%23:i32 = var
%24 = ult %23, 11:i32
blockpc %22 0 %24 1:i1
%25:i32 = zext %24
%26 = eq %25, 0:i32
blockpc %22 1 %26 1:i1
%27 = add %23, 11:i32
%28 = and %27, -8:i32
%29 = phi %22, 16:i32, %28
%30 = lshr %29, 3:i32
%31 = lshr %21, %30
%32 = ne %31, 0:i32
%33:i32 = var
%34:i32 = var
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
infer %20


; start LHS (in $6)
%0:i32 = var
%1 = lshr %0, 5:i32
%2 = and %1, 8:i32
%3:i32 = var
%4 = lshr %3, 12:i32
%5 = and %4, 16:i32 (hasExternalUses)
%6 = or %2, %5
%7 = lshr %0, %2
%8 = lshr %7, 2:i32
%9 = and %8, 4:i32
%10 = or %6, %9
%11 = lshr %7, %9
%12 = lshr %11, 1:i32
%13 = and %12, 2:i32
%14 = or %10, %13
%15 = lshr %11, %13
%16 = lshr %15, 1:i32
%17 = and %16, 1:i32
%18 = or %14, %17
%19 = lshr %15, %17
%20 = add %18, %19 (hasExternalUses)
%21 = shl %20, 3:i32 (hasExternalUses)
%22 = block 2
%23:i32 = var
%24 = add %23, 11:i32
%25 = and %24, -8:i32 (hasExternalUses)
%26 = phi %22, 16:i32, %25
%27 = sub %21, %26
%28 = ult %23, 11:i32
blockpc %22 0 %28 1:i1
%29:i32 = var
blockpc %22 1 %29 1:i1
%30:i32 = var
%31:i32 = var
%32:i32 = var
pc %30 1:i1
pc %31 1:i1
pc %32 1:i1
infer %27


; start LHS (in $6)
%0:i32 = var
%1 = and %0, 8:i32 (hasExternalUses)
%2:i32 = var
%3 = and %2, 16:i32 (hasExternalUses)
%4 = or %1, %3
%5:i32 = var
%6 = lshr %5, 2:i32
%7 = and %6, 4:i32
%8 = or %4, %7
%9 = lshr %5, %7
%10 = lshr %9, 1:i32
%11 = and %10, 2:i32
%12 = or %8, %11
%13 = lshr %9, %11
%14 = lshr %13, 1:i32
%15 = and %14, 1:i32
%16 = or %12, %15
%17 = lshr %13, %15
%18 = add %16, %17 (hasExternalUses)
%19 = shl %18, 3:i32 (hasExternalUses)
%20 = block 2
%21:i32 = var
%22 = add %21, 11:i32
%23 = and %22, -8:i32 (hasExternalUses)
%24 = phi %20, 16:i32, %23
%25 = sub %19, %24 (hasExternalUses)
%26 = or %25, 1:i32
%27 = ult %21, 11:i32
blockpc %20 0 %27 1:i1
%28:i32 = zext %27
%29 = eq %28, 0:i32
blockpc %20 1 %29 1:i1
%30:i32 = var
%31:i32 = var
%32:i32 = var
pc %30 1:i1
pc %31 1:i1
pc %32 1:i1
infer %26


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = lshr %1, 5:i32
%3 = and %2, 8:i32
%4:i32 = var
%5 = lshr %4, 12:i32
%6 = and %5, 16:i32 (hasExternalUses)
%7 = or %3, %6
%8 = lshr %1, %3
%9 = lshr %8, 2:i32
%10 = and %9, 4:i32
%11 = or %7, %10
%12 = lshr %8, %10
%13 = lshr %12, 1:i32
%14 = and %13, 2:i32
%15 = or %11, %14
%16 = lshr %12, %14
%17 = lshr %16, 1:i32
%18 = and %17, 1:i32
%19 = or %15, %18
%20 = lshr %16, %18
%21 = add %19, %20 (hasExternalUses)
%22 = shl %21, 3:i32 (hasExternalUses)
%23 = add %0, %22
%24:i32 = var
%25 = block 2
%26:i32 = var
%27 = ult %26, 11:i32
blockpc %25 0 %27 1:i1
%28:i32 = zext %27
%29 = eq %28, 0:i32
blockpc %25 1 %29 1:i1
%30:i32 = var
%31 = phi %25, 16:i32, %30
%32 = lshr %31, 3:i32
%33 = lshr %24, %32
%34 = ne %33, 0:i32
%35:i32 = var
%36:i32 = var
pc %34 1:i1
pc %35 1:i1
pc %36 1:i1
infer %23


; start LHS (in $6)
%0:i32 = var
%1 = lshr %0, 3:i32
%2 = ne %0, 0:i32
%3:i32 = var
%4 = block 2
%5:i32 = var
%6 = ult %5, 11:i32
blockpc %4 0 %6 1:i1
%7:i32 = zext %6
%8 = eq %7, 0:i32
blockpc %4 1 %8 1:i1
%9 = add %5, 11:i32
%10 = and %9, -8:i32
%11 = phi %4, 16:i32, %10
%12 = lshr %11, 3:i32
%13 = lshr %3, %12
%14 = ne %13, 0:i32
%15 = phi %4, 16:i32, %10
%16 = ult %0, %15
%17 = ult %5, 245:i32
pc %2 1:i1
pc %14 1:i1
pc %16 1:i1
pc %17 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = lshr %0, 3:i32 (hasExternalUses)
%2 = shl %1, 3:i32
%3 = ne %0, 0:i32
%4:i32 = var
%5 = block 2
%6:i32 = var
%7 = ult %6, 11:i32
blockpc %5 0 %7 1:i1
%8:i32 = zext %7
%9 = eq %8, 0:i32
blockpc %5 1 %9 1:i1
%10 = add %6, 11:i32
%11 = and %10, -8:i32
%12 = phi %5, 16:i32, %11
%13 = lshr %12, 3:i32
%14 = lshr %4, %13
%15 = ne %14, 0:i32
%16 = phi %5, 16:i32, %11
%17 = ult %0, %16
%18 = ult %6, 245:i32
pc %3 1:i1
pc %15 1:i1
pc %17 1:i1
pc %18 1:i1
infer %2


; start LHS (in $6)
%0:i32 = var
%1 = lshr %0, 3:i32 (hasExternalUses)
%2 = shl %1, 3:i32
%3 = add %2, 3996:i32
%4 = ne %0, 0:i32
%5:i32 = var
%6 = block 2
%7:i32 = var
%8 = ult %7, 11:i32
blockpc %6 0 %8 1:i1
%9:i32 = zext %8
%10 = eq %9, 0:i32
blockpc %6 1 %10 1:i1
%11 = add %7, 11:i32
%12 = and %11, -8:i32
%13 = phi %6, 16:i32, %12
%14 = lshr %13, 3:i32
%15 = lshr %5, %14
%16 = ne %15, 0:i32
%17 = phi %6, 16:i32, %12
%18 = ult %0, %17
%19 = ult %7, 245:i32
pc %4 1:i1
pc %16 1:i1
pc %18 1:i1
pc %19 1:i1
infer %3


; start LHS (in $6)
%0:i32 = var
%1 = lshr %0, 3:i32 (hasExternalUses)
%2 = shl 1:i32, %1
%3 = ne %0, 0:i32
%4:i32 = var
%5 = block 2
%6:i32 = var
%7 = ult %6, 11:i32
blockpc %5 0 %7 1:i1
%8:i32 = zext %7
%9 = eq %8, 0:i32
blockpc %5 1 %9 1:i1
%10 = add %6, 11:i32
%11 = and %10, -8:i32
%12 = phi %5, 16:i32, %11
%13 = lshr %12, 3:i32
%14 = lshr %4, %13
%15 = ne %14, 0:i32
%16 = phi %5, 16:i32, %11
%17 = ult %0, %16
%18 = ult %6, 245:i32
pc %3 1:i1
pc %15 1:i1
pc %17 1:i1
pc %18 1:i1
infer %2


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4 = or %2, %3
%5:i32 = var
%6 = and %5, 2:i32 (hasExternalUses)
%7 = or %4, %6
%8:i32 = var
%9 = lshr %8, 1:i32
%10 = and %9, 1:i32
%11 = or %7, %10
%12 = lshr %8, %10
%13 = add %11, %12 (hasExternalUses)
%14 = shl 1:i32, %13
%15 = xor %14, -1:i32
%16 = and %1, %15 (hasExternalUses)
%17 = phi %0, %16, %1
%18:i32 = var
%19 = lshr %18, 3:i32 (hasExternalUses)
%20 = shl 1:i32, %19 (hasExternalUses)
%21 = and %17, %20
%22:i32 = var
%23 = shl %13, 3:i32
%24 = add %23, 3996:i32
%25 = eq %22, %24
blockpc %0 0 %25 1:i1
%26:i32 = zext %25
%27 = eq %26, 0:i32
blockpc %0 1 %27 1:i1
%28:i32 = var
%29:i32 = var
%30:i32 = var
%31:i32 = var
pc %28 1:i1
pc %29 1:i1
pc %30 1:i1
pc %31 1:i1
infer %21


; start LHS (in $6)
%0:i32 = var
%1 = lshr %0, 3:i32 (hasExternalUses)
%2 = shl %1, 3:i32
%3 = add %2, 3996:i32 (hasExternalUses)
%4 = add %3, 8:i32
%5 = block 2
%6:i32 = var
%7:i32 = var
%8:i32 = var
%9 = or %7, %8
%10:i32 = var
%11 = lshr %10, %8
%12 = add %9, %11
%13 = shl %12, 3:i32
%14 = add %13, 3996:i32
%15 = eq %6, %14
blockpc %5 0 %15 1:i1
%16:i32 = zext %15
%17 = eq %16, 0:i32
blockpc %5 1 %17 1:i1
%18:i32 = var
%19 = shl 1:i32, %12
%20 = xor %19, -1:i32
%21 = and %18, %20
%22 = phi %5, %21, %18
%23 = shl 1:i32, %1
%24 = and %22, %23
%25 = ne %24, 0:i32
%26 = ne %0, 0:i32
%27 = block 2
%28:i32 = var
blockpc %27 0 %28 1:i1
%29:i32 = var
blockpc %27 1 %29 1:i1
%30:i32 = var
%31 = phi %27, 16:i32, %30
%32 = lshr %31, 3:i32
%33 = lshr %18, %32
%34 = ne %33, 0:i32
%35:i32 = var
%36:i32 = var
pc %25 1:i1
pc %26 1:i1
pc %34 1:i1
pc %35 1:i1
pc %36 1:i1
infer %4


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4 = or %2, %3
%5:i32 = var
%6 = and %5, 2:i32 (hasExternalUses)
%7 = or %4, %6
%8:i32 = var
%9 = lshr %8, 1:i32
%10 = and %9, 1:i32
%11 = or %7, %10
%12 = lshr %8, %10
%13 = add %11, %12 (hasExternalUses)
%14 = shl 1:i32, %13
%15 = xor %14, -1:i32
%16 = and %1, %15 (hasExternalUses)
%17 = phi %0, %16, %1
%18:i32 = var
%19 = lshr %18, 3:i32 (hasExternalUses)
%20 = shl 1:i32, %19 (hasExternalUses)
%21 = or %17, %20
%22:i32 = var
%23 = shl %13, 3:i32
%24 = add %23, 3996:i32
%25 = eq %22, %24
blockpc %0 0 %25 1:i1
%26:i32 = zext %25
%27 = eq %26, 0:i32
blockpc %0 1 %27 1:i1
%28:i32 = var
%29:i32 = var
%30:i32 = var
%31:i32 = var
%32:i32 = var
pc %28 1:i1
pc %29 1:i1
pc %30 1:i1
pc %31 1:i1
pc %32 1:i1
infer %21


; start LHS (in $6)
%0:i32 = var
%1 = lshr %0, 3:i32 (hasExternalUses)
%2 = shl %1, 3:i32
%3 = add %2, 3996:i32 (hasExternalUses)
%4 = add %3, 8:i32
%5 = block 2
%6:i32 = var
%7:i32 = var
%8:i32 = var
%9 = or %7, %8
%10:i32 = var
%11 = lshr %10, %8
%12 = add %9, %11
%13 = shl %12, 3:i32
%14 = add %13, 3996:i32
%15 = eq %6, %14
blockpc %5 0 %15 1:i1
%16:i32 = zext %15
%17 = eq %16, 0:i32
blockpc %5 1 %17 1:i1
%18:i32 = var
%19 = shl 1:i32, %12
%20 = xor %19, -1:i32
%21 = and %18, %20
%22 = phi %5, %21, %18
%23 = shl 1:i32, %1
%24 = and %22, %23
%25 = eq %24, 0:i32
%26 = ne %0, 0:i32
%27 = block 2
%28:i32 = var
blockpc %27 0 %28 1:i1
%29:i32 = var
blockpc %27 1 %29 1:i1
%30:i32 = var
%31 = phi %27, 16:i32, %30
%32 = lshr %31, 3:i32
%33 = lshr %18, %32
%34 = ne %33, 0:i32
%35:i32 = var
%36:i32 = var
pc %25 1:i1
pc %26 1:i1
pc %34 1:i1
pc %35 1:i1
pc %36 1:i1
infer %4


; start LHS (in $6)
%0:i32 = var
%1 = sub 0:i32, %0
%2 = ne %0, 0:i32
%3:i32 = var
%4 = block 2
%5:i32 = var
%6 = ult %5, 11:i32
blockpc %4 0 %6 1:i1
%7:i32 = zext %6
%8 = eq %7, 0:i32
blockpc %4 1 %8 1:i1
%9 = add %5, 11:i32
%10 = and %9, -8:i32
%11 = phi %4, 16:i32, %10
%12 = ult %3, %11
%13 = ult %5, 245:i32
pc %2 1:i1
pc %12 1:i1
pc %13 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = sub 0:i32, %0
%2 = and %0, %1
%3 = ne %0, 0:i32
%4:i32 = var
%5 = block 2
%6:i32 = var
%7 = ult %6, 11:i32
blockpc %5 0 %7 1:i1
%8:i32 = zext %7
%9 = eq %8, 0:i32
blockpc %5 1 %9 1:i1
%10 = add %6, 11:i32
%11 = and %10, -8:i32
%12 = phi %5, 16:i32, %11
%13 = ult %4, %12
%14 = ult %6, 245:i32
pc %3 1:i1
pc %13 1:i1
pc %14 1:i1
infer %2


; start LHS (in $6)
%0:i32 = var
%1 = sub 0:i32, %0
%2 = and %0, %1
%3 = add %2, -1:i32
%4 = ne %0, 0:i32
%5:i32 = var
%6 = block 2
%7:i32 = var
%8 = ult %7, 11:i32
blockpc %6 0 %8 1:i1
%9:i32 = zext %8
%10 = eq %9, 0:i32
blockpc %6 1 %10 1:i1
%11 = add %7, 11:i32
%12 = and %11, -8:i32
%13 = phi %6, 16:i32, %12
%14 = ult %5, %13
%15 = ult %7, 245:i32
pc %4 1:i1
pc %14 1:i1
pc %15 1:i1
infer %3


; start LHS (in $6)
%0:i32 = var
%1 = sub 0:i32, %0
%2 = and %0, %1
%3 = add %2, -1:i32 (hasExternalUses)
%4 = lshr %3, 12:i32
%5 = ne %0, 0:i32
%6:i32 = var
%7 = block 2
%8:i32 = var
%9 = ult %8, 11:i32
blockpc %7 0 %9 1:i1
%10:i32 = zext %9
%11 = eq %10, 0:i32
blockpc %7 1 %11 1:i1
%12 = add %8, 11:i32
%13 = and %12, -8:i32
%14 = phi %7, 16:i32, %13
%15 = ult %6, %14
%16 = ult %8, 245:i32
pc %5 1:i1
pc %15 1:i1
pc %16 1:i1
infer %4


; start LHS (in $6)
%0:i32 = var
%1 = sub 0:i32, %0
%2 = and %0, %1
%3 = add %2, -1:i32 (hasExternalUses)
%4 = lshr %3, 12:i32
%5 = and %4, 16:i32
%6 = ne %0, 0:i32
%7:i32 = var
%8 = block 2
%9:i32 = var
%10 = ult %9, 11:i32
blockpc %8 0 %10 1:i1
%11:i32 = zext %10
%12 = eq %11, 0:i32
blockpc %8 1 %12 1:i1
%13 = add %9, 11:i32
%14 = and %13, -8:i32
%15 = phi %8, 16:i32, %14
%16 = ult %7, %15
%17 = ult %9, 245:i32
pc %6 1:i1
pc %16 1:i1
pc %17 1:i1
infer %5


; start LHS (in $6)
%0:i32 = var
%1 = sub 0:i32, %0
%2 = and %0, %1
%3 = add %2, -1:i32
%4 = lshr %3, 12:i32
%5 = and %4, 16:i32 (hasExternalUses)
%6 = lshr %3, %5
%7 = ne %0, 0:i32
%8:i32 = var
%9 = block 2
%10:i32 = var
%11 = ult %10, 11:i32
blockpc %9 0 %11 1:i1
%12:i32 = zext %11
%13 = eq %12, 0:i32
blockpc %9 1 %13 1:i1
%14 = add %10, 11:i32
%15 = and %14, -8:i32
%16 = phi %9, 16:i32, %15
%17 = ult %8, %16
%18 = ult %10, 245:i32
pc %7 1:i1
pc %17 1:i1
pc %18 1:i1
infer %6


; start LHS (in $6)
%0:i32 = var
%1 = sub 0:i32, %0
%2 = and %0, %1
%3 = add %2, -1:i32
%4 = lshr %3, 12:i32
%5 = and %4, 16:i32 (hasExternalUses)
%6 = lshr %3, %5 (hasExternalUses)
%7 = lshr %6, 5:i32
%8 = ne %0, 0:i32
%9:i32 = var
%10 = block 2
%11:i32 = var
%12 = ult %11, 11:i32
blockpc %10 0 %12 1:i1
%13:i32 = zext %12
%14 = eq %13, 0:i32
blockpc %10 1 %14 1:i1
%15 = add %11, 11:i32
%16 = and %15, -8:i32
%17 = phi %10, 16:i32, %16
%18 = ult %9, %17
%19 = ult %11, 245:i32
pc %8 1:i1
pc %18 1:i1
pc %19 1:i1
infer %7


; start LHS (in $6)
%0:i32 = var
%1 = sub 0:i32, %0
%2 = and %0, %1
%3 = add %2, -1:i32
%4 = lshr %3, 12:i32
%5 = and %4, 16:i32 (hasExternalUses)
%6 = lshr %3, %5 (hasExternalUses)
%7 = lshr %6, 5:i32
%8 = and %7, 8:i32
%9 = ne %0, 0:i32
%10:i32 = var
%11 = block 2
%12:i32 = var
%13 = ult %12, 11:i32
blockpc %11 0 %13 1:i1
%14:i32 = zext %13
%15 = eq %14, 0:i32
blockpc %11 1 %15 1:i1
%16 = add %12, 11:i32
%17 = and %16, -8:i32
%18 = phi %11, 16:i32, %17
%19 = ult %10, %18
%20 = ult %12, 245:i32
pc %9 1:i1
pc %19 1:i1
pc %20 1:i1
infer %8


; start LHS (in $6)
%0:i32 = var
%1 = sub 0:i32, %0
%2 = and %0, %1
%3 = add %2, -1:i32
%4 = lshr %3, 12:i32
%5 = and %4, 16:i32
%6 = lshr %3, %5 (hasExternalUses)
%7 = lshr %6, 5:i32
%8 = and %7, 8:i32 (hasExternalUses)
%9 = or %8, %5
%10 = ne %0, 0:i32
%11:i32 = var
%12 = block 2
%13:i32 = var
%14 = ult %13, 11:i32
blockpc %12 0 %14 1:i1
%15:i32 = zext %14
%16 = eq %15, 0:i32
blockpc %12 1 %16 1:i1
%17 = add %13, 11:i32
%18 = and %17, -8:i32
%19 = phi %12, 16:i32, %18
%20 = ult %11, %19
%21 = ult %13, 245:i32
pc %10 1:i1
pc %20 1:i1
pc %21 1:i1
infer %9


; start LHS (in $6)
%0:i32 = var
%1 = sub 0:i32, %0
%2 = and %0, %1
%3 = add %2, -1:i32
%4 = lshr %3, 12:i32
%5 = and %4, 16:i32 (hasExternalUses)
%6 = lshr %3, %5
%7 = lshr %6, 5:i32
%8 = and %7, 8:i32 (hasExternalUses)
%9 = lshr %6, %8
%10 = ne %0, 0:i32
%11:i32 = var
%12 = block 2
%13:i32 = var
%14 = ult %13, 11:i32
blockpc %12 0 %14 1:i1
%15:i32 = zext %14
%16 = eq %15, 0:i32
blockpc %12 1 %16 1:i1
%17 = add %13, 11:i32
%18 = and %17, -8:i32
%19 = phi %12, 16:i32, %18
%20 = ult %11, %19
%21 = ult %13, 245:i32
pc %10 1:i1
pc %20 1:i1
pc %21 1:i1
infer %9


; start LHS (in $6)
%0:i32 = var
%1 = sub 0:i32, %0
%2 = and %0, %1
%3 = add %2, -1:i32
%4 = lshr %3, 12:i32
%5 = and %4, 16:i32 (hasExternalUses)
%6 = lshr %3, %5
%7 = lshr %6, 5:i32
%8 = and %7, 8:i32 (hasExternalUses)
%9 = lshr %6, %8 (hasExternalUses)
%10 = lshr %9, 2:i32
%11 = ne %0, 0:i32
%12:i32 = var
%13 = block 2
%14:i32 = var
%15 = ult %14, 11:i32
blockpc %13 0 %15 1:i1
%16:i32 = zext %15
%17 = eq %16, 0:i32
blockpc %13 1 %17 1:i1
%18 = add %14, 11:i32
%19 = and %18, -8:i32
%20 = phi %13, 16:i32, %19
%21 = ult %12, %20
%22 = ult %14, 245:i32
pc %11 1:i1
pc %21 1:i1
pc %22 1:i1
infer %10


; start LHS (in $6)
%0:i32 = var
%1 = sub 0:i32, %0
%2 = and %0, %1
%3 = add %2, -1:i32
%4 = lshr %3, 12:i32
%5 = and %4, 16:i32 (hasExternalUses)
%6 = lshr %3, %5
%7 = lshr %6, 5:i32
%8 = and %7, 8:i32 (hasExternalUses)
%9 = lshr %6, %8 (hasExternalUses)
%10 = lshr %9, 2:i32
%11 = and %10, 4:i32
%12 = ne %0, 0:i32
%13:i32 = var
%14 = block 2
%15:i32 = var
%16 = ult %15, 11:i32
blockpc %14 0 %16 1:i1
%17:i32 = zext %16
%18 = eq %17, 0:i32
blockpc %14 1 %18 1:i1
%19 = add %15, 11:i32
%20 = and %19, -8:i32
%21 = phi %14, 16:i32, %20
%22 = ult %13, %21
%23 = ult %15, 245:i32
pc %12 1:i1
pc %22 1:i1
pc %23 1:i1
infer %11


; start LHS (in $6)
%0:i32 = var
%1 = sub 0:i32, %0
%2 = and %0, %1
%3 = add %2, -1:i32
%4 = lshr %3, 12:i32
%5 = and %4, 16:i32
%6 = lshr %3, %5
%7 = lshr %6, 5:i32
%8 = and %7, 8:i32
%9 = or %8, %5
%10 = lshr %6, %8 (hasExternalUses)
%11 = lshr %10, 2:i32
%12 = and %11, 4:i32 (hasExternalUses)
%13 = or %9, %12
%14 = ne %0, 0:i32
%15:i32 = var
%16 = block 2
%17:i32 = var
%18 = ult %17, 11:i32
blockpc %16 0 %18 1:i1
%19:i32 = zext %18
%20 = eq %19, 0:i32
blockpc %16 1 %20 1:i1
%21 = add %17, 11:i32
%22 = and %21, -8:i32
%23 = phi %16, 16:i32, %22
%24 = ult %15, %23
%25 = ult %17, 245:i32
pc %14 1:i1
pc %24 1:i1
pc %25 1:i1
infer %13


; start LHS (in $6)
%0:i32 = var
%1 = sub 0:i32, %0
%2 = and %0, %1
%3 = add %2, -1:i32
%4 = lshr %3, 12:i32
%5 = and %4, 16:i32 (hasExternalUses)
%6 = lshr %3, %5
%7 = lshr %6, 5:i32
%8 = and %7, 8:i32 (hasExternalUses)
%9 = lshr %6, %8
%10 = lshr %9, 2:i32
%11 = and %10, 4:i32 (hasExternalUses)
%12 = lshr %9, %11
%13 = ne %0, 0:i32
%14:i32 = var
%15 = block 2
%16:i32 = var
%17 = ult %16, 11:i32
blockpc %15 0 %17 1:i1
%18:i32 = zext %17
%19 = eq %18, 0:i32
blockpc %15 1 %19 1:i1
%20 = add %16, 11:i32
%21 = and %20, -8:i32
%22 = phi %15, 16:i32, %21
%23 = ult %14, %22
%24 = ult %16, 245:i32
pc %13 1:i1
pc %23 1:i1
pc %24 1:i1
infer %12


; start LHS (in $6)
%0:i32 = var
%1 = sub 0:i32, %0
%2 = and %0, %1
%3 = add %2, -1:i32
%4 = lshr %3, 12:i32
%5 = and %4, 16:i32 (hasExternalUses)
%6 = lshr %3, %5
%7 = lshr %6, 5:i32
%8 = and %7, 8:i32 (hasExternalUses)
%9 = lshr %6, %8
%10 = lshr %9, 2:i32
%11 = and %10, 4:i32 (hasExternalUses)
%12 = lshr %9, %11 (hasExternalUses)
%13 = lshr %12, 1:i32
%14 = ne %0, 0:i32
%15:i32 = var
%16 = block 2
%17:i32 = var
%18 = ult %17, 11:i32
blockpc %16 0 %18 1:i1
%19:i32 = zext %18
%20 = eq %19, 0:i32
blockpc %16 1 %20 1:i1
%21 = add %17, 11:i32
%22 = and %21, -8:i32
%23 = phi %16, 16:i32, %22
%24 = ult %15, %23
%25 = ult %17, 245:i32
pc %14 1:i1
pc %24 1:i1
pc %25 1:i1
infer %13


; start LHS (in $6)
%0:i32 = var
%1 = sub 0:i32, %0
%2 = and %0, %1
%3 = add %2, -1:i32
%4 = lshr %3, 12:i32
%5 = and %4, 16:i32 (hasExternalUses)
%6 = lshr %3, %5
%7 = lshr %6, 5:i32
%8 = and %7, 8:i32 (hasExternalUses)
%9 = lshr %6, %8
%10 = lshr %9, 2:i32
%11 = and %10, 4:i32 (hasExternalUses)
%12 = lshr %9, %11 (hasExternalUses)
%13 = lshr %12, 1:i32
%14 = and %13, 2:i32
%15 = ne %0, 0:i32
%16:i32 = var
%17 = block 2
%18:i32 = var
%19 = ult %18, 11:i32
blockpc %17 0 %19 1:i1
%20:i32 = zext %19
%21 = eq %20, 0:i32
blockpc %17 1 %21 1:i1
%22 = add %18, 11:i32
%23 = and %22, -8:i32
%24 = phi %17, 16:i32, %23
%25 = ult %16, %24
%26 = ult %18, 245:i32
pc %15 1:i1
pc %25 1:i1
pc %26 1:i1
infer %14


; start LHS (in $6)
%0:i32 = var
%1 = sub 0:i32, %0
%2 = and %0, %1
%3 = add %2, -1:i32
%4 = lshr %3, 12:i32
%5 = and %4, 16:i32
%6 = lshr %3, %5
%7 = lshr %6, 5:i32
%8 = and %7, 8:i32
%9 = or %8, %5
%10 = lshr %6, %8
%11 = lshr %10, 2:i32
%12 = and %11, 4:i32
%13 = or %9, %12
%14 = lshr %10, %12 (hasExternalUses)
%15 = lshr %14, 1:i32
%16 = and %15, 2:i32 (hasExternalUses)
%17 = or %13, %16
%18 = ne %0, 0:i32
%19:i32 = var
%20 = block 2
%21:i32 = var
%22 = ult %21, 11:i32
blockpc %20 0 %22 1:i1
%23:i32 = zext %22
%24 = eq %23, 0:i32
blockpc %20 1 %24 1:i1
%25 = add %21, 11:i32
%26 = and %25, -8:i32
%27 = phi %20, 16:i32, %26
%28 = ult %19, %27
%29:i32 = var
pc %18 1:i1
pc %28 1:i1
pc %29 1:i1
infer %17


; start LHS (in $6)
%0:i32 = var
%1 = sub 0:i32, %0
%2 = and %0, %1
%3 = add %2, -1:i32
%4 = lshr %3, 12:i32
%5 = and %4, 16:i32 (hasExternalUses)
%6 = lshr %3, %5
%7 = lshr %6, 5:i32
%8 = and %7, 8:i32 (hasExternalUses)
%9 = lshr %6, %8
%10 = lshr %9, 2:i32
%11 = and %10, 4:i32 (hasExternalUses)
%12 = lshr %9, %11
%13 = lshr %12, 1:i32
%14 = and %13, 2:i32 (hasExternalUses)
%15 = lshr %12, %14
%16 = ne %0, 0:i32
%17:i32 = var
%18 = block 2
%19:i32 = var
%20 = ult %19, 11:i32
blockpc %18 0 %20 1:i1
%21:i32 = zext %20
%22 = eq %21, 0:i32
blockpc %18 1 %22 1:i1
%23 = add %19, 11:i32
%24 = and %23, -8:i32
%25 = phi %18, 16:i32, %24
%26 = ult %17, %25
%27 = ult %19, 245:i32
pc %16 1:i1
pc %26 1:i1
pc %27 1:i1
infer %15


; start LHS (in $6)
%0:i32 = var
%1 = sub 0:i32, %0
%2 = and %0, %1
%3 = add %2, -1:i32
%4 = lshr %3, 12:i32
%5 = and %4, 16:i32 (hasExternalUses)
%6 = lshr %3, %5
%7 = lshr %6, 5:i32
%8 = and %7, 8:i32 (hasExternalUses)
%9 = lshr %6, %8
%10 = lshr %9, 2:i32
%11 = and %10, 4:i32 (hasExternalUses)
%12 = lshr %9, %11
%13 = lshr %12, 1:i32
%14 = and %13, 2:i32 (hasExternalUses)
%15 = lshr %12, %14 (hasExternalUses)
%16 = lshr %15, 1:i32
%17 = ne %0, 0:i32
%18:i32 = var
%19 = block 2
%20:i32 = var
%21 = ult %20, 11:i32
blockpc %19 0 %21 1:i1
%22:i32 = zext %21
%23 = eq %22, 0:i32
blockpc %19 1 %23 1:i1
%24 = add %20, 11:i32
%25 = and %24, -8:i32
%26 = phi %19, 16:i32, %25
%27 = ult %18, %26
%28:i32 = var
pc %17 1:i1
pc %27 1:i1
pc %28 1:i1
infer %16


; start LHS (in $6)
%0:i32 = var
%1 = sub 0:i32, %0
%2 = and %0, %1
%3 = add %2, -1:i32
%4 = lshr %3, 12:i32
%5 = and %4, 16:i32 (hasExternalUses)
%6 = lshr %3, %5
%7 = lshr %6, 5:i32
%8 = and %7, 8:i32 (hasExternalUses)
%9 = lshr %6, %8
%10 = lshr %9, 2:i32
%11 = and %10, 4:i32 (hasExternalUses)
%12 = lshr %9, %11
%13 = lshr %12, 1:i32
%14 = and %13, 2:i32 (hasExternalUses)
%15 = lshr %12, %14 (hasExternalUses)
%16 = lshr %15, 1:i32
%17 = and %16, 1:i32
%18 = ne %0, 0:i32
%19:i32 = var
%20 = block 2
%21:i32 = var
%22 = ult %21, 11:i32
blockpc %20 0 %22 1:i1
%23:i32 = zext %22
%24 = eq %23, 0:i32
blockpc %20 1 %24 1:i1
%25 = add %21, 11:i32
%26 = and %25, -8:i32
%27 = phi %20, 16:i32, %26
%28 = ult %19, %27
%29:i32 = var
pc %18 1:i1
pc %28 1:i1
pc %29 1:i1
infer %17


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = and %0, %1
%3 = add %2, -1:i32
%4 = lshr %3, 12:i32
%5 = and %4, 16:i32
%6 = lshr %3, %5
%7 = lshr %6, 5:i32
%8 = and %7, 8:i32
%9 = or %8, %5
%10 = lshr %6, %8
%11 = lshr %10, 2:i32
%12 = and %11, 4:i32
%13 = or %9, %12
%14 = lshr %10, %12
%15 = lshr %14, 1:i32
%16 = and %15, 2:i32
%17 = or %13, %16
%18 = lshr %14, %16 (hasExternalUses)
%19 = lshr %18, 1:i32
%20 = and %19, 1:i32 (hasExternalUses)
%21 = or %17, %20
%22 = ne %0, 0:i32
%23:i32 = var
%24 = block 2
%25:i32 = var
%26 = ult %25, 11:i32
blockpc %24 0 %26 1:i1
%27:i32 = zext %26
%28 = eq %27, 0:i32
blockpc %24 1 %28 1:i1
%29:i32 = var
%30 = phi %24, 16:i32, %29
%31 = ult %23, %30
%32:i32 = var
pc %22 1:i1
pc %31 1:i1
pc %32 1:i1
infer %21


; start LHS (in $6)
%0:i32 = var
%1 = sub 0:i32, %0
%2 = and %0, %1
%3 = add %2, -1:i32
%4 = lshr %3, 12:i32
%5 = and %4, 16:i32 (hasExternalUses)
%6 = lshr %3, %5
%7 = lshr %6, 5:i32
%8 = and %7, 8:i32 (hasExternalUses)
%9 = lshr %6, %8
%10 = lshr %9, 2:i32
%11 = and %10, 4:i32 (hasExternalUses)
%12 = lshr %9, %11
%13 = lshr %12, 1:i32
%14 = and %13, 2:i32 (hasExternalUses)
%15 = lshr %12, %14
%16 = lshr %15, 1:i32
%17 = and %16, 1:i32 (hasExternalUses)
%18 = lshr %15, %17
%19 = ne %0, 0:i32
%20:i32 = var
%21 = block 2
%22:i32 = var
%23 = ult %22, 11:i32
blockpc %21 0 %23 1:i1
%24:i32 = zext %23
%25 = eq %24, 0:i32
blockpc %21 1 %25 1:i1
%26 = add %22, 11:i32
%27 = and %26, -8:i32
%28 = phi %21, 16:i32, %27
%29 = ult %20, %28
%30:i32 = var
pc %19 1:i1
pc %29 1:i1
pc %30 1:i1
infer %18


; start LHS (in $6)
%0:i32 = var
%1 = add %0, -1:i32 (hasExternalUses)
%2:i32 = var
%3 = and %2, 16:i32
%4 = lshr %1, %3
%5 = lshr %4, 5:i32
%6 = and %5, 8:i32
%7 = or %6, %3
%8 = lshr %4, %6
%9 = lshr %8, 2:i32
%10 = and %9, 4:i32
%11 = or %7, %10
%12 = lshr %8, %10
%13 = lshr %12, 1:i32
%14 = and %13, 2:i32
%15 = or %11, %14
%16 = lshr %12, %14
%17 = lshr %16, 1:i32
%18 = and %17, 1:i32
%19 = or %15, %18
%20 = lshr %16, %18
%21 = add %19, %20
%22:i32 = var
%23 = ne %22, 0:i32
%24:i32 = var
%25 = block 2
%26:i32 = var
%27 = ult %26, 11:i32
blockpc %25 0 %27 1:i1
%28:i32 = zext %27
%29 = eq %28, 0:i32
blockpc %25 1 %29 1:i1
%30:i32 = var
%31 = phi %25, 16:i32, %30
%32 = ult %24, %31
%33:i32 = var
pc %23 1:i1
pc %32 1:i1
pc %33 1:i1
infer %21


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = lshr %0, %1
%3 = lshr %2, 5:i32
%4 = and %3, 8:i32
%5 = or %4, %1
%6 = lshr %2, %4
%7 = lshr %6, 2:i32
%8 = and %7, 4:i32
%9 = or %5, %8
%10 = lshr %6, %8
%11 = lshr %10, 1:i32
%12 = and %11, 2:i32
%13 = or %9, %12
%14 = lshr %10, %12
%15 = lshr %14, 1:i32
%16 = and %15, 1:i32
%17 = or %13, %16
%18 = lshr %14, %16
%19 = add %17, %18
%20 = shl %19, 2:i32
%21:i32 = var
%22 = ne %21, 0:i32
%23:i32 = var
%24 = block 2
%25:i32 = var
%26 = ult %25, 11:i32
blockpc %24 0 %26 1:i1
%27:i32 = zext %26
%28 = eq %27, 0:i32
blockpc %24 1 %28 1:i1
%29:i32 = var
%30 = phi %24, 16:i32, %29
%31 = ult %23, %30
%32:i32 = var
pc %22 1:i1
pc %31 1:i1
pc %32 1:i1
infer %20


; start LHS (in $6)
%0:i32 = var
%1 = lshr %0, 5:i32
%2 = and %1, 8:i32
%3:i32 = var
%4 = lshr %3, 12:i32
%5 = and %4, 16:i32 (hasExternalUses)
%6 = or %2, %5
%7 = lshr %0, %2
%8 = lshr %7, 2:i32
%9 = and %8, 4:i32
%10 = or %6, %9
%11 = lshr %7, %9
%12 = lshr %11, 1:i32
%13 = and %12, 2:i32
%14 = or %10, %13
%15 = lshr %11, %13
%16 = lshr %15, 1:i32
%17 = and %16, 1:i32
%18 = or %14, %17
%19 = lshr %15, %17
%20 = add %18, %19
%21 = shl %20, 2:i32
%22 = add %21, 4260:i32
%23:i32 = var
%24 = ne %23, 0:i32
%25:i32 = var
%26 = block 2
%27:i32 = var
%28 = ult %27, 11:i32
blockpc %26 0 %28 1:i1
%29:i32 = var
blockpc %26 1 %29 1:i1
%30:i32 = var
%31 = phi %26, 16:i32, %30
%32 = ult %25, %31
%33:i32 = var
pc %24 1:i1
pc %32 1:i1
pc %33 1:i1
infer %22


; start LHS (in $6)
%0:i32 = var
%1 = and %0, -8:i32
%2:i32 = var
%3 = ne %2, 0:i32
%4:i32 = var
%5 = block 2
%6:i32 = var
%7 = ult %6, 11:i32
blockpc %5 0 %7 1:i1
%8:i32 = zext %7
%9 = eq %8, 0:i32
blockpc %5 1 %9 1:i1
%10 = add %6, 11:i32
%11 = and %10, -8:i32
%12 = phi %5, 16:i32, %11
%13 = ult %4, %12
%14 = ult %6, 245:i32
pc %3 1:i1
pc %13 1:i1
pc %14 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = and %0, -8:i32
%2 = block 2
%3:i32 = var
%4 = add %3, 11:i32
%5 = and %4, -8:i32 (hasExternalUses)
%6 = phi %2, 16:i32, %5
%7 = sub %1, %6
%8 = ult %3, 11:i32
blockpc %2 0 %8 1:i1
%9:i32 = zext %8
%10 = eq %9, 0:i32
blockpc %2 1 %10 1:i1
%11:i32 = var
%12 = ne %11, 0:i32
%13:i32 = var
%14 = ult %13, %6
%15 = ult %3, 245:i32
pc %12 1:i1
pc %14 1:i1
pc %15 1:i1
infer %7


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 16:i32
%2:i32 = var
%3 = ne %2, 0:i32
%4:i32 = var
%5 = block 2
%6:i32 = var
%7 = ult %6, 11:i32
blockpc %5 0 %7 1:i1
%8:i32 = zext %7
%9 = eq %8, 0:i32
blockpc %5 1 %9 1:i1
%10 = add %6, 11:i32
%11 = and %10, -8:i32
%12 = phi %5, 16:i32, %11
%13 = ult %4, %12
%14 = ult %6, 245:i32
pc %3 1:i1
pc %13 1:i1
pc %14 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = eq %0, 0:i32
%2:i32 = var
%3 = ne %2, 0:i32
%4:i32 = var
%5 = block 2
%6:i32 = var
%7 = ult %6, 11:i32
blockpc %5 0 %7 1:i1
%8:i32 = zext %7
%9 = eq %8, 0:i32
blockpc %5 1 %9 1:i1
%10 = add %6, 11:i32
%11 = and %10, -8:i32
%12 = phi %5, 16:i32, %11
%13 = ult %4, %12
%14 = ult %6, 245:i32
pc %3 1:i1
pc %13 1:i1
pc %14 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = eq %0, 0:i32
%2:i32 = zext %1
%3 = shl %2, 2:i32
%4:i32 = var
%5 = ne %4, 0:i32
%6:i32 = var
%7 = block 2
%8:i32 = var
%9 = ult %8, 11:i32
blockpc %7 0 %9 1:i1
%10:i32 = zext %9
%11 = eq %10, 0:i32
blockpc %7 1 %11 1:i1
%12 = add %8, 11:i32
%13 = and %12, -8:i32
%14 = phi %7, 16:i32, %13
%15 = ult %6, %14
%16 = ult %8, 245:i32
pc %5 1:i1
pc %15 1:i1
pc %16 1:i1
infer %3


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 16:i32
%2:i32 = var
%3 = eq %2, 0:i32
%4:i32 = zext %3
%5 = shl %4, 2:i32
%6 = add %1, %5
%7:i32 = var
%8 = ne %7, 0:i32
%9:i32 = var
%10 = block 2
%11:i32 = var
%12 = ult %11, 11:i32
blockpc %10 0 %12 1:i1
%13:i32 = zext %12
%14 = eq %13, 0:i32
blockpc %10 1 %14 1:i1
%15 = add %11, 11:i32
%16 = and %15, -8:i32
%17 = phi %10, 16:i32, %16
%18 = ult %9, %17
%19 = ult %11, 245:i32
pc %8 1:i1
pc %18 1:i1
pc %19 1:i1
infer %6


; start LHS (in $6)
%0:i32 = var
%1 = and %0, -8:i32
%2:i32 = var
%3 = ne %2, 0:i32
%4:i32 = var
%5 = ne %4, 0:i32
%6:i32 = var
%7 = block 2
%8:i32 = var
%9 = ult %8, 11:i32
blockpc %7 0 %9 1:i1
%10:i32 = zext %9
%11 = eq %10, 0:i32
blockpc %7 1 %11 1:i1
%12 = add %8, 11:i32
%13 = and %12, -8:i32
%14 = phi %7, 16:i32, %13
%15 = ult %6, %14
%16 = ult %8, 245:i32
pc %3 1:i1
pc %5 1:i1
pc %15 1:i1
pc %16 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = and %0, -8:i32
%2 = block 2
%3:i32 = var
%4 = add %3, 11:i32
%5 = and %4, -8:i32 (hasExternalUses)
%6 = phi %2, 16:i32, %5
%7 = sub %1, %6
%8 = ult %3, 11:i32
blockpc %2 0 %8 1:i1
%9:i32 = zext %8
%10 = eq %9, 0:i32
blockpc %2 1 %10 1:i1
%11:i32 = var
%12 = ne %11, 0:i32
%13:i32 = var
%14 = ne %13, 0:i32
%15:i32 = var
%16 = ult %15, %6
%17 = ult %3, 245:i32
pc %12 1:i1
pc %14 1:i1
pc %16 1:i1
pc %17 1:i1
infer %7


; start LHS (in $6)
%0:i32 = var
%1 = and %0, -8:i32
%2 = block 2
%3:i32 = var
%4 = add %3, 11:i32
%5 = and %4, -8:i32 (hasExternalUses)
%6 = phi %2, 16:i32, %5
%7 = sub %1, %6 (hasExternalUses)
%8:i32 = var
%9 = ult %7, %8
%10 = ult %3, 11:i32
blockpc %2 0 %10 1:i1
%11:i32 = zext %10
%12 = eq %11, 0:i32
blockpc %2 1 %12 1:i1
%13:i32 = var
%14 = ne %13, 0:i32
%15:i32 = var
%16 = ne %15, 0:i32
%17:i32 = var
%18 = ult %17, %6
%19 = ult %3, 245:i32
pc %14 1:i1
pc %16 1:i1
pc %18 1:i1
pc %19 1:i1
infer %9


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 16:i32
%2:i32 = var
%3 = ne %2, 0:i32
%4:i32 = var
%5 = ne %4, 0:i32
%6:i32 = var
%7 = block 2
%8:i32 = var
%9 = ult %8, 11:i32
blockpc %7 0 %9 1:i1
%10:i32 = zext %9
%11 = eq %10, 0:i32
blockpc %7 1 %11 1:i1
%12 = add %8, 11:i32
%13 = and %12, -8:i32
%14 = phi %7, 16:i32, %13
%15 = ult %6, %14
%16 = ult %8, 245:i32
pc %3 1:i1
pc %5 1:i1
pc %15 1:i1
pc %16 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = eq %0, 0:i32
%2:i32 = var
%3 = ne %2, 0:i32
%4:i32 = var
%5 = ne %4, 0:i32
%6:i32 = var
%7 = block 2
%8:i32 = var
%9 = ult %8, 11:i32
blockpc %7 0 %9 1:i1
%10:i32 = zext %9
%11 = eq %10, 0:i32
blockpc %7 1 %11 1:i1
%12 = add %8, 11:i32
%13 = and %12, -8:i32
%14 = phi %7, 16:i32, %13
%15 = ult %6, %14
%16 = ult %8, 245:i32
pc %3 1:i1
pc %5 1:i1
pc %15 1:i1
pc %16 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = eq %0, 0:i32
%2:i32 = zext %1
%3 = shl %2, 2:i32
%4:i32 = var
%5 = ne %4, 0:i32
%6:i32 = var
%7 = ne %6, 0:i32
%8:i32 = var
%9 = block 2
%10:i32 = var
%11 = ult %10, 11:i32
blockpc %9 0 %11 1:i1
%12:i32 = zext %11
%13 = eq %12, 0:i32
blockpc %9 1 %13 1:i1
%14 = add %10, 11:i32
%15 = and %14, -8:i32
%16 = phi %9, 16:i32, %15
%17 = ult %8, %16
%18 = ult %10, 245:i32
pc %5 1:i1
pc %7 1:i1
pc %17 1:i1
pc %18 1:i1
infer %3


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 16:i32
%2:i32 = var
%3 = eq %2, 0:i32
%4:i32 = zext %3
%5 = shl %4, 2:i32
%6 = add %1, %5
%7:i32 = var
%8 = ne %7, 0:i32
%9:i32 = var
%10 = ne %9, 0:i32
%11:i32 = var
%12 = block 2
%13:i32 = var
%14 = ult %13, 11:i32
blockpc %12 0 %14 1:i1
%15:i32 = zext %14
%16 = eq %15, 0:i32
blockpc %12 1 %16 1:i1
%17 = add %13, 11:i32
%18 = and %17, -8:i32
%19 = phi %12, 16:i32, %18
%20 = ult %11, %19
%21 = ult %13, 245:i32
pc %8 1:i1
pc %10 1:i1
pc %20 1:i1
pc %21 1:i1
infer %6


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2:i32 = var
%3:i32 = var
%4 = phi %1, %2, %3
%5:i32 = var
%6 = phi %0, %4, %5
%7 = block 2
%8:i32 = var
%9 = add %8, 11:i32
%10 = and %9, -8:i32 (hasExternalUses)
%11 = phi %7, 16:i32, %10
%12 = add %6, %11
%13:i32 = var
%14 = ne %13, 0:i32
blockpc %0 0 %14 1:i1
%15 = eq %13, 0:i32
blockpc %0 1 %15 1:i1
%16:i32 = var
%17 = and %16, -8:i32
%18 = sub %17, %11
%19:i32 = var
%20 = ult %18, %19
blockpc %1 0 %20 1:i1
%21:i32 = zext %20
%22 = eq %21, 0:i32
blockpc %1 1 %22 1:i1
%23 = ult %8, 11:i32
blockpc %7 0 %23 1:i1
%24:i32 = zext %23
%25 = eq %24, 0:i32
blockpc %7 1 %25 1:i1
%26:i32 = var
%27:i32 = var
%28:i32 = var
pc %26 1:i1
pc %27 1:i1
pc %28 1:i1
infer %12


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2:i32 = var
%3:i32 = var
%4 = phi %1, %2, %3
%5:i32 = var
%6 = phi %0, %4, %5
%7 = block 2
%8:i32 = var
%9 = add %8, 11:i32
%10 = and %9, -8:i32 (hasExternalUses)
%11 = phi %7, 16:i32, %10
%12 = add %6, %11 (hasExternalUses)
%13 = ult %6, %12
%14:i32 = var
%15 = ne %14, 0:i32
blockpc %0 0 %15 1:i1
%16 = eq %14, 0:i32
blockpc %0 1 %16 1:i1
%17:i32 = var
%18 = and %17, -8:i32
%19 = sub %18, %11
%20:i32 = var
%21 = ult %19, %20
blockpc %1 0 %21 1:i1
%22:i32 = zext %21
%23 = eq %22, 0:i32
blockpc %1 1 %23 1:i1
%24 = ult %8, 11:i32
blockpc %7 0 %24 1:i1
%25:i32 = var
blockpc %7 1 %25 1:i1
%26:i32 = var
%27:i32 = var
%28:i32 = var
pc %26 1:i1
pc %27 1:i1
pc %28 1:i1
infer %13


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = phi %1, %5, %6
%8 = eq %0, %7
%9:i32 = var
%10 = ne %9, 0:i32
blockpc %1 0 %10 1:i1
%11 = eq %9, 0:i32
blockpc %1 1 %11 1:i1
%12:i32 = var
%13 = and %12, -8:i32
%14 = block 2
%15:i32 = var
%16 = ult %15, 11:i32
blockpc %14 0 %16 1:i1
%17:i32 = zext %16
%18 = eq %17, 0:i32
blockpc %14 1 %18 1:i1
%19 = add %15, 11:i32
%20 = and %19, -8:i32
%21 = phi %14, 16:i32, %20
%22 = sub %13, %21
%23:i32 = var
%24 = ult %22, %23
blockpc %2 0 %24 1:i1
%25:i32 = var
blockpc %2 1 %25 1:i1
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29:i32 = var
pc %26 1:i1
pc %27 1:i1
pc %28 1:i1
pc %29 1:i1
infer %8


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2:i32 = var
%3:i32 = var
%4 = phi %1, %2, %3
%5:i32 = var
%6 = phi %0, %4, %5
%7 = add %6, 20:i32
%8:i32 = var
%9 = ne %8, 0:i32
blockpc %0 0 %9 1:i1
%10 = eq %8, 0:i32
blockpc %0 1 %10 1:i1
%11:i32 = var
%12 = and %11, -8:i32
%13 = block 2
%14:i32 = var
%15 = ult %14, 11:i32
blockpc %13 0 %15 1:i1
%16:i32 = zext %15
%17 = eq %16, 0:i32
blockpc %13 1 %17 1:i1
%18 = add %14, 11:i32
%19 = and %18, -8:i32
%20 = phi %13, 16:i32, %19
%21 = sub %12, %20
%22:i32 = var
%23 = ult %21, %22
blockpc %1 0 %23 1:i1
%24:i32 = zext %23
%25 = eq %24, 0:i32
blockpc %1 1 %25 1:i1
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29:i32 = var
%30:i32 = var
pc %26 1:i1
pc %27 1:i1
pc %28 1:i1
pc %29 1:i1
pc %30 1:i1
infer %7


; start LHS (in $6)
%0:i32 = var
%1 = eq %0, 0:i32
%2:i32 = var
%3 = block 2
%4:i32 = var
%5 = ne %4, 0:i32
blockpc %3 0 %5 1:i1
%6 = eq %4, 0:i32
blockpc %3 1 %6 1:i1
%7 = block 2
%8:i32 = var
%9 = and %8, -8:i32
%10 = block 2
%11:i32 = var
%12 = ult %11, 11:i32
blockpc %10 0 %12 1:i1
%13:i32 = zext %12
%14 = eq %13, 0:i32
blockpc %10 1 %14 1:i1
%15 = add %11, 11:i32
%16 = and %15, -8:i32
%17 = phi %10, 16:i32, %16
%18 = sub %9, %17
%19:i32 = var
%20 = ult %18, %19
blockpc %7 0 %20 1:i1
%21:i32 = zext %20
%22 = eq %21, 0:i32
blockpc %7 1 %22 1:i1
%23:i32 = var
%24:i32 = var
%25 = phi %7, %23, %24
%26:i32 = var
%27 = phi %3, %25, %26
%28 = eq %2, %27
%29:i32 = var
%30:i32 = var
%31:i32 = var
%32:i32 = var
pc %28 1:i1
pc %29 1:i1
pc %30 1:i1
pc %31 1:i1
pc %32 1:i1
infer %1


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2:i32 = var
%3:i32 = var
%4 = phi %1, %2, %3
%5:i32 = var
%6 = phi %0, %4, %5
%7 = add %6, 16:i32
%8:i32 = var
%9 = ne %8, 0:i32
blockpc %0 0 %9 1:i1
%10 = eq %8, 0:i32
blockpc %0 1 %10 1:i1
%11:i32 = var
%12 = and %11, -8:i32
%13 = block 2
%14:i32 = var
%15 = ult %14, 11:i32
blockpc %13 0 %15 1:i1
%16:i32 = zext %15
%17 = eq %16, 0:i32
blockpc %13 1 %17 1:i1
%18 = add %14, 11:i32
%19 = and %18, -8:i32
%20 = phi %13, 16:i32, %19
%21 = sub %12, %20
%22:i32 = var
%23 = ult %21, %22
blockpc %1 0 %23 1:i1
%24:i32 = zext %23
%25 = eq %24, 0:i32
blockpc %1 1 %25 1:i1
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29:i32 = var
%30:i32 = var
%31:i32 = var
pc %26 1:i1
pc %27 1:i1
pc %28 1:i1
pc %29 1:i1
pc %30 1:i1
pc %31 1:i1
infer %7


; start LHS (in $6)
%0:i32 = var
%1 = eq %0, 0:i32
%2:i32 = var
%3 = eq %2, 0:i32
%4:i32 = var
%5 = block 2
%6:i32 = var
%7 = ne %6, 0:i32
blockpc %5 0 %7 1:i1
%8 = eq %6, 0:i32
blockpc %5 1 %8 1:i1
%9 = block 2
%10:i32 = var
%11 = and %10, -8:i32
%12 = block 2
%13:i32 = var
%14 = ult %13, 11:i32
blockpc %12 0 %14 1:i1
%15:i32 = zext %14
%16 = eq %15, 0:i32
blockpc %12 1 %16 1:i1
%17 = add %13, 11:i32
%18 = and %17, -8:i32
%19 = phi %12, 16:i32, %18
%20 = sub %11, %19
%21:i32 = var
%22 = ult %20, %21
blockpc %9 0 %22 1:i1
%23:i32 = zext %22
%24 = eq %23, 0:i32
blockpc %9 1 %24 1:i1
%25:i32 = var
%26:i32 = var
%27 = phi %9, %25, %26
%28:i32 = var
%29 = phi %5, %27, %28
%30 = eq %4, %29
%31:i32 = var
%32:i32 = var
%33:i32 = var
%34:i32 = var
pc %3 1:i1
pc %30 1:i1
pc %31 1:i1
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 20:i32
%2:i32 = var
%3 = block 2
%4:i32 = var
%5 = ne %4, 0:i32
blockpc %3 0 %5 1:i1
%6 = eq %4, 0:i32
blockpc %3 1 %6 1:i1
%7 = block 2
%8:i32 = var
%9 = and %8, -8:i32
%10 = block 2
%11:i32 = var
%12 = ult %11, 11:i32
blockpc %10 0 %12 1:i1
%13:i32 = zext %12
%14 = eq %13, 0:i32
blockpc %10 1 %14 1:i1
%15 = add %11, 11:i32
%16 = and %15, -8:i32
%17 = phi %10, 16:i32, %16
%18 = sub %9, %17
%19:i32 = var
%20 = ult %18, %19
blockpc %7 0 %20 1:i1
%21:i32 = zext %20
%22 = eq %21, 0:i32
blockpc %7 1 %22 1:i1
%23:i32 = var
%24:i32 = var
%25 = phi %7, %23, %24
%26:i32 = var
%27 = phi %3, %25, %26
%28 = eq %2, %27
%29:i32 = var
%30:i32 = var
%31:i32 = var
%32:i32 = var
pc %28 1:i1
pc %29 1:i1
pc %30 1:i1
pc %31 1:i1
pc %32 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 16:i32
%2:i32 = var
%3 = block 2
%4:i32 = var
%5 = ne %4, 0:i32
blockpc %3 0 %5 1:i1
%6 = eq %4, 0:i32
blockpc %3 1 %6 1:i1
%7 = block 2
%8:i32 = var
%9 = and %8, -8:i32
%10 = block 2
%11:i32 = var
%12 = ult %11, 11:i32
blockpc %10 0 %12 1:i1
%13:i32 = zext %12
%14 = eq %13, 0:i32
blockpc %10 1 %14 1:i1
%15 = add %11, 11:i32
%16 = and %15, -8:i32
%17 = phi %10, 16:i32, %16
%18 = sub %9, %17
%19:i32 = var
%20 = ult %18, %19
blockpc %7 0 %20 1:i1
%21:i32 = zext %20
%22 = eq %21, 0:i32
blockpc %7 1 %22 1:i1
%23:i32 = var
%24:i32 = var
%25 = phi %7, %23, %24
%26:i32 = var
%27 = phi %3, %25, %26
%28 = eq %2, %27
%29:i32 = var
%30:i32 = var
%31:i32 = var
%32:i32 = var
pc %28 1:i1
pc %29 1:i1
pc %30 1:i1
pc %31 1:i1
pc %32 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = shl %0, 2:i32
%2:i32 = var
%3 = ne %2, 0:i32
%4 = block 2
%5:i32 = var
%6 = ne %5, 0:i32
blockpc %4 0 %6 1:i1
%7 = eq %5, 0:i32
blockpc %4 1 %7 1:i1
%8 = block 2
%9:i32 = var
%10 = and %9, -8:i32
%11 = block 2
%12:i32 = var
%13 = ult %12, 11:i32
blockpc %11 0 %13 1:i1
%14:i32 = zext %13
%15 = eq %14, 0:i32
blockpc %11 1 %15 1:i1
%16 = add %12, 11:i32
%17 = and %16, -8:i32
%18 = phi %11, 16:i32, %17
%19 = sub %10, %18
%20:i32 = var
%21 = ult %19, %20
blockpc %8 0 %21 1:i1
%22:i32 = zext %21
%23 = eq %22, 0:i32
blockpc %8 1 %23 1:i1
%24:i32 = var
%25:i32 = var
%26 = phi %8, %24, %25
%27:i32 = var
%28 = phi %4, %26, %27
%29:i32 = var
%30 = ult %28, %29
%31:i32 = var
%32:i32 = var
%33:i32 = var
pc %3 1:i1
pc %30 1:i1
pc %31 1:i1
pc %32 1:i1
pc %33 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = shl %0, 2:i32
%2 = add %1, 4260:i32
%3:i32 = var
%4 = ne %3, 0:i32
%5 = block 2
%6:i32 = var
%7 = ne %6, 0:i32
blockpc %5 0 %7 1:i1
%8 = eq %6, 0:i32
blockpc %5 1 %8 1:i1
%9 = block 2
%10:i32 = var
%11 = and %10, -8:i32
%12 = block 2
%13:i32 = var
%14 = ult %13, 11:i32
blockpc %12 0 %14 1:i1
%15:i32 = zext %14
%16 = eq %15, 0:i32
blockpc %12 1 %16 1:i1
%17 = add %13, 11:i32
%18 = and %17, -8:i32
%19 = phi %12, 16:i32, %18
%20 = sub %11, %19
%21:i32 = var
%22 = ult %20, %21
blockpc %9 0 %22 1:i1
%23:i32 = zext %22
%24 = eq %23, 0:i32
blockpc %9 1 %24 1:i1
%25:i32 = var
%26:i32 = var
%27 = phi %9, %25, %26
%28:i32 = var
%29 = phi %5, %27, %28
%30:i32 = var
%31 = ult %29, %30
%32:i32 = var
%33:i32 = var
%34:i32 = var
pc %4 1:i1
pc %31 1:i1
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
infer %2


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2:i32 = var
%3:i32 = var
%4 = phi %1, %2, %3
%5:i32 = var
%6 = phi %0, %4, %5
%7:i32 = var
%8 = eq %6, %7
%9:i32 = var
%10 = ne %9, 0:i32
blockpc %0 0 %10 1:i1
%11 = eq %9, 0:i32
blockpc %0 1 %11 1:i1
%12:i32 = var
%13 = and %12, -8:i32
%14 = block 2
%15:i32 = var
%16 = ult %15, 11:i32
blockpc %14 0 %16 1:i1
%17:i32 = zext %16
%18 = eq %17, 0:i32
blockpc %14 1 %18 1:i1
%19 = add %15, 11:i32
%20 = and %19, -8:i32
%21 = phi %14, 16:i32, %20
%22 = sub %13, %21
%23:i32 = var
%24 = ult %22, %23
blockpc %1 0 %24 1:i1
%25:i32 = var
blockpc %1 1 %25 1:i1
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29:i32 = var
%30:i32 = var
pc %26 1:i1
pc %27 1:i1
pc %28 1:i1
pc %29 1:i1
pc %30 1:i1
infer %8


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2:i32 = var
%3:i32 = var
%4 = phi %1, %2, %3
%5 = phi %0, 0:i32, %4
%6 = eq %5, 0:i32
%7 = block 2
%8:i32 = var
%9 = ne %8, 0:i32
blockpc %7 0 %9 1:i1
%10 = eq %8, 0:i32
blockpc %7 1 %10 1:i1
%11 = block 2
%12:i32 = var
%13 = and %12, -8:i32
%14 = block 2
%15:i32 = var
blockpc %14 0 %15 1:i1
%16:i32 = var
blockpc %14 1 %16 1:i1
%17:i32 = var
%18 = and %17, -8:i32
%19 = phi %14, 16:i32, %18
%20 = sub %13, %19
%21:i32 = var
%22 = ult %20, %21
blockpc %11 0 %22 1:i1
%23:i32 = zext %22
%24 = eq %23, 0:i32
blockpc %11 1 %24 1:i1
%25:i32 = var
%26:i32 = var
%27 = phi %11, %25, %26
%28:i32 = var
%29 = phi %7, %27, %28
%30 = eq %3, %29
blockpc %1 0 %30 1:i1
%31:i32 = var
blockpc %1 1 %31 1:i1
%32:i32 = var
%33:i32 = var
%34:i32 = var
%35:i32 = var
%36:i32 = var
%37:i32 = var
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
pc %35 1:i1
pc %36 1:i1
pc %37 1:i1
infer %6


; start LHS (in $6)
%0:i32 = var
%1 = shl 1:i32, %0
%2 = block 2
%3 = block 2
%4:i32 = var
%5 = block 2
%6:i32 = var
%7 = ne %6, 0:i32
blockpc %5 0 %7 1:i1
%8 = eq %6, 0:i32
blockpc %5 1 %8 1:i1
%9 = block 2
%10:i32 = var
%11:i32 = var
%12 = ult %10, %11
blockpc %9 0 %12 1:i1
%13:i32 = zext %12
%14 = eq %13, 0:i32
blockpc %9 1 %14 1:i1
%15:i32 = var
%16:i32 = var
%17 = phi %9, %15, %16
%18:i32 = var
%19 = phi %5, %17, %18
%20 = eq %4, %19
blockpc %3 0 %20 1:i1
%21:i32 = zext %20
%22 = eq %21, 0:i32
blockpc %3 1 %22 1:i1
%23:i32 = var
%24 = phi %3, %23, %4
%25 = phi %2, 0:i32, %24
%26 = eq %25, 0:i32
%27:i32 = var
%28:i32 = var
%29:i32 = var
%30:i32 = var
%31:i32 = var
%32:i32 = var
pc %26 1:i1
pc %27 1:i1
pc %28 1:i1
pc %29 1:i1
pc %30 1:i1
pc %31 1:i1
pc %32 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = shl 1:i32, %0
%2 = xor %1, -1:i32
%3 = block 2
%4 = block 2
%5:i32 = var
%6 = block 2
%7:i32 = var
%8 = ne %7, 0:i32
blockpc %6 0 %8 1:i1
%9 = eq %7, 0:i32
blockpc %6 1 %9 1:i1
%10 = block 2
%11:i32 = var
%12:i32 = var
%13 = ult %11, %12
blockpc %10 0 %13 1:i1
%14:i32 = zext %13
%15 = eq %14, 0:i32
blockpc %10 1 %15 1:i1
%16:i32 = var
%17:i32 = var
%18 = phi %10, %16, %17
%19:i32 = var
%20 = phi %6, %18, %19
%21 = eq %5, %20
blockpc %4 0 %21 1:i1
%22:i32 = zext %21
%23 = eq %22, 0:i32
blockpc %4 1 %23 1:i1
%24:i32 = var
%25 = phi %4, %24, %5
%26 = phi %3, 0:i32, %25
%27 = eq %26, 0:i32
%28:i32 = var
%29:i32 = var
%30:i32 = var
%31:i32 = var
%32:i32 = var
%33:i32 = var
pc %27 1:i1
pc %28 1:i1
pc %29 1:i1
pc %30 1:i1
pc %31 1:i1
pc %32 1:i1
pc %33 1:i1
infer %2


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = shl 1:i32, %1
%3 = xor %2, -1:i32
%4 = and %0, %3
%5 = block 2
%6 = block 2
%7:i32 = var
%8 = block 2
%9:i32 = var
%10 = ne %9, 0:i32
blockpc %8 0 %10 1:i1
%11 = eq %9, 0:i32
blockpc %8 1 %11 1:i1
%12 = block 2
%13:i32 = var
%14:i32 = var
%15 = ult %13, %14
blockpc %12 0 %15 1:i1
%16:i32 = zext %15
%17 = eq %16, 0:i32
blockpc %12 1 %17 1:i1
%18:i32 = var
%19:i32 = var
%20 = phi %12, %18, %19
%21:i32 = var
%22 = phi %8, %20, %21
%23 = eq %7, %22
blockpc %6 0 %23 1:i1
%24:i32 = zext %23
%25 = eq %24, 0:i32
blockpc %6 1 %25 1:i1
%26:i32 = var
%27 = phi %6, %26, %7
%28 = phi %5, 0:i32, %27
%29 = eq %28, 0:i32
%30:i32 = var
%31:i32 = var
%32:i32 = var
%33:i32 = var
%34:i32 = var
%35:i32 = var
pc %29 1:i1
pc %30 1:i1
pc %31 1:i1
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
pc %35 1:i1
infer %4


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 16:i32
%2 = block 2
%3:i32 = var
%4 = ne %3, 0:i32
blockpc %2 0 %4 1:i1
%5 = eq %3, 0:i32
blockpc %2 1 %5 1:i1
%6 = block 2
%7:i32 = var
%8 = and %7, -8:i32
%9 = block 2
%10:i32 = var
blockpc %9 0 %10 1:i1
%11:i32 = var
blockpc %9 1 %11 1:i1
%12:i32 = var
%13 = phi %9, 16:i32, %12
%14 = sub %8, %13
%15:i32 = var
%16 = ult %14, %15
blockpc %6 0 %16 1:i1
%17:i32 = zext %16
%18 = eq %17, 0:i32
blockpc %6 1 %18 1:i1
%19:i32 = var
%20:i32 = var
%21 = phi %6, %19, %20
%22:i32 = var
%23 = phi %2, %21, %22
%24:i32 = var
%25 = eq %23, %24
%26:i32 = zext %25
%27 = eq %26, 0:i32
%28:i32 = var
%29:i32 = var
%30:i32 = var
%31:i32 = var
%32:i32 = var
pc %27 1:i1
pc %28 1:i1
pc %29 1:i1
pc %30 1:i1
pc %31 1:i1
pc %32 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = phi %1, %5, %6
%8 = ne %0, %7
%9:i32 = var
%10 = ne %9, 0:i32
blockpc %1 0 %10 1:i1
%11 = eq %9, 0:i32
blockpc %1 1 %11 1:i1
%12:i32 = var
%13 = and %12, -8:i32
%14 = block 2
%15:i32 = var
%16 = ult %15, 11:i32
blockpc %14 0 %16 1:i1
%17:i32 = zext %16
%18 = eq %17, 0:i32
blockpc %14 1 %18 1:i1
%19 = add %15, 11:i32
%20 = and %19, -8:i32
%21 = phi %14, 16:i32, %20
%22 = sub %13, %21
%23:i32 = var
%24 = ult %22, %23
blockpc %2 0 %24 1:i1
%25:i32 = var
blockpc %2 1 %25 1:i1
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29:i32 = var
%30:i32 = var
%31:i32 = var
pc %26 1:i1
pc %27 1:i1
pc %28 1:i1
pc %29 1:i1
pc %30 1:i1
pc %31 1:i1
infer %8


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = phi %1, %5, %6
%8 = ne %0, %7
%9:i32 = zext %8
%10 = shl %9, 2:i32
%11:i32 = var
%12 = ne %11, 0:i32
blockpc %1 0 %12 1:i1
%13 = eq %11, 0:i32
blockpc %1 1 %13 1:i1
%14:i32 = var
%15 = and %14, -8:i32
%16 = block 2
%17:i32 = var
%18 = ult %17, 11:i32
blockpc %16 0 %18 1:i1
%19:i32 = zext %18
%20 = eq %19, 0:i32
blockpc %16 1 %20 1:i1
%21 = add %17, 11:i32
%22 = and %21, -8:i32
%23 = phi %16, 16:i32, %22
%24 = sub %15, %23
%25:i32 = var
%26 = ult %24, %25
blockpc %2 0 %26 1:i1
%27:i32 = var
blockpc %2 1 %27 1:i1
%28:i32 = var
%29:i32 = var
%30:i32 = var
%31:i32 = var
%32:i32 = var
%33:i32 = var
pc %28 1:i1
pc %29 1:i1
pc %30 1:i1
pc %31 1:i1
pc %32 1:i1
pc %33 1:i1
infer %10


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 16:i32
%2:i32 = var
%3 = block 2
%4 = block 2
%5:i32 = var
%6:i32 = var
%7 = phi %4, %5, %6
%8:i32 = var
%9 = phi %3, %7, %8
%10 = ne %2, %9
%11:i32 = zext %10
%12 = shl %11, 2:i32
%13 = add %1, %12
%14:i32 = var
%15 = ne %14, 0:i32
blockpc %3 0 %15 1:i1
%16 = eq %14, 0:i32
blockpc %3 1 %16 1:i1
%17:i32 = var
%18 = and %17, -8:i32
%19 = block 2
%20:i32 = var
%21 = ult %20, 11:i32
blockpc %19 0 %21 1:i1
%22:i32 = zext %21
%23 = eq %22, 0:i32
blockpc %19 1 %23 1:i1
%24 = add %20, 11:i32
%25 = and %24, -8:i32
%26 = phi %19, 16:i32, %25
%27 = sub %18, %26
%28:i32 = var
%29 = ult %27, %28
blockpc %4 0 %29 1:i1
%30:i32 = var
blockpc %4 1 %30 1:i1
%31:i32 = var
%32:i32 = var
%33:i32 = var
%34:i32 = var
%35:i32 = var
%36:i32 = var
pc %31 1:i1
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
pc %35 1:i1
pc %36 1:i1
infer %13


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2:i32 = var
%3:i32 = var
%4 = phi %1, %2, %3
%5 = phi %0, 0:i32, %4
%6 = eq %5, 0:i32
%7 = block 2
%8:i32 = var
%9 = ne %8, 0:i32
blockpc %7 0 %9 1:i1
%10 = eq %8, 0:i32
blockpc %7 1 %10 1:i1
%11 = block 2
%12:i32 = var
%13 = and %12, -8:i32
%14 = block 2
%15:i32 = var
blockpc %14 0 %15 1:i1
%16:i32 = var
blockpc %14 1 %16 1:i1
%17:i32 = var
%18 = and %17, -8:i32
%19 = phi %14, 16:i32, %18
%20 = sub %13, %19
%21:i32 = var
%22 = ult %20, %21
blockpc %11 0 %22 1:i1
%23:i32 = zext %22
%24 = eq %23, 0:i32
blockpc %11 1 %24 1:i1
%25:i32 = var
%26:i32 = var
%27 = phi %11, %25, %26
%28:i32 = var
%29 = phi %7, %27, %28
%30 = eq %3, %29
blockpc %1 0 %30 1:i1
%31:i32 = var
blockpc %1 1 %31 1:i1
%32:i32 = var
%33:i32 = var
%34:i32 = var
%35:i32 = var
%36:i32 = var
%37:i32 = var
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
pc %35 1:i1
pc %36 1:i1
pc %37 1:i1
infer %6


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2:i32 = var
%3:i32 = var
%4 = and %3, -8:i32
%5 = block 2
%6:i32 = var
%7 = add %6, 11:i32
%8 = and %7, -8:i32 (hasExternalUses)
%9 = phi %5, 16:i32, %8
%10 = sub %4, %9 (hasExternalUses)
%11 = phi %1, %2, %10
%12:i32 = var
%13 = and %12, -8:i32
%14 = sub %13, %9 (hasExternalUses)
%15 = phi %0, %11, %14
%16 = ult %15, 16:i32
%17:i32 = var
%18 = ne %17, 0:i32
blockpc %0 0 %18 1:i1
%19 = eq %17, 0:i32
blockpc %0 1 %19 1:i1
%20 = ult %10, %2
blockpc %1 0 %20 1:i1
%21:i32 = zext %20
%22 = eq %21, 0:i32
blockpc %1 1 %22 1:i1
%23 = ult %6, 11:i32
blockpc %5 0 %23 1:i1
%24:i32 = zext %23
%25 = eq %24, 0:i32
blockpc %5 1 %25 1:i1
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29:i32 = var
pc %26 1:i1
pc %27 1:i1
pc %28 1:i1
pc %29 1:i1
infer %16


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2:i32 = var
%3:i32 = var
%4 = and %3, -8:i32
%5 = block 2
%6:i32 = var
%7 = add %6, 11:i32
%8 = and %7, -8:i32 (hasExternalUses)
%9 = phi %5, 16:i32, %8
%10 = sub %4, %9 (hasExternalUses)
%11 = phi %1, %2, %10
%12:i32 = var
%13 = and %12, -8:i32
%14 = sub %13, %9 (hasExternalUses)
%15 = phi %0, %11, %14
%16 = add %15, %9
%17:i32 = var
%18 = ne %17, 0:i32
blockpc %0 0 %18 1:i1
%19 = eq %17, 0:i32
blockpc %0 1 %19 1:i1
%20 = ult %10, %2
blockpc %1 0 %20 1:i1
%21:i32 = zext %20
%22 = eq %21, 0:i32
blockpc %1 1 %22 1:i1
%23 = ult %6, 11:i32
blockpc %5 0 %23 1:i1
%24:i32 = zext %23
%25 = eq %24, 0:i32
blockpc %5 1 %25 1:i1
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29:i32 = var
%30:i32 = var
pc %26 1:i1
pc %27 1:i1
pc %28 1:i1
pc %29 1:i1
pc %30 1:i1
infer %16


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2:i32 = var
%3:i32 = var
%4 = and %3, -8:i32
%5 = block 2
%6:i32 = var
%7 = add %6, 11:i32
%8 = and %7, -8:i32 (hasExternalUses)
%9 = phi %5, 16:i32, %8
%10 = sub %4, %9 (hasExternalUses)
%11 = phi %1, %2, %10
%12:i32 = var
%13 = and %12, -8:i32
%14 = sub %13, %9 (hasExternalUses)
%15 = phi %0, %11, %14
%16 = add %15, %9 (hasExternalUses)
%17 = or %16, 3:i32
%18:i32 = var
%19 = ne %18, 0:i32
blockpc %0 0 %19 1:i1
%20 = eq %18, 0:i32
blockpc %0 1 %20 1:i1
%21 = ult %10, %2
blockpc %1 0 %21 1:i1
%22:i32 = zext %21
%23 = eq %22, 0:i32
blockpc %1 1 %23 1:i1
%24 = ult %6, 11:i32
blockpc %5 0 %24 1:i1
%25:i32 = var
blockpc %5 1 %25 1:i1
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29:i32 = var
%30:i32 = var
pc %26 1:i1
pc %27 1:i1
pc %28 1:i1
pc %29 1:i1
pc %30 1:i1
infer %17


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2:i32 = var
%3:i32 = var
%4 = phi %1, %2, %3
%5:i32 = var
%6 = phi %0, %4, %5
%7 = block 2
%8:i32 = var
%9:i32 = var
%10 = and %9, -8:i32
%11 = block 2
%12:i32 = var
%13 = add %12, 11:i32
%14 = and %13, -8:i32 (hasExternalUses)
%15 = phi %11, 16:i32, %14
%16 = sub %10, %15 (hasExternalUses)
%17 = phi %7, %8, %16
%18:i32 = var
%19 = and %18, -8:i32
%20 = sub %19, %15 (hasExternalUses)
%21 = phi %0, %17, %20
%22 = add %21, %15 (hasExternalUses)
%23 = add %6, %22
%24:i32 = var
%25 = ne %24, 0:i32
blockpc %0 0 %25 1:i1
%26 = eq %24, 0:i32
blockpc %0 1 %26 1:i1
%27 = ult %16, %8
blockpc %1 0 %27 1:i1
%28:i32 = var
blockpc %1 1 %28 1:i1
blockpc %7 0 %27 1:i1
%29:i32 = var
blockpc %7 1 %29 1:i1
%30:i32 = var
blockpc %11 0 %30 1:i1
%31:i32 = var
blockpc %11 1 %31 1:i1
%32:i32 = var
%33:i32 = var
%34:i32 = var
%35:i32 = var
%36:i32 = var
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
pc %35 1:i1
pc %36 1:i1
infer %23


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2:i32 = var
%3:i32 = var
%4 = phi %1, %2, %3
%5:i32 = var
%6 = phi %0, %4, %5
%7 = block 2
%8:i32 = var
%9:i32 = var
%10 = and %9, -8:i32
%11 = block 2
%12:i32 = var
%13 = add %12, 11:i32
%14 = and %13, -8:i32 (hasExternalUses)
%15 = phi %11, 16:i32, %14
%16 = sub %10, %15 (hasExternalUses)
%17 = phi %7, %8, %16
%18:i32 = var
%19 = and %18, -8:i32
%20 = sub %19, %15 (hasExternalUses)
%21 = phi %0, %17, %20
%22 = add %21, %15 (hasExternalUses)
%23 = add %6, %22
%24 = add %23, 4:i32
%25:i32 = var
%26 = ne %25, 0:i32
blockpc %0 0 %26 1:i1
%27 = eq %25, 0:i32
blockpc %0 1 %27 1:i1
%28:i32 = var
blockpc %1 0 %28 1:i1
%29:i32 = var
blockpc %1 1 %29 1:i1
blockpc %7 0 %28 1:i1
%30:i32 = var
blockpc %7 1 %30 1:i1
%31:i32 = var
blockpc %11 0 %31 1:i1
%32:i32 = var
blockpc %11 1 %32 1:i1
%33:i32 = var
%34:i32 = var
%35:i32 = var
%36:i32 = var
%37:i32 = var
pc %33 1:i1
pc %34 1:i1
pc %35 1:i1
pc %36 1:i1
pc %37 1:i1
infer %24


; start LHS (in $6)
%0:i32 = var
%1 = or %0, 1:i32
%2 = block 2
%3:i32 = var
%4 = ne %3, 0:i32
blockpc %2 0 %4 1:i1
%5 = eq %3, 0:i32
blockpc %2 1 %5 1:i1
%6 = block 2
%7:i32 = var
%8 = and %7, -8:i32
%9 = block 2
%10:i32 = var
%11 = ult %10, 11:i32
blockpc %9 0 %11 1:i1
%12:i32 = zext %11
%13 = eq %12, 0:i32
blockpc %9 1 %13 1:i1
%14 = add %10, 11:i32
%15 = and %14, -8:i32
%16 = phi %9, 16:i32, %15
%17 = sub %8, %16
%18:i32 = var
%19 = ult %17, %18
blockpc %6 0 %19 1:i1
%20:i32 = zext %19
%21 = eq %20, 0:i32
blockpc %6 1 %21 1:i1
%22 = phi %6, %18, %17
%23:i32 = var
%24 = and %23, -8:i32
%25 = sub %24, %16
%26 = phi %2, %22, %25
%27 = ult %26, 16:i32
%28:i32 = var
%29:i32 = var
%30:i32 = var
%31:i32 = var
pc %27 1:i1
pc %28 1:i1
pc %29 1:i1
pc %30 1:i1
pc %31 1:i1
infer %1


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = add %1, 11:i32
%3 = and %2, -8:i32 (hasExternalUses)
%4 = phi %0, 16:i32, %3
%5 = or %4, 3:i32
%6 = ult %1, 11:i32
blockpc %0 0 %6 1:i1
%7:i32 = zext %6
%8 = eq %7, 0:i32
blockpc %0 1 %8 1:i1
%9 = block 2
%10:i32 = var
%11 = ne %10, 0:i32
blockpc %9 0 %11 1:i1
%12 = eq %10, 0:i32
blockpc %9 1 %12 1:i1
%13 = block 2
%14:i32 = var
%15 = and %14, -8:i32
%16 = sub %15, %4
%17:i32 = var
%18 = ult %16, %17
blockpc %13 0 %18 1:i1
%19:i32 = zext %18
%20 = eq %19, 0:i32
blockpc %13 1 %20 1:i1
%21 = phi %13, %17, %16
%22:i32 = var
%23 = and %22, -8:i32
%24 = sub %23, %4
%25 = phi %9, %21, %24
%26 = ult %25, 16:i32
%27:i32 = zext %26
%28 = eq %27, 0:i32
%29:i32 = var
%30:i32 = var
%31:i32 = var
%32:i32 = var
pc %28 1:i1
pc %29 1:i1
pc %30 1:i1
pc %31 1:i1
pc %32 1:i1
infer %5


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2:i32 = var
%3:i32 = var
%4 = and %3, -8:i32
%5 = block 2
%6:i32 = var
%7 = add %6, 11:i32
%8 = and %7, -8:i32 (hasExternalUses)
%9 = phi %5, 16:i32, %8
%10 = sub %4, %9 (hasExternalUses)
%11 = phi %1, %2, %10
%12:i32 = var
%13 = and %12, -8:i32
%14 = sub %13, %9 (hasExternalUses)
%15 = phi %0, %11, %14
%16 = or %15, 1:i32
%17:i32 = var
%18 = ne %17, 0:i32
blockpc %0 0 %18 1:i1
%19 = eq %17, 0:i32
blockpc %0 1 %19 1:i1
%20 = ult %10, %2
blockpc %1 0 %20 1:i1
%21:i32 = zext %20
%22 = eq %21, 0:i32
blockpc %1 1 %22 1:i1
%23 = ult %6, 11:i32
blockpc %5 0 %23 1:i1
%24:i32 = zext %23
%25 = eq %24, 0:i32
blockpc %5 1 %25 1:i1
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29:i32 = var
%30:i32 = var
pc %26 1:i1
pc %27 1:i1
pc %28 1:i1
pc %29 1:i1
pc %30 1:i1
infer %16


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2:i32 = var
%3:i32 = var
%4 = phi %1, %2, %3
%5:i32 = var
%6 = phi %0, %4, %5
%7 = block 2
%8:i32 = var
%9 = add %8, 11:i32
%10 = and %9, -8:i32 (hasExternalUses)
%11 = phi %7, 16:i32, %10
%12 = add %6, %11 (hasExternalUses)
%13 = block 2
%14:i32 = var
%15:i32 = var
%16 = and %15, -8:i32
%17 = sub %16, %11 (hasExternalUses)
%18 = phi %13, %14, %17
%19:i32 = var
%20 = and %19, -8:i32
%21 = sub %20, %11 (hasExternalUses)
%22 = phi %0, %18, %21
%23 = add %12, %22
%24:i32 = var
%25 = ne %24, 0:i32
blockpc %0 0 %25 1:i1
%26 = eq %24, 0:i32
blockpc %0 1 %26 1:i1
%27 = ult %17, %14
blockpc %1 0 %27 1:i1
%28:i32 = var
blockpc %1 1 %28 1:i1
%29:i32 = var
blockpc %7 0 %29 1:i1
%30:i32 = var
blockpc %7 1 %30 1:i1
blockpc %13 0 %27 1:i1
%31:i32 = var
blockpc %13 1 %31 1:i1
%32:i32 = var
%33:i32 = var
%34:i32 = var
%35:i32 = var
%36:i32 = var
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
pc %35 1:i1
pc %36 1:i1
infer %23


; start LHS (in $6)
%0:i32 = var
%1 = lshr %0, 3:i32
%2 = ne %0, 0:i32
%3 = block 2
%4:i32 = var
%5 = ne %4, 0:i32
blockpc %3 0 %5 1:i1
%6 = eq %4, 0:i32
blockpc %3 1 %6 1:i1
%7 = block 2
%8:i32 = var
%9 = and %8, -8:i32
%10 = block 2
%11:i32 = var
blockpc %10 0 %11 1:i1
%12:i32 = var
blockpc %10 1 %12 1:i1
%13:i32 = var
%14 = phi %10, 16:i32, %13
%15 = sub %9, %14
%16:i32 = var
%17 = ult %15, %16
blockpc %7 0 %17 1:i1
%18:i32 = zext %17
%19 = eq %18, 0:i32
blockpc %7 1 %19 1:i1
%20 = phi %7, %16, %15
%21:i32 = var
%22 = and %21, -8:i32
%23 = sub %22, %14
%24 = phi %3, %20, %23
%25 = ult %24, 16:i32
%26:i32 = zext %25
%27 = eq %26, 0:i32
%28:i32 = var
%29:i32 = var
%30:i32 = var
%31:i32 = var
pc %2 1:i1
pc %27 1:i1
pc %28 1:i1
pc %29 1:i1
pc %30 1:i1
pc %31 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = lshr %0, 3:i32 (hasExternalUses)
%2 = shl %1, 3:i32
%3 = ne %0, 0:i32
%4 = block 2
%5:i32 = var
%6 = ne %5, 0:i32
blockpc %4 0 %6 1:i1
%7 = eq %5, 0:i32
blockpc %4 1 %7 1:i1
%8 = block 2
%9:i32 = var
%10 = and %9, -8:i32
%11 = block 2
%12:i32 = var
blockpc %11 0 %12 1:i1
%13:i32 = var
blockpc %11 1 %13 1:i1
%14:i32 = var
%15 = phi %11, 16:i32, %14
%16 = sub %10, %15
%17:i32 = var
%18 = ult %16, %17
blockpc %8 0 %18 1:i1
%19:i32 = zext %18
%20 = eq %19, 0:i32
blockpc %8 1 %20 1:i1
%21 = phi %8, %17, %16
%22:i32 = var
%23 = and %22, -8:i32
%24 = sub %23, %15
%25 = phi %4, %21, %24
%26 = ult %25, 16:i32
%27:i32 = zext %26
%28 = eq %27, 0:i32
%29:i32 = var
%30:i32 = var
%31:i32 = var
%32:i32 = var
pc %3 1:i1
pc %28 1:i1
pc %29 1:i1
pc %30 1:i1
pc %31 1:i1
pc %32 1:i1
infer %2


; start LHS (in $6)
%0:i32 = var
%1 = lshr %0, 3:i32 (hasExternalUses)
%2 = shl %1, 3:i32
%3 = add %2, 3996:i32
%4 = ne %0, 0:i32
%5 = block 2
%6:i32 = var
%7 = ne %6, 0:i32
blockpc %5 0 %7 1:i1
%8 = eq %6, 0:i32
blockpc %5 1 %8 1:i1
%9 = block 2
%10:i32 = var
%11 = and %10, -8:i32
%12 = block 2
%13:i32 = var
blockpc %12 0 %13 1:i1
%14:i32 = var
blockpc %12 1 %14 1:i1
%15:i32 = var
%16 = phi %12, 16:i32, %15
%17 = sub %11, %16
%18:i32 = var
%19 = ult %17, %18
blockpc %9 0 %19 1:i1
%20:i32 = zext %19
%21 = eq %20, 0:i32
blockpc %9 1 %21 1:i1
%22 = phi %9, %18, %17
%23:i32 = var
%24 = and %23, -8:i32
%25 = sub %24, %16
%26 = phi %5, %22, %25
%27 = ult %26, 16:i32
%28:i32 = zext %27
%29 = eq %28, 0:i32
%30:i32 = var
%31:i32 = var
%32:i32 = var
%33:i32 = var
pc %4 1:i1
pc %29 1:i1
pc %30 1:i1
pc %31 1:i1
pc %32 1:i1
pc %33 1:i1
infer %3


; start LHS (in $6)
%0:i32 = var
%1 = lshr %0, 3:i32 (hasExternalUses)
%2 = shl 1:i32, %1
%3 = ne %0, 0:i32
%4 = block 2
%5:i32 = var
%6 = ne %5, 0:i32
blockpc %4 0 %6 1:i1
%7 = eq %5, 0:i32
blockpc %4 1 %7 1:i1
%8 = block 2
%9:i32 = var
%10 = and %9, -8:i32
%11 = block 2
%12:i32 = var
blockpc %11 0 %12 1:i1
%13:i32 = var
blockpc %11 1 %13 1:i1
%14:i32 = var
%15 = phi %11, 16:i32, %14
%16 = sub %10, %15
%17:i32 = var
%18 = ult %16, %17
blockpc %8 0 %18 1:i1
%19:i32 = zext %18
%20 = eq %19, 0:i32
blockpc %8 1 %20 1:i1
%21 = phi %8, %17, %16
%22:i32 = var
%23 = and %22, -8:i32
%24 = sub %23, %15
%25 = phi %4, %21, %24
%26 = ult %25, 16:i32
%27:i32 = zext %26
%28 = eq %27, 0:i32
%29:i32 = var
%30:i32 = var
%31:i32 = var
%32:i32 = var
pc %3 1:i1
pc %28 1:i1
pc %29 1:i1
pc %30 1:i1
pc %31 1:i1
pc %32 1:i1
infer %2


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = lshr %1, 3:i32 (hasExternalUses)
%3 = shl 1:i32, %2 (hasExternalUses)
%4 = and %0, %3
%5 = ne %1, 0:i32
%6 = block 2
%7:i32 = var
%8 = ne %7, 0:i32
blockpc %6 0 %8 1:i1
%9 = eq %7, 0:i32
blockpc %6 1 %9 1:i1
%10 = block 2
%11:i32 = var
%12 = and %11, -8:i32
%13 = block 2
%14:i32 = var
blockpc %13 0 %14 1:i1
%15:i32 = var
blockpc %13 1 %15 1:i1
%16:i32 = var
%17 = phi %13, 16:i32, %16
%18 = sub %12, %17
%19:i32 = var
%20 = ult %18, %19
blockpc %10 0 %20 1:i1
%21:i32 = zext %20
%22 = eq %21, 0:i32
blockpc %10 1 %22 1:i1
%23 = phi %10, %19, %18
%24:i32 = var
%25 = phi %6, %23, %24
%26 = ult %25, 16:i32
%27:i32 = zext %26
%28 = eq %27, 0:i32
%29:i32 = var
%30:i32 = var
%31:i32 = var
%32:i32 = var
pc %5 1:i1
pc %28 1:i1
pc %29 1:i1
pc %30 1:i1
pc %31 1:i1
pc %32 1:i1
infer %4


; start LHS (in $6)
%0:i32 = var
%1 = lshr %0, 3:i32 (hasExternalUses)
%2 = shl %1, 3:i32
%3 = add %2, 3996:i32 (hasExternalUses)
%4 = add %3, 8:i32
%5:i32 = var
%6 = shl 1:i32, %1
%7 = and %5, %6
%8 = ne %7, 0:i32
%9 = ne %0, 0:i32
%10 = block 2
%11:i32 = var
%12 = ne %11, 0:i32
blockpc %10 0 %12 1:i1
%13 = eq %11, 0:i32
blockpc %10 1 %13 1:i1
%14 = block 2
%15:i32 = var
%16 = and %15, -8:i32
%17 = block 2
%18:i32 = var
blockpc %17 0 %18 1:i1
%19:i32 = var
blockpc %17 1 %19 1:i1
%20:i32 = var
%21 = phi %17, 16:i32, %20
%22 = sub %16, %21
%23:i32 = var
%24 = ult %22, %23
blockpc %14 0 %24 1:i1
%25:i32 = var
blockpc %14 1 %25 1:i1
%26 = phi %14, %23, %22
%27:i32 = var
%28 = phi %10, %26, %27
%29 = ult %28, 16:i32
%30:i32 = zext %29
%31 = eq %30, 0:i32
%32:i32 = var
%33:i32 = var
%34:i32 = var
%35:i32 = var
pc %8 1:i1
pc %9 1:i1
pc %31 1:i1
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
pc %35 1:i1
infer %4


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = lshr %1, 3:i32 (hasExternalUses)
%3 = shl 1:i32, %2 (hasExternalUses)
%4 = or %0, %3
%5 = and %0, %3
%6 = eq %5, 0:i32
%7 = ne %1, 0:i32
%8 = block 2
%9:i32 = var
%10 = ne %9, 0:i32
blockpc %8 0 %10 1:i1
%11 = eq %9, 0:i32
blockpc %8 1 %11 1:i1
%12 = block 2
%13:i32 = var
%14 = and %13, -8:i32
%15 = block 2
%16:i32 = var
blockpc %15 0 %16 1:i1
%17:i32 = var
blockpc %15 1 %17 1:i1
%18:i32 = var
%19 = phi %15, 16:i32, %18
%20 = sub %14, %19
%21:i32 = var
%22 = ult %20, %21
blockpc %12 0 %22 1:i1
%23:i32 = zext %22
%24 = eq %23, 0:i32
blockpc %12 1 %24 1:i1
%25 = phi %12, %21, %20
%26:i32 = var
%27 = phi %8, %25, %26
%28 = ult %27, 16:i32
%29:i32 = zext %28
%30 = eq %29, 0:i32
%31:i32 = var
%32:i32 = var
%33:i32 = var
%34:i32 = var
pc %6 1:i1
pc %7 1:i1
pc %30 1:i1
pc %31 1:i1
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
infer %4


; start LHS (in $6)
%0:i32 = var
%1 = lshr %0, 3:i32 (hasExternalUses)
%2 = shl %1, 3:i32
%3 = add %2, 3996:i32 (hasExternalUses)
%4 = add %3, 8:i32
%5:i32 = var
%6 = shl 1:i32, %1
%7 = and %5, %6
%8 = eq %7, 0:i32
%9 = ne %0, 0:i32
%10 = block 2
%11:i32 = var
%12 = ne %11, 0:i32
blockpc %10 0 %12 1:i1
%13 = eq %11, 0:i32
blockpc %10 1 %13 1:i1
%14 = block 2
%15:i32 = var
%16 = and %15, -8:i32
%17 = block 2
%18:i32 = var
blockpc %17 0 %18 1:i1
%19:i32 = var
blockpc %17 1 %19 1:i1
%20:i32 = var
%21 = phi %17, 16:i32, %20
%22 = sub %16, %21
%23:i32 = var
%24 = ult %22, %23
blockpc %14 0 %24 1:i1
%25:i32 = var
blockpc %14 1 %25 1:i1
%26 = phi %14, %23, %22
%27:i32 = var
%28 = phi %10, %26, %27
%29 = ult %28, 16:i32
%30:i32 = zext %29
%31 = eq %30, 0:i32
%32:i32 = var
%33:i32 = var
%34:i32 = var
%35:i32 = var
pc %8 1:i1
pc %9 1:i1
pc %31 1:i1
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
pc %35 1:i1
infer %4


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2:i32 = var
%3:i32 = var
%4 = phi %1, %2, %3
%5:i32 = var
%6 = phi %0, %4, %5
%7 = add %6, 8:i32
%8:i32 = var
%9 = ne %8, 0:i32
blockpc %0 0 %9 1:i1
%10 = eq %8, 0:i32
blockpc %0 1 %10 1:i1
%11:i32 = var
%12 = and %11, -8:i32
%13 = block 2
%14:i32 = var
%15 = ult %14, 11:i32
blockpc %13 0 %15 1:i1
%16:i32 = zext %15
%17 = eq %16, 0:i32
blockpc %13 1 %17 1:i1
%18 = add %14, 11:i32
%19 = and %18, -8:i32
%20 = phi %13, 16:i32, %19
%21 = sub %12, %20
%22:i32 = var
%23 = ult %21, %22
blockpc %1 0 %23 1:i1
%24:i32 = zext %23
%25 = eq %24, 0:i32
blockpc %1 1 %25 1:i1
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29:i32 = var
pc %26 1:i1
pc %27 1:i1
pc %28 1:i1
pc %29 1:i1
infer %7


; start LHS (in $6)
%0:i32 = var
%1 = ult -65:i32, %0
%2 = ult %0, 245:i32
%3:i32 = zext %2
%4 = eq %3, 0:i32
pc %4 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 11:i32
%2 = ult -65:i32, %0
%3:i32 = zext %2
%4 = eq %3, 0:i32
%5 = ult %0, 245:i32
%6:i32 = zext %5
%7 = eq %6, 0:i32
pc %4 1:i1
pc %7 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 11:i32 (hasExternalUses)
%2 = and %1, -8:i32
%3 = ult -65:i32, %0
%4:i32 = zext %3
%5 = eq %4, 0:i32
%6 = ult %0, 245:i32
%7:i32 = zext %6
%8 = eq %7, 0:i32
pc %5 1:i1
pc %8 1:i1
infer %2


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 11:i32 (hasExternalUses)
%2 = lshr %1, 8:i32
%3:i32 = var
%4 = ne %3, 0:i32
%5 = ult -65:i32, %0
%6:i32 = zext %5
%7 = eq %6, 0:i32
%8 = ult %0, 245:i32
%9:i32 = zext %8
%10 = eq %9, 0:i32
pc %4 1:i1
pc %7 1:i1
pc %10 1:i1
infer %2


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 11:i32 (hasExternalUses)
%2 = and %1, -8:i32 (hasExternalUses)
%3 = ult 16777215:i32, %2
%4 = lshr %1, 8:i32
%5 = ne %4, 0:i32
%6:i32 = var
%7 = ne %6, 0:i32
%8 = ult -65:i32, %0
%9:i32 = zext %8
%10 = eq %9, 0:i32
%11 = ult %0, 245:i32
%12:i32 = zext %11
%13 = eq %12, 0:i32
pc %5 1:i1
pc %7 1:i1
pc %10 1:i1
pc %13 1:i1
infer %3


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 11:i32 (hasExternalUses)
%2 = lshr %1, 8:i32 (hasExternalUses)
%3 = add %2, 1048320:i32
%4 = and %1, -8:i32
%5 = ult 16777215:i32, %4
%6:i32 = zext %5
%7 = eq %6, 0:i32
%8 = ne %2, 0:i32
%9:i32 = var
%10 = ne %9, 0:i32
%11 = ult -65:i32, %0
%12:i32 = zext %11
%13 = eq %12, 0:i32
%14 = ult %0, 245:i32
%15:i32 = zext %14
%16 = eq %15, 0:i32
pc %7 1:i1
pc %8 1:i1
pc %10 1:i1
pc %13 1:i1
pc %16 1:i1
infer %3


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 11:i32 (hasExternalUses)
%2 = lshr %1, 8:i32 (hasExternalUses)
%3 = add %2, 1048320:i32
%4 = lshr %3, 16:i32
%5 = and %1, -8:i32
%6 = ult 16777215:i32, %5
%7:i32 = zext %6
%8 = eq %7, 0:i32
%9 = ne %2, 0:i32
%10:i32 = var
%11 = ne %10, 0:i32
%12 = ult -65:i32, %0
%13:i32 = zext %12
%14 = eq %13, 0:i32
%15 = ult %0, 245:i32
%16:i32 = zext %15
%17 = eq %16, 0:i32
pc %8 1:i1
pc %9 1:i1
pc %11 1:i1
pc %14 1:i1
pc %17 1:i1
infer %4


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 11:i32 (hasExternalUses)
%2 = lshr %1, 8:i32 (hasExternalUses)
%3 = add %2, 1048320:i32
%4 = lshr %3, 16:i32
%5 = and %4, 8:i32
%6 = and %1, -8:i32
%7 = ult 16777215:i32, %6
%8:i32 = zext %7
%9 = eq %8, 0:i32
%10 = ne %2, 0:i32
%11:i32 = var
%12 = ne %11, 0:i32
%13 = ult -65:i32, %0
%14:i32 = zext %13
%15 = eq %14, 0:i32
%16 = ult %0, 245:i32
%17:i32 = zext %16
%18 = eq %17, 0:i32
pc %9 1:i1
pc %10 1:i1
pc %12 1:i1
pc %15 1:i1
pc %18 1:i1
infer %5


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 11:i32 (hasExternalUses)
%2 = lshr %1, 8:i32 (hasExternalUses)
%3 = add %2, 1048320:i32
%4 = lshr %3, 16:i32
%5 = and %4, 8:i32 (hasExternalUses)
%6 = shl %2, %5
%7 = and %1, -8:i32
%8 = ult 16777215:i32, %7
%9:i32 = zext %8
%10 = eq %9, 0:i32
%11 = ne %2, 0:i32
%12:i32 = var
%13 = ne %12, 0:i32
%14 = ult -65:i32, %0
%15:i32 = zext %14
%16 = eq %15, 0:i32
%17 = ult %0, 245:i32
%18:i32 = zext %17
%19 = eq %18, 0:i32
pc %10 1:i1
pc %11 1:i1
pc %13 1:i1
pc %16 1:i1
pc %19 1:i1
infer %6


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 11:i32 (hasExternalUses)
%2 = lshr %1, 8:i32 (hasExternalUses)
%3 = add %2, 1048320:i32
%4 = lshr %3, 16:i32
%5 = and %4, 8:i32 (hasExternalUses)
%6 = shl %2, %5 (hasExternalUses)
%7 = add %6, 520192:i32
%8 = and %1, -8:i32
%9 = ult 16777215:i32, %8
%10:i32 = zext %9
%11 = eq %10, 0:i32
%12 = ne %2, 0:i32
%13:i32 = var
%14 = ne %13, 0:i32
%15 = ult -65:i32, %0
%16:i32 = zext %15
%17 = eq %16, 0:i32
%18 = ult %0, 245:i32
%19:i32 = zext %18
%20 = eq %19, 0:i32
pc %11 1:i1
pc %12 1:i1
pc %14 1:i1
pc %17 1:i1
pc %20 1:i1
infer %7


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 11:i32 (hasExternalUses)
%2 = lshr %1, 8:i32 (hasExternalUses)
%3 = add %2, 1048320:i32
%4 = lshr %3, 16:i32
%5 = and %4, 8:i32 (hasExternalUses)
%6 = shl %2, %5 (hasExternalUses)
%7 = add %6, 520192:i32
%8 = lshr %7, 16:i32
%9 = and %1, -8:i32
%10 = ult 16777215:i32, %9
%11:i32 = zext %10
%12 = eq %11, 0:i32
%13 = ne %2, 0:i32
%14:i32 = var
%15 = ne %14, 0:i32
%16 = ult -65:i32, %0
%17:i32 = zext %16
%18 = eq %17, 0:i32
%19 = ult %0, 245:i32
%20:i32 = zext %19
%21 = eq %20, 0:i32
pc %12 1:i1
pc %13 1:i1
pc %15 1:i1
pc %18 1:i1
pc %21 1:i1
infer %8


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 11:i32 (hasExternalUses)
%2 = lshr %1, 8:i32 (hasExternalUses)
%3 = add %2, 1048320:i32
%4 = lshr %3, 16:i32
%5 = and %4, 8:i32 (hasExternalUses)
%6 = shl %2, %5 (hasExternalUses)
%7 = add %6, 520192:i32
%8 = lshr %7, 16:i32
%9 = and %8, 4:i32
%10 = and %1, -8:i32
%11 = ult 16777215:i32, %10
%12:i32 = zext %11
%13 = eq %12, 0:i32
%14 = ne %2, 0:i32
%15:i32 = var
%16 = ne %15, 0:i32
%17 = ult -65:i32, %0
%18:i32 = zext %17
%19 = eq %18, 0:i32
%20 = ult %0, 245:i32
%21:i32 = zext %20
%22 = eq %21, 0:i32
pc %13 1:i1
pc %14 1:i1
pc %16 1:i1
pc %19 1:i1
pc %22 1:i1
infer %9


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 11:i32 (hasExternalUses)
%2 = lshr %1, 8:i32 (hasExternalUses)
%3 = add %2, 1048320:i32
%4 = lshr %3, 16:i32
%5 = and %4, 8:i32
%6 = shl %2, %5 (hasExternalUses)
%7 = add %6, 520192:i32
%8 = lshr %7, 16:i32
%9 = and %8, 4:i32 (hasExternalUses)
%10 = or %9, %5
%11 = and %1, -8:i32
%12 = ult 16777215:i32, %11
%13:i32 = zext %12
%14 = eq %13, 0:i32
%15 = ne %2, 0:i32
%16:i32 = var
%17 = ne %16, 0:i32
%18 = ult -65:i32, %0
%19:i32 = zext %18
%20 = eq %19, 0:i32
%21 = ult %0, 245:i32
%22:i32 = zext %21
%23 = eq %22, 0:i32
pc %14 1:i1
pc %15 1:i1
pc %17 1:i1
pc %20 1:i1
pc %23 1:i1
infer %10


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 11:i32 (hasExternalUses)
%2 = lshr %1, 8:i32 (hasExternalUses)
%3 = add %2, 1048320:i32
%4 = lshr %3, 16:i32
%5 = and %4, 8:i32 (hasExternalUses)
%6 = shl %2, %5
%7 = add %6, 520192:i32
%8 = lshr %7, 16:i32
%9 = and %8, 4:i32 (hasExternalUses)
%10 = shl %6, %9
%11 = and %1, -8:i32
%12 = ult 16777215:i32, %11
%13:i32 = zext %12
%14 = eq %13, 0:i32
%15 = ne %2, 0:i32
%16:i32 = var
%17 = ne %16, 0:i32
%18 = ult -65:i32, %0
%19:i32 = zext %18
%20 = eq %19, 0:i32
%21 = ult %0, 245:i32
%22:i32 = zext %21
%23 = eq %22, 0:i32
pc %14 1:i1
pc %15 1:i1
pc %17 1:i1
pc %20 1:i1
pc %23 1:i1
infer %10


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 11:i32 (hasExternalUses)
%2 = lshr %1, 8:i32 (hasExternalUses)
%3 = add %2, 1048320:i32
%4 = lshr %3, 16:i32
%5 = and %4, 8:i32 (hasExternalUses)
%6 = shl %2, %5
%7 = add %6, 520192:i32
%8 = lshr %7, 16:i32
%9 = and %8, 4:i32 (hasExternalUses)
%10 = shl %6, %9 (hasExternalUses)
%11 = add %10, 245760:i32
%12 = and %1, -8:i32
%13 = ult 16777215:i32, %12
%14:i32 = zext %13
%15 = eq %14, 0:i32
%16 = ne %2, 0:i32
%17:i32 = var
%18 = ne %17, 0:i32
%19 = ult -65:i32, %0
%20:i32 = zext %19
%21 = eq %20, 0:i32
%22 = ult %0, 245:i32
%23:i32 = zext %22
%24 = eq %23, 0:i32
pc %15 1:i1
pc %16 1:i1
pc %18 1:i1
pc %21 1:i1
pc %24 1:i1
infer %11


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 11:i32 (hasExternalUses)
%2 = lshr %1, 8:i32 (hasExternalUses)
%3 = add %2, 1048320:i32
%4 = lshr %3, 16:i32
%5 = and %4, 8:i32 (hasExternalUses)
%6 = shl %2, %5
%7 = add %6, 520192:i32
%8 = lshr %7, 16:i32
%9 = and %8, 4:i32 (hasExternalUses)
%10 = shl %6, %9 (hasExternalUses)
%11 = add %10, 245760:i32
%12 = lshr %11, 16:i32
%13 = and %1, -8:i32
%14 = ult 16777215:i32, %13
%15:i32 = zext %14
%16 = eq %15, 0:i32
%17 = ne %2, 0:i32
%18:i32 = var
%19 = ne %18, 0:i32
%20 = ult -65:i32, %0
%21:i32 = zext %20
%22 = eq %21, 0:i32
%23 = ult %0, 245:i32
%24:i32 = zext %23
%25 = eq %24, 0:i32
pc %16 1:i1
pc %17 1:i1
pc %19 1:i1
pc %22 1:i1
pc %25 1:i1
infer %12


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 11:i32 (hasExternalUses)
%2 = lshr %1, 8:i32 (hasExternalUses)
%3 = add %2, 1048320:i32
%4 = lshr %3, 16:i32
%5 = and %4, 8:i32 (hasExternalUses)
%6 = shl %2, %5
%7 = add %6, 520192:i32
%8 = lshr %7, 16:i32
%9 = and %8, 4:i32 (hasExternalUses)
%10 = shl %6, %9 (hasExternalUses)
%11 = add %10, 245760:i32
%12 = lshr %11, 16:i32
%13 = and %12, 2:i32
%14 = and %1, -8:i32
%15 = ult 16777215:i32, %14
%16:i32 = zext %15
%17 = eq %16, 0:i32
%18 = ne %2, 0:i32
%19:i32 = var
%20 = ne %19, 0:i32
%21 = ult -65:i32, %0
%22:i32 = zext %21
%23 = eq %22, 0:i32
%24 = ult %0, 245:i32
%25:i32 = zext %24
%26 = eq %25, 0:i32
pc %17 1:i1
pc %18 1:i1
pc %20 1:i1
pc %23 1:i1
pc %26 1:i1
infer %13


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 11:i32 (hasExternalUses)
%2 = lshr %1, 8:i32 (hasExternalUses)
%3 = add %2, 1048320:i32
%4 = lshr %3, 16:i32
%5 = and %4, 8:i32
%6 = shl %2, %5
%7 = add %6, 520192:i32
%8 = lshr %7, 16:i32
%9 = and %8, 4:i32
%10 = or %9, %5
%11 = shl %6, %9 (hasExternalUses)
%12 = add %11, 245760:i32
%13 = lshr %12, 16:i32
%14 = and %13, 2:i32 (hasExternalUses)
%15 = or %10, %14
%16 = and %1, -8:i32
%17 = ult 16777215:i32, %16
%18:i32 = zext %17
%19 = eq %18, 0:i32
%20 = ne %2, 0:i32
%21:i32 = var
%22 = ne %21, 0:i32
%23 = ult -65:i32, %0
%24:i32 = zext %23
%25 = eq %24, 0:i32
%26 = ult %0, 245:i32
%27:i32 = zext %26
%28 = eq %27, 0:i32
pc %19 1:i1
pc %20 1:i1
pc %22 1:i1
pc %25 1:i1
pc %28 1:i1
infer %15


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 11:i32 (hasExternalUses)
%2 = lshr %1, 8:i32 (hasExternalUses)
%3:i32 = var
%4 = lshr %3, 16:i32
%5 = and %4, 8:i32
%6 = shl %2, %5
%7 = add %6, 520192:i32
%8 = lshr %7, 16:i32
%9 = and %8, 4:i32
%10 = or %9, %5
%11 = shl %6, %9 (hasExternalUses)
%12 = add %11, 245760:i32
%13 = lshr %12, 16:i32
%14 = and %13, 2:i32 (hasExternalUses)
%15 = or %10, %14
%16 = sub 14:i32, %15
%17 = and %1, -8:i32
%18 = ult 16777215:i32, %17
%19:i32 = zext %18
%20 = eq %19, 0:i32
%21 = ne %2, 0:i32
%22:i32 = var
%23 = ne %22, 0:i32
%24 = ult -65:i32, %0
%25:i32 = zext %24
%26 = eq %25, 0:i32
%27 = ult %0, 245:i32
%28:i32 = zext %27
%29 = eq %28, 0:i32
pc %20 1:i1
pc %21 1:i1
pc %23 1:i1
pc %26 1:i1
pc %29 1:i1
infer %16


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 11:i32 (hasExternalUses)
%2 = lshr %1, 8:i32 (hasExternalUses)
%3 = add %2, 1048320:i32
%4 = lshr %3, 16:i32
%5 = and %4, 8:i32 (hasExternalUses)
%6 = shl %2, %5
%7 = add %6, 520192:i32
%8 = lshr %7, 16:i32
%9 = and %8, 4:i32 (hasExternalUses)
%10 = shl %6, %9
%11 = add %10, 245760:i32
%12 = lshr %11, 16:i32
%13 = and %12, 2:i32 (hasExternalUses)
%14 = shl %10, %13
%15 = and %1, -8:i32
%16 = ult 16777215:i32, %15
%17:i32 = zext %16
%18 = eq %17, 0:i32
%19 = ne %2, 0:i32
%20:i32 = var
%21 = ne %20, 0:i32
%22 = ult -65:i32, %0
%23:i32 = zext %22
%24 = eq %23, 0:i32
%25 = ult %0, 245:i32
%26:i32 = zext %25
%27 = eq %26, 0:i32
pc %18 1:i1
pc %19 1:i1
pc %21 1:i1
pc %24 1:i1
pc %27 1:i1
infer %14


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 11:i32 (hasExternalUses)
%2 = lshr %1, 8:i32 (hasExternalUses)
%3 = add %2, 1048320:i32
%4 = lshr %3, 16:i32
%5 = and %4, 8:i32 (hasExternalUses)
%6 = shl %2, %5
%7 = add %6, 520192:i32
%8 = lshr %7, 16:i32
%9 = and %8, 4:i32 (hasExternalUses)
%10 = shl %6, %9
%11 = add %10, 245760:i32
%12 = lshr %11, 16:i32
%13 = and %12, 2:i32 (hasExternalUses)
%14 = shl %10, %13
%15 = lshr %14, 15:i32
%16 = and %1, -8:i32
%17 = ult 16777215:i32, %16
%18:i32 = zext %17
%19 = eq %18, 0:i32
%20 = ne %2, 0:i32
%21:i32 = var
%22 = ne %21, 0:i32
%23 = ult -65:i32, %0
%24:i32 = zext %23
%25 = eq %24, 0:i32
%26 = ult %0, 245:i32
%27:i32 = zext %26
%28 = eq %27, 0:i32
pc %19 1:i1
pc %20 1:i1
pc %22 1:i1
pc %25 1:i1
pc %28 1:i1
infer %15


; start LHS (in $6)
%0:i32 = var
%1 = lshr %0, 8:i32 (hasExternalUses)
%2:i32 = var
%3 = and %2, 8:i32
%4 = shl %1, %3
%5 = add %4, 520192:i32
%6 = lshr %5, 16:i32
%7 = and %6, 4:i32
%8 = or %7, %3
%9 = shl %4, %7
%10 = add %9, 245760:i32
%11 = lshr %10, 16:i32
%12 = and %11, 2:i32
%13 = or %8, %12
%14 = sub 14:i32, %13
%15 = shl %9, %12
%16 = lshr %15, 15:i32
%17 = add %14, %16
%18 = and %0, -8:i32
%19 = ult 16777215:i32, %18
%20:i32 = zext %19
%21 = eq %20, 0:i32
%22 = ne %1, 0:i32
%23:i32 = var
%24 = ne %23, 0:i32
%25:i32 = var
%26 = ult -65:i32, %25
%27:i32 = zext %26
%28 = eq %27, 0:i32
%29 = ult %25, 245:i32
%30:i32 = zext %29
%31 = eq %30, 0:i32
pc %21 1:i1
pc %22 1:i1
pc %24 1:i1
pc %28 1:i1
pc %31 1:i1
infer %17


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = shl %0, %1
%3 = add %2, 520192:i32
%4 = lshr %3, 16:i32
%5 = and %4, 4:i32
%6 = or %5, %1
%7 = shl %2, %5
%8 = add %7, 245760:i32
%9 = lshr %8, 16:i32
%10 = and %9, 2:i32
%11 = or %6, %10
%12 = sub 14:i32, %11
%13 = shl %7, %10
%14 = lshr %13, 15:i32
%15 = add %12, %14 (hasExternalUses)
%16 = add %15, 7:i32
%17:i32 = var
%18 = add %17, 11:i32
%19 = and %18, -8:i32
%20 = ult 16777215:i32, %19
%21:i32 = zext %20
%22 = eq %21, 0:i32
%23 = ne %0, 0:i32
%24:i32 = var
%25 = ne %24, 0:i32
%26 = ult -65:i32, %17
%27:i32 = zext %26
%28 = eq %27, 0:i32
%29 = ult %17, 245:i32
%30:i32 = zext %29
%31 = eq %30, 0:i32
pc %22 1:i1
pc %23 1:i1
pc %25 1:i1
pc %28 1:i1
pc %31 1:i1
infer %16


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 11:i32 (hasExternalUses)
%2 = and %1, -8:i32 (hasExternalUses)
%3:i32 = var
%4 = add %3, 520192:i32
%5 = lshr %4, 16:i32
%6 = and %5, 4:i32
%7:i32 = var
%8 = add %7, 1048320:i32
%9 = lshr %8, 16:i32
%10 = and %9, 8:i32 (hasExternalUses)
%11 = or %6, %10
%12 = shl %3, %6
%13 = add %12, 245760:i32
%14 = lshr %13, 16:i32
%15 = and %14, 2:i32
%16 = or %11, %15
%17 = sub 14:i32, %16
%18 = shl %12, %15
%19 = lshr %18, 15:i32
%20 = add %17, %19 (hasExternalUses)
%21 = add %20, 7:i32
%22 = lshr %2, %21
%23 = ult 16777215:i32, %2
%24:i32 = zext %23
%25 = eq %24, 0:i32
%26 = ne %7, 0:i32
%27:i32 = var
%28 = ne %27, 0:i32
%29 = ult -65:i32, %0
%30:i32 = zext %29
%31 = eq %30, 0:i32
%32:i32 = var
pc %25 1:i1
pc %26 1:i1
pc %28 1:i1
pc %31 1:i1
pc %32 1:i1
infer %22


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 11:i32 (hasExternalUses)
%2 = and %1, -8:i32 (hasExternalUses)
%3:i32 = var
%4 = lshr %3, 16:i32
%5 = and %4, 4:i32 (hasExternalUses)
%6:i32 = var
%7 = lshr %6, 16:i32
%8 = and %7, 8:i32 (hasExternalUses)
%9 = or %5, %8
%10:i32 = var
%11 = add %10, 245760:i32
%12 = lshr %11, 16:i32
%13 = and %12, 2:i32
%14 = or %9, %13
%15 = sub 14:i32, %14
%16 = shl %10, %13
%17 = lshr %16, 15:i32
%18 = add %15, %17 (hasExternalUses)
%19 = add %18, 7:i32
%20 = lshr %2, %19
%21 = and %20, 1:i32
%22 = ult 16777215:i32, %2
%23:i32 = zext %22
%24 = eq %23, 0:i32
%25 = lshr %1, 8:i32
%26 = ne %25, 0:i32
%27:i32 = var
%28 = ne %27, 0:i32
%29 = ult -65:i32, %0
%30:i32 = zext %29
%31 = eq %30, 0:i32
%32:i32 = var
pc %24 1:i1
pc %26 1:i1
pc %28 1:i1
pc %31 1:i1
pc %32 1:i1
infer %21


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = shl %0, %1
%3 = add %2, 520192:i32
%4 = lshr %3, 16:i32
%5 = and %4, 4:i32
%6 = or %5, %1
%7 = shl %2, %5
%8 = add %7, 245760:i32
%9 = lshr %8, 16:i32
%10 = and %9, 2:i32
%11 = or %6, %10
%12 = sub 14:i32, %11
%13 = shl %7, %10
%14 = lshr %13, 15:i32
%15 = add %12, %14 (hasExternalUses)
%16 = shl %15, 1:i32
%17:i32 = var
%18 = add %17, 11:i32
%19 = and %18, -8:i32
%20 = ult 16777215:i32, %19
%21:i32 = zext %20
%22 = eq %21, 0:i32
%23 = ne %0, 0:i32
%24:i32 = var
%25 = ne %24, 0:i32
%26 = ult -65:i32, %17
%27:i32 = zext %26
%28 = eq %27, 0:i32
%29 = ult %17, 245:i32
%30:i32 = zext %29
%31 = eq %30, 0:i32
pc %22 1:i1
pc %23 1:i1
pc %25 1:i1
pc %28 1:i1
pc %31 1:i1
infer %16


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 11:i32 (hasExternalUses)
%2 = and %1, -8:i32 (hasExternalUses)
%3:i32 = var
%4 = and %3, 4:i32
%5:i32 = var
%6 = and %5, 8:i32
%7 = or %4, %6
%8:i32 = var
%9 = lshr %8, 16:i32
%10 = and %9, 2:i32
%11 = or %7, %10
%12 = sub 14:i32, %11
%13:i32 = var
%14 = shl %13, %6 (hasExternalUses)
%15 = shl %14, %4 (hasExternalUses)
%16 = shl %15, %10
%17 = lshr %16, 15:i32
%18 = add %12, %17
%19 = add %18, 7:i32
%20 = lshr %2, %19
%21 = and %20, 1:i32
%22 = shl %18, 1:i32
%23 = or %21, %22
%24 = ult 16777215:i32, %2
%25:i32 = zext %24
%26 = eq %25, 0:i32
%27 = ne %13, 0:i32
%28:i32 = var
%29 = ne %28, 0:i32
%30:i32 = var
%31:i32 = var
pc %26 1:i1
pc %27 1:i1
pc %29 1:i1
pc %30 1:i1
pc %31 1:i1
infer %23


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 11:i32 (hasExternalUses)
%2 = and %1, -8:i32 (hasExternalUses)
%3 = sub 0:i32, %2
%4:i32 = var
%5 = ne %4, 0:i32
%6 = ult -65:i32, %0
%7:i32 = zext %6
%8 = eq %7, 0:i32
%9 = ult %0, 245:i32
%10:i32 = zext %9
%11 = eq %10, 0:i32
pc %5 1:i1
pc %8 1:i1
pc %11 1:i1
infer %3


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2:i32 = var
%3 = add %2, 11:i32 (hasExternalUses)
%4 = and %3, -8:i32 (hasExternalUses)
%5:i32 = var
%6 = sub 14:i32, %5
%7:i32 = var
%8 = lshr %7, 15:i32
%9 = add %6, %8
%10 = add %9, 7:i32
%11 = lshr %4, %10
%12 = and %11, 1:i32
%13 = shl %9, 1:i32
%14 = or %12, %13 (hasExternalUses)
%15 = phi %1, 31:i32, %14
%16 = phi %0, %15, 0:i32
%17 = shl %16, 2:i32
%18 = lshr %3, 8:i32
%19 = ne %18, 0:i32
blockpc %0 0 %19 1:i1
%20 = eq %18, 0:i32
blockpc %0 1 %20 1:i1
%21 = ult 16777215:i32, %4
blockpc %1 0 %21 1:i1
%22:i32 = zext %21
%23 = eq %22, 0:i32
blockpc %1 1 %23 1:i1
%24:i32 = var
%25 = ne %24, 0:i32
%26:i32 = var
%27:i32 = var
pc %25 1:i1
pc %26 1:i1
pc %27 1:i1
infer %17


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2:i32 = var
%3 = add %2, 11:i32 (hasExternalUses)
%4 = and %3, -8:i32 (hasExternalUses)
%5:i32 = var
%6:i32 = var
%7 = add %5, %6
%8 = add %7, 7:i32
%9 = lshr %4, %8
%10 = and %9, 1:i32
%11 = shl %7, 1:i32
%12 = or %10, %11 (hasExternalUses)
%13 = phi %1, 31:i32, %12
%14 = phi %0, %13, 0:i32
%15 = shl %14, 2:i32
%16 = add %15, 4260:i32
%17 = lshr %3, 8:i32
%18 = ne %17, 0:i32
blockpc %0 0 %18 1:i1
%19 = eq %17, 0:i32
blockpc %0 1 %19 1:i1
%20 = ult 16777215:i32, %4
blockpc %1 0 %20 1:i1
%21:i32 = zext %20
%22 = eq %21, 0:i32
blockpc %1 1 %22 1:i1
%23:i32 = var
%24 = ne %23, 0:i32
%25 = ult -65:i32, %2
%26:i32 = zext %25
%27 = eq %26, 0:i32
%28:i32 = var
pc %24 1:i1
pc %27 1:i1
pc %28 1:i1
infer %16


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2:i32 = var
%3 = add %2, 11:i32 (hasExternalUses)
%4 = and %3, -8:i32 (hasExternalUses)
%5:i32 = var
%6 = sub 14:i32, %5
%7:i32 = var
%8 = lshr %7, 15:i32
%9 = add %6, %8
%10 = add %9, 7:i32
%11 = lshr %4, %10
%12 = and %11, 1:i32
%13 = shl %9, 1:i32
%14 = or %12, %13 (hasExternalUses)
%15 = phi %1, 31:i32, %14
%16 = phi %0, %15, 0:i32
%17 = lshr %16, 1:i32
%18 = lshr %3, 8:i32
%19 = ne %18, 0:i32
blockpc %0 0 %19 1:i1
%20 = eq %18, 0:i32
blockpc %0 1 %20 1:i1
%21 = ult 16777215:i32, %4
blockpc %1 0 %21 1:i1
%22:i32 = zext %21
%23 = eq %22, 0:i32
blockpc %1 1 %23 1:i1
%24:i32 = var
%25 = ne %24, 0:i32
%26:i32 = var
%27:i32 = var
%28:i32 = var
pc %25 1:i1
pc %26 1:i1
pc %27 1:i1
pc %28 1:i1
infer %17


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2:i32 = var
%3 = add %2, 11:i32 (hasExternalUses)
%4 = and %3, -8:i32 (hasExternalUses)
%5:i32 = var
%6:i32 = var
%7 = add %5, %6
%8 = add %7, 7:i32
%9 = lshr %4, %8
%10 = and %9, 1:i32
%11 = shl %7, 1:i32
%12 = or %10, %11 (hasExternalUses)
%13 = phi %1, 31:i32, %12
%14 = phi %0, %13, 0:i32
%15 = lshr %14, 1:i32
%16 = sub 25:i32, %15
%17 = lshr %3, 8:i32
%18 = ne %17, 0:i32
blockpc %0 0 %18 1:i1
%19 = eq %17, 0:i32
blockpc %0 1 %19 1:i1
%20 = ult 16777215:i32, %4
blockpc %1 0 %20 1:i1
%21:i32 = zext %20
%22 = eq %21, 0:i32
blockpc %1 1 %22 1:i1
%23:i32 = var
%24 = ne %23, 0:i32
%25:i32 = var
%26 = ne %25, 0:i32
%27:i32 = var
%28:i32 = var
pc %24 1:i1
pc %26 1:i1
pc %27 1:i1
pc %28 1:i1
infer %16


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2:i32 = var
%3 = add %2, 11:i32 (hasExternalUses)
%4 = and %3, -8:i32 (hasExternalUses)
%5:i32 = var
%6 = sub 14:i32, %5
%7:i32 = var
%8 = lshr %7, 15:i32
%9 = add %6, %8
%10 = add %9, 7:i32
%11 = lshr %4, %10
%12 = and %11, 1:i32
%13 = shl %9, 1:i32
%14 = or %12, %13 (hasExternalUses)
%15 = phi %1, 31:i32, %14
%16 = phi %0, %15, 0:i32
%17 = eq %16, 31:i32
%18 = lshr %3, 8:i32
%19 = ne %18, 0:i32
blockpc %0 0 %19 1:i1
%20 = eq %18, 0:i32
blockpc %0 1 %20 1:i1
%21 = ult 16777215:i32, %4
blockpc %1 0 %21 1:i1
%22:i32 = zext %21
%23 = eq %22, 0:i32
blockpc %1 1 %23 1:i1
%24:i32 = var
%25 = ne %24, 0:i32
%26:i32 = var
%27:i32 = var
%28:i32 = var
pc %25 1:i1
pc %26 1:i1
pc %27 1:i1
pc %28 1:i1
infer %17


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 11:i32 (hasExternalUses)
%2 = and %1, -8:i32 (hasExternalUses)
%3 = block 2
%4 = block 2
%5 = block 2
%6:i32 = var
%7 = lshr %2, %6
%8 = and %7, 1:i32
%9:i32 = var
%10:i32 = var
%11 = add %9, %10 (hasExternalUses)
%12 = shl %11, 1:i32
%13 = or %8, %12 (hasExternalUses)
%14 = phi %5, 31:i32, %13
%15 = phi %4, %14, 0:i32
%16 = lshr %15, 1:i32
%17 = sub 25:i32, %16
%18 = phi %3, 0:i32, %17
%19 = shl %2, %18
%20 = eq %15, 31:i32
blockpc %3 0 %20 1:i1
%21:i32 = zext %20
%22 = eq %21, 0:i32
blockpc %3 1 %22 1:i1
%23 = lshr %1, 8:i32
%24 = ne %23, 0:i32
blockpc %4 0 %24 1:i1
%25 = eq %23, 0:i32
blockpc %4 1 %25 1:i1
%26:i32 = var
blockpc %5 0 %26 1:i1
%27:i32 = var
blockpc %5 1 %27 1:i1
%28:i32 = var
%29:i32 = var
%30:i32 = var
%31:i32 = var
pc %28 1:i1
pc %29 1:i1
pc %30 1:i1
pc %31 1:i1
infer %19


; start LHS (in $6)
%0:i32 = var
%1 = and %0, -8:i32
%2:i32 = var
%3 = ne %2, 0:i32
%4:i32 = var
%5 = ne %4, 0:i32
%6:i32 = var
%7 = ult -65:i32, %6
%8:i32 = zext %7
%9 = eq %8, 0:i32
%10 = ult %6, 245:i32
%11:i32 = zext %10
%12 = eq %11, 0:i32
pc %3 1:i1
pc %5 1:i1
pc %9 1:i1
pc %12 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = and %0, -8:i32
%2:i32 = var
%3 = add %2, 11:i32 (hasExternalUses)
%4 = and %3, -8:i32 (hasExternalUses)
%5 = sub %1, %4
%6:i32 = var
%7 = ne %6, 0:i32
%8:i32 = var
%9 = ne %8, 0:i32
%10 = ult -65:i32, %2
%11:i32 = zext %10
%12 = eq %11, 0:i32
%13 = ult %2, 245:i32
%14:i32 = zext %13
%15 = eq %14, 0:i32
pc %7 1:i1
pc %9 1:i1
pc %12 1:i1
pc %15 1:i1
infer %5


; start LHS (in $6)
%0:i32 = var
%1 = and %0, -8:i32
%2:i32 = var
%3 = add %2, 11:i32 (hasExternalUses)
%4 = and %3, -8:i32 (hasExternalUses)
%5 = sub %1, %4 (hasExternalUses)
%6:i32 = var
%7 = ult %5, %6
%8:i32 = var
%9 = ne %8, 0:i32
%10:i32 = var
%11 = ne %10, 0:i32
%12 = ult -65:i32, %2
%13:i32 = zext %12
%14 = eq %13, 0:i32
%15 = ult %2, 245:i32
%16:i32 = zext %15
%17 = eq %16, 0:i32
pc %9 1:i1
pc %11 1:i1
pc %14 1:i1
pc %17 1:i1
infer %7


; start LHS (in $6)
%0:i32 = var
%1 = eq %0, 0:i32
%2:i32 = var
%3 = ne %2, 0:i32
%4:i32 = var
%5 = ne %4, 0:i32
%6:i32 = var
%7 = ult -65:i32, %6
%8:i32 = zext %7
%9 = eq %8, 0:i32
%10 = ult %6, 245:i32
%11:i32 = zext %10
%12 = eq %11, 0:i32
pc %3 1:i1
pc %5 1:i1
pc %9 1:i1
pc %12 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 16:i32
%2:i32 = var
%3 = ne %2, 0:i32
%4:i32 = var
%5 = ne %4, 0:i32
%6:i32 = var
%7 = ult -65:i32, %6
%8:i32 = zext %7
%9 = eq %8, 0:i32
%10 = ult %6, 245:i32
%11:i32 = zext %10
%12 = eq %11, 0:i32
pc %3 1:i1
pc %5 1:i1
pc %9 1:i1
pc %12 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = lshr %0, 31:i32
%2:i32 = var
%3 = ne %2, 0:i32
%4:i32 = var
%5 = ne %4, 0:i32
%6:i32 = var
%7 = ult -65:i32, %6
%8:i32 = zext %7
%9 = eq %8, 0:i32
%10 = ult %6, 245:i32
%11:i32 = zext %10
%12 = eq %11, 0:i32
pc %3 1:i1
pc %5 1:i1
pc %9 1:i1
pc %12 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = lshr %0, 31:i32
%2 = shl %1, 2:i32
%3:i32 = var
%4 = ne %3, 0:i32
%5:i32 = var
%6 = ne %5, 0:i32
%7:i32 = var
%8 = ult -65:i32, %7
%9:i32 = zext %8
%10 = eq %9, 0:i32
%11 = ult %7, 245:i32
%12:i32 = zext %11
%13 = eq %12, 0:i32
pc %4 1:i1
pc %6 1:i1
pc %10 1:i1
pc %13 1:i1
infer %2


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 16:i32
%2:i32 = var
%3 = lshr %2, 31:i32
%4 = shl %3, 2:i32
%5 = add %1, %4
%6:i32 = var
%7 = ne %6, 0:i32
%8:i32 = var
%9 = ne %8, 0:i32
%10:i32 = var
%11 = ult -65:i32, %10
%12:i32 = zext %11
%13 = eq %12, 0:i32
%14 = ult %10, 245:i32
%15:i32 = zext %14
%16 = eq %15, 0:i32
pc %7 1:i1
pc %9 1:i1
pc %13 1:i1
pc %16 1:i1
infer %5


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = eq %0, %1
%3:i32 = var
%4 = ne %3, 0:i32
%5:i32 = var
%6 = ne %5, 0:i32
%7:i32 = var
%8 = ult -65:i32, %7
%9:i32 = zext %8
%10 = eq %9, 0:i32
%11 = ult %7, 245:i32
%12:i32 = zext %11
%13 = eq %12, 0:i32
pc %4 1:i1
pc %6 1:i1
pc %10 1:i1
pc %13 1:i1
infer %2


; start LHS (in $6)
%0:i32 = var
%1 = eq %0, 0:i32
%2:i32 = zext %1
%3:i32 = var
%4 = eq %0, %3
%5:i32 = zext %4
%6 = or %2, %5
%7:i32 = var
%8 = ne %7, 0:i32
%9:i32 = var
%10 = ne %9, 0:i32
%11:i32 = var
%12 = ult -65:i32, %11
%13:i32 = zext %12
%14 = eq %13, 0:i32
%15 = ult %11, 245:i32
%16:i32 = zext %15
%17 = eq %16, 0:i32
pc %8 1:i1
pc %10 1:i1
pc %14 1:i1
pc %17 1:i1
infer %6


; start LHS (in $6)
%0:i32 = var
%1 = eq %0, 0:i32
%2:i32 = zext %1
%3:i32 = var
%4 = eq %0, %3
%5:i32 = zext %4
%6 = or %2, %5
%7 = eq %6, 0:i32
%8:i32 = var
%9 = ne %8, 0:i32
%10:i32 = var
%11 = ne %10, 0:i32
%12:i32 = var
%13 = ult -65:i32, %12
%14:i32 = zext %13
%15 = eq %14, 0:i32
%16 = ult %12, 245:i32
%17:i32 = zext %16
%18 = eq %17, 0:i32
pc %9 1:i1
pc %11 1:i1
pc %15 1:i1
pc %18 1:i1
infer %7


; start LHS (in $6)
%0:i32 = var
%1 = eq %0, 0:i32
%2:i32 = var
%3 = ne %2, 0:i32
%4:i32 = var
%5 = ne %4, 0:i32
%6:i32 = var
%7 = ult -65:i32, %6
%8:i32 = zext %7
%9 = eq %8, 0:i32
%10 = ult %6, 245:i32
%11:i32 = zext %10
%12 = eq %11, 0:i32
pc %3 1:i1
pc %5 1:i1
pc %9 1:i1
pc %12 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = eq %0, 0:i32 (hasExternalUses)
%2:i32 = zext %1
%3 = xor %2, 1:i32
%4:i32 = var
%5 = ne %4, 0:i32
%6:i32 = var
%7 = ne %6, 0:i32
%8:i32 = var
%9 = ult -65:i32, %8
%10:i32 = zext %9
%11 = eq %10, 0:i32
%12 = ult %8, 245:i32
%13:i32 = zext %12
%14 = eq %13, 0:i32
pc %5 1:i1
pc %7 1:i1
pc %11 1:i1
pc %14 1:i1
infer %3


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = eq %1, 0:i32 (hasExternalUses)
%3:i32 = zext %2
%4 = xor %3, 1:i32
%5 = shl %0, %4
%6:i32 = var
%7 = ne %6, 0:i32
%8:i32 = var
%9 = ne %8, 0:i32
%10:i32 = var
%11 = ult -65:i32, %10
%12:i32 = zext %11
%13 = eq %12, 0:i32
%14 = ult %10, 245:i32
%15:i32 = zext %14
%16 = eq %15, 0:i32
pc %7 1:i1
pc %9 1:i1
pc %13 1:i1
pc %16 1:i1
infer %5


; start LHS (in $6)
%0:i32 = var
%1 = eq %0, 0:i32 (hasExternalUses)
%2:i32 = zext %1
%3 = eq %2, 0:i32
%4:i32 = var
%5 = ne %4, 0:i32
%6:i32 = var
%7 = ne %6, 0:i32
%8:i32 = var
%9 = ult -65:i32, %8
%10:i32 = zext %9
%11 = eq %10, 0:i32
%12 = ult %8, 245:i32
%13:i32 = zext %12
%14 = eq %13, 0:i32
pc %5 1:i1
pc %7 1:i1
pc %11 1:i1
pc %14 1:i1
infer %3


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2:i32 = var
%3:i32 = var
%4 = phi %1, %2, %3
%5 = phi %0, %4, 0:i32
%6 = block 2
%7:i32 = var
%8:i32 = var
%9 = phi %6, %7, %8
%10 = phi %0, %9, 0:i32
%11 = or %5, %10
%12:i32 = var
%13 = ne %12, 0:i32
blockpc %0 0 %13 1:i1
%14 = eq %12, 0:i32
blockpc %0 1 %14 1:i1
%15 = eq %3, 0:i32
%16:i32 = zext %15
%17:i32 = var
%18 = eq %3, %17
%19:i32 = zext %18
%20 = or %16, %19
%21 = eq %20, 0:i32
blockpc %1 0 %21 1:i1
%22:i32 = zext %21
%23 = eq %22, 0:i32
blockpc %1 1 %23 1:i1
%24:i32 = var
%25 = and %24, -8:i32
%26:i32 = var
%27 = sub %25, %26
%28:i32 = var
%29 = ult %27, %28
blockpc %6 0 %29 1:i1
%30:i32 = var
blockpc %6 1 %30 1:i1
%31:i32 = var
%32:i32 = var
%33:i32 = var
pc %31 1:i1
pc %32 1:i1
pc %33 1:i1
infer %11


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2:i32 = var
%3 = add %2, 11:i32 (hasExternalUses)
%4 = and %3, -8:i32 (hasExternalUses)
%5:i32 = var
%6 = sub 14:i32, %5
%7:i32 = var
%8 = lshr %7, 15:i32
%9 = add %6, %8
%10 = add %9, 7:i32
%11 = lshr %4, %10
%12 = and %11, 1:i32
%13 = shl %9, 1:i32
%14 = or %12, %13 (hasExternalUses)
%15 = phi %1, 31:i32, %14
%16 = phi %0, %15, 0:i32
%17 = shl 2:i32, %16
%18 = lshr %3, 8:i32
%19 = ne %18, 0:i32
blockpc %0 0 %19 1:i1
%20 = eq %18, 0:i32
blockpc %0 1 %20 1:i1
%21 = ult 16777215:i32, %4
blockpc %1 0 %21 1:i1
%22:i32 = zext %21
%23 = eq %22, 0:i32
blockpc %1 1 %23 1:i1
%24 = block 2
%25:i32 = var
%26 = ne %25, 0:i32
blockpc %24 0 %26 1:i1
%27:i32 = var
blockpc %24 1 %27 1:i1
%28 = block 2
%29:i32 = var
blockpc %28 0 %29 1:i1
%30:i32 = var
blockpc %28 1 %30 1:i1
%31:i32 = var
%32:i32 = var
%33 = phi %28, %31, %32
%34 = phi %24, %33, 0:i32
%35 = block 2
%36:i32 = var
blockpc %35 0 %36 1:i1
%37:i32 = var
blockpc %35 1 %37 1:i1
%38:i32 = var
%39:i32 = var
%40 = phi %35, %38, %39
%41 = phi %24, %40, 0:i32
%42 = or %34, %41
%43 = eq %42, 0:i32
%44:i32 = var
%45:i32 = var
%46:i32 = var
pc %43 1:i1
pc %44 1:i1
pc %45 1:i1
pc %46 1:i1
infer %17


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2:i32 = var
%3 = add %2, 11:i32 (hasExternalUses)
%4 = and %3, -8:i32 (hasExternalUses)
%5:i32 = var
%6:i32 = var
%7 = add %5, %6
%8 = add %7, 7:i32
%9 = lshr %4, %8
%10 = and %9, 1:i32
%11 = shl %7, 1:i32
%12 = or %10, %11 (hasExternalUses)
%13 = phi %1, 31:i32, %12
%14 = phi %0, %13, 0:i32
%15 = shl 2:i32, %14 (hasExternalUses)
%16 = sub 0:i32, %15
%17 = lshr %3, 8:i32
%18 = ne %17, 0:i32
blockpc %0 0 %18 1:i1
%19 = eq %17, 0:i32
blockpc %0 1 %19 1:i1
%20 = ult 16777215:i32, %4
blockpc %1 0 %20 1:i1
%21:i32 = zext %20
%22 = eq %21, 0:i32
blockpc %1 1 %22 1:i1
%23 = block 2
%24:i32 = var
%25 = ne %24, 0:i32
blockpc %23 0 %25 1:i1
%26:i32 = var
blockpc %23 1 %26 1:i1
%27 = block 2
%28:i32 = var
blockpc %27 0 %28 1:i1
%29:i32 = var
blockpc %27 1 %29 1:i1
%30:i32 = var
%31:i32 = var
%32 = phi %27, %30, %31
%33 = phi %23, %32, 0:i32
%34 = block 2
%35:i32 = var
blockpc %34 0 %35 1:i1
%36:i32 = var
blockpc %34 1 %36 1:i1
%37:i32 = var
%38:i32 = var
%39 = phi %34, %37, %38
%40 = phi %23, %39, 0:i32
%41 = or %33, %40
%42 = eq %41, 0:i32
%43:i32 = var
%44:i32 = var
%45:i32 = var
pc %42 1:i1
pc %43 1:i1
pc %44 1:i1
pc %45 1:i1
infer %16


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2:i32 = var
%3 = add %2, 11:i32 (hasExternalUses)
%4 = and %3, -8:i32 (hasExternalUses)
%5:i32 = var
%6:i32 = var
%7 = add %5, %6
%8 = add %7, 7:i32
%9 = lshr %4, %8
%10 = and %9, 1:i32
%11 = shl %7, 1:i32
%12 = or %10, %11 (hasExternalUses)
%13 = phi %1, 31:i32, %12
%14 = phi %0, %13, 0:i32
%15 = shl 2:i32, %14
%16 = sub 0:i32, %15
%17 = or %15, %16
%18 = lshr %3, 8:i32
%19 = ne %18, 0:i32
blockpc %0 0 %19 1:i1
%20 = eq %18, 0:i32
blockpc %0 1 %20 1:i1
%21 = ult 16777215:i32, %4
blockpc %1 0 %21 1:i1
%22:i32 = zext %21
%23 = eq %22, 0:i32
blockpc %1 1 %23 1:i1
%24 = block 2
%25:i32 = var
%26 = ne %25, 0:i32
blockpc %24 0 %26 1:i1
%27:i32 = var
blockpc %24 1 %27 1:i1
%28 = block 2
%29:i32 = var
blockpc %28 0 %29 1:i1
%30:i32 = var
blockpc %28 1 %30 1:i1
%31:i32 = var
%32:i32 = var
%33 = phi %28, %31, %32
%34 = phi %24, %33, 0:i32
%35 = block 2
%36:i32 = var
blockpc %35 0 %36 1:i1
%37:i32 = var
blockpc %35 1 %37 1:i1
%38:i32 = var
%39:i32 = var
%40 = phi %35, %38, %39
%41 = phi %24, %40, 0:i32
%42 = or %34, %41
%43 = eq %42, 0:i32
%44:i32 = var
%45:i32 = var
%46:i32 = var
pc %43 1:i1
pc %44 1:i1
pc %45 1:i1
pc %46 1:i1
infer %17


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2 = block 2
%3:i32 = var
%4 = and %3, -8:i32 (hasExternalUses)
%5:i32 = var
%6 = add %5, 7:i32
%7 = lshr %4, %6
%8 = and %7, 1:i32
%9 = shl %5, 1:i32
%10 = or %8, %9 (hasExternalUses)
%11 = phi %2, 31:i32, %10
%12 = phi %1, %11, 0:i32
%13 = shl 2:i32, %12
%14 = sub 0:i32, %13
%15 = or %13, %14
%16 = and %0, %15
%17 = lshr %3, 8:i32
%18 = ne %17, 0:i32
blockpc %1 0 %18 1:i1
%19 = eq %17, 0:i32
blockpc %1 1 %19 1:i1
%20 = ult 16777215:i32, %4
blockpc %2 0 %20 1:i1
%21:i32 = zext %20
%22 = eq %21, 0:i32
blockpc %2 1 %22 1:i1
%23 = block 2
%24:i32 = var
%25 = ne %24, 0:i32
blockpc %23 0 %25 1:i1
%26:i32 = var
blockpc %23 1 %26 1:i1
%27 = block 2
%28:i32 = var
blockpc %27 0 %28 1:i1
%29:i32 = var
blockpc %27 1 %29 1:i1
%30:i32 = var
%31:i32 = var
%32 = phi %27, %30, %31
%33 = phi %23, %32, 0:i32
%34 = block 2
%35:i32 = var
blockpc %34 0 %35 1:i1
%36:i32 = var
blockpc %34 1 %36 1:i1
%37:i32 = var
%38:i32 = var
%39 = phi %34, %37, %38
%40 = phi %23, %39, 0:i32
%41 = or %33, %40
%42 = eq %41, 0:i32
%43:i32 = var
%44:i32 = var
%45:i32 = var
pc %42 1:i1
pc %43 1:i1
pc %44 1:i1
pc %45 1:i1
infer %16


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = lshr %3, %4
%6 = and %5, 1:i32
%7:i32 = var
%8:i32 = var
%9 = add %7, %8 (hasExternalUses)
%10 = shl %9, 1:i32
%11 = or %6, %10 (hasExternalUses)
%12 = phi %2, 31:i32, %11
%13 = phi %1, %12, 0:i32
%14 = shl 2:i32, %13
%15 = sub 0:i32, %14
%16 = or %14, %15
%17 = and %0, %16 (hasExternalUses)
%18 = eq %17, 0:i32
%19:i32 = var
%20 = add %19, 11:i32
%21 = lshr %20, 8:i32
%22 = ne %21, 0:i32
blockpc %1 0 %22 1:i1
%23 = eq %21, 0:i32
blockpc %1 1 %23 1:i1
%24 = ult 16777215:i32, %3
blockpc %2 0 %24 1:i1
%25:i32 = zext %24
%26 = eq %25, 0:i32
blockpc %2 1 %26 1:i1
%27:i32 = var
%28:i32 = var
%29:i32 = var
%30:i32 = var
pc %27 1:i1
pc %28 1:i1
pc %29 1:i1
pc %30 1:i1
infer %18


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = lshr %3, %4
%6 = and %5, 1:i32
%7:i32 = var
%8:i32 = var
%9 = add %7, %8 (hasExternalUses)
%10 = shl %9, 1:i32
%11 = or %6, %10 (hasExternalUses)
%12 = phi %2, 31:i32, %11
%13 = phi %1, %12, 0:i32
%14 = shl 2:i32, %13
%15 = sub 0:i32, %14
%16 = or %14, %15
%17 = and %0, %16 (hasExternalUses)
%18 = sub 0:i32, %17
%19:i32 = var
%20 = add %19, 11:i32
%21 = lshr %20, 8:i32
%22 = ne %21, 0:i32
blockpc %1 0 %22 1:i1
%23 = eq %21, 0:i32
blockpc %1 1 %23 1:i1
%24 = ult 16777215:i32, %3
blockpc %2 0 %24 1:i1
%25:i32 = zext %24
%26 = eq %25, 0:i32
blockpc %2 1 %26 1:i1
%27:i32 = var
%28:i32 = var
%29:i32 = var
%30:i32 = var
pc %27 1:i1
pc %28 1:i1
pc %29 1:i1
pc %30 1:i1
infer %18


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = lshr %3, %4
%6 = and %5, 1:i32
%7:i32 = var
%8:i32 = var
%9 = add %7, %8 (hasExternalUses)
%10 = shl %9, 1:i32
%11 = or %6, %10 (hasExternalUses)
%12 = phi %2, 31:i32, %11
%13 = phi %1, %12, 0:i32
%14 = shl 2:i32, %13
%15 = sub 0:i32, %14
%16 = or %14, %15
%17 = and %0, %16 (hasExternalUses)
%18 = sub 0:i32, %17
%19 = and %17, %18
%20:i32 = var
%21 = add %20, 11:i32
%22 = lshr %21, 8:i32
%23 = ne %22, 0:i32
blockpc %1 0 %23 1:i1
%24 = eq %22, 0:i32
blockpc %1 1 %24 1:i1
%25 = ult 16777215:i32, %3
blockpc %2 0 %25 1:i1
%26:i32 = zext %25
%27 = eq %26, 0:i32
blockpc %2 1 %27 1:i1
%28:i32 = var
%29:i32 = var
%30:i32 = var
%31:i32 = var
pc %28 1:i1
pc %29 1:i1
pc %30 1:i1
pc %31 1:i1
infer %19


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2 = block 2
%3:i32 = var
%4 = and %3, 1:i32
%5:i32 = var
%6 = shl %5, 1:i32
%7 = or %4, %6 (hasExternalUses)
%8 = phi %2, 31:i32, %7
%9 = phi %1, %8, 0:i32
%10 = shl 2:i32, %9
%11 = sub 0:i32, %10
%12 = or %10, %11
%13 = and %0, %12 (hasExternalUses)
%14 = sub 0:i32, %13
%15 = and %13, %14
%16 = add %15, -1:i32
%17:i32 = var
%18 = add %17, 11:i32
%19 = lshr %18, 8:i32
%20 = ne %19, 0:i32
blockpc %1 0 %20 1:i1
%21 = eq %19, 0:i32
blockpc %1 1 %21 1:i1
%22 = and %18, -8:i32
%23 = ult 16777215:i32, %22
blockpc %2 0 %23 1:i1
%24:i32 = zext %23
%25 = eq %24, 0:i32
blockpc %2 1 %25 1:i1
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29:i32 = var
pc %26 1:i1
pc %27 1:i1
pc %28 1:i1
pc %29 1:i1
infer %16


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = or %3, %4 (hasExternalUses)
%6 = phi %2, 31:i32, %5
%7 = phi %1, %6, 0:i32
%8 = shl 2:i32, %7
%9 = sub 0:i32, %8
%10 = or %8, %9
%11 = and %0, %10 (hasExternalUses)
%12 = sub 0:i32, %11
%13 = and %11, %12
%14 = add %13, -1:i32 (hasExternalUses)
%15 = lshr %14, 12:i32
%16:i32 = var
%17 = add %16, 11:i32
%18 = lshr %17, 8:i32
%19 = ne %18, 0:i32
blockpc %1 0 %19 1:i1
%20 = eq %18, 0:i32
blockpc %1 1 %20 1:i1
%21 = and %17, -8:i32
%22 = ult 16777215:i32, %21
blockpc %2 0 %22 1:i1
%23:i32 = zext %22
%24 = eq %23, 0:i32
blockpc %2 1 %24 1:i1
%25 = block 2
%26:i32 = var
blockpc %25 0 %26 1:i1
%27:i32 = var
blockpc %25 1 %27 1:i1
%28 = block 2
%29:i32 = var
blockpc %28 0 %29 1:i1
%30:i32 = var
blockpc %28 1 %30 1:i1
%31:i32 = var
%32:i32 = var
%33 = phi %28, %31, %32
%34 = phi %25, %33, 0:i32
%35 = block 2
%36:i32 = var
blockpc %35 0 %36 1:i1
%37:i32 = var
blockpc %35 1 %37 1:i1
%38:i32 = var
%39:i32 = var
%40 = phi %35, %38, %39
%41 = phi %25, %40, 0:i32
%42 = or %34, %41
%43 = eq %42, 0:i32
%44:i32 = var
%45:i32 = var
%46:i32 = var
pc %43 1:i1
pc %44 1:i1
pc %45 1:i1
pc %46 1:i1
infer %15


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2 = block 2
%3:i32 = var
%4 = phi %2, 31:i32, %3
%5 = phi %1, %4, 0:i32
%6 = shl 2:i32, %5
%7 = sub 0:i32, %6
%8 = or %6, %7
%9 = and %0, %8 (hasExternalUses)
%10 = sub 0:i32, %9
%11 = and %9, %10
%12 = add %11, -1:i32 (hasExternalUses)
%13 = lshr %12, 12:i32
%14 = and %13, 16:i32
%15:i32 = var
%16 = add %15, 11:i32
%17 = lshr %16, 8:i32
%18 = ne %17, 0:i32
blockpc %1 0 %18 1:i1
%19 = eq %17, 0:i32
blockpc %1 1 %19 1:i1
%20 = and %16, -8:i32
%21 = ult 16777215:i32, %20
blockpc %2 0 %21 1:i1
%22:i32 = zext %21
%23 = eq %22, 0:i32
blockpc %2 1 %23 1:i1
%24 = block 2
%25:i32 = var
%26 = ne %25, 0:i32
blockpc %24 0 %26 1:i1
%27:i32 = var
blockpc %24 1 %27 1:i1
%28 = block 2
%29:i32 = var
blockpc %28 0 %29 1:i1
%30:i32 = var
blockpc %28 1 %30 1:i1
%31:i32 = var
%32:i32 = var
%33 = phi %28, %31, %32
%34 = phi %24, %33, 0:i32
%35 = block 2
%36:i32 = var
blockpc %35 0 %36 1:i1
%37:i32 = var
blockpc %35 1 %37 1:i1
%38:i32 = var
%39:i32 = var
%40 = phi %35, %38, %39
%41 = phi %24, %40, 0:i32
%42 = or %34, %41
%43 = eq %42, 0:i32
%44:i32 = var
%45:i32 = var
%46:i32 = var
pc %43 1:i1
pc %44 1:i1
pc %45 1:i1
pc %46 1:i1
infer %14


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = or %3, %4 (hasExternalUses)
%6 = phi %2, 31:i32, %5
%7 = phi %1, %6, 0:i32
%8 = shl 2:i32, %7
%9 = sub 0:i32, %8
%10 = or %8, %9
%11 = and %0, %10 (hasExternalUses)
%12 = sub 0:i32, %11
%13 = and %11, %12
%14 = add %13, -1:i32
%15 = lshr %14, 12:i32
%16 = and %15, 16:i32 (hasExternalUses)
%17 = lshr %14, %16
%18:i32 = var
%19 = add %18, 11:i32
%20 = lshr %19, 8:i32
%21 = ne %20, 0:i32
blockpc %1 0 %21 1:i1
%22 = eq %20, 0:i32
blockpc %1 1 %22 1:i1
%23 = and %19, -8:i32
%24 = ult 16777215:i32, %23
blockpc %2 0 %24 1:i1
%25:i32 = zext %24
%26 = eq %25, 0:i32
blockpc %2 1 %26 1:i1
%27:i32 = var
%28:i32 = var
%29:i32 = var
%30:i32 = var
pc %27 1:i1
pc %28 1:i1
pc %29 1:i1
pc %30 1:i1
infer %17


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2 = block 2
%3:i32 = var
%4 = phi %2, 31:i32, %3
%5 = phi %1, %4, 0:i32
%6 = shl 2:i32, %5
%7 = sub 0:i32, %6
%8 = or %6, %7
%9 = and %0, %8 (hasExternalUses)
%10 = sub 0:i32, %9
%11 = and %9, %10
%12 = add %11, -1:i32
%13 = lshr %12, 12:i32
%14 = and %13, 16:i32 (hasExternalUses)
%15 = lshr %12, %14 (hasExternalUses)
%16 = lshr %15, 5:i32
%17:i32 = var
%18 = add %17, 11:i32
%19 = lshr %18, 8:i32
%20 = ne %19, 0:i32
blockpc %1 0 %20 1:i1
%21 = eq %19, 0:i32
blockpc %1 1 %21 1:i1
%22 = and %18, -8:i32
%23 = ult 16777215:i32, %22
blockpc %2 0 %23 1:i1
%24:i32 = zext %23
%25 = eq %24, 0:i32
blockpc %2 1 %25 1:i1
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29:i32 = var
pc %26 1:i1
pc %27 1:i1
pc %28 1:i1
pc %29 1:i1
infer %16


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2 = block 2
%3:i32 = var
%4 = phi %2, 31:i32, %3
%5 = phi %1, %4, 0:i32
%6 = shl 2:i32, %5
%7 = sub 0:i32, %6
%8 = or %6, %7
%9 = and %0, %8 (hasExternalUses)
%10 = sub 0:i32, %9
%11 = and %9, %10
%12 = add %11, -1:i32
%13 = lshr %12, 12:i32
%14 = and %13, 16:i32 (hasExternalUses)
%15 = lshr %12, %14 (hasExternalUses)
%16 = lshr %15, 5:i32
%17 = and %16, 8:i32
%18:i32 = var
%19 = add %18, 11:i32
%20 = lshr %19, 8:i32
%21 = ne %20, 0:i32
blockpc %1 0 %21 1:i1
%22 = eq %20, 0:i32
blockpc %1 1 %22 1:i1
%23 = and %19, -8:i32
%24 = ult 16777215:i32, %23
blockpc %2 0 %24 1:i1
%25:i32 = zext %24
%26 = eq %25, 0:i32
blockpc %2 1 %26 1:i1
%27:i32 = var
%28:i32 = var
%29:i32 = var
%30:i32 = var
pc %27 1:i1
pc %28 1:i1
pc %29 1:i1
pc %30 1:i1
infer %17


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2 = block 2
%3:i32 = var
%4 = phi %2, 31:i32, %3
%5 = phi %1, %4, 0:i32
%6 = shl 2:i32, %5
%7 = sub 0:i32, %6
%8 = or %6, %7
%9 = and %0, %8 (hasExternalUses)
%10 = sub 0:i32, %9
%11 = and %9, %10
%12 = add %11, -1:i32
%13 = lshr %12, 12:i32
%14 = and %13, 16:i32
%15 = lshr %12, %14 (hasExternalUses)
%16 = lshr %15, 5:i32
%17 = and %16, 8:i32 (hasExternalUses)
%18 = or %17, %14
%19:i32 = var
%20 = add %19, 11:i32
%21 = lshr %20, 8:i32
%22 = ne %21, 0:i32
blockpc %1 0 %22 1:i1
%23 = eq %21, 0:i32
blockpc %1 1 %23 1:i1
%24 = and %20, -8:i32
%25 = ult 16777215:i32, %24
blockpc %2 0 %25 1:i1
%26:i32 = zext %25
%27 = eq %26, 0:i32
blockpc %2 1 %27 1:i1
%28:i32 = var
%29:i32 = var
%30:i32 = var
%31:i32 = var
pc %28 1:i1
pc %29 1:i1
pc %30 1:i1
pc %31 1:i1
infer %18


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2 = block 2
%3:i32 = var
%4 = phi %2, 31:i32, %3
%5 = phi %1, %4, 0:i32
%6 = shl 2:i32, %5
%7 = sub 0:i32, %6
%8 = or %6, %7
%9 = and %0, %8 (hasExternalUses)
%10 = sub 0:i32, %9
%11 = and %9, %10
%12 = add %11, -1:i32
%13 = lshr %12, 12:i32
%14 = and %13, 16:i32 (hasExternalUses)
%15 = lshr %12, %14
%16 = lshr %15, 5:i32
%17 = and %16, 8:i32 (hasExternalUses)
%18 = lshr %15, %17
%19:i32 = var
%20 = add %19, 11:i32
%21 = lshr %20, 8:i32
%22 = ne %21, 0:i32
blockpc %1 0 %22 1:i1
%23 = eq %21, 0:i32
blockpc %1 1 %23 1:i1
%24 = and %20, -8:i32
%25 = ult 16777215:i32, %24
blockpc %2 0 %25 1:i1
%26:i32 = zext %25
%27 = eq %26, 0:i32
blockpc %2 1 %27 1:i1
%28:i32 = var
%29:i32 = var
%30:i32 = var
%31:i32 = var
pc %28 1:i1
pc %29 1:i1
pc %30 1:i1
pc %31 1:i1
infer %18


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2 = block 2
%3:i32 = var
%4 = phi %2, 31:i32, %3
%5 = phi %1, %4, 0:i32
%6 = shl 2:i32, %5
%7 = sub 0:i32, %6
%8 = or %6, %7
%9 = and %0, %8 (hasExternalUses)
%10 = sub 0:i32, %9
%11 = and %9, %10
%12 = add %11, -1:i32
%13 = lshr %12, 12:i32
%14 = and %13, 16:i32 (hasExternalUses)
%15 = lshr %12, %14
%16 = lshr %15, 5:i32
%17 = and %16, 8:i32 (hasExternalUses)
%18 = lshr %15, %17 (hasExternalUses)
%19 = lshr %18, 2:i32
%20:i32 = var
%21 = add %20, 11:i32
%22 = lshr %21, 8:i32
%23 = ne %22, 0:i32
blockpc %1 0 %23 1:i1
%24 = eq %22, 0:i32
blockpc %1 1 %24 1:i1
%25 = and %21, -8:i32
%26 = ult 16777215:i32, %25
blockpc %2 0 %26 1:i1
%27:i32 = var
blockpc %2 1 %27 1:i1
%28:i32 = var
%29:i32 = var
%30:i32 = var
%31:i32 = var
pc %28 1:i1
pc %29 1:i1
pc %30 1:i1
pc %31 1:i1
infer %19


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2 = block 2
%3:i32 = var
%4 = phi %2, 31:i32, %3
%5 = phi %1, %4, 0:i32
%6 = shl 2:i32, %5
%7 = sub 0:i32, %6
%8 = or %6, %7
%9 = and %0, %8 (hasExternalUses)
%10 = sub 0:i32, %9
%11 = and %9, %10
%12 = add %11, -1:i32
%13 = lshr %12, 12:i32
%14 = and %13, 16:i32 (hasExternalUses)
%15 = lshr %12, %14
%16 = lshr %15, 5:i32
%17 = and %16, 8:i32 (hasExternalUses)
%18 = lshr %15, %17 (hasExternalUses)
%19 = lshr %18, 2:i32
%20 = and %19, 4:i32
%21:i32 = var
%22 = add %21, 11:i32
%23 = lshr %22, 8:i32
%24 = ne %23, 0:i32
blockpc %1 0 %24 1:i1
%25 = eq %23, 0:i32
blockpc %1 1 %25 1:i1
%26 = and %22, -8:i32
%27 = ult 16777215:i32, %26
blockpc %2 0 %27 1:i1
%28:i32 = var
blockpc %2 1 %28 1:i1
%29:i32 = var
%30:i32 = var
%31:i32 = var
%32:i32 = var
pc %29 1:i1
pc %30 1:i1
pc %31 1:i1
pc %32 1:i1
infer %20


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3 = or %1, %2
%4 = and %0, %3 (hasExternalUses)
%5 = sub 0:i32, %4
%6 = and %4, %5
%7 = add %6, -1:i32
%8 = lshr %7, 12:i32
%9 = and %8, 16:i32
%10 = lshr %7, %9
%11 = lshr %10, 5:i32
%12 = and %11, 8:i32
%13 = or %12, %9
%14 = lshr %10, %12 (hasExternalUses)
%15 = lshr %14, 2:i32
%16 = and %15, 4:i32 (hasExternalUses)
%17 = or %13, %16
%18 = block 2
%19:i32 = var
%20 = ne %19, 0:i32
blockpc %18 0 %20 1:i1
%21 = eq %19, 0:i32
blockpc %18 1 %21 1:i1
%22 = block 2
%23:i32 = var
%24 = eq %23, 0:i32
%25:i32 = zext %24
%26:i32 = var
%27 = eq %23, %26
%28:i32 = zext %27
%29 = or %25, %28
%30 = eq %29, 0:i32
blockpc %22 0 %30 1:i1
%31:i32 = var
blockpc %22 1 %31 1:i1
%32:i32 = var
%33 = phi %22, %32, %23
%34 = phi %18, %33, 0:i32
%35 = block 2
%36:i32 = var
blockpc %35 0 %36 1:i1
%37:i32 = var
blockpc %35 1 %37 1:i1
%38:i32 = var
%39:i32 = var
%40 = phi %35, %38, %39
%41 = phi %18, %40, 0:i32
%42 = or %34, %41
%43 = eq %42, 0:i32
%44:i32 = var
%45:i32 = var
%46:i32 = var
pc %43 1:i1
pc %44 1:i1
pc %45 1:i1
pc %46 1:i1
infer %17


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2 = block 2
%3:i32 = var
%4 = phi %2, 31:i32, %3
%5 = phi %1, %4, 0:i32
%6 = shl 2:i32, %5
%7 = sub 0:i32, %6
%8 = or %6, %7
%9 = and %0, %8 (hasExternalUses)
%10 = sub 0:i32, %9
%11 = and %9, %10
%12 = add %11, -1:i32
%13 = lshr %12, 12:i32
%14 = and %13, 16:i32 (hasExternalUses)
%15 = lshr %12, %14
%16 = lshr %15, 5:i32
%17 = and %16, 8:i32 (hasExternalUses)
%18 = lshr %15, %17
%19 = lshr %18, 2:i32
%20 = and %19, 4:i32 (hasExternalUses)
%21 = lshr %18, %20
%22:i32 = var
%23 = add %22, 11:i32
%24 = lshr %23, 8:i32
%25 = ne %24, 0:i32
blockpc %1 0 %25 1:i1
%26 = eq %24, 0:i32
blockpc %1 1 %26 1:i1
%27 = and %23, -8:i32
%28 = ult 16777215:i32, %27
blockpc %2 0 %28 1:i1
%29:i32 = var
blockpc %2 1 %29 1:i1
%30:i32 = var
%31:i32 = var
%32:i32 = var
%33:i32 = var
pc %30 1:i1
pc %31 1:i1
pc %32 1:i1
pc %33 1:i1
infer %21


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2 = block 2
%3:i32 = var
%4 = phi %2, 31:i32, %3
%5 = phi %1, %4, 0:i32
%6 = shl 2:i32, %5
%7 = sub 0:i32, %6
%8 = or %6, %7
%9 = and %0, %8 (hasExternalUses)
%10 = sub 0:i32, %9
%11 = and %9, %10
%12 = add %11, -1:i32
%13 = lshr %12, 12:i32
%14 = and %13, 16:i32 (hasExternalUses)
%15 = lshr %12, %14
%16 = lshr %15, 5:i32
%17 = and %16, 8:i32 (hasExternalUses)
%18 = lshr %15, %17
%19 = lshr %18, 2:i32
%20 = and %19, 4:i32 (hasExternalUses)
%21 = lshr %18, %20 (hasExternalUses)
%22 = lshr %21, 1:i32
%23:i32 = var
%24 = add %23, 11:i32
%25 = lshr %24, 8:i32
%26 = ne %25, 0:i32
blockpc %1 0 %26 1:i1
%27 = eq %25, 0:i32
blockpc %1 1 %27 1:i1
%28:i32 = var
blockpc %2 0 %28 1:i1
%29:i32 = var
blockpc %2 1 %29 1:i1
%30:i32 = var
%31:i32 = var
%32:i32 = var
%33:i32 = var
pc %30 1:i1
pc %31 1:i1
pc %32 1:i1
pc %33 1:i1
infer %22


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3 = or %1, %2
%4 = and %0, %3 (hasExternalUses)
%5 = sub 0:i32, %4
%6 = and %4, %5
%7 = add %6, -1:i32
%8 = lshr %7, 12:i32
%9 = and %8, 16:i32 (hasExternalUses)
%10 = lshr %7, %9
%11 = lshr %10, 5:i32
%12 = and %11, 8:i32 (hasExternalUses)
%13 = lshr %10, %12
%14 = lshr %13, 2:i32
%15 = and %14, 4:i32 (hasExternalUses)
%16 = lshr %13, %15 (hasExternalUses)
%17 = lshr %16, 1:i32
%18 = and %17, 2:i32
%19 = block 2
%20:i32 = var
%21 = ne %20, 0:i32
blockpc %19 0 %21 1:i1
%22 = eq %20, 0:i32
blockpc %19 1 %22 1:i1
%23 = block 2
%24:i32 = var
%25 = eq %24, 0:i32
%26:i32 = zext %25
%27:i32 = var
%28 = eq %24, %27
%29:i32 = zext %28
%30 = or %26, %29
%31 = eq %30, 0:i32
blockpc %23 0 %31 1:i1
%32:i32 = var
blockpc %23 1 %32 1:i1
%33:i32 = var
%34 = phi %23, %33, %24
%35 = phi %19, %34, 0:i32
%36 = block 2
%37:i32 = var
blockpc %36 0 %37 1:i1
%38:i32 = var
blockpc %36 1 %38 1:i1
%39:i32 = var
%40:i32 = var
%41 = phi %36, %39, %40
%42 = phi %19, %41, 0:i32
%43 = or %35, %42
%44 = eq %43, 0:i32
%45:i32 = var
%46:i32 = var
%47:i32 = var
pc %44 1:i1
pc %45 1:i1
pc %46 1:i1
pc %47 1:i1
infer %18


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = and %0, %1 (hasExternalUses)
%3 = sub 0:i32, %2
%4 = and %2, %3
%5 = add %4, -1:i32
%6 = lshr %5, 12:i32
%7 = and %6, 16:i32
%8 = lshr %5, %7
%9 = lshr %8, 5:i32
%10 = and %9, 8:i32
%11 = or %10, %7
%12 = lshr %8, %10
%13 = lshr %12, 2:i32
%14 = and %13, 4:i32
%15 = or %11, %14
%16 = lshr %12, %14 (hasExternalUses)
%17 = lshr %16, 1:i32
%18 = and %17, 2:i32 (hasExternalUses)
%19 = or %15, %18
%20 = block 2
%21:i32 = var
%22 = ne %21, 0:i32
blockpc %20 0 %22 1:i1
%23 = eq %21, 0:i32
blockpc %20 1 %23 1:i1
%24 = block 2
%25:i32 = var
%26 = eq %25, 0:i32
%27:i32 = zext %26
%28:i32 = var
%29:i32 = zext %28
%30 = or %27, %29
%31 = eq %30, 0:i32
blockpc %24 0 %31 1:i1
%32:i32 = var
blockpc %24 1 %32 1:i1
%33:i32 = var
%34 = phi %24, %33, %25
%35 = phi %20, %34, 0:i32
%36 = block 2
%37:i32 = var
blockpc %36 0 %37 1:i1
%38:i32 = var
blockpc %36 1 %38 1:i1
%39:i32 = var
%40:i32 = var
%41 = phi %36, %39, %40
%42 = phi %20, %41, 0:i32
%43 = or %35, %42
%44 = eq %43, 0:i32
%45:i32 = var
%46:i32 = var
%47:i32 = var
pc %44 1:i1
pc %45 1:i1
pc %46 1:i1
pc %47 1:i1
infer %19


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2 = block 2
%3:i32 = var
%4 = phi %2, 31:i32, %3
%5 = phi %1, %4, 0:i32
%6 = shl 2:i32, %5
%7 = sub 0:i32, %6
%8 = or %6, %7
%9 = and %0, %8 (hasExternalUses)
%10 = sub 0:i32, %9
%11 = and %9, %10
%12 = add %11, -1:i32
%13 = lshr %12, 12:i32
%14 = and %13, 16:i32 (hasExternalUses)
%15 = lshr %12, %14
%16 = lshr %15, 5:i32
%17 = and %16, 8:i32 (hasExternalUses)
%18 = lshr %15, %17
%19 = lshr %18, 2:i32
%20 = and %19, 4:i32 (hasExternalUses)
%21 = lshr %18, %20
%22 = lshr %21, 1:i32
%23 = and %22, 2:i32 (hasExternalUses)
%24 = lshr %21, %23
%25:i32 = var
%26 = add %25, 11:i32
%27 = lshr %26, 8:i32
%28 = ne %27, 0:i32
blockpc %1 0 %28 1:i1
%29:i32 = var
blockpc %1 1 %29 1:i1
%30:i32 = var
blockpc %2 0 %30 1:i1
%31:i32 = var
blockpc %2 1 %31 1:i1
%32:i32 = var
%33:i32 = var
%34:i32 = var
%35:i32 = var
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
pc %35 1:i1
infer %24


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3 = or %1, %2
%4 = and %0, %3 (hasExternalUses)
%5 = sub 0:i32, %4
%6 = and %4, %5
%7 = add %6, -1:i32
%8 = lshr %7, 12:i32
%9 = and %8, 16:i32 (hasExternalUses)
%10 = lshr %7, %9
%11 = lshr %10, 5:i32
%12 = and %11, 8:i32 (hasExternalUses)
%13 = lshr %10, %12
%14 = lshr %13, 2:i32
%15 = and %14, 4:i32 (hasExternalUses)
%16 = lshr %13, %15
%17 = lshr %16, 1:i32
%18 = and %17, 2:i32 (hasExternalUses)
%19 = lshr %16, %18 (hasExternalUses)
%20 = lshr %19, 1:i32
%21 = block 2
%22:i32 = var
%23 = ne %22, 0:i32
blockpc %21 0 %23 1:i1
%24 = eq %22, 0:i32
blockpc %21 1 %24 1:i1
%25 = block 2
%26:i32 = var
%27 = eq %26, 0:i32
%28:i32 = zext %27
%29:i32 = var
%30:i32 = zext %29
%31 = or %28, %30
%32 = eq %31, 0:i32
blockpc %25 0 %32 1:i1
%33:i32 = var
blockpc %25 1 %33 1:i1
%34:i32 = var
%35 = phi %25, %34, %26
%36 = phi %21, %35, 0:i32
%37 = block 2
%38:i32 = var
blockpc %37 0 %38 1:i1
%39:i32 = var
blockpc %37 1 %39 1:i1
%40:i32 = var
%41:i32 = var
%42 = phi %37, %40, %41
%43 = phi %21, %42, 0:i32
%44 = or %36, %43
%45 = eq %44, 0:i32
%46:i32 = var
%47:i32 = var
%48:i32 = var
pc %45 1:i1
pc %46 1:i1
pc %47 1:i1
pc %48 1:i1
infer %20


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = and %0, %1 (hasExternalUses)
%3 = sub 0:i32, %2
%4 = and %2, %3
%5 = add %4, -1:i32
%6 = lshr %5, 12:i32
%7 = and %6, 16:i32 (hasExternalUses)
%8 = lshr %5, %7
%9 = lshr %8, 5:i32
%10 = and %9, 8:i32 (hasExternalUses)
%11 = lshr %8, %10
%12 = lshr %11, 2:i32
%13 = and %12, 4:i32 (hasExternalUses)
%14 = lshr %11, %13
%15 = lshr %14, 1:i32
%16 = and %15, 2:i32 (hasExternalUses)
%17 = lshr %14, %16 (hasExternalUses)
%18 = lshr %17, 1:i32
%19 = and %18, 1:i32
%20 = block 2
%21:i32 = var
%22 = ne %21, 0:i32
blockpc %20 0 %22 1:i1
%23 = eq %21, 0:i32
blockpc %20 1 %23 1:i1
%24 = block 2
%25:i32 = var
%26 = eq %25, 0:i32
%27:i32 = zext %26
%28:i32 = var
%29:i32 = zext %28
%30 = or %27, %29
%31 = eq %30, 0:i32
blockpc %24 0 %31 1:i1
%32:i32 = var
blockpc %24 1 %32 1:i1
%33:i32 = var
%34 = phi %24, %33, %25
%35 = phi %20, %34, 0:i32
%36 = block 2
%37:i32 = var
blockpc %36 0 %37 1:i1
%38:i32 = var
blockpc %36 1 %38 1:i1
%39:i32 = var
%40:i32 = var
%41 = phi %36, %39, %40
%42 = phi %20, %41, 0:i32
%43 = or %35, %42
%44 = eq %43, 0:i32
%45:i32 = var
%46:i32 = var
%47:i32 = var
pc %44 1:i1
pc %45 1:i1
pc %46 1:i1
pc %47 1:i1
infer %19


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = and %0, %1
%3 = add %2, -1:i32
%4 = lshr %3, 12:i32
%5 = and %4, 16:i32
%6 = lshr %3, %5
%7 = lshr %6, 5:i32
%8 = and %7, 8:i32
%9 = or %8, %5
%10 = lshr %6, %8
%11 = lshr %10, 2:i32
%12 = and %11, 4:i32
%13 = or %9, %12
%14 = lshr %10, %12
%15 = lshr %14, 1:i32
%16 = and %15, 2:i32
%17 = or %13, %16
%18 = lshr %14, %16 (hasExternalUses)
%19 = lshr %18, 1:i32
%20 = and %19, 1:i32 (hasExternalUses)
%21 = or %17, %20
%22 = block 2
%23:i32 = var
%24 = ne %23, 0:i32
blockpc %22 0 %24 1:i1
%25 = eq %23, 0:i32
blockpc %22 1 %25 1:i1
%26 = block 2
%27:i32 = var
%28 = eq %27, 0:i32
%29:i32 = zext %28
%30:i32 = var
%31:i32 = zext %30
%32 = or %29, %31
%33 = eq %32, 0:i32
blockpc %26 0 %33 1:i1
%34:i32 = var
blockpc %26 1 %34 1:i1
%35:i32 = var
%36 = phi %26, %35, %27
%37 = phi %22, %36, 0:i32
%38 = block 2
%39:i32 = var
blockpc %38 0 %39 1:i1
%40:i32 = var
blockpc %38 1 %40 1:i1
%41:i32 = var
%42:i32 = var
%43 = phi %38, %41, %42
%44 = phi %22, %43, 0:i32
%45 = or %37, %44
%46 = eq %45, 0:i32
%47:i32 = var
%48:i32 = var
%49:i32 = var
pc %46 1:i1
pc %47 1:i1
pc %48 1:i1
pc %49 1:i1
infer %21


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3 = or %1, %2
%4 = and %0, %3 (hasExternalUses)
%5 = sub 0:i32, %4
%6 = and %4, %5
%7 = add %6, -1:i32
%8 = lshr %7, 12:i32
%9 = and %8, 16:i32 (hasExternalUses)
%10 = lshr %7, %9
%11 = lshr %10, 5:i32
%12 = and %11, 8:i32 (hasExternalUses)
%13 = lshr %10, %12
%14 = lshr %13, 2:i32
%15 = and %14, 4:i32 (hasExternalUses)
%16 = lshr %13, %15
%17 = lshr %16, 1:i32
%18 = and %17, 2:i32 (hasExternalUses)
%19 = lshr %16, %18
%20 = lshr %19, 1:i32
%21 = and %20, 1:i32 (hasExternalUses)
%22 = lshr %19, %21
%23 = block 2
%24:i32 = var
%25 = ne %24, 0:i32
blockpc %23 0 %25 1:i1
%26 = eq %24, 0:i32
blockpc %23 1 %26 1:i1
%27 = block 2
%28:i32 = var
blockpc %27 0 %28 1:i1
%29:i32 = var
blockpc %27 1 %29 1:i1
%30:i32 = var
%31:i32 = var
%32 = phi %27, %30, %31
%33 = phi %23, %32, 0:i32
%34 = block 2
%35:i32 = var
blockpc %34 0 %35 1:i1
%36:i32 = var
blockpc %34 1 %36 1:i1
%37:i32 = var
%38:i32 = var
%39 = phi %34, %37, %38
%40 = phi %23, %39, 0:i32
%41 = or %33, %40
%42 = eq %41, 0:i32
%43:i32 = var
%44:i32 = var
%45:i32 = var
pc %42 1:i1
pc %43 1:i1
pc %44 1:i1
pc %45 1:i1
infer %22


; start LHS (in $6)
%0:i32 = var
%1 = add %0, -1:i32 (hasExternalUses)
%2:i32 = var
%3 = and %2, 16:i32
%4 = lshr %1, %3
%5 = lshr %4, 5:i32
%6 = and %5, 8:i32
%7 = or %6, %3
%8 = lshr %4, %6
%9 = lshr %8, 2:i32
%10 = and %9, 4:i32
%11 = or %7, %10
%12 = lshr %8, %10
%13 = lshr %12, 1:i32
%14 = and %13, 2:i32
%15 = or %11, %14
%16 = lshr %12, %14
%17 = lshr %16, 1:i32
%18 = and %17, 1:i32
%19 = or %15, %18
%20 = lshr %16, %18
%21 = add %19, %20
%22 = block 2
%23:i32 = var
%24 = ne %23, 0:i32
blockpc %22 0 %24 1:i1
%25 = eq %23, 0:i32
blockpc %22 1 %25 1:i1
%26 = block 2
%27:i32 = var
%28 = eq %27, 0:i32
%29:i32 = zext %28
%30:i32 = var
%31:i32 = zext %30
%32 = or %29, %31
%33 = eq %32, 0:i32
blockpc %26 0 %33 1:i1
%34:i32 = var
blockpc %26 1 %34 1:i1
%35:i32 = var
%36 = phi %26, %35, %27
%37 = phi %22, %36, 0:i32
%38 = block 2
%39:i32 = var
blockpc %38 0 %39 1:i1
%40:i32 = var
blockpc %38 1 %40 1:i1
%41:i32 = var
%42:i32 = var
%43 = phi %38, %41, %42
%44 = phi %22, %43, 0:i32
%45 = or %37, %44
%46 = eq %45, 0:i32
%47:i32 = var
%48:i32 = var
%49:i32 = var
pc %46 1:i1
pc %47 1:i1
pc %48 1:i1
pc %49 1:i1
infer %21


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = lshr %0, %1
%3 = lshr %2, 5:i32
%4 = and %3, 8:i32
%5 = or %4, %1
%6 = lshr %2, %4
%7 = lshr %6, 2:i32
%8 = and %7, 4:i32
%9 = or %5, %8
%10 = lshr %6, %8
%11 = lshr %10, 1:i32
%12 = and %11, 2:i32
%13 = or %9, %12
%14 = lshr %10, %12
%15 = lshr %14, 1:i32
%16 = and %15, 1:i32
%17 = or %13, %16
%18 = lshr %14, %16
%19 = add %17, %18
%20 = shl %19, 2:i32
%21 = block 2
%22:i32 = var
%23 = ne %22, 0:i32
blockpc %21 0 %23 1:i1
%24 = eq %22, 0:i32
blockpc %21 1 %24 1:i1
%25 = block 2
%26:i32 = var
%27 = eq %26, 0:i32
%28:i32 = zext %27
%29:i32 = var
%30:i32 = zext %29
%31 = or %28, %30
%32 = eq %31, 0:i32
blockpc %25 0 %32 1:i1
%33:i32 = var
blockpc %25 1 %33 1:i1
%34:i32 = var
%35 = phi %25, %34, %26
%36 = phi %21, %35, 0:i32
%37 = block 2
%38:i32 = var
blockpc %37 0 %38 1:i1
%39:i32 = var
blockpc %37 1 %39 1:i1
%40:i32 = var
%41:i32 = var
%42 = phi %37, %40, %41
%43 = phi %21, %42, 0:i32
%44 = or %36, %43
%45 = eq %44, 0:i32
%46:i32 = var
%47:i32 = var
%48:i32 = var
pc %45 1:i1
pc %46 1:i1
pc %47 1:i1
pc %48 1:i1
infer %20


; start LHS (in $6)
%0:i32 = var
%1 = lshr %0, 5:i32
%2 = and %1, 8:i32
%3:i32 = var
%4 = lshr %3, 12:i32
%5 = and %4, 16:i32 (hasExternalUses)
%6 = or %2, %5
%7 = lshr %0, %2
%8 = lshr %7, 2:i32
%9 = and %8, 4:i32
%10 = or %6, %9
%11 = lshr %7, %9
%12 = lshr %11, 1:i32
%13 = and %12, 2:i32
%14 = or %10, %13
%15 = lshr %11, %13
%16 = lshr %15, 1:i32
%17 = and %16, 1:i32
%18 = or %14, %17
%19 = lshr %15, %17
%20 = add %18, %19
%21 = shl %20, 2:i32
%22 = add %21, 4260:i32
%23 = block 2
%24:i32 = var
%25 = ne %24, 0:i32
blockpc %23 0 %25 1:i1
%26 = eq %24, 0:i32
blockpc %23 1 %26 1:i1
%27 = block 2
%28:i32 = var
blockpc %27 0 %28 1:i1
%29:i32 = var
blockpc %27 1 %29 1:i1
%30:i32 = var
%31:i32 = var
%32 = phi %27, %30, %31
%33 = phi %23, %32, 0:i32
%34 = block 2
%35:i32 = var
blockpc %34 0 %35 1:i1
%36:i32 = var
blockpc %34 1 %36 1:i1
%37:i32 = var
%38:i32 = var
%39 = phi %34, %37, %38
%40 = phi %23, %39, 0:i32
%41 = or %33, %40
%42 = eq %41, 0:i32
%43:i32 = var
%44:i32 = var
%45:i32 = var
pc %42 1:i1
pc %43 1:i1
pc %44 1:i1
pc %45 1:i1
infer %22


; start LHS (in $6)
%0:i32 = var
%1 = and %0, -8:i32
%2:i32 = var
%3 = ne %2, 0:i32
%4:i32 = var
%5 = ult -65:i32, %4
%6:i32 = zext %5
%7 = eq %6, 0:i32
%8 = ult %4, 245:i32
%9:i32 = zext %8
%10 = eq %9, 0:i32
pc %3 1:i1
pc %7 1:i1
pc %10 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = and %0, -8:i32
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = add %4, 11:i32 (hasExternalUses)
%6 = and %5, -8:i32 (hasExternalUses)
%7 = phi %2, %3, %6
%8 = sub %1, %7
%9:i32 = var
%10 = ne %9, 0:i32
%11 = ult -65:i32, %4
%12:i32 = zext %11
%13 = eq %12, 0:i32
%14 = ult %4, 245:i32
%15:i32 = zext %14
%16 = eq %15, 0:i32
pc %10 1:i1
pc %13 1:i1
pc %16 1:i1
infer %8


; start LHS (in $6)
%0:i32 = var
%1 = and %0, -8:i32
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = add %4, 11:i32 (hasExternalUses)
%6 = and %5, -8:i32 (hasExternalUses)
%7 = phi %2, %3, %6
%8 = sub %1, %7 (hasExternalUses)
%9:i32 = var
%10 = ult %8, %9
%11:i32 = var
%12 = ne %11, 0:i32
%13 = ult -65:i32, %4
%14:i32 = zext %13
%15 = eq %14, 0:i32
%16 = ult %4, 245:i32
%17:i32 = zext %16
%18 = eq %17, 0:i32
pc %12 1:i1
pc %15 1:i1
pc %18 1:i1
infer %10


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 16:i32
%2:i32 = var
%3 = ne %2, 0:i32
%4:i32 = var
%5 = ult -65:i32, %4
%6:i32 = zext %5
%7 = eq %6, 0:i32
%8 = ult %4, 245:i32
%9:i32 = zext %8
%10 = eq %9, 0:i32
pc %3 1:i1
pc %7 1:i1
pc %10 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = eq %0, 0:i32
%2:i32 = var
%3 = ne %2, 0:i32
%4:i32 = var
%5 = ult -65:i32, %4
%6:i32 = zext %5
%7 = eq %6, 0:i32
%8 = ult %4, 245:i32
%9:i32 = zext %8
%10 = eq %9, 0:i32
pc %3 1:i1
pc %7 1:i1
pc %10 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = eq %0, 0:i32
%2:i32 = zext %1
%3 = shl %2, 2:i32
%4:i32 = var
%5 = ne %4, 0:i32
%6:i32 = var
%7 = ult -65:i32, %6
%8:i32 = zext %7
%9 = eq %8, 0:i32
%10 = ult %6, 245:i32
%11:i32 = zext %10
%12 = eq %11, 0:i32
pc %5 1:i1
pc %9 1:i1
pc %12 1:i1
infer %3


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 16:i32
%2:i32 = var
%3 = eq %2, 0:i32
%4:i32 = zext %3
%5 = shl %4, 2:i32
%6 = add %1, %5
%7:i32 = var
%8 = ne %7, 0:i32
%9:i32 = var
%10 = ult -65:i32, %9
%11:i32 = zext %10
%12 = eq %11, 0:i32
%13 = ult %9, 245:i32
%14:i32 = zext %13
%15 = eq %14, 0:i32
pc %8 1:i1
pc %12 1:i1
pc %15 1:i1
infer %6


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = add %2, 11:i32 (hasExternalUses)
%4 = and %3, -8:i32 (hasExternalUses)
%5 = block 2
%6:i32 = var
%7 = phi %5, %6, %4
%8 = phi %1, %4, %7
%9 = sub %0, %8
%10 = block 2
%11 = block 2
%12:i32 = var
%13 = ne %12, 0:i32
blockpc %11 0 %13 1:i1
%14 = eq %12, 0:i32
blockpc %11 1 %14 1:i1
%15 = block 2
%16:i32 = var
blockpc %15 0 %16 1:i1
%17:i32 = var
blockpc %15 1 %17 1:i1
%18:i32 = var
%19:i32 = var
%20 = phi %15, %18, %19
%21 = phi %11, %20, 0:i32
%22 = block 2
%23:i32 = var
blockpc %22 0 %23 1:i1
%24:i32 = var
blockpc %22 1 %24 1:i1
%25:i32 = var
%26:i32 = var
%27 = phi %22, %25, %26
%28 = phi %11, %27, 0:i32
%29 = or %21, %28
%30 = ne %29, 0:i32
blockpc %10 0 %30 1:i1
%31:i32 = var
blockpc %10 1 %31 1:i1
%32 = phi %10, %28, 0:i32
%33 = block 2
%34:i32 = var
blockpc %33 0 %34 1:i1
%35:i32 = var
blockpc %33 1 %35 1:i1
%36:i32 = var
%37:i32 = var
%38 = phi %33, %36, %37
%39 = phi %1, %32, %38
%40 = ne %39, 0:i32
%41:i32 = var
%42:i32 = var
%43:i32 = var
pc %40 1:i1
pc %41 1:i1
pc %42 1:i1
pc %43 1:i1
infer %9


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = and %4, -8:i32
%6:i32 = var
%7 = add %6, 11:i32 (hasExternalUses)
%8 = and %7, -8:i32 (hasExternalUses)
%9 = sub %5, %8 (hasExternalUses)
%10 = phi %2, %3, %9
%11 = sub 0:i32, %8 (hasExternalUses)
%12 = phi %1, %10, %11
%13 = block 2
%14:i32 = var
%15:i32 = var
%16 = and %15, -8:i32
%17 = block 2
%18:i32 = var
%19 = phi %17, %18, %8
%20 = sub %16, %19 (hasExternalUses)
%21 = phi %13, %14, %20
%22 = phi %0, %12, %21
%23:i32 = var
%24 = phi %0, %8, %19
%25 = sub %23, %24
%26 = ult %22, %25
%27:i32 = var
%28 = ne %27, 0:i32
blockpc %1 0 %28 1:i1
%29:i32 = var
blockpc %1 1 %29 1:i1
%30:i32 = var
blockpc %2 0 %30 1:i1
%31:i32 = var
blockpc %2 1 %31 1:i1
%32:i32 = var
blockpc %13 0 %32 1:i1
%33:i32 = var
blockpc %13 1 %33 1:i1
%34:i32 = var
%35:i32 = var
%36:i32 = var
%37:i32 = var
pc %34 1:i1
pc %35 1:i1
pc %36 1:i1
pc %37 1:i1
infer %26


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4:i32 = var
%5:i32 = var
%6 = phi %3, %4, %5
%7 = phi %2, %6, 0:i32
%8 = phi %1, %7, 0:i32
%9 = block 2
%10:i32 = var
%11:i32 = var
%12 = phi %9, %10, %11
%13 = phi %0, %8, %12
%14:i32 = var
%15 = add %14, 11:i32 (hasExternalUses)
%16 = and %15, -8:i32 (hasExternalUses)
%17 = block 2
%18:i32 = var
%19 = phi %17, %18, %16
%20 = phi %0, %16, %19
%21 = add %13, %20
%22:i32 = var
%23 = ne %22, 0:i32
blockpc %2 0 %23 1:i1
%24 = eq %22, 0:i32
blockpc %2 1 %24 1:i1
%25 = block 2
%26:i32 = var
%27:i32 = zext %26
%28:i32 = var
%29:i32 = zext %28
%30 = or %27, %29
%31 = eq %30, 0:i32
blockpc %25 0 %31 1:i1
%32:i32 = var
blockpc %25 1 %32 1:i1
%33:i32 = var
%34:i32 = var
%35 = phi %25, %33, %34
%36 = phi %2, %35, 0:i32
%37 = or %36, %7
%38 = ne %37, 0:i32
blockpc %1 0 %38 1:i1
%39:i32 = var
blockpc %1 1 %39 1:i1
%40:i32 = var
blockpc %3 0 %40 1:i1
%41:i32 = var
blockpc %3 1 %41 1:i1
%42:i32 = var
blockpc %9 0 %42 1:i1
%43:i32 = var
blockpc %9 1 %43 1:i1
%44:i32 = var
%45:i32 = var
%46:i32 = var
%47:i32 = var
%48:i32 = var
pc %44 1:i1
pc %45 1:i1
pc %46 1:i1
pc %47 1:i1
pc %48 1:i1
infer %21


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4:i32 = var
%5:i32 = var
%6 = phi %3, %4, %5
%7 = phi %2, %6, 0:i32
%8 = phi %1, %7, 0:i32
%9 = block 2
%10:i32 = var
%11:i32 = var
%12 = phi %9, %10, %11
%13 = phi %0, %8, %12
%14:i32 = var
%15 = add %14, 11:i32 (hasExternalUses)
%16 = and %15, -8:i32 (hasExternalUses)
%17 = block 2
%18:i32 = var
%19 = phi %17, %18, %16
%20 = phi %0, %16, %19
%21 = add %13, %20 (hasExternalUses)
%22 = ule %21, %13
%23:i32 = var
%24 = ne %23, 0:i32
blockpc %2 0 %24 1:i1
%25 = eq %23, 0:i32
blockpc %2 1 %25 1:i1
%26 = block 2
%27:i32 = var
%28:i32 = zext %27
%29:i32 = var
%30:i32 = zext %29
%31 = or %28, %30
%32 = eq %31, 0:i32
blockpc %26 0 %32 1:i1
%33:i32 = var
blockpc %26 1 %33 1:i1
%34:i32 = var
%35:i32 = var
%36 = phi %26, %34, %35
%37 = phi %2, %36, 0:i32
%38 = or %37, %7
%39 = ne %38, 0:i32
blockpc %1 0 %39 1:i1
%40:i32 = var
blockpc %1 1 %40 1:i1
%41:i32 = var
blockpc %3 0 %41 1:i1
%42:i32 = var
blockpc %3 1 %42 1:i1
%43:i32 = var
blockpc %9 0 %43 1:i1
%44:i32 = var
blockpc %9 1 %44 1:i1
%45:i32 = var
%46:i32 = var
%47:i32 = var
%48:i32 = var
%49:i32 = var
pc %45 1:i1
pc %46 1:i1
pc %47 1:i1
pc %48 1:i1
pc %49 1:i1
infer %22


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2 = block 2
%3 = block 2
%4 = block 2
%5:i32 = var
%6:i32 = var
%7 = phi %4, %5, %6
%8 = phi %3, %7, 0:i32
%9 = phi %2, %8, 0:i32
%10 = block 2
%11:i32 = var
%12:i32 = var
%13 = phi %10, %11, %12
%14 = phi %1, %9, %13
%15 = eq %0, %14
%16:i32 = var
%17 = ne %16, 0:i32
blockpc %3 0 %17 1:i1
%18 = eq %16, 0:i32
blockpc %3 1 %18 1:i1
%19 = block 2
%20:i32 = var
%21:i32 = zext %20
%22:i32 = var
%23:i32 = zext %22
%24 = or %21, %23
%25 = eq %24, 0:i32
blockpc %19 0 %25 1:i1
%26:i32 = zext %25
%27 = eq %26, 0:i32
blockpc %19 1 %27 1:i1
%28:i32 = var
%29:i32 = var
%30 = phi %19, %28, %29
%31 = phi %3, %30, 0:i32
%32 = or %31, %8
%33 = ne %32, 0:i32
blockpc %2 0 %33 1:i1
%34:i32 = var
blockpc %2 1 %34 1:i1
%35:i32 = var
blockpc %4 0 %35 1:i1
%36:i32 = var
blockpc %4 1 %36 1:i1
%37:i32 = var
blockpc %10 0 %37 1:i1
%38:i32 = var
blockpc %10 1 %38 1:i1
%39:i32 = var
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
pc %39 1:i1
pc %40 1:i1
pc %41 1:i1
pc %42 1:i1
pc %43 1:i1
infer %15


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4:i32 = var
%5:i32 = var
%6 = phi %3, %4, %5
%7 = phi %2, %6, 0:i32
%8 = phi %1, %7, 0:i32
%9 = block 2
%10:i32 = var
%11:i32 = var
%12 = phi %9, %10, %11
%13 = phi %0, %8, %12
%14 = add %13, 20:i32
%15:i32 = var
%16 = ne %15, 0:i32
blockpc %2 0 %16 1:i1
%17 = eq %15, 0:i32
blockpc %2 1 %17 1:i1
%18 = block 2
%19:i32 = var
%20:i32 = zext %19
%21:i32 = var
%22:i32 = zext %21
%23 = or %20, %22
%24 = eq %23, 0:i32
blockpc %18 0 %24 1:i1
%25:i32 = zext %24
%26 = eq %25, 0:i32
blockpc %18 1 %26 1:i1
%27:i32 = var
%28:i32 = var
%29 = phi %18, %27, %28
%30 = phi %2, %29, 0:i32
%31 = or %30, %7
%32 = ne %31, 0:i32
blockpc %1 0 %32 1:i1
%33:i32 = var
blockpc %1 1 %33 1:i1
%34:i32 = var
blockpc %3 0 %34 1:i1
%35:i32 = var
blockpc %3 1 %35 1:i1
%36:i32 = var
blockpc %9 0 %36 1:i1
%37:i32 = var
blockpc %9 1 %37 1:i1
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
pc %38 1:i1
pc %39 1:i1
pc %40 1:i1
pc %41 1:i1
pc %42 1:i1
pc %43 1:i1
infer %14


; start LHS (in $6)
%0:i32 = var
%1 = eq %0, 0:i32
%2:i32 = var
%3 = block 2
%4 = block 2
%5 = block 2
%6:i32 = var
%7 = ne %6, 0:i32
blockpc %5 0 %7 1:i1
%8 = eq %6, 0:i32
blockpc %5 1 %8 1:i1
%9 = block 2
%10:i32 = var
blockpc %9 0 %10 1:i1
%11:i32 = var
blockpc %9 1 %11 1:i1
%12:i32 = var
%13:i32 = var
%14 = phi %9, %12, %13
%15 = phi %5, %14, 0:i32
%16 = block 2
%17:i32 = var
blockpc %16 0 %17 1:i1
%18:i32 = var
blockpc %16 1 %18 1:i1
%19:i32 = var
%20:i32 = var
%21 = phi %16, %19, %20
%22 = phi %5, %21, 0:i32
%23 = or %15, %22
%24 = ne %23, 0:i32
blockpc %4 0 %24 1:i1
%25:i32 = var
blockpc %4 1 %25 1:i1
%26 = phi %4, %22, 0:i32
%27 = block 2
%28:i32 = var
blockpc %27 0 %28 1:i1
%29:i32 = var
blockpc %27 1 %29 1:i1
%30:i32 = var
%31:i32 = var
%32 = phi %27, %30, %31
%33 = phi %3, %26, %32
%34 = eq %2, %33
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
pc %34 1:i1
pc %35 1:i1
pc %36 1:i1
pc %37 1:i1
pc %38 1:i1
pc %39 1:i1
infer %1


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4:i32 = var
%5:i32 = var
%6 = phi %3, %4, %5
%7 = phi %2, %6, 0:i32
%8 = phi %1, %7, 0:i32
%9 = block 2
%10:i32 = var
%11:i32 = var
%12 = phi %9, %10, %11
%13 = phi %0, %8, %12
%14 = add %13, 16:i32
%15:i32 = var
%16 = ne %15, 0:i32
blockpc %2 0 %16 1:i1
%17 = eq %15, 0:i32
blockpc %2 1 %17 1:i1
%18 = block 2
%19:i32 = var
%20:i32 = zext %19
%21:i32 = var
%22:i32 = zext %21
%23 = or %20, %22
%24 = eq %23, 0:i32
blockpc %18 0 %24 1:i1
%25:i32 = zext %24
%26 = eq %25, 0:i32
blockpc %18 1 %26 1:i1
%27:i32 = var
%28:i32 = var
%29 = phi %18, %27, %28
%30 = phi %2, %29, 0:i32
%31 = or %30, %7
%32 = ne %31, 0:i32
blockpc %1 0 %32 1:i1
%33:i32 = var
blockpc %1 1 %33 1:i1
%34:i32 = var
blockpc %3 0 %34 1:i1
%35:i32 = var
blockpc %3 1 %35 1:i1
%36:i32 = var
blockpc %9 0 %36 1:i1
%37:i32 = var
blockpc %9 1 %37 1:i1
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = var
pc %38 1:i1
pc %39 1:i1
pc %40 1:i1
pc %41 1:i1
pc %42 1:i1
pc %43 1:i1
pc %44 1:i1
infer %14


; start LHS (in $6)
%0:i32 = var
%1 = eq %0, 0:i32
%2:i32 = var
%3 = eq %2, 0:i32
%4:i32 = var
%5 = block 2
%6 = block 2
%7 = block 2
%8:i32 = var
%9 = ne %8, 0:i32
blockpc %7 0 %9 1:i1
%10 = eq %8, 0:i32
blockpc %7 1 %10 1:i1
%11 = block 2
%12:i32 = var
blockpc %11 0 %12 1:i1
%13:i32 = var
blockpc %11 1 %13 1:i1
%14:i32 = var
%15:i32 = var
%16 = phi %11, %14, %15
%17 = phi %7, %16, 0:i32
%18 = block 2
%19:i32 = var
blockpc %18 0 %19 1:i1
%20:i32 = var
blockpc %18 1 %20 1:i1
%21:i32 = var
%22:i32 = var
%23 = phi %18, %21, %22
%24 = phi %7, %23, 0:i32
%25 = or %17, %24
%26 = ne %25, 0:i32
blockpc %6 0 %26 1:i1
%27:i32 = var
blockpc %6 1 %27 1:i1
%28 = phi %6, %24, 0:i32
%29 = block 2
%30:i32 = var
blockpc %29 0 %30 1:i1
%31:i32 = var
blockpc %29 1 %31 1:i1
%32:i32 = var
%33:i32 = var
%34 = phi %29, %32, %33
%35 = phi %5, %28, %34
%36 = eq %4, %35
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = var
pc %3 1:i1
pc %36 1:i1
pc %37 1:i1
pc %38 1:i1
pc %39 1:i1
pc %40 1:i1
pc %41 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 20:i32
%2:i32 = var
%3 = block 2
%4 = block 2
%5 = block 2
%6:i32 = var
%7 = ne %6, 0:i32
blockpc %5 0 %7 1:i1
%8 = eq %6, 0:i32
blockpc %5 1 %8 1:i1
%9 = block 2
%10:i32 = var
blockpc %9 0 %10 1:i1
%11:i32 = var
blockpc %9 1 %11 1:i1
%12:i32 = var
%13:i32 = var
%14 = phi %9, %12, %13
%15 = phi %5, %14, 0:i32
%16 = block 2
%17:i32 = var
blockpc %16 0 %17 1:i1
%18:i32 = var
blockpc %16 1 %18 1:i1
%19:i32 = var
%20:i32 = var
%21 = phi %16, %19, %20
%22 = phi %5, %21, 0:i32
%23 = or %15, %22
%24 = ne %23, 0:i32
blockpc %4 0 %24 1:i1
%25:i32 = var
blockpc %4 1 %25 1:i1
%26 = phi %4, %22, 0:i32
%27 = block 2
%28:i32 = var
blockpc %27 0 %28 1:i1
%29:i32 = var
blockpc %27 1 %29 1:i1
%30:i32 = var
%31:i32 = var
%32 = phi %27, %30, %31
%33 = phi %3, %26, %32
%34 = eq %2, %33
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
pc %34 1:i1
pc %35 1:i1
pc %36 1:i1
pc %37 1:i1
pc %38 1:i1
pc %39 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 16:i32
%2:i32 = var
%3 = block 2
%4 = block 2
%5 = block 2
%6:i32 = var
%7 = ne %6, 0:i32
blockpc %5 0 %7 1:i1
%8 = eq %6, 0:i32
blockpc %5 1 %8 1:i1
%9 = block 2
%10:i32 = var
blockpc %9 0 %10 1:i1
%11:i32 = var
blockpc %9 1 %11 1:i1
%12:i32 = var
%13:i32 = var
%14 = phi %9, %12, %13
%15 = phi %5, %14, 0:i32
%16 = block 2
%17:i32 = var
blockpc %16 0 %17 1:i1
%18:i32 = var
blockpc %16 1 %18 1:i1
%19:i32 = var
%20:i32 = var
%21 = phi %16, %19, %20
%22 = phi %5, %21, 0:i32
%23 = or %15, %22
%24 = ne %23, 0:i32
blockpc %4 0 %24 1:i1
%25:i32 = var
blockpc %4 1 %25 1:i1
%26 = phi %4, %22, 0:i32
%27 = block 2
%28:i32 = var
blockpc %27 0 %28 1:i1
%29:i32 = var
blockpc %27 1 %29 1:i1
%30:i32 = var
%31:i32 = var
%32 = phi %27, %30, %31
%33 = phi %3, %26, %32
%34 = eq %2, %33
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
pc %34 1:i1
pc %35 1:i1
pc %36 1:i1
pc %37 1:i1
pc %38 1:i1
pc %39 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = shl %0, 2:i32
%2:i32 = var
%3 = ne %2, 0:i32
%4 = block 2
%5 = block 2
%6:i32 = var
%7 = ne %6, 0:i32
blockpc %5 0 %7 1:i1
%8 = eq %6, 0:i32
blockpc %5 1 %8 1:i1
%9 = block 2
%10:i32 = var
%11 = and %10, -8:i32
%12:i32 = var
%13 = add %12, 11:i32
%14 = and %13, -8:i32
%15 = sub %11, %14
%16:i32 = var
%17 = ult %15, %16
blockpc %9 0 %17 1:i1
%18:i32 = zext %17
%19 = eq %18, 0:i32
blockpc %9 1 %19 1:i1
%20 = phi %9, %16, %15
%21 = sub 0:i32, %14
%22 = phi %5, %20, %21
%23 = block 2
%24:i32 = var
%25 = and %24, -8:i32
%26 = block 2
%27:i32 = var
%28 = phi %26, %27, %14
%29 = sub %25, %28
%30:i32 = var
%31 = ult %29, %30
blockpc %23 0 %31 1:i1
%32:i32 = var
blockpc %23 1 %32 1:i1
%33 = phi %23, %30, %29
%34 = phi %4, %22, %33
%35:i32 = var
%36 = ult %34, %35
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = var
pc %3 1:i1
pc %36 1:i1
pc %37 1:i1
pc %38 1:i1
pc %39 1:i1
pc %40 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = shl %0, 2:i32
%2 = add %1, 4260:i32
%3:i32 = var
%4 = ne %3, 0:i32
%5 = block 2
%6 = block 2
%7:i32 = var
%8 = ne %7, 0:i32
blockpc %6 0 %8 1:i1
%9 = eq %7, 0:i32
blockpc %6 1 %9 1:i1
%10 = block 2
%11:i32 = var
%12 = and %11, -8:i32
%13:i32 = var
%14 = add %13, 11:i32
%15 = and %14, -8:i32
%16 = sub %12, %15
%17:i32 = var
%18 = ult %16, %17
blockpc %10 0 %18 1:i1
%19:i32 = zext %18
%20 = eq %19, 0:i32
blockpc %10 1 %20 1:i1
%21 = phi %10, %17, %16
%22 = sub 0:i32, %15
%23 = phi %6, %21, %22
%24 = block 2
%25:i32 = var
%26 = and %25, -8:i32
%27 = block 2
%28:i32 = var
%29 = phi %27, %28, %15
%30 = sub %26, %29
%31:i32 = var
%32 = ult %30, %31
blockpc %24 0 %32 1:i1
%33:i32 = var
blockpc %24 1 %33 1:i1
%34 = phi %24, %31, %30
%35 = phi %5, %23, %34
%36:i32 = var
%37 = ult %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = var
pc %4 1:i1
pc %37 1:i1
pc %38 1:i1
pc %39 1:i1
pc %40 1:i1
pc %41 1:i1
infer %2


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4:i32 = var
%5:i32 = var
%6 = phi %3, %4, %5
%7 = phi %2, %6, 0:i32
%8 = phi %1, %7, 0:i32
%9 = block 2
%10:i32 = var
%11:i32 = var
%12 = phi %9, %10, %11
%13 = phi %0, %8, %12
%14:i32 = var
%15 = eq %13, %14
%16:i32 = var
%17 = ne %16, 0:i32
blockpc %2 0 %17 1:i1
%18 = eq %16, 0:i32
blockpc %2 1 %18 1:i1
%19 = block 2
%20:i32 = var
%21:i32 = zext %20
%22:i32 = var
%23:i32 = zext %22
%24 = or %21, %23
%25 = eq %24, 0:i32
blockpc %19 0 %25 1:i1
%26:i32 = zext %25
%27 = eq %26, 0:i32
blockpc %19 1 %27 1:i1
%28:i32 = var
%29:i32 = var
%30 = phi %19, %28, %29
%31 = phi %2, %30, 0:i32
%32 = or %31, %7
%33 = ne %32, 0:i32
blockpc %1 0 %33 1:i1
%34:i32 = var
blockpc %1 1 %34 1:i1
%35:i32 = var
blockpc %3 0 %35 1:i1
%36:i32 = var
blockpc %3 1 %36 1:i1
%37:i32 = var
blockpc %9 0 %37 1:i1
%38:i32 = var
blockpc %9 1 %38 1:i1
%39:i32 = var
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = var
pc %39 1:i1
pc %40 1:i1
pc %41 1:i1
pc %42 1:i1
pc %43 1:i1
pc %44 1:i1
infer %15


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2:i32 = var
%3:i32 = var
%4 = phi %1, %2, %3
%5 = phi %0, 0:i32, %4
%6 = eq %5, 0:i32
%7 = block 2
%8 = block 2
%9 = block 2
%10:i32 = var
blockpc %9 0 %10 1:i1
%11:i32 = var
blockpc %9 1 %11 1:i1
%12 = block 2
%13:i32 = var
blockpc %12 0 %13 1:i1
%14:i32 = var
blockpc %12 1 %14 1:i1
%15:i32 = var
%16:i32 = var
%17 = phi %12, %15, %16
%18 = phi %9, %17, 0:i32
%19 = block 2
%20:i32 = var
blockpc %19 0 %20 1:i1
%21:i32 = var
blockpc %19 1 %21 1:i1
%22:i32 = var
%23:i32 = var
%24 = phi %19, %22, %23
%25 = phi %9, %24, 0:i32
%26 = or %18, %25
%27 = ne %26, 0:i32
blockpc %8 0 %27 1:i1
%28:i32 = var
blockpc %8 1 %28 1:i1
%29 = phi %8, %25, 0:i32
%30 = block 2
%31:i32 = var
blockpc %30 0 %31 1:i1
%32:i32 = var
blockpc %30 1 %32 1:i1
%33:i32 = var
%34:i32 = var
%35 = phi %30, %33, %34
%36 = phi %7, %29, %35
%37 = eq %3, %36
blockpc %1 0 %37 1:i1
%38:i32 = var
blockpc %1 1 %38 1:i1
%39:i32 = var
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = var
%45:i32 = var
pc %39 1:i1
pc %40 1:i1
pc %41 1:i1
pc %42 1:i1
pc %43 1:i1
pc %44 1:i1
pc %45 1:i1
infer %6


; start LHS (in $6)
%0:i32 = var
%1 = shl 1:i32, %0
%2 = block 2
%3 = block 2
%4:i32 = var
%5 = block 2
%6 = block 2
%7:i32 = var
%8 = ne %7, 0:i32
blockpc %6 0 %8 1:i1
%9 = eq %7, 0:i32
blockpc %6 1 %9 1:i1
%10 = block 2
%11:i32 = var
blockpc %10 0 %11 1:i1
%12:i32 = var
blockpc %10 1 %12 1:i1
%13 = block 2
%14:i32 = var
blockpc %13 0 %14 1:i1
%15:i32 = var
blockpc %13 1 %15 1:i1
%16:i32 = var
%17:i32 = var
%18 = phi %13, %16, %17
%19 = phi %10, %18, 0:i32
%20 = phi %6, %19, 0:i32
%21 = block 2
%22:i32 = var
%23:i32 = var
%24 = ult %22, %23
blockpc %21 0 %24 1:i1
%25:i32 = var
blockpc %21 1 %25 1:i1
%26:i32 = var
%27:i32 = var
%28 = phi %21, %26, %27
%29 = phi %5, %20, %28
%30 = eq %4, %29
blockpc %3 0 %30 1:i1
%31:i32 = var
blockpc %3 1 %31 1:i1
%32:i32 = var
%33 = phi %3, %32, %4
%34 = phi %2, 0:i32, %33
%35 = eq %34, 0:i32
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = var
%42:i32 = var
pc %35 1:i1
pc %36 1:i1
pc %37 1:i1
pc %38 1:i1
pc %39 1:i1
pc %40 1:i1
pc %41 1:i1
pc %42 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = shl 1:i32, %0
%2 = xor %1, -1:i32
%3 = block 2
%4 = block 2
%5:i32 = var
%6 = block 2
%7 = block 2
%8:i32 = var
%9 = ne %8, 0:i32
blockpc %7 0 %9 1:i1
%10 = eq %8, 0:i32
blockpc %7 1 %10 1:i1
%11 = block 2
%12:i32 = var
blockpc %11 0 %12 1:i1
%13:i32 = var
blockpc %11 1 %13 1:i1
%14 = block 2
%15:i32 = var
blockpc %14 0 %15 1:i1
%16:i32 = var
blockpc %14 1 %16 1:i1
%17:i32 = var
%18:i32 = var
%19 = phi %14, %17, %18
%20 = phi %11, %19, 0:i32
%21 = phi %7, %20, 0:i32
%22 = block 2
%23:i32 = var
%24:i32 = var
%25 = ult %23, %24
blockpc %22 0 %25 1:i1
%26:i32 = var
blockpc %22 1 %26 1:i1
%27:i32 = var
%28:i32 = var
%29 = phi %22, %27, %28
%30 = phi %6, %21, %29
%31 = eq %5, %30
blockpc %4 0 %31 1:i1
%32:i32 = var
blockpc %4 1 %32 1:i1
%33:i32 = var
%34 = phi %4, %33, %5
%35 = phi %3, 0:i32, %34
%36 = eq %35, 0:i32
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
pc %36 1:i1
pc %37 1:i1
pc %38 1:i1
pc %39 1:i1
pc %40 1:i1
pc %41 1:i1
pc %42 1:i1
pc %43 1:i1
infer %2


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = block 2
%3:i32 = var
%4 = phi %2, %3, %1
%5 = phi %0, %1, %4
%6:i32 = var
%7 = shl 1:i32, %6
%8 = xor %7, -1:i32
%9 = and %5, %8
%10 = block 2
%11 = block 2
%12:i32 = var
%13 = block 2
%14:i32 = var
%15 = ne %14, 0:i32
blockpc %13 0 %15 1:i1
%16 = eq %14, 0:i32
blockpc %13 1 %16 1:i1
%17 = block 2
%18:i32 = var
blockpc %17 0 %18 1:i1
%19:i32 = var
blockpc %17 1 %19 1:i1
%20 = block 2
%21:i32 = var
blockpc %20 0 %21 1:i1
%22:i32 = var
blockpc %20 1 %22 1:i1
%23:i32 = var
%24:i32 = var
%25 = phi %20, %23, %24
%26 = phi %17, %25, 0:i32
%27 = phi %13, %26, 0:i32
%28 = block 2
%29:i32 = var
blockpc %28 0 %29 1:i1
%30:i32 = var
blockpc %28 1 %30 1:i1
%31:i32 = var
%32:i32 = var
%33 = phi %28, %31, %32
%34 = phi %0, %27, %33
%35 = eq %12, %34
blockpc %11 0 %35 1:i1
%36:i32 = var
blockpc %11 1 %36 1:i1
%37:i32 = var
%38 = phi %11, %37, %12
%39 = phi %10, 0:i32, %38
%40 = eq %39, 0:i32
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = var
%45:i32 = var
%46:i32 = var
%47:i32 = var
pc %40 1:i1
pc %41 1:i1
pc %42 1:i1
pc %43 1:i1
pc %44 1:i1
pc %45 1:i1
pc %46 1:i1
pc %47 1:i1
infer %9


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 16:i32
%2 = block 2
%3 = block 2
%4 = block 2
%5:i32 = var
blockpc %4 0 %5 1:i1
%6:i32 = var
blockpc %4 1 %6 1:i1
%7 = block 2
%8:i32 = var
blockpc %7 0 %8 1:i1
%9:i32 = var
blockpc %7 1 %9 1:i1
%10:i32 = var
%11:i32 = var
%12 = phi %7, %10, %11
%13 = phi %4, %12, 0:i32
%14 = block 2
%15:i32 = var
blockpc %14 0 %15 1:i1
%16:i32 = var
blockpc %14 1 %16 1:i1
%17:i32 = var
%18:i32 = var
%19 = phi %14, %17, %18
%20 = phi %4, %19, 0:i32
%21 = or %13, %20
%22 = ne %21, 0:i32
blockpc %3 0 %22 1:i1
%23:i32 = var
blockpc %3 1 %23 1:i1
%24 = phi %3, %20, 0:i32
%25 = block 2
%26:i32 = var
blockpc %25 0 %26 1:i1
%27:i32 = var
blockpc %25 1 %27 1:i1
%28:i32 = var
%29:i32 = var
%30 = phi %25, %28, %29
%31 = phi %2, %24, %30
%32:i32 = var
%33 = eq %31, %32
%34:i32 = zext %33
%35 = eq %34, 0:i32
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = var
pc %35 1:i1
pc %36 1:i1
pc %37 1:i1
pc %38 1:i1
pc %39 1:i1
pc %40 1:i1
pc %41 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2 = block 2
%3 = block 2
%4 = block 2
%5:i32 = var
%6:i32 = var
%7 = phi %4, %5, %6
%8 = phi %3, %7, 0:i32
%9 = phi %2, %8, 0:i32
%10 = block 2
%11:i32 = var
%12:i32 = var
%13 = phi %10, %11, %12
%14 = phi %1, %9, %13
%15 = ne %0, %14
%16:i32 = var
%17 = ne %16, 0:i32
blockpc %3 0 %17 1:i1
%18 = eq %16, 0:i32
blockpc %3 1 %18 1:i1
%19 = block 2
%20:i32 = var
%21:i32 = zext %20
%22:i32 = var
%23:i32 = zext %22
%24 = or %21, %23
%25 = eq %24, 0:i32
blockpc %19 0 %25 1:i1
%26:i32 = zext %25
%27 = eq %26, 0:i32
blockpc %19 1 %27 1:i1
%28:i32 = var
%29:i32 = var
%30 = phi %19, %28, %29
%31 = phi %3, %30, 0:i32
%32 = or %31, %8
%33 = ne %32, 0:i32
blockpc %2 0 %33 1:i1
%34:i32 = var
blockpc %2 1 %34 1:i1
%35:i32 = var
blockpc %4 0 %35 1:i1
%36:i32 = var
blockpc %4 1 %36 1:i1
%37:i32 = var
blockpc %10 0 %37 1:i1
%38:i32 = var
blockpc %10 1 %38 1:i1
%39:i32 = var
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = var
%45:i32 = var
pc %39 1:i1
pc %40 1:i1
pc %41 1:i1
pc %42 1:i1
pc %43 1:i1
pc %44 1:i1
pc %45 1:i1
infer %15


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2 = block 2
%3 = block 2
%4 = block 2
%5:i32 = var
%6:i32 = var
%7 = phi %4, %5, %6
%8 = phi %3, %7, 0:i32
%9 = phi %2, %8, 0:i32
%10 = block 2
%11:i32 = var
%12:i32 = var
%13 = phi %10, %11, %12
%14 = phi %1, %9, %13
%15 = ne %0, %14
%16:i32 = zext %15
%17 = shl %16, 2:i32
%18:i32 = var
%19 = ne %18, 0:i32
blockpc %3 0 %19 1:i1
%20 = eq %18, 0:i32
blockpc %3 1 %20 1:i1
%21 = block 2
%22:i32 = var
%23:i32 = zext %22
%24:i32 = var
%25:i32 = zext %24
%26 = or %23, %25
%27 = eq %26, 0:i32
blockpc %21 0 %27 1:i1
%28:i32 = var
blockpc %21 1 %28 1:i1
%29:i32 = var
%30:i32 = var
%31 = phi %21, %29, %30
%32 = phi %3, %31, 0:i32
%33 = or %32, %8
%34 = ne %33, 0:i32
blockpc %2 0 %34 1:i1
%35:i32 = var
blockpc %2 1 %35 1:i1
%36:i32 = var
blockpc %4 0 %36 1:i1
%37:i32 = var
blockpc %4 1 %37 1:i1
%38:i32 = var
blockpc %10 0 %38 1:i1
%39:i32 = var
blockpc %10 1 %39 1:i1
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = var
%45:i32 = var
%46:i32 = var
pc %40 1:i1
pc %41 1:i1
pc %42 1:i1
pc %43 1:i1
pc %44 1:i1
pc %45 1:i1
pc %46 1:i1
infer %17


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 16:i32
%2:i32 = var
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7:i32 = var
%8:i32 = var
%9 = phi %6, %7, %8
%10 = phi %5, %9, 0:i32
%11 = phi %4, %10, 0:i32
%12 = block 2
%13:i32 = var
%14:i32 = var
%15 = phi %12, %13, %14
%16 = phi %3, %11, %15
%17 = ne %2, %16
%18:i32 = zext %17
%19 = shl %18, 2:i32
%20 = add %1, %19
%21:i32 = var
%22 = ne %21, 0:i32
blockpc %5 0 %22 1:i1
%23 = eq %21, 0:i32
blockpc %5 1 %23 1:i1
%24 = block 2
%25:i32 = var
%26:i32 = zext %25
%27:i32 = var
%28:i32 = zext %27
%29 = or %26, %28
%30 = eq %29, 0:i32
blockpc %24 0 %30 1:i1
%31:i32 = var
blockpc %24 1 %31 1:i1
%32:i32 = var
%33:i32 = var
%34 = phi %24, %32, %33
%35 = phi %5, %34, 0:i32
%36 = or %35, %10
%37 = ne %36, 0:i32
blockpc %4 0 %37 1:i1
%38:i32 = var
blockpc %4 1 %38 1:i1
%39:i32 = var
blockpc %6 0 %39 1:i1
%40:i32 = var
blockpc %6 1 %40 1:i1
%41:i32 = var
blockpc %12 0 %41 1:i1
%42:i32 = var
blockpc %12 1 %42 1:i1
%43:i32 = var
%44:i32 = var
%45:i32 = var
%46:i32 = var
%47:i32 = var
%48:i32 = var
%49:i32 = var
pc %43 1:i1
pc %44 1:i1
pc %45 1:i1
pc %46 1:i1
pc %47 1:i1
pc %48 1:i1
pc %49 1:i1
infer %20


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2:i32 = var
%3:i32 = var
%4 = phi %1, %2, %3
%5 = phi %0, 0:i32, %4
%6 = eq %5, 0:i32
%7 = block 2
%8 = block 2
%9 = block 2
%10:i32 = var
blockpc %9 0 %10 1:i1
%11:i32 = var
blockpc %9 1 %11 1:i1
%12 = block 2
%13:i32 = var
blockpc %12 0 %13 1:i1
%14:i32 = var
blockpc %12 1 %14 1:i1
%15:i32 = var
%16:i32 = var
%17 = phi %12, %15, %16
%18 = phi %9, %17, 0:i32
%19 = block 2
%20:i32 = var
blockpc %19 0 %20 1:i1
%21:i32 = var
blockpc %19 1 %21 1:i1
%22:i32 = var
%23:i32 = var
%24 = phi %19, %22, %23
%25 = phi %9, %24, 0:i32
%26 = or %18, %25
%27 = ne %26, 0:i32
blockpc %8 0 %27 1:i1
%28:i32 = var
blockpc %8 1 %28 1:i1
%29 = phi %8, %25, 0:i32
%30 = block 2
%31:i32 = var
blockpc %30 0 %31 1:i1
%32:i32 = var
blockpc %30 1 %32 1:i1
%33:i32 = var
%34:i32 = var
%35 = phi %30, %33, %34
%36 = phi %7, %29, %35
%37 = eq %3, %36
blockpc %1 0 %37 1:i1
%38:i32 = var
blockpc %1 1 %38 1:i1
%39:i32 = var
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = var
%45:i32 = var
pc %39 1:i1
pc %40 1:i1
pc %41 1:i1
pc %42 1:i1
pc %43 1:i1
pc %44 1:i1
pc %45 1:i1
infer %6


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = and %4, -8:i32
%6:i32 = var
%7 = add %6, 11:i32 (hasExternalUses)
%8 = and %7, -8:i32 (hasExternalUses)
%9 = sub %5, %8 (hasExternalUses)
%10 = phi %2, %3, %9
%11 = sub 0:i32, %8 (hasExternalUses)
%12 = phi %1, %10, %11
%13 = block 2
%14:i32 = var
%15:i32 = var
%16 = and %15, -8:i32
%17 = block 2
%18:i32 = var
%19 = phi %17, %18, %8
%20 = sub %16, %19 (hasExternalUses)
%21 = phi %13, %14, %20
%22 = phi %0, %12, %21
%23 = ult %22, 16:i32
%24:i32 = var
%25 = ne %24, 0:i32
blockpc %1 0 %25 1:i1
%26 = eq %24, 0:i32
blockpc %1 1 %26 1:i1
%27 = ult %9, %3
blockpc %2 0 %27 1:i1
%28:i32 = var
blockpc %2 1 %28 1:i1
%29:i32 = var
blockpc %13 0 %29 1:i1
%30:i32 = var
blockpc %13 1 %30 1:i1
%31:i32 = var
%32:i32 = var
%33:i32 = var
%34:i32 = var
%35:i32 = var
pc %31 1:i1
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
pc %35 1:i1
infer %23


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = and %4, -8:i32
%6:i32 = var
%7 = add %6, 11:i32 (hasExternalUses)
%8 = and %7, -8:i32 (hasExternalUses)
%9 = sub %5, %8 (hasExternalUses)
%10 = phi %2, %3, %9
%11 = sub 0:i32, %8 (hasExternalUses)
%12 = phi %1, %10, %11
%13 = block 2
%14:i32 = var
%15:i32 = var
%16 = and %15, -8:i32
%17 = block 2
%18:i32 = var
%19 = phi %17, %18, %8
%20 = sub %16, %19 (hasExternalUses)
%21 = phi %13, %14, %20
%22 = phi %0, %12, %21
%23 = phi %0, %8, %19
%24 = add %22, %23
%25:i32 = var
%26 = ne %25, 0:i32
blockpc %1 0 %26 1:i1
%27 = eq %25, 0:i32
blockpc %1 1 %27 1:i1
%28:i32 = var
blockpc %2 0 %28 1:i1
%29:i32 = var
blockpc %2 1 %29 1:i1
%30:i32 = var
blockpc %13 0 %30 1:i1
%31:i32 = var
blockpc %13 1 %31 1:i1
%32:i32 = var
%33:i32 = var
%34:i32 = var
%35:i32 = var
%36:i32 = var
%37:i32 = var
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
pc %35 1:i1
pc %36 1:i1
pc %37 1:i1
infer %24


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = and %4, -8:i32
%6:i32 = var
%7 = add %6, 11:i32 (hasExternalUses)
%8 = and %7, -8:i32 (hasExternalUses)
%9 = sub %5, %8 (hasExternalUses)
%10 = phi %2, %3, %9
%11 = sub 0:i32, %8 (hasExternalUses)
%12 = phi %1, %10, %11
%13 = block 2
%14:i32 = var
%15:i32 = var
%16 = and %15, -8:i32
%17 = block 2
%18:i32 = var
%19 = phi %17, %18, %8
%20 = sub %16, %19 (hasExternalUses)
%21 = phi %13, %14, %20
%22 = phi %0, %12, %21
%23 = phi %0, %8, %19
%24 = add %22, %23 (hasExternalUses)
%25 = or %24, 3:i32
%26:i32 = var
%27 = ne %26, 0:i32
blockpc %1 0 %27 1:i1
%28 = eq %26, 0:i32
blockpc %1 1 %28 1:i1
%29:i32 = var
blockpc %2 0 %29 1:i1
%30:i32 = var
blockpc %2 1 %30 1:i1
%31:i32 = var
blockpc %13 0 %31 1:i1
%32:i32 = var
blockpc %13 1 %32 1:i1
%33:i32 = var
%34:i32 = var
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
pc %33 1:i1
pc %34 1:i1
pc %35 1:i1
pc %36 1:i1
pc %37 1:i1
pc %38 1:i1
infer %25


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4:i32 = var
%5:i32 = var
%6 = phi %3, %4, %5
%7 = phi %2, %6, 0:i32
%8 = phi %1, %7, 0:i32
%9 = block 2
%10:i32 = var
%11:i32 = var
%12 = phi %9, %10, %11
%13 = phi %0, %8, %12
%14:i32 = var
%15:i32 = var
%16 = and %15, -8:i32
%17:i32 = var
%18 = add %17, 11:i32 (hasExternalUses)
%19 = and %18, -8:i32 (hasExternalUses)
%20 = sub %16, %19 (hasExternalUses)
%21 = phi %3, %14, %20
%22 = sub 0:i32, %19 (hasExternalUses)
%23 = phi %2, %21, %22
%24 = block 2
%25:i32 = var
%26:i32 = var
%27 = and %26, -8:i32
%28 = block 2
%29:i32 = var
%30 = phi %28, %29, %19
%31 = sub %27, %30 (hasExternalUses)
%32 = phi %24, %25, %31
%33 = phi %0, %23, %32
%34 = phi %0, %19, %30
%35 = add %33, %34 (hasExternalUses)
%36 = add %13, %35
%37:i32 = var
blockpc %1 0 %37 1:i1
%38:i32 = var
blockpc %1 1 %38 1:i1
%39:i32 = var
blockpc %2 0 %39 1:i1
%40:i32 = var
blockpc %2 1 %40 1:i1
%41:i32 = var
blockpc %3 0 %41 1:i1
%42:i32 = var
blockpc %3 1 %42 1:i1
%43:i32 = var
blockpc %9 0 %43 1:i1
%44:i32 = var
blockpc %9 1 %44 1:i1
blockpc %24 0 %43 1:i1
%45:i32 = var
blockpc %24 1 %45 1:i1
%46:i32 = var
%47:i32 = var
%48:i32 = var
%49:i32 = var
%50:i32 = var
%51:i32 = var
pc %46 1:i1
pc %47 1:i1
pc %48 1:i1
pc %49 1:i1
pc %50 1:i1
pc %51 1:i1
infer %36


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4:i32 = var
%5:i32 = var
%6 = phi %3, %4, %5
%7 = phi %2, %6, 0:i32
%8 = phi %1, %7, 0:i32
%9 = block 2
%10:i32 = var
%11:i32 = var
%12 = phi %9, %10, %11
%13 = phi %0, %8, %12
%14:i32 = var
%15:i32 = var
%16 = and %15, -8:i32
%17:i32 = var
%18 = add %17, 11:i32 (hasExternalUses)
%19 = and %18, -8:i32 (hasExternalUses)
%20 = sub %16, %19 (hasExternalUses)
%21 = phi %3, %14, %20
%22 = sub 0:i32, %19 (hasExternalUses)
%23 = phi %2, %21, %22
%24 = block 2
%25:i32 = var
%26:i32 = var
%27 = and %26, -8:i32
%28 = block 2
%29:i32 = var
%30 = phi %28, %29, %19
%31 = sub %27, %30 (hasExternalUses)
%32 = phi %24, %25, %31
%33 = phi %0, %23, %32
%34 = phi %0, %19, %30
%35 = add %33, %34 (hasExternalUses)
%36 = add %13, %35
%37 = add %36, 4:i32
%38:i32 = var
blockpc %1 0 %38 1:i1
%39:i32 = var
blockpc %1 1 %39 1:i1
%40:i32 = var
blockpc %2 0 %40 1:i1
%41:i32 = var
blockpc %2 1 %41 1:i1
%42:i32 = var
blockpc %3 0 %42 1:i1
%43:i32 = var
blockpc %3 1 %43 1:i1
%44:i32 = var
blockpc %9 0 %44 1:i1
%45:i32 = var
blockpc %9 1 %45 1:i1
blockpc %24 0 %44 1:i1
%46:i32 = var
blockpc %24 1 %46 1:i1
%47:i32 = var
%48:i32 = var
%49:i32 = var
%50:i32 = var
%51:i32 = var
%52:i32 = var
pc %47 1:i1
pc %48 1:i1
pc %49 1:i1
pc %50 1:i1
pc %51 1:i1
pc %52 1:i1
infer %37


; start LHS (in $6)
%0:i32 = var
%1 = or %0, 1:i32
%2 = block 2
%3 = block 2
%4:i32 = var
%5 = ne %4, 0:i32
blockpc %3 0 %5 1:i1
%6 = eq %4, 0:i32
blockpc %3 1 %6 1:i1
%7 = block 2
%8:i32 = var
%9 = and %8, -8:i32
%10:i32 = var
%11 = add %10, 11:i32
%12 = and %11, -8:i32
%13 = sub %9, %12
%14:i32 = var
%15 = ult %13, %14
blockpc %7 0 %15 1:i1
%16:i32 = zext %15
%17 = eq %16, 0:i32
blockpc %7 1 %17 1:i1
%18 = phi %7, %14, %13
%19 = sub 0:i32, %12
%20 = phi %3, %18, %19
%21 = block 2
%22:i32 = var
%23 = and %22, -8:i32
%24 = block 2
%25:i32 = var
%26 = phi %24, %25, %12
%27 = sub %23, %26
%28:i32 = var
%29 = ult %27, %28
blockpc %21 0 %29 1:i1
%30:i32 = var
blockpc %21 1 %30 1:i1
%31 = phi %21, %28, %27
%32 = phi %2, %20, %31
%33 = ult %32, 16:i32
%34:i32 = var
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
pc %33 1:i1
pc %34 1:i1
pc %35 1:i1
pc %36 1:i1
pc %37 1:i1
pc %38 1:i1
infer %1


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = add %1, 11:i32 (hasExternalUses)
%3 = and %2, -8:i32 (hasExternalUses)
%4 = block 2
%5:i32 = var
%6 = phi %4, %5, %3
%7 = phi %0, %3, %6
%8 = or %7, 3:i32
%9 = block 2
%10:i32 = var
%11 = ne %10, 0:i32
blockpc %9 0 %11 1:i1
%12 = eq %10, 0:i32
blockpc %9 1 %12 1:i1
%13 = block 2
%14:i32 = var
%15 = sub %14, %3
%16:i32 = var
%17 = ult %15, %16
blockpc %13 0 %17 1:i1
%18:i32 = zext %17
%19 = eq %18, 0:i32
blockpc %13 1 %19 1:i1
%20 = phi %13, %16, %15
%21 = sub 0:i32, %3
%22 = phi %9, %20, %21
%23 = block 2
%24:i32 = var
%25 = and %24, -8:i32
%26 = sub %25, %6
%27:i32 = var
%28 = ult %26, %27
blockpc %23 0 %28 1:i1
%29:i32 = var
blockpc %23 1 %29 1:i1
%30 = phi %23, %27, %26
%31 = phi %0, %22, %30
%32 = ult %31, 16:i32
%33:i32 = zext %32
%34 = eq %33, 0:i32
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
pc %34 1:i1
pc %35 1:i1
pc %36 1:i1
pc %37 1:i1
pc %38 1:i1
pc %39 1:i1
infer %8


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = and %4, -8:i32
%6:i32 = var
%7 = add %6, 11:i32 (hasExternalUses)
%8 = and %7, -8:i32 (hasExternalUses)
%9 = sub %5, %8 (hasExternalUses)
%10 = phi %2, %3, %9
%11 = sub 0:i32, %8 (hasExternalUses)
%12 = phi %1, %10, %11
%13 = block 2
%14:i32 = var
%15:i32 = var
%16 = and %15, -8:i32
%17 = block 2
%18:i32 = var
%19 = phi %17, %18, %8
%20 = sub %16, %19 (hasExternalUses)
%21 = phi %13, %14, %20
%22 = phi %0, %12, %21
%23 = or %22, 1:i32
%24:i32 = var
%25 = ne %24, 0:i32
blockpc %1 0 %25 1:i1
%26 = eq %24, 0:i32
blockpc %1 1 %26 1:i1
%27 = ult %9, %3
blockpc %2 0 %27 1:i1
%28:i32 = var
blockpc %2 1 %28 1:i1
%29:i32 = var
blockpc %13 0 %29 1:i1
%30:i32 = var
blockpc %13 1 %30 1:i1
%31:i32 = var
%32:i32 = var
%33:i32 = var
%34:i32 = var
%35:i32 = var
%36:i32 = var
pc %31 1:i1
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
pc %35 1:i1
pc %36 1:i1
infer %23


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4:i32 = var
%5:i32 = var
%6 = phi %3, %4, %5
%7 = phi %2, %6, 0:i32
%8 = phi %1, %7, 0:i32
%9 = block 2
%10:i32 = var
%11:i32 = var
%12 = phi %9, %10, %11
%13 = phi %0, %8, %12
%14:i32 = var
%15 = add %14, 11:i32 (hasExternalUses)
%16 = and %15, -8:i32 (hasExternalUses)
%17 = block 2
%18:i32 = var
%19 = phi %17, %18, %16
%20 = phi %0, %16, %19
%21 = add %13, %20 (hasExternalUses)
%22:i32 = var
%23:i32 = var
%24 = and %23, -8:i32
%25 = sub %24, %16 (hasExternalUses)
%26 = phi %3, %22, %25
%27 = sub 0:i32, %16 (hasExternalUses)
%28 = phi %2, %26, %27
%29 = block 2
%30:i32 = var
%31:i32 = var
%32 = phi %29, %30, %31
%33 = phi %0, %28, %32
%34 = add %21, %33
%35:i32 = var
blockpc %1 0 %35 1:i1
%36:i32 = var
blockpc %1 1 %36 1:i1
%37:i32 = var
blockpc %2 0 %37 1:i1
%38:i32 = var
blockpc %2 1 %38 1:i1
%39:i32 = var
blockpc %3 0 %39 1:i1
%40:i32 = var
blockpc %3 1 %40 1:i1
%41:i32 = var
blockpc %9 0 %41 1:i1
%42:i32 = var
blockpc %9 1 %42 1:i1
blockpc %29 0 %41 1:i1
%43:i32 = var
blockpc %29 1 %43 1:i1
%44:i32 = var
%45:i32 = var
%46:i32 = var
%47:i32 = var
%48:i32 = var
%49:i32 = var
pc %44 1:i1
pc %45 1:i1
pc %46 1:i1
pc %47 1:i1
pc %48 1:i1
pc %49 1:i1
infer %34


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = and %4, -8:i32
%6:i32 = var
%7 = add %6, 11:i32 (hasExternalUses)
%8 = and %7, -8:i32 (hasExternalUses)
%9 = sub %5, %8 (hasExternalUses)
%10 = phi %2, %3, %9
%11 = sub 0:i32, %8 (hasExternalUses)
%12 = phi %1, %10, %11
%13 = block 2
%14:i32 = var
%15:i32 = var
%16 = and %15, -8:i32
%17 = block 2
%18:i32 = var
%19 = phi %17, %18, %8
%20 = sub %16, %19 (hasExternalUses)
%21 = phi %13, %14, %20
%22 = phi %0, %12, %21
%23 = lshr %22, 3:i32
%24:i32 = var
%25 = ne %24, 0:i32
blockpc %1 0 %25 1:i1
%26 = eq %24, 0:i32
blockpc %1 1 %26 1:i1
%27 = ult %9, %3
blockpc %2 0 %27 1:i1
%28:i32 = var
blockpc %2 1 %28 1:i1
%29:i32 = var
blockpc %13 0 %29 1:i1
%30:i32 = var
blockpc %13 1 %30 1:i1
%31:i32 = var
%32:i32 = var
%33:i32 = var
%34:i32 = var
%35:i32 = var
%36:i32 = var
pc %31 1:i1
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
pc %35 1:i1
pc %36 1:i1
infer %23


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = and %4, -8:i32
%6:i32 = var
%7 = add %6, 11:i32 (hasExternalUses)
%8 = and %7, -8:i32 (hasExternalUses)
%9 = sub %5, %8 (hasExternalUses)
%10 = phi %2, %3, %9
%11 = sub 0:i32, %8 (hasExternalUses)
%12 = phi %1, %10, %11
%13 = block 2
%14:i32 = var
%15:i32 = var
%16 = and %15, -8:i32
%17 = block 2
%18:i32 = var
%19 = phi %17, %18, %8
%20 = sub %16, %19 (hasExternalUses)
%21 = phi %13, %14, %20
%22 = phi %0, %12, %21
%23 = ult %22, 256:i32
%24:i32 = var
%25 = ne %24, 0:i32
blockpc %1 0 %25 1:i1
%26 = eq %24, 0:i32
blockpc %1 1 %26 1:i1
%27 = ult %9, %3
blockpc %2 0 %27 1:i1
%28:i32 = var
blockpc %2 1 %28 1:i1
%29:i32 = var
blockpc %13 0 %29 1:i1
%30:i32 = var
blockpc %13 1 %30 1:i1
%31:i32 = var
%32:i32 = var
%33:i32 = var
%34:i32 = var
%35:i32 = var
%36:i32 = var
pc %31 1:i1
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
pc %35 1:i1
pc %36 1:i1
infer %23


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = and %4, -8:i32
%6:i32 = var
%7 = add %6, 11:i32 (hasExternalUses)
%8 = and %7, -8:i32 (hasExternalUses)
%9 = sub %5, %8 (hasExternalUses)
%10 = phi %2, %3, %9
%11 = sub 0:i32, %8 (hasExternalUses)
%12 = phi %1, %10, %11
%13 = block 2
%14:i32 = var
%15:i32 = var
%16 = and %15, -8:i32
%17 = block 2
%18:i32 = var
%19 = phi %17, %18, %8
%20 = sub %16, %19 (hasExternalUses)
%21 = phi %13, %14, %20
%22 = phi %0, %12, %21
%23 = lshr %22, 3:i32 (hasExternalUses)
%24 = shl %23, 3:i32
%25:i32 = var
%26 = ne %25, 0:i32
blockpc %1 0 %26 1:i1
%27 = eq %25, 0:i32
blockpc %1 1 %27 1:i1
%28:i32 = var
blockpc %2 0 %28 1:i1
%29:i32 = var
blockpc %2 1 %29 1:i1
%30:i32 = var
blockpc %13 0 %30 1:i1
%31:i32 = var
blockpc %13 1 %31 1:i1
%32:i32 = var
%33:i32 = var
%34:i32 = var
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
pc %35 1:i1
pc %36 1:i1
pc %37 1:i1
pc %38 1:i1
infer %24


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = and %4, -8:i32
%6:i32 = var
%7 = add %6, 11:i32 (hasExternalUses)
%8 = and %7, -8:i32 (hasExternalUses)
%9 = sub %5, %8 (hasExternalUses)
%10 = phi %2, %3, %9
%11 = sub 0:i32, %8 (hasExternalUses)
%12 = phi %1, %10, %11
%13 = block 2
%14:i32 = var
%15:i32 = var
%16 = and %15, -8:i32
%17 = block 2
%18:i32 = var
%19 = phi %17, %18, %8
%20 = sub %16, %19 (hasExternalUses)
%21 = phi %13, %14, %20
%22 = phi %0, %12, %21
%23 = lshr %22, 3:i32 (hasExternalUses)
%24 = shl %23, 3:i32
%25 = add %24, 3996:i32
%26:i32 = var
%27 = ne %26, 0:i32
blockpc %1 0 %27 1:i1
%28 = eq %26, 0:i32
blockpc %1 1 %28 1:i1
%29:i32 = var
blockpc %2 0 %29 1:i1
%30:i32 = var
blockpc %2 1 %30 1:i1
%31:i32 = var
blockpc %13 0 %31 1:i1
%32:i32 = var
blockpc %13 1 %32 1:i1
%33:i32 = var
%34:i32 = var
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
pc %33 1:i1
pc %34 1:i1
pc %35 1:i1
pc %36 1:i1
pc %37 1:i1
pc %38 1:i1
pc %39 1:i1
infer %25


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = and %4, -8:i32
%6:i32 = var
%7 = add %6, 11:i32 (hasExternalUses)
%8 = and %7, -8:i32 (hasExternalUses)
%9 = sub %5, %8 (hasExternalUses)
%10 = phi %2, %3, %9
%11 = sub 0:i32, %8 (hasExternalUses)
%12 = phi %1, %10, %11
%13 = block 2
%14:i32 = var
%15:i32 = var
%16 = and %15, -8:i32
%17 = block 2
%18:i32 = var
%19 = phi %17, %18, %8
%20 = sub %16, %19 (hasExternalUses)
%21 = phi %13, %14, %20
%22 = phi %0, %12, %21
%23 = lshr %22, 3:i32 (hasExternalUses)
%24 = shl 1:i32, %23
%25:i32 = var
%26 = ne %25, 0:i32
blockpc %1 0 %26 1:i1
%27 = eq %25, 0:i32
blockpc %1 1 %27 1:i1
%28:i32 = var
blockpc %2 0 %28 1:i1
%29:i32 = var
blockpc %2 1 %29 1:i1
%30:i32 = var
blockpc %13 0 %30 1:i1
%31:i32 = var
blockpc %13 1 %31 1:i1
%32:i32 = var
%33:i32 = var
%34:i32 = var
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
pc %35 1:i1
pc %36 1:i1
pc %37 1:i1
pc %38 1:i1
infer %24


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2 = block 2
%3 = block 2
%4:i32 = var
%5:i32 = var
%6 = and %5, -8:i32
%7:i32 = var
%8 = add %7, 11:i32 (hasExternalUses)
%9 = and %8, -8:i32 (hasExternalUses)
%10 = sub %6, %9 (hasExternalUses)
%11 = phi %3, %4, %10
%12 = sub 0:i32, %9 (hasExternalUses)
%13 = phi %2, %11, %12
%14 = block 2
%15:i32 = var
%16:i32 = var
%17 = and %16, -8:i32
%18 = block 2
%19:i32 = var
%20 = phi %18, %19, %9
%21 = sub %17, %20 (hasExternalUses)
%22 = phi %14, %15, %21
%23 = phi %1, %13, %22
%24 = lshr %23, 3:i32 (hasExternalUses)
%25 = shl 1:i32, %24 (hasExternalUses)
%26 = and %0, %25
%27:i32 = var
%28 = ne %27, 0:i32
blockpc %2 0 %28 1:i1
%29:i32 = var
blockpc %2 1 %29 1:i1
%30:i32 = var
blockpc %3 0 %30 1:i1
%31:i32 = var
blockpc %3 1 %31 1:i1
%32:i32 = var
blockpc %14 0 %32 1:i1
%33:i32 = var
blockpc %14 1 %33 1:i1
%34:i32 = var
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = var
pc %34 1:i1
pc %35 1:i1
pc %36 1:i1
pc %37 1:i1
pc %38 1:i1
pc %39 1:i1
pc %40 1:i1
infer %26


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = and %4, -8:i32
%6:i32 = var
%7 = and %6, -8:i32 (hasExternalUses)
%8 = sub %5, %7 (hasExternalUses)
%9 = phi %2, %3, %8
%10 = sub 0:i32, %7 (hasExternalUses)
%11 = phi %1, %9, %10
%12 = block 2
%13:i32 = var
%14:i32 = var
%15 = and %14, -8:i32
%16 = block 2
%17:i32 = var
%18 = phi %16, %17, %7
%19 = sub %15, %18 (hasExternalUses)
%20 = phi %12, %13, %19
%21 = phi %0, %11, %20
%22 = lshr %21, 3:i32 (hasExternalUses)
%23 = shl %22, 3:i32
%24 = add %23, 3996:i32 (hasExternalUses)
%25 = add %24, 8:i32
%26:i32 = var
%27 = ne %26, 0:i32
blockpc %1 0 %27 1:i1
%28 = eq %26, 0:i32
blockpc %1 1 %28 1:i1
%29:i32 = var
blockpc %2 0 %29 1:i1
%30:i32 = var
blockpc %2 1 %30 1:i1
%31:i32 = var
blockpc %12 0 %31 1:i1
%32:i32 = var
blockpc %12 1 %32 1:i1
%33:i32 = var
%34:i32 = var
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = var
pc %33 1:i1
pc %34 1:i1
pc %35 1:i1
pc %36 1:i1
pc %37 1:i1
pc %38 1:i1
pc %39 1:i1
pc %40 1:i1
infer %25


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2 = block 2
%3 = block 2
%4:i32 = var
%5:i32 = var
%6 = and %5, -8:i32
%7:i32 = var
%8 = add %7, 11:i32 (hasExternalUses)
%9 = and %8, -8:i32 (hasExternalUses)
%10 = sub %6, %9 (hasExternalUses)
%11 = phi %3, %4, %10
%12 = sub 0:i32, %9 (hasExternalUses)
%13 = phi %2, %11, %12
%14 = block 2
%15:i32 = var
%16:i32 = var
%17 = and %16, -8:i32
%18 = block 2
%19:i32 = var
%20 = phi %18, %19, %9
%21 = sub %17, %20 (hasExternalUses)
%22 = phi %14, %15, %21
%23 = phi %1, %13, %22
%24 = lshr %23, 3:i32 (hasExternalUses)
%25 = shl 1:i32, %24 (hasExternalUses)
%26 = or %0, %25
%27:i32 = var
%28 = ne %27, 0:i32
blockpc %2 0 %28 1:i1
%29:i32 = var
blockpc %2 1 %29 1:i1
%30:i32 = var
blockpc %3 0 %30 1:i1
%31:i32 = var
blockpc %3 1 %31 1:i1
%32:i32 = var
blockpc %14 0 %32 1:i1
%33:i32 = var
blockpc %14 1 %33 1:i1
%34:i32 = var
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = var
pc %34 1:i1
pc %35 1:i1
pc %36 1:i1
pc %37 1:i1
pc %38 1:i1
pc %39 1:i1
pc %40 1:i1
pc %41 1:i1
infer %26


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = and %4, -8:i32
%6:i32 = var
%7 = and %6, -8:i32 (hasExternalUses)
%8 = sub %5, %7 (hasExternalUses)
%9 = phi %2, %3, %8
%10 = sub 0:i32, %7 (hasExternalUses)
%11 = phi %1, %9, %10
%12 = block 2
%13:i32 = var
%14:i32 = var
%15 = and %14, -8:i32
%16 = block 2
%17:i32 = var
%18 = phi %16, %17, %7
%19 = sub %15, %18 (hasExternalUses)
%20 = phi %12, %13, %19
%21 = phi %0, %11, %20
%22 = lshr %21, 3:i32 (hasExternalUses)
%23 = shl %22, 3:i32
%24 = add %23, 3996:i32 (hasExternalUses)
%25 = add %24, 8:i32
%26:i32 = var
%27 = ne %26, 0:i32
blockpc %1 0 %27 1:i1
%28 = eq %26, 0:i32
blockpc %1 1 %28 1:i1
%29:i32 = var
blockpc %2 0 %29 1:i1
%30:i32 = var
blockpc %2 1 %30 1:i1
%31:i32 = var
blockpc %12 0 %31 1:i1
%32:i32 = var
blockpc %12 1 %32 1:i1
%33:i32 = var
%34:i32 = var
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = var
pc %33 1:i1
pc %34 1:i1
pc %35 1:i1
pc %36 1:i1
pc %37 1:i1
pc %38 1:i1
pc %39 1:i1
pc %40 1:i1
infer %25


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = and %4, -8:i32
%6:i32 = var
%7 = add %6, 11:i32 (hasExternalUses)
%8 = and %7, -8:i32 (hasExternalUses)
%9 = sub %5, %8 (hasExternalUses)
%10 = phi %2, %3, %9
%11 = sub 0:i32, %8 (hasExternalUses)
%12 = phi %1, %10, %11
%13 = block 2
%14:i32 = var
%15:i32 = var
%16 = and %15, -8:i32
%17 = block 2
%18:i32 = var
%19 = phi %17, %18, %8
%20 = sub %16, %19 (hasExternalUses)
%21 = phi %13, %14, %20
%22 = phi %0, %12, %21
%23 = lshr %22, 8:i32
%24:i32 = var
%25 = ne %24, 0:i32
blockpc %1 0 %25 1:i1
%26 = eq %24, 0:i32
blockpc %1 1 %26 1:i1
%27 = ult %9, %3
blockpc %2 0 %27 1:i1
%28:i32 = var
blockpc %2 1 %28 1:i1
%29:i32 = var
blockpc %13 0 %29 1:i1
%30:i32 = var
blockpc %13 1 %30 1:i1
%31:i32 = var
%32:i32 = var
%33:i32 = var
%34:i32 = var
%35:i32 = var
%36:i32 = var
pc %31 1:i1
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
pc %35 1:i1
pc %36 1:i1
infer %23


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = and %4, -8:i32
%6:i32 = var
%7 = add %6, 11:i32 (hasExternalUses)
%8 = and %7, -8:i32 (hasExternalUses)
%9 = sub %5, %8 (hasExternalUses)
%10 = phi %2, %3, %9
%11 = sub 0:i32, %8 (hasExternalUses)
%12 = phi %1, %10, %11
%13 = block 2
%14:i32 = var
%15:i32 = var
%16 = and %15, -8:i32
%17 = block 2
%18:i32 = var
%19 = phi %17, %18, %8
%20 = sub %16, %19 (hasExternalUses)
%21 = phi %13, %14, %20
%22 = phi %0, %12, %21
%23 = ult 16777215:i32, %22
%24:i32 = var
%25 = ne %24, 0:i32
blockpc %1 0 %25 1:i1
%26 = eq %24, 0:i32
blockpc %1 1 %26 1:i1
%27 = ult %9, %3
blockpc %2 0 %27 1:i1
%28:i32 = var
blockpc %2 1 %28 1:i1
%29:i32 = var
blockpc %13 0 %29 1:i1
%30:i32 = var
blockpc %13 1 %30 1:i1
%31:i32 = var
%32:i32 = var
%33:i32 = var
%34:i32 = var
%35:i32 = var
%36:i32 = var
%37:i32 = var
pc %31 1:i1
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
pc %35 1:i1
pc %36 1:i1
pc %37 1:i1
infer %23


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = and %4, -8:i32
%6:i32 = var
%7 = add %6, 11:i32 (hasExternalUses)
%8 = and %7, -8:i32 (hasExternalUses)
%9 = sub %5, %8 (hasExternalUses)
%10 = phi %2, %3, %9
%11 = sub 0:i32, %8 (hasExternalUses)
%12 = phi %1, %10, %11
%13 = block 2
%14:i32 = var
%15:i32 = var
%16 = and %15, -8:i32
%17 = block 2
%18:i32 = var
%19 = phi %17, %18, %8
%20 = sub %16, %19 (hasExternalUses)
%21 = phi %13, %14, %20
%22 = phi %0, %12, %21
%23 = lshr %22, 8:i32 (hasExternalUses)
%24 = add %23, 1048320:i32
%25:i32 = var
%26 = ne %25, 0:i32
blockpc %1 0 %26 1:i1
%27 = eq %25, 0:i32
blockpc %1 1 %27 1:i1
%28:i32 = var
blockpc %2 0 %28 1:i1
%29:i32 = var
blockpc %2 1 %29 1:i1
%30:i32 = var
blockpc %13 0 %30 1:i1
%31:i32 = var
blockpc %13 1 %31 1:i1
%32:i32 = var
%33:i32 = var
%34:i32 = var
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
pc %35 1:i1
pc %36 1:i1
pc %37 1:i1
pc %38 1:i1
pc %39 1:i1
infer %24


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = and %4, -8:i32
%6:i32 = var
%7 = add %6, 11:i32 (hasExternalUses)
%8 = and %7, -8:i32 (hasExternalUses)
%9 = sub %5, %8 (hasExternalUses)
%10 = phi %2, %3, %9
%11 = sub 0:i32, %8 (hasExternalUses)
%12 = phi %1, %10, %11
%13 = block 2
%14:i32 = var
%15:i32 = var
%16 = and %15, -8:i32
%17 = block 2
%18:i32 = var
%19 = phi %17, %18, %8
%20 = sub %16, %19 (hasExternalUses)
%21 = phi %13, %14, %20
%22 = phi %0, %12, %21
%23 = lshr %22, 8:i32 (hasExternalUses)
%24 = add %23, 1048320:i32
%25 = lshr %24, 16:i32
%26:i32 = var
%27 = ne %26, 0:i32
blockpc %1 0 %27 1:i1
%28 = eq %26, 0:i32
blockpc %1 1 %28 1:i1
%29:i32 = var
blockpc %2 0 %29 1:i1
%30:i32 = var
blockpc %2 1 %30 1:i1
%31:i32 = var
blockpc %13 0 %31 1:i1
%32:i32 = var
blockpc %13 1 %32 1:i1
%33:i32 = var
%34:i32 = var
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = var
pc %33 1:i1
pc %34 1:i1
pc %35 1:i1
pc %36 1:i1
pc %37 1:i1
pc %38 1:i1
pc %39 1:i1
pc %40 1:i1
infer %25


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = and %4, -8:i32
%6:i32 = var
%7 = and %6, -8:i32 (hasExternalUses)
%8 = sub %5, %7 (hasExternalUses)
%9 = phi %2, %3, %8
%10 = sub 0:i32, %7 (hasExternalUses)
%11 = phi %1, %9, %10
%12 = block 2
%13:i32 = var
%14:i32 = var
%15 = and %14, -8:i32
%16 = block 2
%17:i32 = var
%18 = phi %16, %17, %7
%19 = sub %15, %18 (hasExternalUses)
%20 = phi %12, %13, %19
%21 = phi %0, %11, %20
%22 = lshr %21, 8:i32 (hasExternalUses)
%23 = add %22, 1048320:i32
%24 = lshr %23, 16:i32
%25 = and %24, 8:i32
%26:i32 = var
%27 = ne %26, 0:i32
blockpc %1 0 %27 1:i1
%28 = eq %26, 0:i32
blockpc %1 1 %28 1:i1
%29:i32 = var
blockpc %2 0 %29 1:i1
%30:i32 = var
blockpc %2 1 %30 1:i1
%31:i32 = var
blockpc %12 0 %31 1:i1
%32:i32 = var
blockpc %12 1 %32 1:i1
%33:i32 = var
%34:i32 = var
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = var
pc %33 1:i1
pc %34 1:i1
pc %35 1:i1
pc %36 1:i1
pc %37 1:i1
pc %38 1:i1
pc %39 1:i1
pc %40 1:i1
infer %25


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = and %4, -8:i32
%6:i32 = var
%7 = add %6, 11:i32 (hasExternalUses)
%8 = and %7, -8:i32 (hasExternalUses)
%9 = sub %5, %8 (hasExternalUses)
%10 = phi %2, %3, %9
%11 = sub 0:i32, %8 (hasExternalUses)
%12 = phi %1, %10, %11
%13 = block 2
%14:i32 = var
%15:i32 = var
%16 = and %15, -8:i32
%17 = block 2
%18:i32 = var
%19 = phi %17, %18, %8
%20 = sub %16, %19 (hasExternalUses)
%21 = phi %13, %14, %20
%22 = phi %0, %12, %21
%23 = lshr %22, 8:i32 (hasExternalUses)
%24 = add %23, 1048320:i32
%25 = lshr %24, 16:i32
%26 = and %25, 8:i32 (hasExternalUses)
%27 = shl %23, %26
%28:i32 = var
%29 = ne %28, 0:i32
blockpc %1 0 %29 1:i1
%30:i32 = var
blockpc %1 1 %30 1:i1
%31:i32 = var
blockpc %2 0 %31 1:i1
%32:i32 = var
blockpc %2 1 %32 1:i1
%33:i32 = var
blockpc %13 0 %33 1:i1
%34:i32 = var
blockpc %13 1 %34 1:i1
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = var
%42:i32 = var
pc %35 1:i1
pc %36 1:i1
pc %37 1:i1
pc %38 1:i1
pc %39 1:i1
pc %40 1:i1
pc %41 1:i1
pc %42 1:i1
infer %27


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = and %4, -8:i32
%6:i32 = var
%7 = add %6, 11:i32 (hasExternalUses)
%8 = and %7, -8:i32 (hasExternalUses)
%9 = sub %5, %8 (hasExternalUses)
%10 = phi %2, %3, %9
%11 = sub 0:i32, %8 (hasExternalUses)
%12 = phi %1, %10, %11
%13 = block 2
%14:i32 = var
%15:i32 = var
%16 = and %15, -8:i32
%17 = block 2
%18:i32 = var
%19 = phi %17, %18, %8
%20 = sub %16, %19 (hasExternalUses)
%21 = phi %13, %14, %20
%22 = phi %0, %12, %21
%23 = lshr %22, 8:i32 (hasExternalUses)
%24 = add %23, 1048320:i32
%25 = lshr %24, 16:i32
%26 = and %25, 8:i32 (hasExternalUses)
%27 = shl %23, %26 (hasExternalUses)
%28 = add %27, 520192:i32
%29:i32 = var
%30 = ne %29, 0:i32
blockpc %1 0 %30 1:i1
%31:i32 = var
blockpc %1 1 %31 1:i1
%32:i32 = var
blockpc %2 0 %32 1:i1
%33:i32 = var
blockpc %2 1 %33 1:i1
%34:i32 = var
blockpc %13 0 %34 1:i1
%35:i32 = var
blockpc %13 1 %35 1:i1
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
pc %36 1:i1
pc %37 1:i1
pc %38 1:i1
pc %39 1:i1
pc %40 1:i1
pc %41 1:i1
pc %42 1:i1
pc %43 1:i1
infer %28


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = and %4, -8:i32
%6:i32 = var
%7 = and %6, -8:i32 (hasExternalUses)
%8 = sub %5, %7 (hasExternalUses)
%9 = phi %2, %3, %8
%10 = sub 0:i32, %7 (hasExternalUses)
%11 = phi %1, %9, %10
%12 = block 2
%13:i32 = var
%14:i32 = var
%15 = and %14, -8:i32
%16 = block 2
%17:i32 = var
%18 = phi %16, %17, %7
%19 = sub %15, %18 (hasExternalUses)
%20 = phi %12, %13, %19
%21 = phi %0, %11, %20
%22 = lshr %21, 8:i32 (hasExternalUses)
%23 = add %22, 1048320:i32
%24 = lshr %23, 16:i32
%25 = and %24, 8:i32 (hasExternalUses)
%26 = shl %22, %25 (hasExternalUses)
%27 = add %26, 520192:i32
%28 = lshr %27, 16:i32
%29:i32 = var
%30 = ne %29, 0:i32
blockpc %1 0 %30 1:i1
%31:i32 = var
blockpc %1 1 %31 1:i1
%32:i32 = var
blockpc %2 0 %32 1:i1
%33:i32 = var
blockpc %2 1 %33 1:i1
%34:i32 = var
blockpc %12 0 %34 1:i1
%35:i32 = var
blockpc %12 1 %35 1:i1
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
pc %36 1:i1
pc %37 1:i1
pc %38 1:i1
pc %39 1:i1
pc %40 1:i1
pc %41 1:i1
pc %42 1:i1
pc %43 1:i1
infer %28


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6 = sub %4, %5 (hasExternalUses)
%7 = phi %2, %3, %6
%8 = sub 0:i32, %5 (hasExternalUses)
%9 = phi %1, %7, %8
%10 = block 2
%11:i32 = var
%12:i32 = var
%13 = and %12, -8:i32
%14 = block 2
%15:i32 = var
%16 = phi %14, %15, %5
%17 = sub %13, %16 (hasExternalUses)
%18 = phi %10, %11, %17
%19 = phi %0, %9, %18
%20 = lshr %19, 8:i32 (hasExternalUses)
%21 = add %20, 1048320:i32
%22 = lshr %21, 16:i32
%23 = and %22, 8:i32 (hasExternalUses)
%24 = shl %20, %23 (hasExternalUses)
%25 = add %24, 520192:i32
%26 = lshr %25, 16:i32
%27 = and %26, 4:i32
%28:i32 = var
%29 = ne %28, 0:i32
blockpc %1 0 %29 1:i1
%30:i32 = var
blockpc %1 1 %30 1:i1
%31:i32 = var
blockpc %2 0 %31 1:i1
%32:i32 = var
blockpc %2 1 %32 1:i1
%33:i32 = var
blockpc %10 0 %33 1:i1
%34:i32 = var
blockpc %10 1 %34 1:i1
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = var
%42:i32 = var
pc %35 1:i1
pc %36 1:i1
pc %37 1:i1
pc %38 1:i1
pc %39 1:i1
pc %40 1:i1
pc %41 1:i1
pc %42 1:i1
infer %27


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = sub 0:i32, %6 (hasExternalUses)
%8 = phi %1, %5, %7
%9 = block 2
%10:i32 = var
%11:i32 = var
%12 = block 2
%13:i32 = var
%14 = phi %12, %13, %6
%15 = sub %11, %14 (hasExternalUses)
%16 = phi %9, %10, %15
%17 = phi %0, %8, %16
%18 = lshr %17, 8:i32 (hasExternalUses)
%19 = add %18, 1048320:i32
%20 = lshr %19, 16:i32
%21 = and %20, 8:i32
%22 = shl %18, %21 (hasExternalUses)
%23 = add %22, 520192:i32
%24 = lshr %23, 16:i32
%25 = and %24, 4:i32 (hasExternalUses)
%26 = or %25, %21
%27:i32 = var
%28 = ne %27, 0:i32
blockpc %1 0 %28 1:i1
%29:i32 = var
blockpc %1 1 %29 1:i1
%30:i32 = var
blockpc %2 0 %30 1:i1
%31:i32 = var
blockpc %2 1 %31 1:i1
%32:i32 = var
blockpc %9 0 %32 1:i1
%33:i32 = var
blockpc %9 1 %33 1:i1
%34:i32 = var
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = var
pc %34 1:i1
pc %35 1:i1
pc %36 1:i1
pc %37 1:i1
pc %38 1:i1
pc %39 1:i1
pc %40 1:i1
pc %41 1:i1
infer %26


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = and %4, -8:i32
%6:i32 = var
%7 = add %6, 11:i32 (hasExternalUses)
%8 = and %7, -8:i32 (hasExternalUses)
%9 = sub %5, %8 (hasExternalUses)
%10 = phi %2, %3, %9
%11 = sub 0:i32, %8 (hasExternalUses)
%12 = phi %1, %10, %11
%13 = block 2
%14:i32 = var
%15:i32 = var
%16 = and %15, -8:i32
%17 = block 2
%18:i32 = var
%19 = phi %17, %18, %8
%20 = sub %16, %19 (hasExternalUses)
%21 = phi %13, %14, %20
%22 = phi %0, %12, %21
%23 = lshr %22, 8:i32 (hasExternalUses)
%24 = add %23, 1048320:i32
%25 = lshr %24, 16:i32
%26 = and %25, 8:i32 (hasExternalUses)
%27 = shl %23, %26
%28 = add %27, 520192:i32
%29 = lshr %28, 16:i32
%30 = and %29, 4:i32 (hasExternalUses)
%31 = shl %27, %30
%32:i32 = var
blockpc %1 0 %32 1:i1
%33:i32 = var
blockpc %1 1 %33 1:i1
%34:i32 = var
blockpc %2 0 %34 1:i1
%35:i32 = var
blockpc %2 1 %35 1:i1
%36:i32 = var
blockpc %13 0 %36 1:i1
%37:i32 = var
blockpc %13 1 %37 1:i1
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = var
%45:i32 = var
pc %38 1:i1
pc %39 1:i1
pc %40 1:i1
pc %41 1:i1
pc %42 1:i1
pc %43 1:i1
pc %44 1:i1
pc %45 1:i1
infer %31


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = and %4, -8:i32
%6:i32 = var
%7 = and %6, -8:i32 (hasExternalUses)
%8 = sub %5, %7 (hasExternalUses)
%9 = phi %2, %3, %8
%10 = sub 0:i32, %7 (hasExternalUses)
%11 = phi %1, %9, %10
%12 = block 2
%13:i32 = var
%14:i32 = var
%15 = and %14, -8:i32
%16 = block 2
%17:i32 = var
%18 = phi %16, %17, %7
%19 = sub %15, %18 (hasExternalUses)
%20 = phi %12, %13, %19
%21 = phi %0, %11, %20
%22 = lshr %21, 8:i32 (hasExternalUses)
%23 = add %22, 1048320:i32
%24 = lshr %23, 16:i32
%25 = and %24, 8:i32 (hasExternalUses)
%26 = shl %22, %25
%27 = add %26, 520192:i32
%28 = lshr %27, 16:i32
%29 = and %28, 4:i32 (hasExternalUses)
%30 = shl %26, %29 (hasExternalUses)
%31 = add %30, 245760:i32
%32:i32 = var
blockpc %1 0 %32 1:i1
%33:i32 = var
blockpc %1 1 %33 1:i1
%34:i32 = var
blockpc %2 0 %34 1:i1
%35:i32 = var
blockpc %2 1 %35 1:i1
%36:i32 = var
blockpc %12 0 %36 1:i1
%37:i32 = var
blockpc %12 1 %37 1:i1
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = var
%45:i32 = var
pc %38 1:i1
pc %39 1:i1
pc %40 1:i1
pc %41 1:i1
pc %42 1:i1
pc %43 1:i1
pc %44 1:i1
pc %45 1:i1
infer %31


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6 = sub %4, %5 (hasExternalUses)
%7 = phi %2, %3, %6
%8 = sub 0:i32, %5 (hasExternalUses)
%9 = phi %1, %7, %8
%10 = block 2
%11:i32 = var
%12:i32 = var
%13 = and %12, -8:i32
%14 = block 2
%15:i32 = var
%16 = phi %14, %15, %5
%17 = sub %13, %16 (hasExternalUses)
%18 = phi %10, %11, %17
%19 = phi %0, %9, %18
%20 = lshr %19, 8:i32 (hasExternalUses)
%21 = add %20, 1048320:i32
%22 = lshr %21, 16:i32
%23 = and %22, 8:i32 (hasExternalUses)
%24 = shl %20, %23
%25 = add %24, 520192:i32
%26 = lshr %25, 16:i32
%27 = and %26, 4:i32 (hasExternalUses)
%28 = shl %24, %27 (hasExternalUses)
%29 = add %28, 245760:i32
%30 = lshr %29, 16:i32
%31:i32 = var
blockpc %1 0 %31 1:i1
%32:i32 = var
blockpc %1 1 %32 1:i1
%33:i32 = var
blockpc %2 0 %33 1:i1
%34:i32 = var
blockpc %2 1 %34 1:i1
%35:i32 = var
blockpc %10 0 %35 1:i1
%36:i32 = var
blockpc %10 1 %36 1:i1
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = var
pc %37 1:i1
pc %38 1:i1
pc %39 1:i1
pc %40 1:i1
pc %41 1:i1
pc %42 1:i1
pc %43 1:i1
pc %44 1:i1
infer %30


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = sub 0:i32, %6 (hasExternalUses)
%8 = phi %1, %5, %7
%9 = block 2
%10:i32 = var
%11:i32 = var
%12 = block 2
%13:i32 = var
%14 = phi %12, %13, %6
%15 = sub %11, %14 (hasExternalUses)
%16 = phi %9, %10, %15
%17 = phi %0, %8, %16
%18 = lshr %17, 8:i32 (hasExternalUses)
%19 = add %18, 1048320:i32
%20 = lshr %19, 16:i32
%21 = and %20, 8:i32 (hasExternalUses)
%22 = shl %18, %21
%23 = add %22, 520192:i32
%24 = lshr %23, 16:i32
%25 = and %24, 4:i32 (hasExternalUses)
%26 = shl %22, %25 (hasExternalUses)
%27 = add %26, 245760:i32
%28 = lshr %27, 16:i32
%29 = and %28, 2:i32
%30:i32 = var
blockpc %1 0 %30 1:i1
%31:i32 = var
blockpc %1 1 %31 1:i1
%32:i32 = var
blockpc %2 0 %32 1:i1
%33:i32 = var
blockpc %2 1 %33 1:i1
%34:i32 = var
blockpc %9 0 %34 1:i1
%35:i32 = var
blockpc %9 1 %35 1:i1
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
pc %36 1:i1
pc %37 1:i1
pc %38 1:i1
pc %39 1:i1
pc %40 1:i1
pc %41 1:i1
pc %42 1:i1
pc %43 1:i1
infer %29


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = phi %1, %5, %6
%8 = block 2
%9:i32 = var
%10:i32 = var
%11 = phi %8, %9, %10
%12 = phi %0, %7, %11
%13 = lshr %12, 8:i32 (hasExternalUses)
%14 = add %13, 1048320:i32
%15 = lshr %14, 16:i32
%16 = and %15, 8:i32
%17 = shl %13, %16
%18 = add %17, 520192:i32
%19 = lshr %18, 16:i32
%20 = and %19, 4:i32
%21 = or %20, %16
%22 = shl %17, %20 (hasExternalUses)
%23 = add %22, 245760:i32
%24 = lshr %23, 16:i32
%25 = and %24, 2:i32 (hasExternalUses)
%26 = or %21, %25
%27:i32 = var
%28 = ne %27, 0:i32
blockpc %1 0 %28 1:i1
%29:i32 = var
blockpc %1 1 %29 1:i1
%30:i32 = var
blockpc %2 0 %30 1:i1
%31:i32 = var
blockpc %2 1 %31 1:i1
%32:i32 = var
blockpc %8 0 %32 1:i1
%33:i32 = var
blockpc %8 1 %33 1:i1
%34:i32 = var
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = var
pc %34 1:i1
pc %35 1:i1
pc %36 1:i1
pc %37 1:i1
pc %38 1:i1
pc %39 1:i1
pc %40 1:i1
pc %41 1:i1
infer %26


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = phi %1, %5, %6
%8 = block 2
%9:i32 = var
%10:i32 = var
%11 = phi %8, %9, %10
%12 = phi %0, %7, %11
%13 = lshr %12, 8:i32 (hasExternalUses)
%14:i32 = var
%15 = lshr %14, 16:i32
%16 = and %15, 8:i32
%17 = shl %13, %16
%18 = add %17, 520192:i32
%19 = lshr %18, 16:i32
%20 = and %19, 4:i32
%21 = or %20, %16
%22 = shl %17, %20 (hasExternalUses)
%23 = add %22, 245760:i32
%24 = lshr %23, 16:i32
%25 = and %24, 2:i32 (hasExternalUses)
%26 = or %21, %25
%27 = sub 14:i32, %26
%28:i32 = var
%29 = ne %28, 0:i32
blockpc %1 0 %29 1:i1
%30:i32 = var
blockpc %1 1 %30 1:i1
%31:i32 = var
blockpc %2 0 %31 1:i1
%32:i32 = var
blockpc %2 1 %32 1:i1
%33:i32 = var
blockpc %8 0 %33 1:i1
%34:i32 = var
blockpc %8 1 %34 1:i1
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = var
%42:i32 = var
pc %35 1:i1
pc %36 1:i1
pc %37 1:i1
pc %38 1:i1
pc %39 1:i1
pc %40 1:i1
pc %41 1:i1
pc %42 1:i1
infer %27


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = and %4, -8:i32
%6:i32 = var
%7 = and %6, -8:i32 (hasExternalUses)
%8 = sub %5, %7 (hasExternalUses)
%9 = phi %2, %3, %8
%10 = sub 0:i32, %7 (hasExternalUses)
%11 = phi %1, %9, %10
%12 = block 2
%13:i32 = var
%14:i32 = var
%15 = and %14, -8:i32
%16 = block 2
%17:i32 = var
%18 = phi %16, %17, %7
%19 = sub %15, %18 (hasExternalUses)
%20 = phi %12, %13, %19
%21 = phi %0, %11, %20
%22 = lshr %21, 8:i32 (hasExternalUses)
%23 = add %22, 1048320:i32
%24 = lshr %23, 16:i32
%25 = and %24, 8:i32 (hasExternalUses)
%26 = shl %22, %25
%27 = add %26, 520192:i32
%28 = lshr %27, 16:i32
%29 = and %28, 4:i32 (hasExternalUses)
%30 = shl %26, %29 (hasExternalUses)
%31:i32 = var
%32 = shl %30, %31
%33:i32 = var
blockpc %1 0 %33 1:i1
%34:i32 = var
blockpc %1 1 %34 1:i1
%35:i32 = var
blockpc %2 0 %35 1:i1
%36:i32 = var
blockpc %2 1 %36 1:i1
%37:i32 = var
blockpc %12 0 %37 1:i1
%38:i32 = var
blockpc %12 1 %38 1:i1
%39:i32 = var
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = var
%45:i32 = var
%46:i32 = var
pc %39 1:i1
pc %40 1:i1
pc %41 1:i1
pc %42 1:i1
pc %43 1:i1
pc %44 1:i1
pc %45 1:i1
pc %46 1:i1
infer %32


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6 = sub %4, %5 (hasExternalUses)
%7 = phi %2, %3, %6
%8 = sub 0:i32, %5 (hasExternalUses)
%9 = phi %1, %7, %8
%10 = block 2
%11:i32 = var
%12:i32 = var
%13 = and %12, -8:i32
%14 = block 2
%15:i32 = var
%16 = phi %14, %15, %5
%17 = sub %13, %16 (hasExternalUses)
%18 = phi %10, %11, %17
%19 = phi %0, %9, %18
%20 = lshr %19, 8:i32 (hasExternalUses)
%21 = add %20, 1048320:i32
%22 = lshr %21, 16:i32
%23 = and %22, 8:i32 (hasExternalUses)
%24 = shl %20, %23
%25 = add %24, 520192:i32
%26 = lshr %25, 16:i32
%27 = and %26, 4:i32 (hasExternalUses)
%28 = shl %24, %27
%29 = add %28, 245760:i32
%30 = lshr %29, 16:i32
%31 = and %30, 2:i32 (hasExternalUses)
%32 = shl %28, %31
%33 = lshr %32, 15:i32
%34:i32 = var
blockpc %1 0 %34 1:i1
%35:i32 = var
blockpc %1 1 %35 1:i1
%36:i32 = var
blockpc %2 0 %36 1:i1
%37:i32 = var
blockpc %2 1 %37 1:i1
%38:i32 = var
blockpc %10 0 %38 1:i1
%39:i32 = var
blockpc %10 1 %39 1:i1
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = var
%45:i32 = var
%46:i32 = var
%47:i32 = var
pc %40 1:i1
pc %41 1:i1
pc %42 1:i1
pc %43 1:i1
pc %44 1:i1
pc %45 1:i1
pc %46 1:i1
pc %47 1:i1
infer %33


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = phi %1, %5, %6
%8 = block 2
%9:i32 = var
%10:i32 = var
%11 = phi %8, %9, %10
%12 = phi %0, %7, %11
%13 = lshr %12, 8:i32 (hasExternalUses)
%14:i32 = var
%15 = and %14, 8:i32
%16 = shl %13, %15
%17 = add %16, 520192:i32
%18 = lshr %17, 16:i32
%19 = and %18, 4:i32
%20 = or %19, %15
%21 = shl %16, %19
%22 = add %21, 245760:i32
%23 = lshr %22, 16:i32
%24 = and %23, 2:i32
%25 = or %20, %24
%26 = sub 14:i32, %25
%27 = shl %21, %24
%28 = lshr %27, 15:i32
%29 = add %26, %28
%30:i32 = var
blockpc %1 0 %30 1:i1
%31:i32 = var
blockpc %1 1 %31 1:i1
%32:i32 = var
blockpc %2 0 %32 1:i1
%33:i32 = var
blockpc %2 1 %33 1:i1
%34:i32 = var
blockpc %8 0 %34 1:i1
%35:i32 = var
blockpc %8 1 %35 1:i1
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
pc %36 1:i1
pc %37 1:i1
pc %38 1:i1
pc %39 1:i1
pc %40 1:i1
pc %41 1:i1
pc %42 1:i1
pc %43 1:i1
infer %29


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = shl %0, %1
%3 = add %2, 520192:i32
%4 = lshr %3, 16:i32
%5 = and %4, 4:i32
%6 = or %5, %1
%7 = shl %2, %5
%8 = add %7, 245760:i32
%9 = lshr %8, 16:i32
%10 = and %9, 2:i32
%11 = or %6, %10
%12 = sub 14:i32, %11
%13 = shl %7, %10
%14 = lshr %13, 15:i32
%15 = add %12, %14 (hasExternalUses)
%16 = add %15, 7:i32
%17 = block 2
%18 = block 2
%19:i32 = var
%20 = ne %19, 0:i32
blockpc %18 0 %20 1:i1
%21 = eq %19, 0:i32
blockpc %18 1 %21 1:i1
%22 = block 2
%23:i32 = var
%24:i32 = var
%25 = sub %23, %24
%26:i32 = var
%27 = ult %25, %26
blockpc %22 0 %27 1:i1
%28:i32 = var
blockpc %22 1 %28 1:i1
%29 = phi %22, %26, %25
%30:i32 = var
%31 = phi %18, %29, %30
%32 = block 2
%33:i32 = var
blockpc %32 0 %33 1:i1
%34:i32 = var
blockpc %32 1 %34 1:i1
%35:i32 = var
%36:i32 = var
%37 = phi %32, %35, %36
%38 = phi %17, %31, %37
%39 = ult 16777215:i32, %38
%40:i32 = zext %39
%41 = eq %40, 0:i32
%42:i32 = var
%43:i32 = var
%44:i32 = var
%45:i32 = var
%46:i32 = var
%47:i32 = var
%48:i32 = var
pc %41 1:i1
pc %42 1:i1
pc %43 1:i1
pc %44 1:i1
pc %45 1:i1
pc %46 1:i1
pc %47 1:i1
pc %48 1:i1
infer %16


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = and %4, -8:i32
%6:i32 = var
%7 = add %6, 11:i32 (hasExternalUses)
%8 = and %7, -8:i32 (hasExternalUses)
%9 = sub %5, %8 (hasExternalUses)
%10 = phi %2, %3, %9
%11 = sub 0:i32, %8 (hasExternalUses)
%12 = phi %1, %10, %11
%13 = block 2
%14:i32 = var
%15:i32 = var
%16 = and %15, -8:i32
%17 = block 2
%18:i32 = var
%19 = phi %17, %18, %8
%20 = sub %16, %19 (hasExternalUses)
%21 = phi %13, %14, %20
%22 = phi %0, %12, %21
%23:i32 = var
%24 = add %23, 520192:i32
%25 = lshr %24, 16:i32
%26 = and %25, 4:i32 (hasExternalUses)
%27:i32 = var
%28 = add %27, 1048320:i32
%29 = lshr %28, 16:i32
%30 = and %29, 8:i32 (hasExternalUses)
%31 = or %26, %30
%32:i32 = var
%33 = or %31, %32
%34 = sub 14:i32, %33
%35:i32 = var
%36 = add %34, %35 (hasExternalUses)
%37 = add %36, 7:i32
%38 = lshr %22, %37
%39:i32 = var
blockpc %1 0 %39 1:i1
%40:i32 = var
blockpc %1 1 %40 1:i1
%41:i32 = var
blockpc %2 0 %41 1:i1
%42:i32 = var
blockpc %2 1 %42 1:i1
%43:i32 = var
blockpc %13 0 %43 1:i1
%44:i32 = var
blockpc %13 1 %44 1:i1
%45:i32 = var
%46:i32 = var
%47:i32 = var
%48:i32 = var
%49:i32 = var
%50:i32 = var
%51:i32 = var
%52:i32 = var
pc %45 1:i1
pc %46 1:i1
pc %47 1:i1
pc %48 1:i1
pc %49 1:i1
pc %50 1:i1
pc %51 1:i1
pc %52 1:i1
infer %38


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = and %4, -8:i32
%6:i32 = var
%7 = add %6, 11:i32 (hasExternalUses)
%8 = and %7, -8:i32 (hasExternalUses)
%9 = sub %5, %8 (hasExternalUses)
%10 = phi %2, %3, %9
%11 = sub 0:i32, %8 (hasExternalUses)
%12 = phi %1, %10, %11
%13 = block 2
%14:i32 = var
%15:i32 = var
%16 = and %15, -8:i32
%17 = block 2
%18:i32 = var
%19 = phi %17, %18, %8
%20 = sub %16, %19 (hasExternalUses)
%21 = phi %13, %14, %20
%22 = phi %0, %12, %21
%23:i32 = var
%24 = lshr %23, 16:i32
%25 = and %24, 4:i32 (hasExternalUses)
%26:i32 = var
%27 = lshr %26, 16:i32
%28 = and %27, 8:i32 (hasExternalUses)
%29 = or %25, %28
%30:i32 = var
%31 = or %29, %30
%32 = sub 14:i32, %31
%33:i32 = var
%34 = add %32, %33 (hasExternalUses)
%35 = add %34, 7:i32
%36 = lshr %22, %35
%37 = and %36, 1:i32
%38:i32 = var
blockpc %1 0 %38 1:i1
%39:i32 = var
blockpc %1 1 %39 1:i1
%40:i32 = var
blockpc %2 0 %40 1:i1
%41:i32 = var
blockpc %2 1 %41 1:i1
%42:i32 = var
blockpc %13 0 %42 1:i1
%43:i32 = var
blockpc %13 1 %43 1:i1
%44:i32 = var
%45:i32 = var
%46:i32 = var
%47:i32 = var
%48:i32 = var
%49:i32 = var
%50:i32 = var
%51:i32 = var
pc %44 1:i1
pc %45 1:i1
pc %46 1:i1
pc %47 1:i1
pc %48 1:i1
pc %49 1:i1
pc %50 1:i1
pc %51 1:i1
infer %37


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = shl %0, %1
%3 = add %2, 520192:i32
%4 = lshr %3, 16:i32
%5 = and %4, 4:i32
%6 = or %5, %1
%7 = shl %2, %5
%8 = add %7, 245760:i32
%9 = lshr %8, 16:i32
%10 = and %9, 2:i32
%11 = or %6, %10
%12 = sub 14:i32, %11
%13 = shl %7, %10
%14 = lshr %13, 15:i32
%15 = add %12, %14 (hasExternalUses)
%16 = shl %15, 1:i32
%17 = block 2
%18 = block 2
%19:i32 = var
%20 = ne %19, 0:i32
blockpc %18 0 %20 1:i1
%21 = eq %19, 0:i32
blockpc %18 1 %21 1:i1
%22 = block 2
%23:i32 = var
%24:i32 = var
%25 = sub %23, %24
%26:i32 = var
%27 = ult %25, %26
blockpc %22 0 %27 1:i1
%28:i32 = var
blockpc %22 1 %28 1:i1
%29 = phi %22, %26, %25
%30:i32 = var
%31 = phi %18, %29, %30
%32 = block 2
%33:i32 = var
blockpc %32 0 %33 1:i1
%34:i32 = var
blockpc %32 1 %34 1:i1
%35:i32 = var
%36:i32 = var
%37 = phi %32, %35, %36
%38 = phi %17, %31, %37
%39 = ult 16777215:i32, %38
%40:i32 = zext %39
%41 = eq %40, 0:i32
%42:i32 = var
%43:i32 = var
%44:i32 = var
%45:i32 = var
%46:i32 = var
%47:i32 = var
%48:i32 = var
pc %41 1:i1
pc %42 1:i1
pc %43 1:i1
pc %44 1:i1
pc %45 1:i1
pc %46 1:i1
pc %47 1:i1
pc %48 1:i1
infer %16


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = and %4, -8:i32
%6:i32 = var
%7 = add %6, 11:i32 (hasExternalUses)
%8 = and %7, -8:i32 (hasExternalUses)
%9 = sub %5, %8 (hasExternalUses)
%10 = phi %2, %3, %9
%11 = sub 0:i32, %8 (hasExternalUses)
%12 = phi %1, %10, %11
%13 = block 2
%14:i32 = var
%15:i32 = var
%16 = and %15, -8:i32
%17 = block 2
%18:i32 = var
%19 = phi %17, %18, %8
%20 = sub %16, %19 (hasExternalUses)
%21 = phi %13, %14, %20
%22 = phi %0, %12, %21
%23:i32 = var
%24 = and %23, 4:i32 (hasExternalUses)
%25:i32 = var
%26 = and %25, 8:i32 (hasExternalUses)
%27 = or %24, %26
%28:i32 = var
%29 = lshr %28, 16:i32
%30 = and %29, 2:i32 (hasExternalUses)
%31 = or %27, %30
%32 = sub 14:i32, %31
%33:i32 = var
%34 = add %32, %33 (hasExternalUses)
%35 = add %34, 7:i32
%36 = lshr %22, %35
%37 = and %36, 1:i32
%38:i32 = var
%39 = or %37, %38
%40:i32 = var
blockpc %1 0 %40 1:i1
%41:i32 = var
blockpc %1 1 %41 1:i1
%42:i32 = var
blockpc %2 0 %42 1:i1
%43:i32 = var
blockpc %2 1 %43 1:i1
%44:i32 = var
blockpc %13 0 %44 1:i1
%45:i32 = var
blockpc %13 1 %45 1:i1
%46:i32 = var
%47:i32 = var
%48:i32 = var
%49:i32 = var
%50:i32 = var
%51:i32 = var
%52:i32 = var
%53:i32 = var
pc %46 1:i1
pc %47 1:i1
pc %48 1:i1
pc %49 1:i1
pc %50 1:i1
pc %51 1:i1
pc %52 1:i1
pc %53 1:i1
infer %39


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4 = block 2
%5:i32 = var
%6:i32 = var
%7 = phi %4, %5, %6
%8:i32 = var
%9 = sub 0:i32, %8 (hasExternalUses)
%10 = phi %3, %7, %9
%11 = block 2
%12:i32 = var
%13:i32 = var
%14 = block 2
%15:i32 = var
%16 = phi %14, %15, %8
%17 = sub %13, %16 (hasExternalUses)
%18 = phi %11, %12, %17
%19 = phi %2, %10, %18
%20:i32 = var
%21 = sub 14:i32, %20
%22:i32 = var
%23 = lshr %22, 15:i32
%24 = add %21, %23
%25 = add %24, 7:i32
%26 = lshr %19, %25
%27 = and %26, 1:i32
%28 = shl %24, 1:i32
%29 = or %27, %28 (hasExternalUses)
%30 = phi %1, 31:i32, %29
%31 = phi %0, %30, 0:i32
%32 = shl %31, 2:i32
%33:i32 = var
blockpc %0 0 %33 1:i1
%34:i32 = var
blockpc %0 1 %34 1:i1
%35:i32 = var
blockpc %1 0 %35 1:i1
%36:i32 = var
blockpc %1 1 %36 1:i1
%37:i32 = var
blockpc %3 0 %37 1:i1
%38:i32 = var
blockpc %3 1 %38 1:i1
%39:i32 = var
blockpc %4 0 %39 1:i1
%40:i32 = var
blockpc %4 1 %40 1:i1
%41:i32 = var
blockpc %11 0 %41 1:i1
%42:i32 = var
blockpc %11 1 %42 1:i1
%43:i32 = var
%44:i32 = var
%45:i32 = var
%46:i32 = var
%47:i32 = var
%48:i32 = var
pc %43 1:i1
pc %44 1:i1
pc %45 1:i1
pc %46 1:i1
pc %47 1:i1
pc %48 1:i1
infer %32


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4 = block 2
%5:i32 = var
%6:i32 = var
%7 = phi %4, %5, %6
%8:i32 = var
%9 = phi %3, %7, %8
%10 = block 2
%11:i32 = var
%12:i32 = var
%13 = phi %10, %11, %12
%14 = phi %2, %9, %13
%15:i32 = var
%16:i32 = var
%17 = add %15, %16
%18 = add %17, 7:i32
%19 = lshr %14, %18
%20 = and %19, 1:i32
%21 = shl %17, 1:i32
%22 = or %20, %21 (hasExternalUses)
%23 = phi %1, 31:i32, %22
%24 = phi %0, %23, 0:i32
%25 = shl %24, 2:i32
%26 = add %25, 4260:i32
%27 = lshr %14, 8:i32
%28 = ne %27, 0:i32
blockpc %0 0 %28 1:i1
%29:i32 = var
blockpc %0 1 %29 1:i1
%30:i32 = var
blockpc %1 0 %30 1:i1
%31:i32 = var
blockpc %1 1 %31 1:i1
%32:i32 = var
blockpc %3 0 %32 1:i1
%33:i32 = var
blockpc %3 1 %33 1:i1
%34:i32 = var
blockpc %4 0 %34 1:i1
%35:i32 = var
blockpc %4 1 %35 1:i1
%36:i32 = var
blockpc %10 0 %36 1:i1
%37:i32 = var
blockpc %10 1 %37 1:i1
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
pc %38 1:i1
pc %39 1:i1
pc %40 1:i1
pc %41 1:i1
pc %42 1:i1
pc %43 1:i1
infer %26


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4:i32 = var
%5:i32 = var
%6 = phi %3, %4, %5
%7 = phi %2, %6, 0:i32
%8 = phi %1, %7, 0:i32
%9 = block 2
%10:i32 = var
%11:i32 = var
%12 = phi %9, %10, %11
%13 = phi %0, %8, %12
%14:i32 = var
%15 = add %14, 11:i32 (hasExternalUses)
%16 = and %15, -8:i32 (hasExternalUses)
%17 = block 2
%18:i32 = var
%19 = phi %17, %18, %16
%20 = phi %0, %16, %19
%21 = add %13, %20 (hasExternalUses)
%22 = add %21, 16:i32
%23:i32 = var
%24 = ne %23, 0:i32
blockpc %2 0 %24 1:i1
%25 = eq %23, 0:i32
blockpc %2 1 %25 1:i1
%26 = block 2
%27:i32 = var
%28:i32 = zext %27
%29:i32 = var
%30:i32 = zext %29
%31 = or %28, %30
%32 = eq %31, 0:i32
blockpc %26 0 %32 1:i1
%33:i32 = var
blockpc %26 1 %33 1:i1
%34:i32 = var
%35:i32 = var
%36 = phi %26, %34, %35
%37 = phi %2, %36, 0:i32
%38 = or %37, %7
%39 = ne %38, 0:i32
blockpc %1 0 %39 1:i1
%40:i32 = var
blockpc %1 1 %40 1:i1
%41:i32 = var
blockpc %3 0 %41 1:i1
%42:i32 = var
blockpc %3 1 %42 1:i1
%43:i32 = var
blockpc %9 0 %43 1:i1
%44:i32 = var
blockpc %9 1 %44 1:i1
%45:i32 = var
%46:i32 = var
%47:i32 = var
%48:i32 = var
%49:i32 = var
%50:i32 = var
pc %45 1:i1
pc %46 1:i1
pc %47 1:i1
pc %48 1:i1
pc %49 1:i1
pc %50 1:i1
infer %22


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4 = block 2
%5:i32 = var
%6:i32 = var
%7 = phi %4, %5, %6
%8:i32 = var
%9 = sub 0:i32, %8 (hasExternalUses)
%10 = phi %3, %7, %9
%11 = block 2
%12:i32 = var
%13:i32 = var
%14 = block 2
%15:i32 = var
%16 = phi %14, %15, %8
%17 = sub %13, %16 (hasExternalUses)
%18 = phi %11, %12, %17
%19 = phi %2, %10, %18
%20:i32 = var
%21 = sub 14:i32, %20
%22:i32 = var
%23 = lshr %22, 15:i32
%24 = add %21, %23
%25 = add %24, 7:i32
%26 = lshr %19, %25
%27 = and %26, 1:i32
%28 = shl %24, 1:i32
%29 = or %27, %28 (hasExternalUses)
%30 = phi %1, 31:i32, %29
%31 = phi %0, %30, 0:i32
%32 = shl 1:i32, %31
%33:i32 = var
blockpc %0 0 %33 1:i1
%34:i32 = var
blockpc %0 1 %34 1:i1
%35:i32 = var
blockpc %1 0 %35 1:i1
%36:i32 = var
blockpc %1 1 %36 1:i1
%37:i32 = var
blockpc %3 0 %37 1:i1
%38:i32 = var
blockpc %3 1 %38 1:i1
%39:i32 = var
blockpc %4 0 %39 1:i1
%40:i32 = var
blockpc %4 1 %40 1:i1
%41:i32 = var
blockpc %11 0 %41 1:i1
%42:i32 = var
blockpc %11 1 %42 1:i1
%43:i32 = var
%44:i32 = var
%45:i32 = var
%46:i32 = var
%47:i32 = var
%48:i32 = var
pc %43 1:i1
pc %44 1:i1
pc %45 1:i1
pc %46 1:i1
pc %47 1:i1
pc %48 1:i1
infer %32


; start LHS (in $6)
%0 = block 3
%1 = block 2
%2:i32 = var
%3 = block 2
%4:i32 = var
%5 = phi %3, %4, %2
%6 = phi %1, %2, %5
%7:i32 = var
%8 = shl 1:i32, %7
%9 = xor %8, -1:i32
%10 = and %6, %9 (hasExternalUses)
%11 = phi %0, %10, %6, %6
%12 = block 2
%13 = block 2
%14 = block 2
%15 = block 2
%16:i32 = var
%17:i32 = var
%18 = phi %15, %16, %17
%19:i32 = var
%20 = phi %14, %18, %19
%21 = block 2
%22:i32 = var
%23:i32 = var
%24 = phi %21, %22, %23
%25 = phi %1, %20, %24
%26:i32 = var
%27:i32 = var
%28 = add %26, %27 (hasExternalUses)
%29 = add %28, 7:i32
%30 = lshr %25, %29
%31 = and %30, 1:i32
%32:i32 = var
%33 = or %31, %32 (hasExternalUses)
%34 = phi %13, 31:i32, %33
%35 = phi %12, %34, 0:i32
%36 = shl 1:i32, %35 (hasExternalUses)
%37 = and %11, %36
%38:i32 = var
blockpc %12 0 %38 1:i1
%39:i32 = var
blockpc %12 1 %39 1:i1
%40:i32 = var
blockpc %13 0 %40 1:i1
%41:i32 = var
blockpc %13 1 %41 1:i1
%42:i32 = var
blockpc %14 0 %42 1:i1
%43:i32 = var
blockpc %14 1 %43 1:i1
%44:i32 = var
blockpc %15 0 %44 1:i1
%45:i32 = var
blockpc %15 1 %45 1:i1
%46:i32 = var
blockpc %21 0 %46 1:i1
%47:i32 = var
blockpc %21 1 %47 1:i1
%48:i32 = var
%49:i32 = var
%50:i32 = var
%51:i32 = var
%52:i32 = var
%53:i32 = var
pc %48 1:i1
pc %49 1:i1
pc %50 1:i1
pc %51 1:i1
pc %52 1:i1
pc %53 1:i1
infer %37


; start LHS (in $6)
%0 = block 3
%1 = block 2
%2:i32 = var
%3 = block 2
%4:i32 = var
%5 = phi %3, %4, %2
%6 = phi %1, %2, %5
%7:i32 = var
%8 = shl 1:i32, %7
%9 = xor %8, -1:i32
%10 = and %6, %9 (hasExternalUses)
%11 = phi %0, %10, %6, %6
%12 = block 2
%13 = block 2
%14 = block 2
%15 = block 2
%16:i32 = var
%17:i32 = var
%18 = phi %15, %16, %17
%19:i32 = var
%20 = phi %14, %18, %19
%21 = block 2
%22:i32 = var
%23:i32 = var
%24 = phi %21, %22, %23
%25 = phi %1, %20, %24
%26:i32 = var
%27 = add %26, 7:i32
%28 = lshr %25, %27
%29 = and %28, 1:i32
%30:i32 = var
%31 = or %29, %30 (hasExternalUses)
%32 = phi %13, 31:i32, %31
%33 = phi %12, %32, 0:i32
%34 = shl 1:i32, %33 (hasExternalUses)
%35 = and %11, %34
%36 = eq %35, 0:i32
%37:i32 = var
blockpc %12 0 %37 1:i1
%38:i32 = var
blockpc %12 1 %38 1:i1
%39:i32 = var
blockpc %13 0 %39 1:i1
%40:i32 = var
blockpc %13 1 %40 1:i1
%41:i32 = var
blockpc %14 0 %41 1:i1
%42:i32 = var
blockpc %14 1 %42 1:i1
%43:i32 = var
blockpc %15 0 %43 1:i1
%44:i32 = var
blockpc %15 1 %44 1:i1
%45:i32 = var
blockpc %21 0 %45 1:i1
%46:i32 = var
blockpc %21 1 %46 1:i1
%47:i32 = var
%48:i32 = var
%49:i32 = var
%50:i32 = var
%51:i32 = var
%52:i32 = var
pc %47 1:i1
pc %48 1:i1
pc %49 1:i1
pc %50 1:i1
pc %51 1:i1
pc %52 1:i1
infer %36


; start LHS (in $6)
%0 = block 3
%1 = block 2
%2:i32 = var
%3 = block 2
%4:i32 = var
%5 = phi %3, %4, %2
%6 = phi %1, %2, %5
%7:i32 = var
%8 = shl 1:i32, %7
%9 = xor %8, -1:i32
%10 = and %6, %9 (hasExternalUses)
%11 = phi %0, %10, %6, %6
%12 = block 2
%13 = block 2
%14 = block 2
%15 = block 2
%16:i32 = var
%17:i32 = var
%18 = phi %15, %16, %17
%19:i32 = var
%20 = phi %14, %18, %19
%21 = block 2
%22:i32 = var
%23:i32 = var
%24 = phi %21, %22, %23
%25 = phi %1, %20, %24
%26:i32 = var
%27:i32 = var
%28 = add %26, %27 (hasExternalUses)
%29 = add %28, 7:i32
%30 = lshr %25, %29
%31 = and %30, 1:i32
%32:i32 = var
%33 = or %31, %32 (hasExternalUses)
%34 = phi %13, 31:i32, %33
%35 = phi %12, %34, 0:i32
%36 = shl 1:i32, %35 (hasExternalUses)
%37 = or %11, %36
%38:i32 = var
blockpc %12 0 %38 1:i1
%39:i32 = var
blockpc %12 1 %39 1:i1
%40:i32 = var
blockpc %13 0 %40 1:i1
%41:i32 = var
blockpc %13 1 %41 1:i1
%42:i32 = var
blockpc %14 0 %42 1:i1
%43:i32 = var
blockpc %14 1 %43 1:i1
%44:i32 = var
blockpc %15 0 %44 1:i1
%45:i32 = var
blockpc %15 1 %45 1:i1
%46:i32 = var
blockpc %21 0 %46 1:i1
%47:i32 = var
blockpc %21 1 %47 1:i1
%48:i32 = var
%49:i32 = var
%50:i32 = var
%51:i32 = var
%52:i32 = var
%53:i32 = var
%54:i32 = var
pc %48 1:i1
pc %49 1:i1
pc %50 1:i1
pc %51 1:i1
pc %52 1:i1
pc %53 1:i1
pc %54 1:i1
infer %37


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4 = block 2
%5:i32 = var
%6:i32 = var
%7 = phi %4, %5, %6
%8:i32 = var
%9 = sub 0:i32, %8 (hasExternalUses)
%10 = phi %3, %7, %9
%11 = block 2
%12:i32 = var
%13:i32 = var
%14 = block 2
%15:i32 = var
%16 = phi %14, %15, %8
%17 = sub %13, %16 (hasExternalUses)
%18 = phi %11, %12, %17
%19 = phi %2, %10, %18
%20:i32 = var
%21 = sub 14:i32, %20
%22:i32 = var
%23 = lshr %22, 15:i32
%24 = add %21, %23
%25 = add %24, 7:i32
%26 = lshr %19, %25
%27 = and %26, 1:i32
%28 = shl %24, 1:i32
%29 = or %27, %28 (hasExternalUses)
%30 = phi %1, 31:i32, %29
%31 = phi %0, %30, 0:i32
%32 = lshr %31, 1:i32
%33:i32 = var
blockpc %0 0 %33 1:i1
%34:i32 = var
blockpc %0 1 %34 1:i1
%35:i32 = var
blockpc %1 0 %35 1:i1
%36:i32 = var
blockpc %1 1 %36 1:i1
%37:i32 = var
blockpc %3 0 %37 1:i1
%38:i32 = var
blockpc %3 1 %38 1:i1
%39:i32 = var
blockpc %4 0 %39 1:i1
%40:i32 = var
blockpc %4 1 %40 1:i1
%41:i32 = var
blockpc %11 0 %41 1:i1
%42:i32 = var
blockpc %11 1 %42 1:i1
%43:i32 = var
%44:i32 = var
%45:i32 = var
%46:i32 = var
%47:i32 = var
%48:i32 = var
pc %43 1:i1
pc %44 1:i1
pc %45 1:i1
pc %46 1:i1
pc %47 1:i1
pc %48 1:i1
infer %32


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4 = block 2
%5:i32 = var
%6:i32 = var
%7 = phi %4, %5, %6
%8:i32 = var
%9 = phi %3, %7, %8
%10 = block 2
%11:i32 = var
%12:i32 = var
%13 = phi %10, %11, %12
%14 = phi %2, %9, %13
%15:i32 = var
%16:i32 = var
%17 = add %15, %16
%18 = add %17, 7:i32
%19 = lshr %14, %18
%20 = and %19, 1:i32
%21 = shl %17, 1:i32
%22 = or %20, %21 (hasExternalUses)
%23 = phi %1, 31:i32, %22
%24 = phi %0, %23, 0:i32
%25 = lshr %24, 1:i32
%26 = sub 25:i32, %25
%27 = lshr %14, 8:i32
%28 = ne %27, 0:i32
blockpc %0 0 %28 1:i1
%29:i32 = var
blockpc %0 1 %29 1:i1
%30:i32 = var
blockpc %1 0 %30 1:i1
%31:i32 = var
blockpc %1 1 %31 1:i1
%32:i32 = var
blockpc %3 0 %32 1:i1
%33:i32 = var
blockpc %3 1 %33 1:i1
%34:i32 = var
blockpc %4 0 %34 1:i1
%35:i32 = var
blockpc %4 1 %35 1:i1
%36:i32 = var
blockpc %10 0 %36 1:i1
%37:i32 = var
blockpc %10 1 %37 1:i1
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
pc %38 1:i1
pc %39 1:i1
pc %40 1:i1
pc %41 1:i1
pc %42 1:i1
pc %43 1:i1
infer %26


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4 = block 2
%5:i32 = var
%6:i32 = var
%7 = phi %4, %5, %6
%8:i32 = var
%9 = sub 0:i32, %8 (hasExternalUses)
%10 = phi %3, %7, %9
%11 = block 2
%12:i32 = var
%13:i32 = var
%14 = block 2
%15:i32 = var
%16 = phi %14, %15, %8
%17 = sub %13, %16 (hasExternalUses)
%18 = phi %11, %12, %17
%19 = phi %2, %10, %18
%20:i32 = var
%21 = sub 14:i32, %20
%22:i32 = var
%23 = lshr %22, 15:i32
%24 = add %21, %23
%25 = add %24, 7:i32
%26 = lshr %19, %25
%27 = and %26, 1:i32
%28 = shl %24, 1:i32
%29 = or %27, %28 (hasExternalUses)
%30 = phi %1, 31:i32, %29
%31 = phi %0, %30, 0:i32
%32 = eq %31, 31:i32
%33:i32 = var
blockpc %0 0 %33 1:i1
%34:i32 = var
blockpc %0 1 %34 1:i1
%35:i32 = var
blockpc %1 0 %35 1:i1
%36:i32 = var
blockpc %1 1 %36 1:i1
%37:i32 = var
blockpc %3 0 %37 1:i1
%38:i32 = var
blockpc %3 1 %38 1:i1
%39:i32 = var
blockpc %4 0 %39 1:i1
%40:i32 = var
blockpc %4 1 %40 1:i1
%41:i32 = var
blockpc %11 0 %41 1:i1
%42:i32 = var
blockpc %11 1 %42 1:i1
%43:i32 = var
%44:i32 = var
%45:i32 = var
%46:i32 = var
%47:i32 = var
%48:i32 = var
pc %43 1:i1
pc %44 1:i1
pc %45 1:i1
pc %46 1:i1
pc %47 1:i1
pc %48 1:i1
infer %32


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = and %4, -8:i32
%6:i32 = var
%7 = add %6, 11:i32 (hasExternalUses)
%8 = and %7, -8:i32 (hasExternalUses)
%9 = sub %5, %8 (hasExternalUses)
%10 = phi %2, %3, %9
%11 = sub 0:i32, %8 (hasExternalUses)
%12 = phi %1, %10, %11
%13 = block 2
%14:i32 = var
%15:i32 = var
%16 = and %15, -8:i32
%17 = block 2
%18:i32 = var
%19 = phi %17, %18, %8
%20 = sub %16, %19 (hasExternalUses)
%21 = phi %13, %14, %20
%22 = phi %0, %12, %21
%23 = block 2
%24 = block 2
%25 = block 2
%26:i32 = var
%27 = lshr %22, %26
%28 = and %27, 1:i32
%29:i32 = var
%30:i32 = var
%31 = add %29, %30 (hasExternalUses)
%32 = shl %31, 1:i32
%33 = or %28, %32 (hasExternalUses)
%34 = phi %25, 31:i32, %33
%35 = phi %24, %34, 0:i32
%36 = lshr %35, 1:i32
%37 = sub 25:i32, %36
%38 = phi %23, 0:i32, %37
%39 = shl %22, %38
%40:i32 = var
blockpc %1 0 %40 1:i1
%41:i32 = var
blockpc %1 1 %41 1:i1
%42:i32 = var
blockpc %2 0 %42 1:i1
%43:i32 = var
blockpc %2 1 %43 1:i1
%44:i32 = var
blockpc %13 0 %44 1:i1
%45:i32 = var
blockpc %13 1 %45 1:i1
%46:i32 = var
blockpc %23 0 %46 1:i1
%47:i32 = var
blockpc %23 1 %47 1:i1
%48:i32 = var
blockpc %24 0 %48 1:i1
%49:i32 = var
blockpc %24 1 %49 1:i1
%50:i32 = var
blockpc %25 0 %50 1:i1
%51:i32 = var
blockpc %25 1 %51 1:i1
%52:i32 = var
%53:i32 = var
%54:i32 = var
%55:i32 = var
%56:i32 = var
%57:i32 = var
pc %52 1:i1
pc %53 1:i1
pc %54 1:i1
pc %55 1:i1
pc %56 1:i1
pc %57 1:i1
infer %39


; start LHS (in $6)
%0:i32 = var
%1 = and %0, -8:i32
%2 = block 2
%3 = block 2
%4:i32 = var
%5 = ne %4, 0:i32
blockpc %3 0 %5 1:i1
%6 = eq %4, 0:i32
blockpc %3 1 %6 1:i1
%7 = block 2
%8:i32 = var
%9:i32 = var
%10 = sub %8, %9
%11:i32 = var
%12 = ult %10, %11
blockpc %7 0 %12 1:i1
%13:i32 = zext %12
%14 = eq %13, 0:i32
blockpc %7 1 %14 1:i1
%15 = phi %7, %11, %10
%16 = sub 0:i32, %9
%17 = phi %3, %15, %16
%18 = block 2
%19:i32 = var
%20 = and %19, -8:i32
%21 = block 2
%22:i32 = var
%23 = phi %21, %22, %9
%24 = sub %20, %23
%25:i32 = var
%26 = ult %24, %25
blockpc %18 0 %26 1:i1
%27:i32 = var
blockpc %18 1 %27 1:i1
%28 = phi %18, %25, %24
%29 = phi %2, %17, %28
%30 = ult %29, 16:i32
%31:i32 = zext %30
%32 = eq %31, 0:i32
%33:i32 = var
%34:i32 = var
%35:i32 = var
%36:i32 = var
%37:i32 = var
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
pc %35 1:i1
pc %36 1:i1
pc %37 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = and %0, -8:i32
%2 = block 2
%3 = block 2
%4 = block 2
%5:i32 = var
%6:i32 = var
%7 = and %6, -8:i32
%8:i32 = var
%9 = add %8, 11:i32 (hasExternalUses)
%10 = and %9, -8:i32 (hasExternalUses)
%11 = sub %7, %10 (hasExternalUses)
%12 = phi %4, %5, %11
%13 = sub 0:i32, %10 (hasExternalUses)
%14 = phi %3, %12, %13
%15 = block 2
%16:i32 = var
%17:i32 = var
%18 = and %17, -8:i32
%19 = block 2
%20:i32 = var
%21 = phi %19, %20, %10
%22 = sub %18, %21 (hasExternalUses)
%23 = phi %15, %16, %22
%24 = phi %2, %14, %23
%25 = eq %1, %24
%26:i32 = var
%27 = ne %26, 0:i32
blockpc %3 0 %27 1:i1
%28 = eq %26, 0:i32
blockpc %3 1 %28 1:i1
%29:i32 = var
blockpc %4 0 %29 1:i1
%30:i32 = var
blockpc %4 1 %30 1:i1
%31:i32 = var
blockpc %15 0 %31 1:i1
%32:i32 = var
blockpc %15 1 %32 1:i1
%33:i32 = var
%34:i32 = var
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
pc %33 1:i1
pc %34 1:i1
pc %35 1:i1
pc %36 1:i1
pc %37 1:i1
pc %38 1:i1
infer %25


; start LHS (in $6)
%0:i32 = var
%1 = shl %0, 1:i32
%2 = block 2
%3 = block 2
%4:i32 = var
%5 = ne %4, 0:i32
blockpc %3 0 %5 1:i1
%6 = eq %4, 0:i32
blockpc %3 1 %6 1:i1
%7 = block 2
%8:i32 = var
%9:i32 = var
%10 = sub %8, %9
%11:i32 = var
%12 = ult %10, %11
blockpc %7 0 %12 1:i1
%13:i32 = zext %12
%14 = eq %13, 0:i32
blockpc %7 1 %14 1:i1
%15 = phi %7, %11, %10
%16 = sub 0:i32, %9
%17 = phi %3, %15, %16
%18 = block 2
%19:i32 = var
%20 = and %19, -8:i32
%21 = block 2
%22:i32 = var
%23 = phi %21, %22, %9
%24 = sub %20, %23
%25:i32 = var
%26 = ult %24, %25
blockpc %18 0 %26 1:i1
%27:i32 = var
blockpc %18 1 %27 1:i1
%28 = phi %18, %25, %24
%29 = phi %2, %17, %28
%30 = ult %29, 16:i32
%31:i32 = zext %30
%32 = eq %31, 0:i32
%33:i32 = var
%34:i32 = var
%35:i32 = var
%36:i32 = var
%37:i32 = var
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
pc %35 1:i1
pc %36 1:i1
pc %37 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 16:i32
%2 = block 2
%3 = block 2
%4:i32 = var
%5 = ne %4, 0:i32
blockpc %3 0 %5 1:i1
%6 = eq %4, 0:i32
blockpc %3 1 %6 1:i1
%7 = block 2
%8:i32 = var
%9:i32 = var
%10 = sub %8, %9
%11:i32 = var
%12 = ult %10, %11
blockpc %7 0 %12 1:i1
%13:i32 = zext %12
%14 = eq %13, 0:i32
blockpc %7 1 %14 1:i1
%15 = phi %7, %11, %10
%16 = sub 0:i32, %9
%17 = phi %3, %15, %16
%18 = block 2
%19:i32 = var
%20 = and %19, -8:i32
%21 = block 2
%22:i32 = var
%23 = phi %21, %22, %9
%24 = sub %20, %23
%25:i32 = var
%26 = ult %24, %25
blockpc %18 0 %26 1:i1
%27:i32 = var
blockpc %18 1 %27 1:i1
%28 = phi %18, %25, %24
%29 = phi %2, %17, %28
%30 = ult %29, 16:i32
%31:i32 = zext %30
%32 = eq %31, 0:i32
%33:i32 = var
%34:i32 = var
%35:i32 = var
%36:i32 = var
%37:i32 = var
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
pc %35 1:i1
pc %36 1:i1
pc %37 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = lshr %0, 31:i32
%2 = block 2
%3 = block 2
%4:i32 = var
%5 = ne %4, 0:i32
blockpc %3 0 %5 1:i1
%6 = eq %4, 0:i32
blockpc %3 1 %6 1:i1
%7 = block 2
%8:i32 = var
%9:i32 = var
%10 = sub %8, %9
%11:i32 = var
%12 = ult %10, %11
blockpc %7 0 %12 1:i1
%13:i32 = zext %12
%14 = eq %13, 0:i32
blockpc %7 1 %14 1:i1
%15 = phi %7, %11, %10
%16 = sub 0:i32, %9
%17 = phi %3, %15, %16
%18 = block 2
%19:i32 = var
%20 = and %19, -8:i32
%21 = block 2
%22:i32 = var
%23 = phi %21, %22, %9
%24 = sub %20, %23
%25:i32 = var
%26 = ult %24, %25
blockpc %18 0 %26 1:i1
%27:i32 = var
blockpc %18 1 %27 1:i1
%28 = phi %18, %25, %24
%29 = phi %2, %17, %28
%30 = ult %29, 16:i32
%31:i32 = zext %30
%32 = eq %31, 0:i32
%33:i32 = var
%34:i32 = var
%35:i32 = var
%36:i32 = var
%37:i32 = var
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
pc %35 1:i1
pc %36 1:i1
pc %37 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = lshr %0, 31:i32
%2 = shl %1, 2:i32
%3 = block 2
%4 = block 2
%5:i32 = var
%6 = ne %5, 0:i32
blockpc %4 0 %6 1:i1
%7 = eq %5, 0:i32
blockpc %4 1 %7 1:i1
%8 = block 2
%9:i32 = var
%10:i32 = var
%11 = sub %9, %10
%12:i32 = var
%13 = ult %11, %12
blockpc %8 0 %13 1:i1
%14:i32 = zext %13
%15 = eq %14, 0:i32
blockpc %8 1 %15 1:i1
%16 = phi %8, %12, %11
%17 = sub 0:i32, %10
%18 = phi %4, %16, %17
%19 = block 2
%20:i32 = var
%21 = and %20, -8:i32
%22 = block 2
%23:i32 = var
%24 = phi %22, %23, %10
%25 = sub %21, %24
%26:i32 = var
%27 = ult %25, %26
blockpc %19 0 %27 1:i1
%28:i32 = var
blockpc %19 1 %28 1:i1
%29 = phi %19, %26, %25
%30 = phi %3, %18, %29
%31 = ult %30, 16:i32
%32:i32 = zext %31
%33 = eq %32, 0:i32
%34:i32 = var
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
pc %33 1:i1
pc %34 1:i1
pc %35 1:i1
pc %36 1:i1
pc %37 1:i1
pc %38 1:i1
infer %2


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 16:i32
%2:i32 = var
%3 = lshr %2, 31:i32
%4 = shl %3, 2:i32
%5 = add %1, %4
%6 = block 2
%7 = block 2
%8:i32 = var
%9 = ne %8, 0:i32
blockpc %7 0 %9 1:i1
%10 = eq %8, 0:i32
blockpc %7 1 %10 1:i1
%11 = block 2
%12:i32 = var
%13:i32 = var
%14 = sub %12, %13
%15:i32 = var
%16 = ult %14, %15
blockpc %11 0 %16 1:i1
%17:i32 = zext %16
%18 = eq %17, 0:i32
blockpc %11 1 %18 1:i1
%19 = phi %11, %15, %14
%20 = sub 0:i32, %13
%21 = phi %7, %19, %20
%22 = block 2
%23:i32 = var
%24 = and %23, -8:i32
%25 = block 2
%26:i32 = var
%27 = phi %25, %26, %13
%28 = sub %24, %27
%29:i32 = var
%30 = ult %28, %29
blockpc %22 0 %30 1:i1
%31:i32 = var
blockpc %22 1 %31 1:i1
%32 = phi %22, %29, %28
%33 = phi %6, %21, %32
%34 = ult %33, 16:i32
%35:i32 = zext %34
%36 = eq %35, 0:i32
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = var
pc %36 1:i1
pc %37 1:i1
pc %38 1:i1
pc %39 1:i1
pc %40 1:i1
pc %41 1:i1
infer %5


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 8:i32
%2 = block 2
%3 = block 2
%4:i32 = var
%5 = ne %4, 0:i32
blockpc %3 0 %5 1:i1
%6 = eq %4, 0:i32
blockpc %3 1 %6 1:i1
%7 = block 2
%8:i32 = var
%9:i32 = var
%10 = sub %8, %9
%11:i32 = var
%12 = ult %10, %11
blockpc %7 0 %12 1:i1
%13:i32 = zext %12
%14 = eq %13, 0:i32
blockpc %7 1 %14 1:i1
%15 = phi %7, %11, %10
%16 = sub 0:i32, %9
%17 = phi %3, %15, %16
%18 = block 2
%19:i32 = var
%20 = and %19, -8:i32
%21 = block 2
%22:i32 = var
%23 = phi %21, %22, %9
%24 = sub %20, %23
%25:i32 = var
%26 = ult %24, %25
blockpc %18 0 %26 1:i1
%27:i32 = var
blockpc %18 1 %27 1:i1
%28 = phi %18, %25, %24
%29 = phi %2, %17, %28
%30 = ult %29, 16:i32
%31:i32 = zext %30
%32 = eq %31, 0:i32
%33:i32 = var
%34:i32 = var
%35:i32 = var
%36:i32 = var
%37:i32 = var
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
pc %35 1:i1
pc %36 1:i1
pc %37 1:i1
infer %1


; start LHS (in $6)
%0 = block 4
%1 = block 2
%2 = block 2
%3 = block 2
%4 = block 2
%5:i32 = var
%6:i32 = var
%7 = phi %4, %5, %6
%8 = phi %3, %7, 0:i32
%9 = phi %2, %8, 0:i32
%10 = block 2
%11:i32 = var
%12:i32 = var
%13 = phi %10, %11, %12
%14 = phi %1, %9, %13
%15 = block 2
%16:i32 = var
%17 = phi %15, %14, %16
%18 = phi %0, %14, %14, %14, %17
%19 = add %18, 8:i32
%20:i32 = var
%21 = ne %20, 0:i32
blockpc %3 0 %21 1:i1
%22 = eq %20, 0:i32
blockpc %3 1 %22 1:i1
%23 = block 2
%24:i32 = var
%25:i32 = zext %24
%26:i32 = var
%27:i32 = zext %26
%28 = or %25, %27
%29 = eq %28, 0:i32
blockpc %23 0 %29 1:i1
%30:i32 = var
blockpc %23 1 %30 1:i1
%31:i32 = var
%32:i32 = var
%33 = phi %23, %31, %32
%34 = phi %3, %33, 0:i32
%35 = or %34, %8
%36 = ne %35, 0:i32
blockpc %2 0 %36 1:i1
%37:i32 = var
blockpc %2 1 %37 1:i1
%38:i32 = var
blockpc %4 0 %38 1:i1
%39:i32 = var
blockpc %4 1 %39 1:i1
%40:i32 = var
blockpc %10 0 %40 1:i1
%41:i32 = var
blockpc %10 1 %41 1:i1
%42:i32 = var
blockpc %15 0 %42 1:i1
%43:i32 = var
blockpc %15 1 %43 1:i1
%44:i32 = var
%45:i32 = var
%46:i32 = var
%47:i32 = var
%48:i32 = var
pc %44 1:i1
pc %45 1:i1
pc %46 1:i1
pc %47 1:i1
pc %48 1:i1
infer %19


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = add %1, 11:i32 (hasExternalUses)
%3 = and %2, -8:i32 (hasExternalUses)
%4 = block 2
%5 = block 2
%6 = add %1, 11:i32
%7 = and %6, -8:i32 (hasExternalUses)
%8 = phi %5, 16:i32, %7
%9 = block 2
%10 = block 2
%11 = block 2
%12 = block 2
%13:i32 = var
%14 = phi %12, %13, %3
%15 = phi %11, %3, %14
%16 = phi %10, %15, %3
%17 = phi %9, -1:i32, %16
%18 = phi %4, %8, %17
%19 = phi %0, %3, %18
%20:i32 = var
%21 = ule %19, %20
%22 = ult %1, 245:i32
blockpc %4 0 %22 1:i1
%23:i32 = zext %22
%24 = eq %23, 0:i32
blockpc %4 1 %24 1:i1
%25 = ult %1, 11:i32
blockpc %5 0 %25 1:i1
%26:i32 = zext %25
%27 = eq %26, 0:i32
blockpc %5 1 %27 1:i1
%28:i32 = var
blockpc %9 0 %28 1:i1
%29:i32 = var
blockpc %9 1 %29 1:i1
%30:i32 = var
blockpc %10 0 %30 1:i1
%31:i32 = var
blockpc %10 1 %31 1:i1
infer %21


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = add %2, 11:i32 (hasExternalUses)
%4 = and %3, -8:i32 (hasExternalUses)
%5 = block 2
%6 = block 2
%7 = add %2, 11:i32
%8 = and %7, -8:i32 (hasExternalUses)
%9 = phi %6, 16:i32, %8
%10 = block 2
%11 = block 2
%12 = block 2
%13 = block 2
%14:i32 = var
%15 = phi %13, %14, %4
%16 = phi %12, %4, %15
%17 = phi %11, %16, %4
%18 = phi %10, -1:i32, %17
%19 = phi %5, %9, %18
%20 = phi %1, %4, %19
%21 = sub %0, %20
%22 = ult %2, 245:i32
blockpc %5 0 %22 1:i1
%23:i32 = zext %22
%24 = eq %23, 0:i32
blockpc %5 1 %24 1:i1
%25 = ult %2, 11:i32
blockpc %6 0 %25 1:i1
%26:i32 = zext %25
%27 = eq %26, 0:i32
blockpc %6 1 %27 1:i1
%28:i32 = var
blockpc %10 0 %28 1:i1
%29:i32 = var
blockpc %10 1 %29 1:i1
%30:i32 = var
blockpc %11 0 %30 1:i1
%31:i32 = var
blockpc %11 1 %31 1:i1
%32:i32 = var
pc %32 1:i1
infer %21


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = add %2, 11:i32 (hasExternalUses)
%4 = and %3, -8:i32 (hasExternalUses)
%5 = block 2
%6 = block 2
%7 = add %2, 11:i32
%8 = and %7, -8:i32 (hasExternalUses)
%9 = phi %6, 16:i32, %8
%10 = block 2
%11 = block 2
%12 = block 2
%13 = block 2
%14:i32 = var
%15 = phi %13, %14, %4
%16 = phi %12, %4, %15
%17 = phi %11, %16, %4
%18 = phi %10, -1:i32, %17
%19 = phi %5, %9, %18
%20 = phi %1, %4, %19
%21 = sub %0, %20 (hasExternalUses)
%22 = ult 15:i32, %21
%23 = ult %2, 245:i32
blockpc %5 0 %23 1:i1
%24:i32 = zext %23
%25 = eq %24, 0:i32
blockpc %5 1 %25 1:i1
%26 = ult %2, 11:i32
blockpc %6 0 %26 1:i1
%27:i32 = var
blockpc %6 1 %27 1:i1
%28:i32 = var
blockpc %10 0 %28 1:i1
%29:i32 = var
blockpc %10 1 %29 1:i1
%30:i32 = var
blockpc %11 0 %30 1:i1
%31:i32 = var
blockpc %11 1 %31 1:i1
%32:i32 = var
pc %32 1:i1
infer %22


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = add %2, 11:i32 (hasExternalUses)
%4 = and %3, -8:i32 (hasExternalUses)
%5 = block 2
%6 = block 2
%7 = add %2, 11:i32
%8 = and %7, -8:i32 (hasExternalUses)
%9 = phi %6, 16:i32, %8
%10 = block 2
%11 = block 2
%12 = block 2
%13 = block 2
%14:i32 = var
%15 = phi %13, %14, %4
%16 = phi %12, %4, %15
%17 = phi %11, %16, %4
%18 = phi %10, -1:i32, %17
%19 = phi %5, %9, %18
%20 = phi %1, %4, %19
%21 = add %0, %20
%22 = ult %2, 245:i32
blockpc %5 0 %22 1:i1
%23:i32 = zext %22
%24 = eq %23, 0:i32
blockpc %5 1 %24 1:i1
%25 = ult %2, 11:i32
blockpc %6 0 %25 1:i1
%26:i32 = zext %25
%27 = eq %26, 0:i32
blockpc %6 1 %27 1:i1
%28:i32 = var
blockpc %10 0 %28 1:i1
%29:i32 = var
blockpc %10 1 %29 1:i1
%30:i32 = var
blockpc %11 0 %30 1:i1
%31:i32 = var
blockpc %11 1 %31 1:i1
%32:i32 = var
%33:i32 = var
pc %32 1:i1
pc %33 1:i1
infer %21


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = add %2, 11:i32 (hasExternalUses)
%4 = and %3, -8:i32 (hasExternalUses)
%5 = block 2
%6 = block 2
%7 = add %2, 11:i32
%8 = and %7, -8:i32 (hasExternalUses)
%9 = phi %6, 16:i32, %8
%10 = block 2
%11 = block 2
%12 = block 2
%13 = block 2
%14:i32 = var
%15 = phi %13, %14, %4
%16 = phi %12, %4, %15
%17 = phi %11, %16, %4
%18 = phi %10, -1:i32, %17
%19 = phi %5, %9, %18
%20 = phi %1, %4, %19
%21 = sub %0, %20 (hasExternalUses)
%22 = or %21, 1:i32
%23 = ult %2, 245:i32
blockpc %5 0 %23 1:i1
%24:i32 = zext %23
%25 = eq %24, 0:i32
blockpc %5 1 %25 1:i1
%26 = ult %2, 11:i32
blockpc %6 0 %26 1:i1
%27:i32 = var
blockpc %6 1 %27 1:i1
%28:i32 = var
blockpc %10 0 %28 1:i1
%29:i32 = var
blockpc %10 1 %29 1:i1
%30:i32 = var
blockpc %11 0 %30 1:i1
%31:i32 = var
blockpc %11 1 %31 1:i1
%32:i32 = var
%33:i32 = var
pc %32 1:i1
pc %33 1:i1
infer %22


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = add %0, %1
%3 = block 2
%4:i32 = var
%5 = add %4, 11:i32
%6 = and %5, -8:i32
%7 = block 2
%8 = ult %4, 245:i32
blockpc %7 0 %8 1:i1
%9:i32 = zext %8
%10 = eq %9, 0:i32
blockpc %7 1 %10 1:i1
%11 = block 2
%12 = ult %4, 11:i32
blockpc %11 0 %12 1:i1
%13:i32 = zext %12
%14 = eq %13, 0:i32
blockpc %11 1 %14 1:i1
%15 = add %4, 11:i32
%16 = and %15, -8:i32
%17 = phi %11, 16:i32, %16
%18 = block 2
%19 = ult -65:i32, %4
blockpc %18 0 %19 1:i1
%20:i32 = zext %19
%21 = eq %20, 0:i32
blockpc %18 1 %21 1:i1
%22 = block 2
%23:i32 = var
%24 = ne %23, 0:i32
blockpc %22 0 %24 1:i1
%25:i32 = var
blockpc %22 1 %25 1:i1
%26 = block 2
%27 = block 2
%28:i32 = var
%29 = phi %27, %28, %6
%30 = phi %26, %6, %29
%31 = phi %22, %30, %6
%32 = phi %18, -1:i32, %31
%33 = phi %7, %17, %32
%34 = phi %3, %6, %33
%35 = sub %1, %34
%36 = ult 15:i32, %35
%37:i32 = var
pc %36 1:i1
pc %37 1:i1
infer %2


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = add %1, 11:i32 (hasExternalUses)
%3 = and %2, -8:i32 (hasExternalUses)
%4 = block 2
%5 = block 2
%6 = add %1, 11:i32
%7 = and %6, -8:i32 (hasExternalUses)
%8 = phi %5, 16:i32, %7
%9 = block 2
%10 = block 2
%11 = block 2
%12 = block 2
%13:i32 = var
%14 = phi %12, %13, %3
%15 = phi %11, %3, %14
%16 = phi %10, %15, %3
%17 = phi %9, -1:i32, %16
%18 = phi %4, %8, %17
%19 = phi %0, %3, %18
%20 = or %19, 3:i32
%21 = ult %1, 245:i32
blockpc %4 0 %21 1:i1
%22:i32 = zext %21
%23 = eq %22, 0:i32
blockpc %4 1 %23 1:i1
%24 = ult %1, 11:i32
blockpc %5 0 %24 1:i1
%25:i32 = zext %24
%26 = eq %25, 0:i32
blockpc %5 1 %26 1:i1
%27:i32 = var
blockpc %9 0 %27 1:i1
%28:i32 = var
blockpc %9 1 %28 1:i1
%29:i32 = var
blockpc %10 0 %29 1:i1
%30:i32 = var
blockpc %10 1 %30 1:i1
%31:i32 = var
%32:i32 = var
pc %31 1:i1
pc %32 1:i1
infer %20


; start LHS (in $6)
%0:i32 = var
%1 = or %0, 3:i32
%2 = block 2
%3:i32 = var
%4 = add %3, 11:i32
%5 = and %4, -8:i32
%6 = block 2
%7 = ult %3, 245:i32
blockpc %6 0 %7 1:i1
%8:i32 = zext %7
%9 = eq %8, 0:i32
blockpc %6 1 %9 1:i1
%10 = block 2
%11 = ult %3, 11:i32
blockpc %10 0 %11 1:i1
%12:i32 = zext %11
%13 = eq %12, 0:i32
blockpc %10 1 %13 1:i1
%14 = add %3, 11:i32
%15 = and %14, -8:i32
%16 = phi %10, 16:i32, %15
%17 = block 2
%18 = ult -65:i32, %3
blockpc %17 0 %18 1:i1
%19:i32 = zext %18
%20 = eq %19, 0:i32
blockpc %17 1 %20 1:i1
%21 = block 2
%22:i32 = var
blockpc %21 0 %22 1:i1
%23:i32 = var
blockpc %21 1 %23 1:i1
%24 = block 2
%25 = block 2
%26:i32 = var
%27 = phi %25, %26, %5
%28 = phi %24, %5, %27
%29 = phi %21, %28, %5
%30 = phi %17, -1:i32, %29
%31 = phi %6, %16, %30
%32 = phi %2, %5, %31
%33 = sub %0, %32
%34 = ult 15:i32, %33
%35:i32 = zext %34
%36 = eq %35, 0:i32
%37:i32 = var
pc %36 1:i1
pc %37 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = add %0, %1
%3 = block 2
%4:i32 = var
%5 = add %4, 11:i32
%6 = and %5, -8:i32
%7 = block 2
%8 = ult %4, 245:i32
blockpc %7 0 %8 1:i1
%9:i32 = zext %8
%10 = eq %9, 0:i32
blockpc %7 1 %10 1:i1
%11 = block 2
%12 = ult %4, 11:i32
blockpc %11 0 %12 1:i1
%13:i32 = zext %12
%14 = eq %13, 0:i32
blockpc %11 1 %14 1:i1
%15 = add %4, 11:i32
%16 = and %15, -8:i32
%17 = phi %11, 16:i32, %16
%18 = block 2
%19 = ult -65:i32, %4
blockpc %18 0 %19 1:i1
%20:i32 = zext %19
%21 = eq %20, 0:i32
blockpc %18 1 %21 1:i1
%22 = block 2
%23:i32 = var
blockpc %22 0 %23 1:i1
%24:i32 = var
blockpc %22 1 %24 1:i1
%25 = block 2
%26 = block 2
%27:i32 = var
%28 = phi %26, %27, %6
%29 = phi %25, %6, %28
%30 = phi %22, %29, %6
%31 = phi %18, -1:i32, %30
%32 = phi %7, %17, %31
%33 = phi %3, %6, %32
%34 = sub %1, %33
%35 = ult 15:i32, %34
%36:i32 = zext %35
%37 = eq %36, 0:i32
%38:i32 = var
pc %37 1:i1
pc %38 1:i1
infer %2


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = add %0, %1
%3 = add %2, 4:i32
%4 = block 2
%5:i32 = var
%6 = add %5, 11:i32
%7 = and %6, -8:i32
%8 = block 2
%9 = ult %5, 245:i32
blockpc %8 0 %9 1:i1
%10:i32 = zext %9
%11 = eq %10, 0:i32
blockpc %8 1 %11 1:i1
%12 = block 2
%13 = ult %5, 11:i32
blockpc %12 0 %13 1:i1
%14:i32 = zext %13
%15 = eq %14, 0:i32
blockpc %12 1 %15 1:i1
%16 = add %5, 11:i32
%17 = and %16, -8:i32
%18 = phi %12, 16:i32, %17
%19 = block 2
%20 = ult -65:i32, %5
blockpc %19 0 %20 1:i1
%21:i32 = zext %20
%22 = eq %21, 0:i32
blockpc %19 1 %22 1:i1
%23 = block 2
%24:i32 = var
blockpc %23 0 %24 1:i1
%25:i32 = var
blockpc %23 1 %25 1:i1
%26 = block 2
%27 = block 2
%28:i32 = var
%29 = phi %27, %28, %7
%30 = phi %26, %7, %29
%31 = phi %23, %30, %7
%32 = phi %19, -1:i32, %31
%33 = phi %8, %18, %32
%34 = phi %4, %7, %33
%35 = sub %1, %34
%36 = ult 15:i32, %35
%37:i32 = zext %36
%38 = eq %37, 0:i32
%39:i32 = var
pc %38 1:i1
pc %39 1:i1
infer %3


; start LHS (in $6)
%0:i32 = var
%1 = or %0, 1:i32
%2:i32 = var
%3 = block 2
%4:i32 = var
%5 = add %4, 11:i32
%6 = and %5, -8:i32
%7 = block 2
%8 = ult %4, 245:i32
blockpc %7 0 %8 1:i1
%9:i32 = zext %8
%10 = eq %9, 0:i32
blockpc %7 1 %10 1:i1
%11 = block 2
%12 = ult %4, 11:i32
blockpc %11 0 %12 1:i1
%13:i32 = zext %12
%14 = eq %13, 0:i32
blockpc %11 1 %14 1:i1
%15 = add %4, 11:i32
%16 = and %15, -8:i32
%17 = phi %11, 16:i32, %16
%18 = block 2
%19 = ult -65:i32, %4
blockpc %18 0 %19 1:i1
%20:i32 = zext %19
%21 = eq %20, 0:i32
blockpc %18 1 %21 1:i1
%22 = block 2
%23:i32 = var
blockpc %22 0 %23 1:i1
%24:i32 = var
blockpc %22 1 %24 1:i1
%25 = block 2
%26 = block 2
%27:i32 = var
%28 = phi %26, %27, %6
%29 = phi %25, %6, %28
%30 = phi %22, %29, %6
%31 = phi %18, -1:i32, %30
%32 = phi %7, %17, %31
%33 = phi %3, %6, %32
%34 = sub %2, %33
%35 = ult 15:i32, %34
%36:i32 = zext %35
%37 = eq %36, 0:i32
%38:i32 = var
pc %37 1:i1
pc %38 1:i1
infer %1


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = add %1, 11:i32 (hasExternalUses)
%3 = and %2, -8:i32 (hasExternalUses)
%4 = block 2
%5 = block 2
%6 = add %1, 11:i32
%7 = and %6, -8:i32 (hasExternalUses)
%8 = phi %5, 16:i32, %7
%9 = block 2
%10 = block 2
%11 = block 2
%12 = block 2
%13:i32 = var
%14 = phi %12, %13, %3
%15 = phi %11, %3, %14
%16 = phi %10, %15, %3
%17 = phi %9, -1:i32, %16
%18 = phi %4, %8, %17
%19 = phi %0, %3, %18
%20:i32 = var
%21 = ult %19, %20
%22 = ult %1, 245:i32
blockpc %4 0 %22 1:i1
%23:i32 = zext %22
%24 = eq %23, 0:i32
blockpc %4 1 %24 1:i1
%25 = ult %1, 11:i32
blockpc %5 0 %25 1:i1
%26:i32 = zext %25
%27 = eq %26, 0:i32
blockpc %5 1 %27 1:i1
%28:i32 = var
blockpc %9 0 %28 1:i1
%29:i32 = var
blockpc %9 1 %29 1:i1
%30:i32 = var
blockpc %10 0 %30 1:i1
%31:i32 = var
blockpc %10 1 %31 1:i1
infer %21


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = add %2, 11:i32 (hasExternalUses)
%4 = and %3, -8:i32 (hasExternalUses)
%5 = block 2
%6 = block 2
%7 = add %2, 11:i32
%8 = and %7, -8:i32 (hasExternalUses)
%9 = phi %6, 16:i32, %8
%10 = block 2
%11 = block 2
%12 = block 2
%13 = block 2
%14:i32 = var
%15 = phi %13, %14, %4
%16 = phi %12, %4, %15
%17 = phi %11, %16, %4
%18 = phi %10, -1:i32, %17
%19 = phi %5, %9, %18
%20 = phi %1, %4, %19
%21 = sub %0, %20
%22 = ult %2, 245:i32
blockpc %5 0 %22 1:i1
%23:i32 = zext %22
%24 = eq %23, 0:i32
blockpc %5 1 %24 1:i1
%25 = ult %2, 11:i32
blockpc %6 0 %25 1:i1
%26:i32 = zext %25
%27 = eq %26, 0:i32
blockpc %6 1 %27 1:i1
%28:i32 = var
blockpc %10 0 %28 1:i1
%29:i32 = var
blockpc %10 1 %29 1:i1
%30:i32 = var
blockpc %11 0 %30 1:i1
%31:i32 = var
blockpc %11 1 %31 1:i1
%32:i32 = var
pc %32 1:i1
infer %21


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = block 2
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7:i32 = var
%8 = phi %6, %7, %1
%9 = phi %5, %1, %8
%10 = phi %4, %9, %1
%11 = phi %3, %1, %10
%12 = phi %2, %1, %11
%13 = phi %0, %1, %12
%14 = and %13, -16:i32
%15:i32 = var
%16 = ult %15, 245:i32
blockpc %2 0 %16 1:i1
%17:i32 = zext %16
%18 = eq %17, 0:i32
blockpc %2 1 %18 1:i1
%19 = ult -65:i32, %15
blockpc %3 0 %19 1:i1
%20:i32 = zext %19
%21 = eq %20, 0:i32
blockpc %3 1 %21 1:i1
%22:i32 = var
%23 = ne %22, 0:i32
blockpc %4 0 %23 1:i1
%24 = eq %22, 0:i32
blockpc %4 1 %24 1:i1
%25:i32 = var
pc %25 1:i1
infer %14


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = block 2
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7:i32 = var
%8 = phi %6, %7, %1
%9 = phi %5, %1, %8
%10 = phi %4, %9, %1
%11 = phi %3, %1, %10
%12 = phi %2, %1, %11
%13 = phi %0, %1, %12
%14 = and %13, -16:i32
%15 = xor %14, 1431655768:i32
%16:i32 = var
%17 = ult %16, 245:i32
blockpc %2 0 %17 1:i1
%18:i32 = zext %17
%19 = eq %18, 0:i32
blockpc %2 1 %19 1:i1
%20 = ult -65:i32, %16
blockpc %3 0 %20 1:i1
%21:i32 = zext %20
%22 = eq %21, 0:i32
blockpc %3 1 %22 1:i1
%23:i32 = var
%24 = ne %23, 0:i32
blockpc %4 0 %24 1:i1
%25:i32 = var
blockpc %4 1 %25 1:i1
%26:i32 = var
pc %26 1:i1
infer %15


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = add %1, 11:i32 (hasExternalUses)
%3 = and %2, -8:i32 (hasExternalUses)
%4 = block 2
%5 = block 2
%6 = add %1, 11:i32
%7 = and %6, -8:i32 (hasExternalUses)
%8 = phi %5, 16:i32, %7
%9 = block 2
%10 = block 2
%11 = block 2
%12 = block 2
%13:i32 = var
%14 = phi %12, %13, %3
%15 = phi %11, %3, %14
%16 = phi %10, %15, %3
%17 = phi %9, -1:i32, %16
%18 = phi %4, %8, %17
%19 = phi %0, %3, %18
%20 = add %19, 47:i32
%21 = ult %1, 245:i32
blockpc %4 0 %21 1:i1
%22:i32 = zext %21
%23 = eq %22, 0:i32
blockpc %4 1 %23 1:i1
%24 = ult %1, 11:i32
blockpc %5 0 %24 1:i1
%25:i32 = zext %24
%26 = eq %25, 0:i32
blockpc %5 1 %26 1:i1
%27:i32 = var
blockpc %9 0 %27 1:i1
%28:i32 = var
blockpc %9 1 %28 1:i1
%29:i32 = var
blockpc %10 0 %29 1:i1
%30:i32 = var
blockpc %10 1 %30 1:i1
infer %20


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = phi %0, %1, 4096:i32
%3 = block 2
%4:i32 = var
%5 = add %4, 11:i32 (hasExternalUses)
%6 = and %5, -8:i32 (hasExternalUses)
%7 = block 2
%8 = block 2
%9 = add %4, 11:i32
%10 = and %9, -8:i32 (hasExternalUses)
%11 = phi %8, 16:i32, %10
%12 = block 2
%13 = block 2
%14 = block 2
%15 = block 2
%16:i32 = var
%17 = phi %15, %16, %6
%18 = phi %14, %6, %17
%19 = phi %13, %18, %6
%20 = phi %12, -1:i32, %19
%21 = phi %7, %11, %20
%22 = phi %3, %6, %21
%23 = add %22, 47:i32 (hasExternalUses)
%24 = add %2, %23
%25:i32 = var
%26 = ne %25, 0:i32
blockpc %0 0 %26 1:i1
%27 = eq %25, 0:i32
blockpc %0 1 %27 1:i1
%28:i32 = var
blockpc %7 0 %28 1:i1
%29:i32 = var
blockpc %7 1 %29 1:i1
%30:i32 = var
blockpc %8 0 %30 1:i1
%31:i32 = var
blockpc %8 1 %31 1:i1
%32:i32 = var
blockpc %12 0 %32 1:i1
%33:i32 = var
blockpc %12 1 %33 1:i1
%34:i32 = var
blockpc %13 0 %34 1:i1
%35:i32 = var
blockpc %13 1 %35 1:i1
infer %24


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = phi %0, %1, 4096:i32
%3 = sub 0:i32, %2
%4:i32 = var
%5 = ne %4, 0:i32
blockpc %0 0 %5 1:i1
%6 = eq %4, 0:i32
blockpc %0 1 %6 1:i1
infer %3


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = phi %0, %1, 4096:i32
%3 = block 2
%4:i32 = var
%5 = add %4, 11:i32 (hasExternalUses)
%6 = and %5, -8:i32 (hasExternalUses)
%7 = block 2
%8 = block 2
%9 = add %4, 11:i32
%10 = and %9, -8:i32 (hasExternalUses)
%11 = phi %8, 16:i32, %10
%12 = block 2
%13 = block 2
%14 = block 2
%15 = block 2
%16:i32 = var
%17 = phi %15, %16, %6
%18 = phi %14, %6, %17
%19 = phi %13, %18, %6
%20 = phi %12, -1:i32, %19
%21 = phi %7, %11, %20
%22 = phi %3, %6, %21
%23 = add %22, 47:i32 (hasExternalUses)
%24 = add %2, %23 (hasExternalUses)
%25 = sub 0:i32, %2 (hasExternalUses)
%26 = and %24, %25
%27:i32 = var
%28 = ne %27, 0:i32
blockpc %0 0 %28 1:i1
%29:i32 = var
blockpc %0 1 %29 1:i1
%30:i32 = var
blockpc %7 0 %30 1:i1
%31:i32 = var
blockpc %7 1 %31 1:i1
%32:i32 = var
blockpc %8 0 %32 1:i1
%33:i32 = var
blockpc %8 1 %33 1:i1
%34:i32 = var
blockpc %12 0 %34 1:i1
%35:i32 = var
blockpc %12 1 %35 1:i1
%36:i32 = var
blockpc %13 0 %36 1:i1
%37:i32 = var
blockpc %13 1 %37 1:i1
infer %26


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = phi %0, %1, 4096:i32
%3 = block 2
%4:i32 = var
%5 = add %4, 11:i32 (hasExternalUses)
%6 = and %5, -8:i32 (hasExternalUses)
%7 = block 2
%8 = block 2
%9 = add %4, 11:i32
%10 = and %9, -8:i32 (hasExternalUses)
%11 = phi %8, 16:i32, %10
%12 = block 2
%13 = block 2
%14 = block 2
%15 = block 2
%16:i32 = var
%17 = phi %15, %16, %6
%18 = phi %14, %6, %17
%19 = phi %13, %18, %6
%20 = phi %12, -1:i32, %19
%21 = phi %7, %11, %20
%22 = phi %3, %6, %21
%23 = add %22, 47:i32 (hasExternalUses)
%24 = add %2, %23 (hasExternalUses)
%25 = sub 0:i32, %2 (hasExternalUses)
%26 = and %24, %25 (hasExternalUses)
%27 = ule %26, %22
%28:i32 = var
%29 = ne %28, 0:i32
blockpc %0 0 %29 1:i1
%30:i32 = var
blockpc %0 1 %30 1:i1
%31:i32 = var
blockpc %7 0 %31 1:i1
%32:i32 = var
blockpc %7 1 %32 1:i1
%33:i32 = var
blockpc %8 0 %33 1:i1
%34:i32 = var
blockpc %8 1 %34 1:i1
%35:i32 = var
blockpc %12 0 %35 1:i1
%36:i32 = var
blockpc %12 1 %36 1:i1
%37:i32 = var
blockpc %13 0 %37 1:i1
%38:i32 = var
blockpc %13 1 %38 1:i1
infer %27


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = phi %1, %2, 4096:i32
%4 = block 2
%5:i32 = var
%6 = add %5, 11:i32 (hasExternalUses)
%7 = and %6, -8:i32 (hasExternalUses)
%8 = block 2
%9 = block 2
%10 = add %5, 11:i32
%11 = and %10, -8:i32 (hasExternalUses)
%12 = phi %9, 16:i32, %11
%13 = block 2
%14 = block 2
%15 = block 2
%16 = block 2
%17:i32 = var
%18 = phi %16, %17, %7
%19 = phi %15, %7, %18
%20 = phi %14, %19, %7
%21 = phi %13, -1:i32, %20
%22 = phi %8, %12, %21
%23 = phi %4, %7, %22
%24 = add %23, 47:i32 (hasExternalUses)
%25 = add %3, %24 (hasExternalUses)
%26 = sub 0:i32, %3 (hasExternalUses)
%27 = and %25, %26 (hasExternalUses)
%28 = add %0, %27
%29:i32 = var
%30 = ne %29, 0:i32
blockpc %1 0 %30 1:i1
%31:i32 = var
blockpc %1 1 %31 1:i1
%32:i32 = var
blockpc %8 0 %32 1:i1
%33:i32 = var
blockpc %8 1 %33 1:i1
%34:i32 = var
blockpc %9 0 %34 1:i1
%35:i32 = var
blockpc %9 1 %35 1:i1
%36:i32 = var
blockpc %13 0 %36 1:i1
%37:i32 = var
blockpc %13 1 %37 1:i1
%38:i32 = var
blockpc %14 0 %38 1:i1
%39:i32 = var
blockpc %14 1 %39 1:i1
%40:i32 = var
pc %40 1:i1
infer %28


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = phi %1, %2, 4096:i32
%4 = block 2
%5:i32 = var
%6 = add %5, 11:i32 (hasExternalUses)
%7 = and %6, -8:i32 (hasExternalUses)
%8 = block 2
%9 = block 2
%10:i32 = var
%11 = and %10, -8:i32 (hasExternalUses)
%12 = phi %9, 16:i32, %11
%13 = block 2
%14 = block 2
%15 = block 2
%16 = block 2
%17:i32 = var
%18 = phi %16, %17, %7
%19 = phi %15, %7, %18
%20 = phi %14, %19, %7
%21 = phi %13, -1:i32, %20
%22 = phi %8, %12, %21
%23 = phi %4, %7, %22
%24 = add %23, 47:i32 (hasExternalUses)
%25 = add %3, %24 (hasExternalUses)
%26 = sub 0:i32, %3 (hasExternalUses)
%27 = and %25, %26 (hasExternalUses)
%28 = add %0, %27 (hasExternalUses)
%29 = ule %28, %0
%30:i32 = var
blockpc %1 0 %30 1:i1
%31:i32 = var
blockpc %1 1 %31 1:i1
%32:i32 = var
blockpc %8 0 %32 1:i1
%33:i32 = var
blockpc %8 1 %33 1:i1
%34:i32 = var
blockpc %9 0 %34 1:i1
%35:i32 = var
blockpc %9 1 %35 1:i1
%36:i32 = var
blockpc %13 0 %36 1:i1
%37:i32 = var
blockpc %13 1 %37 1:i1
%38:i32 = var
blockpc %14 0 %38 1:i1
%39:i32 = var
blockpc %14 1 %39 1:i1
%40:i32 = var
pc %40 1:i1
infer %29


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = block 2
%3:i32 = var
%4 = phi %2, %3, 4096:i32
%5 = block 2
%6:i32 = var
%7 = add %6, 11:i32 (hasExternalUses)
%8 = and %7, -8:i32 (hasExternalUses)
%9 = block 2
%10 = block 2
%11:i32 = var
%12 = and %11, -8:i32 (hasExternalUses)
%13 = phi %10, 16:i32, %12
%14 = block 2
%15 = block 2
%16 = block 2
%17 = block 2
%18:i32 = var
%19 = phi %17, %18, %8
%20 = phi %16, %8, %19
%21 = phi %15, %20, %8
%22 = phi %14, -1:i32, %21
%23 = phi %9, %13, %22
%24 = phi %5, %8, %23
%25 = add %24, 47:i32 (hasExternalUses)
%26 = add %4, %25 (hasExternalUses)
%27 = sub 0:i32, %4 (hasExternalUses)
%28 = and %26, %27 (hasExternalUses)
%29 = add %1, %28 (hasExternalUses)
%30 = ult %0, %29
%31:i32 = var
blockpc %2 0 %31 1:i1
%32:i32 = var
blockpc %2 1 %32 1:i1
%33:i32 = var
blockpc %9 0 %33 1:i1
%34:i32 = var
blockpc %9 1 %34 1:i1
%35:i32 = var
blockpc %10 0 %35 1:i1
%36:i32 = var
blockpc %10 1 %36 1:i1
%37:i32 = var
blockpc %14 0 %37 1:i1
%38:i32 = var
blockpc %14 1 %38 1:i1
%39:i32 = var
blockpc %15 0 %39 1:i1
%40:i32 = var
blockpc %15 1 %40 1:i1
%41:i32 = var
pc %41 1:i1
infer %30


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = phi %1, %2, 4096:i32
%4 = block 2
%5:i32 = var
%6 = and %5, -8:i32 (hasExternalUses)
%7 = block 2
%8 = block 2
%9:i32 = var
%10 = phi %8, 16:i32, %9
%11 = block 2
%12 = block 2
%13 = block 2
%14 = block 2
%15:i32 = var
%16 = phi %14, %15, %6
%17 = phi %13, %6, %16
%18 = phi %12, %17, %6
%19 = phi %11, -1:i32, %18
%20 = phi %7, %10, %19
%21 = phi %4, %6, %20
%22 = add %21, 47:i32 (hasExternalUses)
%23 = add %3, %22 (hasExternalUses)
%24 = sub 0:i32, %3 (hasExternalUses)
%25 = and %23, %24 (hasExternalUses)
%26 = add %0, %25
%27 = ule %26, %0
%28:i32 = zext %27
%29:i32 = var
%30 = ult %29, %26
%31:i32 = zext %30
%32 = or %28, %31
%33:i32 = var
blockpc %1 0 %33 1:i1
%34:i32 = var
blockpc %1 1 %34 1:i1
%35:i32 = var
blockpc %7 0 %35 1:i1
%36:i32 = var
blockpc %7 1 %36 1:i1
%37:i32 = var
blockpc %8 0 %37 1:i1
%38:i32 = var
blockpc %8 1 %38 1:i1
%39:i32 = var
blockpc %11 0 %39 1:i1
%40:i32 = var
blockpc %11 1 %40 1:i1
%41:i32 = var
blockpc %12 0 %41 1:i1
%42:i32 = var
blockpc %12 1 %42 1:i1
%43:i32 = var
pc %43 1:i1
infer %32


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = add %1, 11:i32 (hasExternalUses)
%3 = and %2, -8:i32 (hasExternalUses)
%4 = block 2
%5 = block 2
%6 = add %1, 11:i32
%7 = and %6, -8:i32 (hasExternalUses)
%8 = phi %5, 16:i32, %7
%9 = block 2
%10 = block 2
%11 = block 2
%12 = block 2
%13:i32 = var
%14 = phi %12, %13, %3
%15 = phi %11, %3, %14
%16 = phi %10, %15, %3
%17 = phi %9, -1:i32, %16
%18 = phi %4, %8, %17
%19 = phi %0, %3, %18
%20 = add %19, 48:i32
%21 = ult %1, 245:i32
blockpc %4 0 %21 1:i1
%22:i32 = zext %21
%23 = eq %22, 0:i32
blockpc %4 1 %23 1:i1
%24 = ult %1, 11:i32
blockpc %5 0 %24 1:i1
%25:i32 = zext %24
%26 = eq %25, 0:i32
blockpc %5 1 %26 1:i1
%27:i32 = var
blockpc %9 0 %27 1:i1
%28:i32 = var
blockpc %9 1 %28 1:i1
%29:i32 = var
blockpc %10 0 %29 1:i1
%30:i32 = var
blockpc %10 1 %30 1:i1
infer %20


; start LHS (in $6)
%0:i32 = var
%1 = and %0, 4:i32
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = eq %0, 0:i32
%2:i32 = var
%3 = and %2, 4:i32
%4 = eq %3, 0:i32
pc %4 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = ule %0, %1
%3:i32 = var
%4 = and %3, 4:i32
%5 = eq %4, 0:i32
pc %5 1:i1
infer %2


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 4:i32
%2:i32 = var
%3:i32 = var
%4 = ule %2, %3
%5:i32 = var
%6 = and %5, 4:i32
%7 = eq %6, 0:i32
pc %4 1:i1
pc %7 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = add %0, %1
%3:i32 = var
%4 = ule %0, %3
%5:i32 = var
%6 = and %5, 4:i32
%7 = eq %6, 0:i32
pc %4 1:i1
pc %7 1:i1
infer %2


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3 = add %1, %2
%4 = ult %0, %3
%5 = ule %1, %0
%6:i32 = var
%7 = and %6, 4:i32
%8 = eq %7, 0:i32
pc %5 1:i1
pc %8 1:i1
infer %4


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = phi %0, %1, 4096:i32
%3 = block 2
%4:i32 = var
%5 = add %4, 11:i32 (hasExternalUses)
%6 = and %5, -8:i32 (hasExternalUses)
%7 = block 2
%8 = block 2
%9 = add %4, 11:i32
%10 = and %9, -8:i32 (hasExternalUses)
%11 = phi %8, 16:i32, %10
%12 = block 2
%13 = block 2
%14 = block 2
%15 = block 2
%16:i32 = var
%17 = phi %15, %16, %6
%18 = phi %14, %6, %17
%19 = phi %13, %18, %6
%20 = phi %12, -1:i32, %19
%21 = phi %7, %11, %20
%22 = phi %3, %6, %21
%23 = add %22, 47:i32 (hasExternalUses)
%24 = add %2, %23 (hasExternalUses)
%25:i32 = var
%26 = sub %24, %25
%27:i32 = var
%28 = ne %27, 0:i32
blockpc %0 0 %28 1:i1
%29:i32 = var
blockpc %0 1 %29 1:i1
%30:i32 = var
blockpc %7 0 %30 1:i1
%31:i32 = var
blockpc %7 1 %31 1:i1
%32:i32 = var
blockpc %8 0 %32 1:i1
%33:i32 = var
blockpc %8 1 %33 1:i1
%34:i32 = var
blockpc %12 0 %34 1:i1
%35:i32 = var
blockpc %12 1 %35 1:i1
%36:i32 = var
blockpc %13 0 %36 1:i1
%37:i32 = var
blockpc %13 1 %37 1:i1
%38:i32 = var
pc %38 1:i1
infer %26


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = phi %0, %1, 4096:i32
%3 = block 2
%4:i32 = var
%5 = add %4, 11:i32 (hasExternalUses)
%6 = and %5, -8:i32 (hasExternalUses)
%7 = block 2
%8 = block 2
%9 = add %4, 11:i32
%10 = and %9, -8:i32 (hasExternalUses)
%11 = phi %8, 16:i32, %10
%12 = block 2
%13 = block 2
%14 = block 2
%15 = block 2
%16:i32 = var
%17 = phi %15, %16, %6
%18 = phi %14, %6, %17
%19 = phi %13, %18, %6
%20 = phi %12, -1:i32, %19
%21 = phi %7, %11, %20
%22 = phi %3, %6, %21
%23 = add %22, 47:i32 (hasExternalUses)
%24 = add %2, %23 (hasExternalUses)
%25:i32 = var
%26 = sub %24, %25
%27 = sub 0:i32, %2 (hasExternalUses)
%28 = and %26, %27
%29:i32 = var
%30 = ne %29, 0:i32
blockpc %0 0 %30 1:i1
%31:i32 = var
blockpc %0 1 %31 1:i1
%32:i32 = var
blockpc %7 0 %32 1:i1
%33:i32 = var
blockpc %7 1 %33 1:i1
%34:i32 = var
blockpc %8 0 %34 1:i1
%35:i32 = var
blockpc %8 1 %35 1:i1
%36:i32 = var
blockpc %12 0 %36 1:i1
%37:i32 = var
blockpc %12 1 %37 1:i1
%38:i32 = var
blockpc %13 0 %38 1:i1
%39:i32 = var
blockpc %13 1 %39 1:i1
%40:i32 = var
pc %40 1:i1
infer %28


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = phi %0, %1, 4096:i32
%3 = block 2
%4:i32 = var
%5 = add %4, 11:i32 (hasExternalUses)
%6 = and %5, -8:i32 (hasExternalUses)
%7 = block 2
%8 = block 2
%9:i32 = var
%10 = and %9, -8:i32 (hasExternalUses)
%11 = phi %8, 16:i32, %10
%12 = block 2
%13 = block 2
%14 = block 2
%15 = block 2
%16:i32 = var
%17 = phi %15, %16, %6
%18 = phi %14, %6, %17
%19 = phi %13, %18, %6
%20 = phi %12, -1:i32, %19
%21 = phi %7, %11, %20
%22 = phi %3, %6, %21
%23 = add %22, 47:i32 (hasExternalUses)
%24 = add %2, %23 (hasExternalUses)
%25:i32 = var
%26 = sub %24, %25
%27 = sub 0:i32, %2 (hasExternalUses)
%28 = and %26, %27 (hasExternalUses)
%29 = ult %28, 2147483647:i32
%30:i32 = var
blockpc %0 0 %30 1:i1
%31:i32 = var
blockpc %0 1 %31 1:i1
%32:i32 = var
blockpc %7 0 %32 1:i1
%33:i32 = var
blockpc %7 1 %33 1:i1
%34:i32 = var
blockpc %8 0 %34 1:i1
%35:i32 = var
blockpc %8 1 %35 1:i1
%36:i32 = var
blockpc %12 0 %36 1:i1
%37:i32 = var
blockpc %12 1 %37 1:i1
%38:i32 = var
blockpc %13 0 %38 1:i1
%39:i32 = var
blockpc %13 1 %39 1:i1
%40:i32 = var
pc %40 1:i1
infer %29


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = add %0, %1
%3 = block 2
%4:i32 = var
%5 = ne %4, 0:i32
blockpc %3 0 %5 1:i1
%6 = eq %4, 0:i32
blockpc %3 1 %6 1:i1
%7:i32 = var
%8 = phi %3, %7, 4096:i32
%9 = block 2
%10:i32 = var
%11 = add %10, 11:i32
%12 = and %11, -8:i32
%13 = block 2
%14 = ult %10, 245:i32
blockpc %13 0 %14 1:i1
%15:i32 = zext %14
%16 = eq %15, 0:i32
blockpc %13 1 %16 1:i1
%17 = block 2
%18:i32 = var
blockpc %17 0 %18 1:i1
%19:i32 = var
blockpc %17 1 %19 1:i1
%20:i32 = var
%21 = and %20, -8:i32
%22 = phi %17, 16:i32, %21
%23 = block 2
%24:i32 = var
blockpc %23 0 %24 1:i1
%25:i32 = var
blockpc %23 1 %25 1:i1
%26 = block 2
%27:i32 = var
blockpc %26 0 %27 1:i1
%28:i32 = var
blockpc %26 1 %28 1:i1
%29 = block 2
%30 = block 2
%31:i32 = var
%32 = phi %30, %31, %12
%33 = phi %29, %12, %32
%34 = phi %26, %33, %12
%35 = phi %23, -1:i32, %34
%36 = phi %13, %22, %35
%37 = phi %9, %12, %36
%38 = add %37, 47:i32
%39 = add %8, %38
%40:i32 = var
%41 = sub %39, %40
%42:i32 = var
%43 = and %41, %42
%44 = ult %43, 2147483647:i32
%45:i32 = var
pc %44 1:i1
pc %45 1:i1
infer %2


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3 = add %1, %2
%4 = eq %0, %3
%5 = block 2
%6:i32 = var
%7 = ne %6, 0:i32
blockpc %5 0 %7 1:i1
%8 = eq %6, 0:i32
blockpc %5 1 %8 1:i1
%9:i32 = var
%10 = phi %5, %9, 4096:i32
%11 = block 2
%12:i32 = var
%13 = add %12, 11:i32
%14 = and %13, -8:i32
%15 = block 2
%16 = ult %12, 245:i32
blockpc %15 0 %16 1:i1
%17:i32 = zext %16
%18 = eq %17, 0:i32
blockpc %15 1 %18 1:i1
%19 = block 2
%20:i32 = var
blockpc %19 0 %20 1:i1
%21:i32 = var
blockpc %19 1 %21 1:i1
%22:i32 = var
%23 = and %22, -8:i32
%24 = phi %19, 16:i32, %23
%25 = block 2
%26:i32 = var
blockpc %25 0 %26 1:i1
%27:i32 = var
blockpc %25 1 %27 1:i1
%28 = block 2
%29:i32 = var
blockpc %28 0 %29 1:i1
%30:i32 = var
blockpc %28 1 %30 1:i1
%31 = block 2
%32 = block 2
%33:i32 = var
%34 = phi %32, %33, %14
%35 = phi %31, %14, %34
%36 = phi %28, %35, %14
%37 = phi %25, -1:i32, %36
%38 = phi %15, %24, %37
%39 = phi %11, %14, %38
%40 = add %39, 47:i32
%41 = add %10, %40
%42:i32 = var
%43 = sub %41, %42
%44:i32 = var
%45 = and %43, %44
%46 = ult %45, 2147483647:i32
%47:i32 = var
pc %46 1:i1
pc %47 1:i1
infer %4


; start LHS (in $6)
%0:i32 = var
%1 = ne %0, -1:i32
%2:i32 = var
%3:i32 = var
%4 = add %2, %3
%5 = eq %0, %4
%6 = block 2
%7:i32 = var
%8 = ne %7, 0:i32
blockpc %6 0 %8 1:i1
%9 = eq %7, 0:i32
blockpc %6 1 %9 1:i1
%10:i32 = var
%11 = phi %6, %10, 4096:i32
%12 = block 2
%13:i32 = var
%14 = add %13, 11:i32
%15 = and %14, -8:i32
%16 = block 2
%17 = ult %13, 245:i32
blockpc %16 0 %17 1:i1
%18:i32 = zext %17
%19 = eq %18, 0:i32
blockpc %16 1 %19 1:i1
%20 = block 2
%21:i32 = var
blockpc %20 0 %21 1:i1
%22:i32 = var
blockpc %20 1 %22 1:i1
%23:i32 = var
%24 = and %23, -8:i32
%25 = phi %20, 16:i32, %24
%26 = block 2
%27:i32 = var
blockpc %26 0 %27 1:i1
%28:i32 = var
blockpc %26 1 %28 1:i1
%29 = block 2
%30:i32 = var
blockpc %29 0 %30 1:i1
%31:i32 = var
blockpc %29 1 %31 1:i1
%32 = block 2
%33 = block 2
%34:i32 = var
%35 = phi %33, %34, %15
%36 = phi %32, %15, %35
%37 = phi %29, %36, %15
%38 = phi %26, -1:i32, %37
%39 = phi %16, %25, %38
%40 = phi %12, %15, %39
%41 = add %40, 47:i32
%42 = add %11, %41
%43:i32 = var
%44 = sub %42, %43
%45:i32 = var
%46 = and %44, %45
%47 = ult %46, 2147483647:i32
%48:i32 = var
pc %5 1:i1
pc %47 1:i1
pc %48 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = eq %0, -1:i32
%2:i32 = var
%3 = and %2, 4:i32
%4 = eq %3, 0:i32
pc %4 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = add %0, -1:i32
%2:i32 = var
%3 = eq %2, -1:i32
%4:i32 = zext %3
%5 = eq %4, 0:i32
%6:i32 = var
%7 = and %6, 4:i32
%8 = eq %7, 0:i32
pc %5 1:i1
pc %8 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = add %0, -1:i32 (hasExternalUses)
%2:i32 = var
%3 = add %1, %2
%4 = eq %2, -1:i32
%5:i32 = zext %4
%6 = eq %5, 0:i32
%7:i32 = var
%8 = and %7, 4:i32
%9 = eq %8, 0:i32
pc %6 1:i1
pc %9 1:i1
infer %3


; start LHS (in $6)
%0:i32 = var
%1 = sub 0:i32, %0
%2:i32 = var
%3 = eq %2, -1:i32
%4:i32 = zext %3
%5 = eq %4, 0:i32
%6:i32 = var
%7 = and %6, 4:i32
%8 = eq %7, 0:i32
pc %5 1:i1
pc %8 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = add %0, -1:i32 (hasExternalUses)
%2:i32 = var
%3 = add %1, %2
%4 = sub 0:i32, %0
%5 = and %3, %4
%6 = eq %2, -1:i32
%7:i32 = zext %6
%8 = eq %7, 0:i32
%9:i32 = var
%10 = and %9, 4:i32
%11 = eq %10, 0:i32
pc %8 1:i1
pc %11 1:i1
infer %5


; start LHS (in $6)
%0:i32 = var
%1 = add %0, -1:i32 (hasExternalUses)
%2:i32 = var
%3 = add %1, %2
%4 = sub 0:i32, %0
%5 = and %3, %4
%6 = sub %5, %2
%7 = eq %2, -1:i32
%8:i32 = zext %7
%9 = eq %8, 0:i32
%10:i32 = var
%11 = and %10, 4:i32
%12 = eq %11, 0:i32
pc %9 1:i1
pc %12 1:i1
infer %6


; start LHS (in $6)
%0:i32 = var
%1 = add %0, -1:i32 (hasExternalUses)
%2:i32 = var
%3 = and %1, %2
%4 = eq %2, -1:i32
%5:i32 = zext %4
%6 = eq %5, 0:i32
%7:i32 = var
%8 = and %7, 4:i32
%9 = eq %8, 0:i32
pc %6 1:i1
pc %9 1:i1
infer %3


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = add %1, -1:i32 (hasExternalUses)
%3:i32 = var
%4 = add %2, %3
%5 = sub 0:i32, %1
%6 = and %4, %5
%7 = sub %6, %3
%8 = phi %0, %7, 0:i32
%9 = block 2
%10 = block 2
%11:i32 = var
%12 = phi %10, %11, 4096:i32
%13 = block 2
%14:i32 = var
%15 = add %14, 11:i32 (hasExternalUses)
%16 = and %15, -8:i32 (hasExternalUses)
%17 = block 2
%18 = block 2
%19:i32 = var
%20 = and %19, -8:i32 (hasExternalUses)
%21 = phi %18, 16:i32, %20
%22 = block 2
%23 = block 2
%24 = block 2
%25 = block 2
%26:i32 = var
%27 = phi %25, %26, %16
%28 = phi %24, %16, %27
%29 = phi %23, %28, %16
%30 = phi %22, -1:i32, %29
%31 = phi %17, %21, %30
%32 = phi %13, %16, %31
%33 = add %32, 47:i32 (hasExternalUses)
%34 = add %12, %33 (hasExternalUses)
%35:i32 = var
%36 = and %34, %35 (hasExternalUses)
%37:i32 = var
%38 = phi %9, %36, %37
%39 = add %8, %38
%40:i32 = var
blockpc %0 0 %40 1:i1
%41:i32 = var
blockpc %0 1 %41 1:i1
%42:i32 = var
blockpc %10 0 %42 1:i1
%43:i32 = var
blockpc %10 1 %43 1:i1
%44:i32 = var
blockpc %17 0 %44 1:i1
%45:i32 = var
blockpc %17 1 %45 1:i1
%46:i32 = var
blockpc %18 0 %46 1:i1
%47:i32 = var
blockpc %18 1 %47 1:i1
%48:i32 = var
blockpc %22 0 %48 1:i1
%49:i32 = var
blockpc %22 1 %49 1:i1
%50:i32 = var
blockpc %23 0 %50 1:i1
%51:i32 = var
blockpc %23 1 %51 1:i1
%52:i32 = var
%53:i32 = var
pc %52 1:i1
pc %53 1:i1
infer %39


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = add %1, -1:i32 (hasExternalUses)
%3:i32 = var
%4 = add %2, %3
%5 = sub 0:i32, %1
%6 = and %4, %5
%7 = sub %6, %3
%8 = phi %0, %7, 0:i32
%9 = block 2
%10 = block 2
%11:i32 = var
%12 = phi %10, %11, 4096:i32
%13 = block 2
%14:i32 = var
%15 = add %14, 11:i32 (hasExternalUses)
%16 = and %15, -8:i32 (hasExternalUses)
%17 = block 2
%18 = block 2
%19:i32 = var
%20 = phi %18, 16:i32, %19
%21 = block 2
%22 = block 2
%23 = block 2
%24 = block 2
%25:i32 = var
%26 = phi %24, %25, %16
%27 = phi %23, %16, %26
%28 = phi %22, %27, %16
%29 = phi %21, -1:i32, %28
%30 = phi %17, %20, %29
%31 = phi %13, %16, %30
%32 = add %31, 47:i32 (hasExternalUses)
%33 = add %12, %32 (hasExternalUses)
%34:i32 = var
%35 = and %33, %34 (hasExternalUses)
%36:i32 = var
%37 = phi %9, %35, %36
%38 = add %8, %37 (hasExternalUses)
%39:i32 = var
%40 = add %38, %39
%41:i32 = var
blockpc %0 0 %41 1:i1
%42:i32 = var
blockpc %0 1 %42 1:i1
%43:i32 = var
blockpc %10 0 %43 1:i1
%44:i32 = var
blockpc %10 1 %44 1:i1
%45:i32 = var
blockpc %17 0 %45 1:i1
%46:i32 = var
blockpc %17 1 %46 1:i1
%47:i32 = var
blockpc %18 0 %47 1:i1
%48:i32 = var
blockpc %18 1 %48 1:i1
%49:i32 = var
blockpc %21 0 %49 1:i1
%50:i32 = var
blockpc %21 1 %50 1:i1
%51:i32 = var
blockpc %22 0 %51 1:i1
%52:i32 = var
blockpc %22 1 %52 1:i1
%53:i32 = var
%54:i32 = var
pc %53 1:i1
pc %54 1:i1
infer %40


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2:i32 = var
%3 = add %2, 11:i32 (hasExternalUses)
%4 = and %3, -8:i32 (hasExternalUses)
%5 = block 2
%6 = block 2
%7 = add %2, 11:i32
%8 = and %7, -8:i32 (hasExternalUses)
%9 = phi %6, 16:i32, %8
%10 = block 2
%11 = block 2
%12 = block 2
%13 = block 2
%14:i32 = var
%15 = phi %13, %14, %4
%16 = phi %12, %4, %15
%17 = phi %11, %16, %4
%18 = phi %10, -1:i32, %17
%19 = phi %5, %9, %18
%20 = phi %1, %4, %19
%21:i32 = var
%22 = phi %0, %20, %21
%23 = block 2
%24:i32 = var
%25 = add %24, -1:i32 (hasExternalUses)
%26:i32 = var
%27 = add %25, %26
%28 = sub 0:i32, %24
%29 = and %27, %28
%30 = sub %29, %26
%31 = phi %23, %30, 0:i32
%32:i32 = var
%33:i32 = var
%34 = phi %0, %32, %33
%35 = add %31, %34 (hasExternalUses)
%36 = ult %22, %35
%37:i32 = var
blockpc %5 0 %37 1:i1
%38:i32 = var
blockpc %5 1 %38 1:i1
%39:i32 = var
blockpc %6 0 %39 1:i1
%40:i32 = var
blockpc %6 1 %40 1:i1
%41:i32 = var
blockpc %10 0 %41 1:i1
%42:i32 = var
blockpc %10 1 %42 1:i1
%43:i32 = var
blockpc %11 0 %43 1:i1
%44:i32 = var
blockpc %11 1 %44 1:i1
%45:i32 = var
blockpc %23 0 %45 1:i1
%46:i32 = var
blockpc %23 1 %46 1:i1
%47:i32 = var
%48:i32 = var
pc %47 1:i1
pc %48 1:i1
infer %36


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = add %1, -1:i32 (hasExternalUses)
%3:i32 = var
%4 = add %2, %3
%5 = sub 0:i32, %1
%6 = and %4, %5
%7 = sub %6, %3
%8 = phi %0, %7, 0:i32
%9 = block 2
%10 = block 2
%11:i32 = var
%12 = phi %10, %11, 4096:i32
%13 = block 2
%14:i32 = var
%15 = add %14, 11:i32 (hasExternalUses)
%16 = and %15, -8:i32 (hasExternalUses)
%17 = block 2
%18 = block 2
%19:i32 = var
%20 = phi %18, 16:i32, %19
%21 = block 2
%22 = block 2
%23 = block 2
%24 = block 2
%25:i32 = var
%26 = phi %24, %25, %16
%27 = phi %23, %16, %26
%28 = phi %22, %27, %16
%29 = phi %21, -1:i32, %28
%30 = phi %17, %20, %29
%31 = phi %13, %16, %30
%32 = add %31, 47:i32 (hasExternalUses)
%33 = add %12, %32 (hasExternalUses)
%34:i32 = var
%35 = and %33, %34 (hasExternalUses)
%36:i32 = var
%37 = phi %9, %35, %36
%38 = add %8, %37 (hasExternalUses)
%39 = ult %38, 2147483647:i32
%40:i32 = var
blockpc %0 0 %40 1:i1
%41:i32 = var
blockpc %0 1 %41 1:i1
%42:i32 = var
blockpc %10 0 %42 1:i1
%43:i32 = var
blockpc %10 1 %43 1:i1
%44:i32 = var
blockpc %17 0 %44 1:i1
%45:i32 = var
blockpc %17 1 %45 1:i1
%46:i32 = var
blockpc %18 0 %46 1:i1
%47:i32 = var
blockpc %18 1 %47 1:i1
%48:i32 = var
blockpc %21 0 %48 1:i1
%49:i32 = var
blockpc %21 1 %49 1:i1
%50:i32 = var
blockpc %22 0 %50 1:i1
%51:i32 = var
blockpc %22 1 %51 1:i1
%52:i32 = var
%53:i32 = var
pc %52 1:i1
pc %53 1:i1
infer %39


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2:i32 = var
%3 = add %2, 11:i32 (hasExternalUses)
%4 = and %3, -8:i32 (hasExternalUses)
%5 = block 2
%6 = block 2
%7 = add %2, 11:i32
%8 = and %7, -8:i32 (hasExternalUses)
%9 = phi %6, 16:i32, %8
%10 = block 2
%11 = block 2
%12 = block 2
%13 = block 2
%14:i32 = var
%15 = phi %13, %14, %4
%16 = phi %12, %4, %15
%17 = phi %11, %16, %4
%18 = phi %10, -1:i32, %17
%19 = phi %5, %9, %18
%20 = phi %1, %4, %19
%21:i32 = var
%22 = phi %0, %20, %21
%23 = block 2
%24:i32 = var
%25 = add %24, -1:i32 (hasExternalUses)
%26:i32 = var
%27 = add %25, %26
%28 = sub 0:i32, %24
%29 = and %27, %28
%30 = sub %29, %26
%31 = phi %23, %30, 0:i32
%32:i32 = var
%33:i32 = var
%34 = phi %0, %32, %33
%35 = add %31, %34 (hasExternalUses)
%36 = ult %22, %35
%37:i32 = zext %36
%38:i32 = var
%39:i32 = zext %38
%40 = and %37, %39
%41:i32 = var
blockpc %5 0 %41 1:i1
%42:i32 = var
blockpc %5 1 %42 1:i1
%43:i32 = var
blockpc %6 0 %43 1:i1
%44:i32 = var
blockpc %6 1 %44 1:i1
%45:i32 = var
blockpc %10 0 %45 1:i1
%46:i32 = var
blockpc %10 1 %46 1:i1
%47:i32 = var
blockpc %11 0 %47 1:i1
%48:i32 = var
blockpc %11 1 %48 1:i1
%49:i32 = var
blockpc %23 0 %49 1:i1
%50:i32 = var
blockpc %23 1 %50 1:i1
%51:i32 = var
%52:i32 = var
pc %51 1:i1
pc %52 1:i1
infer %40


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = add %1, -1:i32 (hasExternalUses)
%3:i32 = var
%4 = add %2, %3
%5 = sub 0:i32, %1
%6 = and %4, %5
%7 = sub %6, %3
%8 = phi %0, %7, 0:i32
%9 = block 2
%10 = block 2
%11:i32 = var
%12 = phi %10, %11, 4096:i32
%13 = block 2
%14:i32 = var
%15 = and %14, -8:i32 (hasExternalUses)
%16 = block 2
%17 = block 2
%18:i32 = var
%19 = phi %17, 16:i32, %18
%20 = block 2
%21 = block 2
%22 = block 2
%23 = block 2
%24:i32 = var
%25 = phi %23, %24, %15
%26 = phi %22, %15, %25
%27 = phi %21, %26, %15
%28 = phi %20, -1:i32, %27
%29 = phi %16, %19, %28
%30 = phi %13, %15, %29
%31 = add %30, 47:i32 (hasExternalUses)
%32 = add %12, %31 (hasExternalUses)
%33:i32 = var
%34 = and %32, %33 (hasExternalUses)
%35:i32 = var
%36 = phi %9, %34, %35
%37 = add %8, %36 (hasExternalUses)
%38:i32 = var
%39 = add %37, %38 (hasExternalUses)
%40 = ule %39, %38
%41:i32 = var
blockpc %0 0 %41 1:i1
%42:i32 = var
blockpc %0 1 %42 1:i1
%43:i32 = var
blockpc %10 0 %43 1:i1
%44:i32 = var
blockpc %10 1 %44 1:i1
%45:i32 = var
blockpc %16 0 %45 1:i1
%46:i32 = var
blockpc %16 1 %46 1:i1
%47:i32 = var
blockpc %17 0 %47 1:i1
%48:i32 = var
blockpc %17 1 %48 1:i1
%49:i32 = var
blockpc %20 0 %49 1:i1
%50:i32 = var
blockpc %20 1 %50 1:i1
%51:i32 = var
blockpc %21 0 %51 1:i1
%52:i32 = var
blockpc %21 1 %52 1:i1
%53:i32 = var
%54:i32 = var
%55:i32 = var
%56:i32 = var
pc %53 1:i1
pc %54 1:i1
pc %55 1:i1
pc %56 1:i1
infer %40


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = add %2, -1:i32 (hasExternalUses)
%4:i32 = var
%5 = add %3, %4
%6 = sub 0:i32, %2
%7 = and %5, %6
%8 = sub %7, %4
%9 = phi %1, %8, 0:i32
%10 = block 2
%11 = block 2
%12:i32 = var
%13 = phi %11, %12, 4096:i32
%14 = block 2
%15:i32 = var
%16 = and %15, -8:i32 (hasExternalUses)
%17 = block 2
%18 = block 2
%19:i32 = var
%20 = phi %18, 16:i32, %19
%21 = block 2
%22 = block 2
%23 = block 2
%24 = block 2
%25:i32 = var
%26 = phi %24, %25, %16
%27 = phi %23, %16, %26
%28 = phi %22, %27, %16
%29 = phi %21, -1:i32, %28
%30 = phi %17, %20, %29
%31 = phi %14, %16, %30
%32 = add %31, 47:i32 (hasExternalUses)
%33 = add %13, %32 (hasExternalUses)
%34:i32 = var
%35 = and %33, %34 (hasExternalUses)
%36:i32 = var
%37 = phi %10, %35, %36
%38 = add %9, %37 (hasExternalUses)
%39:i32 = var
%40 = add %38, %39 (hasExternalUses)
%41 = ult %0, %40
%42:i32 = var
blockpc %1 0 %42 1:i1
%43:i32 = var
blockpc %1 1 %43 1:i1
%44:i32 = var
blockpc %11 0 %44 1:i1
%45:i32 = var
blockpc %11 1 %45 1:i1
%46:i32 = var
blockpc %17 0 %46 1:i1
%47:i32 = var
blockpc %17 1 %47 1:i1
%48:i32 = var
blockpc %18 0 %48 1:i1
%49:i32 = var
blockpc %18 1 %49 1:i1
%50:i32 = var
blockpc %21 0 %50 1:i1
%51:i32 = var
blockpc %21 1 %51 1:i1
%52:i32 = var
blockpc %22 0 %52 1:i1
%53:i32 = var
blockpc %22 1 %53 1:i1
%54:i32 = var
%55:i32 = var
%56:i32 = var
%57:i32 = var
pc %54 1:i1
pc %55 1:i1
pc %56 1:i1
pc %57 1:i1
infer %41


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2:i32 = var
%3 = add %1, %2
%4:i32 = var
%5 = sub 0:i32, %4
%6 = and %3, %5
%7 = sub %6, %2
%8 = phi %0, %7, 0:i32
%9 = block 2
%10 = block 2
%11:i32 = var
%12 = phi %10, %11, 4096:i32
%13 = block 2
%14:i32 = var
%15 = block 2
%16 = block 2
%17:i32 = var
%18 = phi %16, 16:i32, %17
%19 = block 2
%20 = block 2
%21 = block 2
%22 = block 2
%23:i32 = var
%24 = phi %22, %23, %14
%25 = phi %21, %14, %24
%26 = phi %20, %25, %14
%27 = phi %19, -1:i32, %26
%28 = phi %15, %18, %27
%29 = phi %13, %14, %28
%30 = add %29, 47:i32 (hasExternalUses)
%31 = add %12, %30 (hasExternalUses)
%32:i32 = var
%33 = and %31, %32 (hasExternalUses)
%34:i32 = var
%35 = phi %9, %33, %34
%36 = add %8, %35 (hasExternalUses)
%37:i32 = var
%38 = add %36, %37 (hasExternalUses)
%39 = ule %38, %37
%40:i32 = zext %39
%41:i32 = var
%42:i32 = zext %41
%43 = or %40, %42
%44:i32 = var
blockpc %0 0 %44 1:i1
%45:i32 = var
blockpc %0 1 %45 1:i1
%46:i32 = var
blockpc %10 0 %46 1:i1
%47:i32 = var
blockpc %10 1 %47 1:i1
%48:i32 = var
blockpc %15 0 %48 1:i1
%49:i32 = var
blockpc %15 1 %49 1:i1
%50:i32 = var
blockpc %16 0 %50 1:i1
%51:i32 = var
blockpc %16 1 %51 1:i1
%52:i32 = var
blockpc %19 0 %52 1:i1
%53:i32 = var
blockpc %19 1 %53 1:i1
%54:i32 = var
blockpc %20 0 %54 1:i1
%55:i32 = var
blockpc %20 1 %55 1:i1
%56:i32 = var
%57:i32 = var
%58:i32 = var
%59:i32 = var
pc %56 1:i1
pc %57 1:i1
pc %58 1:i1
pc %59 1:i1
infer %43


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = eq %0, %1
%3 = block 2
%4 = block 2
%5:i32 = var
%6 = add %5, 11:i32
%7 = and %6, -8:i32
%8 = block 2
%9 = ult %5, 245:i32
blockpc %8 0 %9 1:i1
%10:i32 = zext %9
%11 = eq %10, 0:i32
blockpc %8 1 %11 1:i1
%12 = block 2
%13:i32 = var
blockpc %12 0 %13 1:i1
%14:i32 = var
blockpc %12 1 %14 1:i1
%15:i32 = var
%16 = and %15, -8:i32
%17 = phi %12, 16:i32, %16
%18 = block 2
%19:i32 = var
blockpc %18 0 %19 1:i1
%20:i32 = var
blockpc %18 1 %20 1:i1
%21 = block 2
%22:i32 = var
blockpc %21 0 %22 1:i1
%23:i32 = var
blockpc %21 1 %23 1:i1
%24 = block 2
%25 = block 2
%26:i32 = var
%27 = phi %25, %26, %7
%28 = phi %24, %7, %27
%29 = phi %21, %28, %7
%30 = phi %18, -1:i32, %29
%31 = phi %8, %17, %30
%32 = phi %4, %7, %31
%33:i32 = var
%34 = phi %3, %32, %33
%35:i32 = var
%36 = ult %34, %35
%37:i32 = zext %36
%38:i32 = var
%39:i32 = zext %38
%40 = and %37, %39
%41 = ne %40, 0:i32
%42:i32 = var
%43:i32 = var
pc %41 1:i1
pc %42 1:i1
pc %43 1:i1
infer %2


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2:i32 = var
%3 = phi %1, %2, 4096:i32
%4 = block 2
%5:i32 = var
%6 = add %5, 11:i32 (hasExternalUses)
%7 = and %6, -8:i32 (hasExternalUses)
%8 = block 2
%9 = block 2
%10:i32 = var
%11 = phi %9, 16:i32, %10
%12 = block 2
%13 = block 2
%14 = block 2
%15 = block 2
%16:i32 = var
%17 = phi %15, %16, %7
%18 = phi %14, %7, %17
%19 = phi %13, %18, %7
%20 = phi %12, -1:i32, %19
%21 = phi %8, %11, %20
%22 = phi %4, %7, %21
%23 = add %22, 47:i32 (hasExternalUses)
%24 = add %3, %23 (hasExternalUses)
%25:i32 = var
%26 = sub %24, %25
%27 = sub 0:i32, %3 (hasExternalUses)
%28 = and %26, %27 (hasExternalUses)
%29 = block 2
%30:i32 = var
%31 = phi %29, %30, 0:i32
%32 = block 2
%33:i32 = var
%34:i32 = var
%35 = phi %32, %33, %34
%36 = add %31, %35 (hasExternalUses)
%37 = phi %0, %28, %36
%38:i32 = var
%39:i32 = var
%40 = phi %32, %38, %39
%41 = phi %0, %38, %40
%42 = ult %37, %41
%43:i32 = var
blockpc %1 0 %43 1:i1
%44:i32 = var
blockpc %1 1 %44 1:i1
%45:i32 = var
blockpc %8 0 %45 1:i1
%46:i32 = var
blockpc %8 1 %46 1:i1
%47:i32 = var
blockpc %9 0 %47 1:i1
%48:i32 = var
blockpc %9 1 %48 1:i1
%49:i32 = var
blockpc %12 0 %49 1:i1
%50:i32 = var
blockpc %12 1 %50 1:i1
%51:i32 = var
blockpc %13 0 %51 1:i1
%52:i32 = var
blockpc %13 1 %52 1:i1
%53:i32 = var
blockpc %29 0 %53 1:i1
%54:i32 = var
blockpc %29 1 %54 1:i1
%55:i32 = var
pc %55 1:i1
infer %42


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2:i32 = var
%3 = phi %1, %2, 4096:i32
%4 = block 2
%5:i32 = var
%6 = add %5, 11:i32 (hasExternalUses)
%7 = and %6, -8:i32 (hasExternalUses)
%8 = block 2
%9 = block 2
%10:i32 = var
%11 = phi %9, 16:i32, %10
%12 = block 2
%13 = block 2
%14 = block 2
%15 = block 2
%16:i32 = var
%17 = phi %15, %16, %7
%18 = phi %14, %7, %17
%19 = phi %13, %18, %7
%20 = phi %12, -1:i32, %19
%21 = phi %8, %11, %20
%22 = phi %4, %7, %21
%23 = add %22, 47:i32 (hasExternalUses)
%24 = add %3, %23 (hasExternalUses)
%25:i32 = var
%26 = sub %24, %25
%27 = sub 0:i32, %3 (hasExternalUses)
%28 = and %26, %27 (hasExternalUses)
%29 = block 2
%30:i32 = var
%31 = phi %29, %30, 0:i32
%32 = block 2
%33:i32 = var
%34:i32 = var
%35 = phi %32, %33, %34
%36 = add %31, %35 (hasExternalUses)
%37 = phi %0, %28, %36
%38 = ult %37, 2147483647:i32
%39:i32 = var
blockpc %1 0 %39 1:i1
%40:i32 = var
blockpc %1 1 %40 1:i1
%41:i32 = var
blockpc %8 0 %41 1:i1
%42:i32 = var
blockpc %8 1 %42 1:i1
%43:i32 = var
blockpc %9 0 %43 1:i1
%44:i32 = var
blockpc %9 1 %44 1:i1
%45:i32 = var
blockpc %12 0 %45 1:i1
%46:i32 = var
blockpc %12 1 %46 1:i1
%47:i32 = var
blockpc %13 0 %47 1:i1
%48:i32 = var
blockpc %13 1 %48 1:i1
%49:i32 = var
blockpc %29 0 %49 1:i1
%50:i32 = var
blockpc %29 1 %50 1:i1
%51:i32 = var
pc %51 1:i1
infer %38


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2:i32 = var
%3 = phi %0, %1, %2
%4 = ne %3, -1:i32
%5:i32 = var
%6 = and %5, 4:i32
%7 = eq %6, 0:i32
pc %7 1:i1
infer %4


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2:i32 = var
%3 = phi %1, %2, 4096:i32
%4 = block 2
%5:i32 = var
%6 = block 2
%7 = block 2
%8:i32 = var
%9 = phi %7, 16:i32, %8
%10 = block 2
%11 = block 2
%12 = block 2
%13 = block 2
%14:i32 = var
%15 = phi %13, %14, %5
%16 = phi %12, %5, %15
%17 = phi %11, %16, %5
%18 = phi %10, -1:i32, %17
%19 = phi %6, %9, %18
%20 = phi %4, %5, %19
%21 = add %20, 47:i32 (hasExternalUses)
%22 = add %3, %21 (hasExternalUses)
%23:i32 = var
%24 = sub %22, %23
%25 = sub 0:i32, %3 (hasExternalUses)
%26 = and %24, %25 (hasExternalUses)
%27 = block 2
%28:i32 = var
%29:i32 = var
%30 = add %28, %29
%31:i32 = var
%32 = and %30, %31
%33 = sub %32, %29
%34 = phi %27, %33, 0:i32
%35 = block 2
%36:i32 = var
%37:i32 = var
%38 = phi %35, %36, %37
%39 = add %34, %38 (hasExternalUses)
%40 = phi %0, %26, %39
%41 = ult %40, 2147483647:i32
%42:i32 = zext %41
%43:i32 = var
%44:i32 = zext %43
%45 = and %42, %44
%46:i32 = var
blockpc %1 0 %46 1:i1
%47:i32 = var
blockpc %1 1 %47 1:i1
%48:i32 = var
blockpc %6 0 %48 1:i1
%49:i32 = var
blockpc %6 1 %49 1:i1
%50:i32 = var
blockpc %7 0 %50 1:i1
%51:i32 = var
blockpc %7 1 %51 1:i1
%52:i32 = var
blockpc %10 0 %52 1:i1
%53:i32 = var
blockpc %10 1 %53 1:i1
%54:i32 = var
blockpc %11 0 %54 1:i1
%55:i32 = var
blockpc %11 1 %55 1:i1
%56:i32 = var
blockpc %27 0 %56 1:i1
%57:i32 = var
blockpc %27 1 %57 1:i1
%58:i32 = var
pc %58 1:i1
infer %45


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2:i32 = var
%3 = phi %1, %2, 4096:i32
%4 = block 2
%5:i32 = var
%6 = block 2
%7 = block 2
%8:i32 = var
%9 = phi %7, 16:i32, %8
%10 = block 2
%11 = block 2
%12 = block 2
%13 = block 2
%14:i32 = var
%15 = phi %13, %14, %5
%16 = phi %12, %5, %15
%17 = phi %11, %16, %5
%18 = phi %10, -1:i32, %17
%19 = phi %6, %9, %18
%20 = phi %4, %5, %19
%21 = add %20, 47:i32 (hasExternalUses)
%22 = add %3, %21 (hasExternalUses)
%23:i32 = var
%24 = sub %22, %23
%25 = sub 0:i32, %3 (hasExternalUses)
%26 = and %24, %25 (hasExternalUses)
%27 = block 2
%28:i32 = var
%29:i32 = var
%30 = add %28, %29
%31:i32 = var
%32 = and %30, %31
%33 = sub %32, %29
%34 = phi %27, %33, 0:i32
%35 = block 2
%36:i32 = var
%37:i32 = var
%38 = phi %35, %36, %37
%39 = add %34, %38 (hasExternalUses)
%40 = phi %0, %26, %39
%41:i32 = var
%42:i32 = var
%43 = phi %35, %41, %42
%44 = phi %0, %41, %43
%45 = ult %40, %44
%46:i32 = zext %45
%47:i32 = var
%48 = and %46, %47
%49:i32 = var
blockpc %1 0 %49 1:i1
%50:i32 = var
blockpc %1 1 %50 1:i1
%51:i32 = var
blockpc %6 0 %51 1:i1
%52:i32 = var
blockpc %6 1 %52 1:i1
%53:i32 = var
blockpc %7 0 %53 1:i1
%54:i32 = var
blockpc %7 1 %54 1:i1
%55:i32 = var
blockpc %10 0 %55 1:i1
%56:i32 = var
blockpc %10 1 %56 1:i1
%57:i32 = var
blockpc %11 0 %57 1:i1
%58:i32 = var
blockpc %11 1 %58 1:i1
%59:i32 = var
blockpc %27 0 %59 1:i1
%60:i32 = var
blockpc %27 1 %60 1:i1
%61:i32 = var
pc %61 1:i1
infer %48


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2:i32 = var
%3 = phi %1, %2, 4096:i32
%4 = block 2
%5:i32 = var
%6 = block 2
%7 = block 2
%8:i32 = var
%9 = phi %7, 16:i32, %8
%10 = block 2
%11 = block 2
%12 = block 2
%13 = block 2
%14:i32 = var
%15 = phi %13, %14, %5
%16 = phi %12, %5, %15
%17 = phi %11, %16, %5
%18 = phi %10, -1:i32, %17
%19 = phi %6, %9, %18
%20 = phi %4, %5, %19
%21 = add %20, 47:i32 (hasExternalUses)
%22 = add %3, %21 (hasExternalUses)
%23:i32 = var
%24 = sub %22, %23
%25 = sub 0:i32, %3 (hasExternalUses)
%26 = and %24, %25 (hasExternalUses)
%27 = block 2
%28:i32 = var
%29:i32 = var
%30 = and %28, %29
%31:i32 = var
%32 = sub %30, %31
%33 = phi %27, %32, 0:i32
%34 = block 2
%35:i32 = var
%36:i32 = var
%37 = phi %34, %35, %36
%38 = add %33, %37 (hasExternalUses)
%39 = phi %0, %26, %38
%40:i32 = var
%41:i32 = var
%42 = phi %34, %40, %41
%43 = phi %0, %40, %42
%44 = ult %39, %43
%45:i32 = zext %44
%46:i32 = var
%47 = and %45, %46
%48 = eq %47, 0:i32
%49:i32 = var
blockpc %1 0 %49 1:i1
%50:i32 = var
blockpc %1 1 %50 1:i1
%51:i32 = var
blockpc %6 0 %51 1:i1
%52:i32 = var
blockpc %6 1 %52 1:i1
%53:i32 = var
blockpc %7 0 %53 1:i1
%54:i32 = var
blockpc %7 1 %54 1:i1
%55:i32 = var
blockpc %10 0 %55 1:i1
%56:i32 = var
blockpc %10 1 %56 1:i1
%57:i32 = var
blockpc %11 0 %57 1:i1
%58:i32 = var
blockpc %11 1 %58 1:i1
%59:i32 = var
blockpc %27 0 %59 1:i1
%60:i32 = var
blockpc %27 1 %60 1:i1
%61:i32 = var
pc %61 1:i1
infer %48


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2:i32 = var
%3 = phi %0, %1, %2
%4 = eq %3, -1:i32
%5 = block 2
%6:i32 = var
blockpc %5 0 %6 1:i1
%7:i32 = var
blockpc %5 1 %7 1:i1
%8:i32 = var
%9 = phi %5, %8, 4096:i32
%10 = block 2
%11:i32 = var
%12 = block 2
%13:i32 = var
blockpc %12 0 %13 1:i1
%14:i32 = var
blockpc %12 1 %14 1:i1
%15 = block 2
%16:i32 = var
blockpc %15 0 %16 1:i1
%17:i32 = var
blockpc %15 1 %17 1:i1
%18:i32 = var
%19 = phi %15, 16:i32, %18
%20 = block 2
%21:i32 = var
blockpc %20 0 %21 1:i1
%22:i32 = var
blockpc %20 1 %22 1:i1
%23 = block 2
%24:i32 = var
blockpc %23 0 %24 1:i1
%25:i32 = var
blockpc %23 1 %25 1:i1
%26 = block 2
%27 = block 2
%28:i32 = var
%29 = phi %27, %28, %11
%30 = phi %26, %11, %29
%31 = phi %23, %30, %11
%32 = phi %20, -1:i32, %31
%33 = phi %12, %19, %32
%34 = phi %10, %11, %33
%35 = add %34, 47:i32
%36 = add %9, %35
%37:i32 = var
%38 = sub %36, %37
%39:i32 = var
%40 = and %38, %39
%41:i32 = var
%42 = phi %0, %40, %41
%43:i32 = var
%44 = block 2
%45:i32 = var
%46 = phi %44, %43, %45
%47 = phi %0, %43, %46
%48 = ult %42, %47
%49:i32 = zext %48
%50:i32 = var
%51 = and %49, %50
%52 = eq %51, 0:i32
%53:i32 = var
pc %52 1:i1
pc %53 1:i1
infer %4


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2:i32 = var
%3 = add %2, 11:i32 (hasExternalUses)
%4 = and %3, -8:i32 (hasExternalUses)
%5 = block 2
%6 = block 2
%7 = add %2, 11:i32
%8 = and %7, -8:i32 (hasExternalUses)
%9 = phi %6, 16:i32, %8
%10 = block 2
%11 = block 2
%12 = block 2
%13 = block 2
%14:i32 = var
%15 = phi %13, %14, %4
%16 = phi %12, %4, %15
%17 = phi %11, %16, %4
%18 = phi %10, -1:i32, %17
%19 = phi %5, %9, %18
%20 = phi %1, %4, %19
%21 = add %20, 47:i32
%22 = block 2
%23:i32 = var
%24 = phi %22, %21, %23
%25 = phi %0, %21, %24
%26 = block 2
%27:i32 = var
%28 = phi %26, %27, 4096:i32
%29 = add %28, %21 (hasExternalUses)
%30:i32 = var
%31 = sub %29, %30
%32:i32 = var
%33 = and %31, %32 (hasExternalUses)
%34:i32 = var
%35 = phi %0, %33, %34
%36 = sub %25, %35
%37:i32 = var
blockpc %5 0 %37 1:i1
%38:i32 = var
blockpc %5 1 %38 1:i1
%39:i32 = var
blockpc %6 0 %39 1:i1
%40:i32 = var
blockpc %6 1 %40 1:i1
%41:i32 = var
blockpc %10 0 %41 1:i1
%42:i32 = var
blockpc %10 1 %42 1:i1
%43:i32 = var
blockpc %11 0 %43 1:i1
%44:i32 = var
blockpc %11 1 %44 1:i1
%45:i32 = var
blockpc %26 0 %45 1:i1
%46:i32 = var
blockpc %26 1 %46 1:i1
%47:i32 = var
pc %47 1:i1
infer %36


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2:i32 = var
%3 = add %2, 11:i32 (hasExternalUses)
%4 = and %3, -8:i32 (hasExternalUses)
%5 = block 2
%6 = block 2
%7 = add %2, 11:i32
%8 = and %7, -8:i32 (hasExternalUses)
%9 = phi %6, 16:i32, %8
%10 = block 2
%11 = block 2
%12 = block 2
%13 = block 2
%14:i32 = var
%15 = phi %13, %14, %4
%16 = phi %12, %4, %15
%17 = phi %11, %16, %4
%18 = phi %10, -1:i32, %17
%19 = phi %5, %9, %18
%20 = phi %1, %4, %19
%21 = add %20, 47:i32
%22 = block 2
%23:i32 = var
%24 = phi %22, %21, %23
%25 = phi %0, %21, %24
%26 = block 2
%27:i32 = var
%28 = phi %26, %27, 4096:i32
%29 = add %28, %21 (hasExternalUses)
%30:i32 = var
%31 = sub %29, %30
%32:i32 = var
%33 = and %31, %32 (hasExternalUses)
%34:i32 = var
%35 = phi %0, %33, %34
%36 = sub %25, %35
%37:i32 = var
%38 = add %36, %37
%39:i32 = var
blockpc %5 0 %39 1:i1
%40:i32 = var
blockpc %5 1 %40 1:i1
%41:i32 = var
blockpc %6 0 %41 1:i1
%42:i32 = var
blockpc %6 1 %42 1:i1
%43:i32 = var
blockpc %10 0 %43 1:i1
%44:i32 = var
blockpc %10 1 %44 1:i1
%45:i32 = var
blockpc %11 0 %45 1:i1
%46:i32 = var
blockpc %11 1 %46 1:i1
%47:i32 = var
blockpc %26 0 %47 1:i1
%48:i32 = var
blockpc %26 1 %48 1:i1
%49:i32 = var
pc %49 1:i1
infer %38


; start LHS (in $6)
%0:i32 = var
%1 = sub 0:i32, %0
%2:i32 = var
%3 = and %2, 4:i32
%4 = eq %3, 0:i32
pc %4 1:i1
infer %1


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2:i32 = var
%3 = add %2, 11:i32 (hasExternalUses)
%4 = and %3, -8:i32 (hasExternalUses)
%5 = block 2
%6 = block 2
%7:i32 = var
%8 = and %7, -8:i32 (hasExternalUses)
%9 = phi %6, 16:i32, %8
%10 = block 2
%11 = block 2
%12 = block 2
%13 = block 2
%14:i32 = var
%15 = phi %13, %14, %4
%16 = phi %12, %4, %15
%17 = phi %11, %16, %4
%18 = phi %10, -1:i32, %17
%19 = phi %5, %9, %18
%20 = phi %1, %4, %19
%21 = add %20, 47:i32
%22 = block 2
%23:i32 = var
%24 = phi %22, %21, %23
%25 = phi %0, %21, %24
%26 = block 2
%27:i32 = var
%28 = phi %26, %27, 4096:i32
%29 = add %28, %21 (hasExternalUses)
%30:i32 = var
%31 = sub %29, %30
%32:i32 = var
%33 = and %31, %32 (hasExternalUses)
%34:i32 = var
%35 = phi %0, %33, %34
%36 = sub %25, %35
%37:i32 = var
%38 = add %36, %37
%39:i32 = var
%40 = and %38, %39
%41:i32 = var
blockpc %5 0 %41 1:i1
%42:i32 = var
blockpc %5 1 %42 1:i1
%43:i32 = var
blockpc %6 0 %43 1:i1
%44:i32 = var
blockpc %6 1 %44 1:i1
%45:i32 = var
blockpc %10 0 %45 1:i1
%46:i32 = var
blockpc %10 1 %46 1:i1
%47:i32 = var
blockpc %11 0 %47 1:i1
%48:i32 = var
blockpc %11 1 %48 1:i1
%49:i32 = var
blockpc %26 0 %49 1:i1
%50:i32 = var
blockpc %26 1 %50 1:i1
%51:i32 = var
pc %51 1:i1
infer %40


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2:i32 = var
%3 = add %2, 11:i32 (hasExternalUses)
%4 = and %3, -8:i32 (hasExternalUses)
%5 = block 2
%6 = block 2
%7:i32 = var
%8 = phi %6, 16:i32, %7
%9 = block 2
%10 = block 2
%11 = block 2
%12 = block 2
%13:i32 = var
%14 = phi %12, %13, %4
%15 = phi %11, %4, %14
%16 = phi %10, %15, %4
%17 = phi %9, -1:i32, %16
%18 = phi %5, %8, %17
%19 = phi %1, %4, %18
%20 = add %19, 47:i32
%21 = block 2
%22:i32 = var
%23 = phi %21, %20, %22
%24 = phi %0, %20, %23
%25 = block 2
%26:i32 = var
%27 = phi %25, %26, 4096:i32
%28 = add %27, %20 (hasExternalUses)
%29:i32 = var
%30 = sub %28, %29
%31:i32 = var
%32 = and %30, %31 (hasExternalUses)
%33:i32 = var
%34 = phi %0, %32, %33
%35 = sub %24, %34
%36:i32 = var
%37 = add %35, %36
%38:i32 = var
%39 = and %37, %38 (hasExternalUses)
%40 = ule 2147483647:i32, %39
%41:i32 = var
blockpc %5 0 %41 1:i1
%42:i32 = var
blockpc %5 1 %42 1:i1
%43:i32 = var
blockpc %6 0 %43 1:i1
%44:i32 = var
blockpc %6 1 %44 1:i1
%45:i32 = var
blockpc %9 0 %45 1:i1
%46:i32 = var
blockpc %9 1 %46 1:i1
%47:i32 = var
blockpc %10 0 %47 1:i1
%48:i32 = var
blockpc %10 1 %48 1:i1
%49:i32 = var
blockpc %25 0 %49 1:i1
%50:i32 = var
blockpc %25 1 %50 1:i1
%51:i32 = var
pc %51 1:i1
infer %40


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2:i32 = var
%3 = phi %1, %2, 4096:i32
%4 = block 2
%5:i32 = var
%6 = add %5, 11:i32 (hasExternalUses)
%7 = and %6, -8:i32 (hasExternalUses)
%8 = block 2
%9 = block 2
%10:i32 = var
%11 = phi %9, 16:i32, %10
%12 = block 2
%13 = block 2
%14 = block 2
%15 = block 2
%16:i32 = var
%17 = phi %15, %16, %7
%18 = phi %14, %7, %17
%19 = phi %13, %18, %7
%20 = phi %12, -1:i32, %19
%21 = phi %8, %11, %20
%22 = phi %4, %7, %21
%23 = add %22, 47:i32 (hasExternalUses)
%24 = add %3, %23 (hasExternalUses)
%25:i32 = var
%26 = sub %24, %25
%27 = sub 0:i32, %3 (hasExternalUses)
%28 = and %26, %27 (hasExternalUses)
%29 = block 2
%30:i32 = var
%31 = phi %29, %30, 0:i32
%32 = block 2
%33:i32 = var
%34:i32 = var
%35 = phi %32, %33, %34
%36 = add %31, %35 (hasExternalUses)
%37 = phi %0, %28, %36
%38 = sub 0:i32, %37
%39:i32 = var
blockpc %1 0 %39 1:i1
%40:i32 = var
blockpc %1 1 %40 1:i1
%41:i32 = var
blockpc %8 0 %41 1:i1
%42:i32 = var
blockpc %8 1 %42 1:i1
%43:i32 = var
blockpc %9 0 %43 1:i1
%44:i32 = var
blockpc %9 1 %44 1:i1
%45:i32 = var
blockpc %12 0 %45 1:i1
%46:i32 = var
blockpc %12 1 %46 1:i1
%47:i32 = var
blockpc %13 0 %47 1:i1
%48:i32 = var
blockpc %13 1 %48 1:i1
%49:i32 = var
blockpc %29 0 %49 1:i1
%50:i32 = var
blockpc %29 1 %50 1:i1
%51:i32 = var
pc %51 1:i1
infer %38


; start LHS (in $6)
%0:i32 = var
%1 = eq %0, -1:i32
%2:i32 = var
%3 = and %2, 4:i32
%4 = eq %3, 0:i32
pc %4 1:i1
infer %1


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2:i32 = var
%3 = add %2, 11:i32 (hasExternalUses)
%4 = and %3, -8:i32 (hasExternalUses)
%5 = block 2
%6 = block 2
%7:i32 = var
%8 = phi %6, 16:i32, %7
%9 = block 2
%10 = block 2
%11 = block 2
%12 = block 2
%13:i32 = var
%14 = phi %12, %13, %4
%15 = phi %11, %4, %14
%16 = phi %10, %15, %4
%17 = phi %9, -1:i32, %16
%18 = phi %5, %8, %17
%19 = phi %1, %4, %18
%20 = add %19, 47:i32
%21 = block 2
%22:i32 = var
%23 = phi %21, %20, %22
%24 = phi %0, %20, %23
%25 = block 2
%26:i32 = var
%27 = phi %25, %26, 4096:i32
%28 = add %27, %20 (hasExternalUses)
%29:i32 = var
%30 = sub %28, %29
%31:i32 = var
%32 = and %30, %31 (hasExternalUses)
%33:i32 = var
%34 = phi %0, %32, %33
%35 = sub %24, %34
%36:i32 = var
%37 = add %35, %36
%38:i32 = var
%39 = and %37, %38 (hasExternalUses)
%40 = add %39, %34
%41:i32 = var
blockpc %5 0 %41 1:i1
%42:i32 = var
blockpc %5 1 %42 1:i1
%43:i32 = var
blockpc %6 0 %43 1:i1
%44:i32 = var
blockpc %6 1 %44 1:i1
%45:i32 = var
blockpc %9 0 %45 1:i1
%46:i32 = var
blockpc %9 1 %46 1:i1
%47:i32 = var
blockpc %10 0 %47 1:i1
%48:i32 = var
blockpc %10 1 %48 1:i1
%49:i32 = var
blockpc %25 0 %49 1:i1
%50:i32 = var
blockpc %25 1 %50 1:i1
%51:i32 = var
%52:i32 = var
pc %51 1:i1
pc %52 1:i1
infer %40


; start LHS (in $6)
%0:i32 = var
%1 = or %0, 4:i32
%2:i32 = var
%3 = and %2, 4:i32
%4 = eq %3, 0:i32
pc %4 1:i1
infer %1


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2:i32 = var
%3 = phi %1, %2, 4096:i32
%4 = block 2
%5:i32 = var
%6 = add %5, 11:i32 (hasExternalUses)
%7 = and %6, -8:i32 (hasExternalUses)
%8 = block 2
%9 = block 2
%10:i32 = var
%11 = and %10, -8:i32 (hasExternalUses)
%12 = phi %9, 16:i32, %11
%13 = block 2
%14 = block 2
%15 = block 2
%16 = block 2
%17:i32 = var
%18 = phi %16, %17, %7
%19 = phi %15, %7, %18
%20 = phi %14, %19, %7
%21 = phi %13, -1:i32, %20
%22 = phi %8, %12, %21
%23 = phi %4, %7, %22
%24 = add %23, 47:i32 (hasExternalUses)
%25 = add %3, %24 (hasExternalUses)
%26 = sub 0:i32, %3 (hasExternalUses)
%27 = and %25, %26 (hasExternalUses)
%28 = block 5
%29 = block 2
%30:i32 = var
%31 = phi %29, %27, %30
%32 = block 2
%33 = phi %32, %27, %31
%34 = phi %28, %27, %31, %31, %33, %33
%35 = phi %0, %27, %34
%36 = ult %35, 2147483647:i32
%37:i32 = var
blockpc %0 0 %37 1:i1
%38:i32 = var
blockpc %0 1 %38 1:i1
%39:i32 = var
blockpc %1 0 %39 1:i1
%40:i32 = var
blockpc %1 1 %40 1:i1
%41:i32 = var
blockpc %8 0 %41 1:i1
%42:i32 = var
blockpc %8 1 %42 1:i1
%43:i32 = var
blockpc %9 0 %43 1:i1
%44:i32 = var
blockpc %9 1 %44 1:i1
%45:i32 = var
blockpc %13 0 %45 1:i1
%46:i32 = var
blockpc %13 1 %46 1:i1
%47:i32 = var
blockpc %14 0 %47 1:i1
%48:i32 = var
blockpc %14 1 %48 1:i1
infer %36


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = ult %0, %1
%3 = block 2
%4:i32 = var
%5 = and %4, 4:i32
%6 = ne %5, 0:i32
blockpc %3 0 %6 1:i1
%7 = eq %5, 0:i32
blockpc %3 1 %7 1:i1
%8 = block 2
%9:i32 = var
%10 = ne %9, 0:i32
blockpc %8 0 %10 1:i1
%11 = eq %9, 0:i32
blockpc %8 1 %11 1:i1
%12:i32 = var
%13 = phi %8, %12, 4096:i32
%14 = block 2
%15:i32 = var
%16 = add %15, 11:i32
%17 = and %16, -8:i32
%18 = block 2
%19 = ult %15, 245:i32
blockpc %18 0 %19 1:i1
%20:i32 = zext %19
%21 = eq %20, 0:i32
blockpc %18 1 %21 1:i1
%22 = block 2
%23:i32 = var
blockpc %22 0 %23 1:i1
%24:i32 = var
blockpc %22 1 %24 1:i1
%25:i32 = var
%26 = phi %22, 16:i32, %25
%27 = block 2
%28:i32 = var
blockpc %27 0 %28 1:i1
%29:i32 = var
blockpc %27 1 %29 1:i1
%30 = block 2
%31:i32 = var
blockpc %30 0 %31 1:i1
%32:i32 = var
blockpc %30 1 %32 1:i1
%33 = block 2
%34 = block 2
%35:i32 = var
%36 = phi %34, %35, %17
%37 = phi %33, %17, %36
%38 = phi %30, %37, %17
%39 = phi %27, -1:i32, %38
%40 = phi %18, %26, %39
%41 = phi %14, %17, %40
%42 = add %41, 47:i32
%43 = add %13, %42
%44:i32 = var
%45 = and %43, %44
%46 = block 5
%47 = block 2
%48:i32 = var
%49 = phi %47, %45, %48
%50 = block 2
%51 = phi %50, %45, %49
%52 = phi %46, %45, %49, %49, %51, %51
%53 = phi %3, %45, %52
%54 = ult %53, 2147483647:i32
pc %54 1:i1
infer %2


; start LHS (in $6)
%0:i32 = var
%1 = ne %0, -1:i32
%2 = block 2
%3:i32 = var
%4 = and %3, 4:i32
%5 = ne %4, 0:i32
blockpc %2 0 %5 1:i1
%6 = eq %4, 0:i32
blockpc %2 1 %6 1:i1
%7 = block 2
%8:i32 = var
%9 = ne %8, 0:i32
blockpc %7 0 %9 1:i1
%10 = eq %8, 0:i32
blockpc %7 1 %10 1:i1
%11:i32 = var
%12 = phi %7, %11, 4096:i32
%13 = block 2
%14:i32 = var
%15 = add %14, 11:i32
%16 = and %15, -8:i32
%17 = block 2
%18 = ult %14, 245:i32
blockpc %17 0 %18 1:i1
%19:i32 = zext %18
%20 = eq %19, 0:i32
blockpc %17 1 %20 1:i1
%21 = block 2
%22:i32 = var
blockpc %21 0 %22 1:i1
%23:i32 = var
blockpc %21 1 %23 1:i1
%24:i32 = var
%25 = phi %21, 16:i32, %24
%26 = block 2
%27:i32 = var
blockpc %26 0 %27 1:i1
%28:i32 = var
blockpc %26 1 %28 1:i1
%29 = block 2
%30:i32 = var
blockpc %29 0 %30 1:i1
%31:i32 = var
blockpc %29 1 %31 1:i1
%32 = block 2
%33 = block 2
%34:i32 = var
%35 = phi %33, %34, %16
%36 = phi %32, %16, %35
%37 = phi %29, %36, %16
%38 = phi %26, -1:i32, %37
%39 = phi %17, %25, %38
%40 = phi %13, %16, %39
%41 = add %40, 47:i32
%42 = add %12, %41
%43:i32 = var
%44 = and %42, %43
%45 = block 5
%46 = block 2
%47:i32 = var
%48 = phi %46, %44, %47
%49 = block 2
%50 = phi %49, %44, %48
%51 = phi %45, %44, %48, %48, %50, %50
%52 = phi %2, %44, %51
%53 = ult %52, 2147483647:i32
pc %53 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = ne %0, -1:i32
%2 = block 2
%3:i32 = var
%4 = and %3, 4:i32
%5 = ne %4, 0:i32
blockpc %2 0 %5 1:i1
%6 = eq %4, 0:i32
blockpc %2 1 %6 1:i1
%7 = block 2
%8:i32 = var
%9 = ne %8, 0:i32
blockpc %7 0 %9 1:i1
%10 = eq %8, 0:i32
blockpc %7 1 %10 1:i1
%11:i32 = var
%12 = phi %7, %11, 4096:i32
%13 = block 2
%14:i32 = var
%15 = add %14, 11:i32
%16 = and %15, -8:i32
%17 = block 2
%18 = ult %14, 245:i32
blockpc %17 0 %18 1:i1
%19:i32 = zext %18
%20 = eq %19, 0:i32
blockpc %17 1 %20 1:i1
%21 = block 2
%22:i32 = var
blockpc %21 0 %22 1:i1
%23:i32 = var
blockpc %21 1 %23 1:i1
%24:i32 = var
%25 = phi %21, 16:i32, %24
%26 = block 2
%27:i32 = var
blockpc %26 0 %27 1:i1
%28:i32 = var
blockpc %26 1 %28 1:i1
%29 = block 2
%30:i32 = var
blockpc %29 0 %30 1:i1
%31:i32 = var
blockpc %29 1 %31 1:i1
%32 = block 2
%33 = block 2
%34:i32 = var
%35 = phi %33, %34, %16
%36 = phi %32, %16, %35
%37 = phi %29, %36, %16
%38 = phi %26, -1:i32, %37
%39 = phi %17, %25, %38
%40 = phi %13, %16, %39
%41 = add %40, 47:i32
%42 = add %12, %41
%43:i32 = var
%44 = and %42, %43
%45 = block 5
%46 = block 2
%47:i32 = var
%48 = phi %46, %44, %47
%49 = block 2
%50 = phi %49, %44, %48
%51 = phi %45, %44, %48, %48, %50, %50
%52 = phi %2, %44, %51
%53 = ult %52, 2147483647:i32
pc %53 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = ne %0, -1:i32
%2:i32 = zext %1
%3:i32 = var
%4 = ne %3, -1:i32
%5:i32 = zext %4
%6 = and %2, %5
%7 = block 2
%8:i32 = var
%9 = and %8, 4:i32
%10 = ne %9, 0:i32
blockpc %7 0 %10 1:i1
%11 = eq %9, 0:i32
blockpc %7 1 %11 1:i1
%12 = block 2
%13:i32 = var
%14 = ne %13, 0:i32
blockpc %12 0 %14 1:i1
%15 = eq %13, 0:i32
blockpc %12 1 %15 1:i1
%16:i32 = var
%17 = phi %12, %16, 4096:i32
%18 = block 2
%19:i32 = var
%20 = add %19, 11:i32
%21 = and %20, -8:i32
%22 = block 2
%23 = ult %19, 245:i32
blockpc %22 0 %23 1:i1
%24:i32 = zext %23
%25 = eq %24, 0:i32
blockpc %22 1 %25 1:i1
%26 = block 2
%27:i32 = var
blockpc %26 0 %27 1:i1
%28:i32 = var
blockpc %26 1 %28 1:i1
%29:i32 = var
%30 = phi %26, 16:i32, %29
%31 = block 2
%32:i32 = var
blockpc %31 0 %32 1:i1
%33:i32 = var
blockpc %31 1 %33 1:i1
%34 = block 2
%35:i32 = var
blockpc %34 0 %35 1:i1
%36:i32 = var
blockpc %34 1 %36 1:i1
%37 = block 2
%38 = block 2
%39:i32 = var
%40 = phi %38, %39, %21
%41 = phi %37, %21, %40
%42 = phi %34, %41, %21
%43 = phi %31, -1:i32, %42
%44 = phi %22, %30, %43
%45 = phi %18, %21, %44
%46 = add %45, 47:i32
%47 = add %17, %46
%48:i32 = var
%49 = and %47, %48
%50 = block 5
%51 = block 2
%52:i32 = var
%53 = phi %51, %49, %52
%54 = block 2
%55 = phi %54, %49, %53
%56 = phi %50, %49, %53, %53, %55, %55
%57 = phi %7, %49, %56
%58 = ult %57, 2147483647:i32
pc %58 1:i1
infer %6


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = ult %0, %1
%3:i32 = zext %2
%4 = ne %0, -1:i32
%5:i32 = zext %4
%6 = ne %1, -1:i32
%7:i32 = zext %6
%8 = and %5, %7
%9 = and %3, %8
%10 = block 2
%11:i32 = var
%12 = and %11, 4:i32
%13 = ne %12, 0:i32
blockpc %10 0 %13 1:i1
%14 = eq %12, 0:i32
blockpc %10 1 %14 1:i1
%15 = block 2
%16:i32 = var
%17 = ne %16, 0:i32
blockpc %15 0 %17 1:i1
%18 = eq %16, 0:i32
blockpc %15 1 %18 1:i1
%19:i32 = var
%20 = phi %15, %19, 4096:i32
%21 = block 2
%22:i32 = var
%23 = add %22, 11:i32
%24 = and %23, -8:i32
%25 = block 2
%26:i32 = var
blockpc %25 0 %26 1:i1
%27:i32 = var
blockpc %25 1 %27 1:i1
%28 = block 2
%29:i32 = var
blockpc %28 0 %29 1:i1
%30:i32 = var
blockpc %28 1 %30 1:i1
%31:i32 = var
%32 = phi %28, 16:i32, %31
%33 = block 2
%34:i32 = var
blockpc %33 0 %34 1:i1
%35:i32 = var
blockpc %33 1 %35 1:i1
%36 = block 2
%37:i32 = var
blockpc %36 0 %37 1:i1
%38:i32 = var
blockpc %36 1 %38 1:i1
%39 = block 2
%40 = block 2
%41:i32 = var
%42 = phi %40, %41, %24
%43 = phi %39, %24, %42
%44 = phi %36, %43, %24
%45 = phi %33, -1:i32, %44
%46 = phi %25, %32, %45
%47 = phi %21, %24, %46
%48 = add %47, 47:i32
%49 = add %20, %48
%50:i32 = var
%51 = and %49, %50
%52 = block 5
%53 = block 2
%54:i32 = var
%55 = phi %53, %51, %54
%56 = block 2
%57 = phi %56, %51, %55
%58 = phi %52, %51, %55, %55, %57, %57
%59 = phi %10, %51, %58
%60 = ult %59, 2147483647:i32
pc %60 1:i1
infer %9


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = sub %0, %1
%3 = block 2
%4:i32 = var
%5 = and %4, 4:i32
%6 = ne %5, 0:i32
blockpc %3 0 %6 1:i1
%7 = eq %5, 0:i32
blockpc %3 1 %7 1:i1
%8 = block 2
%9:i32 = var
%10 = ne %9, 0:i32
blockpc %8 0 %10 1:i1
%11 = eq %9, 0:i32
blockpc %8 1 %11 1:i1
%12:i32 = var
%13 = phi %8, %12, 4096:i32
%14 = block 2
%15:i32 = var
%16 = add %15, 11:i32
%17 = and %16, -8:i32
%18 = block 2
%19 = ult %15, 245:i32
blockpc %18 0 %19 1:i1
%20:i32 = zext %19
%21 = eq %20, 0:i32
blockpc %18 1 %21 1:i1
%22 = block 2
%23:i32 = var
blockpc %22 0 %23 1:i1
%24:i32 = var
blockpc %22 1 %24 1:i1
%25:i32 = var
%26 = phi %22, 16:i32, %25
%27 = block 2
%28:i32 = var
blockpc %27 0 %28 1:i1
%29:i32 = var
blockpc %27 1 %29 1:i1
%30 = block 2
%31:i32 = var
blockpc %30 0 %31 1:i1
%32:i32 = var
blockpc %30 1 %32 1:i1
%33 = block 2
%34 = block 2
%35:i32 = var
%36 = phi %34, %35, %17
%37 = phi %33, %17, %36
%38 = phi %30, %37, %17
%39 = phi %27, -1:i32, %38
%40 = phi %18, %26, %39
%41 = phi %14, %17, %40
%42 = add %41, 47:i32
%43 = add %13, %42
%44:i32 = var
%45 = and %43, %44
%46 = block 5
%47 = block 2
%48:i32 = var
%49 = phi %47, %45, %48
%50 = block 2
%51 = phi %50, %45, %49
%52 = phi %46, %45, %49, %49, %51, %51
%53 = phi %3, %45, %52
%54 = ult %53, 2147483647:i32
pc %54 1:i1
infer %2


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2:i32 = var
%3 = add %2, 11:i32 (hasExternalUses)
%4 = and %3, -8:i32 (hasExternalUses)
%5 = block 2
%6 = block 2
%7 = add %2, 11:i32
%8 = and %7, -8:i32 (hasExternalUses)
%9 = phi %6, 16:i32, %8
%10 = block 2
%11 = block 2
%12 = block 2
%13 = block 2
%14:i32 = var
%15 = phi %13, %14, %4
%16 = phi %12, %4, %15
%17 = phi %11, %16, %4
%18 = phi %10, -1:i32, %17
%19 = phi %5, %9, %18
%20 = phi %1, %4, %19
%21 = block 5
%22 = block 2
%23:i32 = var
%24 = phi %22, %20, %23
%25 = block 2
%26 = phi %25, %20, %24
%27 = phi %21, %20, %24, %24, %26, %26
%28 = phi %0, %20, %27
%29 = add %28, 40:i32
%30:i32 = var
blockpc %0 0 %30 1:i1
%31:i32 = var
blockpc %0 1 %31 1:i1
%32:i32 = var
blockpc %5 0 %32 1:i1
%33:i32 = var
blockpc %5 1 %33 1:i1
%34:i32 = var
blockpc %6 0 %34 1:i1
%35:i32 = var
blockpc %6 1 %35 1:i1
%36:i32 = var
blockpc %10 0 %36 1:i1
%37:i32 = var
blockpc %10 1 %37 1:i1
%38:i32 = var
blockpc %11 0 %38 1:i1
%39:i32 = var
blockpc %11 1 %39 1:i1
%40:i32 = var
pc %40 1:i1
infer %29


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2:i32 = var
%3 = add %2, 11:i32 (hasExternalUses)
%4 = and %3, -8:i32 (hasExternalUses)
%5 = block 2
%6 = block 2
%7 = add %2, 11:i32
%8 = and %7, -8:i32 (hasExternalUses)
%9 = phi %6, 16:i32, %8
%10 = block 2
%11 = block 2
%12 = block 2
%13 = block 2
%14:i32 = var
%15 = phi %13, %14, %4
%16 = phi %12, %4, %15
%17 = phi %11, %16, %4
%18 = phi %10, -1:i32, %17
%19 = phi %5, %9, %18
%20 = phi %1, %4, %19
%21 = block 5
%22 = block 2
%23:i32 = var
%24 = phi %22, %20, %23
%25 = block 2
%26 = phi %25, %20, %24
%27 = phi %21, %20, %24, %24, %26, %26
%28 = phi %0, %20, %27
%29 = add %28, 40:i32
%30:i32 = var
%31 = ult %29, %30
%32:i32 = var
blockpc %0 0 %32 1:i1
%33:i32 = var
blockpc %0 1 %33 1:i1
%34:i32 = var
blockpc %5 0 %34 1:i1
%35:i32 = var
blockpc %5 1 %35 1:i1
%36:i32 = var
blockpc %6 0 %36 1:i1
%37:i32 = var
blockpc %6 1 %37 1:i1
%38:i32 = var
blockpc %10 0 %38 1:i1
%39:i32 = var
blockpc %10 1 %39 1:i1
%40:i32 = var
blockpc %11 0 %40 1:i1
%41:i32 = var
blockpc %11 1 %41 1:i1
%42:i32 = var
pc %42 1:i1
infer %31


; start LHS (in $6)
%0:i32 = var
%1 = eq %0, -1:i32
%2 = block 2
%3:i32 = var
%4 = and %3, 4:i32
%5 = ne %4, 0:i32
blockpc %2 0 %5 1:i1
%6 = eq %4, 0:i32
blockpc %2 1 %6 1:i1
%7 = block 2
%8:i32 = var
%9 = ne %8, 0:i32
blockpc %7 0 %9 1:i1
%10 = eq %8, 0:i32
blockpc %7 1 %10 1:i1
%11:i32 = var
%12 = phi %7, %11, 4096:i32
%13 = block 2
%14:i32 = var
%15 = add %14, 11:i32
%16 = and %15, -8:i32
%17 = block 2
%18 = ult %14, 245:i32
blockpc %17 0 %18 1:i1
%19:i32 = zext %18
%20 = eq %19, 0:i32
blockpc %17 1 %20 1:i1
%21 = block 2
%22:i32 = var
blockpc %21 0 %22 1:i1
%23:i32 = var
blockpc %21 1 %23 1:i1
%24:i32 = var
%25 = phi %21, 16:i32, %24
%26 = block 2
%27:i32 = var
blockpc %26 0 %27 1:i1
%28:i32 = var
blockpc %26 1 %28 1:i1
%29 = block 2
%30:i32 = var
blockpc %29 0 %30 1:i1
%31:i32 = var
blockpc %29 1 %31 1:i1
%32 = block 2
%33 = block 2
%34:i32 = var
%35 = phi %33, %34, %16
%36 = phi %32, %16, %35
%37 = phi %29, %36, %16
%38 = phi %26, -1:i32, %37
%39 = phi %17, %25, %38
%40 = phi %13, %16, %39
%41 = add %40, 47:i32
%42 = add %12, %41
%43:i32 = var
%44 = and %42, %43
%45 = block 5
%46 = block 2
%47:i32 = var
%48 = phi %46, %44, %47
%49 = block 2
%50 = phi %49, %44, %48
%51 = phi %45, %44, %48, %48, %50, %50
%52 = phi %2, %44, %51
%53 = ult %52, 2147483647:i32
pc %53 1:i1
infer %1


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2:i32 = var
%3 = add %2, 11:i32 (hasExternalUses)
%4 = and %3, -8:i32 (hasExternalUses)
%5 = block 2
%6 = block 2
%7:i32 = var
%8 = and %7, -8:i32 (hasExternalUses)
%9 = phi %6, 16:i32, %8
%10 = block 2
%11 = block 2
%12 = block 2
%13 = block 2
%14:i32 = var
%15 = phi %13, %14, %4
%16 = phi %12, %4, %15
%17 = phi %11, %16, %4
%18 = phi %10, -1:i32, %17
%19 = phi %5, %9, %18
%20 = phi %1, %4, %19
%21 = block 5
%22 = block 2
%23:i32 = var
%24 = phi %22, %20, %23
%25 = block 2
%26 = phi %25, %20, %24
%27 = phi %21, %20, %24, %24, %26, %26
%28 = phi %0, %20, %27
%29 = add %28, 40:i32
%30:i32 = var
%31 = ult %29, %30 (hasExternalUses)
%32:i32 = zext %31
%33 = xor %32, 1:i32
%34:i32 = var
blockpc %0 0 %34 1:i1
%35:i32 = var
blockpc %0 1 %35 1:i1
%36:i32 = var
blockpc %5 0 %36 1:i1
%37:i32 = var
blockpc %5 1 %37 1:i1
%38:i32 = var
blockpc %6 0 %38 1:i1
%39:i32 = var
blockpc %6 1 %39 1:i1
%40:i32 = var
blockpc %10 0 %40 1:i1
%41:i32 = var
blockpc %10 1 %41 1:i1
%42:i32 = var
blockpc %11 0 %42 1:i1
%43:i32 = var
blockpc %11 1 %43 1:i1
%44:i32 = var
pc %44 1:i1
infer %33


; start LHS (in $6)
%0:i32 = var
%1 = eq %0, -1:i32
%2:i32 = zext %1
%3 = block 2
%4 = block 2
%5:i32 = var
%6 = add %5, 11:i32 (hasExternalUses)
%7 = and %6, -8:i32 (hasExternalUses)
%8 = block 2
%9 = block 2
%10:i32 = var
%11 = phi %9, 16:i32, %10
%12 = block 2
%13 = block 2
%14 = block 2
%15 = block 2
%16:i32 = var
%17 = phi %15, %16, %7
%18 = phi %14, %7, %17
%19 = phi %13, %18, %7
%20 = phi %12, -1:i32, %19
%21 = phi %8, %11, %20
%22 = phi %4, %7, %21
%23 = block 5
%24 = block 2
%25:i32 = var
%26 = phi %24, %22, %25
%27 = block 2
%28 = phi %27, %22, %26
%29 = phi %23, %22, %26, %26, %28, %28
%30 = phi %3, %22, %29
%31 = add %30, 40:i32
%32:i32 = var
%33 = ult %31, %32 (hasExternalUses)
%34:i32 = zext %33
%35 = xor %34, 1:i32
%36 = or %2, %35
%37:i32 = var
blockpc %3 0 %37 1:i1
%38:i32 = var
blockpc %3 1 %38 1:i1
%39:i32 = var
blockpc %8 0 %39 1:i1
%40:i32 = var
blockpc %8 1 %40 1:i1
%41:i32 = var
blockpc %9 0 %41 1:i1
%42:i32 = var
blockpc %9 1 %42 1:i1
%43:i32 = var
blockpc %12 0 %43 1:i1
%44:i32 = var
blockpc %12 1 %44 1:i1
%45:i32 = var
blockpc %13 0 %45 1:i1
%46:i32 = var
blockpc %13 1 %46 1:i1
%47:i32 = var
pc %47 1:i1
infer %36


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = ult %0, %1
%3:i32 = zext %2
%4 = ne %0, -1:i32
%5:i32 = zext %4
%6 = ne %1, -1:i32
%7:i32 = zext %6
%8 = and %5, %7
%9 = and %3, %8
%10 = xor %9, 1:i32
%11 = block 2
%12:i32 = var
%13 = and %12, 4:i32
%14 = ne %13, 0:i32
blockpc %11 0 %14 1:i1
%15 = eq %13, 0:i32
blockpc %11 1 %15 1:i1
%16 = block 2
%17:i32 = var
%18 = ne %17, 0:i32
blockpc %16 0 %18 1:i1
%19 = eq %17, 0:i32
blockpc %16 1 %19 1:i1
%20:i32 = var
%21 = phi %16, %20, 4096:i32
%22 = block 2
%23:i32 = var
%24 = add %23, 11:i32
%25 = and %24, -8:i32
%26 = block 2
%27:i32 = var
blockpc %26 0 %27 1:i1
%28:i32 = var
blockpc %26 1 %28 1:i1
%29 = block 2
%30:i32 = var
blockpc %29 0 %30 1:i1
%31:i32 = var
blockpc %29 1 %31 1:i1
%32:i32 = var
%33 = phi %29, 16:i32, %32
%34 = block 2
%35:i32 = var
blockpc %34 0 %35 1:i1
%36:i32 = var
blockpc %34 1 %36 1:i1
%37 = block 2
%38:i32 = var
blockpc %37 0 %38 1:i1
%39:i32 = var
blockpc %37 1 %39 1:i1
%40 = block 2
%41 = block 2
%42:i32 = var
%43 = phi %41, %42, %25
%44 = phi %40, %25, %43
%45 = phi %37, %44, %25
%46 = phi %34, -1:i32, %45
%47 = phi %26, %33, %46
%48 = phi %22, %25, %47
%49 = add %48, 47:i32
%50 = add %21, %49
%51:i32 = var
%52 = and %50, %51
%53 = block 5
%54 = block 2
%55:i32 = var
%56 = phi %54, %52, %55
%57 = block 2
%58 = phi %57, %52, %56
%59 = phi %53, %52, %56, %56, %58, %58
%60 = phi %11, %52, %59
%61 = ult %60, 2147483647:i32
pc %61 1:i1
infer %10


; start LHS (in $6)
%0:i32 = var
%1 = eq %0, -1:i32
%2:i32 = zext %1
%3 = block 2
%4 = block 2
%5:i32 = var
%6 = and %5, -8:i32 (hasExternalUses)
%7 = block 2
%8 = block 2
%9:i32 = var
%10 = phi %8, 16:i32, %9
%11 = block 2
%12 = block 2
%13 = block 2
%14 = block 2
%15:i32 = var
%16 = phi %14, %15, %6
%17 = phi %13, %6, %16
%18 = phi %12, %17, %6
%19 = phi %11, -1:i32, %18
%20 = phi %7, %10, %19
%21 = phi %4, %6, %20
%22 = block 5
%23 = block 2
%24:i32 = var
%25 = phi %23, %21, %24
%26 = block 2
%27 = phi %26, %21, %25
%28 = phi %22, %21, %25, %25, %27, %27
%29 = phi %3, %21, %28
%30 = add %29, 40:i32
%31:i32 = var
%32 = ult %30, %31 (hasExternalUses)
%33:i32 = zext %32
%34 = xor %33, 1:i32
%35 = or %2, %34
%36:i32 = var
%37 = or %35, %36
%38:i32 = var
blockpc %3 0 %38 1:i1
%39:i32 = var
blockpc %3 1 %39 1:i1
%40:i32 = var
blockpc %7 0 %40 1:i1
%41:i32 = var
blockpc %7 1 %41 1:i1
%42:i32 = var
blockpc %8 0 %42 1:i1
%43:i32 = var
blockpc %8 1 %43 1:i1
%44:i32 = var
blockpc %11 0 %44 1:i1
%45:i32 = var
blockpc %11 1 %45 1:i1
%46:i32 = var
blockpc %12 0 %46 1:i1
%47:i32 = var
blockpc %12 1 %47 1:i1
%48:i32 = var
pc %48 1:i1
infer %37


; start LHS (in $6)
%0:i32 = var
%1 = eq %0, -1:i32
%2:i32 = zext %1
%3 = block 2
%4 = block 2
%5:i32 = var
%6 = block 2
%7 = block 2
%8:i32 = var
%9 = phi %7, 16:i32, %8
%10 = block 2
%11 = block 2
%12 = block 2
%13 = block 2
%14:i32 = var
%15 = phi %13, %14, %5
%16 = phi %12, %5, %15
%17 = phi %11, %16, %5
%18 = phi %10, -1:i32, %17
%19 = phi %6, %9, %18
%20 = phi %4, %5, %19
%21 = block 5
%22 = block 2
%23:i32 = var
%24 = phi %22, %20, %23
%25 = block 2
%26 = phi %25, %20, %24
%27 = phi %21, %20, %24, %24, %26, %26
%28 = phi %3, %20, %27
%29 = add %28, 40:i32
%30:i32 = var
%31 = ult %29, %30 (hasExternalUses)
%32:i32 = zext %31
%33 = xor %32, 1:i32
%34 = or %2, %33
%35:i32 = var
%36 = or %34, %35
%37 = eq %36, 0:i32
%38:i32 = var
blockpc %3 0 %38 1:i1
%39:i32 = var
blockpc %3 1 %39 1:i1
%40:i32 = var
blockpc %6 0 %40 1:i1
%41:i32 = var
blockpc %6 1 %41 1:i1
%42:i32 = var
blockpc %7 0 %42 1:i1
%43:i32 = var
blockpc %7 1 %43 1:i1
%44:i32 = var
blockpc %10 0 %44 1:i1
%45:i32 = var
blockpc %10 1 %45 1:i1
%46:i32 = var
blockpc %11 0 %46 1:i1
%47:i32 = var
blockpc %11 1 %47 1:i1
%48:i32 = var
pc %48 1:i1
infer %37


; start LHS (in $6)
%0:i32 = var
%1 = block 6
%2 = block 2
%3:i32 = var
%4 = phi %2, %3, 4096:i32
%5 = block 2
%6:i32 = var
%7 = add %6, 11:i32 (hasExternalUses)
%8 = and %7, -8:i32 (hasExternalUses)
%9 = block 2
%10 = block 2
%11:i32 = var
%12 = phi %10, 16:i32, %11
%13 = block 2
%14 = block 2
%15 = block 2
%16 = block 2
%17:i32 = var
%18 = phi %16, %17, %8
%19 = phi %15, %8, %18
%20 = phi %14, %19, %8
%21 = phi %13, -1:i32, %20
%22 = phi %9, %12, %21
%23 = phi %5, %8, %22
%24 = add %23, 47:i32 (hasExternalUses)
%25 = add %4, %24 (hasExternalUses)
%26:i32 = var
%27 = sub %25, %26
%28 = sub 0:i32, %4 (hasExternalUses)
%29 = and %27, %28 (hasExternalUses)
%30:i32 = var
%31 = block 2
%32 = phi %31, %29, %30
%33:i32 = var
%34 = block 2
%35 = block 2
%36 = block 5
%37 = block 2
%38 = phi %37, %29, 0:i32
%39 = phi %36, %38, 0:i32, 0:i32, 0:i32, 0:i32
%40 = phi %35, 0:i32, %39
%41:i32 = var
%42 = phi %34, %40, %41
%43 = phi %1, %29, %30, %32, %32, %33, %42
%44 = add %0, %43
%45:i32 = var
blockpc %2 0 %45 1:i1
%46:i32 = var
blockpc %2 1 %46 1:i1
%47:i32 = var
blockpc %9 0 %47 1:i1
%48:i32 = var
blockpc %9 1 %48 1:i1
%49:i32 = var
blockpc %10 0 %49 1:i1
%50:i32 = var
blockpc %10 1 %50 1:i1
%51:i32 = var
blockpc %13 0 %51 1:i1
%52:i32 = var
blockpc %13 1 %52 1:i1
%53:i32 = var
blockpc %14 0 %53 1:i1
%54:i32 = var
blockpc %14 1 %54 1:i1
%55:i32 = var
blockpc %34 0 %55 1:i1
%56:i32 = var
blockpc %34 1 %56 1:i1
%57:i32 = var
blockpc %35 0 %57 1:i1
%58:i32 = var
blockpc %35 1 %58 1:i1
%59:i32 = var
blockpc %37 0 %59 1:i1
%60:i32 = var
blockpc %37 1 %60 1:i1
infer %44


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = block 6
%3 = block 2
%4:i32 = var
%5 = phi %3, %4, 4096:i32
%6 = block 2
%7:i32 = var
%8 = and %7, -8:i32 (hasExternalUses)
%9 = block 2
%10 = block 2
%11:i32 = var
%12 = phi %10, 16:i32, %11
%13 = block 2
%14 = block 2
%15 = block 2
%16 = block 2
%17:i32 = var
%18 = phi %16, %17, %8
%19 = phi %15, %8, %18
%20 = phi %14, %19, %8
%21 = phi %13, -1:i32, %20
%22 = phi %9, %12, %21
%23 = phi %6, %8, %22
%24 = add %23, 47:i32 (hasExternalUses)
%25 = add %5, %24 (hasExternalUses)
%26:i32 = var
%27 = sub %25, %26
%28 = sub 0:i32, %5 (hasExternalUses)
%29 = and %27, %28 (hasExternalUses)
%30:i32 = var
%31 = block 2
%32 = phi %31, %29, %30
%33:i32 = var
%34 = block 2
%35 = block 2
%36 = block 5
%37 = block 2
%38 = phi %37, %29, 0:i32
%39 = phi %36, %38, 0:i32, 0:i32, 0:i32, 0:i32
%40 = phi %35, 0:i32, %39
%41:i32 = var
%42 = phi %34, %40, %41
%43 = phi %2, %29, %30, %32, %32, %33, %42
%44 = add %1, %43 (hasExternalUses)
%45 = ult %0, %44
%46:i32 = var
blockpc %3 0 %46 1:i1
%47:i32 = var
blockpc %3 1 %47 1:i1
%48:i32 = var
blockpc %9 0 %48 1:i1
%49:i32 = var
blockpc %9 1 %49 1:i1
%50:i32 = var
blockpc %10 0 %50 1:i1
%51:i32 = var
blockpc %10 1 %51 1:i1
%52:i32 = var
blockpc %13 0 %52 1:i1
%53:i32 = var
blockpc %13 1 %53 1:i1
%54:i32 = var
blockpc %14 0 %54 1:i1
%55:i32 = var
blockpc %14 1 %55 1:i1
%56:i32 = var
blockpc %34 0 %56 1:i1
%57:i32 = var
blockpc %34 1 %57 1:i1
%58:i32 = var
blockpc %35 0 %58 1:i1
%59:i32 = var
blockpc %35 1 %59 1:i1
%60:i32 = var
blockpc %37 0 %60 1:i1
%61:i32 = var
blockpc %37 1 %61 1:i1
infer %45


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 4:i32
%2:i32 = var
%3 = ne %2, 0:i32
pc %3 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = add %0, %1
%3:i32 = var
%4 = ne %3, 0:i32
pc %4 1:i1
infer %2


; start LHS (in $6)
%0 = block 6
%1:i32 = var
%2:i32 = var
%3 = block 2
%4:i32 = var
%5 = phi %3, %1, %4
%6:i32 = var
%7 = phi %0, %1, %2, %5, %5, %5, %6
%8:i32 = var
%9:i32 = var
%10 = add %8, %9
%11 = eq %7, %10
%12:i32 = var
%13 = ne %12, 0:i32
pc %13 1:i1
infer %11


; start LHS (in $6)
%0:i32 = var
%1 = and %0, 8:i32
%2:i32 = var
%3 = ne %2, 0:i32
pc %3 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = and %0, 8:i32
%2 = eq %1, 0:i32
%3:i32 = var
%4 = ne %3, 0:i32
pc %4 1:i1
infer %2


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = ult %0, %1
%3:i32 = var
%4 = and %3, 8:i32
%5 = eq %4, 0:i32
%6:i32 = var
%7 = ne %6, 0:i32
pc %5 1:i1
pc %7 1:i1
infer %2


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = ule %0, %1
%3:i32 = var
%4 = and %3, 8:i32
%5 = eq %4, 0:i32
%6:i32 = var
%7 = ne %6, 0:i32
pc %5 1:i1
pc %7 1:i1
infer %2


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = ult %0, %1
%3:i32 = zext %2
%4:i32 = var
%5 = ule %4, %0
%6:i32 = zext %5
%7 = and %3, %6
%8:i32 = var
%9 = and %8, 8:i32
%10 = eq %9, 0:i32
%11:i32 = var
%12 = ne %11, 0:i32
pc %10 1:i1
pc %12 1:i1
infer %7


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = add %0, %1
%3:i32 = var
%4:i32 = var
%5 = ult %3, %4
%6:i32 = zext %5
%7:i32 = var
%8 = ule %7, %3
%9:i32 = zext %8
%10 = and %6, %9
%11 = ne %10, 0:i32
%12:i32 = var
%13 = and %12, 8:i32
%14 = eq %13, 0:i32
%15:i32 = var
%16 = ne %15, 0:i32
pc %11 1:i1
pc %14 1:i1
pc %16 1:i1
infer %2


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = add %0, %1
%3:i32 = var
%4:i32 = var
%5 = ult %3, %4
%6:i32 = zext %5
%7:i32 = var
%8 = ule %7, %3
%9:i32 = zext %8
%10 = and %6, %9
%11 = ne %10, 0:i32
%12:i32 = var
%13 = and %12, 8:i32
%14 = eq %13, 0:i32
%15:i32 = var
%16 = ne %15, 0:i32
pc %11 1:i1
pc %14 1:i1
pc %16 1:i1
infer %2


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 8:i32
%2:i32 = var
%3 = ult %0, %2
%4:i32 = zext %3
%5:i32 = var
%6 = ule %5, %0
%7:i32 = zext %6
%8 = and %4, %7
%9 = ne %8, 0:i32
%10:i32 = var
%11 = and %10, 8:i32
%12 = eq %11, 0:i32
%13:i32 = var
%14 = ne %13, 0:i32
pc %9 1:i1
pc %12 1:i1
pc %14 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 8:i32 (hasExternalUses)
%2 = sub 0:i32, %1
%3:i32 = var
%4 = ult %0, %3
%5:i32 = zext %4
%6:i32 = var
%7 = ule %6, %0
%8:i32 = zext %7
%9 = and %5, %8
%10 = ne %9, 0:i32
%11:i32 = var
%12 = and %11, 8:i32
%13 = eq %12, 0:i32
%14:i32 = var
%15 = ne %14, 0:i32
pc %10 1:i1
pc %13 1:i1
pc %15 1:i1
infer %2


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 8:i32 (hasExternalUses)
%2 = sub 0:i32, %1
%3 = and %2, 7:i32
%4:i32 = var
%5 = ult %0, %4
%6:i32 = zext %5
%7:i32 = var
%8 = ule %7, %0
%9:i32 = zext %8
%10 = and %6, %9
%11 = ne %10, 0:i32
%12:i32 = var
%13 = and %12, 8:i32
%14 = eq %13, 0:i32
%15:i32 = var
%16 = ne %15, 0:i32
pc %11 1:i1
pc %14 1:i1
pc %16 1:i1
infer %3


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 8:i32 (hasExternalUses)
%2 = and %1, 7:i32
%3:i32 = var
%4 = ult %0, %3
%5:i32 = zext %4
%6:i32 = var
%7 = ule %6, %0
%8:i32 = zext %7
%9 = and %5, %8
%10 = ne %9, 0:i32
%11:i32 = var
%12 = and %11, 8:i32
%13 = eq %12, 0:i32
%14:i32 = var
%15 = ne %14, 0:i32
pc %10 1:i1
pc %13 1:i1
pc %15 1:i1
infer %2


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2 = add %0, 8:i32 (hasExternalUses)
%3 = sub 0:i32, %2
%4 = and %3, 7:i32 (hasExternalUses)
%5 = phi %1, %4, 0:i32
%6 = add %0, %5
%7 = and %2, 7:i32
%8 = ne %7, 0:i32
blockpc %1 0 %8 1:i1
%9 = eq %7, 0:i32
blockpc %1 1 %9 1:i1
%10:i32 = var
%11 = ult %0, %10
%12:i32 = zext %11
%13:i32 = var
%14 = ule %13, %0
%15:i32 = zext %14
%16 = and %12, %15
%17 = ne %16, 0:i32
%18:i32 = var
%19 = and %18, 8:i32
%20 = eq %19, 0:i32
%21:i32 = var
%22 = ne %21, 0:i32
pc %17 1:i1
pc %20 1:i1
pc %22 1:i1
infer %6


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = add %0, %1 (hasExternalUses)
%3 = block 2
%4:i32 = var
%5 = add %4, 8:i32 (hasExternalUses)
%6 = sub 0:i32, %5
%7 = and %6, 7:i32 (hasExternalUses)
%8 = phi %3, %7, 0:i32
%9 = sub %2, %8
%10 = and %5, 7:i32
%11 = ne %10, 0:i32
blockpc %3 0 %11 1:i1
%12 = eq %10, 0:i32
blockpc %3 1 %12 1:i1
%13:i32 = var
%14 = ult %4, %13
%15:i32 = zext %14
%16:i32 = var
%17 = ule %16, %4
%18:i32 = zext %17
%19 = and %15, %18
%20 = ne %19, 0:i32
%21:i32 = var
%22 = and %21, 8:i32
%23 = eq %22, 0:i32
%24:i32 = var
%25 = ne %24, 0:i32
pc %20 1:i1
pc %23 1:i1
pc %25 1:i1
infer %9


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = add %0, %1 (hasExternalUses)
%3 = block 2
%4:i32 = var
%5 = add %4, 8:i32 (hasExternalUses)
%6 = sub 0:i32, %5
%7 = and %6, 7:i32 (hasExternalUses)
%8 = phi %3, %7, 0:i32
%9 = sub %2, %8 (hasExternalUses)
%10 = or %9, 1:i32
%11 = and %5, 7:i32
%12 = ne %11, 0:i32
blockpc %3 0 %12 1:i1
%13 = eq %11, 0:i32
blockpc %3 1 %13 1:i1
%14:i32 = var
%15 = ult %4, %14
%16:i32 = zext %15
%17:i32 = var
%18 = ule %17, %4
%19:i32 = zext %18
%20 = and %16, %19
%21 = ne %20, 0:i32
%22:i32 = var
%23 = and %22, 8:i32
%24 = eq %23, 0:i32
%25:i32 = var
%26 = ne %25, 0:i32
pc %21 1:i1
pc %24 1:i1
pc %26 1:i1
infer %10


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3 = add %1, %2 (hasExternalUses)
%4 = add %0, %3
%5:i32 = var
%6 = ult %0, %5
%7:i32 = zext %6
%8:i32 = var
%9 = ule %8, %0
%10:i32 = zext %9
%11 = and %7, %10
%12 = ne %11, 0:i32
%13:i32 = var
%14 = and %13, 8:i32
%15 = eq %14, 0:i32
%16:i32 = var
%17 = ne %16, 0:i32
pc %12 1:i1
pc %15 1:i1
pc %17 1:i1
infer %4


; start LHS (in $6)
%0 = block 2
%1 = block 6
%2:i32 = var
%3:i32 = var
%4 = block 2
%5:i32 = var
%6 = phi %4, %2, %5
%7:i32 = var
%8 = phi %1, %2, %3, %6, %6, %6, %7
%9:i32 = var
%10 = phi %0, %8, %9
%11:i32 = var
%12 = ult %10, %11
%13:i32 = var
%14 = ne %13, 0:i32
pc %14 1:i1
infer %12


; start LHS (in $6)
%0 = block 2
%1 = block 6
%2:i32 = var
%3:i32 = var
%4 = block 2
%5:i32 = var
%6 = phi %4, %2, %5
%7:i32 = var
%8 = phi %1, %2, %3, %6, %6, %6, %7
%9:i32 = var
%10 = phi %0, %8, %9
%11 = block 2
%12:i32 = var
%13 = phi %11, %12, 4096:i32
%14 = block 2
%15:i32 = var
%16 = and %15, -8:i32 (hasExternalUses)
%17 = block 2
%18 = block 2
%19:i32 = var
%20 = phi %18, 16:i32, %19
%21 = block 2
%22 = block 2
%23 = block 2
%24 = block 2
%25:i32 = var
%26 = phi %24, %25, %16
%27 = phi %23, %16, %26
%28 = phi %22, %27, %16
%29 = phi %21, -1:i32, %28
%30 = phi %17, %20, %29
%31 = phi %14, %16, %30
%32 = add %31, 47:i32 (hasExternalUses)
%33 = add %13, %32 (hasExternalUses)
%34:i32 = var
%35 = sub %33, %34
%36:i32 = var
%37 = and %35, %36 (hasExternalUses)
%38:i32 = var
%39 = phi %4, %37, %38
%40:i32 = var
%41 = block 2
%42 = block 2
%43 = block 5
%44 = block 2
%45 = phi %44, %37, 0:i32
%46 = phi %43, %45, 0:i32, 0:i32, 0:i32, 0:i32
%47 = phi %42, 0:i32, %46
%48:i32 = var
%49 = phi %41, %47, %48
%50 = phi %1, %37, %38, %39, %39, %40, %49
%51:i32 = var
%52 = phi %0, %50, %51
%53 = add %10, %52
%54:i32 = var
blockpc %11 0 %54 1:i1
%55:i32 = var
blockpc %11 1 %55 1:i1
%56:i32 = var
blockpc %17 0 %56 1:i1
%57:i32 = var
blockpc %17 1 %57 1:i1
%58:i32 = var
blockpc %18 0 %58 1:i1
%59:i32 = var
blockpc %18 1 %59 1:i1
%60:i32 = var
blockpc %21 0 %60 1:i1
%61:i32 = var
blockpc %21 1 %61 1:i1
%62:i32 = var
blockpc %22 0 %62 1:i1
%63:i32 = var
blockpc %22 1 %63 1:i1
%64:i32 = var
blockpc %41 0 %64 1:i1
%65:i32 = var
blockpc %41 1 %65 1:i1
%66:i32 = var
blockpc %42 0 %66 1:i1
%67:i32 = var
blockpc %42 1 %67 1:i1
%68:i32 = var
blockpc %44 0 %68 1:i1
%69:i32 = var
blockpc %44 1 %69 1:i1
%70:i32 = var
pc %70 1:i1
infer %53


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2 = block 6
%3:i32 = var
%4:i32 = var
%5 = block 2
%6:i32 = var
%7 = phi %5, %3, %6
%8:i32 = var
%9 = phi %2, %3, %4, %7, %7, %7, %8
%10:i32 = var
%11 = phi %1, %9, %10
%12 = block 2
%13:i32 = var
%14 = phi %12, %13, 4096:i32
%15 = block 2
%16:i32 = var
%17 = block 2
%18 = block 2
%19:i32 = var
%20 = phi %18, 16:i32, %19
%21 = block 2
%22 = block 2
%23 = block 2
%24 = block 2
%25:i32 = var
%26 = phi %24, %25, %16
%27 = phi %23, %16, %26
%28 = phi %22, %27, %16
%29 = phi %21, -1:i32, %28
%30 = phi %17, %20, %29
%31 = phi %15, %16, %30
%32 = add %31, 47:i32 (hasExternalUses)
%33 = add %14, %32 (hasExternalUses)
%34:i32 = var
%35 = sub %33, %34
%36:i32 = var
%37 = and %35, %36 (hasExternalUses)
%38:i32 = var
%39 = phi %5, %37, %38
%40:i32 = var
%41 = block 2
%42 = block 2
%43 = block 5
%44 = block 2
%45 = phi %44, %37, 0:i32
%46 = phi %43, %45, 0:i32, 0:i32, 0:i32, 0:i32
%47 = phi %42, 0:i32, %46
%48:i32 = var
%49 = phi %41, %47, %48
%50 = phi %2, %37, %38, %39, %39, %40, %49
%51:i32 = var
%52 = phi %1, %50, %51
%53 = add %11, %52 (hasExternalUses)
%54 = eq %0, %53
%55:i32 = var
blockpc %12 0 %55 1:i1
%56:i32 = var
blockpc %12 1 %56 1:i1
%57:i32 = var
blockpc %17 0 %57 1:i1
%58:i32 = var
blockpc %17 1 %58 1:i1
%59:i32 = var
blockpc %18 0 %59 1:i1
%60:i32 = var
blockpc %18 1 %60 1:i1
%61:i32 = var
blockpc %21 0 %61 1:i1
%62:i32 = var
blockpc %21 1 %62 1:i1
%63:i32 = var
blockpc %22 0 %63 1:i1
%64:i32 = var
blockpc %22 1 %64 1:i1
%65:i32 = var
blockpc %41 0 %65 1:i1
%66:i32 = var
blockpc %41 1 %66 1:i1
%67:i32 = var
blockpc %42 0 %67 1:i1
%68:i32 = var
blockpc %42 1 %68 1:i1
%69:i32 = var
blockpc %44 0 %69 1:i1
%70:i32 = var
blockpc %44 1 %70 1:i1
%71:i32 = var
pc %71 1:i1
infer %54


; start LHS (in $6)
%0:i32 = var
%1 = and %0, 8:i32
%2:i32 = var
%3 = ne %2, 0:i32
pc %3 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 4:i32
%2:i32 = var
%3 = and %2, 8:i32
%4 = eq %3, 0:i32
%5:i32 = var
%6 = ne %5, 0:i32
pc %4 1:i1
pc %6 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = add %0, %1
%3:i32 = var
%4 = and %3, 8:i32
%5 = eq %4, 0:i32
%6:i32 = var
%7 = ne %6, 0:i32
pc %5 1:i1
pc %7 1:i1
infer %2


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 8:i32
%2:i32 = var
%3 = and %2, 8:i32
%4 = eq %3, 0:i32
%5:i32 = var
%6 = ne %5, 0:i32
pc %4 1:i1
pc %6 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 8:i32 (hasExternalUses)
%2 = sub 0:i32, %1
%3:i32 = var
%4 = and %3, 8:i32
%5 = eq %4, 0:i32
%6:i32 = var
%7 = ne %6, 0:i32
pc %5 1:i1
pc %7 1:i1
infer %2


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 8:i32 (hasExternalUses)
%2 = sub 0:i32, %1
%3 = and %2, 7:i32
%4:i32 = var
%5 = and %4, 8:i32
%6 = eq %5, 0:i32
%7:i32 = var
%8 = ne %7, 0:i32
pc %6 1:i1
pc %8 1:i1
infer %3


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 8:i32
%2:i32 = var
%3 = and %2, 8:i32
%4 = eq %3, 0:i32
%5:i32 = var
%6 = ne %5, 0:i32
pc %4 1:i1
pc %6 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 8:i32 (hasExternalUses)
%2 = sub 0:i32, %1
%3:i32 = var
%4 = and %3, 8:i32
%5 = eq %4, 0:i32
%6:i32 = var
%7 = ne %6, 0:i32
pc %5 1:i1
pc %7 1:i1
infer %2


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 8:i32 (hasExternalUses)
%2 = sub 0:i32, %1
%3 = and %2, 7:i32
%4:i32 = var
%5 = and %4, 8:i32
%6 = eq %5, 0:i32
%7:i32 = var
%8 = ne %7, 0:i32
pc %6 1:i1
pc %8 1:i1
infer %3


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 8:i32 (hasExternalUses)
%2 = and %1, 7:i32
%3:i32 = var
%4 = and %3, 8:i32
%5 = eq %4, 0:i32
%6:i32 = var
%7 = ne %6, 0:i32
pc %5 1:i1
pc %7 1:i1
infer %2


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2 = add %0, 8:i32 (hasExternalUses)
%3 = sub 0:i32, %2
%4 = and %3, 7:i32
%5 = phi %1, %4, 0:i32
%6 = add %0, %5
%7 = and %2, 7:i32
%8 = ne %7, 0:i32
blockpc %1 0 %8 1:i1
%9 = eq %7, 0:i32
blockpc %1 1 %9 1:i1
%10:i32 = var
%11 = and %10, 8:i32
%12 = eq %11, 0:i32
%13:i32 = var
%14 = ne %13, 0:i32
pc %12 1:i1
pc %14 1:i1
infer %6


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2 = add %0, 8:i32 (hasExternalUses)
%3 = sub 0:i32, %2
%4 = and %3, 7:i32
%5 = phi %1, %4, 0:i32
%6 = add %0, %5 (hasExternalUses)
%7:i32 = var
%8 = add %6, %7
%9 = and %2, 7:i32
%10 = ne %9, 0:i32
blockpc %1 0 %10 1:i1
%11 = eq %9, 0:i32
blockpc %1 1 %11 1:i1
%12:i32 = var
%13 = and %12, 8:i32
%14 = eq %13, 0:i32
%15:i32 = var
%16 = ne %15, 0:i32
pc %14 1:i1
pc %16 1:i1
infer %8


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 8:i32 (hasExternalUses)
%2 = and %1, 7:i32
%3:i32 = var
%4 = and %3, 8:i32
%5 = eq %4, 0:i32
%6:i32 = var
%7 = ne %6, 0:i32
pc %5 1:i1
pc %7 1:i1
infer %2


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2 = add %0, 8:i32 (hasExternalUses)
%3 = sub 0:i32, %2
%4 = and %3, 7:i32
%5 = phi %1, %4, 0:i32
%6 = add %0, %5
%7 = and %2, 7:i32
%8 = ne %7, 0:i32
blockpc %1 0 %8 1:i1
%9 = eq %7, 0:i32
blockpc %1 1 %9 1:i1
%10:i32 = var
%11 = and %10, 8:i32
%12 = eq %11, 0:i32
%13:i32 = var
%14 = ne %13, 0:i32
pc %12 1:i1
pc %14 1:i1
infer %6


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2 = add %0, 8:i32 (hasExternalUses)
%3 = sub 0:i32, %2
%4 = and %3, 7:i32
%5 = phi %1, %4, 0:i32
%6 = add %0, %5 (hasExternalUses)
%7:i32 = var
%8 = block 2
%9 = add %7, 8:i32 (hasExternalUses)
%10 = sub 0:i32, %9
%11 = and %10, 7:i32
%12 = phi %8, %11, 0:i32
%13 = add %7, %12 (hasExternalUses)
%14 = sub %6, %13
%15 = and %2, 7:i32
%16 = ne %15, 0:i32
blockpc %1 0 %16 1:i1
%17 = eq %15, 0:i32
blockpc %1 1 %17 1:i1
%18 = and %9, 7:i32
%19 = ne %18, 0:i32
blockpc %8 0 %19 1:i1
%20 = eq %18, 0:i32
blockpc %8 1 %20 1:i1
%21:i32 = var
%22 = and %21, 8:i32
%23 = eq %22, 0:i32
%24:i32 = var
%25 = ne %24, 0:i32
pc %23 1:i1
pc %25 1:i1
infer %14


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2 = add %0, 8:i32 (hasExternalUses)
%3 = sub 0:i32, %2
%4 = and %3, 7:i32
%5 = phi %1, %4, 0:i32
%6 = add %0, %5 (hasExternalUses)
%7:i32 = var
%8 = block 2
%9 = add %7, 8:i32 (hasExternalUses)
%10 = sub 0:i32, %9
%11 = and %10, 7:i32
%12 = phi %8, %11, 0:i32
%13 = add %7, %12 (hasExternalUses)
%14 = sub %6, %13
%15:i32 = var
%16 = sub %14, %15
%17 = and %2, 7:i32
%18 = ne %17, 0:i32
blockpc %1 0 %18 1:i1
%19 = eq %17, 0:i32
blockpc %1 1 %19 1:i1
%20 = and %9, 7:i32
%21 = ne %20, 0:i32
blockpc %8 0 %21 1:i1
%22 = eq %20, 0:i32
blockpc %8 1 %22 1:i1
%23:i32 = var
%24 = and %23, 8:i32
%25 = eq %24, 0:i32
%26:i32 = var
pc %25 1:i1
pc %26 1:i1
infer %16


; start LHS (in $6)
%0:i32 = var
%1 = or %0, 3:i32
%2:i32 = var
%3 = and %2, 8:i32
%4 = eq %3, 0:i32
%5:i32 = var
%6 = ne %5, 0:i32
pc %4 1:i1
pc %6 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = block 2
%3 = add %1, 8:i32 (hasExternalUses)
%4 = sub 0:i32, %3
%5 = and %4, 7:i32
%6 = phi %2, %5, 0:i32
%7 = add %1, %6 (hasExternalUses)
%8 = eq %0, %7
%9 = and %3, 7:i32
%10 = ne %9, 0:i32
blockpc %2 0 %10 1:i1
%11 = eq %9, 0:i32
blockpc %2 1 %11 1:i1
%12:i32 = var
%13 = and %12, 8:i32
%14 = eq %13, 0:i32
%15:i32 = var
%16 = ne %15, 0:i32
pc %14 1:i1
pc %16 1:i1
infer %8


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = block 2
%3 = add %1, 8:i32 (hasExternalUses)
%4 = sub 0:i32, %3
%5 = and %4, 7:i32
%6 = phi %2, %5, 0:i32
%7 = add %1, %6 (hasExternalUses)
%8:i32 = var
%9 = block 2
%10 = add %8, 8:i32 (hasExternalUses)
%11 = sub 0:i32, %10
%12 = and %11, 7:i32
%13 = phi %9, %12, 0:i32
%14 = add %8, %13 (hasExternalUses)
%15 = sub %7, %14
%16:i32 = var
%17 = sub %15, %16 (hasExternalUses)
%18 = add %0, %17
%19 = and %3, 7:i32
%20 = ne %19, 0:i32
blockpc %2 0 %20 1:i1
%21 = eq %19, 0:i32
blockpc %2 1 %21 1:i1
%22 = and %10, 7:i32
%23 = ne %22, 0:i32
blockpc %9 0 %23 1:i1
%24 = eq %22, 0:i32
blockpc %9 1 %24 1:i1
%25:i32 = var
%26 = eq %25, %7
%27:i32 = var
%28:i32 = var
pc %26 1:i1
pc %27 1:i1
pc %28 1:i1
infer %18


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = block 2
%3 = add %1, 8:i32 (hasExternalUses)
%4 = sub 0:i32, %3
%5 = and %4, 7:i32
%6 = phi %2, %5, 0:i32
%7 = add %1, %6 (hasExternalUses)
%8:i32 = var
%9 = block 2
%10 = add %8, 8:i32 (hasExternalUses)
%11 = sub 0:i32, %10
%12 = and %11, 7:i32
%13 = phi %9, %12, 0:i32
%14 = add %8, %13 (hasExternalUses)
%15 = sub %7, %14
%16:i32 = var
%17 = sub %15, %16 (hasExternalUses)
%18 = add %0, %17 (hasExternalUses)
%19 = or %18, 1:i32
%20 = and %3, 7:i32
%21 = ne %20, 0:i32
blockpc %2 0 %21 1:i1
%22 = eq %20, 0:i32
blockpc %2 1 %22 1:i1
%23 = and %10, 7:i32
%24 = ne %23, 0:i32
blockpc %9 0 %24 1:i1
%25 = eq %23, 0:i32
blockpc %9 1 %25 1:i1
%26:i32 = var
%27:i32 = var
%28:i32 = var
pc %26 1:i1
pc %27 1:i1
pc %28 1:i1
infer %19


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = block 2
%3 = add %1, 8:i32 (hasExternalUses)
%4 = sub 0:i32, %3
%5 = and %4, 7:i32
%6 = phi %2, %5, 0:i32
%7 = add %1, %6 (hasExternalUses)
%8 = eq %0, %7
%9 = and %3, 7:i32
%10 = ne %9, 0:i32
blockpc %2 0 %10 1:i1
%11 = eq %9, 0:i32
blockpc %2 1 %11 1:i1
%12:i32 = var
%13 = eq %12, %7
%14:i32 = zext %13
%15 = eq %14, 0:i32
%16:i32 = var
%17 = and %16, 8:i32
%18 = eq %17, 0:i32
%19:i32 = var
%20 = ne %19, 0:i32
pc %15 1:i1
pc %18 1:i1
pc %20 1:i1
infer %8


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = block 2
%3 = add %1, 8:i32 (hasExternalUses)
%4 = sub 0:i32, %3
%5 = and %4, 7:i32
%6 = phi %2, %5, 0:i32
%7 = add %1, %6 (hasExternalUses)
%8:i32 = var
%9 = block 2
%10 = add %8, 8:i32 (hasExternalUses)
%11 = sub 0:i32, %10
%12 = and %11, 7:i32
%13 = phi %9, %12, 0:i32
%14 = add %8, %13 (hasExternalUses)
%15 = sub %7, %14
%16:i32 = var
%17 = sub %15, %16 (hasExternalUses)
%18 = add %0, %17
%19 = and %3, 7:i32
%20 = ne %19, 0:i32
blockpc %2 0 %20 1:i1
%21 = eq %19, 0:i32
blockpc %2 1 %21 1:i1
%22 = and %10, 7:i32
%23 = ne %22, 0:i32
blockpc %9 0 %23 1:i1
%24 = eq %22, 0:i32
blockpc %9 1 %24 1:i1
%25:i32 = var
%26 = eq %25, %7
%27:i32 = var
%28:i32 = var
%29:i32 = var
pc %26 1:i1
pc %27 1:i1
pc %28 1:i1
pc %29 1:i1
infer %18


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = block 2
%3 = add %1, 8:i32 (hasExternalUses)
%4 = sub 0:i32, %3
%5 = and %4, 7:i32
%6 = phi %2, %5, 0:i32
%7 = add %1, %6 (hasExternalUses)
%8:i32 = var
%9 = block 2
%10 = add %8, 8:i32 (hasExternalUses)
%11 = sub 0:i32, %10
%12 = and %11, 7:i32
%13 = phi %9, %12, 0:i32
%14 = add %8, %13 (hasExternalUses)
%15 = sub %7, %14
%16:i32 = var
%17 = sub %15, %16 (hasExternalUses)
%18 = add %0, %17 (hasExternalUses)
%19 = or %18, 1:i32
%20 = and %3, 7:i32
%21 = ne %20, 0:i32
blockpc %2 0 %21 1:i1
%22 = eq %20, 0:i32
blockpc %2 1 %22 1:i1
%23 = and %10, 7:i32
%24 = ne %23, 0:i32
blockpc %9 0 %24 1:i1
%25 = eq %23, 0:i32
blockpc %9 1 %25 1:i1
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29:i32 = var
pc %26 1:i1
pc %27 1:i1
pc %28 1:i1
pc %29 1:i1
infer %19


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2 = add %0, 8:i32 (hasExternalUses)
%3 = sub 0:i32, %2
%4 = and %3, 7:i32
%5 = phi %1, %4, 0:i32
%6 = add %0, %5 (hasExternalUses)
%7:i32 = var
%8 = add %6, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = var
%11 = block 2
%12 = add %10, 8:i32 (hasExternalUses)
%13 = sub 0:i32, %12
%14 = and %13, 7:i32
%15 = phi %11, %14, 0:i32
%16 = add %10, %15 (hasExternalUses)
%17 = sub %16, %6
%18 = sub %17, %7 (hasExternalUses)
%19 = add %9, %18 (hasExternalUses)
%20 = add %8, %19
%21 = and %2, 7:i32
%22 = ne %21, 0:i32
blockpc %1 0 %22 1:i1
%23 = eq %21, 0:i32
blockpc %1 1 %23 1:i1
%24 = and %12, 7:i32
%25 = ne %24, 0:i32
blockpc %11 0 %25 1:i1
%26 = eq %24, 0:i32
blockpc %11 1 %26 1:i1
%27:i32 = var
%28:i32 = var
%29:i32 = var
%30:i32 = var
pc %27 1:i1
pc %28 1:i1
pc %29 1:i1
pc %30 1:i1
infer %20


; start LHS (in $6)
%0:i32 = var
%1 = and %0, 3:i32
%2:i32 = var
%3:i32 = var
%4 = block 2
%5 = add %3, 8:i32
%6 = and %5, 7:i32
%7 = ne %6, 0:i32
blockpc %4 0 %7 1:i1
%8 = eq %6, 0:i32
blockpc %4 1 %8 1:i1
%9 = sub 0:i32, %5
%10 = and %9, 7:i32
%11 = phi %4, %10, 0:i32
%12 = add %3, %11
%13 = eq %2, %12
%14:i32 = zext %13
%15 = eq %14, 0:i32
%16:i32 = var
%17 = and %16, 8:i32
%18 = eq %17, 0:i32
%19:i32 = var
%20 = ne %19, 0:i32
pc %15 1:i1
pc %18 1:i1
pc %20 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = and %0, 3:i32
%2 = eq %1, 1:i32
%3:i32 = var
%4:i32 = var
%5 = block 2
%6 = add %4, 8:i32
%7 = and %6, 7:i32
%8 = ne %7, 0:i32
blockpc %5 0 %8 1:i1
%9 = eq %7, 0:i32
blockpc %5 1 %9 1:i1
%10 = sub 0:i32, %6
%11 = and %10, 7:i32
%12 = phi %5, %11, 0:i32
%13 = add %4, %12
%14 = eq %3, %13
%15:i32 = zext %14
%16 = eq %15, 0:i32
%17:i32 = var
%18 = and %17, 8:i32
%19 = eq %18, 0:i32
%20:i32 = var
%21 = ne %20, 0:i32
pc %16 1:i1
pc %19 1:i1
pc %21 1:i1
infer %2


; start LHS (in $6)
%0:i32 = var
%1 = and %0, -8:i32
%2 = and %0, 3:i32
%3 = eq %2, 1:i32
%4:i32 = var
%5:i32 = var
%6 = block 2
%7 = add %5, 8:i32
%8 = and %7, 7:i32
%9 = ne %8, 0:i32
blockpc %6 0 %9 1:i1
%10 = eq %8, 0:i32
blockpc %6 1 %10 1:i1
%11 = sub 0:i32, %7
%12 = and %11, 7:i32
%13 = phi %6, %12, 0:i32
%14 = add %5, %13
%15 = eq %4, %14
%16:i32 = zext %15
%17 = eq %16, 0:i32
%18:i32 = var
%19 = and %18, 8:i32
%20 = eq %19, 0:i32
%21:i32 = var
%22 = ne %21, 0:i32
pc %3 1:i1
pc %17 1:i1
pc %20 1:i1
pc %22 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = lshr %0, 3:i32
%2 = and %0, 3:i32
%3 = eq %2, 1:i32
%4:i32 = var
%5:i32 = var
%6 = block 2
%7 = add %5, 8:i32
%8 = and %7, 7:i32
%9 = ne %8, 0:i32
blockpc %6 0 %9 1:i1
%10 = eq %8, 0:i32
blockpc %6 1 %10 1:i1
%11 = sub 0:i32, %7
%12 = and %11, 7:i32
%13 = phi %6, %12, 0:i32
%14 = add %5, %13
%15 = eq %4, %14
%16:i32 = zext %15
%17 = eq %16, 0:i32
%18:i32 = var
%19 = and %18, 8:i32
%20 = eq %19, 0:i32
%21:i32 = var
%22 = ne %21, 0:i32
pc %3 1:i1
pc %17 1:i1
pc %20 1:i1
pc %22 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = ult %0, 256:i32
%2 = and %0, 3:i32
%3 = eq %2, 1:i32
%4:i32 = var
%5:i32 = var
%6 = block 2
%7 = add %5, 8:i32
%8 = and %7, 7:i32
%9 = ne %8, 0:i32
blockpc %6 0 %9 1:i1
%10 = eq %8, 0:i32
blockpc %6 1 %10 1:i1
%11 = sub 0:i32, %7
%12 = and %11, 7:i32
%13 = phi %6, %12, 0:i32
%14 = add %5, %13
%15 = eq %4, %14
%16:i32 = zext %15
%17 = eq %16, 0:i32
%18:i32 = var
%19 = and %18, 8:i32
%20 = eq %19, 0:i32
%21:i32 = var
%22 = ne %21, 0:i32
pc %3 1:i1
pc %17 1:i1
pc %20 1:i1
pc %22 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = eq %0, %1
%3:i32 = var
%4 = ult %3, 256:i32
%5 = and %3, 3:i32
%6 = eq %5, 1:i32
%7:i32 = var
%8:i32 = var
%9 = block 2
%10 = add %8, 8:i32
%11 = and %10, 7:i32
%12 = ne %11, 0:i32
blockpc %9 0 %12 1:i1
%13 = eq %11, 0:i32
blockpc %9 1 %13 1:i1
%14 = sub 0:i32, %10
%15 = and %14, 7:i32
%16 = phi %9, %15, 0:i32
%17 = add %8, %16
%18 = eq %7, %17
%19:i32 = zext %18
%20 = eq %19, 0:i32
%21:i32 = var
%22 = and %21, 8:i32
%23 = eq %22, 0:i32
%24:i32 = var
%25 = ne %24, 0:i32
pc %4 1:i1
pc %6 1:i1
pc %20 1:i1
pc %23 1:i1
pc %25 1:i1
infer %2


; start LHS (in $6)
%0:i32 = var
%1 = lshr %0, 3:i32
%2 = shl 1:i32, %1
%3:i32 = var
%4:i32 = var
%5 = eq %3, %4
%6 = ult %0, 256:i32
%7 = and %0, 3:i32
%8 = eq %7, 1:i32
%9:i32 = var
%10:i32 = var
%11 = block 2
%12 = add %10, 8:i32
%13 = and %12, 7:i32
%14 = ne %13, 0:i32
blockpc %11 0 %14 1:i1
%15 = eq %13, 0:i32
blockpc %11 1 %15 1:i1
%16 = sub 0:i32, %12
%17 = and %16, 7:i32
%18 = phi %11, %17, 0:i32
%19 = add %10, %18
%20 = eq %9, %19
%21:i32 = zext %20
%22 = eq %21, 0:i32
%23:i32 = var
%24 = and %23, 8:i32
%25 = eq %24, 0:i32
%26:i32 = var
%27 = ne %26, 0:i32
pc %5 1:i1
pc %6 1:i1
pc %8 1:i1
pc %22 1:i1
pc %25 1:i1
pc %27 1:i1
infer %2


; start LHS (in $6)
%0:i32 = var
%1 = lshr %0, 3:i32
%2 = shl 1:i32, %1
%3 = xor %2, -1:i32
%4:i32 = var
%5:i32 = var
%6 = eq %4, %5
%7 = ult %0, 256:i32
%8 = and %0, 3:i32
%9 = eq %8, 1:i32
%10:i32 = var
%11:i32 = var
%12 = block 2
%13 = add %11, 8:i32
%14 = and %13, 7:i32
%15 = ne %14, 0:i32
blockpc %12 0 %15 1:i1
%16 = eq %14, 0:i32
blockpc %12 1 %16 1:i1
%17 = sub 0:i32, %13
%18 = and %17, 7:i32
%19 = phi %12, %18, 0:i32
%20 = add %11, %19
%21 = eq %10, %20
%22:i32 = zext %21
%23 = eq %22, 0:i32
%24:i32 = var
%25 = and %24, 8:i32
%26 = eq %25, 0:i32
%27:i32 = var
%28 = ne %27, 0:i32
pc %6 1:i1
pc %7 1:i1
pc %9 1:i1
pc %23 1:i1
pc %26 1:i1
pc %28 1:i1
infer %3


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = lshr %1, 3:i32
%3 = shl 1:i32, %2
%4 = xor %3, -1:i32
%5 = and %0, %4
%6:i32 = var
%7:i32 = var
%8 = eq %6, %7
%9 = ult %1, 256:i32
%10 = and %1, 3:i32
%11 = eq %10, 1:i32
%12:i32 = var
%13:i32 = var
%14 = block 2
%15 = add %13, 8:i32
%16 = and %15, 7:i32
%17 = ne %16, 0:i32
blockpc %14 0 %17 1:i1
%18 = eq %16, 0:i32
blockpc %14 1 %18 1:i1
%19 = sub 0:i32, %15
%20 = and %19, 7:i32
%21 = phi %14, %20, 0:i32
%22 = add %13, %21
%23 = eq %12, %22
%24:i32 = zext %23
%25 = eq %24, 0:i32
%26:i32 = var
%27 = and %26, 8:i32
%28 = eq %27, 0:i32
%29:i32 = var
pc %8 1:i1
pc %9 1:i1
pc %11 1:i1
pc %25 1:i1
pc %28 1:i1
pc %29 1:i1
infer %5


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = block 2
%3 = add %1, 8:i32 (hasExternalUses)
%4 = sub 0:i32, %3
%5 = and %4, 7:i32
%6 = phi %2, %5, 0:i32
%7 = add %1, %6 (hasExternalUses)
%8 = eq %0, %7
%9 = and %3, 7:i32
%10 = ne %9, 0:i32
blockpc %2 0 %10 1:i1
%11 = eq %9, 0:i32
blockpc %2 1 %11 1:i1
%12:i32 = var
%13 = ult %12, 256:i32
%14:i32 = zext %13
%15 = eq %14, 0:i32
%16 = and %12, 3:i32
%17 = eq %16, 1:i32
%18:i32 = var
%19 = eq %18, %7
%20:i32 = zext %19
%21 = eq %20, 0:i32
%22:i32 = var
%23 = and %22, 8:i32
%24 = eq %23, 0:i32
%25:i32 = var
%26 = ne %25, 0:i32
pc %15 1:i1
pc %17 1:i1
pc %21 1:i1
pc %24 1:i1
pc %26 1:i1
infer %8


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2 = add %0, 8:i32 (hasExternalUses)
%3 = sub 0:i32, %2
%4 = and %3, 7:i32
%5 = phi %1, %4, 0:i32
%6 = add %0, %5 (hasExternalUses)
%7 = add %6, 16:i32
%8 = and %2, 7:i32
%9 = ne %8, 0:i32
blockpc %1 0 %9 1:i1
%10 = eq %8, 0:i32
blockpc %1 1 %10 1:i1
%11:i32 = var
%12 = eq %11, %6
%13:i32 = var
%14 = ult %13, 256:i32
%15:i32 = zext %14
%16 = eq %15, 0:i32
%17 = and %13, 3:i32
%18 = eq %17, 1:i32
%19:i32 = var
%20 = eq %19, %6
%21:i32 = zext %20
%22 = eq %21, 0:i32
%23:i32 = var
%24 = and %23, 8:i32
%25 = eq %24, 0:i32
%26:i32 = var
%27 = ne %26, 0:i32
pc %12 1:i1
pc %16 1:i1
pc %18 1:i1
pc %22 1:i1
pc %25 1:i1
pc %27 1:i1
infer %7


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2 = add %0, 8:i32 (hasExternalUses)
%3 = sub 0:i32, %2
%4 = and %3, 7:i32
%5 = phi %1, %4, 0:i32
%6 = add %0, %5 (hasExternalUses)
%7 = add %6, 16:i32 (hasExternalUses)
%8 = add %7, 4:i32
%9 = and %2, 7:i32
%10 = ne %9, 0:i32
blockpc %1 0 %10 1:i1
%11 = eq %9, 0:i32
blockpc %1 1 %11 1:i1
%12:i32 = var
%13 = eq %12, %6
%14:i32 = var
%15 = ult %14, 256:i32
%16:i32 = zext %15
%17 = eq %16, 0:i32
%18 = and %14, 3:i32
%19 = eq %18, 1:i32
%20:i32 = var
%21 = eq %20, %6
%22:i32 = zext %21
%23 = eq %22, 0:i32
%24:i32 = var
%25 = and %24, 8:i32
%26 = eq %25, 0:i32
%27:i32 = var
%28 = ne %27, 0:i32
pc %13 1:i1
pc %17 1:i1
pc %19 1:i1
pc %23 1:i1
pc %26 1:i1
pc %28 1:i1
infer %8


; start LHS (in $6)
%0:i32 = var
%1 = eq %0, 0:i32
%2:i32 = var
%3 = eq %2, 0:i32
%4:i32 = var
%5:i32 = var
%6 = block 2
%7 = add %5, 8:i32
%8 = and %7, 7:i32
%9 = ne %8, 0:i32
blockpc %6 0 %9 1:i1
%10 = eq %8, 0:i32
blockpc %6 1 %10 1:i1
%11 = sub 0:i32, %7
%12 = and %11, 7:i32
%13 = phi %6, %12, 0:i32
%14 = add %5, %13
%15 = eq %4, %14
%16:i32 = var
%17 = ult %16, 256:i32
%18:i32 = zext %17
%19 = eq %18, 0:i32
%20 = and %16, 3:i32
%21 = eq %20, 1:i32
%22:i32 = var
%23 = eq %22, %14
%24:i32 = zext %23
%25 = eq %24, 0:i32
%26:i32 = var
%27 = and %26, 8:i32
%28 = eq %27, 0:i32
%29:i32 = var
pc %3 1:i1
pc %15 1:i1
pc %19 1:i1
pc %21 1:i1
pc %25 1:i1
pc %28 1:i1
pc %29 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 20:i32
%2:i32 = var
%3:i32 = var
%4 = block 2
%5 = add %3, 8:i32
%6 = and %5, 7:i32
%7 = ne %6, 0:i32
blockpc %4 0 %7 1:i1
%8 = eq %6, 0:i32
blockpc %4 1 %8 1:i1
%9 = sub 0:i32, %5
%10 = and %9, 7:i32
%11 = phi %4, %10, 0:i32
%12 = add %3, %11
%13 = eq %2, %12
%14:i32 = var
%15 = ult %14, 256:i32
%16:i32 = zext %15
%17 = eq %16, 0:i32
%18 = and %14, 3:i32
%19 = eq %18, 1:i32
%20:i32 = var
%21 = eq %20, %12
%22:i32 = zext %21
%23 = eq %22, 0:i32
%24:i32 = var
%25 = and %24, 8:i32
%26 = eq %25, 0:i32
%27:i32 = var
%28 = ne %27, 0:i32
pc %13 1:i1
pc %17 1:i1
pc %19 1:i1
pc %23 1:i1
pc %26 1:i1
pc %28 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 16:i32
%2:i32 = var
%3:i32 = var
%4 = block 2
%5 = add %3, 8:i32
%6 = and %5, 7:i32
%7 = ne %6, 0:i32
blockpc %4 0 %7 1:i1
%8 = eq %6, 0:i32
blockpc %4 1 %8 1:i1
%9 = sub 0:i32, %5
%10 = and %9, 7:i32
%11 = phi %4, %10, 0:i32
%12 = add %3, %11
%13 = eq %2, %12
%14:i32 = var
%15 = ult %14, 256:i32
%16:i32 = zext %15
%17 = eq %16, 0:i32
%18 = and %14, 3:i32
%19 = eq %18, 1:i32
%20:i32 = var
%21 = eq %20, %12
%22:i32 = zext %21
%23 = eq %22, 0:i32
%24:i32 = var
%25 = and %24, 8:i32
%26 = eq %25, 0:i32
%27:i32 = var
%28 = ne %27, 0:i32
pc %13 1:i1
pc %17 1:i1
pc %19 1:i1
pc %23 1:i1
pc %26 1:i1
pc %28 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = eq %0, 0:i32
%2:i32 = var
%3 = ult %2, 256:i32
%4:i32 = zext %3
%5 = eq %4, 0:i32
%6 = and %2, 3:i32
%7 = eq %6, 1:i32
%8:i32 = var
%9:i32 = var
%10 = block 2
%11 = add %9, 8:i32
%12 = and %11, 7:i32
%13 = ne %12, 0:i32
blockpc %10 0 %13 1:i1
%14 = eq %12, 0:i32
blockpc %10 1 %14 1:i1
%15 = sub 0:i32, %11
%16 = and %15, 7:i32
%17 = phi %10, %16, 0:i32
%18 = add %9, %17
%19 = eq %8, %18
%20:i32 = zext %19
%21 = eq %20, 0:i32
%22:i32 = var
%23 = and %22, 8:i32
%24 = eq %23, 0:i32
%25:i32 = var
%26 = ne %25, 0:i32
pc %5 1:i1
pc %7 1:i1
pc %21 1:i1
pc %24 1:i1
pc %26 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = shl %0, 2:i32
%2:i32 = var
%3 = ult %2, 256:i32
%4:i32 = zext %3
%5 = eq %4, 0:i32
%6 = and %2, 3:i32
%7 = eq %6, 1:i32
%8:i32 = var
%9:i32 = var
%10 = block 2
%11 = add %9, 8:i32
%12 = and %11, 7:i32
%13 = ne %12, 0:i32
blockpc %10 0 %13 1:i1
%14 = eq %12, 0:i32
blockpc %10 1 %14 1:i1
%15 = sub 0:i32, %11
%16 = and %15, 7:i32
%17 = phi %10, %16, 0:i32
%18 = add %9, %17
%19 = eq %8, %18
%20:i32 = zext %19
%21 = eq %20, 0:i32
%22:i32 = var
%23 = and %22, 8:i32
%24 = eq %23, 0:i32
%25:i32 = var
%26 = ne %25, 0:i32
pc %5 1:i1
pc %7 1:i1
pc %21 1:i1
pc %24 1:i1
pc %26 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = shl %0, 2:i32
%2 = add %1, 4260:i32
%3:i32 = var
%4 = ult %3, 256:i32
%5:i32 = zext %4
%6 = eq %5, 0:i32
%7 = and %3, 3:i32
%8 = eq %7, 1:i32
%9:i32 = var
%10:i32 = var
%11 = block 2
%12 = add %10, 8:i32
%13 = and %12, 7:i32
%14 = ne %13, 0:i32
blockpc %11 0 %14 1:i1
%15 = eq %13, 0:i32
blockpc %11 1 %15 1:i1
%16 = sub 0:i32, %12
%17 = and %16, 7:i32
%18 = phi %11, %17, 0:i32
%19 = add %10, %18
%20 = eq %9, %19
%21:i32 = zext %20
%22 = eq %21, 0:i32
%23:i32 = var
%24 = and %23, 8:i32
%25 = eq %24, 0:i32
%26:i32 = var
%27 = ne %26, 0:i32
pc %6 1:i1
pc %8 1:i1
pc %22 1:i1
pc %25 1:i1
pc %27 1:i1
infer %2


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = block 2
%3 = add %1, 8:i32 (hasExternalUses)
%4 = sub 0:i32, %3
%5 = and %4, 7:i32
%6 = phi %2, %5, 0:i32
%7 = add %1, %6 (hasExternalUses)
%8 = eq %0, %7
%9 = and %3, 7:i32
%10 = ne %9, 0:i32
blockpc %2 0 %10 1:i1
%11 = eq %9, 0:i32
blockpc %2 1 %11 1:i1
%12:i32 = var
%13 = ult %12, 256:i32
%14:i32 = zext %13
%15 = eq %14, 0:i32
%16 = and %12, 3:i32
%17 = eq %16, 1:i32
%18:i32 = var
%19 = eq %18, %7
%20:i32 = zext %19
%21 = eq %20, 0:i32
%22:i32 = var
%23 = and %22, 8:i32
%24 = eq %23, 0:i32
%25:i32 = var
%26 = ne %25, 0:i32
pc %15 1:i1
pc %17 1:i1
pc %21 1:i1
pc %24 1:i1
pc %26 1:i1
infer %8


; start LHS (in $6)
%0:i32 = var
%1 = shl 1:i32, %0
%2:i32 = var
%3:i32 = var
%4 = block 2
%5 = add %3, 8:i32
%6 = and %5, 7:i32
%7 = ne %6, 0:i32
blockpc %4 0 %7 1:i1
%8 = eq %6, 0:i32
blockpc %4 1 %8 1:i1
%9 = sub 0:i32, %5
%10 = and %9, 7:i32
%11 = phi %4, %10, 0:i32
%12 = add %3, %11
%13 = eq %2, %12
%14:i32 = var
%15 = ult %14, 256:i32
%16:i32 = zext %15
%17 = eq %16, 0:i32
%18 = and %14, 3:i32
%19 = eq %18, 1:i32
%20:i32 = var
%21 = eq %20, %12
%22:i32 = zext %21
%23 = eq %22, 0:i32
%24:i32 = var
%25 = and %24, 8:i32
%26 = eq %25, 0:i32
%27:i32 = var
%28 = ne %27, 0:i32
pc %13 1:i1
pc %17 1:i1
pc %19 1:i1
pc %23 1:i1
pc %26 1:i1
pc %28 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = shl 1:i32, %0
%2 = xor %1, -1:i32
%3:i32 = var
%4:i32 = var
%5 = block 2
%6 = add %4, 8:i32
%7 = and %6, 7:i32
%8 = ne %7, 0:i32
blockpc %5 0 %8 1:i1
%9 = eq %7, 0:i32
blockpc %5 1 %9 1:i1
%10 = sub 0:i32, %6
%11 = and %10, 7:i32
%12 = phi %5, %11, 0:i32
%13 = add %4, %12
%14 = eq %3, %13
%15:i32 = var
%16 = ult %15, 256:i32
%17:i32 = zext %16
%18 = eq %17, 0:i32
%19 = and %15, 3:i32
%20 = eq %19, 1:i32
%21:i32 = var
%22 = eq %21, %13
%23:i32 = zext %22
%24 = eq %23, 0:i32
%25:i32 = var
%26 = and %25, 8:i32
%27 = eq %26, 0:i32
%28:i32 = var
pc %14 1:i1
pc %18 1:i1
pc %20 1:i1
pc %24 1:i1
pc %27 1:i1
pc %28 1:i1
infer %2


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = shl 1:i32, %1
%3 = xor %2, -1:i32
%4 = and %0, %3
%5:i32 = var
%6:i32 = var
%7 = block 2
%8 = add %6, 8:i32
%9 = and %8, 7:i32
%10 = ne %9, 0:i32
blockpc %7 0 %10 1:i1
%11 = eq %9, 0:i32
blockpc %7 1 %11 1:i1
%12 = sub 0:i32, %8
%13 = and %12, 7:i32
%14 = phi %7, %13, 0:i32
%15 = add %6, %14
%16 = eq %5, %15
%17:i32 = var
%18 = ult %17, 256:i32
%19:i32 = zext %18
%20 = eq %19, 0:i32
%21 = and %17, 3:i32
%22 = eq %21, 1:i32
%23:i32 = var
%24 = eq %23, %15
%25:i32 = zext %24
%26 = eq %25, 0:i32
%27:i32 = var
%28 = and %27, 8:i32
%29 = eq %28, 0:i32
%30:i32 = var
pc %16 1:i1
pc %20 1:i1
pc %22 1:i1
pc %26 1:i1
pc %29 1:i1
pc %30 1:i1
infer %4


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 16:i32
%2:i32 = var
%3:i32 = var
%4 = block 2
%5 = add %3, 8:i32
%6 = and %5, 7:i32
%7 = ne %6, 0:i32
blockpc %4 0 %7 1:i1
%8 = eq %6, 0:i32
blockpc %4 1 %8 1:i1
%9 = sub 0:i32, %5
%10 = and %9, 7:i32
%11 = phi %4, %10, 0:i32
%12 = add %3, %11
%13 = eq %2, %12
%14:i32 = zext %13
%15 = eq %14, 0:i32
%16:i32 = var
%17 = ult %16, 256:i32
%18:i32 = zext %17
%19 = eq %18, 0:i32
%20 = and %16, 3:i32
%21 = eq %20, 1:i32
%22:i32 = var
%23 = eq %22, %12
%24:i32 = zext %23
%25 = eq %24, 0:i32
%26:i32 = var
%27 = and %26, 8:i32
%28 = eq %27, 0:i32
%29:i32 = var
pc %15 1:i1
pc %19 1:i1
pc %21 1:i1
pc %25 1:i1
pc %28 1:i1
pc %29 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = block 2
%3 = add %1, 8:i32 (hasExternalUses)
%4 = sub 0:i32, %3
%5 = and %4, 7:i32
%6 = phi %2, %5, 0:i32
%7 = add %1, %6 (hasExternalUses)
%8 = ne %0, %7
%9 = and %3, 7:i32
%10 = ne %9, 0:i32
blockpc %2 0 %10 1:i1
%11 = eq %9, 0:i32
blockpc %2 1 %11 1:i1
%12:i32 = var
%13 = eq %12, %7
%14:i32 = zext %13
%15 = eq %14, 0:i32
%16:i32 = var
%17 = ult %16, 256:i32
%18:i32 = zext %17
%19 = eq %18, 0:i32
%20 = and %16, 3:i32
%21 = eq %20, 1:i32
%22:i32 = var
%23 = eq %22, %7
%24:i32 = zext %23
%25 = eq %24, 0:i32
%26:i32 = var
%27 = and %26, 8:i32
%28 = eq %27, 0:i32
%29:i32 = var
pc %15 1:i1
pc %19 1:i1
pc %21 1:i1
pc %25 1:i1
pc %28 1:i1
pc %29 1:i1
infer %8


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = block 2
%3 = add %1, 8:i32 (hasExternalUses)
%4 = sub 0:i32, %3
%5 = and %4, 7:i32
%6 = phi %2, %5, 0:i32
%7 = add %1, %6 (hasExternalUses)
%8 = ne %0, %7
%9:i32 = zext %8
%10 = shl %9, 2:i32
%11 = and %3, 7:i32
%12 = ne %11, 0:i32
blockpc %2 0 %12 1:i1
%13 = eq %11, 0:i32
blockpc %2 1 %13 1:i1
%14:i32 = var
%15 = eq %14, %7
%16:i32 = zext %15
%17 = eq %16, 0:i32
%18:i32 = var
%19 = ult %18, 256:i32
%20:i32 = zext %19
%21 = eq %20, 0:i32
%22 = and %18, 3:i32
%23 = eq %22, 1:i32
%24:i32 = var
%25 = eq %24, %7
%26:i32 = zext %25
%27 = eq %26, 0:i32
%28:i32 = var
%29:i32 = var
pc %17 1:i1
pc %21 1:i1
pc %23 1:i1
pc %27 1:i1
pc %28 1:i1
pc %29 1:i1
infer %10


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 16:i32
%2:i32 = var
%3:i32 = var
%4 = block 2
%5 = add %3, 8:i32 (hasExternalUses)
%6 = sub 0:i32, %5
%7 = and %6, 7:i32
%8 = phi %4, %7, 0:i32
%9 = add %3, %8 (hasExternalUses)
%10 = ne %2, %9
%11:i32 = zext %10
%12 = shl %11, 2:i32
%13 = add %1, %12
%14 = and %5, 7:i32
%15 = ne %14, 0:i32
blockpc %4 0 %15 1:i1
%16 = eq %14, 0:i32
blockpc %4 1 %16 1:i1
%17:i32 = var
%18 = eq %17, %9
%19:i32 = zext %18
%20 = eq %19, 0:i32
%21:i32 = var
%22 = ult %21, 256:i32
%23:i32 = zext %22
%24 = eq %23, 0:i32
%25 = and %21, 3:i32
%26 = eq %25, 1:i32
%27:i32 = var
%28 = eq %27, %9
%29:i32 = zext %28
%30 = eq %29, 0:i32
%31:i32 = var
%32:i32 = var
pc %20 1:i1
pc %24 1:i1
pc %26 1:i1
pc %30 1:i1
pc %31 1:i1
pc %32 1:i1
infer %13


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2:i32 = var
%3:i32 = var
%4 = phi %1, %2, %3
%5 = phi %0, 0:i32, %4
%6 = eq %5, 0:i32
%7:i32 = var
%8 = block 2
%9 = add %7, 8:i32
%10 = and %9, 7:i32
%11 = ne %10, 0:i32
blockpc %8 0 %11 1:i1
%12 = eq %10, 0:i32
blockpc %8 1 %12 1:i1
%13 = sub 0:i32, %9
%14 = and %13, 7:i32
%15 = phi %8, %14, 0:i32
%16 = add %7, %15
%17 = eq %3, %16
blockpc %1 0 %17 1:i1
%18:i32 = zext %17
%19 = eq %18, 0:i32
blockpc %1 1 %19 1:i1
%20:i32 = var
%21 = eq %20, %16
%22:i32 = zext %21
%23 = eq %22, 0:i32
%24:i32 = var
%25 = ult %24, 256:i32
%26:i32 = zext %25
%27 = eq %26, 0:i32
%28:i32 = var
%29:i32 = var
%30:i32 = var
%31:i32 = var
pc %23 1:i1
pc %27 1:i1
pc %28 1:i1
pc %29 1:i1
pc %30 1:i1
pc %31 1:i1
infer %6


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2 = add %0, 8:i32 (hasExternalUses)
%3 = sub 0:i32, %2
%4 = and %3, 7:i32
%5 = phi %1, %4, 0:i32
%6 = add %0, %5 (hasExternalUses)
%7 = add %6, 16:i32
%8 = and %2, 7:i32
%9 = ne %8, 0:i32
blockpc %1 0 %9 1:i1
%10 = eq %8, 0:i32
blockpc %1 1 %10 1:i1
%11:i32 = var
%12 = ult %11, 256:i32
%13:i32 = zext %12
%14 = eq %13, 0:i32
%15 = and %11, 3:i32
%16 = eq %15, 1:i32
%17:i32 = var
%18 = eq %17, %6
%19:i32 = zext %18
%20 = eq %19, 0:i32
%21:i32 = var
%22 = and %21, 8:i32
%23 = eq %22, 0:i32
%24:i32 = var
%25 = ne %24, 0:i32
pc %14 1:i1
pc %16 1:i1
pc %20 1:i1
pc %23 1:i1
pc %25 1:i1
infer %7


; start LHS (in $6)
%0:i32 = var
%1 = eq %0, 0:i32
%2:i32 = var
%3 = ult %2, 256:i32
%4:i32 = zext %3
%5 = eq %4, 0:i32
%6 = and %2, 3:i32
%7 = eq %6, 1:i32
%8:i32 = var
%9:i32 = var
%10 = block 2
%11 = add %9, 8:i32
%12 = and %11, 7:i32
%13 = ne %12, 0:i32
blockpc %10 0 %13 1:i1
%14 = eq %12, 0:i32
blockpc %10 1 %14 1:i1
%15 = sub 0:i32, %11
%16 = and %15, 7:i32
%17 = phi %10, %16, 0:i32
%18 = add %9, %17
%19 = eq %8, %18
%20:i32 = zext %19
%21 = eq %20, 0:i32
%22:i32 = var
%23 = and %22, 8:i32
%24 = eq %23, 0:i32
%25:i32 = var
%26 = ne %25, 0:i32
pc %5 1:i1
pc %7 1:i1
pc %21 1:i1
pc %24 1:i1
pc %26 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2 = add %0, 8:i32 (hasExternalUses)
%3 = sub 0:i32, %2
%4 = and %3, 7:i32
%5 = phi %1, %4, 0:i32
%6 = add %0, %5 (hasExternalUses)
%7:i32 = var
%8 = and %7, -8:i32 (hasExternalUses)
%9 = add %6, %8
%10 = and %2, 7:i32
%11 = ne %10, 0:i32
blockpc %1 0 %11 1:i1
%12 = eq %10, 0:i32
blockpc %1 1 %12 1:i1
%13 = and %7, 3:i32
%14 = eq %13, 1:i32
%15:i32 = var
%16 = eq %15, %6
%17:i32 = zext %16
%18 = eq %17, 0:i32
%19:i32 = var
%20 = and %19, 8:i32
%21 = eq %20, 0:i32
%22:i32 = var
%23 = ne %22, 0:i32
pc %14 1:i1
pc %18 1:i1
pc %21 1:i1
pc %23 1:i1
infer %9


; start LHS (in $6)
%0:i32 = var
%1 = and %0, -8:i32 (hasExternalUses)
%2:i32 = var
%3 = block 2
%4 = add %2, 8:i32 (hasExternalUses)
%5 = sub 0:i32, %4
%6 = and %5, 7:i32
%7 = phi %3, %6, 0:i32
%8 = add %2, %7 (hasExternalUses)
%9:i32 = var
%10 = block 2
%11 = add %9, 8:i32 (hasExternalUses)
%12 = sub 0:i32, %11
%13 = and %12, 7:i32
%14 = phi %10, %13, 0:i32
%15 = add %9, %14 (hasExternalUses)
%16 = sub %8, %15
%17:i32 = var
%18 = sub %16, %17 (hasExternalUses)
%19 = add %1, %18
%20 = and %4, 7:i32
%21 = ne %20, 0:i32
blockpc %3 0 %21 1:i1
%22 = eq %20, 0:i32
blockpc %3 1 %22 1:i1
%23 = and %11, 7:i32
%24 = ne %23, 0:i32
blockpc %10 0 %24 1:i1
%25 = eq %23, 0:i32
blockpc %10 1 %25 1:i1
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29:i32 = var
pc %26 1:i1
pc %27 1:i1
pc %28 1:i1
pc %29 1:i1
infer %19


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = block 2
%3 = add %1, 8:i32 (hasExternalUses)
%4 = sub 0:i32, %3
%5 = and %4, 7:i32
%6 = phi %2, %5, 0:i32
%7 = add %1, %6 (hasExternalUses)
%8:i32 = var
%9 = and %8, -8:i32 (hasExternalUses)
%10 = add %7, %9
%11 = phi %0, %10, %7
%12 = add %11, 4:i32
%13 = and %8, 3:i32
%14 = eq %13, 1:i32
blockpc %0 0 %14 1:i1
%15:i32 = zext %14
%16 = eq %15, 0:i32
blockpc %0 1 %16 1:i1
%17 = and %3, 7:i32
%18 = ne %17, 0:i32
blockpc %2 0 %18 1:i1
%19 = eq %17, 0:i32
blockpc %2 1 %19 1:i1
%20:i32 = var
%21 = eq %20, %7
%22:i32 = zext %21
%23 = eq %22, 0:i32
%24:i32 = var
%25 = and %24, 8:i32
%26 = eq %25, 0:i32
%27:i32 = var
pc %23 1:i1
pc %26 1:i1
pc %27 1:i1
infer %12


; start LHS (in $6)
%0:i32 = var
%1 = and %0, -2:i32
%2:i32 = var
%3:i32 = var
%4 = block 2
%5 = add %3, 8:i32
%6 = and %5, 7:i32
%7 = ne %6, 0:i32
blockpc %4 0 %7 1:i1
%8 = eq %6, 0:i32
blockpc %4 1 %8 1:i1
%9 = sub 0:i32, %5
%10 = and %9, 7:i32
%11 = phi %4, %10, 0:i32
%12 = add %3, %11
%13 = eq %2, %12
%14:i32 = zext %13
%15 = eq %14, 0:i32
%16:i32 = var
%17 = and %16, 8:i32
%18 = eq %17, 0:i32
%19:i32 = var
%20 = ne %19, 0:i32
pc %15 1:i1
pc %18 1:i1
pc %20 1:i1
infer %1


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = and %1, -8:i32 (hasExternalUses)
%3:i32 = var
%4 = block 2
%5:i32 = var
%6 = sub 0:i32, %5
%7 = and %6, 7:i32
%8 = phi %4, %7, 0:i32
%9 = add %3, %8 (hasExternalUses)
%10:i32 = var
%11 = block 2
%12:i32 = var
%13 = sub 0:i32, %12
%14 = and %13, 7:i32
%15 = phi %11, %14, 0:i32
%16 = add %10, %15 (hasExternalUses)
%17 = sub %9, %16
%18:i32 = var
%19 = sub %17, %18 (hasExternalUses)
%20 = add %2, %19 (hasExternalUses)
%21 = phi %0, %20, %19
%22 = or %21, 1:i32
%23 = and %1, 3:i32
%24 = eq %23, 1:i32
blockpc %0 0 %24 1:i1
%25:i32 = zext %24
%26 = eq %25, 0:i32
blockpc %0 1 %26 1:i1
%27 = and %5, 7:i32
%28 = ne %27, 0:i32
blockpc %4 0 %28 1:i1
%29:i32 = var
blockpc %4 1 %29 1:i1
%30:i32 = var
blockpc %11 0 %30 1:i1
%31:i32 = var
blockpc %11 1 %31 1:i1
%32:i32 = var
%33:i32 = var
%34:i32 = var
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
infer %22


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2 = add %0, 8:i32 (hasExternalUses)
%3 = sub 0:i32, %2
%4 = and %3, 7:i32
%5 = phi %1, %4, 0:i32
%6 = add %0, %5 (hasExternalUses)
%7:i32 = var
%8 = add %6, %7 (hasExternalUses)
%9 = block 2
%10:i32 = var
%11 = and %10, -8:i32 (hasExternalUses)
%12:i32 = var
%13 = block 2
%14:i32 = var
%15 = sub 0:i32, %14
%16 = and %15, 7:i32
%17 = phi %13, %16, 0:i32
%18 = add %12, %17 (hasExternalUses)
%19 = sub %18, %6
%20 = sub %19, %7 (hasExternalUses)
%21 = add %11, %20 (hasExternalUses)
%22 = phi %9, %21, %20
%23 = add %8, %22
%24 = and %2, 7:i32
%25 = ne %24, 0:i32
blockpc %1 0 %25 1:i1
%26 = eq %24, 0:i32
blockpc %1 1 %26 1:i1
%27 = and %10, 3:i32
%28 = eq %27, 1:i32
blockpc %9 0 %28 1:i1
%29:i32 = var
blockpc %9 1 %29 1:i1
%30:i32 = var
blockpc %13 0 %30 1:i1
%31:i32 = var
blockpc %13 1 %31 1:i1
%32:i32 = var
%33:i32 = var
%34:i32 = var
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
infer %23


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = and %1, -8:i32 (hasExternalUses)
%3:i32 = var
%4 = block 2
%5:i32 = var
%6 = sub 0:i32, %5
%7 = and %6, 7:i32
%8 = phi %4, %7, 0:i32
%9 = add %3, %8 (hasExternalUses)
%10:i32 = var
%11 = block 2
%12:i32 = var
%13 = sub 0:i32, %12
%14 = and %13, 7:i32
%15 = phi %11, %14, 0:i32
%16 = add %10, %15 (hasExternalUses)
%17 = sub %9, %16
%18:i32 = var
%19 = sub %17, %18 (hasExternalUses)
%20 = add %2, %19 (hasExternalUses)
%21 = phi %0, %20, %19
%22 = lshr %21, 3:i32
%23 = and %1, 3:i32
%24 = eq %23, 1:i32
blockpc %0 0 %24 1:i1
%25:i32 = zext %24
%26 = eq %25, 0:i32
blockpc %0 1 %26 1:i1
%27 = and %5, 7:i32
%28 = ne %27, 0:i32
blockpc %4 0 %28 1:i1
%29:i32 = var
blockpc %4 1 %29 1:i1
%30:i32 = var
blockpc %11 0 %30 1:i1
%31:i32 = var
blockpc %11 1 %31 1:i1
%32:i32 = var
%33:i32 = var
%34:i32 = var
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
infer %22


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = and %1, -8:i32 (hasExternalUses)
%3:i32 = var
%4 = block 2
%5:i32 = var
%6 = sub 0:i32, %5
%7 = and %6, 7:i32
%8 = phi %4, %7, 0:i32
%9 = add %3, %8 (hasExternalUses)
%10:i32 = var
%11 = block 2
%12:i32 = var
%13 = sub 0:i32, %12
%14 = and %13, 7:i32
%15 = phi %11, %14, 0:i32
%16 = add %10, %15 (hasExternalUses)
%17 = sub %9, %16
%18:i32 = var
%19 = sub %17, %18 (hasExternalUses)
%20 = add %2, %19 (hasExternalUses)
%21 = phi %0, %20, %19
%22 = ult %21, 256:i32
%23 = and %1, 3:i32
%24 = eq %23, 1:i32
blockpc %0 0 %24 1:i1
%25:i32 = zext %24
%26 = eq %25, 0:i32
blockpc %0 1 %26 1:i1
%27 = and %5, 7:i32
%28 = ne %27, 0:i32
blockpc %4 0 %28 1:i1
%29:i32 = var
blockpc %4 1 %29 1:i1
%30:i32 = var
blockpc %11 0 %30 1:i1
%31:i32 = var
blockpc %11 1 %31 1:i1
%32:i32 = var
%33:i32 = var
%34:i32 = var
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
infer %22


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = and %1, -8:i32 (hasExternalUses)
%3:i32 = var
%4 = block 2
%5:i32 = var
%6 = and %5, 7:i32
%7 = phi %4, %6, 0:i32
%8 = add %3, %7 (hasExternalUses)
%9:i32 = var
%10 = block 2
%11:i32 = var
%12 = and %11, 7:i32
%13 = phi %10, %12, 0:i32
%14 = add %9, %13 (hasExternalUses)
%15 = sub %8, %14
%16:i32 = var
%17 = sub %15, %16 (hasExternalUses)
%18 = add %2, %17 (hasExternalUses)
%19 = phi %0, %18, %17
%20 = lshr %19, 3:i32 (hasExternalUses)
%21 = shl %20, 3:i32
%22 = and %1, 3:i32
%23 = eq %22, 1:i32
blockpc %0 0 %23 1:i1
%24:i32 = zext %23
%25 = eq %24, 0:i32
blockpc %0 1 %25 1:i1
%26 = add %3, 8:i32
%27 = and %26, 7:i32
%28 = ne %27, 0:i32
blockpc %4 0 %28 1:i1
%29:i32 = var
blockpc %4 1 %29 1:i1
%30:i32 = var
blockpc %10 0 %30 1:i1
%31:i32 = var
blockpc %10 1 %31 1:i1
%32:i32 = var
%33:i32 = var
%34:i32 = var
%35:i32 = var
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
pc %35 1:i1
infer %21


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = and %1, -8:i32 (hasExternalUses)
%3:i32 = var
%4 = block 2
%5:i32 = var
%6 = phi %4, %5, 0:i32
%7 = add %3, %6 (hasExternalUses)
%8:i32 = var
%9 = block 2
%10:i32 = var
%11 = phi %9, %10, 0:i32
%12 = add %8, %11 (hasExternalUses)
%13 = sub %7, %12
%14:i32 = var
%15 = sub %13, %14 (hasExternalUses)
%16 = add %2, %15 (hasExternalUses)
%17 = phi %0, %16, %15
%18 = lshr %17, 3:i32 (hasExternalUses)
%19 = shl %18, 3:i32
%20 = add %19, 3996:i32
%21 = and %1, 3:i32
%22 = eq %21, 1:i32
blockpc %0 0 %22 1:i1
%23:i32 = zext %22
%24 = eq %23, 0:i32
blockpc %0 1 %24 1:i1
%25 = add %3, 8:i32
%26 = and %25, 7:i32
%27 = ne %26, 0:i32
blockpc %4 0 %27 1:i1
%28:i32 = var
blockpc %4 1 %28 1:i1
%29:i32 = var
blockpc %9 0 %29 1:i1
%30:i32 = var
blockpc %9 1 %30 1:i1
%31:i32 = var
%32:i32 = var
%33:i32 = var
%34:i32 = var
pc %31 1:i1
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
infer %20


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = and %1, -8:i32 (hasExternalUses)
%3:i32 = var
%4 = block 2
%5:i32 = var
%6 = and %5, 7:i32
%7 = phi %4, %6, 0:i32
%8 = add %3, %7 (hasExternalUses)
%9:i32 = var
%10 = block 2
%11:i32 = var
%12 = and %11, 7:i32
%13 = phi %10, %12, 0:i32
%14 = add %9, %13 (hasExternalUses)
%15 = sub %8, %14
%16:i32 = var
%17 = sub %15, %16 (hasExternalUses)
%18 = add %2, %17 (hasExternalUses)
%19 = phi %0, %18, %17
%20 = lshr %19, 3:i32 (hasExternalUses)
%21 = shl 1:i32, %20
%22 = and %1, 3:i32
%23 = eq %22, 1:i32
blockpc %0 0 %23 1:i1
%24:i32 = zext %23
%25 = eq %24, 0:i32
blockpc %0 1 %25 1:i1
%26 = add %3, 8:i32
%27 = and %26, 7:i32
%28 = ne %27, 0:i32
blockpc %4 0 %28 1:i1
%29:i32 = var
blockpc %4 1 %29 1:i1
%30:i32 = var
blockpc %10 0 %30 1:i1
%31:i32 = var
blockpc %10 1 %31 1:i1
%32:i32 = var
%33:i32 = var
%34:i32 = var
%35:i32 = var
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
pc %35 1:i1
infer %21


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = and %2, -8:i32 (hasExternalUses)
%4:i32 = var
%5 = block 2
%6:i32 = var
%7 = phi %5, %6, 0:i32
%8 = add %4, %7 (hasExternalUses)
%9:i32 = var
%10 = block 2
%11:i32 = var
%12 = phi %10, %11, 0:i32
%13 = add %9, %12 (hasExternalUses)
%14 = sub %8, %13
%15:i32 = var
%16 = sub %14, %15 (hasExternalUses)
%17 = add %3, %16 (hasExternalUses)
%18 = phi %1, %17, %16
%19 = lshr %18, 3:i32 (hasExternalUses)
%20 = shl 1:i32, %19 (hasExternalUses)
%21 = and %0, %20
%22 = and %2, 3:i32
%23 = eq %22, 1:i32
blockpc %1 0 %23 1:i1
%24:i32 = zext %23
%25 = eq %24, 0:i32
blockpc %1 1 %25 1:i1
%26 = add %4, 8:i32
%27 = and %26, 7:i32
%28 = ne %27, 0:i32
blockpc %5 0 %28 1:i1
%29:i32 = var
blockpc %5 1 %29 1:i1
%30:i32 = var
blockpc %10 0 %30 1:i1
%31:i32 = var
blockpc %10 1 %31 1:i1
%32:i32 = var
%33:i32 = var
%34:i32 = var
%35:i32 = var
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
pc %35 1:i1
infer %21


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = and %1, -8:i32 (hasExternalUses)
%3:i32 = var
%4 = block 2
%5:i32 = var
%6 = phi %4, %5, 0:i32
%7 = add %3, %6 (hasExternalUses)
%8:i32 = var
%9 = block 2
%10:i32 = var
%11 = phi %9, %10, 0:i32
%12 = add %8, %11 (hasExternalUses)
%13 = sub %7, %12
%14:i32 = var
%15 = sub %13, %14 (hasExternalUses)
%16 = add %2, %15 (hasExternalUses)
%17 = phi %0, %16, %15
%18 = lshr %17, 3:i32 (hasExternalUses)
%19 = shl %18, 3:i32
%20 = add %19, 3996:i32 (hasExternalUses)
%21 = add %20, 8:i32
%22 = and %1, 3:i32
%23 = eq %22, 1:i32
blockpc %0 0 %23 1:i1
%24:i32 = zext %23
%25 = eq %24, 0:i32
blockpc %0 1 %25 1:i1
%26 = add %3, 8:i32
%27 = and %26, 7:i32
%28 = ne %27, 0:i32
blockpc %4 0 %28 1:i1
%29:i32 = var
blockpc %4 1 %29 1:i1
%30:i32 = var
blockpc %9 0 %30 1:i1
%31:i32 = var
blockpc %9 1 %31 1:i1
%32:i32 = var
%33:i32 = var
%34:i32 = var
%35:i32 = var
%36:i32 = var
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
pc %35 1:i1
pc %36 1:i1
infer %21


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = and %2, -8:i32 (hasExternalUses)
%4:i32 = var
%5 = block 2
%6:i32 = var
%7 = phi %5, %6, 0:i32
%8 = add %4, %7 (hasExternalUses)
%9:i32 = var
%10 = block 2
%11:i32 = var
%12 = phi %10, %11, 0:i32
%13 = add %9, %12 (hasExternalUses)
%14 = sub %8, %13
%15:i32 = var
%16 = sub %14, %15 (hasExternalUses)
%17 = add %3, %16 (hasExternalUses)
%18 = phi %1, %17, %16
%19 = lshr %18, 3:i32 (hasExternalUses)
%20 = shl 1:i32, %19 (hasExternalUses)
%21 = or %0, %20
%22 = and %2, 3:i32
%23 = eq %22, 1:i32
blockpc %1 0 %23 1:i1
%24:i32 = zext %23
%25 = eq %24, 0:i32
blockpc %1 1 %25 1:i1
%26 = add %4, 8:i32
%27 = and %26, 7:i32
%28 = ne %27, 0:i32
blockpc %5 0 %28 1:i1
%29:i32 = var
blockpc %5 1 %29 1:i1
%30:i32 = var
blockpc %10 0 %30 1:i1
%31:i32 = var
blockpc %10 1 %31 1:i1
%32:i32 = var
%33:i32 = var
%34:i32 = var
%35:i32 = var
%36:i32 = var
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
pc %35 1:i1
pc %36 1:i1
infer %21


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = and %1, -8:i32 (hasExternalUses)
%3:i32 = var
%4 = block 2
%5:i32 = var
%6 = phi %4, %5, 0:i32
%7 = add %3, %6 (hasExternalUses)
%8:i32 = var
%9 = block 2
%10:i32 = var
%11 = phi %9, %10, 0:i32
%12 = add %8, %11 (hasExternalUses)
%13 = sub %7, %12
%14:i32 = var
%15 = sub %13, %14 (hasExternalUses)
%16 = add %2, %15 (hasExternalUses)
%17 = phi %0, %16, %15
%18 = lshr %17, 3:i32 (hasExternalUses)
%19 = shl %18, 3:i32
%20 = add %19, 3996:i32 (hasExternalUses)
%21 = add %20, 8:i32
%22 = and %1, 3:i32
%23 = eq %22, 1:i32
blockpc %0 0 %23 1:i1
%24:i32 = zext %23
%25 = eq %24, 0:i32
blockpc %0 1 %25 1:i1
%26 = add %3, 8:i32
%27 = and %26, 7:i32
%28 = ne %27, 0:i32
blockpc %4 0 %28 1:i1
%29:i32 = var
blockpc %4 1 %29 1:i1
%30:i32 = var
blockpc %9 0 %30 1:i1
%31:i32 = var
blockpc %9 1 %31 1:i1
%32:i32 = var
%33:i32 = var
%34:i32 = var
%35:i32 = var
%36:i32 = var
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
pc %35 1:i1
pc %36 1:i1
infer %21


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = and %1, -8:i32 (hasExternalUses)
%3:i32 = var
%4 = block 2
%5:i32 = var
%6 = sub 0:i32, %5
%7 = and %6, 7:i32
%8 = phi %4, %7, 0:i32
%9 = add %3, %8 (hasExternalUses)
%10:i32 = var
%11 = block 2
%12:i32 = var
%13 = sub 0:i32, %12
%14 = and %13, 7:i32
%15 = phi %11, %14, 0:i32
%16 = add %10, %15 (hasExternalUses)
%17 = sub %9, %16
%18:i32 = var
%19 = sub %17, %18 (hasExternalUses)
%20 = add %2, %19 (hasExternalUses)
%21 = phi %0, %20, %19
%22 = lshr %21, 8:i32
%23 = and %1, 3:i32
%24 = eq %23, 1:i32
blockpc %0 0 %24 1:i1
%25:i32 = zext %24
%26 = eq %25, 0:i32
blockpc %0 1 %26 1:i1
%27 = and %5, 7:i32
%28 = ne %27, 0:i32
blockpc %4 0 %28 1:i1
%29:i32 = var
blockpc %4 1 %29 1:i1
%30:i32 = var
blockpc %11 0 %30 1:i1
%31:i32 = var
blockpc %11 1 %31 1:i1
%32:i32 = var
%33:i32 = var
%34:i32 = var
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
infer %22


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = and %1, -8:i32 (hasExternalUses)
%3:i32 = var
%4 = block 2
%5:i32 = var
%6 = sub 0:i32, %5
%7 = and %6, 7:i32
%8 = phi %4, %7, 0:i32
%9 = add %3, %8 (hasExternalUses)
%10:i32 = var
%11 = block 2
%12:i32 = var
%13 = sub 0:i32, %12
%14 = and %13, 7:i32
%15 = phi %11, %14, 0:i32
%16 = add %10, %15 (hasExternalUses)
%17 = sub %9, %16
%18:i32 = var
%19 = sub %17, %18 (hasExternalUses)
%20 = add %2, %19 (hasExternalUses)
%21 = phi %0, %20, %19
%22 = ult 16777215:i32, %21
%23 = and %1, 3:i32
%24 = eq %23, 1:i32
blockpc %0 0 %24 1:i1
%25:i32 = zext %24
%26 = eq %25, 0:i32
blockpc %0 1 %26 1:i1
%27 = and %5, 7:i32
%28 = ne %27, 0:i32
blockpc %4 0 %28 1:i1
%29:i32 = var
blockpc %4 1 %29 1:i1
%30:i32 = var
blockpc %11 0 %30 1:i1
%31:i32 = var
blockpc %11 1 %31 1:i1
%32:i32 = var
%33:i32 = var
%34:i32 = var
%35:i32 = var
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
pc %35 1:i1
infer %22


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = and %1, -8:i32 (hasExternalUses)
%3:i32 = var
%4 = block 2
%5:i32 = var
%6 = and %5, 7:i32
%7 = phi %4, %6, 0:i32
%8 = add %3, %7 (hasExternalUses)
%9:i32 = var
%10 = block 2
%11:i32 = var
%12 = and %11, 7:i32
%13 = phi %10, %12, 0:i32
%14 = add %9, %13 (hasExternalUses)
%15 = sub %8, %14
%16:i32 = var
%17 = sub %15, %16 (hasExternalUses)
%18 = add %2, %17 (hasExternalUses)
%19 = phi %0, %18, %17
%20 = lshr %19, 8:i32 (hasExternalUses)
%21 = add %20, 1048320:i32
%22 = and %1, 3:i32
%23 = eq %22, 1:i32
blockpc %0 0 %23 1:i1
%24:i32 = zext %23
%25 = eq %24, 0:i32
blockpc %0 1 %25 1:i1
%26 = add %3, 8:i32
%27 = and %26, 7:i32
%28 = ne %27, 0:i32
blockpc %4 0 %28 1:i1
%29:i32 = var
blockpc %4 1 %29 1:i1
%30:i32 = var
blockpc %10 0 %30 1:i1
%31:i32 = var
blockpc %10 1 %31 1:i1
%32:i32 = var
%33:i32 = var
%34:i32 = var
%35:i32 = var
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
pc %35 1:i1
infer %21


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = and %1, -8:i32 (hasExternalUses)
%3:i32 = var
%4 = block 2
%5:i32 = var
%6 = phi %4, %5, 0:i32
%7 = add %3, %6 (hasExternalUses)
%8:i32 = var
%9 = block 2
%10:i32 = var
%11 = phi %9, %10, 0:i32
%12 = add %8, %11 (hasExternalUses)
%13 = sub %7, %12
%14:i32 = var
%15 = sub %13, %14 (hasExternalUses)
%16 = add %2, %15 (hasExternalUses)
%17 = phi %0, %16, %15
%18 = lshr %17, 8:i32 (hasExternalUses)
%19 = add %18, 1048320:i32
%20 = lshr %19, 16:i32
%21 = and %1, 3:i32
%22 = eq %21, 1:i32
blockpc %0 0 %22 1:i1
%23:i32 = zext %22
%24 = eq %23, 0:i32
blockpc %0 1 %24 1:i1
%25 = add %3, 8:i32
%26 = and %25, 7:i32
%27 = ne %26, 0:i32
blockpc %4 0 %27 1:i1
%28:i32 = var
blockpc %4 1 %28 1:i1
%29:i32 = var
blockpc %9 0 %29 1:i1
%30:i32 = var
blockpc %9 1 %30 1:i1
%31:i32 = var
%32:i32 = var
%33:i32 = var
%34:i32 = var
pc %31 1:i1
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
infer %20


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = and %1, -8:i32 (hasExternalUses)
%3:i32 = var
%4 = block 2
%5:i32 = var
%6 = phi %4, %5, 0:i32
%7 = add %3, %6 (hasExternalUses)
%8:i32 = var
%9 = block 2
%10:i32 = var
%11 = phi %9, %10, 0:i32
%12 = add %8, %11 (hasExternalUses)
%13 = sub %7, %12
%14:i32 = var
%15 = sub %13, %14 (hasExternalUses)
%16 = add %2, %15 (hasExternalUses)
%17 = phi %0, %16, %15
%18 = lshr %17, 8:i32 (hasExternalUses)
%19 = add %18, 1048320:i32
%20 = lshr %19, 16:i32
%21 = and %20, 8:i32
%22 = and %1, 3:i32
%23 = eq %22, 1:i32
blockpc %0 0 %23 1:i1
%24:i32 = zext %23
%25 = eq %24, 0:i32
blockpc %0 1 %25 1:i1
%26 = add %3, 8:i32
%27 = and %26, 7:i32
%28 = ne %27, 0:i32
blockpc %4 0 %28 1:i1
%29:i32 = var
blockpc %4 1 %29 1:i1
%30:i32 = var
blockpc %9 0 %30 1:i1
%31:i32 = var
blockpc %9 1 %31 1:i1
%32:i32 = var
%33:i32 = var
%34:i32 = var
%35:i32 = var
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
pc %35 1:i1
infer %21


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = and %1, -8:i32 (hasExternalUses)
%3:i32 = var
%4 = block 2
%5:i32 = var
%6 = and %5, 7:i32
%7 = phi %4, %6, 0:i32
%8 = add %3, %7 (hasExternalUses)
%9:i32 = var
%10 = block 2
%11:i32 = var
%12 = and %11, 7:i32
%13 = phi %10, %12, 0:i32
%14 = add %9, %13 (hasExternalUses)
%15 = sub %8, %14
%16:i32 = var
%17 = sub %15, %16 (hasExternalUses)
%18 = add %2, %17 (hasExternalUses)
%19 = phi %0, %18, %17
%20 = lshr %19, 8:i32 (hasExternalUses)
%21 = add %20, 1048320:i32
%22 = lshr %21, 16:i32
%23 = and %22, 8:i32 (hasExternalUses)
%24 = shl %20, %23
%25 = and %1, 3:i32
%26 = eq %25, 1:i32
blockpc %0 0 %26 1:i1
%27:i32 = zext %26
%28 = eq %27, 0:i32
blockpc %0 1 %28 1:i1
%29:i32 = var
blockpc %4 0 %29 1:i1
%30:i32 = var
blockpc %4 1 %30 1:i1
%31:i32 = var
blockpc %10 0 %31 1:i1
%32:i32 = var
blockpc %10 1 %32 1:i1
%33:i32 = var
%34:i32 = var
%35:i32 = var
%36:i32 = var
pc %33 1:i1
pc %34 1:i1
pc %35 1:i1
pc %36 1:i1
infer %24


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = and %1, -8:i32 (hasExternalUses)
%3:i32 = var
%4 = block 2
%5:i32 = var
%6 = phi %4, %5, 0:i32
%7 = add %3, %6 (hasExternalUses)
%8:i32 = var
%9 = block 2
%10:i32 = var
%11 = phi %9, %10, 0:i32
%12 = add %8, %11 (hasExternalUses)
%13 = sub %7, %12
%14:i32 = var
%15 = sub %13, %14 (hasExternalUses)
%16 = add %2, %15 (hasExternalUses)
%17 = phi %0, %16, %15
%18 = lshr %17, 8:i32 (hasExternalUses)
%19 = add %18, 1048320:i32
%20 = lshr %19, 16:i32
%21 = and %20, 8:i32 (hasExternalUses)
%22 = shl %18, %21 (hasExternalUses)
%23 = add %22, 520192:i32
%24 = and %1, 3:i32
%25 = eq %24, 1:i32
blockpc %0 0 %25 1:i1
%26:i32 = zext %25
%27 = eq %26, 0:i32
blockpc %0 1 %27 1:i1
%28:i32 = var
blockpc %4 0 %28 1:i1
%29:i32 = var
blockpc %4 1 %29 1:i1
%30:i32 = var
blockpc %9 0 %30 1:i1
%31:i32 = var
blockpc %9 1 %31 1:i1
%32:i32 = var
%33:i32 = var
%34:i32 = var
%35:i32 = var
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
pc %35 1:i1
infer %23


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = and %1, -8:i32 (hasExternalUses)
%3:i32 = var
%4 = block 2
%5:i32 = var
%6 = phi %4, %5, 0:i32
%7 = add %3, %6 (hasExternalUses)
%8:i32 = var
%9 = block 2
%10:i32 = var
%11 = phi %9, %10, 0:i32
%12 = add %8, %11 (hasExternalUses)
%13 = sub %7, %12
%14:i32 = var
%15 = sub %13, %14 (hasExternalUses)
%16 = add %2, %15 (hasExternalUses)
%17 = phi %0, %16, %15
%18 = lshr %17, 8:i32 (hasExternalUses)
%19 = add %18, 1048320:i32
%20 = lshr %19, 16:i32
%21 = and %20, 8:i32 (hasExternalUses)
%22 = shl %18, %21 (hasExternalUses)
%23 = add %22, 520192:i32
%24 = lshr %23, 16:i32
%25 = and %1, 3:i32
%26 = eq %25, 1:i32
blockpc %0 0 %26 1:i1
%27:i32 = zext %26
%28 = eq %27, 0:i32
blockpc %0 1 %28 1:i1
%29:i32 = var
blockpc %4 0 %29 1:i1
%30:i32 = var
blockpc %4 1 %30 1:i1
%31:i32 = var
blockpc %9 0 %31 1:i1
%32:i32 = var
blockpc %9 1 %32 1:i1
%33:i32 = var
%34:i32 = var
%35:i32 = var
%36:i32 = var
pc %33 1:i1
pc %34 1:i1
pc %35 1:i1
pc %36 1:i1
infer %24


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = and %1, -8:i32 (hasExternalUses)
%3:i32 = var
%4:i32 = var
%5 = sub %3, %4
%6:i32 = var
%7 = sub %5, %6 (hasExternalUses)
%8 = add %2, %7 (hasExternalUses)
%9 = phi %0, %8, %7
%10 = lshr %9, 8:i32 (hasExternalUses)
%11 = add %10, 1048320:i32
%12 = lshr %11, 16:i32
%13 = and %12, 8:i32 (hasExternalUses)
%14 = shl %10, %13 (hasExternalUses)
%15 = add %14, 520192:i32
%16 = lshr %15, 16:i32
%17 = and %16, 4:i32
%18 = and %1, 3:i32
%19 = eq %18, 1:i32
blockpc %0 0 %19 1:i1
%20:i32 = zext %19
%21 = eq %20, 0:i32
blockpc %0 1 %21 1:i1
%22 = ne %10, 0:i32
%23:i32 = var
%24 = eq %23, %3
%25:i32 = zext %24
%26 = eq %25, 0:i32
%27:i32 = var
%28 = and %27, 8:i32
%29 = eq %28, 0:i32
%30:i32 = var
pc %22 1:i1
pc %26 1:i1
pc %29 1:i1
pc %30 1:i1
infer %17


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = and %1, -8:i32 (hasExternalUses)
%3:i32 = var
%4:i32 = var
%5 = sub %3, %4 (hasExternalUses)
%6 = add %2, %5 (hasExternalUses)
%7 = phi %0, %6, %5
%8 = lshr %7, 8:i32 (hasExternalUses)
%9 = add %8, 1048320:i32
%10 = lshr %9, 16:i32
%11 = and %10, 8:i32
%12 = shl %8, %11 (hasExternalUses)
%13 = add %12, 520192:i32
%14 = lshr %13, 16:i32
%15 = and %14, 4:i32 (hasExternalUses)
%16 = or %15, %11
%17 = and %1, 3:i32
%18 = eq %17, 1:i32
blockpc %0 0 %18 1:i1
%19:i32 = zext %18
%20 = eq %19, 0:i32
blockpc %0 1 %20 1:i1
%21 = ne %8, 0:i32
%22:i32 = var
%23:i32 = var
%24 = block 2
%25 = add %23, 8:i32
%26 = and %25, 7:i32
%27 = ne %26, 0:i32
blockpc %24 0 %27 1:i1
%28:i32 = var
blockpc %24 1 %28 1:i1
%29:i32 = var
%30 = phi %24, %29, 0:i32
%31 = add %23, %30
%32 = eq %22, %31
%33:i32 = zext %32
%34 = eq %33, 0:i32
%35:i32 = var
%36:i32 = var
pc %21 1:i1
pc %34 1:i1
pc %35 1:i1
pc %36 1:i1
infer %16


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = and %1, -8:i32 (hasExternalUses)
%3:i32 = var
%4 = block 2
%5:i32 = var
%6 = phi %4, %5, 0:i32
%7 = add %3, %6 (hasExternalUses)
%8:i32 = var
%9 = block 2
%10:i32 = var
%11 = phi %9, %10, 0:i32
%12 = add %8, %11 (hasExternalUses)
%13 = sub %7, %12
%14:i32 = var
%15 = sub %13, %14 (hasExternalUses)
%16 = add %2, %15 (hasExternalUses)
%17 = phi %0, %16, %15
%18 = lshr %17, 8:i32 (hasExternalUses)
%19 = add %18, 1048320:i32
%20 = lshr %19, 16:i32
%21 = and %20, 8:i32 (hasExternalUses)
%22 = shl %18, %21
%23 = add %22, 520192:i32
%24 = lshr %23, 16:i32
%25 = and %24, 4:i32 (hasExternalUses)
%26 = shl %22, %25
%27 = and %1, 3:i32
%28 = eq %27, 1:i32
blockpc %0 0 %28 1:i1
%29:i32 = var
blockpc %0 1 %29 1:i1
%30:i32 = var
blockpc %4 0 %30 1:i1
%31:i32 = var
blockpc %4 1 %31 1:i1
%32:i32 = var
blockpc %9 0 %32 1:i1
%33:i32 = var
blockpc %9 1 %33 1:i1
%34:i32 = var
%35:i32 = var
%36:i32 = var
%37:i32 = var
pc %34 1:i1
pc %35 1:i1
pc %36 1:i1
pc %37 1:i1
infer %26


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = and %1, -8:i32 (hasExternalUses)
%3:i32 = var
%4 = block 2
%5:i32 = var
%6 = phi %4, %5, 0:i32
%7 = add %3, %6 (hasExternalUses)
%8:i32 = var
%9 = block 2
%10:i32 = var
%11 = phi %9, %10, 0:i32
%12 = add %8, %11 (hasExternalUses)
%13 = sub %7, %12
%14:i32 = var
%15 = sub %13, %14 (hasExternalUses)
%16 = add %2, %15 (hasExternalUses)
%17 = phi %0, %16, %15
%18 = lshr %17, 8:i32 (hasExternalUses)
%19 = add %18, 1048320:i32
%20 = lshr %19, 16:i32
%21 = and %20, 8:i32 (hasExternalUses)
%22 = shl %18, %21
%23 = add %22, 520192:i32
%24 = lshr %23, 16:i32
%25 = and %24, 4:i32 (hasExternalUses)
%26 = shl %22, %25 (hasExternalUses)
%27 = add %26, 245760:i32
%28 = and %1, 3:i32
%29 = eq %28, 1:i32
blockpc %0 0 %29 1:i1
%30:i32 = var
blockpc %0 1 %30 1:i1
%31:i32 = var
blockpc %4 0 %31 1:i1
%32:i32 = var
blockpc %4 1 %32 1:i1
%33:i32 = var
blockpc %9 0 %33 1:i1
%34:i32 = var
blockpc %9 1 %34 1:i1
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
pc %35 1:i1
pc %36 1:i1
pc %37 1:i1
pc %38 1:i1
infer %27


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = and %1, -8:i32 (hasExternalUses)
%3:i32 = var
%4:i32 = var
%5 = sub %3, %4
%6:i32 = var
%7 = sub %5, %6 (hasExternalUses)
%8 = add %2, %7 (hasExternalUses)
%9 = phi %0, %8, %7
%10 = lshr %9, 8:i32 (hasExternalUses)
%11 = add %10, 1048320:i32
%12 = lshr %11, 16:i32
%13 = and %12, 8:i32 (hasExternalUses)
%14 = shl %10, %13
%15 = add %14, 520192:i32
%16 = lshr %15, 16:i32
%17 = and %16, 4:i32 (hasExternalUses)
%18 = shl %14, %17 (hasExternalUses)
%19 = add %18, 245760:i32
%20 = lshr %19, 16:i32
%21 = and %1, 3:i32
%22 = eq %21, 1:i32
blockpc %0 0 %22 1:i1
%23:i32 = zext %22
%24 = eq %23, 0:i32
blockpc %0 1 %24 1:i1
%25 = ne %10, 0:i32
%26:i32 = var
%27 = eq %26, %3
%28:i32 = zext %27
%29 = eq %28, 0:i32
%30:i32 = var
%31:i32 = var
pc %25 1:i1
pc %29 1:i1
pc %30 1:i1
pc %31 1:i1
infer %20


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = and %1, -8:i32 (hasExternalUses)
%3:i32 = var
%4:i32 = var
%5 = sub %3, %4 (hasExternalUses)
%6 = add %2, %5 (hasExternalUses)
%7 = phi %0, %6, %5
%8 = lshr %7, 8:i32 (hasExternalUses)
%9 = add %8, 1048320:i32
%10 = lshr %9, 16:i32
%11 = and %10, 8:i32 (hasExternalUses)
%12 = shl %8, %11
%13 = add %12, 520192:i32
%14 = lshr %13, 16:i32
%15 = and %14, 4:i32 (hasExternalUses)
%16 = shl %12, %15 (hasExternalUses)
%17 = add %16, 245760:i32
%18 = lshr %17, 16:i32
%19 = and %18, 2:i32
%20 = and %1, 3:i32
%21 = eq %20, 1:i32
blockpc %0 0 %21 1:i1
%22:i32 = zext %21
%23 = eq %22, 0:i32
blockpc %0 1 %23 1:i1
%24 = ne %8, 0:i32
%25:i32 = var
%26:i32 = var
%27 = block 2
%28:i32 = var
blockpc %27 0 %28 1:i1
%29:i32 = var
blockpc %27 1 %29 1:i1
%30:i32 = var
%31 = phi %27, %30, 0:i32
%32 = add %26, %31
%33 = eq %25, %32
%34:i32 = zext %33
%35 = eq %34, 0:i32
%36:i32 = var
%37:i32 = var
pc %24 1:i1
pc %35 1:i1
pc %36 1:i1
pc %37 1:i1
infer %19


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2:i32 = var
%3 = add %1, %2 (hasExternalUses)
%4 = phi %0, %3, %2
%5 = lshr %4, 8:i32 (hasExternalUses)
%6 = add %5, 1048320:i32
%7 = lshr %6, 16:i32
%8 = and %7, 8:i32
%9 = shl %5, %8
%10 = add %9, 520192:i32
%11 = lshr %10, 16:i32
%12 = and %11, 4:i32
%13 = or %12, %8
%14 = shl %9, %12 (hasExternalUses)
%15 = add %14, 245760:i32
%16 = lshr %15, 16:i32
%17 = and %16, 2:i32 (hasExternalUses)
%18 = or %13, %17
%19:i32 = var
%20 = and %19, 3:i32
%21 = eq %20, 1:i32
blockpc %0 0 %21 1:i1
%22:i32 = zext %21
%23 = eq %22, 0:i32
blockpc %0 1 %23 1:i1
%24 = ne %5, 0:i32
%25:i32 = var
%26:i32 = var
%27 = block 2
%28:i32 = var
blockpc %27 0 %28 1:i1
%29:i32 = var
blockpc %27 1 %29 1:i1
%30:i32 = var
%31 = phi %27, %30, 0:i32
%32 = add %26, %31
%33 = eq %25, %32
%34:i32 = zext %33
%35 = eq %34, 0:i32
%36:i32 = var
%37:i32 = var
pc %24 1:i1
pc %35 1:i1
pc %36 1:i1
pc %37 1:i1
infer %18


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2:i32 = var
%3 = phi %0, %1, %2
%4 = lshr %3, 8:i32 (hasExternalUses)
%5:i32 = var
%6 = lshr %5, 16:i32
%7 = and %6, 8:i32
%8 = shl %4, %7
%9 = add %8, 520192:i32
%10 = lshr %9, 16:i32
%11 = and %10, 4:i32
%12 = or %11, %7
%13 = shl %8, %11 (hasExternalUses)
%14 = add %13, 245760:i32
%15 = lshr %14, 16:i32
%16 = and %15, 2:i32 (hasExternalUses)
%17 = or %12, %16
%18 = sub 14:i32, %17
%19:i32 = var
%20 = and %19, 3:i32
%21 = eq %20, 1:i32
blockpc %0 0 %21 1:i1
%22:i32 = zext %21
%23 = eq %22, 0:i32
blockpc %0 1 %23 1:i1
%24 = ne %4, 0:i32
%25:i32 = var
%26:i32 = var
%27 = block 2
%28:i32 = var
blockpc %27 0 %28 1:i1
%29:i32 = var
blockpc %27 1 %29 1:i1
%30:i32 = var
%31 = phi %27, %30, 0:i32
%32 = add %26, %31
%33 = eq %25, %32
%34:i32 = zext %33
%35 = eq %34, 0:i32
%36:i32 = var
%37:i32 = var
pc %24 1:i1
pc %35 1:i1
pc %36 1:i1
pc %37 1:i1
infer %18


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = and %1, -8:i32 (hasExternalUses)
%3:i32 = var
%4 = block 2
%5:i32 = var
%6 = phi %4, %5, 0:i32
%7 = add %3, %6 (hasExternalUses)
%8:i32 = var
%9 = block 2
%10:i32 = var
%11 = phi %9, %10, 0:i32
%12 = add %8, %11 (hasExternalUses)
%13 = sub %7, %12
%14:i32 = var
%15 = sub %13, %14 (hasExternalUses)
%16 = add %2, %15 (hasExternalUses)
%17 = phi %0, %16, %15
%18 = lshr %17, 8:i32 (hasExternalUses)
%19 = add %18, 1048320:i32
%20 = lshr %19, 16:i32
%21 = and %20, 8:i32 (hasExternalUses)
%22 = shl %18, %21
%23 = add %22, 520192:i32
%24 = lshr %23, 16:i32
%25 = and %24, 4:i32 (hasExternalUses)
%26 = shl %22, %25
%27 = add %26, 245760:i32
%28 = lshr %27, 16:i32
%29 = and %28, 2:i32 (hasExternalUses)
%30 = shl %26, %29
%31:i32 = var
blockpc %0 0 %31 1:i1
%32:i32 = var
blockpc %0 1 %32 1:i1
%33:i32 = var
blockpc %4 0 %33 1:i1
%34:i32 = var
blockpc %4 1 %34 1:i1
%35:i32 = var
blockpc %9 0 %35 1:i1
%36:i32 = var
blockpc %9 1 %36 1:i1
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = var
pc %37 1:i1
pc %38 1:i1
pc %39 1:i1
pc %40 1:i1
infer %30


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = and %1, -8:i32 (hasExternalUses)
%3:i32 = var
%4:i32 = var
%5 = sub %3, %4
%6:i32 = var
%7 = sub %5, %6 (hasExternalUses)
%8 = add %2, %7 (hasExternalUses)
%9 = phi %0, %8, %7
%10 = lshr %9, 8:i32 (hasExternalUses)
%11 = add %10, 1048320:i32
%12 = lshr %11, 16:i32
%13 = and %12, 8:i32 (hasExternalUses)
%14 = shl %10, %13
%15 = add %14, 520192:i32
%16 = lshr %15, 16:i32
%17 = and %16, 4:i32 (hasExternalUses)
%18 = shl %14, %17
%19 = add %18, 245760:i32
%20 = lshr %19, 16:i32
%21 = and %20, 2:i32 (hasExternalUses)
%22 = shl %18, %21
%23 = lshr %22, 15:i32
%24 = and %1, 3:i32
%25 = eq %24, 1:i32
blockpc %0 0 %25 1:i1
%26:i32 = zext %25
%27 = eq %26, 0:i32
blockpc %0 1 %27 1:i1
%28:i32 = var
%29:i32 = var
%30:i32 = var
%31:i32 = var
pc %28 1:i1
pc %29 1:i1
pc %30 1:i1
pc %31 1:i1
infer %23


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2:i32 = var
%3 = phi %0, %1, %2
%4 = lshr %3, 8:i32 (hasExternalUses)
%5:i32 = var
%6 = and %5, 8:i32
%7 = shl %4, %6
%8 = add %7, 520192:i32
%9 = lshr %8, 16:i32
%10 = and %9, 4:i32
%11 = or %10, %6
%12 = shl %7, %10
%13 = add %12, 245760:i32
%14 = lshr %13, 16:i32
%15 = and %14, 2:i32
%16 = or %11, %15
%17 = sub 14:i32, %16
%18 = shl %12, %15
%19 = lshr %18, 15:i32
%20 = add %17, %19
%21:i32 = var
%22 = and %21, 3:i32
%23 = eq %22, 1:i32
blockpc %0 0 %23 1:i1
%24:i32 = zext %23
%25 = eq %24, 0:i32
blockpc %0 1 %25 1:i1
%26 = ne %4, 0:i32
%27:i32 = var
%28:i32 = var
%29 = eq %27, %28
%30:i32 = zext %29
%31 = eq %30, 0:i32
%32:i32 = var
%33:i32 = var
pc %26 1:i1
pc %31 1:i1
pc %32 1:i1
pc %33 1:i1
infer %20


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = shl %0, %1
%3 = add %2, 520192:i32
%4 = lshr %3, 16:i32
%5 = and %4, 4:i32
%6 = or %5, %1
%7 = shl %2, %5
%8 = add %7, 245760:i32
%9 = lshr %8, 16:i32
%10 = and %9, 2:i32
%11 = or %6, %10
%12 = sub 14:i32, %11
%13 = shl %7, %10
%14 = lshr %13, 15:i32
%15 = add %12, %14 (hasExternalUses)
%16 = add %15, 7:i32
%17 = ne %0, 0:i32
%18:i32 = var
%19:i32 = var
%20 = block 2
%21 = add %19, 8:i32
%22 = and %21, 7:i32
%23 = ne %22, 0:i32
blockpc %20 0 %23 1:i1
%24 = eq %22, 0:i32
blockpc %20 1 %24 1:i1
%25 = sub 0:i32, %21
%26 = and %25, 7:i32
%27 = phi %20, %26, 0:i32
%28 = add %19, %27
%29 = eq %18, %28
%30:i32 = zext %29
%31 = eq %30, 0:i32
%32:i32 = var
%33:i32 = var
pc %17 1:i1
pc %31 1:i1
pc %32 1:i1
pc %33 1:i1
infer %16


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = and %1, -8:i32 (hasExternalUses)
%3:i32 = var
%4 = block 2
%5:i32 = var
%6 = sub 0:i32, %5
%7 = and %6, 7:i32
%8 = phi %4, %7, 0:i32
%9 = add %3, %8 (hasExternalUses)
%10:i32 = var
%11 = block 2
%12:i32 = var
%13 = sub 0:i32, %12
%14 = and %13, 7:i32
%15 = phi %11, %14, 0:i32
%16 = add %10, %15 (hasExternalUses)
%17 = sub %9, %16
%18:i32 = var
%19 = sub %17, %18 (hasExternalUses)
%20 = add %2, %19 (hasExternalUses)
%21 = phi %0, %20, %19
%22:i32 = var
%23 = add %22, 520192:i32
%24 = lshr %23, 16:i32
%25 = and %24, 4:i32 (hasExternalUses)
%26:i32 = var
%27 = add %26, 1048320:i32
%28 = lshr %27, 16:i32
%29 = and %28, 8:i32 (hasExternalUses)
%30 = or %25, %29
%31:i32 = var
%32 = or %30, %31
%33 = sub 14:i32, %32
%34:i32 = var
%35 = add %33, %34 (hasExternalUses)
%36 = add %35, 7:i32
%37 = lshr %21, %36
%38:i32 = var
blockpc %0 0 %38 1:i1
%39:i32 = var
blockpc %0 1 %39 1:i1
%40:i32 = var
blockpc %4 0 %40 1:i1
%41:i32 = var
blockpc %4 1 %41 1:i1
%42:i32 = var
blockpc %11 0 %42 1:i1
%43:i32 = var
blockpc %11 1 %43 1:i1
%44:i32 = var
%45:i32 = var
%46:i32 = var
%47:i32 = var
pc %44 1:i1
pc %45 1:i1
pc %46 1:i1
pc %47 1:i1
infer %37


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = and %1, -8:i32 (hasExternalUses)
%3:i32 = var
%4 = block 2
%5:i32 = var
%6 = and %5, 7:i32
%7 = phi %4, %6, 0:i32
%8 = add %3, %7 (hasExternalUses)
%9:i32 = var
%10 = block 2
%11:i32 = var
%12 = and %11, 7:i32
%13 = phi %10, %12, 0:i32
%14 = add %9, %13 (hasExternalUses)
%15 = sub %8, %14
%16:i32 = var
%17 = sub %15, %16 (hasExternalUses)
%18 = add %2, %17 (hasExternalUses)
%19 = phi %0, %18, %17
%20:i32 = var
%21 = lshr %20, 16:i32
%22 = and %21, 4:i32 (hasExternalUses)
%23:i32 = var
%24 = lshr %23, 16:i32
%25 = and %24, 8:i32 (hasExternalUses)
%26 = or %22, %25
%27:i32 = var
%28 = add %27, 245760:i32
%29 = lshr %28, 16:i32
%30 = and %29, 2:i32 (hasExternalUses)
%31 = or %26, %30
%32 = sub 14:i32, %31
%33:i32 = var
%34 = add %32, %33 (hasExternalUses)
%35 = add %34, 7:i32
%36 = lshr %19, %35
%37 = and %36, 1:i32
%38:i32 = var
blockpc %0 0 %38 1:i1
%39:i32 = var
blockpc %0 1 %39 1:i1
%40:i32 = var
blockpc %4 0 %40 1:i1
%41:i32 = var
blockpc %4 1 %41 1:i1
%42:i32 = var
blockpc %10 0 %42 1:i1
%43:i32 = var
blockpc %10 1 %43 1:i1
%44:i32 = var
%45:i32 = var
%46:i32 = var
%47:i32 = var
pc %44 1:i1
pc %45 1:i1
pc %46 1:i1
pc %47 1:i1
infer %37


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = shl %0, %1
%3 = add %2, 520192:i32
%4 = lshr %3, 16:i32
%5 = and %4, 4:i32
%6 = or %5, %1
%7 = shl %2, %5
%8 = add %7, 245760:i32
%9 = lshr %8, 16:i32
%10 = and %9, 2:i32
%11 = or %6, %10
%12 = sub 14:i32, %11
%13 = shl %7, %10
%14 = lshr %13, 15:i32
%15 = add %12, %14 (hasExternalUses)
%16 = shl %15, 1:i32
%17 = ne %0, 0:i32
%18:i32 = var
%19:i32 = var
%20 = block 2
%21 = add %19, 8:i32
%22 = and %21, 7:i32
%23 = ne %22, 0:i32
blockpc %20 0 %23 1:i1
%24 = eq %22, 0:i32
blockpc %20 1 %24 1:i1
%25 = sub 0:i32, %21
%26 = and %25, 7:i32
%27 = phi %20, %26, 0:i32
%28 = add %19, %27
%29 = eq %18, %28
%30:i32 = zext %29
%31 = eq %30, 0:i32
%32:i32 = var
%33:i32 = var
pc %17 1:i1
pc %31 1:i1
pc %32 1:i1
pc %33 1:i1
infer %16


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = and %1, -8:i32 (hasExternalUses)
%3:i32 = var
%4 = block 2
%5:i32 = var
%6 = phi %4, %5, 0:i32
%7 = add %3, %6 (hasExternalUses)
%8:i32 = var
%9 = block 2
%10:i32 = var
%11 = phi %9, %10, 0:i32
%12 = add %8, %11 (hasExternalUses)
%13 = sub %7, %12
%14:i32 = var
%15 = sub %13, %14 (hasExternalUses)
%16 = add %2, %15 (hasExternalUses)
%17 = phi %0, %16, %15
%18:i32 = var
%19 = and %18, 4:i32
%20:i32 = var
%21 = and %20, 8:i32
%22 = or %19, %21
%23:i32 = var
%24 = lshr %23, 16:i32
%25 = and %24, 2:i32
%26 = or %22, %25
%27 = sub 14:i32, %26
%28:i32 = var
%29 = shl %28, %21 (hasExternalUses)
%30 = shl %29, %19 (hasExternalUses)
%31 = shl %30, %25
%32 = lshr %31, 15:i32
%33 = add %27, %32 (hasExternalUses)
%34 = add %33, 7:i32
%35 = lshr %17, %34
%36 = and %35, 1:i32
%37:i32 = var
%38 = or %36, %37
%39:i32 = var
blockpc %0 0 %39 1:i1
%40:i32 = var
blockpc %0 1 %40 1:i1
%41:i32 = var
blockpc %4 0 %41 1:i1
%42:i32 = var
blockpc %4 1 %42 1:i1
%43:i32 = var
blockpc %9 0 %43 1:i1
%44:i32 = var
blockpc %9 1 %44 1:i1
%45:i32 = var
%46:i32 = var
%47:i32 = var
%48:i32 = var
pc %45 1:i1
pc %46 1:i1
pc %47 1:i1
pc %48 1:i1
infer %38


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4 = and %3, -8:i32 (hasExternalUses)
%5:i32 = var
%6:i32 = var
%7 = sub %5, %6 (hasExternalUses)
%8 = add %4, %7 (hasExternalUses)
%9 = phi %2, %8, %7
%10:i32 = var
%11 = sub 14:i32, %10
%12:i32 = var
%13 = lshr %12, 15:i32
%14 = add %11, %13
%15 = add %14, 7:i32
%16 = lshr %9, %15
%17 = and %16, 1:i32
%18 = shl %14, 1:i32
%19 = or %17, %18 (hasExternalUses)
%20 = phi %1, %19, 0:i32
%21 = phi %0, 31:i32, %20
%22 = shl %21, 2:i32
%23 = lshr %9, 8:i32
%24 = ne %23, 0:i32
blockpc %1 0 %24 1:i1
%25 = eq %23, 0:i32
blockpc %1 1 %25 1:i1
%26 = and %3, 3:i32
%27 = eq %26, 1:i32
blockpc %2 0 %27 1:i1
%28:i32 = var
blockpc %2 1 %28 1:i1
%29:i32 = var
%30:i32 = var
%31:i32 = var
pc %29 1:i1
pc %30 1:i1
pc %31 1:i1
infer %22


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = add %3, %4 (hasExternalUses)
%6 = phi %2, %5, %4
%7:i32 = var
%8:i32 = var
%9 = add %7, %8
%10 = add %9, 7:i32
%11 = lshr %6, %10
%12 = and %11, 1:i32
%13 = shl %9, 1:i32
%14 = or %12, %13 (hasExternalUses)
%15 = phi %1, %14, 0:i32
%16 = phi %0, 31:i32, %15
%17 = shl %16, 2:i32
%18 = add %17, 4260:i32
%19 = lshr %6, 8:i32
%20 = ne %19, 0:i32
blockpc %1 0 %20 1:i1
%21 = eq %19, 0:i32
blockpc %1 1 %21 1:i1
%22:i32 = var
%23 = and %22, 3:i32
%24 = eq %23, 1:i32
blockpc %2 0 %24 1:i1
%25:i32 = zext %24
%26 = eq %25, 0:i32
blockpc %2 1 %26 1:i1
%27:i32 = var
%28:i32 = var
%29:i32 = var
pc %27 1:i1
pc %28 1:i1
pc %29 1:i1
infer %18


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2 = add %0, 8:i32 (hasExternalUses)
%3 = sub 0:i32, %2
%4 = and %3, 7:i32
%5 = phi %1, %4, 0:i32
%6 = add %0, %5 (hasExternalUses)
%7:i32 = var
%8 = add %6, %7 (hasExternalUses)
%9 = add %8, 16:i32
%10 = and %2, 7:i32
%11 = ne %10, 0:i32
blockpc %1 0 %11 1:i1
%12 = eq %10, 0:i32
blockpc %1 1 %12 1:i1
%13:i32 = var
%14:i32 = var
%15 = block 2
%16 = add %14, 8:i32
%17 = and %16, 7:i32
%18 = ne %17, 0:i32
blockpc %15 0 %18 1:i1
%19 = eq %17, 0:i32
blockpc %15 1 %19 1:i1
%20 = sub 0:i32, %16
%21 = and %20, 7:i32
%22 = phi %15, %21, 0:i32
%23 = add %14, %22
%24 = eq %13, %23
%25:i32 = zext %24
%26 = eq %25, 0:i32
%27:i32 = var
%28:i32 = var
pc %26 1:i1
pc %27 1:i1
pc %28 1:i1
infer %9


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4 = and %3, -8:i32 (hasExternalUses)
%5:i32 = var
%6:i32 = var
%7 = sub %5, %6 (hasExternalUses)
%8 = add %4, %7 (hasExternalUses)
%9 = phi %2, %8, %7
%10:i32 = var
%11 = sub 14:i32, %10
%12:i32 = var
%13 = lshr %12, 15:i32
%14 = add %11, %13
%15 = add %14, 7:i32
%16 = lshr %9, %15
%17 = and %16, 1:i32
%18 = shl %14, 1:i32
%19 = or %17, %18 (hasExternalUses)
%20 = phi %1, %19, 0:i32
%21 = phi %0, 31:i32, %20
%22 = shl 1:i32, %21
%23 = lshr %9, 8:i32
%24 = ne %23, 0:i32
blockpc %1 0 %24 1:i1
%25 = eq %23, 0:i32
blockpc %1 1 %25 1:i1
%26 = and %3, 3:i32
%27 = eq %26, 1:i32
blockpc %2 0 %27 1:i1
%28:i32 = var
blockpc %2 1 %28 1:i1
%29:i32 = var
%30:i32 = var
%31:i32 = var
pc %29 1:i1
pc %30 1:i1
pc %31 1:i1
infer %22


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2 = block 2
%3 = block 2
%4:i32 = var
%5:i32 = var
%6 = add %4, %5 (hasExternalUses)
%7 = phi %3, %6, %5
%8:i32 = var
%9:i32 = var
%10 = add %8, %9
%11 = add %10, 7:i32
%12 = lshr %7, %11
%13 = and %12, 1:i32
%14 = shl %10, 1:i32
%15 = or %13, %14 (hasExternalUses)
%16 = phi %2, %15, 0:i32
%17 = phi %1, 31:i32, %16
%18 = shl 1:i32, %17 (hasExternalUses)
%19 = and %0, %18
%20 = lshr %7, 8:i32
%21 = ne %20, 0:i32
blockpc %2 0 %21 1:i1
%22 = eq %20, 0:i32
blockpc %2 1 %22 1:i1
%23:i32 = var
%24 = and %23, 3:i32
%25 = eq %24, 1:i32
blockpc %3 0 %25 1:i1
%26:i32 = zext %25
%27 = eq %26, 0:i32
blockpc %3 1 %27 1:i1
%28:i32 = var
%29:i32 = var
%30:i32 = var
pc %28 1:i1
pc %29 1:i1
pc %30 1:i1
infer %19


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2 = block 2
%3 = block 2
%4:i32 = var
%5:i32 = var
%6 = phi %3, %4, %5
%7:i32 = var
%8 = add %7, 7:i32
%9 = lshr %6, %8
%10 = and %9, 1:i32
%11 = shl %7, 1:i32
%12 = or %10, %11 (hasExternalUses)
%13 = phi %2, %12, 0:i32
%14 = phi %1, 31:i32, %13
%15 = shl 1:i32, %14 (hasExternalUses)
%16 = and %0, %15
%17 = eq %16, 0:i32
%18 = lshr %6, 8:i32
%19 = ne %18, 0:i32
blockpc %2 0 %19 1:i1
%20 = eq %18, 0:i32
blockpc %2 1 %20 1:i1
%21:i32 = var
%22 = and %21, 3:i32
%23 = eq %22, 1:i32
blockpc %3 0 %23 1:i1
%24:i32 = zext %23
%25 = eq %24, 0:i32
blockpc %3 1 %25 1:i1
%26:i32 = var
%27:i32 = var
%28:i32 = var
pc %26 1:i1
pc %27 1:i1
pc %28 1:i1
infer %17


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2 = block 2
%3 = block 2
%4:i32 = var
%5:i32 = var
%6 = add %4, %5 (hasExternalUses)
%7 = phi %3, %6, %5
%8:i32 = var
%9:i32 = var
%10 = add %8, %9
%11 = add %10, 7:i32
%12 = lshr %7, %11
%13 = and %12, 1:i32
%14 = shl %10, 1:i32
%15 = or %13, %14 (hasExternalUses)
%16 = phi %2, %15, 0:i32
%17 = phi %1, 31:i32, %16
%18 = shl 1:i32, %17 (hasExternalUses)
%19 = or %0, %18
%20 = lshr %7, 8:i32
%21 = ne %20, 0:i32
blockpc %2 0 %21 1:i1
%22 = eq %20, 0:i32
blockpc %2 1 %22 1:i1
%23:i32 = var
%24 = and %23, 3:i32
%25 = eq %24, 1:i32
blockpc %3 0 %25 1:i1
%26:i32 = zext %25
%27 = eq %26, 0:i32
blockpc %3 1 %27 1:i1
%28:i32 = var
%29:i32 = var
%30:i32 = var
%31:i32 = var
pc %28 1:i1
pc %29 1:i1
pc %30 1:i1
pc %31 1:i1
infer %19


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4 = and %3, -8:i32 (hasExternalUses)
%5:i32 = var
%6:i32 = var
%7 = sub %5, %6 (hasExternalUses)
%8 = add %4, %7 (hasExternalUses)
%9 = phi %2, %8, %7
%10:i32 = var
%11 = sub 14:i32, %10
%12:i32 = var
%13 = lshr %12, 15:i32
%14 = add %11, %13
%15 = add %14, 7:i32
%16 = lshr %9, %15
%17 = and %16, 1:i32
%18 = shl %14, 1:i32
%19 = or %17, %18 (hasExternalUses)
%20 = phi %1, %19, 0:i32
%21 = phi %0, 31:i32, %20
%22 = lshr %21, 1:i32
%23 = lshr %9, 8:i32
%24 = ne %23, 0:i32
blockpc %1 0 %24 1:i1
%25 = eq %23, 0:i32
blockpc %1 1 %25 1:i1
%26 = and %3, 3:i32
%27 = eq %26, 1:i32
blockpc %2 0 %27 1:i1
%28:i32 = var
blockpc %2 1 %28 1:i1
%29:i32 = var
%30:i32 = var
%31:i32 = var
pc %29 1:i1
pc %30 1:i1
pc %31 1:i1
infer %22


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = add %3, %4 (hasExternalUses)
%6 = phi %2, %5, %4
%7:i32 = var
%8:i32 = var
%9 = add %7, %8
%10 = add %9, 7:i32
%11 = lshr %6, %10
%12 = and %11, 1:i32
%13 = shl %9, 1:i32
%14 = or %12, %13 (hasExternalUses)
%15 = phi %1, %14, 0:i32
%16 = phi %0, 31:i32, %15
%17 = lshr %16, 1:i32
%18 = sub 25:i32, %17
%19 = lshr %6, 8:i32
%20 = ne %19, 0:i32
blockpc %1 0 %20 1:i1
%21 = eq %19, 0:i32
blockpc %1 1 %21 1:i1
%22:i32 = var
%23 = and %22, 3:i32
%24 = eq %23, 1:i32
blockpc %2 0 %24 1:i1
%25:i32 = zext %24
%26 = eq %25, 0:i32
blockpc %2 1 %26 1:i1
%27:i32 = var
%28:i32 = var
%29:i32 = var
pc %27 1:i1
pc %28 1:i1
pc %29 1:i1
infer %18


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4 = and %3, -8:i32 (hasExternalUses)
%5:i32 = var
%6:i32 = var
%7 = sub %5, %6 (hasExternalUses)
%8 = add %4, %7 (hasExternalUses)
%9 = phi %2, %8, %7
%10:i32 = var
%11 = sub 14:i32, %10
%12:i32 = var
%13 = lshr %12, 15:i32
%14 = add %11, %13
%15 = add %14, 7:i32
%16 = lshr %9, %15
%17 = and %16, 1:i32
%18 = shl %14, 1:i32
%19 = or %17, %18 (hasExternalUses)
%20 = phi %1, %19, 0:i32
%21 = phi %0, 31:i32, %20
%22 = eq %21, 31:i32
%23 = lshr %9, 8:i32
%24 = ne %23, 0:i32
blockpc %1 0 %24 1:i1
%25 = eq %23, 0:i32
blockpc %1 1 %25 1:i1
%26 = and %3, 3:i32
%27 = eq %26, 1:i32
blockpc %2 0 %27 1:i1
%28:i32 = var
blockpc %2 1 %28 1:i1
%29:i32 = var
%30:i32 = var
%31:i32 = var
pc %29 1:i1
pc %30 1:i1
pc %31 1:i1
infer %22


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = and %1, -8:i32 (hasExternalUses)
%3:i32 = var
%4 = block 2
%5:i32 = var
%6 = sub 0:i32, %5
%7 = and %6, 7:i32
%8 = phi %4, %7, 0:i32
%9 = add %3, %8 (hasExternalUses)
%10:i32 = var
%11 = block 2
%12:i32 = var
%13 = sub 0:i32, %12
%14 = and %13, 7:i32
%15 = phi %11, %14, 0:i32
%16 = add %10, %15 (hasExternalUses)
%17 = sub %9, %16
%18:i32 = var
%19 = sub %17, %18 (hasExternalUses)
%20 = add %2, %19 (hasExternalUses)
%21 = phi %0, %20, %19
%22 = block 2
%23 = block 2
%24 = block 2
%25:i32 = var
%26 = lshr %21, %25
%27 = and %26, 1:i32
%28:i32 = var
%29:i32 = var
%30 = add %28, %29 (hasExternalUses)
%31 = shl %30, 1:i32
%32 = or %27, %31 (hasExternalUses)
%33 = phi %24, %32, 0:i32
%34 = phi %23, 31:i32, %33
%35 = lshr %34, 1:i32
%36 = sub 25:i32, %35
%37 = phi %22, 0:i32, %36
%38 = shl %21, %37
%39:i32 = var
blockpc %0 0 %39 1:i1
%40:i32 = var
blockpc %0 1 %40 1:i1
%41:i32 = var
blockpc %4 0 %41 1:i1
%42:i32 = var
blockpc %4 1 %42 1:i1
%43:i32 = var
blockpc %11 0 %43 1:i1
%44:i32 = var
blockpc %11 1 %44 1:i1
%45:i32 = var
blockpc %22 0 %45 1:i1
%46:i32 = var
blockpc %22 1 %46 1:i1
%47:i32 = var
blockpc %24 0 %47 1:i1
%48:i32 = var
blockpc %24 1 %48 1:i1
%49:i32 = var
%50:i32 = var
%51:i32 = var
pc %49 1:i1
pc %50 1:i1
pc %51 1:i1
infer %38


; start LHS (in $6)
%0:i32 = var
%1 = and %0, -8:i32
%2:i32 = var
%3:i32 = var
%4 = block 2
%5 = add %3, 8:i32
%6 = and %5, 7:i32
%7 = ne %6, 0:i32
blockpc %4 0 %7 1:i1
%8 = eq %6, 0:i32
blockpc %4 1 %8 1:i1
%9 = sub 0:i32, %5
%10 = and %9, 7:i32
%11 = phi %4, %10, 0:i32
%12 = add %3, %11
%13 = eq %2, %12
%14:i32 = zext %13
%15 = eq %14, 0:i32
%16:i32 = var
%17 = and %16, 8:i32
%18 = eq %17, 0:i32
%19:i32 = var
%20 = ne %19, 0:i32
pc %15 1:i1
pc %18 1:i1
pc %20 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = and %0, -8:i32
%2 = block 2
%3:i32 = var
%4 = and %3, -8:i32 (hasExternalUses)
%5:i32 = var
%6 = block 2
%7:i32 = var
%8 = sub 0:i32, %7
%9 = and %8, 7:i32
%10 = phi %6, %9, 0:i32
%11 = add %5, %10 (hasExternalUses)
%12:i32 = var
%13 = block 2
%14:i32 = var
%15 = sub 0:i32, %14
%16 = and %15, 7:i32
%17 = phi %13, %16, 0:i32
%18 = add %12, %17 (hasExternalUses)
%19 = sub %11, %18
%20:i32 = var
%21 = sub %19, %20 (hasExternalUses)
%22 = add %4, %21 (hasExternalUses)
%23 = phi %2, %22, %21
%24 = eq %1, %23
%25 = and %3, 3:i32
%26 = eq %25, 1:i32
blockpc %2 0 %26 1:i1
%27:i32 = zext %26
%28 = eq %27, 0:i32
blockpc %2 1 %28 1:i1
%29:i32 = var
blockpc %6 0 %29 1:i1
%30:i32 = var
blockpc %6 1 %30 1:i1
%31:i32 = var
blockpc %13 0 %31 1:i1
%32:i32 = var
blockpc %13 1 %32 1:i1
%33:i32 = var
%34:i32 = var
%35:i32 = var
pc %33 1:i1
pc %34 1:i1
pc %35 1:i1
infer %24


; start LHS (in $6)
%0:i32 = var
%1 = shl %0, 1:i32
%2:i32 = var
%3:i32 = var
%4 = block 2
%5 = add %3, 8:i32
%6 = and %5, 7:i32
%7 = ne %6, 0:i32
blockpc %4 0 %7 1:i1
%8 = eq %6, 0:i32
blockpc %4 1 %8 1:i1
%9 = sub 0:i32, %5
%10 = and %9, 7:i32
%11 = phi %4, %10, 0:i32
%12 = add %3, %11
%13 = eq %2, %12
%14:i32 = zext %13
%15 = eq %14, 0:i32
%16:i32 = var
%17 = and %16, 8:i32
%18 = eq %17, 0:i32
%19:i32 = var
%20 = ne %19, 0:i32
pc %15 1:i1
pc %18 1:i1
pc %20 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 16:i32
%2:i32 = var
%3:i32 = var
%4 = block 2
%5 = add %3, 8:i32
%6 = and %5, 7:i32
%7 = ne %6, 0:i32
blockpc %4 0 %7 1:i1
%8 = eq %6, 0:i32
blockpc %4 1 %8 1:i1
%9 = sub 0:i32, %5
%10 = and %9, 7:i32
%11 = phi %4, %10, 0:i32
%12 = add %3, %11
%13 = eq %2, %12
%14:i32 = zext %13
%15 = eq %14, 0:i32
%16:i32 = var
%17 = and %16, 8:i32
%18 = eq %17, 0:i32
%19:i32 = var
%20 = ne %19, 0:i32
pc %15 1:i1
pc %18 1:i1
pc %20 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = lshr %0, 31:i32
%2:i32 = var
%3:i32 = var
%4 = block 2
%5 = add %3, 8:i32
%6 = and %5, 7:i32
%7 = ne %6, 0:i32
blockpc %4 0 %7 1:i1
%8 = eq %6, 0:i32
blockpc %4 1 %8 1:i1
%9 = sub 0:i32, %5
%10 = and %9, 7:i32
%11 = phi %4, %10, 0:i32
%12 = add %3, %11
%13 = eq %2, %12
%14:i32 = zext %13
%15 = eq %14, 0:i32
%16:i32 = var
%17 = and %16, 8:i32
%18 = eq %17, 0:i32
%19:i32 = var
%20 = ne %19, 0:i32
pc %15 1:i1
pc %18 1:i1
pc %20 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = lshr %0, 31:i32
%2 = shl %1, 2:i32
%3:i32 = var
%4:i32 = var
%5 = block 2
%6 = add %4, 8:i32
%7 = and %6, 7:i32
%8 = ne %7, 0:i32
blockpc %5 0 %8 1:i1
%9 = eq %7, 0:i32
blockpc %5 1 %9 1:i1
%10 = sub 0:i32, %6
%11 = and %10, 7:i32
%12 = phi %5, %11, 0:i32
%13 = add %4, %12
%14 = eq %3, %13
%15:i32 = zext %14
%16 = eq %15, 0:i32
%17:i32 = var
%18 = and %17, 8:i32
%19 = eq %18, 0:i32
%20:i32 = var
%21 = ne %20, 0:i32
pc %16 1:i1
pc %19 1:i1
pc %21 1:i1
infer %2


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 16:i32
%2:i32 = var
%3 = lshr %2, 31:i32
%4 = shl %3, 2:i32
%5 = add %1, %4
%6:i32 = var
%7:i32 = var
%8 = block 2
%9 = add %7, 8:i32
%10 = and %9, 7:i32
%11 = ne %10, 0:i32
blockpc %8 0 %11 1:i1
%12 = eq %10, 0:i32
blockpc %8 1 %12 1:i1
%13 = sub 0:i32, %9
%14 = and %13, 7:i32
%15 = phi %8, %14, 0:i32
%16 = add %7, %15
%17 = eq %6, %16
%18:i32 = zext %17
%19 = eq %18, 0:i32
%20:i32 = var
%21 = and %20, 8:i32
%22 = eq %21, 0:i32
%23:i32 = var
%24 = ne %23, 0:i32
pc %19 1:i1
pc %22 1:i1
pc %24 1:i1
infer %5


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 8:i32
%2:i32 = var
%3:i32 = var
%4 = block 2
%5 = add %3, 8:i32
%6 = and %5, 7:i32
%7 = ne %6, 0:i32
blockpc %4 0 %7 1:i1
%8 = eq %6, 0:i32
blockpc %4 1 %8 1:i1
%9 = sub 0:i32, %5
%10 = and %9, 7:i32
%11 = phi %4, %10, 0:i32
%12 = add %3, %11
%13 = eq %2, %12
%14:i32 = zext %13
%15 = eq %14, 0:i32
%16:i32 = var
%17 = and %16, 8:i32
%18 = eq %17, 0:i32
%19:i32 = var
%20 = ne %19, 0:i32
pc %15 1:i1
pc %18 1:i1
pc %20 1:i1
infer %1


; start LHS (in $6)
%0 = block 5
%1:i32 = var
%2 = block 2
%3 = add %1, 8:i32 (hasExternalUses)
%4 = sub 0:i32, %3
%5 = and %4, 7:i32
%6 = phi %2, %5, 0:i32
%7 = add %1, %6 (hasExternalUses)
%8 = block 2
%9:i32 = var
%10 = phi %8, %7, %9
%11 = phi %0, %7, %7, %7, %7, %10
%12 = add %11, 8:i32
%13 = and %3, 7:i32
%14 = ne %13, 0:i32
blockpc %2 0 %14 1:i1
%15 = eq %13, 0:i32
blockpc %2 1 %15 1:i1
%16:i32 = var
%17:i32 = var
%18 = block 2
%19 = add %17, 8:i32
%20 = and %19, 7:i32
%21 = ne %20, 0:i32
blockpc %18 0 %21 1:i1
%22 = eq %20, 0:i32
blockpc %18 1 %22 1:i1
%23 = sub 0:i32, %19
%24 = and %23, 7:i32
%25 = phi %18, %24, 0:i32
%26 = add %17, %25
%27 = eq %16, %26
blockpc %8 0 %27 1:i1
%28:i32 = var
blockpc %8 1 %28 1:i1
%29:i32 = var
%30:i32 = var
pc %29 1:i1
pc %30 1:i1
infer %12


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = phi %1, %5, %6
%8 = ule %0, %7
%9 = ne %3, 0:i32
pc %9 1:i1
infer %8


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = add %0, %1
%3 = block 2
%4 = block 2
%5:i32 = var
%6:i32 = var
%7 = phi %4, %5, %6
%8:i32 = var
%9 = phi %3, %7, %8
%10 = ule %0, %9
%11 = ne %5, 0:i32
pc %10 1:i1
pc %11 1:i1
infer %2


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2:i32 = var
%3:i32 = var
%4 = phi %1, %2, %3
%5:i32 = var
%6 = phi %0, %4, %5
%7:i32 = var
%8:i32 = var
%9 = add %7, %8 (hasExternalUses)
%10 = ult %6, %9
%11 = ule %7, %6
%12 = ne %2, 0:i32
pc %11 1:i1
pc %12 1:i1
infer %10


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = add %0, %1 (hasExternalUses)
%3 = add %2, -47:i32
%4:i32 = var
%5 = ne %4, 0:i32
pc %5 1:i1
infer %3


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = add %0, %1 (hasExternalUses)
%3 = add %2, -47:i32 (hasExternalUses)
%4 = add %3, 8:i32
%5:i32 = var
%6 = ne %5, 0:i32
pc %6 1:i1
infer %4


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = add %0, %1 (hasExternalUses)
%3 = add %2, -47:i32 (hasExternalUses)
%4 = add %3, 8:i32 (hasExternalUses)
%5 = sub 0:i32, %4
%6:i32 = var
%7 = ne %6, 0:i32
pc %7 1:i1
infer %5


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = add %0, %1 (hasExternalUses)
%3 = add %2, -47:i32 (hasExternalUses)
%4 = add %3, 8:i32 (hasExternalUses)
%5 = sub 0:i32, %4
%6 = and %5, 7:i32
%7:i32 = var
%8 = ne %7, 0:i32
pc %8 1:i1
infer %6


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = add %0, %1 (hasExternalUses)
%3 = add %2, -47:i32 (hasExternalUses)
%4 = add %3, 8:i32 (hasExternalUses)
%5 = and %4, 7:i32
%6:i32 = var
%7 = ne %6, 0:i32
pc %7 1:i1
infer %5


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = add %0, %1 (hasExternalUses)
%3 = add %2, -47:i32
%4 = block 2
%5 = add %3, 8:i32 (hasExternalUses)
%6 = sub 0:i32, %5
%7 = and %6, 7:i32
%8 = phi %4, %7, 0:i32
%9 = add %3, %8
%10 = and %5, 7:i32
%11 = ne %10, 0:i32
blockpc %4 0 %11 1:i1
%12 = eq %10, 0:i32
blockpc %4 1 %12 1:i1
%13:i32 = var
%14 = ne %13, 0:i32
pc %14 1:i1
infer %9


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2:i32 = var
%3:i32 = var
%4 = phi %1, %2, %3
%5:i32 = var
%6 = phi %0, %4, %5
%7 = add %6, 16:i32
%8 = ne %2, 0:i32
pc %8 1:i1
infer %7


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = add %0, %1 (hasExternalUses)
%3 = add %2, -47:i32
%4 = block 2
%5 = add %3, 8:i32 (hasExternalUses)
%6 = sub 0:i32, %5
%7 = and %6, 7:i32
%8 = phi %4, %7, 0:i32
%9 = add %3, %8 (hasExternalUses)
%10 = block 2
%11 = block 2
%12:i32 = var
%13:i32 = var
%14 = phi %11, %12, %13
%15:i32 = var
%16 = phi %10, %14, %15
%17 = add %16, 16:i32 (hasExternalUses)
%18 = ult %9, %17
%19 = and %5, 7:i32
%20 = ne %19, 0:i32
blockpc %4 0 %20 1:i1
%21 = eq %19, 0:i32
blockpc %4 1 %21 1:i1
%22 = ne %12, 0:i32
pc %22 1:i1
infer %18


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = phi %1, %5, %6
%8:i32 = var
%9:i32 = var
%10 = add %8, %9 (hasExternalUses)
%11 = add %10, -47:i32
%12 = block 2
%13 = add %11, 8:i32 (hasExternalUses)
%14 = sub 0:i32, %13
%15 = and %14, 7:i32
%16 = phi %12, %15, 0:i32
%17 = add %11, %16 (hasExternalUses)
%18 = phi %0, %7, %17
%19 = add %18, 8:i32
%20 = add %7, 16:i32
%21 = ult %17, %20
blockpc %0 0 %21 1:i1
%22:i32 = zext %21
%23 = eq %22, 0:i32
blockpc %0 1 %23 1:i1
%24 = and %13, 7:i32
%25 = ne %24, 0:i32
blockpc %12 0 %25 1:i1
%26 = eq %24, 0:i32
blockpc %12 1 %26 1:i1
%27:i32 = var
pc %27 1:i1
infer %19


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = phi %1, %5, %6
%8:i32 = var
%9:i32 = var
%10 = add %8, %9 (hasExternalUses)
%11 = add %10, -47:i32
%12 = block 2
%13 = add %11, 8:i32 (hasExternalUses)
%14 = sub 0:i32, %13
%15 = and %14, 7:i32
%16 = phi %12, %15, 0:i32
%17 = add %11, %16 (hasExternalUses)
%18 = phi %0, %7, %17
%19 = add %18, 24:i32
%20 = add %7, 16:i32
%21 = ult %17, %20
blockpc %0 0 %21 1:i1
%22:i32 = zext %21
%23 = eq %22, 0:i32
blockpc %0 1 %23 1:i1
%24 = and %13, 7:i32
%25 = ne %24, 0:i32
blockpc %12 0 %25 1:i1
%26 = eq %24, 0:i32
blockpc %12 1 %26 1:i1
%27:i32 = var
pc %27 1:i1
infer %19


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 6
%3 = block 2
%4:i32 = var
%5 = phi %3, %4, 4096:i32
%6 = block 2
%7:i32 = var
%8 = block 2
%9 = block 2
%10:i32 = var
%11 = phi %9, 16:i32, %10
%12 = block 2
%13 = block 2
%14 = block 2
%15 = block 2
%16:i32 = var
%17 = phi %15, %16, %7
%18 = phi %14, %7, %17
%19 = phi %13, %18, %7
%20 = phi %12, -1:i32, %19
%21 = phi %8, %11, %20
%22 = phi %6, %7, %21
%23 = add %22, 47:i32 (hasExternalUses)
%24 = add %5, %23 (hasExternalUses)
%25:i32 = var
%26 = sub %24, %25
%27 = sub 0:i32, %5 (hasExternalUses)
%28 = and %26, %27 (hasExternalUses)
%29 = block 2
%30:i32 = var
%31 = phi %29, %30, 0:i32
%32 = block 2
%33:i32 = var
%34:i32 = var
%35 = phi %32, %33, %34
%36 = add %31, %35 (hasExternalUses)
%37 = block 2
%38 = phi %37, %28, %36
%39:i32 = var
%40 = block 2
%41 = block 2
%42 = block 5
%43 = block 2
%44 = phi %43, %28, 0:i32
%45 = phi %42, %44, 0:i32, 0:i32, 0:i32, 0:i32
%46 = phi %41, 0:i32, %45
%47:i32 = var
%48 = phi %40, %46, %47
%49 = phi %2, %28, %36, %38, %38, %39, %48
%50:i32 = var
%51 = phi %1, %49, %50
%52:i32 = var
%53 = phi %0, %51, %52
%54 = add %53, -40:i32
%55:i32 = var
blockpc %3 0 %55 1:i1
%56:i32 = var
blockpc %3 1 %56 1:i1
%57:i32 = var
blockpc %8 0 %57 1:i1
%58:i32 = var
blockpc %8 1 %58 1:i1
%59:i32 = var
blockpc %9 0 %59 1:i1
%60:i32 = var
blockpc %9 1 %60 1:i1
%61:i32 = var
blockpc %12 0 %61 1:i1
%62:i32 = var
blockpc %12 1 %62 1:i1
%63:i32 = var
blockpc %13 0 %63 1:i1
%64:i32 = var
blockpc %13 1 %64 1:i1
%65:i32 = var
blockpc %29 0 %65 1:i1
%66:i32 = var
blockpc %29 1 %66 1:i1
%67:i32 = var
blockpc %40 0 %67 1:i1
%68:i32 = var
blockpc %40 1 %68 1:i1
%69:i32 = var
blockpc %41 0 %69 1:i1
%70:i32 = var
blockpc %41 1 %70 1:i1
%71:i32 = var
blockpc %43 0 %71 1:i1
%72:i32 = var
blockpc %43 1 %72 1:i1
%73:i32 = var
pc %73 1:i1
infer %54


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 6
%3:i32 = var
%4:i32 = var
%5 = block 2
%6:i32 = var
%7 = phi %5, %3, %6
%8:i32 = var
%9 = phi %2, %3, %4, %7, %7, %7, %8
%10:i32 = var
%11 = phi %1, %9, %10
%12:i32 = var
%13 = phi %0, %11, %12
%14 = add %13, 8:i32
%15:i32 = var
%16 = ne %15, 0:i32
pc %16 1:i1
infer %14


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 6
%3:i32 = var
%4:i32 = var
%5 = block 2
%6:i32 = var
%7 = phi %5, %3, %6
%8:i32 = var
%9 = phi %2, %3, %4, %7, %7, %7, %8
%10:i32 = var
%11 = phi %1, %9, %10
%12:i32 = var
%13 = phi %0, %11, %12
%14 = add %13, 8:i32 (hasExternalUses)
%15 = sub 0:i32, %14
%16:i32 = var
%17 = ne %16, 0:i32
pc %17 1:i1
infer %15


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 6
%3:i32 = var
%4:i32 = var
%5 = block 2
%6:i32 = var
%7 = phi %5, %3, %6
%8:i32 = var
%9 = phi %2, %3, %4, %7, %7, %7, %8
%10:i32 = var
%11 = phi %1, %9, %10
%12:i32 = var
%13 = phi %0, %11, %12
%14 = add %13, 8:i32 (hasExternalUses)
%15 = sub 0:i32, %14
%16 = and %15, 7:i32
%17:i32 = var
%18 = ne %17, 0:i32
pc %18 1:i1
infer %16


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 6
%3:i32 = var
%4:i32 = var
%5 = block 2
%6:i32 = var
%7 = phi %5, %3, %6
%8:i32 = var
%9 = phi %2, %3, %4, %7, %7, %7, %8
%10:i32 = var
%11 = phi %1, %9, %10
%12:i32 = var
%13 = phi %0, %11, %12
%14 = add %13, 8:i32 (hasExternalUses)
%15 = and %14, 7:i32
%16:i32 = var
%17 = ne %16, 0:i32
pc %17 1:i1
infer %15


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 6
%3:i32 = var
%4:i32 = var
%5 = block 2
%6:i32 = var
%7 = phi %5, %3, %6
%8:i32 = var
%9 = phi %2, %3, %4, %7, %7, %7, %8
%10:i32 = var
%11 = phi %1, %9, %10
%12:i32 = var
%13 = phi %0, %11, %12
%14 = block 2
%15 = add %13, 8:i32 (hasExternalUses)
%16 = sub 0:i32, %15
%17 = and %16, 7:i32 (hasExternalUses)
%18 = phi %14, %17, 0:i32
%19 = add %13, %18
%20 = and %15, 7:i32
%21 = ne %20, 0:i32
blockpc %14 0 %21 1:i1
%22 = eq %20, 0:i32
blockpc %14 1 %22 1:i1
%23:i32 = var
%24 = ne %23, 0:i32
pc %24 1:i1
infer %19


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 6
%3 = block 2
%4:i32 = var
%5 = phi %3, %4, 4096:i32
%6 = block 2
%7:i32 = var
%8 = block 2
%9 = block 2
%10:i32 = var
%11 = phi %9, 16:i32, %10
%12 = block 2
%13 = block 2
%14 = block 2
%15 = block 2
%16:i32 = var
%17 = phi %15, %16, %7
%18 = phi %14, %7, %17
%19 = phi %13, %18, %7
%20 = phi %12, -1:i32, %19
%21 = phi %8, %11, %20
%22 = phi %6, %7, %21
%23 = add %22, 47:i32 (hasExternalUses)
%24 = add %5, %23 (hasExternalUses)
%25:i32 = var
%26 = sub %24, %25
%27 = sub 0:i32, %5 (hasExternalUses)
%28 = and %26, %27 (hasExternalUses)
%29 = block 2
%30:i32 = var
%31 = phi %29, %30, 0:i32
%32 = block 2
%33:i32 = var
%34:i32 = var
%35 = phi %32, %33, %34
%36 = add %31, %35 (hasExternalUses)
%37 = block 2
%38 = phi %37, %28, %36
%39:i32 = var
%40 = block 2
%41 = block 2
%42 = block 5
%43 = block 2
%44 = phi %43, %28, 0:i32
%45 = phi %42, %44, 0:i32, 0:i32, 0:i32, 0:i32
%46 = phi %41, 0:i32, %45
%47:i32 = var
%48 = phi %40, %46, %47
%49 = phi %2, %28, %36, %38, %38, %39, %48
%50:i32 = var
%51 = phi %1, %49, %50
%52:i32 = var
%53 = phi %0, %51, %52
%54 = add %53, -40:i32 (hasExternalUses)
%55 = block 2
%56:i32 = var
%57 = phi %55, %56, 0:i32
%58 = sub %54, %57
%59:i32 = var
blockpc %3 0 %59 1:i1
%60:i32 = var
blockpc %3 1 %60 1:i1
%61:i32 = var
blockpc %8 0 %61 1:i1
%62:i32 = var
blockpc %8 1 %62 1:i1
%63:i32 = var
blockpc %9 0 %63 1:i1
%64:i32 = var
blockpc %9 1 %64 1:i1
%65:i32 = var
blockpc %12 0 %65 1:i1
%66:i32 = var
blockpc %12 1 %66 1:i1
%67:i32 = var
blockpc %13 0 %67 1:i1
%68:i32 = var
blockpc %13 1 %68 1:i1
%69:i32 = var
blockpc %29 0 %69 1:i1
%70:i32 = var
blockpc %29 1 %70 1:i1
%71:i32 = var
blockpc %40 0 %71 1:i1
%72:i32 = var
blockpc %40 1 %72 1:i1
%73:i32 = var
blockpc %41 0 %73 1:i1
%74:i32 = var
blockpc %41 1 %74 1:i1
%75:i32 = var
blockpc %43 0 %75 1:i1
%76:i32 = var
blockpc %43 1 %76 1:i1
%77:i32 = var
blockpc %55 0 %77 1:i1
%78:i32 = var
blockpc %55 1 %78 1:i1
%79:i32 = var
pc %79 1:i1
infer %58


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 6
%3 = block 2
%4:i32 = var
%5 = phi %3, %4, 4096:i32
%6:i32 = var
%7 = add %5, %6
%8:i32 = var
%9 = sub %7, %8
%10 = sub 0:i32, %5
%11 = and %9, %10 (hasExternalUses)
%12 = block 2
%13:i32 = var
%14:i32 = var
%15 = sub %13, %14
%16 = phi %12, %15, 0:i32
%17 = block 2
%18 = and %7, %10 (hasExternalUses)
%19:i32 = var
%20 = phi %17, %18, %19
%21 = add %16, %20 (hasExternalUses)
%22 = block 2
%23 = phi %22, %11, %21
%24:i32 = var
%25:i32 = var
%26 = add %24, %25
%27 = sub 0:i32, %25
%28 = and %26, %27 (hasExternalUses)
%29 = add %28, %23 (hasExternalUses)
%30 = block 2
%31 = block 2
%32 = block 5
%33 = block 2
%34 = phi %33, %11, 0:i32
%35 = phi %32, %34, 0:i32, 0:i32, 0:i32, 0:i32
%36 = phi %31, 0:i32, %35
%37:i32 = var
%38 = phi %30, %36, %37
%39 = phi %2, %11, %21, %23, %23, %29, %38
%40:i32 = var
%41 = phi %1, %39, %40
%42:i32 = var
%43 = phi %0, %41, %42
%44 = add %43, -40:i32 (hasExternalUses)
%45 = block 2
%46:i32 = var
%47 = phi %45, %46, 0:i32
%48 = sub %44, %47 (hasExternalUses)
%49 = or %48, 1:i32
%50:i32 = var
blockpc %3 0 %50 1:i1
%51:i32 = var
blockpc %3 1 %51 1:i1
%52:i32 = var
blockpc %12 0 %52 1:i1
%53:i32 = var
blockpc %12 1 %53 1:i1
%54:i32 = var
blockpc %30 0 %54 1:i1
%55:i32 = var
blockpc %30 1 %55 1:i1
%56:i32 = var
blockpc %31 0 %56 1:i1
%57:i32 = var
blockpc %31 1 %57 1:i1
%58:i32 = var
blockpc %33 0 %58 1:i1
%59:i32 = var
blockpc %33 1 %59 1:i1
%60:i32 = var
blockpc %45 0 %60 1:i1
%61:i32 = var
blockpc %45 1 %61 1:i1
%62:i32 = var
pc %62 1:i1
infer %49


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 6
%3:i32 = var
%4:i32 = var
%5 = block 2
%6:i32 = var
%7 = phi %5, %3, %6
%8:i32 = var
%9 = phi %2, %3, %4, %7, %7, %7, %8
%10:i32 = var
%11 = phi %1, %9, %10
%12:i32 = var
%13 = phi %0, %11, %12
%14 = block 2
%15:i32 = var
%16 = phi %14, %15, 4096:i32
%17 = block 2
%18:i32 = var
%19 = block 2
%20 = block 2
%21:i32 = var
%22 = phi %20, 16:i32, %21
%23 = block 2
%24 = block 2
%25 = block 2
%26 = block 2
%27:i32 = var
%28 = phi %26, %27, %18
%29 = phi %25, %18, %28
%30 = phi %24, %29, %18
%31 = phi %23, -1:i32, %30
%32 = phi %19, %22, %31
%33 = phi %17, %18, %32
%34 = add %33, 47:i32 (hasExternalUses)
%35 = add %16, %34 (hasExternalUses)
%36:i32 = var
%37 = sub %35, %36
%38:i32 = var
%39 = and %37, %38 (hasExternalUses)
%40:i32 = var
%41 = phi %5, %39, %40
%42:i32 = var
%43 = block 2
%44 = block 2
%45 = block 5
%46 = block 2
%47 = phi %46, %39, 0:i32
%48 = phi %45, %47, 0:i32, 0:i32, 0:i32, 0:i32
%49 = phi %44, 0:i32, %48
%50:i32 = var
%51 = phi %43, %49, %50
%52 = phi %2, %39, %40, %41, %41, %42, %51
%53:i32 = var
%54 = phi %1, %52, %53
%55:i32 = var
%56 = phi %0, %54, %55
%57 = add %56, -40:i32 (hasExternalUses)
%58 = add %13, %57
%59:i32 = var
blockpc %14 0 %59 1:i1
%60:i32 = var
blockpc %14 1 %60 1:i1
%61:i32 = var
blockpc %19 0 %61 1:i1
%62:i32 = var
blockpc %19 1 %62 1:i1
%63:i32 = var
blockpc %20 0 %63 1:i1
%64:i32 = var
blockpc %20 1 %64 1:i1
%65:i32 = var
blockpc %23 0 %65 1:i1
%66:i32 = var
blockpc %23 1 %66 1:i1
%67:i32 = var
blockpc %24 0 %67 1:i1
%68:i32 = var
blockpc %24 1 %68 1:i1
%69:i32 = var
blockpc %43 0 %69 1:i1
%70:i32 = var
blockpc %43 1 %70 1:i1
%71:i32 = var
blockpc %44 0 %71 1:i1
%72:i32 = var
blockpc %44 1 %72 1:i1
%73:i32 = var
blockpc %46 0 %73 1:i1
%74:i32 = var
blockpc %46 1 %74 1:i1
%75:i32 = var
pc %75 1:i1
infer %58


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = phi %1, %5, %6
%8:i32 = var
%9:i32 = var
%10 = add %8, %9 (hasExternalUses)
%11 = add %10, -47:i32
%12 = block 2
%13 = add %11, 8:i32 (hasExternalUses)
%14 = sub 0:i32, %13
%15 = and %14, 7:i32
%16 = phi %12, %15, 0:i32
%17 = add %11, %16 (hasExternalUses)
%18 = phi %0, %7, %17
%19 = add %18, 4:i32
%20 = add %7, 16:i32
%21 = ult %17, %20
blockpc %0 0 %21 1:i1
%22:i32 = zext %21
%23 = eq %22, 0:i32
blockpc %0 1 %23 1:i1
%24 = and %13, 7:i32
%25 = ne %24, 0:i32
blockpc %12 0 %25 1:i1
%26 = eq %24, 0:i32
blockpc %12 1 %26 1:i1
%27:i32 = var
pc %27 1:i1
infer %19


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 4:i32
%2:i32 = var
%3 = ne %2, 0:i32
pc %3 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 8:i32
%2:i32 = var
%3 = ne %2, 0:i32
pc %3 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 8:i32
%2:i32 = var
%3:i32 = var
%4 = add %2, %3 (hasExternalUses)
%5 = ult %1, %4
%6:i32 = var
%7 = ne %6, 0:i32
pc %7 1:i1
infer %5


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = phi %1, %5, %6
%8:i32 = var
%9:i32 = var
%10 = add %8, %9 (hasExternalUses)
%11 = add %10, -47:i32
%12 = block 2
%13 = add %11, 8:i32 (hasExternalUses)
%14 = sub 0:i32, %13
%15 = and %14, 7:i32
%16 = phi %12, %15, 0:i32
%17 = add %11, %16 (hasExternalUses)
%18 = phi %0, %7, %17
%19 = ne %18, %7
%20 = add %7, 16:i32
%21 = ult %17, %20
blockpc %0 0 %21 1:i1
%22:i32 = zext %21
%23 = eq %22, 0:i32
blockpc %0 1 %23 1:i1
%24 = and %13, 7:i32
%25 = ne %24, 0:i32
blockpc %12 0 %25 1:i1
%26 = eq %24, 0:i32
blockpc %12 1 %26 1:i1
%27:i32 = var
pc %27 1:i1
infer %19


; start LHS (in $6)
%0:i32 = var
%1 = and %0, -2:i32
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = add %3, %4
%6 = add %5, -47:i32
%7 = block 2
%8:i32 = var
%9 = and %8, 7:i32
%10 = ne %9, 0:i32
blockpc %7 0 %10 1:i1
%11 = eq %9, 0:i32
blockpc %7 1 %11 1:i1
%12 = sub 0:i32, %8
%13 = and %12, 7:i32
%14 = phi %7, %13, 0:i32
%15 = add %6, %14
%16 = block 2
%17 = block 2
%18:i32 = var
%19:i32 = var
%20 = phi %17, %18, %19
%21:i32 = var
%22 = phi %16, %20, %21
%23 = add %22, 16:i32
%24 = ult %15, %23
blockpc %2 0 %24 1:i1
%25:i32 = zext %24
%26 = eq %25, 0:i32
blockpc %2 1 %26 1:i1
%27 = phi %2, %22, %15
%28 = ne %27, %22
%29:i32 = var
pc %28 1:i1
pc %29 1:i1
infer %1


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = phi %1, %5, %6
%8:i32 = var
%9:i32 = var
%10 = add %8, %9 (hasExternalUses)
%11 = add %10, -47:i32
%12 = block 2
%13 = add %11, 8:i32 (hasExternalUses)
%14 = sub 0:i32, %13
%15 = and %14, 7:i32
%16 = phi %12, %15, 0:i32
%17 = add %11, %16 (hasExternalUses)
%18 = phi %0, %7, %17
%19 = sub %18, %7
%20 = add %7, 16:i32
%21 = ult %17, %20
blockpc %0 0 %21 1:i1
%22:i32 = zext %21
%23 = eq %22, 0:i32
blockpc %0 1 %23 1:i1
%24 = and %13, 7:i32
%25 = ne %24, 0:i32
blockpc %12 0 %25 1:i1
%26 = eq %24, 0:i32
blockpc %12 1 %26 1:i1
%27:i32 = var
%28:i32 = var
pc %27 1:i1
pc %28 1:i1
infer %19


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = phi %1, %5, %6
%8:i32 = var
%9:i32 = var
%10 = add %8, %9 (hasExternalUses)
%11 = add %10, -47:i32
%12 = block 2
%13 = add %11, 8:i32 (hasExternalUses)
%14 = sub 0:i32, %13
%15 = and %14, 7:i32
%16 = phi %12, %15, 0:i32
%17 = add %11, %16 (hasExternalUses)
%18 = phi %0, %7, %17
%19 = sub %18, %7 (hasExternalUses)
%20 = or %19, 1:i32
%21 = add %7, 16:i32
%22 = ult %17, %21
blockpc %0 0 %22 1:i1
%23:i32 = zext %22
%24 = eq %23, 0:i32
blockpc %0 1 %24 1:i1
%25 = and %13, 7:i32
%26 = ne %25, 0:i32
blockpc %12 0 %26 1:i1
%27:i32 = var
blockpc %12 1 %27 1:i1
%28:i32 = var
%29:i32 = var
pc %28 1:i1
pc %29 1:i1
infer %20


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = phi %1, %5, %6
%8:i32 = var
%9:i32 = var
%10 = add %8, %9 (hasExternalUses)
%11 = add %10, -47:i32
%12 = block 2
%13 = add %11, 8:i32 (hasExternalUses)
%14 = sub 0:i32, %13
%15 = and %14, 7:i32
%16 = phi %12, %15, 0:i32
%17 = add %11, %16 (hasExternalUses)
%18 = phi %0, %7, %17
%19 = sub %18, %7 (hasExternalUses)
%20 = lshr %19, 3:i32
%21 = add %7, 16:i32
%22 = ult %17, %21
blockpc %0 0 %22 1:i1
%23:i32 = zext %22
%24 = eq %23, 0:i32
blockpc %0 1 %24 1:i1
%25 = and %13, 7:i32
%26 = ne %25, 0:i32
blockpc %12 0 %26 1:i1
%27:i32 = var
blockpc %12 1 %27 1:i1
%28:i32 = var
%29:i32 = var
pc %28 1:i1
pc %29 1:i1
infer %20


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = phi %1, %5, %6
%8:i32 = var
%9:i32 = var
%10 = add %8, %9 (hasExternalUses)
%11 = add %10, -47:i32
%12 = block 2
%13 = add %11, 8:i32 (hasExternalUses)
%14 = sub 0:i32, %13
%15 = and %14, 7:i32
%16 = phi %12, %15, 0:i32
%17 = add %11, %16 (hasExternalUses)
%18 = phi %0, %7, %17
%19 = sub %18, %7 (hasExternalUses)
%20 = ult %19, 256:i32
%21 = add %7, 16:i32
%22 = ult %17, %21
blockpc %0 0 %22 1:i1
%23:i32 = zext %22
%24 = eq %23, 0:i32
blockpc %0 1 %24 1:i1
%25 = and %13, 7:i32
%26 = ne %25, 0:i32
blockpc %12 0 %26 1:i1
%27:i32 = var
blockpc %12 1 %27 1:i1
%28:i32 = var
%29:i32 = var
pc %28 1:i1
pc %29 1:i1
infer %20


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = phi %1, %5, %6
%8:i32 = var
%9:i32 = var
%10 = add %8, %9 (hasExternalUses)
%11 = add %10, -47:i32
%12 = block 2
%13 = add %11, 8:i32 (hasExternalUses)
%14 = sub 0:i32, %13
%15 = and %14, 7:i32
%16 = phi %12, %15, 0:i32
%17 = add %11, %16 (hasExternalUses)
%18 = phi %0, %7, %17
%19 = sub %18, %7 (hasExternalUses)
%20 = lshr %19, 3:i32 (hasExternalUses)
%21 = shl %20, 3:i32
%22 = add %7, 16:i32
%23 = ult %17, %22
blockpc %0 0 %23 1:i1
%24:i32 = zext %23
%25 = eq %24, 0:i32
blockpc %0 1 %25 1:i1
%26 = and %13, 7:i32
%27 = ne %26, 0:i32
blockpc %12 0 %27 1:i1
%28:i32 = var
blockpc %12 1 %28 1:i1
%29:i32 = var
%30:i32 = var
%31:i32 = var
pc %29 1:i1
pc %30 1:i1
pc %31 1:i1
infer %21


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = phi %1, %5, %6
%8:i32 = var
%9:i32 = var
%10 = add %8, %9 (hasExternalUses)
%11 = add %10, -47:i32 (hasExternalUses)
%12 = block 2
%13:i32 = var
%14 = sub 0:i32, %13
%15 = and %14, 7:i32
%16 = phi %12, %15, 0:i32
%17 = add %11, %16 (hasExternalUses)
%18 = phi %0, %7, %17
%19 = sub %18, %7 (hasExternalUses)
%20 = lshr %19, 3:i32 (hasExternalUses)
%21 = shl %20, 3:i32
%22 = add %21, 3996:i32
%23 = add %7, 16:i32
%24 = ult %17, %23
blockpc %0 0 %24 1:i1
%25:i32 = zext %24
%26 = eq %25, 0:i32
blockpc %0 1 %26 1:i1
%27 = and %13, 7:i32
%28 = ne %27, 0:i32
blockpc %12 0 %28 1:i1
%29:i32 = var
blockpc %12 1 %29 1:i1
%30:i32 = var
%31:i32 = var
%32:i32 = var
pc %30 1:i1
pc %31 1:i1
pc %32 1:i1
infer %22


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = phi %1, %5, %6
%8:i32 = var
%9:i32 = var
%10 = add %8, %9 (hasExternalUses)
%11 = add %10, -47:i32
%12 = block 2
%13 = add %11, 8:i32 (hasExternalUses)
%14 = sub 0:i32, %13
%15 = and %14, 7:i32
%16 = phi %12, %15, 0:i32
%17 = add %11, %16 (hasExternalUses)
%18 = phi %0, %7, %17
%19 = sub %18, %7 (hasExternalUses)
%20 = lshr %19, 3:i32 (hasExternalUses)
%21 = shl 1:i32, %20
%22 = add %7, 16:i32
%23 = ult %17, %22
blockpc %0 0 %23 1:i1
%24:i32 = zext %23
%25 = eq %24, 0:i32
blockpc %0 1 %25 1:i1
%26 = and %13, 7:i32
%27 = ne %26, 0:i32
blockpc %12 0 %27 1:i1
%28:i32 = var
blockpc %12 1 %28 1:i1
%29:i32 = var
%30:i32 = var
%31:i32 = var
pc %29 1:i1
pc %30 1:i1
pc %31 1:i1
infer %21


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2 = block 2
%3 = block 2
%4:i32 = var
%5:i32 = var
%6 = phi %3, %4, %5
%7:i32 = var
%8 = phi %2, %6, %7
%9:i32 = var
%10:i32 = var
%11 = add %9, %10 (hasExternalUses)
%12 = add %11, -47:i32 (hasExternalUses)
%13 = block 2
%14:i32 = var
%15 = sub 0:i32, %14
%16 = and %15, 7:i32
%17 = phi %13, %16, 0:i32
%18 = add %12, %17 (hasExternalUses)
%19 = phi %1, %8, %18
%20 = sub %19, %8 (hasExternalUses)
%21 = lshr %20, 3:i32 (hasExternalUses)
%22 = shl 1:i32, %21 (hasExternalUses)
%23 = and %0, %22
%24 = add %8, 16:i32
%25 = ult %18, %24
blockpc %1 0 %25 1:i1
%26:i32 = zext %25
%27 = eq %26, 0:i32
blockpc %1 1 %27 1:i1
%28:i32 = var
blockpc %13 0 %28 1:i1
%29:i32 = var
blockpc %13 1 %29 1:i1
%30:i32 = var
%31:i32 = var
%32:i32 = var
pc %30 1:i1
pc %31 1:i1
pc %32 1:i1
infer %23


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = phi %1, %5, %6
%8:i32 = var
%9:i32 = var
%10 = add %8, %9 (hasExternalUses)
%11 = add %10, -47:i32 (hasExternalUses)
%12 = block 2
%13:i32 = var
%14 = and %13, 7:i32
%15 = phi %12, %14, 0:i32
%16 = add %11, %15 (hasExternalUses)
%17 = phi %0, %7, %16
%18 = sub %17, %7 (hasExternalUses)
%19 = lshr %18, 3:i32 (hasExternalUses)
%20 = shl %19, 3:i32
%21 = add %20, 3996:i32 (hasExternalUses)
%22 = add %21, 8:i32
%23 = add %7, 16:i32
%24 = ult %16, %23
blockpc %0 0 %24 1:i1
%25:i32 = zext %24
%26 = eq %25, 0:i32
blockpc %0 1 %26 1:i1
%27 = add %11, 8:i32
%28 = and %27, 7:i32
%29 = ne %28, 0:i32
blockpc %12 0 %29 1:i1
%30:i32 = var
blockpc %12 1 %30 1:i1
%31:i32 = var
%32:i32 = var
%33:i32 = var
%34:i32 = var
pc %31 1:i1
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
infer %22


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2 = block 2
%3 = block 2
%4:i32 = var
%5:i32 = var
%6 = phi %3, %4, %5
%7:i32 = var
%8 = phi %2, %6, %7
%9:i32 = var
%10:i32 = var
%11 = add %9, %10 (hasExternalUses)
%12 = add %11, -47:i32 (hasExternalUses)
%13 = block 2
%14:i32 = var
%15 = sub 0:i32, %14
%16 = and %15, 7:i32
%17 = phi %13, %16, 0:i32
%18 = add %12, %17 (hasExternalUses)
%19 = phi %1, %8, %18
%20 = sub %19, %8 (hasExternalUses)
%21 = lshr %20, 3:i32 (hasExternalUses)
%22 = shl 1:i32, %21 (hasExternalUses)
%23 = or %0, %22
%24 = add %8, 16:i32
%25 = ult %18, %24
blockpc %1 0 %25 1:i1
%26:i32 = zext %25
%27 = eq %26, 0:i32
blockpc %1 1 %27 1:i1
%28:i32 = var
blockpc %13 0 %28 1:i1
%29:i32 = var
blockpc %13 1 %29 1:i1
%30:i32 = var
%31:i32 = var
%32:i32 = var
%33:i32 = var
pc %30 1:i1
pc %31 1:i1
pc %32 1:i1
pc %33 1:i1
infer %23


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = phi %1, %5, %6
%8:i32 = var
%9:i32 = var
%10 = add %8, %9 (hasExternalUses)
%11 = add %10, -47:i32 (hasExternalUses)
%12 = block 2
%13:i32 = var
%14 = and %13, 7:i32
%15 = phi %12, %14, 0:i32
%16 = add %11, %15 (hasExternalUses)
%17 = phi %0, %7, %16
%18 = sub %17, %7 (hasExternalUses)
%19 = lshr %18, 3:i32 (hasExternalUses)
%20 = shl %19, 3:i32
%21 = add %20, 3996:i32 (hasExternalUses)
%22 = add %21, 8:i32
%23 = add %7, 16:i32
%24 = ult %16, %23
blockpc %0 0 %24 1:i1
%25:i32 = zext %24
%26 = eq %25, 0:i32
blockpc %0 1 %26 1:i1
%27 = add %11, 8:i32
%28 = and %27, 7:i32
%29 = ne %28, 0:i32
blockpc %12 0 %29 1:i1
%30:i32 = var
blockpc %12 1 %30 1:i1
%31:i32 = var
%32:i32 = var
%33:i32 = var
%34:i32 = var
pc %31 1:i1
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
infer %22


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = phi %1, %5, %6
%8:i32 = var
%9:i32 = var
%10 = add %8, %9 (hasExternalUses)
%11 = add %10, -47:i32
%12 = block 2
%13 = add %11, 8:i32 (hasExternalUses)
%14 = sub 0:i32, %13
%15 = and %14, 7:i32
%16 = phi %12, %15, 0:i32
%17 = add %11, %16 (hasExternalUses)
%18 = phi %0, %7, %17
%19 = sub %18, %7 (hasExternalUses)
%20 = lshr %19, 8:i32
%21 = add %7, 16:i32
%22 = ult %17, %21
blockpc %0 0 %22 1:i1
%23:i32 = zext %22
%24 = eq %23, 0:i32
blockpc %0 1 %24 1:i1
%25 = and %13, 7:i32
%26 = ne %25, 0:i32
blockpc %12 0 %26 1:i1
%27:i32 = var
blockpc %12 1 %27 1:i1
%28:i32 = var
%29:i32 = var
pc %28 1:i1
pc %29 1:i1
infer %20


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = phi %1, %5, %6
%8:i32 = var
%9:i32 = var
%10 = add %8, %9 (hasExternalUses)
%11 = add %10, -47:i32
%12 = block 2
%13 = add %11, 8:i32 (hasExternalUses)
%14 = sub 0:i32, %13
%15 = and %14, 7:i32
%16 = phi %12, %15, 0:i32
%17 = add %11, %16 (hasExternalUses)
%18 = phi %0, %7, %17
%19 = sub %18, %7 (hasExternalUses)
%20 = ult 16777215:i32, %19
%21 = add %7, 16:i32
%22 = ult %17, %21
blockpc %0 0 %22 1:i1
%23:i32 = zext %22
%24 = eq %23, 0:i32
blockpc %0 1 %24 1:i1
%25 = and %13, 7:i32
%26 = ne %25, 0:i32
blockpc %12 0 %26 1:i1
%27:i32 = var
blockpc %12 1 %27 1:i1
%28:i32 = var
%29:i32 = var
%30:i32 = var
pc %28 1:i1
pc %29 1:i1
pc %30 1:i1
infer %20


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = phi %1, %5, %6
%8:i32 = var
%9:i32 = var
%10 = add %8, %9 (hasExternalUses)
%11 = add %10, -47:i32
%12 = block 2
%13 = add %11, 8:i32 (hasExternalUses)
%14 = sub 0:i32, %13
%15 = and %14, 7:i32
%16 = phi %12, %15, 0:i32
%17 = add %11, %16 (hasExternalUses)
%18 = phi %0, %7, %17
%19 = sub %18, %7 (hasExternalUses)
%20 = lshr %19, 8:i32 (hasExternalUses)
%21 = add %20, 1048320:i32
%22 = add %7, 16:i32
%23 = ult %17, %22
blockpc %0 0 %23 1:i1
%24:i32 = zext %23
%25 = eq %24, 0:i32
blockpc %0 1 %25 1:i1
%26 = and %13, 7:i32
%27 = ne %26, 0:i32
blockpc %12 0 %27 1:i1
%28:i32 = var
blockpc %12 1 %28 1:i1
%29:i32 = var
%30:i32 = var
%31:i32 = var
%32:i32 = var
pc %29 1:i1
pc %30 1:i1
pc %31 1:i1
pc %32 1:i1
infer %21


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = phi %1, %5, %6
%8:i32 = var
%9:i32 = var
%10 = add %8, %9 (hasExternalUses)
%11 = add %10, -47:i32 (hasExternalUses)
%12 = block 2
%13:i32 = var
%14 = sub 0:i32, %13
%15 = and %14, 7:i32
%16 = phi %12, %15, 0:i32
%17 = add %11, %16 (hasExternalUses)
%18 = phi %0, %7, %17
%19 = sub %18, %7 (hasExternalUses)
%20 = lshr %19, 8:i32 (hasExternalUses)
%21 = add %20, 1048320:i32
%22 = lshr %21, 16:i32
%23 = add %7, 16:i32
%24 = ult %17, %23
blockpc %0 0 %24 1:i1
%25:i32 = zext %24
%26 = eq %25, 0:i32
blockpc %0 1 %26 1:i1
%27 = and %13, 7:i32
%28 = ne %27, 0:i32
blockpc %12 0 %28 1:i1
%29:i32 = var
blockpc %12 1 %29 1:i1
%30:i32 = var
%31:i32 = var
%32:i32 = var
%33:i32 = var
pc %30 1:i1
pc %31 1:i1
pc %32 1:i1
pc %33 1:i1
infer %22


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = phi %1, %5, %6
%8:i32 = var
%9:i32 = var
%10 = add %8, %9 (hasExternalUses)
%11 = add %10, -47:i32 (hasExternalUses)
%12 = block 2
%13:i32 = var
%14 = and %13, 7:i32
%15 = phi %12, %14, 0:i32
%16 = add %11, %15 (hasExternalUses)
%17 = phi %0, %7, %16
%18 = sub %17, %7 (hasExternalUses)
%19 = lshr %18, 8:i32 (hasExternalUses)
%20 = add %19, 1048320:i32
%21 = lshr %20, 16:i32
%22 = and %21, 8:i32
%23 = add %7, 16:i32
%24 = ult %16, %23
blockpc %0 0 %24 1:i1
%25:i32 = zext %24
%26 = eq %25, 0:i32
blockpc %0 1 %26 1:i1
%27 = add %11, 8:i32
%28 = and %27, 7:i32
%29 = ne %28, 0:i32
blockpc %12 0 %29 1:i1
%30:i32 = var
blockpc %12 1 %30 1:i1
%31:i32 = var
%32:i32 = var
%33:i32 = var
%34:i32 = var
pc %31 1:i1
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
infer %22


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = phi %1, %5, %6
%8:i32 = var
%9:i32 = var
%10 = add %8, %9 (hasExternalUses)
%11 = add %10, -47:i32
%12 = block 2
%13 = add %11, 8:i32 (hasExternalUses)
%14 = sub 0:i32, %13
%15 = and %14, 7:i32
%16 = phi %12, %15, 0:i32
%17 = add %11, %16 (hasExternalUses)
%18 = phi %0, %7, %17
%19 = sub %18, %7 (hasExternalUses)
%20 = lshr %19, 8:i32 (hasExternalUses)
%21 = add %20, 1048320:i32
%22 = lshr %21, 16:i32
%23 = and %22, 8:i32 (hasExternalUses)
%24 = shl %20, %23
%25 = add %7, 16:i32
%26 = ult %17, %25
blockpc %0 0 %26 1:i1
%27:i32 = zext %26
%28 = eq %27, 0:i32
blockpc %0 1 %28 1:i1
%29:i32 = var
blockpc %12 0 %29 1:i1
%30:i32 = var
blockpc %12 1 %30 1:i1
%31:i32 = var
%32:i32 = var
%33:i32 = var
%34:i32 = var
pc %31 1:i1
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
infer %24


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = phi %1, %5, %6
%8:i32 = var
%9:i32 = var
%10 = add %8, %9 (hasExternalUses)
%11 = add %10, -47:i32 (hasExternalUses)
%12 = block 2
%13:i32 = var
%14 = sub 0:i32, %13
%15 = and %14, 7:i32
%16 = phi %12, %15, 0:i32
%17 = add %11, %16 (hasExternalUses)
%18 = phi %0, %7, %17
%19 = sub %18, %7 (hasExternalUses)
%20 = lshr %19, 8:i32 (hasExternalUses)
%21 = add %20, 1048320:i32
%22 = lshr %21, 16:i32
%23 = and %22, 8:i32 (hasExternalUses)
%24 = shl %20, %23 (hasExternalUses)
%25 = add %24, 520192:i32
%26 = add %7, 16:i32
%27 = ult %17, %26
blockpc %0 0 %27 1:i1
%28:i32 = zext %27
%29 = eq %28, 0:i32
blockpc %0 1 %29 1:i1
%30:i32 = var
blockpc %12 0 %30 1:i1
%31:i32 = var
blockpc %12 1 %31 1:i1
%32:i32 = var
%33:i32 = var
%34:i32 = var
%35:i32 = var
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
pc %35 1:i1
infer %25


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = phi %1, %5, %6
%8:i32 = var
%9:i32 = var
%10 = add %8, %9 (hasExternalUses)
%11 = add %10, -47:i32 (hasExternalUses)
%12 = block 2
%13:i32 = var
%14 = and %13, 7:i32
%15 = phi %12, %14, 0:i32
%16 = add %11, %15 (hasExternalUses)
%17 = phi %0, %7, %16
%18 = sub %17, %7 (hasExternalUses)
%19 = lshr %18, 8:i32 (hasExternalUses)
%20 = add %19, 1048320:i32
%21 = lshr %20, 16:i32
%22 = and %21, 8:i32 (hasExternalUses)
%23 = shl %19, %22 (hasExternalUses)
%24 = add %23, 520192:i32
%25 = lshr %24, 16:i32
%26 = add %7, 16:i32
%27 = ult %16, %26
blockpc %0 0 %27 1:i1
%28:i32 = zext %27
%29 = eq %28, 0:i32
blockpc %0 1 %29 1:i1
%30:i32 = var
blockpc %12 0 %30 1:i1
%31:i32 = var
blockpc %12 1 %31 1:i1
%32:i32 = var
%33:i32 = var
%34:i32 = var
%35:i32 = var
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
pc %35 1:i1
infer %25


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = phi %1, %5, %6
%8:i32 = var
%9 = add %8, -47:i32 (hasExternalUses)
%10 = block 2
%11:i32 = var
%12 = phi %10, %11, 0:i32
%13 = add %9, %12 (hasExternalUses)
%14 = phi %0, %7, %13
%15 = sub %14, %7 (hasExternalUses)
%16 = lshr %15, 8:i32 (hasExternalUses)
%17 = add %16, 1048320:i32
%18 = lshr %17, 16:i32
%19 = and %18, 8:i32 (hasExternalUses)
%20 = shl %16, %19 (hasExternalUses)
%21 = add %20, 520192:i32
%22 = lshr %21, 16:i32
%23 = and %22, 4:i32
%24 = add %7, 16:i32
%25 = ult %13, %24
blockpc %0 0 %25 1:i1
%26:i32 = zext %25
%27 = eq %26, 0:i32
blockpc %0 1 %27 1:i1
%28:i32 = var
blockpc %10 0 %28 1:i1
%29:i32 = var
blockpc %10 1 %29 1:i1
%30:i32 = var
%31:i32 = var
%32:i32 = var
%33:i32 = var
pc %30 1:i1
pc %31 1:i1
pc %32 1:i1
pc %33 1:i1
infer %23


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = phi %1, %5, %6
%8:i32 = var
%9 = block 2
%10:i32 = var
%11 = phi %9, %10, 0:i32
%12 = add %8, %11 (hasExternalUses)
%13 = phi %0, %7, %12
%14 = sub %13, %7 (hasExternalUses)
%15 = lshr %14, 8:i32 (hasExternalUses)
%16 = add %15, 1048320:i32
%17 = lshr %16, 16:i32
%18 = and %17, 8:i32
%19 = shl %15, %18 (hasExternalUses)
%20 = add %19, 520192:i32
%21 = lshr %20, 16:i32
%22 = and %21, 4:i32 (hasExternalUses)
%23 = or %22, %18
%24 = add %7, 16:i32
%25 = ult %12, %24
blockpc %0 0 %25 1:i1
%26:i32 = zext %25
%27 = eq %26, 0:i32
blockpc %0 1 %27 1:i1
%28:i32 = var
blockpc %9 0 %28 1:i1
%29:i32 = var
blockpc %9 1 %29 1:i1
%30:i32 = var
%31:i32 = var
%32:i32 = var
%33:i32 = var
pc %30 1:i1
pc %31 1:i1
pc %32 1:i1
pc %33 1:i1
infer %23


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = phi %1, %5, %6
%8:i32 = var
%9:i32 = var
%10 = add %8, %9 (hasExternalUses)
%11 = add %10, -47:i32 (hasExternalUses)
%12 = block 2
%13:i32 = var
%14 = sub 0:i32, %13
%15 = and %14, 7:i32
%16 = phi %12, %15, 0:i32
%17 = add %11, %16 (hasExternalUses)
%18 = phi %0, %7, %17
%19 = sub %18, %7 (hasExternalUses)
%20 = lshr %19, 8:i32 (hasExternalUses)
%21 = add %20, 1048320:i32
%22 = lshr %21, 16:i32
%23 = and %22, 8:i32 (hasExternalUses)
%24 = shl %20, %23
%25 = add %24, 520192:i32
%26 = lshr %25, 16:i32
%27 = and %26, 4:i32 (hasExternalUses)
%28 = shl %24, %27
%29 = add %7, 16:i32
%30 = ult %17, %29
blockpc %0 0 %30 1:i1
%31:i32 = var
blockpc %0 1 %31 1:i1
%32:i32 = var
blockpc %12 0 %32 1:i1
%33:i32 = var
blockpc %12 1 %33 1:i1
%34:i32 = var
%35:i32 = var
%36:i32 = var
%37:i32 = var
pc %34 1:i1
pc %35 1:i1
pc %36 1:i1
pc %37 1:i1
infer %28


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = phi %1, %5, %6
%8:i32 = var
%9:i32 = var
%10 = add %8, %9 (hasExternalUses)
%11 = add %10, -47:i32 (hasExternalUses)
%12 = block 2
%13:i32 = var
%14 = and %13, 7:i32
%15 = phi %12, %14, 0:i32
%16 = add %11, %15 (hasExternalUses)
%17 = phi %0, %7, %16
%18 = sub %17, %7 (hasExternalUses)
%19 = lshr %18, 8:i32 (hasExternalUses)
%20 = add %19, 1048320:i32
%21 = lshr %20, 16:i32
%22 = and %21, 8:i32 (hasExternalUses)
%23 = shl %19, %22
%24 = add %23, 520192:i32
%25 = lshr %24, 16:i32
%26 = and %25, 4:i32 (hasExternalUses)
%27 = shl %23, %26 (hasExternalUses)
%28 = add %27, 245760:i32
%29 = add %7, 16:i32
%30 = ult %16, %29
blockpc %0 0 %30 1:i1
%31:i32 = var
blockpc %0 1 %31 1:i1
%32:i32 = var
blockpc %12 0 %32 1:i1
%33:i32 = var
blockpc %12 1 %33 1:i1
%34:i32 = var
%35:i32 = var
%36:i32 = var
%37:i32 = var
pc %34 1:i1
pc %35 1:i1
pc %36 1:i1
pc %37 1:i1
infer %28


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = phi %1, %5, %6
%8:i32 = var
%9 = add %8, -47:i32 (hasExternalUses)
%10 = block 2
%11:i32 = var
%12 = phi %10, %11, 0:i32
%13 = add %9, %12 (hasExternalUses)
%14 = phi %0, %7, %13
%15 = sub %14, %7 (hasExternalUses)
%16 = lshr %15, 8:i32 (hasExternalUses)
%17 = add %16, 1048320:i32
%18 = lshr %17, 16:i32
%19 = and %18, 8:i32 (hasExternalUses)
%20 = shl %16, %19
%21 = add %20, 520192:i32
%22 = lshr %21, 16:i32
%23 = and %22, 4:i32 (hasExternalUses)
%24 = shl %20, %23 (hasExternalUses)
%25 = add %24, 245760:i32
%26 = lshr %25, 16:i32
%27 = add %7, 16:i32
%28 = ult %13, %27
blockpc %0 0 %28 1:i1
%29:i32 = var
blockpc %0 1 %29 1:i1
%30:i32 = var
blockpc %10 0 %30 1:i1
%31:i32 = var
blockpc %10 1 %31 1:i1
%32:i32 = var
%33:i32 = var
%34:i32 = var
%35:i32 = var
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
pc %35 1:i1
infer %26


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = phi %1, %5, %6
%8:i32 = var
%9 = block 2
%10:i32 = var
%11 = phi %9, %10, 0:i32
%12 = add %8, %11 (hasExternalUses)
%13 = phi %0, %7, %12
%14 = sub %13, %7 (hasExternalUses)
%15 = lshr %14, 8:i32 (hasExternalUses)
%16 = add %15, 1048320:i32
%17 = lshr %16, 16:i32
%18 = and %17, 8:i32 (hasExternalUses)
%19 = shl %15, %18
%20 = add %19, 520192:i32
%21 = lshr %20, 16:i32
%22 = and %21, 4:i32 (hasExternalUses)
%23 = shl %19, %22 (hasExternalUses)
%24 = add %23, 245760:i32
%25 = lshr %24, 16:i32
%26 = and %25, 2:i32
%27 = add %7, 16:i32
%28 = ult %12, %27
blockpc %0 0 %28 1:i1
%29:i32 = var
blockpc %0 1 %29 1:i1
%30:i32 = var
blockpc %9 0 %30 1:i1
%31:i32 = var
blockpc %9 1 %31 1:i1
%32:i32 = var
%33:i32 = var
%34:i32 = var
%35:i32 = var
pc %32 1:i1
pc %33 1:i1
pc %34 1:i1
pc %35 1:i1
infer %26


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = phi %1, %5, %6
%8:i32 = var
%9 = phi %0, %7, %8
%10 = sub %9, %7 (hasExternalUses)
%11 = lshr %10, 8:i32 (hasExternalUses)
%12 = add %11, 1048320:i32
%13 = lshr %12, 16:i32
%14 = and %13, 8:i32
%15 = shl %11, %14
%16 = add %15, 520192:i32
%17 = lshr %16, 16:i32
%18 = and %17, 4:i32
%19 = or %18, %14
%20 = shl %15, %18 (hasExternalUses)
%21 = add %20, 245760:i32
%22 = lshr %21, 16:i32
%23 = and %22, 2:i32 (hasExternalUses)
%24 = or %19, %23
%25 = add %7, 16:i32
%26 = ult %8, %25
blockpc %0 0 %26 1:i1
%27:i32 = zext %26
%28 = eq %27, 0:i32
blockpc %0 1 %28 1:i1
%29:i32 = var
%30:i32 = var
%31:i32 = var
%32:i32 = var
pc %29 1:i1
pc %30 1:i1
pc %31 1:i1
pc %32 1:i1
infer %24


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = phi %1, %5, %6
%8:i32 = var
%9 = phi %0, %7, %8
%10 = sub %9, %7 (hasExternalUses)
%11 = lshr %10, 8:i32 (hasExternalUses)
%12:i32 = var
%13 = lshr %12, 16:i32
%14 = and %13, 8:i32
%15 = shl %11, %14
%16 = add %15, 520192:i32
%17 = lshr %16, 16:i32
%18 = and %17, 4:i32
%19 = or %18, %14
%20 = shl %15, %18 (hasExternalUses)
%21 = add %20, 245760:i32
%22 = lshr %21, 16:i32
%23 = and %22, 2:i32 (hasExternalUses)
%24 = or %19, %23
%25 = sub 14:i32, %24
%26 = add %7, 16:i32
%27 = ult %8, %26
blockpc %0 0 %27 1:i1
%28:i32 = zext %27
%29 = eq %28, 0:i32
blockpc %0 1 %29 1:i1
%30:i32 = var
%31:i32 = var
%32:i32 = var
%33:i32 = var
pc %30 1:i1
pc %31 1:i1
pc %32 1:i1
pc %33 1:i1
infer %25


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = phi %1, %5, %6
%8:i32 = var
%9:i32 = var
%10 = add %8, %9 (hasExternalUses)
%11 = add %10, -47:i32 (hasExternalUses)
%12 = block 2
%13:i32 = var
%14 = and %13, 7:i32
%15 = phi %12, %14, 0:i32
%16 = add %11, %15 (hasExternalUses)
%17 = phi %0, %7, %16
%18 = sub %17, %7 (hasExternalUses)
%19 = lshr %18, 8:i32 (hasExternalUses)
%20 = add %19, 1048320:i32
%21 = lshr %20, 16:i32
%22 = and %21, 8:i32 (hasExternalUses)
%23 = shl %19, %22
%24 = add %23, 520192:i32
%25 = lshr %24, 16:i32
%26 = and %25, 4:i32 (hasExternalUses)
%27 = shl %23, %26
%28 = add %27, 245760:i32
%29 = lshr %28, 16:i32
%30 = and %29, 2:i32 (hasExternalUses)
%31 = shl %27, %30
%32:i32 = var
blockpc %0 0 %32 1:i1
%33:i32 = var
blockpc %0 1 %33 1:i1
%34:i32 = var
blockpc %12 0 %34 1:i1
%35:i32 = var
blockpc %12 1 %35 1:i1
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
pc %36 1:i1
pc %37 1:i1
pc %38 1:i1
pc %39 1:i1
infer %31


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = phi %1, %5, %6
%8:i32 = var
%9 = add %8, -47:i32 (hasExternalUses)
%10 = block 2
%11:i32 = var
%12 = phi %10, %11, 0:i32
%13 = add %9, %12 (hasExternalUses)
%14 = phi %0, %7, %13
%15 = sub %14, %7 (hasExternalUses)
%16 = lshr %15, 8:i32 (hasExternalUses)
%17 = add %16, 1048320:i32
%18 = lshr %17, 16:i32
%19 = and %18, 8:i32 (hasExternalUses)
%20 = shl %16, %19
%21 = add %20, 520192:i32
%22 = lshr %21, 16:i32
%23 = and %22, 4:i32 (hasExternalUses)
%24 = shl %20, %23
%25 = add %24, 245760:i32
%26 = lshr %25, 16:i32
%27 = and %26, 2:i32 (hasExternalUses)
%28 = shl %24, %27
%29 = lshr %28, 15:i32
%30:i32 = var
blockpc %0 0 %30 1:i1
%31:i32 = var
blockpc %0 1 %31 1:i1
%32:i32 = var
blockpc %10 0 %32 1:i1
%33:i32 = var
blockpc %10 1 %33 1:i1
%34:i32 = var
%35:i32 = var
%36:i32 = var
%37:i32 = var
pc %34 1:i1
pc %35 1:i1
pc %36 1:i1
pc %37 1:i1
infer %29


; start LHS (in $6)
%0:i32 = var
%1 = lshr %0, 8:i32 (hasExternalUses)
%2:i32 = var
%3 = and %2, 8:i32
%4 = shl %1, %3
%5 = add %4, 520192:i32
%6 = lshr %5, 16:i32
%7 = and %6, 4:i32
%8 = or %7, %3
%9 = shl %4, %7
%10 = add %9, 245760:i32
%11 = lshr %10, 16:i32
%12 = and %11, 2:i32
%13 = or %8, %12
%14 = sub 14:i32, %13
%15 = shl %9, %12
%16 = lshr %15, 15:i32
%17 = add %14, %16
%18 = ult 16777215:i32, %0
%19:i32 = zext %18
%20 = eq %19, 0:i32
%21 = ne %1, 0:i32
%22 = block 2
%23:i32 = var
%24:i32 = var
%25 = add %23, %24
%26 = add %25, -47:i32
%27 = block 2
%28:i32 = var
%29 = and %28, 7:i32
%30 = ne %29, 0:i32
blockpc %27 0 %30 1:i1
%31:i32 = var
blockpc %27 1 %31 1:i1
%32:i32 = var
%33 = phi %27, %32, 0:i32
%34 = add %26, %33
%35:i32 = var
%36 = ult %34, %35
blockpc %22 0 %36 1:i1
%37:i32 = var
blockpc %22 1 %37 1:i1
%38 = block 2
%39 = block 2
%40:i32 = var
%41:i32 = var
%42 = phi %39, %40, %41
%43:i32 = var
%44 = phi %38, %42, %43
%45 = phi %22, %44, %34
%46 = ne %45, %44
%47:i32 = var
pc %20 1:i1
pc %21 1:i1
pc %46 1:i1
pc %47 1:i1
infer %17


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = shl %0, %1
%3 = add %2, 520192:i32
%4 = lshr %3, 16:i32
%5 = and %4, 4:i32
%6 = or %5, %1
%7 = shl %2, %5
%8 = add %7, 245760:i32
%9 = lshr %8, 16:i32
%10 = and %9, 2:i32
%11 = or %6, %10
%12 = sub 14:i32, %11
%13 = shl %7, %10
%14 = lshr %13, 15:i32
%15 = add %12, %14 (hasExternalUses)
%16 = add %15, 7:i32
%17 = block 2
%18:i32 = var
%19 = add %18, -47:i32
%20 = block 2
%21:i32 = var
blockpc %20 0 %21 1:i1
%22:i32 = var
blockpc %20 1 %22 1:i1
%23:i32 = var
%24 = phi %20, %23, 0:i32
%25 = add %19, %24
%26 = block 2
%27 = block 2
%28:i32 = var
%29:i32 = var
%30 = phi %27, %28, %29
%31:i32 = var
%32 = phi %26, %30, %31
%33 = add %32, 16:i32
%34 = ult %25, %33
blockpc %17 0 %34 1:i1
%35:i32 = var
blockpc %17 1 %35 1:i1
%36 = phi %17, %32, %25
%37 = sub %36, %32
%38 = ult 16777215:i32, %37
%39:i32 = zext %38
%40 = eq %39, 0:i32
%41:i32 = var
%42:i32 = var
%43:i32 = var
pc %40 1:i1
pc %41 1:i1
pc %42 1:i1
pc %43 1:i1
infer %16


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = phi %1, %5, %6
%8:i32 = var
%9:i32 = var
%10 = add %8, %9 (hasExternalUses)
%11 = add %10, -47:i32
%12 = block 2
%13 = add %11, 8:i32 (hasExternalUses)
%14 = sub 0:i32, %13
%15 = and %14, 7:i32
%16 = phi %12, %15, 0:i32
%17 = add %11, %16 (hasExternalUses)
%18 = phi %0, %7, %17
%19 = sub %18, %7 (hasExternalUses)
%20:i32 = var
%21 = add %20, 520192:i32
%22 = lshr %21, 16:i32
%23 = and %22, 4:i32
%24:i32 = var
%25 = add %24, 1048320:i32
%26 = lshr %25, 16:i32
%27 = and %26, 8:i32 (hasExternalUses)
%28 = or %23, %27
%29 = shl %20, %23 (hasExternalUses)
%30 = add %29, 245760:i32
%31 = lshr %30, 16:i32
%32 = and %31, 2:i32 (hasExternalUses)
%33 = or %28, %32
%34 = sub 14:i32, %33
%35:i32 = var
%36 = add %34, %35 (hasExternalUses)
%37 = add %36, 7:i32
%38 = lshr %19, %37
%39:i32 = var
blockpc %0 0 %39 1:i1
%40:i32 = var
blockpc %0 1 %40 1:i1
%41:i32 = var
blockpc %12 0 %41 1:i1
%42:i32 = var
blockpc %12 1 %42 1:i1
%43:i32 = var
%44:i32 = var
%45:i32 = var
%46:i32 = var
pc %43 1:i1
pc %44 1:i1
pc %45 1:i1
pc %46 1:i1
infer %38


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = phi %1, %5, %6
%8:i32 = var
%9:i32 = var
%10 = add %8, %9 (hasExternalUses)
%11 = add %10, -47:i32
%12 = block 2
%13 = add %11, 8:i32 (hasExternalUses)
%14 = sub 0:i32, %13
%15 = and %14, 7:i32
%16 = phi %12, %15, 0:i32
%17 = add %11, %16 (hasExternalUses)
%18 = phi %0, %7, %17
%19 = sub %18, %7 (hasExternalUses)
%20:i32 = var
%21 = lshr %20, 16:i32
%22 = and %21, 4:i32 (hasExternalUses)
%23:i32 = var
%24 = lshr %23, 16:i32
%25 = and %24, 8:i32 (hasExternalUses)
%26 = or %22, %25
%27:i32 = var
%28 = add %27, 245760:i32
%29 = lshr %28, 16:i32
%30 = and %29, 2:i32 (hasExternalUses)
%31 = or %26, %30
%32 = sub 14:i32, %31
%33:i32 = var
%34 = add %32, %33 (hasExternalUses)
%35 = add %34, 7:i32
%36 = lshr %19, %35
%37 = and %36, 1:i32
%38:i32 = var
blockpc %0 0 %38 1:i1
%39:i32 = var
blockpc %0 1 %39 1:i1
%40:i32 = var
blockpc %12 0 %40 1:i1
%41:i32 = var
blockpc %12 1 %41 1:i1
%42:i32 = var
%43:i32 = var
%44:i32 = var
%45:i32 = var
pc %42 1:i1
pc %43 1:i1
pc %44 1:i1
pc %45 1:i1
infer %37


; start LHS (in $6)
%0:i32 = var
%1:i32 = var
%2 = shl %0, %1
%3 = add %2, 520192:i32
%4 = lshr %3, 16:i32
%5 = and %4, 4:i32
%6 = or %5, %1
%7 = shl %2, %5
%8 = add %7, 245760:i32
%9 = lshr %8, 16:i32
%10 = and %9, 2:i32
%11 = or %6, %10
%12 = sub 14:i32, %11
%13 = shl %7, %10
%14 = lshr %13, 15:i32
%15 = add %12, %14 (hasExternalUses)
%16 = shl %15, 1:i32
%17 = block 2
%18:i32 = var
%19 = add %18, -47:i32
%20 = block 2
%21:i32 = var
blockpc %20 0 %21 1:i1
%22:i32 = var
blockpc %20 1 %22 1:i1
%23:i32 = var
%24 = phi %20, %23, 0:i32
%25 = add %19, %24
%26 = block 2
%27 = block 2
%28:i32 = var
%29:i32 = var
%30 = phi %27, %28, %29
%31:i32 = var
%32 = phi %26, %30, %31
%33 = add %32, 16:i32
%34 = ult %25, %33
blockpc %17 0 %34 1:i1
%35:i32 = var
blockpc %17 1 %35 1:i1
%36 = phi %17, %32, %25
%37 = sub %36, %32
%38 = ult 16777215:i32, %37
%39:i32 = zext %38
%40 = eq %39, 0:i32
%41:i32 = var
%42:i32 = var
%43:i32 = var
pc %40 1:i1
pc %41 1:i1
pc %42 1:i1
pc %43 1:i1
infer %16


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = phi %1, %5, %6
%8:i32 = var
%9:i32 = var
%10 = add %8, %9 (hasExternalUses)
%11 = add %10, -47:i32 (hasExternalUses)
%12 = block 2
%13:i32 = var
%14 = sub 0:i32, %13
%15 = and %14, 7:i32
%16 = phi %12, %15, 0:i32
%17 = add %11, %16 (hasExternalUses)
%18 = phi %0, %7, %17
%19 = sub %18, %7 (hasExternalUses)
%20:i32 = var
%21 = and %20, 4:i32 (hasExternalUses)
%22:i32 = var
%23 = and %22, 8:i32 (hasExternalUses)
%24 = or %21, %23
%25:i32 = var
%26 = lshr %25, 16:i32
%27 = and %26, 2:i32 (hasExternalUses)
%28 = or %24, %27
%29 = sub 14:i32, %28
%30:i32 = var
%31 = add %29, %30 (hasExternalUses)
%32 = add %31, 7:i32
%33 = lshr %19, %32
%34 = and %33, 1:i32
%35:i32 = var
%36 = or %34, %35
%37:i32 = var
blockpc %0 0 %37 1:i1
%38:i32 = var
blockpc %0 1 %38 1:i1
%39:i32 = var
blockpc %12 0 %39 1:i1
%40:i32 = var
blockpc %12 1 %40 1:i1
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = var
pc %41 1:i1
pc %42 1:i1
pc %43 1:i1
pc %44 1:i1
infer %36


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4 = block 2
%5:i32 = var
%6:i32 = var
%7 = phi %4, %5, %6
%8:i32 = var
%9 = phi %3, %7, %8
%10:i32 = var
%11 = block 2
%12:i32 = var
%13 = phi %11, %12, 0:i32
%14 = add %10, %13 (hasExternalUses)
%15 = phi %2, %9, %14
%16 = sub %15, %9 (hasExternalUses)
%17:i32 = var
%18 = sub 14:i32, %17
%19:i32 = var
%20 = lshr %19, 15:i32
%21 = add %18, %20
%22 = add %21, 7:i32
%23 = lshr %16, %22
%24 = and %23, 1:i32
%25 = shl %21, 1:i32
%26 = or %24, %25 (hasExternalUses)
%27 = phi %1, 31:i32, %26
%28 = phi %0, %27, 0:i32
%29 = shl %28, 2:i32
%30:i32 = var
blockpc %0 0 %30 1:i1
%31:i32 = var
blockpc %0 1 %31 1:i1
%32:i32 = var
blockpc %1 0 %32 1:i1
%33:i32 = var
blockpc %1 1 %33 1:i1
%34:i32 = var
blockpc %2 0 %34 1:i1
%35:i32 = var
blockpc %2 1 %35 1:i1
%36:i32 = var
blockpc %11 0 %36 1:i1
%37:i32 = var
blockpc %11 1 %37 1:i1
%38:i32 = var
%39:i32 = var
pc %38 1:i1
pc %39 1:i1
infer %29


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4 = block 2
%5:i32 = var
%6:i32 = var
%7 = phi %4, %5, %6
%8:i32 = var
%9 = phi %3, %7, %8
%10:i32 = var
%11 = phi %2, %9, %10
%12 = sub %11, %9 (hasExternalUses)
%13:i32 = var
%14:i32 = var
%15 = add %13, %14
%16 = add %15, 7:i32
%17 = lshr %12, %16
%18 = and %17, 1:i32
%19 = shl %15, 1:i32
%20 = or %18, %19 (hasExternalUses)
%21 = phi %1, 31:i32, %20
%22 = phi %0, %21, 0:i32
%23 = shl %22, 2:i32
%24 = add %23, 4260:i32
%25 = lshr %12, 8:i32
%26 = ne %25, 0:i32
blockpc %0 0 %26 1:i1
%27 = eq %25, 0:i32
blockpc %0 1 %27 1:i1
%28:i32 = var
blockpc %1 0 %28 1:i1
%29:i32 = var
blockpc %1 1 %29 1:i1
%30:i32 = var
blockpc %2 0 %30 1:i1
%31:i32 = var
blockpc %2 1 %31 1:i1
%32:i32 = var
%33:i32 = var
pc %32 1:i1
pc %33 1:i1
infer %24


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4 = block 2
%5:i32 = var
%6:i32 = var
%7 = phi %4, %5, %6
%8:i32 = var
%9 = phi %3, %7, %8
%10:i32 = var
%11 = block 2
%12:i32 = var
%13 = phi %11, %12, 0:i32
%14 = add %10, %13 (hasExternalUses)
%15 = phi %2, %9, %14
%16 = sub %15, %9 (hasExternalUses)
%17:i32 = var
%18 = sub 14:i32, %17
%19:i32 = var
%20 = lshr %19, 15:i32
%21 = add %18, %20
%22 = add %21, 7:i32
%23 = lshr %16, %22
%24 = and %23, 1:i32
%25 = shl %21, 1:i32
%26 = or %24, %25 (hasExternalUses)
%27 = phi %1, 31:i32, %26
%28 = phi %0, %27, 0:i32
%29 = shl 1:i32, %28
%30:i32 = var
blockpc %0 0 %30 1:i1
%31:i32 = var
blockpc %0 1 %31 1:i1
%32:i32 = var
blockpc %1 0 %32 1:i1
%33:i32 = var
blockpc %1 1 %33 1:i1
%34:i32 = var
blockpc %2 0 %34 1:i1
%35:i32 = var
blockpc %2 1 %35 1:i1
%36:i32 = var
blockpc %11 0 %36 1:i1
%37:i32 = var
blockpc %11 1 %37 1:i1
%38:i32 = var
%39:i32 = var
pc %38 1:i1
pc %39 1:i1
infer %29


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2 = block 2
%3 = block 2
%4 = block 2
%5 = block 2
%6:i32 = var
%7:i32 = var
%8 = phi %5, %6, %7
%9:i32 = var
%10 = phi %4, %8, %9
%11:i32 = var
%12 = phi %3, %10, %11
%13 = sub %12, %10 (hasExternalUses)
%14:i32 = var
%15:i32 = var
%16 = add %14, %15
%17 = add %16, 7:i32
%18 = lshr %13, %17
%19 = and %18, 1:i32
%20 = shl %16, 1:i32
%21 = or %19, %20 (hasExternalUses)
%22 = phi %2, 31:i32, %21
%23 = phi %1, %22, 0:i32
%24 = shl 1:i32, %23 (hasExternalUses)
%25 = and %0, %24
%26 = lshr %13, 8:i32
%27 = ne %26, 0:i32
blockpc %1 0 %27 1:i1
%28 = eq %26, 0:i32
blockpc %1 1 %28 1:i1
%29:i32 = var
blockpc %2 0 %29 1:i1
%30:i32 = var
blockpc %2 1 %30 1:i1
%31:i32 = var
blockpc %3 0 %31 1:i1
%32:i32 = var
blockpc %3 1 %32 1:i1
%33:i32 = var
%34:i32 = var
pc %33 1:i1
pc %34 1:i1
infer %25


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2 = block 2
%3 = block 2
%4 = block 2
%5 = block 2
%6:i32 = var
%7:i32 = var
%8 = phi %5, %6, %7
%9:i32 = var
%10 = phi %4, %8, %9
%11:i32 = var
%12 = phi %3, %10, %11
%13 = sub %12, %10 (hasExternalUses)
%14:i32 = var
%15 = add %14, 7:i32
%16 = lshr %13, %15
%17 = and %16, 1:i32
%18 = shl %14, 1:i32
%19 = or %17, %18 (hasExternalUses)
%20 = phi %2, 31:i32, %19
%21 = phi %1, %20, 0:i32
%22 = shl 1:i32, %21 (hasExternalUses)
%23 = and %0, %22
%24 = eq %23, 0:i32
%25 = lshr %13, 8:i32
%26 = ne %25, 0:i32
blockpc %1 0 %26 1:i1
%27 = eq %25, 0:i32
blockpc %1 1 %27 1:i1
%28:i32 = var
blockpc %2 0 %28 1:i1
%29:i32 = var
blockpc %2 1 %29 1:i1
%30:i32 = var
blockpc %3 0 %30 1:i1
%31:i32 = var
blockpc %3 1 %31 1:i1
%32:i32 = var
%33:i32 = var
pc %32 1:i1
pc %33 1:i1
infer %24


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2 = block 2
%3 = block 2
%4 = block 2
%5 = block 2
%6:i32 = var
%7:i32 = var
%8 = phi %5, %6, %7
%9:i32 = var
%10 = phi %4, %8, %9
%11:i32 = var
%12 = phi %3, %10, %11
%13 = sub %12, %10 (hasExternalUses)
%14:i32 = var
%15:i32 = var
%16 = add %14, %15
%17 = add %16, 7:i32
%18 = lshr %13, %17
%19 = and %18, 1:i32
%20 = shl %16, 1:i32
%21 = or %19, %20 (hasExternalUses)
%22 = phi %2, 31:i32, %21
%23 = phi %1, %22, 0:i32
%24 = shl 1:i32, %23 (hasExternalUses)
%25 = or %0, %24
%26 = lshr %13, 8:i32
%27 = ne %26, 0:i32
blockpc %1 0 %27 1:i1
%28 = eq %26, 0:i32
blockpc %1 1 %28 1:i1
%29:i32 = var
blockpc %2 0 %29 1:i1
%30:i32 = var
blockpc %2 1 %30 1:i1
%31:i32 = var
blockpc %3 0 %31 1:i1
%32:i32 = var
blockpc %3 1 %32 1:i1
%33:i32 = var
%34:i32 = var
%35:i32 = var
pc %33 1:i1
pc %34 1:i1
pc %35 1:i1
infer %25


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4 = block 2
%5:i32 = var
%6:i32 = var
%7 = phi %4, %5, %6
%8:i32 = var
%9 = phi %3, %7, %8
%10:i32 = var
%11 = block 2
%12:i32 = var
%13 = phi %11, %12, 0:i32
%14 = add %10, %13 (hasExternalUses)
%15 = phi %2, %9, %14
%16 = sub %15, %9 (hasExternalUses)
%17:i32 = var
%18 = sub 14:i32, %17
%19:i32 = var
%20 = lshr %19, 15:i32
%21 = add %18, %20
%22 = add %21, 7:i32
%23 = lshr %16, %22
%24 = and %23, 1:i32
%25 = shl %21, 1:i32
%26 = or %24, %25 (hasExternalUses)
%27 = phi %1, 31:i32, %26
%28 = phi %0, %27, 0:i32
%29 = lshr %28, 1:i32
%30:i32 = var
blockpc %0 0 %30 1:i1
%31:i32 = var
blockpc %0 1 %31 1:i1
%32:i32 = var
blockpc %1 0 %32 1:i1
%33:i32 = var
blockpc %1 1 %33 1:i1
%34:i32 = var
blockpc %2 0 %34 1:i1
%35:i32 = var
blockpc %2 1 %35 1:i1
%36:i32 = var
blockpc %11 0 %36 1:i1
%37:i32 = var
blockpc %11 1 %37 1:i1
%38:i32 = var
%39:i32 = var
pc %38 1:i1
pc %39 1:i1
infer %29


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4 = block 2
%5:i32 = var
%6:i32 = var
%7 = phi %4, %5, %6
%8:i32 = var
%9 = phi %3, %7, %8
%10:i32 = var
%11 = phi %2, %9, %10
%12 = sub %11, %9 (hasExternalUses)
%13:i32 = var
%14:i32 = var
%15 = add %13, %14
%16 = add %15, 7:i32
%17 = lshr %12, %16
%18 = and %17, 1:i32
%19 = shl %15, 1:i32
%20 = or %18, %19 (hasExternalUses)
%21 = phi %1, 31:i32, %20
%22 = phi %0, %21, 0:i32
%23 = lshr %22, 1:i32
%24 = sub 25:i32, %23
%25 = lshr %12, 8:i32
%26 = ne %25, 0:i32
blockpc %0 0 %26 1:i1
%27 = eq %25, 0:i32
blockpc %0 1 %27 1:i1
%28:i32 = var
blockpc %1 0 %28 1:i1
%29:i32 = var
blockpc %1 1 %29 1:i1
%30:i32 = var
blockpc %2 0 %30 1:i1
%31:i32 = var
blockpc %2 1 %31 1:i1
%32:i32 = var
%33:i32 = var
pc %32 1:i1
pc %33 1:i1
infer %24


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4 = block 2
%5:i32 = var
%6:i32 = var
%7 = phi %4, %5, %6
%8:i32 = var
%9 = phi %3, %7, %8
%10:i32 = var
%11 = block 2
%12:i32 = var
%13 = phi %11, %12, 0:i32
%14 = add %10, %13 (hasExternalUses)
%15 = phi %2, %9, %14
%16 = sub %15, %9 (hasExternalUses)
%17:i32 = var
%18 = sub 14:i32, %17
%19:i32 = var
%20 = lshr %19, 15:i32
%21 = add %18, %20
%22 = add %21, 7:i32
%23 = lshr %16, %22
%24 = and %23, 1:i32
%25 = shl %21, 1:i32
%26 = or %24, %25 (hasExternalUses)
%27 = phi %1, 31:i32, %26
%28 = phi %0, %27, 0:i32
%29 = eq %28, 31:i32
%30:i32 = var
blockpc %0 0 %30 1:i1
%31:i32 = var
blockpc %0 1 %31 1:i1
%32:i32 = var
blockpc %1 0 %32 1:i1
%33:i32 = var
blockpc %1 1 %33 1:i1
%34:i32 = var
blockpc %2 0 %34 1:i1
%35:i32 = var
blockpc %2 1 %35 1:i1
%36:i32 = var
blockpc %11 0 %36 1:i1
%37:i32 = var
blockpc %11 1 %37 1:i1
%38:i32 = var
%39:i32 = var
pc %38 1:i1
pc %39 1:i1
infer %29


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = phi %1, %5, %6
%8:i32 = var
%9:i32 = var
%10 = add %8, %9 (hasExternalUses)
%11 = add %10, -47:i32
%12 = block 2
%13 = add %11, 8:i32 (hasExternalUses)
%14 = sub 0:i32, %13
%15 = and %14, 7:i32
%16 = phi %12, %15, 0:i32
%17 = add %11, %16 (hasExternalUses)
%18 = phi %0, %7, %17
%19 = sub %18, %7 (hasExternalUses)
%20 = block 2
%21 = block 2
%22 = block 2
%23:i32 = var
%24 = lshr %19, %23
%25 = and %24, 1:i32
%26:i32 = var
%27:i32 = var
%28 = add %26, %27 (hasExternalUses)
%29 = shl %28, 1:i32
%30 = or %25, %29 (hasExternalUses)
%31 = phi %22, 31:i32, %30
%32 = phi %21, %31, 0:i32
%33 = lshr %32, 1:i32
%34 = sub 25:i32, %33
%35 = phi %20, 0:i32, %34
%36 = shl %19, %35
%37:i32 = var
blockpc %0 0 %37 1:i1
%38:i32 = var
blockpc %0 1 %38 1:i1
%39:i32 = var
blockpc %12 0 %39 1:i1
%40:i32 = var
blockpc %12 1 %40 1:i1
%41:i32 = var
blockpc %20 0 %41 1:i1
%42:i32 = var
blockpc %20 1 %42 1:i1
%43:i32 = var
blockpc %21 0 %43 1:i1
%44:i32 = var
blockpc %21 1 %44 1:i1
%45:i32 = var
blockpc %22 0 %45 1:i1
%46:i32 = var
blockpc %22 1 %46 1:i1
%47:i32 = var
%48:i32 = var
pc %47 1:i1
pc %48 1:i1
infer %36


; start LHS (in $6)
%0:i32 = var
%1 = and %0, -8:i32
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = add %3, %4
%6 = add %5, -47:i32
%7 = block 2
%8:i32 = var
%9 = and %8, 7:i32
%10 = ne %9, 0:i32
blockpc %7 0 %10 1:i1
%11 = eq %9, 0:i32
blockpc %7 1 %11 1:i1
%12 = sub 0:i32, %8
%13 = and %12, 7:i32
%14 = phi %7, %13, 0:i32
%15 = add %6, %14
%16 = block 2
%17 = block 2
%18:i32 = var
%19:i32 = var
%20 = phi %17, %18, %19
%21:i32 = var
%22 = phi %16, %20, %21
%23 = add %22, 16:i32
%24 = ult %15, %23
blockpc %2 0 %24 1:i1
%25:i32 = zext %24
%26 = eq %25, 0:i32
blockpc %2 1 %26 1:i1
%27 = phi %2, %22, %15
%28 = ne %27, %22
%29:i32 = var
pc %28 1:i1
pc %29 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = and %0, -8:i32
%2 = block 2
%3 = block 2
%4 = block 2
%5:i32 = var
%6:i32 = var
%7 = phi %4, %5, %6
%8:i32 = var
%9 = phi %3, %7, %8
%10:i32 = var
%11:i32 = var
%12 = add %10, %11 (hasExternalUses)
%13 = add %12, -47:i32
%14 = block 2
%15 = add %13, 8:i32 (hasExternalUses)
%16 = sub 0:i32, %15
%17 = and %16, 7:i32
%18 = phi %14, %17, 0:i32
%19 = add %13, %18 (hasExternalUses)
%20 = phi %2, %9, %19
%21 = sub %20, %9 (hasExternalUses)
%22 = eq %1, %21
%23 = add %9, 16:i32
%24 = ult %19, %23
blockpc %2 0 %24 1:i1
%25:i32 = zext %24
%26 = eq %25, 0:i32
blockpc %2 1 %26 1:i1
%27 = and %15, 7:i32
%28 = ne %27, 0:i32
blockpc %14 0 %28 1:i1
%29:i32 = var
blockpc %14 1 %29 1:i1
%30:i32 = var
%31:i32 = var
pc %30 1:i1
pc %31 1:i1
infer %22


; start LHS (in $6)
%0:i32 = var
%1 = shl %0, 1:i32
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = add %3, %4
%6 = add %5, -47:i32
%7 = block 2
%8:i32 = var
%9 = and %8, 7:i32
%10 = ne %9, 0:i32
blockpc %7 0 %10 1:i1
%11 = eq %9, 0:i32
blockpc %7 1 %11 1:i1
%12 = sub 0:i32, %8
%13 = and %12, 7:i32
%14 = phi %7, %13, 0:i32
%15 = add %6, %14
%16 = block 2
%17 = block 2
%18:i32 = var
%19:i32 = var
%20 = phi %17, %18, %19
%21:i32 = var
%22 = phi %16, %20, %21
%23 = add %22, 16:i32
%24 = ult %15, %23
blockpc %2 0 %24 1:i1
%25:i32 = zext %24
%26 = eq %25, 0:i32
blockpc %2 1 %26 1:i1
%27 = phi %2, %22, %15
%28 = ne %27, %22
%29:i32 = var
pc %28 1:i1
pc %29 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 16:i32
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = add %3, %4
%6 = add %5, -47:i32
%7 = block 2
%8:i32 = var
%9 = and %8, 7:i32
%10 = ne %9, 0:i32
blockpc %7 0 %10 1:i1
%11 = eq %9, 0:i32
blockpc %7 1 %11 1:i1
%12 = sub 0:i32, %8
%13 = and %12, 7:i32
%14 = phi %7, %13, 0:i32
%15 = add %6, %14
%16 = block 2
%17 = block 2
%18:i32 = var
%19:i32 = var
%20 = phi %17, %18, %19
%21:i32 = var
%22 = phi %16, %20, %21
%23 = add %22, 16:i32
%24 = ult %15, %23
blockpc %2 0 %24 1:i1
%25:i32 = zext %24
%26 = eq %25, 0:i32
blockpc %2 1 %26 1:i1
%27 = phi %2, %22, %15
%28 = ne %27, %22
%29:i32 = var
pc %28 1:i1
pc %29 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = lshr %0, 31:i32
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = add %3, %4
%6 = add %5, -47:i32
%7 = block 2
%8:i32 = var
%9 = and %8, 7:i32
%10 = ne %9, 0:i32
blockpc %7 0 %10 1:i1
%11 = eq %9, 0:i32
blockpc %7 1 %11 1:i1
%12 = sub 0:i32, %8
%13 = and %12, 7:i32
%14 = phi %7, %13, 0:i32
%15 = add %6, %14
%16 = block 2
%17 = block 2
%18:i32 = var
%19:i32 = var
%20 = phi %17, %18, %19
%21:i32 = var
%22 = phi %16, %20, %21
%23 = add %22, 16:i32
%24 = ult %15, %23
blockpc %2 0 %24 1:i1
%25:i32 = zext %24
%26 = eq %25, 0:i32
blockpc %2 1 %26 1:i1
%27 = phi %2, %22, %15
%28 = ne %27, %22
%29:i32 = var
pc %28 1:i1
pc %29 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = lshr %0, 31:i32
%2 = shl %1, 2:i32
%3 = block 2
%4:i32 = var
%5:i32 = var
%6 = add %4, %5
%7 = add %6, -47:i32
%8 = block 2
%9:i32 = var
%10 = and %9, 7:i32
%11 = ne %10, 0:i32
blockpc %8 0 %11 1:i1
%12 = eq %10, 0:i32
blockpc %8 1 %12 1:i1
%13 = sub 0:i32, %9
%14 = and %13, 7:i32
%15 = phi %8, %14, 0:i32
%16 = add %7, %15
%17 = block 2
%18 = block 2
%19:i32 = var
%20:i32 = var
%21 = phi %18, %19, %20
%22:i32 = var
%23 = phi %17, %21, %22
%24 = add %23, 16:i32
%25 = ult %16, %24
blockpc %3 0 %25 1:i1
%26:i32 = zext %25
%27 = eq %26, 0:i32
blockpc %3 1 %27 1:i1
%28 = phi %3, %23, %16
%29 = ne %28, %23
%30:i32 = var
pc %29 1:i1
pc %30 1:i1
infer %2


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 16:i32
%2:i32 = var
%3 = lshr %2, 31:i32
%4 = shl %3, 2:i32
%5 = add %1, %4
%6 = block 2
%7:i32 = var
%8:i32 = var
%9 = add %7, %8
%10 = add %9, -47:i32
%11 = block 2
%12:i32 = var
%13 = and %12, 7:i32
%14 = ne %13, 0:i32
blockpc %11 0 %14 1:i1
%15 = eq %13, 0:i32
blockpc %11 1 %15 1:i1
%16 = sub 0:i32, %12
%17 = and %16, 7:i32
%18 = phi %11, %17, 0:i32
%19 = add %10, %18
%20 = block 2
%21 = block 2
%22:i32 = var
%23:i32 = var
%24 = phi %21, %22, %23
%25:i32 = var
%26 = phi %20, %24, %25
%27 = add %26, 16:i32
%28 = ult %19, %27
blockpc %6 0 %28 1:i1
%29:i32 = var
blockpc %6 1 %29 1:i1
%30 = phi %6, %26, %19
%31 = ne %30, %26
%32:i32 = var
pc %31 1:i1
pc %32 1:i1
infer %5


; start LHS (in $6)
%0:i32 = var
%1 = add %0, 8:i32
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = add %3, %4
%6 = add %5, -47:i32
%7 = block 2
%8:i32 = var
%9 = and %8, 7:i32
%10 = ne %9, 0:i32
blockpc %7 0 %10 1:i1
%11 = eq %9, 0:i32
blockpc %7 1 %11 1:i1
%12 = sub 0:i32, %8
%13 = and %12, 7:i32
%14 = phi %7, %13, 0:i32
%15 = add %6, %14
%16 = block 2
%17 = block 2
%18:i32 = var
%19:i32 = var
%20 = phi %17, %18, %19
%21:i32 = var
%22 = phi %16, %20, %21
%23 = add %22, 16:i32
%24 = ult %15, %23
blockpc %2 0 %24 1:i1
%25:i32 = zext %24
%26 = eq %25, 0:i32
blockpc %2 1 %26 1:i1
%27 = phi %2, %22, %15
%28 = ne %27, %22
%29:i32 = var
pc %28 1:i1
pc %29 1:i1
infer %1


; start LHS (in $6)
%0:i32 = var
%1 = eq %0, 0:i32
%2:i32 = var
%3 = eq %2, 0:i32
pc %3 1:i1
infer %1


; start LHS (in $6)
%0 = block 6
%1:i32 = var
%2:i32 = var
%3 = block 2
%4:i32 = var
%5 = phi %3, %1, %4
%6:i32 = var
%7 = phi %0, %1, %2, %5, %5, %5, %6
%8:i32 = var
%9 = ult %7, %8
%10:i32 = var
%11 = eq %10, 0:i32
pc %11 1:i1
infer %9


; start LHS (in $6)
%0:i32 = var
%1 = eq %0, 0:i32
%2:i32 = zext %1
%3 = block 6
%4:i32 = var
%5:i32 = var
%6 = block 2
%7:i32 = var
%8 = phi %6, %4, %7
%9:i32 = var
%10 = phi %3, %4, %5, %8, %8, %8, %9
%11 = ult %10, %0
%12:i32 = zext %11
%13 = or %2, %12
%14:i32 = var
%15 = eq %14, 0:i32
pc %15 1:i1
infer %13


; start LHS (in $6)
%0 = block 6
%1 = block 2
%2:i32 = var
%3 = phi %1, %2, 4096:i32
%4 = block 2
%5:i32 = var
%6 = add %5, 11:i32 (hasExternalUses)
%7 = and %6, -8:i32 (hasExternalUses)
%8 = block 2
%9 = block 2
%10:i32 = var
%11 = phi %9, 16:i32, %10
%12 = block 2
%13 = block 2
%14 = block 2
%15 = block 2
%16:i32 = var
%17 = phi %15, %16, %7
%18 = phi %14, %7, %17
%19 = phi %13, %18, %7
%20 = phi %12, -1:i32, %19
%21 = phi %8, %11, %20
%22 = phi %4, %7, %21
%23 = add %22, 47:i32 (hasExternalUses)
%24 = add %3, %23 (hasExternalUses)
%25:i32 = var
%26 = sub %24, %25
%27 = sub 0:i32, %3 (hasExternalUses)
%28 = and %26, %27 (hasExternalUses)
%29 = block 2
%30:i32 = var
%31 = phi %29, %30, 0:i32
%32 = block 2
%33:i32 = var
%34:i32 = var
%35 = phi %32, %33, %34
%36 = add %31, %35 (hasExternalUses)
%37 = block 2
%38 = phi %37, %28, %36
%39:i32 = var
%40 = block 2
%41 = block 2
%42 = block 5
%43 = block 2
%44 = phi %43, %28, 0:i32
%45 = phi %42, %44, 0:i32, 0:i32, 0:i32, 0:i32
%46 = phi %41, 0:i32, %45
%47:i32 = var
%48 = phi %40, %46, %47
%49 = phi %0, %28, %36, %38, %38, %39, %48
%50 = add %49, -40:i32
%51:i32 = var
blockpc %1 0 %51 1:i1
%52:i32 = var
blockpc %1 1 %52 1:i1
%53:i32 = var
blockpc %8 0 %53 1:i1
%54:i32 = var
blockpc %8 1 %54 1:i1
%55:i32 = var
blockpc %9 0 %55 1:i1
%56:i32 = var
blockpc %9 1 %56 1:i1
%57:i32 = var
blockpc %12 0 %57 1:i1
%58:i32 = var
blockpc %12 1 %58 1:i1
%59:i32 = var
blockpc %13 0 %59 1:i1
%60:i32 = var
blockpc %13 1 %60 1:i1
%61:i32 = var
blockpc %29 0 %61 1:i1
%62:i32 = var
blockpc %29 1 %62 1:i1
%63:i32 = var
blockpc %40 0 %63 1:i1
%64:i32 = var
blockpc %40 1 %64 1:i1
%65:i32 = var
blockpc %41 0 %65 1:i1
%66:i32 = var
blockpc %41 1 %66 1:i1
%67:i32 = var
blockpc %43 0 %67 1:i1
%68:i32 = var
blockpc %43 1 %68 1:i1
%69:i32 = var
pc %69 1:i1
infer %50


; start LHS (in $6)
%0 = block 6
%1:i32 = var
%2:i32 = var
%3 = block 2
%4:i32 = var
%5 = phi %3, %1, %4
%6:i32 = var
%7 = phi %0, %1, %2, %5, %5, %5, %6
%8 = add %7, 8:i32
%9:i32 = var
%10 = eq %9, 0:i32
pc %10 1:i1
infer %8


; start LHS (in $6)
%0 = block 6
%1:i32 = var
%2:i32 = var
%3 = block 2
%4:i32 = var
%5 = phi %3, %1, %4
%6:i32 = var
%7 = phi %0, %1, %2, %5, %5, %5, %6
%8 = add %7, 8:i32 (hasExternalUses)
%9 = sub 0:i32, %8
%10:i32 = var
%11 = eq %10, 0:i32
pc %11 1:i1
infer %9


; start LHS (in $6)
%0 = block 6
%1:i32 = var
%2:i32 = var
%3 = block 2
%4:i32 = var
%5 = phi %3, %1, %4
%6:i32 = var
%7 = phi %0, %1, %2, %5, %5, %5, %6
%8 = add %7, 8:i32 (hasExternalUses)
%9 = sub 0:i32, %8
%10 = and %9, 7:i32
%11:i32 = var
%12 = eq %11, 0:i32
pc %12 1:i1
infer %10


; start LHS (in $6)
%0 = block 6
%1:i32 = var
%2:i32 = var
%3 = block 2
%4:i32 = var
%5 = phi %3, %1, %4
%6:i32 = var
%7 = phi %0, %1, %2, %5, %5, %5, %6
%8 = add %7, 8:i32 (hasExternalUses)
%9 = and %8, 7:i32
%10:i32 = var
%11 = eq %10, 0:i32
pc %11 1:i1
infer %9


; start LHS (in $6)
%0 = block 6
%1:i32 = var
%2:i32 = var
%3 = block 2
%4:i32 = var
%5 = phi %3, %1, %4
%6:i32 = var
%7 = phi %0, %1, %2, %5, %5, %5, %6
%8 = block 2
%9 = add %7, 8:i32 (hasExternalUses)
%10 = sub 0:i32, %9
%11 = and %10, 7:i32 (hasExternalUses)
%12 = phi %8, %11, 0:i32
%13 = add %7, %12
%14 = and %9, 7:i32
%15 = ne %14, 0:i32
blockpc %8 0 %15 1:i1
%16 = eq %14, 0:i32
blockpc %8 1 %16 1:i1
%17:i32 = var
%18 = eq %17, 0:i32
pc %18 1:i1
infer %13


; start LHS (in $6)
%0 = block 6
%1 = block 2
%2:i32 = var
%3 = phi %1, %2, 4096:i32
%4 = block 2
%5:i32 = var
%6 = and %5, -8:i32 (hasExternalUses)
%7 = block 2
%8 = block 2
%9:i32 = var
%10 = phi %8, 16:i32, %9
%11 = block 2
%12 = block 2
%13 = block 2
%14 = block 2
%15:i32 = var
%16 = phi %14, %15, %6
%17 = phi %13, %6, %16
%18 = phi %12, %17, %6
%19 = phi %11, -1:i32, %18
%20 = phi %7, %10, %19
%21 = phi %4, %6, %20
%22 = add %21, 47:i32 (hasExternalUses)
%23 = add %3, %22 (hasExternalUses)
%24:i32 = var
%25 = sub %23, %24
%26 = sub 0:i32, %3 (hasExternalUses)
%27 = and %25, %26 (hasExternalUses)
%28 = block 2
%29:i32 = var
%30 = add %29, -1:i32 (hasExternalUses)
%31:i32 = var
%32 = add %30, %31
%33:i32 = var
%34 = and %32, %33
%35 = sub %34, %31
%36 = phi %28, %35, 0:i32
%37 = block 2
%38:i32 = var
%39:i32 = var
%40 = phi %37, %38, %39
%41 = add %36, %40 (hasExternalUses)
%42 = block 2
%43 = phi %42, %27, %41
%44:i32 = var
%45 = block 2
%46 = block 2
%47 = block 5
%48 = block 2
%49 = phi %48, %27, 0:i32
%50 = phi %47, %49, 0:i32, 0:i32, 0:i32, 0:i32
%51 = phi %46, 0:i32, %50
%52:i32 = var
%53 = phi %45, %51, %52
%54 = phi %0, %27, %41, %43, %43, %44, %53
%55 = add %54, -40:i32 (hasExternalUses)
%56 = block 2
%57:i32 = var
%58 = phi %56, %57, 0:i32
%59 = sub %55, %58
%60:i32 = var
blockpc %1 0 %60 1:i1
%61:i32 = var
blockpc %1 1 %61 1:i1
%62:i32 = var
blockpc %7 0 %62 1:i1
%63:i32 = var
blockpc %7 1 %63 1:i1
%64:i32 = var
blockpc %8 0 %64 1:i1
%65:i32 = var
blockpc %8 1 %65 1:i1
%66:i32 = var
blockpc %11 0 %66 1:i1
%67:i32 = var
blockpc %11 1 %67 1:i1
%68:i32 = var
blockpc %12 0 %68 1:i1
%69:i32 = var
blockpc %12 1 %69 1:i1
%70:i32 = var
blockpc %28 0 %70 1:i1
%71:i32 = var
blockpc %28 1 %71 1:i1
%72:i32 = var
blockpc %45 0 %72 1:i1
%73:i32 = var
blockpc %45 1 %73 1:i1
%74:i32 = var
blockpc %46 0 %74 1:i1
%75:i32 = var
blockpc %46 1 %75 1:i1
%76:i32 = var
blockpc %48 0 %76 1:i1
%77:i32 = var
blockpc %48 1 %77 1:i1
%78:i32 = var
blockpc %56 0 %78 1:i1
%79:i32 = var
blockpc %56 1 %79 1:i1
%80:i32 = var
pc %80 1:i1
infer %59


; start LHS (in $6)
%0 = block 6
%1 = block 2
%2:i32 = var
%3 = phi %1, %2, 4096:i32
%4 = block 2
%5:i32 = var
%6 = block 2
%7 = block 2
%8:i32 = var
%9 = phi %7, 16:i32, %8
%10 = block 2
%11 = block 2
%12 = block 2
%13 = block 2
%14:i32 = var
%15 = phi %13, %14, %5
%16 = phi %12, %5, %15
%17 = phi %11, %16, %5
%18 = phi %10, -1:i32, %17
%19 = phi %6, %9, %18
%20 = phi %4, %5, %19
%21 = add %20, 47:i32 (hasExternalUses)
%22 = add %3, %21 (hasExternalUses)
%23:i32 = var
%24 = sub %22, %23
%25 = sub 0:i32, %3 (hasExternalUses)
%26 = and %24, %25 (hasExternalUses)
%27 = block 2
%28:i32 = var
%29:i32 = var
%30 = add %28, %29
%31:i32 = var
%32 = and %30, %31
%33 = sub %32, %29
%34 = phi %27, %33, 0:i32
%35 = block 2
%36:i32 = var
%37:i32 = var
%38 = phi %35, %36, %37
%39 = add %34, %38 (hasExternalUses)
%40 = block 2
%41 = phi %40, %26, %39
%42:i32 = var
%43 = block 2
%44 = block 2
%45 = block 5
%46 = block 2
%47 = phi %46, %26, 0:i32
%48 = phi %45, %47, 0:i32, 0:i32, 0:i32, 0:i32
%49 = phi %44, 0:i32, %48
%50:i32 = var
%51 = phi %43, %49, %50
%52 = phi %0, %26, %39, %41, %41, %42, %51
%53 = add %52, -40:i32 (hasExternalUses)
%54 = block 2
%55:i32 = var
%56 = phi %54, %55, 0:i32
%57 = sub %53, %56 (hasExternalUses)
%58 = or %57, 1:i32
%59:i32 = var
blockpc %1 0 %59 1:i1
%60:i32 = var
blockpc %1 1 %60 1:i1
%61:i32 = var
blockpc %6 0 %61 1:i1
%62:i32 = var
blockpc %6 1 %62 1:i1
%63:i32 = var
blockpc %7 0 %63 1:i1
%64:i32 = var
blockpc %7 1 %64 1:i1
%65:i32 = var
blockpc %10 0 %65 1:i1
%66:i32 = var
blockpc %10 1 %66 1:i1
%67:i32 = var
blockpc %11 0 %67 1:i1
%68:i32 = var
blockpc %11 1 %68 1:i1
%69:i32 = var
blockpc %27 0 %69 1:i1
%70:i32 = var
blockpc %27 1 %70 1:i1
%71:i32 = var
blockpc %43 0 %71 1:i1
%72:i32 = var
blockpc %43 1 %72 1:i1
%73:i32 = var
blockpc %44 0 %73 1:i1
%74:i32 = var
blockpc %44 1 %74 1:i1
%75:i32 = var
blockpc %46 0 %75 1:i1
%76:i32 = var
blockpc %46 1 %76 1:i1
%77:i32 = var
blockpc %54 0 %77 1:i1
%78:i32 = var
blockpc %54 1 %78 1:i1
%79:i32 = var
pc %79 1:i1
infer %58


; start LHS (in $6)
%0 = block 6
%1:i32 = var
%2:i32 = var
%3 = block 2
%4:i32 = var
%5 = phi %3, %1, %4
%6:i32 = var
%7 = phi %0, %1, %2, %5, %5, %5, %6
%8 = block 2
%9:i32 = var
%10 = phi %8, %9, 4096:i32
%11 = block 2
%12:i32 = var
%13 = and %12, -8:i32 (hasExternalUses)
%14 = block 2
%15 = block 2
%16:i32 = var
%17 = phi %15, 16:i32, %16
%18 = block 2
%19 = block 2
%20 = block 2
%21 = block 2
%22:i32 = var
%23 = phi %21, %22, %13
%24 = phi %20, %13, %23
%25 = phi %19, %24, %13
%26 = phi %18, -1:i32, %25
%27 = phi %14, %17, %26
%28 = phi %11, %13, %27
%29 = add %28, 47:i32 (hasExternalUses)
%30 = add %10, %29 (hasExternalUses)
%31:i32 = var
%32 = sub %30, %31
%33:i32 = var
%34 = and %32, %33 (hasExternalUses)
%35:i32 = var
%36 = phi %3, %34, %35
%37:i32 = var
%38 = block 2
%39 = block 2
%40 = block 5
%41 = block 2
%42 = phi %41, %34, 0:i32
%43 = phi %40, %42, 0:i32, 0:i32, 0:i32, 0:i32
%44 = phi %39, 0:i32, %43
%45:i32 = var
%46 = phi %38, %44, %45
%47 = phi %0, %34, %35, %36, %36, %37, %46
%48 = add %47, -40:i32 (hasExternalUses)
%49 = add %7, %48
%50:i32 = var
blockpc %8 0 %50 1:i1
%51:i32 = var
blockpc %8 1 %51 1:i1
%52:i32 = var
blockpc %14 0 %52 1:i1
%53:i32 = var
blockpc %14 1 %53 1:i1
%54:i32 = var
blockpc %15 0 %54 1:i1
%55:i32 = var
blockpc %15 1 %55 1:i1
%56:i32 = var
blockpc %18 0 %56 1:i1
%57:i32 = var
blockpc %18 1 %57 1:i1
%58:i32 = var
blockpc %19 0 %58 1:i1
%59:i32 = var
blockpc %19 1 %59 1:i1
%60:i32 = var
blockpc %38 0 %60 1:i1
%61:i32 = var
blockpc %38 1 %61 1:i1
%62:i32 = var
blockpc %39 0 %62 1:i1
%63:i32 = var
blockpc %39 1 %63 1:i1
%64:i32 = var
blockpc %41 0 %64 1:i1
%65:i32 = var
blockpc %41 1 %65 1:i1
%66:i32 = var
pc %66 1:i1
infer %49


; start LHS (in $6)
%0 = block 5
%1:i32 = var
%2 = block 2
%3 = block 2
%4 = block 6
%5 = block 2
%6:i32 = var
%7 = add %6, 11:i32 (hasExternalUses)
%8 = and %7, -8:i32 (hasExternalUses)
%9 = block 2
%10 = block 2
%11:i32 = var
%12 = and %11, -8:i32 (hasExternalUses)
%13 = phi %10, 16:i32, %12
%14 = block 2
%15 = block 2
%16 = block 2
%17 = block 2
%18:i32 = var
%19 = phi %17, %18, %8
%20 = phi %16, %8, %19
%21 = phi %15, %20, %8
%22 = phi %14, -1:i32, %21
%23 = phi %9, %13, %22
%24 = phi %5, %8, %23
%25 = block 2
%26:i32 = var
%27 = phi %25, %24, %26
%28 = block 2
%29 = phi %28, %24, %27
%30 = block 2
%31 = block 5
%32 = phi %31, %24, %27, %27, %29, %29
%33 = phi %30, %24, %32
%34 = phi %4, %24, %27, %29, %29, %29, %33
%35 = phi %3, %34, %1
%36:i32 = var
%37 = phi %2, %35, %36
%38 = block 2
%39 = block 2
%40:i32 = var
%41 = phi %39, %37, %40
%42 = phi %38, %41, %34
%43 = phi %0, %1, %37, %37, %37, %42
%44:i32 = var
%45 = ult %43, %44
%46:i32 = var
blockpc %9 0 %46 1:i1
%47:i32 = var
blockpc %9 1 %47 1:i1
%48:i32 = var
blockpc %10 0 %48 1:i1
%49:i32 = var
blockpc %10 1 %49 1:i1
%50:i32 = var
blockpc %14 0 %50 1:i1
%51:i32 = var
blockpc %14 1 %51 1:i1
%52:i32 = var
blockpc %15 0 %52 1:i1
%53:i32 = var
blockpc %15 1 %53 1:i1
%54:i32 = var
blockpc %30 0 %54 1:i1
%55:i32 = var
blockpc %30 1 %55 1:i1
%56:i32 = var
blockpc %38 0 %56 1:i1
%57:i32 = var
blockpc %38 1 %57 1:i1
%58:i32 = var
blockpc %39 0 %58 1:i1
%59:i32 = var
blockpc %39 1 %59 1:i1
infer %45


; start LHS (in $6)
%0:i32 = var
%1 = block 5
%2:i32 = var
%3 = block 2
%4 = block 2
%5 = block 6
%6 = block 2
%7:i32 = var
%8 = add %7, 11:i32 (hasExternalUses)
%9 = and %8, -8:i32 (hasExternalUses)
%10 = block 2
%11 = block 2
%12:i32 = var
%13 = and %12, -8:i32 (hasExternalUses)
%14 = phi %11, 16:i32, %13
%15 = block 2
%16 = block 2
%17 = block 2
%18 = block 2
%19:i32 = var
%20 = phi %18, %19, %9
%21 = phi %17, %9, %20
%22 = phi %16, %21, %9
%23 = phi %15, -1:i32, %22
%24 = phi %10, %14, %23
%25 = phi %6, %9, %24
%26 = block 2
%27:i32 = var
%28 = phi %26, %25, %27
%29 = block 2
%30 = phi %29, %25, %28
%31 = block 2
%32 = block 5
%33 = phi %32, %25, %28, %28, %30, %30
%34 = phi %31, %25, %33
%35 = phi %5, %25, %28, %30, %30, %30, %34
%36 = phi %4, %35, %2
%37:i32 = var
%38 = phi %3, %36, %37
%39 = block 2
%40 = block 2
%41:i32 = var
%42 = phi %40, %38, %41
%43 = phi %39, %42, %35
%44 = phi %1, %2, %38, %38, %38, %43
%45 = sub %0, %44
%46:i32 = var
blockpc %10 0 %46 1:i1
%47:i32 = var
blockpc %10 1 %47 1:i1
%48:i32 = var
blockpc %11 0 %48 1:i1
%49:i32 = var
blockpc %11 1 %49 1:i1
%50:i32 = var
blockpc %15 0 %50 1:i1
%51:i32 = var
blockpc %15 1 %51 1:i1
%52:i32 = var
blockpc %16 0 %52 1:i1
%53:i32 = var
blockpc %16 1 %53 1:i1
%54:i32 = var
blockpc %31 0 %54 1:i1
%55:i32 = var
blockpc %31 1 %55 1:i1
%56:i32 = var
blockpc %39 0 %56 1:i1
%57:i32 = var
blockpc %39 1 %57 1:i1
%58:i32 = var
blockpc %40 0 %58 1:i1
%59:i32 = var
blockpc %40 1 %59 1:i1
%60:i32 = var
pc %60 1:i1
infer %45


; start LHS (in $6)
%0:i32 = var
%1 = block 2
%2 = block 2
%3:i32 = var
%4 = add %3, 11:i32 (hasExternalUses)
%5 = and %4, -8:i32 (hasExternalUses)
%6 = block 2
%7 = block 2
%8 = add %3, 11:i32
%9 = and %8, -8:i32 (hasExternalUses)
%10 = phi %7, 16:i32, %9
%11 = block 2
%12 = block 2
%13 = block 2
%14 = block 2
%15:i32 = var
%16 = phi %14, %15, %5
%17 = phi %13, %5, %16
%18 = phi %12, %17, %5
%19 = phi %11, -1:i32, %18
%20 = phi %6, %10, %19
%21 = phi %2, %5, %20
%22 = block 5
%23:i32 = var
%24 = block 2
%25 = block 2
%26 = block 6
%27 = block 2
%28:i32 = var
%29 = phi %27, %21, %28
%30 = block 2
%31 = phi %30, %21, %29
%32 = block 2
%33 = block 5
%34 = phi %33, %21, %29, %29, %31, %31
%35 = phi %32, %21, %34
%36 = phi %26, %21, %29, %31, %31, %31, %35
%37 = phi %25, %36, %23
%38:i32 = var
%39 = phi %24, %37, %38
%40 = block 2
%41 = block 2
%42:i32 = var
%43 = phi %41, %39, %42
%44 = phi %40, %43, %36
%45 = phi %22, %23, %39, %39, %39, %44
%46 = phi %1, %21, %45
%47 = add %0, %46
%48:i32 = var
blockpc %6 0 %48 1:i1
%49:i32 = var
blockpc %6 1 %49 1:i1
%50:i32 = var
blockpc %7 0 %50 1:i1
%51:i32 = var
blockpc %7 1 %51 1:i1
%52:i32 = var
blockpc %11 0 %52 1:i1
%53:i32 = var
blockpc %11 1 %53 1:i1
%54:i32 = var
blockpc %12 0 %54 1:i1
%55:i32 = var
blockpc %12 1 %55 1:i1
%56:i32 = var
blockpc %32 0 %56 1:i1
%57:i32 = var
blockpc %32 1 %57 1:i1
%58:i32 = var
blockpc %40 0 %58 1:i1
%59:i32 = var
blockpc %40 1 %59 1:i1
%60:i32 = var
blockpc %41 0 %60 1:i1
%61:i32 = var
blockpc %41 1 %61 1:i1
infer %47


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2 = block 2
%3:i32 = var
%4 = add %3, 11:i32 (hasExternalUses)
%5 = and %4, -8:i32 (hasExternalUses)
%6 = block 2
%7 = block 2
%8 = add %3, 11:i32
%9 = and %8, -8:i32 (hasExternalUses)
%10 = phi %7, 16:i32, %9
%11 = block 2
%12 = block 2
%13 = block 2
%14 = block 2
%15:i32 = var
%16 = phi %14, %15, %5
%17 = phi %13, %5, %16
%18 = phi %12, %17, %5
%19 = phi %11, -1:i32, %18
%20 = phi %6, %10, %19
%21 = phi %2, %5, %20
%22 = sub %1, %21 (hasExternalUses)
%23:i32 = var
%24 = block 5
%25:i32 = var
%26 = block 2
%27 = block 2
%28 = block 6
%29 = block 2
%30:i32 = var
%31 = phi %29, %21, %30
%32 = block 2
%33 = phi %32, %21, %31
%34 = block 2
%35 = block 5
%36 = phi %35, %21, %31, %31, %33, %33
%37 = phi %34, %21, %36
%38 = phi %28, %21, %31, %33, %33, %33, %37
%39 = phi %27, %38, %25
%40:i32 = var
%41 = phi %26, %39, %40
%42 = block 2
%43 = block 2
%44:i32 = var
%45 = phi %43, %41, %44
%46 = phi %42, %45, %38
%47 = phi %24, %25, %41, %41, %41, %46
%48 = sub %23, %47 (hasExternalUses)
%49 = phi %0, %22, %48
%50 = or %49, 1:i32
%51:i32 = var
blockpc %6 0 %51 1:i1
%52:i32 = var
blockpc %6 1 %52 1:i1
%53:i32 = var
blockpc %7 0 %53 1:i1
%54:i32 = var
blockpc %7 1 %54 1:i1
%55:i32 = var
blockpc %11 0 %55 1:i1
%56:i32 = var
blockpc %11 1 %56 1:i1
%57:i32 = var
blockpc %12 0 %57 1:i1
%58:i32 = var
blockpc %12 1 %58 1:i1
%59:i32 = var
blockpc %34 0 %59 1:i1
%60:i32 = var
blockpc %34 1 %60 1:i1
%61:i32 = var
blockpc %42 0 %61 1:i1
%62:i32 = var
blockpc %42 1 %62 1:i1
%63:i32 = var
blockpc %43 0 %63 1:i1
%64:i32 = var
blockpc %43 1 %64 1:i1
infer %50


; start LHS (in $6)
%0 = block 2
%1 = block 2
%2:i32 = var
%3 = add %2, 11:i32 (hasExternalUses)
%4 = and %3, -8:i32 (hasExternalUses)
%5 = block 2
%6 = block 2
%7 = add %2, 11:i32
%8 = and %7, -8:i32 (hasExternalUses)
%9 = phi %6, 16:i32, %8
%10 = block 2
%11 = block 2
%12 = block 2
%13 = block 2
%14:i32 = var
%15 = phi %13, %14, %4
%16 = phi %12, %4, %15
%17 = phi %11, %16, %4
%18 = phi %10, -1:i32, %17
%19 = phi %5, %9, %18
%20 = phi %1, %4, %19
%21 = block 5
%22:i32 = var
%23 = block 2
%24 = block 2
%25 = block 6
%26 = block 2
%27:i32 = var
%28 = phi %26, %20, %27
%29 = block 2
%30 = phi %29, %20, %28
%31 = block 2
%32 = block 5
%33 = phi %32, %20, %28, %28, %30, %30
%34 = phi %31, %20, %33
%35 = phi %25, %20, %28, %30, %30, %30, %34
%36 = phi %24, %35, %22
%37:i32 = var
%38 = phi %23, %36, %37
%39 = block 2
%40 = block 2
%41:i32 = var
%42 = phi %40, %38, %41
%43 = phi %39, %42, %35
%44 = phi %21, %22, %38, %38, %38, %43
%45 = phi %0, %20, %44
%46 = or %45, 3:i32
%47:i32 = var
blockpc %5 0 %47 1:i1
%48:i32 = var
blockpc %5 1 %48 1:i1
%49:i32 = var
blockpc %6 0 %49 1:i1
%50:i32 = var
blockpc %6 1 %50 1:i1
%51:i32 = var
blockpc %10 0 %51 1:i1
%52:i32 = var
blockpc %10 1 %52 1:i1
%53:i32 = var
blockpc %11 0 %53 1:i1
%54:i32 = var
blockpc %11 1 %54 1:i1
%55:i32 = var
blockpc %31 0 %55 1:i1
%56:i32 = var
blockpc %31 1 %56 1:i1
%57:i32 = var
blockpc %39 0 %57 1:i1
%58:i32 = var
blockpc %39 1 %58 1:i1
%59:i32 = var
blockpc %40 0 %59 1:i1
%60:i32 = var
blockpc %40 1 %60 1:i1
infer %46


; start LHS (in $6)
%0 = block 2
%1:i32 = var
%2:i32 = var
%3 = phi %0, %1, %2
%4 = add %3, 8:i32
infer %4


; function: $7

; start LHS (in $7)
%0:i32 = var
%1 = add %0, 16:i32
infer %1


; function: $8

; start LHS (in $8)
%0:i32 = var
%1 = and %0, 255:i32
infer %1


; start LHS (in $8)
%0:i32 = var
%1 = and %0, 255:i32
%2 = shl %1, 24:i32
infer %2


; start LHS (in $8)
%0:i32 = var
%1 = ashr %0, 8:i32
infer %1


; start LHS (in $8)
%0:i32 = var
%1 = ashr %0, 8:i32
%2 = and %1, 255:i32
infer %2


; start LHS (in $8)
%0:i32 = var
%1 = ashr %0, 8:i32
%2 = and %1, 255:i32
%3 = shl %2, 16:i32
infer %3


; start LHS (in $8)
%0:i32 = var
%1 = and %0, 255:i32
%2 = shl %1, 24:i32
%3 = ashr %0, 8:i32
%4 = and %3, 255:i32
%5 = shl %4, 16:i32
%6 = or %2, %5
infer %6


; start LHS (in $8)
%0:i32 = var
%1 = ashr %0, 16:i32
infer %1


; start LHS (in $8)
%0:i32 = var
%1 = ashr %0, 16:i32
%2 = and %1, 255:i32
infer %2


; start LHS (in $8)
%0:i32 = var
%1 = ashr %0, 16:i32
%2 = and %1, 255:i32
%3 = shl %2, 8:i32
infer %3


; start LHS (in $8)
%0:i32 = var
%1 = and %0, 255:i32
%2 = shl %1, 24:i32
%3 = ashr %0, 8:i32
%4 = and %3, 255:i32
%5 = shl %4, 16:i32
%6 = or %2, %5
%7 = ashr %0, 16:i32
%8 = and %7, 255:i32
%9 = shl %8, 8:i32
%10 = or %6, %9
infer %10


; start LHS (in $8)
%0:i32 = var
%1 = lshr %0, 24:i32
infer %1


; start LHS (in $8)
%0:i32 = var
%1 = and %0, 255:i32
%2 = shl %1, 24:i32
%3 = ashr %0, 8:i32
%4 = and %3, 255:i32
%5 = shl %4, 16:i32
%6 = or %2, %5
%7 = ashr %0, 16:i32
%8 = and %7, 255:i32
%9 = shl %8, 8:i32
%10 = or %6, %9
%11 = lshr %0, 24:i32
%12 = or %10, %11
infer %12


; function: $9

; start LHS (in $9)
%0:i32 = var
%1 = sub %0, -64:i32
infer %1


; start LHS (in $9)
%0:i32 = var
%1 = add %0, 20:i32
infer %1


; start LHS (in $9)
%0:i32 = var
%1 = add %0, 16:i32
infer %1


; start LHS (in $9)
%0:i32 = var
%1 = ne %0, 0:i32
infer %1


; start LHS (in $9)
%0:i32 = var
%1 = add %0, 24:i32
infer %1


; start LHS (in $9)
%0:i32 = var
%1 = add %0, 24:i32 (hasExternalUses)
%2 = add %1, 40:i32
infer %2


; start LHS (in $9)
%0:i32 = var
%1 = add %0, 24:i32 (hasExternalUses)
%2 = add %1, 39:i32
infer %2


; start LHS (in $9)
%0:i32 = var
%1 = add %0, 8:i32
infer %1


; start LHS (in $9)
%0:i32 = var
%1 = add %0, 8:i32 (hasExternalUses)
%2 = add %1, 4:i32
infer %2


; start LHS (in $9)
%0:i32 = var
%1 = slt -1:i32, %0
infer %1


; start LHS (in $9)
%0:i32 = var
%1 = sub 2147483647:i32, %0
%2 = slt -1:i32, %0
pc %2 1:i1
infer %1


; start LHS (in $9)
%0:i32 = var
%1 = sub 2147483647:i32, %0
%2:i32 = var
%3 = slt %1, %2
%4 = slt -1:i32, %0
pc %4 1:i1
infer %3


; start LHS (in $9)
%0:i32 = var
%1:i32 = var
%2 = add %0, %1
%3 = sub 2147483647:i32, %1
%4 = slt %3, %0
%5:i32 = zext %4
%6 = eq %5, 0:i32
%7 = slt -1:i32, %1
pc %6 1:i1
pc %7 1:i1
infer %2


; start LHS (in $9)
%0:i32 = var
%1 = eq %0, 0:i32
infer %1


; start LHS (in $9)
%0:i32 = var
%1 = shl %0, 24:i32
infer %1


; start LHS (in $9)
%0:i32 = var
%1 = shl %0, 24:i32
%2 = ashr %1, 24:i32
infer %2


; start LHS (in $9)
%0:i32 = var
%1 = add %0, 1:i32
infer %1


; start LHS (in $9)
%0:i32 = var
%1 = ne %0, 37:i32
infer %1


; start LHS (in $9)
%0:i32 = var
%1 = add %0, 1:i32
infer %1


; start LHS (in $9)
%0:i32 = var
%1 = add %0, 2:i32
infer %1


; start LHS (in $9)
%0:i32 = var
%1 = eq %0, 37:i32
infer %1


; start LHS (in $9)
%0 = block 3
%1:i32 = var
%2:i32 = var
%3 = add %2, 1:i32
%4 = phi %0, %1, %2, %3
%5:i32 = var
%6:i32 = var
%7:i32 = var
%8 = phi %0, %5, %6, %7
%9 = sub %4, %8
infer %9


; start LHS (in $9)
%0:i32 = var
%1 = add %0, -48:i32
infer %1


; start LHS (in $9)
%0:i32 = var
%1 = add %0, -48:i32
%2 = ult %1, 10:i32
infer %2


; start LHS (in $9)
%0:i32 = var
%1 = add %0, -48:i32
%2 = ult %1, 10:i32
%3:i32 = zext %2
%4 = eq %3, 0:i32
infer %4


; start LHS (in $9)
%0:i32 = var
%1 = eq %0, 36:i32
%2:i32 = var
%3 = add %2, -48:i32
%4 = ult %3, 10:i32
%5:i32 = zext %4
%6 = eq %5, 0:i32
%7:i32 = zext %6
%8 = eq %7, 0:i32
pc %8 1:i1
infer %1


; start LHS (in $9)
%0:i32 = var
%1 = add %0, -48:i32
%2:i32 = var
%3 = eq %2, 36:i32
%4:i32 = var
%5 = add %4, -48:i32
%6 = ult %5, 10:i32
%7:i32 = zext %6
%8 = eq %7, 0:i32
%9:i32 = zext %8
%10 = eq %9, 0:i32
pc %3 1:i1
pc %10 1:i1
infer %1


; start LHS (in $9)
%0:i32 = var
%1 = block 2
%2 = block 2
%3 = phi %2, 3:i32, 1:i32
%4 = phi %1, 1:i32, %3
%5 = add %0, %4
%6:i32 = var
%7 = add %6, -48:i32
%8 = ult %7, 10:i32
%9:i32 = zext %8
%10 = eq %9, 0:i32
blockpc %1 0 %10 1:i1
%11:i32 = zext %10
%12 = eq %11, 0:i32
blockpc %1 1 %12 1:i1
%13:i32 = var
%14 = eq %13, 36:i32
blockpc %2 0 %14 1:i1
%15:i32 = zext %14
%16 = eq %15, 0:i32
blockpc %2 1 %16 1:i1
infer %5


; start LHS (in $9)
%0:i32 = var
%1 = add %0, -32:i32
infer %1


; start LHS (in $9)
%0:i32 = var
%1 = add %0, -32:i32 (hasExternalUses)
%2 = ult 31:i32, %1
infer %2


; start LHS (in $9)
%0:i32 = var
%1 = add %0, -32:i32 (hasExternalUses)
%2 = shl 1:i32, %1
infer %2


; start LHS (in $9)
%0:i32 = var
%1 = add %0, -32:i32 (hasExternalUses)
%2 = shl 1:i32, %1
%3 = and %2, 75913:i32
infer %3


; start LHS (in $9)
%0:i32 = var
%1 = add %0, -32:i32 (hasExternalUses)
%2 = shl 1:i32, %1
%3 = and %2, 75913:i32
%4 = eq %3, 0:i32
infer %4


; start LHS (in $9)
%0:i32 = var
%1 = add %0, -32:i32
%2 = ult 31:i32, %1
%3:i32 = zext %2
%4 = shl 1:i32, %1
%5 = and %4, 75913:i32
%6 = eq %5, 0:i32
%7:i32 = zext %6
%8 = or %3, %7
infer %8


; start LHS (in $9)
%0:i32 = var
%1 = shl %0, 24:i32
%2:i32 = var
%3 = add %2, -32:i32
%4 = ult 31:i32, %3
%5:i32 = zext %4
%6 = shl 1:i32, %3
%7 = and %6, 75913:i32
%8 = eq %7, 0:i32
%9:i32 = zext %8
%10 = or %5, %9
%11 = eq %10, 0:i32
pc %11 1:i1
infer %1


; start LHS (in $9)
%0:i32 = var
%1 = shl %0, 24:i32
%2 = ashr %1, 24:i32
%3:i32 = var
%4 = add %3, -32:i32
%5 = ult 31:i32, %4
%6:i32 = zext %5
%7 = shl 1:i32, %4
%8 = and %7, 75913:i32
%9 = eq %8, 0:i32
%10:i32 = zext %9
%11 = or %6, %10
%12 = eq %11, 0:i32
pc %12 1:i1
infer %2


; start LHS (in $9)
%0:i32 = var
%1 = shl %0, 24:i32
%2 = ashr %1, 24:i32
%3 = add %2, -32:i32
%4:i32 = var
%5 = add %4, -32:i32
%6 = ult 31:i32, %5
%7:i32 = zext %6
%8 = shl 1:i32, %5
%9 = and %8, 75913:i32
%10 = eq %9, 0:i32
%11:i32 = zext %10
%12 = or %7, %11
%13 = eq %12, 0:i32
pc %13 1:i1
infer %3


; start LHS (in $9)
%0:i32 = var
%1 = shl %0, 24:i32
%2 = ashr %1, 24:i32
%3 = add %2, -32:i32
%4 = shl 1:i32, %3
%5:i32 = var
%6 = add %5, -32:i32
%7 = ult 31:i32, %6
%8:i32 = zext %7
%9 = shl 1:i32, %6
%10 = and %9, 75913:i32
%11 = eq %10, 0:i32
%12:i32 = zext %11
%13 = or %8, %12
%14 = eq %13, 0:i32
pc %14 1:i1
infer %4


; start LHS (in $9)
%0:i32 = var
%1 = shl %0, 24:i32
%2 = ashr %1, 24:i32
%3 = add %2, -32:i32
%4 = shl 1:i32, %3
%5:i32 = var
%6 = or %4, %5
%7:i32 = var
%8 = add %7, -32:i32
%9 = ult 31:i32, %8
%10:i32 = zext %9
%11 = shl 1:i32, %8
%12 = and %11, 75913:i32
%13 = eq %12, 0:i32
%14:i32 = zext %13
%15 = or %10, %14
%16 = eq %15, 0:i32
pc %16 1:i1
infer %6


; start LHS (in $9)
%0:i32 = var
%1 = add %0, 1:i32
%2:i32 = var
%3 = add %2, -32:i32
%4 = ult 31:i32, %3
%5:i32 = zext %4
%6 = shl 1:i32, %3
%7 = and %6, 75913:i32
%8 = eq %7, 0:i32
%9:i32 = zext %8
%10 = or %5, %9
%11 = eq %10, 0:i32
pc %11 1:i1
infer %1


; start LHS (in $9)
%0:i32 = var
%1 = add %0, -32:i32
%2:i32 = var
%3 = add %2, -32:i32
%4 = ult 31:i32, %3
%5:i32 = zext %4
%6 = shl 1:i32, %3
%7 = and %6, 75913:i32
%8 = eq %7, 0:i32
%9:i32 = zext %8
%10 = or %5, %9
%11 = eq %10, 0:i32
pc %11 1:i1
infer %1


; start LHS (in $9)
%0:i32 = var
%1 = add %0, -32:i32 (hasExternalUses)
%2 = ult 31:i32, %1
%3:i32 = var
%4 = add %3, -32:i32
%5 = ult 31:i32, %4
%6:i32 = zext %5
%7 = shl 1:i32, %4
%8 = and %7, 75913:i32
%9 = eq %8, 0:i32
%10:i32 = zext %9
%11 = or %6, %10
%12 = eq %11, 0:i32
pc %12 1:i1
infer %2


; start LHS (in $9)
%0:i32 = var
%1 = add %0, -32:i32 (hasExternalUses)
%2 = shl 1:i32, %1
%3:i32 = var
%4 = add %3, -32:i32
%5 = ult 31:i32, %4
%6:i32 = zext %5
%7 = shl 1:i32, %4
%8 = and %7, 75913:i32
%9 = eq %8, 0:i32
%10:i32 = zext %9
%11 = or %6, %10
%12 = eq %11, 0:i32
pc %12 1:i1
infer %2


; start LHS (in $9)
%0:i32 = var
%1 = add %0, -32:i32 (hasExternalUses)
%2 = shl 1:i32, %1
%3 = and %2, 75913:i32
%4:i32 = var
%5 = add %4, -32:i32
%6 = ult 31:i32, %5
%7:i32 = zext %6
%8 = shl 1:i32, %5
%9 = and %8, 75913:i32
%10 = eq %9, 0:i32
%11:i32 = zext %10
%12 = or %7, %11
%13 = eq %12, 0:i32
pc %13 1:i1
infer %3


; start LHS (in $9)
%0:i32 = var
%1 = add %0, -32:i32 (hasExternalUses)
%2 = shl 1:i32, %1
%3 = and %2, 75913:i32
%4 = eq %3, 0:i32
%5:i32 = var
%6 = add %5, -32:i32
%7 = ult 31:i32, %6
%8:i32 = zext %7
%9 = shl 1:i32, %6
%10 = and %9, 75913:i32
%11 = eq %10, 0:i32
%12:i32 = zext %11
%13 = or %8, %12
%14 = eq %13, 0:i32
pc %14 1:i1
infer %4


; start LHS (in $9)
%0:i32 = var
%1 = add %0, -32:i32
%2 = ult 31:i32, %1
%3:i32 = zext %2
%4 = shl 1:i32, %1
%5 = and %4, 75913:i32
%6 = eq %5, 0:i32
%7:i32 = zext %6
%8 = or %3, %7
%9:i32 = var
%10 = add %9, -32:i32
%11 = ult 31:i32, %10
%12:i32 = zext %11
%13 = shl 1:i32, %10
%14 = and %13, 75913:i32
%15 = eq %14, 0:i32
%16:i32 = zext %15
%17 = or %12, %16
%18 = eq %17, 0:i32
pc %18 1:i1
infer %8


; start LHS (in $9)
%0:i32 = var
%1 = add %0, -32:i32
%2 = ult 31:i32, %1
%3:i32 = zext %2
%4 = shl 1:i32, %1
%5 = and %4, 75913:i32
%6 = eq %5, 0:i32
%7:i32 = zext %6
%8 = or %3, %7
%9 = eq %8, 0:i32
%10:i32 = var
%11 = add %10, -32:i32
%12 = ult 31:i32, %11
%13:i32 = zext %12
%14 = shl 1:i32, %11
%15 = and %14, 75913:i32
%16 = eq %15, 0:i32
%17:i32 = zext %16
%18 = or %13, %17
%19 = eq %18, 0:i32
pc %19 1:i1
infer %9


; start LHS (in $9)
%0 = block 2
%1:i32 = var
%2:i32 = var
%3 = phi %0, %1, %2
%4 = and %3, 255:i32
%5 = add %1, -32:i32
%6 = ult 31:i32, %5
%7:i32 = zext %6
%8 = shl 1:i32, %5
%9 = and %8, 75913:i32
%10 = eq %9, 0:i32
%11:i32 = zext %10
%12 = or %7, %11
%13 = ne %12, 0:i32
blockpc %0 0 %13 1:i1
%14 = eq %12, 0:i32
blockpc %0 1 %14 1:i1
infer %4


; start LHS (in $9)
%0 = block 2
%1:i32 = var
%2:i32 = var
%3 = phi %0, %1, %2
%4 = and %3, 255:i32
%5 = eq %4, 42:i32
%6 = add %1, -32:i32
%7 = ult 31:i32, %6
%8:i32 = zext %7
%9 = shl 1:i32, %6
%10 = and %9, 75913:i32
%11 = eq %10, 0:i32
%12:i32 = zext %11
%13 = or %8, %12
%14 = ne %13, 0:i32
blockpc %0 0 %14 1:i1
%15 = eq %13, 0:i32
blockpc %0 1 %15 1:i1
infer %5


; start LHS (in $9)
%0:i32 = var
%1 = add %0, -48:i32
%2 = block 2
%3:i32 = var
%4 = add %3, -32:i32
%5 = ult 31:i32, %4
%6:i32 = zext %5
%7:i32 = var
%8 = and %7, 75913:i32
%9 = eq %8, 0:i32
%10:i32 = zext %9
%11 = or %6, %10
%12 = ne %11, 0:i32
blockpc %2 0 %12 1:i1
%13 = eq %11, 0:i32
blockpc %2 1 %13 1:i1
%14:i32 = var
%15 = phi %2, %3, %14
%16 = and %15, 255:i32
%17 = eq %16, 42:i32
pc %17 1:i1
infer %1


; start LHS (in $9)
%0:i32 = var
%1 = add %0, -48:i32
%2 = ult %1, 10:i32
%3 = block 2
%4:i32 = var
%5 = add %4, -32:i32
%6 = ult 31:i32, %5
%7:i32 = zext %6
%8:i32 = var
%9 = and %8, 75913:i32
%10 = eq %9, 0:i32
%11:i32 = zext %10
%12 = or %7, %11
%13 = ne %12, 0:i32
blockpc %3 0 %13 1:i1
%14 = eq %12, 0:i32
blockpc %3 1 %14 1:i1
%15:i32 = var
%16 = phi %3, %4, %15
%17 = and %16, 255:i32
%18 = eq %17, 42:i32
pc %18 1:i1
infer %2


; start LHS (in $9)
%0:i32 = var
%1 = add %0, -48:i32
%2 = ult %1, 10:i32
%3:i32 = zext %2
%4 = eq %3, 0:i32
%5 = block 2
%6:i32 = var
%7 = add %6, -32:i32
%8 = ult 31:i32, %7
%9:i32 = zext %8
%10:i32 = var
%11 = and %10, 75913:i32
%12 = eq %11, 0:i32
%13:i32 = zext %12
%14 = or %9, %13
%15 = ne %14, 0:i32
blockpc %5 0 %15 1:i1
%16 = eq %14, 0:i32
blockpc %5 1 %16 1:i1
%17:i32 = var
%18 = phi %5, %6, %17
%19 = and %18, 255:i32
%20 = eq %19, 42:i32
pc %20 1:i1
infer %4


; start LHS (in $9)
%0:i32 = var
%1 = ne %0, 36:i32
%2 = block 2
%3:i32 = var
%4 = add %3, -32:i32
%5 = ult 31:i32, %4
%6:i32 = zext %5
%7:i32 = var
%8 = and %7, 75913:i32
%9 = eq %8, 0:i32
%10:i32 = zext %9
%11 = or %6, %10
%12 = ne %11, 0:i32
blockpc %2 0 %12 1:i1
%13 = eq %11, 0:i32
blockpc %2 1 %13 1:i1
%14:i32 = var
%15 = phi %2, %3, %14
%16 = and %15, 255:i32
%17 = eq %16, 42:i32
pc %17 1:i1
infer %1


; start LHS (in $9)
%0:i32 = var
%1 = add %0, 1:i32
%2 = block 2
%3:i32 = var
%4 = add %3, -32:i32
%5 = ult 31:i32, %4
%6:i32 = zext %5
%7:i32 = var
%8 = and %7, 75913:i32
%9 = eq %8, 0:i32
%10:i32 = zext %9
%11 = or %6, %10
%12 = ne %11, 0:i32
blockpc %2 0 %12 1:i1
%13 = eq %11, 0:i32
blockpc %2 1 %13 1:i1
%14:i32 = var
%15 = phi %2, %3, %14
%16 = and %15, 255:i32
%17 = eq %16, 42:i32
pc %17 1:i1
infer %1


; start LHS (in $9)
%0:i32 = var
%1 = add %0, -48:i32
%2 = block 2
%3:i32 = var
%4 = add %3, -32:i32
%5 = ult 31:i32, %4
%6:i32 = zext %5
%7:i32 = var
%8 = and %7, 75913:i32
%9 = eq %8, 0:i32
%10:i32 = zext %9
%11 = or %6, %10
%12 = ne %11, 0:i32
blockpc %2 0 %12 1:i1
%13 = eq %11, 0:i32
blockpc %2 1 %13 1:i1
%14:i32 = var
%15 = phi %2, %3, %14
%16 = and %15, 255:i32
%17 = eq %16, 42:i32
pc %17 1:i1
infer %1


; start LHS (in $9)
%0:i32 = var
%1 = add %0, -48:i32
%2 = shl %1, 2:i32
%3 = block 2
%4:i32 = var
%5 = add %4, -32:i32
%6 = ult 31:i32, %5
%7:i32 = zext %6
%8:i32 = var
%9 = and %8, 75913:i32
%10 = eq %9, 0:i32
%11:i32 = zext %10
%12 = or %7, %11
%13 = ne %12, 0:i32
blockpc %3 0 %13 1:i1
%14 = eq %12, 0:i32
blockpc %3 1 %14 1:i1
%15:i32 = var
%16 = phi %3, %4, %15
%17 = and %16, 255:i32
%18 = eq %17, 42:i32
pc %18 1:i1
infer %2


; start LHS (in $9)
%0 = block 3
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4 = phi %0, %1, %2, %3
%5:i32 = var
%6 = add %5, -48:i32
%7 = shl %6, 2:i32
%8 = add %4, %7
%9 = block 2
%10:i32 = var
%11 = add %10, -32:i32
%12 = ult 31:i32, %11
%13:i32 = zext %12
%14:i32 = var
%15 = and %14, 75913:i32
%16 = eq %15, 0:i32
%17:i32 = zext %16
%18 = or %13, %17
%19 = ne %18, 0:i32
blockpc %9 0 %19 1:i1
%20 = eq %18, 0:i32
blockpc %9 1 %20 1:i1
%21:i32 = var
%22 = phi %9, %10, %21
%23 = and %22, 255:i32
%24 = eq %23, 42:i32
pc %24 1:i1
infer %8


; start LHS (in $9)
%0:i32 = var
%1 = add %0, -48:i32
%2 = block 2
%3:i32 = var
%4 = add %3, -32:i32
%5 = ult 31:i32, %4
%6:i32 = zext %5
%7:i32 = var
%8 = and %7, 75913:i32
%9 = eq %8, 0:i32
%10:i32 = zext %9
%11 = or %6, %10
%12 = ne %11, 0:i32
blockpc %2 0 %12 1:i1
%13 = eq %11, 0:i32
blockpc %2 1 %13 1:i1
%14:i32 = var
%15 = phi %2, %3, %14
%16 = and %15, 255:i32
%17 = eq %16, 42:i32
pc %17 1:i1
infer %1


; start LHS (in $9)
%0:i32 = var
%1 = add %0, -48:i32
%2 = shl %1, 3:i32
%3 = block 2
%4:i32 = var
%5 = add %4, -32:i32
%6 = ult 31:i32, %5
%7:i32 = zext %6
%8:i32 = var
%9 = and %8, 75913:i32
%10 = eq %9, 0:i32
%11:i32 = zext %10
%12 = or %7, %11
%13 = ne %12, 0:i32
blockpc %3 0 %13 1:i1
%14 = eq %12, 0:i32
blockpc %3 1 %14 1:i1
%15:i32 = var
%16 = phi %3, %4, %15
%17 = and %16, 255:i32
%18 = eq %17, 42:i32
pc %18 1:i1
infer %2


; start LHS (in $9)
%0 = block 3
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4 = phi %0, %1, %2, %3
%5:i32 = var
%6 = add %5, -48:i32
%7 = shl %6, 3:i32
%8 = add %4, %7
%9 = block 2
%10:i32 = var
%11 = add %10, -32:i32
%12 = ult 31:i32, %11
%13:i32 = zext %12
%14:i32 = var
%15 = and %14, 75913:i32
%16 = eq %15, 0:i32
%17:i32 = zext %16
%18 = or %13, %17
%19 = ne %18, 0:i32
blockpc %9 0 %19 1:i1
%20 = eq %18, 0:i32
blockpc %9 1 %20 1:i1
%21:i32 = var
%22 = phi %9, %10, %21
%23 = and %22, 255:i32
%24 = eq %23, 42:i32
pc %24 1:i1
infer %8


; start LHS (in $9)
%0:i32 = var
%1 = add %0, 3:i32
%2 = block 2
%3:i32 = var
%4 = add %3, -32:i32
%5 = ult 31:i32, %4
%6:i32 = zext %5
%7:i32 = var
%8 = and %7, 75913:i32
%9 = eq %8, 0:i32
%10:i32 = zext %9
%11 = or %6, %10
%12 = ne %11, 0:i32
blockpc %2 0 %12 1:i1
%13 = eq %11, 0:i32
blockpc %2 1 %13 1:i1
%14:i32 = var
%15 = phi %2, %3, %14
%16 = and %15, 255:i32
%17 = eq %16, 42:i32
pc %17 1:i1
infer %1


; start LHS (in $9)
%0:i32 = var
%1 = add %0, 3:i32
%2 = block 3
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6 = phi %2, %3, %4, %5
%7 = ne %6, 0:i32
%8 = block 2
%9:i32 = var
%10 = add %9, -32:i32
%11 = ult 31:i32, %10
%12:i32 = zext %11
%13:i32 = var
%14 = and %13, 75913:i32
%15 = eq %14, 0:i32
%16:i32 = zext %15
%17 = or %12, %16
%18 = ne %17, 0:i32
blockpc %8 0 %18 1:i1
%19 = eq %17, 0:i32
blockpc %8 1 %19 1:i1
%20:i32 = var
%21 = phi %8, %9, %20
%22 = and %21, 255:i32
%23 = eq %22, 42:i32
pc %7 1:i1
pc %23 1:i1
infer %1


; start LHS (in $9)
%0:i32 = var
%1 = add %0, 3:i32
%2 = and %1, -4:i32
%3 = block 3
%4:i32 = var
%5:i32 = var
%6:i32 = var
%7 = phi %3, %4, %5, %6
%8 = ne %7, 0:i32
%9 = block 2
%10:i32 = var
%11 = add %10, -32:i32
%12 = ult 31:i32, %11
%13:i32 = zext %12
%14:i32 = var
%15 = and %14, 75913:i32
%16 = eq %15, 0:i32
%17:i32 = zext %16
%18 = or %13, %17
%19 = ne %18, 0:i32
blockpc %9 0 %19 1:i1
%20 = eq %18, 0:i32
blockpc %9 1 %20 1:i1
%21:i32 = var
%22 = phi %9, %10, %21
%23 = and %22, 255:i32
%24 = eq %23, 42:i32
pc %8 1:i1
pc %24 1:i1
infer %2


; start LHS (in $9)
%0:i32 = var
%1 = add %0, 3:i32
%2 = and %1, -4:i32 (hasExternalUses)
%3 = add %2, 4:i32
%4 = block 3
%5:i32 = var
%6:i32 = var
%7:i32 = var
%8 = phi %4, %5, %6, %7
%9 = ne %8, 0:i32
%10 = block 2
%11:i32 = var
%12 = add %11, -32:i32
%13 = ult 31:i32, %12
%14:i32 = zext %13
%15:i32 = var
%16 = and %15, 75913:i32
%17 = eq %16, 0:i32
%18:i32 = zext %17
%19 = or %14, %18
%20 = ne %19, 0:i32
blockpc %10 0 %20 1:i1
%21 = eq %19, 0:i32
blockpc %10 1 %21 1:i1
%22:i32 = var
%23 = phi %10, %11, %22
%24 = and %23, 255:i32
%25 = eq %24, 42:i32
pc %9 1:i1
pc %25 1:i1
infer %3


; start LHS (in $9)
%0:i32 = var
%1 = add %0, 1:i32
%2 = block 2
%3:i32 = var
%4 = add %3, -32:i32
%5 = ult 31:i32, %4
%6:i32 = zext %5
%7:i32 = var
%8 = and %7, 75913:i32
%9 = eq %8, 0:i32
%10:i32 = zext %9
%11 = or %6, %10
%12 = ne %11, 0:i32
blockpc %2 0 %12 1:i1
%13 = eq %11, 0:i32
blockpc %2 1 %13 1:i1
%14:i32 = var
%15 = phi %2, %3, %14
%16 = and %15, 255:i32
%17 = eq %16, 42:i32
pc %17 1:i1
infer %1


; start LHS (in $9)
%0 = block 2
%1:i32 = var
%2 = shl %1, 24:i32
%3 = ashr %2, 24:i32
%4 = add %3, -32:i32
%5 = shl 1:i32, %4
%6:i32 = var
%7 = or %5, %6 (hasExternalUses)
%8 = phi %0, 0:i32, %7
%9 = or %8, 8192:i32
%10:i32 = var
%11 = add %10, -32:i32
%12 = ult 31:i32, %11
%13:i32 = zext %12
%14 = shl 1:i32, %11
%15 = and %14, 75913:i32
%16 = eq %15, 0:i32
%17:i32 = zext %16
%18 = or %13, %17
%19 = ne %18, 0:i32
blockpc %0 0 %19 1:i1
%20 = eq %18, 0:i32
blockpc %0 1 %20 1:i1
%21:i32 = var
%22 = phi %0, %10, %21
%23 = and %22, 255:i32
%24 = eq %23, 42:i32
pc %24 1:i1
infer %9


; start LHS (in $9)
%0 = block 2
%1:i32 = var
%2 = block 2
%3:i32 = var
%4 = phi %2, %3, 0:i32
%5 = phi %0, %1, %4
%6 = sub 0:i32, %5
%7 = block 3
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11 = phi %7, %8, %9, %10
%12 = ne %11, 0:i32
blockpc %2 0 %12 1:i1
%13 = eq %11, 0:i32
blockpc %2 1 %13 1:i1
%14 = block 2
%15:i32 = var
%16 = add %15, -32:i32
%17 = ult 31:i32, %16
%18:i32 = zext %17
%19:i32 = var
%20 = and %19, 75913:i32
%21 = eq %20, 0:i32
%22:i32 = zext %21
%23 = or %18, %22
%24 = ne %23, 0:i32
blockpc %14 0 %24 1:i1
%25 = eq %23, 0:i32
blockpc %14 1 %25 1:i1
%26:i32 = var
%27 = phi %14, %15, %26
%28 = and %27, 255:i32
%29 = eq %28, 42:i32
pc %29 1:i1
infer %6


; start LHS (in $9)
%0 = block 2
%1:i32 = var
%2 = block 2
%3:i32 = var
%4 = phi %2, %3, 0:i32
%5 = phi %0, %1, %4
%6 = slt %5, 0:i32
%7 = block 3
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11 = phi %7, %8, %9, %10
%12 = ne %11, 0:i32
blockpc %2 0 %12 1:i1
%13 = eq %11, 0:i32
blockpc %2 1 %13 1:i1
%14 = block 2
%15:i32 = var
%16 = add %15, -32:i32
%17 = ult 31:i32, %16
%18:i32 = zext %17
%19:i32 = var
%20 = and %19, 75913:i32
%21 = eq %20, 0:i32
%22:i32 = zext %21
%23 = or %18, %22
%24 = ne %23, 0:i32
blockpc %14 0 %24 1:i1
%25 = eq %23, 0:i32
blockpc %14 1 %25 1:i1
%26:i32 = var
%27 = phi %14, %15, %26
%28 = and %27, 255:i32
%29 = eq %28, 42:i32
pc %29 1:i1
infer %6


; start LHS (in $9)
%0 = block 2
%1:i32 = var
%2 = block 2
%3:i32 = var
%4 = phi %2, %3, 0:i32
%5 = phi %0, %1, %4
%6 = slt %5, 0:i32 (hasExternalUses)
%7:i32 = zext %6
%8 = eq %7, 0:i32
%9 = block 3
%10:i32 = var
%11:i32 = var
%12:i32 = var
%13 = phi %9, %10, %11, %12
%14 = ne %13, 0:i32
blockpc %2 0 %14 1:i1
%15 = eq %13, 0:i32
blockpc %2 1 %15 1:i1
%16 = block 2
%17:i32 = var
%18 = add %17, -32:i32
%19 = ult 31:i32, %18
%20:i32 = zext %19
%21:i32 = var
%22 = and %21, 75913:i32
%23 = eq %22, 0:i32
%24:i32 = zext %23
%25 = or %20, %24
%26 = ne %25, 0:i32
blockpc %16 0 %26 1:i1
%27:i32 = var
blockpc %16 1 %27 1:i1
%28:i32 = var
%29 = phi %16, %17, %28
%30 = and %29, 255:i32
%31 = eq %30, 42:i32
pc %31 1:i1
infer %8


; start LHS (in $9)
%0 = block 2
%1:i32 = var
%2 = block 2
%3:i32 = var
%4 = phi %2, %3, 0:i32
%5 = phi %0, %1, %4
%6 = slt %5, 0:i32 (hasExternalUses)
%7:i32 = zext %6
%8 = eq %7, 0:i32
%9 = block 3
%10:i32 = var
%11:i32 = var
%12:i32 = var
%13 = phi %9, %10, %11, %12
%14 = ne %13, 0:i32
blockpc %2 0 %14 1:i1
%15 = eq %13, 0:i32
blockpc %2 1 %15 1:i1
%16 = block 2
%17:i32 = var
%18 = add %17, -32:i32
%19 = ult 31:i32, %18
%20:i32 = zext %19
%21:i32 = var
%22 = and %21, 75913:i32
%23 = eq %22, 0:i32
%24:i32 = zext %23
%25 = or %20, %24
%26 = ne %25, 0:i32
blockpc %16 0 %26 1:i1
%27:i32 = var
blockpc %16 1 %27 1:i1
%28:i32 = var
%29 = phi %16, %17, %28
%30 = and %29, 255:i32
%31 = eq %30, 42:i32
pc %31 1:i1
infer %8


; start LHS (in $9)
%0:i32 = var
%1 = slt %0, 0:i32
%2 = block 2
%3:i32 = var
%4:i32 = zext %3
%5:i32 = var
%6:i32 = zext %5
%7 = or %4, %6
%8 = ne %7, 0:i32
blockpc %2 0 %8 1:i1
%9 = eq %7, 0:i32
blockpc %2 1 %9 1:i1
%10:i32 = var
%11:i32 = var
%12 = phi %2, %10, %11
%13 = and %12, 255:i32
%14 = eq %13, 42:i32
%15:i32 = zext %14
%16 = eq %15, 0:i32
pc %16 1:i1
infer %1


; start LHS (in $9)
%0:i32 = var
%1 = eq %0, 46:i32
infer %1


; start LHS (in $9)
%0:i32 = var
%1 = ne %0, 42:i32
%2:i32 = var
%3 = eq %2, 46:i32
pc %3 1:i1
infer %1


; start LHS (in $9)
%0 = block 2
%1 = block 2
%2:i32 = var
%3 = add %2, 3:i32 (hasExternalUses)
%4:i32 = var
%5 = add %4, 1:i32 (hasExternalUses)
%6 = phi %1, %3, %5
%7:i32 = var
%8 = phi %0, %6, %7
%9 = add %8, 1:i32
%10 = block 2
%11:i32 = var
%12 = ult 31:i32, %11
%13:i32 = zext %12
%14:i32 = var
%15 = eq %14, 0:i32
%16:i32 = zext %15
%17 = or %13, %16
%18 = ne %17, 0:i32
blockpc %10 0 %18 1:i1
%19 = eq %17, 0:i32
blockpc %10 1 %19 1:i1
%20:i32 = var
%21:i32 = var
%22 = phi %10, %20, %21
%23 = and %22, 255:i32
%24 = eq %23, 42:i32
blockpc %0 0 %24 1:i1
%25:i32 = zext %24
%26 = eq %25, 0:i32
blockpc %0 1 %26 1:i1
%27:i32 = var
%28:i32 = var
pc %27 1:i1
pc %28 1:i1
infer %9


; start LHS (in $9)
%0:i32 = var
%1 = add %0, -48:i32
%2:i32 = var
%3 = eq %2, 46:i32
pc %3 1:i1
infer %1


; start LHS (in $9)
%0:i32 = var
%1 = add %0, -48:i32
%2 = ult %1, 10:i32
%3:i32 = var
%4 = eq %3, 46:i32
pc %4 1:i1
infer %2


; start LHS (in $9)
%0:i32 = var
%1 = eq %0, 36:i32
%2:i32 = var
%3 = add %2, -48:i32
%4 = ult %3, 10:i32
%5:i32 = var
%6 = eq %5, 46:i32
pc %4 1:i1
pc %6 1:i1
infer %1


; start LHS (in $9)
%0:i32 = var
%1 = add %0, 2:i32
%2:i32 = var
%3 = eq %2, 36:i32
%4:i32 = var
%5 = add %4, -48:i32
%6 = ult %5, 10:i32
%7:i32 = var
%8 = eq %7, 46:i32
pc %3 1:i1
pc %6 1:i1
pc %8 1:i1
infer %1


; start LHS (in $9)
%0:i32 = var
%1 = add %0, -48:i32
%2:i32 = var
%3 = eq %2, 36:i32
%4:i32 = var
%5 = add %4, -48:i32
%6 = ult %5, 10:i32
%7:i32 = var
%8 = eq %7, 46:i32
pc %3 1:i1
pc %6 1:i1
pc %8 1:i1
infer %1


; start LHS (in $9)
%0:i32 = var
%1 = add %0, -48:i32
%2 = shl %1, 2:i32
%3:i32 = var
%4 = eq %3, 36:i32
%5:i32 = var
%6 = add %5, -48:i32
%7 = ult %6, 10:i32
%8:i32 = var
%9 = eq %8, 46:i32
pc %4 1:i1
pc %7 1:i1
pc %9 1:i1
infer %2


; start LHS (in $9)
%0 = block 3
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4 = phi %0, %1, %2, %3
%5:i32 = var
%6 = add %5, -48:i32
%7 = shl %6, 2:i32
%8 = add %4, %7
%9:i32 = var
%10 = eq %9, 36:i32
%11:i32 = var
%12 = add %11, -48:i32
%13 = ult %12, 10:i32
%14:i32 = var
%15 = eq %14, 46:i32
pc %10 1:i1
pc %13 1:i1
pc %15 1:i1
infer %8


; start LHS (in $9)
%0:i32 = var
%1 = add %0, -48:i32
%2:i32 = var
%3 = eq %2, 36:i32
%4:i32 = var
%5 = add %4, -48:i32
%6 = ult %5, 10:i32
%7:i32 = var
%8 = eq %7, 46:i32
pc %3 1:i1
pc %6 1:i1
pc %8 1:i1
infer %1


; start LHS (in $9)
%0:i32 = var
%1 = add %0, -48:i32
%2 = shl %1, 3:i32
%3:i32 = var
%4 = eq %3, 36:i32
%5:i32 = var
%6 = add %5, -48:i32
%7 = ult %6, 10:i32
%8:i32 = var
%9 = eq %8, 46:i32
pc %4 1:i1
pc %7 1:i1
pc %9 1:i1
infer %2


; start LHS (in $9)
%0 = block 3
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4 = phi %0, %1, %2, %3
%5:i32 = var
%6 = add %5, -48:i32
%7 = shl %6, 3:i32
%8 = add %4, %7
%9:i32 = var
%10 = eq %9, 36:i32
%11:i32 = var
%12 = add %11, -48:i32
%13 = ult %12, 10:i32
%14:i32 = var
%15 = eq %14, 46:i32
pc %10 1:i1
pc %13 1:i1
pc %15 1:i1
infer %8


; start LHS (in $9)
%0:i32 = var
%1 = add %0, 4:i32
%2:i32 = var
%3 = eq %2, 36:i32
%4:i32 = var
%5 = add %4, -48:i32
%6 = ult %5, 10:i32
%7:i32 = var
%8 = eq %7, 46:i32
pc %3 1:i1
pc %6 1:i1
pc %8 1:i1
infer %1


; start LHS (in $9)
%0:i32 = var
%1 = add %0, 3:i32
%2 = block 3
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6 = phi %2, %3, %4, %5
%7 = ne %6, 0:i32
%8:i32 = var
%9 = eq %8, 46:i32
pc %7 1:i1
pc %9 1:i1
infer %1


; start LHS (in $9)
%0:i32 = var
%1 = add %0, 3:i32
%2 = and %1, -4:i32
%3 = block 3
%4:i32 = var
%5:i32 = var
%6:i32 = var
%7 = phi %3, %4, %5, %6
%8 = ne %7, 0:i32
%9:i32 = var
%10 = eq %9, 46:i32
pc %8 1:i1
pc %10 1:i1
infer %2


; start LHS (in $9)
%0:i32 = var
%1 = add %0, 3:i32
%2 = and %1, -4:i32 (hasExternalUses)
%3 = add %2, 4:i32
%4 = block 3
%5:i32 = var
%6:i32 = var
%7:i32 = var
%8 = phi %4, %5, %6, %7
%9 = ne %8, 0:i32
%10:i32 = var
%11 = eq %10, 46:i32
pc %9 1:i1
pc %11 1:i1
infer %3


; start LHS (in $9)
%0:i32 = var
%1 = add %0, 2:i32
%2:i32 = var
%3 = eq %2, 46:i32
pc %3 1:i1
infer %1


; start LHS (in $9)
%0:i32 = var
%1 = add %0, -65:i32
infer %1


; start LHS (in $9)
%0:i32 = var
%1 = add %0, -65:i32
%2 = ult 57:i32, %1
infer %2


; start LHS (in $9)
%0:i32 = var
%1 = add %0, 1:i32
infer %1


; start LHS (in $9)
%0:i32 = var
%1 = mul %0, 58:i32
infer %1


; start LHS (in $9)
%0:i32 = var
%1 = mul %0, 58:i32
%2:i32 = var
%3 = add %1, %2
infer %3


; start LHS (in $9)
%0:i32 = var
%1 = mul %0, 58:i32
%2:i32 = var
%3 = add %1, %2
%4 = add %3, 1464:i32
infer %4


; start LHS (in $9)
%0:i32 = var
%1 = and %0, 255:i32
infer %1


; start LHS (in $9)
%0:i32 = var
%1 = and %0, 255:i32 (hasExternalUses)
%2 = add %1, -1:i32
infer %2


; start LHS (in $9)
%0:i32 = var
%1 = and %0, 255:i32 (hasExternalUses)
%2 = add %1, -1:i32
%3 = ult %2, 8:i32
infer %3


; start LHS (in $9)
%0:i32 = var
%1 = eq %0, 0:i32
infer %1


; start LHS (in $9)
%0 = block 2
%1 = block 2
%2:i32 = var
%3 = add %2, -48:i32 (hasExternalUses)
%4 = phi %1, %3, -1:i32
%5 = phi %0, -1:i32, %4
%6 = slt -1:i32, %5
%7:i32 = var
%8 = add %7, -48:i32
%9 = ult %8, 10:i32
%10:i32 = zext %9
%11 = eq %10, 0:i32
blockpc %0 0 %11 1:i1
%12:i32 = zext %11
%13 = eq %12, 0:i32
blockpc %0 1 %13 1:i1
%14:i32 = var
%15 = eq %14, 36:i32
blockpc %1 0 %15 1:i1
%16:i32 = zext %15
%17 = eq %16, 0:i32
blockpc %1 1 %17 1:i1
infer %6


; start LHS (in $9)
%0:i32 = var
%1 = eq %0, 19:i32
infer %1


; start LHS (in $9)
%0 = block 2
%1 = block 2
%2:i32 = var
%3 = add %2, -48:i32 (hasExternalUses)
%4 = phi %1, %3, -1:i32
%5 = phi %0, -1:i32, %4
%6 = shl %5, 2:i32
%7:i32 = var
%8 = add %7, -48:i32
%9 = ult %8, 10:i32
%10:i32 = zext %9
%11 = eq %10, 0:i32
blockpc %0 0 %11 1:i1
%12:i32 = zext %11
%13 = eq %12, 0:i32
blockpc %0 1 %13 1:i1
%14:i32 = var
%15 = eq %14, 36:i32
blockpc %1 0 %15 1:i1
%16:i32 = zext %15
%17 = eq %16, 0:i32
blockpc %1 1 %17 1:i1
%18 = slt -1:i32, %5
%19:i32 = var
%20 = eq %19, 19:i32
%21:i32 = zext %20
%22 = eq %21, 0:i32
pc %18 1:i1
pc %22 1:i1
infer %6


; start LHS (in $9)
%0 = block 3
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4 = phi %0, %1, %2, %3
%5 = block 2
%6 = block 2
%7:i32 = var
%8 = add %7, -48:i32 (hasExternalUses)
%9 = phi %6, %8, -1:i32
%10 = phi %5, -1:i32, %9
%11 = shl %10, 2:i32
%12 = add %4, %11
%13:i32 = var
%14 = add %13, -48:i32
%15 = ult %14, 10:i32
%16:i32 = zext %15
%17 = eq %16, 0:i32
blockpc %5 0 %17 1:i1
%18:i32 = zext %17
%19 = eq %18, 0:i32
blockpc %5 1 %19 1:i1
%20:i32 = var
%21 = eq %20, 36:i32
blockpc %6 0 %21 1:i1
%22:i32 = zext %21
%23 = eq %22, 0:i32
blockpc %6 1 %23 1:i1
%24 = slt -1:i32, %10
%25:i32 = var
%26 = eq %25, 19:i32
%27:i32 = zext %26
%28 = eq %27, 0:i32
pc %24 1:i1
pc %28 1:i1
infer %12


; start LHS (in $9)
%0 = block 2
%1 = block 2
%2:i32 = var
%3 = add %2, -48:i32 (hasExternalUses)
%4 = phi %1, %3, -1:i32
%5 = phi %0, -1:i32, %4
%6 = shl %5, 3:i32
%7:i32 = var
%8 = add %7, -48:i32
%9 = ult %8, 10:i32
%10:i32 = zext %9
%11 = eq %10, 0:i32
blockpc %0 0 %11 1:i1
%12:i32 = zext %11
%13 = eq %12, 0:i32
blockpc %0 1 %13 1:i1
%14:i32 = var
%15 = eq %14, 36:i32
blockpc %1 0 %15 1:i1
%16:i32 = zext %15
%17 = eq %16, 0:i32
blockpc %1 1 %17 1:i1
%18 = slt -1:i32, %5
%19:i32 = var
%20 = eq %19, 19:i32
%21:i32 = zext %20
%22 = eq %21, 0:i32
pc %18 1:i1
pc %22 1:i1
infer %6


; start LHS (in $9)
%0 = block 3
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4 = phi %0, %1, %2, %3
%5 = block 2
%6 = block 2
%7:i32 = var
%8 = add %7, -48:i32 (hasExternalUses)
%9 = phi %6, %8, -1:i32
%10 = phi %5, -1:i32, %9
%11 = shl %10, 3:i32
%12 = add %4, %11
%13:i32 = var
%14 = add %13, -48:i32
%15 = ult %14, 10:i32
%16:i32 = zext %15
%17 = eq %16, 0:i32
blockpc %5 0 %17 1:i1
%18:i32 = zext %17
%19 = eq %18, 0:i32
blockpc %5 1 %19 1:i1
%20:i32 = var
%21 = eq %20, 36:i32
blockpc %6 0 %21 1:i1
%22:i32 = zext %21
%23 = eq %22, 0:i32
blockpc %6 1 %23 1:i1
%24 = slt -1:i32, %10
%25:i32 = var
%26 = eq %25, 19:i32
%27:i32 = zext %26
%28 = eq %27, 0:i32
pc %24 1:i1
pc %28 1:i1
infer %12


; start LHS (in $9)
%0 = block 3
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4 = phi %0, %1, %2, %3
%5 = eq %4, 0:i32
%6:i32 = var
%7 = eq %6, 19:i32
%8:i32 = zext %7
%9 = eq %8, 0:i32
pc %9 1:i1
infer %5


; start LHS (in $9)
%0 = block 3
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4 = phi %0, %1, %2, %3
%5 = eq %4, 0:i32
infer %5


; start LHS (in $9)
%0 = block 2
%1:i32 = var
%2:i32 = var
%3 = add %2, 1:i32 (hasExternalUses)
%4 = phi %0, %1, %3
%5 = add %4, -1:i32
infer %5


; start LHS (in $9)
%0:i32 = var
%1 = and %0, -33:i32
infer %1


; start LHS (in $9)
%0:i32 = var
%1 = ne %0, 0:i32
infer %1


; start LHS (in $9)
%0:i32 = var
%1 = and %0, 15:i32
infer %1


; start LHS (in $9)
%0:i32 = var
%1 = and %0, 15:i32
%2 = eq %1, 3:i32
infer %2


; start LHS (in $9)
%0:i32 = var
%1 = ne %0, 0:i32
%2:i32 = zext %1
%3:i32 = var
%4 = and %3, 15:i32
%5 = eq %4, 3:i32
%6:i32 = zext %5
%7 = and %2, %6
infer %7


; start LHS (in $9)
%0:i32 = var
%1 = ne %0, 0:i32
%2:i32 = zext %1
%3:i32 = var
%4 = and %3, 15:i32
%5 = eq %4, 3:i32
%6:i32 = zext %5
%7 = and %2, %6
%8 = eq %7, 0:i32
infer %8


; start LHS (in $9)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4 = ashr %3, 24:i32
%5 = add %4, -32:i32
%6 = shl 1:i32, %5
%7:i32 = var
%8 = or %6, %7 (hasExternalUses)
%9 = phi %2, 0:i32, %8
%10 = or %9, 8192:i32 (hasExternalUses)
%11 = phi %1, %10, %9
%12 = phi %0, %11, %9
%13 = and %12, -65537:i32
%14:i32 = var
%15 = ult 31:i32, %14
%16:i32 = zext %15
%17:i32 = var
%18 = eq %17, 0:i32
%19:i32 = zext %18
%20 = or %16, %19
%21 = ne %20, 0:i32
blockpc %2 0 %21 1:i1
%22 = eq %20, 0:i32
blockpc %2 1 %22 1:i1
%23:i32 = var
%24:i32 = var
%25 = phi %2, %23, %24
%26 = and %25, 255:i32
%27 = eq %26, 42:i32
blockpc %0 0 %27 1:i1
%28:i32 = var
blockpc %0 1 %28 1:i1
%29:i32 = var
blockpc %1 0 %29 1:i1
%30:i32 = var
blockpc %1 1 %30 1:i1
infer %13


; start LHS (in $9)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4 = ashr %3, 24:i32
%5 = add %4, -32:i32
%6 = shl 1:i32, %5
%7:i32 = var
%8 = or %6, %7 (hasExternalUses)
%9 = phi %2, 0:i32, %8
%10 = or %9, 8192:i32 (hasExternalUses)
%11 = phi %1, %10, %9
%12 = phi %0, %11, %9
%13 = and %12, 8192:i32
%14:i32 = var
%15 = ult 31:i32, %14
%16:i32 = zext %15
%17:i32 = var
%18 = eq %17, 0:i32
%19:i32 = zext %18
%20 = or %16, %19
%21 = ne %20, 0:i32
blockpc %2 0 %21 1:i1
%22 = eq %20, 0:i32
blockpc %2 1 %22 1:i1
%23:i32 = var
%24:i32 = var
%25 = phi %2, %23, %24
%26 = and %25, 255:i32
%27 = eq %26, 42:i32
blockpc %0 0 %27 1:i1
%28:i32 = var
blockpc %0 1 %28 1:i1
%29:i32 = var
blockpc %1 0 %29 1:i1
%30:i32 = var
blockpc %1 1 %30 1:i1
infer %13


; start LHS (in $9)
%0 = block 2
%1:i32 = var
%2 = and %1, -33:i32 (hasExternalUses)
%3 = phi %0, %2, %1
%4 = sub %3, 65:i32
%5:i32 = var
%6 = ne %5, 0:i32
%7:i32 = zext %6
%8 = and %1, 15:i32
%9 = eq %8, 3:i32
%10:i32 = zext %9
%11 = and %7, %10
%12 = eq %11, 0:i32
blockpc %0 0 %12 1:i1
%13:i32 = zext %12
%14 = eq %13, 0:i32
blockpc %0 1 %14 1:i1
infer %4


; start LHS (in $9)
%0:i32 = var
%1 = and %0, 255:i32
infer %1


; start LHS (in $9)
%0:i32 = var
%1 = and %0, 255:i32
%2 = shl %1, 24:i32
infer %2


; start LHS (in $9)
%0:i32 = var
%1 = and %0, 255:i32
%2 = shl %1, 24:i32
%3 = ashr %2, 24:i32
infer %3


; start LHS (in $9)
%0 = block 3
%1:i32 = var
%2:i32 = var
%3 = block 2
%4 = block 2
%5:i32 = var
%6 = phi %4, %5, 0:i32
%7 = phi %3, %6, -1:i32
%8 = phi %0, %1, %2, %7
%9 = ule %8, 8:i32
%10:i32 = var
%11 = eq %10, 46:i32
blockpc %3 0 %11 1:i1
%12:i32 = zext %11
%13 = eq %12, 0:i32
blockpc %3 1 %13 1:i1
%14 = block 3
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18 = phi %14, %15, %16, %17
%19 = ne %18, 0:i32
blockpc %4 0 %19 1:i1
%20 = eq %18, 0:i32
blockpc %4 1 %20 1:i1
infer %9


; start LHS (in $9)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4:i32 = var
%5 = shl 1:i32, %4
%6:i32 = var
%7 = or %5, %6 (hasExternalUses)
%8 = phi %3, 0:i32, %7
%9 = or %8, 8192:i32 (hasExternalUses)
%10 = phi %2, %9, %8
%11 = phi %1, %10, %8
%12 = and %11, -65537:i32 (hasExternalUses)
%13 = phi %0, %12, %11
%14 = or %13, 8:i32
%15 = and %11, 8192:i32
%16 = ne %15, 0:i32
blockpc %0 0 %16 1:i1
%17 = eq %15, 0:i32
blockpc %0 1 %17 1:i1
%18:i32 = var
%19 = ult 31:i32, %18
%20:i32 = zext %19
%21:i32 = var
%22 = eq %21, 0:i32
%23:i32 = zext %22
%24 = or %20, %23
%25 = ne %24, 0:i32
blockpc %3 0 %25 1:i1
%26 = eq %24, 0:i32
blockpc %3 1 %26 1:i1
%27:i32 = var
%28:i32 = var
%29 = phi %3, %27, %28
%30 = and %29, 255:i32
%31 = eq %30, 42:i32
blockpc %1 0 %31 1:i1
%32:i32 = var
blockpc %1 1 %32 1:i1
%33:i32 = var
blockpc %2 0 %33 1:i1
%34:i32 = var
blockpc %2 1 %34 1:i1
infer %14


; start LHS (in $9)
%0 = block 3
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4 = phi %0, %1, %2, %3
%5:i32 = var
%6 = sub %4, %5
infer %6


; start LHS (in $9)
%0 = block 3
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4 = phi %0, %1, %2, %3
%5:i32 = var
%6 = sub %4, %5 (hasExternalUses)
%7 = add %6, 1:i32
infer %7


; start LHS (in $9)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4:i32 = var
%5 = shl 1:i32, %4
%6:i32 = var
%7 = or %5, %6 (hasExternalUses)
%8 = phi %3, 0:i32, %7
%9 = or %8, 8192:i32 (hasExternalUses)
%10 = phi %2, %9, %8
%11 = phi %1, %10, %8
%12 = and %11, -65537:i32 (hasExternalUses)
%13 = phi %0, %12, %11
%14 = and %13, 8:i32
%15 = and %11, 8192:i32
%16 = ne %15, 0:i32
blockpc %0 0 %16 1:i1
%17 = eq %15, 0:i32
blockpc %0 1 %17 1:i1
%18:i32 = var
%19 = ult 31:i32, %18
%20:i32 = zext %19
%21:i32 = var
%22 = eq %21, 0:i32
%23:i32 = zext %22
%24 = or %20, %23
%25 = ne %24, 0:i32
blockpc %3 0 %25 1:i1
%26 = eq %24, 0:i32
blockpc %3 1 %26 1:i1
%27:i32 = var
%28:i32 = var
%29 = phi %3, %27, %28
%30 = and %29, 255:i32
%31 = eq %30, 42:i32
blockpc %1 0 %31 1:i1
%32:i32 = var
blockpc %1 1 %32 1:i1
%33:i32 = var
blockpc %2 0 %33 1:i1
%34:i32 = var
blockpc %2 1 %34 1:i1
infer %14


; start LHS (in $9)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4:i32 = var
%5:i32 = var
%6 = or %4, %5 (hasExternalUses)
%7 = phi %3, 0:i32, %6
%8 = or %7, 8192:i32 (hasExternalUses)
%9 = phi %2, %8, %7
%10 = phi %1, %9, %7
%11 = and %10, -65537:i32 (hasExternalUses)
%12 = phi %0, %11, %10
%13 = and %12, 8:i32
%14 = eq %13, 0:i32
%15 = and %10, 8192:i32
%16 = ne %15, 0:i32
blockpc %0 0 %16 1:i1
%17 = eq %15, 0:i32
blockpc %0 1 %17 1:i1
%18:i32 = var
%19 = ult 31:i32, %18
%20:i32 = zext %19
%21:i32 = var
%22 = eq %21, 0:i32
%23:i32 = zext %22
%24 = or %20, %23
%25 = ne %24, 0:i32
blockpc %3 0 %25 1:i1
%26 = eq %24, 0:i32
blockpc %3 1 %26 1:i1
%27:i32 = var
%28:i32 = var
%29 = phi %3, %27, %28
%30 = and %29, 255:i32
%31 = eq %30, 42:i32
blockpc %1 0 %31 1:i1
%32:i32 = var
blockpc %1 1 %32 1:i1
%33:i32 = var
blockpc %2 0 %33 1:i1
%34:i32 = var
blockpc %2 1 %34 1:i1
infer %14


; start LHS (in $9)
%0 = block 3
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4 = phi %0, %1, %2, %3
%5:i32 = var
%6 = sub %4, %5 (hasExternalUses)
%7 = block 3
%8:i32 = var
%9:i32 = var
%10 = block 2
%11 = block 2
%12:i32 = var
%13 = phi %11, %12, 0:i32
%14 = phi %10, %13, -1:i32
%15 = phi %7, %8, %9, %14
%16 = slt %6, %15
%17:i32 = var
%18 = eq %17, 46:i32
blockpc %10 0 %18 1:i1
%19:i32 = zext %18
%20 = eq %19, 0:i32
blockpc %10 1 %20 1:i1
%21:i32 = var
%22:i32 = var
%23:i32 = var
%24 = phi %0, %21, %22, %23
%25 = ne %24, 0:i32
blockpc %11 0 %25 1:i1
%26 = eq %24, 0:i32
blockpc %11 1 %26 1:i1
infer %16


; start LHS (in $9)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4:i32 = var
%5 = phi %3, 0:i32, %4
%6 = or %5, 8192:i32 (hasExternalUses)
%7 = phi %2, %6, %5
%8 = phi %1, %7, %5
%9 = and %8, -65537:i32 (hasExternalUses)
%10 = phi %0, %9, %8
%11 = and %10, 8:i32
%12 = eq %11, 0:i32
%13:i32 = zext %12
%14 = block 3
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18 = phi %14, %15, %16, %17
%19:i32 = var
%20 = sub %18, %19 (hasExternalUses)
%21 = block 3
%22:i32 = var
%23:i32 = var
%24 = block 2
%25 = block 2
%26:i32 = var
%27 = phi %25, %26, 0:i32
%28 = phi %24, %27, -1:i32
%29 = phi %21, %22, %23, %28
%30 = slt %20, %29
%31:i32 = zext %30
%32 = or %13, %31
%33:i32 = var
blockpc %0 0 %33 1:i1
%34:i32 = var
blockpc %0 1 %34 1:i1
%35:i32 = var
blockpc %1 0 %35 1:i1
%36:i32 = var
blockpc %1 1 %36 1:i1
%37:i32 = var
blockpc %2 0 %37 1:i1
%38:i32 = var
blockpc %2 1 %38 1:i1
%39:i32 = var
blockpc %3 0 %39 1:i1
%40:i32 = var
blockpc %3 1 %40 1:i1
%41:i32 = var
blockpc %24 0 %41 1:i1
%42:i32 = var
blockpc %24 1 %42 1:i1
%43:i32 = var
blockpc %25 0 %43 1:i1
%44:i32 = var
blockpc %25 1 %44 1:i1
infer %32


; start LHS (in $9)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4 = block 2
%5:i32 = var
%6 = phi %4, 0:i32, %5
%7 = phi %2, %3, %6
%8 = phi %1, %7, %6
%9 = and %8, -65537:i32 (hasExternalUses)
%10 = phi %0, %9, %8
%11 = and %10, 8:i32
%12 = eq %11, 0:i32
%13:i32 = zext %12
%14 = block 3
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18 = phi %14, %15, %16, %17
%19:i32 = var
%20 = sub %18, %19 (hasExternalUses)
%21 = block 3
%22:i32 = var
%23:i32 = var
%24 = block 2
%25 = block 2
%26:i32 = var
%27 = phi %25, %26, 0:i32
%28 = phi %24, %27, -1:i32
%29 = phi %21, %22, %23, %28
%30 = slt %20, %29
%31:i32 = zext %30
%32 = or %13, %31
%33 = eq %32, 0:i32
%34:i32 = var
blockpc %0 0 %34 1:i1
%35:i32 = var
blockpc %0 1 %35 1:i1
%36:i32 = var
blockpc %1 0 %36 1:i1
%37:i32 = var
blockpc %1 1 %37 1:i1
%38:i32 = var
blockpc %2 0 %38 1:i1
%39:i32 = var
blockpc %2 1 %39 1:i1
%40:i32 = var
blockpc %4 0 %40 1:i1
%41:i32 = var
blockpc %4 1 %41 1:i1
%42:i32 = var
blockpc %24 0 %42 1:i1
%43:i32 = var
blockpc %24 1 %43 1:i1
%44:i32 = var
blockpc %25 0 %44 1:i1
%45:i32 = var
blockpc %25 1 %45 1:i1
infer %33


; start LHS (in $9)
%0:i64 = var
%1 = slt %0, 0:i64
infer %1


; start LHS (in $9)
%0:i64 = var
%1 = sub 0:i64, %0
%2 = slt %0, 0:i64
pc %2 1:i1
infer %1


; start LHS (in $9)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4:i32 = var
%5 = shl 1:i32, %4
%6:i32 = var
%7 = or %5, %6 (hasExternalUses)
%8 = phi %3, 0:i32, %7
%9 = or %8, 8192:i32 (hasExternalUses)
%10 = phi %2, %9, %8
%11 = phi %1, %10, %8
%12 = and %11, -65537:i32 (hasExternalUses)
%13 = phi %0, %12, %11
%14 = and %13, 2048:i32
%15 = and %11, 8192:i32
%16 = ne %15, 0:i32
blockpc %0 0 %16 1:i1
%17 = eq %15, 0:i32
blockpc %0 1 %17 1:i1
%18:i32 = var
%19 = ult 31:i32, %18
%20:i32 = zext %19
%21:i32 = var
%22 = eq %21, 0:i32
%23:i32 = zext %22
%24 = or %20, %23
%25 = ne %24, 0:i32
blockpc %3 0 %25 1:i1
%26 = eq %24, 0:i32
blockpc %3 1 %26 1:i1
%27:i32 = var
%28:i32 = var
%29 = phi %3, %27, %28
%30 = and %29, 255:i32
%31 = eq %30, 42:i32
blockpc %1 0 %31 1:i1
%32:i32 = var
blockpc %1 1 %32 1:i1
%33:i32 = var
blockpc %2 0 %33 1:i1
%34:i32 = var
blockpc %2 1 %34 1:i1
%35:i32 = var
pc %35 1:i1
infer %14


; start LHS (in $9)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4:i32 = var
%5:i32 = var
%6 = or %4, %5 (hasExternalUses)
%7 = phi %3, 0:i32, %6
%8 = or %7, 8192:i32 (hasExternalUses)
%9 = phi %2, %8, %7
%10 = phi %1, %9, %7
%11 = and %10, -65537:i32 (hasExternalUses)
%12 = phi %0, %11, %10
%13 = and %12, 2048:i32
%14 = eq %13, 0:i32
%15 = and %10, 8192:i32
%16 = ne %15, 0:i32
blockpc %0 0 %16 1:i1
%17 = eq %15, 0:i32
blockpc %0 1 %17 1:i1
%18:i32 = var
%19 = ult 31:i32, %18
%20:i32 = zext %19
%21:i32 = var
%22 = eq %21, 0:i32
%23:i32 = zext %22
%24 = or %20, %23
%25 = ne %24, 0:i32
blockpc %3 0 %25 1:i1
%26 = eq %24, 0:i32
blockpc %3 1 %26 1:i1
%27:i32 = var
%28:i32 = var
%29 = phi %3, %27, %28
%30 = and %29, 255:i32
%31 = eq %30, 42:i32
blockpc %1 0 %31 1:i1
%32:i32 = var
blockpc %1 1 %32 1:i1
%33:i32 = var
blockpc %2 0 %33 1:i1
%34:i32 = var
blockpc %2 1 %34 1:i1
%35:i32 = var
pc %35 1:i1
infer %14


; start LHS (in $9)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4:i32 = var
%5 = shl 1:i32, %4
%6:i32 = var
%7 = or %5, %6 (hasExternalUses)
%8 = phi %3, 0:i32, %7
%9 = or %8, 8192:i32 (hasExternalUses)
%10 = phi %2, %9, %8
%11 = phi %1, %10, %8
%12 = and %11, -65537:i32 (hasExternalUses)
%13 = phi %0, %12, %11
%14 = and %13, 1:i32
%15 = and %11, 8192:i32
%16 = ne %15, 0:i32
blockpc %0 0 %16 1:i1
%17 = eq %15, 0:i32
blockpc %0 1 %17 1:i1
%18:i32 = var
%19 = ult 31:i32, %18
%20:i32 = zext %19
%21:i32 = var
%22 = eq %21, 0:i32
%23:i32 = zext %22
%24 = or %20, %23
%25 = ne %24, 0:i32
blockpc %3 0 %25 1:i1
%26 = eq %24, 0:i32
blockpc %3 1 %26 1:i1
%27:i32 = var
%28:i32 = var
%29 = phi %3, %27, %28
%30 = and %29, 255:i32
%31 = eq %30, 42:i32
blockpc %1 0 %31 1:i1
%32:i32 = var
blockpc %1 1 %32 1:i1
%33:i32 = var
blockpc %2 0 %33 1:i1
%34:i32 = var
blockpc %2 1 %34 1:i1
%35:i32 = var
pc %35 1:i1
infer %14


; start LHS (in $9)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4:i32 = var
%5 = shl 1:i32, %4
%6:i32 = var
%7 = or %5, %6 (hasExternalUses)
%8 = phi %3, 0:i32, %7
%9 = or %8, 8192:i32 (hasExternalUses)
%10 = phi %2, %9, %8
%11 = phi %1, %10, %8
%12 = and %11, -65537:i32 (hasExternalUses)
%13 = phi %0, %12, %11
%14 = and %13, 2049:i32
%15 = and %11, 8192:i32
%16 = ne %15, 0:i32
blockpc %0 0 %16 1:i1
%17 = eq %15, 0:i32
blockpc %0 1 %17 1:i1
%18:i32 = var
%19 = ult 31:i32, %18
%20:i32 = zext %19
%21:i32 = var
%22 = eq %21, 0:i32
%23:i32 = zext %22
%24 = or %20, %23
%25 = ne %24, 0:i32
blockpc %3 0 %25 1:i1
%26 = eq %24, 0:i32
blockpc %3 1 %26 1:i1
%27:i32 = var
%28:i32 = var
%29 = phi %3, %27, %28
%30 = and %29, 255:i32
%31 = eq %30, 42:i32
blockpc %1 0 %31 1:i1
%32:i32 = var
blockpc %1 1 %32 1:i1
%33:i32 = var
blockpc %2 0 %33 1:i1
%34:i32 = var
blockpc %2 1 %34 1:i1
%35:i32 = var
pc %35 1:i1
infer %14


; start LHS (in $9)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4:i32 = var
%5:i32 = var
%6 = or %4, %5 (hasExternalUses)
%7 = phi %3, 0:i32, %6
%8 = or %7, 8192:i32 (hasExternalUses)
%9 = phi %2, %8, %7
%10 = phi %1, %9, %7
%11 = and %10, -65537:i32 (hasExternalUses)
%12 = phi %0, %11, %10
%13 = and %12, 2049:i32
%14 = ne %13, 0:i32
%15 = and %10, 8192:i32
%16 = ne %15, 0:i32
blockpc %0 0 %16 1:i1
%17 = eq %15, 0:i32
blockpc %0 1 %17 1:i1
%18:i32 = var
%19 = ult 31:i32, %18
%20:i32 = zext %19
%21:i32 = var
%22 = eq %21, 0:i32
%23:i32 = zext %22
%24 = or %20, %23
%25 = ne %24, 0:i32
blockpc %3 0 %25 1:i1
%26 = eq %24, 0:i32
blockpc %3 1 %26 1:i1
%27:i32 = var
%28:i32 = var
%29 = phi %3, %27, %28
%30 = and %29, 255:i32
%31 = eq %30, 42:i32
blockpc %1 0 %31 1:i1
%32:i32 = var
blockpc %1 1 %32 1:i1
%33:i32 = var
blockpc %2 0 %33 1:i1
%34:i32 = var
blockpc %2 1 %34 1:i1
%35:i32 = var
pc %35 1:i1
infer %14


; start LHS (in $9)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4:i32 = var
%5 = phi %3, 0:i32, %4
%6 = or %5, 8192:i32 (hasExternalUses)
%7 = phi %2, %6, %5
%8 = phi %1, %7, %5
%9 = and %8, -65537:i32 (hasExternalUses)
%10 = phi %0, %9, %8
%11 = and %10, 2048:i32
%12 = eq %11, 0:i32
%13:i32 = zext %12
%14 = eq %13, 0:i32
%15 = and %8, 8192:i32
%16 = ne %15, 0:i32
blockpc %0 0 %16 1:i1
%17 = eq %15, 0:i32
blockpc %0 1 %17 1:i1
%18:i32 = var
%19 = ult 31:i32, %18
%20:i32 = zext %19
%21:i32 = var
%22 = eq %21, 0:i32
%23:i32 = zext %22
%24 = or %20, %23
%25 = ne %24, 0:i32
blockpc %3 0 %25 1:i1
%26 = eq %24, 0:i32
blockpc %3 1 %26 1:i1
%27:i32 = var
%28:i32 = var
%29 = phi %3, %27, %28
%30 = and %29, 255:i32
%31 = eq %30, 42:i32
blockpc %1 0 %31 1:i1
%32:i32 = var
blockpc %1 1 %32 1:i1
%33:i32 = var
blockpc %2 0 %33 1:i1
%34:i32 = var
blockpc %2 1 %34 1:i1
%35:i32 = var
pc %35 1:i1
infer %14


; start LHS (in $9)
%0:i32 = var
%1 = eq %0, 0:i32
infer %1


; start LHS (in $9)
%0 = block 2
%1 = block 2
%2:i32 = var
%3 = and %2, -33:i32 (hasExternalUses)
%4 = phi %1, %3, %2
%5 = phi %0, 120:i32, %4
%6 = and %5, 32:i32
%7:i32 = var
%8 = ne %7, 0:i32
%9:i32 = zext %8
%10 = and %2, 15:i32
%11 = eq %10, 3:i32
%12:i32 = zext %11
%13 = and %9, %12
%14 = eq %13, 0:i32
blockpc %1 0 %14 1:i1
%15:i32 = zext %14
%16 = eq %15, 0:i32
blockpc %1 1 %16 1:i1
infer %6


; start LHS (in $9)
%0 = block 2
%1 = block 2
%2:i32 = var
%3 = and %2, -33:i32 (hasExternalUses)
%4 = phi %1, %3, %2
%5 = phi %0, 120:i32, %4
%6 = ashr %5, 4:i32
%7:i32 = var
%8 = ne %7, 0:i32
%9:i32 = zext %8
%10 = and %2, 15:i32
%11 = eq %10, 3:i32
%12:i32 = zext %11
%13 = and %9, %12
%14 = eq %13, 0:i32
blockpc %1 0 %14 1:i1
%15:i32 = zext %14
%16 = eq %15, 0:i32
blockpc %1 1 %16 1:i1
infer %6


; start LHS (in $9)
%0 = block 2
%1 = block 2
%2:i32 = var
%3 = and %2, -33:i32 (hasExternalUses)
%4 = phi %1, %3, %2
%5 = phi %0, 120:i32, %4
%6 = ashr %5, 4:i32
%7 = add %6, 1993:i32
%8:i32 = var
%9 = ne %8, 0:i32
%10:i32 = zext %9
%11 = and %2, 15:i32
%12 = eq %11, 3:i32
%13:i32 = zext %12
%14 = and %10, %13
%15 = eq %14, 0:i32
blockpc %1 0 %15 1:i1
%16:i32 = zext %15
%17 = eq %16, 0:i32
blockpc %1 1 %17 1:i1
infer %7


; start LHS (in $9)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4 = block 2
%5:i32 = var
%6 = phi %4, 0:i32, %5
%7 = or %6, 8192:i32 (hasExternalUses)
%8 = phi %3, %7, %6
%9 = phi %2, %8, %6
%10 = and %9, -65537:i32 (hasExternalUses)
%11 = phi %1, %10, %9
%12 = or %11, 8:i32 (hasExternalUses)
%13 = phi %0, %12, %11
%14 = and %13, 8:i32
%15 = and %9, 8192:i32
%16 = ne %15, 0:i32
blockpc %1 0 %16 1:i1
%17 = eq %15, 0:i32
blockpc %1 1 %17 1:i1
%18:i32 = var
%19 = ult 31:i32, %18
%20:i32 = zext %19
%21:i32 = var
%22 = eq %21, 0:i32
%23:i32 = zext %22
%24 = or %20, %23
%25 = ne %24, 0:i32
blockpc %4 0 %25 1:i1
%26 = eq %24, 0:i32
blockpc %4 1 %26 1:i1
%27:i32 = var
%28:i32 = var
%29 = phi %4, %27, %28
%30 = and %29, 255:i32
%31 = eq %30, 42:i32
blockpc %2 0 %31 1:i1
%32:i32 = var
blockpc %2 1 %32 1:i1
%33:i32 = var
blockpc %3 0 %33 1:i1
%34:i32 = var
blockpc %3 1 %34 1:i1
infer %14


; start LHS (in $9)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4 = block 2
%5:i32 = var
%6 = phi %4, 0:i32, %5
%7 = or %6, 8192:i32 (hasExternalUses)
%8 = phi %3, %7, %6
%9 = phi %2, %8, %6
%10 = and %9, -65537:i32 (hasExternalUses)
%11 = phi %1, %10, %9
%12 = or %11, 8:i32 (hasExternalUses)
%13 = phi %0, %12, %11
%14 = and %13, 8:i32
%15 = eq %14, 0:i32
%16 = and %9, 8192:i32
%17 = ne %16, 0:i32
blockpc %1 0 %17 1:i1
%18 = eq %16, 0:i32
blockpc %1 1 %18 1:i1
%19:i32 = var
%20 = ult 31:i32, %19
%21:i32 = zext %20
%22:i32 = var
%23 = eq %22, 0:i32
%24:i32 = zext %23
%25 = or %21, %24
%26 = ne %25, 0:i32
blockpc %4 0 %26 1:i1
%27:i32 = var
blockpc %4 1 %27 1:i1
%28:i32 = var
%29:i32 = var
%30 = phi %4, %28, %29
%31 = and %30, 255:i32
%32 = eq %31, 42:i32
blockpc %2 0 %32 1:i1
%33:i32 = var
blockpc %2 1 %33 1:i1
%34:i32 = var
blockpc %3 0 %34 1:i1
%35:i32 = var
blockpc %3 1 %35 1:i1
infer %15


; start LHS (in $9)
%0:i64 = var
%1 = eq %0, 0:i64
infer %1


; start LHS (in $9)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4:i32 = var
%5 = block 2
%6:i32 = var
%7 = phi %5, 0:i32, %6
%8 = phi %3, %4, %7
%9 = phi %2, %8, %7
%10 = and %9, -65537:i32 (hasExternalUses)
%11 = phi %1, %10, %9
%12 = or %11, 8:i32 (hasExternalUses)
%13 = phi %0, %12, %11
%14 = and %13, 8:i32
%15 = eq %14, 0:i32
%16:i32 = zext %15
%17:i64 = var
%18 = eq %17, 0:i64
%19:i32 = zext %18
%20 = or %16, %19
%21 = and %9, 8192:i32
%22 = ne %21, 0:i32
blockpc %1 0 %22 1:i1
%23 = eq %21, 0:i32
blockpc %1 1 %23 1:i1
%24:i32 = var
%25 = ult 31:i32, %24
%26:i32 = zext %25
%27:i32 = var
%28 = eq %27, 0:i32
%29:i32 = zext %28
%30 = or %26, %29
%31 = ne %30, 0:i32
blockpc %5 0 %31 1:i1
%32:i32 = var
blockpc %5 1 %32 1:i1
%33:i32 = var
%34:i32 = var
%35 = phi %5, %33, %34
%36 = and %35, 255:i32
%37 = eq %36, 42:i32
blockpc %2 0 %37 1:i1
%38:i32 = var
blockpc %2 1 %38 1:i1
%39:i32 = var
blockpc %3 0 %39 1:i1
%40:i32 = var
blockpc %3 1 %40 1:i1
infer %20


; start LHS (in $9)
%0:i32 = var
%1 = eq %0, 0:i32
infer %1


; start LHS (in $9)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = block 2
%4:i32 = var
%5 = phi %3, %4, 2003:i32
%6 = phi %1, %2, %5
%7 = sub %0, %6
%8 = eq %4, 0:i32
blockpc %3 0 %8 1:i1
%9:i32 = zext %8
%10 = eq %9, 0:i32
blockpc %3 1 %10 1:i1
infer %7


; start LHS (in $9)
%0 = block 2
%1:i32 = var
%2 = block 2
%3:i32 = var
%4 = phi %2, %3, 2003:i32
%5 = phi %0, %1, %4
%6 = block 3
%7:i32 = var
%8:i32 = var
%9 = block 2
%10 = block 2
%11:i32 = var
%12 = phi %10, %11, 0:i32
%13 = phi %9, %12, -1:i32
%14 = phi %6, %7, %8, %13
%15 = add %5, %14
%16 = eq %3, 0:i32
blockpc %2 0 %16 1:i1
%17:i32 = zext %16
%18 = eq %17, 0:i32
blockpc %2 1 %18 1:i1
%19:i32 = var
%20 = eq %19, 46:i32
blockpc %9 0 %20 1:i1
%21:i32 = zext %20
%22 = eq %21, 0:i32
blockpc %9 1 %22 1:i1
%23 = block 3
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27 = phi %23, %24, %25, %26
%28 = ne %27, 0:i32
blockpc %10 0 %28 1:i1
%29:i32 = var
blockpc %10 1 %29 1:i1
infer %15


; start LHS (in $9)
%0:i32 = var
%1 = eq %0, 0:i32 (hasExternalUses)
%2:i32 = zext %1
%3 = eq %2, 0:i32
infer %3


; start LHS (in $9)
%0:i32 = var
%1 = eq %0, 0:i32 (hasExternalUses)
%2:i32 = zext %1
%3 = eq %2, 0:i32
infer %3


; start LHS (in $9)
%0:i32 = var
%1 = eq %0, 0:i32
infer %1


; start LHS (in $9)
%0:i32 = var
%1 = slt %0, 0:i32
infer %1


; start LHS (in $9)
%0 = block 2
%1 = block 3
%2:i32 = var
%3:i32 = var
%4 = block 2
%5 = block 2
%6:i32 = var
%7 = phi %5, %6, 0:i32
%8 = phi %4, %7, -1:i32
%9 = phi %1, %2, %3, %8
%10 = phi %0, -1:i32, %9
%11:i32 = var
%12 = sub %10, %11
%13:i32 = var
%14 = eq %13, 46:i32
blockpc %4 0 %14 1:i1
%15:i32 = zext %14
%16 = eq %15, 0:i32
blockpc %4 1 %16 1:i1
%17 = block 3
%18:i32 = var
%19:i32 = var
%20:i32 = var
%21 = phi %17, %18, %19, %20
%22 = ne %21, 0:i32
blockpc %5 0 %22 1:i1
%23 = eq %21, 0:i32
blockpc %5 1 %23 1:i1
infer %12


; start LHS (in $9)
%0 = block 2
%1 = block 3
%2:i32 = var
%3:i32 = var
%4 = block 2
%5 = block 2
%6:i32 = var
%7 = phi %5, %6, 0:i32
%8 = phi %4, %7, -1:i32
%9 = phi %1, %2, %3, %8
%10 = phi %0, -1:i32, %9
%11:i32 = var
%12 = sub %10, %11
%13:i32 = var
%14 = ult %12, %13
%15:i32 = var
%16 = eq %15, 46:i32
blockpc %4 0 %16 1:i1
%17:i32 = zext %16
%18 = eq %17, 0:i32
blockpc %4 1 %18 1:i1
%19 = block 3
%20:i32 = var
%21:i32 = var
%22:i32 = var
%23 = phi %19, %20, %21, %22
%24 = ne %23, 0:i32
blockpc %5 0 %24 1:i1
%25 = eq %23, 0:i32
blockpc %5 1 %25 1:i1
infer %14


; start LHS (in $9)
%0:i32 = var
%1 = slt %0, 0:i32
%2:i32 = zext %1
%3 = block 2
%4 = block 3
%5:i32 = var
%6:i32 = var
%7 = block 2
%8 = block 2
%9:i32 = var
%10 = phi %8, %9, 0:i32
%11 = phi %7, %10, -1:i32
%12 = phi %4, %5, %6, %11
%13 = phi %3, -1:i32, %12
%14:i32 = var
%15 = sub %13, %14
%16 = ult %15, %0
%17:i32 = zext %16
%18 = or %2, %17
%19:i32 = var
%20 = eq %19, 46:i32
blockpc %7 0 %20 1:i1
%21:i32 = zext %20
%22 = eq %21, 0:i32
blockpc %7 1 %22 1:i1
%23 = block 3
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27 = phi %23, %24, %25, %26
%28 = ne %27, 0:i32
blockpc %8 0 %28 1:i1
%29:i32 = var
blockpc %8 1 %29 1:i1
infer %18


; start LHS (in $9)
%0:i32 = var
%1 = add %0, 4:i32
infer %1


; start LHS (in $9)
%0:i32 = var
%1:i32 = var
%2 = add %0, %1
infer %2


; start LHS (in $9)
%0:i32 = var
%1:i32 = var
%2 = add %0, %1 (hasExternalUses)
%3 = block 2
%4 = block 3
%5:i32 = var
%6:i32 = var
%7 = block 2
%8 = block 2
%9:i32 = var
%10 = phi %8, %9, 0:i32
%11 = phi %7, %10, -1:i32
%12 = phi %4, %5, %6, %11
%13 = phi %3, -1:i32, %12
%14 = ult %2, %13
%15:i32 = var
%16 = eq %15, 46:i32
blockpc %7 0 %16 1:i1
%17:i32 = zext %16
%18 = eq %17, 0:i32
blockpc %7 1 %18 1:i1
%19 = block 3
%20:i32 = var
%21:i32 = var
%22:i32 = var
%23 = phi %19, %20, %21, %22
%24 = ne %23, 0:i32
blockpc %8 0 %24 1:i1
%25 = eq %23, 0:i32
blockpc %8 1 %25 1:i1
infer %14


; start LHS (in $9)
%0 = block 3
%1:i32 = var
%2:i32 = var
%3 = phi %0, %1, %2, %2
%4 = slt %3, 0:i32
infer %4


; start LHS (in $9)
%0:i32 = var
%1 = eq %0, 0:i32
%2 = block 3
%3:i32 = var
%4:i32 = var
%5 = add %4, %3
%6 = phi %2, %3, %3, %5
%7 = ne %6, 0:i32
pc %7 1:i1
infer %1


; start LHS (in $9)
%0:i32 = var
%1:i32 = var
%2 = add %0, %1
%3 = block 3
%4:i32 = var
%5:i32 = var
%6 = add %5, %4
%7 = phi %3, %4, %4, %6
%8 = ne %7, 0:i32
pc %8 1:i1
infer %2


; start LHS (in $9)
%0 = block 3
%1:i32 = var
%2:i32 = var
%3 = add %2, %1 (hasExternalUses)
%4 = phi %0, %1, %1, %3
%5:i32 = var
%6:i32 = var
%7 = add %5, %6 (hasExternalUses)
%8 = slt %4, %7
%9 = ne %4, 0:i32
pc %9 1:i1
infer %8


; start LHS (in $9)
%0:i32 = var
%1 = add %0, 4:i32
%2 = block 3
%3:i32 = var
%4:i32 = var
%5 = add %4, %3
%6 = phi %2, %3, %3, %5
%7 = ne %6, 0:i32
pc %7 1:i1
infer %1


; start LHS (in $9)
%0:i32 = var
%1:i32 = var
%2 = add %0, %1 (hasExternalUses)
%3 = block 3
%4:i32 = var
%5:i32 = var
%6 = add %5, %4 (hasExternalUses)
%7 = phi %3, %4, %4, %6
%8 = ult %2, %7
%9 = ne %7, 0:i32
pc %9 1:i1
infer %8


; start LHS (in $9)
%0 = block 3
%1 = block 2
%2 = block 2
%3 = block 2
%4 = block 2
%5:i32 = var
%6:i32 = var
%7 = or %5, %6 (hasExternalUses)
%8 = phi %4, 0:i32, %7
%9 = or %8, 8192:i32 (hasExternalUses)
%10 = phi %3, %9, %8
%11 = phi %2, %10, %8
%12 = and %11, -65537:i32 (hasExternalUses)
%13 = phi %1, %12, %11
%14 = block 2
%15 = or %13, 8:i32 (hasExternalUses)
%16 = phi %14, %15, %13
%17 = phi %0, %13, %16, %13
%18 = and %17, -65537:i32
%19 = and %11, 8192:i32
%20 = ne %19, 0:i32
blockpc %1 0 %20 1:i1
%21 = eq %19, 0:i32
blockpc %1 1 %21 1:i1
%22:i32 = var
%23 = ult 31:i32, %22
%24:i32 = zext %23
%25:i32 = var
%26 = eq %25, 0:i32
%27:i32 = zext %26
%28 = or %24, %27
%29 = ne %28, 0:i32
blockpc %4 0 %29 1:i1
%30:i32 = var
blockpc %4 1 %30 1:i1
%31:i32 = var
%32:i32 = var
%33 = phi %4, %31, %32
%34 = and %33, 255:i32
%35 = eq %34, 42:i32
blockpc %2 0 %35 1:i1
%36:i32 = var
blockpc %2 1 %36 1:i1
%37:i32 = var
blockpc %3 0 %37 1:i1
%38:i32 = var
blockpc %3 1 %38 1:i1
infer %18


; start LHS (in $9)
%0 = block 3
%1 = block 2
%2 = block 3
%3:i32 = var
%4:i32 = var
%5 = block 2
%6 = block 2
%7:i32 = var
%8 = phi %6, %7, 0:i32
%9 = phi %5, %8, -1:i32
%10 = phi %2, %3, %4, %9
%11 = block 3
%12:i32 = var
%13:i32 = var
%14:i32 = var
%15 = phi %11, %12, %13, %14
%16:i32 = var
%17 = sub %15, %16 (hasExternalUses)
%18 = add %17, 1:i32 (hasExternalUses)
%19 = phi %1, %10, %18
%20 = block 2
%21 = block 2
%22 = phi %21, %10, 8:i32
%23 = phi %20, %22, %10
%24 = phi %0, %19, %23, %10
%25 = slt -1:i32, %24
%26 = block 2
%27:i32 = var
%28 = ne %27, 0:i32
blockpc %26 0 %28 1:i1
%29:i32 = var
blockpc %26 1 %29 1:i1
%30:i32 = var
%31 = block 2
%32:i32 = var
blockpc %31 0 %32 1:i1
%33:i32 = var
blockpc %31 1 %33 1:i1
%34 = block 2
%35:i32 = var
blockpc %34 0 %35 1:i1
%36:i32 = var
blockpc %34 1 %36 1:i1
%37:i32 = var
%38 = block 2
%39:i32 = var
blockpc %38 0 %39 1:i1
%40:i32 = var
blockpc %38 1 %40 1:i1
%41:i32 = var
%42 = phi %38, 0:i32, %41
%43 = phi %34, %37, %42
%44 = phi %31, %43, %42
%45 = phi %26, %30, %44
%46 = and %45, 8:i32
%47 = eq %46, 0:i32
%48:i32 = zext %47
%49:i32 = var
%50:i32 = zext %49
%51 = or %48, %50
%52 = eq %51, 0:i32
blockpc %1 0 %52 1:i1
%53:i32 = var
blockpc %1 1 %53 1:i1
%54:i32 = var
blockpc %5 0 %54 1:i1
%55:i32 = var
blockpc %5 1 %55 1:i1
%56:i32 = var
blockpc %6 0 %56 1:i1
%57:i32 = var
blockpc %6 1 %57 1:i1
%58:i32 = var
blockpc %21 0 %58 1:i1
%59:i32 = var
blockpc %21 1 %59 1:i1
infer %25


; start LHS (in $9)
%0 = block 3
%1 = block 2
%2 = block 3
%3:i32 = var
%4:i32 = var
%5 = block 2
%6 = block 2
%7:i32 = var
%8 = phi %6, %7, 0:i32
%9 = phi %5, %8, -1:i32
%10 = phi %2, %3, %4, %9
%11 = block 3
%12:i32 = var
%13:i32 = var
%14:i32 = var
%15 = phi %11, %12, %13, %14
%16:i32 = var
%17 = sub %15, %16 (hasExternalUses)
%18 = add %17, 1:i32 (hasExternalUses)
%19 = phi %1, %10, %18
%20 = block 2
%21 = block 2
%22 = phi %21, %10, 8:i32
%23 = phi %20, %22, %10
%24 = phi %0, %19, %23, %10
%25 = ne %24, 0:i32
%26 = block 2
%27:i32 = var
%28 = ne %27, 0:i32
blockpc %26 0 %28 1:i1
%29:i32 = var
blockpc %26 1 %29 1:i1
%30:i32 = var
%31 = block 2
%32:i32 = var
blockpc %31 0 %32 1:i1
%33:i32 = var
blockpc %31 1 %33 1:i1
%34 = block 2
%35:i32 = var
blockpc %34 0 %35 1:i1
%36:i32 = var
blockpc %34 1 %36 1:i1
%37:i32 = var
%38 = block 2
%39:i32 = var
blockpc %38 0 %39 1:i1
%40:i32 = var
blockpc %38 1 %40 1:i1
%41:i32 = var
%42 = phi %38, 0:i32, %41
%43 = phi %34, %37, %42
%44 = phi %31, %43, %42
%45 = phi %26, %30, %44
%46 = and %45, 8:i32
%47 = eq %46, 0:i32
%48:i32 = zext %47
%49:i32 = var
%50:i32 = zext %49
%51 = or %48, %50
%52 = eq %51, 0:i32
blockpc %1 0 %52 1:i1
%53:i32 = var
blockpc %1 1 %53 1:i1
%54:i32 = var
blockpc %5 0 %54 1:i1
%55:i32 = var
blockpc %5 1 %55 1:i1
%56:i32 = var
blockpc %6 0 %56 1:i1
%57:i32 = var
blockpc %6 1 %57 1:i1
%58:i32 = var
blockpc %21 0 %58 1:i1
%59:i32 = var
blockpc %21 1 %59 1:i1
infer %25


; start LHS (in $9)
%0 = block 3
%1:i64 = var
%2:i64 = var
%3 = block 2
%4 = block 2
%5:i64 = var
%6 = sub 0:i64, %5 (hasExternalUses)
%7 = phi %4, %6, %5
%8:i64 = var
%9 = phi %3, %7, %8
%10 = phi %0, %1, %2, %9
%11 = ne %10, 0:i64
%12 = slt %5, 0:i64
blockpc %4 0 %12 1:i1
%13:i32 = zext %12
%14 = eq %13, 0:i32
blockpc %4 1 %14 1:i1
infer %11


; start LHS (in $9)
%0 = block 3
%1 = block 2
%2 = block 3
%3:i32 = var
%4:i32 = var
%5 = block 2
%6 = block 2
%7:i32 = var
%8 = phi %6, %7, 0:i32
%9 = phi %5, %8, -1:i32
%10 = phi %2, %3, %4, %9
%11 = block 3
%12:i32 = var
%13:i32 = var
%14:i32 = var
%15 = phi %11, %12, %13, %14
%16:i32 = var
%17 = sub %15, %16 (hasExternalUses)
%18 = add %17, 1:i32 (hasExternalUses)
%19 = phi %1, %10, %18
%20 = block 2
%21 = block 2
%22 = phi %21, %10, 8:i32
%23 = phi %20, %22, %10
%24 = phi %0, %19, %23, %10
%25 = ne %24, 0:i32
%26:i32 = zext %25
%27:i64 = var
%28:i64 = var
%29 = block 2
%30 = block 2
%31:i64 = var
%32:i64 = var
%33 = phi %30, %31, %32
%34:i64 = var
%35 = phi %29, %33, %34
%36 = phi %0, %27, %28, %35
%37 = ne %36, 0:i64 (hasExternalUses)
%38:i32 = zext %37
%39 = or %26, %38
%40:i32 = var
blockpc %1 0 %40 1:i1
%41:i32 = var
blockpc %1 1 %41 1:i1
%42:i32 = var
blockpc %5 0 %42 1:i1
%43:i32 = var
blockpc %5 1 %43 1:i1
%44:i32 = var
blockpc %6 0 %44 1:i1
%45:i32 = var
blockpc %6 1 %45 1:i1
%46:i32 = var
blockpc %21 0 %46 1:i1
%47:i32 = var
blockpc %21 1 %47 1:i1
%48:i32 = var
blockpc %30 0 %48 1:i1
%49:i32 = var
blockpc %30 1 %49 1:i1
infer %39


; start LHS (in $9)
%0 = block 3
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4 = phi %0, %1, %2, %3
%5 = block 3
%6:i32 = var
%7:i32 = var
%8:i32 = var
%9 = phi %5, %6, %7, %8
%10 = sub %4, %9
infer %10


; start LHS (in $9)
%0 = block 3
%1:i64 = var
%2:i64 = var
%3 = block 2
%4 = block 2
%5:i64 = var
%6 = sub 0:i64, %5 (hasExternalUses)
%7 = phi %4, %6, %5
%8:i64 = var
%9 = phi %3, %7, %8
%10 = phi %0, %1, %2, %9
%11 = ne %10, 0:i64 (hasExternalUses)
%12:i32 = zext %11
%13 = xor %12, 1:i32
%14 = slt %5, 0:i64
blockpc %4 0 %14 1:i1
%15:i32 = zext %14
%16 = eq %15, 0:i32
blockpc %4 1 %16 1:i1
infer %13


; start LHS (in $9)
%0 = block 3
%1:i64 = var
%2:i64 = var
%3 = block 2
%4 = block 2
%5:i64 = var
%6 = sub 0:i64, %5 (hasExternalUses)
%7 = phi %4, %6, %5
%8:i64 = var
%9 = phi %3, %7, %8
%10 = phi %0, %1, %2, %9
%11 = ne %10, 0:i64 (hasExternalUses)
%12:i32 = zext %11
%13 = xor %12, 1:i32
%14 = and %13, 1:i32
%15 = slt %5, 0:i64
blockpc %4 0 %15 1:i1
%16:i32 = zext %15
%17 = eq %16, 0:i32
blockpc %4 1 %17 1:i1
infer %14


; start LHS (in $9)
%0 = block 3
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4 = phi %0, %1, %2, %3
%5 = block 3
%6:i32 = var
%7:i32 = var
%8:i32 = var
%9 = phi %5, %6, %7, %8
%10 = sub %4, %9
%11:i64 = var
%12:i64 = var
%13 = block 2
%14 = block 2
%15:i64 = var
%16 = sub 0:i64, %15 (hasExternalUses)
%17 = phi %14, %16, %15
%18:i64 = var
%19 = phi %13, %17, %18
%20 = phi %5, %11, %12, %19
%21 = ne %20, 0:i64 (hasExternalUses)
%22:i32 = zext %21
%23 = xor %22, 1:i32
%24 = and %23, 1:i32
%25 = add %10, %24
%26 = slt %15, 0:i64
blockpc %14 0 %26 1:i1
%27:i32 = zext %26
%28 = eq %27, 0:i32
blockpc %14 1 %28 1:i1
infer %25


; start LHS (in $9)
%0 = block 3
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4 = phi %0, %1, %2, %3
%5 = block 3
%6:i32 = var
%7:i32 = var
%8:i32 = var
%9 = phi %5, %6, %7, %8
%10 = sub %4, %9
%11:i64 = var
%12:i64 = var
%13 = block 2
%14 = block 2
%15:i64 = var
%16:i64 = var
%17 = phi %14, %15, %16
%18:i64 = var
%19 = phi %13, %17, %18
%20 = phi %5, %11, %12, %19
%21 = ne %20, 0:i64 (hasExternalUses)
%22:i32 = zext %21
%23 = xor %22, 1:i32
%24 = and %23, 1:i32
%25 = add %10, %24 (hasExternalUses)
%26 = block 2
%27 = block 3
%28:i32 = var
%29:i32 = var
%30 = block 2
%31 = block 2
%32:i32 = var
%33 = phi %31, %32, 0:i32
%34 = phi %30, %33, -1:i32
%35 = phi %27, %28, %29, %34
%36:i32 = var
%37 = phi %26, %35, %36
%38 = block 2
%39 = block 2
%40 = phi %39, %35, 8:i32
%41 = phi %38, %40, %35
%42 = phi %5, %37, %41, %35
%43 = slt %25, %42
%44:i32 = var
blockpc %14 0 %44 1:i1
%45:i32 = var
blockpc %14 1 %45 1:i1
%46:i32 = var
blockpc %26 0 %46 1:i1
%47:i32 = var
blockpc %26 1 %47 1:i1
%48:i32 = var
blockpc %30 0 %48 1:i1
%49:i32 = var
blockpc %30 1 %49 1:i1
%50:i32 = var
blockpc %31 0 %50 1:i1
%51:i32 = var
blockpc %31 1 %51 1:i1
%52:i32 = var
blockpc %39 0 %52 1:i1
%53:i32 = var
blockpc %39 1 %53 1:i1
infer %43


; start LHS (in $9)
%0 = block 3
%1 = block 2
%2 = block 3
%3:i32 = var
%4:i32 = var
%5 = block 2
%6 = block 2
%7:i32 = var
%8 = phi %6, %7, 0:i32
%9 = phi %5, %8, -1:i32
%10 = phi %2, %3, %4, %9
%11 = block 3
%12:i32 = var
%13:i32 = var
%14:i32 = var
%15 = phi %11, %12, %13, %14
%16:i32 = var
%17 = sub %15, %16 (hasExternalUses)
%18 = add %17, 1:i32 (hasExternalUses)
%19 = phi %1, %10, %18
%20 = block 2
%21 = block 2
%22 = phi %21, %10, 8:i32
%23 = phi %20, %22, %10
%24 = phi %0, %19, %23, %10
%25 = ne %24, 0:i32
%26:i32 = zext %25
%27:i64 = var
%28:i64 = var
%29 = block 2
%30 = block 2
%31:i64 = var
%32:i64 = var
%33 = phi %30, %31, %32
%34:i64 = var
%35 = phi %29, %33, %34
%36 = phi %0, %27, %28, %35
%37 = ne %36, 0:i64 (hasExternalUses)
%38:i32 = zext %37
%39 = or %26, %38 (hasExternalUses)
%40 = eq %39, 0:i32
%41:i32 = var
blockpc %1 0 %41 1:i1
%42:i32 = var
blockpc %1 1 %42 1:i1
%43:i32 = var
blockpc %5 0 %43 1:i1
%44:i32 = var
blockpc %5 1 %44 1:i1
%45:i32 = var
blockpc %6 0 %45 1:i1
%46:i32 = var
blockpc %6 1 %46 1:i1
%47:i32 = var
blockpc %21 0 %47 1:i1
%48:i32 = var
blockpc %21 1 %48 1:i1
%49:i32 = var
blockpc %30 0 %49 1:i1
%50:i32 = var
blockpc %30 1 %50 1:i1
infer %40


; start LHS (in $9)
%0 = block 5
%1 = block 2
%2 = block 2
%3 = block 2
%4 = block 2
%5:i32 = var
%6:i32 = var
%7 = or %5, %6 (hasExternalUses)
%8 = phi %4, 0:i32, %7
%9 = or %8, 8192:i32 (hasExternalUses)
%10 = phi %3, %9, %8
%11 = phi %2, %10, %8
%12 = and %11, -65537:i32 (hasExternalUses)
%13 = phi %1, %12, %11
%14:i32 = var
%15 = phi %0, %13, %14, %14, %14, %13
%16 = xor %15, 8192:i32
%17 = and %11, 8192:i32
%18 = ne %17, 0:i32
blockpc %1 0 %18 1:i1
%19 = eq %17, 0:i32
blockpc %1 1 %19 1:i1
%20:i32 = var
%21 = ult 31:i32, %20
%22:i32 = zext %21
%23:i32 = var
%24 = eq %23, 0:i32
%25:i32 = zext %24
%26 = or %22, %25
%27 = ne %26, 0:i32
blockpc %4 0 %27 1:i1
%28:i32 = var
blockpc %4 1 %28 1:i1
%29:i32 = var
%30:i32 = var
%31 = phi %4, %29, %30
%32 = and %31, 255:i32
%33 = eq %32, 42:i32
blockpc %2 0 %33 1:i1
%34:i32 = var
blockpc %2 1 %34 1:i1
%35:i32 = var
blockpc %3 0 %35 1:i1
%36:i32 = var
blockpc %3 1 %36 1:i1
infer %16


; start LHS (in $9)
%0 = block 5
%1:i32 = var
%2 = phi %0, 0:i32, %1, %1, %1, 0:i32
%3 = block 2
%4 = block 2
%5 = block 2
%6:i32 = var
%7 = block 2
%8:i32 = var
%9 = phi %7, %8, 0:i32
%10 = phi %5, %6, %9
%11 = sub 0:i32, %10 (hasExternalUses)
%12 = phi %4, %11, %10
%13:i32 = var
%14 = phi %3, %12, %13
%15:i32 = var
%16 = phi %0, %14, %15, %15, %15, %14
%17 = slt %2, %16
%18 = block 2
%19:i32 = var
%20 = ult 31:i32, %19
%21:i32 = zext %20
%22:i32 = var
%23 = eq %22, 0:i32
%24:i32 = zext %23
%25 = or %21, %24
%26 = ne %25, 0:i32
blockpc %18 0 %26 1:i1
%27 = eq %25, 0:i32
blockpc %18 1 %27 1:i1
%28:i32 = var
%29:i32 = var
%30 = phi %18, %28, %29
%31 = and %30, 255:i32
%32 = eq %31, 42:i32
blockpc %3 0 %32 1:i1
%33:i32 = var
blockpc %3 1 %33 1:i1
%34:i32 = var
blockpc %4 0 %34 1:i1
%35:i32 = var
blockpc %4 1 %35 1:i1
%36:i32 = var
blockpc %7 0 %36 1:i1
%37:i32 = var
blockpc %7 1 %37 1:i1
infer %17


; start LHS (in $9)
%0 = block 4
%1 = block 3
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5 = phi %1, %2, %3, %4
%6 = block 2
%7 = block 2
%8:i32 = var
%9 = block 2
%10:i32 = var
%11 = phi %9, %10, 2003:i32
%12 = phi %7, %8, %11
%13 = block 3
%14:i32 = var
%15:i32 = var
%16 = block 2
%17 = block 2
%18:i32 = var
%19 = phi %17, %18, 0:i32
%20 = phi %16, %19, -1:i32
%21 = phi %13, %14, %15, %20
%22 = add %12, %21
%23:i32 = var
%24 = phi %6, %22, %23
%25 = phi %0, %5, %5, %24, %5
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29 = phi %1, %26, %27, %28
%30:i32 = var
%31:i32 = var
%32:i32 = var
%33 = phi %1, %30, %31, %32
%34 = block 2
%35 = block 3
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39 = phi %35, %36, %37, %38
%40 = phi %34, %39, %5
%41 = phi %0, %29, %33, %12, %40
%42 = sub %25, %41
%43:i32 = var
blockpc %6 0 %43 1:i1
%44:i32 = var
blockpc %6 1 %44 1:i1
%45:i32 = var
blockpc %9 0 %45 1:i1
%46:i32 = var
blockpc %9 1 %46 1:i1
%47:i32 = var
blockpc %16 0 %47 1:i1
%48:i32 = var
blockpc %16 1 %48 1:i1
%49:i32 = var
blockpc %17 0 %49 1:i1
%50:i32 = var
blockpc %17 1 %50 1:i1
%51:i32 = var
blockpc %34 0 %51 1:i1
%52:i32 = var
blockpc %34 1 %52 1:i1
infer %42


; start LHS (in $9)
%0 = block 4
%1 = block 3
%2:i32 = var
%3:i32 = var
%4 = block 2
%5 = block 2
%6:i32 = var
%7 = phi %5, %6, 0:i32
%8 = phi %4, %7, -1:i32
%9 = phi %1, %2, %3, %8
%10 = block 2
%11:i32 = var
%12 = block 2
%13:i32 = var
%14 = block 2
%15:i32 = var
%16 = phi %14, %15, 2003:i32
%17 = phi %12, %13, %16
%18 = sub %11, %17 (hasExternalUses)
%19 = phi %10, %9, %18
%20 = block 2
%21 = block 3
%22 = block 2
%23 = block 3
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27 = phi %23, %24, %25, %26
%28:i32 = var
%29 = sub %27, %28 (hasExternalUses)
%30 = add %29, 1:i32 (hasExternalUses)
%31 = phi %22, %9, %30
%32 = block 2
%33 = block 2
%34 = phi %33, %9, 8:i32
%35 = phi %32, %34, %9
%36 = phi %21, %31, %35, %9
%37 = block 2
%38:i32 = var
%39 = phi %37, %38, %36
%40 = phi %20, %36, %39
%41 = phi %0, 1:i32, %9, %19, %40
%42:i32 = var
%43 = slt %41, %42
%44:i32 = var
blockpc %4 0 %44 1:i1
%45:i32 = var
blockpc %4 1 %45 1:i1
%46:i32 = var
blockpc %5 0 %46 1:i1
%47:i32 = var
blockpc %5 1 %47 1:i1
%48:i32 = var
blockpc %10 0 %48 1:i1
%49:i32 = var
blockpc %10 1 %49 1:i1
%50:i32 = var
blockpc %14 0 %50 1:i1
%51:i32 = var
blockpc %14 1 %51 1:i1
%52:i32 = var
blockpc %20 0 %52 1:i1
%53:i32 = var
blockpc %20 1 %53 1:i1
%54:i32 = var
blockpc %22 0 %54 1:i1
%55:i32 = var
blockpc %22 1 %55 1:i1
%56:i32 = var
blockpc %33 0 %56 1:i1
%57:i32 = var
blockpc %33 1 %57 1:i1
%58:i32 = var
blockpc %37 0 %58 1:i1
%59:i32 = var
blockpc %37 1 %59 1:i1
infer %43


; start LHS (in $9)
%0 = block 2
%1 = block 4
%2 = block 3
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6 = phi %2, %3, %4, %5
%7 = block 2
%8 = block 2
%9:i32 = var
%10 = block 2
%11:i32 = var
%12 = phi %10, %11, 2003:i32
%13 = phi %8, %9, %12
%14 = block 3
%15:i32 = var
%16:i32 = var
%17 = block 2
%18 = block 2
%19:i32 = var
%20 = phi %18, %19, 0:i32
%21 = phi %17, %20, -1:i32
%22 = phi %14, %15, %16, %21
%23 = add %13, %22
%24:i32 = var
%25 = phi %7, %23, %24
%26 = phi %1, %6, %6, %25, %6
%27:i32 = var
%28:i32 = var
%29:i32 = var
%30 = phi %2, %27, %28, %29
%31:i32 = var
%32:i32 = var
%33:i32 = var
%34 = phi %2, %31, %32, %33
%35 = block 2
%36 = block 3
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40 = phi %36, %37, %38, %39
%41 = phi %35, %40, %6
%42 = phi %1, %30, %34, %13, %41
%43 = sub %26, %42 (hasExternalUses)
%44 = block 2
%45:i32 = var
%46 = phi %44, %22, %45
%47 = block 2
%48 = block 2
%49:i32 = var
%50 = phi %48, %22, %49
%51 = block 2
%52 = block 2
%53 = phi %52, %22, 8:i32
%54 = phi %51, %53, %22
%55 = phi %36, %50, %54, %22
%56 = block 2
%57:i32 = var
%58 = phi %56, %57, %55
%59 = phi %47, %55, %58
%60 = phi %1, 1:i32, %22, %46, %59
%61 = phi %0, %43, %60
%62 = block 2
%63 = phi %62, 0:i32, 2:i32
%64 = block 2
%65 = block 2
%66:i32 = var
%67:i32 = zext %66
%68 = phi %65, 1:i32, %67
%69 = phi %64, %68, 0:i32
%70 = phi %36, 0:i32, %63, %69
%71 = phi %1, 0:i32, 0:i32, 0:i32, %70
%72 = add %61, %71
%73:i32 = var
blockpc %0 0 %73 1:i1
%74:i32 = var
blockpc %0 1 %74 1:i1
%75:i32 = var
blockpc %7 0 %75 1:i1
%76:i32 = var
blockpc %7 1 %76 1:i1
%77:i32 = var
blockpc %10 0 %77 1:i1
%78:i32 = var
blockpc %10 1 %78 1:i1
%79:i32 = var
blockpc %17 0 %79 1:i1
%80:i32 = var
blockpc %17 1 %80 1:i1
%81:i32 = var
blockpc %18 0 %81 1:i1
%82:i32 = var
blockpc %18 1 %82 1:i1
%83:i32 = var
blockpc %35 0 %83 1:i1
%84:i32 = var
blockpc %35 1 %84 1:i1
%85:i32 = var
blockpc %44 0 %85 1:i1
%86:i32 = var
blockpc %44 1 %86 1:i1
%87:i32 = var
blockpc %47 0 %87 1:i1
%88:i32 = var
blockpc %47 1 %88 1:i1
%89:i32 = var
blockpc %48 0 %89 1:i1
%90:i32 = var
blockpc %48 1 %90 1:i1
%91:i32 = var
blockpc %52 0 %91 1:i1
%92:i32 = var
blockpc %52 1 %92 1:i1
%93:i32 = var
blockpc %56 0 %93 1:i1
%94:i32 = var
blockpc %56 1 %94 1:i1
%95:i32 = var
blockpc %62 0 %95 1:i1
%96:i32 = var
blockpc %62 1 %96 1:i1
%97:i32 = var
blockpc %65 0 %97 1:i1
%98:i32 = var
blockpc %65 1 %98 1:i1
infer %72


; start LHS (in $9)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4 = block 2
%5:i32 = var
%6 = phi %4, %5, 0:i32
%7 = phi %2, %3, %6
%8 = sub 0:i32, %7 (hasExternalUses)
%9 = phi %1, %8, %7
%10:i32 = var
%11 = phi %0, %9, %10
%12 = block 2
%13 = block 4
%14 = block 3
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18 = phi %14, %15, %16, %17
%19 = block 2
%20 = block 2
%21:i32 = var
%22 = block 2
%23:i32 = var
%24 = phi %22, %23, 2003:i32
%25 = phi %20, %21, %24
%26 = block 3
%27:i32 = var
%28:i32 = var
%29 = block 2
%30 = block 2
%31:i32 = var
%32 = phi %30, %31, 0:i32
%33 = phi %29, %32, -1:i32
%34 = phi %26, %27, %28, %33
%35 = add %25, %34
%36:i32 = var
%37 = phi %19, %35, %36
%38 = phi %13, %18, %18, %37, %18
%39:i32 = var
%40:i32 = var
%41:i32 = var
%42 = phi %14, %39, %40, %41
%43:i32 = var
%44:i32 = var
%45:i32 = var
%46 = phi %14, %43, %44, %45
%47 = block 2
%48 = block 3
%49:i32 = var
%50:i32 = var
%51:i32 = var
%52 = phi %48, %49, %50, %51
%53 = phi %47, %52, %18
%54 = phi %13, %42, %46, %25, %53
%55 = sub %38, %54 (hasExternalUses)
%56 = block 2
%57:i32 = var
%58 = phi %56, %34, %57
%59 = block 2
%60 = block 2
%61:i32 = var
%62 = phi %60, %34, %61
%63 = block 2
%64 = block 2
%65 = phi %64, %34, 8:i32
%66 = phi %63, %65, %34
%67 = phi %48, %62, %66, %34
%68 = block 2
%69:i32 = var
%70 = phi %68, %69, %67
%71 = phi %59, %67, %70
%72 = phi %13, 1:i32, %34, %58, %71
%73 = phi %12, %55, %72
%74 = block 2
%75 = phi %74, 0:i32, 2:i32
%76 = block 2
%77 = block 2
%78:i32 = var
%79:i32 = zext %78
%80 = phi %77, 1:i32, %79
%81 = phi %76, %80, 0:i32
%82 = phi %48, 0:i32, %75, %81
%83 = phi %13, 0:i32, 0:i32, 0:i32, %82
%84 = add %73, %83 (hasExternalUses)
%85 = slt %11, %84
%86:i32 = var
blockpc %0 0 %86 1:i1
%87:i32 = var
blockpc %0 1 %87 1:i1
%88:i32 = var
blockpc %1 0 %88 1:i1
%89:i32 = var
blockpc %1 1 %89 1:i1
%90:i32 = var
blockpc %4 0 %90 1:i1
%91:i32 = var
blockpc %4 1 %91 1:i1
%92:i32 = var
blockpc %12 0 %92 1:i1
%93:i32 = var
blockpc %12 1 %93 1:i1
%94:i32 = var
blockpc %19 0 %94 1:i1
%95:i32 = var
blockpc %19 1 %95 1:i1
%96:i32 = var
blockpc %22 0 %96 1:i1
%97:i32 = var
blockpc %22 1 %97 1:i1
%98:i32 = var
blockpc %29 0 %98 1:i1
%99:i32 = var
blockpc %29 1 %99 1:i1
%100:i32 = var
blockpc %30 0 %100 1:i1
%101:i32 = var
blockpc %30 1 %101 1:i1
%102:i32 = var
blockpc %47 0 %102 1:i1
%103:i32 = var
blockpc %47 1 %103 1:i1
%104:i32 = var
blockpc %56 0 %104 1:i1
%105:i32 = var
blockpc %56 1 %105 1:i1
%106:i32 = var
blockpc %59 0 %106 1:i1
%107:i32 = var
blockpc %59 1 %107 1:i1
%108:i32 = var
blockpc %60 0 %108 1:i1
%109:i32 = var
blockpc %60 1 %109 1:i1
%110:i32 = var
blockpc %64 0 %110 1:i1
%111:i32 = var
blockpc %64 1 %111 1:i1
%112:i32 = var
blockpc %68 0 %112 1:i1
%113:i32 = var
blockpc %68 1 %113 1:i1
%114:i32 = var
blockpc %74 0 %114 1:i1
%115:i32 = var
blockpc %74 1 %115 1:i1
%116:i32 = var
blockpc %77 0 %116 1:i1
%117:i32 = var
blockpc %77 1 %117 1:i1
infer %85


; start LHS (in $9)
%0 = block 4
%1 = block 2
%2 = block 2
%3 = block 2
%4:i32 = var
%5 = shl 1:i32, %4
%6:i32 = var
%7 = or %5, %6 (hasExternalUses)
%8 = phi %3, 0:i32, %7
%9 = or %8, 8192:i32 (hasExternalUses)
%10 = phi %2, %9, %8
%11 = phi %1, %10, %8
%12 = and %11, -65537:i32 (hasExternalUses)
%13 = block 2
%14 = phi %13, %12, %11
%15 = block 2
%16 = block 3
%17 = block 2
%18 = or %14, 8:i32 (hasExternalUses)
%19 = phi %17, %18, %14
%20 = phi %16, %14, %19, %14
%21 = and %20, -65537:i32 (hasExternalUses)
%22 = phi %15, %20, %21
%23 = phi %0, %12, %14, %12, %22
%24 = xor %23, 65536:i32
%25:i32 = var
%26 = ult 31:i32, %25
%27:i32 = zext %26
%28:i32 = var
%29 = eq %28, 0:i32
%30:i32 = zext %29
%31 = or %27, %30
%32 = ne %31, 0:i32
blockpc %3 0 %32 1:i1
%33:i32 = var
blockpc %3 1 %33 1:i1
%34:i32 = var
%35:i32 = var
%36 = phi %3, %34, %35
%37 = and %36, 255:i32
%38 = eq %37, 42:i32
blockpc %1 0 %38 1:i1
%39:i32 = var
blockpc %1 1 %39 1:i1
%40:i32 = var
blockpc %2 0 %40 1:i1
%41:i32 = var
blockpc %2 1 %41 1:i1
%42:i32 = var
blockpc %13 0 %42 1:i1
%43:i32 = var
blockpc %13 1 %43 1:i1
%44:i32 = var
blockpc %15 0 %44 1:i1
%45:i32 = var
blockpc %15 1 %45 1:i1
infer %24


; start LHS (in $9)
%0 = block 4
%1 = block 2
%2 = block 2
%3 = block 2
%4:i32 = var
%5 = shl 1:i32, %4
%6:i32 = var
%7 = or %5, %6 (hasExternalUses)
%8 = phi %3, 0:i32, %7
%9 = or %8, 8192:i32 (hasExternalUses)
%10 = phi %2, %9, %8
%11 = phi %1, %10, %8
%12 = and %11, -65537:i32 (hasExternalUses)
%13 = block 2
%14 = phi %13, %12, %11
%15 = block 2
%16 = block 3
%17 = block 2
%18 = or %14, 8:i32 (hasExternalUses)
%19 = phi %17, %18, %14
%20 = phi %16, %14, %19, %14
%21 = and %20, -65537:i32 (hasExternalUses)
%22 = phi %15, %20, %21
%23 = phi %0, %12, %14, %12, %22
%24 = xor %23, 8192:i32
%25:i32 = var
%26 = ult 31:i32, %25
%27:i32 = zext %26
%28:i32 = var
%29 = eq %28, 0:i32
%30:i32 = zext %29
%31 = or %27, %30
%32 = ne %31, 0:i32
blockpc %3 0 %32 1:i1
%33:i32 = var
blockpc %3 1 %33 1:i1
%34:i32 = var
%35:i32 = var
%36 = phi %3, %34, %35
%37 = and %36, 255:i32
%38 = eq %37, 42:i32
blockpc %1 0 %38 1:i1
%39:i32 = var
blockpc %1 1 %39 1:i1
%40:i32 = var
blockpc %2 0 %40 1:i1
%41:i32 = var
blockpc %2 1 %41 1:i1
%42:i32 = var
blockpc %13 0 %42 1:i1
%43:i32 = var
blockpc %13 1 %43 1:i1
%44:i32 = var
blockpc %15 0 %44 1:i1
%45:i32 = var
blockpc %15 1 %45 1:i1
infer %24


; start LHS (in $9)
%0:i32 = var
%1 = eq %0, 0:i32
infer %1


; start LHS (in $9)
%0:i32 = var
%1 = shl %0, 2:i32
%2:i32 = var
%3 = ne %2, 0:i32
%4:i32 = var
%5 = eq %4, 0:i32
pc %3 1:i1
pc %5 1:i1
infer %1


; start LHS (in $9)
%0:i32 = var
%1:i32 = var
%2 = shl %1, 2:i32
%3 = add %0, %2
%4:i32 = var
%5 = ne %4, 0:i32
%6:i32 = var
%7 = eq %6, 0:i32
pc %5 1:i1
pc %7 1:i1
infer %3


; start LHS (in $9)
%0:i32 = var
%1 = shl %0, 3:i32
%2:i32 = var
%3 = ne %2, 0:i32
%4:i32 = var
%5 = ne %4, 0:i32
%6:i32 = var
%7 = eq %6, 0:i32
pc %3 1:i1
pc %5 1:i1
pc %7 1:i1
infer %1


; start LHS (in $9)
%0:i32 = var
%1:i32 = var
%2 = shl %1, 3:i32
%3 = add %0, %2
%4:i32 = var
%5 = ne %4, 0:i32
%6:i32 = var
%7 = ne %6, 0:i32
%8:i32 = var
%9 = eq %8, 0:i32
pc %5 1:i1
pc %7 1:i1
pc %9 1:i1
infer %3


; start LHS (in $9)
%0:i32 = var
%1 = add %0, 1:i32
%2:i32 = var
%3 = ne %2, 0:i32
%4:i32 = var
%5 = ne %4, 0:i32
%6:i32 = var
%7 = eq %6, 0:i32
pc %3 1:i1
pc %5 1:i1
pc %7 1:i1
infer %1


; start LHS (in $9)
%0:i32 = var
%1 = slt %0, 9:i32
%2:i32 = var
%3 = ne %2, 0:i32
%4:i32 = var
%5 = ne %4, 0:i32
%6:i32 = var
%7 = eq %6, 0:i32
pc %3 1:i1
pc %5 1:i1
pc %7 1:i1
infer %1


; start LHS (in $9)
%0 = block 2
%1:i32 = var
%2 = add %1, 1:i32 (hasExternalUses)
%3 = phi %0, %1, %2
%4 = slt %3, 10:i32
%5:i32 = var
%6 = ne %5, 0:i32
blockpc %0 0 %6 1:i1
%7 = eq %5, 0:i32
blockpc %0 1 %7 1:i1
%8:i32 = var
%9 = ne %8, 0:i32
%10:i32 = var
%11 = eq %10, 0:i32
pc %9 1:i1
pc %11 1:i1
infer %4


; start LHS (in $9)
%0:i32 = var
%1 = shl %0, 2:i32
%2 = block 2
%3:i32 = var
%4 = ne %3, 0:i32
blockpc %2 0 %4 1:i1
%5 = eq %3, 0:i32
blockpc %2 1 %5 1:i1
%6:i32 = var
%7 = add %6, 1:i32
%8 = phi %2, %6, %7
%9 = slt %8, 10:i32
%10:i32 = var
%11 = ne %10, 0:i32
%12:i32 = var
%13 = eq %12, 0:i32
pc %9 1:i1
pc %11 1:i1
pc %13 1:i1
infer %1


; start LHS (in $9)
%0:i32 = var
%1:i32 = var
%2 = shl %1, 2:i32
%3 = add %0, %2
%4 = block 2
%5:i32 = var
%6 = ne %5, 0:i32
blockpc %4 0 %6 1:i1
%7 = eq %5, 0:i32
blockpc %4 1 %7 1:i1
%8:i32 = var
%9 = add %8, 1:i32
%10 = phi %4, %8, %9
%11 = slt %10, 10:i32
%12:i32 = var
%13 = ne %12, 0:i32
%14:i32 = var
%15 = eq %14, 0:i32
pc %11 1:i1
pc %13 1:i1
pc %15 1:i1
infer %3


; start LHS (in $9)
%0:i32 = var
%1 = add %0, 1:i32
%2 = block 2
%3:i32 = var
%4 = ne %3, 0:i32
blockpc %2 0 %4 1:i1
%5 = eq %3, 0:i32
blockpc %2 1 %5 1:i1
%6:i32 = var
%7 = add %6, 1:i32
%8 = phi %2, %6, %7
%9 = slt %8, 10:i32
%10:i32 = var
%11 = ne %10, 0:i32
%12:i32 = var
%13 = eq %12, 0:i32
pc %9 1:i1
pc %11 1:i1
pc %13 1:i1
infer %1


; start LHS (in $9)
%0:i32 = var
%1 = slt %0, 9:i32
%2 = block 2
%3:i32 = var
%4 = ne %3, 0:i32
blockpc %2 0 %4 1:i1
%5 = eq %3, 0:i32
blockpc %2 1 %5 1:i1
%6:i32 = var
%7 = add %6, 1:i32
%8 = phi %2, %6, %7
%9 = slt %8, 10:i32
%10:i32 = var
%11 = ne %10, 0:i32
%12:i32 = var
%13 = eq %12, 0:i32
pc %9 1:i1
pc %11 1:i1
pc %13 1:i1
infer %1


; function: $10

; start LHS (in $10)
%0:i64 = var
%1 = lshr %0, 52:i64
infer %1


; start LHS (in $10)
%0:i32 = var
%1 = and %0, 2047:i32
infer %1


; start LHS (in $10)
%0:i32 = var
%1 = and %0, 2047:i32 (hasExternalUses)
%2 = eq %1, 2047:i32
%3 = ne %1, 0:i32
pc %3 1:i1
infer %2


; start LHS (in $10)
%0:i32 = var
%1 = add %0, -64:i32
%2:i32 = var
%3 = ne %2, 0:i32
pc %3 1:i1
infer %1


; start LHS (in $10)
%0:i32 = var
%1 = and %0, 2047:i32
infer %1


; start LHS (in $10)
%0:i32 = var
%1 = and %0, 2047:i32
%2 = add %1, -1022:i32
infer %2


; start LHS (in $10)
%0:i64 = var
%1 = and %0, -9218868437227405313:i64
infer %1


; start LHS (in $10)
%0:i64 = var
%1 = and %0, -9218868437227405313:i64
%2 = or %1, 4602678819172646912:i64
infer %2


; function: $11

; function: $12

; start LHS (in $12)
%0:i32 = var
%1 = ule %0, 20:i32
infer %1


; start LHS (in $12)
%0:i32 = var
%1 = sub %0, 9:i32
%2 = ule %0, 20:i32
pc %2 1:i1
infer %1


; start LHS (in $12)
%0:i32 = var
%1 = add %0, 3:i32
%2:i32 = var
%3 = ule %2, 20:i32
pc %3 1:i1
infer %1


; start LHS (in $12)
%0:i32 = var
%1 = add %0, 3:i32
%2 = and %1, -4:i32
%3:i32 = var
%4 = ule %3, 20:i32
pc %4 1:i1
infer %2


; start LHS (in $12)
%0:i32 = var
%1 = add %0, 3:i32
%2 = and %1, -4:i32 (hasExternalUses)
%3 = add %2, 4:i32
%4:i32 = var
%5 = ule %4, 20:i32
pc %5 1:i1
infer %3


; start LHS (in $12)
%0:i32 = var
%1 = add %0, 3:i32
%2:i32 = var
%3 = ule %2, 20:i32
pc %3 1:i1
infer %1


; start LHS (in $12)
%0:i32 = var
%1 = add %0, 3:i32
%2 = and %1, -4:i32
%3:i32 = var
%4 = ule %3, 20:i32
pc %4 1:i1
infer %2


; start LHS (in $12)
%0:i32 = var
%1 = add %0, 3:i32
%2 = and %1, -4:i32 (hasExternalUses)
%3 = add %2, 4:i32
%4:i32 = var
%5 = ule %4, 20:i32
pc %5 1:i1
infer %3


; start LHS (in $12)
%0:i32 = var
%1 = add %0, 3:i32
%2:i32 = var
%3 = ule %2, 20:i32
pc %3 1:i1
infer %1


; start LHS (in $12)
%0:i32 = var
%1 = add %0, 3:i32
%2 = and %1, -4:i32
%3:i32 = var
%4 = ule %3, 20:i32
pc %4 1:i1
infer %2


; start LHS (in $12)
%0:i32 = var
%1 = add %0, 3:i32
%2 = and %1, -4:i32 (hasExternalUses)
%3 = add %2, 4:i32
%4:i32 = var
%5 = ule %4, 20:i32
pc %5 1:i1
infer %3


; start LHS (in $12)
%0:i32 = var
%1 = add %0, 7:i32
%2:i32 = var
%3 = ule %2, 20:i32
pc %3 1:i1
infer %1


; start LHS (in $12)
%0:i32 = var
%1 = add %0, 7:i32
%2 = and %1, -8:i32
%3:i32 = var
%4 = ule %3, 20:i32
pc %4 1:i1
infer %2


; start LHS (in $12)
%0:i32 = var
%1 = add %0, 7:i32
%2 = and %1, -8:i32 (hasExternalUses)
%3 = add %2, 8:i32
%4:i32 = var
%5 = ule %4, 20:i32
pc %5 1:i1
infer %3


; start LHS (in $12)
%0:i32 = var
%1 = add %0, 3:i32
%2:i32 = var
%3 = ule %2, 20:i32
pc %3 1:i1
infer %1


; start LHS (in $12)
%0:i32 = var
%1 = add %0, 3:i32
%2 = and %1, -4:i32
%3:i32 = var
%4 = ule %3, 20:i32
pc %4 1:i1
infer %2


; start LHS (in $12)
%0:i32 = var
%1 = add %0, 3:i32
%2 = and %1, -4:i32 (hasExternalUses)
%3 = add %2, 4:i32
%4:i32 = var
%5 = ule %4, 20:i32
pc %5 1:i1
infer %3


; start LHS (in $12)
%0:i32 = var
%1 = and %0, 65535:i32
%2:i32 = var
%3 = ule %2, 20:i32
pc %3 1:i1
infer %1


; start LHS (in $12)
%0:i32 = var
%1 = and %0, 65535:i32
%2 = shl %1, 16:i32
%3:i32 = var
%4 = ule %3, 20:i32
pc %4 1:i1
infer %2


; start LHS (in $12)
%0:i32 = var
%1 = and %0, 65535:i32
%2 = shl %1, 16:i32
%3 = ashr %2, 16:i32
%4:i32 = var
%5 = ule %4, 20:i32
pc %5 1:i1
infer %3


; start LHS (in $12)
%0:i32 = var
%1 = add %0, 3:i32
%2:i32 = var
%3 = ule %2, 20:i32
pc %3 1:i1
infer %1


; start LHS (in $12)
%0:i32 = var
%1 = add %0, 3:i32
%2 = and %1, -4:i32
%3:i32 = var
%4 = ule %3, 20:i32
pc %4 1:i1
infer %2


; start LHS (in $12)
%0:i32 = var
%1 = add %0, 3:i32
%2 = and %1, -4:i32 (hasExternalUses)
%3 = add %2, 4:i32
%4:i32 = var
%5 = ule %4, 20:i32
pc %5 1:i1
infer %3


; start LHS (in $12)
%0:i32 = var
%1 = and %0, 65535:i32
%2:i32 = var
%3 = ule %2, 20:i32
pc %3 1:i1
infer %1


; start LHS (in $12)
%0:i32 = var
%1 = add %0, 3:i32
%2:i32 = var
%3 = ule %2, 20:i32
pc %3 1:i1
infer %1


; start LHS (in $12)
%0:i32 = var
%1 = add %0, 3:i32
%2 = and %1, -4:i32
%3:i32 = var
%4 = ule %3, 20:i32
pc %4 1:i1
infer %2


; start LHS (in $12)
%0:i32 = var
%1 = add %0, 3:i32
%2 = and %1, -4:i32 (hasExternalUses)
%3 = add %2, 4:i32
%4:i32 = var
%5 = ule %4, 20:i32
pc %5 1:i1
infer %3


; start LHS (in $12)
%0:i32 = var
%1 = and %0, 255:i32
%2:i32 = var
%3 = ule %2, 20:i32
pc %3 1:i1
infer %1


; start LHS (in $12)
%0:i32 = var
%1 = and %0, 255:i32
%2 = shl %1, 24:i32
%3:i32 = var
%4 = ule %3, 20:i32
pc %4 1:i1
infer %2


; start LHS (in $12)
%0:i32 = var
%1 = and %0, 255:i32
%2 = shl %1, 24:i32
%3 = ashr %2, 24:i32
%4:i32 = var
%5 = ule %4, 20:i32
pc %5 1:i1
infer %3


; start LHS (in $12)
%0:i32 = var
%1 = add %0, 3:i32
%2:i32 = var
%3 = ule %2, 20:i32
pc %3 1:i1
infer %1


; start LHS (in $12)
%0:i32 = var
%1 = add %0, 3:i32
%2 = and %1, -4:i32
%3:i32 = var
%4 = ule %3, 20:i32
pc %4 1:i1
infer %2


; start LHS (in $12)
%0:i32 = var
%1 = add %0, 3:i32
%2 = and %1, -4:i32 (hasExternalUses)
%3 = add %2, 4:i32
%4:i32 = var
%5 = ule %4, 20:i32
pc %5 1:i1
infer %3


; start LHS (in $12)
%0:i32 = var
%1 = and %0, 255:i32
%2:i32 = var
%3 = ule %2, 20:i32
pc %3 1:i1
infer %1


; start LHS (in $12)
%0:i32 = var
%1 = add %0, 7:i32
%2:i32 = var
%3 = ule %2, 20:i32
pc %3 1:i1
infer %1


; start LHS (in $12)
%0:i32 = var
%1 = add %0, 7:i32
%2 = and %1, -8:i32
%3:i32 = var
%4 = ule %3, 20:i32
pc %4 1:i1
infer %2


; start LHS (in $12)
%0:i32 = var
%1 = add %0, 7:i32
%2 = and %1, -8:i32 (hasExternalUses)
%3 = add %2, 8:i32
%4:i32 = var
%5 = ule %4, 20:i32
pc %5 1:i1
infer %3


; start LHS (in $12)
%0:i32 = var
%1 = add %0, 7:i32
%2:i32 = var
%3 = ule %2, 20:i32
pc %3 1:i1
infer %1


; start LHS (in $12)
%0:i32 = var
%1 = add %0, 7:i32
%2 = and %1, -8:i32
%3:i32 = var
%4 = ule %3, 20:i32
pc %4 1:i1
infer %2


; start LHS (in $12)
%0:i32 = var
%1 = add %0, 7:i32
%2 = and %1, -8:i32 (hasExternalUses)
%3 = add %2, 8:i32
%4:i32 = var
%5 = ule %4, 20:i32
pc %5 1:i1
infer %3


; function: $13

; start LHS (in $13)
%0:i32 = var
%1 = add %0, -48:i32
infer %1


; start LHS (in $13)
%0:i32 = var
%1 = add %0, -48:i32
%2 = ult %1, 10:i32
infer %2


; start LHS (in $13)
%0:i32 = var
%1 = mul %0, 10:i32
%2:i32 = var
%3 = add %2, -48:i32
%4 = ult %3, 10:i32
pc %4 1:i1
infer %1


; start LHS (in $13)
%0:i32 = var
%1 = mul %0, 10:i32
%2 = add %1, -48:i32
%3:i32 = var
%4 = add %3, -48:i32
%5 = ult %4, 10:i32
pc %5 1:i1
infer %2


; start LHS (in $13)
%0:i32 = var
%1 = mul %0, 10:i32
%2 = add %1, -48:i32
%3:i32 = var
%4 = add %2, %3
%5:i32 = var
%6 = add %5, -48:i32
%7 = ult %6, 10:i32
pc %7 1:i1
infer %4


; start LHS (in $13)
%0:i32 = var
%1 = add %0, 1:i32
%2:i32 = var
%3 = add %2, -48:i32
%4 = ult %3, 10:i32
pc %4 1:i1
infer %1


; start LHS (in $13)
%0:i32 = var
%1 = add %0, -48:i32
%2:i32 = var
%3 = add %2, -48:i32
%4 = ult %3, 10:i32
pc %4 1:i1
infer %1


; start LHS (in $13)
%0:i32 = var
%1 = add %0, -48:i32
%2 = ult %1, 10:i32
%3:i32 = var
%4 = add %3, -48:i32
%5 = ult %4, 10:i32
pc %5 1:i1
infer %2


; function: $14

; start LHS (in $14)
%0:i32 = var
%1 = add %0, 48:i32
infer %1


; start LHS (in $14)
%0:i32 = var
%1 = add %0, 16:i32
infer %1


; start LHS (in $14)
%0:i32 = var
%1 = add %0, 32:i32
infer %1


; start LHS (in $14)
%0:i32 = var
%1 = add %0, 28:i32
infer %1


; start LHS (in $14)
%0:i32 = var
%1 = add %0, 20:i32
infer %1


; start LHS (in $14)
%0:i32 = var
%1:i32 = var
%2 = sub %0, %1
infer %2


; start LHS (in $14)
%0:i32 = var
%1 = add %0, 60:i32
infer %1


; start LHS (in $14)
%0:i32 = var
%1:i32 = var
%2 = sub %0, %1 (hasExternalUses)
%3:i32 = var
%4 = add %2, %3
infer %4


; start LHS (in $14)
%0:i32 = var
%1 = ult -4096:i32, %0
infer %1


; start LHS (in $14)
%0:i32 = var
%1 = sub 0:i32, %0
%2 = ult -4096:i32, %0
pc %2 1:i1
infer %1


; start LHS (in $14)
%0:i32 = var
%1:i32 = var
%2 = sub %0, %1 (hasExternalUses)
%3:i32 = var
%4 = add %2, %3 (hasExternalUses)
%5 = block 2
%6:i32 = var
%7 = phi %5, -1:i32, %6
%8 = eq %4, %7
%9 = ult -4096:i32, %6
blockpc %5 0 %9 1:i1
%10:i32 = zext %9
%11 = eq %10, 0:i32
blockpc %5 1 %11 1:i1
infer %8


; start LHS (in $14)
%0:i32 = var
%1 = sle 0:i32, %0
infer %1


; start LHS (in $14)
%0:i32 = var
%1:i32 = var
%2 = sub %0, %1
%3 = sle 0:i32, %1
pc %3 1:i1
infer %2


; start LHS (in $14)
%0:i32 = var
%1 = add %0, 8:i32
%2:i32 = var
%3 = sle 0:i32, %2
pc %3 1:i1
infer %1


; start LHS (in $14)
%0:i32 = var
%1:i32 = var
%2 = ult %0, %1
%3 = sle 0:i32, %1
pc %3 1:i1
infer %2


; start LHS (in $14)
%0:i32 = var
%1:i32 = var
%2 = ult %0, %1 (hasExternalUses)
%3:i32 = zext %2
%4 = shl %3, 31:i32
%5 = sle 0:i32, %1
pc %5 1:i1
infer %4


; start LHS (in $14)
%0:i32 = var
%1:i32 = var
%2 = ult %0, %1 (hasExternalUses)
%3:i32 = zext %2
%4 = shl %3, 31:i32
%5 = ashr %4, 31:i32
%6 = sle 0:i32, %1
pc %6 1:i1
infer %5


; start LHS (in $14)
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3 = ult %1, %2 (hasExternalUses)
%4:i32 = zext %3
%5 = shl %4, 31:i32
%6 = ashr %5, 31:i32
%7 = add %0, %6
%8 = sle 0:i32, %2
pc %8 1:i1
infer %7


; start LHS (in $14)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = phi %1, %2, 0:i32
%4 = sub %0, %3
%5 = ult %2, %0
blockpc %1 0 %5 1:i1
%6:i32 = zext %5
%7 = eq %6, 0:i32
blockpc %1 1 %7 1:i1
%8 = sle 0:i32, %0
pc %8 1:i1
infer %4


; start LHS (in $14)
%0:i32 = var
%1:i32 = var
%2 = block 2
%3:i32 = var
%4 = phi %2, %3, 0:i32
%5 = sub %1, %4 (hasExternalUses)
%6 = add %0, %5
%7 = ult %3, %1
blockpc %2 0 %7 1:i1
%8:i32 = zext %7
%9 = eq %8, 0:i32
blockpc %2 1 %9 1:i1
%10 = sle 0:i32, %1
pc %10 1:i1
infer %6


; start LHS (in $14)
%0 = block 2
%1:i32 = var
%2 = add %1, 8:i32 (hasExternalUses)
%3 = phi %0, %1, %2
%4 = add %3, 4:i32
%5:i32 = var
%6:i32 = var
%7 = ult %5, %6
blockpc %0 0 %7 1:i1
%8:i32 = zext %7
%9 = eq %8, 0:i32
blockpc %0 1 %9 1:i1
%10 = sle 0:i32, %6
pc %10 1:i1
infer %4


; start LHS (in $14)
%0:i32 = var
%1:i32 = var
%2 = block 2
%3:i32 = var
%4 = phi %2, %3, 0:i32
%5 = sub %1, %4 (hasExternalUses)
%6 = sub %0, %5
%7 = ult %3, %1
blockpc %2 0 %7 1:i1
%8:i32 = zext %7
%9 = eq %8, 0:i32
blockpc %2 1 %9 1:i1
%10 = sle 0:i32, %1
pc %10 1:i1
infer %6


; start LHS (in $14)
%0:i32 = var
%1 = ult -4096:i32, %0
%2:i32 = var
%3 = sle 0:i32, %2
pc %3 1:i1
infer %1


; start LHS (in $14)
%0:i32 = var
%1 = sub 0:i32, %0
%2 = ult -4096:i32, %0
%3:i32 = var
%4 = sle 0:i32, %3
pc %2 1:i1
pc %4 1:i1
infer %1


; start LHS (in $14)
%0:i32 = var
%1:i32 = var
%2 = sub %0, %1
%3 = block 2
%4:i32 = var
%5 = phi %3, -1:i32, %4
%6 = eq %2, %5
%7 = ult -4096:i32, %4
blockpc %3 0 %7 1:i1
%8:i32 = zext %7
%9 = eq %8, 0:i32
blockpc %3 1 %9 1:i1
%10 = sle 0:i32, %1
pc %10 1:i1
infer %6


; start LHS (in $14)
%0:i32 = var
%1 = or %0, 32:i32
infer %1


; start LHS (in $14)
%0:i32 = var
%1 = eq %0, 2:i32
infer %1


; start LHS (in $14)
%0:i32 = var
%1:i32 = var
%2 = sub %0, %1
%3:i32 = var
%4 = eq %3, 2:i32
%5:i32 = zext %4
%6 = eq %5, 0:i32
pc %6 1:i1
infer %2


; start LHS (in $14)
%0:i32 = var
%1:i32 = var
%2 = add %0, %1
infer %2


; function: $15

; start LHS (in $15)
%0:i32 = var
%1 = eq %0, 0:i32
infer %1


; start LHS (in $15)
%0:i32 = var
%1 = add %0, -8:i32
infer %1


; start LHS (in $15)
%0:i32 = var
%1 = add %0, -4:i32
infer %1


; start LHS (in $15)
%0:i32 = var
%1 = and %0, -8:i32
infer %1


; start LHS (in $15)
%0:i32 = var
%1 = add %0, -8:i32 (hasExternalUses)
%2:i32 = var
%3 = and %2, -8:i32 (hasExternalUses)
%4 = add %1, %3
infer %4


; start LHS (in $15)
%0:i32 = var
%1 = and %0, 1:i32
infer %1


; start LHS (in $15)
%0:i32 = var
%1 = and %0, 3:i32
%2 = and %0, 1:i32
%3 = eq %2, 0:i32
pc %3 1:i1
infer %1


; start LHS (in $15)
%0:i32 = var
%1 = and %0, 3:i32
%2 = eq %1, 0:i32
%3 = and %0, 1:i32
%4 = eq %3, 0:i32
pc %4 1:i1
infer %2


; start LHS (in $15)
%0:i32 = var
%1 = add %0, -8:i32 (hasExternalUses)
%2:i32 = var
%3 = sub %1, %2
%4:i32 = var
%5 = and %4, 1:i32
%6 = eq %5, 0:i32
pc %6 1:i1
infer %3


; start LHS (in $15)
%0:i32 = var
%1 = add %0, -8:i32 (hasExternalUses)
%2:i32 = var
%3 = sub %1, %2 (hasExternalUses)
%4:i32 = var
%5 = ult %3, %4
%6:i32 = var
%7 = and %6, 1:i32
%8 = eq %7, 0:i32
pc %8 1:i1
infer %5


; start LHS (in $15)
%0:i32 = var
%1:i32 = var
%2 = and %1, -8:i32 (hasExternalUses)
%3 = add %0, %2
%4 = and %1, 1:i32
%5 = eq %4, 0:i32
pc %5 1:i1
infer %3


; start LHS (in $15)
%0:i32 = var
%1:i32 = var
%2 = add %1, -8:i32 (hasExternalUses)
%3:i32 = var
%4 = sub %2, %3 (hasExternalUses)
%5 = eq %0, %4
%6:i32 = var
%7 = and %6, 1:i32
%8 = eq %7, 0:i32
pc %8 1:i1
infer %5


; start LHS (in $15)
%0:i32 = var
%1 = add %0, -8:i32 (hasExternalUses)
%2:i32 = var
%3 = and %2, -8:i32 (hasExternalUses)
%4 = add %1, %3 (hasExternalUses)
%5 = add %4, 4:i32
%6:i32 = var
%7:i32 = var
%8 = sub %1, %7
%9 = eq %6, %8
%10 = and %2, 1:i32
%11 = eq %10, 0:i32
pc %9 1:i1
pc %11 1:i1
infer %5


; start LHS (in $15)
%0:i32 = var
%1 = and %0, 3:i32
%2:i32 = var
%3:i32 = var
%4 = add %3, -8:i32
%5:i32 = var
%6 = sub %4, %5
%7 = eq %2, %6
%8:i32 = var
%9 = and %8, 1:i32
%10 = eq %9, 0:i32
pc %7 1:i1
pc %10 1:i1
infer %1


; start LHS (in $15)
%0:i32 = var
%1 = and %0, 3:i32
%2 = ne %1, 3:i32
%3:i32 = var
%4:i32 = var
%5 = add %4, -8:i32
%6:i32 = var
%7 = sub %5, %6
%8 = eq %3, %7
%9:i32 = var
%10 = and %9, 1:i32
%11 = eq %10, 0:i32
pc %8 1:i1
pc %11 1:i1
infer %2


; start LHS (in $15)
%0:i32 = var
%1 = and %0, -2:i32
%2:i32 = var
%3:i32 = var
%4 = add %3, -8:i32
%5:i32 = var
%6 = sub %4, %5
%7 = eq %2, %6
%8:i32 = var
%9 = and %8, 1:i32
%10 = eq %9, 0:i32
pc %7 1:i1
pc %10 1:i1
infer %1


; start LHS (in $15)
%0:i32 = var
%1:i32 = var
%2 = and %1, -8:i32 (hasExternalUses)
%3 = add %0, %2 (hasExternalUses)
%4 = or %3, 1:i32
%5:i32 = var
%6:i32 = var
%7 = add %6, -8:i32
%8 = sub %7, %0
%9 = eq %5, %8
%10 = and %1, 1:i32
%11 = eq %10, 0:i32
pc %9 1:i1
pc %11 1:i1
infer %4


; start LHS (in $15)
%0:i32 = var
%1 = add %0, -8:i32 (hasExternalUses)
%2:i32 = var
%3 = sub %1, %2 (hasExternalUses)
%4:i32 = var
%5 = and %4, -8:i32 (hasExternalUses)
%6 = add %2, %5 (hasExternalUses)
%7 = add %3, %6
%8:i32 = var
%9 = eq %8, %3
%10 = and %4, 1:i32
%11 = eq %10, 0:i32
pc %9 1:i1
pc %11 1:i1
infer %7


; start LHS (in $15)
%0:i32 = var
%1 = lshr %0, 3:i32
%2:i32 = var
%3 = and %2, 1:i32
%4 = eq %3, 0:i32
pc %4 1:i1
infer %1


; start LHS (in $15)
%0:i32 = var
%1 = ult %0, 256:i32
%2:i32 = var
%3 = and %2, 1:i32
%4 = eq %3, 0:i32
pc %4 1:i1
infer %1


; start LHS (in $15)
%0:i32 = var
%1:i32 = var
%2 = eq %0, %1
%3:i32 = var
%4 = ult %3, 256:i32
%5:i32 = var
%6 = and %5, 1:i32
%7 = eq %6, 0:i32
pc %4 1:i1
pc %7 1:i1
infer %2


; start LHS (in $15)
%0:i32 = var
%1 = lshr %0, 3:i32
%2 = shl 1:i32, %1
%3:i32 = var
%4:i32 = var
%5 = eq %3, %4
%6 = ult %0, 256:i32
%7:i32 = var
%8 = and %7, 1:i32
%9 = eq %8, 0:i32
pc %5 1:i1
pc %6 1:i1
pc %9 1:i1
infer %2


; start LHS (in $15)
%0:i32 = var
%1 = lshr %0, 3:i32
%2 = shl 1:i32, %1
%3 = xor %2, -1:i32
%4:i32 = var
%5:i32 = var
%6 = eq %4, %5
%7 = ult %0, 256:i32
%8:i32 = var
%9 = and %8, 1:i32
%10 = eq %9, 0:i32
pc %6 1:i1
pc %7 1:i1
pc %10 1:i1
infer %3


; start LHS (in $15)
%0:i32 = var
%1:i32 = var
%2 = lshr %1, 3:i32
%3 = shl 1:i32, %2
%4 = xor %3, -1:i32
%5 = and %0, %4
%6:i32 = var
%7:i32 = var
%8 = eq %6, %7
%9 = ult %1, 256:i32
%10:i32 = var
%11 = and %10, 1:i32
%12 = eq %11, 0:i32
pc %8 1:i1
pc %9 1:i1
pc %12 1:i1
infer %5


; start LHS (in $15)
%0:i32 = var
%1:i32 = var
%2 = add %1, -8:i32 (hasExternalUses)
%3:i32 = var
%4 = sub %2, %3 (hasExternalUses)
%5 = eq %0, %4
%6:i32 = var
%7 = and %6, 1:i32
%8 = eq %7, 0:i32
pc %8 1:i1
infer %5


; start LHS (in $15)
%0:i32 = var
%1 = add %0, -8:i32 (hasExternalUses)
%2:i32 = var
%3 = sub %1, %2 (hasExternalUses)
%4 = add %3, 16:i32
%5:i32 = var
%6 = eq %5, %3
%7:i32 = var
%8 = and %7, 1:i32
%9 = eq %8, 0:i32
pc %6 1:i1
pc %9 1:i1
infer %4


; start LHS (in $15)
%0:i32 = var
%1 = add %0, -8:i32 (hasExternalUses)
%2:i32 = var
%3 = sub %1, %2 (hasExternalUses)
%4 = add %3, 16:i32 (hasExternalUses)
%5 = add %4, 4:i32
%6:i32 = var
%7 = eq %6, %3
%8:i32 = var
%9 = and %8, 1:i32
%10 = eq %9, 0:i32
pc %7 1:i1
pc %10 1:i1
infer %5


; start LHS (in $15)
%0:i32 = var
%1 = eq %0, 0:i32
%2:i32 = var
%3:i32 = var
%4 = add %3, -8:i32
%5:i32 = var
%6 = sub %4, %5
%7 = eq %2, %6
%8:i32 = var
%9 = and %8, 1:i32
%10 = eq %9, 0:i32
pc %7 1:i1
pc %10 1:i1
infer %1


; start LHS (in $15)
%0:i32 = var
%1 = add %0, 20:i32
%2:i32 = var
%3:i32 = var
%4 = add %3, -8:i32
%5:i32 = var
%6 = sub %4, %5
%7 = eq %2, %6
%8:i32 = var
%9 = and %8, 1:i32
%10 = eq %9, 0:i32
pc %7 1:i1
pc %10 1:i1
infer %1


; start LHS (in $15)
%0:i32 = var
%1 = add %0, 16:i32
%2:i32 = var
%3:i32 = var
%4 = add %3, -8:i32
%5:i32 = var
%6 = sub %4, %5
%7 = eq %2, %6
%8:i32 = var
%9 = and %8, 1:i32
%10 = eq %9, 0:i32
pc %7 1:i1
pc %10 1:i1
infer %1


; start LHS (in $15)
%0:i32 = var
%1 = shl %0, 2:i32
%2:i32 = var
%3 = ne %2, 0:i32
%4:i32 = var
%5 = and %4, 1:i32
%6 = eq %5, 0:i32
pc %3 1:i1
pc %6 1:i1
infer %1


; start LHS (in $15)
%0:i32 = var
%1 = shl %0, 2:i32
%2 = add %1, 4260:i32
%3:i32 = var
%4 = ne %3, 0:i32
%5:i32 = var
%6 = and %5, 1:i32
%7 = eq %6, 0:i32
pc %4 1:i1
pc %7 1:i1
infer %2


; start LHS (in $15)
%0:i32 = var
%1:i32 = var
%2 = add %1, -8:i32 (hasExternalUses)
%3:i32 = var
%4 = sub %2, %3 (hasExternalUses)
%5 = eq %0, %4
%6:i32 = var
%7 = ne %6, 0:i32
%8:i32 = var
%9 = and %8, 1:i32
%10 = eq %9, 0:i32
pc %7 1:i1
pc %10 1:i1
infer %5


; start LHS (in $15)
%0 = block 2
%1 = block 2
%2:i32 = var
%3:i32 = var
%4 = phi %1, %2, %3
%5 = phi %0, 0:i32, %4
%6 = eq %5, 0:i32
%7:i32 = var
%8 = add %7, -8:i32
%9:i32 = var
%10 = sub %8, %9
%11 = eq %3, %10
blockpc %1 0 %11 1:i1
%12:i32 = zext %11
%13 = eq %12, 0:i32
blockpc %1 1 %13 1:i1
%14:i32 = var
%15 = eq %14, %10
%16:i32 = var
%17 = ne %16, 0:i32
%18:i32 = var
%19 = and %18, 1:i32
%20 = eq %19, 0:i32
pc %15 1:i1
pc %17 1:i1
pc %20 1:i1
infer %6


; start LHS (in $15)
%0:i32 = var
%1 = shl 1:i32, %0
%2 = block 2
%3 = block 2
%4:i32 = var
%5:i32 = var
%6 = add %5, -8:i32
%7:i32 = var
%8 = sub %6, %7
%9 = eq %4, %8
blockpc %3 0 %9 1:i1
%10:i32 = zext %9
%11 = eq %10, 0:i32
blockpc %3 1 %11 1:i1
%12:i32 = var
%13 = phi %3, %12, %4
%14 = phi %2, 0:i32, %13
%15 = eq %14, 0:i32
%16:i32 = var
%17 = eq %16, %8
%18:i32 = var
%19 = ne %18, 0:i32
%20:i32 = var
%21 = and %20, 1:i32
%22 = eq %21, 0:i32
pc %15 1:i1
pc %17 1:i1
pc %19 1:i1
pc %22 1:i1
infer %1


; start LHS (in $15)
%0:i32 = var
%1 = shl 1:i32, %0
%2 = xor %1, -1:i32
%3 = block 2
%4 = block 2
%5:i32 = var
%6:i32 = var
%7 = add %6, -8:i32
%8:i32 = var
%9 = sub %7, %8
%10 = eq %5, %9
blockpc %4 0 %10 1:i1
%11:i32 = zext %10
%12 = eq %11, 0:i32
blockpc %4 1 %12 1:i1
%13:i32 = var
%14 = phi %4, %13, %5
%15 = phi %3, 0:i32, %14
%16 = eq %15, 0:i32
%17:i32 = var
%18 = eq %17, %9
%19:i32 = var
%20 = ne %19, 0:i32
%21:i32 = var
%22 = and %21, 1:i32
%23 = eq %22, 0:i32
pc %16 1:i1
pc %18 1:i1
pc %20 1:i1
pc %23 1:i1
infer %2


; start LHS (in $15)
%0:i32 = var
%1:i32 = var
%2 = shl 1:i32, %1
%3 = xor %2, -1:i32
%4 = and %0, %3
%5 = block 2
%6 = block 2
%7:i32 = var
%8:i32 = var
%9 = add %8, -8:i32
%10:i32 = var
%11 = sub %9, %10
%12 = eq %7, %11
blockpc %6 0 %12 1:i1
%13:i32 = zext %12
%14 = eq %13, 0:i32
blockpc %6 1 %14 1:i1
%15:i32 = var
%16 = phi %6, %15, %7
%17 = phi %5, 0:i32, %16
%18 = eq %17, 0:i32
%19:i32 = var
%20 = eq %19, %11
%21:i32 = var
%22 = ne %21, 0:i32
%23:i32 = var
%24 = and %23, 1:i32
%25 = eq %24, 0:i32
pc %18 1:i1
pc %20 1:i1
pc %22 1:i1
pc %25 1:i1
infer %4


; start LHS (in $15)
%0:i32 = var
%1 = add %0, 16:i32
%2:i32 = var
%3:i32 = var
%4 = add %3, -8:i32
%5:i32 = var
%6 = sub %4, %5
%7 = eq %2, %6
%8:i32 = zext %7
%9 = eq %8, 0:i32
%10 = ne %0, 0:i32
%11:i32 = var
%12 = and %11, 1:i32
%13 = eq %12, 0:i32
pc %9 1:i1
pc %10 1:i1
pc %13 1:i1
infer %1


; start LHS (in $15)
%0:i32 = var
%1:i32 = var
%2 = add %1, -8:i32 (hasExternalUses)
%3:i32 = var
%4 = sub %2, %3 (hasExternalUses)
%5 = ne %0, %4
%6:i32 = var
%7 = eq %6, %4
%8:i32 = zext %7
%9 = eq %8, 0:i32
%10:i32 = var
%11 = ne %10, 0:i32
%12:i32 = var
%13 = and %12, 1:i32
%14 = eq %13, 0:i32
pc %9 1:i1
pc %11 1:i1
pc %14 1:i1
infer %5


; start LHS (in $15)
%0:i32 = var
%1:i32 = var
%2 = add %1, -8:i32 (hasExternalUses)
%3:i32 = var
%4 = sub %2, %3 (hasExternalUses)
%5 = ne %0, %4
%6:i32 = zext %5
%7 = shl %6, 2:i32
%8:i32 = var
%9 = eq %8, %4
%10:i32 = zext %9
%11 = eq %10, 0:i32
%12:i32 = var
%13 = ne %12, 0:i32
%14:i32 = var
%15 = and %14, 1:i32
%16 = eq %15, 0:i32
pc %11 1:i1
pc %13 1:i1
pc %16 1:i1
infer %7


; start LHS (in $15)
%0:i32 = var
%1 = add %0, 16:i32
%2:i32 = var
%3:i32 = var
%4 = add %3, -8:i32 (hasExternalUses)
%5:i32 = var
%6 = sub %4, %5 (hasExternalUses)
%7 = ne %2, %6
%8:i32 = zext %7
%9 = shl %8, 2:i32
%10 = add %1, %9
%11:i32 = var
%12 = eq %11, %6
%13:i32 = zext %12
%14 = eq %13, 0:i32
%15 = ne %0, 0:i32
%16:i32 = var
%17 = and %16, 1:i32
%18 = eq %17, 0:i32
pc %14 1:i1
pc %15 1:i1
pc %18 1:i1
infer %10


; start LHS (in $15)
%0 = block 2
%1 = block 2
%2:i32 = var
%3:i32 = var
%4 = phi %1, %2, %3
%5 = phi %0, 0:i32, %4
%6 = eq %5, 0:i32
%7:i32 = var
%8 = add %7, -8:i32
%9:i32 = var
%10 = sub %8, %9
%11 = eq %3, %10
blockpc %1 0 %11 1:i1
%12:i32 = zext %11
%13 = eq %12, 0:i32
blockpc %1 1 %13 1:i1
%14:i32 = var
%15 = eq %14, %10
%16:i32 = zext %15
%17 = eq %16, 0:i32
%18:i32 = var
%19 = ne %18, 0:i32
%20:i32 = var
%21 = and %20, 1:i32
%22 = eq %21, 0:i32
pc %17 1:i1
pc %19 1:i1
pc %22 1:i1
infer %6


; start LHS (in $15)
%0:i32 = var
%1 = add %0, -8:i32 (hasExternalUses)
%2:i32 = var
%3 = sub %1, %2 (hasExternalUses)
%4 = add %3, 16:i32
%5:i32 = var
%6 = ne %5, 0:i32
%7:i32 = var
%8 = and %7, 1:i32
%9 = eq %8, 0:i32
pc %6 1:i1
pc %9 1:i1
infer %4


; start LHS (in $15)
%0:i32 = var
%1 = add %0, -8:i32 (hasExternalUses)
%2:i32 = var
%3 = and %2, -8:i32 (hasExternalUses)
%4 = add %1, %3 (hasExternalUses)
%5 = block 5
%6:i32 = var
%7 = sub %1, %6 (hasExternalUses)
%8 = block 2
%9 = phi %8, %1, %7
%10 = phi %5, %7, %7, %7, %7, %9
%11 = ule %4, %10
%12 = and %2, 1:i32
%13 = ne %12, 0:i32
blockpc %8 0 %13 1:i1
%14 = eq %12, 0:i32
blockpc %8 1 %14 1:i1
infer %11


; start LHS (in $15)
%0:i32 = var
%1 = add %0, -8:i32 (hasExternalUses)
%2:i32 = var
%3 = and %2, -8:i32 (hasExternalUses)
%4 = add %1, %3 (hasExternalUses)
%5 = add %4, 4:i32
infer %5


; start LHS (in $15)
%0:i32 = var
%1 = and %0, 1:i32
infer %1


; start LHS (in $15)
%0:i32 = var
%1 = and %0, 1:i32
%2 = eq %1, 0:i32
infer %2


; start LHS (in $15)
%0:i32 = var
%1 = and %0, 2:i32
infer %1


; start LHS (in $15)
%0:i32 = var
%1 = and %0, -2:i32
%2 = and %0, 2:i32
%3 = ne %2, 0:i32
pc %3 1:i1
infer %1


; start LHS (in $15)
%0 = block 5
%1:i32 = var
%2:i32 = var
%3 = and %2, -8:i32 (hasExternalUses)
%4 = add %1, %3 (hasExternalUses)
%5 = block 2
%6 = phi %5, %3, %4
%7 = phi %0, %4, %4, %4, %4, %6
%8 = or %7, 1:i32
%9 = and %2, 1:i32
%10 = ne %9, 0:i32
blockpc %5 0 %10 1:i1
%11 = eq %9, 0:i32
blockpc %5 1 %11 1:i1
%12:i32 = var
%13 = and %12, 2:i32
%14 = ne %13, 0:i32
pc %14 1:i1
infer %8


; start LHS (in $15)
%0 = block 5
%1:i32 = var
%2 = add %1, -8:i32 (hasExternalUses)
%3:i32 = var
%4 = sub %2, %3 (hasExternalUses)
%5 = block 2
%6 = phi %5, %2, %4
%7 = phi %0, %4, %4, %4, %4, %6
%8:i32 = var
%9 = and %8, -8:i32 (hasExternalUses)
%10 = add %3, %9 (hasExternalUses)
%11 = phi %5, %9, %10
%12 = phi %0, %10, %10, %10, %10, %11
%13 = add %7, %12
%14 = and %8, 1:i32
%15 = ne %14, 0:i32
blockpc %5 0 %15 1:i1
%16 = eq %14, 0:i32
blockpc %5 1 %16 1:i1
%17:i32 = var
%18 = and %17, 2:i32
%19 = ne %18, 0:i32
pc %19 1:i1
infer %13


; start LHS (in $15)
%0:i32 = var
%1:i32 = var
%2 = add %1, -8:i32 (hasExternalUses)
%3:i32 = var
%4 = and %3, -8:i32 (hasExternalUses)
%5 = add %2, %4 (hasExternalUses)
%6 = eq %0, %5
%7:i32 = var
%8 = and %7, 2:i32
%9 = eq %8, 0:i32
pc %9 1:i1
infer %6


; start LHS (in $15)
%0:i32 = var
%1 = block 5
%2:i32 = var
%3:i32 = var
%4 = and %3, -8:i32 (hasExternalUses)
%5 = add %2, %4 (hasExternalUses)
%6 = block 2
%7 = phi %6, %4, %5
%8 = phi %1, %5, %5, %5, %5, %7
%9 = add %0, %8
%10 = and %3, 1:i32
%11 = ne %10, 0:i32
blockpc %6 0 %11 1:i1
%12 = eq %10, 0:i32
blockpc %6 1 %12 1:i1
%13:i32 = var
%14:i32 = var
%15 = add %14, -8:i32
%16 = add %15, %4
%17 = eq %13, %16
%18:i32 = var
%19 = and %18, 2:i32
%20 = eq %19, 0:i32
pc %17 1:i1
pc %20 1:i1
infer %9


; start LHS (in $15)
%0:i32 = var
%1 = block 5
%2:i32 = var
%3:i32 = var
%4 = and %3, -8:i32 (hasExternalUses)
%5 = add %2, %4 (hasExternalUses)
%6 = block 2
%7 = phi %6, %4, %5
%8 = phi %1, %5, %5, %5, %5, %7
%9 = add %0, %8 (hasExternalUses)
%10 = or %9, 1:i32
%11 = and %3, 1:i32
%12 = ne %11, 0:i32
blockpc %6 0 %12 1:i1
%13 = eq %11, 0:i32
blockpc %6 1 %13 1:i1
%14:i32 = var
%15:i32 = var
%16 = add %15, -8:i32
%17 = add %16, %4
%18 = eq %14, %17
%19:i32 = var
%20 = and %19, 2:i32
%21 = eq %20, 0:i32
pc %18 1:i1
pc %21 1:i1
infer %10


; start LHS (in $15)
%0 = block 5
%1:i32 = var
%2 = add %1, -8:i32 (hasExternalUses)
%3:i32 = var
%4 = sub %2, %3 (hasExternalUses)
%5 = block 2
%6 = phi %5, %2, %4
%7 = phi %0, %4, %4, %4, %4, %6
%8:i32 = var
%9 = ne %7, %8
%10:i32 = var
%11 = and %10, 1:i32
%12 = ne %11, 0:i32
blockpc %5 0 %12 1:i1
%13 = eq %11, 0:i32
blockpc %5 1 %13 1:i1
%14:i32 = var
%15 = and %10, -8:i32
%16 = add %2, %15
%17 = eq %14, %16
%18:i32 = var
%19 = and %18, 2:i32
%20 = eq %19, 0:i32
pc %17 1:i1
pc %20 1:i1
infer %9


; start LHS (in $15)
%0:i32 = var
%1:i32 = var
%2 = add %1, -8:i32 (hasExternalUses)
%3:i32 = var
%4 = and %3, -8:i32 (hasExternalUses)
%5 = add %2, %4 (hasExternalUses)
%6 = eq %0, %5
%7:i32 = var
%8 = and %7, 2:i32
%9 = eq %8, 0:i32
pc %9 1:i1
infer %6


; start LHS (in $15)
%0:i32 = var
%1 = block 5
%2:i32 = var
%3:i32 = var
%4 = and %3, -8:i32 (hasExternalUses)
%5 = add %2, %4 (hasExternalUses)
%6 = block 2
%7 = phi %6, %4, %5
%8 = phi %1, %5, %5, %5, %5, %7
%9 = add %0, %8
%10 = and %3, 1:i32
%11 = ne %10, 0:i32
blockpc %6 0 %11 1:i1
%12 = eq %10, 0:i32
blockpc %6 1 %12 1:i1
%13:i32 = var
%14:i32 = var
%15 = add %14, -8:i32
%16 = add %15, %4
%17 = eq %13, %16
%18:i32 = var
%19 = and %18, 2:i32
%20 = eq %19, 0:i32
pc %17 1:i1
pc %20 1:i1
infer %9


; start LHS (in $15)
%0:i32 = var
%1 = block 5
%2:i32 = var
%3:i32 = var
%4 = and %3, -8:i32 (hasExternalUses)
%5 = add %2, %4 (hasExternalUses)
%6 = block 2
%7 = phi %6, %4, %5
%8 = phi %1, %5, %5, %5, %5, %7
%9 = add %0, %8 (hasExternalUses)
%10 = or %9, 1:i32
%11 = and %3, 1:i32
%12 = ne %11, 0:i32
blockpc %6 0 %12 1:i1
%13 = eq %11, 0:i32
blockpc %6 1 %13 1:i1
%14:i32 = var
%15:i32 = var
%16 = add %15, -8:i32
%17 = add %16, %4
%18 = eq %14, %17
%19:i32 = var
%20 = and %19, 2:i32
%21 = eq %20, 0:i32
pc %18 1:i1
pc %21 1:i1
infer %10


; start LHS (in $15)
%0 = block 5
%1:i32 = var
%2 = add %1, -8:i32 (hasExternalUses)
%3:i32 = var
%4 = sub %2, %3 (hasExternalUses)
%5 = block 2
%6 = phi %5, %2, %4
%7 = phi %0, %4, %4, %4, %4, %6
%8:i32 = var
%9:i32 = var
%10 = and %9, -8:i32 (hasExternalUses)
%11 = add %3, %10 (hasExternalUses)
%12 = phi %5, %10, %11
%13 = phi %0, %11, %11, %11, %11, %12
%14 = add %8, %13 (hasExternalUses)
%15 = add %7, %14
%16 = and %9, 1:i32
%17 = ne %16, 0:i32
blockpc %5 0 %17 1:i1
%18 = eq %16, 0:i32
blockpc %5 1 %18 1:i1
%19:i32 = var
%20 = add %2, %10
%21 = eq %19, %20
%22:i32 = var
%23 = and %22, 2:i32
%24 = eq %23, 0:i32
pc %21 1:i1
pc %24 1:i1
infer %15


; start LHS (in $15)
%0:i32 = var
%1 = and %0, -8:i32
%2 = and %0, 2:i32
%3 = eq %2, 0:i32
pc %3 1:i1
infer %1


; start LHS (in $15)
%0:i32 = var
%1 = and %0, -8:i32
%2 = block 5
%3:i32 = var
%4:i32 = var
%5 = and %4, -8:i32 (hasExternalUses)
%6 = add %3, %5 (hasExternalUses)
%7 = block 2
%8 = phi %7, %5, %6
%9 = phi %2, %6, %6, %6, %6, %8
%10 = add %1, %9
%11 = and %4, 1:i32
%12 = ne %11, 0:i32
blockpc %7 0 %12 1:i1
%13 = eq %11, 0:i32
blockpc %7 1 %13 1:i1
%14 = and %0, 2:i32
%15 = eq %14, 0:i32
pc %15 1:i1
infer %10


; start LHS (in $15)
%0:i32 = var
%1 = lshr %0, 3:i32
%2 = and %0, 2:i32
%3 = eq %2, 0:i32
pc %3 1:i1
infer %1


; start LHS (in $15)
%0:i32 = var
%1 = ult %0, 256:i32
%2 = and %0, 2:i32
%3 = eq %2, 0:i32
pc %3 1:i1
infer %1


; start LHS (in $15)
%0:i32 = var
%1:i32 = var
%2 = eq %0, %1
%3:i32 = var
%4 = ult %3, 256:i32
%5 = and %3, 2:i32
%6 = eq %5, 0:i32
pc %4 1:i1
pc %6 1:i1
infer %2


; start LHS (in $15)
%0:i32 = var
%1 = lshr %0, 3:i32
%2 = shl 1:i32, %1
%3:i32 = var
%4:i32 = var
%5 = eq %3, %4
%6 = ult %0, 256:i32
%7 = and %0, 2:i32
%8 = eq %7, 0:i32
pc %5 1:i1
pc %6 1:i1
pc %8 1:i1
infer %2


; start LHS (in $15)
%0:i32 = var
%1 = lshr %0, 3:i32
%2 = shl 1:i32, %1
%3 = xor %2, -1:i32
%4:i32 = var
%5:i32 = var
%6 = eq %4, %5
%7 = ult %0, 256:i32
%8 = and %0, 2:i32
%9 = eq %8, 0:i32
pc %6 1:i1
pc %7 1:i1
pc %9 1:i1
infer %3


; start LHS (in $15)
%0:i32 = var
%1:i32 = var
%2 = lshr %1, 3:i32
%3 = shl 1:i32, %2
%4 = xor %3, -1:i32
%5 = and %0, %4
%6:i32 = var
%7:i32 = var
%8 = eq %6, %7
%9 = ult %1, 256:i32
%10 = and %1, 2:i32
%11 = eq %10, 0:i32
pc %8 1:i1
pc %9 1:i1
pc %11 1:i1
infer %5


; start LHS (in $15)
%0:i32 = var
%1:i32 = var
%2 = add %1, -8:i32 (hasExternalUses)
%3:i32 = var
%4 = and %3, -8:i32 (hasExternalUses)
%5 = add %2, %4 (hasExternalUses)
%6 = eq %0, %5
%7:i32 = var
%8 = ult %7, 256:i32
%9:i32 = zext %8
%10 = eq %9, 0:i32
%11 = and %7, 2:i32
%12 = eq %11, 0:i32
pc %10 1:i1
pc %12 1:i1
infer %6


; start LHS (in $15)
%0:i32 = var
%1 = add %0, -8:i32 (hasExternalUses)
%2:i32 = var
%3 = and %2, -8:i32 (hasExternalUses)
%4 = add %1, %3 (hasExternalUses)
%5 = add %4, 16:i32
%6:i32 = var
%7 = eq %6, %4
%8:i32 = var
%9 = ult %8, 256:i32
%10:i32 = zext %9
%11 = eq %10, 0:i32
%12 = and %8, 2:i32
%13 = eq %12, 0:i32
pc %7 1:i1
pc %11 1:i1
pc %13 1:i1
infer %5


; start LHS (in $15)
%0:i32 = var
%1 = add %0, -8:i32 (hasExternalUses)
%2:i32 = var
%3 = and %2, -8:i32 (hasExternalUses)
%4 = add %1, %3 (hasExternalUses)
%5 = add %4, 16:i32 (hasExternalUses)
%6 = add %5, 4:i32
%7:i32 = var
%8 = eq %7, %4
%9:i32 = var
%10 = ult %9, 256:i32
%11:i32 = zext %10
%12 = eq %11, 0:i32
%13 = and %9, 2:i32
%14 = eq %13, 0:i32
pc %8 1:i1
pc %12 1:i1
pc %14 1:i1
infer %6


; start LHS (in $15)
%0:i32 = var
%1 = eq %0, 0:i32
%2:i32 = var
%3:i32 = var
%4 = add %3, -8:i32
%5:i32 = var
%6 = and %5, -8:i32
%7 = add %4, %6
%8 = eq %2, %7
%9:i32 = var
%10 = ult %9, 256:i32
%11:i32 = zext %10
%12 = eq %11, 0:i32
%13 = and %9, 2:i32
%14 = eq %13, 0:i32
pc %8 1:i1
pc %12 1:i1
pc %14 1:i1
infer %1


; start LHS (in $15)
%0:i32 = var
%1 = add %0, 20:i32
%2:i32 = var
%3:i32 = var
%4 = add %3, -8:i32
%5:i32 = var
%6 = and %5, -8:i32
%7 = add %4, %6
%8 = eq %2, %7
%9:i32 = var
%10 = ult %9, 256:i32
%11:i32 = zext %10
%12 = eq %11, 0:i32
%13 = and %9, 2:i32
%14 = eq %13, 0:i32
pc %8 1:i1
pc %12 1:i1
pc %14 1:i1
infer %1


; start LHS (in $15)
%0:i32 = var
%1 = add %0, 16:i32
%2:i32 = var
%3:i32 = var
%4 = add %3, -8:i32
%5:i32 = var
%6 = and %5, -8:i32
%7 = add %4, %6
%8 = eq %2, %7
%9:i32 = var
%10 = ult %9, 256:i32
%11:i32 = zext %10
%12 = eq %11, 0:i32
%13 = and %9, 2:i32
%14 = eq %13, 0:i32
pc %8 1:i1
pc %12 1:i1
pc %14 1:i1
infer %1


; start LHS (in $15)
%0:i32 = var
%1 = shl %0, 2:i32
%2:i32 = var
%3 = ne %2, 0:i32
%4:i32 = var
%5 = ult %4, 256:i32
%6:i32 = zext %5
%7 = eq %6, 0:i32
%8 = and %4, 2:i32
%9 = eq %8, 0:i32
pc %3 1:i1
pc %7 1:i1
pc %9 1:i1
infer %1


; start LHS (in $15)
%0:i32 = var
%1 = shl %0, 2:i32
%2 = add %1, 4260:i32
%3:i32 = var
%4 = ne %3, 0:i32
%5:i32 = var
%6 = ult %5, 256:i32
%7:i32 = zext %6
%8 = eq %7, 0:i32
%9 = and %5, 2:i32
%10 = eq %9, 0:i32
pc %4 1:i1
pc %8 1:i1
pc %10 1:i1
infer %2


; start LHS (in $15)
%0:i32 = var
%1:i32 = var
%2 = add %1, -8:i32 (hasExternalUses)
%3:i32 = var
%4 = and %3, -8:i32 (hasExternalUses)
%5 = add %2, %4 (hasExternalUses)
%6 = eq %0, %5
%7:i32 = var
%8 = ne %7, 0:i32
%9:i32 = var
%10 = ult %9, 256:i32
%11:i32 = zext %10
%12 = eq %11, 0:i32
%13 = and %9, 2:i32
%14 = eq %13, 0:i32
pc %8 1:i1
pc %12 1:i1
pc %14 1:i1
infer %6


; start LHS (in $15)
%0 = block 2
%1 = block 2
%2:i32 = var
%3:i32 = var
%4 = phi %1, %2, %3
%5 = phi %0, 0:i32, %4
%6 = eq %5, 0:i32
%7:i32 = var
%8 = add %7, -8:i32
%9:i32 = var
%10 = and %9, -8:i32
%11 = add %8, %10
%12 = eq %3, %11
blockpc %1 0 %12 1:i1
%13:i32 = zext %12
%14 = eq %13, 0:i32
blockpc %1 1 %14 1:i1
%15:i32 = var
%16 = eq %15, %11
%17:i32 = var
%18 = ne %17, 0:i32
%19:i32 = var
%20 = ult %19, 256:i32
%21:i32 = zext %20
%22 = eq %21, 0:i32
%23 = and %19, 2:i32
%24 = eq %23, 0:i32
pc %16 1:i1
pc %18 1:i1
pc %22 1:i1
pc %24 1:i1
infer %6


; start LHS (in $15)
%0:i32 = var
%1 = shl 1:i32, %0
%2 = block 2
%3 = block 2
%4:i32 = var
%5:i32 = var
%6 = add %5, -8:i32
%7:i32 = var
%8 = and %7, -8:i32
%9 = add %6, %8
%10 = eq %4, %9
blockpc %3 0 %10 1:i1
%11:i32 = zext %10
%12 = eq %11, 0:i32
blockpc %3 1 %12 1:i1
%13:i32 = var
%14 = phi %3, %13, %4
%15 = phi %2, 0:i32, %14
%16 = eq %15, 0:i32
%17:i32 = var
%18 = eq %17, %9
%19:i32 = var
%20 = ne %19, 0:i32
%21:i32 = var
%22 = ult %21, 256:i32
%23:i32 = zext %22
%24 = eq %23, 0:i32
%25 = and %21, 2:i32
%26 = eq %25, 0:i32
pc %16 1:i1
pc %18 1:i1
pc %20 1:i1
pc %24 1:i1
pc %26 1:i1
infer %1


; start LHS (in $15)
%0:i32 = var
%1 = shl 1:i32, %0
%2 = xor %1, -1:i32
%3 = block 2
%4 = block 2
%5:i32 = var
%6:i32 = var
%7 = add %6, -8:i32
%8:i32 = var
%9 = and %8, -8:i32
%10 = add %7, %9
%11 = eq %5, %10
blockpc %4 0 %11 1:i1
%12:i32 = zext %11
%13 = eq %12, 0:i32
blockpc %4 1 %13 1:i1
%14:i32 = var
%15 = phi %4, %14, %5
%16 = phi %3, 0:i32, %15
%17 = eq %16, 0:i32
%18:i32 = var
%19 = eq %18, %10
%20:i32 = var
%21 = ne %20, 0:i32
%22:i32 = var
%23 = ult %22, 256:i32
%24:i32 = zext %23
%25 = eq %24, 0:i32
%26 = and %22, 2:i32
%27 = eq %26, 0:i32
pc %17 1:i1
pc %19 1:i1
pc %21 1:i1
pc %25 1:i1
pc %27 1:i1
infer %2


; start LHS (in $15)
%0:i32 = var
%1:i32 = var
%2 = shl 1:i32, %1
%3 = xor %2, -1:i32
%4 = and %0, %3
%5 = block 2
%6 = block 2
%7:i32 = var
%8:i32 = var
%9 = add %8, -8:i32
%10:i32 = var
%11 = and %10, -8:i32
%12 = add %9, %11
%13 = eq %7, %12
blockpc %6 0 %13 1:i1
%14:i32 = zext %13
%15 = eq %14, 0:i32
blockpc %6 1 %15 1:i1
%16:i32 = var
%17 = phi %6, %16, %7
%18 = phi %5, 0:i32, %17
%19 = eq %18, 0:i32
%20:i32 = var
%21 = eq %20, %12
%22:i32 = var
%23 = ne %22, 0:i32
%24:i32 = var
%25 = ult %24, 256:i32
%26:i32 = zext %25
%27 = eq %26, 0:i32
%28:i32 = var
pc %19 1:i1
pc %21 1:i1
pc %23 1:i1
pc %27 1:i1
pc %28 1:i1
infer %4


; start LHS (in $15)
%0:i32 = var
%1 = add %0, 16:i32
%2:i32 = var
%3:i32 = var
%4 = add %3, -8:i32
%5:i32 = var
%6 = and %5, -8:i32
%7 = add %4, %6
%8 = eq %2, %7
%9:i32 = zext %8
%10 = eq %9, 0:i32
%11 = ne %0, 0:i32
%12:i32 = var
%13 = ult %12, 256:i32
%14:i32 = zext %13
%15 = eq %14, 0:i32
%16 = and %12, 2:i32
%17 = eq %16, 0:i32
pc %10 1:i1
pc %11 1:i1
pc %15 1:i1
pc %17 1:i1
infer %1


; start LHS (in $15)
%0:i32 = var
%1:i32 = var
%2 = add %1, -8:i32 (hasExternalUses)
%3:i32 = var
%4 = and %3, -8:i32 (hasExternalUses)
%5 = add %2, %4 (hasExternalUses)
%6 = ne %0, %5
%7:i32 = var
%8 = eq %7, %5
%9:i32 = zext %8
%10 = eq %9, 0:i32
%11:i32 = var
%12 = ne %11, 0:i32
%13:i32 = var
%14 = ult %13, 256:i32
%15:i32 = zext %14
%16 = eq %15, 0:i32
%17 = and %13, 2:i32
%18 = eq %17, 0:i32
pc %10 1:i1
pc %12 1:i1
pc %16 1:i1
pc %18 1:i1
infer %6


; start LHS (in $15)
%0:i32 = var
%1:i32 = var
%2 = add %1, -8:i32 (hasExternalUses)
%3:i32 = var
%4 = and %3, -8:i32 (hasExternalUses)
%5 = add %2, %4 (hasExternalUses)
%6 = ne %0, %5
%7:i32 = zext %6
%8 = shl %7, 2:i32
%9:i32 = var
%10 = eq %9, %5
%11:i32 = zext %10
%12 = eq %11, 0:i32
%13:i32 = var
%14 = ne %13, 0:i32
%15:i32 = var
%16 = ult %15, 256:i32
%17:i32 = zext %16
%18 = eq %17, 0:i32
%19 = and %15, 2:i32
%20 = eq %19, 0:i32
pc %12 1:i1
pc %14 1:i1
pc %18 1:i1
pc %20 1:i1
infer %8


; start LHS (in $15)
%0:i32 = var
%1 = add %0, 16:i32
%2:i32 = var
%3:i32 = var
%4 = add %3, -8:i32 (hasExternalUses)
%5:i32 = var
%6 = and %5, -8:i32 (hasExternalUses)
%7 = add %4, %6 (hasExternalUses)
%8 = ne %2, %7
%9:i32 = zext %8
%10 = shl %9, 2:i32
%11 = add %1, %10
%12:i32 = var
%13 = eq %12, %7
%14:i32 = zext %13
%15 = eq %14, 0:i32
%16 = ne %0, 0:i32
%17:i32 = var
%18 = ult %17, 256:i32
%19:i32 = zext %18
%20 = eq %19, 0:i32
%21 = and %17, 2:i32
%22 = eq %21, 0:i32
pc %15 1:i1
pc %16 1:i1
pc %20 1:i1
pc %22 1:i1
infer %11


; start LHS (in $15)
%0 = block 2
%1 = block 2
%2:i32 = var
%3:i32 = var
%4 = phi %1, %2, %3
%5 = phi %0, 0:i32, %4
%6 = eq %5, 0:i32
%7:i32 = var
%8 = add %7, -8:i32
%9:i32 = var
%10 = and %9, -8:i32
%11 = add %8, %10
%12 = eq %3, %11
blockpc %1 0 %12 1:i1
%13:i32 = zext %12
%14 = eq %13, 0:i32
blockpc %1 1 %14 1:i1
%15:i32 = var
%16 = eq %15, %11
%17:i32 = zext %16
%18 = eq %17, 0:i32
%19:i32 = var
%20 = ne %19, 0:i32
%21:i32 = var
%22 = ult %21, 256:i32
%23:i32 = zext %22
%24 = eq %23, 0:i32
%25 = and %21, 2:i32
%26 = eq %25, 0:i32
pc %18 1:i1
pc %20 1:i1
pc %24 1:i1
pc %26 1:i1
infer %6


; start LHS (in $15)
%0:i32 = var
%1 = add %0, -8:i32 (hasExternalUses)
%2:i32 = var
%3 = and %2, -8:i32 (hasExternalUses)
%4 = add %1, %3 (hasExternalUses)
%5 = add %4, 16:i32
%6:i32 = var
%7 = ne %6, 0:i32
%8:i32 = var
%9 = ult %8, 256:i32
%10:i32 = zext %9
%11 = eq %10, 0:i32
%12 = and %8, 2:i32
%13 = eq %12, 0:i32
pc %7 1:i1
pc %11 1:i1
pc %13 1:i1
infer %5


; start LHS (in $15)
%0:i32 = var
%1 = and %0, -8:i32
%2 = block 5
%3:i32 = var
%4:i32 = var
%5 = and %4, -8:i32 (hasExternalUses)
%6 = add %3, %5 (hasExternalUses)
%7 = block 2
%8 = phi %7, %5, %6
%9 = phi %2, %6, %6, %6, %6, %8
%10 = add %1, %9 (hasExternalUses)
%11 = or %10, 1:i32
%12 = and %4, 1:i32
%13 = ne %12, 0:i32
blockpc %7 0 %13 1:i1
%14 = eq %12, 0:i32
blockpc %7 1 %14 1:i1
%15 = and %0, 2:i32
%16 = eq %15, 0:i32
pc %16 1:i1
infer %11


; start LHS (in $15)
%0 = block 5
%1:i32 = var
%2 = add %1, -8:i32 (hasExternalUses)
%3:i32 = var
%4 = sub %2, %3 (hasExternalUses)
%5 = block 2
%6 = phi %5, %2, %4
%7 = phi %0, %4, %4, %4, %4, %6
%8:i32 = var
%9 = and %8, -8:i32
%10:i32 = var
%11 = and %10, -8:i32 (hasExternalUses)
%12 = add %3, %11 (hasExternalUses)
%13 = phi %5, %11, %12
%14 = phi %0, %12, %12, %12, %12, %13
%15 = add %9, %14 (hasExternalUses)
%16 = add %7, %15
%17 = and %10, 1:i32
%18 = ne %17, 0:i32
blockpc %5 0 %18 1:i1
%19 = eq %17, 0:i32
blockpc %5 1 %19 1:i1
%20 = and %8, 2:i32
%21 = eq %20, 0:i32
pc %21 1:i1
infer %16


; start LHS (in $15)
%0 = block 5
%1:i32 = var
%2 = add %1, -8:i32 (hasExternalUses)
%3:i32 = var
%4 = sub %2, %3 (hasExternalUses)
%5 = block 2
%6 = phi %5, %2, %4
%7 = phi %0, %4, %4, %4, %4, %6
%8:i32 = var
%9 = eq %7, %8
%10:i32 = var
%11 = and %10, 1:i32
%12 = ne %11, 0:i32
blockpc %5 0 %12 1:i1
%13 = eq %11, 0:i32
blockpc %5 1 %13 1:i1
%14:i32 = var
%15 = and %14, 2:i32
%16 = eq %15, 0:i32
pc %16 1:i1
infer %9


; start LHS (in $15)
%0 = block 2
%1 = block 5
%2:i32 = var
%3:i32 = var
%4 = and %3, -8:i32 (hasExternalUses)
%5 = add %2, %4 (hasExternalUses)
%6 = block 2
%7 = phi %6, %4, %5
%8 = phi %1, %5, %5, %5, %5, %7
%9:i32 = var
%10 = and %9, -8:i32
%11 = add %10, %8 (hasExternalUses)
%12 = phi %0, %8, %11
%13 = lshr %12, 3:i32
%14 = and %9, 2:i32
%15 = ne %14, 0:i32
blockpc %0 0 %15 1:i1
%16 = eq %14, 0:i32
blockpc %0 1 %16 1:i1
%17 = and %3, 1:i32
%18 = ne %17, 0:i32
blockpc %6 0 %18 1:i1
%19 = eq %17, 0:i32
blockpc %6 1 %19 1:i1
infer %13


; start LHS (in $15)
%0 = block 2
%1 = block 5
%2:i32 = var
%3:i32 = var
%4 = and %3, -8:i32 (hasExternalUses)
%5 = add %2, %4 (hasExternalUses)
%6 = block 2
%7 = phi %6, %4, %5
%8 = phi %1, %5, %5, %5, %5, %7
%9:i32 = var
%10 = and %9, -8:i32
%11 = add %10, %8 (hasExternalUses)
%12 = phi %0, %8, %11
%13 = ult %12, 256:i32
%14 = and %9, 2:i32
%15 = ne %14, 0:i32
blockpc %0 0 %15 1:i1
%16 = eq %14, 0:i32
blockpc %0 1 %16 1:i1
%17 = and %3, 1:i32
%18 = ne %17, 0:i32
blockpc %6 0 %18 1:i1
%19 = eq %17, 0:i32
blockpc %6 1 %19 1:i1
infer %13


; start LHS (in $15)
%0 = block 2
%1 = block 5
%2:i32 = var
%3:i32 = var
%4 = and %3, -8:i32 (hasExternalUses)
%5 = add %2, %4 (hasExternalUses)
%6 = block 2
%7 = phi %6, %4, %5
%8 = phi %1, %5, %5, %5, %5, %7
%9:i32 = var
%10 = and %9, -8:i32
%11 = add %10, %8 (hasExternalUses)
%12 = phi %0, %8, %11
%13 = lshr %12, 3:i32 (hasExternalUses)
%14 = shl %13, 3:i32
%15 = and %9, 2:i32
%16 = ne %15, 0:i32
blockpc %0 0 %16 1:i1
%17 = eq %15, 0:i32
blockpc %0 1 %17 1:i1
%18 = and %3, 1:i32
%19 = ne %18, 0:i32
blockpc %6 0 %19 1:i1
%20 = eq %18, 0:i32
blockpc %6 1 %20 1:i1
%21 = ult %12, 256:i32
pc %21 1:i1
infer %14


; start LHS (in $15)
%0 = block 2
%1 = block 5
%2:i32 = var
%3:i32 = var
%4 = and %3, -8:i32 (hasExternalUses)
%5 = add %2, %4 (hasExternalUses)
%6 = block 2
%7 = phi %6, %4, %5
%8 = phi %1, %5, %5, %5, %5, %7
%9:i32 = var
%10 = and %9, -8:i32
%11 = add %10, %8 (hasExternalUses)
%12 = phi %0, %8, %11
%13 = lshr %12, 3:i32 (hasExternalUses)
%14 = shl %13, 3:i32
%15 = add %14, 3996:i32
%16 = and %9, 2:i32
%17 = ne %16, 0:i32
blockpc %0 0 %17 1:i1
%18 = eq %16, 0:i32
blockpc %0 1 %18 1:i1
%19 = and %3, 1:i32
%20 = ne %19, 0:i32
blockpc %6 0 %20 1:i1
%21 = eq %19, 0:i32
blockpc %6 1 %21 1:i1
%22 = ult %12, 256:i32
pc %22 1:i1
infer %15


; start LHS (in $15)
%0 = block 2
%1 = block 5
%2:i32 = var
%3:i32 = var
%4 = and %3, -8:i32 (hasExternalUses)
%5 = add %2, %4 (hasExternalUses)
%6 = block 2
%7 = phi %6, %4, %5
%8 = phi %1, %5, %5, %5, %5, %7
%9:i32 = var
%10 = and %9, -8:i32
%11 = add %10, %8 (hasExternalUses)
%12 = phi %0, %8, %11
%13 = lshr %12, 3:i32 (hasExternalUses)
%14 = shl 1:i32, %13
%15 = and %9, 2:i32
%16 = ne %15, 0:i32
blockpc %0 0 %16 1:i1
%17 = eq %15, 0:i32
blockpc %0 1 %17 1:i1
%18 = and %3, 1:i32
%19 = ne %18, 0:i32
blockpc %6 0 %19 1:i1
%20 = eq %18, 0:i32
blockpc %6 1 %20 1:i1
%21 = ult %12, 256:i32
pc %21 1:i1
infer %14


; start LHS (in $15)
%0:i32 = var
%1 = block 2
%2 = block 5
%3:i32 = var
%4:i32 = var
%5 = and %4, -8:i32 (hasExternalUses)
%6 = add %3, %5 (hasExternalUses)
%7 = block 2
%8 = phi %7, %5, %6
%9 = phi %2, %6, %6, %6, %6, %8
%10:i32 = var
%11 = and %10, -8:i32
%12 = add %11, %9 (hasExternalUses)
%13 = phi %1, %9, %12
%14 = lshr %13, 3:i32 (hasExternalUses)
%15 = shl 1:i32, %14 (hasExternalUses)
%16 = and %0, %15
%17 = and %10, 2:i32
%18 = ne %17, 0:i32
blockpc %1 0 %18 1:i1
%19 = eq %17, 0:i32
blockpc %1 1 %19 1:i1
%20 = and %4, 1:i32
%21 = ne %20, 0:i32
blockpc %7 0 %21 1:i1
%22 = eq %20, 0:i32
blockpc %7 1 %22 1:i1
%23 = ult %13, 256:i32
pc %23 1:i1
infer %16


; start LHS (in $15)
%0 = block 2
%1 = block 5
%2:i32 = var
%3:i32 = var
%4 = and %3, -8:i32 (hasExternalUses)
%5 = add %2, %4 (hasExternalUses)
%6 = block 2
%7 = phi %6, %4, %5
%8 = phi %1, %5, %5, %5, %5, %7
%9:i32 = var
%10 = and %9, -8:i32
%11 = add %10, %8 (hasExternalUses)
%12 = phi %0, %8, %11
%13 = lshr %12, 3:i32 (hasExternalUses)
%14 = shl %13, 3:i32
%15 = add %14, 3996:i32 (hasExternalUses)
%16 = add %15, 8:i32
%17 = and %9, 2:i32
%18 = ne %17, 0:i32
blockpc %0 0 %18 1:i1
%19 = eq %17, 0:i32
blockpc %0 1 %19 1:i1
%20 = and %3, 1:i32
%21 = ne %20, 0:i32
blockpc %6 0 %21 1:i1
%22 = eq %20, 0:i32
blockpc %6 1 %22 1:i1
%23:i32 = var
%24 = shl 1:i32, %13
%25 = and %23, %24
%26 = ne %25, 0:i32
%27:i32 = var
pc %26 1:i1
pc %27 1:i1
infer %16


; start LHS (in $15)
%0:i32 = var
%1 = block 2
%2 = block 5
%3:i32 = var
%4:i32 = var
%5 = and %4, -8:i32 (hasExternalUses)
%6 = add %3, %5 (hasExternalUses)
%7 = block 2
%8 = phi %7, %5, %6
%9 = phi %2, %6, %6, %6, %6, %8
%10:i32 = var
%11 = and %10, -8:i32
%12 = add %11, %9 (hasExternalUses)
%13 = phi %1, %9, %12
%14 = lshr %13, 3:i32 (hasExternalUses)
%15 = shl 1:i32, %14 (hasExternalUses)
%16 = or %0, %15
%17 = and %10, 2:i32
%18 = ne %17, 0:i32
blockpc %1 0 %18 1:i1
%19 = eq %17, 0:i32
blockpc %1 1 %19 1:i1
%20 = and %4, 1:i32
%21 = ne %20, 0:i32
blockpc %7 0 %21 1:i1
%22 = eq %20, 0:i32
blockpc %7 1 %22 1:i1
%23 = and %0, %15
%24 = eq %23, 0:i32
%25 = ult %13, 256:i32
pc %24 1:i1
pc %25 1:i1
infer %16


; start LHS (in $15)
%0 = block 2
%1 = block 5
%2:i32 = var
%3:i32 = var
%4 = and %3, -8:i32 (hasExternalUses)
%5 = add %2, %4 (hasExternalUses)
%6 = block 2
%7 = phi %6, %4, %5
%8 = phi %1, %5, %5, %5, %5, %7
%9:i32 = var
%10 = and %9, -8:i32
%11 = add %10, %8 (hasExternalUses)
%12 = phi %0, %8, %11
%13 = lshr %12, 3:i32 (hasExternalUses)
%14 = shl %13, 3:i32
%15 = add %14, 3996:i32 (hasExternalUses)
%16 = add %15, 8:i32
%17 = and %9, 2:i32
%18 = ne %17, 0:i32
blockpc %0 0 %18 1:i1
%19 = eq %17, 0:i32
blockpc %0 1 %19 1:i1
%20 = and %3, 1:i32
%21 = ne %20, 0:i32
blockpc %6 0 %21 1:i1
%22 = eq %20, 0:i32
blockpc %6 1 %22 1:i1
%23:i32 = var
%24 = shl 1:i32, %13
%25 = and %23, %24
%26 = eq %25, 0:i32
%27:i32 = var
pc %26 1:i1
pc %27 1:i1
infer %16


; start LHS (in $15)
%0 = block 2
%1 = block 5
%2:i32 = var
%3:i32 = var
%4 = and %3, -8:i32 (hasExternalUses)
%5 = add %2, %4 (hasExternalUses)
%6 = block 2
%7 = phi %6, %4, %5
%8 = phi %1, %5, %5, %5, %5, %7
%9:i32 = var
%10 = and %9, -8:i32
%11 = add %10, %8 (hasExternalUses)
%12 = phi %0, %8, %11
%13 = lshr %12, 8:i32
%14 = and %9, 2:i32
%15 = ne %14, 0:i32
blockpc %0 0 %15 1:i1
%16 = eq %14, 0:i32
blockpc %0 1 %16 1:i1
%17 = and %3, 1:i32
%18 = ne %17, 0:i32
blockpc %6 0 %18 1:i1
%19 = eq %17, 0:i32
blockpc %6 1 %19 1:i1
infer %13


; start LHS (in $15)
%0 = block 2
%1 = block 5
%2:i32 = var
%3:i32 = var
%4 = and %3, -8:i32 (hasExternalUses)
%5 = add %2, %4 (hasExternalUses)
%6 = block 2
%7 = phi %6, %4, %5
%8 = phi %1, %5, %5, %5, %5, %7
%9:i32 = var
%10 = and %9, -8:i32
%11 = add %10, %8 (hasExternalUses)
%12 = phi %0, %8, %11
%13 = ult 16777215:i32, %12
%14 = and %9, 2:i32
%15 = ne %14, 0:i32
blockpc %0 0 %15 1:i1
%16 = eq %14, 0:i32
blockpc %0 1 %16 1:i1
%17 = and %3, 1:i32
%18 = ne %17, 0:i32
blockpc %6 0 %18 1:i1
%19 = eq %17, 0:i32
blockpc %6 1 %19 1:i1
%20 = lshr %12, 8:i32
%21 = ne %20, 0:i32
pc %21 1:i1
infer %13


; start LHS (in $15)
%0 = block 2
%1 = block 5
%2:i32 = var
%3:i32 = var
%4 = and %3, -8:i32 (hasExternalUses)
%5 = add %2, %4 (hasExternalUses)
%6 = block 2
%7 = phi %6, %4, %5
%8 = phi %1, %5, %5, %5, %5, %7
%9:i32 = var
%10 = and %9, -8:i32
%11 = add %10, %8 (hasExternalUses)
%12 = phi %0, %8, %11
%13 = lshr %12, 8:i32 (hasExternalUses)
%14 = add %13, 1048320:i32
%15 = and %9, 2:i32
%16 = ne %15, 0:i32
blockpc %0 0 %16 1:i1
%17 = eq %15, 0:i32
blockpc %0 1 %17 1:i1
%18 = and %3, 1:i32
%19 = ne %18, 0:i32
blockpc %6 0 %19 1:i1
%20 = eq %18, 0:i32
blockpc %6 1 %20 1:i1
%21 = ult 16777215:i32, %12
%22:i32 = zext %21
%23 = eq %22, 0:i32
%24 = ne %13, 0:i32
pc %23 1:i1
pc %24 1:i1
infer %14


; start LHS (in $15)
%0 = block 2
%1 = block 5
%2:i32 = var
%3:i32 = var
%4 = and %3, -8:i32 (hasExternalUses)
%5 = add %2, %4 (hasExternalUses)
%6 = block 2
%7 = phi %6, %4, %5
%8 = phi %1, %5, %5, %5, %5, %7
%9:i32 = var
%10 = and %9, -8:i32
%11 = add %10, %8 (hasExternalUses)
%12 = phi %0, %8, %11
%13 = lshr %12, 8:i32 (hasExternalUses)
%14 = add %13, 1048320:i32
%15 = lshr %14, 16:i32
%16 = and %9, 2:i32
%17 = ne %16, 0:i32
blockpc %0 0 %17 1:i1
%18 = eq %16, 0:i32
blockpc %0 1 %18 1:i1
%19 = and %3, 1:i32
%20 = ne %19, 0:i32
blockpc %6 0 %20 1:i1
%21 = eq %19, 0:i32
blockpc %6 1 %21 1:i1
%22 = ult 16777215:i32, %12
%23:i32 = zext %22
%24 = eq %23, 0:i32
%25 = ne %13, 0:i32
pc %24 1:i1
pc %25 1:i1
infer %15


; start LHS (in $15)
%0 = block 2
%1 = block 5
%2:i32 = var
%3:i32 = var
%4 = and %3, -8:i32 (hasExternalUses)
%5 = add %2, %4 (hasExternalUses)
%6 = block 2
%7 = phi %6, %4, %5
%8 = phi %1, %5, %5, %5, %5, %7
%9:i32 = var
%10 = and %9, -8:i32
%11 = add %10, %8 (hasExternalUses)
%12 = phi %0, %8, %11
%13 = lshr %12, 8:i32 (hasExternalUses)
%14 = add %13, 1048320:i32
%15 = lshr %14, 16:i32
%16 = and %15, 8:i32
%17 = and %9, 2:i32
%18 = ne %17, 0:i32
blockpc %0 0 %18 1:i1
%19 = eq %17, 0:i32
blockpc %0 1 %19 1:i1
%20 = and %3, 1:i32
%21 = ne %20, 0:i32
blockpc %6 0 %21 1:i1
%22 = eq %20, 0:i32
blockpc %6 1 %22 1:i1
%23 = ult 16777215:i32, %12
%24:i32 = zext %23
%25 = eq %24, 0:i32
%26:i32 = var
pc %25 1:i1
pc %26 1:i1
infer %16


; start LHS (in $15)
%0 = block 2
%1 = block 5
%2:i32 = var
%3:i32 = var
%4 = and %3, -8:i32 (hasExternalUses)
%5 = add %2, %4 (hasExternalUses)
%6 = block 2
%7 = phi %6, %4, %5
%8 = phi %1, %5, %5, %5, %5, %7
%9:i32 = var
%10 = and %9, -8:i32
%11 = add %10, %8 (hasExternalUses)
%12 = phi %0, %8, %11
%13 = lshr %12, 8:i32 (hasExternalUses)
%14 = add %13, 1048320:i32
%15 = lshr %14, 16:i32
%16 = and %15, 8:i32 (hasExternalUses)
%17 = shl %13, %16
%18 = and %9, 2:i32
%19 = ne %18, 0:i32
blockpc %0 0 %19 1:i1
%20 = eq %18, 0:i32
blockpc %0 1 %20 1:i1
%21 = and %3, 1:i32
%22 = ne %21, 0:i32
blockpc %6 0 %22 1:i1
%23 = eq %21, 0:i32
blockpc %6 1 %23 1:i1
%24 = ult 16777215:i32, %12
%25:i32 = zext %24
%26 = eq %25, 0:i32
%27:i32 = var
pc %26 1:i1
pc %27 1:i1
infer %17


; start LHS (in $15)
%0 = block 2
%1 = block 5
%2:i32 = var
%3:i32 = var
%4 = and %3, -8:i32 (hasExternalUses)
%5 = add %2, %4 (hasExternalUses)
%6 = block 2
%7 = phi %6, %4, %5
%8 = phi %1, %5, %5, %5, %5, %7
%9:i32 = var
%10 = and %9, -8:i32
%11 = add %10, %8 (hasExternalUses)
%12 = phi %0, %8, %11
%13 = lshr %12, 8:i32 (hasExternalUses)
%14 = add %13, 1048320:i32
%15 = lshr %14, 16:i32
%16 = and %15, 8:i32 (hasExternalUses)
%17 = shl %13, %16 (hasExternalUses)
%18 = add %17, 520192:i32
%19 = and %9, 2:i32
%20 = ne %19, 0:i32
blockpc %0 0 %20 1:i1
%21 = eq %19, 0:i32
blockpc %0 1 %21 1:i1
%22 = and %3, 1:i32
%23 = ne %22, 0:i32
blockpc %6 0 %23 1:i1
%24 = eq %22, 0:i32
blockpc %6 1 %24 1:i1
%25 = ult 16777215:i32, %12
%26:i32 = zext %25
%27 = eq %26, 0:i32
%28:i32 = var
pc %27 1:i1
pc %28 1:i1
infer %18


; start LHS (in $15)
%0 = block 2
%1 = block 5
%2:i32 = var
%3:i32 = var
%4 = and %3, -8:i32 (hasExternalUses)
%5 = add %2, %4 (hasExternalUses)
%6 = block 2
%7 = phi %6, %4, %5
%8 = phi %1, %5, %5, %5, %5, %7
%9:i32 = var
%10 = and %9, -8:i32
%11 = add %10, %8 (hasExternalUses)
%12 = phi %0, %8, %11
%13 = lshr %12, 8:i32 (hasExternalUses)
%14 = add %13, 1048320:i32
%15 = lshr %14, 16:i32
%16 = and %15, 8:i32 (hasExternalUses)
%17 = shl %13, %16 (hasExternalUses)
%18 = add %17, 520192:i32
%19 = lshr %18, 16:i32
%20 = and %9, 2:i32
%21 = ne %20, 0:i32
blockpc %0 0 %21 1:i1
%22 = eq %20, 0:i32
blockpc %0 1 %22 1:i1
%23 = and %3, 1:i32
%24 = ne %23, 0:i32
blockpc %6 0 %24 1:i1
%25 = eq %23, 0:i32
blockpc %6 1 %25 1:i1
%26:i32 = var
%27:i32 = var
pc %26 1:i1
pc %27 1:i1
infer %19


; start LHS (in $15)
%0 = block 2
%1 = block 5
%2:i32 = var
%3:i32 = var
%4 = and %3, -8:i32 (hasExternalUses)
%5 = add %2, %4 (hasExternalUses)
%6 = block 2
%7 = phi %6, %4, %5
%8 = phi %1, %5, %5, %5, %5, %7
%9:i32 = var
%10 = and %9, -8:i32
%11 = add %10, %8 (hasExternalUses)
%12 = phi %0, %8, %11
%13 = lshr %12, 8:i32 (hasExternalUses)
%14 = add %13, 1048320:i32
%15 = lshr %14, 16:i32
%16 = and %15, 8:i32 (hasExternalUses)
%17 = shl %13, %16 (hasExternalUses)
%18 = add %17, 520192:i32
%19 = lshr %18, 16:i32
%20 = and %19, 4:i32
%21 = and %9, 2:i32
%22 = ne %21, 0:i32
blockpc %0 0 %22 1:i1
%23 = eq %21, 0:i32
blockpc %0 1 %23 1:i1
%24 = and %3, 1:i32
%25 = ne %24, 0:i32
blockpc %6 0 %25 1:i1
%26 = eq %24, 0:i32
blockpc %6 1 %26 1:i1
%27:i32 = var
%28:i32 = var
pc %27 1:i1
pc %28 1:i1
infer %20


; start LHS (in $15)
%0 = block 2
%1 = block 5
%2:i32 = var
%3:i32 = var
%4 = add %2, %3 (hasExternalUses)
%5 = block 2
%6 = phi %5, %3, %4
%7 = phi %1, %4, %4, %4, %4, %6
%8:i32 = var
%9 = and %8, -8:i32
%10 = add %9, %7 (hasExternalUses)
%11 = phi %0, %7, %10
%12 = lshr %11, 8:i32 (hasExternalUses)
%13 = add %12, 1048320:i32
%14 = lshr %13, 16:i32
%15 = and %14, 8:i32
%16 = shl %12, %15 (hasExternalUses)
%17 = add %16, 520192:i32
%18 = lshr %17, 16:i32
%19 = and %18, 4:i32 (hasExternalUses)
%20 = or %19, %15
%21 = and %8, 2:i32
%22 = ne %21, 0:i32
blockpc %0 0 %22 1:i1
%23 = eq %21, 0:i32
blockpc %0 1 %23 1:i1
%24:i32 = var
%25 = and %24, 1:i32
%26 = ne %25, 0:i32
blockpc %5 0 %26 1:i1
%27:i32 = var
blockpc %5 1 %27 1:i1
%28:i32 = var
%29:i32 = var
pc %28 1:i1
pc %29 1:i1
infer %20


; start LHS (in $15)
%0 = block 2
%1 = block 5
%2:i32 = var
%3:i32 = var
%4 = and %3, -8:i32 (hasExternalUses)
%5 = add %2, %4 (hasExternalUses)
%6 = block 2
%7 = phi %6, %4, %5
%8 = phi %1, %5, %5, %5, %5, %7
%9:i32 = var
%10 = and %9, -8:i32
%11 = add %10, %8 (hasExternalUses)
%12 = phi %0, %8, %11
%13 = lshr %12, 8:i32 (hasExternalUses)
%14 = add %13, 1048320:i32
%15 = lshr %14, 16:i32
%16 = and %15, 8:i32 (hasExternalUses)
%17 = shl %13, %16
%18 = add %17, 520192:i32
%19 = lshr %18, 16:i32
%20 = and %19, 4:i32 (hasExternalUses)
%21 = shl %17, %20
%22 = and %9, 2:i32
%23 = ne %22, 0:i32
blockpc %0 0 %23 1:i1
%24 = eq %22, 0:i32
blockpc %0 1 %24 1:i1
%25 = and %3, 1:i32
%26 = ne %25, 0:i32
blockpc %6 0 %26 1:i1
%27:i32 = var
blockpc %6 1 %27 1:i1
%28:i32 = var
%29:i32 = var
pc %28 1:i1
pc %29 1:i1
infer %21


; start LHS (in $15)
%0 = block 2
%1 = block 5
%2:i32 = var
%3:i32 = var
%4 = and %3, -8:i32 (hasExternalUses)
%5 = add %2, %4 (hasExternalUses)
%6 = block 2
%7 = phi %6, %4, %5
%8 = phi %1, %5, %5, %5, %5, %7
%9:i32 = var
%10 = and %9, -8:i32
%11 = add %10, %8 (hasExternalUses)
%12 = phi %0, %8, %11
%13 = lshr %12, 8:i32 (hasExternalUses)
%14 = add %13, 1048320:i32
%15 = lshr %14, 16:i32
%16 = and %15, 8:i32 (hasExternalUses)
%17 = shl %13, %16
%18 = add %17, 520192:i32
%19 = lshr %18, 16:i32
%20 = and %19, 4:i32 (hasExternalUses)
%21 = shl %17, %20 (hasExternalUses)
%22 = add %21, 245760:i32
%23 = and %9, 2:i32
%24 = ne %23, 0:i32
blockpc %0 0 %24 1:i1
%25 = eq %23, 0:i32
blockpc %0 1 %25 1:i1
%26 = and %3, 1:i32
%27 = ne %26, 0:i32
blockpc %6 0 %27 1:i1
%28:i32 = var
blockpc %6 1 %28 1:i1
%29:i32 = var
%30:i32 = var
pc %29 1:i1
pc %30 1:i1
infer %22


; start LHS (in $15)
%0 = block 2
%1 = block 5
%2:i32 = var
%3:i32 = var
%4 = and %3, -8:i32 (hasExternalUses)
%5 = add %2, %4 (hasExternalUses)
%6 = block 2
%7 = phi %6, %4, %5
%8 = phi %1, %5, %5, %5, %5, %7
%9:i32 = var
%10 = and %9, -8:i32
%11 = add %10, %8 (hasExternalUses)
%12 = phi %0, %8, %11
%13 = lshr %12, 8:i32 (hasExternalUses)
%14 = add %13, 1048320:i32
%15 = lshr %14, 16:i32
%16 = and %15, 8:i32 (hasExternalUses)
%17 = shl %13, %16
%18 = add %17, 520192:i32
%19 = lshr %18, 16:i32
%20 = and %19, 4:i32 (hasExternalUses)
%21 = shl %17, %20 (hasExternalUses)
%22 = add %21, 245760:i32
%23 = lshr %22, 16:i32
%24 = and %9, 2:i32
%25 = ne %24, 0:i32
blockpc %0 0 %25 1:i1
%26 = eq %24, 0:i32
blockpc %0 1 %26 1:i1
%27 = and %3, 1:i32
%28 = ne %27, 0:i32
blockpc %6 0 %28 1:i1
%29:i32 = var
blockpc %6 1 %29 1:i1
%30:i32 = var
%31:i32 = var
pc %30 1:i1
pc %31 1:i1
infer %23


; start LHS (in $15)
%0 = block 2
%1 = block 5
%2:i32 = var
%3:i32 = var
%4 = add %2, %3 (hasExternalUses)
%5 = block 2
%6 = phi %5, %3, %4
%7 = phi %1, %4, %4, %4, %4, %6
%8:i32 = var
%9 = and %8, -8:i32
%10 = add %9, %7 (hasExternalUses)
%11 = phi %0, %7, %10
%12 = lshr %11, 8:i32 (hasExternalUses)
%13 = add %12, 1048320:i32
%14 = lshr %13, 16:i32
%15 = and %14, 8:i32 (hasExternalUses)
%16 = shl %12, %15
%17 = add %16, 520192:i32
%18 = lshr %17, 16:i32
%19 = and %18, 4:i32 (hasExternalUses)
%20 = shl %16, %19 (hasExternalUses)
%21 = add %20, 245760:i32
%22 = lshr %21, 16:i32
%23 = and %22, 2:i32
%24 = and %8, 2:i32
%25 = ne %24, 0:i32
blockpc %0 0 %25 1:i1
%26 = eq %24, 0:i32
blockpc %0 1 %26 1:i1
%27:i32 = var
%28 = and %27, 1:i32
%29 = ne %28, 0:i32
blockpc %5 0 %29 1:i1
%30:i32 = var
blockpc %5 1 %30 1:i1
%31:i32 = var
%32:i32 = var
pc %31 1:i1
pc %32 1:i1
infer %23


; start LHS (in $15)
%0 = block 2
%1 = block 5
%2:i32 = var
%3 = block 2
%4:i32 = var
%5 = phi %3, %4, %2
%6 = phi %1, %2, %2, %2, %2, %5
%7:i32 = var
%8 = add %7, %6 (hasExternalUses)
%9 = phi %0, %6, %8
%10 = lshr %9, 8:i32 (hasExternalUses)
%11 = add %10, 1048320:i32
%12 = lshr %11, 16:i32
%13 = and %12, 8:i32
%14 = shl %10, %13
%15 = add %14, 520192:i32
%16 = lshr %15, 16:i32
%17 = and %16, 4:i32
%18 = or %17, %13
%19 = shl %14, %17 (hasExternalUses)
%20 = add %19, 245760:i32
%21 = lshr %20, 16:i32
%22 = and %21, 2:i32 (hasExternalUses)
%23 = or %18, %22
%24:i32 = var
%25 = and %24, 2:i32
%26 = ne %25, 0:i32
blockpc %0 0 %26 1:i1
%27 = eq %25, 0:i32
blockpc %0 1 %27 1:i1
%28:i32 = var
blockpc %3 0 %28 1:i1
%29:i32 = var
blockpc %3 1 %29 1:i1
%30:i32 = var
%31:i32 = var
pc %30 1:i1
pc %31 1:i1
infer %23


; start LHS (in $15)
%0 = block 2
%1 = block 5
%2:i32 = var
%3 = block 2
%4:i32 = var
%5 = phi %3, %4, %2
%6 = phi %1, %2, %2, %2, %2, %5
%7:i32 = var
%8 = phi %0, %6, %7
%9 = lshr %8, 8:i32 (hasExternalUses)
%10:i32 = var
%11 = lshr %10, 16:i32
%12 = and %11, 8:i32
%13 = shl %9, %12
%14 = add %13, 520192:i32
%15 = lshr %14, 16:i32
%16 = and %15, 4:i32
%17 = or %16, %12
%18 = shl %13, %16 (hasExternalUses)
%19 = add %18, 245760:i32
%20 = lshr %19, 16:i32
%21 = and %20, 2:i32 (hasExternalUses)
%22 = or %17, %21
%23 = sub 14:i32, %22
%24:i32 = var
%25 = and %24, 2:i32
%26 = ne %25, 0:i32
blockpc %0 0 %26 1:i1
%27 = eq %25, 0:i32
blockpc %0 1 %27 1:i1
%28:i32 = var
blockpc %3 0 %28 1:i1
%29:i32 = var
blockpc %3 1 %29 1:i1
%30:i32 = var
%31:i32 = var
pc %30 1:i1
pc %31 1:i1
infer %23


; start LHS (in $15)
%0 = block 2
%1 = block 5
%2:i32 = var
%3:i32 = var
%4 = and %3, -8:i32 (hasExternalUses)
%5 = add %2, %4 (hasExternalUses)
%6 = block 2
%7 = phi %6, %4, %5
%8 = phi %1, %5, %5, %5, %5, %7
%9:i32 = var
%10 = and %9, -8:i32
%11 = add %10, %8 (hasExternalUses)
%12 = phi %0, %8, %11
%13 = lshr %12, 8:i32 (hasExternalUses)
%14 = add %13, 1048320:i32
%15 = lshr %14, 16:i32
%16 = and %15, 8:i32 (hasExternalUses)
%17 = shl %13, %16
%18 = add %17, 520192:i32
%19 = lshr %18, 16:i32
%20 = and %19, 4:i32 (hasExternalUses)
%21 = shl %17, %20
%22 = add %21, 245760:i32
%23 = lshr %22, 16:i32
%24 = and %23, 2:i32 (hasExternalUses)
%25 = shl %21, %24
%26 = and %9, 2:i32
%27 = ne %26, 0:i32
blockpc %0 0 %27 1:i1
%28 = eq %26, 0:i32
blockpc %0 1 %28 1:i1
%29:i32 = var
blockpc %6 0 %29 1:i1
%30:i32 = var
blockpc %6 1 %30 1:i1
%31:i32 = var
%32:i32 = var
pc %31 1:i1
pc %32 1:i1
infer %25


; start LHS (in $15)
%0 = block 2
%1 = block 5
%2:i32 = var
%3:i32 = var
%4 = and %3, -8:i32 (hasExternalUses)
%5 = add %2, %4 (hasExternalUses)
%6 = block 2
%7 = phi %6, %4, %5
%8 = phi %1, %5, %5, %5, %5, %7
%9:i32 = var
%10 = and %9, -8:i32
%11 = add %10, %8 (hasExternalUses)
%12 = phi %0, %8, %11
%13 = lshr %12, 8:i32 (hasExternalUses)
%14 = add %13, 1048320:i32
%15 = lshr %14, 16:i32
%16 = and %15, 8:i32 (hasExternalUses)
%17 = shl %13, %16
%18 = add %17, 520192:i32
%19 = lshr %18, 16:i32
%20 = and %19, 4:i32 (hasExternalUses)
%21 = shl %17, %20
%22 = add %21, 245760:i32
%23 = lshr %22, 16:i32
%24 = and %23, 2:i32 (hasExternalUses)
%25 = shl %21, %24
%26 = lshr %25, 15:i32
%27 = and %9, 2:i32
%28 = ne %27, 0:i32
blockpc %0 0 %28 1:i1
%29:i32 = var
blockpc %0 1 %29 1:i1
%30:i32 = var
blockpc %6 0 %30 1:i1
%31:i32 = var
blockpc %6 1 %31 1:i1
%32:i32 = var
%33:i32 = var
pc %32 1:i1
pc %33 1:i1
infer %26


; start LHS (in $15)
%0 = block 2
%1 = block 5
%2:i32 = var
%3 = block 2
%4:i32 = var
%5 = phi %3, %4, %2
%6 = phi %1, %2, %2, %2, %2, %5
%7:i32 = var
%8 = phi %0, %6, %7
%9 = lshr %8, 8:i32 (hasExternalUses)
%10:i32 = var
%11 = and %10, 8:i32
%12 = shl %9, %11
%13 = add %12, 520192:i32
%14 = lshr %13, 16:i32
%15 = and %14, 4:i32
%16 = or %15, %11
%17 = shl %12, %15
%18 = add %17, 245760:i32
%19 = lshr %18, 16:i32
%20 = and %19, 2:i32
%21 = or %16, %20
%22 = sub 14:i32, %21
%23 = shl %17, %20
%24 = lshr %23, 15:i32
%25 = add %22, %24
%26:i32 = var
%27 = and %26, 2:i32
%28 = ne %27, 0:i32
blockpc %0 0 %28 1:i1
%29:i32 = var
blockpc %0 1 %29 1:i1
%30:i32 = var
blockpc %3 0 %30 1:i1
%31:i32 = var
blockpc %3 1 %31 1:i1
%32:i32 = var
%33:i32 = var
pc %32 1:i1
pc %33 1:i1
infer %25


; start LHS (in $15)
%0:i32 = var
%1:i32 = var
%2 = shl %0, %1
%3 = add %2, 520192:i32
%4 = lshr %3, 16:i32
%5 = and %4, 4:i32
%6 = or %5, %1
%7 = shl %2, %5
%8 = add %7, 245760:i32
%9 = lshr %8, 16:i32
%10 = and %9, 2:i32
%11 = or %6, %10
%12 = sub 14:i32, %11
%13 = shl %7, %10
%14 = lshr %13, 15:i32
%15 = add %12, %14 (hasExternalUses)
%16 = add %15, 7:i32
%17 = block 2
%18:i32 = var
%19 = and %18, 2:i32
%20 = ne %19, 0:i32
blockpc %17 0 %20 1:i1
%21 = eq %19, 0:i32
blockpc %17 1 %21 1:i1
%22 = block 5
%23:i32 = var
%24:i32 = var
%25 = and %24, -8:i32
%26 = add %23, %25
%27 = block 2
%28:i32 = var
blockpc %27 0 %28 1:i1
%29:i32 = var
blockpc %27 1 %29 1:i1
%30 = phi %27, %25, %26
%31 = phi %22, %26, %26, %26, %26, %30
%32:i32 = var
%33 = phi %17, %31, %32
%34 = ult 16777215:i32, %33
%35:i32 = zext %34
%36 = eq %35, 0:i32
%37:i32 = var
pc %36 1:i1
pc %37 1:i1
infer %16


; start LHS (in $15)
%0 = block 2
%1 = block 5
%2:i32 = var
%3:i32 = var
%4 = and %3, -8:i32 (hasExternalUses)
%5 = add %2, %4 (hasExternalUses)
%6 = block 2
%7 = phi %6, %4, %5
%8 = phi %1, %5, %5, %5, %5, %7
%9:i32 = var
%10 = and %9, -8:i32
%11 = add %10, %8 (hasExternalUses)
%12 = phi %0, %8, %11
%13:i32 = var
%14 = add %13, 520192:i32
%15 = lshr %14, 16:i32
%16 = and %15, 4:i32
%17:i32 = var
%18 = add %17, 1048320:i32
%19 = lshr %18, 16:i32
%20 = and %19, 8:i32 (hasExternalUses)
%21 = or %16, %20
%22 = shl %13, %16
%23 = add %22, 245760:i32
%24 = lshr %23, 16:i32
%25 = and %24, 2:i32
%26 = or %21, %25
%27 = sub 14:i32, %26
%28 = shl %22, %25
%29 = lshr %28, 15:i32
%30 = add %27, %29 (hasExternalUses)
%31 = add %30, 7:i32
%32 = lshr %12, %31
%33:i32 = var
blockpc %0 0 %33 1:i1
%34:i32 = var
blockpc %0 1 %34 1:i1
%35:i32 = var
blockpc %6 0 %35 1:i1
%36:i32 = var
blockpc %6 1 %36 1:i1
%37:i32 = var
%38:i32 = var
pc %37 1:i1
pc %38 1:i1
infer %32


; start LHS (in $15)
%0 = block 2
%1 = block 5
%2:i32 = var
%3:i32 = var
%4 = and %3, -8:i32 (hasExternalUses)
%5 = add %2, %4 (hasExternalUses)
%6 = block 2
%7 = phi %6, %4, %5
%8 = phi %1, %5, %5, %5, %5, %7
%9:i32 = var
%10 = and %9, -8:i32
%11 = add %10, %8 (hasExternalUses)
%12 = phi %0, %8, %11
%13:i32 = var
%14 = lshr %13, 16:i32
%15 = and %14, 4:i32 (hasExternalUses)
%16:i32 = var
%17 = lshr %16, 16:i32
%18 = and %17, 8:i32 (hasExternalUses)
%19 = or %15, %18
%20:i32 = var
%21 = add %20, 245760:i32
%22 = lshr %21, 16:i32
%23 = and %22, 2:i32
%24 = or %19, %23
%25 = sub 14:i32, %24
%26 = shl %20, %23
%27 = lshr %26, 15:i32
%28 = add %25, %27 (hasExternalUses)
%29 = add %28, 7:i32
%30 = lshr %12, %29
%31 = and %30, 1:i32
%32:i32 = var
blockpc %0 0 %32 1:i1
%33:i32 = var
blockpc %0 1 %33 1:i1
%34:i32 = var
blockpc %6 0 %34 1:i1
%35:i32 = var
blockpc %6 1 %35 1:i1
%36:i32 = var
%37:i32 = var
pc %36 1:i1
pc %37 1:i1
infer %31


; start LHS (in $15)
%0:i32 = var
%1:i32 = var
%2 = shl %0, %1
%3 = add %2, 520192:i32
%4 = lshr %3, 16:i32
%5 = and %4, 4:i32
%6 = or %5, %1
%7 = shl %2, %5
%8 = add %7, 245760:i32
%9 = lshr %8, 16:i32
%10 = and %9, 2:i32
%11 = or %6, %10
%12 = sub 14:i32, %11
%13 = shl %7, %10
%14 = lshr %13, 15:i32
%15 = add %12, %14 (hasExternalUses)
%16 = shl %15, 1:i32
%17 = block 2
%18:i32 = var
%19 = and %18, 2:i32
%20 = ne %19, 0:i32
blockpc %17 0 %20 1:i1
%21 = eq %19, 0:i32
blockpc %17 1 %21 1:i1
%22 = block 5
%23:i32 = var
%24:i32 = var
%25 = and %24, -8:i32
%26 = add %23, %25
%27 = block 2
%28:i32 = var
blockpc %27 0 %28 1:i1
%29:i32 = var
blockpc %27 1 %29 1:i1
%30 = phi %27, %25, %26
%31 = phi %22, %26, %26, %26, %26, %30
%32:i32 = var
%33 = phi %17, %31, %32
%34 = ult 16777215:i32, %33
%35:i32 = zext %34
%36 = eq %35, 0:i32
%37:i32 = var
pc %36 1:i1
pc %37 1:i1
infer %16


; start LHS (in $15)
%0 = block 2
%1 = block 5
%2:i32 = var
%3:i32 = var
%4 = and %3, -8:i32 (hasExternalUses)
%5 = add %2, %4 (hasExternalUses)
%6 = block 2
%7 = phi %6, %4, %5
%8 = phi %1, %5, %5, %5, %5, %7
%9:i32 = var
%10 = and %9, -8:i32
%11 = add %10, %8 (hasExternalUses)
%12 = phi %0, %8, %11
%13:i32 = var
%14 = and %13, 4:i32
%15:i32 = var
%16 = and %15, 8:i32
%17 = or %14, %16
%18:i32 = var
%19 = lshr %18, 16:i32
%20 = and %19, 2:i32
%21 = or %17, %20
%22 = sub 14:i32, %21
%23:i32 = var
%24 = shl %23, %16 (hasExternalUses)
%25 = shl %24, %14 (hasExternalUses)
%26 = shl %25, %20
%27 = lshr %26, 15:i32
%28 = add %22, %27 (hasExternalUses)
%29 = add %28, 7:i32
%30 = lshr %12, %29
%31 = and %30, 1:i32
%32:i32 = var
%33 = or %31, %32
%34:i32 = var
blockpc %0 0 %34 1:i1
%35:i32 = var
blockpc %0 1 %35 1:i1
%36:i32 = var
blockpc %6 0 %36 1:i1
%37:i32 = var
blockpc %6 1 %37 1:i1
%38:i32 = var
%39:i32 = var
pc %38 1:i1
pc %39 1:i1
infer %33


; start LHS (in $15)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 5
%4:i32 = var
%5:i32 = var
%6 = add %4, %5 (hasExternalUses)
%7 = block 2
%8 = phi %7, %5, %6
%9 = phi %3, %6, %6, %6, %6, %8
%10:i32 = var
%11 = and %10, -8:i32
%12 = add %11, %9 (hasExternalUses)
%13 = phi %2, %9, %12
%14:i32 = var
%15 = sub 14:i32, %14
%16:i32 = var
%17 = lshr %16, 15:i32
%18 = add %15, %17
%19 = add %18, 7:i32
%20 = lshr %13, %19
%21 = and %20, 1:i32
%22 = shl %18, 1:i32
%23 = or %21, %22 (hasExternalUses)
%24 = phi %1, 31:i32, %23
%25 = phi %0, %24, 0:i32
%26 = shl %25, 2:i32
%27 = lshr %13, 8:i32
%28 = ne %27, 0:i32
blockpc %0 0 %28 1:i1
%29:i32 = var
blockpc %0 1 %29 1:i1
%30:i32 = var
blockpc %1 0 %30 1:i1
%31:i32 = var
blockpc %1 1 %31 1:i1
%32:i32 = var
blockpc %2 0 %32 1:i1
%33:i32 = var
blockpc %2 1 %33 1:i1
%34:i32 = var
blockpc %7 0 %34 1:i1
%35:i32 = var
blockpc %7 1 %35 1:i1
infer %26


; start LHS (in $15)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 5
%4:i32 = var
%5 = block 2
%6:i32 = var
%7 = phi %5, %6, %4
%8 = phi %3, %4, %4, %4, %4, %7
%9:i32 = var
%10 = add %9, %8 (hasExternalUses)
%11 = phi %2, %8, %10
%12:i32 = var
%13:i32 = var
%14 = add %12, %13
%15 = add %14, 7:i32
%16 = lshr %11, %15
%17 = and %16, 1:i32
%18 = shl %14, 1:i32
%19 = or %17, %18 (hasExternalUses)
%20 = phi %1, 31:i32, %19
%21 = phi %0, %20, 0:i32
%22 = shl %21, 2:i32
%23 = add %22, 4260:i32
%24 = lshr %11, 8:i32
%25 = ne %24, 0:i32
blockpc %0 0 %25 1:i1
%26 = eq %24, 0:i32
blockpc %0 1 %26 1:i1
%27 = ult 16777215:i32, %11
blockpc %1 0 %27 1:i1
%28:i32 = var
blockpc %1 1 %28 1:i1
%29:i32 = var
blockpc %2 0 %29 1:i1
%30:i32 = var
blockpc %2 1 %30 1:i1
%31:i32 = var
blockpc %5 0 %31 1:i1
%32:i32 = var
blockpc %5 1 %32 1:i1
infer %23


; start LHS (in $15)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 5
%4:i32 = var
%5:i32 = var
%6 = add %4, %5 (hasExternalUses)
%7 = block 2
%8 = phi %7, %5, %6
%9 = phi %3, %6, %6, %6, %6, %8
%10:i32 = var
%11 = and %10, -8:i32
%12 = add %11, %9 (hasExternalUses)
%13 = phi %2, %9, %12
%14:i32 = var
%15 = sub 14:i32, %14
%16:i32 = var
%17 = lshr %16, 15:i32
%18 = add %15, %17
%19 = add %18, 7:i32
%20 = lshr %13, %19
%21 = and %20, 1:i32
%22 = shl %18, 1:i32
%23 = or %21, %22 (hasExternalUses)
%24 = phi %1, 31:i32, %23
%25 = phi %0, %24, 0:i32
%26 = shl 1:i32, %25
%27 = lshr %13, 8:i32
%28 = ne %27, 0:i32
blockpc %0 0 %28 1:i1
%29:i32 = var
blockpc %0 1 %29 1:i1
%30:i32 = var
blockpc %1 0 %30 1:i1
%31:i32 = var
blockpc %1 1 %31 1:i1
%32:i32 = var
blockpc %2 0 %32 1:i1
%33:i32 = var
blockpc %2 1 %33 1:i1
%34:i32 = var
blockpc %7 0 %34 1:i1
%35:i32 = var
blockpc %7 1 %35 1:i1
infer %26


; start LHS (in $15)
%0:i32 = var
%1 = block 2
%2 = block 2
%3 = block 2
%4 = block 5
%5:i32 = var
%6 = block 2
%7:i32 = var
%8 = phi %6, %7, %5
%9 = phi %4, %5, %5, %5, %5, %8
%10:i32 = var
%11 = add %10, %9 (hasExternalUses)
%12 = phi %3, %9, %11
%13:i32 = var
%14:i32 = var
%15 = add %13, %14
%16 = add %15, 7:i32
%17 = lshr %12, %16
%18 = and %17, 1:i32
%19 = shl %15, 1:i32
%20 = or %18, %19 (hasExternalUses)
%21 = phi %2, 31:i32, %20
%22 = phi %1, %21, 0:i32
%23 = shl 1:i32, %22 (hasExternalUses)
%24 = and %0, %23
%25 = lshr %12, 8:i32
%26 = ne %25, 0:i32
blockpc %1 0 %26 1:i1
%27 = eq %25, 0:i32
blockpc %1 1 %27 1:i1
%28:i32 = var
blockpc %2 0 %28 1:i1
%29:i32 = var
blockpc %2 1 %29 1:i1
%30:i32 = var
blockpc %3 0 %30 1:i1
%31:i32 = var
blockpc %3 1 %31 1:i1
%32:i32 = var
blockpc %6 0 %32 1:i1
%33:i32 = var
blockpc %6 1 %33 1:i1
infer %24


; start LHS (in $15)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 5
%4:i32 = var
%5:i32 = var
%6 = add %4, %5 (hasExternalUses)
%7 = block 2
%8 = phi %7, %5, %6
%9 = phi %3, %6, %6, %6, %6, %8
%10:i32 = var
%11 = and %10, -8:i32
%12 = add %11, %9 (hasExternalUses)
%13 = phi %2, %9, %12
%14:i32 = var
%15 = sub 14:i32, %14
%16:i32 = var
%17 = lshr %16, 15:i32
%18 = add %15, %17
%19 = add %18, 7:i32
%20 = lshr %13, %19
%21 = and %20, 1:i32
%22 = shl %18, 1:i32
%23 = or %21, %22 (hasExternalUses)
%24 = phi %1, 31:i32, %23
%25 = phi %0, %24, 0:i32
%26 = lshr %25, 1:i32
%27 = lshr %13, 8:i32
%28 = ne %27, 0:i32
blockpc %0 0 %28 1:i1
%29:i32 = var
blockpc %0 1 %29 1:i1
%30:i32 = var
blockpc %1 0 %30 1:i1
%31:i32 = var
blockpc %1 1 %31 1:i1
%32:i32 = var
blockpc %2 0 %32 1:i1
%33:i32 = var
blockpc %2 1 %33 1:i1
%34:i32 = var
blockpc %7 0 %34 1:i1
%35:i32 = var
blockpc %7 1 %35 1:i1
%36:i32 = var
pc %36 1:i1
infer %26


; start LHS (in $15)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 5
%4:i32 = var
%5 = block 2
%6:i32 = var
%7 = phi %5, %6, %4
%8 = phi %3, %4, %4, %4, %4, %7
%9:i32 = var
%10 = add %9, %8 (hasExternalUses)
%11 = phi %2, %8, %10
%12:i32 = var
%13:i32 = var
%14 = add %12, %13
%15 = add %14, 7:i32
%16 = lshr %11, %15
%17 = and %16, 1:i32
%18 = shl %14, 1:i32
%19 = or %17, %18 (hasExternalUses)
%20 = phi %1, 31:i32, %19
%21 = phi %0, %20, 0:i32
%22 = lshr %21, 1:i32
%23 = sub 25:i32, %22
%24 = lshr %11, 8:i32
%25 = ne %24, 0:i32
blockpc %0 0 %25 1:i1
%26 = eq %24, 0:i32
blockpc %0 1 %26 1:i1
%27 = ult 16777215:i32, %11
blockpc %1 0 %27 1:i1
%28:i32 = var
blockpc %1 1 %28 1:i1
%29:i32 = var
blockpc %2 0 %29 1:i1
%30:i32 = var
blockpc %2 1 %30 1:i1
%31:i32 = var
blockpc %5 0 %31 1:i1
%32:i32 = var
blockpc %5 1 %32 1:i1
%33:i32 = var
pc %33 1:i1
infer %23


; start LHS (in $15)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 5
%4:i32 = var
%5:i32 = var
%6 = add %4, %5 (hasExternalUses)
%7 = block 2
%8 = phi %7, %5, %6
%9 = phi %3, %6, %6, %6, %6, %8
%10:i32 = var
%11 = and %10, -8:i32
%12 = add %11, %9 (hasExternalUses)
%13 = phi %2, %9, %12
%14:i32 = var
%15 = sub 14:i32, %14
%16:i32 = var
%17 = lshr %16, 15:i32
%18 = add %15, %17
%19 = add %18, 7:i32
%20 = lshr %13, %19
%21 = and %20, 1:i32
%22 = shl %18, 1:i32
%23 = or %21, %22 (hasExternalUses)
%24 = phi %1, 31:i32, %23
%25 = phi %0, %24, 0:i32
%26 = eq %25, 31:i32
%27 = lshr %13, 8:i32
%28 = ne %27, 0:i32
blockpc %0 0 %28 1:i1
%29:i32 = var
blockpc %0 1 %29 1:i1
%30:i32 = var
blockpc %1 0 %30 1:i1
%31:i32 = var
blockpc %1 1 %31 1:i1
%32:i32 = var
blockpc %2 0 %32 1:i1
%33:i32 = var
blockpc %2 1 %33 1:i1
%34:i32 = var
blockpc %7 0 %34 1:i1
%35:i32 = var
blockpc %7 1 %35 1:i1
%36:i32 = var
pc %36 1:i1
infer %26


; start LHS (in $15)
%0 = block 2
%1 = block 5
%2:i32 = var
%3:i32 = var
%4 = and %3, -8:i32 (hasExternalUses)
%5 = add %2, %4 (hasExternalUses)
%6 = block 2
%7 = phi %6, %4, %5
%8 = phi %1, %5, %5, %5, %5, %7
%9:i32 = var
%10 = and %9, -8:i32
%11 = add %10, %8 (hasExternalUses)
%12 = phi %0, %8, %11
%13 = block 2
%14 = block 2
%15 = block 2
%16:i32 = var
%17 = lshr %12, %16
%18 = and %17, 1:i32
%19:i32 = var
%20:i32 = var
%21 = add %19, %20 (hasExternalUses)
%22 = shl %21, 1:i32
%23 = or %18, %22 (hasExternalUses)
%24 = phi %15, 31:i32, %23
%25 = phi %14, %24, 0:i32
%26 = lshr %25, 1:i32
%27 = sub 25:i32, %26
%28 = phi %13, 0:i32, %27
%29 = shl %12, %28
%30:i32 = var
blockpc %0 0 %30 1:i1
%31:i32 = var
blockpc %0 1 %31 1:i1
%32:i32 = var
blockpc %6 0 %32 1:i1
%33:i32 = var
blockpc %6 1 %33 1:i1
%34:i32 = var
blockpc %13 0 %34 1:i1
%35:i32 = var
blockpc %13 1 %35 1:i1
%36:i32 = var
blockpc %14 0 %36 1:i1
%37:i32 = var
blockpc %14 1 %37 1:i1
%38:i32 = var
blockpc %15 0 %38 1:i1
%39:i32 = var
blockpc %15 1 %39 1:i1
%40:i32 = var
pc %40 1:i1
infer %29


; start LHS (in $15)
%0:i32 = var
%1 = and %0, -8:i32
%2:i32 = var
%3 = block 2
%4 = block 2
%5:i32 = var
blockpc %4 0 %5 1:i1
%6:i32 = var
blockpc %4 1 %6 1:i1
%7 = block 5
%8:i32 = var
%9 = block 2
%10:i32 = var
blockpc %9 0 %10 1:i1
%11:i32 = var
blockpc %9 1 %11 1:i1
%12:i32 = var
%13 = phi %9, %12, %8
%14 = phi %7, %8, %8, %8, %8, %13
%15:i32 = var
%16 = add %15, %14
%17 = phi %4, %14, %16
%18 = lshr %17, 8:i32
%19 = ne %18, 0:i32
blockpc %3 0 %19 1:i1
%20 = eq %18, 0:i32
blockpc %3 1 %20 1:i1
%21 = block 2
%22 = ult 16777215:i32, %17
blockpc %21 0 %22 1:i1
%23:i32 = var
blockpc %21 1 %23 1:i1
%24:i32 = var
%25 = phi %21, 31:i32, %24
%26 = phi %3, %25, 0:i32
%27 = shl 1:i32, %26
%28 = and %2, %27
%29 = ne %28, 0:i32
pc %29 1:i1
infer %1


; start LHS (in $15)
%0:i32 = var
%1 = and %0, -8:i32
%2 = block 2
%3 = block 5
%4:i32 = var
%5:i32 = var
%6 = and %5, -8:i32 (hasExternalUses)
%7 = add %4, %6 (hasExternalUses)
%8 = block 2
%9 = phi %8, %6, %7
%10 = phi %3, %7, %7, %7, %7, %9
%11:i32 = var
%12 = and %11, -8:i32
%13 = add %12, %10 (hasExternalUses)
%14 = phi %2, %10, %13
%15 = eq %1, %14
%16 = and %11, 2:i32
%17 = ne %16, 0:i32
blockpc %2 0 %17 1:i1
%18 = eq %16, 0:i32
blockpc %2 1 %18 1:i1
%19 = and %5, 1:i32
%20 = ne %19, 0:i32
blockpc %8 0 %20 1:i1
%21 = eq %19, 0:i32
blockpc %8 1 %21 1:i1
%22:i32 = var
%23 = block 2
%24 = lshr %14, 8:i32
%25 = ne %24, 0:i32
blockpc %23 0 %25 1:i1
%26:i32 = var
blockpc %23 1 %26 1:i1
%27 = block 2
%28:i32 = var
blockpc %27 0 %28 1:i1
%29:i32 = var
blockpc %27 1 %29 1:i1
%30:i32 = var
%31 = phi %27, 31:i32, %30
%32 = phi %23, %31, 0:i32
%33 = shl 1:i32, %32
%34 = and %22, %33
%35 = ne %34, 0:i32
pc %35 1:i1
infer %15


; start LHS (in $15)
%0:i32 = var
%1 = shl %0, 1:i32
%2:i32 = var
%3 = block 2
%4 = block 2
%5:i32 = var
blockpc %4 0 %5 1:i1
%6:i32 = var
blockpc %4 1 %6 1:i1
%7 = block 5
%8:i32 = var
%9 = block 2
%10:i32 = var
blockpc %9 0 %10 1:i1
%11:i32 = var
blockpc %9 1 %11 1:i1
%12:i32 = var
%13 = phi %9, %12, %8
%14 = phi %7, %8, %8, %8, %8, %13
%15:i32 = var
%16 = add %15, %14
%17 = phi %4, %14, %16
%18 = lshr %17, 8:i32
%19 = ne %18, 0:i32
blockpc %3 0 %19 1:i1
%20 = eq %18, 0:i32
blockpc %3 1 %20 1:i1
%21 = block 2
%22 = ult 16777215:i32, %17
blockpc %21 0 %22 1:i1
%23:i32 = var
blockpc %21 1 %23 1:i1
%24:i32 = var
%25 = phi %21, 31:i32, %24
%26 = phi %3, %25, 0:i32
%27 = shl 1:i32, %26
%28 = and %2, %27
%29 = ne %28, 0:i32
pc %29 1:i1
infer %1


; start LHS (in $15)
%0:i32 = var
%1 = add %0, 16:i32
%2:i32 = var
%3 = block 2
%4 = block 2
%5:i32 = var
blockpc %4 0 %5 1:i1
%6:i32 = var
blockpc %4 1 %6 1:i1
%7 = block 5
%8:i32 = var
%9 = block 2
%10:i32 = var
blockpc %9 0 %10 1:i1
%11:i32 = var
blockpc %9 1 %11 1:i1
%12:i32 = var
%13 = phi %9, %12, %8
%14 = phi %7, %8, %8, %8, %8, %13
%15:i32 = var
%16 = add %15, %14
%17 = phi %4, %14, %16
%18 = lshr %17, 8:i32
%19 = ne %18, 0:i32
blockpc %3 0 %19 1:i1
%20 = eq %18, 0:i32
blockpc %3 1 %20 1:i1
%21 = block 2
%22 = ult 16777215:i32, %17
blockpc %21 0 %22 1:i1
%23:i32 = var
blockpc %21 1 %23 1:i1
%24:i32 = var
%25 = phi %21, 31:i32, %24
%26 = phi %3, %25, 0:i32
%27 = shl 1:i32, %26
%28 = and %2, %27
%29 = ne %28, 0:i32
pc %29 1:i1
infer %1


; start LHS (in $15)
%0:i32 = var
%1 = lshr %0, 31:i32
%2:i32 = var
%3 = block 2
%4 = block 2
%5:i32 = var
blockpc %4 0 %5 1:i1
%6:i32 = var
blockpc %4 1 %6 1:i1
%7 = block 5
%8:i32 = var
%9 = block 2
%10:i32 = var
blockpc %9 0 %10 1:i1
%11:i32 = var
blockpc %9 1 %11 1:i1
%12:i32 = var
%13 = phi %9, %12, %8
%14 = phi %7, %8, %8, %8, %8, %13
%15:i32 = var
%16 = add %15, %14
%17 = phi %4, %14, %16
%18 = lshr %17, 8:i32
%19 = ne %18, 0:i32
blockpc %3 0 %19 1:i1
%20 = eq %18, 0:i32
blockpc %3 1 %20 1:i1
%21 = block 2
%22 = ult 16777215:i32, %17
blockpc %21 0 %22 1:i1
%23:i32 = var
blockpc %21 1 %23 1:i1
%24:i32 = var
%25 = phi %21, 31:i32, %24
%26 = phi %3, %25, 0:i32
%27 = shl 1:i32, %26
%28 = and %2, %27
%29 = ne %28, 0:i32
pc %29 1:i1
infer %1


; start LHS (in $15)
%0:i32 = var
%1 = lshr %0, 31:i32
%2 = shl %1, 2:i32
%3:i32 = var
%4 = block 2
%5 = block 2
%6:i32 = var
blockpc %5 0 %6 1:i1
%7:i32 = var
blockpc %5 1 %7 1:i1
%8 = block 5
%9:i32 = var
%10 = block 2
%11:i32 = var
blockpc %10 0 %11 1:i1
%12:i32 = var
blockpc %10 1 %12 1:i1
%13:i32 = var
%14 = phi %10, %13, %9
%15 = phi %8, %9, %9, %9, %9, %14
%16:i32 = var
%17 = add %16, %15
%18 = phi %5, %15, %17
%19 = lshr %18, 8:i32
%20 = ne %19, 0:i32
blockpc %4 0 %20 1:i1
%21 = eq %19, 0:i32
blockpc %4 1 %21 1:i1
%22 = block 2
%23 = ult 16777215:i32, %18
blockpc %22 0 %23 1:i1
%24:i32 = var
blockpc %22 1 %24 1:i1
%25:i32 = var
%26 = phi %22, 31:i32, %25
%27 = phi %4, %26, 0:i32
%28 = shl 1:i32, %27
%29 = and %3, %28
%30 = ne %29, 0:i32
pc %30 1:i1
infer %2


; start LHS (in $15)
%0:i32 = var
%1 = add %0, 16:i32
%2:i32 = var
%3 = lshr %2, 31:i32
%4 = shl %3, 2:i32
%5 = add %1, %4
%6:i32 = var
%7 = block 2
%8 = block 2
%9:i32 = var
blockpc %8 0 %9 1:i1
%10:i32 = var
blockpc %8 1 %10 1:i1
%11 = block 5
%12:i32 = var
%13 = block 2
%14:i32 = var
blockpc %13 0 %14 1:i1
%15:i32 = var
blockpc %13 1 %15 1:i1
%16:i32 = var
%17 = phi %13, %16, %12
%18 = phi %11, %12, %12, %12, %12, %17
%19:i32 = var
%20 = add %19, %18
%21 = phi %8, %18, %20
%22 = lshr %21, 8:i32
%23 = ne %22, 0:i32
blockpc %7 0 %23 1:i1
%24 = eq %22, 0:i32
blockpc %7 1 %24 1:i1
%25 = block 2
%26:i32 = var
blockpc %25 0 %26 1:i1
%27:i32 = var
blockpc %25 1 %27 1:i1
%28:i32 = var
%29 = phi %25, 31:i32, %28
%30 = phi %7, %29, 0:i32
%31 = shl 1:i32, %30
%32 = and %6, %31
%33 = ne %32, 0:i32
pc %33 1:i1
infer %5


; start LHS (in $15)
%0:i32 = var
%1 = add %0, 8:i32
%2:i32 = var
%3 = block 2
%4 = block 2
%5:i32 = var
blockpc %4 0 %5 1:i1
%6:i32 = var
blockpc %4 1 %6 1:i1
%7 = block 5
%8:i32 = var
%9 = block 2
%10:i32 = var
blockpc %9 0 %10 1:i1
%11:i32 = var
blockpc %9 1 %11 1:i1
%12:i32 = var
%13 = phi %9, %12, %8
%14 = phi %7, %8, %8, %8, %8, %13
%15:i32 = var
%16 = add %15, %14
%17 = phi %4, %14, %16
%18 = lshr %17, 8:i32
%19 = ne %18, 0:i32
blockpc %3 0 %19 1:i1
%20 = eq %18, 0:i32
blockpc %3 1 %20 1:i1
%21 = block 2
%22 = ult 16777215:i32, %17
blockpc %21 0 %22 1:i1
%23:i32 = var
blockpc %21 1 %23 1:i1
%24:i32 = var
%25 = phi %21, 31:i32, %24
%26 = phi %3, %25, 0:i32
%27 = shl 1:i32, %26
%28 = and %2, %27
%29 = ne %28, 0:i32
pc %29 1:i1
infer %1


; start LHS (in $15)
%0:i32 = var
%1 = block 2
%2 = block 2
%3 = block 2
%4 = block 5
%5:i32 = var
%6 = block 2
%7:i32 = var
%8 = phi %6, %7, %5
%9 = phi %4, %5, %5, %5, %5, %8
%10:i32 = var
%11 = add %10, %9 (hasExternalUses)
%12 = phi %3, %9, %11
%13:i32 = var
%14:i32 = var
%15 = add %13, %14
%16 = add %15, 7:i32
%17 = lshr %12, %16
%18 = and %17, 1:i32
%19 = shl %15, 1:i32
%20 = or %18, %19 (hasExternalUses)
%21 = phi %2, 31:i32, %20
%22 = phi %1, %21, 0:i32
%23 = shl 1:i32, %22 (hasExternalUses)
%24 = or %0, %23
%25 = lshr %12, 8:i32
%26 = ne %25, 0:i32
blockpc %1 0 %26 1:i1
%27 = eq %25, 0:i32
blockpc %1 1 %27 1:i1
%28:i32 = var
blockpc %2 0 %28 1:i1
%29:i32 = var
blockpc %2 1 %29 1:i1
%30:i32 = var
blockpc %3 0 %30 1:i1
%31:i32 = var
blockpc %3 1 %31 1:i1
%32:i32 = var
blockpc %6 0 %32 1:i1
%33:i32 = var
blockpc %6 1 %33 1:i1
%34:i32 = var
pc %34 1:i1
infer %24


; start LHS (in $15)
%0:i32 = var
%1 = add %0, -1:i32
infer %1


; start LHS (in $15)
%0:i32 = var
%1 = add %0, 8:i32
infer %1


; function: $16

; start LHS (in $16)
%0:i32 = var
%1 = add %0, 48:i32
infer %1


; start LHS (in $16)
%0:i32 = var
%1 = add %0, 40:i32
infer %1


; start LHS (in $16)
%0:i32 = var
%1 = add %0, 24:i32
infer %1


; start LHS (in $16)
%0:i32 = var
%1 = add %0, 8:i32
infer %1


; start LHS (in $16)
%0:i32 = var
%1 = add %0, 44:i32
infer %1


; start LHS (in $16)
%0:i32 = var
%1 = sle %0, 1:i32
infer %1


; start LHS (in $16)
%0:i32 = var
%1 = sub %0, 48:i32
infer %1


; start LHS (in $16)
%0:i32 = var
%1 = add %0, -48:i32
infer %1


; start LHS (in $16)
%0:i32 = var
%1 = shl %0, 24:i32
infer %1


; start LHS (in $16)
%0:i32 = var
%1 = shl %0, 24:i32 (hasExternalUses)
%2 = ashr %1, 24:i32
infer %2


; start LHS (in $16)
%0:i32 = var
%1 = shl %0, 24:i32 (hasExternalUses)
%2 = ashr %1, 24:i32 (hasExternalUses)
%3 = add %2, 191:i32
infer %3


; start LHS (in $16)
%0:i32 = var
%1 = shl %0, 24:i32 (hasExternalUses)
%2 = ashr %1, 24:i32 (hasExternalUses)
%3 = add %2, 191:i32
%4 = and %3, 255:i32
infer %4


; start LHS (in $16)
%0:i32 = var
%1 = shl %0, 24:i32 (hasExternalUses)
%2 = add %1, -1073741825:i32
infer %2


; start LHS (in $16)
%0:i32 = var
%1 = shl %0, 24:i32 (hasExternalUses)
%2 = add %1, -1073741825:i32
%3 = ule 452984831:i32, %2
infer %3


; start LHS (in $16)
%0:i32 = var
%1 = shl %0, 24:i32 (hasExternalUses)
%2 = ashr %1, 24:i32 (hasExternalUses)
%3 = add %2, 185:i32
infer %3


; start LHS (in $16)
%0:i32 = var
%1 = shl %0, 24:i32 (hasExternalUses)
%2 = ashr %1, 24:i32 (hasExternalUses)
%3 = add %2, 185:i32
%4 = and %3, 255:i32
infer %4


; start LHS (in $16)
%0:i32 = var
%1 = shl %0, 24:i32 (hasExternalUses)
%2 = add %1, -1610612737:i32
infer %2


; start LHS (in $16)
%0:i32 = var
%1 = shl %0, 24:i32 (hasExternalUses)
%2 = add %1, -1610612737:i32
%3 = ule 452984831:i32, %2
infer %3


; start LHS (in $16)
%0:i32 = var
%1 = shl %0, 24:i32 (hasExternalUses)
%2 = ashr %1, 24:i32 (hasExternalUses)
%3 = add %2, 4:i32
infer %3


; start LHS (in $16)
%0:i32 = var
%1 = shl %0, 24:i32 (hasExternalUses)
%2 = ashr %1, 24:i32 (hasExternalUses)
%3 = add %2, 4:i32
%4 = and %3, 255:i32
infer %4


; start LHS (in $16)
%0:i32 = var
%1 = shl %0, 24:i32 (hasExternalUses)
%2 = add %1, -788529153:i32
infer %2


; start LHS (in $16)
%0:i32 = var
%1 = shl %0, 24:i32 (hasExternalUses)
%2 = add %1, -788529153:i32
%3 = ule 184549375:i32, %2
infer %3


; start LHS (in $16)
%0:i32 = var
%1 = shl %0, 24:i32 (hasExternalUses)
%2 = ashr %1, 24:i32 (hasExternalUses)
%3 = sub %2, 43:i32
infer %3


; start LHS (in $16)
%0:i32 = var
%1 = shl %0, 24:i32 (hasExternalUses)
%2 = ashr %1, 24:i32 (hasExternalUses)
%3 = sub %2, 47:i32
infer %3


; start LHS (in $16)
%0:i32 = var
%1 = add %0, 4520:i32
infer %1


; start LHS (in $16)
%0:i32 = var
%1 = add %0, 1:i32
infer %1


; start LHS (in $16)
%0:i32 = var
%1 = add %0, 1:i32 (hasExternalUses)
%2 = ne %1, 256:i32
infer %2


; start LHS (in $16)
%0:i32 = var
%1 = add %0, 10000000:i32
infer %1


; start LHS (in $16)
%0:i32 = var
%1 = add %0, 9999999:i32
infer %1


; start LHS (in $16)
%0:i32 = var
%1:i32 = var
%2 = add %0, %1
infer %2


; start LHS (in $16)
%0:i32 = var
%1 = lshr %0, 26:i32
infer %1


; start LHS (in $16)
%0:i32 = var
%1 = lshr %0, 26:i32
%2 = add %1, 1396:i32
infer %2


; start LHS (in $16)
%0:i32 = var
%1 = lshr %0, 20:i32
infer %1


; start LHS (in $16)
%0:i32 = var
%1 = lshr %0, 20:i32
%2 = and %1, 63:i32
infer %2


; start LHS (in $16)
%0:i32 = var
%1 = lshr %0, 20:i32
%2 = and %1, 63:i32
%3 = add %2, 1396:i32
infer %3


; start LHS (in $16)
%0:i32 = var
%1 = lshr %0, 14:i32
infer %1


; start LHS (in $16)
%0:i32 = var
%1 = lshr %0, 14:i32
%2 = and %1, 63:i32
infer %2


; start LHS (in $16)
%0:i32 = var
%1 = lshr %0, 14:i32
%2 = and %1, 63:i32
%3 = add %2, 1396:i32
infer %3


; start LHS (in $16)
%0:i32 = var
%1 = add %0, 4:i32
infer %1


; start LHS (in $16)
%0:i32 = var
%1 = lshr %0, 8:i32
infer %1


; start LHS (in $16)
%0:i32 = var
%1 = lshr %0, 8:i32
%2 = and %1, 63:i32
infer %2


; start LHS (in $16)
%0:i32 = var
%1 = lshr %0, 8:i32
%2 = and %1, 63:i32
%3 = add %2, 1396:i32
infer %3


; start LHS (in $16)
%0:i32 = var
%1 = add %0, 3:i32
infer %1


; start LHS (in $16)
%0:i32 = var
%1 = add %0, 3:i32 (hasExternalUses)
%2 = ne %1, 9999999:i32
infer %2


; start LHS (in $16)
%0:i32 = var
%1:i32 = var
%2 = sub %0, %1
infer %2


; start LHS (in $16)
%0:i32 = var
%1 = add %0, 13333336:i32
infer %1


; start LHS (in $16)
%0:i32 = var
%1:i32 = var
%2 = sub %0, %1
%3 = add %1, 13333336:i32
%4 = add %2, %3
infer %4


; start LHS (in $16)
%0:i32 = var
%1 = add %0, 1:i32
infer %1


; start LHS (in $16)
%0:i32 = var
%1 = add %0, 1:i32
%2 = block 5
%3 = phi %2, 3:i32, 15:i32, 50:i32, 100:i32, 25:i32
%4 = slt %1, %3
infer %4


; start LHS (in $16)
%0:i32 = var
%1:i32 = var
%2 = sub %0, %1
infer %2


; start LHS (in $16)
%0:i32 = var
%1:i32 = var
%2 = add %0, %1
infer %2


; start LHS (in $16)
%0:i32 = var
%1 = lshr %0, 26:i32
infer %1


; start LHS (in $16)
%0:i32 = var
%1 = lshr %0, 26:i32
%2 = add %1, 1396:i32
infer %2


; start LHS (in $16)
%0:i32 = var
%1 = lshr %0, 20:i32
infer %1


; start LHS (in $16)
%0:i32 = var
%1 = lshr %0, 20:i32
%2 = and %1, 63:i32
infer %2


; start LHS (in $16)
%0:i32 = var
%1 = lshr %0, 20:i32
%2 = and %1, 63:i32
%3 = add %2, 1396:i32
infer %3


; start LHS (in $16)
%0:i32 = var
%1 = lshr %0, 14:i32
infer %1


; start LHS (in $16)
%0:i32 = var
%1 = lshr %0, 14:i32
%2 = and %1, 63:i32
infer %2


; start LHS (in $16)
%0:i32 = var
%1 = lshr %0, 14:i32
%2 = and %1, 63:i32
%3 = add %2, 1396:i32
infer %3


; start LHS (in $16)
%0:i32 = var
%1 = add %0, 4:i32
infer %1


; start LHS (in $16)
%0:i32 = var
%1 = lshr %0, 8:i32
infer %1


; start LHS (in $16)
%0:i32 = var
%1 = lshr %0, 8:i32
%2 = and %1, 63:i32
infer %2


; start LHS (in $16)
%0:i32 = var
%1 = lshr %0, 8:i32
%2 = and %1, 63:i32
%3 = add %2, 1396:i32
infer %3


; start LHS (in $16)
%0:i32 = var
%1 = add %0, 3:i32
infer %1


; start LHS (in $16)
%0:i32 = var
%1 = add %0, 3:i32 (hasExternalUses)
%2 = ne %1, 9999999:i32
infer %2


; start LHS (in $16)
%0:i32 = var
%1 = add %0, 13333332:i32
infer %1


; start LHS (in $16)
%0:i32 = var
%1 = lshr %0, 2:i32
infer %1


; start LHS (in $16)
%0:i32 = var
%1 = lshr %0, 2:i32
%2 = and %1, 63:i32
infer %2


; start LHS (in $16)
%0:i32 = var
%1 = lshr %0, 2:i32
%2 = and %1, 63:i32
%3 = add %2, 1396:i32
infer %3


; start LHS (in $16)
%0:i32 = var
%1 = add %0, 13333333:i32
infer %1


; start LHS (in $16)
%0:i32 = var
%1 = shl %0, 4:i32
infer %1


; start LHS (in $16)
%0:i32 = var
%1 = shl %0, 4:i32
%2 = and %1, 48:i32
infer %2


; start LHS (in $16)
%0:i32 = var
%1 = shl %0, 4:i32
%2 = and %1, 48:i32
%3 = add %2, 1396:i32
infer %3


; start LHS (in $16)
%0:i32 = var
%1 = add %0, 13333334:i32
infer %1


; start LHS (in $16)
%0:i32 = var
%1 = add %0, 13333335:i32
infer %1


; start LHS (in $16)
%0:i32 = var
%1 = add %0, 13333336:i32
infer %1


; start LHS (in $16)
%0:i32 = var
%1:i32 = var
%2 = add %0, %1
infer %2


; start LHS (in $16)
%0:i32 = var
%1 = add %0, 1:i32
infer %1


; start LHS (in $16)
%0:i32 = var
%1 = add %0, 1:i32
%2 = block 5
%3 = phi %2, 3:i32, 15:i32, 50:i32, 100:i32, 25:i32
%4 = slt %1, %3
infer %4


; start LHS (in $16)
%0:i32 = var
%1:i32 = var
%2 = sub %0, %1
infer %2


; function: $17

; start LHS (in $17)
%0:i32 = var
%1 = mul %0, 3:i32
infer %1


; start LHS (in $17)
%0:i32 = var
%1 = add %0, 6:i32
infer %1


; start LHS (in $17)
%0:i32 = var
%1 = slt 0:i32, %0
infer %1


; start LHS (in $17)
%0:i32 = var
%1 = add %0, -1:i32
%2:i32 = var
%3 = slt 0:i32, %2
pc %3 1:i1
infer %1


; start LHS (in $17)
%0:i32 = var
%1:i32 = var
%2 = add %1, -1:i32 (hasExternalUses)
%3 = add %0, %2
%4:i32 = var
%5 = slt 0:i32, %4
pc %5 1:i1
infer %3


; start LHS (in $17)
%0:i32 = var
%1 = sub %0, 10:i32
%2:i32 = var
%3 = slt 0:i32, %2
pc %3 1:i1
infer %1


; start LHS (in $17)
%0:i32 = var
%1 = slt 1:i32, %0
%2:i32 = var
%3 = slt 0:i32, %2
pc %3 1:i1
infer %1


; start LHS (in $17)
%0 = block 2
%1:i32 = var
%2:i32 = var
%3 = phi %0, %1, %2
%4:i32 = var
%5 = block 2
%6:i32 = var
%7 = add %4, -1:i32 (hasExternalUses)
%8 = phi %5, %6, %7
%9 = phi %0, %4, %8
%10 = add %3, %9
%11 = slt 0:i32, %6
blockpc %5 0 %11 1:i1
%12:i32 = zext %11
%13 = eq %12, 0:i32
blockpc %5 1 %13 1:i1
infer %10


; start LHS (in $17)
%0 = block 2
%1:i32 = var
%2:i32 = var
%3 = phi %0, %1, %2
%4:i32 = var
%5 = block 2
%6:i32 = var
%7 = add %4, -1:i32 (hasExternalUses)
%8 = phi %5, %6, %7
%9 = phi %0, %4, %8
%10 = add %3, %9
%11 = add %10, -4:i32
%12 = slt 0:i32, %6
blockpc %5 0 %12 1:i1
%13:i32 = zext %12
%14 = eq %13, 0:i32
blockpc %5 1 %14 1:i1
infer %11


; start LHS (in $17)
%0 = block 2
%1:i32 = var
%2:i32 = var
%3 = phi %0, %1, %2
%4:i32 = var
%5 = block 2
%6:i32 = var
%7 = add %4, -1:i32 (hasExternalUses)
%8 = phi %5, %6, %7
%9 = phi %0, %4, %8
%10 = add %3, %9
%11 = add %10, -4:i32 (hasExternalUses)
%12 = ult %11, %3
%13 = slt 0:i32, %6
blockpc %5 0 %13 1:i1
%14:i32 = zext %13
%15 = eq %14, 0:i32
blockpc %5 1 %15 1:i1
infer %12


; start LHS (in $17)
%0:i32 = var
%1 = sub %0, 10:i32
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = block 2
%8:i32 = var
%9 = slt 0:i32, %8
blockpc %7 0 %9 1:i1
%10:i32 = zext %9
%11 = eq %10, 0:i32
blockpc %7 1 %11 1:i1
%12 = add %6, -1:i32
%13 = phi %7, %8, %12
%14 = phi %2, %6, %13
%15 = add %5, %14
%16 = add %15, -4:i32
%17 = ult %16, %5
%18:i32 = zext %17
%19 = eq %18, 0:i32
pc %19 1:i1
infer %1


; start LHS (in $17)
%0:i32 = var
%1 = add %0, 1:i32
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = block 2
%8:i32 = var
%9 = slt 0:i32, %8
blockpc %7 0 %9 1:i1
%10:i32 = zext %9
%11 = eq %10, 0:i32
blockpc %7 1 %11 1:i1
%12 = add %6, -1:i32
%13 = phi %7, %8, %12
%14 = phi %2, %6, %13
%15 = add %5, %14
%16 = add %15, -4:i32
%17 = ult %16, %5
%18:i32 = zext %17
%19 = eq %18, 0:i32
pc %19 1:i1
infer %1


; start LHS (in $17)
%0 = block 2
%1:i32 = var
%2:i32 = var
%3 = phi %0, %1, %2
%4:i32 = var
%5 = block 2
%6:i32 = var
%7 = add %4, -1:i32 (hasExternalUses)
%8 = phi %5, %6, %7
%9 = phi %0, %4, %8
%10 = add %3, %9
%11 = add %10, -4:i32 (hasExternalUses)
%12:i32 = var
%13 = ult %11, %12
%14 = slt 0:i32, %6
blockpc %5 0 %14 1:i1
%15:i32 = zext %14
%16 = eq %15, 0:i32
blockpc %5 1 %16 1:i1
%17 = ult %11, %3
%18:i32 = zext %17
%19 = eq %18, 0:i32
pc %19 1:i1
infer %13


; start LHS (in $17)
%0:i32 = var
%1 = and %0, 255:i32
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = block 2
%8:i32 = var
%9 = slt 0:i32, %8
blockpc %7 0 %9 1:i1
%10:i32 = zext %9
%11 = eq %10, 0:i32
blockpc %7 1 %11 1:i1
%12 = add %6, -1:i32
%13 = phi %7, %8, %12
%14 = phi %2, %6, %13
%15 = add %5, %14
%16 = add %15, -4:i32
%17 = ult %16, %5
%18:i32 = zext %17
%19 = eq %18, 0:i32
pc %19 1:i1
infer %1


; start LHS (in $17)
%0:i32 = var
%1 = and %0, 255:i32
%2 = add %1, 4520:i32
%3 = block 2
%4:i32 = var
%5:i32 = var
%6 = phi %3, %4, %5
%7:i32 = var
%8 = block 2
%9:i32 = var
%10 = slt 0:i32, %9
blockpc %8 0 %10 1:i1
%11:i32 = zext %10
%12 = eq %11, 0:i32
blockpc %8 1 %12 1:i1
%13 = add %7, -1:i32
%14 = phi %8, %9, %13
%15 = phi %3, %7, %14
%16 = add %6, %15
%17 = add %16, -4:i32
%18 = ult %17, %6
%19:i32 = zext %18
%20 = eq %19, 0:i32
pc %20 1:i1
infer %2


; start LHS (in $17)
%0:i32 = var
%1 = slt %0, 0:i32
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = block 2
%8:i32 = var
%9 = slt 0:i32, %8
blockpc %7 0 %9 1:i1
%10:i32 = zext %9
%11 = eq %10, 0:i32
blockpc %7 1 %11 1:i1
%12 = add %6, -1:i32
%13 = phi %7, %8, %12
%14 = phi %2, %6, %13
%15 = add %5, %14
%16 = add %15, -4:i32
%17 = ult %16, %5
%18:i32 = zext %17
%19 = eq %18, 0:i32
pc %19 1:i1
infer %1


; start LHS (in $17)
%0:i32 = var
%1 = add %0, 4520:i32
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = block 2
%8:i32 = var
%9 = slt 0:i32, %8
blockpc %7 0 %9 1:i1
%10:i32 = zext %9
%11 = eq %10, 0:i32
blockpc %7 1 %11 1:i1
%12 = add %6, -1:i32
%13 = phi %7, %8, %12
%14 = phi %2, %6, %13
%15 = add %5, %14
%16 = add %15, -4:i32
%17 = ult %16, %5
%18:i32 = zext %17
%19 = eq %18, 0:i32
pc %19 1:i1
infer %1


; start LHS (in $17)
%0:i32 = var
%1 = slt %0, 0:i32
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = block 2
%8:i32 = var
%9 = slt 0:i32, %8
blockpc %7 0 %9 1:i1
%10:i32 = zext %9
%11 = eq %10, 0:i32
blockpc %7 1 %11 1:i1
%12 = add %6, -1:i32
%13 = phi %7, %8, %12
%14 = phi %2, %6, %13
%15 = add %5, %14
%16 = add %15, -4:i32
%17 = ult %16, %5
%18:i32 = zext %17
%19 = eq %18, 0:i32
pc %19 1:i1
infer %1


; start LHS (in $17)
%0:i32 = var
%1 = add %0, 4520:i32
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = block 2
%8:i32 = var
%9 = slt 0:i32, %8
blockpc %7 0 %9 1:i1
%10:i32 = zext %9
%11 = eq %10, 0:i32
blockpc %7 1 %11 1:i1
%12 = add %6, -1:i32
%13 = phi %7, %8, %12
%14 = phi %2, %6, %13
%15 = add %5, %14
%16 = add %15, -4:i32
%17 = ult %16, %5
%18:i32 = zext %17
%19 = eq %18, 0:i32
pc %19 1:i1
infer %1


; start LHS (in $17)
%0:i32 = var
%1 = slt %0, 0:i32
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = block 2
%8:i32 = var
%9 = slt 0:i32, %8
blockpc %7 0 %9 1:i1
%10:i32 = zext %9
%11 = eq %10, 0:i32
blockpc %7 1 %11 1:i1
%12 = add %6, -1:i32
%13 = phi %7, %8, %12
%14 = phi %2, %6, %13
%15 = add %5, %14
%16 = add %15, -4:i32
%17 = ult %16, %5
%18:i32 = zext %17
%19 = eq %18, 0:i32
pc %19 1:i1
infer %1


; start LHS (in $17)
%0:i32 = var
%1 = add %0, 4520:i32
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = block 2
%8:i32 = var
%9 = slt 0:i32, %8
blockpc %7 0 %9 1:i1
%10:i32 = zext %9
%11 = eq %10, 0:i32
blockpc %7 1 %11 1:i1
%12 = add %6, -1:i32
%13 = phi %7, %8, %12
%14 = phi %2, %6, %13
%15 = add %5, %14
%16 = add %15, -4:i32
%17 = ult %16, %5
%18:i32 = zext %17
%19 = eq %18, 0:i32
pc %19 1:i1
infer %1


; start LHS (in $17)
%0:i32 = var
%1 = slt %0, 0:i32
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = block 2
%8:i32 = var
%9 = slt 0:i32, %8
blockpc %7 0 %9 1:i1
%10:i32 = zext %9
%11 = eq %10, 0:i32
blockpc %7 1 %11 1:i1
%12 = add %6, -1:i32
%13 = phi %7, %8, %12
%14 = phi %2, %6, %13
%15 = add %5, %14
%16 = add %15, -4:i32
%17 = ult %16, %5
%18:i32 = zext %17
%19 = eq %18, 0:i32
pc %19 1:i1
infer %1


; start LHS (in $17)
%0:i32 = var
%1 = lshr %0, 4:i32
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = block 2
%8:i32 = var
%9 = slt 0:i32, %8
blockpc %7 0 %9 1:i1
%10:i32 = zext %9
%11 = eq %10, 0:i32
blockpc %7 1 %11 1:i1
%12 = add %6, -1:i32
%13 = phi %7, %8, %12
%14 = phi %2, %6, %13
%15 = add %5, %14
%16 = add %15, -4:i32
%17 = ult %16, %5
%18:i32 = zext %17
%19 = eq %18, 0:i32
pc %19 1:i1
infer %1


; start LHS (in $17)
%0:i32 = var
%1 = shl %0, 2:i32
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = block 2
%8:i32 = var
%9 = slt 0:i32, %8
blockpc %7 0 %9 1:i1
%10:i32 = zext %9
%11 = eq %10, 0:i32
blockpc %7 1 %11 1:i1
%12 = add %6, -1:i32
%13 = phi %7, %8, %12
%14 = phi %2, %6, %13
%15 = add %5, %14
%16 = add %15, -4:i32
%17 = ult %16, %5
%18:i32 = zext %17
%19 = eq %18, 0:i32
pc %19 1:i1
infer %1


; start LHS (in $17)
%0:i32 = var
%1 = lshr %0, 4:i32
%2:i32 = var
%3 = shl %2, 2:i32
%4 = or %1, %3
%5 = block 2
%6:i32 = var
%7:i32 = var
%8 = phi %5, %6, %7
%9:i32 = var
%10 = block 2
%11:i32 = var
%12 = slt 0:i32, %11
blockpc %10 0 %12 1:i1
%13:i32 = zext %12
%14 = eq %13, 0:i32
blockpc %10 1 %14 1:i1
%15 = add %9, -1:i32
%16 = phi %10, %11, %15
%17 = phi %5, %9, %16
%18 = add %8, %17
%19 = add %18, -4:i32
%20 = ult %19, %8
%21:i32 = zext %20
%22 = eq %21, 0:i32
pc %22 1:i1
infer %4


; start LHS (in $17)
%0:i32 = var
%1 = lshr %0, 2:i32
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = block 2
%8:i32 = var
%9 = slt 0:i32, %8
blockpc %7 0 %9 1:i1
%10:i32 = zext %9
%11 = eq %10, 0:i32
blockpc %7 1 %11 1:i1
%12 = add %6, -1:i32
%13 = phi %7, %8, %12
%14 = phi %2, %6, %13
%15 = add %5, %14
%16 = add %15, -4:i32
%17 = ult %16, %5
%18:i32 = zext %17
%19 = eq %18, 0:i32
pc %19 1:i1
infer %1


; start LHS (in $17)
%0:i32 = var
%1 = shl %0, 4:i32
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = block 2
%8:i32 = var
%9 = slt 0:i32, %8
blockpc %7 0 %9 1:i1
%10:i32 = zext %9
%11 = eq %10, 0:i32
blockpc %7 1 %11 1:i1
%12 = add %6, -1:i32
%13 = phi %7, %8, %12
%14 = phi %2, %6, %13
%15 = add %5, %14
%16 = add %15, -4:i32
%17 = ult %16, %5
%18:i32 = zext %17
%19 = eq %18, 0:i32
pc %19 1:i1
infer %1


; start LHS (in $17)
%0:i32 = var
%1 = lshr %0, 2:i32
%2:i32 = var
%3 = shl %2, 4:i32
%4 = or %1, %3
%5 = block 2
%6:i32 = var
%7:i32 = var
%8 = phi %5, %6, %7
%9:i32 = var
%10 = block 2
%11:i32 = var
%12 = slt 0:i32, %11
blockpc %10 0 %12 1:i1
%13:i32 = zext %12
%14 = eq %13, 0:i32
blockpc %10 1 %14 1:i1
%15 = add %9, -1:i32
%16 = phi %10, %11, %15
%17 = phi %5, %9, %16
%18 = add %8, %17
%19 = add %18, -4:i32
%20 = ult %19, %8
%21:i32 = zext %20
%22 = eq %21, 0:i32
pc %22 1:i1
infer %4


; start LHS (in $17)
%0:i32 = var
%1 = add %0, 3:i32
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = block 2
%8:i32 = var
%9 = slt 0:i32, %8
blockpc %7 0 %9 1:i1
%10:i32 = zext %9
%11 = eq %10, 0:i32
blockpc %7 1 %11 1:i1
%12 = add %6, -1:i32
%13 = phi %7, %8, %12
%14 = phi %2, %6, %13
%15 = add %5, %14
%16 = add %15, -4:i32
%17 = ult %16, %5
%18:i32 = zext %17
%19 = eq %18, 0:i32
pc %19 1:i1
infer %1


; start LHS (in $17)
%0:i32 = var
%1 = shl %0, 6:i32
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = block 2
%8:i32 = var
%9 = slt 0:i32, %8
blockpc %7 0 %9 1:i1
%10:i32 = zext %9
%11 = eq %10, 0:i32
blockpc %7 1 %11 1:i1
%12 = add %6, -1:i32
%13 = phi %7, %8, %12
%14 = phi %2, %6, %13
%15 = add %5, %14
%16 = add %15, -4:i32
%17 = ult %16, %5
%18:i32 = zext %17
%19 = eq %18, 0:i32
pc %19 1:i1
infer %1


; start LHS (in $17)
%0:i32 = var
%1 = and %0, 255:i32
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = block 2
%8:i32 = var
%9 = slt 0:i32, %8
blockpc %7 0 %9 1:i1
%10:i32 = zext %9
%11 = eq %10, 0:i32
blockpc %7 1 %11 1:i1
%12 = add %6, -1:i32
%13 = phi %7, %8, %12
%14 = phi %2, %6, %13
%15 = add %5, %14
%16 = add %15, -4:i32
%17 = ult %16, %5
%18:i32 = zext %17
%19 = eq %18, 0:i32
pc %19 1:i1
infer %1


; start LHS (in $17)
%0:i32 = var
%1 = shl %0, 6:i32
%2:i32 = var
%3 = and %2, 255:i32
%4 = or %1, %3
%5 = block 2
%6:i32 = var
%7:i32 = var
%8 = phi %5, %6, %7
%9:i32 = var
%10 = block 2
%11:i32 = var
%12 = slt 0:i32, %11
blockpc %10 0 %12 1:i1
%13:i32 = zext %12
%14 = eq %13, 0:i32
blockpc %10 1 %14 1:i1
%15 = add %9, -1:i32
%16 = phi %10, %11, %15
%17 = phi %5, %9, %16
%18 = add %8, %17
%19 = add %18, -4:i32
%20 = ult %19, %8
%21:i32 = zext %20
%22 = eq %21, 0:i32
pc %22 1:i1
infer %4


; start LHS (in $17)
%0:i32 = var
%1 = add %0, 4:i32
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = block 2
%8:i32 = var
%9 = slt 0:i32, %8
blockpc %7 0 %9 1:i1
%10:i32 = zext %9
%11 = eq %10, 0:i32
blockpc %7 1 %11 1:i1
%12 = add %6, -1:i32
%13 = phi %7, %8, %12
%14 = phi %2, %6, %13
%15 = add %5, %14
%16 = add %15, -4:i32
%17 = ult %16, %5
%18:i32 = zext %17
%19 = eq %18, 0:i32
pc %19 1:i1
infer %1


; start LHS (in $17)
%0 = block 2
%1:i32 = var
%2:i32 = var
%3 = phi %0, %1, %2
%4:i32 = var
%5 = block 2
%6:i32 = var
%7 = add %4, -1:i32 (hasExternalUses)
%8 = phi %5, %6, %7
%9 = phi %0, %4, %8
%10 = add %3, %9
%11 = add %10, -4:i32 (hasExternalUses)
%12:i32 = var
%13 = add %12, 4:i32 (hasExternalUses)
%14 = ult %11, %13
%15 = slt 0:i32, %6
blockpc %5 0 %15 1:i1
%16:i32 = zext %15
%17 = eq %16, 0:i32
blockpc %5 1 %17 1:i1
%18 = ult %11, %3
%19:i32 = zext %18
%20 = eq %19, 0:i32
pc %20 1:i1
infer %14


; start LHS (in $17)
%0 = block 3
%1:i32 = var
%2 = add %1, 4:i32 (hasExternalUses)
%3 = block 2
%4:i32 = var
%5:i32 = var
%6 = phi %3, %4, %5
%7 = phi %0, %1, %2, %6
%8:i32 = var
%9:i32 = var
%10 = block 2
%11:i32 = var
%12 = add %9, -1:i32 (hasExternalUses)
%13 = phi %10, %11, %12
%14 = phi %3, %9, %13
%15 = add %6, %14
%16 = add %15, -4:i32 (hasExternalUses)
%17 = phi %0, %8, %8, %16
%18 = sub %7, %17
%19 = slt 0:i32, %11
blockpc %10 0 %19 1:i1
%20:i32 = zext %19
%21 = eq %20, 0:i32
blockpc %10 1 %21 1:i1
infer %18


; start LHS (in $17)
%0 = block 3
%1:i32 = var
%2 = add %1, 4:i32 (hasExternalUses)
%3 = block 2
%4:i32 = var
%5:i32 = var
%6 = phi %3, %4, %5
%7 = phi %0, %1, %2, %6
%8:i32 = var
%9:i32 = var
%10 = block 2
%11:i32 = var
%12 = add %9, -1:i32 (hasExternalUses)
%13 = phi %10, %11, %12
%14 = phi %3, %9, %13
%15 = add %6, %14
%16 = add %15, -4:i32 (hasExternalUses)
%17 = phi %0, %8, %8, %16
%18 = sub %7, %17
%19 = srem %18, 4:i32
%20 = slt 0:i32, %11
blockpc %10 0 %20 1:i1
%21:i32 = zext %20
%22 = eq %21, 0:i32
blockpc %10 1 %22 1:i1
infer %19


; start LHS (in $17)
%0 = block 3
%1:i32 = var
%2 = add %1, 4:i32 (hasExternalUses)
%3 = block 2
%4:i32 = var
%5:i32 = var
%6 = phi %3, %4, %5
%7 = phi %0, %1, %2, %6
%8:i32 = var
%9:i32 = var
%10 = block 2
%11:i32 = var
%12 = add %9, -1:i32 (hasExternalUses)
%13 = phi %10, %11, %12
%14 = phi %3, %9, %13
%15 = add %6, %14
%16 = add %15, -4:i32 (hasExternalUses)
%17 = phi %0, %8, %8, %16
%18 = sub %7, %17
%19 = srem %18, 4:i32
%20 = sub %19, 2:i32
%21 = slt 0:i32, %11
blockpc %10 0 %21 1:i1
%22:i32 = zext %21
%23 = eq %22, 0:i32
blockpc %10 1 %23 1:i1
infer %20


; start LHS (in $17)
%0:i32 = var
%1 = add %0, 4520:i32
infer %1


; start LHS (in $17)
%0:i32 = var
%1 = slt %0, 0:i32
infer %1


; start LHS (in $17)
%0:i32 = var
%1 = add %0, 4520:i32
infer %1


; start LHS (in $17)
%0:i32 = var
%1 = lshr %0, 4:i32
infer %1


; start LHS (in $17)
%0:i32 = var
%1 = shl %0, 2:i32
infer %1


; start LHS (in $17)
%0:i32 = var
%1 = lshr %0, 4:i32
%2:i32 = var
%3 = shl %2, 2:i32
%4 = or %1, %3
infer %4


; start LHS (in $17)
%0 = block 3
%1:i32 = var
%2 = add %1, 3:i32 (hasExternalUses)
%3 = block 2
%4:i32 = var
%5:i32 = var
%6 = phi %3, %4, %5
%7 = phi %0, %1, %2, %6
%8 = add %7, 1:i32
infer %8


; start LHS (in $17)
%0:i32 = var
%1 = sle 0:i32, %0
infer %1


; start LHS (in $17)
%0:i32 = var
%1 = add %0, 4520:i32
infer %1


; start LHS (in $17)
%0:i32 = var
%1 = slt %0, 0:i32
infer %1


; start LHS (in $17)
%0:i32 = var
%1 = add %0, 4520:i32
infer %1


; start LHS (in $17)
%0:i32 = var
%1 = slt %0, 0:i32
infer %1


; start LHS (in $17)
%0:i32 = var
%1 = add %0, 4520:i32
infer %1


; start LHS (in $17)
%0:i32 = var
%1 = slt %0, 0:i32
infer %1


; start LHS (in $17)
%0:i32 = var
%1 = lshr %0, 4:i32
%2:i32 = var
%3 = slt %2, 0:i32
%4:i32 = zext %3
%5 = eq %4, 0:i32
pc %5 1:i1
infer %1


; start LHS (in $17)
%0:i32 = var
%1 = shl %0, 2:i32
%2:i32 = var
%3 = slt %2, 0:i32
%4:i32 = zext %3
%5 = eq %4, 0:i32
pc %5 1:i1
infer %1


; start LHS (in $17)
%0:i32 = var
%1 = lshr %0, 4:i32
%2:i32 = var
%3 = shl %2, 2:i32
%4 = or %1, %3
%5:i32 = var
%6 = slt %5, 0:i32
%7:i32 = zext %6
%8 = eq %7, 0:i32
pc %8 1:i1
infer %4


; start LHS (in $17)
%0 = block 3
%1:i32 = var
%2 = add %1, 3:i32 (hasExternalUses)
%3 = block 2
%4:i32 = var
%5:i32 = var
%6 = phi %3, %4, %5
%7 = phi %0, %1, %2, %6
%8 = add %7, 2:i32
%9:i32 = var
%10 = slt %9, 0:i32
%11:i32 = zext %10
%12 = eq %11, 0:i32
pc %12 1:i1
infer %8


; start LHS (in $17)
%0 = block 3
%1:i32 = var
%2 = add %1, 3:i32 (hasExternalUses)
%3 = block 2
%4:i32 = var
%5:i32 = var
%6 = phi %3, %4, %5
%7 = phi %0, %1, %2, %6
%8 = add %7, 1:i32
%9:i32 = var
%10 = slt %9, 0:i32
%11:i32 = zext %10
%12 = eq %11, 0:i32
pc %12 1:i1
infer %8


; start LHS (in $17)
%0:i32 = var
%1 = lshr %0, 2:i32
%2 = slt %0, 0:i32
%3:i32 = zext %2
%4 = eq %3, 0:i32
pc %4 1:i1
infer %1


; start LHS (in $17)
%0:i32 = var
%1 = shl %0, 4:i32
%2:i32 = var
%3 = slt %2, 0:i32
%4:i32 = zext %3
%5 = eq %4, 0:i32
pc %5 1:i1
infer %1


; start LHS (in $17)
%0:i32 = var
%1 = lshr %0, 2:i32
%2:i32 = var
%3 = shl %2, 4:i32
%4 = or %1, %3
%5 = slt %0, 0:i32
%6:i32 = zext %5
%7 = eq %6, 0:i32
pc %7 1:i1
infer %4


; start LHS (in $17)
%0 = block 2
%1 = block 3
%2:i32 = var
%3 = add %2, 3:i32 (hasExternalUses)
%4 = block 2
%5:i32 = var
%6:i32 = var
%7 = phi %4, %5, %6
%8 = phi %1, %2, %3, %7
%9 = block 2
%10 = add %8, 1:i32 (hasExternalUses)
%11 = add %8, 2:i32 (hasExternalUses)
%12 = phi %9, %10, %11
%13 = phi %0, %8, %12
%14:i32 = var
%15 = sub %13, %14
infer %15


; function: $18

; function: $19

; function: $20

; start LHS (in $20)
%0:i32 = var
%1 = sle 8192:i32, %0
infer %1


; start LHS (in $20)
%0:i32 = var
%1:i32 = var
%2 = add %0, %1
infer %2


; start LHS (in $20)
%0:i32 = var
%1 = and %0, 3:i32
infer %1


; start LHS (in $20)
%0:i32 = var
%1 = and %0, 3:i32
infer %1


; start LHS (in $20)
%0:i32 = var
%1 = and %0, 3:i32
%2:i32 = var
%3 = and %2, 3:i32
%4 = eq %1, %3
infer %4


; start LHS (in $20)
%0:i32 = var
%1 = and %0, 3:i32
%2:i32 = var
%3 = and %2, 3:i32
%4:i32 = var
%5 = and %4, 3:i32
%6 = eq %3, %5
pc %6 1:i1
infer %1


; start LHS (in $20)
%0:i32 = var
%1 = eq %0, 0:i32
%2:i32 = var
%3 = and %2, 3:i32
%4 = ne %3, 0:i32
%5:i32 = var
%6 = and %5, 3:i32
%7:i32 = var
%8 = and %7, 3:i32
%9 = eq %6, %8
pc %4 1:i1
pc %9 1:i1
infer %1


; start LHS (in $20)
%0:i32 = var
%1 = add %0, 1:i32
%2 = and %0, 3:i32
%3 = ne %2, 0:i32
%4:i32 = var
%5 = and %4, 3:i32
%6:i32 = var
%7 = and %6, 3:i32
%8 = eq %5, %7
pc %3 1:i1
pc %8 1:i1
infer %1


; start LHS (in $20)
%0:i32 = var
%1 = add %0, 1:i32
%2:i32 = var
%3 = and %2, 3:i32
%4 = ne %3, 0:i32
%5:i32 = var
%6 = and %5, 3:i32
%7:i32 = var
%8 = and %7, 3:i32
%9 = eq %6, %8
pc %4 1:i1
pc %9 1:i1
infer %1


; start LHS (in $20)
%0:i32 = var
%1 = sub %0, 1:i32
%2:i32 = var
%3 = and %2, 3:i32
%4 = ne %3, 0:i32
%5:i32 = var
%6 = and %5, 3:i32
%7:i32 = var
%8 = and %7, 3:i32
%9 = eq %6, %8
pc %4 1:i1
pc %9 1:i1
infer %1


; start LHS (in $20)
%0:i32 = var
%1:i32 = var
%2 = add %0, %1 (hasExternalUses)
%3 = and %2, -4:i32
%4 = and %0, 3:i32
%5:i32 = var
%6 = and %5, 3:i32
%7 = eq %4, %6
pc %7 1:i1
infer %3


; start LHS (in $20)
%0:i32 = var
%1:i32 = var
%2 = add %0, %1 (hasExternalUses)
%3 = and %2, -4:i32 (hasExternalUses)
%4 = add %3, -64:i32
%5 = and %0, 3:i32
%6:i32 = var
%7 = and %6, 3:i32
%8 = eq %5, %7
pc %8 1:i1
infer %4


; start LHS (in $20)
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3 = add %1, %2 (hasExternalUses)
%4 = and %3, -4:i32 (hasExternalUses)
%5 = add %4, -64:i32
%6 = sle %0, %5
%7 = and %1, 3:i32
%8:i32 = var
%9 = and %8, 3:i32
%10 = eq %7, %9
pc %10 1:i1
infer %6


; start LHS (in $20)
%0:i32 = var
%1 = sub %0, -64:i32
%2:i32 = var
%3:i32 = var
%4 = add %2, %3
%5 = and %4, -4:i32
%6 = add %5, -64:i32
%7 = sle %0, %6
%8 = and %2, 3:i32
%9:i32 = var
%10 = and %9, 3:i32
%11 = eq %8, %10
pc %7 1:i1
pc %11 1:i1
infer %1


; start LHS (in $20)
%0:i32 = var
%1 = sub %0, -64:i32
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5 = add %3, %4
%6 = and %5, -4:i32
%7 = add %6, -64:i32
%8 = sle %2, %7
%9 = and %3, 3:i32
%10:i32 = var
%11 = and %10, 3:i32
%12 = eq %9, %11
pc %8 1:i1
pc %12 1:i1
infer %1


; start LHS (in $20)
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3 = add %1, %2 (hasExternalUses)
%4 = and %3, -4:i32 (hasExternalUses)
%5 = slt %0, %4
%6 = and %1, 3:i32
%7:i32 = var
%8 = and %7, 3:i32
%9 = eq %6, %8
pc %9 1:i1
infer %5


; start LHS (in $20)
%0:i32 = var
%1 = add %0, 4:i32
%2:i32 = var
%3:i32 = var
%4 = add %2, %3
%5 = and %4, -4:i32
%6 = slt %0, %5
%7 = and %2, 3:i32
%8:i32 = var
%9 = and %8, 3:i32
%10 = eq %7, %9
pc %6 1:i1
pc %10 1:i1
infer %1


; start LHS (in $20)
%0:i32 = var
%1 = add %0, 4:i32
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5 = add %3, %4
%6 = and %5, -4:i32
%7 = slt %2, %6
%8 = and %3, 3:i32
%9:i32 = var
%10 = and %9, 3:i32
%11 = eq %8, %10
pc %7 1:i1
pc %11 1:i1
infer %1


; start LHS (in $20)
%0:i32 = var
%1:i32 = var
%2 = add %0, %1 (hasExternalUses)
%3 = sub %2, 4:i32
%4 = and %0, 3:i32
%5:i32 = var
%6 = and %5, 3:i32
%7 = eq %4, %6
%8:i32 = zext %7
%9 = eq %8, 0:i32
pc %9 1:i1
infer %3


; start LHS (in $20)
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3 = add %1, %2 (hasExternalUses)
%4 = sub %3, 4:i32
%5 = slt %0, %4
%6 = and %1, 3:i32
%7:i32 = var
%8 = and %7, 3:i32
%9 = eq %6, %8
%10:i32 = zext %9
%11 = eq %10, 0:i32
pc %11 1:i1
infer %5


; start LHS (in $20)
%0:i32 = var
%1 = add %0, 4:i32
%2:i32 = var
%3:i32 = var
%4 = add %2, %3
%5 = sub %4, 4:i32
%6 = slt %0, %5
%7 = and %2, 3:i32
%8:i32 = var
%9 = and %8, 3:i32
%10 = eq %7, %9
%11:i32 = zext %10
%12 = eq %11, 0:i32
pc %6 1:i1
pc %12 1:i1
infer %1


; start LHS (in $20)
%0:i32 = var
%1 = add %0, 4:i32
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5 = add %3, %4
%6 = sub %5, 4:i32
%7 = slt %2, %6
%8 = and %3, 3:i32
%9:i32 = var
%10 = and %9, 3:i32
%11 = eq %8, %10
%12:i32 = zext %11
%13 = eq %12, 0:i32
pc %7 1:i1
pc %13 1:i1
infer %1


; start LHS (in $20)
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3 = add %1, %2 (hasExternalUses)
%4 = slt %0, %3
infer %4


; start LHS (in $20)
%0:i32 = var
%1 = add %0, 1:i32
%2:i32 = var
%3:i32 = var
%4 = add %2, %3
%5 = slt %0, %4
pc %5 1:i1
infer %1


; start LHS (in $20)
%0:i32 = var
%1 = add %0, 1:i32
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5 = add %3, %4
%6 = slt %2, %5
pc %6 1:i1
infer %1


; function: $21

; start LHS (in $21)
%0:i32 = var
%1 = add %0, 74:i32
infer %1


; start LHS (in $21)
%0:i32 = var
%1 = add %0, 255:i32
infer %1


; start LHS (in $21)
%0:i32 = var
%1 = add %0, 255:i32
%2 = or %1, %0
infer %2


; start LHS (in $21)
%0:i32 = var
%1 = and %0, 8:i32
infer %1


; start LHS (in $21)
%0:i32 = var
%1 = or %0, 32:i32
%2 = and %0, 8:i32
%3 = ne %2, 0:i32
pc %3 1:i1
infer %1


; start LHS (in $21)
%0:i32 = var
%1:i32 = var
%2 = add %0, %1
%3:i32 = var
%4 = and %3, 8:i32
%5 = eq %4, 0:i32
pc %5 1:i1
infer %2


; function: $22

; start LHS (in $22)
%0:i32 = var
%1 = add %0, 16:i32
infer %1


; start LHS (in $22)
%0:i32 = var
%1 = add %0, 20:i32
infer %1


; start LHS (in $22)
%0 = block 2
%1:i32 = var
%2:i32 = var
%3 = phi %0, %1, %2
%4:i32 = var
%5 = sub %3, %4
infer %5


; start LHS (in $22)
%0 = block 2
%1:i32 = var
%2:i32 = var
%3 = phi %0, %1, %2
%4:i32 = var
%5 = sub %3, %4
%6:i32 = var
%7 = ult %5, %6
infer %7


; start LHS (in $22)
%0:i32 = var
%1 = and %0, 3:i32
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6:i32 = var
%7 = sub %5, %6
%8:i32 = var
%9 = ult %7, %8
pc %9 1:i1
infer %1


; start LHS (in $22)
%0:i32 = var
%1 = and %0, 3:i32
%2 = add %1, 2:i32
%3 = block 2
%4:i32 = var
%5:i32 = var
%6 = phi %3, %4, %5
%7:i32 = var
%8 = sub %6, %7
%9:i32 = var
%10 = ult %8, %9
pc %10 1:i1
infer %2


; start LHS (in $22)
%0:i32 = var
%1 = slt -1:i32, %0
infer %1


; start LHS (in $22)
%0:i32 = var
%1 = eq %0, 0:i32
%2:i32 = var
%3 = slt -1:i32, %2
pc %3 1:i1
infer %1


; start LHS (in $22)
%0:i32 = var
%1 = add %0, -1:i32
%2:i32 = var
%3 = slt -1:i32, %2
pc %3 1:i1
infer %1


; start LHS (in $22)
%0:i32 = var
%1:i32 = var
%2 = add %1, -1:i32 (hasExternalUses)
%3 = add %0, %2
%4:i32 = var
%5 = slt -1:i32, %4
pc %5 1:i1
infer %3


; start LHS (in $22)
%0:i32 = var
%1 = ne %0, 10:i32
%2:i32 = var
%3 = slt -1:i32, %2
pc %3 1:i1
infer %1


; start LHS (in $22)
%0:i32 = var
%1 = and %0, 3:i32
%2:i32 = var
%3 = slt -1:i32, %2
pc %3 1:i1
infer %1


; start LHS (in $22)
%0:i32 = var
%1 = and %0, 3:i32
%2 = add %1, 2:i32
%3:i32 = var
%4 = slt -1:i32, %3
pc %4 1:i1
infer %2


; start LHS (in $22)
%0:i32 = var
%1:i32 = var
%2 = ult %0, %1
%3:i32 = var
%4 = slt -1:i32, %3
pc %4 1:i1
infer %2


; start LHS (in $22)
%0:i32 = var
%1:i32 = var
%2 = add %0, %1
%3:i32 = var
%4 = slt -1:i32, %3
pc %4 1:i1
infer %2


; start LHS (in $22)
%0:i32 = var
%1:i32 = var
%2 = sub %0, %1
%3:i32 = var
%4 = slt -1:i32, %3
pc %4 1:i1
infer %2


; start LHS (in $22)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = block 2
%4:i32 = var
%5:i32 = var
%6 = sub %4, %5 (hasExternalUses)
%7 = phi %3, %6, %4
%8 = phi %1, %2, %7
%9 = add %0, %8
%10:i32 = var
%11 = slt -1:i32, %10
blockpc %3 0 %11 1:i1
%12:i32 = zext %11
%13 = eq %12, 0:i32
blockpc %3 1 %13 1:i1
infer %9


; start LHS (in $22)
%0 = block 2
%1 = block 2
%2:i32 = var
%3 = phi %1, %2, 0:i32
%4 = phi %0, 0:i32, %3
%5:i32 = var
%6:i32 = var
%7 = sub %6, %2 (hasExternalUses)
%8 = phi %1, %7, %6
%9 = phi %0, %5, %8
%10 = add %4, %9
%11:i32 = var
%12 = slt -1:i32, %11
blockpc %1 0 %12 1:i1
%13:i32 = zext %12
%14 = eq %13, 0:i32
blockpc %1 1 %14 1:i1
infer %10


; function: $23

; start LHS (in $23)
%0:i32 = var
%1 = eq %0, 0:i32
infer %1


; start LHS (in $23)
%0:i32 = var
%1:i32 = var
%2 = ne %0, %1
infer %2


; start LHS (in $23)
%0:i32 = var
%1 = eq %0, 0:i32
%2:i32 = zext %1
%3:i32 = var
%4 = ne %0, %3
%5:i32 = zext %4
%6 = or %2, %5
infer %6


; start LHS (in $23)
%0:i32 = var
%1 = add %0, 1:i32
%2:i32 = var
%3 = eq %2, 0:i32
%4:i32 = zext %3
%5:i32 = var
%6 = ne %2, %5
%7:i32 = zext %6
%8 = or %4, %7
%9 = eq %8, 0:i32
pc %9 1:i1
infer %1


; start LHS (in $23)
%0:i32 = var
%1 = eq %0, 0:i32
%2:i32 = var
%3 = eq %2, 0:i32
%4:i32 = zext %3
%5:i32 = var
%6 = ne %2, %5
%7:i32 = zext %6
%8 = or %4, %7
%9 = eq %8, 0:i32
pc %9 1:i1
infer %1


; start LHS (in $23)
%0:i32 = var
%1 = add %0, 1:i32
%2:i32 = var
%3 = eq %2, 0:i32
%4:i32 = zext %3
%5:i32 = var
%6 = ne %2, %5
%7:i32 = zext %6
%8 = or %4, %7
%9 = eq %8, 0:i32
pc %9 1:i1
infer %1


; start LHS (in $23)
%0:i32 = var
%1:i32 = var
%2 = ne %0, %1
%3:i32 = var
%4 = eq %3, 0:i32
%5:i32 = zext %4
%6:i32 = var
%7 = ne %3, %6
%8:i32 = zext %7
%9 = or %5, %8
%10 = eq %9, 0:i32
pc %10 1:i1
infer %2


; start LHS (in $23)
%0:i32 = var
%1 = eq %0, 0:i32
%2:i32 = zext %1
%3:i32 = var
%4 = ne %0, %3
%5:i32 = zext %4
%6 = or %2, %5
%7:i32 = var
%8 = eq %7, 0:i32
%9:i32 = zext %8
%10:i32 = var
%11 = ne %7, %10
%12:i32 = zext %11
%13 = or %9, %12
%14 = eq %13, 0:i32
pc %14 1:i1
infer %6


; start LHS (in $23)
%0 = block 2
%1:i32 = var
%2:i32 = var
%3 = phi %0, %1, %2
%4 = and %3, 255:i32
%5 = eq %1, 0:i32
%6:i32 = zext %5
%7:i32 = var
%8 = ne %1, %7
%9:i32 = zext %8
%10 = or %6, %9
%11 = ne %10, 0:i32
blockpc %0 0 %11 1:i1
%12 = eq %10, 0:i32
blockpc %0 1 %12 1:i1
infer %4


; start LHS (in $23)
%0 = block 2
%1:i32 = var
%2:i32 = var
%3 = phi %0, %1, %2
%4 = and %3, 255:i32
%5:i32 = var
%6 = eq %5, 0:i32
%7:i32 = zext %6
%8 = ne %5, %1
%9:i32 = zext %8
%10 = or %7, %9
%11 = ne %10, 0:i32
blockpc %0 0 %11 1:i1
%12 = eq %10, 0:i32
blockpc %0 1 %12 1:i1
infer %4


; start LHS (in $23)
%0 = block 2
%1:i32 = var
%2:i32 = var
%3 = phi %0, %1, %2
%4 = and %3, 255:i32
%5:i32 = var
%6:i32 = var
%7 = phi %0, %5, %6
%8 = and %7, 255:i32
%9 = sub %4, %8
%10 = eq %1, 0:i32
%11:i32 = zext %10
%12 = ne %1, %5
%13:i32 = zext %12
%14 = or %11, %13
%15 = ne %14, 0:i32
blockpc %0 0 %15 1:i1
%16 = eq %14, 0:i32
blockpc %0 1 %16 1:i1
infer %9


; function: $24

; start LHS (in $24)
%0:i32 = var
%1 = add %0, 1794895138:i32
infer %1


; start LHS (in $24)
%0:i32 = var
%1 = lshr %0, 2:i32
infer %1


; start LHS (in $24)
%0:i32 = var
%1:i32 = var
%2 = lshr %1, 2:i32
%3 = ult %0, %2
infer %3


; start LHS (in $24)
%0:i32 = var
%1 = shl %0, 2:i32
%2:i32 = var
%3 = lshr %2, 2:i32
%4 = ult %0, %3
pc %4 1:i1
infer %1


; start LHS (in $24)
%0:i32 = var
%1:i32 = var
%2 = shl %1, 2:i32
%3 = sub %0, %2
%4 = lshr %0, 2:i32
%5 = ult %1, %4
pc %5 1:i1
infer %3


; start LHS (in $24)
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3 = shl %2, 2:i32
%4 = sub %1, %3 (hasExternalUses)
%5 = ult %0, %4
%6 = lshr %1, 2:i32
%7 = ult %2, %6
pc %7 1:i1
infer %5


; start LHS (in $24)
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3 = shl %2, 2:i32
%4 = sub %1, %3 (hasExternalUses)
%5 = ult %0, %4
%6 = lshr %1, 2:i32
%7 = ult %2, %6
pc %7 1:i1
infer %5


; start LHS (in $24)
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3 = shl %2, 2:i32
%4 = sub %1, %3
%5 = ult %0, %4
%6:i32 = zext %5
%7:i32 = var
%8 = ult %7, %4
%9:i32 = zext %8
%10 = and %6, %9
%11 = lshr %1, 2:i32
%12 = ult %2, %11
pc %12 1:i1
infer %10


; start LHS (in $24)
%0:i32 = var
%1:i32 = var
%2 = or %0, %1
%3:i32 = var
%4:i32 = var
%5 = shl %4, 2:i32
%6 = sub %3, %5
%7 = ult %1, %6
%8:i32 = zext %7
%9 = ult %0, %6
%10:i32 = zext %9
%11 = and %8, %10
%12 = ne %11, 0:i32
%13 = lshr %3, 2:i32
%14 = ult %4, %13
pc %12 1:i1
pc %14 1:i1
infer %2


; start LHS (in $24)
%0:i32 = var
%1:i32 = var
%2 = or %0, %1
%3 = and %2, 3:i32
%4:i32 = var
%5:i32 = var
%6 = shl %5, 2:i32
%7 = sub %4, %6
%8 = ult %1, %7
%9:i32 = zext %8
%10 = ult %0, %7
%11:i32 = zext %10
%12 = and %9, %11
%13 = ne %12, 0:i32
%14 = lshr %4, 2:i32
%15 = ult %5, %14
pc %13 1:i1
pc %15 1:i1
infer %3


; start LHS (in $24)
%0:i32 = var
%1 = lshr %0, 2:i32
%2:i32 = var
%3 = or %2, %0
%4 = and %3, 3:i32
%5 = eq %4, 0:i32
%6:i32 = var
%7:i32 = var
%8 = shl %7, 2:i32
%9 = sub %6, %8
%10 = ult %0, %9
%11:i32 = zext %10
%12 = ult %2, %9
%13:i32 = zext %12
%14 = and %11, %13
%15 = ne %14, 0:i32
%16 = lshr %6, 2:i32
%17 = ult %7, %16
pc %5 1:i1
pc %15 1:i1
pc %17 1:i1
infer %1


; start LHS (in $24)
%0:i32 = var
%1 = lshr %0, 2:i32
%2:i32 = var
%3 = or %0, %2
%4 = and %3, 3:i32
%5 = eq %4, 0:i32
%6:i32 = var
%7:i32 = var
%8 = shl %7, 2:i32
%9 = sub %6, %8
%10 = ult %2, %9
%11:i32 = zext %10
%12 = ult %0, %9
%13:i32 = zext %12
%14 = and %11, %13
%15 = ne %14, 0:i32
%16 = lshr %6, 2:i32
%17 = ult %7, %16
pc %5 1:i1
pc %15 1:i1
pc %17 1:i1
infer %1


; start LHS (in $24)
%0:i32 = var
%1 = lshr %0, 1:i32
%2:i32 = var
%3:i32 = var
%4 = or %2, %3
%5 = and %4, 3:i32
%6 = eq %5, 0:i32
%7:i32 = var
%8:i32 = var
%9 = shl %8, 2:i32
%10 = sub %7, %9
%11 = ult %3, %10
%12:i32 = zext %11
%13 = ult %2, %10
%14:i32 = zext %13
%15 = and %12, %14
%16 = ne %15, 0:i32
%17 = lshr %7, 2:i32
%18 = ult %8, %17
pc %6 1:i1
pc %16 1:i1
pc %18 1:i1
infer %1


; start LHS (in $24)
%0:i32 = var
%1:i32 = var
%2 = lshr %1, 1:i32 (hasExternalUses)
%3 = add %0, %2
%4:i32 = var
%5:i32 = var
%6 = or %4, %5
%7 = and %6, 3:i32
%8 = eq %7, 0:i32
%9:i32 = var
%10:i32 = var
%11 = shl %10, 2:i32
%12 = sub %9, %11
%13 = ult %5, %12
%14:i32 = zext %13
%15 = ult %4, %12
%16:i32 = zext %15
%17 = and %14, %16
%18 = ne %17, 0:i32
%19 = lshr %9, 2:i32
%20 = ult %10, %19
pc %8 1:i1
pc %18 1:i1
pc %20 1:i1
infer %3


; start LHS (in $24)
%0:i32 = var
%1:i32 = var
%2 = lshr %1, 1:i32 (hasExternalUses)
%3 = add %0, %2
%4 = shl %3, 1:i32
%5:i32 = var
%6:i32 = var
%7 = or %5, %6
%8 = and %7, 3:i32
%9 = eq %8, 0:i32
%10:i32 = var
%11:i32 = var
%12 = shl %11, 2:i32
%13 = sub %10, %12
%14 = ult %6, %13
%15:i32 = zext %14
%16 = ult %5, %13
%17:i32 = zext %16
%18 = and %15, %17
%19 = ne %18, 0:i32
%20 = lshr %10, 2:i32
%21 = ult %11, %20
pc %9 1:i1
pc %19 1:i1
pc %21 1:i1
infer %4


; start LHS (in $24)
%0:i32 = var
%1:i32 = var
%2 = lshr %1, 1:i32 (hasExternalUses)
%3 = add %0, %2
%4 = shl %3, 1:i32 (hasExternalUses)
%5:i32 = var
%6 = lshr %5, 2:i32
%7 = add %4, %6
%8:i32 = var
%9 = or %8, %5
%10 = and %9, 3:i32
%11 = eq %10, 0:i32
%12:i32 = var
%13:i32 = var
%14 = shl %13, 2:i32
%15 = sub %12, %14
%16 = ult %5, %15
%17:i32 = zext %16
%18 = ult %8, %15
%19:i32 = zext %18
%20 = and %17, %19
%21 = ne %20, 0:i32
%22 = lshr %12, 2:i32
%23 = ult %13, %22
pc %11 1:i1
pc %21 1:i1
pc %23 1:i1
infer %7


; start LHS (in $24)
%0:i32 = var
%1:i32 = var
%2 = lshr %1, 1:i32 (hasExternalUses)
%3 = add %0, %2
%4 = shl %3, 1:i32 (hasExternalUses)
%5:i32 = var
%6 = lshr %5, 2:i32
%7 = add %4, %6 (hasExternalUses)
%8 = shl %7, 2:i32
%9:i32 = var
%10 = or %9, %5
%11 = and %10, 3:i32
%12 = eq %11, 0:i32
%13:i32 = var
%14:i32 = var
%15 = shl %14, 2:i32
%16 = sub %13, %15
%17 = ult %5, %16
%18:i32 = zext %17
%19 = ult %9, %16
%20:i32 = zext %19
%21 = and %18, %20
%22 = ne %21, 0:i32
%23 = lshr %13, 2:i32
%24 = ult %14, %23
pc %12 1:i1
pc %22 1:i1
pc %24 1:i1
infer %8


; start LHS (in $24)
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3 = lshr %2, 1:i32 (hasExternalUses)
%4 = add %1, %3
%5 = shl %4, 1:i32 (hasExternalUses)
%6:i32 = var
%7 = lshr %6, 2:i32
%8 = add %5, %7 (hasExternalUses)
%9 = shl %8, 2:i32
%10 = add %0, %9
%11:i32 = var
%12 = or %11, %6
%13 = and %12, 3:i32
%14 = eq %13, 0:i32
%15:i32 = var
%16:i32 = var
%17 = shl %16, 2:i32
%18 = sub %15, %17
%19 = ult %6, %18
%20:i32 = zext %19
%21 = ult %11, %18
%22:i32 = zext %21
%23 = and %20, %22
%24 = ne %23, 0:i32
%25 = lshr %15, 2:i32
%26 = ult %16, %25
pc %14 1:i1
pc %24 1:i1
pc %26 1:i1
infer %10


; start LHS (in $24)
%0:i32 = var
%1:i32 = var
%2 = lshr %1, 1:i32 (hasExternalUses)
%3 = add %0, %2
%4 = shl %3, 1:i32 (hasExternalUses)
%5:i32 = var
%6 = lshr %5, 2:i32
%7 = add %4, %6 (hasExternalUses)
%8 = add %7, 1:i32
%9:i32 = var
%10 = or %9, %5
%11 = and %10, 3:i32
%12 = eq %11, 0:i32
%13:i32 = var
%14:i32 = var
%15 = shl %14, 2:i32
%16 = sub %13, %15
%17 = ult %5, %16
%18:i32 = zext %17
%19 = ult %9, %16
%20:i32 = zext %19
%21 = and %18, %20
%22 = ne %21, 0:i32
%23 = lshr %13, 2:i32
%24 = ult %14, %23
pc %12 1:i1
pc %22 1:i1
pc %24 1:i1
infer %8


; start LHS (in $24)
%0:i32 = var
%1:i32 = var
%2 = lshr %1, 1:i32 (hasExternalUses)
%3 = add %0, %2
%4 = shl %3, 1:i32 (hasExternalUses)
%5:i32 = var
%6 = lshr %5, 2:i32
%7 = add %4, %6 (hasExternalUses)
%8 = add %7, 1:i32
%9 = shl %8, 2:i32
%10:i32 = var
%11 = or %10, %5
%12 = and %11, 3:i32
%13 = eq %12, 0:i32
%14:i32 = var
%15:i32 = var
%16 = shl %15, 2:i32
%17 = sub %14, %16
%18 = ult %5, %17
%19:i32 = zext %18
%20 = ult %10, %17
%21:i32 = zext %20
%22 = and %19, %21
%23 = ne %22, 0:i32
%24 = lshr %14, 2:i32
%25 = ult %15, %24
pc %13 1:i1
pc %23 1:i1
pc %25 1:i1
infer %9


; start LHS (in $24)
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3 = lshr %2, 1:i32 (hasExternalUses)
%4 = add %1, %3
%5 = shl %4, 1:i32 (hasExternalUses)
%6:i32 = var
%7 = lshr %6, 2:i32
%8 = add %5, %7 (hasExternalUses)
%9 = add %8, 1:i32
%10 = shl %9, 2:i32
%11 = add %0, %10
%12:i32 = var
%13 = or %12, %6
%14 = and %13, 3:i32
%15 = eq %14, 0:i32
%16:i32 = var
%17:i32 = var
%18 = shl %17, 2:i32
%19 = sub %16, %18
%20 = ult %6, %19
%21:i32 = zext %20
%22 = ult %12, %19
%23:i32 = zext %22
%24 = and %21, %23
%25 = ne %24, 0:i32
%26 = lshr %16, 2:i32
%27 = ult %17, %26
pc %15 1:i1
pc %25 1:i1
pc %27 1:i1
infer %11


; start LHS (in $24)
%0:i32 = var
%1:i32 = var
%2 = ult %0, %1
%3:i32 = var
%4:i32 = var
%5 = or %3, %4
%6 = and %5, 3:i32
%7 = eq %6, 0:i32
%8:i32 = var
%9 = shl %8, 2:i32
%10 = sub %1, %9
%11 = ult %4, %10
%12:i32 = zext %11
%13 = ult %3, %10
%14:i32 = zext %13
%15 = and %12, %14
%16 = ne %15, 0:i32
%17 = lshr %1, 2:i32
%18 = ult %8, %17
pc %7 1:i1
pc %16 1:i1
pc %18 1:i1
infer %2


; start LHS (in $24)
%0:i32 = var
%1:i32 = var
%2 = sub %0, %1
%3:i32 = var
%4:i32 = var
%5 = or %3, %4
%6 = and %5, 3:i32
%7 = eq %6, 0:i32
%8:i32 = var
%9 = shl %8, 2:i32
%10 = sub %0, %9
%11 = ult %4, %10
%12:i32 = zext %11
%13 = ult %3, %10
%14:i32 = zext %13
%15 = and %12, %14
%16 = ne %15, 0:i32
%17 = lshr %0, 2:i32
%18 = ult %8, %17
pc %7 1:i1
pc %16 1:i1
pc %18 1:i1
infer %2


; start LHS (in $24)
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3 = sub %1, %2
%4 = ult %0, %3
%5:i32 = var
%6:i32 = var
%7 = or %5, %6
%8 = and %7, 3:i32
%9 = eq %8, 0:i32
%10:i32 = var
%11 = shl %10, 2:i32
%12 = sub %1, %11
%13 = ult %6, %12
%14:i32 = zext %13
%15 = ult %5, %12
%16:i32 = zext %15
%17 = and %14, %16
%18 = ne %17, 0:i32
%19 = lshr %1, 2:i32
%20 = ult %10, %19
pc %9 1:i1
pc %18 1:i1
pc %20 1:i1
infer %4


; start LHS (in $24)
%0:i32 = var
%1:i32 = var
%2 = ult %0, %1
%3:i32 = zext %2
%4:i32 = var
%5 = sub %1, %0
%6 = ult %4, %5
%7:i32 = zext %6
%8 = and %3, %7
%9:i32 = var
%10:i32 = var
%11 = or %9, %10
%12 = and %11, 3:i32
%13 = eq %12, 0:i32
%14:i32 = var
%15 = shl %14, 2:i32
%16 = sub %1, %15
%17 = ult %10, %16
%18:i32 = zext %17
%19 = ult %9, %16
%20:i32 = zext %19
%21 = and %18, %20
%22 = ne %21, 0:i32
%23 = lshr %1, 2:i32
%24 = ult %14, %23
pc %13 1:i1
pc %22 1:i1
pc %24 1:i1
infer %8


; start LHS (in $24)
%0:i32 = var
%1:i32 = var
%2 = ult %0, %1
%3:i32 = zext %2
%4:i32 = var
%5 = sub %1, %0
%6 = ult %4, %5
%7:i32 = zext %6
%8 = and %3, %7
%9 = eq %8, 0:i32
%10:i32 = var
%11:i32 = var
%12 = or %10, %11
%13 = and %12, 3:i32
%14 = eq %13, 0:i32
%15:i32 = var
%16 = shl %15, 2:i32
%17 = sub %1, %16
%18 = ult %11, %17
%19:i32 = zext %18
%20 = ult %10, %17
%21:i32 = zext %20
%22 = and %19, %21
%23 = ne %22, 0:i32
%24 = lshr %1, 2:i32
%25 = ult %15, %24
pc %14 1:i1
pc %23 1:i1
pc %25 1:i1
infer %9


; start LHS (in $24)
%0:i32 = var
%1:i32 = var
%2 = add %0, %1
%3:i32 = var
%4:i32 = var
%5 = or %3, %4
%6 = and %5, 3:i32
%7 = eq %6, 0:i32
%8:i32 = var
%9:i32 = var
%10 = shl %9, 2:i32
%11 = sub %8, %10
%12 = ult %4, %11
%13:i32 = zext %12
%14 = ult %3, %11
%15:i32 = zext %14
%16 = and %13, %15
%17 = ne %16, 0:i32
%18 = lshr %8, 2:i32
%19 = ult %9, %18
pc %7 1:i1
pc %17 1:i1
pc %19 1:i1
infer %2


; start LHS (in $24)
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3 = add %1, %2
%4 = add %0, %3
%5:i32 = var
%6:i32 = var
%7 = or %5, %6
%8 = and %7, 3:i32
%9 = eq %8, 0:i32
%10:i32 = var
%11:i32 = var
%12 = shl %11, 2:i32
%13 = sub %10, %12
%14 = ult %6, %13
%15:i32 = zext %14
%16 = ult %5, %13
%17:i32 = zext %16
%18 = and %15, %17
%19 = ne %18, 0:i32
%20 = lshr %10, 2:i32
%21 = ult %11, %20
pc %9 1:i1
pc %19 1:i1
pc %21 1:i1
infer %4


; start LHS (in $24)
%0:i32 = var
%1:i32 = var
%2 = add %0, %1
%3:i32 = var
%4:i32 = var
%5 = or %3, %4
%6 = and %5, 3:i32
%7 = eq %6, 0:i32
%8:i32 = var
%9:i32 = var
%10 = shl %9, 2:i32
%11 = sub %8, %10
%12 = ult %4, %11
%13:i32 = zext %12
%14 = ult %3, %11
%15:i32 = zext %14
%16 = and %13, %15
%17 = ne %16, 0:i32
%18 = lshr %8, 2:i32
%19 = ult %9, %18
pc %7 1:i1
pc %17 1:i1
pc %19 1:i1
infer %2


; start LHS (in $24)
%0:i32 = var
%1 = eq %0, 0:i32
%2:i32 = var
%3:i32 = var
%4 = or %2, %3
%5 = and %4, 3:i32
%6 = eq %5, 0:i32
%7:i32 = var
%8:i32 = var
%9 = shl %8, 2:i32
%10 = sub %7, %9
%11 = ult %3, %10
%12:i32 = zext %11
%13 = ult %2, %10
%14:i32 = zext %13
%15 = and %12, %14
%16 = ne %15, 0:i32
%17 = lshr %7, 2:i32
%18 = ult %8, %17
pc %6 1:i1
pc %16 1:i1
pc %18 1:i1
infer %1


; start LHS (in $24)
%0:i32 = var
%1 = eq %0, 1:i32
%2:i32 = var
%3:i32 = var
%4 = or %2, %3
%5 = and %4, 3:i32
%6 = eq %5, 0:i32
%7:i32 = var
%8:i32 = var
%9 = shl %8, 2:i32
%10 = sub %7, %9
%11 = ult %3, %10
%12:i32 = zext %11
%13 = ult %2, %10
%14:i32 = zext %13
%15 = and %12, %14
%16 = ne %15, 0:i32
%17 = lshr %7, 2:i32
%18 = ult %8, %17
pc %6 1:i1
pc %16 1:i1
pc %18 1:i1
infer %1


; start LHS (in $24)
%0:i32 = var
%1 = lshr %0, 1:i32 (hasExternalUses)
%2 = sub %0, %1
%3:i32 = var
%4:i32 = var
%5 = or %3, %4
%6 = and %5, 3:i32
%7 = eq %6, 0:i32
%8:i32 = var
%9:i32 = var
%10 = shl %9, 2:i32
%11 = sub %8, %10
%12 = ult %4, %11
%13:i32 = zext %12
%14 = ult %3, %11
%15:i32 = zext %14
%16 = and %13, %15
%17 = ne %16, 0:i32
%18 = lshr %8, 2:i32
%19 = ult %9, %18
pc %7 1:i1
pc %17 1:i1
pc %19 1:i1
infer %2


; start LHS (in $24)
%0:i32 = var
%1 = slt %0, 0:i32
%2:i32 = var
%3:i32 = var
%4 = or %2, %3
%5 = and %4, 3:i32
%6 = eq %5, 0:i32
%7:i32 = var
%8:i32 = var
%9 = shl %8, 2:i32
%10 = sub %7, %9
%11 = ult %3, %10
%12:i32 = zext %11
%13 = ult %2, %10
%14:i32 = zext %13
%15 = and %12, %14
%16 = ne %15, 0:i32
%17 = lshr %7, 2:i32
%18 = ult %8, %17
pc %6 1:i1
pc %16 1:i1
pc %18 1:i1
infer %1


; start LHS (in $24)
%0:i32 = var
%1 = slt %0, 0:i32 (hasExternalUses)
%2:i32 = zext %1
%3 = eq %2, 0:i32
%4:i32 = var
%5:i32 = var
%6 = or %4, %5
%7 = and %6, 3:i32
%8 = eq %7, 0:i32
%9:i32 = var
%10:i32 = var
%11 = shl %10, 2:i32
%12 = sub %9, %11
%13 = ult %5, %12
%14:i32 = zext %13
%15 = ult %4, %12
%16:i32 = zext %15
%17 = and %14, %16
%18 = ne %17, 0:i32
%19 = lshr %9, 2:i32
%20 = ult %10, %19
pc %8 1:i1
pc %18 1:i1
pc %20 1:i1
infer %3


; start LHS (in $24)
%0:i32 = var
%1 = eq %0, 1:i32
%2:i32 = zext %1
%3 = eq %2, 0:i32
%4:i32 = var
%5:i32 = var
%6 = or %4, %5
%7 = and %6, 3:i32
%8 = eq %7, 0:i32
%9:i32 = var
%10:i32 = var
%11 = shl %10, 2:i32
%12 = sub %9, %11
%13 = ult %5, %12
%14:i32 = zext %13
%15 = ult %4, %12
%16:i32 = zext %15
%17 = and %14, %16
%18 = ne %17, 0:i32
%19 = lshr %9, 2:i32
%20 = ult %10, %19
pc %8 1:i1
pc %18 1:i1
pc %20 1:i1
infer %3


; start LHS (in $24)
%0:i32 = var
%1:i32 = var
%2 = lshr %1, 1:i32 (hasExternalUses)
%3 = add %0, %2
%4 = shl %3, 1:i32 (hasExternalUses)
%5:i32 = var
%6 = lshr %5, 2:i32
%7 = add %4, %6
%8:i32 = var
%9 = or %5, %8
%10 = and %9, 3:i32
%11 = eq %10, 0:i32
%12:i32 = var
%13:i32 = var
%14 = shl %13, 2:i32
%15 = sub %12, %14
%16 = ult %8, %15
%17:i32 = zext %16
%18 = ult %5, %15
%19:i32 = zext %18
%20 = and %17, %19
%21 = ne %20, 0:i32
%22 = lshr %12, 2:i32
%23 = ult %13, %22
pc %11 1:i1
pc %21 1:i1
pc %23 1:i1
infer %7


; start LHS (in $24)
%0:i32 = var
%1:i32 = var
%2 = lshr %1, 1:i32 (hasExternalUses)
%3 = add %0, %2
%4 = shl %3, 1:i32 (hasExternalUses)
%5:i32 = var
%6 = lshr %5, 2:i32
%7 = add %4, %6 (hasExternalUses)
%8 = shl %7, 2:i32
%9:i32 = var
%10 = or %5, %9
%11 = and %10, 3:i32
%12 = eq %11, 0:i32
%13:i32 = var
%14:i32 = var
%15 = shl %14, 2:i32
%16 = sub %13, %15
%17 = ult %9, %16
%18:i32 = zext %17
%19 = ult %5, %16
%20:i32 = zext %19
%21 = and %18, %20
%22 = ne %21, 0:i32
%23 = lshr %13, 2:i32
%24 = ult %14, %23
pc %12 1:i1
pc %22 1:i1
pc %24 1:i1
infer %8


; start LHS (in $24)
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3 = lshr %2, 1:i32 (hasExternalUses)
%4 = add %1, %3
%5 = shl %4, 1:i32 (hasExternalUses)
%6:i32 = var
%7 = lshr %6, 2:i32
%8 = add %5, %7 (hasExternalUses)
%9 = shl %8, 2:i32
%10 = add %0, %9
%11:i32 = var
%12 = or %6, %11
%13 = and %12, 3:i32
%14 = eq %13, 0:i32
%15:i32 = var
%16:i32 = var
%17 = shl %16, 2:i32
%18 = sub %15, %17
%19 = ult %11, %18
%20:i32 = zext %19
%21 = ult %6, %18
%22:i32 = zext %21
%23 = and %20, %22
%24 = ne %23, 0:i32
%25 = lshr %15, 2:i32
%26 = ult %16, %25
pc %14 1:i1
pc %24 1:i1
pc %26 1:i1
infer %10


; start LHS (in $24)
%0:i32 = var
%1:i32 = var
%2 = lshr %1, 1:i32 (hasExternalUses)
%3 = add %0, %2
%4 = shl %3, 1:i32 (hasExternalUses)
%5:i32 = var
%6 = lshr %5, 2:i32
%7 = add %4, %6 (hasExternalUses)
%8 = add %7, 1:i32
%9:i32 = var
%10 = or %5, %9
%11 = and %10, 3:i32
%12 = eq %11, 0:i32
%13:i32 = var
%14:i32 = var
%15 = shl %14, 2:i32
%16 = sub %13, %15
%17 = ult %9, %16
%18:i32 = zext %17
%19 = ult %5, %16
%20:i32 = zext %19
%21 = and %18, %20
%22 = ne %21, 0:i32
%23 = lshr %13, 2:i32
%24 = ult %14, %23
pc %12 1:i1
pc %22 1:i1
pc %24 1:i1
infer %8


; start LHS (in $24)
%0:i32 = var
%1:i32 = var
%2 = lshr %1, 1:i32 (hasExternalUses)
%3 = add %0, %2
%4 = shl %3, 1:i32 (hasExternalUses)
%5:i32 = var
%6 = lshr %5, 2:i32
%7 = add %4, %6 (hasExternalUses)
%8 = add %7, 1:i32
%9 = shl %8, 2:i32
%10:i32 = var
%11 = or %5, %10
%12 = and %11, 3:i32
%13 = eq %12, 0:i32
%14:i32 = var
%15:i32 = var
%16 = shl %15, 2:i32
%17 = sub %14, %16
%18 = ult %10, %17
%19:i32 = zext %18
%20 = ult %5, %17
%21:i32 = zext %20
%22 = and %19, %21
%23 = ne %22, 0:i32
%24 = lshr %14, 2:i32
%25 = ult %15, %24
pc %13 1:i1
pc %23 1:i1
pc %25 1:i1
infer %9


; start LHS (in $24)
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3 = lshr %2, 1:i32 (hasExternalUses)
%4 = add %1, %3
%5 = shl %4, 1:i32 (hasExternalUses)
%6:i32 = var
%7 = lshr %6, 2:i32
%8 = add %5, %7 (hasExternalUses)
%9 = add %8, 1:i32
%10 = shl %9, 2:i32
%11 = add %0, %10
%12:i32 = var
%13 = or %6, %12
%14 = and %13, 3:i32
%15 = eq %14, 0:i32
%16:i32 = var
%17:i32 = var
%18 = shl %17, 2:i32
%19 = sub %16, %18
%20 = ult %12, %19
%21:i32 = zext %20
%22 = ult %6, %19
%23:i32 = zext %22
%24 = and %21, %23
%25 = ne %24, 0:i32
%26 = lshr %16, 2:i32
%27 = ult %17, %26
pc %15 1:i1
pc %25 1:i1
pc %27 1:i1
infer %11


; start LHS (in $24)
%0:i32 = var
%1:i32 = var
%2 = ult %0, %1
%3:i32 = var
%4:i32 = var
%5 = or %3, %4
%6 = and %5, 3:i32
%7 = eq %6, 0:i32
%8:i32 = var
%9 = shl %8, 2:i32
%10 = sub %1, %9
%11 = ult %4, %10
%12:i32 = zext %11
%13 = ult %3, %10
%14:i32 = zext %13
%15 = and %12, %14
%16 = ne %15, 0:i32
%17 = lshr %1, 2:i32
%18 = ult %8, %17
pc %7 1:i1
pc %16 1:i1
pc %18 1:i1
infer %2


; start LHS (in $24)
%0:i32 = var
%1:i32 = var
%2 = sub %0, %1
%3:i32 = var
%4:i32 = var
%5 = or %3, %4
%6 = and %5, 3:i32
%7 = eq %6, 0:i32
%8:i32 = var
%9 = shl %8, 2:i32
%10 = sub %0, %9
%11 = ult %4, %10
%12:i32 = zext %11
%13 = ult %3, %10
%14:i32 = zext %13
%15 = and %12, %14
%16 = ne %15, 0:i32
%17 = lshr %0, 2:i32
%18 = ult %8, %17
pc %7 1:i1
pc %16 1:i1
pc %18 1:i1
infer %2


; start LHS (in $24)
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3 = sub %1, %2
%4 = ult %0, %3
%5:i32 = var
%6:i32 = var
%7 = or %5, %6
%8 = and %7, 3:i32
%9 = eq %8, 0:i32
%10:i32 = var
%11 = shl %10, 2:i32
%12 = sub %1, %11
%13 = ult %6, %12
%14:i32 = zext %13
%15 = ult %5, %12
%16:i32 = zext %15
%17 = and %14, %16
%18 = ne %17, 0:i32
%19 = lshr %1, 2:i32
%20 = ult %10, %19
pc %9 1:i1
pc %18 1:i1
pc %20 1:i1
infer %4


; start LHS (in $24)
%0:i32 = var
%1:i32 = var
%2 = ult %0, %1
%3:i32 = zext %2
%4:i32 = var
%5 = sub %1, %0
%6 = ult %4, %5
%7:i32 = zext %6
%8 = and %3, %7
%9:i32 = var
%10:i32 = var
%11 = or %9, %10
%12 = and %11, 3:i32
%13 = eq %12, 0:i32
%14:i32 = var
%15 = shl %14, 2:i32
%16 = sub %1, %15
%17 = ult %10, %16
%18:i32 = zext %17
%19 = ult %9, %16
%20:i32 = zext %19
%21 = and %18, %20
%22 = ne %21, 0:i32
%23 = lshr %1, 2:i32
%24 = ult %14, %23
pc %13 1:i1
pc %22 1:i1
pc %24 1:i1
infer %8


; start LHS (in $24)
%0:i32 = var
%1:i32 = var
%2 = add %0, %1
%3:i32 = var
%4 = ult %1, %3
%5:i32 = zext %4
%6:i32 = var
%7 = sub %3, %1
%8 = ult %6, %7
%9:i32 = zext %8
%10 = and %5, %9
%11 = ne %10, 0:i32
%12:i32 = var
%13:i32 = var
%14 = or %12, %13
%15 = and %14, 3:i32
%16 = eq %15, 0:i32
%17:i32 = var
%18 = shl %17, 2:i32
%19 = sub %3, %18
%20 = ult %13, %19
%21:i32 = zext %20
%22 = ult %12, %19
%23:i32 = zext %22
%24 = and %21, %23
%25 = ne %24, 0:i32
%26 = lshr %3, 2:i32
%27 = ult %17, %26
pc %11 1:i1
pc %16 1:i1
pc %25 1:i1
pc %27 1:i1
infer %2


; start LHS (in $24)
%0:i32 = var
%1:i32 = var
%2 = add %0, %1
%3:i32 = var
%4 = ult %0, %3
%5:i32 = zext %4
%6 = sub %3, %0
%7 = ult %1, %6
%8:i32 = zext %7
%9 = and %5, %8
%10 = ne %9, 0:i32
%11:i32 = var
%12:i32 = var
%13 = or %11, %12
%14 = and %13, 3:i32
%15 = eq %14, 0:i32
%16:i32 = var
%17 = shl %16, 2:i32
%18 = sub %3, %17
%19 = ult %12, %18
%20:i32 = zext %19
%21 = ult %11, %18
%22:i32 = zext %21
%23 = and %20, %22
%24 = ne %23, 0:i32
%25 = lshr %3, 2:i32
%26 = ult %16, %25
pc %10 1:i1
pc %15 1:i1
pc %24 1:i1
pc %26 1:i1
infer %2


; start LHS (in $24)
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3 = add %1, %2
%4 = add %0, %3
%5:i32 = var
%6 = ult %1, %5
%7:i32 = zext %6
%8 = sub %5, %1
%9 = ult %2, %8
%10:i32 = zext %9
%11 = and %7, %10
%12 = ne %11, 0:i32
%13:i32 = var
%14:i32 = var
%15 = or %13, %14
%16 = and %15, 3:i32
%17 = eq %16, 0:i32
%18:i32 = var
%19 = shl %18, 2:i32
%20 = sub %5, %19
%21 = ult %14, %20
%22:i32 = zext %21
%23 = ult %13, %20
%24:i32 = zext %23
%25 = and %22, %24
%26 = ne %25, 0:i32
%27 = lshr %5, 2:i32
%28 = ult %18, %27
pc %12 1:i1
pc %17 1:i1
pc %26 1:i1
pc %28 1:i1
infer %4


; function: $25

; start LHS (in $25)
%0:i32 = var
%1 = add %0, 2063:i32
infer %1


; start LHS (in $25)
%0:i32 = var
%1:i32 = var
%2 = eq %0, %1
infer %2


; start LHS (in $25)
%0:i32 = var
%1 = add %0, 1:i32
infer %1


; start LHS (in $25)
%0:i32 = var
%1 = add %0, 1:i32 (hasExternalUses)
%2 = ne %1, 87:i32
infer %2


; start LHS (in $25)
%0:i32 = var
%1 = add %0, 1:i32
infer %1


; start LHS (in $25)
%0:i32 = var
%1 = add %0, -1:i32
infer %1


; function: $26

; start LHS (in $26)
%0:i32 = var
%1 = ult %0, 128:i32
%2:i32 = var
%3 = ne %2, 0:i32
pc %3 1:i1
infer %1


; start LHS (in $26)
%0:i32 = var
%1 = eq %0, 0:i32
%2:i32 = var
%3 = ne %2, 0:i32
pc %3 1:i1
infer %1


; start LHS (in $26)
%0:i32 = var
%1 = and %0, -128:i32
%2:i32 = var
%3 = eq %2, 0:i32
%4:i32 = var
%5 = ne %4, 0:i32
pc %3 1:i1
pc %5 1:i1
infer %1


; start LHS (in $26)
%0:i32 = var
%1 = and %0, -128:i32
%2 = eq %1, 57216:i32
%3:i32 = var
%4 = eq %3, 0:i32
%5:i32 = var
%6 = ne %5, 0:i32
pc %4 1:i1
pc %6 1:i1
infer %2


; start LHS (in $26)
%0:i32 = var
%1 = ult %0, 2048:i32
%2:i32 = var
%3 = ne %2, 0:i32
pc %3 1:i1
infer %1


; start LHS (in $26)
%0:i32 = var
%1 = lshr %0, 6:i32
%2 = ult %0, 2048:i32
%3:i32 = var
%4 = ne %3, 0:i32
pc %2 1:i1
pc %4 1:i1
infer %1


; start LHS (in $26)
%0:i32 = var
%1 = lshr %0, 6:i32
%2 = or %1, 192:i32
%3 = ult %0, 2048:i32
%4:i32 = var
%5 = ne %4, 0:i32
pc %3 1:i1
pc %5 1:i1
infer %2


; start LHS (in $26)
%0:i32 = var
%1 = and %0, 63:i32
%2 = ult %0, 2048:i32
%3:i32 = var
%4 = ne %3, 0:i32
pc %2 1:i1
pc %4 1:i1
infer %1


; start LHS (in $26)
%0:i32 = var
%1 = and %0, 63:i32
%2 = or %1, 128:i32
%3 = ult %0, 2048:i32
%4:i32 = var
%5 = ne %4, 0:i32
pc %3 1:i1
pc %5 1:i1
infer %2


; start LHS (in $26)
%0:i32 = var
%1 = ult %0, 55296:i32
%2:i32 = var
%3 = ne %2, 0:i32
pc %3 1:i1
infer %1


; start LHS (in $26)
%0:i32 = var
%1 = and %0, -8192:i32
%2:i32 = var
%3 = ne %2, 0:i32
pc %3 1:i1
infer %1


; start LHS (in $26)
%0:i32 = var
%1 = and %0, -8192:i32
%2 = eq %1, 57344:i32
%3:i32 = var
%4 = ne %3, 0:i32
pc %4 1:i1
infer %2


; start LHS (in $26)
%0:i32 = var
%1 = ult %0, 55296:i32
%2:i32 = zext %1
%3 = and %0, -8192:i32
%4 = eq %3, 57344:i32
%5:i32 = zext %4
%6 = or %2, %5
%7:i32 = var
%8 = ne %7, 0:i32
pc %8 1:i1
infer %6


; start LHS (in $26)
%0:i32 = var
%1 = lshr %0, 12:i32
%2 = ult %0, 55296:i32
%3:i32 = zext %2
%4 = and %0, -8192:i32
%5 = eq %4, 57344:i32
%6:i32 = zext %5
%7 = or %3, %6
%8 = ne %7, 0:i32
%9:i32 = var
%10 = ne %9, 0:i32
pc %8 1:i1
pc %10 1:i1
infer %1


; start LHS (in $26)
%0:i32 = var
%1 = lshr %0, 12:i32
%2 = or %1, 224:i32
%3 = ult %0, 55296:i32
%4:i32 = zext %3
%5 = and %0, -8192:i32
%6 = eq %5, 57344:i32
%7:i32 = zext %6
%8 = or %4, %7
%9 = ne %8, 0:i32
%10:i32 = var
%11 = ne %10, 0:i32
pc %9 1:i1
pc %11 1:i1
infer %2


; start LHS (in $26)
%0:i32 = var
%1 = lshr %0, 6:i32
%2 = ult %0, 55296:i32
%3:i32 = zext %2
%4 = and %0, -8192:i32
%5 = eq %4, 57344:i32
%6:i32 = zext %5
%7 = or %3, %6
%8 = ne %7, 0:i32
%9:i32 = var
%10 = ne %9, 0:i32
pc %8 1:i1
pc %10 1:i1
infer %1


; start LHS (in $26)
%0:i32 = var
%1 = lshr %0, 6:i32
%2 = and %1, 63:i32
%3 = ult %0, 55296:i32
%4:i32 = zext %3
%5 = and %0, -8192:i32
%6 = eq %5, 57344:i32
%7:i32 = zext %6
%8 = or %4, %7
%9 = ne %8, 0:i32
%10:i32 = var
%11 = ne %10, 0:i32
pc %9 1:i1
pc %11 1:i1
infer %2


; start LHS (in $26)
%0:i32 = var
%1 = lshr %0, 6:i32
%2 = and %1, 63:i32
%3 = or %2, 128:i32
%4 = ult %0, 55296:i32
%5:i32 = zext %4
%6 = and %0, -8192:i32
%7 = eq %6, 57344:i32
%8:i32 = zext %7
%9 = or %5, %8
%10 = ne %9, 0:i32
%11:i32 = var
%12 = ne %11, 0:i32
pc %10 1:i1
pc %12 1:i1
infer %3


; start LHS (in $26)
%0:i32 = var
%1 = and %0, 63:i32
%2 = ult %0, 55296:i32
%3:i32 = zext %2
%4 = and %0, -8192:i32
%5 = eq %4, 57344:i32
%6:i32 = zext %5
%7 = or %3, %6
%8 = ne %7, 0:i32
%9:i32 = var
%10 = ne %9, 0:i32
pc %8 1:i1
pc %10 1:i1
infer %1


; start LHS (in $26)
%0:i32 = var
%1 = and %0, 63:i32
%2 = or %1, 128:i32
%3 = ult %0, 55296:i32
%4:i32 = zext %3
%5 = and %0, -8192:i32
%6 = eq %5, 57344:i32
%7:i32 = zext %6
%8 = or %4, %7
%9 = ne %8, 0:i32
%10:i32 = var
%11 = ne %10, 0:i32
pc %9 1:i1
pc %11 1:i1
infer %2


; start LHS (in $26)
%0:i32 = var
%1 = add %0, -65536:i32
%2:i32 = var
%3 = ne %2, 0:i32
pc %3 1:i1
infer %1


; start LHS (in $26)
%0:i32 = var
%1 = add %0, -65536:i32
%2 = ult %1, 1048576:i32
%3:i32 = var
%4 = ne %3, 0:i32
pc %4 1:i1
infer %2


; start LHS (in $26)
%0:i32 = var
%1 = lshr %0, 18:i32
%2 = add %0, -65536:i32
%3 = ult %2, 1048576:i32
%4:i32 = var
%5 = ne %4, 0:i32
pc %3 1:i1
pc %5 1:i1
infer %1


; start LHS (in $26)
%0:i32 = var
%1 = lshr %0, 18:i32
%2 = or %1, 240:i32
%3 = add %0, -65536:i32
%4 = ult %3, 1048576:i32
%5:i32 = var
%6 = ne %5, 0:i32
pc %4 1:i1
pc %6 1:i1
infer %2


; start LHS (in $26)
%0:i32 = var
%1 = lshr %0, 12:i32
%2 = add %0, -65536:i32
%3 = ult %2, 1048576:i32
%4:i32 = var
%5 = ne %4, 0:i32
pc %3 1:i1
pc %5 1:i1
infer %1


; start LHS (in $26)
%0:i32 = var
%1 = lshr %0, 12:i32
%2 = and %1, 63:i32
%3 = add %0, -65536:i32
%4 = ult %3, 1048576:i32
%5:i32 = var
%6 = ne %5, 0:i32
pc %4 1:i1
pc %6 1:i1
infer %2


; start LHS (in $26)
%0:i32 = var
%1 = lshr %0, 12:i32
%2 = and %1, 63:i32
%3 = or %2, 128:i32
%4 = add %0, -65536:i32
%5 = ult %4, 1048576:i32
%6:i32 = var
%7 = ne %6, 0:i32
pc %5 1:i1
pc %7 1:i1
infer %3


; start LHS (in $26)
%0:i32 = var
%1 = lshr %0, 6:i32
%2 = add %0, -65536:i32
%3 = ult %2, 1048576:i32
%4:i32 = var
%5 = ne %4, 0:i32
pc %3 1:i1
pc %5 1:i1
infer %1


; start LHS (in $26)
%0:i32 = var
%1 = lshr %0, 6:i32
%2 = and %1, 63:i32
%3 = add %0, -65536:i32
%4 = ult %3, 1048576:i32
%5:i32 = var
%6 = ne %5, 0:i32
pc %4 1:i1
pc %6 1:i1
infer %2


; start LHS (in $26)
%0:i32 = var
%1 = lshr %0, 6:i32
%2 = and %1, 63:i32
%3 = or %2, 128:i32
%4 = add %0, -65536:i32
%5 = ult %4, 1048576:i32
%6:i32 = var
%7 = ne %6, 0:i32
pc %5 1:i1
pc %7 1:i1
infer %3


; start LHS (in $26)
%0:i32 = var
%1 = and %0, 63:i32
%2 = add %0, -65536:i32
%3 = ult %2, 1048576:i32
%4:i32 = var
%5 = ne %4, 0:i32
pc %3 1:i1
pc %5 1:i1
infer %1


; start LHS (in $26)
%0:i32 = var
%1 = and %0, 63:i32
%2 = or %1, 128:i32
%3 = add %0, -65536:i32
%4 = ult %3, 1048576:i32
%5:i32 = var
%6 = ne %5, 0:i32
pc %4 1:i1
pc %6 1:i1
infer %2


; function: $27

; start LHS (in $27)
%0:i32 = var
%1 = add %0, 560:i32
infer %1


; start LHS (in $27)
%0:i64 = var
%1 = slt %0, 0:i64
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = and %0, 2048:i32
%2:i64 = var
%3 = slt %2, 0:i64
%4:i32 = zext %3
%5 = eq %4, 0:i32
pc %5 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = and %0, 2048:i32
%2 = eq %1, 0:i32
%3:i64 = var
%4 = slt %3, 0:i64
%5:i32 = zext %4
%6 = eq %5, 0:i32
pc %6 1:i1
infer %2


; start LHS (in $27)
%0:i32 = var
%1 = and %0, 1:i32
%2:i64 = var
%3 = slt %2, 0:i64
%4:i32 = zext %3
%5 = eq %4, 0:i32
pc %5 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = and %0, 2049:i32
%2:i64 = var
%3 = slt %2, 0:i64
%4:i32 = zext %3
%5 = eq %4, 0:i32
pc %5 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = and %0, 2049:i32
%2 = ne %1, 0:i32
%3:i64 = var
%4 = slt %3, 0:i64
%5:i32 = zext %4
%6 = eq %5, 0:i32
pc %6 1:i1
infer %2


; start LHS (in $27)
%0:i32 = var
%1 = and %0, 2048:i32
%2 = eq %1, 0:i32
%3:i32 = zext %2
%4 = eq %3, 0:i32
%5:i64 = var
%6 = slt %5, 0:i64
%7:i32 = zext %6
%8 = eq %7, 0:i32
pc %8 1:i1
infer %4


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 8:i32
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 524:i32
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 512:i32
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 512:i32 (hasExternalUses)
%2 = add %1, 12:i32
infer %2


; start LHS (in $27)
%0:i64 = var
%1 = and %0, 9218868437227405312:i64
infer %1


; start LHS (in $27)
%0:i64 = var
%1 = and %0, 9218868437227405312:i64
%2 = eq %1, 9218868437227405312:i64
infer %2


; start LHS (in $27)
%0:i32 = var
%1 = and %0, 32:i32
%2:i64 = var
%3 = and %2, 9218868437227405312:i64
%4 = eq %3, 9218868437227405312:i64
pc %4 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = and %0, 32:i32
%2 = ne %1, 0:i32
%3:i64 = var
%4 = and %3, 9218868437227405312:i64
%5 = eq %4, 9218868437227405312:i64
pc %5 1:i1
infer %2


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = and %1, 2049:i32
%3 = ne %2, 0:i32 (hasExternalUses)
%4:i32 = zext %3
%5 = phi %0, 1:i32, %4
%6 = add %5, 3:i32
%7:i64 = var
%8 = slt %7, 0:i64
blockpc %0 0 %8 1:i1
%9:i32 = zext %8
%10 = eq %9, 0:i32
blockpc %0 1 %10 1:i1
%11:i64 = var
%12 = and %11, 9218868437227405312:i64
%13 = eq %12, 9218868437227405312:i64
pc %13 1:i1
infer %6


; start LHS (in $27)
%0:i32 = var
%1 = and %0, -65537:i32
%2:i64 = var
%3 = and %2, 9218868437227405312:i64
%4 = eq %3, 9218868437227405312:i64
pc %4 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = xor %0, 8192:i32
%2:i64 = var
%3 = and %2, 9218868437227405312:i64
%4 = eq %3, 9218868437227405312:i64
pc %4 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = add %0, -1:i32
%2:i32 = var
%3 = ne %2, 0:i32
%4:i64 = var
%5 = and %4, 9218868437227405312:i64
%6 = eq %5, 9218868437227405312:i64
%7:i32 = zext %6
%8 = eq %7, 0:i32
pc %3 1:i1
pc %8 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = or %0, 32:i32
%2:i64 = var
%3 = and %2, 9218868437227405312:i64
%4 = eq %3, 9218868437227405312:i64
%5:i32 = zext %4
%6 = eq %5, 0:i32
pc %6 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = or %0, 32:i32 (hasExternalUses)
%2 = eq %1, 97:i32
%3:i64 = var
%4 = and %3, 9218868437227405312:i64
%5 = eq %4, 9218868437227405312:i64
%6:i32 = zext %5
%7 = eq %6, 0:i32
pc %7 1:i1
infer %2


; start LHS (in $27)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = phi %2, 2016:i32, 2011:i32
%4 = phi %1, %3, 2013:i32
%5 = phi %0, 2010:i32, %4
%6 = add %5, 9:i32
%7:i64 = var
%8 = slt %7, 0:i64
blockpc %0 0 %8 1:i1
%9:i32 = zext %8
%10 = eq %9, 0:i32
blockpc %0 1 %10 1:i1
%11:i32 = var
%12 = and %11, 2048:i32
%13 = eq %12, 0:i32
%14:i32 = zext %13
%15 = eq %14, 0:i32
blockpc %1 0 %15 1:i1
%16:i32 = zext %15
%17 = eq %16, 0:i32
blockpc %1 1 %17 1:i1
%18 = and %11, 1:i32
%19 = ne %18, 0:i32
blockpc %2 0 %19 1:i1
%20 = eq %18, 0:i32
blockpc %2 1 %20 1:i1
%21:i32 = var
%22 = or %21, 32:i32
%23 = eq %22, 97:i32
%24:i32 = var
pc %23 1:i1
pc %24 1:i1
infer %6


; start LHS (in $27)
%0:i32 = var
%1 = and %0, 32:i32
%2 = or %0, 32:i32
%3 = eq %2, 97:i32
%4:i64 = var
%5 = and %4, 9218868437227405312:i64
%6 = eq %5, 9218868437227405312:i64
%7:i32 = zext %6
%8 = eq %7, 0:i32
pc %3 1:i1
pc %8 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = ult 11:i32, %0
%2:i32 = var
%3 = or %2, 32:i32
%4 = eq %3, 97:i32
%5:i64 = var
%6 = and %5, 9218868437227405312:i64
%7 = eq %6, 9218868437227405312:i64
%8:i32 = zext %7
%9 = eq %8, 0:i32
pc %4 1:i1
pc %9 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = sub 12:i32, %0
%2:i32 = var
%3 = or %2, 32:i32
%4 = eq %3, 97:i32
%5:i64 = var
%6 = and %5, 9218868437227405312:i64
%7 = eq %6, 9218868437227405312:i64
%8:i32 = zext %7
%9 = eq %8, 0:i32
pc %4 1:i1
pc %9 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = sub 12:i32, %0 (hasExternalUses)
%2 = eq %1, 0:i32
%3:i32 = var
%4 = or %3, 32:i32
%5 = eq %4, 97:i32
%6:i64 = var
%7 = and %6, 9218868437227405312:i64
%8 = eq %7, 9218868437227405312:i64
%9:i32 = zext %8
%10 = eq %9, 0:i32
pc %5 1:i1
pc %10 1:i1
infer %2


; start LHS (in $27)
%0:i32 = var
%1 = ult 11:i32, %0
%2:i32 = zext %1
%3 = sub 12:i32, %0 (hasExternalUses)
%4 = eq %3, 0:i32
%5:i32 = zext %4
%6 = or %2, %5
%7:i32 = var
%8 = or %7, 32:i32
%9 = eq %8, 97:i32
%10:i64 = var
%11 = and %10, 9218868437227405312:i64
%12 = eq %11, 9218868437227405312:i64
%13:i32 = zext %12
%14 = eq %13, 0:i32
pc %9 1:i1
pc %14 1:i1
infer %6


; start LHS (in $27)
%0:i32 = var
%1 = ult 11:i32, %0
%2:i32 = zext %1
%3 = sub 12:i32, %0 (hasExternalUses)
%4 = eq %3, 0:i32
%5:i32 = zext %4
%6 = or %2, %5
%7 = eq %6, 0:i32
%8:i32 = var
%9 = or %8, 32:i32
%10 = eq %9, 97:i32
%11:i64 = var
%12 = and %11, 9218868437227405312:i64
%13 = eq %12, 9218868437227405312:i64
%14:i32 = zext %13
%15 = eq %14, 0:i32
pc %10 1:i1
pc %15 1:i1
infer %7


; start LHS (in $27)
%0:i32 = var
%1 = add %0, -1:i32
%2:i32 = var
%3 = ult 11:i32, %2
%4:i32 = zext %3
%5 = sub 12:i32, %2
%6 = eq %5, 0:i32
%7:i32 = zext %6
%8 = or %4, %7
%9 = eq %8, 0:i32
%10:i32 = var
%11 = or %10, 32:i32
%12 = eq %11, 97:i32
%13:i64 = var
%14 = and %13, 9218868437227405312:i64
%15 = eq %14, 9218868437227405312:i64
%16:i32 = zext %15
%17 = eq %16, 0:i32
pc %9 1:i1
pc %12 1:i1
pc %17 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = eq %0, 45:i32
%2:i32 = var
%3 = ult 11:i32, %2
%4:i32 = zext %3
%5 = sub 12:i32, %2
%6 = eq %5, 0:i32
%7:i32 = zext %6
%8 = or %4, %7
%9 = eq %8, 0:i32
%10:i32 = var
%11 = or %10, 32:i32
%12 = eq %11, 97:i32
%13:i64 = var
%14 = and %13, 9218868437227405312:i64
%15 = eq %14, 9218868437227405312:i64
%16:i32 = zext %15
%17 = eq %16, 0:i32
pc %9 1:i1
pc %12 1:i1
pc %17 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = sub 0:i32, %0
%2:i32 = var
%3 = or %2, 32:i32
%4 = eq %3, 97:i32
%5:i64 = var
%6 = and %5, 9218868437227405312:i64
%7 = eq %6, 9218868437227405312:i64
%8:i32 = zext %7
%9 = eq %8, 0:i32
pc %4 1:i1
pc %9 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = slt %0, 0:i32
%2:i32 = var
%3 = or %2, 32:i32
%4 = eq %3, 97:i32
%5:i64 = var
%6 = and %5, 9218868437227405312:i64
%7 = eq %6, 9218868437227405312:i64
%8:i32 = zext %7
%9 = eq %8, 0:i32
pc %4 1:i1
pc %9 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1:i32 = var
%2 = add %1, 512:i32 (hasExternalUses)
%3 = add %2, 12:i32 (hasExternalUses)
%4 = eq %0, %3
%5:i32 = var
%6 = or %5, 32:i32
%7 = eq %6, 97:i32
%8:i64 = var
%9 = and %8, 9218868437227405312:i64
%10 = eq %9, 9218868437227405312:i64
%11:i32 = zext %10
%12 = eq %11, 0:i32
pc %7 1:i1
pc %12 1:i1
infer %4


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 512:i32 (hasExternalUses)
%2 = add %1, 11:i32
%3:i32 = var
%4 = add %1, 12:i32
%5 = eq %3, %4
%6:i32 = var
%7 = or %6, 32:i32
%8 = eq %7, 97:i32
%9:i64 = var
%10 = and %9, 9218868437227405312:i64
%11 = eq %10, 9218868437227405312:i64
%12:i32 = zext %11
%13 = eq %12, 0:i32
pc %5 1:i1
pc %8 1:i1
pc %13 1:i1
infer %2


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = and %1, 2049:i32
%3 = ne %2, 0:i32 (hasExternalUses)
%4:i32 = zext %3
%5 = phi %0, 1:i32, %4
%6 = or %5, 2:i32
%7:i64 = var
%8 = slt %7, 0:i64
blockpc %0 0 %8 1:i1
%9:i32 = zext %8
%10 = eq %9, 0:i32
blockpc %0 1 %10 1:i1
%11:i32 = var
%12 = or %11, 32:i32
%13 = eq %12, 97:i32
%14:i64 = var
%15 = and %14, 9218868437227405312:i64
%16 = eq %15, 9218868437227405312:i64
%17:i32 = zext %16
%18 = eq %17, 0:i32
pc %13 1:i1
pc %18 1:i1
infer %6


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2:i32 = var
%3 = add %2, 512:i32 (hasExternalUses)
%4 = add %3, 11:i32 (hasExternalUses)
%5 = phi %0, %1, %4
%6 = add %5, -1:i32
%7 = add %3, 12:i32
%8 = eq %1, %7
blockpc %0 0 %8 1:i1
%9:i32 = zext %8
%10 = eq %9, 0:i32
blockpc %0 1 %10 1:i1
%11:i32 = var
%12 = or %11, 32:i32
%13 = eq %12, 97:i32
%14:i64 = var
%15 = and %14, 9218868437227405312:i64
%16 = eq %15, 9218868437227405312:i64
%17:i32 = zext %16
%18 = eq %17, 0:i32
pc %13 1:i1
pc %18 1:i1
infer %6


; start LHS (in $27)
%0:i32 = var
%1 = ashr %0, 31:i32
%2:i32 = var
%3 = or %2, 32:i32
%4 = eq %3, 97:i32
%5:i64 = var
%6 = and %5, 9218868437227405312:i64
%7 = eq %6, 9218868437227405312:i64
%8:i32 = zext %7
%9 = eq %8, 0:i32
pc %4 1:i1
pc %9 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = ashr %0, 31:i32
%2 = and %1, 2:i32
%3:i32 = var
%4 = or %3, 32:i32
%5 = eq %4, 97:i32
%6:i64 = var
%7 = and %6, 9218868437227405312:i64
%8 = eq %7, 9218868437227405312:i64
%9:i32 = zext %8
%10 = eq %9, 0:i32
pc %5 1:i1
pc %10 1:i1
infer %2


; start LHS (in $27)
%0:i32 = var
%1 = ashr %0, 31:i32
%2 = and %1, 2:i32
%3 = add %2, 43:i32
%4:i32 = var
%5 = or %4, 32:i32
%6 = eq %5, 97:i32
%7:i64 = var
%8 = and %7, 9218868437227405312:i64
%9 = eq %8, 9218868437227405312:i64
%10:i32 = zext %9
%11 = eq %10, 0:i32
pc %6 1:i1
pc %11 1:i1
infer %3


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2:i32 = var
%3 = add %2, 512:i32 (hasExternalUses)
%4 = add %3, 11:i32 (hasExternalUses)
%5 = phi %0, %1, %4
%6 = add %5, -2:i32
%7 = add %3, 12:i32
%8 = eq %1, %7
blockpc %0 0 %8 1:i1
%9:i32 = zext %8
%10 = eq %9, 0:i32
blockpc %0 1 %10 1:i1
%11:i32 = var
%12 = or %11, 32:i32
%13 = eq %12, 97:i32
%14:i64 = var
%15 = and %14, 9218868437227405312:i64
%16 = eq %15, 9218868437227405312:i64
%17:i32 = zext %16
%18 = eq %17, 0:i32
pc %13 1:i1
pc %18 1:i1
infer %6


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 15:i32
%2 = or %0, 32:i32
%3 = eq %2, 97:i32
%4:i64 = var
%5 = and %4, 9218868437227405312:i64
%6 = eq %5, 9218868437227405312:i64
%7:i32 = zext %6
%8 = eq %7, 0:i32
pc %3 1:i1
pc %8 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = slt %0, 1:i32
%2:i32 = var
%3 = or %2, 32:i32
%4 = eq %3, 97:i32
%5:i64 = var
%6 = and %5, 9218868437227405312:i64
%7 = eq %6, 9218868437227405312:i64
%8:i32 = zext %7
%9 = eq %8, 0:i32
pc %4 1:i1
pc %9 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = and %0, 8:i32
%2:i32 = var
%3 = or %2, 32:i32
%4 = eq %3, 97:i32
%5:i64 = var
%6 = and %5, 9218868437227405312:i64
%7 = eq %6, 9218868437227405312:i64
%8:i32 = zext %7
%9 = eq %8, 0:i32
pc %4 1:i1
pc %9 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = and %0, 8:i32
%2 = eq %1, 0:i32
%3:i32 = var
%4 = or %3, 32:i32
%5 = eq %4, 97:i32
%6:i64 = var
%7 = and %6, 9218868437227405312:i64
%8 = eq %7, 9218868437227405312:i64
%9:i32 = zext %8
%10 = eq %9, 0:i32
pc %5 1:i1
pc %10 1:i1
infer %2


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 2045:i32
%2:i32 = var
%3 = or %2, 32:i32
%4 = eq %3, 97:i32
%5:i64 = var
%6 = and %5, 9218868437227405312:i64
%7 = eq %6, 9218868437227405312:i64
%8:i32 = zext %7
%9 = eq %8, 0:i32
pc %4 1:i1
pc %9 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = and %0, 32:i32 (hasExternalUses)
%2:i32 = var
%3 = or %1, %2
%4 = or %0, 32:i32
%5 = eq %4, 97:i32
%6:i64 = var
%7 = and %6, 9218868437227405312:i64
%8 = eq %7, 9218868437227405312:i64
%9:i32 = zext %8
%10 = eq %9, 0:i32
pc %5 1:i1
pc %10 1:i1
infer %3


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 1:i32
%2:i32 = var
%3 = or %2, 32:i32
%4 = eq %3, 97:i32
%5:i64 = var
%6 = and %5, 9218868437227405312:i64
%7 = eq %6, 9218868437227405312:i64
%8:i32 = zext %7
%9 = eq %8, 0:i32
pc %4 1:i1
pc %9 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 1:i32 (hasExternalUses)
%2:i32 = var
%3 = add %2, 524:i32 (hasExternalUses)
%4 = sub %1, %3
%5:i32 = var
%6 = or %5, 32:i32
%7 = eq %6, 97:i32
%8:i64 = var
%9 = and %8, 9218868437227405312:i64
%10 = eq %9, 9218868437227405312:i64
%11:i32 = zext %10
%12 = eq %11, 0:i32
pc %7 1:i1
pc %12 1:i1
infer %4


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 1:i32 (hasExternalUses)
%2:i32 = var
%3 = add %2, 524:i32 (hasExternalUses)
%4 = sub %1, %3
%5 = eq %4, 1:i32
%6:i32 = var
%7 = or %6, 32:i32
%8 = eq %7, 97:i32
%9:i64 = var
%10 = and %9, 9218868437227405312:i64
%11 = eq %10, 9218868437227405312:i64
%12:i32 = zext %11
%13 = eq %12, 0:i32
pc %8 1:i1
pc %13 1:i1
infer %5


; start LHS (in $27)
%0:i32 = var
%1 = slt %0, 1:i32
%2:i32 = var
%3 = and %1, %2
%4:i32 = var
%5 = add %4, 1:i32
%6:i32 = var
%7 = add %6, 524:i32
%8 = sub %5, %7
%9 = eq %8, 1:i32
%10:i32 = var
%11 = or %10, 32:i32
%12 = eq %11, 97:i32
%13:i64 = var
%14 = and %13, 9218868437227405312:i64
%15 = eq %14, 9218868437227405312:i64
%16:i32 = zext %15
%17 = eq %16, 0:i32
pc %9 1:i1
pc %12 1:i1
pc %17 1:i1
infer %3


; start LHS (in $27)
%0:i32 = var
%1 = and %0, 8:i32
%2 = eq %1, 0:i32
%3:i32 = var
%4 = slt %3, 1:i32
%5:i32 = var
%6 = and %4, %5
%7 = and %2, %6
%8:i32 = var
%9 = add %8, 1:i32
%10:i32 = var
%11 = add %10, 524:i32
%12 = sub %9, %11
%13 = eq %12, 1:i32
%14:i32 = var
%15 = or %14, 32:i32
%16 = eq %15, 97:i32
%17:i64 = var
%18 = and %17, 9218868437227405312:i64
%19 = eq %18, 9218868437227405312:i64
%20:i32 = zext %19
%21 = eq %20, 0:i32
pc %13 1:i1
pc %16 1:i1
pc %21 1:i1
infer %7


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 2:i32
%2:i32 = var
%3 = and %2, 8:i32
%4 = eq %3, 0:i32
%5:i32 = var
%6 = slt %5, 1:i32
%7:i32 = var
%8 = and %6, %7
%9 = and %4, %8
%10 = eq %9, 0:i32
%11 = add %0, 1:i32
%12:i32 = var
%13 = add %12, 524:i32
%14 = sub %11, %13
%15 = eq %14, 1:i32
%16:i32 = var
%17 = or %16, 32:i32
%18 = eq %17, 97:i32
%19:i64 = var
%20 = and %19, 9218868437227405312:i64
%21 = eq %20, 9218868437227405312:i64
%22:i32 = zext %21
%23 = eq %22, 0:i32
pc %10 1:i1
pc %15 1:i1
pc %18 1:i1
pc %23 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = eq %0, 0:i32
%2:i32 = var
%3 = or %2, 32:i32
%4 = eq %3, 97:i32
%5:i64 = var
%6 = and %5, 9218868437227405312:i64
%7 = eq %6, 9218868437227405312:i64
%8:i32 = zext %7
%9 = eq %8, 0:i32
pc %4 1:i1
pc %9 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 524:i32 (hasExternalUses)
%2 = sub -2:i32, %1
%3:i32 = var
%4 = or %3, 32:i32
%5 = eq %4, 97:i32
%6:i64 = var
%7 = and %6, 9218868437227405312:i64
%8 = eq %7, 9218868437227405312:i64
%9:i32 = zext %8
%10 = eq %9, 0:i32
pc %5 1:i1
pc %10 1:i1
infer %2


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 524:i32 (hasExternalUses)
%2 = sub -2:i32, %1
%3 = block 2
%4 = block 2
%5:i32 = var
%6 = add %5, 1:i32 (hasExternalUses)
%7 = add %5, 2:i32 (hasExternalUses)
%8 = phi %4, %6, %7
%9 = phi %3, %8, %6
%10 = add %2, %9
%11 = sub %6, %1
%12 = eq %11, 1:i32
blockpc %3 0 %12 1:i1
%13:i32 = zext %12
%14 = eq %13, 0:i32
blockpc %3 1 %14 1:i1
%15:i32 = var
%16 = and %15, 8:i32
%17 = eq %16, 0:i32
%18:i32 = var
%19 = slt %18, 1:i32
%20:i32 = var
%21 = and %19, %20
%22 = and %17, %21
%23 = ne %22, 0:i32
blockpc %4 0 %23 1:i1
%24 = eq %22, 0:i32
blockpc %4 1 %24 1:i1
%25:i32 = var
%26 = or %25, 32:i32
%27 = eq %26, 97:i32
%28:i32 = var
pc %27 1:i1
pc %28 1:i1
infer %10


; start LHS (in $27)
%0:i32 = var
%1:i32 = var
%2 = add %1, 524:i32 (hasExternalUses)
%3 = sub -2:i32, %2
%4 = block 2
%5 = block 2
%6:i32 = var
%7 = add %6, 1:i32 (hasExternalUses)
%8 = add %6, 2:i32 (hasExternalUses)
%9 = phi %5, %7, %8
%10 = phi %4, %9, %7
%11 = add %3, %10
%12 = sle %0, %11
%13 = sub %7, %2
%14 = eq %13, 1:i32
blockpc %4 0 %14 1:i1
%15:i32 = zext %14
%16 = eq %15, 0:i32
blockpc %4 1 %16 1:i1
%17:i32 = var
%18 = and %17, 8:i32
%19 = eq %18, 0:i32
%20 = slt %0, 1:i32
%21:i32 = var
%22 = and %20, %21
%23 = and %19, %22
%24 = ne %23, 0:i32
blockpc %5 0 %24 1:i1
%25 = eq %23, 0:i32
blockpc %5 1 %25 1:i1
%26:i32 = var
%27:i32 = var
pc %26 1:i1
pc %27 1:i1
infer %12


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 2:i32
%2:i32 = var
%3 = or %2, 32:i32
%4 = eq %3, 97:i32
%5:i64 = var
%6 = and %5, 9218868437227405312:i64
%7 = eq %6, 9218868437227405312:i64
%8:i32 = zext %7
%9 = eq %8, 0:i32
pc %4 1:i1
pc %9 1:i1
infer %1


; start LHS (in $27)
%0 = block 2
%1 = block 2
%2:i32 = var
%3 = add %2, 1:i32 (hasExternalUses)
%4 = add %2, 2:i32 (hasExternalUses)
%5 = phi %1, %3, %4
%6 = phi %0, %5, %3
%7:i32 = var
%8 = add %7, 524:i32 (hasExternalUses)
%9 = sub %6, %8
%10 = sub %3, %8
%11 = eq %10, 1:i32
blockpc %0 0 %11 1:i1
%12:i32 = zext %11
%13 = eq %12, 0:i32
blockpc %0 1 %13 1:i1
%14:i32 = var
%15 = and %14, 8:i32
%16 = eq %15, 0:i32
%17:i32 = var
%18 = slt %17, 1:i32
%19:i32 = var
%20 = and %18, %19
%21 = and %16, %20
%22 = ne %21, 0:i32
blockpc %1 0 %22 1:i1
%23 = eq %21, 0:i32
blockpc %1 1 %23 1:i1
%24:i32 = var
%25 = or %24, 32:i32
%26 = eq %25, 97:i32
%27:i32 = var
pc %26 1:i1
pc %27 1:i1
infer %9


; start LHS (in $27)
%0 = block 2
%1 = block 2
%2:i32 = var
%3 = add %2, 1:i32 (hasExternalUses)
%4 = add %2, 2:i32 (hasExternalUses)
%5 = phi %1, %3, %4
%6 = phi %0, %5, %3
%7:i32 = var
%8 = add %7, 524:i32 (hasExternalUses)
%9 = sub %6, %8
%10 = sub %3, %8
%11 = eq %10, 1:i32
blockpc %0 0 %11 1:i1
%12:i32 = zext %11
%13 = eq %12, 0:i32
blockpc %0 1 %13 1:i1
%14:i32 = var
%15 = and %14, 8:i32
%16 = eq %15, 0:i32
%17:i32 = var
%18 = slt %17, 1:i32
%19:i32 = var
%20 = and %18, %19
%21 = and %16, %20
%22 = ne %21, 0:i32
blockpc %1 0 %22 1:i1
%23 = eq %21, 0:i32
blockpc %1 1 %23 1:i1
%24:i32 = var
%25 = or %24, 32:i32
%26 = eq %25, 97:i32
%27:i32 = var
pc %26 1:i1
pc %27 1:i1
infer %9


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 512:i32
%2 = add %1, 12:i32 (hasExternalUses)
%3 = block 2
%4:i32 = var
%5 = add %1, 11:i32 (hasExternalUses)
%6 = phi %3, %4, %5
%7 = add %6, -2:i32 (hasExternalUses)
%8 = sub %2, %7
%9 = eq %4, %2
blockpc %3 0 %9 1:i1
%10:i32 = zext %9
%11 = eq %10, 0:i32
blockpc %3 1 %11 1:i1
%12:i32 = var
%13 = or %12, 32:i32
%14 = eq %13, 97:i32
%15:i64 = var
%16 = and %15, 9218868437227405312:i64
%17 = eq %16, 9218868437227405312:i64
%18:i32 = zext %17
%19 = eq %18, 0:i32
pc %14 1:i1
pc %19 1:i1
infer %8


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 512:i32
%2 = add %1, 12:i32 (hasExternalUses)
%3 = block 2
%4:i32 = var
%5 = add %1, 11:i32 (hasExternalUses)
%6 = phi %3, %4, %5
%7 = add %6, -2:i32 (hasExternalUses)
%8 = sub %2, %7 (hasExternalUses)
%9 = block 2
%10:i32 = var
%11 = and %10, 2049:i32
%12 = ne %11, 0:i32 (hasExternalUses)
%13:i32 = zext %12
%14 = phi %9, 1:i32, %13
%15 = or %14, 2:i32 (hasExternalUses)
%16 = add %8, %15
%17 = eq %4, %2
blockpc %3 0 %17 1:i1
%18:i32 = zext %17
%19 = eq %18, 0:i32
blockpc %3 1 %19 1:i1
%20:i64 = var
%21 = slt %20, 0:i64
blockpc %9 0 %21 1:i1
%22:i32 = zext %21
%23 = eq %22, 0:i32
blockpc %9 1 %23 1:i1
%24:i32 = var
%25 = or %24, 32:i32
%26 = eq %25, 97:i32
%27:i32 = var
pc %26 1:i1
pc %27 1:i1
infer %16


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 512:i32
%2 = add %1, 12:i32 (hasExternalUses)
%3 = block 2
%4:i32 = var
%5 = add %1, 11:i32 (hasExternalUses)
%6 = phi %3, %4, %5
%7 = add %6, -2:i32 (hasExternalUses)
%8 = sub %2, %7 (hasExternalUses)
%9 = block 2
%10:i32 = var
%11 = and %10, 2049:i32
%12 = ne %11, 0:i32 (hasExternalUses)
%13:i32 = zext %12
%14 = phi %9, 1:i32, %13
%15 = or %14, 2:i32 (hasExternalUses)
%16 = add %8, %15
%17 = block 2
%18:i32 = var
%19 = add %18, 2:i32 (hasExternalUses)
%20 = block 2
%21 = block 2
%22:i32 = var
%23 = add %22, 1:i32 (hasExternalUses)
%24 = add %22, 2:i32 (hasExternalUses)
%25 = phi %21, %23, %24
%26 = phi %20, %25, %23
%27 = add %0, 524:i32 (hasExternalUses)
%28 = sub %26, %27 (hasExternalUses)
%29 = phi %17, %19, %28
%30 = add %16, %29
%31:i32 = var
blockpc %3 0 %31 1:i1
%32:i32 = var
blockpc %3 1 %32 1:i1
%33:i32 = var
blockpc %9 0 %33 1:i1
%34:i32 = var
blockpc %9 1 %34 1:i1
%35:i32 = var
blockpc %20 0 %35 1:i1
%36:i32 = var
blockpc %20 1 %36 1:i1
%37:i32 = var
blockpc %21 0 %37 1:i1
%38:i32 = var
blockpc %21 1 %38 1:i1
%39:i32 = var
%40:i32 = var
pc %39 1:i1
pc %40 1:i1
infer %30


; start LHS (in $27)
%0:i32 = var
%1 = xor %0, 65536:i32
%2:i32 = var
%3 = or %2, 32:i32
%4 = eq %3, 97:i32
%5:i64 = var
%6 = and %5, 9218868437227405312:i64
%7 = eq %6, 9218868437227405312:i64
%8:i32 = zext %7
%9 = eq %8, 0:i32
pc %4 1:i1
pc %9 1:i1
infer %1


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = add %1, 2:i32 (hasExternalUses)
%3 = block 2
%4 = block 2
%5:i32 = var
%6 = add %5, 1:i32 (hasExternalUses)
%7 = add %5, 2:i32 (hasExternalUses)
%8 = phi %4, %6, %7
%9 = phi %3, %8, %6
%10:i32 = var
%11 = add %10, 524:i32 (hasExternalUses)
%12 = sub %9, %11 (hasExternalUses)
%13 = phi %0, %2, %12
%14 = sub %9, %11 (hasExternalUses)
%15 = phi %0, %14, %12
%16 = sub %13, %15
%17 = sub %6, %11
%18 = eq %17, 1:i32
blockpc %3 0 %18 1:i1
%19:i32 = zext %18
%20 = eq %19, 0:i32
blockpc %3 1 %20 1:i1
%21:i32 = var
%22 = and %21, 8:i32
%23 = eq %22, 0:i32
%24 = slt %1, 1:i32
%25:i32 = var
%26 = and %24, %25
%27 = and %23, %26
%28 = ne %27, 0:i32
blockpc %4 0 %28 1:i1
%29:i32 = var
blockpc %4 1 %29 1:i1
%30:i32 = var
%31:i32 = var
pc %30 1:i1
pc %31 1:i1
infer %16


; start LHS (in $27)
%0:i32 = var
%1 = xor %0, 8192:i32
%2:i32 = var
%3 = or %2, 32:i32
%4 = eq %3, 97:i32
%5:i64 = var
%6 = and %5, 9218868437227405312:i64
%7 = eq %6, 9218868437227405312:i64
%8:i32 = zext %7
%9 = eq %8, 0:i32
pc %4 1:i1
pc %9 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = add %0, -28:i32
%2:i32 = var
%3 = ne %2, 0:i32
%4:i64 = var
%5 = and %4, 9218868437227405312:i64
%6 = eq %5, 9218868437227405312:i64
%7:i32 = zext %6
%8 = eq %7, 0:i32
pc %3 1:i1
pc %8 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 8:i32 (hasExternalUses)
%2 = add %1, 288:i32
%3:i64 = var
%4 = and %3, 9218868437227405312:i64
%5 = eq %4, 9218868437227405312:i64
%6:i32 = zext %5
%7 = eq %6, 0:i32
pc %7 1:i1
infer %2


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = add %1, -28:i32 (hasExternalUses)
%3:i32 = var
%4 = phi %0, %2, %3
%5 = slt %4, 0:i32
%6:i32 = var
%7 = ne %6, 0:i32
blockpc %0 0 %7 1:i1
%8 = eq %6, 0:i32
blockpc %0 1 %8 1:i1
%9:i64 = var
%10 = and %9, 9218868437227405312:i64
%11 = eq %10, 9218868437227405312:i64
%12:i32 = zext %11
%13 = eq %12, 0:i32
pc %13 1:i1
infer %5


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 4:i32
%2:i64 = var
%3 = and %2, 9218868437227405312:i64
%4 = eq %3, 9218868437227405312:i64
%5:i32 = zext %4
%6 = eq %5, 0:i32
pc %6 1:i1
infer %1


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = add %1, -28:i32 (hasExternalUses)
%3:i32 = var
%4 = phi %0, %2, %3
%5 = slt 0:i32, %4
%6:i32 = var
%7 = ne %6, 0:i32
blockpc %0 0 %7 1:i1
%8 = eq %6, 0:i32
blockpc %0 1 %8 1:i1
%9:i64 = var
%10 = and %9, 9218868437227405312:i64
%11 = eq %10, 9218868437227405312:i64
%12:i32 = zext %11
%13 = eq %12, 0:i32
pc %13 1:i1
infer %5


; start LHS (in $27)
%0:i32 = var
%1 = slt %0, 29:i32
%2 = block 2
%3:i32 = var
%4 = ne %3, 0:i32
blockpc %2 0 %4 1:i1
%5 = eq %3, 0:i32
blockpc %2 1 %5 1:i1
%6:i32 = var
%7 = add %6, -28:i32
%8:i32 = var
%9 = phi %2, %7, %8
%10 = slt 0:i32, %9
%11:i64 = var
%12 = and %11, 9218868437227405312:i64
%13 = eq %12, 9218868437227405312:i64
%14:i32 = zext %13
%15 = eq %14, 0:i32
pc %10 1:i1
pc %15 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = add %0, -4:i32
%2 = block 2
%3:i32 = var
%4 = ne %3, 0:i32
blockpc %2 0 %4 1:i1
%5 = eq %3, 0:i32
blockpc %2 1 %5 1:i1
%6:i32 = var
%7 = add %6, -28:i32
%8:i32 = var
%9 = phi %2, %7, %8
%10 = slt 0:i32, %9
%11:i64 = var
%12 = and %11, 9218868437227405312:i64
%13 = eq %12, 9218868437227405312:i64
%14:i32 = zext %13
%15 = eq %14, 0:i32
pc %10 1:i1
pc %15 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1:i32 = var
%2 = add %1, -4:i32 (hasExternalUses)
%3 = ule %0, %2
%4 = block 2
%5:i32 = var
%6 = ne %5, 0:i32
blockpc %4 0 %6 1:i1
%7 = eq %5, 0:i32
blockpc %4 1 %7 1:i1
%8:i32 = var
%9 = add %8, -28:i32
%10:i32 = var
%11 = phi %4, %9, %10
%12 = slt 0:i32, %11
%13:i64 = var
%14 = and %13, 9218868437227405312:i64
%15 = eq %14, 9218868437227405312:i64
%16:i32 = zext %15
%17 = eq %16, 0:i32
pc %12 1:i1
pc %17 1:i1
infer %3


; start LHS (in $27)
%0:i64 = var
%1:i64 = var
%2 = shl %0, %1
%3:i32 = var
%4:i32 = var
%5 = add %4, -4:i32
%6 = ule %3, %5
%7 = block 2
%8:i32 = var
%9 = ne %8, 0:i32
blockpc %7 0 %9 1:i1
%10 = eq %8, 0:i32
blockpc %7 1 %10 1:i1
%11:i32 = var
%12 = add %11, -28:i32
%13:i32 = var
%14 = phi %7, %12, %13
%15 = slt 0:i32, %14
%16:i64 = var
%17 = and %16, 9218868437227405312:i64
%18 = eq %17, 9218868437227405312:i64
%19:i32 = zext %18
%20 = eq %19, 0:i32
pc %6 1:i1
pc %15 1:i1
pc %20 1:i1
infer %2


; start LHS (in $27)
%0:i64 = var
%1:i64 = var
%2 = shl %0, %1
%3:i64 = var
%4 = add %2, %3
%5:i32 = var
%6:i32 = var
%7 = add %6, -4:i32
%8 = ule %5, %7
%9 = block 2
%10:i32 = var
%11 = ne %10, 0:i32
blockpc %9 0 %11 1:i1
%12 = eq %10, 0:i32
blockpc %9 1 %12 1:i1
%13:i32 = var
%14 = add %13, -28:i32
%15:i32 = var
%16 = phi %9, %14, %15
%17 = slt 0:i32, %16
%18:i64 = var
%19 = and %18, 9218868437227405312:i64
%20 = eq %19, 9218868437227405312:i64
%21:i32 = zext %20
%22 = eq %21, 0:i32
pc %8 1:i1
pc %17 1:i1
pc %22 1:i1
infer %4


; start LHS (in $27)
%0:i64 = var
%1:i64 = var
%2 = shl %0, %1
%3:i64 = var
%4 = add %2, %3 (hasExternalUses)
%5 = urem %4, 1000000000:i64
%6:i32 = var
%7:i32 = var
%8 = add %7, -4:i32
%9 = ule %6, %8
%10 = block 2
%11:i32 = var
%12 = ne %11, 0:i32
blockpc %10 0 %12 1:i1
%13 = eq %11, 0:i32
blockpc %10 1 %13 1:i1
%14:i32 = var
%15 = add %14, -28:i32
%16:i32 = var
%17 = phi %10, %15, %16
%18 = slt 0:i32, %17
%19:i64 = var
%20 = and %19, 9218868437227405312:i64
%21 = eq %20, 9218868437227405312:i64
%22:i32 = zext %21
%23 = eq %22, 0:i32
pc %9 1:i1
pc %18 1:i1
pc %23 1:i1
infer %5


; start LHS (in $27)
%0:i64 = var
%1:i64 = var
%2 = shl %0, %1
%3:i64 = var
%4 = add %2, %3 (hasExternalUses)
%5 = udiv %4, 1000000000:i64
%6:i32 = var
%7:i32 = var
%8 = add %7, -4:i32
%9 = ule %6, %8
%10 = block 2
%11:i32 = var
%12 = ne %11, 0:i32
blockpc %10 0 %12 1:i1
%13 = eq %11, 0:i32
blockpc %10 1 %13 1:i1
%14:i32 = var
%15 = add %14, -28:i32
%16:i32 = var
%17 = phi %10, %15, %16
%18 = slt 0:i32, %17
%19:i64 = var
%20 = and %19, 9218868437227405312:i64
%21 = eq %20, 9218868437227405312:i64
%22:i32 = zext %21
%23 = eq %22, 0:i32
pc %9 1:i1
pc %18 1:i1
pc %23 1:i1
infer %5


; start LHS (in $27)
%0:i32 = var
%1 = add %0, -4:i32
%2:i32 = var
%3:i32 = var
%4 = add %3, -4:i32
%5 = ule %2, %4
%6 = block 2
%7:i32 = var
%8 = ne %7, 0:i32
blockpc %6 0 %8 1:i1
%9 = eq %7, 0:i32
blockpc %6 1 %9 1:i1
%10:i32 = var
%11 = add %10, -28:i32
%12:i32 = var
%13 = phi %6, %11, %12
%14 = slt 0:i32, %13
%15:i64 = var
%16 = and %15, 9218868437227405312:i64
%17 = eq %16, 9218868437227405312:i64
%18:i32 = zext %17
%19 = eq %18, 0:i32
pc %5 1:i1
pc %14 1:i1
pc %19 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1:i32 = var
%2 = add %1, -4:i32 (hasExternalUses)
%3 = ule %0, %2
%4:i32 = var
%5 = add %4, -4:i32
%6 = ule %0, %5
%7 = block 2
%8:i32 = var
%9 = ne %8, 0:i32
blockpc %7 0 %9 1:i1
%10 = eq %8, 0:i32
blockpc %7 1 %10 1:i1
%11:i32 = var
%12 = add %11, -28:i32
%13:i32 = var
%14 = phi %7, %12, %13
%15 = slt 0:i32, %14
%16:i64 = var
%17 = and %16, 9218868437227405312:i64
%18 = eq %17, 9218868437227405312:i64
%19:i32 = zext %18
%20 = eq %19, 0:i32
pc %6 1:i1
pc %15 1:i1
pc %20 1:i1
infer %3


; start LHS (in $27)
%0:i32 = var
%1 = add %0, -4:i32
%2:i32 = var
%3 = ne %2, 0:i32
%4:i32 = var
%5 = add %4, -4:i32
%6 = ule %0, %5
%7 = block 2
%8:i32 = var
%9 = ne %8, 0:i32
blockpc %7 0 %9 1:i1
%10 = eq %8, 0:i32
blockpc %7 1 %10 1:i1
%11:i32 = var
%12 = add %11, -28:i32
%13:i32 = var
%14 = phi %7, %12, %13
%15 = slt 0:i32, %14
%16:i64 = var
%17 = and %16, 9218868437227405312:i64
%18 = eq %17, 9218868437227405312:i64
%19:i32 = zext %18
%20 = eq %19, 0:i32
pc %3 1:i1
pc %6 1:i1
pc %15 1:i1
pc %20 1:i1
infer %1


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = block 2
%3 = add %1, -4:i32 (hasExternalUses)
%4 = phi %2, %1, %3
%5 = phi %0, %1, %4
%6:i32 = var
%7 = ult %5, %6
%8:i32 = var
%9 = add %8, -4:i32
%10 = ule %1, %9
blockpc %0 0 %10 1:i1
%11:i32 = zext %10
%12 = eq %11, 0:i32
blockpc %0 1 %12 1:i1
%13:i32 = var
%14 = ne %13, 0:i32
blockpc %2 0 %14 1:i1
%15 = eq %13, 0:i32
blockpc %2 1 %15 1:i1
%16 = block 2
%17:i32 = var
%18 = ne %17, 0:i32
blockpc %16 0 %18 1:i1
%19 = eq %17, 0:i32
blockpc %16 1 %19 1:i1
%20:i32 = var
%21 = add %20, -28:i32
%22:i32 = var
%23 = phi %16, %21, %22
%24 = slt 0:i32, %23
%25:i32 = var
pc %24 1:i1
pc %25 1:i1
infer %7


; start LHS (in $27)
%0:i32 = var
%1 = add %0, -4:i32
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = add %4, -4:i32
%6 = ule %3, %5
blockpc %2 0 %6 1:i1
%7:i32 = zext %6
%8 = eq %7, 0:i32
blockpc %2 1 %8 1:i1
%9 = block 2
%10:i32 = var
%11 = ne %10, 0:i32
blockpc %9 0 %11 1:i1
%12 = eq %10, 0:i32
blockpc %9 1 %12 1:i1
%13 = add %3, -4:i32
%14 = phi %9, %3, %13
%15 = phi %2, %3, %14
%16 = ult %15, %0
%17 = block 2
%18:i32 = var
%19 = ne %18, 0:i32
blockpc %17 0 %19 1:i1
%20 = eq %18, 0:i32
blockpc %17 1 %20 1:i1
%21:i32 = var
%22 = add %21, -28:i32
%23:i32 = var
%24 = phi %17, %22, %23
%25 = slt 0:i32, %24
%26:i32 = var
pc %16 1:i1
pc %25 1:i1
pc %26 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = eq %0, 0:i32
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = add %4, -4:i32
%6 = ule %3, %5
blockpc %2 0 %6 1:i1
%7:i32 = zext %6
%8 = eq %7, 0:i32
blockpc %2 1 %8 1:i1
%9 = block 2
%10:i32 = var
%11 = ne %10, 0:i32
blockpc %9 0 %11 1:i1
%12 = eq %10, 0:i32
blockpc %9 1 %12 1:i1
%13 = add %3, -4:i32
%14 = phi %9, %3, %13
%15 = phi %2, %3, %14
%16:i32 = var
%17 = ult %15, %16
%18 = block 2
%19:i32 = var
%20 = ne %19, 0:i32
blockpc %18 0 %20 1:i1
%21 = eq %19, 0:i32
blockpc %18 1 %21 1:i1
%22:i32 = var
%23 = add %22, -28:i32
%24:i32 = var
%25 = phi %18, %23, %24
%26 = slt 0:i32, %25
%27:i32 = var
pc %17 1:i1
pc %26 1:i1
pc %27 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = phi %1, %2, 29:i32
%4 = sub %0, %3
%5 = slt %2, 29:i32
blockpc %1 0 %5 1:i1
%6:i32 = zext %5
%7 = eq %6, 0:i32
blockpc %1 1 %7 1:i1
%8 = block 2
%9:i32 = var
%10 = ne %9, 0:i32
blockpc %8 0 %10 1:i1
%11 = eq %9, 0:i32
blockpc %8 1 %11 1:i1
%12:i32 = var
%13 = add %12, -28:i32
%14:i32 = var
%15 = phi %8, %13, %14
%16 = slt 0:i32, %15
%17:i64 = var
%18 = and %17, 9218868437227405312:i64
%19 = eq %18, 9218868437227405312:i64
%20:i32 = zext %19
%21 = eq %20, 0:i32
pc %16 1:i1
pc %21 1:i1
infer %4


; start LHS (in $27)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = phi %1, %2, 29:i32
%4 = sub %0, %3 (hasExternalUses)
%5 = slt 0:i32, %4
%6 = slt %2, 29:i32
blockpc %1 0 %6 1:i1
%7:i32 = zext %6
%8 = eq %7, 0:i32
blockpc %1 1 %8 1:i1
%9 = block 2
%10:i32 = var
%11 = ne %10, 0:i32
blockpc %9 0 %11 1:i1
%12 = eq %10, 0:i32
blockpc %9 1 %12 1:i1
%13:i32 = var
%14 = add %13, -28:i32
%15:i32 = var
%16 = phi %9, %14, %15
%17 = slt 0:i32, %16
%18:i64 = var
%19 = and %18, 9218868437227405312:i64
%20 = eq %19, 9218868437227405312:i64
%21:i32 = zext %20
%22 = eq %21, 0:i32
pc %17 1:i1
pc %22 1:i1
infer %5


; start LHS (in $27)
%0:i32 = var
%1 = slt %0, 0:i32
%2:i64 = var
%3 = and %2, 9218868437227405312:i64
%4 = eq %3, 9218868437227405312:i64
%5:i32 = zext %4
%6 = eq %5, 0:i32
pc %6 1:i1
infer %1


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = block 2
%3:i32 = var
%4 = phi %2, %3, 29:i32
%5 = sub %1, %4 (hasExternalUses)
%6 = block 2
%7:i32 = var
%8 = add %7, -28:i32 (hasExternalUses)
%9:i32 = var
%10 = phi %6, %8, %9
%11 = phi %0, %5, %10
%12 = slt %11, 0:i32
%13 = slt 0:i32, %10
blockpc %0 0 %13 1:i1
%14:i32 = zext %13
%15 = eq %14, 0:i32
blockpc %0 1 %15 1:i1
%16 = slt %3, 29:i32
blockpc %2 0 %16 1:i1
%17:i32 = zext %16
%18 = eq %17, 0:i32
blockpc %2 1 %18 1:i1
%19:i32 = var
%20 = ne %19, 0:i32
blockpc %6 0 %20 1:i1
%21 = eq %19, 0:i32
blockpc %6 1 %21 1:i1
%22:i64 = var
%23 = and %22, 9218868437227405312:i64
%24 = eq %23, 9218868437227405312:i64
%25:i32 = zext %24
%26 = eq %25, 0:i32
pc %26 1:i1
infer %12


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = phi %0, 6:i32, %1
%3 = add %2, 25:i32
%4 = slt %1, 0:i32
blockpc %0 0 %4 1:i1
%5:i32 = zext %4
%6 = eq %5, 0:i32
blockpc %0 1 %6 1:i1
%7 = block 2
%8 = block 2
%9:i32 = var
%10 = ne %9, 0:i32
blockpc %8 0 %10 1:i1
%11 = eq %9, 0:i32
blockpc %8 1 %11 1:i1
%12:i32 = var
%13 = add %12, -28:i32
%14:i32 = var
%15 = phi %8, %13, %14
%16 = slt 0:i32, %15
blockpc %7 0 %16 1:i1
%17:i32 = zext %16
%18 = eq %17, 0:i32
blockpc %7 1 %18 1:i1
%19:i32 = var
%20 = block 2
%21:i32 = var
%22 = slt %21, 29:i32
blockpc %20 0 %22 1:i1
%23:i32 = var
blockpc %20 1 %23 1:i1
%24 = phi %20, %21, 29:i32
%25 = sub %19, %24
%26 = phi %7, %25, %15
%27 = slt %26, 0:i32
%28:i32 = var
pc %27 1:i1
pc %28 1:i1
infer %3


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = phi %0, 6:i32, %1
%3 = add %2, 25:i32
%4 = sdiv %3, 9:i32
%5 = slt %1, 0:i32
blockpc %0 0 %5 1:i1
%6:i32 = zext %5
%7 = eq %6, 0:i32
blockpc %0 1 %7 1:i1
%8 = block 2
%9 = block 2
%10:i32 = var
%11 = ne %10, 0:i32
blockpc %9 0 %11 1:i1
%12 = eq %10, 0:i32
blockpc %9 1 %12 1:i1
%13:i32 = var
%14 = add %13, -28:i32
%15:i32 = var
%16 = phi %9, %14, %15
%17 = slt 0:i32, %16
blockpc %8 0 %17 1:i1
%18:i32 = zext %17
%19 = eq %18, 0:i32
blockpc %8 1 %19 1:i1
%20:i32 = var
%21 = block 2
%22:i32 = var
%23 = slt %22, 29:i32
blockpc %21 0 %23 1:i1
%24:i32 = var
blockpc %21 1 %24 1:i1
%25 = phi %21, %22, 29:i32
%26 = sub %20, %25
%27 = phi %8, %26, %16
%28 = slt %27, 0:i32
%29:i32 = var
pc %28 1:i1
pc %29 1:i1
infer %4


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = phi %0, 6:i32, %1
%3 = add %2, 25:i32
%4 = sdiv %3, 9:i32
%5 = add %4, 1:i32
%6 = slt %1, 0:i32
blockpc %0 0 %6 1:i1
%7:i32 = zext %6
%8 = eq %7, 0:i32
blockpc %0 1 %8 1:i1
%9 = block 2
%10 = block 2
%11:i32 = var
%12 = ne %11, 0:i32
blockpc %10 0 %12 1:i1
%13 = eq %11, 0:i32
blockpc %10 1 %13 1:i1
%14:i32 = var
%15 = add %14, -28:i32
%16:i32 = var
%17 = phi %10, %15, %16
%18 = slt 0:i32, %17
blockpc %9 0 %18 1:i1
%19:i32 = zext %18
%20 = eq %19, 0:i32
blockpc %9 1 %20 1:i1
%21:i32 = var
%22 = block 2
%23:i32 = var
%24 = slt %23, 29:i32
blockpc %22 0 %24 1:i1
%25:i32 = var
blockpc %22 1 %25 1:i1
%26 = phi %22, %23, 29:i32
%27 = sub %21, %26
%28 = phi %9, %27, %17
%29 = slt %28, 0:i32
%30:i32 = var
pc %29 1:i1
pc %30 1:i1
infer %5


; start LHS (in $27)
%0:i32 = var
%1 = or %0, 32:i32 (hasExternalUses)
%2 = eq %1, 102:i32
%3 = block 2
%4 = block 2
%5:i32 = var
%6 = ne %5, 0:i32
blockpc %4 0 %6 1:i1
%7 = eq %5, 0:i32
blockpc %4 1 %7 1:i1
%8:i32 = var
%9 = add %8, -28:i32
%10:i32 = var
%11 = phi %4, %9, %10
%12 = slt 0:i32, %11
blockpc %3 0 %12 1:i1
%13:i32 = zext %12
%14 = eq %13, 0:i32
blockpc %3 1 %14 1:i1
%15:i32 = var
%16 = block 2
%17:i32 = var
%18 = slt %17, 29:i32
blockpc %16 0 %18 1:i1
%19:i32 = zext %18
%20 = eq %19, 0:i32
blockpc %16 1 %20 1:i1
%21 = phi %16, %17, 29:i32
%22 = sub %15, %21
%23 = phi %3, %22, %11
%24 = slt %23, 0:i32
%25:i32 = var
pc %24 1:i1
pc %25 1:i1
infer %2


; start LHS (in $27)
%0:i32 = var
%1 = sub 0:i32, %0
%2 = block 2
%3 = block 2
%4:i32 = var
%5 = ne %4, 0:i32
blockpc %3 0 %5 1:i1
%6 = eq %4, 0:i32
blockpc %3 1 %6 1:i1
%7:i32 = var
%8 = add %7, -28:i32
%9:i32 = var
%10 = phi %3, %8, %9
%11 = slt 0:i32, %10
blockpc %2 0 %11 1:i1
%12:i32 = zext %11
%13 = eq %12, 0:i32
blockpc %2 1 %13 1:i1
%14:i32 = var
%15 = block 2
%16:i32 = var
%17 = slt %16, 29:i32
blockpc %15 0 %17 1:i1
%18:i32 = zext %17
%19 = eq %18, 0:i32
blockpc %15 1 %19 1:i1
%20 = phi %15, %16, 29:i32
%21 = sub %14, %20
%22 = phi %2, %21, %10
%23 = slt %22, 0:i32
%24:i32 = var
pc %23 1:i1
pc %24 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = sub 0:i32, %0 (hasExternalUses)
%2 = sle 9:i32, %1
%3 = block 2
%4 = block 2
%5:i32 = var
%6 = ne %5, 0:i32
blockpc %4 0 %6 1:i1
%7 = eq %5, 0:i32
blockpc %4 1 %7 1:i1
%8:i32 = var
%9 = add %8, -28:i32
%10:i32 = var
%11 = phi %4, %9, %10
%12 = slt 0:i32, %11
blockpc %3 0 %12 1:i1
%13:i32 = zext %12
%14 = eq %13, 0:i32
blockpc %3 1 %14 1:i1
%15:i32 = var
%16 = block 2
%17:i32 = var
%18 = slt %17, 29:i32
blockpc %16 0 %18 1:i1
%19:i32 = zext %18
%20 = eq %19, 0:i32
blockpc %16 1 %20 1:i1
%21 = phi %16, %17, 29:i32
%22 = sub %15, %21
%23 = phi %3, %22, %11
%24 = slt %23, 0:i32
%25:i32 = var
pc %24 1:i1
pc %25 1:i1
infer %2


; start LHS (in $27)
%0:i32 = var
%1:i32 = var
%2 = ult %0, %1
%3 = block 2
%4 = block 2
%5:i32 = var
%6 = ne %5, 0:i32
blockpc %4 0 %6 1:i1
%7 = eq %5, 0:i32
blockpc %4 1 %7 1:i1
%8:i32 = var
%9 = add %8, -28:i32
%10:i32 = var
%11 = phi %4, %9, %10
%12 = slt 0:i32, %11
blockpc %3 0 %12 1:i1
%13:i32 = zext %12
%14 = eq %13, 0:i32
blockpc %3 1 %14 1:i1
%15:i32 = var
%16 = block 2
%17:i32 = var
%18 = slt %17, 29:i32
blockpc %16 0 %18 1:i1
%19:i32 = zext %18
%20 = eq %19, 0:i32
blockpc %16 1 %20 1:i1
%21 = phi %16, %17, 29:i32
%22 = sub %15, %21
%23 = phi %3, %22, %11
%24 = slt %23, 0:i32
%25:i32 = var
pc %24 1:i1
pc %25 1:i1
infer %2


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = sub 0:i32, %1 (hasExternalUses)
%3 = phi %0, %2, 9:i32
%4 = shl 1:i32, %3
%5 = sle 9:i32, %2
blockpc %0 0 %5 1:i1
%6:i32 = zext %5
%7 = eq %6, 0:i32
blockpc %0 1 %7 1:i1
%8:i32 = var
%9:i32 = var
%10 = ult %8, %9
%11 = block 2
%12 = block 2
%13:i32 = var
%14 = ne %13, 0:i32
blockpc %12 0 %14 1:i1
%15 = eq %13, 0:i32
blockpc %12 1 %15 1:i1
%16:i32 = var
%17 = add %16, -28:i32
%18:i32 = var
%19 = phi %12, %17, %18
%20 = slt 0:i32, %19
blockpc %11 0 %20 1:i1
%21:i32 = zext %20
%22 = eq %21, 0:i32
blockpc %11 1 %22 1:i1
%23:i32 = var
%24 = block 2
%25:i32 = var
blockpc %24 0 %25 1:i1
%26:i32 = var
blockpc %24 1 %26 1:i1
%27:i32 = var
%28 = phi %24, %27, 29:i32
%29 = sub %23, %28
%30 = phi %11, %29, %19
%31 = slt %30, 0:i32
%32:i32 = var
pc %10 1:i1
pc %31 1:i1
pc %32 1:i1
infer %4


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = sub 0:i32, %1 (hasExternalUses)
%3 = phi %0, %2, 9:i32
%4 = shl 1:i32, %3
%5 = add %4, -1:i32
%6 = sle 9:i32, %2
blockpc %0 0 %6 1:i1
%7:i32 = zext %6
%8 = eq %7, 0:i32
blockpc %0 1 %8 1:i1
%9:i32 = var
%10:i32 = var
%11 = ult %9, %10
%12 = block 2
%13 = block 2
%14:i32 = var
%15 = ne %14, 0:i32
blockpc %13 0 %15 1:i1
%16 = eq %14, 0:i32
blockpc %13 1 %16 1:i1
%17:i32 = var
%18 = add %17, -28:i32
%19:i32 = var
%20 = phi %13, %18, %19
%21 = slt 0:i32, %20
blockpc %12 0 %21 1:i1
%22:i32 = zext %21
%23 = eq %22, 0:i32
blockpc %12 1 %23 1:i1
%24:i32 = var
%25 = phi %12, %24, %20
%26 = slt %25, 0:i32
%27:i32 = var
pc %11 1:i1
pc %26 1:i1
pc %27 1:i1
infer %5


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = sub 0:i32, %1 (hasExternalUses)
%3 = phi %0, %2, 9:i32
%4 = lshr 1000000000:i32, %3
%5 = sle 9:i32, %2
blockpc %0 0 %5 1:i1
%6:i32 = zext %5
%7 = eq %6, 0:i32
blockpc %0 1 %7 1:i1
%8:i32 = var
%9:i32 = var
%10 = ult %8, %9
%11 = block 2
%12 = block 2
%13:i32 = var
%14 = ne %13, 0:i32
blockpc %12 0 %14 1:i1
%15 = eq %13, 0:i32
blockpc %12 1 %15 1:i1
%16:i32 = var
%17 = add %16, -28:i32
%18:i32 = var
%19 = phi %12, %17, %18
%20 = slt 0:i32, %19
blockpc %11 0 %20 1:i1
%21:i32 = zext %20
%22 = eq %21, 0:i32
blockpc %11 1 %22 1:i1
%23:i32 = var
%24 = block 2
%25:i32 = var
blockpc %24 0 %25 1:i1
%26:i32 = var
blockpc %24 1 %26 1:i1
%27:i32 = var
%28 = phi %24, %27, 29:i32
%29 = sub %23, %28
%30 = phi %11, %29, %19
%31 = slt %30, 0:i32
%32:i32 = var
pc %10 1:i1
pc %31 1:i1
pc %32 1:i1
infer %4


; start LHS (in $27)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = sub 0:i32, %2 (hasExternalUses)
%4 = phi %1, %3, 9:i32
%5 = lshr %0, %4
%6 = sle 9:i32, %3
blockpc %1 0 %6 1:i1
%7:i32 = zext %6
%8 = eq %7, 0:i32
blockpc %1 1 %8 1:i1
%9:i32 = var
%10:i32 = var
%11 = ult %9, %10
%12 = block 2
%13 = block 2
%14:i32 = var
%15 = ne %14, 0:i32
blockpc %13 0 %15 1:i1
%16 = eq %14, 0:i32
blockpc %13 1 %16 1:i1
%17:i32 = var
%18 = add %17, -28:i32
%19:i32 = var
%20 = phi %13, %18, %19
%21 = slt 0:i32, %20
blockpc %12 0 %21 1:i1
%22:i32 = zext %21
%23 = eq %22, 0:i32
blockpc %12 1 %23 1:i1
%24:i32 = var
%25 = phi %12, %24, %20
%26 = slt %25, 0:i32
%27:i32 = var
pc %11 1:i1
pc %26 1:i1
pc %27 1:i1
infer %5


; start LHS (in $27)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = sub 0:i32, %2 (hasExternalUses)
%4 = phi %1, %3, 9:i32
%5 = lshr %0, %4
%6:i32 = var
%7 = add %5, %6
%8 = sle 9:i32, %3
blockpc %1 0 %8 1:i1
%9:i32 = zext %8
%10 = eq %9, 0:i32
blockpc %1 1 %10 1:i1
%11:i32 = var
%12:i32 = var
%13 = ult %11, %12
%14 = block 2
%15 = block 2
%16:i32 = var
%17 = ne %16, 0:i32
blockpc %15 0 %17 1:i1
%18 = eq %16, 0:i32
blockpc %15 1 %18 1:i1
%19:i32 = var
%20 = add %19, -28:i32
%21:i32 = var
%22 = phi %15, %20, %21
%23 = slt 0:i32, %22
blockpc %14 0 %23 1:i1
%24:i32 = zext %23
%25 = eq %24, 0:i32
blockpc %14 1 %25 1:i1
%26:i32 = var
%27 = phi %14, %26, %22
%28 = slt %27, 0:i32
%29:i32 = var
pc %13 1:i1
pc %28 1:i1
pc %29 1:i1
infer %7


; start LHS (in $27)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = sub 0:i32, %2 (hasExternalUses)
%4 = phi %1, %3, 9:i32
%5 = shl 1:i32, %4
%6 = add %5, -1:i32
%7 = and %0, %6
%8 = sle 9:i32, %3
blockpc %1 0 %8 1:i1
%9:i32 = zext %8
%10 = eq %9, 0:i32
blockpc %1 1 %10 1:i1
%11:i32 = var
%12:i32 = var
%13 = ult %11, %12
%14 = block 2
%15 = block 2
%16:i32 = var
%17 = ne %16, 0:i32
blockpc %15 0 %17 1:i1
%18 = eq %16, 0:i32
blockpc %15 1 %18 1:i1
%19:i32 = var
%20 = add %19, -28:i32
%21:i32 = var
%22 = phi %15, %20, %21
%23 = slt 0:i32, %22
blockpc %14 0 %23 1:i1
%24:i32 = zext %23
%25 = eq %24, 0:i32
blockpc %14 1 %25 1:i1
%26:i32 = var
%27 = phi %14, %26, %22
%28 = slt %27, 0:i32
%29:i32 = var
pc %13 1:i1
pc %28 1:i1
pc %29 1:i1
infer %7


; start LHS (in $27)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = sub 0:i32, %2 (hasExternalUses)
%4 = phi %1, %3, 9:i32
%5 = shl 1:i32, %4
%6 = add %5, -1:i32
%7 = and %0, %6
%8 = lshr 1000000000:i32, %4
%9 = mul %7, %8
%10 = sle 9:i32, %3
blockpc %1 0 %10 1:i1
%11:i32 = zext %10
%12 = eq %11, 0:i32
blockpc %1 1 %12 1:i1
%13:i32 = var
%14:i32 = var
%15 = ult %13, %14
%16 = block 2
%17 = block 2
%18:i32 = var
%19 = ne %18, 0:i32
blockpc %17 0 %19 1:i1
%20 = eq %18, 0:i32
blockpc %17 1 %20 1:i1
%21:i32 = var
%22 = add %21, -28:i32
%23:i32 = var
%24 = phi %17, %22, %23
%25 = slt 0:i32, %24
blockpc %16 0 %25 1:i1
%26:i32 = var
blockpc %16 1 %26 1:i1
%27:i32 = var
%28 = phi %16, %27, %24
%29 = slt %28, 0:i32
%30:i32 = var
pc %15 1:i1
pc %29 1:i1
pc %30 1:i1
infer %9


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 4:i32
%2:i32 = var
%3:i32 = var
%4 = ult %2, %3
%5 = block 2
%6 = block 2
%7:i32 = var
%8 = ne %7, 0:i32
blockpc %6 0 %8 1:i1
%9 = eq %7, 0:i32
blockpc %6 1 %9 1:i1
%10:i32 = var
%11 = add %10, -28:i32
%12:i32 = var
%13 = phi %6, %11, %12
%14 = slt 0:i32, %13
blockpc %5 0 %14 1:i1
%15:i32 = zext %14
%16 = eq %15, 0:i32
blockpc %5 1 %16 1:i1
%17:i32 = var
%18 = block 2
%19:i32 = var
%20 = slt %19, 29:i32
blockpc %18 0 %20 1:i1
%21:i32 = zext %20
%22 = eq %21, 0:i32
blockpc %18 1 %22 1:i1
%23 = phi %18, %19, 29:i32
%24 = sub %17, %23
%25 = phi %5, %24, %13
%26 = slt %25, 0:i32
%27:i32 = var
pc %4 1:i1
pc %26 1:i1
pc %27 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 4:i32 (hasExternalUses)
%2:i32 = var
%3 = ult %1, %2
%4:i32 = var
%5 = ult %4, %2
%6 = block 2
%7 = block 2
%8:i32 = var
%9 = ne %8, 0:i32
blockpc %7 0 %9 1:i1
%10 = eq %8, 0:i32
blockpc %7 1 %10 1:i1
%11:i32 = var
%12 = add %11, -28:i32
%13:i32 = var
%14 = phi %7, %12, %13
%15 = slt 0:i32, %14
blockpc %6 0 %15 1:i1
%16:i32 = zext %15
%17 = eq %16, 0:i32
blockpc %6 1 %17 1:i1
%18:i32 = var
%19 = block 2
%20:i32 = var
%21 = slt %20, 29:i32
blockpc %19 0 %21 1:i1
%22:i32 = zext %21
%23 = eq %22, 0:i32
blockpc %19 1 %23 1:i1
%24 = phi %19, %20, 29:i32
%25 = sub %18, %24
%26 = phi %6, %25, %14
%27 = slt %26, 0:i32
%28:i32 = var
pc %5 1:i1
pc %27 1:i1
pc %28 1:i1
infer %3


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 4:i32
%2:i32 = var
%3 = ult %0, %2
%4 = block 2
%5 = block 2
%6:i32 = var
%7 = ne %6, 0:i32
blockpc %5 0 %7 1:i1
%8 = eq %6, 0:i32
blockpc %5 1 %8 1:i1
%9:i32 = var
%10 = add %9, -28:i32
%11:i32 = var
%12 = phi %5, %10, %11
%13 = slt 0:i32, %12
blockpc %4 0 %13 1:i1
%14:i32 = zext %13
%15 = eq %14, 0:i32
blockpc %4 1 %15 1:i1
%16:i32 = var
%17 = block 2
%18:i32 = var
%19 = slt %18, 29:i32
blockpc %17 0 %19 1:i1
%20:i32 = zext %19
%21 = eq %20, 0:i32
blockpc %17 1 %21 1:i1
%22 = phi %17, %18, 29:i32
%23 = sub %16, %22
%24 = phi %4, %23, %12
%25 = slt %24, 0:i32
%26:i32 = var
pc %3 1:i1
pc %25 1:i1
pc %26 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = eq %0, 0:i32
%2:i32 = var
%3:i32 = var
%4 = ult %2, %3
%5 = block 2
%6 = block 2
%7:i32 = var
%8 = ne %7, 0:i32
blockpc %6 0 %8 1:i1
%9 = eq %7, 0:i32
blockpc %6 1 %9 1:i1
%10:i32 = var
%11 = add %10, -28:i32
%12:i32 = var
%13 = phi %6, %11, %12
%14 = slt 0:i32, %13
blockpc %5 0 %14 1:i1
%15:i32 = zext %14
%16 = eq %15, 0:i32
blockpc %5 1 %16 1:i1
%17:i32 = var
%18 = block 2
%19:i32 = var
%20 = slt %19, 29:i32
blockpc %18 0 %20 1:i1
%21:i32 = zext %20
%22 = eq %21, 0:i32
blockpc %18 1 %22 1:i1
%23 = phi %18, %19, 29:i32
%24 = sub %17, %23
%25 = phi %5, %24, %13
%26 = slt %25, 0:i32
%27:i32 = var
pc %4 1:i1
pc %26 1:i1
pc %27 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 4:i32
%2:i32 = var
%3 = block 2
%4:i32 = var
%5 = sub 0:i32, %4
%6 = sle 9:i32, %5
blockpc %3 0 %6 1:i1
%7:i32 = zext %6
%8 = eq %7, 0:i32
blockpc %3 1 %8 1:i1
%9 = phi %3, %5, 9:i32
%10 = shl 1:i32, %9
%11 = add %10, -1:i32
%12 = and %2, %11
%13 = lshr 1000000000:i32, %9
%14 = mul %12, %13
%15 = ne %14, 0:i32
%16:i32 = var
%17 = ult %16, %0
%18 = block 2
%19 = block 2
%20:i32 = var
%21 = ne %20, 0:i32
blockpc %19 0 %21 1:i1
%22 = eq %20, 0:i32
blockpc %19 1 %22 1:i1
%23:i32 = var
%24 = add %23, -28:i32
%25:i32 = var
%26 = phi %19, %24, %25
%27 = slt 0:i32, %26
blockpc %18 0 %27 1:i1
%28:i32 = var
blockpc %18 1 %28 1:i1
%29:i32 = var
%30 = phi %18, %29, %26
%31 = slt %30, 0:i32
%32:i32 = var
pc %15 1:i1
pc %17 1:i1
pc %31 1:i1
pc %32 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 4:i32
%2:i32 = var
%3 = ult %0, %2
%4:i32 = zext %3
%5 = eq %4, 0:i32
%6 = block 2
%7 = block 2
%8:i32 = var
%9 = ne %8, 0:i32
blockpc %7 0 %9 1:i1
%10 = eq %8, 0:i32
blockpc %7 1 %10 1:i1
%11:i32 = var
%12 = add %11, -28:i32
%13:i32 = var
%14 = phi %7, %12, %13
%15 = slt 0:i32, %14
blockpc %6 0 %15 1:i1
%16:i32 = zext %15
%17 = eq %16, 0:i32
blockpc %6 1 %17 1:i1
%18:i32 = var
%19 = block 2
%20:i32 = var
%21 = slt %20, 29:i32
blockpc %19 0 %21 1:i1
%22:i32 = zext %21
%23 = eq %22, 0:i32
blockpc %19 1 %23 1:i1
%24 = phi %19, %20, 29:i32
%25 = sub %18, %24
%26 = phi %6, %25, %14
%27 = slt %26, 0:i32
%28:i32 = var
pc %5 1:i1
pc %27 1:i1
pc %28 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = eq %0, 0:i32
%2:i32 = var
%3:i32 = var
%4 = ult %2, %3
%5:i32 = zext %4
%6 = eq %5, 0:i32
%7 = block 2
%8 = block 2
%9:i32 = var
%10 = ne %9, 0:i32
blockpc %8 0 %10 1:i1
%11 = eq %9, 0:i32
blockpc %8 1 %11 1:i1
%12:i32 = var
%13 = add %12, -28:i32
%14:i32 = var
%15 = phi %8, %13, %14
%16 = slt 0:i32, %15
blockpc %7 0 %16 1:i1
%17:i32 = zext %16
%18 = eq %17, 0:i32
blockpc %7 1 %18 1:i1
%19:i32 = var
%20 = block 2
%21:i32 = var
%22 = slt %21, 29:i32
blockpc %20 0 %22 1:i1
%23:i32 = zext %22
%24 = eq %23, 0:i32
blockpc %20 1 %24 1:i1
%25 = phi %20, %21, 29:i32
%26 = sub %19, %25
%27 = phi %7, %26, %15
%28 = slt %27, 0:i32
%29:i32 = var
pc %6 1:i1
pc %28 1:i1
pc %29 1:i1
infer %1


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = phi %0, 6:i32, %1
%3 = add %2, 25:i32
%4 = sdiv %3, 9:i32
%5 = add %4, 1:i32 (hasExternalUses)
%6 = shl %5, 2:i32
%7 = slt %1, 0:i32
blockpc %0 0 %7 1:i1
%8:i32 = zext %7
%9 = eq %8, 0:i32
blockpc %0 1 %9 1:i1
%10 = block 2
%11 = block 2
%12:i32 = var
%13 = ne %12, 0:i32
blockpc %11 0 %13 1:i1
%14 = eq %12, 0:i32
blockpc %11 1 %14 1:i1
%15:i32 = var
%16 = add %15, -28:i32
%17:i32 = var
%18 = phi %11, %16, %17
%19 = slt 0:i32, %18
blockpc %10 0 %19 1:i1
%20:i32 = zext %19
%21 = eq %20, 0:i32
blockpc %10 1 %21 1:i1
%22:i32 = var
%23 = block 2
%24:i32 = var
blockpc %23 0 %24 1:i1
%25:i32 = var
blockpc %23 1 %25 1:i1
%26:i32 = var
%27 = phi %23, %26, 29:i32
%28 = sub %22, %27
%29 = phi %10, %28, %18
%30 = slt %29, 0:i32
%31:i32 = var
pc %30 1:i1
pc %31 1:i1
infer %6


; start LHS (in $27)
%0 = block 2
%1 = block 2
%2:i32 = var
%3 = add %2, 8:i32 (hasExternalUses)
%4 = add %3, 288:i32 (hasExternalUses)
%5 = phi %1, %3, %4
%6 = block 2
%7 = block 2
%8:i32 = var
%9 = add %8, 4:i32 (hasExternalUses)
%10 = phi %7, %8, %9
%11 = block 2
%12 = add %8, 4:i32 (hasExternalUses)
%13 = phi %11, %8, %12
%14 = phi %6, %10, %13
%15 = phi %0, %5, %14
%16 = block 2
%17:i32 = var
%18 = phi %16, 6:i32, %17
%19 = add %18, 25:i32
%20 = sdiv %19, 9:i32
%21 = add %20, 1:i32 (hasExternalUses)
%22 = shl %21, 2:i32
%23 = add %15, %22
%24:i32 = var
%25 = or %24, 32:i32
%26 = eq %25, 102:i32
%27 = ne %26, 0:i32
blockpc %0 0 %27 1:i1
%28 = eq %26, 0:i32
blockpc %0 1 %28 1:i1
%29:i32 = var
blockpc %1 0 %29 1:i1
%30:i32 = var
blockpc %1 1 %30 1:i1
%31:i32 = var
blockpc %6 0 %31 1:i1
%32:i32 = var
blockpc %6 1 %32 1:i1
%33:i32 = var
blockpc %7 0 %33 1:i1
%34:i32 = var
blockpc %7 1 %34 1:i1
%35:i32 = var
blockpc %11 0 %35 1:i1
%36:i32 = var
blockpc %11 1 %36 1:i1
%37:i32 = var
blockpc %16 0 %37 1:i1
%38:i32 = var
blockpc %16 1 %38 1:i1
%39:i32 = var
%40:i32 = var
pc %39 1:i1
pc %40 1:i1
infer %23


; start LHS (in $27)
%0 = block 2
%1 = block 2
%2:i32 = var
%3 = add %2, 4:i32 (hasExternalUses)
%4 = phi %1, %2, %3
%5 = phi %0, %4, %2
%6 = block 2
%7 = block 2
%8:i32 = var
%9 = add %8, 8:i32 (hasExternalUses)
%10 = add %9, 288:i32 (hasExternalUses)
%11 = phi %7, %9, %10
%12 = block 2
%13:i32 = var
%14 = add %13, 4:i32 (hasExternalUses)
%15 = phi %12, %13, %14
%16 = block 2
%17 = add %13, 4:i32 (hasExternalUses)
%18 = phi %16, %13, %17
%19 = phi %0, %15, %18
%20 = phi %6, %11, %19
%21 = sub %5, %20
%22 = ult %13, %2
blockpc %0 0 %22 1:i1
%23:i32 = zext %22
%24 = eq %23, 0:i32
blockpc %0 1 %24 1:i1
%25:i32 = var
%26 = block 2
%27:i32 = var
%28 = sle 9:i32, %27
blockpc %26 0 %28 1:i1
%29:i32 = var
blockpc %26 1 %29 1:i1
%30 = phi %26, %27, 9:i32
%31 = shl 1:i32, %30
%32 = add %31, -1:i32
%33 = and %25, %32
%34:i32 = var
%35 = mul %33, %34
%36 = ne %35, 0:i32
blockpc %1 0 %36 1:i1
%37:i32 = var
blockpc %1 1 %37 1:i1
%38:i32 = var
blockpc %6 0 %38 1:i1
%39:i32 = var
blockpc %6 1 %39 1:i1
%40:i32 = var
blockpc %7 0 %40 1:i1
%41:i32 = var
blockpc %7 1 %41 1:i1
%42:i32 = var
blockpc %12 0 %42 1:i1
%43:i32 = var
blockpc %12 1 %43 1:i1
%44:i32 = var
blockpc %16 0 %44 1:i1
%45:i32 = var
blockpc %16 1 %45 1:i1
%46:i32 = var
%47:i32 = var
pc %46 1:i1
pc %47 1:i1
infer %21


; start LHS (in $27)
%0 = block 2
%1 = block 2
%2:i32 = var
%3 = add %2, 4:i32 (hasExternalUses)
%4 = phi %1, %2, %3
%5 = phi %0, %4, %2
%6 = block 2
%7 = block 2
%8:i32 = var
%9 = add %8, 8:i32 (hasExternalUses)
%10 = add %9, 288:i32 (hasExternalUses)
%11 = phi %7, %9, %10
%12 = block 2
%13:i32 = var
%14 = add %13, 4:i32 (hasExternalUses)
%15 = phi %12, %13, %14
%16 = block 2
%17 = add %13, 4:i32 (hasExternalUses)
%18 = phi %16, %13, %17
%19 = phi %0, %15, %18
%20 = phi %6, %11, %19
%21 = sub %5, %20
%22 = ashr %21, 2:i32
%23 = ult %13, %2
blockpc %0 0 %23 1:i1
%24:i32 = zext %23
%25 = eq %24, 0:i32
blockpc %0 1 %25 1:i1
%26:i32 = var
%27 = block 2
%28:i32 = var
blockpc %27 0 %28 1:i1
%29:i32 = var
blockpc %27 1 %29 1:i1
%30:i32 = var
%31 = phi %27, %30, 9:i32
%32 = shl 1:i32, %31
%33 = add %32, -1:i32
%34 = and %26, %33
%35:i32 = var
%36 = mul %34, %35
%37 = ne %36, 0:i32
blockpc %1 0 %37 1:i1
%38:i32 = var
blockpc %1 1 %38 1:i1
%39:i32 = var
blockpc %6 0 %39 1:i1
%40:i32 = var
blockpc %6 1 %40 1:i1
%41:i32 = var
blockpc %7 0 %41 1:i1
%42:i32 = var
blockpc %7 1 %42 1:i1
%43:i32 = var
blockpc %12 0 %43 1:i1
%44:i32 = var
blockpc %12 1 %44 1:i1
%45:i32 = var
blockpc %16 0 %45 1:i1
%46:i32 = var
blockpc %16 1 %46 1:i1
%47:i32 = var
%48:i32 = var
pc %47 1:i1
pc %48 1:i1
infer %22


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = phi %0, 6:i32, %1
%3 = add %2, 25:i32
%4 = sdiv %3, 9:i32
%5 = add %4, 1:i32 (hasExternalUses)
%6 = block 2
%7 = block 2
%8:i32 = var
%9 = add %8, 4:i32 (hasExternalUses)
%10 = phi %7, %8, %9
%11 = phi %6, %10, %8
%12 = block 2
%13 = block 2
%14:i32 = var
%15 = add %14, 8:i32 (hasExternalUses)
%16 = add %15, 288:i32 (hasExternalUses)
%17 = phi %13, %15, %16
%18 = block 2
%19:i32 = var
%20 = add %19, 4:i32 (hasExternalUses)
%21 = phi %18, %19, %20
%22 = block 2
%23 = add %19, 4:i32 (hasExternalUses)
%24 = phi %22, %19, %23
%25 = phi %6, %21, %24
%26 = phi %12, %17, %25
%27 = sub %11, %26
%28 = ashr %27, 2:i32
%29 = slt %5, %28
%30:i32 = var
blockpc %0 0 %30 1:i1
%31:i32 = var
blockpc %0 1 %31 1:i1
%32:i32 = var
blockpc %6 0 %32 1:i1
%33:i32 = var
blockpc %6 1 %33 1:i1
%34:i32 = var
blockpc %7 0 %34 1:i1
%35:i32 = var
blockpc %7 1 %35 1:i1
%36:i32 = var
blockpc %12 0 %36 1:i1
%37:i32 = var
blockpc %12 1 %37 1:i1
%38:i32 = var
blockpc %13 0 %38 1:i1
%39:i32 = var
blockpc %13 1 %39 1:i1
%40:i32 = var
blockpc %18 0 %40 1:i1
%41:i32 = var
blockpc %18 1 %41 1:i1
%42:i32 = var
blockpc %22 0 %42 1:i1
%43:i32 = var
blockpc %22 1 %43 1:i1
%44:i32 = var
%45:i32 = var
pc %44 1:i1
pc %45 1:i1
infer %29


; start LHS (in $27)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = sub 0:i32, %2 (hasExternalUses)
%4 = phi %1, %3, 9:i32
%5 = add %0, %4
%6 = sle 9:i32, %3
blockpc %1 0 %6 1:i1
%7:i32 = zext %6
%8 = eq %7, 0:i32
blockpc %1 1 %8 1:i1
%9 = block 2
%10 = block 2
%11:i32 = var
%12 = ne %11, 0:i32
blockpc %10 0 %12 1:i1
%13 = eq %11, 0:i32
blockpc %10 1 %13 1:i1
%14:i32 = var
%15 = add %14, -28:i32
%16:i32 = var
%17 = phi %10, %15, %16
%18 = slt 0:i32, %17
blockpc %9 0 %18 1:i1
%19:i32 = zext %18
%20 = eq %19, 0:i32
blockpc %9 1 %20 1:i1
%21:i32 = var
%22 = block 2
%23:i32 = var
%24 = slt %23, 29:i32
blockpc %22 0 %24 1:i1
%25:i32 = var
blockpc %22 1 %25 1:i1
%26 = phi %22, %23, 29:i32
%27 = sub %21, %26
%28 = phi %9, %27, %17
%29 = slt %28, 0:i32
%30:i32 = var
pc %29 1:i1
pc %30 1:i1
infer %5


; start LHS (in $27)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = sub 0:i32, %2 (hasExternalUses)
%4 = phi %1, %3, 9:i32
%5 = add %0, %4 (hasExternalUses)
%6 = slt %5, 0:i32
%7 = sle 9:i32, %3
blockpc %1 0 %7 1:i1
%8:i32 = zext %7
%9 = eq %8, 0:i32
blockpc %1 1 %9 1:i1
%10 = block 2
%11 = block 2
%12:i32 = var
%13 = ne %12, 0:i32
blockpc %11 0 %13 1:i1
%14 = eq %12, 0:i32
blockpc %11 1 %14 1:i1
%15:i32 = var
%16 = add %15, -28:i32
%17:i32 = var
%18 = phi %11, %16, %17
%19 = slt 0:i32, %18
blockpc %10 0 %19 1:i1
%20:i32 = zext %19
%21 = eq %20, 0:i32
blockpc %10 1 %21 1:i1
%22:i32 = var
%23 = block 2
%24:i32 = var
blockpc %23 0 %24 1:i1
%25:i32 = var
blockpc %23 1 %25 1:i1
%26:i32 = var
%27 = phi %23, %26, 29:i32
%28 = sub %22, %27
%29 = phi %10, %28, %18
%30 = slt %29, 0:i32
%31:i32 = var
pc %30 1:i1
pc %31 1:i1
infer %6


; start LHS (in $27)
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4 = add %3, 4:i32 (hasExternalUses)
%5 = phi %2, %3, %4
%6 = block 2
%7 = add %3, 4:i32 (hasExternalUses)
%8 = phi %6, %3, %7
%9 = phi %1, %5, %8
%10 = block 2
%11 = block 2
%12:i32 = var
%13 = block 2
%14 = add %12, -4:i32 (hasExternalUses)
%15 = phi %13, %12, %14
%16 = phi %11, %12, %15
%17 = block 2
%18:i32 = var
%19 = add %18, 8:i32 (hasExternalUses)
%20 = add %19, 288:i32 (hasExternalUses)
%21 = phi %17, %19, %20
%22 = phi %10, %16, %21
%23 = phi %0, %9, %22
%24 = block 2
%25 = block 2
%26:i32 = var
%27 = add %26, 4:i32 (hasExternalUses)
%28 = phi %25, %26, %27
%29 = phi %1, %28, %26
%30:i32 = var
%31 = phi %24, %29, %30
%32:i32 = var
%33:i32 = var
%34 = phi %10, %32, %33
%35 = phi %0, %31, %34
%36 = ult %23, %35
%37:i32 = var
blockpc %0 0 %37 1:i1
%38:i32 = var
blockpc %0 1 %38 1:i1
%39:i32 = var
blockpc %1 0 %39 1:i1
%40:i32 = var
blockpc %1 1 %40 1:i1
%41:i32 = var
blockpc %2 0 %41 1:i1
%42:i32 = var
blockpc %2 1 %42 1:i1
%43:i32 = var
blockpc %6 0 %43 1:i1
%44:i32 = var
blockpc %6 1 %44 1:i1
%45:i32 = var
blockpc %10 0 %45 1:i1
%46:i32 = var
blockpc %10 1 %46 1:i1
%47:i32 = var
blockpc %11 0 %47 1:i1
%48:i32 = var
blockpc %11 1 %48 1:i1
%49:i32 = var
blockpc %13 0 %49 1:i1
%50:i32 = var
blockpc %13 1 %50 1:i1
%51:i32 = var
blockpc %17 0 %51 1:i1
%52:i32 = var
blockpc %17 1 %52 1:i1
%53:i32 = var
blockpc %24 0 %53 1:i1
%54:i32 = var
blockpc %24 1 %54 1:i1
%55:i32 = var
blockpc %25 0 %55 1:i1
%56:i32 = var
blockpc %25 1 %56 1:i1
%57:i32 = var
pc %57 1:i1
infer %36


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = add %1, 8:i32 (hasExternalUses)
%3 = add %2, 288:i32 (hasExternalUses)
%4 = phi %0, %2, %3
%5 = block 2
%6 = block 2
%7 = block 2
%8:i32 = var
%9 = add %8, 4:i32 (hasExternalUses)
%10 = phi %7, %8, %9
%11 = block 2
%12 = add %8, 4:i32 (hasExternalUses)
%13 = phi %11, %8, %12
%14 = phi %6, %10, %13
%15 = block 2
%16 = block 2
%17:i32 = var
%18 = block 2
%19 = add %17, -4:i32 (hasExternalUses)
%20 = phi %18, %17, %19
%21 = phi %16, %17, %20
%22 = phi %15, %21, %4
%23 = phi %5, %14, %22
%24 = sub %4, %23
%25 = block 2
%26:i32 = var
%27 = ne %26, 0:i32
blockpc %25 0 %27 1:i1
%28 = eq %26, 0:i32
blockpc %25 1 %28 1:i1
%29:i32 = var
%30:i32 = var
%31 = phi %25, %29, %30
%32 = slt %31, 0:i32
blockpc %0 0 %32 1:i1
%33:i32 = var
blockpc %0 1 %33 1:i1
%34:i32 = var
blockpc %5 0 %34 1:i1
%35:i32 = var
blockpc %5 1 %35 1:i1
%36:i32 = var
blockpc %6 0 %36 1:i1
%37:i32 = var
blockpc %6 1 %37 1:i1
%38:i32 = var
blockpc %7 0 %38 1:i1
%39:i32 = var
blockpc %7 1 %39 1:i1
%40:i32 = var
blockpc %11 0 %40 1:i1
%41:i32 = var
blockpc %11 1 %41 1:i1
%42:i32 = var
blockpc %15 0 %42 1:i1
%43:i32 = var
blockpc %15 1 %43 1:i1
%44:i32 = var
blockpc %16 0 %44 1:i1
%45:i32 = var
blockpc %16 1 %45 1:i1
%46:i32 = var
blockpc %18 0 %46 1:i1
%47:i32 = var
blockpc %18 1 %47 1:i1
%48:i32 = var
%49:i32 = var
pc %48 1:i1
pc %49 1:i1
infer %24


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = add %1, 8:i32 (hasExternalUses)
%3 = add %2, 288:i32 (hasExternalUses)
%4 = phi %0, %2, %3
%5 = block 2
%6 = block 2
%7 = block 2
%8:i32 = var
%9 = add %8, 4:i32 (hasExternalUses)
%10 = phi %7, %8, %9
%11 = block 2
%12 = add %8, 4:i32 (hasExternalUses)
%13 = phi %11, %8, %12
%14 = phi %6, %10, %13
%15 = block 2
%16 = block 2
%17:i32 = var
%18 = block 2
%19 = add %17, -4:i32 (hasExternalUses)
%20 = phi %18, %17, %19
%21 = phi %16, %17, %20
%22 = phi %15, %21, %4
%23 = phi %5, %14, %22
%24 = sub %4, %23
%25 = ashr %24, 2:i32
%26 = block 2
%27:i32 = var
%28 = ne %27, 0:i32
blockpc %26 0 %28 1:i1
%29:i32 = var
blockpc %26 1 %29 1:i1
%30:i32 = var
%31:i32 = var
%32 = phi %26, %30, %31
%33 = slt %32, 0:i32
blockpc %0 0 %33 1:i1
%34:i32 = var
blockpc %0 1 %34 1:i1
%35:i32 = var
blockpc %5 0 %35 1:i1
%36:i32 = var
blockpc %5 1 %36 1:i1
%37:i32 = var
blockpc %6 0 %37 1:i1
%38:i32 = var
blockpc %6 1 %38 1:i1
%39:i32 = var
blockpc %7 0 %39 1:i1
%40:i32 = var
blockpc %7 1 %40 1:i1
%41:i32 = var
blockpc %11 0 %41 1:i1
%42:i32 = var
blockpc %11 1 %42 1:i1
%43:i32 = var
blockpc %15 0 %43 1:i1
%44:i32 = var
blockpc %15 1 %44 1:i1
%45:i32 = var
blockpc %16 0 %45 1:i1
%46:i32 = var
blockpc %16 1 %46 1:i1
%47:i32 = var
blockpc %18 0 %47 1:i1
%48:i32 = var
blockpc %18 1 %48 1:i1
%49:i32 = var
%50:i32 = var
pc %49 1:i1
pc %50 1:i1
infer %25


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = add %1, 8:i32 (hasExternalUses)
%3 = add %2, 288:i32 (hasExternalUses)
%4 = phi %0, %2, %3
%5 = block 2
%6 = block 2
%7 = block 2
%8:i32 = var
%9 = add %8, 4:i32 (hasExternalUses)
%10 = phi %7, %8, %9
%11 = block 2
%12 = add %8, 4:i32 (hasExternalUses)
%13 = phi %11, %8, %12
%14 = phi %6, %10, %13
%15 = block 2
%16 = block 2
%17:i32 = var
%18 = block 2
%19 = add %17, -4:i32 (hasExternalUses)
%20 = phi %18, %17, %19
%21 = phi %16, %17, %20
%22 = phi %15, %21, %4
%23 = phi %5, %14, %22
%24 = sub %4, %23
%25 = ashr %24, 2:i32
%26 = mul %25, 9:i32
%27 = block 2
%28:i32 = var
%29 = ne %28, 0:i32
blockpc %27 0 %29 1:i1
%30:i32 = var
blockpc %27 1 %30 1:i1
%31:i32 = var
%32:i32 = var
%33 = phi %27, %31, %32
%34 = slt %33, 0:i32
blockpc %0 0 %34 1:i1
%35:i32 = var
blockpc %0 1 %35 1:i1
%36:i32 = var
blockpc %5 0 %36 1:i1
%37:i32 = var
blockpc %5 1 %37 1:i1
%38:i32 = var
blockpc %6 0 %38 1:i1
%39:i32 = var
blockpc %6 1 %39 1:i1
%40:i32 = var
blockpc %7 0 %40 1:i1
%41:i32 = var
blockpc %7 1 %41 1:i1
%42:i32 = var
blockpc %11 0 %42 1:i1
%43:i32 = var
blockpc %11 1 %43 1:i1
%44:i32 = var
blockpc %15 0 %44 1:i1
%45:i32 = var
blockpc %15 1 %45 1:i1
%46:i32 = var
blockpc %16 0 %46 1:i1
%47:i32 = var
blockpc %16 1 %47 1:i1
%48:i32 = var
blockpc %18 0 %48 1:i1
%49:i32 = var
blockpc %18 1 %49 1:i1
%50:i32 = var
%51:i32 = var
pc %50 1:i1
pc %51 1:i1
infer %26


; start LHS (in $27)
%0:i32 = var
%1 = ule 10:i32, %0
%2 = block 2
%3 = block 2
%4 = block 2
%5:i32 = var
blockpc %4 0 %5 1:i1
%6:i32 = var
blockpc %4 1 %6 1:i1
%7:i32 = var
%8 = add %7, -28:i32
%9:i32 = var
%10 = phi %4, %8, %9
%11 = slt 0:i32, %10
blockpc %3 0 %11 1:i1
%12:i32 = zext %11
%13 = eq %12, 0:i32
blockpc %3 1 %13 1:i1
%14:i32 = var
%15 = block 2
%16:i32 = var
%17 = slt %16, 29:i32
blockpc %15 0 %17 1:i1
%18:i32 = zext %17
%19 = eq %18, 0:i32
blockpc %15 1 %19 1:i1
%20 = phi %15, %16, 29:i32
%21 = sub %14, %20
%22 = phi %3, %21, %10
%23 = slt %22, 0:i32
blockpc %2 0 %23 1:i1
%24:i32 = var
blockpc %2 1 %24 1:i1
%25 = block 2
%26:i32 = var
blockpc %25 0 %26 1:i1
%27:i32 = var
blockpc %25 1 %27 1:i1
%28 = block 2
%29:i32 = var
blockpc %28 0 %29 1:i1
%30:i32 = var
blockpc %28 1 %30 1:i1
%31:i32 = var
%32:i32 = var
%33 = phi %28, %31, %32
%34 = block 2
%35:i32 = var
blockpc %34 0 %35 1:i1
%36:i32 = var
blockpc %34 1 %36 1:i1
%37:i32 = var
%38 = phi %34, %31, %37
%39 = phi %25, %33, %38
%40 = block 2
%41:i32 = var
blockpc %40 0 %41 1:i1
%42:i32 = var
blockpc %40 1 %42 1:i1
%43:i32 = var
%44 = block 2
%45:i32 = var
blockpc %44 0 %45 1:i1
%46:i32 = var
blockpc %44 1 %46 1:i1
%47:i32 = var
%48 = phi %44, %43, %47
%49 = phi %40, %43, %48
%50 = block 2
%51:i32 = var
blockpc %50 0 %51 1:i1
%52:i32 = var
blockpc %50 1 %52 1:i1
%53:i32 = var
%54:i32 = var
%55 = phi %50, %53, %54
%56 = phi %3, %49, %55
%57 = phi %2, %39, %56
%58 = block 2
%59:i32 = var
blockpc %58 0 %59 1:i1
%60:i32 = var
blockpc %58 1 %60 1:i1
%61 = block 2
%62:i32 = var
blockpc %61 0 %62 1:i1
%63:i32 = var
blockpc %61 1 %63 1:i1
%64:i32 = var
%65:i32 = var
%66 = phi %61, %64, %65
%67 = phi %25, %66, %64
%68:i32 = var
%69 = phi %58, %67, %68
%70:i32 = var
%71:i32 = var
%72 = phi %3, %70, %71
%73 = phi %2, %69, %72
%74 = ult %57, %73
%75:i32 = var
pc %74 1:i1
pc %75 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 1:i32
%2:i32 = var
%3 = ule 10:i32, %2
%4 = block 2
%5 = block 2
%6 = block 2
%7:i32 = var
blockpc %6 0 %7 1:i1
%8:i32 = var
blockpc %6 1 %8 1:i1
%9:i32 = var
%10 = add %9, -28:i32
%11:i32 = var
%12 = phi %6, %10, %11
%13 = slt 0:i32, %12
blockpc %5 0 %13 1:i1
%14:i32 = zext %13
%15 = eq %14, 0:i32
blockpc %5 1 %15 1:i1
%16:i32 = var
%17 = block 2
%18:i32 = var
%19 = slt %18, 29:i32
blockpc %17 0 %19 1:i1
%20:i32 = zext %19
%21 = eq %20, 0:i32
blockpc %17 1 %21 1:i1
%22 = phi %17, %18, 29:i32
%23 = sub %16, %22
%24 = phi %5, %23, %12
%25 = slt %24, 0:i32
blockpc %4 0 %25 1:i1
%26:i32 = var
blockpc %4 1 %26 1:i1
%27 = block 2
%28:i32 = var
blockpc %27 0 %28 1:i1
%29:i32 = var
blockpc %27 1 %29 1:i1
%30 = block 2
%31:i32 = var
blockpc %30 0 %31 1:i1
%32:i32 = var
blockpc %30 1 %32 1:i1
%33:i32 = var
%34:i32 = var
%35 = phi %30, %33, %34
%36 = block 2
%37:i32 = var
blockpc %36 0 %37 1:i1
%38:i32 = var
blockpc %36 1 %38 1:i1
%39:i32 = var
%40 = phi %36, %33, %39
%41 = phi %27, %35, %40
%42 = block 2
%43:i32 = var
blockpc %42 0 %43 1:i1
%44:i32 = var
blockpc %42 1 %44 1:i1
%45:i32 = var
%46 = block 2
%47:i32 = var
blockpc %46 0 %47 1:i1
%48:i32 = var
blockpc %46 1 %48 1:i1
%49:i32 = var
%50 = phi %46, %45, %49
%51 = phi %42, %45, %50
%52 = block 2
%53:i32 = var
blockpc %52 0 %53 1:i1
%54:i32 = var
blockpc %52 1 %54 1:i1
%55:i32 = var
%56:i32 = var
%57 = phi %52, %55, %56
%58 = phi %5, %51, %57
%59 = phi %4, %41, %58
%60 = block 2
%61:i32 = var
blockpc %60 0 %61 1:i1
%62:i32 = var
blockpc %60 1 %62 1:i1
%63 = block 2
%64:i32 = var
blockpc %63 0 %64 1:i1
%65:i32 = var
blockpc %63 1 %65 1:i1
%66:i32 = var
%67:i32 = var
%68 = phi %63, %66, %67
%69 = phi %27, %68, %66
%70:i32 = var
%71 = phi %60, %69, %70
%72:i32 = var
%73:i32 = var
%74 = phi %5, %72, %73
%75 = phi %4, %71, %74
%76 = ult %59, %75
%77:i32 = var
pc %3 1:i1
pc %76 1:i1
pc %77 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = mul %0, 10:i32
%2:i32 = var
%3 = ule 10:i32, %2
%4 = block 2
%5 = block 2
%6 = block 2
%7:i32 = var
blockpc %6 0 %7 1:i1
%8:i32 = var
blockpc %6 1 %8 1:i1
%9:i32 = var
%10 = add %9, -28:i32
%11:i32 = var
%12 = phi %6, %10, %11
%13 = slt 0:i32, %12
blockpc %5 0 %13 1:i1
%14:i32 = zext %13
%15 = eq %14, 0:i32
blockpc %5 1 %15 1:i1
%16:i32 = var
%17 = block 2
%18:i32 = var
%19 = slt %18, 29:i32
blockpc %17 0 %19 1:i1
%20:i32 = zext %19
%21 = eq %20, 0:i32
blockpc %17 1 %21 1:i1
%22 = phi %17, %18, 29:i32
%23 = sub %16, %22
%24 = phi %5, %23, %12
%25 = slt %24, 0:i32
blockpc %4 0 %25 1:i1
%26:i32 = var
blockpc %4 1 %26 1:i1
%27 = block 2
%28:i32 = var
blockpc %27 0 %28 1:i1
%29:i32 = var
blockpc %27 1 %29 1:i1
%30 = block 2
%31:i32 = var
blockpc %30 0 %31 1:i1
%32:i32 = var
blockpc %30 1 %32 1:i1
%33:i32 = var
%34:i32 = var
%35 = phi %30, %33, %34
%36 = block 2
%37:i32 = var
blockpc %36 0 %37 1:i1
%38:i32 = var
blockpc %36 1 %38 1:i1
%39:i32 = var
%40 = phi %36, %33, %39
%41 = phi %27, %35, %40
%42 = block 2
%43:i32 = var
blockpc %42 0 %43 1:i1
%44:i32 = var
blockpc %42 1 %44 1:i1
%45:i32 = var
%46 = block 2
%47:i32 = var
blockpc %46 0 %47 1:i1
%48:i32 = var
blockpc %46 1 %48 1:i1
%49:i32 = var
%50 = phi %46, %45, %49
%51 = phi %42, %45, %50
%52 = block 2
%53:i32 = var
blockpc %52 0 %53 1:i1
%54:i32 = var
blockpc %52 1 %54 1:i1
%55:i32 = var
%56:i32 = var
%57 = phi %52, %55, %56
%58 = phi %5, %51, %57
%59 = phi %4, %41, %58
%60 = block 2
%61:i32 = var
blockpc %60 0 %61 1:i1
%62:i32 = var
blockpc %60 1 %62 1:i1
%63 = block 2
%64:i32 = var
blockpc %63 0 %64 1:i1
%65:i32 = var
blockpc %63 1 %65 1:i1
%66:i32 = var
%67:i32 = var
%68 = phi %63, %66, %67
%69 = phi %27, %68, %66
%70:i32 = var
%71 = phi %60, %69, %70
%72:i32 = var
%73:i32 = var
%74 = phi %5, %72, %73
%75 = phi %4, %71, %74
%76 = ult %59, %75
%77:i32 = var
pc %3 1:i1
pc %76 1:i1
pc %77 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = mul %0, 10:i32
%2:i32 = var
%3 = ule %1, %2
%4 = ule 10:i32, %2
%5 = block 2
%6 = block 2
%7 = block 2
%8:i32 = var
blockpc %7 0 %8 1:i1
%9:i32 = var
blockpc %7 1 %9 1:i1
%10:i32 = var
%11 = add %10, -28:i32
%12:i32 = var
%13 = phi %7, %11, %12
%14 = slt 0:i32, %13
blockpc %6 0 %14 1:i1
%15:i32 = zext %14
%16 = eq %15, 0:i32
blockpc %6 1 %16 1:i1
%17:i32 = var
%18 = block 2
%19:i32 = var
%20 = slt %19, 29:i32
blockpc %18 0 %20 1:i1
%21:i32 = zext %20
%22 = eq %21, 0:i32
blockpc %18 1 %22 1:i1
%23 = phi %18, %19, 29:i32
%24 = sub %17, %23
%25 = phi %6, %24, %13
%26 = slt %25, 0:i32
blockpc %5 0 %26 1:i1
%27:i32 = var
blockpc %5 1 %27 1:i1
%28 = block 2
%29:i32 = var
blockpc %28 0 %29 1:i1
%30:i32 = var
blockpc %28 1 %30 1:i1
%31 = block 2
%32:i32 = var
blockpc %31 0 %32 1:i1
%33:i32 = var
blockpc %31 1 %33 1:i1
%34:i32 = var
%35:i32 = var
%36 = phi %31, %34, %35
%37 = block 2
%38:i32 = var
blockpc %37 0 %38 1:i1
%39:i32 = var
blockpc %37 1 %39 1:i1
%40:i32 = var
%41 = phi %37, %34, %40
%42 = phi %28, %36, %41
%43 = block 2
%44:i32 = var
blockpc %43 0 %44 1:i1
%45:i32 = var
blockpc %43 1 %45 1:i1
%46:i32 = var
%47 = block 2
%48:i32 = var
blockpc %47 0 %48 1:i1
%49:i32 = var
blockpc %47 1 %49 1:i1
%50:i32 = var
%51 = phi %47, %46, %50
%52 = phi %43, %46, %51
%53 = block 2
%54:i32 = var
blockpc %53 0 %54 1:i1
%55:i32 = var
blockpc %53 1 %55 1:i1
%56:i32 = var
%57:i32 = var
%58 = phi %53, %56, %57
%59 = phi %6, %52, %58
%60 = phi %5, %42, %59
%61 = block 2
%62:i32 = var
blockpc %61 0 %62 1:i1
%63:i32 = var
blockpc %61 1 %63 1:i1
%64 = block 2
%65:i32 = var
blockpc %64 0 %65 1:i1
%66:i32 = var
blockpc %64 1 %66 1:i1
%67:i32 = var
%68:i32 = var
%69 = phi %64, %67, %68
%70 = phi %28, %69, %67
%71:i32 = var
%72 = phi %61, %70, %71
%73:i32 = var
%74:i32 = var
%75 = phi %6, %73, %74
%76 = phi %5, %72, %75
%77 = ult %60, %76
%78:i32 = var
pc %4 1:i1
pc %77 1:i1
pc %78 1:i1
infer %3


; start LHS (in $27)
%0:i32 = var
%1 = or %0, 32:i32 (hasExternalUses)
%2 = eq %1, 103:i32
%3:i64 = var
%4 = and %3, 9218868437227405312:i64
%5 = eq %4, 9218868437227405312:i64
%6:i32 = zext %5
%7 = eq %6, 0:i32
pc %7 1:i1
infer %2


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = phi %0, 6:i32, %1
%3 = ne %2, 0:i32
%4 = slt %1, 0:i32
blockpc %0 0 %4 1:i1
%5:i32 = zext %4
%6 = eq %5, 0:i32
blockpc %0 1 %6 1:i1
%7:i64 = var
%8 = and %7, 9218868437227405312:i64
%9 = eq %8, 9218868437227405312:i64
%10:i32 = zext %9
%11 = eq %10, 0:i32
pc %11 1:i1
infer %3


; start LHS (in $27)
%0:i32 = var
%1 = or %0, 32:i32 (hasExternalUses)
%2 = ne %1, 102:i32
%3:i64 = var
%4 = and %3, 9218868437227405312:i64
%5 = eq %4, 9218868437227405312:i64
%6:i32 = zext %5
%7 = eq %6, 0:i32
pc %7 1:i1
infer %2


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = phi %0, 6:i32, %1
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7:i32 = var
%8 = add %7, 8:i32 (hasExternalUses)
%9 = add %8, 288:i32 (hasExternalUses)
%10 = phi %6, %8, %9
%11 = block 2
%12 = block 2
%13 = block 2
%14:i32 = var
%15:i32 = var
%16 = phi %13, %14, %15
%17 = block 2
%18:i32 = var
%19 = phi %17, %14, %18
%20 = phi %12, %16, %19
%21 = block 2
%22 = block 2
%23:i32 = var
%24 = block 2
%25:i32 = var
%26 = phi %24, %23, %25
%27 = phi %22, %23, %26
%28 = phi %21, %27, %10
%29 = phi %11, %20, %28
%30 = sub %10, %29
%31 = ashr %30, 2:i32
%32 = mul %31, 9:i32 (hasExternalUses)
%33:i32 = var
%34 = phi %5, %32, %33
%35 = phi %4, %34, 0:i32
%36 = phi %3, %35, 0:i32
%37 = sub %2, %36
%38:i32 = var
blockpc %0 0 %38 1:i1
%39:i32 = var
blockpc %0 1 %39 1:i1
%40:i32 = var
blockpc %3 0 %40 1:i1
%41:i32 = var
blockpc %3 1 %41 1:i1
%42:i32 = var
blockpc %4 0 %42 1:i1
%43:i32 = var
blockpc %4 1 %43 1:i1
%44:i32 = var
blockpc %5 0 %44 1:i1
%45:i32 = var
blockpc %5 1 %45 1:i1
%46:i32 = var
blockpc %6 0 %46 1:i1
%47:i32 = var
blockpc %6 1 %47 1:i1
%48:i32 = var
blockpc %11 0 %48 1:i1
%49:i32 = var
blockpc %11 1 %49 1:i1
%50:i32 = var
blockpc %12 0 %50 1:i1
%51:i32 = var
blockpc %12 1 %51 1:i1
%52:i32 = var
blockpc %13 0 %52 1:i1
%53:i32 = var
blockpc %13 1 %53 1:i1
%54:i32 = var
blockpc %17 0 %54 1:i1
%55:i32 = var
blockpc %17 1 %55 1:i1
%56:i32 = var
blockpc %21 0 %56 1:i1
%57:i32 = var
blockpc %21 1 %57 1:i1
%58:i32 = var
blockpc %22 0 %58 1:i1
%59:i32 = var
blockpc %22 1 %59 1:i1
%60:i32 = var
blockpc %24 0 %60 1:i1
%61:i32 = var
blockpc %24 1 %61 1:i1
%62:i32 = var
pc %62 1:i1
infer %37


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = phi %0, 6:i32, %1
%3 = ne %2, 0:i32 (hasExternalUses)
%4:i32 = zext %3
%5:i32 = var
%6 = or %5, 32:i32 (hasExternalUses)
%7 = eq %6, 103:i32 (hasExternalUses)
%8:i32 = zext %7
%9 = and %4, %8
%10 = slt %1, 0:i32
blockpc %0 0 %10 1:i1
%11:i32 = zext %10
%12 = eq %11, 0:i32
blockpc %0 1 %12 1:i1
%13:i64 = var
%14 = and %13, 9218868437227405312:i64
%15 = eq %14, 9218868437227405312:i64
%16:i32 = zext %15
%17 = eq %16, 0:i32
pc %17 1:i1
infer %9


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = phi %0, 6:i32, %1
%3 = ne %2, 0:i32 (hasExternalUses)
%4:i32 = zext %3
%5:i32 = var
%6 = or %5, 32:i32 (hasExternalUses)
%7 = eq %6, 103:i32 (hasExternalUses)
%8:i32 = zext %7
%9 = and %4, %8
%10 = shl %9, 31:i32
%11 = slt %1, 0:i32
blockpc %0 0 %11 1:i1
%12:i32 = zext %11
%13 = eq %12, 0:i32
blockpc %0 1 %13 1:i1
%14:i64 = var
%15 = and %14, 9218868437227405312:i64
%16 = eq %15, 9218868437227405312:i64
%17:i32 = zext %16
%18 = eq %17, 0:i32
pc %18 1:i1
infer %10


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = phi %0, 6:i32, %1
%3 = ne %2, 0:i32 (hasExternalUses)
%4:i32 = zext %3
%5:i32 = var
%6 = or %5, 32:i32 (hasExternalUses)
%7 = eq %6, 103:i32 (hasExternalUses)
%8:i32 = zext %7
%9 = and %4, %8
%10 = shl %9, 31:i32
%11 = ashr %10, 31:i32
%12 = slt %1, 0:i32
blockpc %0 0 %12 1:i1
%13:i32 = zext %12
%14 = eq %13, 0:i32
blockpc %0 1 %14 1:i1
%15:i64 = var
%16 = and %15, 9218868437227405312:i64
%17 = eq %16, 9218868437227405312:i64
%18:i32 = zext %17
%19 = eq %18, 0:i32
pc %19 1:i1
infer %11


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = phi %0, 6:i32, %1
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7:i32 = var
%8:i32 = var
%9 = phi %6, %7, %8
%10 = block 2
%11 = block 2
%12 = block 2
%13:i32 = var
%14:i32 = var
%15 = phi %12, %13, %14
%16 = block 2
%17:i32 = var
%18 = phi %16, %13, %17
%19 = phi %11, %15, %18
%20 = block 2
%21 = block 2
%22:i32 = var
%23 = block 2
%24:i32 = var
%25 = phi %23, %22, %24
%26 = phi %21, %22, %25
%27 = phi %20, %26, %9
%28 = phi %10, %19, %27
%29 = sub %9, %28
%30 = ashr %29, 2:i32
%31 = mul %30, 9:i32 (hasExternalUses)
%32:i32 = var
%33 = phi %5, %31, %32
%34 = phi %4, %33, 0:i32
%35 = phi %3, %34, 0:i32
%36 = sub %2, %35
%37:i32 = var
%38 = add %36, %37
%39:i32 = var
blockpc %0 0 %39 1:i1
%40:i32 = var
blockpc %0 1 %40 1:i1
%41:i32 = var
blockpc %3 0 %41 1:i1
%42:i32 = var
blockpc %3 1 %42 1:i1
%43:i32 = var
blockpc %4 0 %43 1:i1
%44:i32 = var
blockpc %4 1 %44 1:i1
%45:i32 = var
blockpc %5 0 %45 1:i1
%46:i32 = var
blockpc %5 1 %46 1:i1
%47:i32 = var
blockpc %6 0 %47 1:i1
%48:i32 = var
blockpc %6 1 %48 1:i1
%49:i32 = var
blockpc %10 0 %49 1:i1
%50:i32 = var
blockpc %10 1 %50 1:i1
%51:i32 = var
blockpc %11 0 %51 1:i1
%52:i32 = var
blockpc %11 1 %52 1:i1
%53:i32 = var
blockpc %12 0 %53 1:i1
%54:i32 = var
blockpc %12 1 %54 1:i1
%55:i32 = var
blockpc %16 0 %55 1:i1
%56:i32 = var
blockpc %16 1 %56 1:i1
%57:i32 = var
blockpc %20 0 %57 1:i1
%58:i32 = var
blockpc %20 1 %58 1:i1
%59:i32 = var
blockpc %21 0 %59 1:i1
%60:i32 = var
blockpc %21 1 %60 1:i1
%61:i32 = var
blockpc %23 0 %61 1:i1
%62:i32 = var
blockpc %23 1 %62 1:i1
%63:i32 = var
pc %63 1:i1
infer %38


; start LHS (in $27)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4:i32 = var
%5 = add %4, 4:i32 (hasExternalUses)
%6 = phi %3, %4, %5
%7 = phi %2, %6, %4
%8 = block 2
%9 = block 2
%10:i32 = var
%11 = add %10, 8:i32 (hasExternalUses)
%12 = add %11, 288:i32 (hasExternalUses)
%13 = phi %9, %11, %12
%14 = block 2
%15:i32 = var
%16 = add %15, 4:i32 (hasExternalUses)
%17 = phi %14, %15, %16
%18 = block 2
%19 = add %15, 4:i32 (hasExternalUses)
%20 = phi %18, %15, %19
%21 = phi %2, %17, %20
%22 = phi %8, %13, %21
%23 = block 2
%24:i32 = var
%25 = phi %23, 6:i32, %24
%26 = add %25, 25:i32
%27 = sdiv %26, 9:i32
%28 = add %27, 1:i32 (hasExternalUses)
%29 = shl %28, 2:i32
%30 = add %22, %29 (hasExternalUses)
%31 = phi %1, %7, %30
%32 = block 2
%33:i32 = var
%34:i32 = var
%35 = phi %32, %33, %34
%36 = phi %0, %31, %35
%37 = sub %36, %13
%38:i32 = var
blockpc %0 0 %38 1:i1
%39:i32 = var
blockpc %0 1 %39 1:i1
%40:i32 = var
blockpc %1 0 %40 1:i1
%41:i32 = var
blockpc %1 1 %41 1:i1
%42:i32 = var
blockpc %2 0 %42 1:i1
%43:i32 = var
blockpc %2 1 %43 1:i1
%44:i32 = var
blockpc %3 0 %44 1:i1
%45:i32 = var
blockpc %3 1 %45 1:i1
%46:i32 = var
blockpc %8 0 %46 1:i1
%47:i32 = var
blockpc %8 1 %47 1:i1
%48:i32 = var
blockpc %9 0 %48 1:i1
%49:i32 = var
blockpc %9 1 %49 1:i1
%50:i32 = var
blockpc %14 0 %50 1:i1
%51:i32 = var
blockpc %14 1 %51 1:i1
%52:i32 = var
blockpc %18 0 %52 1:i1
%53:i32 = var
blockpc %18 1 %53 1:i1
%54:i32 = var
blockpc %23 0 %54 1:i1
%55:i32 = var
blockpc %23 1 %55 1:i1
%56:i32 = var
blockpc %32 0 %56 1:i1
%57:i32 = var
blockpc %32 1 %57 1:i1
%58:i32 = var
pc %58 1:i1
infer %37


; start LHS (in $27)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4:i32 = var
%5 = add %4, 4:i32 (hasExternalUses)
%6 = phi %3, %4, %5
%7 = phi %2, %6, %4
%8 = block 2
%9 = block 2
%10:i32 = var
%11 = add %10, 8:i32 (hasExternalUses)
%12 = add %11, 288:i32 (hasExternalUses)
%13 = phi %9, %11, %12
%14 = block 2
%15:i32 = var
%16 = add %15, 4:i32 (hasExternalUses)
%17 = phi %14, %15, %16
%18 = block 2
%19 = add %15, 4:i32 (hasExternalUses)
%20 = phi %18, %15, %19
%21 = phi %2, %17, %20
%22 = phi %8, %13, %21
%23 = block 2
%24:i32 = var
%25 = phi %23, 6:i32, %24
%26 = add %25, 25:i32
%27 = sdiv %26, 9:i32
%28 = add %27, 1:i32 (hasExternalUses)
%29 = shl %28, 2:i32
%30 = add %22, %29 (hasExternalUses)
%31 = phi %1, %7, %30
%32 = block 2
%33:i32 = var
%34:i32 = var
%35 = phi %32, %33, %34
%36 = phi %0, %31, %35
%37 = sub %36, %13
%38 = ashr %37, 2:i32
%39:i32 = var
blockpc %0 0 %39 1:i1
%40:i32 = var
blockpc %0 1 %40 1:i1
%41:i32 = var
blockpc %1 0 %41 1:i1
%42:i32 = var
blockpc %1 1 %42 1:i1
%43:i32 = var
blockpc %2 0 %43 1:i1
%44:i32 = var
blockpc %2 1 %44 1:i1
%45:i32 = var
blockpc %3 0 %45 1:i1
%46:i32 = var
blockpc %3 1 %46 1:i1
%47:i32 = var
blockpc %8 0 %47 1:i1
%48:i32 = var
blockpc %8 1 %48 1:i1
%49:i32 = var
blockpc %9 0 %49 1:i1
%50:i32 = var
blockpc %9 1 %50 1:i1
%51:i32 = var
blockpc %14 0 %51 1:i1
%52:i32 = var
blockpc %14 1 %52 1:i1
%53:i32 = var
blockpc %18 0 %53 1:i1
%54:i32 = var
blockpc %18 1 %54 1:i1
%55:i32 = var
blockpc %23 0 %55 1:i1
%56:i32 = var
blockpc %23 1 %56 1:i1
%57:i32 = var
blockpc %32 0 %57 1:i1
%58:i32 = var
blockpc %32 1 %58 1:i1
%59:i32 = var
pc %59 1:i1
infer %38


; start LHS (in $27)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4:i32 = var
%5 = add %4, 4:i32 (hasExternalUses)
%6 = phi %3, %4, %5
%7 = phi %2, %6, %4
%8 = block 2
%9 = block 2
%10:i32 = var
%11 = add %10, 8:i32 (hasExternalUses)
%12 = add %11, 288:i32 (hasExternalUses)
%13 = phi %9, %11, %12
%14 = block 2
%15:i32 = var
%16:i32 = var
%17 = phi %14, %15, %16
%18 = block 2
%19:i32 = var
%20 = phi %18, %15, %19
%21 = phi %2, %17, %20
%22 = phi %8, %13, %21
%23:i32 = var
%24 = sdiv %23, 9:i32
%25 = add %24, 1:i32 (hasExternalUses)
%26 = shl %25, 2:i32
%27 = add %22, %26 (hasExternalUses)
%28 = phi %1, %7, %27
%29 = block 2
%30:i32 = var
%31:i32 = var
%32 = phi %29, %30, %31
%33 = phi %0, %28, %32
%34 = sub %33, %13
%35 = ashr %34, 2:i32
%36 = mul %35, 9:i32
%37:i32 = var
blockpc %0 0 %37 1:i1
%38:i32 = var
blockpc %0 1 %38 1:i1
%39:i32 = var
blockpc %1 0 %39 1:i1
%40:i32 = var
blockpc %1 1 %40 1:i1
%41:i32 = var
blockpc %2 0 %41 1:i1
%42:i32 = var
blockpc %2 1 %42 1:i1
%43:i32 = var
blockpc %3 0 %43 1:i1
%44:i32 = var
blockpc %3 1 %44 1:i1
%45:i32 = var
blockpc %8 0 %45 1:i1
%46:i32 = var
blockpc %8 1 %46 1:i1
%47:i32 = var
blockpc %9 0 %47 1:i1
%48:i32 = var
blockpc %9 1 %48 1:i1
%49:i32 = var
blockpc %14 0 %49 1:i1
%50:i32 = var
blockpc %14 1 %50 1:i1
%51:i32 = var
blockpc %18 0 %51 1:i1
%52:i32 = var
blockpc %18 1 %52 1:i1
%53:i32 = var
blockpc %29 0 %53 1:i1
%54:i32 = var
blockpc %29 1 %54 1:i1
%55:i32 = var
pc %55 1:i1
infer %36


; start LHS (in $27)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4:i32 = var
%5 = add %4, 4:i32 (hasExternalUses)
%6 = phi %3, %4, %5
%7 = phi %2, %6, %4
%8 = block 2
%9 = block 2
%10:i32 = var
%11:i32 = var
%12 = phi %9, %10, %11
%13 = block 2
%14:i32 = var
%15:i32 = var
%16 = phi %13, %14, %15
%17 = block 2
%18:i32 = var
%19 = phi %17, %14, %18
%20 = phi %2, %16, %19
%21 = phi %8, %12, %20
%22:i32 = var
%23 = add %22, 1:i32 (hasExternalUses)
%24 = shl %23, 2:i32
%25 = add %21, %24 (hasExternalUses)
%26 = phi %1, %7, %25
%27 = block 2
%28:i32 = var
%29:i32 = var
%30 = add %29, 4:i32 (hasExternalUses)
%31 = phi %27, %28, %30
%32 = phi %0, %26, %31
%33 = sub %32, %12
%34 = ashr %33, 2:i32
%35 = mul %34, 9:i32
%36 = add %35, -9:i32
%37:i32 = var
blockpc %0 0 %37 1:i1
%38:i32 = var
blockpc %0 1 %38 1:i1
%39:i32 = var
blockpc %1 0 %39 1:i1
%40:i32 = var
blockpc %1 1 %40 1:i1
%41:i32 = var
blockpc %2 0 %41 1:i1
%42:i32 = var
blockpc %2 1 %42 1:i1
%43:i32 = var
blockpc %3 0 %43 1:i1
%44:i32 = var
blockpc %3 1 %44 1:i1
%45:i32 = var
blockpc %8 0 %45 1:i1
%46:i32 = var
blockpc %8 1 %46 1:i1
%47:i32 = var
blockpc %9 0 %47 1:i1
%48:i32 = var
blockpc %9 1 %48 1:i1
%49:i32 = var
blockpc %13 0 %49 1:i1
%50:i32 = var
blockpc %13 1 %50 1:i1
%51:i32 = var
blockpc %17 0 %51 1:i1
%52:i32 = var
blockpc %17 1 %52 1:i1
%53:i32 = var
blockpc %27 0 %53 1:i1
%54:i32 = var
blockpc %27 1 %54 1:i1
%55:i32 = var
pc %55 1:i1
infer %36


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = phi %0, 6:i32, %1
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7:i32 = var
%8:i32 = var
%9 = phi %6, %7, %8
%10 = block 2
%11 = block 2
%12 = block 2
%13:i32 = var
%14:i32 = var
%15 = phi %12, %13, %14
%16 = block 2
%17:i32 = var
%18 = phi %16, %13, %17
%19 = phi %11, %15, %18
%20 = block 2
%21 = block 2
%22:i32 = var
%23 = block 2
%24:i32 = var
%25 = phi %23, %22, %24
%26 = phi %21, %22, %25
%27 = phi %20, %26, %9
%28 = phi %10, %19, %27
%29 = sub %9, %28
%30 = ashr %29, 2:i32
%31 = mul %30, 9:i32 (hasExternalUses)
%32:i32 = var
%33 = phi %5, %31, %32
%34 = phi %4, %33, 0:i32
%35 = phi %3, %34, 0:i32
%36 = sub %2, %35
%37:i32 = var
%38 = add %36, %37 (hasExternalUses)
%39:i32 = var
%40 = slt %38, %39
%41:i32 = var
blockpc %0 0 %41 1:i1
%42:i32 = var
blockpc %0 1 %42 1:i1
%43:i32 = var
blockpc %3 0 %43 1:i1
%44:i32 = var
blockpc %3 1 %44 1:i1
%45:i32 = var
blockpc %4 0 %45 1:i1
%46:i32 = var
blockpc %4 1 %46 1:i1
%47:i32 = var
blockpc %5 0 %47 1:i1
%48:i32 = var
blockpc %5 1 %48 1:i1
%49:i32 = var
blockpc %6 0 %49 1:i1
%50:i32 = var
blockpc %6 1 %50 1:i1
%51:i32 = var
blockpc %10 0 %51 1:i1
%52:i32 = var
blockpc %10 1 %52 1:i1
%53:i32 = var
blockpc %11 0 %53 1:i1
%54:i32 = var
blockpc %11 1 %54 1:i1
%55:i32 = var
blockpc %12 0 %55 1:i1
%56:i32 = var
blockpc %12 1 %56 1:i1
%57:i32 = var
blockpc %16 0 %57 1:i1
%58:i32 = var
blockpc %16 1 %58 1:i1
%59:i32 = var
blockpc %20 0 %59 1:i1
%60:i32 = var
blockpc %20 1 %60 1:i1
%61:i32 = var
blockpc %21 0 %61 1:i1
%62:i32 = var
blockpc %21 1 %62 1:i1
%63:i32 = var
blockpc %23 0 %63 1:i1
%64:i32 = var
blockpc %23 1 %64 1:i1
%65:i32 = var
pc %65 1:i1
infer %40


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = phi %0, 6:i32, %1
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7:i32 = var
%8:i32 = var
%9 = phi %6, %7, %8
%10 = block 2
%11 = block 2
%12 = block 2
%13:i32 = var
%14:i32 = var
%15 = phi %12, %13, %14
%16 = block 2
%17:i32 = var
%18 = phi %16, %13, %17
%19 = phi %11, %15, %18
%20 = block 2
%21 = block 2
%22:i32 = var
%23 = block 2
%24:i32 = var
%25 = phi %23, %22, %24
%26 = phi %21, %22, %25
%27 = phi %20, %26, %9
%28 = phi %10, %19, %27
%29 = sub %9, %28
%30 = ashr %29, 2:i32
%31 = mul %30, 9:i32 (hasExternalUses)
%32:i32 = var
%33 = phi %5, %31, %32
%34 = phi %4, %33, 0:i32
%35 = phi %3, %34, 0:i32
%36 = sub %2, %35
%37:i32 = var
%38 = add %36, %37 (hasExternalUses)
%39 = add %38, 9216:i32
%40:i32 = var
blockpc %0 0 %40 1:i1
%41:i32 = var
blockpc %0 1 %41 1:i1
%42:i32 = var
blockpc %3 0 %42 1:i1
%43:i32 = var
blockpc %3 1 %43 1:i1
%44:i32 = var
blockpc %4 0 %44 1:i1
%45:i32 = var
blockpc %4 1 %45 1:i1
%46:i32 = var
blockpc %5 0 %46 1:i1
%47:i32 = var
blockpc %5 1 %47 1:i1
%48:i32 = var
blockpc %6 0 %48 1:i1
%49:i32 = var
blockpc %6 1 %49 1:i1
%50:i32 = var
blockpc %10 0 %50 1:i1
%51:i32 = var
blockpc %10 1 %51 1:i1
%52:i32 = var
blockpc %11 0 %52 1:i1
%53:i32 = var
blockpc %11 1 %53 1:i1
%54:i32 = var
blockpc %12 0 %54 1:i1
%55:i32 = var
blockpc %12 1 %55 1:i1
%56:i32 = var
blockpc %16 0 %56 1:i1
%57:i32 = var
blockpc %16 1 %57 1:i1
%58:i32 = var
blockpc %20 0 %58 1:i1
%59:i32 = var
blockpc %20 1 %59 1:i1
%60:i32 = var
blockpc %21 0 %60 1:i1
%61:i32 = var
blockpc %21 1 %61 1:i1
%62:i32 = var
blockpc %23 0 %62 1:i1
%63:i32 = var
blockpc %23 1 %63 1:i1
%64:i32 = var
%65:i32 = var
pc %64 1:i1
pc %65 1:i1
infer %39


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = phi %0, 6:i32, %1
%3 = block 2
%4 = block 2
%5 = block 2
%6:i32 = var
%7 = ashr %6, 2:i32
%8 = mul %7, 9:i32 (hasExternalUses)
%9:i32 = var
%10 = add %9, 1:i32 (hasExternalUses)
%11 = phi %5, %8, %10
%12 = phi %4, %11, 0:i32
%13 = phi %3, %12, 0:i32
%14 = sub %2, %13
%15 = ne %2, 0:i32 (hasExternalUses)
%16:i32 = zext %15
%17:i32 = var
%18 = or %17, 32:i32 (hasExternalUses)
%19 = eq %18, 103:i32 (hasExternalUses)
%20:i32 = zext %19
%21 = and %16, %20
%22 = shl %21, 31:i32
%23 = ashr %22, 31:i32
%24 = add %14, %23 (hasExternalUses)
%25 = add %24, 9216:i32 (hasExternalUses)
%26 = sdiv %25, 9:i32
%27 = slt %1, 0:i32
blockpc %0 0 %27 1:i1
%28:i32 = zext %27
%29 = eq %28, 0:i32
blockpc %0 1 %29 1:i1
%30:i32 = var
blockpc %3 0 %30 1:i1
%31:i32 = var
blockpc %3 1 %31 1:i1
%32:i32 = var
blockpc %4 0 %32 1:i1
%33:i32 = var
blockpc %4 1 %33 1:i1
%34:i32 = var
blockpc %5 0 %34 1:i1
%35:i32 = var
blockpc %5 1 %35 1:i1
%36:i32 = var
%37:i32 = var
pc %36 1:i1
pc %37 1:i1
infer %26


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = phi %0, 6:i32, %1
%3 = block 2
%4 = block 2
%5 = block 2
%6:i32 = var
%7 = ashr %6, 2:i32
%8 = mul %7, 9:i32 (hasExternalUses)
%9:i32 = var
%10 = add %9, 1:i32 (hasExternalUses)
%11 = phi %5, %8, %10
%12 = phi %4, %11, 0:i32
%13 = phi %3, %12, 0:i32
%14 = sub %2, %13
%15 = ne %2, 0:i32 (hasExternalUses)
%16:i32 = zext %15
%17:i32 = var
%18 = or %17, 32:i32 (hasExternalUses)
%19 = eq %18, 103:i32 (hasExternalUses)
%20:i32 = zext %19
%21 = and %16, %20
%22 = shl %21, 31:i32
%23 = ashr %22, 31:i32
%24 = add %14, %23 (hasExternalUses)
%25 = add %24, 9216:i32 (hasExternalUses)
%26 = srem %25, 9:i32
%27 = slt %1, 0:i32
blockpc %0 0 %27 1:i1
%28:i32 = zext %27
%29 = eq %28, 0:i32
blockpc %0 1 %29 1:i1
%30:i32 = var
blockpc %3 0 %30 1:i1
%31:i32 = var
blockpc %3 1 %31 1:i1
%32:i32 = var
blockpc %4 0 %32 1:i1
%33:i32 = var
blockpc %4 1 %33 1:i1
%34:i32 = var
blockpc %5 0 %34 1:i1
%35:i32 = var
blockpc %5 1 %35 1:i1
%36:i32 = var
%37:i32 = var
pc %36 1:i1
pc %37 1:i1
infer %26


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = phi %0, 6:i32, %1
%3 = block 2
%4 = block 2
%5 = block 2
%6:i32 = var
%7 = mul %6, 9:i32 (hasExternalUses)
%8:i32 = var
%9 = add %8, 1:i32 (hasExternalUses)
%10 = phi %5, %7, %9
%11 = phi %4, %10, 0:i32
%12 = phi %3, %11, 0:i32
%13 = sub %2, %12
%14 = ne %2, 0:i32 (hasExternalUses)
%15:i32 = zext %14
%16:i32 = var
%17 = eq %16, 103:i32 (hasExternalUses)
%18:i32 = zext %17
%19 = and %15, %18
%20 = shl %19, 31:i32
%21 = ashr %20, 31:i32
%22 = add %13, %21 (hasExternalUses)
%23 = add %22, 9216:i32 (hasExternalUses)
%24 = srem %23, 9:i32 (hasExternalUses)
%25 = slt %24, 8:i32
%26 = slt %1, 0:i32
blockpc %0 0 %26 1:i1
%27:i32 = zext %26
%28 = eq %27, 0:i32
blockpc %0 1 %28 1:i1
%29:i32 = var
blockpc %3 0 %29 1:i1
%30:i32 = var
blockpc %3 1 %30 1:i1
%31:i32 = var
blockpc %4 0 %31 1:i1
%32:i32 = var
blockpc %4 1 %32 1:i1
%33:i32 = var
blockpc %5 0 %33 1:i1
%34:i32 = var
blockpc %5 1 %34 1:i1
%35:i32 = var
%36:i32 = var
pc %35 1:i1
pc %36 1:i1
infer %25


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 1:i32
%2 = block 2
%3:i32 = var
%4 = slt %3, 0:i32
blockpc %2 0 %4 1:i1
%5:i32 = zext %4
%6 = eq %5, 0:i32
blockpc %2 1 %6 1:i1
%7 = phi %2, 6:i32, %3
%8 = block 2
%9:i32 = var
%10 = or %9, 32:i32
%11 = ne %10, 102:i32
blockpc %8 0 %11 1:i1
%12:i32 = zext %11
%13 = eq %12, 0:i32
blockpc %8 1 %13 1:i1
%14 = block 2
%15 = block 2
%16:i32 = var
blockpc %15 0 %16 1:i1
%17:i32 = var
blockpc %15 1 %17 1:i1
%18 = block 2
%19:i32 = var
blockpc %18 0 %19 1:i1
%20:i32 = var
blockpc %18 1 %20 1:i1
%21 = block 2
%22:i32 = var
blockpc %21 0 %22 1:i1
%23:i32 = var
blockpc %21 1 %23 1:i1
%24:i32 = var
%25:i32 = var
%26 = phi %21, %24, %25
%27 = block 2
%28:i32 = var
blockpc %27 0 %28 1:i1
%29:i32 = var
blockpc %27 1 %29 1:i1
%30:i32 = var
%31 = phi %27, %24, %30
%32 = phi %18, %26, %31
%33 = block 2
%34:i32 = var
blockpc %33 0 %34 1:i1
%35:i32 = var
blockpc %33 1 %35 1:i1
%36 = block 2
%37:i32 = var
blockpc %36 0 %37 1:i1
%38:i32 = var
blockpc %36 1 %38 1:i1
%39:i32 = var
%40 = block 2
%41:i32 = var
blockpc %40 0 %41 1:i1
%42:i32 = var
blockpc %40 1 %42 1:i1
%43:i32 = var
%44 = phi %40, %39, %43
%45 = phi %36, %39, %44
%46 = block 2
%47:i32 = var
blockpc %46 0 %47 1:i1
%48:i32 = var
blockpc %46 1 %48 1:i1
%49:i32 = var
%50:i32 = var
%51 = phi %46, %49, %50
%52 = phi %33, %45, %51
%53 = phi %15, %32, %52
%54 = block 2
%55:i32 = var
blockpc %54 0 %55 1:i1
%56:i32 = var
blockpc %54 1 %56 1:i1
%57 = block 2
%58:i32 = var
blockpc %57 0 %58 1:i1
%59:i32 = var
blockpc %57 1 %59 1:i1
%60:i32 = var
%61:i32 = var
%62 = phi %57, %60, %61
%63 = phi %18, %62, %60
%64:i32 = var
%65 = phi %54, %63, %64
%66:i32 = var
%67:i32 = var
%68 = phi %33, %66, %67
%69 = phi %15, %65, %68
%70 = ult %53, %69
blockpc %14 0 %70 1:i1
%71:i32 = var
blockpc %14 1 %71 1:i1
%72 = block 2
%73:i32 = var
blockpc %72 0 %73 1:i1
%74:i32 = var
blockpc %72 1 %74 1:i1
%75:i32 = var
%76:i32 = var
%77 = phi %72, %75, %76
%78 = phi %14, %77, 0:i32
%79 = phi %8, %78, 0:i32
%80 = sub %7, %79
%81:i32 = var
%82 = add %80, %81
%83 = add %82, 9216:i32
%84 = srem %83, 9:i32
%85 = slt %84, 8:i32
%86:i32 = var
%87:i32 = var
pc %85 1:i1
pc %86 1:i1
pc %87 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = mul %0, 10:i32
%2 = block 2
%3:i32 = var
%4 = slt %3, 0:i32
blockpc %2 0 %4 1:i1
%5:i32 = zext %4
%6 = eq %5, 0:i32
blockpc %2 1 %6 1:i1
%7 = phi %2, 6:i32, %3
%8 = block 2
%9:i32 = var
%10 = or %9, 32:i32
%11 = ne %10, 102:i32
blockpc %8 0 %11 1:i1
%12:i32 = zext %11
%13 = eq %12, 0:i32
blockpc %8 1 %13 1:i1
%14 = block 2
%15 = block 2
%16:i32 = var
blockpc %15 0 %16 1:i1
%17:i32 = var
blockpc %15 1 %17 1:i1
%18 = block 2
%19:i32 = var
blockpc %18 0 %19 1:i1
%20:i32 = var
blockpc %18 1 %20 1:i1
%21 = block 2
%22:i32 = var
blockpc %21 0 %22 1:i1
%23:i32 = var
blockpc %21 1 %23 1:i1
%24:i32 = var
%25:i32 = var
%26 = phi %21, %24, %25
%27 = block 2
%28:i32 = var
blockpc %27 0 %28 1:i1
%29:i32 = var
blockpc %27 1 %29 1:i1
%30:i32 = var
%31 = phi %27, %24, %30
%32 = phi %18, %26, %31
%33 = block 2
%34:i32 = var
blockpc %33 0 %34 1:i1
%35:i32 = var
blockpc %33 1 %35 1:i1
%36 = block 2
%37:i32 = var
blockpc %36 0 %37 1:i1
%38:i32 = var
blockpc %36 1 %38 1:i1
%39:i32 = var
%40 = block 2
%41:i32 = var
blockpc %40 0 %41 1:i1
%42:i32 = var
blockpc %40 1 %42 1:i1
%43:i32 = var
%44 = phi %40, %39, %43
%45 = phi %36, %39, %44
%46 = block 2
%47:i32 = var
blockpc %46 0 %47 1:i1
%48:i32 = var
blockpc %46 1 %48 1:i1
%49:i32 = var
%50:i32 = var
%51 = phi %46, %49, %50
%52 = phi %33, %45, %51
%53 = phi %15, %32, %52
%54 = block 2
%55:i32 = var
blockpc %54 0 %55 1:i1
%56:i32 = var
blockpc %54 1 %56 1:i1
%57 = block 2
%58:i32 = var
blockpc %57 0 %58 1:i1
%59:i32 = var
blockpc %57 1 %59 1:i1
%60:i32 = var
%61:i32 = var
%62 = phi %57, %60, %61
%63 = phi %18, %62, %60
%64:i32 = var
%65 = phi %54, %63, %64
%66:i32 = var
%67:i32 = var
%68 = phi %33, %66, %67
%69 = phi %15, %65, %68
%70 = ult %53, %69
blockpc %14 0 %70 1:i1
%71:i32 = var
blockpc %14 1 %71 1:i1
%72 = block 2
%73:i32 = var
blockpc %72 0 %73 1:i1
%74:i32 = var
blockpc %72 1 %74 1:i1
%75:i32 = var
%76:i32 = var
%77 = phi %72, %75, %76
%78 = phi %14, %77, 0:i32
%79 = phi %8, %78, 0:i32
%80 = sub %7, %79
%81:i32 = var
%82 = add %80, %81
%83 = add %82, 9216:i32
%84 = srem %83, 9:i32
%85 = slt %84, 8:i32
%86:i32 = var
%87:i32 = var
pc %85 1:i1
pc %86 1:i1
pc %87 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = slt %0, 7:i32
%2 = block 2
%3:i32 = var
%4 = slt %3, 0:i32
blockpc %2 0 %4 1:i1
%5:i32 = zext %4
%6 = eq %5, 0:i32
blockpc %2 1 %6 1:i1
%7 = phi %2, 6:i32, %3
%8 = block 2
%9:i32 = var
%10 = or %9, 32:i32
%11 = ne %10, 102:i32
blockpc %8 0 %11 1:i1
%12:i32 = zext %11
%13 = eq %12, 0:i32
blockpc %8 1 %13 1:i1
%14 = block 2
%15 = block 2
%16:i32 = var
blockpc %15 0 %16 1:i1
%17:i32 = var
blockpc %15 1 %17 1:i1
%18 = block 2
%19:i32 = var
blockpc %18 0 %19 1:i1
%20:i32 = var
blockpc %18 1 %20 1:i1
%21 = block 2
%22:i32 = var
blockpc %21 0 %22 1:i1
%23:i32 = var
blockpc %21 1 %23 1:i1
%24:i32 = var
%25:i32 = var
%26 = phi %21, %24, %25
%27 = block 2
%28:i32 = var
blockpc %27 0 %28 1:i1
%29:i32 = var
blockpc %27 1 %29 1:i1
%30:i32 = var
%31 = phi %27, %24, %30
%32 = phi %18, %26, %31
%33 = block 2
%34:i32 = var
blockpc %33 0 %34 1:i1
%35:i32 = var
blockpc %33 1 %35 1:i1
%36 = block 2
%37:i32 = var
blockpc %36 0 %37 1:i1
%38:i32 = var
blockpc %36 1 %38 1:i1
%39:i32 = var
%40 = block 2
%41:i32 = var
blockpc %40 0 %41 1:i1
%42:i32 = var
blockpc %40 1 %42 1:i1
%43:i32 = var
%44 = phi %40, %39, %43
%45 = phi %36, %39, %44
%46 = block 2
%47:i32 = var
blockpc %46 0 %47 1:i1
%48:i32 = var
blockpc %46 1 %48 1:i1
%49:i32 = var
%50:i32 = var
%51 = phi %46, %49, %50
%52 = phi %33, %45, %51
%53 = phi %15, %32, %52
%54 = block 2
%55:i32 = var
blockpc %54 0 %55 1:i1
%56:i32 = var
blockpc %54 1 %56 1:i1
%57 = block 2
%58:i32 = var
blockpc %57 0 %58 1:i1
%59:i32 = var
blockpc %57 1 %59 1:i1
%60:i32 = var
%61:i32 = var
%62 = phi %57, %60, %61
%63 = phi %18, %62, %60
%64:i32 = var
%65 = phi %54, %63, %64
%66:i32 = var
%67:i32 = var
%68 = phi %33, %66, %67
%69 = phi %15, %65, %68
%70 = ult %53, %69
blockpc %14 0 %70 1:i1
%71:i32 = var
blockpc %14 1 %71 1:i1
%72 = block 2
%73:i32 = var
blockpc %72 0 %73 1:i1
%74:i32 = var
blockpc %72 1 %74 1:i1
%75:i32 = var
%76:i32 = var
%77 = phi %72, %75, %76
%78 = phi %14, %77, 0:i32
%79 = phi %8, %78, 0:i32
%80 = sub %7, %79
%81:i32 = var
%82 = add %80, %81
%83 = add %82, 9216:i32
%84 = srem %83, 9:i32
%85 = slt %84, 8:i32
%86:i32 = var
%87:i32 = var
pc %85 1:i1
pc %86 1:i1
pc %87 1:i1
infer %1


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = phi %0, 6:i32, %1
%3 = block 2
%4 = block 2
%5 = block 2
%6:i32 = var
%7 = mul %6, 9:i32 (hasExternalUses)
%8:i32 = var
%9 = add %8, 1:i32 (hasExternalUses)
%10 = phi %5, %7, %9
%11 = phi %4, %10, 0:i32
%12 = phi %3, %11, 0:i32
%13 = sub %2, %12
%14 = ne %2, 0:i32 (hasExternalUses)
%15:i32 = zext %14
%16:i32 = var
%17 = eq %16, 103:i32 (hasExternalUses)
%18:i32 = zext %17
%19 = and %15, %18
%20 = shl %19, 31:i32
%21 = ashr %20, 31:i32
%22 = add %13, %21 (hasExternalUses)
%23 = add %22, 9216:i32 (hasExternalUses)
%24 = sdiv %23, 9:i32
%25 = shl %24, 2:i32
%26 = slt %1, 0:i32
blockpc %0 0 %26 1:i1
%27:i32 = zext %26
%28 = eq %27, 0:i32
blockpc %0 1 %28 1:i1
%29:i32 = var
blockpc %3 0 %29 1:i1
%30:i32 = var
blockpc %3 1 %30 1:i1
%31:i32 = var
blockpc %4 0 %31 1:i1
%32:i32 = var
blockpc %4 1 %32 1:i1
%33:i32 = var
blockpc %5 0 %33 1:i1
%34:i32 = var
blockpc %5 1 %34 1:i1
%35:i32 = var
%36:i32 = var
pc %35 1:i1
pc %36 1:i1
infer %25


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = add %1, 8:i32 (hasExternalUses)
%3 = add %2, 288:i32 (hasExternalUses)
%4 = phi %0, %2, %3
%5 = block 2
%6:i32 = var
%7 = phi %5, 6:i32, %6
%8 = block 2
%9 = block 2
%10 = block 2
%11:i32 = var
%12:i32 = var
%13 = phi %10, %11, %12
%14 = phi %9, %13, 0:i32
%15 = phi %8, %14, 0:i32
%16 = sub %7, %15
%17:i32 = var
%18:i32 = zext %17
%19:i32 = var
%20:i32 = zext %19
%21 = and %18, %20
%22 = shl %21, 31:i32
%23 = ashr %22, 31:i32
%24 = add %16, %23 (hasExternalUses)
%25 = add %24, 9216:i32 (hasExternalUses)
%26 = sdiv %25, 9:i32
%27 = shl %26, 2:i32
%28 = add %4, %27
%29 = block 2
%30:i32 = var
blockpc %29 0 %30 1:i1
%31:i32 = var
blockpc %29 1 %31 1:i1
%32:i32 = var
%33:i32 = var
%34 = phi %29, %32, %33
%35 = slt %34, 0:i32
blockpc %0 0 %35 1:i1
%36:i32 = var
blockpc %0 1 %36 1:i1
%37:i32 = var
blockpc %5 0 %37 1:i1
%38:i32 = var
blockpc %5 1 %38 1:i1
%39:i32 = var
blockpc %8 0 %39 1:i1
%40:i32 = var
blockpc %8 1 %40 1:i1
%41:i32 = var
blockpc %9 0 %41 1:i1
%42:i32 = var
blockpc %9 1 %42 1:i1
%43:i32 = var
blockpc %10 0 %43 1:i1
%44:i32 = var
blockpc %10 1 %44 1:i1
%45:i32 = var
%46:i32 = var
pc %45 1:i1
pc %46 1:i1
infer %28


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = add %1, 8:i32 (hasExternalUses)
%3 = add %2, 288:i32 (hasExternalUses)
%4 = phi %0, %2, %3
%5 = block 2
%6:i32 = var
%7 = phi %5, 6:i32, %6
%8 = block 2
%9 = block 2
%10 = block 2
%11:i32 = var
%12:i32 = var
%13 = phi %10, %11, %12
%14 = phi %9, %13, 0:i32
%15 = phi %8, %14, 0:i32
%16 = sub %7, %15
%17:i32 = var
%18:i32 = zext %17
%19:i32 = var
%20:i32 = zext %19
%21 = and %18, %20
%22 = shl %21, 31:i32
%23 = ashr %22, 31:i32
%24 = add %16, %23 (hasExternalUses)
%25 = add %24, 9216:i32 (hasExternalUses)
%26 = sdiv %25, 9:i32
%27 = shl %26, 2:i32
%28 = add %4, %27
%29 = add %28, -4092:i32
%30:i32 = var
blockpc %0 0 %30 1:i1
%31:i32 = var
blockpc %0 1 %31 1:i1
%32:i32 = var
blockpc %5 0 %32 1:i1
%33:i32 = var
blockpc %5 1 %33 1:i1
%34:i32 = var
blockpc %8 0 %34 1:i1
%35:i32 = var
blockpc %8 1 %35 1:i1
%36:i32 = var
blockpc %9 0 %36 1:i1
%37:i32 = var
blockpc %9 1 %37 1:i1
%38:i32 = var
blockpc %10 0 %38 1:i1
%39:i32 = var
blockpc %10 1 %39 1:i1
%40:i32 = var
%41:i32 = var
pc %40 1:i1
pc %41 1:i1
infer %29


; start LHS (in $27)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = mul %2, 10:i32 (hasExternalUses)
%4 = phi %1, %3, 10:i32
%5 = urem %0, %4
%6 = block 2
%7:i32 = var
%8 = slt %7, 0:i32
blockpc %6 0 %8 1:i1
%9:i32 = zext %8
%10 = eq %9, 0:i32
blockpc %6 1 %10 1:i1
%11 = phi %6, 6:i32, %7
%12 = block 2
%13:i32 = var
%14 = ne %13, 102:i32
blockpc %12 0 %14 1:i1
%15:i32 = zext %14
%16 = eq %15, 0:i32
blockpc %12 1 %16 1:i1
%17 = block 2
%18:i32 = var
blockpc %17 0 %18 1:i1
%19:i32 = var
blockpc %17 1 %19 1:i1
%20 = block 2
%21:i32 = var
blockpc %20 0 %21 1:i1
%22:i32 = var
blockpc %20 1 %22 1:i1
%23:i32 = var
%24:i32 = var
%25 = phi %20, %23, %24
%26 = phi %17, %25, 0:i32
%27 = phi %12, %26, 0:i32
%28 = sub %11, %27
%29:i32 = var
%30 = add %28, %29
%31 = add %30, 9216:i32
%32 = srem %31, 9:i32
%33 = slt %32, 8:i32
blockpc %1 0 %33 1:i1
%34:i32 = var
blockpc %1 1 %34 1:i1
%35:i32 = var
%36:i32 = var
pc %35 1:i1
pc %36 1:i1
infer %5


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = add %1, 8:i32 (hasExternalUses)
%3 = add %2, 288:i32 (hasExternalUses)
%4 = phi %0, %2, %3
%5 = block 2
%6:i32 = var
%7 = phi %5, 6:i32, %6
%8 = block 2
%9 = block 2
%10 = block 2
%11:i32 = var
%12:i32 = var
%13 = phi %10, %11, %12
%14 = phi %9, %13, 0:i32
%15 = phi %8, %14, 0:i32
%16 = sub %7, %15
%17:i32 = var
%18 = shl %17, 31:i32
%19 = ashr %18, 31:i32
%20 = add %16, %19 (hasExternalUses)
%21 = add %20, 9216:i32 (hasExternalUses)
%22 = sdiv %21, 9:i32
%23 = shl %22, 2:i32
%24 = add %4, %23
%25 = add %24, -4092:i32 (hasExternalUses)
%26 = add %25, 4:i32
%27 = block 2
%28:i32 = var
%29 = ne %28, 0:i32
blockpc %27 0 %29 1:i1
%30:i32 = var
blockpc %27 1 %30 1:i1
%31:i32 = var
%32:i32 = var
%33 = phi %27, %31, %32
%34 = slt %33, 0:i32
blockpc %0 0 %34 1:i1
%35:i32 = var
blockpc %0 1 %35 1:i1
%36:i32 = var
blockpc %5 0 %36 1:i1
%37:i32 = var
blockpc %5 1 %37 1:i1
%38:i32 = var
blockpc %8 0 %38 1:i1
%39:i32 = var
blockpc %8 1 %39 1:i1
%40:i32 = var
blockpc %9 0 %40 1:i1
%41:i32 = var
blockpc %9 1 %41 1:i1
%42:i32 = var
blockpc %10 0 %42 1:i1
%43:i32 = var
blockpc %10 1 %43 1:i1
%44:i32 = var
%45:i32 = var
pc %44 1:i1
pc %45 1:i1
infer %26


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = add %1, 8:i32 (hasExternalUses)
%3 = add %2, 288:i32 (hasExternalUses)
%4 = phi %0, %2, %3
%5 = block 2
%6:i32 = var
%7 = phi %5, 6:i32, %6
%8 = block 2
%9 = block 2
%10 = block 2
%11:i32 = var
%12:i32 = var
%13 = phi %10, %11, %12
%14 = phi %9, %13, 0:i32
%15 = phi %8, %14, 0:i32
%16 = sub %7, %15
%17:i32 = var
%18 = ashr %17, 31:i32
%19 = add %16, %18 (hasExternalUses)
%20 = add %19, 9216:i32 (hasExternalUses)
%21 = sdiv %20, 9:i32
%22 = shl %21, 2:i32
%23 = add %4, %22
%24 = add %23, -4092:i32 (hasExternalUses)
%25 = add %24, 4:i32
%26 = block 2
%27 = block 2
%28 = block 2
%29 = block 2
%30:i32 = var
%31:i32 = var
%32 = phi %29, %30, %31
%33 = phi %28, %32, %30
%34:i32 = var
%35 = phi %27, %33, %34
%36 = block 2
%37:i32 = var
%38:i32 = var
%39 = phi %36, %37, %38
%40 = phi %26, %35, %39
%41 = eq %25, %40
%42:i32 = var
blockpc %0 0 %42 1:i1
%43:i32 = var
blockpc %0 1 %43 1:i1
%44:i32 = var
blockpc %5 0 %44 1:i1
%45:i32 = var
blockpc %5 1 %45 1:i1
%46:i32 = var
blockpc %8 0 %46 1:i1
%47:i32 = var
blockpc %8 1 %47 1:i1
%48:i32 = var
blockpc %9 0 %48 1:i1
%49:i32 = var
blockpc %9 1 %49 1:i1
%50:i32 = var
blockpc %10 0 %50 1:i1
%51:i32 = var
blockpc %10 1 %51 1:i1
%52:i32 = var
blockpc %26 0 %52 1:i1
%53:i32 = var
blockpc %26 1 %53 1:i1
%54:i32 = var
blockpc %27 0 %54 1:i1
%55:i32 = var
blockpc %27 1 %55 1:i1
%56:i32 = var
blockpc %28 0 %56 1:i1
%57:i32 = var
blockpc %28 1 %57 1:i1
%58:i32 = var
blockpc %29 0 %58 1:i1
%59:i32 = var
blockpc %29 1 %59 1:i1
%60:i32 = var
blockpc %36 0 %60 1:i1
%61:i32 = var
blockpc %36 1 %61 1:i1
%62:i32 = var
%63:i32 = var
pc %62 1:i1
pc %63 1:i1
infer %41


; start LHS (in $27)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = mul %2, 10:i32 (hasExternalUses)
%4 = phi %1, %3, 10:i32
%5 = urem %0, %4 (hasExternalUses)
%6 = eq %5, 0:i32
%7 = block 2
%8:i32 = var
%9 = slt %8, 0:i32
blockpc %7 0 %9 1:i1
%10:i32 = zext %9
%11 = eq %10, 0:i32
blockpc %7 1 %11 1:i1
%12 = phi %7, 6:i32, %8
%13 = block 2
%14:i32 = var
%15 = ne %14, 102:i32
blockpc %13 0 %15 1:i1
%16:i32 = zext %15
%17 = eq %16, 0:i32
blockpc %13 1 %17 1:i1
%18 = block 2
%19:i32 = var
blockpc %18 0 %19 1:i1
%20:i32 = var
blockpc %18 1 %20 1:i1
%21 = block 2
%22:i32 = var
blockpc %21 0 %22 1:i1
%23:i32 = var
blockpc %21 1 %23 1:i1
%24:i32 = var
%25:i32 = var
%26 = phi %21, %24, %25
%27 = phi %18, %26, 0:i32
%28 = phi %13, %27, 0:i32
%29 = sub %12, %28
%30:i32 = var
%31 = add %29, %30
%32 = add %31, 9216:i32
%33 = srem %32, 9:i32
%34 = slt %33, 8:i32
blockpc %1 0 %34 1:i1
%35:i32 = var
blockpc %1 1 %35 1:i1
%36:i32 = var
%37:i32 = var
pc %36 1:i1
pc %37 1:i1
infer %6


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = add %1, 8:i32 (hasExternalUses)
%3 = add %2, 288:i32 (hasExternalUses)
%4 = phi %0, %2, %3
%5:i32 = var
%6 = add %5, 9216:i32 (hasExternalUses)
%7 = sdiv %6, 9:i32
%8 = shl %7, 2:i32
%9 = add %4, %8
%10 = add %9, -4092:i32 (hasExternalUses)
%11 = add %10, 4:i32
%12 = block 2
%13 = block 2
%14 = block 2
%15 = block 2
%16:i32 = var
%17 = add %16, 4:i32 (hasExternalUses)
%18 = phi %15, %16, %17
%19 = phi %14, %18, %16
%20 = block 2
%21 = block 2
%22:i32 = var
%23:i32 = var
%24 = phi %21, %22, %23
%25 = block 2
%26:i32 = var
%27 = phi %25, %22, %26
%28 = phi %14, %24, %27
%29 = phi %20, %4, %28
%30:i32 = var
%31 = add %29, %30 (hasExternalUses)
%32 = phi %13, %19, %31
%33 = block 2
%34:i32 = var
%35:i32 = var
%36 = phi %33, %34, %35
%37 = phi %12, %32, %36
%38 = eq %11, %37 (hasExternalUses)
%39:i32 = zext %38
%40:i32 = var
%41:i32 = zext %40
%42 = and %39, %41
%43:i32 = var
blockpc %0 0 %43 1:i1
%44:i32 = var
blockpc %0 1 %44 1:i1
%45:i32 = var
blockpc %12 0 %45 1:i1
%46:i32 = var
blockpc %12 1 %46 1:i1
%47:i32 = var
blockpc %13 0 %47 1:i1
%48:i32 = var
blockpc %13 1 %48 1:i1
%49:i32 = var
blockpc %14 0 %49 1:i1
%50:i32 = var
blockpc %14 1 %50 1:i1
%51:i32 = var
blockpc %15 0 %51 1:i1
%52:i32 = var
blockpc %15 1 %52 1:i1
%53:i32 = var
blockpc %20 0 %53 1:i1
%54:i32 = var
blockpc %20 1 %54 1:i1
%55:i32 = var
blockpc %21 0 %55 1:i1
%56:i32 = var
blockpc %21 1 %56 1:i1
%57:i32 = var
blockpc %25 0 %57 1:i1
%58:i32 = var
blockpc %25 1 %58 1:i1
%59:i32 = var
blockpc %33 0 %59 1:i1
%60:i32 = var
blockpc %33 1 %60 1:i1
%61:i32 = var
%62:i32 = var
pc %61 1:i1
pc %62 1:i1
infer %42


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = add %1, 8:i32 (hasExternalUses)
%3 = add %2, 288:i32 (hasExternalUses)
%4 = phi %0, %2, %3
%5:i32 = var
%6 = sdiv %5, 9:i32
%7 = shl %6, 2:i32
%8 = add %4, %7
%9 = add %8, -4092:i32 (hasExternalUses)
%10 = add %9, 4:i32
%11 = block 2
%12 = block 2
%13 = block 2
%14 = block 2
%15:i32 = var
%16 = add %15, 4:i32 (hasExternalUses)
%17 = phi %14, %15, %16
%18 = phi %13, %17, %15
%19 = block 2
%20 = block 2
%21:i32 = var
%22:i32 = var
%23 = phi %20, %21, %22
%24 = block 2
%25:i32 = var
%26 = phi %24, %21, %25
%27 = phi %13, %23, %26
%28 = phi %19, %4, %27
%29:i32 = var
%30 = add %29, 1:i32 (hasExternalUses)
%31 = shl %30, 2:i32
%32 = add %28, %31 (hasExternalUses)
%33 = phi %12, %18, %32
%34 = block 2
%35:i32 = var
%36:i32 = var
%37 = phi %34, %35, %36
%38 = phi %11, %33, %37
%39 = eq %10, %38 (hasExternalUses)
%40:i32 = zext %39
%41:i32 = var
%42:i32 = zext %41
%43 = and %40, %42
%44 = eq %43, 0:i32
%45:i32 = var
blockpc %0 0 %45 1:i1
%46:i32 = var
blockpc %0 1 %46 1:i1
%47:i32 = var
blockpc %11 0 %47 1:i1
%48:i32 = var
blockpc %11 1 %48 1:i1
%49:i32 = var
blockpc %12 0 %49 1:i1
%50:i32 = var
blockpc %12 1 %50 1:i1
%51:i32 = var
blockpc %13 0 %51 1:i1
%52:i32 = var
blockpc %13 1 %52 1:i1
%53:i32 = var
blockpc %14 0 %53 1:i1
%54:i32 = var
blockpc %14 1 %54 1:i1
%55:i32 = var
blockpc %19 0 %55 1:i1
%56:i32 = var
blockpc %19 1 %56 1:i1
%57:i32 = var
blockpc %20 0 %57 1:i1
%58:i32 = var
blockpc %20 1 %58 1:i1
%59:i32 = var
blockpc %24 0 %59 1:i1
%60:i32 = var
blockpc %24 1 %60 1:i1
%61:i32 = var
blockpc %34 0 %61 1:i1
%62:i32 = var
blockpc %34 1 %62 1:i1
%63:i32 = var
%64:i32 = var
pc %63 1:i1
pc %64 1:i1
infer %44


; start LHS (in $27)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = mul %2, 10:i32 (hasExternalUses)
%4 = phi %1, %3, 10:i32
%5 = udiv %0, %4
%6 = block 2
%7:i32 = var
%8 = slt %7, 0:i32
blockpc %6 0 %8 1:i1
%9:i32 = zext %8
%10 = eq %9, 0:i32
blockpc %6 1 %10 1:i1
%11 = phi %6, 6:i32, %7
%12 = block 2
%13:i32 = var
%14 = ne %13, 102:i32
blockpc %12 0 %14 1:i1
%15:i32 = zext %14
%16 = eq %15, 0:i32
blockpc %12 1 %16 1:i1
%17 = block 2
%18:i32 = var
blockpc %17 0 %18 1:i1
%19:i32 = var
blockpc %17 1 %19 1:i1
%20 = block 2
%21:i32 = var
blockpc %20 0 %21 1:i1
%22:i32 = var
blockpc %20 1 %22 1:i1
%23:i32 = var
%24:i32 = var
%25 = phi %20, %23, %24
%26 = phi %17, %25, 0:i32
%27 = phi %12, %26, 0:i32
%28 = sub %11, %27
%29:i32 = var
%30 = add %28, %29
%31 = add %30, 9216:i32
%32 = srem %31, 9:i32
%33 = slt %32, 8:i32
blockpc %1 0 %33 1:i1
%34:i32 = var
blockpc %1 1 %34 1:i1
%35:i32 = var
%36:i32 = var
%37:i32 = var
pc %35 1:i1
pc %36 1:i1
pc %37 1:i1
infer %5


; start LHS (in $27)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = mul %2, 10:i32 (hasExternalUses)
%4 = phi %1, %3, 10:i32
%5 = udiv %0, %4
%6 = and %5, 1:i32
%7 = block 2
%8:i32 = var
%9 = slt %8, 0:i32
blockpc %7 0 %9 1:i1
%10:i32 = zext %9
%11 = eq %10, 0:i32
blockpc %7 1 %11 1:i1
%12 = phi %7, 6:i32, %8
%13 = block 2
%14:i32 = var
%15 = ne %14, 102:i32
blockpc %13 0 %15 1:i1
%16:i32 = zext %15
%17 = eq %16, 0:i32
blockpc %13 1 %17 1:i1
%18 = block 2
%19:i32 = var
blockpc %18 0 %19 1:i1
%20:i32 = var
blockpc %18 1 %20 1:i1
%21 = block 2
%22:i32 = var
blockpc %21 0 %22 1:i1
%23:i32 = var
blockpc %21 1 %23 1:i1
%24:i32 = var
%25:i32 = var
%26 = phi %21, %24, %25
%27 = phi %18, %26, 0:i32
%28 = phi %13, %27, 0:i32
%29 = sub %12, %28
%30:i32 = var
%31 = add %29, %30
%32 = add %31, 9216:i32
%33 = srem %32, 9:i32
%34 = slt %33, 8:i32
blockpc %1 0 %34 1:i1
%35:i32 = var
blockpc %1 1 %35 1:i1
%36:i32 = var
%37:i32 = var
%38:i32 = var
pc %36 1:i1
pc %37 1:i1
pc %38 1:i1
infer %6


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = mul %1, 10:i32 (hasExternalUses)
%3 = phi %0, %2, 10:i32
%4 = sdiv %3, 2:i32
%5 = block 2
%6:i32 = var
%7 = slt %6, 0:i32
blockpc %5 0 %7 1:i1
%8:i32 = zext %7
%9 = eq %8, 0:i32
blockpc %5 1 %9 1:i1
%10 = phi %5, 6:i32, %6
%11 = block 2
%12:i32 = var
%13 = ne %12, 102:i32
blockpc %11 0 %13 1:i1
%14:i32 = zext %13
%15 = eq %14, 0:i32
blockpc %11 1 %15 1:i1
%16 = block 2
%17:i32 = var
blockpc %16 0 %17 1:i1
%18:i32 = var
blockpc %16 1 %18 1:i1
%19 = block 2
%20:i32 = var
blockpc %19 0 %20 1:i1
%21:i32 = var
blockpc %19 1 %21 1:i1
%22:i32 = var
%23:i32 = var
%24 = phi %19, %22, %23
%25 = phi %16, %24, 0:i32
%26 = phi %11, %25, 0:i32
%27 = sub %10, %26
%28:i32 = var
%29 = add %27, %28
%30 = add %29, 9216:i32
%31 = srem %30, 9:i32
%32 = slt %31, 8:i32
blockpc %0 0 %32 1:i1
%33:i32 = var
blockpc %0 1 %33 1:i1
%34:i32 = var
%35:i32 = var
%36:i32 = var
pc %34 1:i1
pc %35 1:i1
pc %36 1:i1
infer %4


; start LHS (in $27)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = mul %2, 10:i32 (hasExternalUses)
%4 = phi %1, %3, 10:i32
%5 = urem %0, %4 (hasExternalUses)
%6 = sdiv %4, 2:i32 (hasExternalUses)
%7 = ult %5, %6
%8 = block 2
%9:i32 = var
%10 = slt %9, 0:i32
blockpc %8 0 %10 1:i1
%11:i32 = zext %10
%12 = eq %11, 0:i32
blockpc %8 1 %12 1:i1
%13 = phi %8, 6:i32, %9
%14 = block 2
%15:i32 = var
%16 = ne %15, 102:i32
blockpc %14 0 %16 1:i1
%17:i32 = zext %16
%18 = eq %17, 0:i32
blockpc %14 1 %18 1:i1
%19 = block 2
%20:i32 = var
blockpc %19 0 %20 1:i1
%21:i32 = var
blockpc %19 1 %21 1:i1
%22 = block 2
%23:i32 = var
blockpc %22 0 %23 1:i1
%24:i32 = var
blockpc %22 1 %24 1:i1
%25:i32 = var
%26:i32 = var
%27 = phi %22, %25, %26
%28 = phi %19, %27, 0:i32
%29 = phi %14, %28, 0:i32
%30 = sub %13, %29
%31:i32 = var
%32 = add %30, %31
%33 = add %32, 9216:i32
%34 = srem %33, 9:i32
%35 = slt %34, 8:i32
blockpc %1 0 %35 1:i1
%36:i32 = var
blockpc %1 1 %36 1:i1
%37:i32 = var
%38:i32 = var
%39:i32 = var
pc %37 1:i1
pc %38 1:i1
pc %39 1:i1
infer %7


; start LHS (in $27)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = mul %2, 10:i32 (hasExternalUses)
%4 = phi %1, %3, 10:i32
%5 = urem %0, %4 (hasExternalUses)
%6 = sdiv %4, 2:i32 (hasExternalUses)
%7 = eq %5, %6
%8 = block 2
%9:i32 = var
%10 = slt %9, 0:i32
blockpc %8 0 %10 1:i1
%11:i32 = zext %10
%12 = eq %11, 0:i32
blockpc %8 1 %12 1:i1
%13 = phi %8, 6:i32, %9
%14 = block 2
%15:i32 = var
%16 = ne %15, 102:i32
blockpc %14 0 %16 1:i1
%17:i32 = zext %16
%18 = eq %17, 0:i32
blockpc %14 1 %18 1:i1
%19 = block 2
%20:i32 = var
blockpc %19 0 %20 1:i1
%21:i32 = var
blockpc %19 1 %21 1:i1
%22 = block 2
%23:i32 = var
blockpc %22 0 %23 1:i1
%24:i32 = var
blockpc %22 1 %24 1:i1
%25:i32 = var
%26:i32 = var
%27 = phi %22, %25, %26
%28 = phi %19, %27, 0:i32
%29 = phi %14, %28, 0:i32
%30 = sub %13, %29
%31:i32 = var
%32 = add %30, %31
%33 = add %32, 9216:i32
%34 = srem %33, 9:i32
%35 = slt %34, 8:i32
blockpc %1 0 %35 1:i1
%36:i32 = var
blockpc %1 1 %36 1:i1
%37:i32 = var
%38:i32 = var
%39:i32 = var
pc %37 1:i1
pc %38 1:i1
pc %39 1:i1
infer %7


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = add %1, 8:i32 (hasExternalUses)
%3 = add %2, 288:i32 (hasExternalUses)
%4 = phi %0, %2, %3
%5:i32 = var
%6 = add %5, 9216:i32 (hasExternalUses)
%7 = sdiv %6, 9:i32
%8 = shl %7, 2:i32
%9 = add %4, %8
%10 = add %9, -4092:i32 (hasExternalUses)
%11 = add %10, 4:i32
%12 = block 2
%13 = block 2
%14 = block 2
%15 = block 2
%16:i32 = var
%17 = add %16, 4:i32 (hasExternalUses)
%18 = phi %15, %16, %17
%19 = phi %14, %18, %16
%20 = block 2
%21 = block 2
%22:i32 = var
%23:i32 = var
%24 = phi %21, %22, %23
%25 = block 2
%26:i32 = var
%27 = phi %25, %22, %26
%28 = phi %14, %24, %27
%29 = phi %20, %4, %28
%30:i32 = var
%31 = add %29, %30 (hasExternalUses)
%32 = phi %13, %19, %31
%33 = block 2
%34:i32 = var
%35:i32 = var
%36 = phi %33, %34, %35
%37 = phi %12, %32, %36
%38 = eq %11, %37 (hasExternalUses)
%39:i32 = zext %38
%40:i32 = var
%41:i32 = zext %40
%42 = and %39, %41
%43:i32 = var
blockpc %0 0 %43 1:i1
%44:i32 = var
blockpc %0 1 %44 1:i1
%45:i32 = var
blockpc %12 0 %45 1:i1
%46:i32 = var
blockpc %12 1 %46 1:i1
%47:i32 = var
blockpc %13 0 %47 1:i1
%48:i32 = var
blockpc %13 1 %48 1:i1
%49:i32 = var
blockpc %14 0 %49 1:i1
%50:i32 = var
blockpc %14 1 %50 1:i1
%51:i32 = var
blockpc %15 0 %51 1:i1
%52:i32 = var
blockpc %15 1 %52 1:i1
%53:i32 = var
blockpc %20 0 %53 1:i1
%54:i32 = var
blockpc %20 1 %54 1:i1
%55:i32 = var
blockpc %21 0 %55 1:i1
%56:i32 = var
blockpc %21 1 %56 1:i1
%57:i32 = var
blockpc %25 0 %57 1:i1
%58:i32 = var
blockpc %25 1 %58 1:i1
%59:i32 = var
blockpc %33 0 %59 1:i1
%60:i32 = var
blockpc %33 1 %60 1:i1
%61:i32 = var
%62:i32 = var
%63:i32 = var
pc %61 1:i1
pc %62 1:i1
pc %63 1:i1
infer %42


; start LHS (in $27)
%0:i32 = var
%1 = eq %0, 45:i32
%2 = block 2
%3:i64 = var
%4 = slt %3, 0:i64
blockpc %2 0 %4 1:i1
%5:i32 = zext %4
%6 = eq %5, 0:i32
blockpc %2 1 %6 1:i1
%7:i32 = var
%8 = and %7, 2049:i32
%9 = ne %8, 0:i32
%10:i32 = zext %9
%11 = phi %2, 1:i32, %10
%12 = ne %11, 0:i32
%13 = block 2
%14:i32 = var
blockpc %13 0 %14 1:i1
%15:i32 = var
blockpc %13 1 %15 1:i1
%16:i32 = var
%17 = add %16, 8:i32
%18 = add %17, 288:i32
%19 = phi %13, %17, %18
%20:i32 = var
%21 = sdiv %20, 9:i32
%22 = shl %21, 2:i32
%23 = add %19, %22
%24 = add %23, -4092:i32
%25 = add %24, 4:i32
%26 = block 2
%27:i32 = var
blockpc %26 0 %27 1:i1
%28:i32 = var
blockpc %26 1 %28 1:i1
%29 = block 2
%30:i32 = var
blockpc %29 0 %30 1:i1
%31:i32 = var
blockpc %29 1 %31 1:i1
%32 = block 2
%33:i32 = var
blockpc %32 0 %33 1:i1
%34:i32 = var
blockpc %32 1 %34 1:i1
%35 = block 2
%36:i32 = var
blockpc %35 0 %36 1:i1
%37:i32 = var
blockpc %35 1 %37 1:i1
%38:i32 = var
%39:i32 = var
%40 = phi %35, %38, %39
%41 = phi %32, %40, %38
%42:i32 = var
%43 = phi %29, %41, %42
%44 = block 2
%45:i32 = var
blockpc %44 0 %45 1:i1
%46:i32 = var
blockpc %44 1 %46 1:i1
%47:i32 = var
%48:i32 = var
%49 = phi %44, %47, %48
%50 = phi %26, %43, %49
%51 = eq %25, %50
%52:i32 = zext %51
%53:i32 = var
%54:i32 = zext %53
%55 = and %52, %54
%56 = eq %55, 0:i32
%57:i32 = var
%58:i32 = var
pc %12 1:i1
pc %56 1:i1
pc %57 1:i1
pc %58 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = mul %2, 10:i32 (hasExternalUses)
%4 = phi %1, %3, 10:i32
%5 = urem %0, %4 (hasExternalUses)
%6 = sub %0, %5
%7 = block 2
%8:i32 = var
%9 = slt %8, 0:i32
blockpc %7 0 %9 1:i1
%10:i32 = zext %9
%11 = eq %10, 0:i32
blockpc %7 1 %11 1:i1
%12 = phi %7, 6:i32, %8
%13 = block 2
%14:i32 = var
%15 = ne %14, 102:i32
blockpc %13 0 %15 1:i1
%16:i32 = zext %15
%17 = eq %16, 0:i32
blockpc %13 1 %17 1:i1
%18 = block 2
%19:i32 = var
blockpc %18 0 %19 1:i1
%20:i32 = var
blockpc %18 1 %20 1:i1
%21 = block 2
%22:i32 = var
blockpc %21 0 %22 1:i1
%23:i32 = var
blockpc %21 1 %23 1:i1
%24:i32 = var
%25:i32 = var
%26 = phi %21, %24, %25
%27 = phi %18, %26, 0:i32
%28 = phi %13, %27, 0:i32
%29 = sub %12, %28
%30:i32 = var
%31 = add %29, %30
%32 = add %31, 9216:i32
%33 = srem %32, 9:i32
%34 = slt %33, 8:i32
blockpc %1 0 %34 1:i1
%35:i32 = var
blockpc %1 1 %35 1:i1
%36:i32 = var
%37:i32 = var
%38:i32 = var
pc %36 1:i1
pc %37 1:i1
pc %38 1:i1
infer %6


; start LHS (in $27)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = mul %2, 10:i32 (hasExternalUses)
%4 = phi %1, %3, 10:i32
%5 = urem %0, %4 (hasExternalUses)
%6 = sub %0, %5 (hasExternalUses)
%7 = add %6, %4
%8 = block 2
%9:i32 = var
%10 = slt %9, 0:i32
blockpc %8 0 %10 1:i1
%11:i32 = zext %10
%12 = eq %11, 0:i32
blockpc %8 1 %12 1:i1
%13 = phi %8, 6:i32, %9
%14 = block 2
%15:i32 = var
%16 = ne %15, 102:i32
blockpc %14 0 %16 1:i1
%17:i32 = zext %16
%18 = eq %17, 0:i32
blockpc %14 1 %18 1:i1
%19 = block 2
%20:i32 = var
blockpc %19 0 %20 1:i1
%21:i32 = var
blockpc %19 1 %21 1:i1
%22 = block 2
%23:i32 = var
blockpc %22 0 %23 1:i1
%24:i32 = var
blockpc %22 1 %24 1:i1
%25:i32 = var
%26:i32 = var
%27 = phi %22, %25, %26
%28 = phi %19, %27, 0:i32
%29 = phi %14, %28, 0:i32
%30 = sub %13, %29
%31:i32 = var
%32 = add %30, %31
%33 = add %32, 9216:i32
%34 = srem %33, 9:i32
%35 = slt %34, 8:i32
blockpc %1 0 %35 1:i1
%36:i32 = var
blockpc %1 1 %36 1:i1
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = var
pc %37 1:i1
pc %38 1:i1
pc %39 1:i1
pc %40 1:i1
infer %7


; start LHS (in $27)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = mul %2, 10:i32 (hasExternalUses)
%4 = phi %1, %3, 10:i32
%5 = urem %0, %4 (hasExternalUses)
%6 = sub %0, %5 (hasExternalUses)
%7 = add %6, %4 (hasExternalUses)
%8 = ult 999999999:i32, %7
%9 = block 2
%10:i32 = var
%11 = slt %10, 0:i32
blockpc %9 0 %11 1:i1
%12:i32 = zext %11
%13 = eq %12, 0:i32
blockpc %9 1 %13 1:i1
%14 = phi %9, 6:i32, %10
%15 = block 2
%16:i32 = var
%17 = ne %16, 102:i32
blockpc %15 0 %17 1:i1
%18:i32 = zext %17
%19 = eq %18, 0:i32
blockpc %15 1 %19 1:i1
%20 = block 2
%21:i32 = var
blockpc %20 0 %21 1:i1
%22:i32 = var
blockpc %20 1 %22 1:i1
%23 = block 2
%24:i32 = var
blockpc %23 0 %24 1:i1
%25:i32 = var
blockpc %23 1 %25 1:i1
%26:i32 = var
%27:i32 = var
%28 = phi %23, %26, %27
%29 = phi %20, %28, 0:i32
%30 = phi %15, %29, 0:i32
%31 = sub %14, %30
%32:i32 = var
%33 = add %31, %32
%34 = add %33, 9216:i32
%35 = srem %34, 9:i32
%36 = slt %35, 8:i32
blockpc %1 0 %36 1:i1
%37:i32 = var
blockpc %1 1 %37 1:i1
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = var
pc %38 1:i1
pc %39 1:i1
pc %40 1:i1
pc %41 1:i1
infer %8


; start LHS (in $27)
%0:i32 = var
%1 = add %0, -4:i32
%2:i32 = var
%3 = block 2
%4:i32 = var
%5 = add %4, 9216:i32
%6 = srem %5, 9:i32
%7 = slt %6, 8:i32
blockpc %3 0 %7 1:i1
%8:i32 = zext %7
%9 = eq %8, 0:i32
blockpc %3 1 %9 1:i1
%10:i32 = var
%11 = mul %10, 10:i32
%12 = phi %3, %11, 10:i32
%13 = urem %2, %12
%14 = sub %2, %13
%15 = add %14, %12
%16 = ult 999999999:i32, %15
%17:i32 = var
%18 = ne %17, 0:i32
%19 = block 2
%20:i32 = var
blockpc %19 0 %20 1:i1
%21:i32 = var
blockpc %19 1 %21 1:i1
%22:i32 = var
%23 = add %22, 8:i32
%24 = add %23, 288:i32
%25 = phi %19, %23, %24
%26:i32 = var
%27 = add %25, %26
%28 = add %27, -4092:i32
%29 = add %28, 4:i32
%30 = block 2
%31:i32 = var
blockpc %30 0 %31 1:i1
%32:i32 = var
blockpc %30 1 %32 1:i1
%33 = block 2
%34:i32 = var
blockpc %33 0 %34 1:i1
%35:i32 = var
blockpc %33 1 %35 1:i1
%36 = block 2
%37:i32 = var
blockpc %36 0 %37 1:i1
%38:i32 = var
blockpc %36 1 %38 1:i1
%39 = block 2
%40:i32 = var
blockpc %39 0 %40 1:i1
%41:i32 = var
blockpc %39 1 %41 1:i1
%42:i32 = var
%43:i32 = var
%44 = phi %39, %42, %43
%45 = phi %36, %44, %42
%46:i32 = var
%47 = phi %33, %45, %46
%48 = block 2
%49:i32 = var
blockpc %48 0 %49 1:i1
%50:i32 = var
blockpc %48 1 %50 1:i1
%51:i32 = var
%52:i32 = var
%53 = phi %48, %51, %52
%54 = phi %30, %47, %53
%55 = eq %29, %54
%56:i32 = zext %55
%57:i32 = var
%58:i32 = zext %57
%59 = and %56, %58
%60 = eq %59, 0:i32
%61:i32 = var
%62:i32 = var
pc %16 1:i1
pc %18 1:i1
pc %60 1:i1
pc %61 1:i1
pc %62 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = add %0, -4:i32 (hasExternalUses)
%2:i32 = var
%3 = ult %1, %2
%4:i32 = var
%5 = block 2
%6:i32 = var
%7 = add %6, 9216:i32
%8 = srem %7, 9:i32
%9 = slt %8, 8:i32
blockpc %5 0 %9 1:i1
%10:i32 = zext %9
%11 = eq %10, 0:i32
blockpc %5 1 %11 1:i1
%12:i32 = var
%13 = mul %12, 10:i32
%14 = phi %5, %13, 10:i32
%15 = urem %4, %14
%16 = sub %4, %15
%17 = add %16, %14
%18 = ult 999999999:i32, %17
%19:i32 = var
%20 = ne %19, 0:i32
%21 = block 2
%22:i32 = var
blockpc %21 0 %22 1:i1
%23:i32 = var
blockpc %21 1 %23 1:i1
%24:i32 = var
%25 = add %24, 8:i32
%26:i32 = var
%27 = phi %21, %25, %26
%28:i32 = var
%29 = add %27, %28
%30 = add %29, -4092:i32
%31 = add %30, 4:i32
%32 = block 2
%33:i32 = var
blockpc %32 0 %33 1:i1
%34:i32 = var
blockpc %32 1 %34 1:i1
%35 = block 2
%36:i32 = var
blockpc %35 0 %36 1:i1
%37:i32 = var
blockpc %35 1 %37 1:i1
%38 = block 2
%39:i32 = var
blockpc %38 0 %39 1:i1
%40:i32 = var
blockpc %38 1 %40 1:i1
%41 = block 2
%42:i32 = var
blockpc %41 0 %42 1:i1
%43:i32 = var
blockpc %41 1 %43 1:i1
%44:i32 = var
%45:i32 = var
%46 = phi %41, %44, %45
%47 = phi %38, %46, %44
%48:i32 = var
%49 = phi %35, %47, %48
%50 = block 2
%51:i32 = var
blockpc %50 0 %51 1:i1
%52:i32 = var
blockpc %50 1 %52 1:i1
%53:i32 = var
%54:i32 = var
%55 = phi %50, %53, %54
%56 = phi %32, %49, %55
%57 = eq %31, %56
%58:i32 = zext %57
%59:i32 = var
%60:i32 = zext %59
%61 = and %58, %60
%62 = eq %61, 0:i32
%63:i32 = var
%64:i32 = var
pc %18 1:i1
pc %20 1:i1
pc %62 1:i1
pc %63 1:i1
pc %64 1:i1
infer %3


; start LHS (in $27)
%0:i32 = var
%1 = add %0, -4:i32
%2:i32 = var
%3 = add %2, -4:i32
%4 = ult %3, %0
%5:i32 = var
%6 = block 2
%7:i32 = var
%8 = add %7, 9216:i32
%9 = srem %8, 9:i32
%10 = slt %9, 8:i32
blockpc %6 0 %10 1:i1
%11:i32 = zext %10
%12 = eq %11, 0:i32
blockpc %6 1 %12 1:i1
%13:i32 = var
%14 = mul %13, 10:i32
%15 = phi %6, %14, 10:i32
%16 = urem %5, %15
%17 = sub %5, %16
%18 = add %17, %15
%19 = ult 999999999:i32, %18
%20:i32 = var
%21 = ne %20, 0:i32
%22 = block 2
%23:i32 = var
blockpc %22 0 %23 1:i1
%24:i32 = var
blockpc %22 1 %24 1:i1
%25:i32 = var
%26 = add %25, 8:i32
%27:i32 = var
%28 = phi %22, %26, %27
%29:i32 = var
%30 = add %28, %29
%31 = add %30, -4092:i32
%32 = add %31, 4:i32
%33 = block 2
%34:i32 = var
blockpc %33 0 %34 1:i1
%35:i32 = var
blockpc %33 1 %35 1:i1
%36 = block 2
%37:i32 = var
blockpc %36 0 %37 1:i1
%38:i32 = var
blockpc %36 1 %38 1:i1
%39 = block 2
%40:i32 = var
blockpc %39 0 %40 1:i1
%41:i32 = var
blockpc %39 1 %41 1:i1
%42 = block 2
%43:i32 = var
blockpc %42 0 %43 1:i1
%44:i32 = var
blockpc %42 1 %44 1:i1
%45:i32 = var
%46:i32 = var
%47 = phi %42, %45, %46
%48 = phi %39, %47, %45
%49:i32 = var
%50 = phi %36, %48, %49
%51 = block 2
%52:i32 = var
blockpc %51 0 %52 1:i1
%53:i32 = var
blockpc %51 1 %53 1:i1
%54:i32 = var
%55:i32 = var
%56 = phi %51, %54, %55
%57 = phi %33, %50, %56
%58 = eq %32, %57
%59:i32 = zext %58
%60:i32 = var
%61:i32 = zext %60
%62 = and %59, %61
%63 = eq %62, 0:i32
%64:i32 = var
%65:i32 = var
pc %4 1:i1
pc %19 1:i1
pc %21 1:i1
pc %63 1:i1
pc %64 1:i1
pc %65 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 1:i32
%2:i32 = var
%3 = block 2
%4:i32 = var
%5 = add %4, 9216:i32
%6 = srem %5, 9:i32
%7 = slt %6, 8:i32
blockpc %3 0 %7 1:i1
%8:i32 = zext %7
%9 = eq %8, 0:i32
blockpc %3 1 %9 1:i1
%10:i32 = var
%11 = mul %10, 10:i32
%12 = phi %3, %11, 10:i32
%13 = urem %2, %12
%14 = sub %2, %13
%15 = add %14, %12
%16 = ult 999999999:i32, %15
%17:i32 = var
%18 = ne %17, 0:i32
%19 = block 2
%20:i32 = var
blockpc %19 0 %20 1:i1
%21:i32 = var
blockpc %19 1 %21 1:i1
%22:i32 = var
%23 = add %22, 8:i32
%24 = add %23, 288:i32
%25 = phi %19, %23, %24
%26:i32 = var
%27 = add %25, %26
%28 = add %27, -4092:i32
%29 = add %28, 4:i32
%30 = block 2
%31:i32 = var
blockpc %30 0 %31 1:i1
%32:i32 = var
blockpc %30 1 %32 1:i1
%33 = block 2
%34:i32 = var
blockpc %33 0 %34 1:i1
%35:i32 = var
blockpc %33 1 %35 1:i1
%36 = block 2
%37:i32 = var
blockpc %36 0 %37 1:i1
%38:i32 = var
blockpc %36 1 %38 1:i1
%39 = block 2
%40:i32 = var
blockpc %39 0 %40 1:i1
%41:i32 = var
blockpc %39 1 %41 1:i1
%42:i32 = var
%43:i32 = var
%44 = phi %39, %42, %43
%45 = phi %36, %44, %42
%46:i32 = var
%47 = phi %33, %45, %46
%48 = block 2
%49:i32 = var
blockpc %48 0 %49 1:i1
%50:i32 = var
blockpc %48 1 %50 1:i1
%51:i32 = var
%52:i32 = var
%53 = phi %48, %51, %52
%54 = phi %30, %47, %53
%55 = eq %29, %54
%56:i32 = zext %55
%57:i32 = var
%58:i32 = zext %57
%59 = and %56, %58
%60 = eq %59, 0:i32
%61:i32 = var
%62:i32 = var
pc %16 1:i1
pc %18 1:i1
pc %60 1:i1
pc %61 1:i1
pc %62 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 1:i32 (hasExternalUses)
%2 = ult 999999999:i32, %1
%3:i32 = var
%4 = block 2
%5:i32 = var
%6 = add %5, 9216:i32
%7 = srem %6, 9:i32
%8 = slt %7, 8:i32
blockpc %4 0 %8 1:i1
%9:i32 = zext %8
%10 = eq %9, 0:i32
blockpc %4 1 %10 1:i1
%11:i32 = var
%12 = mul %11, 10:i32
%13 = phi %4, %12, 10:i32
%14 = urem %3, %13
%15 = sub %3, %14
%16 = add %15, %13
%17 = ult 999999999:i32, %16
%18:i32 = var
%19 = ne %18, 0:i32
%20 = block 2
%21:i32 = var
blockpc %20 0 %21 1:i1
%22:i32 = var
blockpc %20 1 %22 1:i1
%23:i32 = var
%24 = add %23, 8:i32
%25 = add %24, 288:i32
%26 = phi %20, %24, %25
%27:i32 = var
%28 = add %26, %27
%29 = add %28, -4092:i32
%30 = add %29, 4:i32
%31 = block 2
%32:i32 = var
blockpc %31 0 %32 1:i1
%33:i32 = var
blockpc %31 1 %33 1:i1
%34 = block 2
%35:i32 = var
blockpc %34 0 %35 1:i1
%36:i32 = var
blockpc %34 1 %36 1:i1
%37 = block 2
%38:i32 = var
blockpc %37 0 %38 1:i1
%39:i32 = var
blockpc %37 1 %39 1:i1
%40 = block 2
%41:i32 = var
blockpc %40 0 %41 1:i1
%42:i32 = var
blockpc %40 1 %42 1:i1
%43:i32 = var
%44:i32 = var
%45 = phi %40, %43, %44
%46 = phi %37, %45, %43
%47:i32 = var
%48 = phi %34, %46, %47
%49 = block 2
%50:i32 = var
blockpc %49 0 %50 1:i1
%51:i32 = var
blockpc %49 1 %51 1:i1
%52:i32 = var
%53:i32 = var
%54 = phi %49, %52, %53
%55 = phi %31, %48, %54
%56 = eq %30, %55
%57:i32 = zext %56
%58:i32 = var
%59:i32 = zext %58
%60 = and %57, %59
%61 = eq %60, 0:i32
%62:i32 = var
%63:i32 = var
pc %17 1:i1
pc %19 1:i1
pc %61 1:i1
pc %62 1:i1
pc %63 1:i1
infer %2


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = add %1, 8:i32 (hasExternalUses)
%3 = add %2, 288:i32 (hasExternalUses)
%4 = phi %0, %2, %3
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i32 = var
%10 = add %9, 4:i32 (hasExternalUses)
%11 = phi %8, %9, %10
%12 = block 2
%13 = add %9, 4:i32 (hasExternalUses)
%14 = phi %12, %9, %13
%15 = phi %7, %11, %14
%16 = block 2
%17 = block 2
%18:i32 = var
%19 = block 2
%20 = add %18, -4:i32 (hasExternalUses)
%21 = phi %19, %18, %20
%22 = phi %17, %18, %21
%23 = phi %16, %22, %4
%24 = phi %6, %15, %23
%25 = block 2
%26:i32 = var
%27 = add %26, -4:i32 (hasExternalUses)
%28 = phi %25, %26, %27
%29 = phi %5, %24, %28
%30 = sub %4, %29
%31:i32 = var
blockpc %0 0 %31 1:i1
%32:i32 = var
blockpc %0 1 %32 1:i1
%33:i32 = var
blockpc %5 0 %33 1:i1
%34:i32 = var
blockpc %5 1 %34 1:i1
%35:i32 = var
blockpc %6 0 %35 1:i1
%36:i32 = var
blockpc %6 1 %36 1:i1
%37:i32 = var
blockpc %7 0 %37 1:i1
%38:i32 = var
blockpc %7 1 %38 1:i1
%39:i32 = var
blockpc %8 0 %39 1:i1
%40:i32 = var
blockpc %8 1 %40 1:i1
%41:i32 = var
blockpc %12 0 %41 1:i1
%42:i32 = var
blockpc %12 1 %42 1:i1
%43:i32 = var
blockpc %16 0 %43 1:i1
%44:i32 = var
blockpc %16 1 %44 1:i1
%45:i32 = var
blockpc %17 0 %45 1:i1
%46:i32 = var
blockpc %17 1 %46 1:i1
%47:i32 = var
blockpc %19 0 %47 1:i1
%48:i32 = var
blockpc %19 1 %48 1:i1
%49:i32 = var
blockpc %25 0 %49 1:i1
%50:i32 = var
blockpc %25 1 %50 1:i1
%51:i32 = var
%52:i32 = var
%53:i32 = var
%54:i32 = var
pc %51 1:i1
pc %52 1:i1
pc %53 1:i1
pc %54 1:i1
infer %30


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = add %1, 8:i32 (hasExternalUses)
%3 = add %2, 288:i32 (hasExternalUses)
%4 = phi %0, %2, %3
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i32 = var
%10 = add %9, 4:i32 (hasExternalUses)
%11 = phi %8, %9, %10
%12 = block 2
%13 = add %9, 4:i32 (hasExternalUses)
%14 = phi %12, %9, %13
%15 = phi %7, %11, %14
%16 = block 2
%17 = block 2
%18:i32 = var
%19 = block 2
%20 = add %18, -4:i32 (hasExternalUses)
%21 = phi %19, %18, %20
%22 = phi %17, %18, %21
%23 = phi %16, %22, %4
%24 = phi %6, %15, %23
%25 = block 2
%26:i32 = var
%27 = add %26, -4:i32 (hasExternalUses)
%28 = phi %25, %26, %27
%29 = phi %5, %24, %28
%30 = sub %4, %29
%31 = ashr %30, 2:i32
%32:i32 = var
blockpc %0 0 %32 1:i1
%33:i32 = var
blockpc %0 1 %33 1:i1
%34:i32 = var
blockpc %5 0 %34 1:i1
%35:i32 = var
blockpc %5 1 %35 1:i1
%36:i32 = var
blockpc %6 0 %36 1:i1
%37:i32 = var
blockpc %6 1 %37 1:i1
%38:i32 = var
blockpc %7 0 %38 1:i1
%39:i32 = var
blockpc %7 1 %39 1:i1
%40:i32 = var
blockpc %8 0 %40 1:i1
%41:i32 = var
blockpc %8 1 %41 1:i1
%42:i32 = var
blockpc %12 0 %42 1:i1
%43:i32 = var
blockpc %12 1 %43 1:i1
%44:i32 = var
blockpc %16 0 %44 1:i1
%45:i32 = var
blockpc %16 1 %45 1:i1
%46:i32 = var
blockpc %17 0 %46 1:i1
%47:i32 = var
blockpc %17 1 %47 1:i1
%48:i32 = var
blockpc %19 0 %48 1:i1
%49:i32 = var
blockpc %19 1 %49 1:i1
%50:i32 = var
blockpc %25 0 %50 1:i1
%51:i32 = var
blockpc %25 1 %51 1:i1
%52:i32 = var
%53:i32 = var
%54:i32 = var
%55:i32 = var
pc %52 1:i1
pc %53 1:i1
pc %54 1:i1
pc %55 1:i1
infer %31


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = add %1, 8:i32 (hasExternalUses)
%3 = add %2, 288:i32 (hasExternalUses)
%4 = phi %0, %2, %3
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i32 = var
%10 = add %9, 4:i32 (hasExternalUses)
%11 = phi %8, %9, %10
%12 = block 2
%13 = add %9, 4:i32 (hasExternalUses)
%14 = phi %12, %9, %13
%15 = phi %7, %11, %14
%16 = block 2
%17 = block 2
%18:i32 = var
%19 = block 2
%20 = add %18, -4:i32 (hasExternalUses)
%21 = phi %19, %18, %20
%22 = phi %17, %18, %21
%23 = phi %16, %22, %4
%24 = phi %6, %15, %23
%25 = block 2
%26:i32 = var
%27 = add %26, -4:i32 (hasExternalUses)
%28 = phi %25, %26, %27
%29 = phi %5, %24, %28
%30 = sub %4, %29
%31 = ashr %30, 2:i32
%32 = mul %31, 9:i32
%33:i32 = var
blockpc %0 0 %33 1:i1
%34:i32 = var
blockpc %0 1 %34 1:i1
%35:i32 = var
blockpc %5 0 %35 1:i1
%36:i32 = var
blockpc %5 1 %36 1:i1
%37:i32 = var
blockpc %6 0 %37 1:i1
%38:i32 = var
blockpc %6 1 %38 1:i1
%39:i32 = var
blockpc %7 0 %39 1:i1
%40:i32 = var
blockpc %7 1 %40 1:i1
%41:i32 = var
blockpc %8 0 %41 1:i1
%42:i32 = var
blockpc %8 1 %42 1:i1
%43:i32 = var
blockpc %12 0 %43 1:i1
%44:i32 = var
blockpc %12 1 %44 1:i1
%45:i32 = var
blockpc %16 0 %45 1:i1
%46:i32 = var
blockpc %16 1 %46 1:i1
%47:i32 = var
blockpc %17 0 %47 1:i1
%48:i32 = var
blockpc %17 1 %48 1:i1
%49:i32 = var
blockpc %19 0 %49 1:i1
%50:i32 = var
blockpc %19 1 %50 1:i1
%51:i32 = var
blockpc %25 0 %51 1:i1
%52:i32 = var
blockpc %25 1 %52 1:i1
%53:i32 = var
%54:i32 = var
%55:i32 = var
%56:i32 = var
pc %53 1:i1
pc %54 1:i1
pc %55 1:i1
pc %56 1:i1
infer %32


; start LHS (in $27)
%0:i32 = var
%1 = ule 10:i32, %0
%2:i32 = var
%3 = ne %2, 0:i32
%4 = block 2
%5:i32 = var
blockpc %4 0 %5 1:i1
%6:i32 = var
blockpc %4 1 %6 1:i1
%7:i32 = var
%8 = add %7, 8:i32
%9 = add %8, 288:i32
%10 = phi %4, %8, %9
%11:i32 = var
%12 = sdiv %11, 9:i32
%13 = shl %12, 2:i32
%14 = add %10, %13
%15 = add %14, -4092:i32
%16 = add %15, 4:i32
%17 = block 2
%18 = block 2
%19:i32 = var
blockpc %18 0 %19 1:i1
%20:i32 = var
blockpc %18 1 %20 1:i1
%21:i32 = var
%22 = block 2
%23:i32 = var
blockpc %22 0 %23 1:i1
%24:i32 = var
blockpc %22 1 %24 1:i1
%25:i32 = var
%26 = phi %22, %25, 29:i32
%27 = sub %21, %26
%28 = block 2
%29:i32 = var
blockpc %28 0 %29 1:i1
%30:i32 = var
blockpc %28 1 %30 1:i1
%31:i32 = var
%32:i32 = var
%33 = phi %28, %31, %32
%34 = phi %18, %27, %33
%35 = slt %34, 0:i32
blockpc %17 0 %35 1:i1
%36:i32 = var
blockpc %17 1 %36 1:i1
%37 = block 2
%38:i32 = var
blockpc %37 0 %38 1:i1
%39:i32 = var
blockpc %37 1 %39 1:i1
%40 = block 2
%41:i32 = var
blockpc %40 0 %41 1:i1
%42:i32 = var
blockpc %40 1 %42 1:i1
%43 = block 2
%44:i32 = var
blockpc %43 0 %44 1:i1
%45:i32 = var
blockpc %43 1 %45 1:i1
%46:i32 = var
%47:i32 = var
%48 = phi %43, %46, %47
%49 = phi %40, %48, %46
%50:i32 = var
%51 = phi %37, %49, %50
%52:i32 = var
%53:i32 = var
%54 = phi %18, %52, %53
%55 = phi %17, %51, %54
%56 = eq %16, %55
%57:i32 = zext %56
%58:i32 = var
%59:i32 = zext %58
%60 = and %57, %59
%61 = eq %60, 0:i32
%62:i32 = var
%63:i32 = var
pc %3 1:i1
pc %61 1:i1
pc %62 1:i1
pc %63 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 1:i32
%2:i32 = var
%3 = ule 10:i32, %2
%4:i32 = var
%5 = ne %4, 0:i32
%6 = block 2
%7:i32 = var
blockpc %6 0 %7 1:i1
%8:i32 = var
blockpc %6 1 %8 1:i1
%9:i32 = var
%10 = add %9, 8:i32
%11 = add %10, 288:i32
%12 = phi %6, %10, %11
%13:i32 = var
%14 = sdiv %13, 9:i32
%15 = shl %14, 2:i32
%16 = add %12, %15
%17 = add %16, -4092:i32
%18 = add %17, 4:i32
%19 = block 2
%20 = block 2
%21:i32 = var
blockpc %20 0 %21 1:i1
%22:i32 = var
blockpc %20 1 %22 1:i1
%23:i32 = var
%24 = block 2
%25:i32 = var
blockpc %24 0 %25 1:i1
%26:i32 = var
blockpc %24 1 %26 1:i1
%27:i32 = var
%28 = phi %24, %27, 29:i32
%29 = sub %23, %28
%30 = block 2
%31:i32 = var
blockpc %30 0 %31 1:i1
%32:i32 = var
blockpc %30 1 %32 1:i1
%33:i32 = var
%34:i32 = var
%35 = phi %30, %33, %34
%36 = phi %20, %29, %35
%37 = slt %36, 0:i32
blockpc %19 0 %37 1:i1
%38:i32 = var
blockpc %19 1 %38 1:i1
%39 = block 2
%40:i32 = var
blockpc %39 0 %40 1:i1
%41:i32 = var
blockpc %39 1 %41 1:i1
%42 = block 2
%43:i32 = var
blockpc %42 0 %43 1:i1
%44:i32 = var
blockpc %42 1 %44 1:i1
%45 = block 2
%46:i32 = var
blockpc %45 0 %46 1:i1
%47:i32 = var
blockpc %45 1 %47 1:i1
%48:i32 = var
%49:i32 = var
%50 = phi %45, %48, %49
%51 = phi %42, %50, %48
%52:i32 = var
%53 = phi %39, %51, %52
%54:i32 = var
%55:i32 = var
%56 = phi %20, %54, %55
%57 = phi %19, %53, %56
%58 = eq %18, %57
%59:i32 = zext %58
%60:i32 = var
%61:i32 = zext %60
%62 = and %59, %61
%63 = eq %62, 0:i32
%64:i32 = var
%65:i32 = var
pc %3 1:i1
pc %5 1:i1
pc %63 1:i1
pc %64 1:i1
pc %65 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = mul %0, 10:i32
%2:i32 = var
%3 = ule 10:i32, %2
%4:i32 = var
%5 = ne %4, 0:i32
%6 = block 2
%7:i32 = var
blockpc %6 0 %7 1:i1
%8:i32 = var
blockpc %6 1 %8 1:i1
%9:i32 = var
%10 = add %9, 8:i32
%11 = add %10, 288:i32
%12 = phi %6, %10, %11
%13:i32 = var
%14 = sdiv %13, 9:i32
%15 = shl %14, 2:i32
%16 = add %12, %15
%17 = add %16, -4092:i32
%18 = add %17, 4:i32
%19 = block 2
%20 = block 2
%21:i32 = var
blockpc %20 0 %21 1:i1
%22:i32 = var
blockpc %20 1 %22 1:i1
%23:i32 = var
%24 = block 2
%25:i32 = var
blockpc %24 0 %25 1:i1
%26:i32 = var
blockpc %24 1 %26 1:i1
%27:i32 = var
%28 = phi %24, %27, 29:i32
%29 = sub %23, %28
%30 = block 2
%31:i32 = var
blockpc %30 0 %31 1:i1
%32:i32 = var
blockpc %30 1 %32 1:i1
%33:i32 = var
%34:i32 = var
%35 = phi %30, %33, %34
%36 = phi %20, %29, %35
%37 = slt %36, 0:i32
blockpc %19 0 %37 1:i1
%38:i32 = var
blockpc %19 1 %38 1:i1
%39 = block 2
%40:i32 = var
blockpc %39 0 %40 1:i1
%41:i32 = var
blockpc %39 1 %41 1:i1
%42 = block 2
%43:i32 = var
blockpc %42 0 %43 1:i1
%44:i32 = var
blockpc %42 1 %44 1:i1
%45 = block 2
%46:i32 = var
blockpc %45 0 %46 1:i1
%47:i32 = var
blockpc %45 1 %47 1:i1
%48:i32 = var
%49:i32 = var
%50 = phi %45, %48, %49
%51 = phi %42, %50, %48
%52:i32 = var
%53 = phi %39, %51, %52
%54:i32 = var
%55:i32 = var
%56 = phi %20, %54, %55
%57 = phi %19, %53, %56
%58 = eq %18, %57
%59:i32 = zext %58
%60:i32 = var
%61:i32 = zext %60
%62 = and %59, %61
%63 = eq %62, 0:i32
%64:i32 = var
%65:i32 = var
pc %3 1:i1
pc %5 1:i1
pc %63 1:i1
pc %64 1:i1
pc %65 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = mul %0, 10:i32
%2:i32 = var
%3 = ule %1, %2
%4 = ule 10:i32, %2
%5:i32 = var
%6 = ne %5, 0:i32
%7 = block 2
%8:i32 = var
blockpc %7 0 %8 1:i1
%9:i32 = var
blockpc %7 1 %9 1:i1
%10:i32 = var
%11 = add %10, 8:i32
%12 = add %11, 288:i32
%13 = phi %7, %11, %12
%14:i32 = var
%15 = sdiv %14, 9:i32
%16 = shl %15, 2:i32
%17 = add %13, %16
%18 = add %17, -4092:i32
%19 = add %18, 4:i32
%20 = block 2
%21 = block 2
%22:i32 = var
blockpc %21 0 %22 1:i1
%23:i32 = var
blockpc %21 1 %23 1:i1
%24:i32 = var
%25 = block 2
%26:i32 = var
blockpc %25 0 %26 1:i1
%27:i32 = var
blockpc %25 1 %27 1:i1
%28:i32 = var
%29 = phi %25, %28, 29:i32
%30 = sub %24, %29
%31 = block 2
%32:i32 = var
blockpc %31 0 %32 1:i1
%33:i32 = var
blockpc %31 1 %33 1:i1
%34:i32 = var
%35:i32 = var
%36 = phi %31, %34, %35
%37 = phi %21, %30, %36
%38 = slt %37, 0:i32
blockpc %20 0 %38 1:i1
%39:i32 = var
blockpc %20 1 %39 1:i1
%40 = block 2
%41:i32 = var
blockpc %40 0 %41 1:i1
%42:i32 = var
blockpc %40 1 %42 1:i1
%43 = block 2
%44:i32 = var
blockpc %43 0 %44 1:i1
%45:i32 = var
blockpc %43 1 %45 1:i1
%46 = block 2
%47:i32 = var
blockpc %46 0 %47 1:i1
%48:i32 = var
blockpc %46 1 %48 1:i1
%49:i32 = var
%50:i32 = var
%51 = phi %46, %49, %50
%52 = phi %43, %51, %49
%53:i32 = var
%54 = phi %40, %52, %53
%55:i32 = var
%56:i32 = var
%57 = phi %21, %55, %56
%58 = phi %20, %54, %57
%59 = eq %19, %58
%60:i32 = zext %59
%61:i32 = var
%62:i32 = zext %61
%63 = and %60, %62
%64 = eq %63, 0:i32
%65:i32 = var
%66:i32 = var
pc %4 1:i1
pc %6 1:i1
pc %64 1:i1
pc %65 1:i1
pc %66 1:i1
infer %3


; start LHS (in $27)
%0 = block 2
%1 = block 2
%2:i32 = var
%3 = add %2, 8:i32 (hasExternalUses)
%4 = add %3, 288:i32 (hasExternalUses)
%5 = phi %1, %3, %4
%6 = block 2
%7:i32 = var
%8 = phi %6, 6:i32, %7
%9 = block 2
%10 = block 2
%11 = block 2
%12:i32 = var
%13:i32 = var
%14 = phi %11, %12, %13
%15 = phi %10, %14, 0:i32
%16 = phi %9, %15, 0:i32
%17 = sub %8, %16
%18:i32 = var
%19 = ashr %18, 31:i32
%20 = add %17, %19 (hasExternalUses)
%21 = add %20, 9216:i32 (hasExternalUses)
%22 = sdiv %21, 9:i32
%23 = shl %22, 2:i32
%24 = add %5, %23
%25 = add %24, -4092:i32 (hasExternalUses)
%26 = block 2
%27 = block 2
%28:i32 = var
%29 = add %28, -4:i32 (hasExternalUses)
%30 = phi %27, %25, %29
%31 = phi %26, %25, %30
%32 = phi %0, %25, %31
%33 = add %32, 4:i32
%34:i32 = var
blockpc %0 0 %34 1:i1
%35:i32 = var
blockpc %0 1 %35 1:i1
%36:i32 = var
blockpc %1 0 %36 1:i1
%37:i32 = var
blockpc %1 1 %37 1:i1
%38:i32 = var
blockpc %6 0 %38 1:i1
%39:i32 = var
blockpc %6 1 %39 1:i1
%40:i32 = var
blockpc %9 0 %40 1:i1
%41:i32 = var
blockpc %9 1 %41 1:i1
%42:i32 = var
blockpc %10 0 %42 1:i1
%43:i32 = var
blockpc %10 1 %43 1:i1
%44:i32 = var
blockpc %11 0 %44 1:i1
%45:i32 = var
blockpc %11 1 %45 1:i1
%46:i32 = var
blockpc %26 0 %46 1:i1
%47:i32 = var
blockpc %26 1 %47 1:i1
%48:i32 = var
blockpc %27 0 %48 1:i1
%49:i32 = var
blockpc %27 1 %49 1:i1
%50:i32 = var
%51:i32 = var
pc %50 1:i1
pc %51 1:i1
infer %33


; start LHS (in $27)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4:i32 = var
%5 = add %4, 4:i32 (hasExternalUses)
%6 = phi %3, %4, %5
%7 = phi %2, %6, %4
%8 = block 2
%9 = block 2
%10:i32 = var
%11 = add %10, 8:i32 (hasExternalUses)
%12 = add %11, 288:i32 (hasExternalUses)
%13 = phi %9, %11, %12
%14 = block 2
%15:i32 = var
%16 = add %15, 4:i32 (hasExternalUses)
%17 = phi %14, %15, %16
%18 = block 2
%19 = add %15, 4:i32 (hasExternalUses)
%20 = phi %18, %15, %19
%21 = phi %2, %17, %20
%22 = phi %8, %13, %21
%23 = block 2
%24:i32 = var
%25 = phi %23, 6:i32, %24
%26 = add %25, 25:i32
%27 = sdiv %26, 9:i32
%28 = add %27, 1:i32 (hasExternalUses)
%29 = shl %28, 2:i32
%30 = add %22, %29 (hasExternalUses)
%31 = phi %1, %7, %30
%32 = block 2
%33:i32 = var
%34:i32 = var
%35 = phi %32, %33, %34
%36 = phi %0, %31, %35
%37:i32 = var
%38 = ule %36, %37
%39:i32 = var
blockpc %0 0 %39 1:i1
%40:i32 = var
blockpc %0 1 %40 1:i1
%41:i32 = var
blockpc %1 0 %41 1:i1
%42:i32 = var
blockpc %1 1 %42 1:i1
%43:i32 = var
blockpc %2 0 %43 1:i1
%44:i32 = var
blockpc %2 1 %44 1:i1
%45:i32 = var
blockpc %3 0 %45 1:i1
%46:i32 = var
blockpc %3 1 %46 1:i1
%47:i32 = var
blockpc %8 0 %47 1:i1
%48:i32 = var
blockpc %8 1 %48 1:i1
%49:i32 = var
blockpc %9 0 %49 1:i1
%50:i32 = var
blockpc %9 1 %50 1:i1
%51:i32 = var
blockpc %14 0 %51 1:i1
%52:i32 = var
blockpc %14 1 %52 1:i1
%53:i32 = var
blockpc %18 0 %53 1:i1
%54:i32 = var
blockpc %18 1 %54 1:i1
%55:i32 = var
blockpc %23 0 %55 1:i1
%56:i32 = var
blockpc %23 1 %56 1:i1
%57:i32 = var
blockpc %32 0 %57 1:i1
%58:i32 = var
blockpc %32 1 %58 1:i1
%59:i32 = var
%60:i32 = var
pc %59 1:i1
pc %60 1:i1
infer %38


; start LHS (in $27)
%0:i32 = var
%1 = block 2
%2 = block 2
%3 = block 2
%4 = block 2
%5 = block 2
%6:i32 = var
%7 = add %6, 4:i32 (hasExternalUses)
%8 = phi %5, %6, %7
%9 = block 2
%10 = add %6, 4:i32 (hasExternalUses)
%11 = phi %9, %6, %10
%12 = phi %4, %8, %11
%13 = block 2
%14 = block 2
%15:i32 = var
%16 = block 2
%17 = add %15, -4:i32 (hasExternalUses)
%18 = phi %16, %15, %17
%19 = phi %14, %15, %18
%20 = block 2
%21:i32 = var
%22 = add %21, 8:i32 (hasExternalUses)
%23 = add %22, 288:i32 (hasExternalUses)
%24 = phi %20, %22, %23
%25 = phi %13, %19, %24
%26 = phi %3, %12, %25
%27 = block 2
%28 = block 2
%29 = block 2
%30:i32 = var
%31:i32 = var
%32 = phi %29, %30, %31
%33 = phi %28, %26, %32
%34 = phi %27, %26, %33
%35 = phi %2, %26, %34
%36 = phi %1, %35, %26
%37 = ule %0, %36
%38:i32 = var
blockpc %1 0 %38 1:i1
%39:i32 = var
blockpc %1 1 %39 1:i1
%40:i32 = var
blockpc %2 0 %40 1:i1
%41:i32 = var
blockpc %2 1 %41 1:i1
%42:i32 = var
blockpc %3 0 %42 1:i1
%43:i32 = var
blockpc %3 1 %43 1:i1
%44:i32 = var
blockpc %4 0 %44 1:i1
%45:i32 = var
blockpc %4 1 %45 1:i1
%46:i32 = var
blockpc %5 0 %46 1:i1
%47:i32 = var
blockpc %5 1 %47 1:i1
%48:i32 = var
blockpc %9 0 %48 1:i1
%49:i32 = var
blockpc %9 1 %49 1:i1
%50:i32 = var
blockpc %13 0 %50 1:i1
%51:i32 = var
blockpc %13 1 %51 1:i1
%52:i32 = var
blockpc %14 0 %52 1:i1
%53:i32 = var
blockpc %14 1 %53 1:i1
%54:i32 = var
blockpc %16 0 %54 1:i1
%55:i32 = var
blockpc %16 1 %55 1:i1
%56:i32 = var
blockpc %20 0 %56 1:i1
%57:i32 = var
blockpc %20 1 %57 1:i1
%58:i32 = var
blockpc %27 0 %58 1:i1
%59:i32 = var
blockpc %27 1 %59 1:i1
%60:i32 = var
blockpc %28 0 %60 1:i1
%61:i32 = var
blockpc %28 1 %61 1:i1
%62:i32 = var
blockpc %29 0 %62 1:i1
%63:i32 = var
blockpc %29 1 %63 1:i1
%64:i32 = var
pc %64 1:i1
infer %37


; start LHS (in $27)
%0:i32 = var
%1 = add %0, -4:i32
%2:i64 = var
%3 = and %2, 9218868437227405312:i64
%4 = eq %3, 9218868437227405312:i64
%5:i32 = zext %4
%6 = eq %5, 0:i32
pc %6 1:i1
infer %1


; start LHS (in $27)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4 = block 2
%5:i32 = var
%6:i32 = var
%7 = phi %4, %5, %6
%8 = block 2
%9 = block 2
%10 = block 2
%11:i32 = var
%12:i32 = var
%13 = phi %10, %11, %12
%14 = block 2
%15:i32 = var
%16 = phi %14, %11, %15
%17 = phi %9, %13, %16
%18 = block 2
%19 = block 2
%20:i32 = var
%21 = block 2
%22:i32 = var
%23 = phi %21, %20, %22
%24 = phi %19, %20, %23
%25 = phi %18, %24, %7
%26 = phi %8, %17, %25
%27 = sub %7, %26
%28 = ashr %27, 2:i32
%29 = mul %28, 9:i32 (hasExternalUses)
%30:i32 = var
%31 = phi %3, %29, %30
%32 = phi %2, %31, 0:i32
%33 = block 2
%34 = block 2
%35:i32 = var
%36:i32 = var
%37 = phi %34, %35, %36
%38 = phi %33, %32, %37
%39 = phi %1, %32, %38
%40 = phi %0, %39, %32
%41 = sub 0:i32, %40
%42:i32 = var
blockpc %0 0 %42 1:i1
%43:i32 = var
blockpc %0 1 %43 1:i1
%44:i32 = var
blockpc %1 0 %44 1:i1
%45:i32 = var
blockpc %1 1 %45 1:i1
%46:i32 = var
blockpc %2 0 %46 1:i1
%47:i32 = var
blockpc %2 1 %47 1:i1
%48:i32 = var
blockpc %3 0 %48 1:i1
%49:i32 = var
blockpc %3 1 %49 1:i1
%50:i32 = var
blockpc %4 0 %50 1:i1
%51:i32 = var
blockpc %4 1 %51 1:i1
%52:i32 = var
blockpc %8 0 %52 1:i1
%53:i32 = var
blockpc %8 1 %53 1:i1
%54:i32 = var
blockpc %9 0 %54 1:i1
%55:i32 = var
blockpc %9 1 %55 1:i1
%56:i32 = var
blockpc %10 0 %56 1:i1
%57:i32 = var
blockpc %10 1 %57 1:i1
%58:i32 = var
blockpc %14 0 %58 1:i1
%59:i32 = var
blockpc %14 1 %59 1:i1
%60:i32 = var
blockpc %18 0 %60 1:i1
%61:i32 = var
blockpc %18 1 %61 1:i1
%62:i32 = var
blockpc %19 0 %62 1:i1
%63:i32 = var
blockpc %19 1 %63 1:i1
%64:i32 = var
blockpc %21 0 %64 1:i1
%65:i32 = var
blockpc %21 1 %65 1:i1
%66:i32 = var
blockpc %33 0 %66 1:i1
%67:i32 = var
blockpc %33 1 %67 1:i1
%68:i32 = var
blockpc %34 0 %68 1:i1
%69:i32 = var
blockpc %34 1 %69 1:i1
%70:i32 = var
pc %70 1:i1
infer %41


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = phi %0, 6:i32, %1
%3 = ne %2, 0:i32 (hasExternalUses)
%4:i32 = zext %3
%5 = xor %4, 1:i32
%6 = slt %1, 0:i32
blockpc %0 0 %6 1:i1
%7:i32 = zext %6
%8 = eq %7, 0:i32
blockpc %0 1 %8 1:i1
%9:i32 = var
%10 = or %9, 32:i32
%11 = eq %10, 103:i32
%12:i64 = var
%13 = and %12, 9218868437227405312:i64
%14 = eq %13, 9218868437227405312:i64
%15:i32 = zext %14
%16 = eq %15, 0:i32
pc %11 1:i1
pc %16 1:i1
infer %5


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = phi %0, 6:i32, %1
%3 = ne %2, 0:i32 (hasExternalUses)
%4:i32 = zext %3
%5 = xor %4, 1:i32
%6 = and %5, 1:i32
%7 = slt %1, 0:i32
blockpc %0 0 %7 1:i1
%8:i32 = zext %7
%9 = eq %8, 0:i32
blockpc %0 1 %9 1:i1
%10:i32 = var
%11 = or %10, 32:i32
%12 = eq %11, 103:i32
%13:i64 = var
%14 = and %13, 9218868437227405312:i64
%15 = eq %14, 9218868437227405312:i64
%16:i32 = zext %15
%17 = eq %16, 0:i32
pc %12 1:i1
pc %17 1:i1
infer %6


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = phi %0, 6:i32, %1
%3 = ne %2, 0:i32 (hasExternalUses)
%4:i32 = zext %3
%5 = xor %4, 1:i32
%6 = and %5, 1:i32
%7 = add %2, %6
%8 = slt %1, 0:i32
blockpc %0 0 %8 1:i1
%9:i32 = zext %8
%10 = eq %9, 0:i32
blockpc %0 1 %10 1:i1
%11:i32 = var
%12 = or %11, 32:i32
%13 = eq %12, 103:i32
%14:i64 = var
%15 = and %14, 9218868437227405312:i64
%16 = eq %15, 9218868437227405312:i64
%17:i32 = zext %16
%18 = eq %17, 0:i32
pc %13 1:i1
pc %18 1:i1
infer %7


; start LHS (in $27)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4 = block 2
%5:i32 = var
%6:i32 = var
%7 = phi %4, %5, %6
%8 = block 2
%9 = block 2
%10 = block 2
%11:i32 = var
%12:i32 = var
%13 = phi %10, %11, %12
%14 = block 2
%15:i32 = var
%16 = phi %14, %11, %15
%17 = phi %9, %13, %16
%18 = block 2
%19 = block 2
%20:i32 = var
%21 = block 2
%22:i32 = var
%23 = phi %21, %20, %22
%24 = phi %19, %20, %23
%25 = phi %18, %24, %7
%26 = phi %8, %17, %25
%27 = sub %7, %26
%28 = ashr %27, 2:i32
%29 = mul %28, 9:i32 (hasExternalUses)
%30:i32 = var
%31 = phi %3, %29, %30
%32 = phi %2, %31, 0:i32
%33 = block 2
%34 = block 2
%35:i32 = var
%36:i32 = var
%37 = phi %34, %35, %36
%38 = phi %33, %32, %37
%39 = phi %1, %32, %38
%40 = phi %0, %39, %32
%41:i32 = var
%42 = slt %40, %41
%43:i32 = var
blockpc %0 0 %43 1:i1
%44:i32 = var
blockpc %0 1 %44 1:i1
%45:i32 = var
blockpc %1 0 %45 1:i1
%46:i32 = var
blockpc %1 1 %46 1:i1
%47:i32 = var
blockpc %2 0 %47 1:i1
%48:i32 = var
blockpc %2 1 %48 1:i1
%49:i32 = var
blockpc %3 0 %49 1:i1
%50:i32 = var
blockpc %3 1 %50 1:i1
%51:i32 = var
blockpc %4 0 %51 1:i1
%52:i32 = var
blockpc %4 1 %52 1:i1
%53:i32 = var
blockpc %8 0 %53 1:i1
%54:i32 = var
blockpc %8 1 %54 1:i1
%55:i32 = var
blockpc %9 0 %55 1:i1
%56:i32 = var
blockpc %9 1 %56 1:i1
%57:i32 = var
blockpc %10 0 %57 1:i1
%58:i32 = var
blockpc %10 1 %58 1:i1
%59:i32 = var
blockpc %14 0 %59 1:i1
%60:i32 = var
blockpc %14 1 %60 1:i1
%61:i32 = var
blockpc %18 0 %61 1:i1
%62:i32 = var
blockpc %18 1 %62 1:i1
%63:i32 = var
blockpc %19 0 %63 1:i1
%64:i32 = var
blockpc %19 1 %64 1:i1
%65:i32 = var
blockpc %21 0 %65 1:i1
%66:i32 = var
blockpc %21 1 %66 1:i1
%67:i32 = var
blockpc %33 0 %67 1:i1
%68:i32 = var
blockpc %33 1 %68 1:i1
%69:i32 = var
blockpc %34 0 %69 1:i1
%70:i32 = var
blockpc %34 1 %70 1:i1
%71:i32 = var
%72:i32 = var
pc %71 1:i1
pc %72 1:i1
infer %42


; start LHS (in $27)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4 = block 2
%5:i32 = var
%6:i32 = var
%7 = phi %4, %5, %6
%8 = block 2
%9 = block 2
%10 = block 2
%11:i32 = var
%12:i32 = var
%13 = phi %10, %11, %12
%14 = block 2
%15:i32 = var
%16 = phi %14, %11, %15
%17 = phi %9, %13, %16
%18 = block 2
%19 = block 2
%20:i32 = var
%21 = block 2
%22:i32 = var
%23 = phi %21, %20, %22
%24 = phi %19, %20, %23
%25 = phi %18, %24, %7
%26 = phi %8, %17, %25
%27 = sub %7, %26
%28 = ashr %27, 2:i32
%29 = mul %28, 9:i32 (hasExternalUses)
%30:i32 = var
%31 = phi %3, %29, %30
%32 = phi %2, %31, 0:i32
%33 = block 2
%34 = block 2
%35:i32 = var
%36:i32 = var
%37 = phi %34, %35, %36
%38 = phi %33, %32, %37
%39 = phi %1, %32, %38
%40 = phi %0, %39, %32
%41 = slt -5:i32, %40
%42:i32 = var
blockpc %0 0 %42 1:i1
%43:i32 = var
blockpc %0 1 %43 1:i1
%44:i32 = var
blockpc %1 0 %44 1:i1
%45:i32 = var
blockpc %1 1 %45 1:i1
%46:i32 = var
blockpc %2 0 %46 1:i1
%47:i32 = var
blockpc %2 1 %47 1:i1
%48:i32 = var
blockpc %3 0 %48 1:i1
%49:i32 = var
blockpc %3 1 %49 1:i1
%50:i32 = var
blockpc %4 0 %50 1:i1
%51:i32 = var
blockpc %4 1 %51 1:i1
%52:i32 = var
blockpc %8 0 %52 1:i1
%53:i32 = var
blockpc %8 1 %53 1:i1
%54:i32 = var
blockpc %9 0 %54 1:i1
%55:i32 = var
blockpc %9 1 %55 1:i1
%56:i32 = var
blockpc %10 0 %56 1:i1
%57:i32 = var
blockpc %10 1 %57 1:i1
%58:i32 = var
blockpc %14 0 %58 1:i1
%59:i32 = var
blockpc %14 1 %59 1:i1
%60:i32 = var
blockpc %18 0 %60 1:i1
%61:i32 = var
blockpc %18 1 %61 1:i1
%62:i32 = var
blockpc %19 0 %62 1:i1
%63:i32 = var
blockpc %19 1 %63 1:i1
%64:i32 = var
blockpc %21 0 %64 1:i1
%65:i32 = var
blockpc %21 1 %65 1:i1
%66:i32 = var
blockpc %33 0 %66 1:i1
%67:i32 = var
blockpc %33 1 %67 1:i1
%68:i32 = var
blockpc %34 0 %68 1:i1
%69:i32 = var
blockpc %34 1 %69 1:i1
%70:i32 = var
%71:i32 = var
pc %70 1:i1
pc %71 1:i1
infer %41


; start LHS (in $27)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4:i32 = var
%5 = ashr %4, 2:i32
%6 = mul %5, 9:i32 (hasExternalUses)
%7:i32 = var
%8 = add %7, 1:i32 (hasExternalUses)
%9 = phi %3, %6, %8
%10 = phi %2, %9, 0:i32
%11 = block 2
%12 = block 2
%13:i32 = var
%14 = ashr %13, 2:i32
%15 = mul %14, 9:i32 (hasExternalUses)
%16:i32 = var
%17 = add %16, 1:i32 (hasExternalUses)
%18 = phi %12, %15, %17
%19 = phi %11, %10, %18
%20 = phi %1, %10, %19
%21 = phi %0, %20, %10
%22 = block 2
%23:i32 = var
%24 = phi %22, 6:i32, %23
%25 = ne %24, 0:i32 (hasExternalUses)
%26:i32 = zext %25
%27 = xor %26, 1:i32
%28 = and %27, 1:i32
%29 = add %24, %28 (hasExternalUses)
%30 = slt %21, %29
%31:i32 = zext %30
%32:i32 = var
%33:i32 = zext %32
%34 = and %31, %33
%35:i32 = var
blockpc %0 0 %35 1:i1
%36:i32 = var
blockpc %0 1 %36 1:i1
%37:i32 = var
blockpc %1 0 %37 1:i1
%38:i32 = var
blockpc %1 1 %38 1:i1
%39:i32 = var
blockpc %2 0 %39 1:i1
%40:i32 = var
blockpc %2 1 %40 1:i1
%41:i32 = var
blockpc %3 0 %41 1:i1
%42:i32 = var
blockpc %3 1 %42 1:i1
%43:i32 = var
blockpc %11 0 %43 1:i1
%44:i32 = var
blockpc %11 1 %44 1:i1
%45:i32 = var
blockpc %12 0 %45 1:i1
%46:i32 = var
blockpc %12 1 %46 1:i1
%47:i32 = var
blockpc %22 0 %47 1:i1
%48:i32 = var
blockpc %22 1 %48 1:i1
%49:i32 = var
%50:i32 = var
pc %49 1:i1
pc %50 1:i1
infer %34


; start LHS (in $27)
%0:i32 = var
%1 = add %0, -1:i32
%2 = block 2
%3 = block 2
%4:i32 = var
blockpc %3 0 %4 1:i1
%5:i32 = var
blockpc %3 1 %5 1:i1
%6:i32 = var
%7 = phi %3, 6:i32, %6
%8 = block 2
%9:i32 = var
blockpc %8 0 %9 1:i1
%10:i32 = var
blockpc %8 1 %10 1:i1
%11 = block 2
%12:i32 = var
blockpc %11 0 %12 1:i1
%13:i32 = var
blockpc %11 1 %13 1:i1
%14 = block 2
%15:i32 = var
blockpc %14 0 %15 1:i1
%16:i32 = var
blockpc %14 1 %16 1:i1
%17:i32 = var
%18:i32 = var
%19 = phi %14, %17, %18
%20 = phi %11, %19, 0:i32
%21 = phi %8, %20, 0:i32
%22 = sub %7, %21
%23:i32 = var
%24 = add %22, %23
%25:i32 = var
%26 = slt %24, %25
blockpc %2 0 %26 1:i1
%27:i32 = var
blockpc %2 1 %27 1:i1
%28 = block 2
%29:i32 = var
blockpc %28 0 %29 1:i1
%30:i32 = var
blockpc %28 1 %30 1:i1
%31 = block 2
%32:i32 = var
blockpc %31 0 %32 1:i1
%33:i32 = var
blockpc %31 1 %33 1:i1
%34 = block 2
%35:i32 = var
blockpc %34 0 %35 1:i1
%36:i32 = var
blockpc %34 1 %36 1:i1
%37:i32 = var
%38:i32 = var
%39 = phi %34, %37, %38
%40 = phi %31, %20, %39
%41 = phi %28, %20, %40
%42 = phi %2, %41, %20
%43:i32 = var
%44 = slt %42, %43
%45:i32 = zext %44
%46:i32 = var
%47:i32 = zext %46
%48 = and %45, %47
%49 = ne %48, 0:i32
%50:i32 = var
%51:i32 = var
pc %49 1:i1
pc %50 1:i1
pc %51 1:i1
infer %1


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = phi %0, 6:i32, %1
%3 = ne %2, 0:i32 (hasExternalUses)
%4:i32 = zext %3
%5 = xor %4, 1:i32
%6 = and %5, 1:i32
%7 = add %2, %6 (hasExternalUses)
%8 = add %7, -1:i32
%9 = slt %1, 0:i32
blockpc %0 0 %9 1:i1
%10:i32 = zext %9
%11 = eq %10, 0:i32
blockpc %0 1 %11 1:i1
%12 = block 2
%13 = block 2
%14:i32 = var
blockpc %13 0 %14 1:i1
%15:i32 = var
blockpc %13 1 %15 1:i1
%16 = block 2
%17:i32 = var
blockpc %16 0 %17 1:i1
%18:i32 = var
blockpc %16 1 %18 1:i1
%19 = block 2
%20:i32 = var
blockpc %19 0 %20 1:i1
%21:i32 = var
blockpc %19 1 %21 1:i1
%22:i32 = var
%23:i32 = var
%24 = phi %19, %22, %23
%25 = phi %16, %24, 0:i32
%26 = phi %13, %25, 0:i32
%27 = sub %2, %26
%28:i32 = var
%29 = add %27, %28
%30:i32 = var
%31 = slt %29, %30
blockpc %12 0 %31 1:i1
%32:i32 = var
blockpc %12 1 %32 1:i1
%33 = block 2
%34:i32 = var
blockpc %33 0 %34 1:i1
%35:i32 = var
blockpc %33 1 %35 1:i1
%36 = block 2
%37:i32 = var
blockpc %36 0 %37 1:i1
%38:i32 = var
blockpc %36 1 %38 1:i1
%39 = block 2
%40:i32 = var
blockpc %39 0 %40 1:i1
%41:i32 = var
blockpc %39 1 %41 1:i1
%42:i32 = var
%43:i32 = var
%44 = phi %39, %42, %43
%45 = phi %36, %25, %44
%46 = phi %33, %25, %45
%47 = phi %12, %46, %25
%48 = slt %47, %7
%49:i32 = zext %48
%50:i32 = var
%51:i32 = zext %50
%52 = and %49, %51
%53 = ne %52, 0:i32
%54:i32 = var
%55:i32 = var
pc %53 1:i1
pc %54 1:i1
pc %55 1:i1
infer %8


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = phi %0, 6:i32, %1
%3 = ne %2, 0:i32 (hasExternalUses)
%4:i32 = zext %3
%5 = xor %4, 1:i32
%6 = and %5, 1:i32
%7 = add %2, %6 (hasExternalUses)
%8 = add %7, -1:i32
%9 = block 2
%10 = block 2
%11 = block 2
%12 = block 2
%13 = block 2
%14:i32 = var
%15:i32 = var
%16 = phi %13, %14, %15
%17 = block 2
%18 = block 2
%19 = block 2
%20:i32 = var
%21:i32 = var
%22 = phi %19, %20, %21
%23 = block 2
%24:i32 = var
%25 = phi %23, %20, %24
%26 = phi %18, %22, %25
%27 = block 2
%28 = block 2
%29:i32 = var
%30 = block 2
%31:i32 = var
%32 = phi %30, %29, %31
%33 = phi %28, %29, %32
%34 = phi %27, %33, %16
%35 = phi %17, %26, %34
%36 = sub %16, %35
%37 = ashr %36, 2:i32
%38 = mul %37, 9:i32 (hasExternalUses)
%39:i32 = var
%40 = phi %12, %38, %39
%41 = phi %11, %40, 0:i32
%42 = block 2
%43 = block 2
%44:i32 = var
%45:i32 = var
%46 = phi %43, %44, %45
%47 = phi %42, %41, %46
%48 = phi %10, %41, %47
%49 = phi %9, %48, %41
%50 = sub %8, %49
%51:i32 = var
blockpc %0 0 %51 1:i1
%52:i32 = var
blockpc %0 1 %52 1:i1
%53:i32 = var
blockpc %9 0 %53 1:i1
%54:i32 = var
blockpc %9 1 %54 1:i1
%55:i32 = var
blockpc %10 0 %55 1:i1
%56:i32 = var
blockpc %10 1 %56 1:i1
%57:i32 = var
blockpc %11 0 %57 1:i1
%58:i32 = var
blockpc %11 1 %58 1:i1
%59:i32 = var
blockpc %12 0 %59 1:i1
%60:i32 = var
blockpc %12 1 %60 1:i1
%61:i32 = var
blockpc %13 0 %61 1:i1
%62:i32 = var
blockpc %13 1 %62 1:i1
%63:i32 = var
blockpc %17 0 %63 1:i1
%64:i32 = var
blockpc %17 1 %64 1:i1
%65:i32 = var
blockpc %18 0 %65 1:i1
%66:i32 = var
blockpc %18 1 %66 1:i1
%67:i32 = var
blockpc %19 0 %67 1:i1
%68:i32 = var
blockpc %19 1 %68 1:i1
%69:i32 = var
blockpc %23 0 %69 1:i1
%70:i32 = var
blockpc %23 1 %70 1:i1
%71:i32 = var
blockpc %27 0 %71 1:i1
%72:i32 = var
blockpc %27 1 %72 1:i1
%73:i32 = var
blockpc %28 0 %73 1:i1
%74:i32 = var
blockpc %28 1 %74 1:i1
%75:i32 = var
blockpc %30 0 %75 1:i1
%76:i32 = var
blockpc %30 1 %76 1:i1
%77:i32 = var
blockpc %42 0 %77 1:i1
%78:i32 = var
blockpc %42 1 %78 1:i1
%79:i32 = var
blockpc %43 0 %79 1:i1
%80:i32 = var
blockpc %43 1 %80 1:i1
%81:i32 = var
%82:i32 = var
%83:i32 = var
pc %81 1:i1
pc %82 1:i1
pc %83 1:i1
infer %50


; start LHS (in $27)
%0:i32 = var
%1 = add %0, -2:i32
%2 = block 2
%3 = block 2
%4:i32 = var
blockpc %3 0 %4 1:i1
%5:i32 = var
blockpc %3 1 %5 1:i1
%6:i32 = var
%7 = phi %3, 6:i32, %6
%8 = block 2
%9:i32 = var
blockpc %8 0 %9 1:i1
%10:i32 = var
blockpc %8 1 %10 1:i1
%11 = block 2
%12:i32 = var
blockpc %11 0 %12 1:i1
%13:i32 = var
blockpc %11 1 %13 1:i1
%14 = block 2
%15:i32 = var
blockpc %14 0 %15 1:i1
%16:i32 = var
blockpc %14 1 %16 1:i1
%17:i32 = var
%18:i32 = var
%19 = phi %14, %17, %18
%20 = phi %11, %19, 0:i32
%21 = phi %8, %20, 0:i32
%22 = sub %7, %21
%23:i32 = var
%24 = add %22, %23
%25:i32 = var
%26 = slt %24, %25
blockpc %2 0 %26 1:i1
%27:i32 = var
blockpc %2 1 %27 1:i1
%28 = block 2
%29:i32 = var
blockpc %28 0 %29 1:i1
%30:i32 = var
blockpc %28 1 %30 1:i1
%31 = block 2
%32:i32 = var
blockpc %31 0 %32 1:i1
%33:i32 = var
blockpc %31 1 %33 1:i1
%34 = block 2
%35:i32 = var
blockpc %34 0 %35 1:i1
%36:i32 = var
blockpc %34 1 %36 1:i1
%37:i32 = var
%38:i32 = var
%39 = phi %34, %37, %38
%40 = phi %31, %20, %39
%41 = phi %28, %20, %40
%42 = phi %2, %41, %20
%43:i32 = var
%44 = slt %42, %43
%45:i32 = zext %44
%46:i32 = var
%47:i32 = zext %46
%48 = and %45, %47
%49 = eq %48, 0:i32
%50:i32 = var
%51:i32 = var
pc %49 1:i1
pc %50 1:i1
pc %51 1:i1
infer %1


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = phi %0, 6:i32, %1
%3 = ne %2, 0:i32 (hasExternalUses)
%4:i32 = zext %3
%5 = xor %4, 1:i32
%6 = and %5, 1:i32
%7 = add %2, %6 (hasExternalUses)
%8 = add %7, -1:i32
%9 = slt %1, 0:i32
blockpc %0 0 %9 1:i1
%10:i32 = zext %9
%11 = eq %10, 0:i32
blockpc %0 1 %11 1:i1
%12 = block 2
%13 = block 2
%14:i32 = var
blockpc %13 0 %14 1:i1
%15:i32 = var
blockpc %13 1 %15 1:i1
%16 = block 2
%17:i32 = var
blockpc %16 0 %17 1:i1
%18:i32 = var
blockpc %16 1 %18 1:i1
%19 = block 2
%20:i32 = var
blockpc %19 0 %20 1:i1
%21:i32 = var
blockpc %19 1 %21 1:i1
%22:i32 = var
%23:i32 = var
%24 = phi %19, %22, %23
%25 = phi %16, %24, 0:i32
%26 = phi %13, %25, 0:i32
%27 = sub %2, %26
%28:i32 = var
%29 = add %27, %28
%30:i32 = var
%31 = slt %29, %30
blockpc %12 0 %31 1:i1
%32:i32 = var
blockpc %12 1 %32 1:i1
%33 = block 2
%34:i32 = var
blockpc %33 0 %34 1:i1
%35:i32 = var
blockpc %33 1 %35 1:i1
%36 = block 2
%37:i32 = var
blockpc %36 0 %37 1:i1
%38:i32 = var
blockpc %36 1 %38 1:i1
%39 = block 2
%40:i32 = var
blockpc %39 0 %40 1:i1
%41:i32 = var
blockpc %39 1 %41 1:i1
%42:i32 = var
%43:i32 = var
%44 = phi %39, %42, %43
%45 = phi %36, %25, %44
%46 = phi %33, %25, %45
%47 = phi %12, %46, %25
%48 = slt %47, %7
%49:i32 = zext %48
%50:i32 = var
%51:i32 = zext %50
%52 = and %49, %51
%53 = eq %52, 0:i32
%54:i32 = var
%55:i32 = var
pc %53 1:i1
pc %54 1:i1
pc %55 1:i1
infer %8


; start LHS (in $27)
%0:i32 = var
%1 = and %0, 8:i32
%2:i32 = var
%3 = or %2, 32:i32
%4 = eq %3, 103:i32
%5:i64 = var
%6 = and %5, 9218868437227405312:i64
%7 = eq %6, 9218868437227405312:i64
%8:i32 = zext %7
%9 = eq %8, 0:i32
pc %4 1:i1
pc %9 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = and %0, 8:i32 (hasExternalUses)
%2 = eq %1, 0:i32
%3:i32 = var
%4 = or %3, 32:i32
%5 = eq %4, 103:i32
%6:i64 = var
%7 = and %6, 9218868437227405312:i64
%8 = eq %7, 9218868437227405312:i64
%9:i32 = zext %8
%10 = eq %9, 0:i32
pc %5 1:i1
pc %10 1:i1
infer %2


; start LHS (in $27)
%0:i32 = var
%1 = add %0, -4:i32
%2 = block 2
%3 = phi %2, 0:i32, 1:i32
%4 = ne %3, 0:i32
%5:i32 = var
%6 = and %5, 8:i32
%7 = eq %6, 0:i32
%8:i32 = var
%9 = or %8, 32:i32
%10 = eq %9, 103:i32
%11:i64 = var
%12 = and %11, 9218868437227405312:i64
%13 = eq %12, 9218868437227405312:i64
%14:i32 = zext %13
%15 = eq %14, 0:i32
pc %4 1:i1
pc %7 1:i1
pc %10 1:i1
pc %15 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = urem %0, 10:i32
%2 = ne %0, 0:i32
%3 = block 2
%4 = phi %3, 0:i32, 1:i32
%5 = ne %4, 0:i32
%6:i32 = var
%7 = and %6, 8:i32
%8 = eq %7, 0:i32
%9:i32 = var
%10 = or %9, 32:i32
%11 = eq %10, 103:i32
%12:i64 = var
%13 = and %12, 9218868437227405312:i64
%14 = eq %13, 9218868437227405312:i64
%15:i32 = zext %14
%16 = eq %15, 0:i32
pc %2 1:i1
pc %5 1:i1
pc %8 1:i1
pc %11 1:i1
pc %16 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 1:i32
%2:i32 = var
%3 = urem %2, 10:i32
%4 = eq %3, 0:i32
%5 = ne %2, 0:i32
%6 = block 2
%7 = phi %6, 0:i32, 1:i32
%8 = ne %7, 0:i32
%9:i32 = var
%10 = and %9, 8:i32
%11 = eq %10, 0:i32
%12:i32 = var
%13 = or %12, 32:i32
%14 = eq %13, 103:i32
%15:i64 = var
%16 = and %15, 9218868437227405312:i64
%17 = eq %16, 9218868437227405312:i64
%18:i32 = zext %17
%19 = eq %18, 0:i32
pc %4 1:i1
pc %5 1:i1
pc %8 1:i1
pc %11 1:i1
pc %14 1:i1
pc %19 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = mul %0, 10:i32
%2:i32 = var
%3 = urem %2, 10:i32
%4 = eq %3, 0:i32
%5 = ne %2, 0:i32
%6 = block 2
%7 = phi %6, 0:i32, 1:i32
%8 = ne %7, 0:i32
%9:i32 = var
%10 = and %9, 8:i32
%11 = eq %10, 0:i32
%12:i32 = var
%13 = or %12, 32:i32
%14 = eq %13, 103:i32
%15:i64 = var
%16 = and %15, 9218868437227405312:i64
%17 = eq %16, 9218868437227405312:i64
%18:i32 = zext %17
%19 = eq %18, 0:i32
pc %4 1:i1
pc %5 1:i1
pc %8 1:i1
pc %11 1:i1
pc %14 1:i1
pc %19 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1:i32 = var
%2 = mul %1, 10:i32
%3 = urem %0, %2
%4 = urem %0, 10:i32
%5 = eq %4, 0:i32
%6 = ne %0, 0:i32
%7 = block 2
%8 = phi %7, 0:i32, 1:i32
%9 = ne %8, 0:i32
%10:i32 = var
%11 = and %10, 8:i32
%12 = eq %11, 0:i32
%13:i32 = var
%14 = or %13, 32:i32
%15 = eq %14, 103:i32
%16:i64 = var
%17 = and %16, 9218868437227405312:i64
%18 = eq %17, 9218868437227405312:i64
%19:i32 = zext %18
%20 = eq %19, 0:i32
pc %5 1:i1
pc %6 1:i1
pc %9 1:i1
pc %12 1:i1
pc %15 1:i1
pc %20 1:i1
infer %3


; start LHS (in $27)
%0:i32 = var
%1:i32 = var
%2 = mul %1, 10:i32
%3 = urem %0, %2
%4 = eq %3, 0:i32
%5 = urem %0, 10:i32
%6 = eq %5, 0:i32
%7 = ne %0, 0:i32
%8 = block 2
%9 = phi %8, 0:i32, 1:i32
%10 = ne %9, 0:i32
%11:i32 = var
%12 = and %11, 8:i32
%13 = eq %12, 0:i32
%14:i32 = var
%15 = or %14, 32:i32
%16 = eq %15, 103:i32
%17:i64 = var
%18 = and %17, 9218868437227405312:i64
%19 = eq %18, 9218868437227405312:i64
%20:i32 = zext %19
%21 = eq %20, 0:i32
pc %6 1:i1
pc %7 1:i1
pc %10 1:i1
pc %13 1:i1
pc %16 1:i1
pc %21 1:i1
infer %4


; start LHS (in $27)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = add %2, 8:i32 (hasExternalUses)
%4 = add %3, 288:i32 (hasExternalUses)
%5 = phi %1, %3, %4
%6 = sub %0, %5
%7 = block 2
%8:i32 = var
%9 = ne %8, 0:i32
blockpc %7 0 %9 1:i1
%10 = eq %8, 0:i32
blockpc %7 1 %10 1:i1
%11:i32 = var
%12 = add %11, -28:i32
%13:i32 = var
%14 = phi %7, %12, %13
%15 = slt %14, 0:i32
blockpc %1 0 %15 1:i1
%16:i32 = zext %15
%17 = eq %16, 0:i32
blockpc %1 1 %17 1:i1
%18:i32 = var
%19 = and %18, 8:i32
%20 = eq %19, 0:i32
%21:i32 = var
%22 = or %21, 32:i32
%23 = eq %22, 103:i32
%24:i64 = var
%25 = and %24, 9218868437227405312:i64
%26 = eq %25, 9218868437227405312:i64
%27:i32 = zext %26
%28 = eq %27, 0:i32
pc %20 1:i1
pc %23 1:i1
pc %28 1:i1
infer %6


; start LHS (in $27)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = add %2, 8:i32 (hasExternalUses)
%4 = add %3, 288:i32 (hasExternalUses)
%5 = phi %1, %3, %4
%6 = sub %0, %5
%7 = ashr %6, 2:i32
%8 = block 2
%9:i32 = var
%10 = ne %9, 0:i32
blockpc %8 0 %10 1:i1
%11 = eq %9, 0:i32
blockpc %8 1 %11 1:i1
%12:i32 = var
%13 = add %12, -28:i32
%14:i32 = var
%15 = phi %8, %13, %14
%16 = slt %15, 0:i32
blockpc %1 0 %16 1:i1
%17:i32 = zext %16
%18 = eq %17, 0:i32
blockpc %1 1 %18 1:i1
%19:i32 = var
%20 = and %19, 8:i32
%21 = eq %20, 0:i32
%22:i32 = var
%23 = or %22, 32:i32
%24 = eq %23, 103:i32
%25:i64 = var
%26 = and %25, 9218868437227405312:i64
%27 = eq %26, 9218868437227405312:i64
%28:i32 = zext %27
%29 = eq %28, 0:i32
pc %21 1:i1
pc %24 1:i1
pc %29 1:i1
infer %7


; start LHS (in $27)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = add %2, 8:i32 (hasExternalUses)
%4 = add %3, 288:i32 (hasExternalUses)
%5 = phi %1, %3, %4
%6 = sub %0, %5
%7 = ashr %6, 2:i32
%8 = mul %7, 9:i32
%9 = block 2
%10:i32 = var
%11 = ne %10, 0:i32
blockpc %9 0 %11 1:i1
%12 = eq %10, 0:i32
blockpc %9 1 %12 1:i1
%13:i32 = var
%14 = add %13, -28:i32
%15:i32 = var
%16 = phi %9, %14, %15
%17 = slt %16, 0:i32
blockpc %1 0 %17 1:i1
%18:i32 = zext %17
%19 = eq %18, 0:i32
blockpc %1 1 %19 1:i1
%20:i32 = var
%21 = and %20, 8:i32
%22 = eq %21, 0:i32
%23:i32 = var
%24 = or %23, 32:i32
%25 = eq %24, 103:i32
%26:i32 = var
pc %22 1:i1
pc %25 1:i1
pc %26 1:i1
infer %8


; start LHS (in $27)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = add %2, 8:i32 (hasExternalUses)
%4 = add %3, 288:i32 (hasExternalUses)
%5 = phi %1, %3, %4
%6 = sub %0, %5
%7 = ashr %6, 2:i32
%8 = mul %7, 9:i32
%9 = add %8, -9:i32
%10 = block 2
%11:i32 = var
%12 = ne %11, 0:i32
blockpc %10 0 %12 1:i1
%13 = eq %11, 0:i32
blockpc %10 1 %13 1:i1
%14:i32 = var
%15 = add %14, -28:i32
%16:i32 = var
%17 = phi %10, %15, %16
%18 = slt %17, 0:i32
blockpc %1 0 %18 1:i1
%19:i32 = zext %18
%20 = eq %19, 0:i32
blockpc %1 1 %20 1:i1
%21:i32 = var
%22 = and %21, 8:i32
%23 = eq %22, 0:i32
%24:i32 = var
%25 = or %24, 32:i32
%26 = eq %25, 103:i32
%27:i32 = var
pc %23 1:i1
pc %26 1:i1
pc %27 1:i1
infer %9


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = add %1, -1:i32 (hasExternalUses)
%3 = add %1, -2:i32 (hasExternalUses)
%4 = phi %0, %2, %3
%5 = or %4, 32:i32
%6 = block 2
%7:i32 = var
%8:i32 = var
%9 = add %7, %8
%10:i32 = var
%11 = add %10, -9:i32
%12 = slt %9, %11
blockpc %6 0 %12 1:i1
%13:i32 = zext %12
%14 = eq %13, 0:i32
blockpc %6 1 %14 1:i1
%15 = block 2
%16:i32 = var
%17 = eq %16, 0:i32
blockpc %15 0 %17 1:i1
%18:i32 = zext %17
%19 = eq %18, 0:i32
blockpc %15 1 %19 1:i1
%20 = block 2
%21:i32 = var
blockpc %20 0 %21 1:i1
%22:i32 = var
blockpc %20 1 %22 1:i1
%23 = block 2
%24:i32 = var
blockpc %23 0 %24 1:i1
%25:i32 = var
blockpc %23 1 %25 1:i1
%26:i32 = var
%27:i32 = var
%28 = phi %23, %26, %27
%29 = phi %20, %28, 0:i32
%30 = block 2
%31:i32 = var
blockpc %30 0 %31 1:i1
%32:i32 = var
blockpc %30 1 %32 1:i1
%33 = block 2
%34:i32 = var
blockpc %33 0 %34 1:i1
%35:i32 = var
blockpc %33 1 %35 1:i1
%36:i32 = var
%37:i32 = var
%38 = phi %33, %36, %37
%39 = phi %30, %29, %38
%40 = phi %15, %29, %39
%41 = phi %6, %40, %29
%42:i32 = var
%43 = slt %41, %42
%44:i32 = zext %43
%45:i32 = var
%46:i32 = zext %45
%47 = and %44, %46
%48 = ne %47, 0:i32
blockpc %0 0 %48 1:i1
%49:i32 = var
blockpc %0 1 %49 1:i1
%50:i32 = var
%51:i32 = var
%52:i32 = var
pc %50 1:i1
pc %51 1:i1
pc %52 1:i1
infer %5


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = add %1, -1:i32 (hasExternalUses)
%3 = add %1, -2:i32 (hasExternalUses)
%4 = phi %0, %2, %3
%5 = or %4, 32:i32
%6 = eq %5, 102:i32
%7 = block 2
%8:i32 = var
%9:i32 = var
%10 = add %8, %9
%11:i32 = var
%12 = add %11, -9:i32
%13 = slt %10, %12
blockpc %7 0 %13 1:i1
%14:i32 = zext %13
%15 = eq %14, 0:i32
blockpc %7 1 %15 1:i1
%16 = block 2
%17:i32 = var
%18 = eq %17, 0:i32
blockpc %16 0 %18 1:i1
%19:i32 = zext %18
%20 = eq %19, 0:i32
blockpc %16 1 %20 1:i1
%21 = block 2
%22:i32 = var
blockpc %21 0 %22 1:i1
%23:i32 = var
blockpc %21 1 %23 1:i1
%24 = block 2
%25:i32 = var
blockpc %24 0 %25 1:i1
%26:i32 = var
blockpc %24 1 %26 1:i1
%27:i32 = var
%28:i32 = var
%29 = phi %24, %27, %28
%30 = phi %21, %29, 0:i32
%31 = block 2
%32:i32 = var
blockpc %31 0 %32 1:i1
%33:i32 = var
blockpc %31 1 %33 1:i1
%34 = block 2
%35:i32 = var
blockpc %34 0 %35 1:i1
%36:i32 = var
blockpc %34 1 %36 1:i1
%37:i32 = var
%38:i32 = var
%39 = phi %34, %37, %38
%40 = phi %31, %30, %39
%41 = phi %16, %30, %40
%42 = phi %7, %41, %30
%43:i32 = var
%44 = slt %42, %43
%45:i32 = zext %44
%46:i32 = var
%47:i32 = zext %46
%48 = and %45, %47
%49 = ne %48, 0:i32
blockpc %0 0 %49 1:i1
%50:i32 = var
blockpc %0 1 %50 1:i1
%51:i32 = var
%52:i32 = var
%53:i32 = var
pc %51 1:i1
pc %52 1:i1
pc %53 1:i1
infer %6


; start LHS (in $27)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = add %2, 8:i32 (hasExternalUses)
%4 = add %3, 288:i32 (hasExternalUses)
%5 = phi %1, %3, %4
%6 = sub %0, %5
%7 = ashr %6, 2:i32
%8 = mul %7, 9:i32
%9 = add %8, -9:i32 (hasExternalUses)
%10 = block 2
%11 = block 2
%12 = block 2
%13:i32 = var
%14 = add %13, 1:i32 (hasExternalUses)
%15 = phi %12, 0:i32, %14
%16 = phi %11, %15, 9:i32
%17 = phi %10, %16, 9:i32
%18 = sub %9, %17
%19 = block 2
%20:i32 = var
%21 = ne %20, 0:i32
blockpc %19 0 %21 1:i1
%22 = eq %20, 0:i32
blockpc %19 1 %22 1:i1
%23:i32 = var
%24 = add %23, -28:i32
%25:i32 = var
%26 = phi %19, %24, %25
%27 = slt %26, 0:i32
blockpc %1 0 %27 1:i1
%28:i32 = var
blockpc %1 1 %28 1:i1
%29:i32 = var
blockpc %10 0 %29 1:i1
%30:i32 = var
blockpc %10 1 %30 1:i1
%31:i32 = var
blockpc %11 0 %31 1:i1
%32:i32 = var
blockpc %11 1 %32 1:i1
%33:i32 = var
blockpc %12 0 %33 1:i1
%34:i32 = var
blockpc %12 1 %34 1:i1
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
pc %35 1:i1
pc %36 1:i1
pc %37 1:i1
pc %38 1:i1
infer %18


; start LHS (in $27)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = add %2, 8:i32 (hasExternalUses)
%4 = add %3, 288:i32 (hasExternalUses)
%5 = phi %1, %3, %4
%6 = sub %0, %5
%7 = ashr %6, 2:i32
%8 = mul %7, 9:i32
%9 = add %8, -9:i32 (hasExternalUses)
%10 = block 2
%11 = block 2
%12 = block 2
%13:i32 = var
%14 = add %13, 1:i32 (hasExternalUses)
%15 = phi %12, 0:i32, %14
%16 = phi %11, %15, 9:i32
%17 = phi %10, %16, 9:i32
%18 = sub %9, %17 (hasExternalUses)
%19 = slt 0:i32, %18
%20 = block 2
%21:i32 = var
%22 = ne %21, 0:i32
blockpc %20 0 %22 1:i1
%23 = eq %21, 0:i32
blockpc %20 1 %23 1:i1
%24:i32 = var
%25 = add %24, -28:i32
%26:i32 = var
%27 = phi %20, %25, %26
%28 = slt %27, 0:i32
blockpc %1 0 %28 1:i1
%29:i32 = var
blockpc %1 1 %29 1:i1
%30:i32 = var
blockpc %10 0 %30 1:i1
%31:i32 = var
blockpc %10 1 %31 1:i1
%32:i32 = var
blockpc %11 0 %32 1:i1
%33:i32 = var
blockpc %11 1 %33 1:i1
%34:i32 = var
blockpc %12 0 %34 1:i1
%35:i32 = var
blockpc %12 1 %35 1:i1
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
pc %36 1:i1
pc %37 1:i1
pc %38 1:i1
pc %39 1:i1
infer %19


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = block 2
%3:i32 = var
%4 = add %3, 8:i32 (hasExternalUses)
%5 = add %4, 288:i32 (hasExternalUses)
%6 = phi %2, %4, %5
%7 = sub %1, %6
%8 = ashr %7, 2:i32
%9 = mul %8, 9:i32
%10 = add %9, -9:i32 (hasExternalUses)
%11 = block 2
%12 = block 2
%13 = block 2
%14:i32 = var
%15 = add %14, 1:i32 (hasExternalUses)
%16 = phi %13, 0:i32, %15
%17 = phi %12, %16, 9:i32
%18 = phi %11, %17, 9:i32
%19 = sub %10, %18 (hasExternalUses)
%20 = phi %0, %19, 0:i32
%21 = block 2
%22 = block 2
%23:i32 = var
%24 = phi %22, 6:i32, %23
%25 = ne %24, 0:i32 (hasExternalUses)
%26:i32 = zext %25
%27 = xor %26, 1:i32
%28 = and %27, 1:i32
%29 = add %24, %28 (hasExternalUses)
%30 = add %29, -1:i32
%31 = block 2
%32 = block 2
%33 = block 2
%34 = block 2
%35:i32 = var
%36:i32 = var
%37 = phi %34, %35, %36
%38 = phi %33, %37, 0:i32
%39 = block 2
%40 = block 2
%41:i32 = var
%42:i32 = var
%43 = phi %40, %41, %42
%44 = phi %39, %38, %43
%45 = phi %32, %38, %44
%46 = phi %31, %45, %38
%47 = sub %30, %46 (hasExternalUses)
%48:i32 = var
%49 = phi %21, %47, %48
%50 = sle %20, %49
%51:i32 = var
blockpc %0 0 %51 1:i1
%52:i32 = var
blockpc %0 1 %52 1:i1
%53:i32 = var
blockpc %2 0 %53 1:i1
%54:i32 = var
blockpc %2 1 %54 1:i1
%55:i32 = var
blockpc %11 0 %55 1:i1
%56:i32 = var
blockpc %11 1 %56 1:i1
%57:i32 = var
blockpc %12 0 %57 1:i1
%58:i32 = var
blockpc %12 1 %58 1:i1
%59:i32 = var
blockpc %13 0 %59 1:i1
%60:i32 = var
blockpc %13 1 %60 1:i1
%61:i32 = var
blockpc %21 0 %61 1:i1
%62:i32 = var
blockpc %21 1 %62 1:i1
%63:i32 = var
blockpc %22 0 %63 1:i1
%64:i32 = var
blockpc %22 1 %64 1:i1
%65:i32 = var
blockpc %31 0 %65 1:i1
%66:i32 = var
blockpc %31 1 %66 1:i1
%67:i32 = var
blockpc %32 0 %67 1:i1
%68:i32 = var
blockpc %32 1 %68 1:i1
%69:i32 = var
blockpc %33 0 %69 1:i1
%70:i32 = var
blockpc %33 1 %70 1:i1
%71:i32 = var
blockpc %34 0 %71 1:i1
%72:i32 = var
blockpc %34 1 %72 1:i1
%73:i32 = var
blockpc %39 0 %73 1:i1
%74:i32 = var
blockpc %39 1 %74 1:i1
%75:i32 = var
blockpc %40 0 %75 1:i1
%76:i32 = var
blockpc %40 1 %76 1:i1
%77:i32 = var
%78:i32 = var
%79:i32 = var
%80:i32 = var
pc %77 1:i1
pc %78 1:i1
pc %79 1:i1
pc %80 1:i1
infer %50


; start LHS (in $27)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = add %2, 8:i32 (hasExternalUses)
%4 = add %3, 288:i32 (hasExternalUses)
%5 = phi %1, %3, %4
%6 = sub %0, %5
%7 = ashr %6, 2:i32
%8 = mul %7, 9:i32
%9 = add %8, -9:i32 (hasExternalUses)
%10 = block 2
%11 = block 2
%12 = block 2
%13 = block 2
%14 = block 2
%15 = block 2
%16 = block 2
%17:i32 = var
%18:i32 = var
%19 = phi %16, %17, %18
%20 = block 2
%21:i32 = var
%22 = phi %20, %17, %21
%23 = phi %15, %19, %22
%24 = block 2
%25 = block 2
%26:i32 = var
%27 = block 2
%28:i32 = var
%29 = phi %27, %26, %28
%30 = phi %25, %26, %29
%31 = phi %24, %30, %5
%32 = phi %14, %23, %31
%33 = sub %5, %32
%34 = ashr %33, 2:i32
%35 = mul %34, 9:i32 (hasExternalUses)
%36:i32 = var
%37 = phi %13, %35, %36
%38 = phi %12, %37, 0:i32
%39 = block 2
%40 = block 2
%41:i32 = var
%42:i32 = var
%43 = phi %40, %41, %42
%44 = phi %39, %38, %43
%45 = phi %11, %38, %44
%46 = phi %10, %45, %38
%47 = add %9, %46
%48:i32 = var
blockpc %1 0 %48 1:i1
%49:i32 = var
blockpc %1 1 %49 1:i1
%50:i32 = var
blockpc %10 0 %50 1:i1
%51:i32 = var
blockpc %10 1 %51 1:i1
%52:i32 = var
blockpc %11 0 %52 1:i1
%53:i32 = var
blockpc %11 1 %53 1:i1
%54:i32 = var
blockpc %12 0 %54 1:i1
%55:i32 = var
blockpc %12 1 %55 1:i1
%56:i32 = var
blockpc %13 0 %56 1:i1
%57:i32 = var
blockpc %13 1 %57 1:i1
%58:i32 = var
blockpc %14 0 %58 1:i1
%59:i32 = var
blockpc %14 1 %59 1:i1
%60:i32 = var
blockpc %15 0 %60 1:i1
%61:i32 = var
blockpc %15 1 %61 1:i1
%62:i32 = var
blockpc %16 0 %62 1:i1
%63:i32 = var
blockpc %16 1 %63 1:i1
%64:i32 = var
blockpc %20 0 %64 1:i1
%65:i32 = var
blockpc %20 1 %65 1:i1
%66:i32 = var
blockpc %24 0 %66 1:i1
%67:i32 = var
blockpc %24 1 %67 1:i1
%68:i32 = var
blockpc %25 0 %68 1:i1
%69:i32 = var
blockpc %25 1 %69 1:i1
%70:i32 = var
blockpc %27 0 %70 1:i1
%71:i32 = var
blockpc %27 1 %71 1:i1
%72:i32 = var
blockpc %39 0 %72 1:i1
%73:i32 = var
blockpc %39 1 %73 1:i1
%74:i32 = var
blockpc %40 0 %74 1:i1
%75:i32 = var
blockpc %40 1 %75 1:i1
%76:i32 = var
%77:i32 = var
%78:i32 = var
%79:i32 = var
pc %76 1:i1
pc %77 1:i1
pc %78 1:i1
pc %79 1:i1
infer %47


; start LHS (in $27)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = add %2, 8:i32 (hasExternalUses)
%4 = add %3, 288:i32 (hasExternalUses)
%5 = phi %1, %3, %4
%6 = sub %0, %5
%7 = ashr %6, 2:i32
%8 = mul %7, 9:i32
%9 = add %8, -9:i32 (hasExternalUses)
%10 = block 2
%11 = block 2
%12 = block 2
%13 = block 2
%14 = block 2
%15 = block 2
%16 = block 2
%17:i32 = var
%18:i32 = var
%19 = phi %16, %17, %18
%20 = block 2
%21:i32 = var
%22 = phi %20, %17, %21
%23 = phi %15, %19, %22
%24 = block 2
%25 = block 2
%26:i32 = var
%27 = block 2
%28:i32 = var
%29 = phi %27, %26, %28
%30 = phi %25, %26, %29
%31 = phi %24, %30, %5
%32 = phi %14, %23, %31
%33 = sub %5, %32
%34 = ashr %33, 2:i32
%35 = mul %34, 9:i32 (hasExternalUses)
%36:i32 = var
%37 = phi %13, %35, %36
%38 = phi %12, %37, 0:i32
%39 = block 2
%40 = block 2
%41:i32 = var
%42:i32 = var
%43 = phi %40, %41, %42
%44 = phi %39, %38, %43
%45 = phi %11, %38, %44
%46 = phi %10, %45, %38
%47 = add %9, %46
%48 = block 2
%49 = block 2
%50 = block 2
%51:i32 = var
%52 = phi %50, 0:i32, %51
%53 = phi %49, %52, 9:i32
%54 = phi %48, %53, 9:i32
%55 = sub %47, %54
%56:i32 = var
blockpc %1 0 %56 1:i1
%57:i32 = var
blockpc %1 1 %57 1:i1
%58:i32 = var
blockpc %10 0 %58 1:i1
%59:i32 = var
blockpc %10 1 %59 1:i1
%60:i32 = var
blockpc %11 0 %60 1:i1
%61:i32 = var
blockpc %11 1 %61 1:i1
%62:i32 = var
blockpc %12 0 %62 1:i1
%63:i32 = var
blockpc %12 1 %63 1:i1
%64:i32 = var
blockpc %13 0 %64 1:i1
%65:i32 = var
blockpc %13 1 %65 1:i1
%66:i32 = var
blockpc %14 0 %66 1:i1
%67:i32 = var
blockpc %14 1 %67 1:i1
%68:i32 = var
blockpc %15 0 %68 1:i1
%69:i32 = var
blockpc %15 1 %69 1:i1
%70:i32 = var
blockpc %16 0 %70 1:i1
%71:i32 = var
blockpc %16 1 %71 1:i1
%72:i32 = var
blockpc %20 0 %72 1:i1
%73:i32 = var
blockpc %20 1 %73 1:i1
%74:i32 = var
blockpc %24 0 %74 1:i1
%75:i32 = var
blockpc %24 1 %75 1:i1
%76:i32 = var
blockpc %25 0 %76 1:i1
%77:i32 = var
blockpc %25 1 %77 1:i1
%78:i32 = var
blockpc %27 0 %78 1:i1
%79:i32 = var
blockpc %27 1 %79 1:i1
%80:i32 = var
blockpc %39 0 %80 1:i1
%81:i32 = var
blockpc %39 1 %81 1:i1
%82:i32 = var
blockpc %40 0 %82 1:i1
%83:i32 = var
blockpc %40 1 %83 1:i1
%84:i32 = var
blockpc %48 0 %84 1:i1
%85:i32 = var
blockpc %48 1 %85 1:i1
%86:i32 = var
blockpc %49 0 %86 1:i1
%87:i32 = var
blockpc %49 1 %87 1:i1
%88:i32 = var
blockpc %50 0 %88 1:i1
%89:i32 = var
blockpc %50 1 %89 1:i1
%90:i32 = var
%91:i32 = var
%92:i32 = var
%93:i32 = var
pc %90 1:i1
pc %91 1:i1
pc %92 1:i1
pc %93 1:i1
infer %55


; start LHS (in $27)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3 = add %2, 8:i32 (hasExternalUses)
%4 = add %3, 288:i32 (hasExternalUses)
%5 = phi %1, %3, %4
%6 = sub %0, %5
%7 = ashr %6, 2:i32
%8 = mul %7, 9:i32
%9 = add %8, -9:i32 (hasExternalUses)
%10 = block 2
%11 = block 2
%12 = block 2
%13 = block 2
%14:i32 = var
%15 = ashr %14, 2:i32
%16 = mul %15, 9:i32 (hasExternalUses)
%17:i32 = var
%18 = add %17, 1:i32 (hasExternalUses)
%19 = phi %13, %16, %18
%20 = phi %12, %19, 0:i32
%21 = block 2
%22 = block 2
%23:i32 = var
%24 = ashr %23, 2:i32
%25 = mul %24, 9:i32 (hasExternalUses)
%26:i32 = var
%27 = add %26, 1:i32 (hasExternalUses)
%28 = phi %22, %25, %27
%29 = phi %21, %20, %28
%30 = phi %11, %20, %29
%31 = phi %10, %30, %20
%32 = add %9, %31
%33 = block 2
%34 = block 2
%35 = block 2
%36:i32 = var
%37 = phi %35, 0:i32, %36
%38 = phi %34, %37, 9:i32
%39 = phi %33, %38, 9:i32
%40 = sub %32, %39 (hasExternalUses)
%41 = slt 0:i32, %40
%42:i32 = var
blockpc %1 0 %42 1:i1
%43:i32 = var
blockpc %1 1 %43 1:i1
%44:i32 = var
blockpc %10 0 %44 1:i1
%45:i32 = var
blockpc %10 1 %45 1:i1
%46:i32 = var
blockpc %11 0 %46 1:i1
%47:i32 = var
blockpc %11 1 %47 1:i1
%48:i32 = var
blockpc %12 0 %48 1:i1
%49:i32 = var
blockpc %12 1 %49 1:i1
%50:i32 = var
blockpc %13 0 %50 1:i1
%51:i32 = var
blockpc %13 1 %51 1:i1
%52:i32 = var
blockpc %21 0 %52 1:i1
%53:i32 = var
blockpc %21 1 %53 1:i1
%54:i32 = var
blockpc %22 0 %54 1:i1
%55:i32 = var
blockpc %22 1 %55 1:i1
%56:i32 = var
blockpc %33 0 %56 1:i1
%57:i32 = var
blockpc %33 1 %57 1:i1
%58:i32 = var
blockpc %34 0 %58 1:i1
%59:i32 = var
blockpc %34 1 %59 1:i1
%60:i32 = var
blockpc %35 0 %60 1:i1
%61:i32 = var
blockpc %35 1 %61 1:i1
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = var
pc %62 1:i1
pc %63 1:i1
pc %64 1:i1
pc %65 1:i1
infer %41


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6 = sub %1, %5
%7 = ashr %6, 2:i32
%8 = mul %7, 9:i32
%9 = add %8, -9:i32 (hasExternalUses)
%10 = block 2
%11 = block 2
%12 = block 2
%13 = block 2
%14:i32 = var
%15 = mul %14, 9:i32 (hasExternalUses)
%16:i32 = var
%17 = add %16, 1:i32 (hasExternalUses)
%18 = phi %13, %15, %17
%19 = phi %12, %18, 0:i32
%20 = block 2
%21 = block 2
%22:i32 = var
%23 = mul %22, 9:i32 (hasExternalUses)
%24:i32 = var
%25 = add %24, 1:i32 (hasExternalUses)
%26 = phi %21, %23, %25
%27 = phi %20, %19, %26
%28 = phi %11, %19, %27
%29 = phi %10, %28, %19
%30 = add %9, %29
%31 = block 2
%32 = block 2
%33 = block 2
%34:i32 = var
%35 = phi %33, 0:i32, %34
%36 = phi %32, %35, 9:i32
%37 = phi %31, %36, 9:i32
%38 = sub %30, %37 (hasExternalUses)
%39 = phi %0, %38, 0:i32
%40 = block 2
%41:i32 = var
%42:i32 = var
%43 = phi %40, %41, %42
%44 = sle %39, %43
%45:i32 = var
blockpc %0 0 %45 1:i1
%46:i32 = var
blockpc %0 1 %46 1:i1
%47:i32 = var
blockpc %2 0 %47 1:i1
%48:i32 = var
blockpc %2 1 %48 1:i1
%49:i32 = var
blockpc %10 0 %49 1:i1
%50:i32 = var
blockpc %10 1 %50 1:i1
%51:i32 = var
blockpc %11 0 %51 1:i1
%52:i32 = var
blockpc %11 1 %52 1:i1
%53:i32 = var
blockpc %12 0 %53 1:i1
%54:i32 = var
blockpc %12 1 %54 1:i1
%55:i32 = var
blockpc %13 0 %55 1:i1
%56:i32 = var
blockpc %13 1 %56 1:i1
%57:i32 = var
blockpc %20 0 %57 1:i1
%58:i32 = var
blockpc %20 1 %58 1:i1
%59:i32 = var
blockpc %21 0 %59 1:i1
%60:i32 = var
blockpc %21 1 %60 1:i1
%61:i32 = var
blockpc %31 0 %61 1:i1
%62:i32 = var
blockpc %31 1 %62 1:i1
%63:i32 = var
blockpc %32 0 %63 1:i1
%64:i32 = var
blockpc %32 1 %64 1:i1
%65:i32 = var
blockpc %33 0 %65 1:i1
%66:i32 = var
blockpc %33 1 %66 1:i1
%67:i32 = var
blockpc %40 0 %67 1:i1
%68:i32 = var
blockpc %40 1 %68 1:i1
%69:i32 = var
%70:i32 = var
%71:i32 = var
%72:i32 = var
pc %69 1:i1
pc %70 1:i1
pc %71 1:i1
pc %72 1:i1
infer %44


; start LHS (in $27)
%0:i32 = var
%1 = and %0, 8:i32
%2:i32 = var
%3 = or %2, 32:i32
%4 = eq %3, 103:i32
%5:i32 = zext %4
%6 = eq %5, 0:i32
%7:i64 = var
%8 = and %7, 9218868437227405312:i64
%9 = eq %8, 9218868437227405312:i64
%10:i32 = zext %9
%11 = eq %10, 0:i32
pc %6 1:i1
pc %11 1:i1
infer %1


; start LHS (in $27)
%0 = block 2
%1 = block 2
%2:i32 = var
%3 = add %2, -1:i32 (hasExternalUses)
%4 = add %2, -2:i32 (hasExternalUses)
%5 = phi %1, %3, %4
%6 = phi %0, %5, %2
%7 = or %6, 32:i32
%8 = or %2, 32:i32
%9 = eq %8, 103:i32
blockpc %0 0 %9 1:i1
%10:i32 = zext %9
%11 = eq %10, 0:i32
blockpc %0 1 %11 1:i1
%12 = block 2
%13:i32 = var
%14:i32 = var
%15 = add %13, %14
%16:i32 = var
%17 = add %16, -9:i32
%18 = slt %15, %17
blockpc %12 0 %18 1:i1
%19:i32 = zext %18
%20 = eq %19, 0:i32
blockpc %12 1 %20 1:i1
%21 = block 2
%22:i32 = var
%23 = eq %22, 0:i32
blockpc %21 0 %23 1:i1
%24:i32 = zext %23
%25 = eq %24, 0:i32
blockpc %21 1 %25 1:i1
%26 = block 2
%27:i32 = var
blockpc %26 0 %27 1:i1
%28:i32 = var
blockpc %26 1 %28 1:i1
%29 = block 2
%30:i32 = var
blockpc %29 0 %30 1:i1
%31:i32 = var
blockpc %29 1 %31 1:i1
%32:i32 = var
%33:i32 = var
%34 = phi %29, %32, %33
%35 = phi %26, %34, 0:i32
%36 = block 2
%37:i32 = var
blockpc %36 0 %37 1:i1
%38:i32 = var
blockpc %36 1 %38 1:i1
%39 = block 2
%40:i32 = var
blockpc %39 0 %40 1:i1
%41:i32 = var
blockpc %39 1 %41 1:i1
%42:i32 = var
%43:i32 = var
%44 = phi %39, %42, %43
%45 = phi %36, %35, %44
%46 = phi %21, %35, %45
%47 = phi %12, %46, %35
%48:i32 = var
%49 = slt %47, %48
%50:i32 = zext %49
%51:i32 = var
%52:i32 = zext %51
%53 = and %50, %52
%54 = ne %53, 0:i32
blockpc %1 0 %54 1:i1
%55:i32 = var
blockpc %1 1 %55 1:i1
%56:i32 = var
pc %56 1:i1
infer %7


; start LHS (in $27)
%0 = block 2
%1 = block 2
%2:i32 = var
%3 = add %2, -1:i32 (hasExternalUses)
%4 = add %2, -2:i32 (hasExternalUses)
%5 = phi %1, %3, %4
%6 = phi %0, %5, %2
%7 = or %6, 32:i32
%8 = eq %7, 102:i32
%9 = or %2, 32:i32
%10 = eq %9, 103:i32
blockpc %0 0 %10 1:i1
%11:i32 = zext %10
%12 = eq %11, 0:i32
blockpc %0 1 %12 1:i1
%13 = block 2
%14:i32 = var
%15:i32 = var
%16 = add %14, %15
%17:i32 = var
%18 = add %17, -9:i32
%19 = slt %16, %18
blockpc %13 0 %19 1:i1
%20:i32 = zext %19
%21 = eq %20, 0:i32
blockpc %13 1 %21 1:i1
%22 = block 2
%23:i32 = var
%24 = eq %23, 0:i32
blockpc %22 0 %24 1:i1
%25:i32 = var
blockpc %22 1 %25 1:i1
%26 = block 2
%27:i32 = var
blockpc %26 0 %27 1:i1
%28:i32 = var
blockpc %26 1 %28 1:i1
%29 = block 2
%30:i32 = var
blockpc %29 0 %30 1:i1
%31:i32 = var
blockpc %29 1 %31 1:i1
%32:i32 = var
%33:i32 = var
%34 = phi %29, %32, %33
%35 = phi %26, %34, 0:i32
%36 = block 2
%37:i32 = var
blockpc %36 0 %37 1:i1
%38:i32 = var
blockpc %36 1 %38 1:i1
%39 = block 2
%40:i32 = var
blockpc %39 0 %40 1:i1
%41:i32 = var
blockpc %39 1 %41 1:i1
%42:i32 = var
%43:i32 = var
%44 = phi %39, %42, %43
%45 = phi %36, %35, %44
%46 = phi %22, %35, %45
%47 = phi %13, %46, %35
%48:i32 = var
%49 = slt %47, %48
%50:i32 = zext %49
%51:i32 = var
%52:i32 = zext %51
%53 = and %50, %52
%54 = ne %53, 0:i32
blockpc %1 0 %54 1:i1
%55:i32 = var
blockpc %1 1 %55 1:i1
%56:i32 = var
pc %56 1:i1
infer %8


; start LHS (in $27)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4 = block 2
%5:i32 = var
%6:i32 = var
%7 = phi %4, %5, %6
%8 = block 2
%9 = block 2
%10 = block 2
%11:i32 = var
%12:i32 = var
%13 = phi %10, %11, %12
%14 = block 2
%15:i32 = var
%16 = phi %14, %11, %15
%17 = phi %9, %13, %16
%18 = block 2
%19 = block 2
%20:i32 = var
%21 = block 2
%22:i32 = var
%23 = phi %21, %20, %22
%24 = phi %19, %20, %23
%25 = phi %18, %24, %7
%26 = phi %8, %17, %25
%27 = sub %7, %26
%28 = ashr %27, 2:i32
%29 = mul %28, 9:i32 (hasExternalUses)
%30:i32 = var
%31 = phi %3, %29, %30
%32 = phi %2, %31, 0:i32
%33 = block 2
%34 = block 2
%35:i32 = var
%36:i32 = var
%37 = phi %34, %35, %36
%38 = phi %33, %32, %37
%39 = phi %1, %32, %38
%40 = phi %0, %39, %32
%41 = sle %40, 0:i32
%42:i32 = var
blockpc %0 0 %42 1:i1
%43:i32 = var
blockpc %0 1 %43 1:i1
%44:i32 = var
blockpc %1 0 %44 1:i1
%45:i32 = var
blockpc %1 1 %45 1:i1
%46:i32 = var
blockpc %2 0 %46 1:i1
%47:i32 = var
blockpc %2 1 %47 1:i1
%48:i32 = var
blockpc %3 0 %48 1:i1
%49:i32 = var
blockpc %3 1 %49 1:i1
%50:i32 = var
blockpc %4 0 %50 1:i1
%51:i32 = var
blockpc %4 1 %51 1:i1
%52:i32 = var
blockpc %8 0 %52 1:i1
%53:i32 = var
blockpc %8 1 %53 1:i1
%54:i32 = var
blockpc %9 0 %54 1:i1
%55:i32 = var
blockpc %9 1 %55 1:i1
%56:i32 = var
blockpc %10 0 %56 1:i1
%57:i32 = var
blockpc %10 1 %57 1:i1
%58:i32 = var
blockpc %14 0 %58 1:i1
%59:i32 = var
blockpc %14 1 %59 1:i1
%60:i32 = var
blockpc %18 0 %60 1:i1
%61:i32 = var
blockpc %18 1 %61 1:i1
%62:i32 = var
blockpc %19 0 %62 1:i1
%63:i32 = var
blockpc %19 1 %63 1:i1
%64:i32 = var
blockpc %21 0 %64 1:i1
%65:i32 = var
blockpc %21 1 %65 1:i1
%66:i32 = var
blockpc %33 0 %66 1:i1
%67:i32 = var
blockpc %33 1 %67 1:i1
%68:i32 = var
blockpc %34 0 %68 1:i1
%69:i32 = var
blockpc %34 1 %69 1:i1
%70:i32 = var
%71:i32 = var
pc %70 1:i1
pc %71 1:i1
infer %41


; start LHS (in $27)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4 = block 2
%5:i32 = var
%6:i32 = var
%7 = phi %4, %5, %6
%8 = block 2
%9 = block 2
%10 = block 2
%11:i32 = var
%12:i32 = var
%13 = phi %10, %11, %12
%14 = block 2
%15:i32 = var
%16 = phi %14, %11, %15
%17 = phi %9, %13, %16
%18 = block 2
%19 = block 2
%20:i32 = var
%21 = block 2
%22:i32 = var
%23 = phi %21, %20, %22
%24 = phi %19, %20, %23
%25 = phi %18, %24, %7
%26 = phi %8, %17, %25
%27 = sub %7, %26
%28 = ashr %27, 2:i32
%29 = mul %28, 9:i32 (hasExternalUses)
%30:i32 = var
%31 = phi %3, %29, %30
%32 = phi %2, %31, 0:i32
%33 = block 2
%34 = block 2
%35:i32 = var
%36:i32 = var
%37 = phi %34, %35, %36
%38 = phi %33, %32, %37
%39 = phi %1, %32, %38
%40 = phi %0, %39, %32
%41 = slt %40, 0:i32
%42:i32 = var
blockpc %0 0 %42 1:i1
%43:i32 = var
blockpc %0 1 %43 1:i1
%44:i32 = var
blockpc %1 0 %44 1:i1
%45:i32 = var
blockpc %1 1 %45 1:i1
%46:i32 = var
blockpc %2 0 %46 1:i1
%47:i32 = var
blockpc %2 1 %47 1:i1
%48:i32 = var
blockpc %3 0 %48 1:i1
%49:i32 = var
blockpc %3 1 %49 1:i1
%50:i32 = var
blockpc %4 0 %50 1:i1
%51:i32 = var
blockpc %4 1 %51 1:i1
%52:i32 = var
blockpc %8 0 %52 1:i1
%53:i32 = var
blockpc %8 1 %53 1:i1
%54:i32 = var
blockpc %9 0 %54 1:i1
%55:i32 = var
blockpc %9 1 %55 1:i1
%56:i32 = var
blockpc %10 0 %56 1:i1
%57:i32 = var
blockpc %10 1 %57 1:i1
%58:i32 = var
blockpc %14 0 %58 1:i1
%59:i32 = var
blockpc %14 1 %59 1:i1
%60:i32 = var
blockpc %18 0 %60 1:i1
%61:i32 = var
blockpc %18 1 %61 1:i1
%62:i32 = var
blockpc %19 0 %62 1:i1
%63:i32 = var
blockpc %19 1 %63 1:i1
%64:i32 = var
blockpc %21 0 %64 1:i1
%65:i32 = var
blockpc %21 1 %65 1:i1
%66:i32 = var
blockpc %33 0 %66 1:i1
%67:i32 = var
blockpc %33 1 %67 1:i1
%68:i32 = var
blockpc %34 0 %68 1:i1
%69:i32 = var
blockpc %34 1 %69 1:i1
%70:i32 = var
%71:i32 = var
pc %70 1:i1
pc %71 1:i1
infer %41


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 512:i32 (hasExternalUses)
%2 = add %1, 12:i32 (hasExternalUses)
%3:i32 = var
%4 = sub %2, %3
%5 = block 2
%6:i32 = var
%7 = or %6, 32:i32
%8 = eq %7, 103:i32
blockpc %5 0 %8 1:i1
%9:i32 = zext %8
%10 = eq %9, 0:i32
blockpc %5 1 %10 1:i1
%11 = block 2
%12:i32 = var
%13:i32 = zext %12
%14:i32 = var
%15:i32 = zext %14
%16 = and %13, %15
%17 = ne %16, 0:i32
blockpc %11 0 %17 1:i1
%18 = eq %16, 0:i32
blockpc %11 1 %18 1:i1
%19 = add %6, -1:i32
%20 = add %6, -2:i32
%21 = phi %11, %19, %20
%22 = phi %5, %21, %6
%23 = or %22, 32:i32
%24 = eq %23, 102:i32
%25:i32 = zext %24
%26 = eq %25, 0:i32
%27:i32 = var
pc %26 1:i1
pc %27 1:i1
infer %4


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 512:i32 (hasExternalUses)
%2 = add %1, 12:i32 (hasExternalUses)
%3:i32 = var
%4 = sub %2, %3
%5 = slt %4, 2:i32
%6 = block 2
%7:i32 = var
%8 = or %7, 32:i32
%9 = eq %8, 103:i32
blockpc %6 0 %9 1:i1
%10:i32 = zext %9
%11 = eq %10, 0:i32
blockpc %6 1 %11 1:i1
%12 = block 2
%13:i32 = var
%14:i32 = zext %13
%15:i32 = var
%16:i32 = zext %15
%17 = and %14, %16
%18 = ne %17, 0:i32
blockpc %12 0 %18 1:i1
%19 = eq %17, 0:i32
blockpc %12 1 %19 1:i1
%20 = add %7, -1:i32
%21 = add %7, -2:i32
%22 = phi %12, %20, %21
%23 = phi %6, %22, %7
%24 = or %23, 32:i32
%25 = eq %24, 102:i32
%26:i32 = zext %25
%27 = eq %26, 0:i32
%28:i32 = var
pc %27 1:i1
pc %28 1:i1
infer %5


; start LHS (in $27)
%0:i32 = var
%1 = add %0, -1:i32
%2:i32 = var
%3 = add %2, 512:i32
%4 = add %3, 12:i32
%5:i32 = var
%6 = sub %4, %5
%7 = slt %6, 2:i32
%8 = block 2
%9:i32 = var
%10 = or %9, 32:i32
%11 = eq %10, 103:i32
blockpc %8 0 %11 1:i1
%12:i32 = zext %11
%13 = eq %12, 0:i32
blockpc %8 1 %13 1:i1
%14 = block 2
%15:i32 = var
%16:i32 = zext %15
%17:i32 = var
%18:i32 = zext %17
%19 = and %16, %18
%20 = ne %19, 0:i32
blockpc %14 0 %20 1:i1
%21 = eq %19, 0:i32
blockpc %14 1 %21 1:i1
%22 = add %9, -1:i32
%23 = add %9, -2:i32
%24 = phi %14, %22, %23
%25 = phi %8, %24, %9
%26 = or %25, 32:i32
%27 = eq %26, 102:i32
%28:i32 = zext %27
%29 = eq %28, 0:i32
%30:i32 = var
pc %7 1:i1
pc %29 1:i1
pc %30 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 512:i32 (hasExternalUses)
%2 = add %1, 12:i32 (hasExternalUses)
%3:i32 = var
%4 = add %3, -1:i32 (hasExternalUses)
%5 = sub %2, %4
%6:i32 = var
%7 = sub %2, %6
%8 = slt %7, 2:i32
%9 = block 2
%10:i32 = var
%11 = or %10, 32:i32
%12 = eq %11, 103:i32
blockpc %9 0 %12 1:i1
%13:i32 = zext %12
%14 = eq %13, 0:i32
blockpc %9 1 %14 1:i1
%15 = block 2
%16:i32 = var
%17:i32 = zext %16
%18:i32 = var
%19:i32 = zext %18
%20 = and %17, %19
%21 = ne %20, 0:i32
blockpc %15 0 %21 1:i1
%22 = eq %20, 0:i32
blockpc %15 1 %22 1:i1
%23 = add %10, -1:i32
%24 = add %10, -2:i32
%25 = phi %15, %23, %24
%26 = phi %9, %25, %10
%27 = or %26, 32:i32
%28 = eq %27, 102:i32
%29:i32 = zext %28
%30 = eq %29, 0:i32
%31:i32 = var
pc %8 1:i1
pc %30 1:i1
pc %31 1:i1
infer %5


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 512:i32 (hasExternalUses)
%2 = add %1, 12:i32 (hasExternalUses)
%3:i32 = var
%4 = add %3, -1:i32 (hasExternalUses)
%5 = sub %2, %4
%6 = slt %5, 2:i32
%7:i32 = var
%8 = sub %2, %7
%9 = slt %8, 2:i32
%10 = block 2
%11:i32 = var
%12 = or %11, 32:i32
%13 = eq %12, 103:i32
blockpc %10 0 %13 1:i1
%14:i32 = zext %13
%15 = eq %14, 0:i32
blockpc %10 1 %15 1:i1
%16 = block 2
%17:i32 = var
%18:i32 = zext %17
%19:i32 = var
%20:i32 = zext %19
%21 = and %18, %20
%22 = ne %21, 0:i32
blockpc %16 0 %22 1:i1
%23 = eq %21, 0:i32
blockpc %16 1 %23 1:i1
%24 = add %11, -1:i32
%25 = add %11, -2:i32
%26 = phi %16, %24, %25
%27 = phi %10, %26, %11
%28 = or %27, 32:i32
%29 = eq %28, 102:i32
%30:i32 = zext %29
%31 = eq %30, 0:i32
%32:i32 = var
pc %9 1:i1
pc %31 1:i1
pc %32 1:i1
infer %6


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2:i32 = var
%3 = add %2, -1:i32 (hasExternalUses)
%4 = phi %0, %1, %3
%5 = add %4, -1:i32
%6:i32 = var
%7 = add %6, 512:i32
%8 = add %7, 12:i32
%9 = sub %8, %1
%10 = slt %9, 2:i32
blockpc %0 0 %10 1:i1
%11:i32 = zext %10
%12 = eq %11, 0:i32
blockpc %0 1 %12 1:i1
%13 = block 2
%14:i32 = var
%15 = or %14, 32:i32
%16 = eq %15, 103:i32
blockpc %13 0 %16 1:i1
%17:i32 = zext %16
%18 = eq %17, 0:i32
blockpc %13 1 %18 1:i1
%19 = block 2
%20:i32 = var
%21:i32 = zext %20
%22:i32 = var
%23:i32 = zext %22
%24 = and %21, %23
%25 = ne %24, 0:i32
blockpc %19 0 %25 1:i1
%26:i32 = var
blockpc %19 1 %26 1:i1
%27:i32 = var
%28:i32 = var
%29 = phi %19, %27, %28
%30 = phi %13, %29, %14
%31 = or %30, 32:i32
%32 = eq %31, 102:i32
%33:i32 = zext %32
%34 = eq %33, 0:i32
%35:i32 = var
pc %34 1:i1
pc %35 1:i1
infer %5


; start LHS (in $27)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4 = block 2
%5:i32 = var
%6:i32 = var
%7 = phi %4, %5, %6
%8 = block 2
%9 = block 2
%10 = block 2
%11:i32 = var
%12:i32 = var
%13 = phi %10, %11, %12
%14 = block 2
%15:i32 = var
%16 = phi %14, %11, %15
%17 = phi %9, %13, %16
%18 = block 2
%19 = block 2
%20:i32 = var
%21 = block 2
%22:i32 = var
%23 = phi %21, %20, %22
%24 = phi %19, %20, %23
%25 = phi %18, %24, %7
%26 = phi %8, %17, %25
%27 = sub %7, %26
%28 = ashr %27, 2:i32
%29 = mul %28, 9:i32 (hasExternalUses)
%30:i32 = var
%31 = phi %3, %29, %30
%32 = phi %2, %31, 0:i32
%33 = block 2
%34 = block 2
%35:i32 = var
%36:i32 = var
%37 = phi %34, %35, %36
%38 = phi %33, %32, %37
%39 = phi %1, %32, %38
%40 = phi %0, %39, %32
%41 = ashr %40, 31:i32
%42:i32 = var
blockpc %0 0 %42 1:i1
%43:i32 = var
blockpc %0 1 %43 1:i1
%44:i32 = var
blockpc %1 0 %44 1:i1
%45:i32 = var
blockpc %1 1 %45 1:i1
%46:i32 = var
blockpc %2 0 %46 1:i1
%47:i32 = var
blockpc %2 1 %47 1:i1
%48:i32 = var
blockpc %3 0 %48 1:i1
%49:i32 = var
blockpc %3 1 %49 1:i1
%50:i32 = var
blockpc %4 0 %50 1:i1
%51:i32 = var
blockpc %4 1 %51 1:i1
%52:i32 = var
blockpc %8 0 %52 1:i1
%53:i32 = var
blockpc %8 1 %53 1:i1
%54:i32 = var
blockpc %9 0 %54 1:i1
%55:i32 = var
blockpc %9 1 %55 1:i1
%56:i32 = var
blockpc %10 0 %56 1:i1
%57:i32 = var
blockpc %10 1 %57 1:i1
%58:i32 = var
blockpc %14 0 %58 1:i1
%59:i32 = var
blockpc %14 1 %59 1:i1
%60:i32 = var
blockpc %18 0 %60 1:i1
%61:i32 = var
blockpc %18 1 %61 1:i1
%62:i32 = var
blockpc %19 0 %62 1:i1
%63:i32 = var
blockpc %19 1 %63 1:i1
%64:i32 = var
blockpc %21 0 %64 1:i1
%65:i32 = var
blockpc %21 1 %65 1:i1
%66:i32 = var
blockpc %33 0 %66 1:i1
%67:i32 = var
blockpc %33 1 %67 1:i1
%68:i32 = var
blockpc %34 0 %68 1:i1
%69:i32 = var
blockpc %34 1 %69 1:i1
%70:i32 = var
%71:i32 = var
pc %70 1:i1
pc %71 1:i1
infer %41


; start LHS (in $27)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4 = block 2
%5:i32 = var
%6:i32 = var
%7 = phi %4, %5, %6
%8 = block 2
%9 = block 2
%10 = block 2
%11:i32 = var
%12:i32 = var
%13 = phi %10, %11, %12
%14 = block 2
%15:i32 = var
%16 = phi %14, %11, %15
%17 = phi %9, %13, %16
%18 = block 2
%19 = block 2
%20:i32 = var
%21 = block 2
%22:i32 = var
%23 = phi %21, %20, %22
%24 = phi %19, %20, %23
%25 = phi %18, %24, %7
%26 = phi %8, %17, %25
%27 = sub %7, %26
%28 = ashr %27, 2:i32
%29 = mul %28, 9:i32 (hasExternalUses)
%30:i32 = var
%31 = phi %3, %29, %30
%32 = phi %2, %31, 0:i32
%33 = block 2
%34 = block 2
%35:i32 = var
%36:i32 = var
%37 = phi %34, %35, %36
%38 = phi %33, %32, %37
%39 = phi %1, %32, %38
%40 = phi %0, %39, %32
%41 = ashr %40, 31:i32
%42 = and %41, 2:i32
%43:i32 = var
blockpc %0 0 %43 1:i1
%44:i32 = var
blockpc %0 1 %44 1:i1
%45:i32 = var
blockpc %1 0 %45 1:i1
%46:i32 = var
blockpc %1 1 %46 1:i1
%47:i32 = var
blockpc %2 0 %47 1:i1
%48:i32 = var
blockpc %2 1 %48 1:i1
%49:i32 = var
blockpc %3 0 %49 1:i1
%50:i32 = var
blockpc %3 1 %50 1:i1
%51:i32 = var
blockpc %4 0 %51 1:i1
%52:i32 = var
blockpc %4 1 %52 1:i1
%53:i32 = var
blockpc %8 0 %53 1:i1
%54:i32 = var
blockpc %8 1 %54 1:i1
%55:i32 = var
blockpc %9 0 %55 1:i1
%56:i32 = var
blockpc %9 1 %56 1:i1
%57:i32 = var
blockpc %10 0 %57 1:i1
%58:i32 = var
blockpc %10 1 %58 1:i1
%59:i32 = var
blockpc %14 0 %59 1:i1
%60:i32 = var
blockpc %14 1 %60 1:i1
%61:i32 = var
blockpc %18 0 %61 1:i1
%62:i32 = var
blockpc %18 1 %62 1:i1
%63:i32 = var
blockpc %19 0 %63 1:i1
%64:i32 = var
blockpc %19 1 %64 1:i1
%65:i32 = var
blockpc %21 0 %65 1:i1
%66:i32 = var
blockpc %21 1 %66 1:i1
%67:i32 = var
blockpc %33 0 %67 1:i1
%68:i32 = var
blockpc %33 1 %68 1:i1
%69:i32 = var
blockpc %34 0 %69 1:i1
%70:i32 = var
blockpc %34 1 %70 1:i1
%71:i32 = var
%72:i32 = var
pc %71 1:i1
pc %72 1:i1
infer %42


; start LHS (in $27)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4:i32 = var
%5 = ashr %4, 2:i32
%6 = mul %5, 9:i32 (hasExternalUses)
%7:i32 = var
%8 = add %7, 1:i32 (hasExternalUses)
%9 = phi %3, %6, %8
%10 = phi %2, %9, 0:i32
%11 = block 2
%12 = block 2
%13:i32 = var
%14 = ashr %13, 2:i32
%15 = mul %14, 9:i32 (hasExternalUses)
%16:i32 = var
%17 = add %16, 1:i32 (hasExternalUses)
%18 = phi %12, %15, %17
%19 = phi %11, %10, %18
%20 = phi %1, %10, %19
%21 = phi %0, %20, %10
%22 = ashr %21, 31:i32
%23 = and %22, 2:i32
%24 = add %23, 43:i32
%25 = block 2
%26:i32 = var
%27 = slt %26, 0:i32
blockpc %25 0 %27 1:i1
%28:i32 = zext %27
%29 = eq %28, 0:i32
blockpc %25 1 %29 1:i1
%30 = phi %25, 6:i32, %26
%31 = block 2
%32:i32 = var
blockpc %31 0 %32 1:i1
%33:i32 = var
blockpc %31 1 %33 1:i1
%34 = phi %31, %10, 0:i32
%35 = sub %30, %34
%36:i32 = var
%37 = add %35, %36
%38:i32 = var
%39 = slt %37, %38
blockpc %0 0 %39 1:i1
%40:i32 = var
blockpc %0 1 %40 1:i1
%41:i32 = var
blockpc %1 0 %41 1:i1
%42:i32 = var
blockpc %1 1 %42 1:i1
%43:i32 = var
blockpc %2 0 %43 1:i1
%44:i32 = var
blockpc %2 1 %44 1:i1
%45:i32 = var
blockpc %3 0 %45 1:i1
%46:i32 = var
blockpc %3 1 %46 1:i1
%47:i32 = var
blockpc %11 0 %47 1:i1
%48:i32 = var
blockpc %11 1 %48 1:i1
%49:i32 = var
blockpc %12 0 %49 1:i1
%50:i32 = var
blockpc %12 1 %50 1:i1
%51:i32 = var
%52:i32 = var
pc %51 1:i1
pc %52 1:i1
infer %24


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2:i32 = var
%3 = add %2, -1:i32 (hasExternalUses)
%4 = phi %0, %1, %3
%5 = add %4, -2:i32
%6:i32 = var
%7 = add %6, 512:i32
%8 = add %7, 12:i32
%9 = sub %8, %1
%10 = slt %9, 2:i32
blockpc %0 0 %10 1:i1
%11:i32 = zext %10
%12 = eq %11, 0:i32
blockpc %0 1 %12 1:i1
%13 = block 2
%14:i32 = var
%15 = or %14, 32:i32
%16 = eq %15, 103:i32
blockpc %13 0 %16 1:i1
%17:i32 = zext %16
%18 = eq %17, 0:i32
blockpc %13 1 %18 1:i1
%19 = block 2
%20:i32 = var
%21:i32 = zext %20
%22:i32 = var
%23:i32 = zext %22
%24 = and %21, %23
%25 = ne %24, 0:i32
blockpc %19 0 %25 1:i1
%26:i32 = var
blockpc %19 1 %26 1:i1
%27:i32 = var
%28:i32 = var
%29 = phi %19, %27, %28
%30 = phi %13, %29, %14
%31 = or %30, 32:i32
%32 = eq %31, 102:i32
%33:i32 = zext %32
%34 = eq %33, 0:i32
%35:i32 = var
pc %34 1:i1
pc %35 1:i1
infer %5


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 512:i32 (hasExternalUses)
%2 = add %1, 12:i32 (hasExternalUses)
%3 = block 2
%4:i32 = var
%5:i32 = var
%6 = add %5, -1:i32 (hasExternalUses)
%7 = phi %3, %4, %6
%8 = add %7, -2:i32 (hasExternalUses)
%9 = sub %2, %8
%10 = sub %2, %4
%11 = slt %10, 2:i32
blockpc %3 0 %11 1:i1
%12:i32 = zext %11
%13 = eq %12, 0:i32
blockpc %3 1 %13 1:i1
%14 = block 2
%15:i32 = var
%16 = or %15, 32:i32
%17 = eq %16, 103:i32
blockpc %14 0 %17 1:i1
%18:i32 = zext %17
%19 = eq %18, 0:i32
blockpc %14 1 %19 1:i1
%20 = block 2
%21:i32 = var
%22:i32 = zext %21
%23:i32 = var
%24:i32 = zext %23
%25 = and %22, %24
%26 = ne %25, 0:i32
blockpc %20 0 %26 1:i1
%27:i32 = var
blockpc %20 1 %27 1:i1
%28:i32 = var
%29:i32 = var
%30 = phi %20, %28, %29
%31 = phi %14, %30, %15
%32 = or %31, 32:i32
%33 = eq %32, 102:i32
%34:i32 = zext %33
%35 = eq %34, 0:i32
%36:i32 = var
pc %35 1:i1
pc %36 1:i1
infer %9


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = and %1, 2049:i32
%3 = ne %2, 0:i32 (hasExternalUses)
%4:i32 = zext %3
%5 = phi %0, 1:i32, %4
%6 = add %5, 1:i32
%7:i64 = var
%8 = slt %7, 0:i64
blockpc %0 0 %8 1:i1
%9:i32 = zext %8
%10 = eq %9, 0:i32
blockpc %0 1 %10 1:i1
%11:i64 = var
%12 = and %11, 9218868437227405312:i64
%13 = eq %12, 9218868437227405312:i64
%14:i32 = zext %13
%15 = eq %14, 0:i32
pc %15 1:i1
infer %6


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = and %1, 2049:i32
%3 = ne %2, 0:i32 (hasExternalUses)
%4:i32 = zext %3
%5 = phi %0, 1:i32, %4
%6 = add %5, 1:i32
%7 = block 2
%8 = block 2
%9 = block 2
%10 = block 2
%11:i32 = var
%12 = phi %10, 6:i32, %11
%13:i32 = var
%14:i32 = zext %13
%15 = xor %14, 1:i32
%16 = and %15, 1:i32
%17 = add %12, %16 (hasExternalUses)
%18 = add %17, -1:i32
%19 = block 2
%20 = block 2
%21 = block 2
%22 = block 2
%23:i32 = var
%24:i32 = var
%25 = phi %22, %23, %24
%26 = phi %21, %25, 0:i32
%27 = block 2
%28 = block 2
%29:i32 = var
%30:i32 = var
%31 = phi %28, %29, %30
%32 = phi %27, %26, %31
%33 = phi %20, %26, %32
%34 = phi %19, %33, %26
%35 = sub %18, %34 (hasExternalUses)
%36:i32 = var
%37 = phi %9, %35, %36
%38 = block 2
%39 = block 2
%40 = block 2
%41:i32 = var
%42 = phi %40, %41, 0:i32
%43 = phi %39, %37, %42
%44 = block 2
%45 = block 2
%46:i32 = var
%47 = phi %45, %46, 0:i32
%48 = phi %44, %37, %47
%49 = phi %38, %43, %48
%50 = phi %8, %37, %49
%51 = phi %7, %50, %12
%52 = add %6, %51
%53:i32 = var
blockpc %0 0 %53 1:i1
%54:i32 = var
blockpc %0 1 %54 1:i1
%55:i32 = var
blockpc %7 0 %55 1:i1
%56:i32 = var
blockpc %7 1 %56 1:i1
%57:i32 = var
blockpc %8 0 %57 1:i1
%58:i32 = var
blockpc %8 1 %58 1:i1
%59:i32 = var
blockpc %9 0 %59 1:i1
%60:i32 = var
blockpc %9 1 %60 1:i1
%61:i32 = var
blockpc %10 0 %61 1:i1
%62:i32 = var
blockpc %10 1 %62 1:i1
%63:i32 = var
blockpc %19 0 %63 1:i1
%64:i32 = var
blockpc %19 1 %64 1:i1
%65:i32 = var
blockpc %20 0 %65 1:i1
%66:i32 = var
blockpc %20 1 %66 1:i1
%67:i32 = var
blockpc %21 0 %67 1:i1
%68:i32 = var
blockpc %21 1 %68 1:i1
%69:i32 = var
blockpc %22 0 %69 1:i1
%70:i32 = var
blockpc %22 1 %70 1:i1
%71:i32 = var
blockpc %27 0 %71 1:i1
%72:i32 = var
blockpc %27 1 %72 1:i1
%73:i32 = var
blockpc %28 0 %73 1:i1
%74:i32 = var
blockpc %28 1 %74 1:i1
%75:i32 = var
blockpc %38 0 %75 1:i1
%76:i32 = var
blockpc %38 1 %76 1:i1
%77:i32 = var
blockpc %39 0 %77 1:i1
%78:i32 = var
blockpc %39 1 %78 1:i1
%79:i32 = var
blockpc %40 0 %79 1:i1
%80:i32 = var
blockpc %40 1 %80 1:i1
%81:i32 = var
blockpc %44 0 %81 1:i1
%82:i32 = var
blockpc %44 1 %82 1:i1
%83:i32 = var
blockpc %45 0 %83 1:i1
%84:i32 = var
blockpc %45 1 %84 1:i1
%85:i32 = var
pc %85 1:i1
infer %52


; start LHS (in $27)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4:i32 = var
%5 = phi %3, 6:i32, %4
%6:i32 = var
%7:i32 = zext %6
%8 = xor %7, 1:i32
%9 = and %8, 1:i32
%10 = add %5, %9 (hasExternalUses)
%11 = add %10, -1:i32
%12 = block 2
%13 = block 2
%14 = block 2
%15 = block 2
%16:i32 = var
%17:i32 = var
%18 = phi %15, %16, %17
%19 = phi %14, %18, 0:i32
%20 = block 2
%21 = block 2
%22:i32 = var
%23:i32 = var
%24 = phi %21, %22, %23
%25 = phi %20, %19, %24
%26 = phi %13, %19, %25
%27 = phi %12, %26, %19
%28 = sub %11, %27 (hasExternalUses)
%29 = add %10, -1:i32 (hasExternalUses)
%30 = phi %2, %28, %29
%31 = block 2
%32 = block 2
%33 = block 2
%34:i32 = var
%35 = phi %33, %34, 0:i32
%36 = phi %32, %30, %35
%37 = block 2
%38 = block 2
%39:i32 = var
%40 = phi %38, %39, 0:i32
%41 = phi %37, %30, %40
%42 = phi %31, %36, %41
%43 = phi %1, %30, %42
%44 = phi %0, %43, %5
%45:i32 = var
%46 = phi %1, %45, 0:i32
%47:i32 = var
%48 = phi %0, %46, %47
%49 = or %44, %48
%50:i32 = var
blockpc %0 0 %50 1:i1
%51:i32 = var
blockpc %0 1 %51 1:i1
%52:i32 = var
blockpc %1 0 %52 1:i1
%53:i32 = var
blockpc %1 1 %53 1:i1
%54:i32 = var
blockpc %2 0 %54 1:i1
%55:i32 = var
blockpc %2 1 %55 1:i1
%56:i32 = var
blockpc %3 0 %56 1:i1
%57:i32 = var
blockpc %3 1 %57 1:i1
%58:i32 = var
blockpc %12 0 %58 1:i1
%59:i32 = var
blockpc %12 1 %59 1:i1
%60:i32 = var
blockpc %13 0 %60 1:i1
%61:i32 = var
blockpc %13 1 %61 1:i1
%62:i32 = var
blockpc %14 0 %62 1:i1
%63:i32 = var
blockpc %14 1 %63 1:i1
%64:i32 = var
blockpc %15 0 %64 1:i1
%65:i32 = var
blockpc %15 1 %65 1:i1
%66:i32 = var
blockpc %20 0 %66 1:i1
%67:i32 = var
blockpc %20 1 %67 1:i1
%68:i32 = var
blockpc %21 0 %68 1:i1
%69:i32 = var
blockpc %21 1 %69 1:i1
%70:i32 = var
blockpc %31 0 %70 1:i1
%71:i32 = var
blockpc %31 1 %71 1:i1
%72:i32 = var
blockpc %32 0 %72 1:i1
%73:i32 = var
blockpc %32 1 %73 1:i1
%74:i32 = var
blockpc %33 0 %74 1:i1
%75:i32 = var
blockpc %33 1 %75 1:i1
%76:i32 = var
blockpc %37 0 %76 1:i1
%77:i32 = var
blockpc %37 1 %77 1:i1
%78:i32 = var
blockpc %38 0 %78 1:i1
%79:i32 = var
blockpc %38 1 %79 1:i1
%80:i32 = var
pc %80 1:i1
infer %49


; start LHS (in $27)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4:i32 = var
%5 = phi %3, 6:i32, %4
%6:i32 = var
%7 = and %6, 1:i32
%8 = add %5, %7 (hasExternalUses)
%9 = add %8, -1:i32
%10 = block 2
%11 = block 2
%12 = block 2
%13 = block 2
%14:i32 = var
%15:i32 = var
%16 = phi %13, %14, %15
%17 = phi %12, %16, 0:i32
%18 = block 2
%19 = block 2
%20:i32 = var
%21:i32 = var
%22 = phi %19, %20, %21
%23 = phi %18, %17, %22
%24 = phi %11, %17, %23
%25 = phi %10, %24, %17
%26 = sub %9, %25 (hasExternalUses)
%27 = add %8, -1:i32 (hasExternalUses)
%28 = phi %2, %26, %27
%29 = block 2
%30 = block 2
%31 = block 2
%32:i32 = var
%33 = phi %31, %32, 0:i32
%34 = phi %30, %28, %33
%35 = block 2
%36 = block 2
%37:i32 = var
%38 = phi %36, %37, 0:i32
%39 = phi %35, %28, %38
%40 = phi %29, %34, %39
%41 = phi %1, %28, %40
%42 = phi %0, %41, %5
%43:i32 = var
%44 = phi %1, %43, 0:i32
%45:i32 = var
%46 = phi %0, %44, %45
%47 = or %42, %46 (hasExternalUses)
%48 = ne %47, 0:i32
%49:i32 = var
blockpc %0 0 %49 1:i1
%50:i32 = var
blockpc %0 1 %50 1:i1
%51:i32 = var
blockpc %1 0 %51 1:i1
%52:i32 = var
blockpc %1 1 %52 1:i1
%53:i32 = var
blockpc %2 0 %53 1:i1
%54:i32 = var
blockpc %2 1 %54 1:i1
%55:i32 = var
blockpc %3 0 %55 1:i1
%56:i32 = var
blockpc %3 1 %56 1:i1
%57:i32 = var
blockpc %10 0 %57 1:i1
%58:i32 = var
blockpc %10 1 %58 1:i1
%59:i32 = var
blockpc %11 0 %59 1:i1
%60:i32 = var
blockpc %11 1 %60 1:i1
%61:i32 = var
blockpc %12 0 %61 1:i1
%62:i32 = var
blockpc %12 1 %62 1:i1
%63:i32 = var
blockpc %13 0 %63 1:i1
%64:i32 = var
blockpc %13 1 %64 1:i1
%65:i32 = var
blockpc %18 0 %65 1:i1
%66:i32 = var
blockpc %18 1 %66 1:i1
%67:i32 = var
blockpc %19 0 %67 1:i1
%68:i32 = var
blockpc %19 1 %68 1:i1
%69:i32 = var
blockpc %29 0 %69 1:i1
%70:i32 = var
blockpc %29 1 %70 1:i1
%71:i32 = var
blockpc %30 0 %71 1:i1
%72:i32 = var
blockpc %30 1 %72 1:i1
%73:i32 = var
blockpc %31 0 %73 1:i1
%74:i32 = var
blockpc %31 1 %74 1:i1
%75:i32 = var
blockpc %35 0 %75 1:i1
%76:i32 = var
blockpc %35 1 %76 1:i1
%77:i32 = var
blockpc %36 0 %77 1:i1
%78:i32 = var
blockpc %36 1 %78 1:i1
%79:i32 = var
pc %79 1:i1
infer %48


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = and %1, 2049:i32
%3 = ne %2, 0:i32 (hasExternalUses)
%4:i32 = zext %3
%5 = phi %0, 1:i32, %4
%6 = add %5, 1:i32
%7 = block 2
%8 = block 2
%9 = block 2
%10 = block 2
%11:i32 = var
%12 = phi %10, 6:i32, %11
%13:i32 = var
%14 = and %13, 1:i32
%15 = add %12, %14 (hasExternalUses)
%16 = add %15, -1:i32
%17 = block 2
%18 = block 2
%19 = block 2
%20 = block 2
%21:i32 = var
%22:i32 = var
%23 = phi %20, %21, %22
%24 = phi %19, %23, 0:i32
%25 = block 2
%26 = block 2
%27:i32 = var
%28:i32 = var
%29 = phi %26, %27, %28
%30 = phi %25, %24, %29
%31 = phi %18, %24, %30
%32 = phi %17, %31, %24
%33 = sub %16, %32 (hasExternalUses)
%34:i32 = var
%35 = phi %9, %33, %34
%36 = block 2
%37 = block 2
%38 = block 2
%39:i32 = var
%40 = phi %38, %39, 0:i32
%41 = phi %37, %35, %40
%42 = block 2
%43 = block 2
%44:i32 = var
%45 = phi %43, %44, 0:i32
%46 = phi %42, %35, %45
%47 = phi %36, %41, %46
%48 = phi %8, %35, %47
%49 = phi %7, %48, %12
%50 = add %6, %49
%51:i32 = var
%52:i32 = zext %51
%53 = add %50, %52
%54:i32 = var
blockpc %0 0 %54 1:i1
%55:i32 = var
blockpc %0 1 %55 1:i1
%56:i32 = var
blockpc %7 0 %56 1:i1
%57:i32 = var
blockpc %7 1 %57 1:i1
%58:i32 = var
blockpc %8 0 %58 1:i1
%59:i32 = var
blockpc %8 1 %59 1:i1
%60:i32 = var
blockpc %9 0 %60 1:i1
%61:i32 = var
blockpc %9 1 %61 1:i1
%62:i32 = var
blockpc %10 0 %62 1:i1
%63:i32 = var
blockpc %10 1 %63 1:i1
%64:i32 = var
blockpc %17 0 %64 1:i1
%65:i32 = var
blockpc %17 1 %65 1:i1
%66:i32 = var
blockpc %18 0 %66 1:i1
%67:i32 = var
blockpc %18 1 %67 1:i1
%68:i32 = var
blockpc %19 0 %68 1:i1
%69:i32 = var
blockpc %19 1 %69 1:i1
%70:i32 = var
blockpc %20 0 %70 1:i1
%71:i32 = var
blockpc %20 1 %71 1:i1
%72:i32 = var
blockpc %25 0 %72 1:i1
%73:i32 = var
blockpc %25 1 %73 1:i1
%74:i32 = var
blockpc %26 0 %74 1:i1
%75:i32 = var
blockpc %26 1 %75 1:i1
%76:i32 = var
blockpc %36 0 %76 1:i1
%77:i32 = var
blockpc %36 1 %77 1:i1
%78:i32 = var
blockpc %37 0 %78 1:i1
%79:i32 = var
blockpc %37 1 %79 1:i1
%80:i32 = var
blockpc %38 0 %80 1:i1
%81:i32 = var
blockpc %38 1 %81 1:i1
%82:i32 = var
blockpc %42 0 %82 1:i1
%83:i32 = var
blockpc %42 1 %83 1:i1
%84:i32 = var
blockpc %43 0 %84 1:i1
%85:i32 = var
blockpc %43 1 %85 1:i1
%86:i32 = var
pc %86 1:i1
infer %53


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = and %1, 2049:i32
%3 = ne %2, 0:i32 (hasExternalUses)
%4:i32 = zext %3
%5 = phi %0, 1:i32, %4
%6 = add %5, 1:i32
%7 = block 2
%8 = block 2
%9 = block 2
%10 = block 2
%11:i32 = var
%12 = phi %10, 6:i32, %11
%13:i32 = var
%14 = add %12, %13 (hasExternalUses)
%15 = add %14, -1:i32
%16 = block 2
%17 = block 2
%18 = block 2
%19 = block 2
%20:i32 = var
%21:i32 = var
%22 = phi %19, %20, %21
%23 = phi %18, %22, 0:i32
%24 = block 2
%25 = block 2
%26:i32 = var
%27:i32 = var
%28 = phi %25, %26, %27
%29 = phi %24, %23, %28
%30 = phi %17, %23, %29
%31 = phi %16, %30, %23
%32 = sub %15, %31 (hasExternalUses)
%33:i32 = var
%34 = phi %9, %32, %33
%35 = block 2
%36 = block 2
%37 = block 2
%38:i32 = var
%39 = phi %37, %38, 0:i32
%40 = phi %36, %34, %39
%41 = block 2
%42 = block 2
%43:i32 = var
%44 = phi %42, %43, 0:i32
%45 = phi %41, %34, %44
%46 = phi %35, %40, %45
%47 = phi %8, %34, %46
%48 = phi %7, %47, %12
%49 = add %6, %48
%50:i32 = var
%51:i32 = zext %50
%52 = add %49, %51
%53 = block 2
%54 = block 2
%55 = phi %54, %31, 0:i32
%56:i32 = var
%57 = phi %53, %55, %56
%58 = add %52, %57
%59:i32 = var
blockpc %0 0 %59 1:i1
%60:i32 = var
blockpc %0 1 %60 1:i1
%61:i32 = var
blockpc %7 0 %61 1:i1
%62:i32 = var
blockpc %7 1 %62 1:i1
%63:i32 = var
blockpc %8 0 %63 1:i1
%64:i32 = var
blockpc %8 1 %64 1:i1
%65:i32 = var
blockpc %9 0 %65 1:i1
%66:i32 = var
blockpc %9 1 %66 1:i1
%67:i32 = var
blockpc %10 0 %67 1:i1
%68:i32 = var
blockpc %10 1 %68 1:i1
%69:i32 = var
blockpc %16 0 %69 1:i1
%70:i32 = var
blockpc %16 1 %70 1:i1
%71:i32 = var
blockpc %17 0 %71 1:i1
%72:i32 = var
blockpc %17 1 %72 1:i1
%73:i32 = var
blockpc %18 0 %73 1:i1
%74:i32 = var
blockpc %18 1 %74 1:i1
%75:i32 = var
blockpc %19 0 %75 1:i1
%76:i32 = var
blockpc %19 1 %76 1:i1
%77:i32 = var
blockpc %24 0 %77 1:i1
%78:i32 = var
blockpc %24 1 %78 1:i1
%79:i32 = var
blockpc %25 0 %79 1:i1
%80:i32 = var
blockpc %25 1 %80 1:i1
%81:i32 = var
blockpc %35 0 %81 1:i1
%82:i32 = var
blockpc %35 1 %82 1:i1
%83:i32 = var
blockpc %36 0 %83 1:i1
%84:i32 = var
blockpc %36 1 %84 1:i1
%85:i32 = var
blockpc %37 0 %85 1:i1
%86:i32 = var
blockpc %37 1 %86 1:i1
%87:i32 = var
blockpc %41 0 %87 1:i1
%88:i32 = var
blockpc %41 1 %88 1:i1
%89:i32 = var
blockpc %42 0 %89 1:i1
%90:i32 = var
blockpc %42 1 %90 1:i1
%91:i32 = var
blockpc %53 0 %91 1:i1
%92:i32 = var
blockpc %53 1 %92 1:i1
%93:i32 = var
blockpc %54 0 %93 1:i1
%94:i32 = var
blockpc %54 1 %94 1:i1
%95:i32 = var
pc %95 1:i1
infer %58


; start LHS (in $27)
%0:i32 = var
%1 = xor %0, 65536:i32
%2:i64 = var
%3 = and %2, 9218868437227405312:i64
%4 = eq %3, 9218868437227405312:i64
%5:i32 = zext %4
%6 = eq %5, 0:i32
pc %6 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 524:i32 (hasExternalUses)
%2 = add %1, 9:i32
%3 = block 2
%4:i32 = var
%5 = or %4, 32:i32
%6 = eq %5, 103:i32
blockpc %3 0 %6 1:i1
%7:i32 = zext %6
%8 = eq %7, 0:i32
blockpc %3 1 %8 1:i1
%9 = block 2
%10 = block 2
%11:i32 = var
blockpc %10 0 %11 1:i1
%12:i32 = var
blockpc %10 1 %12 1:i1
%13 = block 2
%14:i32 = var
blockpc %13 0 %14 1:i1
%15:i32 = var
blockpc %13 1 %15 1:i1
%16 = block 2
%17:i32 = var
blockpc %16 0 %17 1:i1
%18:i32 = var
blockpc %16 1 %18 1:i1
%19 = block 2
%20:i32 = var
blockpc %19 0 %20 1:i1
%21:i32 = var
blockpc %19 1 %21 1:i1
%22:i32 = var
%23:i32 = var
%24 = phi %19, %22, %23
%25 = phi %16, %24, 0:i32
%26 = block 2
%27:i32 = var
blockpc %26 0 %27 1:i1
%28:i32 = var
blockpc %26 1 %28 1:i1
%29 = block 2
%30:i32 = var
blockpc %29 0 %30 1:i1
%31:i32 = var
blockpc %29 1 %31 1:i1
%32:i32 = var
%33:i32 = var
%34 = phi %29, %32, %33
%35 = phi %26, %25, %34
%36 = phi %13, %25, %35
%37 = phi %10, %36, %25
%38:i32 = var
%39 = slt %37, %38
%40:i32 = zext %39
%41:i32 = var
%42:i32 = zext %41
%43 = and %40, %42
%44 = ne %43, 0:i32
blockpc %9 0 %44 1:i1
%45:i32 = var
blockpc %9 1 %45 1:i1
%46:i32 = var
%47:i32 = var
%48 = phi %9, %46, %47
%49 = phi %3, %48, %4
%50 = or %49, 32:i32
%51 = eq %50, 102:i32
%52:i32 = var
pc %51 1:i1
pc %52 1:i1
infer %2


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 524:i32 (hasExternalUses)
%2 = add %1, 8:i32
%3 = block 2
%4:i32 = var
%5 = or %4, 32:i32
%6 = eq %5, 103:i32
blockpc %3 0 %6 1:i1
%7:i32 = zext %6
%8 = eq %7, 0:i32
blockpc %3 1 %8 1:i1
%9 = block 2
%10 = block 2
%11:i32 = var
blockpc %10 0 %11 1:i1
%12:i32 = var
blockpc %10 1 %12 1:i1
%13 = block 2
%14:i32 = var
blockpc %13 0 %14 1:i1
%15:i32 = var
blockpc %13 1 %15 1:i1
%16 = block 2
%17:i32 = var
blockpc %16 0 %17 1:i1
%18:i32 = var
blockpc %16 1 %18 1:i1
%19 = block 2
%20:i32 = var
blockpc %19 0 %20 1:i1
%21:i32 = var
blockpc %19 1 %21 1:i1
%22:i32 = var
%23:i32 = var
%24 = phi %19, %22, %23
%25 = phi %16, %24, 0:i32
%26 = block 2
%27:i32 = var
blockpc %26 0 %27 1:i1
%28:i32 = var
blockpc %26 1 %28 1:i1
%29 = block 2
%30:i32 = var
blockpc %29 0 %30 1:i1
%31:i32 = var
blockpc %29 1 %31 1:i1
%32:i32 = var
%33:i32 = var
%34 = phi %29, %32, %33
%35 = phi %26, %25, %34
%36 = phi %13, %25, %35
%37 = phi %10, %36, %25
%38:i32 = var
%39 = slt %37, %38
%40:i32 = zext %39
%41:i32 = var
%42:i32 = zext %41
%43 = and %40, %42
%44 = ne %43, 0:i32
blockpc %9 0 %44 1:i1
%45:i32 = var
blockpc %9 1 %45 1:i1
%46:i32 = var
%47:i32 = var
%48 = phi %9, %46, %47
%49 = phi %3, %48, %4
%50 = or %49, 32:i32
%51 = eq %50, 102:i32
%52:i32 = var
pc %51 1:i1
pc %52 1:i1
infer %2


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = add %1, 8:i32 (hasExternalUses)
%3 = add %2, 288:i32 (hasExternalUses)
%4 = phi %0, %2, %3
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9 = block 2
%10:i32 = var
%11 = add %10, 4:i32 (hasExternalUses)
%12 = phi %9, %10, %11
%13 = block 2
%14 = add %10, 4:i32 (hasExternalUses)
%15 = phi %13, %10, %14
%16 = phi %8, %12, %15
%17 = block 2
%18 = block 2
%19:i32 = var
%20 = block 2
%21 = add %19, -4:i32 (hasExternalUses)
%22 = phi %20, %19, %21
%23 = phi %18, %19, %22
%24 = phi %17, %23, %4
%25 = phi %7, %16, %24
%26 = block 2
%27 = block 2
%28 = block 2
%29:i32 = var
%30:i32 = var
%31 = phi %28, %29, %30
%32 = phi %27, %25, %31
%33 = phi %26, %25, %32
%34 = phi %6, %25, %33
%35 = phi %5, %34, %25
%36 = ult %4, %35
%37:i32 = var
blockpc %0 0 %37 1:i1
%38:i32 = var
blockpc %0 1 %38 1:i1
%39:i32 = var
blockpc %5 0 %39 1:i1
%40:i32 = var
blockpc %5 1 %40 1:i1
%41:i32 = var
blockpc %6 0 %41 1:i1
%42:i32 = var
blockpc %6 1 %42 1:i1
%43:i32 = var
blockpc %7 0 %43 1:i1
%44:i32 = var
blockpc %7 1 %44 1:i1
%45:i32 = var
blockpc %8 0 %45 1:i1
%46:i32 = var
blockpc %8 1 %46 1:i1
%47:i32 = var
blockpc %9 0 %47 1:i1
%48:i32 = var
blockpc %9 1 %48 1:i1
%49:i32 = var
blockpc %13 0 %49 1:i1
%50:i32 = var
blockpc %13 1 %50 1:i1
%51:i32 = var
blockpc %17 0 %51 1:i1
%52:i32 = var
blockpc %17 1 %52 1:i1
%53:i32 = var
blockpc %18 0 %53 1:i1
%54:i32 = var
blockpc %18 1 %54 1:i1
%55:i32 = var
blockpc %20 0 %55 1:i1
%56:i32 = var
blockpc %20 1 %56 1:i1
%57:i32 = var
blockpc %26 0 %57 1:i1
%58:i32 = var
blockpc %26 1 %58 1:i1
%59:i32 = var
blockpc %27 0 %59 1:i1
%60:i32 = var
blockpc %27 1 %60 1:i1
%61:i32 = var
blockpc %28 0 %61 1:i1
%62:i32 = var
blockpc %28 1 %62 1:i1
%63:i32 = var
%64:i32 = var
pc %63 1:i1
pc %64 1:i1
infer %36


; start LHS (in $27)
%0:i32 = var
%1 = block 2
%2 = block 2
%3:i32 = var
%4 = add %3, 8:i32 (hasExternalUses)
%5 = add %4, 288:i32 (hasExternalUses)
%6 = phi %2, %4, %5
%7 = block 2
%8 = block 2
%9 = block 2
%10 = block 2
%11 = block 2
%12:i32 = var
%13 = add %12, 4:i32 (hasExternalUses)
%14 = phi %11, %12, %13
%15 = block 2
%16 = add %12, 4:i32 (hasExternalUses)
%17 = phi %15, %12, %16
%18 = phi %10, %14, %17
%19 = block 2
%20 = block 2
%21:i32 = var
%22 = block 2
%23 = add %21, -4:i32 (hasExternalUses)
%24 = phi %22, %21, %23
%25 = phi %20, %21, %24
%26 = phi %19, %25, %6
%27 = phi %9, %18, %26
%28 = block 2
%29 = block 2
%30 = block 2
%31:i32 = var
%32:i32 = var
%33 = phi %30, %31, %32
%34 = phi %29, %27, %33
%35 = phi %28, %27, %34
%36 = phi %8, %27, %35
%37 = phi %7, %36, %27
%38 = phi %1, %6, %37
%39 = eq %0, %38
%40:i32 = var
blockpc %1 0 %40 1:i1
%41:i32 = var
blockpc %1 1 %41 1:i1
%42:i32 = var
blockpc %2 0 %42 1:i1
%43:i32 = var
blockpc %2 1 %43 1:i1
%44:i32 = var
blockpc %7 0 %44 1:i1
%45:i32 = var
blockpc %7 1 %45 1:i1
%46:i32 = var
blockpc %8 0 %46 1:i1
%47:i32 = var
blockpc %8 1 %47 1:i1
%48:i32 = var
blockpc %9 0 %48 1:i1
%49:i32 = var
blockpc %9 1 %49 1:i1
%50:i32 = var
blockpc %10 0 %50 1:i1
%51:i32 = var
blockpc %10 1 %51 1:i1
%52:i32 = var
blockpc %11 0 %52 1:i1
%53:i32 = var
blockpc %11 1 %53 1:i1
%54:i32 = var
blockpc %15 0 %54 1:i1
%55:i32 = var
blockpc %15 1 %55 1:i1
%56:i32 = var
blockpc %19 0 %56 1:i1
%57:i32 = var
blockpc %19 1 %57 1:i1
%58:i32 = var
blockpc %20 0 %58 1:i1
%59:i32 = var
blockpc %20 1 %59 1:i1
%60:i32 = var
blockpc %22 0 %60 1:i1
%61:i32 = var
blockpc %22 1 %61 1:i1
%62:i32 = var
blockpc %28 0 %62 1:i1
%63:i32 = var
blockpc %28 1 %63 1:i1
%64:i32 = var
blockpc %29 0 %64 1:i1
%65:i32 = var
blockpc %29 1 %65 1:i1
%66:i32 = var
blockpc %30 0 %66 1:i1
%67:i32 = var
blockpc %30 1 %67 1:i1
%68:i32 = var
%69:i32 = var
pc %68 1:i1
pc %69 1:i1
infer %39


; start LHS (in $27)
%0:i32 = var
%1:i32 = var
%2 = add %1, 524:i32 (hasExternalUses)
%3 = add %2, 9:i32 (hasExternalUses)
%4 = eq %0, %3
%5:i32 = var
%6 = block 2
%7 = block 2
%8 = block 2
%9:i32 = var
blockpc %8 0 %9 1:i1
%10:i32 = var
blockpc %8 1 %10 1:i1
%11:i32 = var
%12 = add %11, -28:i32
%13:i32 = var
%14 = phi %8, %12, %13
%15 = slt %14, 0:i32
blockpc %7 0 %15 1:i1
%16:i32 = zext %15
%17 = eq %16, 0:i32
blockpc %7 1 %17 1:i1
%18 = add %1, 8:i32
%19 = add %18, 288:i32
%20 = phi %7, %18, %19
%21 = block 2
%22 = block 2
%23:i32 = var
blockpc %22 0 %23 1:i1
%24:i32 = var
blockpc %22 1 %24 1:i1
%25:i32 = var
%26 = phi %22, 6:i32, %25
%27 = block 2
%28:i32 = var
blockpc %27 0 %28 1:i1
%29:i32 = var
blockpc %27 1 %29 1:i1
%30 = block 2
%31:i32 = var
blockpc %30 0 %31 1:i1
%32:i32 = var
blockpc %30 1 %32 1:i1
%33 = block 2
%34:i32 = var
blockpc %33 0 %34 1:i1
%35:i32 = var
blockpc %33 1 %35 1:i1
%36:i32 = var
%37:i32 = var
%38 = phi %33, %36, %37
%39 = phi %30, %38, 0:i32
%40 = phi %27, %39, 0:i32
%41 = sub %26, %40
%42:i32 = var
%43 = add %41, %42
%44:i32 = var
%45 = slt %43, %44
blockpc %21 0 %45 1:i1
%46:i32 = var
blockpc %21 1 %46 1:i1
%47 = block 2
%48:i32 = var
blockpc %47 0 %48 1:i1
%49:i32 = var
blockpc %47 1 %49 1:i1
%50 = block 2
%51:i32 = var
blockpc %50 0 %51 1:i1
%52:i32 = var
blockpc %50 1 %52 1:i1
%53 = block 2
%54:i32 = var
blockpc %53 0 %54 1:i1
%55:i32 = var
blockpc %53 1 %55 1:i1
%56 = block 2
%57:i32 = var
blockpc %56 0 %57 1:i1
%58:i32 = var
blockpc %56 1 %58 1:i1
%59:i32 = var
%60:i32 = var
%61 = phi %56, %59, %60
%62 = block 2
%63:i32 = var
blockpc %62 0 %63 1:i1
%64:i32 = var
blockpc %62 1 %64 1:i1
%65:i32 = var
%66 = phi %62, %59, %65
%67 = phi %53, %61, %66
%68 = block 2
%69:i32 = var
blockpc %68 0 %69 1:i1
%70:i32 = var
blockpc %68 1 %70 1:i1
%71 = block 2
%72:i32 = var
blockpc %71 0 %72 1:i1
%73:i32 = var
blockpc %71 1 %73 1:i1
%74:i32 = var
%75 = block 2
%76:i32 = var
blockpc %75 0 %76 1:i1
%77:i32 = var
blockpc %75 1 %77 1:i1
%78:i32 = var
%79 = phi %75, %74, %78
%80 = phi %71, %74, %79
%81 = phi %68, %80, %20
%82 = phi %50, %67, %81
%83 = block 2
%84:i32 = var
blockpc %83 0 %84 1:i1
%85:i32 = var
blockpc %83 1 %85 1:i1
%86 = block 2
%87:i32 = var
blockpc %86 0 %87 1:i1
%88:i32 = var
blockpc %86 1 %88 1:i1
%89 = block 2
%90:i32 = var
blockpc %89 0 %90 1:i1
%91:i32 = var
blockpc %89 1 %91 1:i1
%92:i32 = var
%93:i32 = var
%94 = phi %89, %92, %93
%95 = phi %86, %82, %94
%96 = phi %83, %82, %95
%97 = phi %47, %82, %96
%98 = phi %21, %97, %82
%99 = ult %20, %98
blockpc %6 0 %99 1:i1
%100:i32 = var
blockpc %6 1 %100 1:i1
%101 = phi %6, %20, %98
%102 = eq %5, %101
%103:i32 = var
%104:i32 = var
pc %102 1:i1
pc %103 1:i1
pc %104 1:i1
infer %4


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 524:i32 (hasExternalUses)
%2:i32 = var
%3 = ult %1, %2
%4:i32 = var
%5 = block 2
%6 = block 2
%7 = block 2
%8:i32 = var
blockpc %7 0 %8 1:i1
%9:i32 = var
blockpc %7 1 %9 1:i1
%10:i32 = var
%11:i32 = var
%12 = phi %7, %10, %11
%13 = slt %12, 0:i32
blockpc %6 0 %13 1:i1
%14:i32 = zext %13
%15 = eq %14, 0:i32
blockpc %6 1 %15 1:i1
%16 = add %0, 8:i32
%17 = add %16, 288:i32
%18 = phi %6, %16, %17
%19 = block 2
%20:i32 = var
%21:i32 = var
%22 = slt %20, %21
blockpc %19 0 %22 1:i1
%23:i32 = zext %22
%24 = eq %23, 0:i32
blockpc %19 1 %24 1:i1
%25 = block 2
%26:i32 = var
blockpc %25 0 %26 1:i1
%27:i32 = var
blockpc %25 1 %27 1:i1
%28 = block 2
%29:i32 = var
blockpc %28 0 %29 1:i1
%30:i32 = var
blockpc %28 1 %30 1:i1
%31 = block 2
%32:i32 = var
blockpc %31 0 %32 1:i1
%33:i32 = var
blockpc %31 1 %33 1:i1
%34 = block 2
%35:i32 = var
blockpc %34 0 %35 1:i1
%36:i32 = var
blockpc %34 1 %36 1:i1
%37:i32 = var
%38:i32 = var
%39 = phi %34, %37, %38
%40 = block 2
%41:i32 = var
blockpc %40 0 %41 1:i1
%42:i32 = var
blockpc %40 1 %42 1:i1
%43:i32 = var
%44 = phi %40, %37, %43
%45 = phi %31, %39, %44
%46 = block 2
%47:i32 = var
blockpc %46 0 %47 1:i1
%48:i32 = var
blockpc %46 1 %48 1:i1
%49 = block 2
%50:i32 = var
blockpc %49 0 %50 1:i1
%51:i32 = var
blockpc %49 1 %51 1:i1
%52:i32 = var
%53 = block 2
%54:i32 = var
blockpc %53 0 %54 1:i1
%55:i32 = var
blockpc %53 1 %55 1:i1
%56:i32 = var
%57 = phi %53, %52, %56
%58 = phi %49, %52, %57
%59 = phi %46, %58, %18
%60 = phi %28, %45, %59
%61 = block 2
%62:i32 = var
blockpc %61 0 %62 1:i1
%63:i32 = var
blockpc %61 1 %63 1:i1
%64 = block 2
%65:i32 = var
blockpc %64 0 %65 1:i1
%66:i32 = var
blockpc %64 1 %66 1:i1
%67 = block 2
%68:i32 = var
blockpc %67 0 %68 1:i1
%69:i32 = var
blockpc %67 1 %69 1:i1
%70:i32 = var
%71:i32 = var
%72 = phi %67, %70, %71
%73 = phi %64, %60, %72
%74 = phi %61, %60, %73
%75 = phi %25, %60, %74
%76 = phi %19, %75, %60
%77 = ult %18, %76
blockpc %5 0 %77 1:i1
%78:i32 = var
blockpc %5 1 %78 1:i1
%79 = phi %5, %18, %76
%80 = eq %4, %79
%81:i32 = zext %80
%82 = eq %81, 0:i32
%83:i32 = var
%84:i32 = var
pc %82 1:i1
pc %83 1:i1
pc %84 1:i1
infer %3


; start LHS (in $27)
%0:i32 = var
%1:i32 = var
%2 = add %1, 524:i32 (hasExternalUses)
%3 = sub %0, %2
%4 = ult %2, %0
%5:i32 = var
%6 = block 2
%7 = block 2
%8 = block 2
%9:i32 = var
blockpc %8 0 %9 1:i1
%10:i32 = var
blockpc %8 1 %10 1:i1
%11:i32 = var
%12:i32 = var
%13 = phi %8, %11, %12
%14 = slt %13, 0:i32
blockpc %7 0 %14 1:i1
%15:i32 = zext %14
%16 = eq %15, 0:i32
blockpc %7 1 %16 1:i1
%17 = add %1, 8:i32
%18 = add %17, 288:i32
%19 = phi %7, %17, %18
%20 = block 2
%21:i32 = var
%22:i32 = var
%23 = slt %21, %22
blockpc %20 0 %23 1:i1
%24:i32 = zext %23
%25 = eq %24, 0:i32
blockpc %20 1 %25 1:i1
%26 = block 2
%27:i32 = var
blockpc %26 0 %27 1:i1
%28:i32 = var
blockpc %26 1 %28 1:i1
%29 = block 2
%30:i32 = var
blockpc %29 0 %30 1:i1
%31:i32 = var
blockpc %29 1 %31 1:i1
%32 = block 2
%33:i32 = var
blockpc %32 0 %33 1:i1
%34:i32 = var
blockpc %32 1 %34 1:i1
%35 = block 2
%36:i32 = var
blockpc %35 0 %36 1:i1
%37:i32 = var
blockpc %35 1 %37 1:i1
%38:i32 = var
%39:i32 = var
%40 = phi %35, %38, %39
%41 = block 2
%42:i32 = var
blockpc %41 0 %42 1:i1
%43:i32 = var
blockpc %41 1 %43 1:i1
%44:i32 = var
%45 = phi %41, %38, %44
%46 = phi %32, %40, %45
%47 = block 2
%48:i32 = var
blockpc %47 0 %48 1:i1
%49:i32 = var
blockpc %47 1 %49 1:i1
%50 = block 2
%51:i32 = var
blockpc %50 0 %51 1:i1
%52:i32 = var
blockpc %50 1 %52 1:i1
%53:i32 = var
%54 = block 2
%55:i32 = var
blockpc %54 0 %55 1:i1
%56:i32 = var
blockpc %54 1 %56 1:i1
%57:i32 = var
%58 = phi %54, %53, %57
%59 = phi %50, %53, %58
%60 = phi %47, %59, %19
%61 = phi %29, %46, %60
%62 = block 2
%63:i32 = var
blockpc %62 0 %63 1:i1
%64:i32 = var
blockpc %62 1 %64 1:i1
%65 = block 2
%66:i32 = var
blockpc %65 0 %66 1:i1
%67:i32 = var
blockpc %65 1 %67 1:i1
%68 = block 2
%69:i32 = var
blockpc %68 0 %69 1:i1
%70:i32 = var
blockpc %68 1 %70 1:i1
%71:i32 = var
%72:i32 = var
%73 = phi %68, %71, %72
%74 = phi %65, %61, %73
%75 = phi %62, %61, %74
%76 = phi %26, %61, %75
%77 = phi %20, %76, %61
%78 = ult %19, %77
blockpc %6 0 %78 1:i1
%79:i32 = var
blockpc %6 1 %79 1:i1
%80 = phi %6, %19, %77
%81 = eq %5, %80
%82:i32 = zext %81
%83 = eq %82, 0:i32
%84:i32 = var
%85:i32 = var
pc %4 1:i1
pc %83 1:i1
pc %84 1:i1
pc %85 1:i1
infer %3


; start LHS (in $27)
%0:i32 = var
%1 = add %0, -1:i32
%2:i32 = var
%3 = add %2, 524:i32
%4:i32 = var
%5 = ult %3, %4
%6:i32 = var
%7 = block 2
%8 = block 2
%9 = block 2
%10:i32 = var
blockpc %9 0 %10 1:i1
%11:i32 = var
blockpc %9 1 %11 1:i1
%12:i32 = var
%13:i32 = var
%14 = phi %9, %12, %13
%15 = slt %14, 0:i32
blockpc %8 0 %15 1:i1
%16:i32 = zext %15
%17 = eq %16, 0:i32
blockpc %8 1 %17 1:i1
%18 = add %2, 8:i32
%19 = add %18, 288:i32
%20 = phi %8, %18, %19
%21 = block 2
%22:i32 = var
%23:i32 = var
%24 = slt %22, %23
blockpc %21 0 %24 1:i1
%25:i32 = var
blockpc %21 1 %25 1:i1
%26 = block 2
%27:i32 = var
blockpc %26 0 %27 1:i1
%28:i32 = var
blockpc %26 1 %28 1:i1
%29 = block 2
%30:i32 = var
blockpc %29 0 %30 1:i1
%31:i32 = var
blockpc %29 1 %31 1:i1
%32 = block 2
%33:i32 = var
blockpc %32 0 %33 1:i1
%34:i32 = var
blockpc %32 1 %34 1:i1
%35 = block 2
%36:i32 = var
blockpc %35 0 %36 1:i1
%37:i32 = var
blockpc %35 1 %37 1:i1
%38:i32 = var
%39:i32 = var
%40 = phi %35, %38, %39
%41 = block 2
%42:i32 = var
blockpc %41 0 %42 1:i1
%43:i32 = var
blockpc %41 1 %43 1:i1
%44:i32 = var
%45 = phi %41, %38, %44
%46 = phi %32, %40, %45
%47 = block 2
%48:i32 = var
blockpc %47 0 %48 1:i1
%49:i32 = var
blockpc %47 1 %49 1:i1
%50 = block 2
%51:i32 = var
blockpc %50 0 %51 1:i1
%52:i32 = var
blockpc %50 1 %52 1:i1
%53:i32 = var
%54 = block 2
%55:i32 = var
blockpc %54 0 %55 1:i1
%56:i32 = var
blockpc %54 1 %56 1:i1
%57:i32 = var
%58 = phi %54, %53, %57
%59 = phi %50, %53, %58
%60 = phi %47, %59, %20
%61 = phi %29, %46, %60
%62 = block 2
%63:i32 = var
blockpc %62 0 %63 1:i1
%64:i32 = var
blockpc %62 1 %64 1:i1
%65 = block 2
%66:i32 = var
blockpc %65 0 %66 1:i1
%67:i32 = var
blockpc %65 1 %67 1:i1
%68 = block 2
%69:i32 = var
blockpc %68 0 %69 1:i1
%70:i32 = var
blockpc %68 1 %70 1:i1
%71:i32 = var
%72:i32 = var
%73 = phi %68, %71, %72
%74 = phi %65, %61, %73
%75 = phi %62, %61, %74
%76 = phi %26, %61, %75
%77 = phi %21, %76, %61
%78 = ult %20, %77
blockpc %7 0 %78 1:i1
%79:i32 = var
blockpc %7 1 %79 1:i1
%80 = phi %7, %20, %77
%81 = eq %6, %80
%82:i32 = zext %81
%83 = eq %82, 0:i32
%84:i32 = var
%85:i32 = var
pc %5 1:i1
pc %83 1:i1
pc %84 1:i1
pc %85 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 524:i32 (hasExternalUses)
%2:i32 = var
%3 = add %2, -1:i32 (hasExternalUses)
%4 = ult %1, %3
%5:i32 = var
%6 = ult %1, %5
%7:i32 = var
%8 = block 2
%9 = block 2
%10 = block 2
%11:i32 = var
blockpc %10 0 %11 1:i1
%12:i32 = var
blockpc %10 1 %12 1:i1
%13:i32 = var
%14:i32 = var
%15 = phi %10, %13, %14
%16 = slt %15, 0:i32
blockpc %9 0 %16 1:i1
%17:i32 = zext %16
%18 = eq %17, 0:i32
blockpc %9 1 %18 1:i1
%19 = add %0, 8:i32
%20 = add %19, 288:i32
%21 = phi %9, %19, %20
%22 = block 2
%23:i32 = var
%24:i32 = var
%25 = slt %23, %24
blockpc %22 0 %25 1:i1
%26:i32 = var
blockpc %22 1 %26 1:i1
%27 = block 2
%28:i32 = var
blockpc %27 0 %28 1:i1
%29:i32 = var
blockpc %27 1 %29 1:i1
%30 = block 2
%31:i32 = var
blockpc %30 0 %31 1:i1
%32:i32 = var
blockpc %30 1 %32 1:i1
%33 = block 2
%34:i32 = var
blockpc %33 0 %34 1:i1
%35:i32 = var
blockpc %33 1 %35 1:i1
%36 = block 2
%37:i32 = var
blockpc %36 0 %37 1:i1
%38:i32 = var
blockpc %36 1 %38 1:i1
%39:i32 = var
%40:i32 = var
%41 = phi %36, %39, %40
%42 = block 2
%43:i32 = var
blockpc %42 0 %43 1:i1
%44:i32 = var
blockpc %42 1 %44 1:i1
%45:i32 = var
%46 = phi %42, %39, %45
%47 = phi %33, %41, %46
%48 = block 2
%49:i32 = var
blockpc %48 0 %49 1:i1
%50:i32 = var
blockpc %48 1 %50 1:i1
%51 = block 2
%52:i32 = var
blockpc %51 0 %52 1:i1
%53:i32 = var
blockpc %51 1 %53 1:i1
%54:i32 = var
%55 = block 2
%56:i32 = var
blockpc %55 0 %56 1:i1
%57:i32 = var
blockpc %55 1 %57 1:i1
%58:i32 = var
%59 = phi %55, %54, %58
%60 = phi %51, %54, %59
%61 = phi %48, %60, %21
%62 = phi %30, %47, %61
%63 = block 2
%64:i32 = var
blockpc %63 0 %64 1:i1
%65:i32 = var
blockpc %63 1 %65 1:i1
%66 = block 2
%67:i32 = var
blockpc %66 0 %67 1:i1
%68:i32 = var
blockpc %66 1 %68 1:i1
%69 = block 2
%70:i32 = var
blockpc %69 0 %70 1:i1
%71:i32 = var
blockpc %69 1 %71 1:i1
%72:i32 = var
%73:i32 = var
%74 = phi %69, %72, %73
%75 = phi %66, %62, %74
%76 = phi %63, %62, %75
%77 = phi %27, %62, %76
%78 = phi %22, %77, %62
%79 = ult %21, %78
blockpc %8 0 %79 1:i1
%80:i32 = var
blockpc %8 1 %80 1:i1
%81 = phi %8, %21, %78
%82 = eq %7, %81
%83:i32 = zext %82
%84 = eq %83, 0:i32
%85:i32 = var
%86:i32 = var
pc %6 1:i1
pc %84 1:i1
pc %85 1:i1
pc %86 1:i1
infer %4


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 524:i32 (hasExternalUses)
%2 = add %1, 9:i32 (hasExternalUses)
%3 = block 2
%4 = block 2
%5:i32 = var
%6 = add %1, 8:i32 (hasExternalUses)
%7 = phi %4, %5, %6
%8 = block 2
%9:i32 = var
%10 = add %9, -1:i32 (hasExternalUses)
%11 = phi %8, %5, %10
%12 = phi %3, %7, %11
%13 = sub %2, %12
%14:i32 = var
%15 = block 2
%16 = block 2
%17 = block 2
%18:i32 = var
blockpc %17 0 %18 1:i1
%19:i32 = var
blockpc %17 1 %19 1:i1
%20:i32 = var
%21:i32 = var
%22 = phi %17, %20, %21
%23 = slt %22, 0:i32
blockpc %16 0 %23 1:i1
%24:i32 = zext %23
%25 = eq %24, 0:i32
blockpc %16 1 %25 1:i1
%26:i32 = var
%27:i32 = var
%28 = phi %16, %26, %27
%29 = block 2
%30:i32 = var
blockpc %29 0 %30 1:i1
%31:i32 = var
blockpc %29 1 %31 1:i1
%32 = block 2
%33:i32 = var
blockpc %32 0 %33 1:i1
%34:i32 = var
blockpc %32 1 %34 1:i1
%35 = block 2
%36:i32 = var
blockpc %35 0 %36 1:i1
%37:i32 = var
blockpc %35 1 %37 1:i1
%38 = block 2
%39:i32 = var
blockpc %38 0 %39 1:i1
%40:i32 = var
blockpc %38 1 %40 1:i1
%41 = block 2
%42:i32 = var
blockpc %41 0 %42 1:i1
%43:i32 = var
blockpc %41 1 %43 1:i1
%44:i32 = var
%45:i32 = var
%46 = phi %41, %44, %45
%47 = block 2
%48:i32 = var
blockpc %47 0 %48 1:i1
%49:i32 = var
blockpc %47 1 %49 1:i1
%50:i32 = var
%51 = phi %47, %44, %50
%52 = phi %38, %46, %51
%53 = block 2
%54:i32 = var
blockpc %53 0 %54 1:i1
%55:i32 = var
blockpc %53 1 %55 1:i1
%56 = block 2
%57:i32 = var
blockpc %56 0 %57 1:i1
%58:i32 = var
blockpc %56 1 %58 1:i1
%59:i32 = var
%60 = block 2
%61:i32 = var
blockpc %60 0 %61 1:i1
%62:i32 = var
blockpc %60 1 %62 1:i1
%63:i32 = var
%64 = phi %60, %59, %63
%65 = phi %56, %59, %64
%66 = phi %53, %65, %28
%67 = phi %35, %52, %66
%68 = block 2
%69:i32 = var
blockpc %68 0 %69 1:i1
%70:i32 = var
blockpc %68 1 %70 1:i1
%71 = block 2
%72:i32 = var
blockpc %71 0 %72 1:i1
%73:i32 = var
blockpc %71 1 %73 1:i1
%74 = block 2
%75:i32 = var
blockpc %74 0 %75 1:i1
%76:i32 = var
blockpc %74 1 %76 1:i1
%77:i32 = var
%78:i32 = var
%79 = phi %74, %77, %78
%80 = phi %71, %67, %79
%81 = phi %68, %67, %80
%82 = phi %32, %67, %81
%83 = phi %29, %82, %67
%84 = ult %28, %83
blockpc %15 0 %84 1:i1
%85:i32 = var
blockpc %15 1 %85 1:i1
%86 = phi %15, %28, %83
%87 = eq %14, %86
blockpc %3 0 %87 1:i1
%88:i32 = var
blockpc %3 1 %88 1:i1
%89:i32 = var
blockpc %4 0 %89 1:i1
%90:i32 = var
blockpc %4 1 %90 1:i1
%91:i32 = var
blockpc %8 0 %91 1:i1
%92:i32 = var
blockpc %8 1 %92 1:i1
%93:i32 = var
%94:i32 = var
pc %93 1:i1
pc %94 1:i1
infer %13


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 4:i32
%2 = block 2
%3:i32 = var
%4 = or %3, 32:i32
%5 = eq %4, 103:i32
blockpc %2 0 %5 1:i1
%6:i32 = zext %5
%7 = eq %6, 0:i32
blockpc %2 1 %7 1:i1
%8 = block 2
%9 = block 2
%10:i32 = var
blockpc %9 0 %10 1:i1
%11:i32 = var
blockpc %9 1 %11 1:i1
%12 = block 2
%13:i32 = var
blockpc %12 0 %13 1:i1
%14:i32 = var
blockpc %12 1 %14 1:i1
%15 = block 2
%16:i32 = var
blockpc %15 0 %16 1:i1
%17:i32 = var
blockpc %15 1 %17 1:i1
%18 = block 2
%19:i32 = var
blockpc %18 0 %19 1:i1
%20:i32 = var
blockpc %18 1 %20 1:i1
%21:i32 = var
%22:i32 = var
%23 = phi %18, %21, %22
%24 = phi %15, %23, 0:i32
%25 = block 2
%26:i32 = var
blockpc %25 0 %26 1:i1
%27:i32 = var
blockpc %25 1 %27 1:i1
%28 = block 2
%29:i32 = var
blockpc %28 0 %29 1:i1
%30:i32 = var
blockpc %28 1 %30 1:i1
%31:i32 = var
%32:i32 = var
%33 = phi %28, %31, %32
%34 = phi %25, %24, %33
%35 = phi %12, %24, %34
%36 = phi %9, %35, %24
%37:i32 = var
%38 = slt %36, %37
%39:i32 = zext %38
%40:i32 = var
%41:i32 = zext %40
%42 = and %39, %41
%43 = ne %42, 0:i32
blockpc %8 0 %43 1:i1
%44:i32 = var
blockpc %8 1 %44 1:i1
%45:i32 = var
%46:i32 = var
%47 = phi %8, %45, %46
%48 = phi %2, %47, %3
%49 = or %48, 32:i32
%50 = eq %49, 102:i32
%51:i32 = var
pc %50 1:i1
pc %51 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 4:i32 (hasExternalUses)
%2 = block 2
%3:i32 = var
%4 = add %3, 8:i32 (hasExternalUses)
%5 = add %4, 288:i32 (hasExternalUses)
%6 = phi %2, %4, %5
%7 = ule %1, %6
%8 = block 2
%9:i32 = var
%10 = ne %9, 0:i32
blockpc %8 0 %10 1:i1
%11 = eq %9, 0:i32
blockpc %8 1 %11 1:i1
%12:i32 = var
%13 = add %12, -28:i32
%14:i32 = var
%15 = phi %8, %13, %14
%16 = slt %15, 0:i32
blockpc %2 0 %16 1:i1
%17:i32 = zext %16
%18 = eq %17, 0:i32
blockpc %2 1 %18 1:i1
%19 = block 2
%20:i32 = var
%21 = or %20, 32:i32
%22 = eq %21, 103:i32
blockpc %19 0 %22 1:i1
%23:i32 = zext %22
%24 = eq %23, 0:i32
blockpc %19 1 %24 1:i1
%25 = block 2
%26:i32 = var
blockpc %25 0 %26 1:i1
%27:i32 = var
blockpc %25 1 %27 1:i1
%28:i32 = var
%29:i32 = var
%30 = phi %25, %28, %29
%31 = phi %19, %30, %20
%32 = or %31, 32:i32
%33 = eq %32, 102:i32
%34:i32 = var
pc %33 1:i1
pc %34 1:i1
infer %7


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 4:i32 (hasExternalUses)
%2:i32 = var
%3 = ult %1, %2
%4 = block 2
%5:i32 = var
%6 = or %5, 32:i32
%7 = eq %6, 103:i32
blockpc %4 0 %7 1:i1
%8:i32 = zext %7
%9 = eq %8, 0:i32
blockpc %4 1 %9 1:i1
%10 = block 2
%11 = block 2
%12:i32 = var
blockpc %11 0 %12 1:i1
%13:i32 = var
blockpc %11 1 %13 1:i1
%14 = block 2
%15:i32 = var
blockpc %14 0 %15 1:i1
%16:i32 = var
blockpc %14 1 %16 1:i1
%17 = block 2
%18:i32 = var
blockpc %17 0 %18 1:i1
%19:i32 = var
blockpc %17 1 %19 1:i1
%20 = block 2
%21:i32 = var
blockpc %20 0 %21 1:i1
%22:i32 = var
blockpc %20 1 %22 1:i1
%23:i32 = var
%24:i32 = var
%25 = phi %20, %23, %24
%26 = phi %17, %25, 0:i32
%27 = block 2
%28:i32 = var
blockpc %27 0 %28 1:i1
%29:i32 = var
blockpc %27 1 %29 1:i1
%30 = block 2
%31:i32 = var
blockpc %30 0 %31 1:i1
%32:i32 = var
blockpc %30 1 %32 1:i1
%33:i32 = var
%34:i32 = var
%35 = phi %30, %33, %34
%36 = phi %27, %26, %35
%37 = phi %14, %26, %36
%38 = phi %11, %37, %26
%39:i32 = var
%40 = slt %38, %39
%41:i32 = zext %40
%42:i32 = var
%43:i32 = zext %42
%44 = and %41, %43
%45 = ne %44, 0:i32
blockpc %10 0 %45 1:i1
%46:i32 = var
blockpc %10 1 %46 1:i1
%47:i32 = var
%48:i32 = var
%49 = phi %10, %47, %48
%50 = phi %4, %49, %5
%51 = or %50, 32:i32
%52 = eq %51, 102:i32
%53:i32 = var
pc %52 1:i1
pc %53 1:i1
infer %3


; start LHS (in $27)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4:i32 = var
%5 = phi %3, 6:i32, %4
%6:i32 = var
%7:i32 = zext %6
%8 = xor %7, 1:i32
%9 = and %8, 1:i32
%10 = add %5, %9 (hasExternalUses)
%11 = add %10, -1:i32
%12 = block 2
%13 = block 2
%14 = block 2
%15 = block 2
%16:i32 = var
%17:i32 = var
%18 = phi %15, %16, %17
%19 = phi %14, %18, 0:i32
%20 = block 2
%21 = block 2
%22:i32 = var
%23:i32 = var
%24 = phi %21, %22, %23
%25 = phi %20, %19, %24
%26 = phi %13, %19, %25
%27 = phi %12, %26, %19
%28 = sub %11, %27 (hasExternalUses)
%29 = add %10, -1:i32 (hasExternalUses)
%30 = phi %2, %28, %29
%31 = block 2
%32 = block 2
%33 = block 2
%34:i32 = var
%35 = phi %33, %34, 0:i32
%36 = phi %32, %30, %35
%37 = block 2
%38 = block 2
%39:i32 = var
%40 = phi %38, %39, 0:i32
%41 = phi %37, %30, %40
%42 = phi %31, %36, %41
%43 = phi %1, %30, %42
%44 = phi %0, %43, %5
%45 = slt 0:i32, %44
%46:i32 = var
blockpc %0 0 %46 1:i1
%47:i32 = var
blockpc %0 1 %47 1:i1
%48:i32 = var
blockpc %1 0 %48 1:i1
%49:i32 = var
blockpc %1 1 %49 1:i1
%50:i32 = var
blockpc %2 0 %50 1:i1
%51:i32 = var
blockpc %2 1 %51 1:i1
%52:i32 = var
blockpc %3 0 %52 1:i1
%53:i32 = var
blockpc %3 1 %53 1:i1
%54:i32 = var
blockpc %12 0 %54 1:i1
%55:i32 = var
blockpc %12 1 %55 1:i1
%56:i32 = var
blockpc %13 0 %56 1:i1
%57:i32 = var
blockpc %13 1 %57 1:i1
%58:i32 = var
blockpc %14 0 %58 1:i1
%59:i32 = var
blockpc %14 1 %59 1:i1
%60:i32 = var
blockpc %15 0 %60 1:i1
%61:i32 = var
blockpc %15 1 %61 1:i1
%62:i32 = var
blockpc %20 0 %62 1:i1
%63:i32 = var
blockpc %20 1 %63 1:i1
%64:i32 = var
blockpc %21 0 %64 1:i1
%65:i32 = var
blockpc %21 1 %65 1:i1
%66:i32 = var
blockpc %31 0 %66 1:i1
%67:i32 = var
blockpc %31 1 %67 1:i1
%68:i32 = var
blockpc %32 0 %68 1:i1
%69:i32 = var
blockpc %32 1 %69 1:i1
%70:i32 = var
blockpc %33 0 %70 1:i1
%71:i32 = var
blockpc %33 1 %71 1:i1
%72:i32 = var
blockpc %37 0 %72 1:i1
%73:i32 = var
blockpc %37 1 %73 1:i1
%74:i32 = var
blockpc %38 0 %74 1:i1
%75:i32 = var
blockpc %38 1 %75 1:i1
%76:i32 = var
%77:i32 = var
pc %76 1:i1
pc %77 1:i1
infer %45


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 4:i32 (hasExternalUses)
%2:i32 = var
%3 = ult %1, %2
%4:i32 = zext %3
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i32 = var
%10 = phi %8, 6:i32, %9
%11:i32 = var
%12 = add %10, %11 (hasExternalUses)
%13 = add %12, -1:i32
%14 = block 2
%15 = block 2
%16 = block 2
%17 = block 2
%18:i32 = var
%19:i32 = var
%20 = phi %17, %18, %19
%21 = phi %16, %20, 0:i32
%22 = block 2
%23 = block 2
%24:i32 = var
%25:i32 = var
%26 = phi %23, %24, %25
%27 = phi %22, %21, %26
%28 = phi %15, %21, %27
%29 = phi %14, %28, %21
%30 = sub %13, %29 (hasExternalUses)
%31:i32 = var
%32 = phi %7, %30, %31
%33 = block 2
%34 = block 2
%35 = block 2
%36:i32 = var
%37 = phi %35, %36, 0:i32
%38 = phi %34, %32, %37
%39 = block 2
%40 = block 2
%41:i32 = var
%42 = phi %40, %41, 0:i32
%43 = phi %39, %32, %42
%44 = phi %33, %38, %43
%45 = phi %6, %32, %44
%46 = phi %5, %45, %10
%47 = slt 0:i32, %46
%48:i32 = zext %47
%49 = and %4, %48
%50:i32 = var
blockpc %5 0 %50 1:i1
%51:i32 = var
blockpc %5 1 %51 1:i1
%52:i32 = var
blockpc %6 0 %52 1:i1
%53:i32 = var
blockpc %6 1 %53 1:i1
%54:i32 = var
blockpc %7 0 %54 1:i1
%55:i32 = var
blockpc %7 1 %55 1:i1
%56:i32 = var
blockpc %8 0 %56 1:i1
%57:i32 = var
blockpc %8 1 %57 1:i1
%58:i32 = var
blockpc %14 0 %58 1:i1
%59:i32 = var
blockpc %14 1 %59 1:i1
%60:i32 = var
blockpc %15 0 %60 1:i1
%61:i32 = var
blockpc %15 1 %61 1:i1
%62:i32 = var
blockpc %16 0 %62 1:i1
%63:i32 = var
blockpc %16 1 %63 1:i1
%64:i32 = var
blockpc %17 0 %64 1:i1
%65:i32 = var
blockpc %17 1 %65 1:i1
%66:i32 = var
blockpc %22 0 %66 1:i1
%67:i32 = var
blockpc %22 1 %67 1:i1
%68:i32 = var
blockpc %23 0 %68 1:i1
%69:i32 = var
blockpc %23 1 %69 1:i1
%70:i32 = var
blockpc %33 0 %70 1:i1
%71:i32 = var
blockpc %33 1 %71 1:i1
%72:i32 = var
blockpc %34 0 %72 1:i1
%73:i32 = var
blockpc %34 1 %73 1:i1
%74:i32 = var
blockpc %35 0 %74 1:i1
%75:i32 = var
blockpc %35 1 %75 1:i1
%76:i32 = var
blockpc %39 0 %76 1:i1
%77:i32 = var
blockpc %39 1 %77 1:i1
%78:i32 = var
blockpc %40 0 %78 1:i1
%79:i32 = var
blockpc %40 1 %79 1:i1
%80:i32 = var
%81:i32 = var
pc %80 1:i1
pc %81 1:i1
infer %49


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 524:i32 (hasExternalUses)
%2:i32 = var
%3 = ult %1, %2
%4:i32 = var
%5 = add %4, 4:i32
%6:i32 = var
%7 = ult %5, %6
%8:i32 = zext %7
%9 = block 2
%10:i32 = var
%11 = or %10, 32:i32
%12 = eq %11, 103:i32
blockpc %9 0 %12 1:i1
%13:i32 = zext %12
%14 = eq %13, 0:i32
blockpc %9 1 %14 1:i1
%15 = block 2
%16:i32 = var
%17 = and %16, 8:i32
%18 = eq %17, 0:i32
blockpc %15 0 %18 1:i1
%19:i32 = zext %18
%20 = eq %19, 0:i32
blockpc %15 1 %20 1:i1
%21 = block 2
%22:i32 = var
%23 = ne %22, 0:i32
blockpc %21 0 %23 1:i1
%24 = eq %22, 0:i32
blockpc %21 1 %24 1:i1
%25:i32 = var
%26:i32 = var
%27 = phi %21, %25, %26
%28 = block 2
%29:i32 = var
blockpc %28 0 %29 1:i1
%30:i32 = var
blockpc %28 1 %30 1:i1
%31 = block 2
%32:i32 = var
blockpc %31 0 %32 1:i1
%33:i32 = var
blockpc %31 1 %33 1:i1
%34 = block 2
%35:i32 = var
blockpc %34 0 %35 1:i1
%36:i32 = var
blockpc %34 1 %36 1:i1
%37:i32 = var
%38 = phi %34, %37, 0:i32
%39 = phi %31, %27, %38
%40 = block 2
%41:i32 = var
blockpc %40 0 %41 1:i1
%42:i32 = var
blockpc %40 1 %42 1:i1
%43 = block 2
%44:i32 = var
blockpc %43 0 %44 1:i1
%45:i32 = var
blockpc %43 1 %45 1:i1
%46:i32 = var
%47 = phi %43, %46, 0:i32
%48 = phi %40, %27, %47
%49 = phi %28, %39, %48
%50 = phi %15, %27, %49
%51 = block 2
%52:i32 = var
blockpc %51 0 %52 1:i1
%53:i32 = var
blockpc %51 1 %53 1:i1
%54:i32 = var
%55 = phi %51, 6:i32, %54
%56 = phi %9, %50, %55
%57 = slt 0:i32, %56
%58:i32 = zext %57
%59 = and %8, %58
%60 = ne %59, 0:i32
%61:i32 = var
%62:i32 = var
pc %60 1:i1
pc %61 1:i1
pc %62 1:i1
infer %3


; start LHS (in $27)
%0:i32 = var
%1:i32 = var
%2 = add %1, 524:i32 (hasExternalUses)
%3 = sub %0, %2
%4 = ult %2, %0
%5:i32 = var
%6 = add %5, 4:i32
%7:i32 = var
%8 = ult %6, %7
%9:i32 = zext %8
%10 = block 2
%11:i32 = var
%12 = or %11, 32:i32
%13 = eq %12, 103:i32
blockpc %10 0 %13 1:i1
%14:i32 = zext %13
%15 = eq %14, 0:i32
blockpc %10 1 %15 1:i1
%16 = block 2
%17:i32 = var
%18 = and %17, 8:i32
%19 = eq %18, 0:i32
blockpc %16 0 %19 1:i1
%20:i32 = zext %19
%21 = eq %20, 0:i32
blockpc %16 1 %21 1:i1
%22 = block 2
%23:i32 = var
%24 = ne %23, 0:i32
blockpc %22 0 %24 1:i1
%25:i32 = var
blockpc %22 1 %25 1:i1
%26:i32 = var
%27:i32 = var
%28 = phi %22, %26, %27
%29 = block 2
%30:i32 = var
blockpc %29 0 %30 1:i1
%31:i32 = var
blockpc %29 1 %31 1:i1
%32 = block 2
%33:i32 = var
blockpc %32 0 %33 1:i1
%34:i32 = var
blockpc %32 1 %34 1:i1
%35 = block 2
%36:i32 = var
blockpc %35 0 %36 1:i1
%37:i32 = var
blockpc %35 1 %37 1:i1
%38:i32 = var
%39 = phi %35, %38, 0:i32
%40 = phi %32, %28, %39
%41 = block 2
%42:i32 = var
blockpc %41 0 %42 1:i1
%43:i32 = var
blockpc %41 1 %43 1:i1
%44 = block 2
%45:i32 = var
blockpc %44 0 %45 1:i1
%46:i32 = var
blockpc %44 1 %46 1:i1
%47:i32 = var
%48 = phi %44, %47, 0:i32
%49 = phi %41, %28, %48
%50 = phi %29, %40, %49
%51 = phi %16, %28, %50
%52 = block 2
%53:i32 = var
blockpc %52 0 %53 1:i1
%54:i32 = var
blockpc %52 1 %54 1:i1
%55:i32 = var
%56 = phi %52, 6:i32, %55
%57 = phi %10, %51, %56
%58 = slt 0:i32, %57
%59:i32 = zext %58
%60 = and %9, %59
%61 = ne %60, 0:i32
%62:i32 = var
%63:i32 = var
pc %4 1:i1
pc %61 1:i1
pc %62 1:i1
pc %63 1:i1
infer %3


; start LHS (in $27)
%0:i32 = var
%1 = add %0, -1:i32
%2:i32 = var
%3 = add %2, 524:i32
%4:i32 = var
%5 = ult %3, %4
%6:i32 = var
%7 = add %6, 4:i32
%8:i32 = var
%9 = ult %7, %8
%10:i32 = zext %9
%11 = block 2
%12:i32 = var
%13 = or %12, 32:i32
%14 = eq %13, 103:i32
blockpc %11 0 %14 1:i1
%15:i32 = zext %14
%16 = eq %15, 0:i32
blockpc %11 1 %16 1:i1
%17 = block 2
%18:i32 = var
%19 = and %18, 8:i32
%20 = eq %19, 0:i32
blockpc %17 0 %20 1:i1
%21:i32 = zext %20
%22 = eq %21, 0:i32
blockpc %17 1 %22 1:i1
%23 = block 2
%24:i32 = var
%25 = ne %24, 0:i32
blockpc %23 0 %25 1:i1
%26:i32 = var
blockpc %23 1 %26 1:i1
%27:i32 = var
%28:i32 = var
%29 = phi %23, %27, %28
%30 = block 2
%31:i32 = var
blockpc %30 0 %31 1:i1
%32:i32 = var
blockpc %30 1 %32 1:i1
%33 = block 2
%34:i32 = var
blockpc %33 0 %34 1:i1
%35:i32 = var
blockpc %33 1 %35 1:i1
%36 = block 2
%37:i32 = var
blockpc %36 0 %37 1:i1
%38:i32 = var
blockpc %36 1 %38 1:i1
%39:i32 = var
%40 = phi %36, %39, 0:i32
%41 = phi %33, %29, %40
%42 = block 2
%43:i32 = var
blockpc %42 0 %43 1:i1
%44:i32 = var
blockpc %42 1 %44 1:i1
%45 = block 2
%46:i32 = var
blockpc %45 0 %46 1:i1
%47:i32 = var
blockpc %45 1 %47 1:i1
%48:i32 = var
%49 = phi %45, %48, 0:i32
%50 = phi %42, %29, %49
%51 = phi %30, %41, %50
%52 = phi %17, %29, %51
%53 = block 2
%54:i32 = var
blockpc %53 0 %54 1:i1
%55:i32 = var
blockpc %53 1 %55 1:i1
%56:i32 = var
%57 = phi %53, 6:i32, %56
%58 = phi %11, %52, %57
%59 = slt 0:i32, %58
%60:i32 = zext %59
%61 = and %10, %60
%62 = ne %61, 0:i32
%63:i32 = var
%64:i32 = var
pc %5 1:i1
pc %62 1:i1
pc %63 1:i1
pc %64 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 524:i32 (hasExternalUses)
%2:i32 = var
%3 = add %2, -1:i32 (hasExternalUses)
%4 = ult %1, %3
%5:i32 = var
%6 = ult %1, %5
%7:i32 = var
%8 = add %7, 4:i32
%9:i32 = var
%10 = ult %8, %9
%11:i32 = zext %10
%12 = block 2
%13:i32 = var
%14 = or %13, 32:i32
%15 = eq %14, 103:i32
blockpc %12 0 %15 1:i1
%16:i32 = zext %15
%17 = eq %16, 0:i32
blockpc %12 1 %17 1:i1
%18 = block 2
%19:i32 = var
%20 = and %19, 8:i32
%21 = eq %20, 0:i32
blockpc %18 0 %21 1:i1
%22:i32 = zext %21
%23 = eq %22, 0:i32
blockpc %18 1 %23 1:i1
%24 = block 2
%25:i32 = var
%26 = ne %25, 0:i32
blockpc %24 0 %26 1:i1
%27:i32 = var
blockpc %24 1 %27 1:i1
%28:i32 = var
%29:i32 = var
%30 = phi %24, %28, %29
%31 = block 2
%32:i32 = var
blockpc %31 0 %32 1:i1
%33:i32 = var
blockpc %31 1 %33 1:i1
%34 = block 2
%35:i32 = var
blockpc %34 0 %35 1:i1
%36:i32 = var
blockpc %34 1 %36 1:i1
%37 = block 2
%38:i32 = var
blockpc %37 0 %38 1:i1
%39:i32 = var
blockpc %37 1 %39 1:i1
%40:i32 = var
%41 = phi %37, %40, 0:i32
%42 = phi %34, %30, %41
%43 = block 2
%44:i32 = var
blockpc %43 0 %44 1:i1
%45:i32 = var
blockpc %43 1 %45 1:i1
%46 = block 2
%47:i32 = var
blockpc %46 0 %47 1:i1
%48:i32 = var
blockpc %46 1 %48 1:i1
%49:i32 = var
%50 = phi %46, %49, 0:i32
%51 = phi %43, %30, %50
%52 = phi %31, %42, %51
%53 = phi %18, %30, %52
%54 = block 2
%55:i32 = var
blockpc %54 0 %55 1:i1
%56:i32 = var
blockpc %54 1 %56 1:i1
%57:i32 = var
%58 = phi %54, 6:i32, %57
%59 = phi %12, %53, %58
%60 = slt 0:i32, %59
%61:i32 = zext %60
%62 = and %11, %61
%63 = ne %62, 0:i32
%64:i32 = var
%65:i32 = var
pc %6 1:i1
pc %63 1:i1
pc %64 1:i1
pc %65 1:i1
infer %4


; start LHS (in $27)
%0:i32 = var
%1 = slt %0, 9:i32
%2:i32 = var
%3 = add %2, 4:i32
%4:i32 = var
%5 = ult %3, %4
%6:i32 = zext %5
%7 = block 2
%8:i32 = var
%9 = or %8, 32:i32
%10 = eq %9, 103:i32
blockpc %7 0 %10 1:i1
%11:i32 = zext %10
%12 = eq %11, 0:i32
blockpc %7 1 %12 1:i1
%13 = block 2
%14:i32 = var
%15 = and %14, 8:i32
%16 = eq %15, 0:i32
blockpc %13 0 %16 1:i1
%17:i32 = zext %16
%18 = eq %17, 0:i32
blockpc %13 1 %18 1:i1
%19 = block 2
%20:i32 = var
%21 = ne %20, 0:i32
blockpc %19 0 %21 1:i1
%22 = eq %20, 0:i32
blockpc %19 1 %22 1:i1
%23:i32 = var
%24 = add %23, -1:i32
%25 = block 2
%26:i32 = var
blockpc %25 0 %26 1:i1
%27:i32 = var
blockpc %25 1 %27 1:i1
%28 = block 2
%29:i32 = var
blockpc %28 0 %29 1:i1
%30:i32 = var
blockpc %28 1 %30 1:i1
%31 = block 2
%32:i32 = var
blockpc %31 0 %32 1:i1
%33:i32 = var
blockpc %31 1 %33 1:i1
%34 = block 2
%35:i32 = var
blockpc %34 0 %35 1:i1
%36:i32 = var
blockpc %34 1 %36 1:i1
%37:i32 = var
%38:i32 = var
%39 = phi %34, %37, %38
%40 = phi %31, %39, 0:i32
%41 = block 2
%42:i32 = var
blockpc %41 0 %42 1:i1
%43:i32 = var
blockpc %41 1 %43 1:i1
%44 = block 2
%45:i32 = var
blockpc %44 0 %45 1:i1
%46:i32 = var
blockpc %44 1 %46 1:i1
%47:i32 = var
%48:i32 = var
%49 = phi %44, %47, %48
%50 = phi %41, %40, %49
%51 = phi %28, %40, %50
%52 = phi %25, %51, %40
%53 = sub %24, %52
%54:i32 = var
%55 = phi %19, %53, %54
%56 = block 2
%57:i32 = var
blockpc %56 0 %57 1:i1
%58:i32 = var
blockpc %56 1 %58 1:i1
%59 = block 2
%60:i32 = var
blockpc %59 0 %60 1:i1
%61:i32 = var
blockpc %59 1 %61 1:i1
%62 = block 2
%63:i32 = var
blockpc %62 0 %63 1:i1
%64:i32 = var
blockpc %62 1 %64 1:i1
%65:i32 = var
%66 = phi %62, %65, 0:i32
%67 = phi %59, %55, %66
%68 = block 2
%69:i32 = var
blockpc %68 0 %69 1:i1
%70:i32 = var
blockpc %68 1 %70 1:i1
%71 = block 2
%72:i32 = var
blockpc %71 0 %72 1:i1
%73:i32 = var
blockpc %71 1 %73 1:i1
%74:i32 = var
%75 = phi %71, %74, 0:i32
%76 = phi %68, %55, %75
%77 = phi %56, %67, %76
%78 = phi %13, %55, %77
%79 = block 2
%80:i32 = var
blockpc %79 0 %80 1:i1
%81:i32 = var
blockpc %79 1 %81 1:i1
%82:i32 = var
%83 = phi %79, 6:i32, %82
%84 = phi %7, %78, %83
%85 = slt 0:i32, %84
%86:i32 = zext %85
%87 = and %6, %86
%88 = ne %87, 0:i32
%89:i32 = var
%90:i32 = var
pc %88 1:i1
pc %89 1:i1
pc %90 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = add %0, -9:i32
%2:i32 = var
%3 = add %2, 4:i32
%4:i32 = var
%5 = ult %3, %4
%6:i32 = zext %5
%7 = block 2
%8:i32 = var
%9 = or %8, 32:i32
%10 = eq %9, 103:i32
blockpc %7 0 %10 1:i1
%11:i32 = zext %10
%12 = eq %11, 0:i32
blockpc %7 1 %12 1:i1
%13 = block 2
%14:i32 = var
%15 = and %14, 8:i32
%16 = eq %15, 0:i32
blockpc %13 0 %16 1:i1
%17:i32 = zext %16
%18 = eq %17, 0:i32
blockpc %13 1 %18 1:i1
%19 = block 2
%20:i32 = var
%21 = ne %20, 0:i32
blockpc %19 0 %21 1:i1
%22 = eq %20, 0:i32
blockpc %19 1 %22 1:i1
%23:i32 = var
%24 = add %23, -1:i32
%25 = block 2
%26:i32 = var
blockpc %25 0 %26 1:i1
%27:i32 = var
blockpc %25 1 %27 1:i1
%28 = block 2
%29:i32 = var
blockpc %28 0 %29 1:i1
%30:i32 = var
blockpc %28 1 %30 1:i1
%31 = block 2
%32:i32 = var
blockpc %31 0 %32 1:i1
%33:i32 = var
blockpc %31 1 %33 1:i1
%34 = block 2
%35:i32 = var
blockpc %34 0 %35 1:i1
%36:i32 = var
blockpc %34 1 %36 1:i1
%37:i32 = var
%38:i32 = var
%39 = phi %34, %37, %38
%40 = phi %31, %39, 0:i32
%41 = block 2
%42:i32 = var
blockpc %41 0 %42 1:i1
%43:i32 = var
blockpc %41 1 %43 1:i1
%44 = block 2
%45:i32 = var
blockpc %44 0 %45 1:i1
%46:i32 = var
blockpc %44 1 %46 1:i1
%47:i32 = var
%48:i32 = var
%49 = phi %44, %47, %48
%50 = phi %41, %40, %49
%51 = phi %28, %40, %50
%52 = phi %25, %51, %40
%53 = sub %24, %52
%54:i32 = var
%55 = phi %19, %53, %54
%56 = block 2
%57:i32 = var
blockpc %56 0 %57 1:i1
%58:i32 = var
blockpc %56 1 %58 1:i1
%59 = block 2
%60:i32 = var
blockpc %59 0 %60 1:i1
%61:i32 = var
blockpc %59 1 %61 1:i1
%62 = block 2
%63:i32 = var
blockpc %62 0 %63 1:i1
%64:i32 = var
blockpc %62 1 %64 1:i1
%65:i32 = var
%66 = phi %62, %65, 0:i32
%67 = phi %59, %55, %66
%68 = block 2
%69:i32 = var
blockpc %68 0 %69 1:i1
%70:i32 = var
blockpc %68 1 %70 1:i1
%71 = block 2
%72:i32 = var
blockpc %71 0 %72 1:i1
%73:i32 = var
blockpc %71 1 %73 1:i1
%74:i32 = var
%75 = phi %71, %74, 0:i32
%76 = phi %68, %55, %75
%77 = phi %56, %67, %76
%78 = phi %13, %55, %77
%79 = block 2
%80:i32 = var
blockpc %79 0 %80 1:i1
%81:i32 = var
blockpc %79 1 %81 1:i1
%82:i32 = var
%83 = phi %79, 6:i32, %82
%84 = phi %7, %78, %83
%85 = slt 0:i32, %84
%86:i32 = zext %85
%87 = and %6, %86
%88 = ne %87, 0:i32
%89:i32 = var
%90:i32 = var
pc %88 1:i1
pc %89 1:i1
pc %90 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 4:i32
%2:i32 = var
%3 = add %2, 4:i32
%4:i32 = var
%5 = ult %3, %4
%6:i32 = zext %5
%7 = block 2
%8:i32 = var
%9 = or %8, 32:i32
%10 = eq %9, 103:i32
blockpc %7 0 %10 1:i1
%11:i32 = zext %10
%12 = eq %11, 0:i32
blockpc %7 1 %12 1:i1
%13 = block 2
%14:i32 = var
%15 = and %14, 8:i32
%16 = eq %15, 0:i32
blockpc %13 0 %16 1:i1
%17:i32 = zext %16
%18 = eq %17, 0:i32
blockpc %13 1 %18 1:i1
%19 = block 2
%20:i32 = var
%21 = ne %20, 0:i32
blockpc %19 0 %21 1:i1
%22 = eq %20, 0:i32
blockpc %19 1 %22 1:i1
%23:i32 = var
%24 = add %23, -1:i32
%25 = block 2
%26:i32 = var
blockpc %25 0 %26 1:i1
%27:i32 = var
blockpc %25 1 %27 1:i1
%28 = block 2
%29:i32 = var
blockpc %28 0 %29 1:i1
%30:i32 = var
blockpc %28 1 %30 1:i1
%31 = block 2
%32:i32 = var
blockpc %31 0 %32 1:i1
%33:i32 = var
blockpc %31 1 %33 1:i1
%34 = block 2
%35:i32 = var
blockpc %34 0 %35 1:i1
%36:i32 = var
blockpc %34 1 %36 1:i1
%37:i32 = var
%38:i32 = var
%39 = phi %34, %37, %38
%40 = phi %31, %39, 0:i32
%41 = block 2
%42:i32 = var
blockpc %41 0 %42 1:i1
%43:i32 = var
blockpc %41 1 %43 1:i1
%44 = block 2
%45:i32 = var
blockpc %44 0 %45 1:i1
%46:i32 = var
blockpc %44 1 %46 1:i1
%47:i32 = var
%48:i32 = var
%49 = phi %44, %47, %48
%50 = phi %41, %40, %49
%51 = phi %28, %40, %50
%52 = phi %25, %51, %40
%53 = sub %24, %52
%54:i32 = var
%55 = phi %19, %53, %54
%56 = block 2
%57:i32 = var
blockpc %56 0 %57 1:i1
%58:i32 = var
blockpc %56 1 %58 1:i1
%59 = block 2
%60:i32 = var
blockpc %59 0 %60 1:i1
%61:i32 = var
blockpc %59 1 %61 1:i1
%62 = block 2
%63:i32 = var
blockpc %62 0 %63 1:i1
%64:i32 = var
blockpc %62 1 %64 1:i1
%65:i32 = var
%66 = phi %62, %65, 0:i32
%67 = phi %59, %55, %66
%68 = block 2
%69:i32 = var
blockpc %68 0 %69 1:i1
%70:i32 = var
blockpc %68 1 %70 1:i1
%71 = block 2
%72:i32 = var
blockpc %71 0 %72 1:i1
%73:i32 = var
blockpc %71 1 %73 1:i1
%74:i32 = var
%75 = phi %71, %74, 0:i32
%76 = phi %68, %55, %75
%77 = phi %56, %67, %76
%78 = phi %13, %55, %77
%79 = block 2
%80:i32 = var
blockpc %79 0 %80 1:i1
%81:i32 = var
blockpc %79 1 %81 1:i1
%82:i32 = var
%83 = phi %79, 6:i32, %82
%84 = phi %7, %78, %83
%85 = slt 0:i32, %84
%86:i32 = zext %85
%87 = and %6, %86
%88 = ne %87, 0:i32
%89:i32 = var
%90:i32 = var
pc %88 1:i1
pc %89 1:i1
pc %90 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 4:i32 (hasExternalUses)
%2:i32 = var
%3 = ult %1, %2
%4:i32 = var
%5 = add %4, 4:i32
%6 = ult %5, %2
%7:i32 = zext %6
%8 = block 2
%9:i32 = var
%10 = or %9, 32:i32
%11 = eq %10, 103:i32
blockpc %8 0 %11 1:i1
%12:i32 = zext %11
%13 = eq %12, 0:i32
blockpc %8 1 %13 1:i1
%14 = block 2
%15:i32 = var
%16 = and %15, 8:i32
%17 = eq %16, 0:i32
blockpc %14 0 %17 1:i1
%18:i32 = zext %17
%19 = eq %18, 0:i32
blockpc %14 1 %19 1:i1
%20 = block 2
%21:i32 = var
%22 = ne %21, 0:i32
blockpc %20 0 %22 1:i1
%23 = eq %21, 0:i32
blockpc %20 1 %23 1:i1
%24:i32 = var
%25:i32 = var
%26 = phi %20, %24, %25
%27 = block 2
%28:i32 = var
blockpc %27 0 %28 1:i1
%29:i32 = var
blockpc %27 1 %29 1:i1
%30 = block 2
%31:i32 = var
blockpc %30 0 %31 1:i1
%32:i32 = var
blockpc %30 1 %32 1:i1
%33 = block 2
%34:i32 = var
blockpc %33 0 %34 1:i1
%35:i32 = var
blockpc %33 1 %35 1:i1
%36:i32 = var
%37 = phi %33, %36, 0:i32
%38 = phi %30, %26, %37
%39 = block 2
%40:i32 = var
blockpc %39 0 %40 1:i1
%41:i32 = var
blockpc %39 1 %41 1:i1
%42 = block 2
%43:i32 = var
blockpc %42 0 %43 1:i1
%44:i32 = var
blockpc %42 1 %44 1:i1
%45:i32 = var
%46 = phi %42, %45, 0:i32
%47 = phi %39, %26, %46
%48 = phi %27, %38, %47
%49 = phi %14, %26, %48
%50 = block 2
%51:i32 = var
blockpc %50 0 %51 1:i1
%52:i32 = var
blockpc %50 1 %52 1:i1
%53:i32 = var
%54 = phi %50, 6:i32, %53
%55 = phi %8, %49, %54
%56 = slt 0:i32, %55
%57:i32 = zext %56
%58 = and %7, %57
%59 = ne %58, 0:i32
%60:i32 = var
%61:i32 = var
pc %59 1:i1
pc %60 1:i1
pc %61 1:i1
infer %3


; start LHS (in $27)
%0:i32 = var
%1 = slt 9:i32, %0
%2:i32 = var
%3 = add %2, 4:i32
%4:i32 = var
%5 = ult %3, %4
%6:i32 = zext %5
%7 = block 2
%8:i32 = var
%9 = or %8, 32:i32
%10 = eq %9, 103:i32
blockpc %7 0 %10 1:i1
%11:i32 = zext %10
%12 = eq %11, 0:i32
blockpc %7 1 %12 1:i1
%13 = block 2
%14:i32 = var
%15 = and %14, 8:i32
%16 = eq %15, 0:i32
blockpc %13 0 %16 1:i1
%17:i32 = zext %16
%18 = eq %17, 0:i32
blockpc %13 1 %18 1:i1
%19 = block 2
%20:i32 = var
%21 = ne %20, 0:i32
blockpc %19 0 %21 1:i1
%22 = eq %20, 0:i32
blockpc %19 1 %22 1:i1
%23:i32 = var
%24 = add %23, -1:i32
%25 = block 2
%26:i32 = var
blockpc %25 0 %26 1:i1
%27:i32 = var
blockpc %25 1 %27 1:i1
%28 = block 2
%29:i32 = var
blockpc %28 0 %29 1:i1
%30:i32 = var
blockpc %28 1 %30 1:i1
%31 = block 2
%32:i32 = var
blockpc %31 0 %32 1:i1
%33:i32 = var
blockpc %31 1 %33 1:i1
%34 = block 2
%35:i32 = var
blockpc %34 0 %35 1:i1
%36:i32 = var
blockpc %34 1 %36 1:i1
%37:i32 = var
%38:i32 = var
%39 = phi %34, %37, %38
%40 = phi %31, %39, 0:i32
%41 = block 2
%42:i32 = var
blockpc %41 0 %42 1:i1
%43:i32 = var
blockpc %41 1 %43 1:i1
%44 = block 2
%45:i32 = var
blockpc %44 0 %45 1:i1
%46:i32 = var
blockpc %44 1 %46 1:i1
%47:i32 = var
%48:i32 = var
%49 = phi %44, %47, %48
%50 = phi %41, %40, %49
%51 = phi %28, %40, %50
%52 = phi %25, %51, %40
%53 = sub %24, %52
%54:i32 = var
%55 = phi %19, %53, %54
%56 = block 2
%57:i32 = var
blockpc %56 0 %57 1:i1
%58:i32 = var
blockpc %56 1 %58 1:i1
%59 = block 2
%60:i32 = var
blockpc %59 0 %60 1:i1
%61:i32 = var
blockpc %59 1 %61 1:i1
%62 = block 2
%63:i32 = var
blockpc %62 0 %63 1:i1
%64:i32 = var
blockpc %62 1 %64 1:i1
%65:i32 = var
%66 = phi %62, %65, 0:i32
%67 = phi %59, %55, %66
%68 = block 2
%69:i32 = var
blockpc %68 0 %69 1:i1
%70:i32 = var
blockpc %68 1 %70 1:i1
%71 = block 2
%72:i32 = var
blockpc %71 0 %72 1:i1
%73:i32 = var
blockpc %71 1 %73 1:i1
%74:i32 = var
%75 = phi %71, %74, 0:i32
%76 = phi %68, %55, %75
%77 = phi %56, %67, %76
%78 = phi %13, %55, %77
%79 = block 2
%80:i32 = var
blockpc %79 0 %80 1:i1
%81:i32 = var
blockpc %79 1 %81 1:i1
%82:i32 = var
%83 = phi %79, 6:i32, %82
%84 = phi %7, %78, %83
%85 = slt 0:i32, %84
%86:i32 = zext %85
%87 = and %6, %86
%88 = ne %87, 0:i32
%89:i32 = var
%90:i32 = var
pc %88 1:i1
pc %89 1:i1
pc %90 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 4:i32 (hasExternalUses)
%2:i32 = var
%3 = ult %1, %2
%4:i32 = zext %3
%5:i32 = var
%6 = slt 9:i32, %5
%7:i32 = zext %6
%8 = and %4, %7
%9:i32 = var
%10 = add %9, 4:i32
%11 = ult %10, %2
%12:i32 = zext %11
%13 = block 2
%14:i32 = var
%15 = or %14, 32:i32
%16 = eq %15, 103:i32
blockpc %13 0 %16 1:i1
%17:i32 = zext %16
%18 = eq %17, 0:i32
blockpc %13 1 %18 1:i1
%19 = block 2
%20:i32 = var
%21 = and %20, 8:i32
%22 = eq %21, 0:i32
blockpc %19 0 %22 1:i1
%23:i32 = zext %22
%24 = eq %23, 0:i32
blockpc %19 1 %24 1:i1
%25 = block 2
%26:i32 = var
blockpc %25 0 %26 1:i1
%27:i32 = var
blockpc %25 1 %27 1:i1
%28:i32 = var
%29:i32 = var
%30 = phi %25, %28, %29
%31 = block 2
%32:i32 = var
blockpc %31 0 %32 1:i1
%33:i32 = var
blockpc %31 1 %33 1:i1
%34 = block 2
%35:i32 = var
blockpc %34 0 %35 1:i1
%36:i32 = var
blockpc %34 1 %36 1:i1
%37 = block 2
%38:i32 = var
blockpc %37 0 %38 1:i1
%39:i32 = var
blockpc %37 1 %39 1:i1
%40:i32 = var
%41 = phi %37, %40, 0:i32
%42 = phi %34, %30, %41
%43 = block 2
%44:i32 = var
blockpc %43 0 %44 1:i1
%45:i32 = var
blockpc %43 1 %45 1:i1
%46 = block 2
%47:i32 = var
blockpc %46 0 %47 1:i1
%48:i32 = var
blockpc %46 1 %48 1:i1
%49:i32 = var
%50 = phi %46, %49, 0:i32
%51 = phi %43, %30, %50
%52 = phi %31, %42, %51
%53 = phi %19, %30, %52
%54 = block 2
%55:i32 = var
blockpc %54 0 %55 1:i1
%56:i32 = var
blockpc %54 1 %56 1:i1
%57:i32 = var
%58 = phi %54, 6:i32, %57
%59 = phi %13, %53, %58
%60 = slt 0:i32, %59
%61:i32 = zext %60
%62 = and %12, %61
%63 = ne %62, 0:i32
%64:i32 = var
%65:i32 = var
pc %63 1:i1
pc %64 1:i1
pc %65 1:i1
infer %8


; start LHS (in $27)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4 = block 2
%5:i32 = var
%6 = phi %4, 6:i32, %5
%7:i32 = var
%8 = and %7, 1:i32
%9 = add %6, %8 (hasExternalUses)
%10 = add %9, -1:i32
%11 = block 2
%12 = block 2
%13 = block 2
%14 = block 2
%15:i32 = var
%16:i32 = var
%17 = phi %14, %15, %16
%18 = phi %13, %17, 0:i32
%19 = block 2
%20 = block 2
%21:i32 = var
%22:i32 = var
%23 = phi %20, %21, %22
%24 = phi %19, %18, %23
%25 = phi %12, %18, %24
%26 = phi %11, %25, %18
%27 = sub %10, %26 (hasExternalUses)
%28 = add %9, -1:i32 (hasExternalUses)
%29 = phi %3, %27, %28
%30 = block 2
%31 = block 2
%32 = block 2
%33:i32 = var
%34 = phi %32, %33, 0:i32
%35 = phi %31, %29, %34
%36 = block 2
%37 = block 2
%38:i32 = var
%39 = phi %37, %38, 0:i32
%40 = phi %36, %29, %39
%41 = phi %30, %35, %40
%42 = phi %2, %29, %41
%43 = phi %1, %42, %6
%44:i32 = var
%45 = phi %0, %43, %44
%46 = add %45, 9:i32
%47:i32 = var
blockpc %0 0 %47 1:i1
%48:i32 = var
blockpc %0 1 %48 1:i1
%49:i32 = var
blockpc %1 0 %49 1:i1
%50:i32 = var
blockpc %1 1 %50 1:i1
%51:i32 = var
blockpc %2 0 %51 1:i1
%52:i32 = var
blockpc %2 1 %52 1:i1
%53:i32 = var
blockpc %3 0 %53 1:i1
%54:i32 = var
blockpc %3 1 %54 1:i1
%55:i32 = var
blockpc %4 0 %55 1:i1
%56:i32 = var
blockpc %4 1 %56 1:i1
%57:i32 = var
blockpc %11 0 %57 1:i1
%58:i32 = var
blockpc %11 1 %58 1:i1
%59:i32 = var
blockpc %12 0 %59 1:i1
%60:i32 = var
blockpc %12 1 %60 1:i1
%61:i32 = var
blockpc %13 0 %61 1:i1
%62:i32 = var
blockpc %13 1 %62 1:i1
%63:i32 = var
blockpc %14 0 %63 1:i1
%64:i32 = var
blockpc %14 1 %64 1:i1
%65:i32 = var
blockpc %19 0 %65 1:i1
%66:i32 = var
blockpc %19 1 %66 1:i1
%67:i32 = var
blockpc %20 0 %67 1:i1
%68:i32 = var
blockpc %20 1 %68 1:i1
%69:i32 = var
blockpc %30 0 %69 1:i1
%70:i32 = var
blockpc %30 1 %70 1:i1
%71:i32 = var
blockpc %31 0 %71 1:i1
%72:i32 = var
blockpc %31 1 %72 1:i1
%73:i32 = var
blockpc %32 0 %73 1:i1
%74:i32 = var
blockpc %32 1 %74 1:i1
%75:i32 = var
blockpc %36 0 %75 1:i1
%76:i32 = var
blockpc %36 1 %76 1:i1
%77:i32 = var
blockpc %37 0 %77 1:i1
%78:i32 = var
blockpc %37 1 %78 1:i1
%79:i32 = var
%80:i32 = var
pc %79 1:i1
pc %80 1:i1
infer %46


; start LHS (in $27)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4 = block 2
%5:i32 = var
%6 = add %5, 4:i32 (hasExternalUses)
%7 = phi %4, %5, %6
%8 = block 2
%9 = add %5, 4:i32 (hasExternalUses)
%10 = phi %8, %5, %9
%11 = phi %3, %7, %10
%12 = block 2
%13 = block 2
%14:i32 = var
%15 = block 2
%16 = add %14, -4:i32 (hasExternalUses)
%17 = phi %15, %14, %16
%18 = phi %13, %14, %17
%19 = block 2
%20:i32 = var
%21 = add %20, 8:i32 (hasExternalUses)
%22 = add %21, 288:i32 (hasExternalUses)
%23 = phi %19, %21, %22
%24 = phi %12, %18, %23
%25 = phi %2, %11, %24
%26 = block 2
%27 = block 2
%28 = block 2
%29:i32 = var
%30:i32 = var
%31 = phi %28, %29, %30
%32 = phi %27, %25, %31
%33 = phi %26, %25, %32
%34 = phi %1, %25, %33
%35 = phi %0, %34, %25
%36 = add %35, 4:i32
%37:i32 = var
blockpc %0 0 %37 1:i1
%38:i32 = var
blockpc %0 1 %38 1:i1
%39:i32 = var
blockpc %1 0 %39 1:i1
%40:i32 = var
blockpc %1 1 %40 1:i1
%41:i32 = var
blockpc %2 0 %41 1:i1
%42:i32 = var
blockpc %2 1 %42 1:i1
%43:i32 = var
blockpc %3 0 %43 1:i1
%44:i32 = var
blockpc %3 1 %44 1:i1
%45:i32 = var
blockpc %4 0 %45 1:i1
%46:i32 = var
blockpc %4 1 %46 1:i1
%47:i32 = var
blockpc %8 0 %47 1:i1
%48:i32 = var
blockpc %8 1 %48 1:i1
%49:i32 = var
blockpc %12 0 %49 1:i1
%50:i32 = var
blockpc %12 1 %50 1:i1
%51:i32 = var
blockpc %13 0 %51 1:i1
%52:i32 = var
blockpc %13 1 %52 1:i1
%53:i32 = var
blockpc %15 0 %53 1:i1
%54:i32 = var
blockpc %15 1 %54 1:i1
%55:i32 = var
blockpc %19 0 %55 1:i1
%56:i32 = var
blockpc %19 1 %56 1:i1
%57:i32 = var
blockpc %26 0 %57 1:i1
%58:i32 = var
blockpc %26 1 %58 1:i1
%59:i32 = var
blockpc %27 0 %59 1:i1
%60:i32 = var
blockpc %27 1 %60 1:i1
%61:i32 = var
blockpc %28 0 %61 1:i1
%62:i32 = var
blockpc %28 1 %62 1:i1
%63:i32 = var
%64:i32 = var
pc %63 1:i1
pc %64 1:i1
infer %36


; start LHS (in $27)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4:i32 = var
%5 = phi %3, 6:i32, %4
%6:i32 = var
%7:i32 = zext %6
%8 = xor %7, 1:i32
%9 = and %8, 1:i32
%10 = add %5, %9 (hasExternalUses)
%11 = add %10, -1:i32
%12 = block 2
%13 = block 2
%14 = block 2
%15 = block 2
%16:i32 = var
%17:i32 = var
%18 = phi %15, %16, %17
%19 = phi %14, %18, 0:i32
%20 = block 2
%21 = block 2
%22:i32 = var
%23:i32 = var
%24 = phi %21, %22, %23
%25 = phi %20, %19, %24
%26 = phi %13, %19, %25
%27 = phi %12, %26, %19
%28 = sub %11, %27 (hasExternalUses)
%29 = add %10, -1:i32 (hasExternalUses)
%30 = phi %2, %28, %29
%31 = block 2
%32 = block 2
%33 = block 2
%34:i32 = var
%35 = phi %33, %34, 0:i32
%36 = phi %32, %30, %35
%37 = block 2
%38 = block 2
%39:i32 = var
%40 = phi %38, %39, 0:i32
%41 = phi %37, %30, %40
%42 = phi %31, %36, %41
%43 = phi %1, %30, %42
%44 = phi %0, %43, %5
%45 = slt -1:i32, %44
%46:i32 = var
blockpc %0 0 %46 1:i1
%47:i32 = var
blockpc %0 1 %47 1:i1
%48:i32 = var
blockpc %1 0 %48 1:i1
%49:i32 = var
blockpc %1 1 %49 1:i1
%50:i32 = var
blockpc %2 0 %50 1:i1
%51:i32 = var
blockpc %2 1 %51 1:i1
%52:i32 = var
blockpc %3 0 %52 1:i1
%53:i32 = var
blockpc %3 1 %53 1:i1
%54:i32 = var
blockpc %12 0 %54 1:i1
%55:i32 = var
blockpc %12 1 %55 1:i1
%56:i32 = var
blockpc %13 0 %56 1:i1
%57:i32 = var
blockpc %13 1 %57 1:i1
%58:i32 = var
blockpc %14 0 %58 1:i1
%59:i32 = var
blockpc %14 1 %59 1:i1
%60:i32 = var
blockpc %15 0 %60 1:i1
%61:i32 = var
blockpc %15 1 %61 1:i1
%62:i32 = var
blockpc %20 0 %62 1:i1
%63:i32 = var
blockpc %20 1 %63 1:i1
%64:i32 = var
blockpc %21 0 %64 1:i1
%65:i32 = var
blockpc %21 1 %65 1:i1
%66:i32 = var
blockpc %31 0 %66 1:i1
%67:i32 = var
blockpc %31 1 %67 1:i1
%68:i32 = var
blockpc %32 0 %68 1:i1
%69:i32 = var
blockpc %32 1 %69 1:i1
%70:i32 = var
blockpc %33 0 %70 1:i1
%71:i32 = var
blockpc %33 1 %71 1:i1
%72:i32 = var
blockpc %37 0 %72 1:i1
%73:i32 = var
blockpc %37 1 %73 1:i1
%74:i32 = var
blockpc %38 0 %74 1:i1
%75:i32 = var
blockpc %38 1 %75 1:i1
%76:i32 = var
%77:i32 = var
pc %76 1:i1
pc %77 1:i1
infer %45


; start LHS (in $27)
%0 = block 2
%1 = block 2
%2:i32 = var
%3 = and %2, 8:i32 (hasExternalUses)
%4 = phi %1, %3, 0:i32
%5 = and %2, 8:i32 (hasExternalUses)
%6 = phi %0, %4, %5
%7 = eq %6, 0:i32
%8:i32 = var
%9 = or %8, 32:i32
%10 = eq %9, 103:i32
blockpc %0 0 %10 1:i1
%11:i32 = zext %10
%12 = eq %11, 0:i32
blockpc %0 1 %12 1:i1
%13 = eq %3, 0:i32
blockpc %1 0 %13 1:i1
%14:i32 = zext %13
%15 = eq %14, 0:i32
blockpc %1 1 %15 1:i1
%16 = block 2
%17 = block 2
%18:i32 = var
blockpc %17 0 %18 1:i1
%19:i32 = var
blockpc %17 1 %19 1:i1
%20 = block 2
%21:i32 = var
blockpc %20 0 %21 1:i1
%22:i32 = var
blockpc %20 1 %22 1:i1
%23 = block 2
%24:i32 = var
blockpc %23 0 %24 1:i1
%25:i32 = var
blockpc %23 1 %25 1:i1
%26 = block 2
%27:i32 = var
blockpc %26 0 %27 1:i1
%28:i32 = var
blockpc %26 1 %28 1:i1
%29:i32 = var
%30:i32 = var
%31 = phi %26, %29, %30
%32 = phi %23, %31, 0:i32
%33 = block 2
%34:i32 = var
blockpc %33 0 %34 1:i1
%35:i32 = var
blockpc %33 1 %35 1:i1
%36 = block 2
%37:i32 = var
blockpc %36 0 %37 1:i1
%38:i32 = var
blockpc %36 1 %38 1:i1
%39:i32 = var
%40:i32 = var
%41 = phi %36, %39, %40
%42 = phi %33, %32, %41
%43 = phi %20, %32, %42
%44 = phi %17, %43, %32
%45:i32 = var
%46 = slt %44, %45
%47:i32 = zext %46
%48:i32 = var
%49:i32 = zext %48
%50 = and %47, %49
%51 = ne %50, 0:i32
blockpc %16 0 %51 1:i1
%52:i32 = var
blockpc %16 1 %52 1:i1
%53:i32 = var
%54:i32 = var
%55 = phi %16, %53, %54
%56 = block 2
%57:i32 = var
blockpc %56 0 %57 1:i1
%58:i32 = var
blockpc %56 1 %58 1:i1
%59 = block 2
%60:i32 = var
blockpc %59 0 %60 1:i1
%61:i32 = var
blockpc %59 1 %61 1:i1
%62 = block 2
%63:i32 = var
blockpc %62 0 %63 1:i1
%64:i32 = var
blockpc %62 1 %64 1:i1
%65:i32 = var
%66 = phi %62, %65, 0:i32
%67 = phi %59, %55, %66
%68 = block 2
%69:i32 = var
blockpc %68 0 %69 1:i1
%70:i32 = var
blockpc %68 1 %70 1:i1
%71 = block 2
%72:i32 = var
blockpc %71 0 %72 1:i1
%73:i32 = var
blockpc %71 1 %73 1:i1
%74:i32 = var
%75 = phi %71, %74, 0:i32
%76 = phi %68, %55, %75
%77 = phi %56, %67, %76
%78 = phi %1, %55, %77
%79 = block 2
%80:i32 = var
blockpc %79 0 %80 1:i1
%81:i32 = var
blockpc %79 1 %81 1:i1
%82:i32 = var
%83 = phi %79, 6:i32, %82
%84 = phi %0, %78, %83
%85 = slt -1:i32, %84
%86:i32 = var
%87:i32 = var
pc %85 1:i1
pc %86 1:i1
pc %87 1:i1
infer %7


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 524:i32 (hasExternalUses)
%2 = add %1, 9:i32
%3 = block 2
%4:i32 = var
%5 = or %4, 32:i32
%6 = eq %5, 103:i32
blockpc %3 0 %6 1:i1
%7:i32 = zext %6
%8 = eq %7, 0:i32
blockpc %3 1 %8 1:i1
%9 = block 2
%10:i32 = var
%11 = and %10, 8:i32
%12 = eq %11, 0:i32
blockpc %9 0 %12 1:i1
%13:i32 = zext %12
%14 = eq %13, 0:i32
blockpc %9 1 %14 1:i1
%15 = block 2
%16 = block 2
%17:i32 = var
blockpc %16 0 %17 1:i1
%18:i32 = var
blockpc %16 1 %18 1:i1
%19 = block 2
%20:i32 = var
blockpc %19 0 %20 1:i1
%21:i32 = var
blockpc %19 1 %21 1:i1
%22 = block 2
%23:i32 = var
blockpc %22 0 %23 1:i1
%24:i32 = var
blockpc %22 1 %24 1:i1
%25 = block 2
%26:i32 = var
blockpc %25 0 %26 1:i1
%27:i32 = var
blockpc %25 1 %27 1:i1
%28:i32 = var
%29:i32 = var
%30 = phi %25, %28, %29
%31 = phi %22, %30, 0:i32
%32 = block 2
%33:i32 = var
blockpc %32 0 %33 1:i1
%34:i32 = var
blockpc %32 1 %34 1:i1
%35 = block 2
%36:i32 = var
blockpc %35 0 %36 1:i1
%37:i32 = var
blockpc %35 1 %37 1:i1
%38:i32 = var
%39:i32 = var
%40 = phi %35, %38, %39
%41 = phi %32, %31, %40
%42 = phi %19, %31, %41
%43 = phi %16, %42, %31
%44:i32 = var
%45 = slt %43, %44
%46:i32 = zext %45
%47:i32 = var
%48:i32 = zext %47
%49 = and %46, %48
%50 = ne %49, 0:i32
blockpc %15 0 %50 1:i1
%51:i32 = var
blockpc %15 1 %51 1:i1
%52:i32 = var
%53:i32 = var
%54 = phi %15, %52, %53
%55 = block 2
%56:i32 = var
blockpc %55 0 %56 1:i1
%57:i32 = var
blockpc %55 1 %57 1:i1
%58 = block 2
%59:i32 = var
blockpc %58 0 %59 1:i1
%60:i32 = var
blockpc %58 1 %60 1:i1
%61 = block 2
%62:i32 = var
blockpc %61 0 %62 1:i1
%63:i32 = var
blockpc %61 1 %63 1:i1
%64:i32 = var
%65 = phi %61, %64, 0:i32
%66 = phi %58, %54, %65
%67 = block 2
%68:i32 = var
blockpc %67 0 %68 1:i1
%69:i32 = var
blockpc %67 1 %69 1:i1
%70 = block 2
%71:i32 = var
blockpc %70 0 %71 1:i1
%72:i32 = var
blockpc %70 1 %72 1:i1
%73:i32 = var
%74 = phi %70, %73, 0:i32
%75 = phi %67, %54, %74
%76 = phi %55, %66, %75
%77 = phi %9, %54, %76
%78 = block 2
%79:i32 = var
blockpc %78 0 %79 1:i1
%80:i32 = var
blockpc %78 1 %80 1:i1
%81:i32 = var
%82 = phi %78, 6:i32, %81
%83 = phi %3, %77, %82
%84 = slt -1:i32, %83
%85:i32 = var
%86:i32 = var
pc %84 1:i1
pc %85 1:i1
pc %86 1:i1
infer %2


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 524:i32 (hasExternalUses)
%2 = sub 0:i32, %1
%3 = block 2
%4:i32 = var
%5 = or %4, 32:i32
%6 = eq %5, 103:i32
blockpc %3 0 %6 1:i1
%7:i32 = zext %6
%8 = eq %7, 0:i32
blockpc %3 1 %8 1:i1
%9 = block 2
%10:i32 = var
%11 = and %10, 8:i32
%12 = eq %11, 0:i32
blockpc %9 0 %12 1:i1
%13:i32 = zext %12
%14 = eq %13, 0:i32
blockpc %9 1 %14 1:i1
%15 = block 2
%16 = block 2
%17:i32 = var
blockpc %16 0 %17 1:i1
%18:i32 = var
blockpc %16 1 %18 1:i1
%19 = block 2
%20:i32 = var
blockpc %19 0 %20 1:i1
%21:i32 = var
blockpc %19 1 %21 1:i1
%22 = block 2
%23:i32 = var
blockpc %22 0 %23 1:i1
%24:i32 = var
blockpc %22 1 %24 1:i1
%25 = block 2
%26:i32 = var
blockpc %25 0 %26 1:i1
%27:i32 = var
blockpc %25 1 %27 1:i1
%28:i32 = var
%29:i32 = var
%30 = phi %25, %28, %29
%31 = phi %22, %30, 0:i32
%32 = block 2
%33:i32 = var
blockpc %32 0 %33 1:i1
%34:i32 = var
blockpc %32 1 %34 1:i1
%35 = block 2
%36:i32 = var
blockpc %35 0 %36 1:i1
%37:i32 = var
blockpc %35 1 %37 1:i1
%38:i32 = var
%39:i32 = var
%40 = phi %35, %38, %39
%41 = phi %32, %31, %40
%42 = phi %19, %31, %41
%43 = phi %16, %42, %31
%44:i32 = var
%45 = slt %43, %44
%46:i32 = zext %45
%47:i32 = var
%48:i32 = zext %47
%49 = and %46, %48
%50 = ne %49, 0:i32
blockpc %15 0 %50 1:i1
%51:i32 = var
blockpc %15 1 %51 1:i1
%52:i32 = var
%53:i32 = var
%54 = phi %15, %52, %53
%55 = block 2
%56:i32 = var
blockpc %55 0 %56 1:i1
%57:i32 = var
blockpc %55 1 %57 1:i1
%58 = block 2
%59:i32 = var
blockpc %58 0 %59 1:i1
%60:i32 = var
blockpc %58 1 %60 1:i1
%61 = block 2
%62:i32 = var
blockpc %61 0 %62 1:i1
%63:i32 = var
blockpc %61 1 %63 1:i1
%64:i32 = var
%65 = phi %61, %64, 0:i32
%66 = phi %58, %54, %65
%67 = block 2
%68:i32 = var
blockpc %67 0 %68 1:i1
%69:i32 = var
blockpc %67 1 %69 1:i1
%70 = block 2
%71:i32 = var
blockpc %70 0 %71 1:i1
%72:i32 = var
blockpc %70 1 %72 1:i1
%73:i32 = var
%74 = phi %70, %73, 0:i32
%75 = phi %67, %54, %74
%76 = phi %55, %66, %75
%77 = phi %9, %54, %76
%78 = block 2
%79:i32 = var
blockpc %78 0 %79 1:i1
%80:i32 = var
blockpc %78 1 %80 1:i1
%81:i32 = var
%82 = phi %78, 6:i32, %81
%83 = phi %3, %77, %82
%84 = slt -1:i32, %83
%85:i32 = var
%86:i32 = var
pc %84 1:i1
pc %85 1:i1
pc %86 1:i1
infer %2


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 524:i32 (hasExternalUses)
%2 = add %1, 8:i32
%3 = block 2
%4:i32 = var
%5 = or %4, 32:i32
%6 = eq %5, 103:i32
blockpc %3 0 %6 1:i1
%7:i32 = zext %6
%8 = eq %7, 0:i32
blockpc %3 1 %8 1:i1
%9 = block 2
%10:i32 = var
%11 = and %10, 8:i32
%12 = eq %11, 0:i32
blockpc %9 0 %12 1:i1
%13:i32 = zext %12
%14 = eq %13, 0:i32
blockpc %9 1 %14 1:i1
%15 = block 2
%16 = block 2
%17:i32 = var
blockpc %16 0 %17 1:i1
%18:i32 = var
blockpc %16 1 %18 1:i1
%19 = block 2
%20:i32 = var
blockpc %19 0 %20 1:i1
%21:i32 = var
blockpc %19 1 %21 1:i1
%22 = block 2
%23:i32 = var
blockpc %22 0 %23 1:i1
%24:i32 = var
blockpc %22 1 %24 1:i1
%25 = block 2
%26:i32 = var
blockpc %25 0 %26 1:i1
%27:i32 = var
blockpc %25 1 %27 1:i1
%28:i32 = var
%29:i32 = var
%30 = phi %25, %28, %29
%31 = phi %22, %30, 0:i32
%32 = block 2
%33:i32 = var
blockpc %32 0 %33 1:i1
%34:i32 = var
blockpc %32 1 %34 1:i1
%35 = block 2
%36:i32 = var
blockpc %35 0 %36 1:i1
%37:i32 = var
blockpc %35 1 %37 1:i1
%38:i32 = var
%39:i32 = var
%40 = phi %35, %38, %39
%41 = phi %32, %31, %40
%42 = phi %19, %31, %41
%43 = phi %16, %42, %31
%44:i32 = var
%45 = slt %43, %44
%46:i32 = zext %45
%47:i32 = var
%48:i32 = zext %47
%49 = and %46, %48
%50 = ne %49, 0:i32
blockpc %15 0 %50 1:i1
%51:i32 = var
blockpc %15 1 %51 1:i1
%52:i32 = var
%53:i32 = var
%54 = phi %15, %52, %53
%55 = block 2
%56:i32 = var
blockpc %55 0 %56 1:i1
%57:i32 = var
blockpc %55 1 %57 1:i1
%58 = block 2
%59:i32 = var
blockpc %58 0 %59 1:i1
%60:i32 = var
blockpc %58 1 %60 1:i1
%61 = block 2
%62:i32 = var
blockpc %61 0 %62 1:i1
%63:i32 = var
blockpc %61 1 %63 1:i1
%64:i32 = var
%65 = phi %61, %64, 0:i32
%66 = phi %58, %54, %65
%67 = block 2
%68:i32 = var
blockpc %67 0 %68 1:i1
%69:i32 = var
blockpc %67 1 %69 1:i1
%70 = block 2
%71:i32 = var
blockpc %70 0 %71 1:i1
%72:i32 = var
blockpc %70 1 %72 1:i1
%73:i32 = var
%74 = phi %70, %73, 0:i32
%75 = phi %67, %54, %74
%76 = phi %55, %66, %75
%77 = phi %9, %54, %76
%78 = block 2
%79:i32 = var
blockpc %78 0 %79 1:i1
%80:i32 = var
blockpc %78 1 %80 1:i1
%81:i32 = var
%82 = phi %78, 6:i32, %81
%83 = phi %3, %77, %82
%84 = slt -1:i32, %83
%85:i32 = var
%86:i32 = var
pc %84 1:i1
pc %85 1:i1
pc %86 1:i1
infer %2


; start LHS (in $27)
%0:i32 = var
%1:i32 = var
%2 = add %1, 524:i32 (hasExternalUses)
%3 = add %2, 9:i32 (hasExternalUses)
%4 = eq %0, %3
%5 = block 2
%6:i32 = var
%7 = or %6, 32:i32
%8 = eq %7, 103:i32
blockpc %5 0 %8 1:i1
%9:i32 = zext %8
%10 = eq %9, 0:i32
blockpc %5 1 %10 1:i1
%11 = block 2
%12:i32 = var
%13 = and %12, 8:i32
%14 = eq %13, 0:i32
blockpc %11 0 %14 1:i1
%15:i32 = zext %14
%16 = eq %15, 0:i32
blockpc %11 1 %16 1:i1
%17 = block 2
%18 = block 2
%19:i32 = var
blockpc %18 0 %19 1:i1
%20:i32 = var
blockpc %18 1 %20 1:i1
%21 = block 2
%22:i32 = var
blockpc %21 0 %22 1:i1
%23:i32 = var
blockpc %21 1 %23 1:i1
%24 = block 2
%25:i32 = var
blockpc %24 0 %25 1:i1
%26:i32 = var
blockpc %24 1 %26 1:i1
%27 = block 2
%28:i32 = var
blockpc %27 0 %28 1:i1
%29:i32 = var
blockpc %27 1 %29 1:i1
%30:i32 = var
%31:i32 = var
%32 = phi %27, %30, %31
%33 = phi %24, %32, 0:i32
%34 = block 2
%35:i32 = var
blockpc %34 0 %35 1:i1
%36:i32 = var
blockpc %34 1 %36 1:i1
%37 = block 2
%38:i32 = var
blockpc %37 0 %38 1:i1
%39:i32 = var
blockpc %37 1 %39 1:i1
%40:i32 = var
%41:i32 = var
%42 = phi %37, %40, %41
%43 = phi %34, %33, %42
%44 = phi %21, %33, %43
%45 = phi %18, %44, %33
%46:i32 = var
%47 = slt %45, %46
%48:i32 = zext %47
%49:i32 = var
%50:i32 = zext %49
%51 = and %48, %50
%52 = ne %51, 0:i32
blockpc %17 0 %52 1:i1
%53:i32 = var
blockpc %17 1 %53 1:i1
%54:i32 = var
%55:i32 = var
%56 = phi %17, %54, %55
%57 = block 2
%58:i32 = var
blockpc %57 0 %58 1:i1
%59:i32 = var
blockpc %57 1 %59 1:i1
%60 = block 2
%61:i32 = var
blockpc %60 0 %61 1:i1
%62:i32 = var
blockpc %60 1 %62 1:i1
%63 = block 2
%64:i32 = var
blockpc %63 0 %64 1:i1
%65:i32 = var
blockpc %63 1 %65 1:i1
%66:i32 = var
%67 = phi %63, %66, 0:i32
%68 = phi %60, %56, %67
%69 = block 2
%70:i32 = var
blockpc %69 0 %70 1:i1
%71:i32 = var
blockpc %69 1 %71 1:i1
%72 = block 2
%73:i32 = var
blockpc %72 0 %73 1:i1
%74:i32 = var
blockpc %72 1 %74 1:i1
%75:i32 = var
%76 = phi %72, %75, 0:i32
%77 = phi %69, %56, %76
%78 = phi %57, %68, %77
%79 = phi %11, %56, %78
%80 = block 2
%81:i32 = var
blockpc %80 0 %81 1:i1
%82:i32 = var
blockpc %80 1 %82 1:i1
%83:i32 = var
%84 = phi %80, 6:i32, %83
%85 = phi %5, %79, %84
%86 = slt -1:i32, %85
%87:i32 = var
%88:i32 = var
pc %86 1:i1
pc %87 1:i1
pc %88 1:i1
infer %4


; start LHS (in $27)
%0:i32 = var
%1 = block 2
%2 = block 2
%3 = block 2
%4 = block 2
%5 = block 2
%6:i32 = var
%7 = add %6, 4:i32 (hasExternalUses)
%8 = phi %5, %6, %7
%9 = block 2
%10 = add %6, 4:i32 (hasExternalUses)
%11 = phi %9, %6, %10
%12 = phi %4, %8, %11
%13 = block 2
%14 = block 2
%15:i32 = var
%16 = block 2
%17 = add %15, -4:i32 (hasExternalUses)
%18 = phi %16, %15, %17
%19 = phi %14, %15, %18
%20 = block 2
%21:i32 = var
%22 = add %21, 8:i32 (hasExternalUses)
%23 = add %22, 288:i32 (hasExternalUses)
%24 = phi %20, %22, %23
%25 = phi %13, %19, %24
%26 = phi %3, %12, %25
%27 = block 2
%28 = block 2
%29 = block 2
%30:i32 = var
%31:i32 = var
%32 = phi %29, %30, %31
%33 = phi %28, %26, %32
%34 = phi %27, %26, %33
%35 = phi %2, %26, %34
%36 = phi %1, %35, %26
%37 = eq %0, %36
%38:i32 = var
blockpc %1 0 %38 1:i1
%39:i32 = var
blockpc %1 1 %39 1:i1
%40:i32 = var
blockpc %2 0 %40 1:i1
%41:i32 = var
blockpc %2 1 %41 1:i1
%42:i32 = var
blockpc %3 0 %42 1:i1
%43:i32 = var
blockpc %3 1 %43 1:i1
%44:i32 = var
blockpc %4 0 %44 1:i1
%45:i32 = var
blockpc %4 1 %45 1:i1
%46:i32 = var
blockpc %5 0 %46 1:i1
%47:i32 = var
blockpc %5 1 %47 1:i1
%48:i32 = var
blockpc %9 0 %48 1:i1
%49:i32 = var
blockpc %9 1 %49 1:i1
%50:i32 = var
blockpc %13 0 %50 1:i1
%51:i32 = var
blockpc %13 1 %51 1:i1
%52:i32 = var
blockpc %14 0 %52 1:i1
%53:i32 = var
blockpc %14 1 %53 1:i1
%54:i32 = var
blockpc %16 0 %54 1:i1
%55:i32 = var
blockpc %16 1 %55 1:i1
%56:i32 = var
blockpc %20 0 %56 1:i1
%57:i32 = var
blockpc %20 1 %57 1:i1
%58:i32 = var
blockpc %27 0 %58 1:i1
%59:i32 = var
blockpc %27 1 %59 1:i1
%60:i32 = var
blockpc %28 0 %60 1:i1
%61:i32 = var
blockpc %28 1 %61 1:i1
%62:i32 = var
blockpc %29 0 %62 1:i1
%63:i32 = var
blockpc %29 1 %63 1:i1
%64:i32 = var
%65:i32 = var
%66:i32 = var
pc %64 1:i1
pc %65 1:i1
pc %66 1:i1
infer %37


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2:i32 = var
%3 = add %2, 524:i32 (hasExternalUses)
%4 = add %3, 8:i32 (hasExternalUses)
%5 = phi %0, %1, %4
%6 = add %5, 1:i32
%7 = add %3, 9:i32
%8 = eq %1, %7
blockpc %0 0 %8 1:i1
%9:i32 = zext %8
%10 = eq %9, 0:i32
blockpc %0 1 %10 1:i1
%11:i32 = var
%12 = block 2
%13 = block 2
%14:i32 = var
%15 = slt %14, 0:i32
blockpc %13 0 %15 1:i1
%16:i32 = zext %15
%17 = eq %16, 0:i32
blockpc %13 1 %17 1:i1
%18 = phi %13, 6:i32, %14
%19 = block 2
%20:i32 = var
%21 = ne %20, 102:i32
blockpc %19 0 %21 1:i1
%22:i32 = zext %21
%23 = eq %22, 0:i32
blockpc %19 1 %23 1:i1
%24 = block 2
%25:i32 = var
blockpc %24 0 %25 1:i1
%26:i32 = var
blockpc %24 1 %26 1:i1
%27 = block 2
%28:i32 = var
blockpc %27 0 %28 1:i1
%29:i32 = var
blockpc %27 1 %29 1:i1
%30:i32 = var
%31:i32 = var
%32 = phi %27, %30, %31
%33 = phi %24, %32, 0:i32
%34 = phi %19, %33, 0:i32
%35 = sub %18, %34
%36:i32 = var
%37 = add %35, %36
%38:i32 = var
%39 = slt %37, %38
blockpc %12 0 %39 1:i1
%40:i32 = var
blockpc %12 1 %40 1:i1
%41 = block 2
%42:i32 = var
blockpc %41 0 %42 1:i1
%43:i32 = var
blockpc %41 1 %43 1:i1
%44 = block 2
%45:i32 = var
blockpc %44 0 %45 1:i1
%46:i32 = var
blockpc %44 1 %46 1:i1
%47 = block 2
%48:i32 = var
blockpc %47 0 %48 1:i1
%49:i32 = var
blockpc %47 1 %49 1:i1
%50 = block 2
%51:i32 = var
blockpc %50 0 %51 1:i1
%52:i32 = var
blockpc %50 1 %52 1:i1
%53:i32 = var
%54:i32 = var
%55 = phi %50, %53, %54
%56 = block 2
%57:i32 = var
blockpc %56 0 %57 1:i1
%58:i32 = var
blockpc %56 1 %58 1:i1
%59:i32 = var
%60 = phi %56, %53, %59
%61 = phi %47, %55, %60
%62 = block 2
%63:i32 = var
blockpc %62 0 %63 1:i1
%64:i32 = var
blockpc %62 1 %64 1:i1
%65 = block 2
%66:i32 = var
blockpc %65 0 %66 1:i1
%67:i32 = var
blockpc %65 1 %67 1:i1
%68:i32 = var
%69 = block 2
%70:i32 = var
blockpc %69 0 %70 1:i1
%71:i32 = var
blockpc %69 1 %71 1:i1
%72:i32 = var
%73 = phi %69, %68, %72
%74 = phi %65, %68, %73
%75 = block 2
%76:i32 = var
blockpc %75 0 %76 1:i1
%77:i32 = var
blockpc %75 1 %77 1:i1
%78:i32 = var
%79:i32 = var
%80 = phi %75, %78, %79
%81 = phi %62, %74, %80
%82 = phi %44, %61, %81
%83 = block 2
%84:i32 = var
blockpc %83 0 %84 1:i1
%85:i32 = var
blockpc %83 1 %85 1:i1
%86 = block 2
%87:i32 = var
blockpc %86 0 %87 1:i1
%88:i32 = var
blockpc %86 1 %88 1:i1
%89 = block 2
%90:i32 = var
blockpc %89 0 %90 1:i1
%91:i32 = var
blockpc %89 1 %91 1:i1
%92:i32 = var
%93:i32 = var
%94 = phi %89, %92, %93
%95 = phi %86, %82, %94
%96 = phi %83, %82, %95
%97 = phi %41, %82, %96
%98 = phi %12, %97, %82
%99 = eq %11, %98
%100:i32 = var
%101:i32 = var
%102:i32 = var
pc %99 1:i1
pc %100 1:i1
pc %101 1:i1
pc %102 1:i1
infer %6


; start LHS (in $27)
%0:i32 = var
%1 = slt %0, 1:i32
%2:i32 = var
%3 = block 2
%4 = block 2
%5:i32 = var
%6 = slt %5, 0:i32
blockpc %4 0 %6 1:i1
%7:i32 = zext %6
%8 = eq %7, 0:i32
blockpc %4 1 %8 1:i1
%9 = phi %4, 6:i32, %5
%10 = block 2
%11:i32 = var
%12 = ne %11, 102:i32
blockpc %10 0 %12 1:i1
%13:i32 = zext %12
%14 = eq %13, 0:i32
blockpc %10 1 %14 1:i1
%15 = block 2
%16:i32 = var
blockpc %15 0 %16 1:i1
%17:i32 = var
blockpc %15 1 %17 1:i1
%18 = block 2
%19:i32 = var
blockpc %18 0 %19 1:i1
%20:i32 = var
blockpc %18 1 %20 1:i1
%21:i32 = var
%22:i32 = var
%23 = phi %18, %21, %22
%24 = phi %15, %23, 0:i32
%25 = phi %10, %24, 0:i32
%26 = sub %9, %25
%27:i32 = var
%28 = add %26, %27
%29:i32 = var
%30 = slt %28, %29
blockpc %3 0 %30 1:i1
%31:i32 = var
blockpc %3 1 %31 1:i1
%32 = block 2
%33:i32 = var
blockpc %32 0 %33 1:i1
%34:i32 = var
blockpc %32 1 %34 1:i1
%35 = block 2
%36:i32 = var
blockpc %35 0 %36 1:i1
%37:i32 = var
blockpc %35 1 %37 1:i1
%38 = block 2
%39:i32 = var
blockpc %38 0 %39 1:i1
%40:i32 = var
blockpc %38 1 %40 1:i1
%41 = block 2
%42:i32 = var
blockpc %41 0 %42 1:i1
%43:i32 = var
blockpc %41 1 %43 1:i1
%44:i32 = var
%45:i32 = var
%46 = phi %41, %44, %45
%47 = block 2
%48:i32 = var
blockpc %47 0 %48 1:i1
%49:i32 = var
blockpc %47 1 %49 1:i1
%50:i32 = var
%51 = phi %47, %44, %50
%52 = phi %38, %46, %51
%53 = block 2
%54:i32 = var
blockpc %53 0 %54 1:i1
%55:i32 = var
blockpc %53 1 %55 1:i1
%56 = block 2
%57:i32 = var
blockpc %56 0 %57 1:i1
%58:i32 = var
blockpc %56 1 %58 1:i1
%59:i32 = var
%60 = block 2
%61:i32 = var
blockpc %60 0 %61 1:i1
%62:i32 = var
blockpc %60 1 %62 1:i1
%63:i32 = var
%64 = phi %60, %59, %63
%65 = phi %56, %59, %64
%66 = block 2
%67:i32 = var
blockpc %66 0 %67 1:i1
%68:i32 = var
blockpc %66 1 %68 1:i1
%69:i32 = var
%70:i32 = var
%71 = phi %66, %69, %70
%72 = phi %53, %65, %71
%73 = phi %35, %52, %72
%74 = block 2
%75:i32 = var
blockpc %74 0 %75 1:i1
%76:i32 = var
blockpc %74 1 %76 1:i1
%77 = block 2
%78:i32 = var
blockpc %77 0 %78 1:i1
%79:i32 = var
blockpc %77 1 %79 1:i1
%80 = block 2
%81:i32 = var
blockpc %80 0 %81 1:i1
%82:i32 = var
blockpc %80 1 %82 1:i1
%83:i32 = var
%84:i32 = var
%85 = phi %80, %83, %84
%86 = phi %77, %73, %85
%87 = phi %74, %73, %86
%88 = phi %32, %73, %87
%89 = phi %3, %88, %73
%90 = eq %2, %89
%91:i32 = var
%92:i32 = var
%93:i32 = var
pc %90 1:i1
pc %91 1:i1
pc %92 1:i1
pc %93 1:i1
infer %1


; start LHS (in $27)
%0 = block 2
%1 = block 2
%2:i32 = var
%3 = and %2, 8:i32 (hasExternalUses)
%4 = phi %1, %3, 0:i32
%5 = and %2, 8:i32 (hasExternalUses)
%6 = phi %0, %4, %5
%7 = eq %6, 0:i32
%8:i32 = var
%9 = slt %8, 1:i32
%10:i32 = zext %9
%11 = and %7, %10
%12:i32 = var
%13 = or %12, 32:i32
%14 = eq %13, 103:i32
blockpc %0 0 %14 1:i1
%15:i32 = zext %14
%16 = eq %15, 0:i32
blockpc %0 1 %16 1:i1
%17 = eq %3, 0:i32
blockpc %1 0 %17 1:i1
%18:i32 = zext %17
%19 = eq %18, 0:i32
blockpc %1 1 %19 1:i1
%20:i32 = var
%21 = block 2
%22 = block 2
%23:i32 = var
%24 = slt %23, 0:i32
blockpc %22 0 %24 1:i1
%25:i32 = var
blockpc %22 1 %25 1:i1
%26 = phi %22, 6:i32, %23
%27 = block 2
%28:i32 = var
blockpc %27 0 %28 1:i1
%29:i32 = var
blockpc %27 1 %29 1:i1
%30 = block 2
%31:i32 = var
blockpc %30 0 %31 1:i1
%32:i32 = var
blockpc %30 1 %32 1:i1
%33 = block 2
%34:i32 = var
blockpc %33 0 %34 1:i1
%35:i32 = var
blockpc %33 1 %35 1:i1
%36:i32 = var
%37:i32 = var
%38 = phi %33, %36, %37
%39 = phi %30, %38, 0:i32
%40 = phi %27, %39, 0:i32
%41 = sub %26, %40
%42:i32 = var
%43 = add %41, %42
%44:i32 = var
%45 = slt %43, %44
blockpc %21 0 %45 1:i1
%46:i32 = var
blockpc %21 1 %46 1:i1
%47 = block 2
%48:i32 = var
blockpc %47 0 %48 1:i1
%49:i32 = var
blockpc %47 1 %49 1:i1
%50 = block 2
%51:i32 = var
blockpc %50 0 %51 1:i1
%52:i32 = var
blockpc %50 1 %52 1:i1
%53 = block 2
%54:i32 = var
blockpc %53 0 %54 1:i1
%55:i32 = var
blockpc %53 1 %55 1:i1
%56 = block 2
%57:i32 = var
blockpc %56 0 %57 1:i1
%58:i32 = var
blockpc %56 1 %58 1:i1
%59:i32 = var
%60:i32 = var
%61 = phi %56, %59, %60
%62 = block 2
%63:i32 = var
blockpc %62 0 %63 1:i1
%64:i32 = var
blockpc %62 1 %64 1:i1
%65:i32 = var
%66 = phi %62, %59, %65
%67 = phi %53, %61, %66
%68 = block 2
%69:i32 = var
blockpc %68 0 %69 1:i1
%70:i32 = var
blockpc %68 1 %70 1:i1
%71 = block 2
%72:i32 = var
blockpc %71 0 %72 1:i1
%73:i32 = var
blockpc %71 1 %73 1:i1
%74:i32 = var
%75 = block 2
%76:i32 = var
blockpc %75 0 %76 1:i1
%77:i32 = var
blockpc %75 1 %77 1:i1
%78:i32 = var
%79 = phi %75, %74, %78
%80 = phi %71, %74, %79
%81 = block 2
%82:i32 = var
blockpc %81 0 %82 1:i1
%83:i32 = var
blockpc %81 1 %83 1:i1
%84:i32 = var
%85:i32 = var
%86 = phi %81, %84, %85
%87 = phi %68, %80, %86
%88 = phi %50, %67, %87
%89 = block 2
%90:i32 = var
blockpc %89 0 %90 1:i1
%91:i32 = var
blockpc %89 1 %91 1:i1
%92 = block 2
%93:i32 = var
blockpc %92 0 %93 1:i1
%94:i32 = var
blockpc %92 1 %94 1:i1
%95 = block 2
%96:i32 = var
blockpc %95 0 %96 1:i1
%97:i32 = var
blockpc %95 1 %97 1:i1
%98:i32 = var
%99:i32 = var
%100 = phi %95, %98, %99
%101 = phi %92, %88, %100
%102 = phi %89, %88, %101
%103 = phi %47, %88, %102
%104 = phi %21, %103, %88
%105 = eq %20, %104
%106:i32 = var
%107:i32 = var
%108:i32 = var
pc %105 1:i1
pc %106 1:i1
pc %107 1:i1
pc %108 1:i1
infer %11


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2:i32 = var
%3 = add %2, 524:i32 (hasExternalUses)
%4 = add %3, 8:i32 (hasExternalUses)
%5 = phi %0, %1, %4
%6 = ule %5, %3
%7 = add %3, 9:i32
%8 = eq %1, %7
blockpc %0 0 %8 1:i1
%9:i32 = zext %8
%10 = eq %9, 0:i32
blockpc %0 1 %10 1:i1
%11:i32 = var
%12 = block 2
%13 = block 2
%14:i32 = var
blockpc %13 0 %14 1:i1
%15:i32 = var
blockpc %13 1 %15 1:i1
%16:i32 = var
%17 = phi %13, 6:i32, %16
%18 = block 2
%19:i32 = var
blockpc %18 0 %19 1:i1
%20:i32 = var
blockpc %18 1 %20 1:i1
%21 = block 2
%22:i32 = var
blockpc %21 0 %22 1:i1
%23:i32 = var
blockpc %21 1 %23 1:i1
%24 = block 2
%25:i32 = var
blockpc %24 0 %25 1:i1
%26:i32 = var
blockpc %24 1 %26 1:i1
%27:i32 = var
%28:i32 = var
%29 = phi %24, %27, %28
%30 = phi %21, %29, 0:i32
%31 = phi %18, %30, 0:i32
%32 = sub %17, %31
%33:i32 = var
%34 = add %32, %33
%35:i32 = var
%36 = slt %34, %35
blockpc %12 0 %36 1:i1
%37:i32 = var
blockpc %12 1 %37 1:i1
%38 = block 2
%39:i32 = var
blockpc %38 0 %39 1:i1
%40:i32 = var
blockpc %38 1 %40 1:i1
%41 = block 2
%42:i32 = var
blockpc %41 0 %42 1:i1
%43:i32 = var
blockpc %41 1 %43 1:i1
%44 = block 2
%45:i32 = var
blockpc %44 0 %45 1:i1
%46:i32 = var
blockpc %44 1 %46 1:i1
%47 = block 2
%48:i32 = var
blockpc %47 0 %48 1:i1
%49:i32 = var
blockpc %47 1 %49 1:i1
%50:i32 = var
%51:i32 = var
%52 = phi %47, %50, %51
%53 = block 2
%54:i32 = var
blockpc %53 0 %54 1:i1
%55:i32 = var
blockpc %53 1 %55 1:i1
%56:i32 = var
%57 = phi %53, %50, %56
%58 = phi %44, %52, %57
%59 = block 2
%60:i32 = var
blockpc %59 0 %60 1:i1
%61:i32 = var
blockpc %59 1 %61 1:i1
%62 = block 2
%63:i32 = var
blockpc %62 0 %63 1:i1
%64:i32 = var
blockpc %62 1 %64 1:i1
%65:i32 = var
%66 = block 2
%67:i32 = var
blockpc %66 0 %67 1:i1
%68:i32 = var
blockpc %66 1 %68 1:i1
%69:i32 = var
%70 = phi %66, %65, %69
%71 = phi %62, %65, %70
%72 = block 2
%73:i32 = var
blockpc %72 0 %73 1:i1
%74:i32 = var
blockpc %72 1 %74 1:i1
%75:i32 = var
%76:i32 = var
%77 = phi %72, %75, %76
%78 = phi %59, %71, %77
%79 = phi %41, %58, %78
%80 = block 2
%81:i32 = var
blockpc %80 0 %81 1:i1
%82:i32 = var
blockpc %80 1 %82 1:i1
%83 = block 2
%84:i32 = var
blockpc %83 0 %84 1:i1
%85:i32 = var
blockpc %83 1 %85 1:i1
%86 = block 2
%87:i32 = var
blockpc %86 0 %87 1:i1
%88:i32 = var
blockpc %86 1 %88 1:i1
%89:i32 = var
%90:i32 = var
%91 = phi %86, %89, %90
%92 = phi %83, %79, %91
%93 = phi %80, %79, %92
%94 = phi %38, %79, %93
%95 = phi %12, %94, %79
%96 = eq %11, %95
%97:i32 = zext %96
%98 = eq %97, 0:i32
%99:i32 = var
%100:i32 = var
%101:i32 = var
pc %98 1:i1
pc %99 1:i1
pc %100 1:i1
pc %101 1:i1
infer %6


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2:i32 = var
%3 = add %2, 524:i32 (hasExternalUses)
%4 = add %3, 8:i32 (hasExternalUses)
%5 = phi %0, %1, %4
%6 = sub 0:i32, %3
%7 = add %5, %6
%8 = add %3, 9:i32
%9 = eq %1, %8
blockpc %0 0 %9 1:i1
%10:i32 = zext %9
%11 = eq %10, 0:i32
blockpc %0 1 %11 1:i1
%12:i32 = var
%13 = block 2
%14 = block 2
%15:i32 = var
blockpc %14 0 %15 1:i1
%16:i32 = var
blockpc %14 1 %16 1:i1
%17:i32 = var
%18 = phi %14, 6:i32, %17
%19 = block 2
%20:i32 = var
blockpc %19 0 %20 1:i1
%21:i32 = var
blockpc %19 1 %21 1:i1
%22 = block 2
%23:i32 = var
blockpc %22 0 %23 1:i1
%24:i32 = var
blockpc %22 1 %24 1:i1
%25 = block 2
%26:i32 = var
blockpc %25 0 %26 1:i1
%27:i32 = var
blockpc %25 1 %27 1:i1
%28:i32 = var
%29:i32 = var
%30 = phi %25, %28, %29
%31 = phi %22, %30, 0:i32
%32 = phi %19, %31, 0:i32
%33 = sub %18, %32
%34:i32 = var
%35 = add %33, %34
%36:i32 = var
%37 = slt %35, %36
blockpc %13 0 %37 1:i1
%38:i32 = var
blockpc %13 1 %38 1:i1
%39 = block 2
%40:i32 = var
blockpc %39 0 %40 1:i1
%41:i32 = var
blockpc %39 1 %41 1:i1
%42 = block 2
%43:i32 = var
blockpc %42 0 %43 1:i1
%44:i32 = var
blockpc %42 1 %44 1:i1
%45 = block 2
%46:i32 = var
blockpc %45 0 %46 1:i1
%47:i32 = var
blockpc %45 1 %47 1:i1
%48 = block 2
%49:i32 = var
blockpc %48 0 %49 1:i1
%50:i32 = var
blockpc %48 1 %50 1:i1
%51:i32 = var
%52:i32 = var
%53 = phi %48, %51, %52
%54 = block 2
%55:i32 = var
blockpc %54 0 %55 1:i1
%56:i32 = var
blockpc %54 1 %56 1:i1
%57:i32 = var
%58 = phi %54, %51, %57
%59 = phi %45, %53, %58
%60 = block 2
%61:i32 = var
blockpc %60 0 %61 1:i1
%62:i32 = var
blockpc %60 1 %62 1:i1
%63 = block 2
%64:i32 = var
blockpc %63 0 %64 1:i1
%65:i32 = var
blockpc %63 1 %65 1:i1
%66:i32 = var
%67 = block 2
%68:i32 = var
blockpc %67 0 %68 1:i1
%69:i32 = var
blockpc %67 1 %69 1:i1
%70:i32 = var
%71 = phi %67, %66, %70
%72 = phi %63, %66, %71
%73 = block 2
%74:i32 = var
blockpc %73 0 %74 1:i1
%75:i32 = var
blockpc %73 1 %75 1:i1
%76:i32 = var
%77:i32 = var
%78 = phi %73, %76, %77
%79 = phi %60, %72, %78
%80 = phi %42, %59, %79
%81 = block 2
%82:i32 = var
blockpc %81 0 %82 1:i1
%83:i32 = var
blockpc %81 1 %83 1:i1
%84 = block 2
%85:i32 = var
blockpc %84 0 %85 1:i1
%86:i32 = var
blockpc %84 1 %86 1:i1
%87 = block 2
%88:i32 = var
blockpc %87 0 %88 1:i1
%89:i32 = var
blockpc %87 1 %89 1:i1
%90:i32 = var
%91:i32 = var
%92 = phi %87, %90, %91
%93 = phi %84, %80, %92
%94 = phi %81, %80, %93
%95 = phi %39, %80, %94
%96 = phi %13, %95, %80
%97 = eq %12, %96
%98:i32 = zext %97
%99 = eq %98, 0:i32
%100:i32 = var
%101:i32 = var
%102:i32 = var
pc %99 1:i1
pc %100 1:i1
pc %101 1:i1
pc %102 1:i1
infer %7


; start LHS (in $27)
%0:i32 = var
%1 = add %0, -1:i32
%2:i32 = var
%3 = block 2
%4 = block 2
%5:i32 = var
blockpc %4 0 %5 1:i1
%6:i32 = var
blockpc %4 1 %6 1:i1
%7:i32 = var
%8 = phi %4, 6:i32, %7
%9 = block 2
%10:i32 = var
blockpc %9 0 %10 1:i1
%11:i32 = var
blockpc %9 1 %11 1:i1
%12 = block 2
%13:i32 = var
blockpc %12 0 %13 1:i1
%14:i32 = var
blockpc %12 1 %14 1:i1
%15 = block 2
%16:i32 = var
blockpc %15 0 %16 1:i1
%17:i32 = var
blockpc %15 1 %17 1:i1
%18:i32 = var
%19:i32 = var
%20 = phi %15, %18, %19
%21 = phi %12, %20, 0:i32
%22 = phi %9, %21, 0:i32
%23 = sub %8, %22
%24:i32 = var
%25 = add %23, %24
%26:i32 = var
%27 = slt %25, %26
blockpc %3 0 %27 1:i1
%28:i32 = var
blockpc %3 1 %28 1:i1
%29 = block 2
%30:i32 = var
blockpc %29 0 %30 1:i1
%31:i32 = var
blockpc %29 1 %31 1:i1
%32 = block 2
%33:i32 = var
blockpc %32 0 %33 1:i1
%34:i32 = var
blockpc %32 1 %34 1:i1
%35 = block 2
%36:i32 = var
blockpc %35 0 %36 1:i1
%37:i32 = var
blockpc %35 1 %37 1:i1
%38 = block 2
%39:i32 = var
blockpc %38 0 %39 1:i1
%40:i32 = var
blockpc %38 1 %40 1:i1
%41:i32 = var
%42:i32 = var
%43 = phi %38, %41, %42
%44 = block 2
%45:i32 = var
blockpc %44 0 %45 1:i1
%46:i32 = var
blockpc %44 1 %46 1:i1
%47:i32 = var
%48 = phi %44, %41, %47
%49 = phi %35, %43, %48
%50 = block 2
%51:i32 = var
blockpc %50 0 %51 1:i1
%52:i32 = var
blockpc %50 1 %52 1:i1
%53 = block 2
%54:i32 = var
blockpc %53 0 %54 1:i1
%55:i32 = var
blockpc %53 1 %55 1:i1
%56:i32 = var
%57 = block 2
%58:i32 = var
blockpc %57 0 %58 1:i1
%59:i32 = var
blockpc %57 1 %59 1:i1
%60:i32 = var
%61 = phi %57, %56, %60
%62 = phi %53, %56, %61
%63 = block 2
%64:i32 = var
blockpc %63 0 %64 1:i1
%65:i32 = var
blockpc %63 1 %65 1:i1
%66:i32 = var
%67:i32 = var
%68 = phi %63, %66, %67
%69 = phi %50, %62, %68
%70 = phi %32, %49, %69
%71 = block 2
%72:i32 = var
blockpc %71 0 %72 1:i1
%73:i32 = var
blockpc %71 1 %73 1:i1
%74 = block 2
%75:i32 = var
blockpc %74 0 %75 1:i1
%76:i32 = var
blockpc %74 1 %76 1:i1
%77 = block 2
%78:i32 = var
blockpc %77 0 %78 1:i1
%79:i32 = var
blockpc %77 1 %79 1:i1
%80:i32 = var
%81:i32 = var
%82 = phi %77, %80, %81
%83 = phi %74, %70, %82
%84 = phi %71, %70, %83
%85 = phi %29, %70, %84
%86 = phi %3, %85, %70
%87 = eq %2, %86
%88:i32 = zext %87
%89 = eq %88, 0:i32
%90:i32 = var
%91:i32 = var
%92:i32 = var
pc %89 1:i1
pc %90 1:i1
pc %91 1:i1
pc %92 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 524:i32 (hasExternalUses)
%2:i32 = var
%3 = add %2, -1:i32 (hasExternalUses)
%4 = ult %1, %3
%5:i32 = var
%6 = block 2
%7 = block 2
%8:i32 = var
blockpc %7 0 %8 1:i1
%9:i32 = var
blockpc %7 1 %9 1:i1
%10:i32 = var
%11 = phi %7, 6:i32, %10
%12 = block 2
%13:i32 = var
blockpc %12 0 %13 1:i1
%14:i32 = var
blockpc %12 1 %14 1:i1
%15 = block 2
%16:i32 = var
blockpc %15 0 %16 1:i1
%17:i32 = var
blockpc %15 1 %17 1:i1
%18 = block 2
%19:i32 = var
blockpc %18 0 %19 1:i1
%20:i32 = var
blockpc %18 1 %20 1:i1
%21:i32 = var
%22:i32 = var
%23 = phi %18, %21, %22
%24 = phi %15, %23, 0:i32
%25 = phi %12, %24, 0:i32
%26 = sub %11, %25
%27:i32 = var
%28 = add %26, %27
%29:i32 = var
%30 = slt %28, %29
blockpc %6 0 %30 1:i1
%31:i32 = var
blockpc %6 1 %31 1:i1
%32 = block 2
%33:i32 = var
blockpc %32 0 %33 1:i1
%34:i32 = var
blockpc %32 1 %34 1:i1
%35 = block 2
%36:i32 = var
blockpc %35 0 %36 1:i1
%37:i32 = var
blockpc %35 1 %37 1:i1
%38 = block 2
%39:i32 = var
blockpc %38 0 %39 1:i1
%40:i32 = var
blockpc %38 1 %40 1:i1
%41 = block 2
%42:i32 = var
blockpc %41 0 %42 1:i1
%43:i32 = var
blockpc %41 1 %43 1:i1
%44:i32 = var
%45:i32 = var
%46 = phi %41, %44, %45
%47 = block 2
%48:i32 = var
blockpc %47 0 %48 1:i1
%49:i32 = var
blockpc %47 1 %49 1:i1
%50:i32 = var
%51 = phi %47, %44, %50
%52 = phi %38, %46, %51
%53 = block 2
%54:i32 = var
blockpc %53 0 %54 1:i1
%55:i32 = var
blockpc %53 1 %55 1:i1
%56 = block 2
%57:i32 = var
blockpc %56 0 %57 1:i1
%58:i32 = var
blockpc %56 1 %58 1:i1
%59:i32 = var
%60 = block 2
%61:i32 = var
blockpc %60 0 %61 1:i1
%62:i32 = var
blockpc %60 1 %62 1:i1
%63:i32 = var
%64 = phi %60, %59, %63
%65 = phi %56, %59, %64
%66 = block 2
%67:i32 = var
blockpc %66 0 %67 1:i1
%68:i32 = var
blockpc %66 1 %68 1:i1
%69:i32 = var
%70:i32 = var
%71 = phi %66, %69, %70
%72 = phi %53, %65, %71
%73 = phi %35, %52, %72
%74 = block 2
%75:i32 = var
blockpc %74 0 %75 1:i1
%76:i32 = var
blockpc %74 1 %76 1:i1
%77 = block 2
%78:i32 = var
blockpc %77 0 %78 1:i1
%79:i32 = var
blockpc %77 1 %79 1:i1
%80 = block 2
%81:i32 = var
blockpc %80 0 %81 1:i1
%82:i32 = var
blockpc %80 1 %82 1:i1
%83:i32 = var
%84:i32 = var
%85 = phi %80, %83, %84
%86 = phi %77, %73, %85
%87 = phi %74, %73, %86
%88 = phi %32, %73, %87
%89 = phi %6, %88, %73
%90 = eq %5, %89
%91:i32 = zext %90
%92 = eq %91, 0:i32
%93:i32 = var
%94:i32 = var
%95:i32 = var
pc %92 1:i1
pc %93 1:i1
pc %94 1:i1
pc %95 1:i1
infer %4


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 524:i32 (hasExternalUses)
%2 = add %1, 9:i32 (hasExternalUses)
%3 = block 3
%4 = block 2
%5:i32 = var
%6 = add %1, 8:i32 (hasExternalUses)
%7 = phi %4, %5, %6
%8 = add %7, 1:i32 (hasExternalUses)
%9 = block 2
%10:i32 = var
%11 = add %10, -1:i32 (hasExternalUses)
%12 = phi %9, %8, %11
%13 = phi %3, %8, %7, %12
%14 = sub %2, %13
%15 = eq %5, %2
blockpc %4 0 %15 1:i1
%16:i32 = zext %15
%17 = eq %16, 0:i32
blockpc %4 1 %17 1:i1
%18:i32 = var
%19 = block 2
%20 = block 2
%21:i32 = var
blockpc %20 0 %21 1:i1
%22:i32 = var
blockpc %20 1 %22 1:i1
%23:i32 = var
%24 = phi %20, 6:i32, %23
%25 = block 2
%26:i32 = var
blockpc %25 0 %26 1:i1
%27:i32 = var
blockpc %25 1 %27 1:i1
%28 = block 2
%29:i32 = var
blockpc %28 0 %29 1:i1
%30:i32 = var
blockpc %28 1 %30 1:i1
%31 = block 2
%32:i32 = var
blockpc %31 0 %32 1:i1
%33:i32 = var
blockpc %31 1 %33 1:i1
%34:i32 = var
%35:i32 = var
%36 = phi %31, %34, %35
%37 = phi %28, %36, 0:i32
%38 = phi %25, %37, 0:i32
%39 = sub %24, %38
%40:i32 = var
%41 = add %39, %40
%42:i32 = var
%43 = slt %41, %42
blockpc %19 0 %43 1:i1
%44:i32 = var
blockpc %19 1 %44 1:i1
%45 = block 2
%46:i32 = var
blockpc %45 0 %46 1:i1
%47:i32 = var
blockpc %45 1 %47 1:i1
%48 = block 2
%49:i32 = var
blockpc %48 0 %49 1:i1
%50:i32 = var
blockpc %48 1 %50 1:i1
%51 = block 2
%52:i32 = var
blockpc %51 0 %52 1:i1
%53:i32 = var
blockpc %51 1 %53 1:i1
%54 = block 2
%55:i32 = var
blockpc %54 0 %55 1:i1
%56:i32 = var
blockpc %54 1 %56 1:i1
%57:i32 = var
%58:i32 = var
%59 = phi %54, %57, %58
%60 = block 2
%61:i32 = var
blockpc %60 0 %61 1:i1
%62:i32 = var
blockpc %60 1 %62 1:i1
%63:i32 = var
%64 = phi %60, %57, %63
%65 = phi %51, %59, %64
%66 = block 2
%67:i32 = var
blockpc %66 0 %67 1:i1
%68:i32 = var
blockpc %66 1 %68 1:i1
%69 = block 2
%70:i32 = var
blockpc %69 0 %70 1:i1
%71:i32 = var
blockpc %69 1 %71 1:i1
%72:i32 = var
%73 = block 2
%74:i32 = var
blockpc %73 0 %74 1:i1
%75:i32 = var
blockpc %73 1 %75 1:i1
%76:i32 = var
%77 = phi %73, %72, %76
%78 = phi %69, %72, %77
%79 = block 2
%80:i32 = var
blockpc %79 0 %80 1:i1
%81:i32 = var
blockpc %79 1 %81 1:i1
%82:i32 = var
%83:i32 = var
%84 = phi %79, %82, %83
%85 = phi %66, %78, %84
%86 = phi %48, %65, %85
%87 = block 2
%88:i32 = var
blockpc %87 0 %88 1:i1
%89:i32 = var
blockpc %87 1 %89 1:i1
%90 = block 2
%91:i32 = var
blockpc %90 0 %91 1:i1
%92:i32 = var
blockpc %90 1 %92 1:i1
%93 = block 2
%94:i32 = var
blockpc %93 0 %94 1:i1
%95:i32 = var
blockpc %93 1 %95 1:i1
%96:i32 = var
%97:i32 = var
%98 = phi %93, %96, %97
%99 = phi %90, %86, %98
%100 = phi %87, %86, %99
%101 = phi %45, %86, %100
%102 = phi %19, %101, %86
%103 = eq %18, %102
blockpc %9 0 %103 1:i1
%104:i32 = var
blockpc %9 1 %104 1:i1
%105:i32 = var
%106:i32 = var
%107:i32 = var
pc %105 1:i1
pc %106 1:i1
pc %107 1:i1
infer %14


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 524:i32 (hasExternalUses)
%2 = add %1, 9:i32 (hasExternalUses)
%3 = block 3
%4 = block 2
%5:i32 = var
%6 = add %1, 8:i32 (hasExternalUses)
%7 = phi %4, %5, %6
%8 = add %7, 1:i32 (hasExternalUses)
%9 = block 2
%10:i32 = var
%11 = add %10, -1:i32 (hasExternalUses)
%12 = phi %9, %8, %11
%13 = phi %3, %8, %7, %12
%14 = sub %2, %13 (hasExternalUses)
%15:i32 = var
%16 = slt %14, %15
%17 = eq %5, %2
blockpc %4 0 %17 1:i1
%18:i32 = zext %17
%19 = eq %18, 0:i32
blockpc %4 1 %19 1:i1
%20:i32 = var
%21 = block 2
%22 = block 2
%23:i32 = var
blockpc %22 0 %23 1:i1
%24:i32 = var
blockpc %22 1 %24 1:i1
%25:i32 = var
%26 = phi %22, 6:i32, %25
%27 = block 2
%28:i32 = var
blockpc %27 0 %28 1:i1
%29:i32 = var
blockpc %27 1 %29 1:i1
%30 = block 2
%31:i32 = var
blockpc %30 0 %31 1:i1
%32:i32 = var
blockpc %30 1 %32 1:i1
%33 = block 2
%34:i32 = var
blockpc %33 0 %34 1:i1
%35:i32 = var
blockpc %33 1 %35 1:i1
%36:i32 = var
%37:i32 = var
%38 = phi %33, %36, %37
%39 = phi %30, %38, 0:i32
%40 = phi %27, %39, 0:i32
%41 = sub %26, %40
%42:i32 = var
%43 = add %41, %42
%44:i32 = var
%45 = slt %43, %44
blockpc %21 0 %45 1:i1
%46:i32 = var
blockpc %21 1 %46 1:i1
%47 = block 2
%48:i32 = var
blockpc %47 0 %48 1:i1
%49:i32 = var
blockpc %47 1 %49 1:i1
%50 = block 2
%51:i32 = var
blockpc %50 0 %51 1:i1
%52:i32 = var
blockpc %50 1 %52 1:i1
%53 = block 2
%54:i32 = var
blockpc %53 0 %54 1:i1
%55:i32 = var
blockpc %53 1 %55 1:i1
%56 = block 2
%57:i32 = var
blockpc %56 0 %57 1:i1
%58:i32 = var
blockpc %56 1 %58 1:i1
%59:i32 = var
%60:i32 = var
%61 = phi %56, %59, %60
%62 = block 2
%63:i32 = var
blockpc %62 0 %63 1:i1
%64:i32 = var
blockpc %62 1 %64 1:i1
%65:i32 = var
%66 = phi %62, %59, %65
%67 = phi %53, %61, %66
%68 = block 2
%69:i32 = var
blockpc %68 0 %69 1:i1
%70:i32 = var
blockpc %68 1 %70 1:i1
%71 = block 2
%72:i32 = var
blockpc %71 0 %72 1:i1
%73:i32 = var
blockpc %71 1 %73 1:i1
%74:i32 = var
%75 = block 2
%76:i32 = var
blockpc %75 0 %76 1:i1
%77:i32 = var
blockpc %75 1 %77 1:i1
%78:i32 = var
%79 = phi %75, %74, %78
%80 = phi %71, %74, %79
%81 = block 2
%82:i32 = var
blockpc %81 0 %82 1:i1
%83:i32 = var
blockpc %81 1 %83 1:i1
%84:i32 = var
%85:i32 = var
%86 = phi %81, %84, %85
%87 = phi %68, %80, %86
%88 = phi %50, %67, %87
%89 = block 2
%90:i32 = var
blockpc %89 0 %90 1:i1
%91:i32 = var
blockpc %89 1 %91 1:i1
%92 = block 2
%93:i32 = var
blockpc %92 0 %93 1:i1
%94:i32 = var
blockpc %92 1 %94 1:i1
%95 = block 2
%96:i32 = var
blockpc %95 0 %96 1:i1
%97:i32 = var
blockpc %95 1 %97 1:i1
%98:i32 = var
%99:i32 = var
%100 = phi %95, %98, %99
%101 = phi %92, %88, %100
%102 = phi %89, %88, %101
%103 = phi %47, %88, %102
%104 = phi %21, %103, %88
%105 = eq %20, %104
blockpc %9 0 %105 1:i1
%106:i32 = var
blockpc %9 1 %106 1:i1
%107:i32 = var
%108:i32 = var
%109:i32 = var
pc %107 1:i1
pc %108 1:i1
pc %109 1:i1
infer %16


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 4:i32
%2 = block 2
%3:i32 = var
%4 = or %3, 32:i32
%5 = eq %4, 103:i32
blockpc %2 0 %5 1:i1
%6:i32 = zext %5
%7 = eq %6, 0:i32
blockpc %2 1 %7 1:i1
%8 = block 2
%9:i32 = var
%10 = and %9, 8:i32
%11 = eq %10, 0:i32
blockpc %8 0 %11 1:i1
%12:i32 = zext %11
%13 = eq %12, 0:i32
blockpc %8 1 %13 1:i1
%14 = block 2
%15 = block 2
%16:i32 = var
blockpc %15 0 %16 1:i1
%17:i32 = var
blockpc %15 1 %17 1:i1
%18 = block 2
%19:i32 = var
blockpc %18 0 %19 1:i1
%20:i32 = var
blockpc %18 1 %20 1:i1
%21 = block 2
%22:i32 = var
blockpc %21 0 %22 1:i1
%23:i32 = var
blockpc %21 1 %23 1:i1
%24 = block 2
%25:i32 = var
blockpc %24 0 %25 1:i1
%26:i32 = var
blockpc %24 1 %26 1:i1
%27:i32 = var
%28:i32 = var
%29 = phi %24, %27, %28
%30 = phi %21, %29, 0:i32
%31 = block 2
%32:i32 = var
blockpc %31 0 %32 1:i1
%33:i32 = var
blockpc %31 1 %33 1:i1
%34 = block 2
%35:i32 = var
blockpc %34 0 %35 1:i1
%36:i32 = var
blockpc %34 1 %36 1:i1
%37:i32 = var
%38:i32 = var
%39 = phi %34, %37, %38
%40 = phi %31, %30, %39
%41 = phi %18, %30, %40
%42 = phi %15, %41, %30
%43:i32 = var
%44 = slt %42, %43
%45:i32 = zext %44
%46:i32 = var
%47:i32 = zext %46
%48 = and %45, %47
%49 = ne %48, 0:i32
blockpc %14 0 %49 1:i1
%50:i32 = var
blockpc %14 1 %50 1:i1
%51:i32 = var
%52:i32 = var
%53 = phi %14, %51, %52
%54 = block 2
%55:i32 = var
blockpc %54 0 %55 1:i1
%56:i32 = var
blockpc %54 1 %56 1:i1
%57 = block 2
%58:i32 = var
blockpc %57 0 %58 1:i1
%59:i32 = var
blockpc %57 1 %59 1:i1
%60 = block 2
%61:i32 = var
blockpc %60 0 %61 1:i1
%62:i32 = var
blockpc %60 1 %62 1:i1
%63:i32 = var
%64 = phi %60, %63, 0:i32
%65 = phi %57, %53, %64
%66 = block 2
%67:i32 = var
blockpc %66 0 %67 1:i1
%68:i32 = var
blockpc %66 1 %68 1:i1
%69 = block 2
%70:i32 = var
blockpc %69 0 %70 1:i1
%71:i32 = var
blockpc %69 1 %71 1:i1
%72:i32 = var
%73 = phi %69, %72, 0:i32
%74 = phi %66, %53, %73
%75 = phi %54, %65, %74
%76 = phi %8, %53, %75
%77 = block 2
%78:i32 = var
blockpc %77 0 %78 1:i1
%79:i32 = var
blockpc %77 1 %79 1:i1
%80:i32 = var
%81 = phi %77, 6:i32, %80
%82 = phi %2, %76, %81
%83 = slt -1:i32, %82
%84:i32 = var
%85:i32 = var
pc %83 1:i1
pc %84 1:i1
pc %85 1:i1
infer %1


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 4:i32 (hasExternalUses)
%2 = block 2
%3:i32 = var
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i32 = var
%10 = add %9, 4:i32 (hasExternalUses)
%11 = phi %8, %9, %10
%12 = block 2
%13 = add %9, 4:i32 (hasExternalUses)
%14 = phi %12, %9, %13
%15 = phi %7, %11, %14
%16 = block 2
%17 = block 2
%18:i32 = var
%19 = block 2
%20:i32 = var
%21 = phi %19, %18, %20
%22 = phi %17, %18, %21
%23 = block 2
%24:i32 = var
%25 = add %24, 8:i32 (hasExternalUses)
%26 = add %25, 288:i32 (hasExternalUses)
%27 = phi %23, %25, %26
%28 = phi %16, %22, %27
%29 = phi %6, %15, %28
%30 = block 2
%31 = block 2
%32 = block 2
%33:i32 = var
%34:i32 = var
%35 = phi %32, %33, %34
%36 = phi %31, %29, %35
%37 = phi %30, %29, %36
%38 = phi %5, %29, %37
%39 = phi %4, %38, %29
%40 = add %39, 4:i32
%41 = phi %2, %3, %40
%42 = ult %1, %41
%43:i32 = var
blockpc %2 0 %43 1:i1
%44:i32 = var
blockpc %2 1 %44 1:i1
%45:i32 = var
blockpc %4 0 %45 1:i1
%46:i32 = var
blockpc %4 1 %46 1:i1
%47:i32 = var
blockpc %5 0 %47 1:i1
%48:i32 = var
blockpc %5 1 %48 1:i1
%49:i32 = var
blockpc %6 0 %49 1:i1
%50:i32 = var
blockpc %6 1 %50 1:i1
%51:i32 = var
blockpc %7 0 %51 1:i1
%52:i32 = var
blockpc %7 1 %52 1:i1
%53:i32 = var
blockpc %8 0 %53 1:i1
%54:i32 = var
blockpc %8 1 %54 1:i1
%55:i32 = var
blockpc %12 0 %55 1:i1
%56:i32 = var
blockpc %12 1 %56 1:i1
%57:i32 = var
blockpc %16 0 %57 1:i1
%58:i32 = var
blockpc %16 1 %58 1:i1
%59:i32 = var
blockpc %17 0 %59 1:i1
%60:i32 = var
blockpc %17 1 %60 1:i1
%61:i32 = var
blockpc %19 0 %61 1:i1
%62:i32 = var
blockpc %19 1 %62 1:i1
%63:i32 = var
blockpc %23 0 %63 1:i1
%64:i32 = var
blockpc %23 1 %64 1:i1
%65:i32 = var
blockpc %30 0 %65 1:i1
%66:i32 = var
blockpc %30 1 %66 1:i1
%67:i32 = var
blockpc %31 0 %67 1:i1
%68:i32 = var
blockpc %31 1 %68 1:i1
%69:i32 = var
blockpc %32 0 %69 1:i1
%70:i32 = var
blockpc %32 1 %70 1:i1
%71:i32 = var
%72:i32 = var
%73:i32 = var
pc %71 1:i1
pc %72 1:i1
pc %73 1:i1
infer %42


; start LHS (in $27)
%0:i32 = var
%1:i32 = var
%2 = add %1, 524:i32 (hasExternalUses)
%3 = add %2, 9:i32 (hasExternalUses)
%4 = block 3
%5 = block 2
%6:i32 = var
%7 = add %2, 8:i32 (hasExternalUses)
%8 = phi %5, %6, %7
%9 = add %8, 1:i32 (hasExternalUses)
%10 = block 2
%11:i32 = var
%12 = add %11, -1:i32 (hasExternalUses)
%13 = phi %10, %9, %12
%14 = phi %4, %9, %8, %13
%15 = sub %3, %14 (hasExternalUses)
%16 = sub %0, %15
%17 = eq %6, %3
blockpc %5 0 %17 1:i1
%18:i32 = zext %17
%19 = eq %18, 0:i32
blockpc %5 1 %19 1:i1
%20:i32 = var
%21 = block 2
%22 = block 2
%23:i32 = var
blockpc %22 0 %23 1:i1
%24:i32 = var
blockpc %22 1 %24 1:i1
%25:i32 = var
%26 = phi %22, 6:i32, %25
%27 = block 2
%28:i32 = var
blockpc %27 0 %28 1:i1
%29:i32 = var
blockpc %27 1 %29 1:i1
%30 = block 2
%31:i32 = var
blockpc %30 0 %31 1:i1
%32:i32 = var
blockpc %30 1 %32 1:i1
%33 = block 2
%34:i32 = var
blockpc %33 0 %34 1:i1
%35:i32 = var
blockpc %33 1 %35 1:i1
%36:i32 = var
%37:i32 = var
%38 = phi %33, %36, %37
%39 = phi %30, %38, 0:i32
%40 = phi %27, %39, 0:i32
%41 = sub %26, %40
%42:i32 = var
%43 = add %41, %42
%44:i32 = var
%45 = slt %43, %44
blockpc %21 0 %45 1:i1
%46:i32 = var
blockpc %21 1 %46 1:i1
%47 = block 2
%48:i32 = var
blockpc %47 0 %48 1:i1
%49:i32 = var
blockpc %47 1 %49 1:i1
%50 = block 2
%51:i32 = var
blockpc %50 0 %51 1:i1
%52:i32 = var
blockpc %50 1 %52 1:i1
%53 = block 2
%54:i32 = var
blockpc %53 0 %54 1:i1
%55:i32 = var
blockpc %53 1 %55 1:i1
%56 = block 2
%57:i32 = var
blockpc %56 0 %57 1:i1
%58:i32 = var
blockpc %56 1 %58 1:i1
%59:i32 = var
%60:i32 = var
%61 = phi %56, %59, %60
%62 = block 2
%63:i32 = var
blockpc %62 0 %63 1:i1
%64:i32 = var
blockpc %62 1 %64 1:i1
%65:i32 = var
%66 = phi %62, %59, %65
%67 = phi %53, %61, %66
%68 = block 2
%69:i32 = var
blockpc %68 0 %69 1:i1
%70:i32 = var
blockpc %68 1 %70 1:i1
%71 = block 2
%72:i32 = var
blockpc %71 0 %72 1:i1
%73:i32 = var
blockpc %71 1 %73 1:i1
%74:i32 = var
%75 = block 2
%76:i32 = var
blockpc %75 0 %76 1:i1
%77:i32 = var
blockpc %75 1 %77 1:i1
%78:i32 = var
%79 = phi %75, %74, %78
%80 = phi %71, %74, %79
%81 = block 2
%82:i32 = var
blockpc %81 0 %82 1:i1
%83:i32 = var
blockpc %81 1 %83 1:i1
%84:i32 = var
%85:i32 = var
%86 = phi %81, %84, %85
%87 = phi %68, %80, %86
%88 = phi %50, %67, %87
%89 = block 2
%90:i32 = var
blockpc %89 0 %90 1:i1
%91:i32 = var
blockpc %89 1 %91 1:i1
%92 = block 2
%93:i32 = var
blockpc %92 0 %93 1:i1
%94:i32 = var
blockpc %92 1 %94 1:i1
%95 = block 2
%96:i32 = var
blockpc %95 0 %96 1:i1
%97:i32 = var
blockpc %95 1 %97 1:i1
%98:i32 = var
%99:i32 = var
%100 = phi %95, %98, %99
%101 = phi %92, %88, %100
%102 = phi %89, %88, %101
%103 = phi %47, %88, %102
%104 = phi %21, %103, %88
%105 = eq %20, %104
blockpc %10 0 %105 1:i1
%106:i32 = var
blockpc %10 1 %106 1:i1
%107:i32 = var
%108:i32 = var
%109:i32 = var
pc %107 1:i1
pc %108 1:i1
pc %109 1:i1
infer %16


; start LHS (in $27)
%0:i32 = var
%1:i32 = var
%2 = add %1, 524:i32 (hasExternalUses)
%3 = add %2, 9:i32 (hasExternalUses)
%4 = block 3
%5 = block 2
%6:i32 = var
%7 = add %2, 8:i32 (hasExternalUses)
%8 = phi %5, %6, %7
%9 = add %8, 1:i32 (hasExternalUses)
%10 = block 2
%11:i32 = var
%12 = add %11, -1:i32 (hasExternalUses)
%13 = phi %10, %9, %12
%14 = phi %4, %9, %8, %13
%15 = sub %3, %14 (hasExternalUses)
%16 = sub %0, %15 (hasExternalUses)
%17 = slt -1:i32, %16
%18 = eq %6, %3
blockpc %5 0 %18 1:i1
%19:i32 = zext %18
%20 = eq %19, 0:i32
blockpc %5 1 %20 1:i1
%21:i32 = var
%22 = block 2
%23 = block 2
%24:i32 = var
blockpc %23 0 %24 1:i1
%25:i32 = var
blockpc %23 1 %25 1:i1
%26:i32 = var
%27 = phi %23, 6:i32, %26
%28 = block 2
%29:i32 = var
blockpc %28 0 %29 1:i1
%30:i32 = var
blockpc %28 1 %30 1:i1
%31 = block 2
%32:i32 = var
blockpc %31 0 %32 1:i1
%33:i32 = var
blockpc %31 1 %33 1:i1
%34 = block 2
%35:i32 = var
blockpc %34 0 %35 1:i1
%36:i32 = var
blockpc %34 1 %36 1:i1
%37:i32 = var
%38:i32 = var
%39 = phi %34, %37, %38
%40 = phi %31, %39, 0:i32
%41 = phi %28, %40, 0:i32
%42 = sub %27, %41
%43:i32 = var
%44 = add %42, %43
%45:i32 = var
%46 = slt %44, %45
blockpc %22 0 %46 1:i1
%47:i32 = var
blockpc %22 1 %47 1:i1
%48 = block 2
%49:i32 = var
blockpc %48 0 %49 1:i1
%50:i32 = var
blockpc %48 1 %50 1:i1
%51 = block 2
%52:i32 = var
blockpc %51 0 %52 1:i1
%53:i32 = var
blockpc %51 1 %53 1:i1
%54 = block 2
%55:i32 = var
blockpc %54 0 %55 1:i1
%56:i32 = var
blockpc %54 1 %56 1:i1
%57 = block 2
%58:i32 = var
blockpc %57 0 %58 1:i1
%59:i32 = var
blockpc %57 1 %59 1:i1
%60:i32 = var
%61:i32 = var
%62 = phi %57, %60, %61
%63 = block 2
%64:i32 = var
blockpc %63 0 %64 1:i1
%65:i32 = var
blockpc %63 1 %65 1:i1
%66:i32 = var
%67 = phi %63, %60, %66
%68 = phi %54, %62, %67
%69 = block 2
%70:i32 = var
blockpc %69 0 %70 1:i1
%71:i32 = var
blockpc %69 1 %71 1:i1
%72 = block 2
%73:i32 = var
blockpc %72 0 %73 1:i1
%74:i32 = var
blockpc %72 1 %74 1:i1
%75:i32 = var
%76 = block 2
%77:i32 = var
blockpc %76 0 %77 1:i1
%78:i32 = var
blockpc %76 1 %78 1:i1
%79:i32 = var
%80 = phi %76, %75, %79
%81 = phi %72, %75, %80
%82 = block 2
%83:i32 = var
blockpc %82 0 %83 1:i1
%84:i32 = var
blockpc %82 1 %84 1:i1
%85:i32 = var
%86:i32 = var
%87 = phi %82, %85, %86
%88 = phi %69, %81, %87
%89 = phi %51, %68, %88
%90 = block 2
%91:i32 = var
blockpc %90 0 %91 1:i1
%92:i32 = var
blockpc %90 1 %92 1:i1
%93 = block 2
%94:i32 = var
blockpc %93 0 %94 1:i1
%95:i32 = var
blockpc %93 1 %95 1:i1
%96 = block 2
%97:i32 = var
blockpc %96 0 %97 1:i1
%98:i32 = var
blockpc %96 1 %98 1:i1
%99:i32 = var
%100:i32 = var
%101 = phi %96, %99, %100
%102 = phi %93, %89, %101
%103 = phi %90, %89, %102
%104 = phi %48, %89, %103
%105 = phi %22, %104, %89
%106 = eq %21, %105
blockpc %10 0 %106 1:i1
%107:i32 = var
blockpc %10 1 %107 1:i1
%108:i32 = var
%109:i32 = var
%110:i32 = var
pc %108 1:i1
pc %109 1:i1
pc %110 1:i1
infer %17


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 4:i32 (hasExternalUses)
%2 = block 2
%3:i32 = var
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i32 = var
%10:i32 = var
%11 = phi %8, %9, %10
%12 = block 2
%13:i32 = var
%14 = phi %12, %9, %13
%15 = phi %7, %11, %14
%16 = block 2
%17 = block 2
%18:i32 = var
%19 = block 2
%20:i32 = var
%21 = phi %19, %18, %20
%22 = phi %17, %18, %21
%23 = block 2
%24:i32 = var
%25:i32 = var
%26 = phi %23, %24, %25
%27 = phi %16, %22, %26
%28 = phi %6, %15, %27
%29 = block 2
%30 = block 2
%31 = block 2
%32:i32 = var
%33:i32 = var
%34 = phi %31, %32, %33
%35 = phi %30, %28, %34
%36 = phi %29, %28, %35
%37 = phi %5, %28, %36
%38 = phi %4, %37, %28
%39 = add %38, 4:i32
%40 = phi %2, %3, %39
%41 = ult %1, %40
%42:i32 = zext %41
%43:i32 = var
%44:i32 = zext %43
%45 = and %42, %44
%46:i32 = var
blockpc %2 0 %46 1:i1
%47:i32 = var
blockpc %2 1 %47 1:i1
%48:i32 = var
blockpc %4 0 %48 1:i1
%49:i32 = var
blockpc %4 1 %49 1:i1
%50:i32 = var
blockpc %5 0 %50 1:i1
%51:i32 = var
blockpc %5 1 %51 1:i1
%52:i32 = var
blockpc %6 0 %52 1:i1
%53:i32 = var
blockpc %6 1 %53 1:i1
%54:i32 = var
blockpc %7 0 %54 1:i1
%55:i32 = var
blockpc %7 1 %55 1:i1
%56:i32 = var
blockpc %8 0 %56 1:i1
%57:i32 = var
blockpc %8 1 %57 1:i1
%58:i32 = var
blockpc %12 0 %58 1:i1
%59:i32 = var
blockpc %12 1 %59 1:i1
%60:i32 = var
blockpc %16 0 %60 1:i1
%61:i32 = var
blockpc %16 1 %61 1:i1
%62:i32 = var
blockpc %17 0 %62 1:i1
%63:i32 = var
blockpc %17 1 %63 1:i1
%64:i32 = var
blockpc %19 0 %64 1:i1
%65:i32 = var
blockpc %19 1 %65 1:i1
%66:i32 = var
blockpc %23 0 %66 1:i1
%67:i32 = var
blockpc %23 1 %67 1:i1
%68:i32 = var
blockpc %29 0 %68 1:i1
%69:i32 = var
blockpc %29 1 %69 1:i1
%70:i32 = var
blockpc %30 0 %70 1:i1
%71:i32 = var
blockpc %30 1 %71 1:i1
%72:i32 = var
blockpc %31 0 %72 1:i1
%73:i32 = var
blockpc %31 1 %73 1:i1
%74:i32 = var
%75:i32 = var
%76:i32 = var
pc %74 1:i1
pc %75 1:i1
pc %76 1:i1
infer %45


; start LHS (in $27)
%0 = block 2
%1 = block 2
%2 = block 2
%3 = block 2
%4 = block 2
%5:i32 = var
%6 = phi %4, 6:i32, %5
%7:i32 = var
%8 = and %7, 1:i32
%9 = add %6, %8 (hasExternalUses)
%10 = add %9, -1:i32
%11 = block 2
%12 = block 2
%13 = block 2
%14 = block 2
%15:i32 = var
%16:i32 = var
%17 = phi %14, %15, %16
%18 = phi %13, %17, 0:i32
%19 = block 2
%20 = block 2
%21:i32 = var
%22:i32 = var
%23 = phi %20, %21, %22
%24 = phi %19, %18, %23
%25 = phi %12, %18, %24
%26 = phi %11, %25, %18
%27 = sub %10, %26 (hasExternalUses)
%28 = add %9, -1:i32 (hasExternalUses)
%29 = phi %3, %27, %28
%30 = block 2
%31 = block 2
%32 = block 2
%33:i32 = var
%34 = phi %32, %33, 0:i32
%35 = phi %31, %29, %34
%36 = block 2
%37 = block 2
%38:i32 = var
%39 = phi %37, %38, 0:i32
%40 = phi %36, %29, %39
%41 = phi %30, %35, %40
%42 = phi %2, %29, %41
%43 = phi %1, %42, %6
%44:i32 = var
%45 = phi %0, %43, %44
%46 = add %45, 18:i32
%47:i32 = var
blockpc %0 0 %47 1:i1
%48:i32 = var
blockpc %0 1 %48 1:i1
%49:i32 = var
blockpc %1 0 %49 1:i1
%50:i32 = var
blockpc %1 1 %50 1:i1
%51:i32 = var
blockpc %2 0 %51 1:i1
%52:i32 = var
blockpc %2 1 %52 1:i1
%53:i32 = var
blockpc %3 0 %53 1:i1
%54:i32 = var
blockpc %3 1 %54 1:i1
%55:i32 = var
blockpc %4 0 %55 1:i1
%56:i32 = var
blockpc %4 1 %56 1:i1
%57:i32 = var
blockpc %11 0 %57 1:i1
%58:i32 = var
blockpc %11 1 %58 1:i1
%59:i32 = var
blockpc %12 0 %59 1:i1
%60:i32 = var
blockpc %12 1 %60 1:i1
%61:i32 = var
blockpc %13 0 %61 1:i1
%62:i32 = var
blockpc %13 1 %62 1:i1
%63:i32 = var
blockpc %14 0 %63 1:i1
%64:i32 = var
blockpc %14 1 %64 1:i1
%65:i32 = var
blockpc %19 0 %65 1:i1
%66:i32 = var
blockpc %19 1 %66 1:i1
%67:i32 = var
blockpc %20 0 %67 1:i1
%68:i32 = var
blockpc %20 1 %68 1:i1
%69:i32 = var
blockpc %30 0 %69 1:i1
%70:i32 = var
blockpc %30 1 %70 1:i1
%71:i32 = var
blockpc %31 0 %71 1:i1
%72:i32 = var
blockpc %31 1 %72 1:i1
%73:i32 = var
blockpc %32 0 %73 1:i1
%74:i32 = var
blockpc %32 1 %74 1:i1
%75:i32 = var
blockpc %36 0 %75 1:i1
%76:i32 = var
blockpc %36 1 %76 1:i1
%77:i32 = var
blockpc %37 0 %77 1:i1
%78:i32 = var
blockpc %37 1 %78 1:i1
%79:i32 = var
%80:i32 = var
pc %79 1:i1
pc %80 1:i1
infer %46


; start LHS (in $27)
%0:i32 = var
%1 = add %0, 512:i32 (hasExternalUses)
%2 = add %1, 12:i32 (hasExternalUses)
%3 = block 2
%4 = block 2
%5:i32 = var
%6:i32 = var
%7 = add %6, -1:i32 (hasExternalUses)
%8 = phi %4, %5, %7
%9 = add %8, -2:i32 (hasExternalUses)
%10 = phi %3, 0:i32, %9
%11 = sub %2, %10
%12 = block 2
%13:i32 = var
%14 = or %13, 32:i32
%15 = eq %14, 103:i32
blockpc %12 0 %15 1:i1
%16:i32 = zext %15
%17 = eq %16, 0:i32
blockpc %12 1 %17 1:i1
%18 = block 2
%19:i32 = var
%20:i32 = zext %19
%21:i32 = var
%22:i32 = zext %21
%23 = and %20, %22
%24 = ne %23, 0:i32
blockpc %18 0 %24 1:i1
%25 = eq %23, 0:i32
blockpc %18 1 %25 1:i1
%26:i32 = var
%27:i32 = var
%28 = phi %18, %26, %27
%29 = phi %12, %28, %13
%30 = or %29, 32:i32
%31 = eq %30, 102:i32
blockpc %3 0 %31 1:i1
%32:i32 = var
blockpc %3 1 %32 1:i1
%33:i32 = var
blockpc %4 0 %33 1:i1
%34:i32 = var
blockpc %4 1 %34 1:i1
%35:i32 = var
%36:i32 = var
pc %35 1:i1
pc %36 1:i1
infer %11


; start LHS (in $27)
%0:i32 = var
%1 = xor %0, 8192:i32
%2:i64 = var
%3 = and %2, 9218868437227405312:i64
%4 = eq %3, 9218868437227405312:i64
%5:i32 = zext %4
%6 = eq %5, 0:i32
pc %6 1:i1
infer %1


; start LHS (in $27)
%0 = block 2
%1:i32 = var
%2 = add %1, 512:i32
%3 = add %2, 12:i32 (hasExternalUses)
%4 = block 2
%5:i32 = var
%6 = add %2, 11:i32 (hasExternalUses)
%7 = phi %4, %5, %6
%8 = add %7, -2:i32 (hasExternalUses)
%9 = sub %3, %8 (hasExternalUses)
%10 = block 2
%11:i32 = var
%12 = and %11, 2049:i32
%13 = ne %12, 0:i32 (hasExternalUses)
%14:i32 = zext %13
%15 = phi %10, 1:i32, %14
%16 = or %15, 2:i32 (hasExternalUses)
%17 = add %9, %16
%18 = block 2
%19:i32 = var
%20 = add %19, 2:i32 (hasExternalUses)
%21 = block 2
%22 = block 2
%23:i32 = var
%24 = add %23, 1:i32 (hasExternalUses)
%25 = add %23, 2:i32 (hasExternalUses)
%26 = phi %22, %24, %25
%27 = phi %21, %26, %24
%28 = add %1, 524:i32 (hasExternalUses)
%29 = sub %27, %28 (hasExternalUses)
%30 = phi %18, %20, %29
%31 = add %17, %30 (hasExternalUses)
%32 = block 2
%33:i32 = var
%34:i32 = var
%35 = phi %32, %33, %34
%36 = phi %0, %31, %35
%37:i32 = var
%38 = slt %36, %37
%39:i32 = var
blockpc %4 0 %39 1:i1
%40:i32 = var
blockpc %4 1 %40 1:i1
%41:i32 = var
blockpc %10 0 %41 1:i1
%42:i32 = var
blockpc %10 1 %42 1:i1
%43:i32 = var
blockpc %21 0 %43 1:i1
%44:i32 = var
blockpc %21 1 %44 1:i1
%45:i32 = var
blockpc %22 0 %45 1:i1
%46:i32 = var
blockpc %22 1 %46 1:i1
%47:i32 = var
blockpc %32 0 %47 1:i1
%48:i32 = var
blockpc %32 1 %48 1:i1
infer %38


; function: $28

; start LHS (in $28)
%0:i32 = var
%1 = and %0, 255:i32
infer %1


; start LHS (in $28)
%0:i32 = var
%1 = ne %0, 0:i32
infer %1


; start LHS (in $28)
%0:i32 = var
%1 = and %0, 3:i32
infer %1


; start LHS (in $28)
%0:i32 = var
%1 = and %0, 3:i32
%2 = ne %1, 0:i32
infer %2


; start LHS (in $28)
%0:i32 = var
%1 = ne %0, 0:i32 (hasExternalUses)
%2:i32 = zext %1
%3:i32 = var
%4 = and %3, 3:i32
%5 = ne %4, 0:i32
%6:i32 = zext %5
%7 = and %2, %6
infer %7


; start LHS (in $28)
%0:i32 = var
%1 = and %0, 255:i32
%2:i32 = var
%3 = ne %2, 0:i32
%4:i32 = zext %3
%5:i32 = var
%6 = and %5, 3:i32
%7 = ne %6, 0:i32
%8:i32 = zext %7
%9 = and %4, %8
%10 = ne %9, 0:i32
pc %10 1:i1
infer %1


; start LHS (in $28)
%0:i32 = var
%1:i32 = var
%2 = and %1, 255:i32
%3 = eq %0, %2
%4:i32 = var
%5 = ne %4, 0:i32
%6:i32 = zext %5
%7:i32 = var
%8 = and %7, 3:i32
%9 = ne %8, 0:i32
%10:i32 = zext %9
%11 = and %6, %10
%12 = ne %11, 0:i32
pc %12 1:i1
infer %3


; start LHS (in $28)
%0:i32 = var
%1 = add %0, -1:i32
%2:i32 = var
%3 = ne %2, 0:i32
%4:i32 = zext %3
%5:i32 = var
%6 = and %5, 3:i32
%7 = ne %6, 0:i32
%8:i32 = zext %7
%9 = and %4, %8
%10 = ne %9, 0:i32
pc %10 1:i1
infer %1


; start LHS (in $28)
%0:i32 = var
%1 = add %0, -1:i32 (hasExternalUses)
%2 = ne %1, 0:i32
%3:i32 = var
%4 = ne %3, 0:i32
%5:i32 = zext %4
%6:i32 = var
%7 = and %6, 3:i32
%8 = ne %7, 0:i32
%9:i32 = zext %8
%10 = and %5, %9
%11 = ne %10, 0:i32
pc %11 1:i1
infer %2


; start LHS (in $28)
%0:i32 = var
%1 = add %0, 1:i32
%2:i32 = var
%3 = ne %2, 0:i32
%4:i32 = zext %3
%5:i32 = var
%6 = and %5, 3:i32
%7 = ne %6, 0:i32
%8:i32 = zext %7
%9 = and %4, %8
%10 = ne %9, 0:i32
pc %10 1:i1
infer %1


; start LHS (in $28)
%0:i32 = var
%1 = add %0, 1:i32 (hasExternalUses)
%2 = and %1, 3:i32
%3:i32 = var
%4 = ne %3, 0:i32
%5:i32 = zext %4
%6:i32 = var
%7 = and %6, 3:i32
%8 = ne %7, 0:i32
%9:i32 = zext %8
%10 = and %5, %9
%11 = ne %10, 0:i32
pc %11 1:i1
infer %2


; start LHS (in $28)
%0:i32 = var
%1 = add %0, 1:i32 (hasExternalUses)
%2 = and %1, 3:i32
%3 = ne %2, 0:i32
%4:i32 = var
%5 = ne %4, 0:i32
%6:i32 = zext %5
%7:i32 = var
%8 = and %7, 3:i32
%9 = ne %8, 0:i32
%10:i32 = zext %9
%11 = and %6, %10
%12 = ne %11, 0:i32
pc %12 1:i1
infer %3


; start LHS (in $28)
%0:i32 = var
%1 = add %0, -1:i32 (hasExternalUses)
%2 = ne %1, 0:i32 (hasExternalUses)
%3:i32 = zext %2
%4:i32 = var
%5 = add %4, 1:i32 (hasExternalUses)
%6 = and %5, 3:i32
%7 = ne %6, 0:i32
%8:i32 = zext %7
%9 = and %3, %8
%10:i32 = var
%11 = ne %10, 0:i32
%12:i32 = zext %11
%13:i32 = var
%14 = and %13, 3:i32
%15 = ne %14, 0:i32
%16:i32 = zext %15
%17 = and %12, %16
%18 = ne %17, 0:i32
pc %18 1:i1
infer %9


; start LHS (in $28)
%0 = block 2
%1:i32 = var
%2:i32 = var
%3 = phi %0, %1, %2
%4 = and %3, 255:i32
infer %4


; start LHS (in $28)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3:i32 = var
%4 = phi %1, %2, %3
%5 = and %4, 255:i32 (hasExternalUses)
%6 = eq %0, %5
infer %6


; start LHS (in $28)
%0 = block 2
%1:i32 = var
%2:i32 = var
%3 = and %2, 255:i32
%4 = phi %0, %1, %3
%5 = mul %4, 16843009:i32
%6:i32 = var
%7:i32 = var
%8 = phi %0, %7, %2
%9 = and %8, 255:i32
%10 = eq %6, %9
%11:i32 = zext %10
%12 = eq %11, 0:i32
pc %12 1:i1
infer %5


; start LHS (in $28)
%0 = block 2
%1:i32 = var
%2 = block 2
%3:i32 = var
%4 = add %1, -1:i32 (hasExternalUses)
%5 = phi %2, %3, %4
%6 = phi %0, %1, %5
%7 = ult 3:i32, %6
%8 = ne %3, 0:i32
%9:i32 = zext %8
%10:i32 = var
%11 = and %10, 3:i32
%12 = ne %11, 0:i32
%13:i32 = zext %12
%14 = and %9, %13
%15 = ne %14, 0:i32
blockpc %2 0 %15 1:i1
%16 = eq %14, 0:i32
blockpc %2 1 %16 1:i1
%17:i32 = var
%18:i32 = var
%19:i32 = var
%20 = phi %0, %18, %19
%21 = and %20, 255:i32
%22 = eq %17, %21
%23:i32 = zext %22
%24 = eq %23, 0:i32
pc %24 1:i1
infer %7


; start LHS (in $28)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3:i32 = var
%4 = and %3, 255:i32
%5 = phi %1, %2, %4
%6 = mul %5, 16843009:i32
%7 = xor %0, %6
%8:i32 = var
%9 = block 2
%10:i32 = var
%11 = ne %10, 0:i32
%12:i32 = zext %11
%13:i32 = var
%14 = and %13, 3:i32
%15 = ne %14, 0:i32
%16:i32 = zext %15
%17 = and %12, %16
%18 = ne %17, 0:i32
blockpc %9 0 %18 1:i1
%19 = eq %17, 0:i32
blockpc %9 1 %19 1:i1
%20 = add %8, -1:i32
%21 = phi %9, %10, %20
%22 = phi %1, %8, %21
%23 = ult 3:i32, %22
%24:i32 = var
%25:i32 = var
%26 = phi %1, %25, %3
%27 = and %26, 255:i32
%28 = eq %24, %27
%29:i32 = zext %28
%30 = eq %29, 0:i32
pc %23 1:i1
pc %30 1:i1
infer %7


; start LHS (in $28)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3:i32 = var
%4 = and %3, 255:i32
%5 = phi %1, %2, %4
%6 = mul %5, 16843009:i32
%7 = xor %0, %6 (hasExternalUses)
%8 = and %7, -2139062144:i32
%9:i32 = var
%10 = block 2
%11:i32 = var
%12 = ne %11, 0:i32
%13:i32 = zext %12
%14:i32 = var
%15 = and %14, 3:i32
%16 = ne %15, 0:i32
%17:i32 = zext %16
%18 = and %13, %17
%19 = ne %18, 0:i32
blockpc %10 0 %19 1:i1
%20 = eq %18, 0:i32
blockpc %10 1 %20 1:i1
%21 = add %9, -1:i32
%22 = phi %10, %11, %21
%23 = phi %1, %9, %22
%24 = ult 3:i32, %23
%25:i32 = var
%26:i32 = var
%27 = phi %1, %26, %3
%28 = and %27, 255:i32
%29 = eq %25, %28
%30:i32 = zext %29
%31 = eq %30, 0:i32
pc %24 1:i1
pc %31 1:i1
infer %8


; start LHS (in $28)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3:i32 = var
%4 = and %3, 255:i32
%5 = phi %1, %2, %4
%6 = mul %5, 16843009:i32
%7 = xor %0, %6 (hasExternalUses)
%8 = and %7, -2139062144:i32
%9 = xor %8, -2139062144:i32
%10:i32 = var
%11 = block 2
%12:i32 = var
%13 = ne %12, 0:i32
%14:i32 = zext %13
%15:i32 = var
%16 = and %15, 3:i32
%17 = ne %16, 0:i32
%18:i32 = zext %17
%19 = and %14, %18
%20 = ne %19, 0:i32
blockpc %11 0 %20 1:i1
%21 = eq %19, 0:i32
blockpc %11 1 %21 1:i1
%22 = add %10, -1:i32
%23 = phi %11, %12, %22
%24 = phi %1, %10, %23
%25 = ult 3:i32, %24
%26:i32 = var
%27:i32 = var
%28 = phi %1, %27, %3
%29 = and %28, 255:i32
%30 = eq %26, %29
%31:i32 = zext %30
%32 = eq %31, 0:i32
pc %25 1:i1
pc %32 1:i1
infer %9


; start LHS (in $28)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3:i32 = var
%4 = and %3, 255:i32
%5 = phi %1, %2, %4
%6 = mul %5, 16843009:i32
%7 = xor %0, %6 (hasExternalUses)
%8 = add %7, -16843009:i32
%9:i32 = var
%10 = block 2
%11:i32 = var
%12 = ne %11, 0:i32
%13:i32 = zext %12
%14:i32 = var
%15 = and %14, 3:i32
%16 = ne %15, 0:i32
%17:i32 = zext %16
%18 = and %13, %17
%19 = ne %18, 0:i32
blockpc %10 0 %19 1:i1
%20 = eq %18, 0:i32
blockpc %10 1 %20 1:i1
%21 = add %9, -1:i32
%22 = phi %10, %11, %21
%23 = phi %1, %9, %22
%24 = ult 3:i32, %23
%25:i32 = var
%26:i32 = var
%27 = phi %1, %26, %3
%28 = and %27, 255:i32
%29 = eq %25, %28
%30:i32 = zext %29
%31 = eq %30, 0:i32
pc %24 1:i1
pc %31 1:i1
infer %8


; start LHS (in $28)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3:i32 = var
%4 = and %3, 255:i32
%5 = phi %1, %2, %4
%6 = mul %5, 16843009:i32
%7 = xor %0, %6
%8 = and %7, -2139062144:i32
%9 = xor %8, -2139062144:i32
%10 = add %7, -16843009:i32
%11 = and %9, %10
%12:i32 = var
%13 = block 2
%14:i32 = var
%15 = ne %14, 0:i32
%16:i32 = zext %15
%17:i32 = var
%18 = and %17, 3:i32
%19 = ne %18, 0:i32
%20:i32 = zext %19
%21 = and %16, %20
%22 = ne %21, 0:i32
blockpc %13 0 %22 1:i1
%23 = eq %21, 0:i32
blockpc %13 1 %23 1:i1
%24 = add %12, -1:i32
%25 = phi %13, %14, %24
%26 = phi %1, %12, %25
%27 = ult 3:i32, %26
%28:i32 = var
pc %27 1:i1
pc %28 1:i1
infer %11


; start LHS (in $28)
%0:i32 = var
%1 = block 2
%2:i32 = var
%3:i32 = var
%4 = and %3, 255:i32
%5 = phi %1, %2, %4
%6 = mul %5, 16843009:i32
%7 = xor %0, %6
%8 = and %7, -2139062144:i32
%9 = xor %8, -2139062144:i32
%10 = add %7, -16843009:i32
%11 = and %9, %10
%12 = eq %11, 0:i32
%13:i32 = var
%14 = block 2
%15:i32 = var
%16 = ne %15, 0:i32
%17:i32 = zext %16
%18:i32 = var
%19 = and %18, 3:i32
%20 = ne %19, 0:i32
%21:i32 = zext %20
%22 = and %17, %21
%23 = ne %22, 0:i32
blockpc %14 0 %23 1:i1
%24 = eq %22, 0:i32
blockpc %14 1 %24 1:i1
%25 = add %13, -1:i32
%26 = phi %14, %15, %25
%27 = phi %1, %13, %26
%28 = ult 3:i32, %27
%29:i32 = var
pc %28 1:i1
pc %29 1:i1
infer %12


; start LHS (in $28)
%0:i32 = var
%1 = add %0, 4:i32
%2:i32 = var
%3 = block 2
%4:i32 = var
%5:i32 = var
%6 = and %5, 255:i32
%7 = phi %3, %4, %6
%8 = mul %7, 16843009:i32
%9 = xor %2, %8
%10 = and %9, -2139062144:i32
%11 = xor %10, -2139062144:i32
%12 = add %9, -16843009:i32
%13 = and %11, %12
%14 = eq %13, 0:i32
%15:i32 = var
%16 = block 2
%17:i32 = var
%18 = ne %17, 0:i32
%19:i32 = zext %18
%20:i32 = var
%21 = and %20, 3:i32
%22 = ne %21, 0:i32
%23:i32 = zext %22
%24 = and %19, %23
%25 = ne %24, 0:i32
blockpc %16 0 %25 1:i1
%26 = eq %24, 0:i32
blockpc %16 1 %26 1:i1
%27 = add %15, -1:i32
%28 = phi %16, %17, %27
%29 = phi %3, %15, %28
%30 = ult 3:i32, %29
%31:i32 = var
pc %14 1:i1
pc %30 1:i1
pc %31 1:i1
infer %1


; start LHS (in $28)
%0:i32 = var
%1 = add %0, -4:i32
%2:i32 = var
%3 = block 2
%4:i32 = var
%5:i32 = var
%6 = and %5, 255:i32
%7 = phi %3, %4, %6
%8 = mul %7, 16843009:i32
%9 = xor %2, %8
%10 = and %9, -2139062144:i32
%11 = xor %10, -2139062144:i32
%12 = add %9, -16843009:i32
%13 = and %11, %12
%14 = eq %13, 0:i32
%15:i32 = var
%16 = block 2
%17:i32 = var
%18 = ne %17, 0:i32
%19:i32 = zext %18
%20:i32 = var
%21 = and %20, 3:i32
%22 = ne %21, 0:i32
%23:i32 = zext %22
%24 = and %19, %23
%25 = ne %24, 0:i32
blockpc %16 0 %25 1:i1
%26 = eq %24, 0:i32
blockpc %16 1 %26 1:i1
%27 = add %15, -1:i32
%28 = phi %16, %17, %27
%29 = phi %3, %15, %28
%30 = ult 3:i32, %29
%31:i32 = var
pc %14 1:i1
pc %30 1:i1
pc %31 1:i1
infer %1


; start LHS (in $28)
%0:i32 = var
%1 = add %0, -4:i32 (hasExternalUses)
%2 = ult 3:i32, %1
%3:i32 = var
%4 = block 2
%5:i32 = var
%6:i32 = var
%7 = and %6, 255:i32
%8 = phi %4, %5, %7
%9 = mul %8, 16843009:i32
%10 = xor %3, %9
%11 = and %10, -2139062144:i32
%12 = xor %11, -2139062144:i32
%13 = add %10, -16843009:i32
%14 = and %12, %13
%15 = eq %14, 0:i32
%16:i32 = var
%17 = block 2
%18:i32 = var
%19 = ne %18, 0:i32
%20:i32 = zext %19
%21:i32 = var
%22 = and %21, 3:i32
%23 = ne %22, 0:i32
%24:i32 = zext %23
%25 = and %20, %24
%26 = ne %25, 0:i32
blockpc %17 0 %26 1:i1
%27 = eq %25, 0:i32
blockpc %17 1 %27 1:i1
%28:i32 = var
%29 = phi %17, %18, %28
%30 = phi %4, %16, %29
%31 = ult 3:i32, %30
%32:i32 = var
pc %15 1:i1
pc %31 1:i1
pc %32 1:i1
infer %2


; start LHS (in $28)
%0 = block 2
%1:i32 = var
%2 = add %1, -4:i32 (hasExternalUses)
%3 = block 2
%4:i32 = var
%5 = block 2
%6:i32 = var
%7 = add %4, -1:i32 (hasExternalUses)
%8 = phi %5, %6, %7
%9 = phi %3, %4, %8
%10 = phi %0, %2, %9
%11 = eq %10, 0:i32
%12 = ne %6, 0:i32
%13:i32 = zext %12
%14:i32 = var
%15 = and %14, 3:i32
%16 = ne %15, 0:i32
%17:i32 = zext %16
%18 = and %13, %17
%19 = ne %18, 0:i32
blockpc %5 0 %19 1:i1
%20 = eq %18, 0:i32
blockpc %5 1 %20 1:i1
%21:i32 = var
%22:i32 = var
%23:i32 = var
%24 = phi %3, %22, %23
%25 = and %24, 255:i32
%26 = eq %21, %25
%27:i32 = zext %26
%28 = eq %27, 0:i32
pc %28 1:i1
infer %11


; start LHS (in $28)
%0:i32 = var
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = var
%5 = phi %2, %3, %4
%6 = and %5, 255:i32 (hasExternalUses)
%7 = block 2
%8:i32 = var
%9 = phi %7, %8, %6
%10 = phi %1, %6, %9
%11 = eq %0, %10
%12:i32 = var
%13 = eq %12, %6
%14:i32 = zext %13
%15 = eq %14, 0:i32
pc %15 1:i1
infer %11


; start LHS (in $28)
%0:i32 = var
%1 = add %0, 1:i32
%2:i32 = var
%3 = block 2
%4:i32 = var
%5:i32 = var
%6 = phi %3, %4, %5
%7 = and %6, 255:i32
%8 = eq %2, %7
%9:i32 = zext %8
%10 = eq %9, 0:i32
pc %10 1:i1
infer %1


; start LHS (in $28)
%0:i32 = var
%1 = add %0, -1:i32
%2:i32 = var
%3 = block 2
%4:i32 = var
%5:i32 = var
%6 = phi %3, %4, %5
%7 = and %6, 255:i32
%8 = eq %2, %7
%9:i32 = zext %8
%10 = eq %9, 0:i32
pc %10 1:i1
infer %1


; function: $29

; start LHS (in $29)
%0:i64 = var
%1 = ne %0, 0:i64
infer %1


; start LHS (in $29)
%0:i32 = var
%1 = add %0, -1:i32
%2:i64 = var
%3 = ne %2, 0:i64
pc %3 1:i1
infer %1


; start LHS (in $29)
%0:i32 = var
%1 = and %0, 7:i32
%2:i64 = var
%3 = ne %2, 0:i64
pc %3 1:i1
infer %1


; start LHS (in $29)
%0:i32 = var
%1 = and %0, 7:i32
%2 = or %1, 48:i32
%3:i64 = var
%4 = ne %3, 0:i64
pc %4 1:i1
infer %2


; start LHS (in $29)
%0:i64 = var
%1 = lshr %0, 3:i64
%2:i64 = var
%3 = ne %2, 0:i64
pc %3 1:i1
infer %1


; start LHS (in $29)
%0:i64 = var
%1 = lshr %0, 3:i64 (hasExternalUses)
%2 = ne %1, 0:i64
%3:i64 = var
%4 = ne %3, 0:i64
pc %4 1:i1
infer %2


; function: $30

; start LHS (in $30)
%0:i64 = var
%1 = ne %0, 0:i64
infer %1


; start LHS (in $30)
%0:i32 = var
%1 = add %0, -1:i32
%2:i64 = var
%3 = ne %2, 0:i64
pc %3 1:i1
infer %1


; start LHS (in $30)
%0:i32 = var
%1 = and %0, 15:i32
%2:i64 = var
%3 = ne %2, 0:i64
pc %3 1:i1
infer %1


; start LHS (in $30)
%0:i32 = var
%1 = and %0, 15:i32
%2 = add %1, 2045:i32
%3:i64 = var
%4 = ne %3, 0:i64
pc %4 1:i1
infer %2


; start LHS (in $30)
%0:i32 = var
%1:i32 = var
%2 = or %0, %1
%3:i64 = var
%4 = ne %3, 0:i64
pc %4 1:i1
infer %2


; start LHS (in $30)
%0:i64 = var
%1 = lshr %0, 4:i64
%2:i64 = var
%3 = ne %2, 0:i64
pc %3 1:i1
infer %1


; start LHS (in $30)
%0:i64 = var
%1 = lshr %0, 4:i64 (hasExternalUses)
%2 = ne %1, 0:i64
%3:i64 = var
%4 = ne %3, 0:i64
pc %4 1:i1
infer %2


; function: $31

; start LHS (in $31)
%0:i32 = var
%1 = add %0, 224:i32
infer %1


; start LHS (in $31)
%0:i32 = var
%1 = add %0, 136:i32
infer %1


; start LHS (in $31)
%0:i32 = var
%1 = add %0, 80:i32
infer %1


; start LHS (in $31)
%0:i32 = var
%1 = add %0, 120:i32
infer %1


; start LHS (in $31)
%0:i32 = var
%1 = slt %0, 0:i32
infer %1


; start LHS (in $31)
%0:i32 = var
%1 = slt -1:i32, %0
%2:i32 = var
%3 = slt %2, 0:i32
%4:i32 = zext %3
%5 = eq %4, 0:i32
pc %5 1:i1
infer %1


; start LHS (in $31)
%0:i32 = var
%1 = slt %0, 1:i32
%2:i32 = var
%3 = slt %2, 0:i32
%4:i32 = zext %3
%5 = eq %4, 0:i32
pc %5 1:i1
infer %1


; start LHS (in $31)
%0:i32 = var
%1 = and %0, -33:i32
%2:i32 = var
%3 = slt %2, 1:i32
%4:i32 = var
%5 = slt %4, 0:i32
%6:i32 = zext %5
%7 = eq %6, 0:i32
pc %3 1:i1
pc %7 1:i1
infer %1


; start LHS (in $31)
%0:i32 = var
%1 = add %0, 48:i32
%2:i32 = var
%3 = slt %2, 0:i32
%4:i32 = zext %3
%5 = eq %4, 0:i32
pc %5 1:i1
infer %1


; start LHS (in $31)
%0:i32 = var
%1 = add %0, 44:i32
%2:i32 = var
%3 = eq %2, 0:i32
%4:i32 = var
%5 = slt %4, 0:i32
%6:i32 = zext %5
%7 = eq %6, 0:i32
pc %3 1:i1
pc %7 1:i1
infer %1


; start LHS (in $31)
%0:i32 = var
%1 = add %0, 28:i32
%2:i32 = var
%3 = eq %2, 0:i32
%4:i32 = var
%5 = slt %4, 0:i32
%6:i32 = zext %5
%7 = eq %6, 0:i32
pc %3 1:i1
pc %7 1:i1
infer %1


; start LHS (in $31)
%0:i32 = var
%1 = add %0, 20:i32
%2:i32 = var
%3 = eq %2, 0:i32
%4:i32 = var
%5 = slt %4, 0:i32
%6:i32 = zext %5
%7 = eq %6, 0:i32
pc %3 1:i1
pc %7 1:i1
infer %1


; start LHS (in $31)
%0:i32 = var
%1 = add %0, 16:i32
%2:i32 = var
%3 = eq %2, 0:i32
%4:i32 = var
%5 = slt %4, 0:i32
%6:i32 = zext %5
%7 = eq %6, 0:i32
pc %3 1:i1
pc %7 1:i1
infer %1


; start LHS (in $31)
%0:i32 = var
%1 = add %0, 136:i32 (hasExternalUses)
%2 = add %1, 80:i32
%3:i32 = var
%4 = eq %3, 0:i32
%5:i32 = var
%6 = slt %5, 0:i32
%7:i32 = zext %6
%8 = eq %7, 0:i32
pc %4 1:i1
pc %8 1:i1
infer %2


; start LHS (in $31)
%0:i32 = var
%1 = and %0, 3:i32
%2:i32 = var
%3 = ne %2, 0:i32
%4:i32 = var
%5 = eq %4, 0:i32
%6:i32 = var
%7 = slt %6, 0:i32
%8:i32 = zext %7
%9 = eq %8, 0:i32
pc %3 1:i1
pc %5 1:i1
pc %9 1:i1
infer %1


; start LHS (in $31)
%0:i32 = var
%1 = and %0, 3:i32
%2 = add %1, 2:i32
%3:i32 = var
%4 = ne %3, 0:i32
%5:i32 = var
%6 = eq %5, 0:i32
%7:i32 = var
%8 = slt %7, 0:i32
%9:i32 = zext %8
%10 = eq %9, 0:i32
pc %4 1:i1
pc %6 1:i1
pc %10 1:i1
infer %2


; start LHS (in $31)
%0:i32 = var
%1 = eq %0, 0:i32
%2:i32 = var
%3 = ne %2, 0:i32
%4:i32 = var
%5 = eq %4, 0:i32
%6:i32 = var
%7 = slt %6, 0:i32
%8:i32 = zext %7
%9 = eq %8, 0:i32
pc %3 1:i1
pc %5 1:i1
pc %9 1:i1
infer %1


; start LHS (in $31)
%0:i32 = var
%1 = and %0, 32:i32
%2:i32 = var
%3 = slt %2, 0:i32
%4:i32 = zext %3
%5 = eq %4, 0:i32
pc %5 1:i1
infer %1


; start LHS (in $31)
%0:i32 = var
%1:i32 = var
%2 = and %1, 32:i32
%3 = or %0, %2
%4:i32 = var
%5 = slt %4, 0:i32
%6:i32 = zext %5
%7 = eq %6, 0:i32
pc %7 1:i1
infer %3


; start LHS (in $31)
%0:i32 = var
%1 = and %0, 32:i32
%2:i32 = var
%3 = slt %2, 0:i32
%4:i32 = zext %3
%5 = eq %4, 0:i32
pc %5 1:i1
infer %1


; function: $32

; start LHS (in $32)
%0:i32 = var
%1 = add %0, 32:i32
infer %1


; start LHS (in $32)
%0:i32 = var
%1 = add %0, 16:i32
infer %1


; start LHS (in $32)
%0:i32 = var
%1 = and %0, 64:i32
infer %1


; start LHS (in $32)
%0:i32 = var
%1 = and %0, 64:i32
%2 = eq %1, 0:i32
infer %2


; function: $33

; start LHS (in $33)
%0:i32 = var
%1 = add %0, 32:i32
infer %1


; start LHS (in $33)
%0:i32 = var
%1 = add %0, 20:i32
infer %1


; start LHS (in $33)
%0:i32 = var
%1 = ult -4096:i32, %0
infer %1


; start LHS (in $33)
%0:i32 = var
%1 = sub 0:i32, %0
%2 = ult -4096:i32, %0
pc %2 1:i1
infer %1


; start LHS (in $33)
%0 = block 2
%1:i32 = var
%2 = phi %0, -1:i32, %1
%3 = slt %2, 0:i32
%4 = ult -4096:i32, %1
blockpc %0 0 %4 1:i1
%5:i32 = zext %4
%6 = eq %5, 0:i32
blockpc %0 1 %6 1:i1
infer %3


; function: $34

; start LHS (in $34)
%0:i32 = var
%1 = add %0, 16:i32
infer %1


; start LHS (in $34)
%0:i32 = var
%1 = ult -4096:i32, %0
infer %1


; start LHS (in $34)
%0:i32 = var
%1 = sub 0:i32, %0
%2 = ult -4096:i32, %0
pc %2 1:i1
infer %1


; function: $35

; start LHS (in $35)
%0:i32 = var
%1:i32 = var
%2 = add %0, %1
infer %2


; start LHS (in $35)
%0:i32 = var
%1 = add %0, 15:i32
infer %1


; start LHS (in $35)
%0:i32 = var
%1 = add %0, 15:i32
%2 = and %1, -16:i32
infer %2

