; entering Souper's runOnFunction() for crypto_scalarmult_ristretto255_base()

; ModuleID = './scalarmult_ristretto255_ref10.c.bc'
source_filename = "crypto_scalarmult/ristretto255/ref10/scalarmult_ristretto255_ref10.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.ge25519_p3 = type { [10 x i32], [10 x i32], [10 x i32], [10 x i32] }

; Function Attrs: nounwind
define i32 @crypto_scalarmult_ristretto255(i8* nonnull %0, i8* nocapture nonnull readonly %1, i8* nonnull %2) local_unnamed_addr #0 {
  %4 = alloca %struct.ge25519_p3, align 4
  %5 = alloca %struct.ge25519_p3, align 4
  %6 = bitcast %struct.ge25519_p3* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %6) #4
  %7 = bitcast %struct.ge25519_p3* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %7) #4
  %8 = call i32 @ristretto255_frombytes(%struct.ge25519_p3* nonnull %5, i8* nonnull %2) #4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %24

10:                                               ; preds = %3, %10
  %11 = phi i32 [ %15, %10 ], [ 0, %3 ]
  %12 = getelementptr i8, i8* %1, i32 %11
  %13 = load i8, i8* %12, align 1
  %14 = getelementptr i8, i8* %0, i32 %11
  store i8 %13, i8* %14, align 1
  %15 = add nuw nsw i32 %11, 1
  %16 = icmp eq i32 %15, 32
  br i1 %16, label %17, label %10

17:                                               ; preds = %10
  %18 = getelementptr i8, i8* %0, i32 31
  %19 = load i8, i8* %18, align 1
  %20 = and i8 %19, 127
  store i8 %20, i8* %18, align 1
  call void @ge25519_scalarmult(%struct.ge25519_p3* nonnull %4, i8* nonnull %0, %struct.ge25519_p3* nonnull %5) #4
  call void @ristretto255_p3_tobytes(i8* nonnull %0, %struct.ge25519_p3* nonnull %4) #4
  %21 = call i32 @sodium_is_zero(i8* nonnull %0, i32 32) #4
  %22 = icmp ne i32 %21, 0
  %23 = sext i1 %22 to i32
  br label %24

24:                                               ; preds = %17, %3
  %25 = phi i32 [ -1, %3 ], [ %23, %17 ]
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %7) #4
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %6) #4
  ret i32 %25
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #1

declare i32 @ristretto255_frombytes(%struct.ge25519_p3* %0, i8* %1) local_unnamed_addr #2

declare void @ge25519_scalarmult(%struct.ge25519_p3* %0, i8* %1, %struct.ge25519_p3* %2) local_unnamed_addr #2

declare void @ristretto255_p3_tobytes(i8* %0, %struct.ge25519_p3* %1) local_unnamed_addr #2

declare i32 @sodium_is_zero(i8* %0, i32 %1) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #1

; Function Attrs: nounwind
define i32 @crypto_scalarmult_ristretto255_base(i8* nonnull %0, i8* nocapture nonnull readonly %1) local_unnamed_addr #0 {
  %3 = alloca %struct.ge25519_p3, align 4
  %4 = bitcast %struct.ge25519_p3* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %4) #4
  br label %5

5:                                                ; preds = %5, %2
  %6 = phi i32 [ 0, %2 ], [ %10, %5 ]
  %7 = getelementptr i8, i8* %1, i32 %6
  %8 = load i8, i8* %7, align 1
  %9 = getelementptr i8, i8* %0, i32 %6
  store i8 %8, i8* %9, align 1
  %10 = add nuw nsw i32 %6, 1
  %11 = icmp eq i32 %10, 32
  br i1 %11, label %12, label %5

12:                                               ; preds = %5
  %13 = getelementptr i8, i8* %0, i32 31
  %14 = load i8, i8* %13, align 1
  %15 = and i8 %14, 127
  store i8 %15, i8* %13, align 1
  call void @ge25519_scalarmult_base(%struct.ge25519_p3* nonnull %3, i8* nonnull %0) #4
  call void @ristretto255_p3_tobytes(i8* nonnull %0, %struct.ge25519_p3* nonnull %3) #4
  %16 = call i32 @sodium_is_zero(i8* nonnull %0, i32 32) #4
  %17 = icmp ne i32 %16, 0
  %18 = sext i1 %17 to i32
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %4) #4
  ret i32 %18
}

declare void @ge25519_scalarmult_base(%struct.ge25519_p3* %0, i8* %1) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_scalarmult_ristretto255_bytes() local_unnamed_addr #3 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_scalarmult_ristretto255_scalarbytes() local_unnamed_addr #3 {
  ret i32 32
}

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %6 = phi i32 [ 0, %2 ], [ %10, %5 ]
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,32))
infer %0

; *****
; For LLVM instruction:
;  %8 = load i8, i8* %7, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = add nuw nsw i32 %6, 1
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,32))
%1:i32 = addnw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = icmp eq i32 %10, 32
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,32))
%1:i32 = addnw 1:i32, %0 (hasExternalUses)
%2:i1 = eq 32:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %14 = load i8, i8* %13, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=01111111)

; *****
; For LLVM instruction:
;  %15 = and i8 %14, 127
; Looking for a replacement for:
%0:i8 = var
%1:i8 = and 127:i8, %0
infer %1

; *****
; For LLVM instruction:
;  %16 = call i32 @sodium_is_zero(i8* nonnull %0, i32 32) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = icmp ne i32 %16, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %18 = sext i1 %17 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i32 = sext %1
infer %2
#########################################################
; exiting Souper's runOnFunction() for crypto_scalarmult_ristretto255_base()

