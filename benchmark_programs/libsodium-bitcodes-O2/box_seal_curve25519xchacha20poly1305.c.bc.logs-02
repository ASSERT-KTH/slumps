; entering Souper's runOnFunction() for crypto_box_curve25519xchacha20poly1305_seal_open()

; ModuleID = './box_seal_curve25519xchacha20poly1305.c.bc'
source_filename = "crypto_box/curve25519xchacha20poly1305/box_seal_curve25519xchacha20poly1305.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.crypto_generichash_blake2b_state = type { [384 x i8] }

; Function Attrs: nounwind
define i32 @crypto_box_curve25519xchacha20poly1305_seal(i8* nonnull %0, i8* %1, i64 %2, i8* nonnull %3) local_unnamed_addr #0 {
  %5 = alloca %struct.crypto_generichash_blake2b_state, align 64
  %6 = alloca [24 x i8], align 16
  %7 = alloca [32 x i8], align 16
  %8 = alloca [32 x i8], align 16
  %9 = getelementptr inbounds [24 x i8], [24 x i8]* %6, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %9) #4
  %10 = getelementptr inbounds [32 x i8], [32 x i8]* %7, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %10) #4
  %11 = getelementptr inbounds [32 x i8], [32 x i8]* %8, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #4
  %12 = call i32 @crypto_box_curve25519xchacha20poly1305_keypair(i8* nonnull %10, i8* nonnull %11) #4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %22

14:                                               ; preds = %4
  %15 = getelementptr inbounds %struct.crypto_generichash_blake2b_state, %struct.crypto_generichash_blake2b_state* %5, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 384, i8* nonnull %15) #4
  %16 = call i32 @crypto_generichash_init(%struct.crypto_generichash_blake2b_state* nonnull %5, i8* null, i32 0, i32 24) #4
  %17 = call i32 @crypto_generichash_update(%struct.crypto_generichash_blake2b_state* nonnull %5, i8* nonnull %10, i64 32) #4
  %18 = call i32 @crypto_generichash_update(%struct.crypto_generichash_blake2b_state* nonnull %5, i8* nonnull %3, i64 32) #4
  %19 = call i32 @crypto_generichash_final(%struct.crypto_generichash_blake2b_state* nonnull %5, i8* nonnull %9, i32 24) #4
  call void @llvm.lifetime.end.p0i8(i64 384, i8* nonnull %15) #4
  %20 = getelementptr i8, i8* %0, i32 32
  %21 = call i32 @crypto_box_curve25519xchacha20poly1305_easy(i8* %20, i8* %1, i64 %2, i8* nonnull %9, i8* nonnull %3, i8* nonnull %11) #4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 1 dereferenceable(32) %0, i8* nonnull align 16 dereferenceable(32) %10, i32 32, i1 false)
  call void @sodium_memzero(i8* nonnull %11, i32 32) #4
  call void @sodium_memzero(i8* nonnull %10, i32 32) #4
  call void @sodium_memzero(i8* nonnull %9, i32 24) #4
  br label %22

22:                                               ; preds = %4, %14
  %23 = phi i32 [ %21, %14 ], [ -1, %4 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %10) #4
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #4
  ret i32 %23
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #1

declare i32 @crypto_box_curve25519xchacha20poly1305_keypair(i8* %0, i8* %1) local_unnamed_addr #2

declare i32 @crypto_box_curve25519xchacha20poly1305_easy(i8* %0, i8* %1, i64 %2, i8* %3, i8* %4, i8* %5) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

declare void @sodium_memzero(i8* %0, i32 %1) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #1

; Function Attrs: nounwind
define i32 @crypto_box_curve25519xchacha20poly1305_seal_open(i8* %0, i8* nonnull %1, i64 %2, i8* nonnull %3, i8* nonnull %4) local_unnamed_addr #0 {
  %6 = alloca %struct.crypto_generichash_blake2b_state, align 64
  %7 = alloca [24 x i8], align 16
  %8 = getelementptr inbounds [24 x i8], [24 x i8]* %7, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #4
  %9 = icmp ult i64 %2, 48
  br i1 %9, label %19, label %10

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.crypto_generichash_blake2b_state, %struct.crypto_generichash_blake2b_state* %6, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 384, i8* nonnull %11) #4
  %12 = call i32 @crypto_generichash_init(%struct.crypto_generichash_blake2b_state* nonnull %6, i8* null, i32 0, i32 24) #4
  %13 = call i32 @crypto_generichash_update(%struct.crypto_generichash_blake2b_state* nonnull %6, i8* nonnull %1, i64 32) #4
  %14 = call i32 @crypto_generichash_update(%struct.crypto_generichash_blake2b_state* nonnull %6, i8* nonnull %3, i64 32) #4
  %15 = call i32 @crypto_generichash_final(%struct.crypto_generichash_blake2b_state* nonnull %6, i8* nonnull %8, i32 24) #4
  call void @llvm.lifetime.end.p0i8(i64 384, i8* nonnull %11) #4
  %16 = getelementptr i8, i8* %1, i32 32
  %17 = add i64 %2, -32
  %18 = call i32 @crypto_box_curve25519xchacha20poly1305_open_easy(i8* %0, i8* %16, i64 %17, i8* nonnull %8, i8* nonnull %1, i8* nonnull %4) #4
  br label %19

19:                                               ; preds = %5, %10
  %20 = phi i32 [ %18, %10 ], [ -1, %5 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #4
  ret i32 %20
}

declare i32 @crypto_box_curve25519xchacha20poly1305_open_easy(i8* %0, i8* %1, i64 %2, i8* %3, i8* %4, i8* %5) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_box_curve25519xchacha20poly1305_sealbytes() local_unnamed_addr #3 {
  ret i32 48
}

declare i32 @crypto_generichash_init(%struct.crypto_generichash_blake2b_state* %0, i8* %1, i32 %2, i32 %3) local_unnamed_addr #2

declare i32 @crypto_generichash_update(%struct.crypto_generichash_blake2b_state* %0, i8* %1, i64 %2) local_unnamed_addr #2

declare i32 @crypto_generichash_final(%struct.crypto_generichash_blake2b_state* %0, i8* %1, i32 %2) local_unnamed_addr #2

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %9 = icmp ult i64 %2, 48
; Looking for a replacement for:
%0:i64 = var
%1:i1 = ult %0, 48:i64
infer %1

; *****
; For LLVM instruction:
;  %17 = add i64 %2, -32
; Looking for a replacement for:
%0:i64 = var
%1:i1 = ult %0, 48:i64
pc %1 0:i1
%2:i64 = add 18446744073709551584:i64, %0
infer %2

; *****
; For LLVM instruction:
;  %18 = call i32 @crypto_box_curve25519xchacha20poly1305_open_easy(i8* %0, i8* %16, i64 %17, i8* nonnull %8, i8* nonnull %1, i8* nonnull %4) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = phi i32 [ %18, %10 ], [ -1, %5 ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = phi %0, %1, 4294967295:i32
infer %2
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i1 = ult %0, 48:i64
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i1 = ult %0, 48:i64
pc %1 0:i1
%2:i64 = add 18446744073709551584:i64, %0
infer %2


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 16
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 20
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for crypto_box_curve25519xchacha20poly1305_seal_open()

; entering Souper's runOnFunction() for crypto_box_curve25519xchacha20poly1305_sealbytes()
