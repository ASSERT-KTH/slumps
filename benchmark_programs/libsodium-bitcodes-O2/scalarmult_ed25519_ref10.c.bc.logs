
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for crypto_scalarmult_ed25519()

; ModuleID = './scalarmult_ed25519_ref10.c.bc'
source_filename = "crypto_scalarmult/ed25519/ref10/scalarmult_ed25519_ref10.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.ge25519_p3 = type { [10 x i32], [10 x i32], [10 x i32], [10 x i32] }

; Function Attrs: nounwind
define i32 @crypto_scalarmult_ed25519(i8* nonnull %0, i8* nonnull %1, i8* nonnull %2) local_unnamed_addr #0 {
  %4 = tail call fastcc i32 @_crypto_scalarmult_ed25519(i8* nonnull %0, i8* nonnull %1, i8* nonnull %2, i32 1)
  ret i32 %4
}

; Function Attrs: nounwind
define internal fastcc i32 @_crypto_scalarmult_ed25519(i8* %0, i8* %1, i8* %2, i32 %3) unnamed_addr #0 {
  %5 = alloca %struct.ge25519_p3, align 4
  %6 = alloca %struct.ge25519_p3, align 4
  %7 = bitcast %struct.ge25519_p3* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %7) #4
  %8 = bitcast %struct.ge25519_p3* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %8) #4
  %9 = tail call i32 @ge25519_is_canonical(i8* %2) #4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %145, label %11

11:                                               ; preds = %4
  %12 = tail call i32 @ge25519_has_small_order(i8* %2) #4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %145

14:                                               ; preds = %11
  %15 = call i32 @ge25519_frombytes(%struct.ge25519_p3* nonnull %6, i8* %2) #4
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %145

17:                                               ; preds = %14
  %18 = call i32 @ge25519_is_on_main_subgroup(%struct.ge25519_p3* nonnull %6) #4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %145, label %20

20:                                               ; preds = %17, %20
  %21 = phi i32 [ %25, %20 ], [ 0, %17 ]
  %22 = getelementptr i8, i8* %1, i32 %21
  %23 = load i8, i8* %22, align 1
  %24 = getelementptr i8, i8* %0, i32 %21
  store i8 %23, i8* %24, align 1
  %25 = add nuw nsw i32 %21, 1
  %26 = icmp eq i32 %25, 32
  br i1 %26, label %27, label %20

27:                                               ; preds = %20
  %28 = icmp eq i32 %3, 0
  br i1 %28, label %29, label %32

29:                                               ; preds = %27
  %30 = getelementptr i8, i8* %0, i32 31
  %31 = load i8, i8* %30, align 1
  br label %38

32:                                               ; preds = %27
  %33 = load i8, i8* %0, align 1
  %34 = and i8 %33, -8
  store i8 %34, i8* %0, align 1
  %35 = getelementptr i8, i8* %0, i32 31
  %36 = load i8, i8* %35, align 1
  %37 = or i8 %36, 64
  store i8 %37, i8* %35, align 1
  br label %38

38:                                               ; preds = %29, %32
  %39 = phi i8 [ %31, %29 ], [ %37, %32 ]
  %40 = getelementptr i8, i8* %0, i32 31
  %41 = and i8 %39, 127
  store i8 %41, i8* %40, align 1
  call void @ge25519_scalarmult(%struct.ge25519_p3* nonnull %5, i8* nonnull %0, %struct.ge25519_p3* nonnull %6) #4
  call void @ge25519_p3_tobytes(i8* nonnull %0, %struct.ge25519_p3* nonnull %5) #4
  %42 = load i8, i8* %0, align 1
  %43 = xor i8 %42, 1
  %44 = getelementptr i8, i8* %0, i32 1
  %45 = load i8, i8* %44, align 1
  %46 = or i8 %45, %43
  %47 = getelementptr i8, i8* %0, i32 2
  %48 = load i8, i8* %47, align 1
  %49 = or i8 %46, %48
  %50 = getelementptr i8, i8* %0, i32 3
  %51 = load i8, i8* %50, align 1
  %52 = or i8 %49, %51
  %53 = getelementptr i8, i8* %0, i32 4
  %54 = load i8, i8* %53, align 1
  %55 = or i8 %52, %54
  %56 = getelementptr i8, i8* %0, i32 5
  %57 = load i8, i8* %56, align 1
  %58 = or i8 %55, %57
  %59 = getelementptr i8, i8* %0, i32 6
  %60 = load i8, i8* %59, align 1
  %61 = or i8 %58, %60
  %62 = getelementptr i8, i8* %0, i32 7
  %63 = load i8, i8* %62, align 1
  %64 = or i8 %61, %63
  %65 = getelementptr i8, i8* %0, i32 8
  %66 = load i8, i8* %65, align 1
  %67 = or i8 %64, %66
  %68 = getelementptr i8, i8* %0, i32 9
  %69 = load i8, i8* %68, align 1
  %70 = or i8 %67, %69
  %71 = getelementptr i8, i8* %0, i32 10
  %72 = load i8, i8* %71, align 1
  %73 = or i8 %70, %72
  %74 = getelementptr i8, i8* %0, i32 11
  %75 = load i8, i8* %74, align 1
  %76 = or i8 %73, %75
  %77 = getelementptr i8, i8* %0, i32 12
  %78 = load i8, i8* %77, align 1
  %79 = or i8 %76, %78
  %80 = getelementptr i8, i8* %0, i32 13
  %81 = load i8, i8* %80, align 1
  %82 = or i8 %79, %81
  %83 = getelementptr i8, i8* %0, i32 14
  %84 = load i8, i8* %83, align 1
  %85 = or i8 %82, %84
  %86 = getelementptr i8, i8* %0, i32 15
  %87 = load i8, i8* %86, align 1
  %88 = or i8 %85, %87
  %89 = getelementptr i8, i8* %0, i32 16
  %90 = load i8, i8* %89, align 1
  %91 = or i8 %88, %90
  %92 = getelementptr i8, i8* %0, i32 17
  %93 = load i8, i8* %92, align 1
  %94 = or i8 %91, %93
  %95 = getelementptr i8, i8* %0, i32 18
  %96 = load i8, i8* %95, align 1
  %97 = or i8 %94, %96
  %98 = getelementptr i8, i8* %0, i32 19
  %99 = load i8, i8* %98, align 1
  %100 = or i8 %97, %99
  %101 = getelementptr i8, i8* %0, i32 20
  %102 = load i8, i8* %101, align 1
  %103 = or i8 %100, %102
  %104 = getelementptr i8, i8* %0, i32 21
  %105 = load i8, i8* %104, align 1
  %106 = or i8 %103, %105
  %107 = getelementptr i8, i8* %0, i32 22
  %108 = load i8, i8* %107, align 1
  %109 = or i8 %106, %108
  %110 = getelementptr i8, i8* %0, i32 23
  %111 = load i8, i8* %110, align 1
  %112 = or i8 %109, %111
  %113 = getelementptr i8, i8* %0, i32 24
  %114 = load i8, i8* %113, align 1
  %115 = or i8 %112, %114
  %116 = getelementptr i8, i8* %0, i32 25
  %117 = load i8, i8* %116, align 1
  %118 = or i8 %115, %117
  %119 = getelementptr i8, i8* %0, i32 26
  %120 = load i8, i8* %119, align 1
  %121 = or i8 %118, %120
  %122 = getelementptr i8, i8* %0, i32 27
  %123 = load i8, i8* %122, align 1
  %124 = or i8 %121, %123
  %125 = getelementptr i8, i8* %0, i32 28
  %126 = load i8, i8* %125, align 1
  %127 = or i8 %124, %126
  %128 = getelementptr i8, i8* %0, i32 29
  %129 = load i8, i8* %128, align 1
  %130 = or i8 %127, %129
  %131 = getelementptr i8, i8* %0, i32 30
  %132 = load i8, i8* %131, align 1
  %133 = or i8 %130, %132
  %134 = load i8, i8* %40, align 1
  %135 = and i8 %134, 127
  %136 = or i8 %133, %135
  %137 = zext i8 %136 to i32
  %138 = add nuw nsw i32 %137, 511
  %139 = and i32 %138, 256
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %141, label %145

141:                                              ; preds = %38
  %142 = call i32 @sodium_is_zero(i8* nonnull %1, i32 32) #4
  %143 = icmp ne i32 %142, 0
  %144 = sext i1 %143 to i32
  br label %145

145:                                              ; preds = %141, %38, %4, %17, %11, %14
  %146 = phi i32 [ -1, %14 ], [ -1, %11 ], [ -1, %17 ], [ -1, %4 ], [ -1, %38 ], [ %144, %141 ]
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %8) #4
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %7) #4
  ret i32 %146
}

; Function Attrs: nounwind
define i32 @crypto_scalarmult_ed25519_noclamp(i8* nonnull %0, i8* nonnull %1, i8* nonnull %2) local_unnamed_addr #0 {
  %4 = tail call fastcc i32 @_crypto_scalarmult_ed25519(i8* nonnull %0, i8* nonnull %1, i8* nonnull %2, i32 0)
  ret i32 %4
}

; Function Attrs: nounwind
define i32 @crypto_scalarmult_ed25519_base(i8* nonnull %0, i8* nonnull %1) local_unnamed_addr #0 {
  %3 = tail call fastcc i32 @_crypto_scalarmult_ed25519_base(i8* nonnull %0, i8* nonnull %1, i32 1)
  ret i32 %3
}

; Function Attrs: nounwind
define internal fastcc i32 @_crypto_scalarmult_ed25519_base(i8* %0, i8* %1, i32 %2) unnamed_addr #0 {
  %4 = alloca %struct.ge25519_p3, align 4
  %5 = bitcast %struct.ge25519_p3* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %5) #4
  br label %6

6:                                                ; preds = %6, %3
  %7 = phi i32 [ 0, %3 ], [ %11, %6 ]
  %8 = getelementptr i8, i8* %1, i32 %7
  %9 = load i8, i8* %8, align 1
  %10 = getelementptr i8, i8* %0, i32 %7
  store i8 %9, i8* %10, align 1
  %11 = add nuw nsw i32 %7, 1
  %12 = icmp eq i32 %11, 32
  br i1 %12, label %13, label %6

13:                                               ; preds = %6
  %14 = icmp eq i32 %2, 0
  br i1 %14, label %15, label %18

15:                                               ; preds = %13
  %16 = getelementptr i8, i8* %0, i32 31
  %17 = load i8, i8* %16, align 1
  br label %24

18:                                               ; preds = %13
  %19 = load i8, i8* %0, align 1
  %20 = and i8 %19, -8
  store i8 %20, i8* %0, align 1
  %21 = getelementptr i8, i8* %0, i32 31
  %22 = load i8, i8* %21, align 1
  %23 = or i8 %22, 64
  store i8 %23, i8* %21, align 1
  br label %24

24:                                               ; preds = %15, %18
  %25 = phi i8 [ %17, %15 ], [ %23, %18 ]
  %26 = getelementptr i8, i8* %0, i32 31
  %27 = and i8 %25, 127
  store i8 %27, i8* %26, align 1
  call void @ge25519_scalarmult_base(%struct.ge25519_p3* nonnull %4, i8* nonnull %0) #4
  call void @ge25519_p3_tobytes(i8* nonnull %0, %struct.ge25519_p3* nonnull %4) #4
  %28 = load i8, i8* %0, align 1
  %29 = xor i8 %28, 1
  %30 = getelementptr i8, i8* %0, i32 1
  %31 = load i8, i8* %30, align 1
  %32 = or i8 %31, %29
  %33 = getelementptr i8, i8* %0, i32 2
  %34 = load i8, i8* %33, align 1
  %35 = or i8 %32, %34
  %36 = getelementptr i8, i8* %0, i32 3
  %37 = load i8, i8* %36, align 1
  %38 = or i8 %35, %37
  %39 = getelementptr i8, i8* %0, i32 4
  %40 = load i8, i8* %39, align 1
  %41 = or i8 %38, %40
  %42 = getelementptr i8, i8* %0, i32 5
  %43 = load i8, i8* %42, align 1
  %44 = or i8 %41, %43
  %45 = getelementptr i8, i8* %0, i32 6
  %46 = load i8, i8* %45, align 1
  %47 = or i8 %44, %46
  %48 = getelementptr i8, i8* %0, i32 7
  %49 = load i8, i8* %48, align 1
  %50 = or i8 %47, %49
  %51 = getelementptr i8, i8* %0, i32 8
  %52 = load i8, i8* %51, align 1
  %53 = or i8 %50, %52
  %54 = getelementptr i8, i8* %0, i32 9
  %55 = load i8, i8* %54, align 1
  %56 = or i8 %53, %55
  %57 = getelementptr i8, i8* %0, i32 10
  %58 = load i8, i8* %57, align 1
  %59 = or i8 %56, %58
  %60 = getelementptr i8, i8* %0, i32 11
  %61 = load i8, i8* %60, align 1
  %62 = or i8 %59, %61
  %63 = getelementptr i8, i8* %0, i32 12
  %64 = load i8, i8* %63, align 1
  %65 = or i8 %62, %64
  %66 = getelementptr i8, i8* %0, i32 13
  %67 = load i8, i8* %66, align 1
  %68 = or i8 %65, %67
  %69 = getelementptr i8, i8* %0, i32 14
  %70 = load i8, i8* %69, align 1
  %71 = or i8 %68, %70
  %72 = getelementptr i8, i8* %0, i32 15
  %73 = load i8, i8* %72, align 1
  %74 = or i8 %71, %73
  %75 = getelementptr i8, i8* %0, i32 16
  %76 = load i8, i8* %75, align 1
  %77 = or i8 %74, %76
  %78 = getelementptr i8, i8* %0, i32 17
  %79 = load i8, i8* %78, align 1
  %80 = or i8 %77, %79
  %81 = getelementptr i8, i8* %0, i32 18
  %82 = load i8, i8* %81, align 1
  %83 = or i8 %80, %82
  %84 = getelementptr i8, i8* %0, i32 19
  %85 = load i8, i8* %84, align 1
  %86 = or i8 %83, %85
  %87 = getelementptr i8, i8* %0, i32 20
  %88 = load i8, i8* %87, align 1
  %89 = or i8 %86, %88
  %90 = getelementptr i8, i8* %0, i32 21
  %91 = load i8, i8* %90, align 1
  %92 = or i8 %89, %91
  %93 = getelementptr i8, i8* %0, i32 22
  %94 = load i8, i8* %93, align 1
  %95 = or i8 %92, %94
  %96 = getelementptr i8, i8* %0, i32 23
  %97 = load i8, i8* %96, align 1
  %98 = or i8 %95, %97
  %99 = getelementptr i8, i8* %0, i32 24
  %100 = load i8, i8* %99, align 1
  %101 = or i8 %98, %100
  %102 = getelementptr i8, i8* %0, i32 25
  %103 = load i8, i8* %102, align 1
  %104 = or i8 %101, %103
  %105 = getelementptr i8, i8* %0, i32 26
  %106 = load i8, i8* %105, align 1
  %107 = or i8 %104, %106
  %108 = getelementptr i8, i8* %0, i32 27
  %109 = load i8, i8* %108, align 1
  %110 = or i8 %107, %109
  %111 = getelementptr i8, i8* %0, i32 28
  %112 = load i8, i8* %111, align 1
  %113 = or i8 %110, %112
  %114 = getelementptr i8, i8* %0, i32 29
  %115 = load i8, i8* %114, align 1
  %116 = or i8 %113, %115
  %117 = getelementptr i8, i8* %0, i32 30
  %118 = load i8, i8* %117, align 1
  %119 = or i8 %116, %118
  %120 = load i8, i8* %26, align 1
  %121 = and i8 %120, 127
  %122 = or i8 %119, %121
  %123 = zext i8 %122 to i32
  %124 = add nuw nsw i32 %123, 511
  %125 = and i32 %124, 256
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %127, label %131

127:                                              ; preds = %24
  %128 = call i32 @sodium_is_zero(i8* nonnull %1, i32 32) #4
  %129 = icmp ne i32 %128, 0
  %130 = sext i1 %129 to i32
  br label %131

131:                                              ; preds = %127, %24
  %132 = phi i32 [ -1, %24 ], [ %130, %127 ]
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %5) #4
  ret i32 %132
}

; Function Attrs: nounwind
define i32 @crypto_scalarmult_ed25519_base_noclamp(i8* nonnull %0, i8* nonnull %1) local_unnamed_addr #0 {
  %3 = tail call fastcc i32 @_crypto_scalarmult_ed25519_base(i8* nonnull %0, i8* nonnull %1, i32 0)
  ret i32 %3
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_scalarmult_ed25519_bytes() local_unnamed_addr #1 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_scalarmult_ed25519_scalarbytes() local_unnamed_addr #1 {
  ret i32 32
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #2

declare i32 @ge25519_is_canonical(i8* %0) local_unnamed_addr #3

declare i32 @ge25519_has_small_order(i8* %0) local_unnamed_addr #3

declare i32 @ge25519_frombytes(%struct.ge25519_p3* %0, i8* %1) local_unnamed_addr #3

declare i32 @ge25519_is_on_main_subgroup(%struct.ge25519_p3* %0) local_unnamed_addr #3

declare void @ge25519_scalarmult(%struct.ge25519_p3* %0, i8* %1, %struct.ge25519_p3* %2) local_unnamed_addr #3

declare void @ge25519_p3_tobytes(i8* %0, %struct.ge25519_p3* %1) local_unnamed_addr #3

declare i32 @sodium_is_zero(i8* %0, i32 %1) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #2

declare void @ge25519_scalarmult_base(%struct.ge25519_p3* %0, i8* %1) local_unnamed_addr #3

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %4 = tail call fastcc i32 @_crypto_scalarmult_ed25519(i8* nonnull %0, i8* nonnull %1, i8* nonnull %2, i32 1)
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for crypto_scalarmult_ed25519()

; entering Souper's runOnFunction() for ./scalarmult_ed25519_ref10.c.bc:_crypto_scalarmult_ed25519()

; ModuleID = './scalarmult_ed25519_ref10.c.bc'
source_filename = "crypto_scalarmult/ed25519/ref10/scalarmult_ed25519_ref10.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.ge25519_p3 = type { [10 x i32], [10 x i32], [10 x i32], [10 x i32] }

; Function Attrs: nounwind
define i32 @crypto_scalarmult_ed25519(i8* nonnull %0, i8* nonnull %1, i8* nonnull %2) local_unnamed_addr #0 {
  %4 = tail call fastcc i32 @_crypto_scalarmult_ed25519(i8* nonnull %0, i8* nonnull %1, i8* nonnull %2, i32 1)
  ret i32 %4
}

; Function Attrs: nounwind
define internal fastcc i32 @_crypto_scalarmult_ed25519(i8* %0, i8* %1, i8* %2, i32 %3) unnamed_addr #0 {
  %5 = alloca %struct.ge25519_p3, align 4
  %6 = alloca %struct.ge25519_p3, align 4
  %7 = bitcast %struct.ge25519_p3* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %7) #4
  %8 = bitcast %struct.ge25519_p3* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %8) #4
  %9 = tail call i32 @ge25519_is_canonical(i8* %2) #4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %145, label %11

11:                                               ; preds = %4
  %12 = tail call i32 @ge25519_has_small_order(i8* %2) #4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %145

14:                                               ; preds = %11
  %15 = call i32 @ge25519_frombytes(%struct.ge25519_p3* nonnull %6, i8* %2) #4
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %145

17:                                               ; preds = %14
  %18 = call i32 @ge25519_is_on_main_subgroup(%struct.ge25519_p3* nonnull %6) #4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %145, label %20

20:                                               ; preds = %17, %20
  %21 = phi i32 [ %25, %20 ], [ 0, %17 ]
  %22 = getelementptr i8, i8* %1, i32 %21
  %23 = load i8, i8* %22, align 1
  %24 = getelementptr i8, i8* %0, i32 %21
  store i8 %23, i8* %24, align 1
  %25 = add nuw nsw i32 %21, 1
  %26 = icmp eq i32 %25, 32
  br i1 %26, label %27, label %20

27:                                               ; preds = %20
  %28 = icmp eq i32 %3, 0
  br i1 %28, label %29, label %32

29:                                               ; preds = %27
  %30 = getelementptr i8, i8* %0, i32 31
  %31 = load i8, i8* %30, align 1
  br label %38

32:                                               ; preds = %27
  %33 = load i8, i8* %0, align 1
  %34 = and i8 %33, -8
  store i8 %34, i8* %0, align 1
  %35 = getelementptr i8, i8* %0, i32 31
  %36 = load i8, i8* %35, align 1
  %37 = or i8 %36, 64
  store i8 %37, i8* %35, align 1
  br label %38

38:                                               ; preds = %29, %32
  %39 = phi i8 [ %31, %29 ], [ %37, %32 ]
  %40 = getelementptr i8, i8* %0, i32 31
  %41 = and i8 %39, 127
  store i8 %41, i8* %40, align 1
  call void @ge25519_scalarmult(%struct.ge25519_p3* nonnull %5, i8* nonnull %0, %struct.ge25519_p3* nonnull %6) #4
  call void @ge25519_p3_tobytes(i8* nonnull %0, %struct.ge25519_p3* nonnull %5) #4
  %42 = load i8, i8* %0, align 1
  %43 = xor i8 %42, 1
  %44 = getelementptr i8, i8* %0, i32 1
  %45 = load i8, i8* %44, align 1
  %46 = or i8 %45, %43
  %47 = getelementptr i8, i8* %0, i32 2
  %48 = load i8, i8* %47, align 1
  %49 = or i8 %46, %48
  %50 = getelementptr i8, i8* %0, i32 3
  %51 = load i8, i8* %50, align 1
  %52 = or i8 %49, %51
  %53 = getelementptr i8, i8* %0, i32 4
  %54 = load i8, i8* %53, align 1
  %55 = or i8 %52, %54
  %56 = getelementptr i8, i8* %0, i32 5
  %57 = load i8, i8* %56, align 1
  %58 = or i8 %55, %57
  %59 = getelementptr i8, i8* %0, i32 6
  %60 = load i8, i8* %59, align 1
  %61 = or i8 %58, %60
  %62 = getelementptr i8, i8* %0, i32 7
  %63 = load i8, i8* %62, align 1
  %64 = or i8 %61, %63
  %65 = getelementptr i8, i8* %0, i32 8
  %66 = load i8, i8* %65, align 1
  %67 = or i8 %64, %66
  %68 = getelementptr i8, i8* %0, i32 9
  %69 = load i8, i8* %68, align 1
  %70 = or i8 %67, %69
  %71 = getelementptr i8, i8* %0, i32 10
  %72 = load i8, i8* %71, align 1
  %73 = or i8 %70, %72
  %74 = getelementptr i8, i8* %0, i32 11
  %75 = load i8, i8* %74, align 1
  %76 = or i8 %73, %75
  %77 = getelementptr i8, i8* %0, i32 12
  %78 = load i8, i8* %77, align 1
  %79 = or i8 %76, %78
  %80 = getelementptr i8, i8* %0, i32 13
  %81 = load i8, i8* %80, align 1
  %82 = or i8 %79, %81
  %83 = getelementptr i8, i8* %0, i32 14
  %84 = load i8, i8* %83, align 1
  %85 = or i8 %82, %84
  %86 = getelementptr i8, i8* %0, i32 15
  %87 = load i8, i8* %86, align 1
  %88 = or i8 %85, %87
  %89 = getelementptr i8, i8* %0, i32 16
  %90 = load i8, i8* %89, align 1
  %91 = or i8 %88, %90
  %92 = getelementptr i8, i8* %0, i32 17
  %93 = load i8, i8* %92, align 1
  %94 = or i8 %91, %93
  %95 = getelementptr i8, i8* %0, i32 18
  %96 = load i8, i8* %95, align 1
  %97 = or i8 %94, %96
  %98 = getelementptr i8, i8* %0, i32 19
  %99 = load i8, i8* %98, align 1
  %100 = or i8 %97, %99
  %101 = getelementptr i8, i8* %0, i32 20
  %102 = load i8, i8* %101, align 1
  %103 = or i8 %100, %102
  %104 = getelementptr i8, i8* %0, i32 21
  %105 = load i8, i8* %104, align 1
  %106 = or i8 %103, %105
  %107 = getelementptr i8, i8* %0, i32 22
  %108 = load i8, i8* %107, align 1
  %109 = or i8 %106, %108
  %110 = getelementptr i8, i8* %0, i32 23
  %111 = load i8, i8* %110, align 1
  %112 = or i8 %109, %111
  %113 = getelementptr i8, i8* %0, i32 24
  %114 = load i8, i8* %113, align 1
  %115 = or i8 %112, %114
  %116 = getelementptr i8, i8* %0, i32 25
  %117 = load i8, i8* %116, align 1
  %118 = or i8 %115, %117
  %119 = getelementptr i8, i8* %0, i32 26
  %120 = load i8, i8* %119, align 1
  %121 = or i8 %118, %120
  %122 = getelementptr i8, i8* %0, i32 27
  %123 = load i8, i8* %122, align 1
  %124 = or i8 %121, %123
  %125 = getelementptr i8, i8* %0, i32 28
  %126 = load i8, i8* %125, align 1
  %127 = or i8 %124, %126
  %128 = getelementptr i8, i8* %0, i32 29
  %129 = load i8, i8* %128, align 1
  %130 = or i8 %127, %129
  %131 = getelementptr i8, i8* %0, i32 30
  %132 = load i8, i8* %131, align 1
  %133 = or i8 %130, %132
  %134 = load i8, i8* %40, align 1
  %135 = and i8 %134, 127
  %136 = or i8 %133, %135
  %137 = zext i8 %136 to i32
  %138 = add nuw nsw i32 %137, 511
  %139 = and i32 %138, 256
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %141, label %145

141:                                              ; preds = %38
  %142 = call i32 @sodium_is_zero(i8* nonnull %1, i32 32) #4
  %143 = icmp ne i32 %142, 0
  %144 = sext i1 %143 to i32
  br label %145

145:                                              ; preds = %141, %38, %4, %17, %11, %14
  %146 = phi i32 [ -1, %14 ], [ -1, %11 ], [ -1, %17 ], [ -1, %4 ], [ -1, %38 ], [ %144, %141 ]
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %8) #4
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %7) #4
  ret i32 %146
}

; Function Attrs: nounwind
define i32 @crypto_scalarmult_ed25519_noclamp(i8* nonnull %0, i8* nonnull %1, i8* nonnull %2) local_unnamed_addr #0 {
  %4 = tail call fastcc i32 @_crypto_scalarmult_ed25519(i8* nonnull %0, i8* nonnull %1, i8* nonnull %2, i32 0)
  ret i32 %4
}

; Function Attrs: nounwind
define i32 @crypto_scalarmult_ed25519_base(i8* nonnull %0, i8* nonnull %1) local_unnamed_addr #0 {
  %3 = tail call fastcc i32 @_crypto_scalarmult_ed25519_base(i8* nonnull %0, i8* nonnull %1, i32 1)
  ret i32 %3
}

; Function Attrs: nounwind
define internal fastcc i32 @_crypto_scalarmult_ed25519_base(i8* %0, i8* %1, i32 %2) unnamed_addr #0 {
  %4 = alloca %struct.ge25519_p3, align 4
  %5 = bitcast %struct.ge25519_p3* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %5) #4
  br label %6

6:                                                ; preds = %6, %3
  %7 = phi i32 [ 0, %3 ], [ %11, %6 ]
  %8 = getelementptr i8, i8* %1, i32 %7
  %9 = load i8, i8* %8, align 1
  %10 = getelementptr i8, i8* %0, i32 %7
  store i8 %9, i8* %10, align 1
  %11 = add nuw nsw i32 %7, 1
  %12 = icmp eq i32 %11, 32
  br i1 %12, label %13, label %6

13:                                               ; preds = %6
  %14 = icmp eq i32 %2, 0
  br i1 %14, label %15, label %18

15:                                               ; preds = %13
  %16 = getelementptr i8, i8* %0, i32 31
  %17 = load i8, i8* %16, align 1
  br label %24

18:                                               ; preds = %13
  %19 = load i8, i8* %0, align 1
  %20 = and i8 %19, -8
  store i8 %20, i8* %0, align 1
  %21 = getelementptr i8, i8* %0, i32 31
  %22 = load i8, i8* %21, align 1
  %23 = or i8 %22, 64
  store i8 %23, i8* %21, align 1
  br label %24

24:                                               ; preds = %15, %18
  %25 = phi i8 [ %17, %15 ], [ %23, %18 ]
  %26 = getelementptr i8, i8* %0, i32 31
  %27 = and i8 %25, 127
  store i8 %27, i8* %26, align 1
  call void @ge25519_scalarmult_base(%struct.ge25519_p3* nonnull %4, i8* nonnull %0) #4
  call void @ge25519_p3_tobytes(i8* nonnull %0, %struct.ge25519_p3* nonnull %4) #4
  %28 = load i8, i8* %0, align 1
  %29 = xor i8 %28, 1
  %30 = getelementptr i8, i8* %0, i32 1
  %31 = load i8, i8* %30, align 1
  %32 = or i8 %31, %29
  %33 = getelementptr i8, i8* %0, i32 2
  %34 = load i8, i8* %33, align 1
  %35 = or i8 %32, %34
  %36 = getelementptr i8, i8* %0, i32 3
  %37 = load i8, i8* %36, align 1
  %38 = or i8 %35, %37
  %39 = getelementptr i8, i8* %0, i32 4
  %40 = load i8, i8* %39, align 1
  %41 = or i8 %38, %40
  %42 = getelementptr i8, i8* %0, i32 5
  %43 = load i8, i8* %42, align 1
  %44 = or i8 %41, %43
  %45 = getelementptr i8, i8* %0, i32 6
  %46 = load i8, i8* %45, align 1
  %47 = or i8 %44, %46
  %48 = getelementptr i8, i8* %0, i32 7
  %49 = load i8, i8* %48, align 1
  %50 = or i8 %47, %49
  %51 = getelementptr i8, i8* %0, i32 8
  %52 = load i8, i8* %51, align 1
  %53 = or i8 %50, %52
  %54 = getelementptr i8, i8* %0, i32 9
  %55 = load i8, i8* %54, align 1
  %56 = or i8 %53, %55
  %57 = getelementptr i8, i8* %0, i32 10
  %58 = load i8, i8* %57, align 1
  %59 = or i8 %56, %58
  %60 = getelementptr i8, i8* %0, i32 11
  %61 = load i8, i8* %60, align 1
  %62 = or i8 %59, %61
  %63 = getelementptr i8, i8* %0, i32 12
  %64 = load i8, i8* %63, align 1
  %65 = or i8 %62, %64
  %66 = getelementptr i8, i8* %0, i32 13
  %67 = load i8, i8* %66, align 1
  %68 = or i8 %65, %67
  %69 = getelementptr i8, i8* %0, i32 14
  %70 = load i8, i8* %69, align 1
  %71 = or i8 %68, %70
  %72 = getelementptr i8, i8* %0, i32 15
  %73 = load i8, i8* %72, align 1
  %74 = or i8 %71, %73
  %75 = getelementptr i8, i8* %0, i32 16
  %76 = load i8, i8* %75, align 1
  %77 = or i8 %74, %76
  %78 = getelementptr i8, i8* %0, i32 17
  %79 = load i8, i8* %78, align 1
  %80 = or i8 %77, %79
  %81 = getelementptr i8, i8* %0, i32 18
  %82 = load i8, i8* %81, align 1
  %83 = or i8 %80, %82
  %84 = getelementptr i8, i8* %0, i32 19
  %85 = load i8, i8* %84, align 1
  %86 = or i8 %83, %85
  %87 = getelementptr i8, i8* %0, i32 20
  %88 = load i8, i8* %87, align 1
  %89 = or i8 %86, %88
  %90 = getelementptr i8, i8* %0, i32 21
  %91 = load i8, i8* %90, align 1
  %92 = or i8 %89, %91
  %93 = getelementptr i8, i8* %0, i32 22
  %94 = load i8, i8* %93, align 1
  %95 = or i8 %92, %94
  %96 = getelementptr i8, i8* %0, i32 23
  %97 = load i8, i8* %96, align 1
  %98 = or i8 %95, %97
  %99 = getelementptr i8, i8* %0, i32 24
  %100 = load i8, i8* %99, align 1
  %101 = or i8 %98, %100
  %102 = getelementptr i8, i8* %0, i32 25
  %103 = load i8, i8* %102, align 1
  %104 = or i8 %101, %103
  %105 = getelementptr i8, i8* %0, i32 26
  %106 = load i8, i8* %105, align 1
  %107 = or i8 %104, %106
  %108 = getelementptr i8, i8* %0, i32 27
  %109 = load i8, i8* %108, align 1
  %110 = or i8 %107, %109
  %111 = getelementptr i8, i8* %0, i32 28
  %112 = load i8, i8* %111, align 1
  %113 = or i8 %110, %112
  %114 = getelementptr i8, i8* %0, i32 29
  %115 = load i8, i8* %114, align 1
  %116 = or i8 %113, %115
  %117 = getelementptr i8, i8* %0, i32 30
  %118 = load i8, i8* %117, align 1
  %119 = or i8 %116, %118
  %120 = load i8, i8* %26, align 1
  %121 = and i8 %120, 127
  %122 = or i8 %119, %121
  %123 = zext i8 %122 to i32
  %124 = add nuw nsw i32 %123, 511
  %125 = and i32 %124, 256
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %127, label %131

127:                                              ; preds = %24
  %128 = call i32 @sodium_is_zero(i8* nonnull %1, i32 32) #4
  %129 = icmp ne i32 %128, 0
  %130 = sext i1 %129 to i32
  br label %131

131:                                              ; preds = %127, %24
  %132 = phi i32 [ -1, %24 ], [ %130, %127 ]
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %5) #4
  ret i32 %132
}

; Function Attrs: nounwind
define i32 @crypto_scalarmult_ed25519_base_noclamp(i8* nonnull %0, i8* nonnull %1) local_unnamed_addr #0 {
  %3 = tail call fastcc i32 @_crypto_scalarmult_ed25519_base(i8* nonnull %0, i8* nonnull %1, i32 0)
  ret i32 %3
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_scalarmult_ed25519_bytes() local_unnamed_addr #1 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_scalarmult_ed25519_scalarbytes() local_unnamed_addr #1 {
  ret i32 32
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #2

declare i32 @ge25519_is_canonical(i8* %0) local_unnamed_addr #3

declare i32 @ge25519_has_small_order(i8* %0) local_unnamed_addr #3

declare i32 @ge25519_frombytes(%struct.ge25519_p3* %0, i8* %1) local_unnamed_addr #3

declare i32 @ge25519_is_on_main_subgroup(%struct.ge25519_p3* %0) local_unnamed_addr #3

declare void @ge25519_scalarmult(%struct.ge25519_p3* %0, i8* %1, %struct.ge25519_p3* %2) local_unnamed_addr #3

declare void @ge25519_p3_tobytes(i8* %0, %struct.ge25519_p3* %1) local_unnamed_addr #3

declare i32 @sodium_is_zero(i8* %0, i32 %1) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #2

declare void @ge25519_scalarmult_base(%struct.ge25519_p3* %0, i8* %1) local_unnamed_addr #3

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %9 = tail call i32 @ge25519_is_canonical(i8* %2) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = icmp eq i32 %9, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = tail call i32 @ge25519_has_small_order(i8* %2) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = icmp eq i32 %12, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %15 = call i32 @ge25519_frombytes(%struct.ge25519_p3* nonnull %6, i8* %2) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = icmp eq i32 %15, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %18 = call i32 @ge25519_is_on_main_subgroup(%struct.ge25519_p3* nonnull %6) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = icmp eq i32 %18, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %21 = phi i32 [ %25, %20 ], [ 0, %17 ]
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,32))
infer %0

; *****
; For LLVM instruction:
;  %23 = load i8, i8* %22, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = add nuw nsw i32 %21, 1
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,32))
%1:i32 = addnw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %26 = icmp eq i32 %25, 32
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,32))
%1:i32 = addnw 1:i32, %0 (hasExternalUses)
%2:i1 = eq 32:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %28 = icmp eq i32 %3, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %31 = load i8, i8* %30, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=01111111)

; *****
; For LLVM instruction:
;  %33 = load i8, i8* %0, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=11111000)

; *****
; For LLVM instruction:
;  %34 = and i8 %33, -8
; Looking for a replacement for:
%0:i8 = var
%1:i8 = and 248:i8, %0
infer %1

; *****
; For LLVM instruction:
;  %36 = load i8, i8* %35, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=10111111)

; *****
; For LLVM instruction:
;  %37 = or i8 %36, 64
; Looking for a replacement for:
%0:i8 = var
%1:i8 = or 64:i8, %0
infer %1

; *****
; For LLVM instruction:
;  %39 = phi i8 [ %31, %29 ], [ %37, %32 ]
; Looking for a replacement for:
%0 = block 2
%1:i8 = var
%2:i8 = var
%3:i8 = or 64:i8, %2 (hasExternalUses)
%4:i8 = phi %0, %1, %3
infer %4 (demandedBits=01111111)

; *****
; For LLVM instruction:
;  %41 = and i8 %39, 127
; Looking for a replacement for:
%0 = block 2
%1:i8 = var
%2:i8 = var
%3:i8 = or 64:i8, %2
%4:i8 = phi %0, %1, %3
%5:i8 = and 127:i8, %4
infer %5

; *****
; For LLVM instruction:
;  %42 = load i8, i8* %0, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %43 = xor i8 %42, 1
; Looking for a replacement for:
%0:i8 = var
%1:i8 = xor 1:i8, %0
infer %1

; *****
; For LLVM instruction:
;  %45 = load i8, i8* %44, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %46 = or i8 %45, %43
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = xor 1:i8, %1
%3:i8 = or %0, %2
infer %3

; *****
; For LLVM instruction:
;  %48 = load i8, i8* %47, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %49 = or i8 %46, %48
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor 1:i8, %2
%4:i8 = or %1, %3
%5:i8 = or %0, %4
infer %5

; *****
; For LLVM instruction:
;  %51 = load i8, i8* %50, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %52 = or i8 %49, %51
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = xor 1:i8, %3
%5:i8 = or %2, %4
%6:i8 = or %1, %5
%7:i8 = or %0, %6
infer %7

; *****
; For LLVM instruction:
;  %54 = load i8, i8* %53, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %55 = or i8 %52, %54
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = xor 1:i8, %4
%6:i8 = or %3, %5
%7:i8 = or %2, %6
%8:i8 = or %1, %7
%9:i8 = or %0, %8
infer %9

; *****
; For LLVM instruction:
;  %57 = load i8, i8* %56, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %58 = or i8 %55, %57
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = xor 1:i8, %5
%7:i8 = or %4, %6
%8:i8 = or %3, %7
%9:i8 = or %2, %8
%10:i8 = or %1, %9
%11:i8 = or %0, %10
infer %11

; *****
; For LLVM instruction:
;  %60 = load i8, i8* %59, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %61 = or i8 %58, %60
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = xor 1:i8, %6
%8:i8 = or %5, %7
%9:i8 = or %4, %8
%10:i8 = or %3, %9
%11:i8 = or %2, %10
%12:i8 = or %1, %11
%13:i8 = or %0, %12
infer %13

; *****
; For LLVM instruction:
;  %63 = load i8, i8* %62, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %64 = or i8 %61, %63
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = xor 1:i8, %7
%9:i8 = or %6, %8
%10:i8 = or %5, %9
%11:i8 = or %4, %10
%12:i8 = or %3, %11
%13:i8 = or %2, %12
%14:i8 = or %1, %13
%15:i8 = or %0, %14
infer %15

; *****
; For LLVM instruction:
;  %66 = load i8, i8* %65, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %67 = or i8 %64, %66
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = xor 1:i8, %8
%10:i8 = or %7, %9
%11:i8 = or %6, %10
%12:i8 = or %5, %11
%13:i8 = or %4, %12
%14:i8 = or %3, %13
%15:i8 = or %2, %14
%16:i8 = or %1, %15
%17:i8 = or %0, %16
infer %17

; *****
; For LLVM instruction:
;  %69 = load i8, i8* %68, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %70 = or i8 %67, %69
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = xor 1:i8, %9
%11:i8 = or %8, %10
%12:i8 = or %7, %11
%13:i8 = or %6, %12
%14:i8 = or %5, %13
%15:i8 = or %4, %14
%16:i8 = or %3, %15
%17:i8 = or %2, %16
%18:i8 = or %1, %17
%19:i8 = or %0, %18
infer %19

; *****
; For LLVM instruction:
;  %72 = load i8, i8* %71, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %73 = or i8 %70, %72
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = xor 1:i8, %10
%12:i8 = or %9, %11
%13:i8 = or %8, %12
%14:i8 = or %7, %13
%15:i8 = or %6, %14
%16:i8 = or %5, %15
%17:i8 = or %4, %16
%18:i8 = or %3, %17
%19:i8 = or %2, %18
%20:i8 = or %1, %19
%21:i8 = or %0, %20
infer %21

; *****
; For LLVM instruction:
;  %75 = load i8, i8* %74, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %76 = or i8 %73, %75
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = xor 1:i8, %11
%13:i8 = or %10, %12
%14:i8 = or %9, %13
%15:i8 = or %8, %14
%16:i8 = or %7, %15
%17:i8 = or %6, %16
%18:i8 = or %5, %17
%19:i8 = or %4, %18
%20:i8 = or %3, %19
%21:i8 = or %2, %20
%22:i8 = or %1, %21
%23:i8 = or %0, %22
infer %23

; *****
; For LLVM instruction:
;  %78 = load i8, i8* %77, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %79 = or i8 %76, %78
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = xor 1:i8, %12
%14:i8 = or %11, %13
%15:i8 = or %10, %14
%16:i8 = or %9, %15
%17:i8 = or %8, %16
%18:i8 = or %7, %17
%19:i8 = or %6, %18
%20:i8 = or %5, %19
%21:i8 = or %4, %20
%22:i8 = or %3, %21
%23:i8 = or %2, %22
%24:i8 = or %1, %23
%25:i8 = or %0, %24
infer %25

; *****
; For LLVM instruction:
;  %81 = load i8, i8* %80, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %82 = or i8 %79, %81
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = xor 1:i8, %13
%15:i8 = or %12, %14
%16:i8 = or %11, %15
%17:i8 = or %10, %16
%18:i8 = or %9, %17
%19:i8 = or %8, %18
%20:i8 = or %7, %19
%21:i8 = or %6, %20
%22:i8 = or %5, %21
%23:i8 = or %4, %22
%24:i8 = or %3, %23
%25:i8 = or %2, %24
%26:i8 = or %1, %25
%27:i8 = or %0, %26
infer %27

; *****
; For LLVM instruction:
;  %84 = load i8, i8* %83, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %85 = or i8 %82, %84
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = xor 1:i8, %14
%16:i8 = or %13, %15
%17:i8 = or %12, %16
%18:i8 = or %11, %17
%19:i8 = or %10, %18
%20:i8 = or %9, %19
%21:i8 = or %8, %20
%22:i8 = or %7, %21
%23:i8 = or %6, %22
%24:i8 = or %5, %23
%25:i8 = or %4, %24
%26:i8 = or %3, %25
%27:i8 = or %2, %26
%28:i8 = or %1, %27
%29:i8 = or %0, %28
infer %29

; *****
; For LLVM instruction:
;  %87 = load i8, i8* %86, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %88 = or i8 %85, %87
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = xor 1:i8, %15
%17:i8 = or %14, %16
%18:i8 = or %13, %17
%19:i8 = or %12, %18
%20:i8 = or %11, %19
%21:i8 = or %10, %20
%22:i8 = or %9, %21
%23:i8 = or %8, %22
%24:i8 = or %7, %23
%25:i8 = or %6, %24
%26:i8 = or %5, %25
%27:i8 = or %4, %26
%28:i8 = or %3, %27
%29:i8 = or %2, %28
%30:i8 = or %1, %29
%31:i8 = or %0, %30
infer %31

; *****
; For LLVM instruction:
;  %90 = load i8, i8* %89, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %91 = or i8 %88, %90
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = xor 1:i8, %16
%18:i8 = or %15, %17
%19:i8 = or %14, %18
%20:i8 = or %13, %19
%21:i8 = or %12, %20
%22:i8 = or %11, %21
%23:i8 = or %10, %22
%24:i8 = or %9, %23
%25:i8 = or %8, %24
%26:i8 = or %7, %25
%27:i8 = or %6, %26
%28:i8 = or %5, %27
%29:i8 = or %4, %28
%30:i8 = or %3, %29
%31:i8 = or %2, %30
%32:i8 = or %1, %31
%33:i8 = or %0, %32
infer %33

; *****
; For LLVM instruction:
;  %93 = load i8, i8* %92, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %94 = or i8 %91, %93
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = xor 1:i8, %17
%19:i8 = or %16, %18
%20:i8 = or %15, %19
%21:i8 = or %14, %20
%22:i8 = or %13, %21
%23:i8 = or %12, %22
%24:i8 = or %11, %23
%25:i8 = or %10, %24
%26:i8 = or %9, %25
%27:i8 = or %8, %26
%28:i8 = or %7, %27
%29:i8 = or %6, %28
%30:i8 = or %5, %29
%31:i8 = or %4, %30
%32:i8 = or %3, %31
%33:i8 = or %2, %32
%34:i8 = or %1, %33
%35:i8 = or %0, %34
infer %35

; *****
; For LLVM instruction:
;  %96 = load i8, i8* %95, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %97 = or i8 %94, %96
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = xor 1:i8, %18
%20:i8 = or %17, %19
%21:i8 = or %16, %20
%22:i8 = or %15, %21
%23:i8 = or %14, %22
%24:i8 = or %13, %23
%25:i8 = or %12, %24
%26:i8 = or %11, %25
%27:i8 = or %10, %26
%28:i8 = or %9, %27
%29:i8 = or %8, %28
%30:i8 = or %7, %29
%31:i8 = or %6, %30
%32:i8 = or %5, %31
%33:i8 = or %4, %32
%34:i8 = or %3, %33
%35:i8 = or %2, %34
%36:i8 = or %1, %35
%37:i8 = or %0, %36
infer %37

; *****
; For LLVM instruction:
;  %99 = load i8, i8* %98, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %100 = or i8 %97, %99
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = xor 1:i8, %19
%21:i8 = or %18, %20
%22:i8 = or %17, %21
%23:i8 = or %16, %22
%24:i8 = or %15, %23
%25:i8 = or %14, %24
%26:i8 = or %13, %25
%27:i8 = or %12, %26
%28:i8 = or %11, %27
%29:i8 = or %10, %28
%30:i8 = or %9, %29
%31:i8 = or %8, %30
%32:i8 = or %7, %31
%33:i8 = or %6, %32
%34:i8 = or %5, %33
%35:i8 = or %4, %34
%36:i8 = or %3, %35
%37:i8 = or %2, %36
%38:i8 = or %1, %37
%39:i8 = or %0, %38
infer %39

; *****
; For LLVM instruction:
;  %102 = load i8, i8* %101, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %103 = or i8 %100, %102
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = xor 1:i8, %20
%22:i8 = or %19, %21
%23:i8 = or %18, %22
%24:i8 = or %17, %23
%25:i8 = or %16, %24
%26:i8 = or %15, %25
%27:i8 = or %14, %26
%28:i8 = or %13, %27
%29:i8 = or %12, %28
%30:i8 = or %11, %29
%31:i8 = or %10, %30
%32:i8 = or %9, %31
%33:i8 = or %8, %32
%34:i8 = or %7, %33
%35:i8 = or %6, %34
%36:i8 = or %5, %35
%37:i8 = or %4, %36
%38:i8 = or %3, %37
%39:i8 = or %2, %38
%40:i8 = or %1, %39
%41:i8 = or %0, %40
infer %41

; *****
; For LLVM instruction:
;  %105 = load i8, i8* %104, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %106 = or i8 %103, %105
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = xor 1:i8, %21
%23:i8 = or %20, %22
%24:i8 = or %19, %23
%25:i8 = or %18, %24
%26:i8 = or %17, %25
%27:i8 = or %16, %26
%28:i8 = or %15, %27
%29:i8 = or %14, %28
%30:i8 = or %13, %29
%31:i8 = or %12, %30
%32:i8 = or %11, %31
%33:i8 = or %10, %32
%34:i8 = or %9, %33
%35:i8 = or %8, %34
%36:i8 = or %7, %35
%37:i8 = or %6, %36
%38:i8 = or %5, %37
%39:i8 = or %4, %38
%40:i8 = or %3, %39
%41:i8 = or %2, %40
%42:i8 = or %1, %41
%43:i8 = or %0, %42
infer %43

; *****
; For LLVM instruction:
;  %108 = load i8, i8* %107, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %109 = or i8 %106, %108
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = xor 1:i8, %22
%24:i8 = or %21, %23
%25:i8 = or %20, %24
%26:i8 = or %19, %25
%27:i8 = or %18, %26
%28:i8 = or %17, %27
%29:i8 = or %16, %28
%30:i8 = or %15, %29
%31:i8 = or %14, %30
%32:i8 = or %13, %31
%33:i8 = or %12, %32
%34:i8 = or %11, %33
%35:i8 = or %10, %34
%36:i8 = or %9, %35
%37:i8 = or %8, %36
%38:i8 = or %7, %37
%39:i8 = or %6, %38
%40:i8 = or %5, %39
%41:i8 = or %4, %40
%42:i8 = or %3, %41
%43:i8 = or %2, %42
%44:i8 = or %1, %43
%45:i8 = or %0, %44
infer %45

; *****
; For LLVM instruction:
;  %111 = load i8, i8* %110, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %112 = or i8 %109, %111
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = xor 1:i8, %23
%25:i8 = or %22, %24
%26:i8 = or %21, %25
%27:i8 = or %20, %26
%28:i8 = or %19, %27
%29:i8 = or %18, %28
%30:i8 = or %17, %29
%31:i8 = or %16, %30
%32:i8 = or %15, %31
%33:i8 = or %14, %32
%34:i8 = or %13, %33
%35:i8 = or %12, %34
%36:i8 = or %11, %35
%37:i8 = or %10, %36
%38:i8 = or %9, %37
%39:i8 = or %8, %38
%40:i8 = or %7, %39
%41:i8 = or %6, %40
%42:i8 = or %5, %41
%43:i8 = or %4, %42
%44:i8 = or %3, %43
%45:i8 = or %2, %44
%46:i8 = or %1, %45
%47:i8 = or %0, %46
infer %47

; *****
; For LLVM instruction:
;  %114 = load i8, i8* %113, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %115 = or i8 %112, %114
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = xor 1:i8, %24
%26:i8 = or %23, %25
%27:i8 = or %22, %26
%28:i8 = or %21, %27
%29:i8 = or %20, %28
%30:i8 = or %19, %29
%31:i8 = or %18, %30
%32:i8 = or %17, %31
%33:i8 = or %16, %32
%34:i8 = or %15, %33
%35:i8 = or %14, %34
%36:i8 = or %13, %35
%37:i8 = or %12, %36
%38:i8 = or %11, %37
%39:i8 = or %10, %38
%40:i8 = or %9, %39
%41:i8 = or %8, %40
%42:i8 = or %7, %41
%43:i8 = or %6, %42
%44:i8 = or %5, %43
%45:i8 = or %4, %44
%46:i8 = or %3, %45
%47:i8 = or %2, %46
%48:i8 = or %1, %47
%49:i8 = or %0, %48
infer %49

; *****
; For LLVM instruction:
;  %117 = load i8, i8* %116, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %118 = or i8 %115, %117
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = var
%26:i8 = xor 1:i8, %25
%27:i8 = or %24, %26
%28:i8 = or %23, %27
%29:i8 = or %22, %28
%30:i8 = or %21, %29
%31:i8 = or %20, %30
%32:i8 = or %19, %31
%33:i8 = or %18, %32
%34:i8 = or %17, %33
%35:i8 = or %16, %34
%36:i8 = or %15, %35
%37:i8 = or %14, %36
%38:i8 = or %13, %37
%39:i8 = or %12, %38
%40:i8 = or %11, %39
%41:i8 = or %10, %40
%42:i8 = or %9, %41
%43:i8 = or %8, %42
%44:i8 = or %7, %43
%45:i8 = or %6, %44
%46:i8 = or %5, %45
%47:i8 = or %4, %46
%48:i8 = or %3, %47
%49:i8 = or %2, %48
%50:i8 = or %1, %49
%51:i8 = or %0, %50
infer %51

; *****
; For LLVM instruction:
;  %120 = load i8, i8* %119, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %121 = or i8 %118, %120
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = var
%26:i8 = var
%27:i8 = xor 1:i8, %26
%28:i8 = or %25, %27
%29:i8 = or %24, %28
%30:i8 = or %23, %29
%31:i8 = or %22, %30
%32:i8 = or %21, %31
%33:i8 = or %20, %32
%34:i8 = or %19, %33
%35:i8 = or %18, %34
%36:i8 = or %17, %35
%37:i8 = or %16, %36
%38:i8 = or %15, %37
%39:i8 = or %14, %38
%40:i8 = or %13, %39
%41:i8 = or %12, %40
%42:i8 = or %11, %41
%43:i8 = or %10, %42
%44:i8 = or %9, %43
%45:i8 = or %8, %44
%46:i8 = or %7, %45
%47:i8 = or %6, %46
%48:i8 = or %5, %47
%49:i8 = or %4, %48
%50:i8 = or %3, %49
%51:i8 = or %2, %50
%52:i8 = or %1, %51
%53:i8 = or %0, %52
infer %53

; *****
; For LLVM instruction:
;  %123 = load i8, i8* %122, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %124 = or i8 %121, %123
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = var
%26:i8 = var
%27:i8 = var
%28:i8 = xor 1:i8, %27
%29:i8 = or %26, %28
%30:i8 = or %25, %29
%31:i8 = or %24, %30
%32:i8 = or %23, %31
%33:i8 = or %22, %32
%34:i8 = or %21, %33
%35:i8 = or %20, %34
%36:i8 = or %19, %35
%37:i8 = or %18, %36
%38:i8 = or %17, %37
%39:i8 = or %16, %38
%40:i8 = or %15, %39
%41:i8 = or %14, %40
%42:i8 = or %13, %41
%43:i8 = or %12, %42
%44:i8 = or %11, %43
%45:i8 = or %10, %44
%46:i8 = or %9, %45
%47:i8 = or %8, %46
%48:i8 = or %7, %47
%49:i8 = or %6, %48
%50:i8 = or %5, %49
%51:i8 = or %4, %50
%52:i8 = or %3, %51
%53:i8 = or %2, %52
%54:i8 = or %1, %53
%55:i8 = or %0, %54
infer %55

; *****
; For LLVM instruction:
;  %126 = load i8, i8* %125, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %127 = or i8 %124, %126
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = var
%26:i8 = var
%27:i8 = var
%28:i8 = var
%29:i8 = xor 1:i8, %28
%30:i8 = or %27, %29
%31:i8 = or %26, %30
%32:i8 = or %25, %31
%33:i8 = or %24, %32
%34:i8 = or %23, %33
%35:i8 = or %22, %34
%36:i8 = or %21, %35
%37:i8 = or %20, %36
%38:i8 = or %19, %37
%39:i8 = or %18, %38
%40:i8 = or %17, %39
%41:i8 = or %16, %40
%42:i8 = or %15, %41
%43:i8 = or %14, %42
%44:i8 = or %13, %43
%45:i8 = or %12, %44
%46:i8 = or %11, %45
%47:i8 = or %10, %46
%48:i8 = or %9, %47
%49:i8 = or %8, %48
%50:i8 = or %7, %49
%51:i8 = or %6, %50
%52:i8 = or %5, %51
%53:i8 = or %4, %52
%54:i8 = or %3, %53
%55:i8 = or %2, %54
%56:i8 = or %1, %55
%57:i8 = or %0, %56
infer %57

; *****
; For LLVM instruction:
;  %129 = load i8, i8* %128, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %130 = or i8 %127, %129
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = var
%26:i8 = var
%27:i8 = var
%28:i8 = var
%29:i8 = var
%30:i8 = xor 1:i8, %29
%31:i8 = or %28, %30
%32:i8 = or %27, %31
%33:i8 = or %26, %32
%34:i8 = or %25, %33
%35:i8 = or %24, %34
%36:i8 = or %23, %35
%37:i8 = or %22, %36
%38:i8 = or %21, %37
%39:i8 = or %20, %38
%40:i8 = or %19, %39
%41:i8 = or %18, %40
%42:i8 = or %17, %41
%43:i8 = or %16, %42
%44:i8 = or %15, %43
%45:i8 = or %14, %44
%46:i8 = or %13, %45
%47:i8 = or %12, %46
%48:i8 = or %11, %47
%49:i8 = or %10, %48
%50:i8 = or %9, %49
%51:i8 = or %8, %50
%52:i8 = or %7, %51
%53:i8 = or %6, %52
%54:i8 = or %5, %53
%55:i8 = or %4, %54
%56:i8 = or %3, %55
%57:i8 = or %2, %56
%58:i8 = or %1, %57
%59:i8 = or %0, %58
infer %59

; *****
; For LLVM instruction:
;  %132 = load i8, i8* %131, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %133 = or i8 %130, %132
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = var
%26:i8 = var
%27:i8 = var
%28:i8 = var
%29:i8 = var
%30:i8 = var
%31:i8 = xor 1:i8, %30
%32:i8 = or %29, %31
%33:i8 = or %28, %32
%34:i8 = or %27, %33
%35:i8 = or %26, %34
%36:i8 = or %25, %35
%37:i8 = or %24, %36
%38:i8 = or %23, %37
%39:i8 = or %22, %38
%40:i8 = or %21, %39
%41:i8 = or %20, %40
%42:i8 = or %19, %41
%43:i8 = or %18, %42
%44:i8 = or %17, %43
%45:i8 = or %16, %44
%46:i8 = or %15, %45
%47:i8 = or %14, %46
%48:i8 = or %13, %47
%49:i8 = or %12, %48
%50:i8 = or %11, %49
%51:i8 = or %10, %50
%52:i8 = or %9, %51
%53:i8 = or %8, %52
%54:i8 = or %7, %53
%55:i8 = or %6, %54
%56:i8 = or %5, %55
%57:i8 = or %4, %56
%58:i8 = or %3, %57
%59:i8 = or %2, %58
%60:i8 = or %1, %59
%61:i8 = or %0, %60
infer %61

; *****
; For LLVM instruction:
;  %134 = load i8, i8* %40, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=01111111)

; *****
; For LLVM instruction:
;  %135 = and i8 %134, 127
; Looking for a replacement for:
%0:i8 = var
%1:i8 = and 127:i8, %0
infer %1

; *****
; For LLVM instruction:
;  %136 = or i8 %133, %135
; Looking for a replacement for:
%0:i8 = var
%1:i8 = and 127:i8, %0
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = var
%26:i8 = var
%27:i8 = var
%28:i8 = var
%29:i8 = var
%30:i8 = var
%31:i8 = var
%32:i8 = var
%33:i8 = xor 1:i8, %32
%34:i8 = or %31, %33
%35:i8 = or %30, %34
%36:i8 = or %29, %35
%37:i8 = or %28, %36
%38:i8 = or %27, %37
%39:i8 = or %26, %38
%40:i8 = or %25, %39
%41:i8 = or %24, %40
%42:i8 = or %23, %41
%43:i8 = or %22, %42
%44:i8 = or %21, %43
%45:i8 = or %20, %44
%46:i8 = or %19, %45
%47:i8 = or %18, %46
%48:i8 = or %17, %47
%49:i8 = or %16, %48
%50:i8 = or %15, %49
%51:i8 = or %14, %50
%52:i8 = or %13, %51
%53:i8 = or %12, %52
%54:i8 = or %11, %53
%55:i8 = or %10, %54
%56:i8 = or %9, %55
%57:i8 = or %8, %56
%58:i8 = or %7, %57
%59:i8 = or %6, %58
%60:i8 = or %5, %59
%61:i8 = or %4, %60
%62:i8 = or %3, %61
%63:i8 = or %2, %62
%64:i8 = or %1, %63
infer %64

; *****
; For LLVM instruction:
;  %137 = zext i8 %136 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i8 = and 127:i8, %0
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = var
%26:i8 = var
%27:i8 = var
%28:i8 = var
%29:i8 = var
%30:i8 = var
%31:i8 = var
%32:i8 = var
%33:i8 = xor 1:i8, %32
%34:i8 = or %31, %33
%35:i8 = or %30, %34
%36:i8 = or %29, %35
%37:i8 = or %28, %36
%38:i8 = or %27, %37
%39:i8 = or %26, %38
%40:i8 = or %25, %39
%41:i8 = or %24, %40
%42:i8 = or %23, %41
%43:i8 = or %22, %42
%44:i8 = or %21, %43
%45:i8 = or %20, %44
%46:i8 = or %19, %45
%47:i8 = or %18, %46
%48:i8 = or %17, %47
%49:i8 = or %16, %48
%50:i8 = or %15, %49
%51:i8 = or %14, %50
%52:i8 = or %13, %51
%53:i8 = or %12, %52
%54:i8 = or %11, %53
%55:i8 = or %10, %54
%56:i8 = or %9, %55
%57:i8 = or %8, %56
%58:i8 = or %7, %57
%59:i8 = or %6, %58
%60:i8 = or %5, %59
%61:i8 = or %4, %60
%62:i8 = or %3, %61
%63:i8 = or %2, %62
%64:i8 = or %1, %63
%65:i32 = zext %64
infer %65 (demandedBits=00000000000000000000000111111111)

; *****
; For LLVM instruction:
;  %138 = add nuw nsw i32 %137, 511
; Looking for a replacement for:
%0:i8 = var
%1:i8 = and 127:i8, %0
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = var
%26:i8 = var
%27:i8 = var
%28:i8 = var
%29:i8 = var
%30:i8 = var
%31:i8 = var
%32:i8 = var
%33:i8 = xor 1:i8, %32
%34:i8 = or %31, %33
%35:i8 = or %30, %34
%36:i8 = or %29, %35
%37:i8 = or %28, %36
%38:i8 = or %27, %37
%39:i8 = or %26, %38
%40:i8 = or %25, %39
%41:i8 = or %24, %40
%42:i8 = or %23, %41
%43:i8 = or %22, %42
%44:i8 = or %21, %43
%45:i8 = or %20, %44
%46:i8 = or %19, %45
%47:i8 = or %18, %46
%48:i8 = or %17, %47
%49:i8 = or %16, %48
%50:i8 = or %15, %49
%51:i8 = or %14, %50
%52:i8 = or %13, %51
%53:i8 = or %12, %52
%54:i8 = or %11, %53
%55:i8 = or %10, %54
%56:i8 = or %9, %55
%57:i8 = or %8, %56
%58:i8 = or %7, %57
%59:i8 = or %6, %58
%60:i8 = or %5, %59
%61:i8 = or %4, %60
%62:i8 = or %3, %61
%63:i8 = or %2, %62
%64:i8 = or %1, %63
%65:i32 = zext %64
%66:i32 = addnw 511:i32, %65
infer %66 (demandedBits=00000000000000000000000100000000)

; *****
; For LLVM instruction:
;  %139 = and i32 %138, 256
; Looking for a replacement for:
%0:i8 = var
%1:i8 = and 127:i8, %0
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = var
%26:i8 = var
%27:i8 = var
%28:i8 = var
%29:i8 = var
%30:i8 = var
%31:i8 = var
%32:i8 = var
%33:i8 = xor 1:i8, %32
%34:i8 = or %31, %33
%35:i8 = or %30, %34
%36:i8 = or %29, %35
%37:i8 = or %28, %36
%38:i8 = or %27, %37
%39:i8 = or %26, %38
%40:i8 = or %25, %39
%41:i8 = or %24, %40
%42:i8 = or %23, %41
%43:i8 = or %22, %42
%44:i8 = or %21, %43
%45:i8 = or %20, %44
%46:i8 = or %19, %45
%47:i8 = or %18, %46
%48:i8 = or %17, %47
%49:i8 = or %16, %48
%50:i8 = or %15, %49
%51:i8 = or %14, %50
%52:i8 = or %13, %51
%53:i8 = or %12, %52
%54:i8 = or %11, %53
%55:i8 = or %10, %54
%56:i8 = or %9, %55
%57:i8 = or %8, %56
%58:i8 = or %7, %57
%59:i8 = or %6, %58
%60:i8 = or %5, %59
%61:i8 = or %4, %60
%62:i8 = or %3, %61
%63:i8 = or %2, %62
%64:i8 = or %1, %63
%65:i32 = zext %64
%66:i32 = addnw 511:i32, %65
%67:i32 = and 256:i32, %66
infer %67

; *****
; For LLVM instruction:
;  %140 = icmp eq i32 %139, 0
; Looking for a replacement for:
%0:i8 = var
%1:i8 = and 127:i8, %0
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = var
%26:i8 = var
%27:i8 = var
%28:i8 = var
%29:i8 = var
%30:i8 = var
%31:i8 = var
%32:i8 = var
%33:i8 = xor 1:i8, %32
%34:i8 = or %31, %33
%35:i8 = or %30, %34
%36:i8 = or %29, %35
%37:i8 = or %28, %36
%38:i8 = or %27, %37
%39:i8 = or %26, %38
%40:i8 = or %25, %39
%41:i8 = or %24, %40
%42:i8 = or %23, %41
%43:i8 = or %22, %42
%44:i8 = or %21, %43
%45:i8 = or %20, %44
%46:i8 = or %19, %45
%47:i8 = or %18, %46
%48:i8 = or %17, %47
%49:i8 = or %16, %48
%50:i8 = or %15, %49
%51:i8 = or %14, %50
%52:i8 = or %13, %51
%53:i8 = or %12, %52
%54:i8 = or %11, %53
%55:i8 = or %10, %54
%56:i8 = or %9, %55
%57:i8 = or %8, %56
%58:i8 = or %7, %57
%59:i8 = or %6, %58
%60:i8 = or %5, %59
%61:i8 = or %4, %60
%62:i8 = or %3, %61
%63:i8 = or %2, %62
%64:i8 = or %1, %63
%65:i32 = zext %64
%66:i32 = addnw 511:i32, %65
%67:i32 = and 256:i32, %66
%68:i1 = eq 0:i32, %67
infer %68

; *****
; For LLVM instruction:
;  %142 = call i32 @sodium_is_zero(i8* nonnull %1, i32 32) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %143 = icmp ne i32 %142, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %144 = sext i1 %143 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i32 = sext %1
infer %2

; *****
; For LLVM instruction:
;  %146 = phi i32 [ -1, %14 ], [ -1, %11 ], [ -1, %17 ], [ -1, %4 ], [ -1, %38 ], [ %144, %141 ]
; Looking for a replacement for:
%0 = block 6
%1:i32 = var
%2:i1 = ne 0:i32, %1
%3:i32 = sext %2
%4:i32 = phi %0, 4294967295:i32, 4294967295:i32, 4294967295:i32, 4294967295:i32, 4294967295:i32, %3
infer %4
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,32))
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 8
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,32))
%1:i32 = addnw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 9
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,32))

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,32))
%1:i32 = addnw 1:i32, %0 (hasExternalUses)
%2:i1 = eq 32:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0 (demandedBits=01111111)


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 127
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0 (demandedBits=11111000)


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -8
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = and 248:i8, %0
infer %1


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -8
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0 (demandedBits=10111111)


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -73
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = or 64:i8, %0
infer %1


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 64
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -9
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i8 = var
%2:i8 = var
%3:i8 = or 64:i8, %2 (hasExternalUses)
%4:i8 = phi %0, %1, %3
infer %4 (demandedBits=01111111)


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 64
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i8 = var
%2:i8 = var
%3:i8 = or 64:i8, %2
%4:i8 = phi %0, %1, %3
%5:i8 = and 127:i8, %4
infer %5


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 64
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 63
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var
%1:i8 = or 64:i8, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0 = block 2
%1:i8 = var
%2:i8 = var
%3:i8 = or 64:i8, %2 (hasExternalUses)
%4:i8 = phi %0, %1, %3

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = xor 1:i8, %0
infer %1


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = var
%2:i8 = xor 1:i8, %1
%3:i8 = or %0, %2
infer %3


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -127
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var
%1:i8 = xor 1:i8, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor 1:i8, %2
%4:i8 = or %1, %3
%5:i8 = or %0, %4
infer %5


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -127
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i8 = xor 1:i8, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i8 = var
%1:i8 = var
%2:i8 = xor 1:i8, %1
%3:i8 = or %0, %2

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 6 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = xor 1:i8, %3
%5:i8 = or %2, %4
%6:i8 = or %1, %5
%7:i8 = or %0, %6
infer %7


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -127
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i8 = var
%1:i8 = xor 1:i8, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i8 = var
%1:i8 = var
%2:i8 = xor 1:i8, %1
%3:i8 = or %0, %2

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor 1:i8, %2
%4:i8 = or %1, %3
%5:i8 = or %0, %4

Cost = 3
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = xor 1:i8, %4
%6:i8 = or %3, %5
%7:i8 = or %2, %6
%8:i8 = or %1, %7
%9:i8 = or %0, %8
infer %9


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -127
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i8 = xor 1:i8, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i8 = var
%1:i8 = var
%2:i8 = xor 1:i8, %1
%3:i8 = or %0, %2

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor 1:i8, %2
%4:i8 = or %1, %3
%5:i8 = or %0, %4

Cost = 3
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = xor 1:i8, %3
%5:i8 = or %2, %4
%6:i8 = or %1, %5
%7:i8 = or %0, %6

Cost = 4
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = xor 1:i8, %5
%7:i8 = or %4, %6
%8:i8 = or %3, %7
%9:i8 = or %2, %8
%10:i8 = or %1, %9
%11:i8 = or %0, %10
infer %11


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -127
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i8 = var
%2:i8 = xor 1:i8, %1
%3:i8 = or %0, %2

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor 1:i8, %2
%4:i8 = or %1, %3
%5:i8 = or %0, %4

Cost = 3
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = xor 1:i8, %3
%5:i8 = or %2, %4
%6:i8 = or %1, %5
%7:i8 = or %0, %6

Cost = 4
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = xor 1:i8, %4
%6:i8 = or %3, %5
%7:i8 = or %2, %6
%8:i8 = or %1, %7
%9:i8 = or %0, %8

Cost = 5
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = xor 1:i8, %6
%8:i8 = or %5, %7
%9:i8 = or %4, %8
%10:i8 = or %3, %9
%11:i8 = or %2, %10
%12:i8 = or %1, %11
%13:i8 = or %0, %12
infer %13


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -127
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor 1:i8, %2
%4:i8 = or %1, %3
%5:i8 = or %0, %4

Cost = 3
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = xor 1:i8, %3
%5:i8 = or %2, %4
%6:i8 = or %1, %5
%7:i8 = or %0, %6

Cost = 4
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = xor 1:i8, %4
%6:i8 = or %3, %5
%7:i8 = or %2, %6
%8:i8 = or %1, %7
%9:i8 = or %0, %8

Cost = 5
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = xor 1:i8, %5
%7:i8 = or %4, %6
%8:i8 = or %3, %7
%9:i8 = or %2, %8
%10:i8 = or %1, %9
%11:i8 = or %0, %10

Cost = 6
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = xor 1:i8, %7
%9:i8 = or %6, %8
%10:i8 = or %5, %9
%11:i8 = or %4, %10
%12:i8 = or %3, %11
%13:i8 = or %2, %12
%14:i8 = or %1, %13
%15:i8 = or %0, %14
infer %15


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -127
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = xor 1:i8, %3
%5:i8 = or %2, %4
%6:i8 = or %1, %5
%7:i8 = or %0, %6

Cost = 4
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = xor 1:i8, %4
%6:i8 = or %3, %5
%7:i8 = or %2, %6
%8:i8 = or %1, %7
%9:i8 = or %0, %8

Cost = 5
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = xor 1:i8, %5
%7:i8 = or %4, %6
%8:i8 = or %3, %7
%9:i8 = or %2, %8
%10:i8 = or %1, %9
%11:i8 = or %0, %10

Cost = 6
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = xor 1:i8, %6
%8:i8 = or %5, %7
%9:i8 = or %4, %8
%10:i8 = or %3, %9
%11:i8 = or %2, %10
%12:i8 = or %1, %11
%13:i8 = or %0, %12

Cost = 7
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = xor 1:i8, %8
%10:i8 = or %7, %9
%11:i8 = or %6, %10
%12:i8 = or %5, %11
%13:i8 = or %4, %12
%14:i8 = or %3, %13
%15:i8 = or %2, %14
%16:i8 = or %1, %15
%17:i8 = or %0, %16
infer %17


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -127
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = xor 1:i8, %4
%6:i8 = or %3, %5
%7:i8 = or %2, %6
%8:i8 = or %1, %7
%9:i8 = or %0, %8

Cost = 5
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = xor 1:i8, %5
%7:i8 = or %4, %6
%8:i8 = or %3, %7
%9:i8 = or %2, %8
%10:i8 = or %1, %9
%11:i8 = or %0, %10

Cost = 6
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = xor 1:i8, %6
%8:i8 = or %5, %7
%9:i8 = or %4, %8
%10:i8 = or %3, %9
%11:i8 = or %2, %10
%12:i8 = or %1, %11
%13:i8 = or %0, %12

Cost = 7
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = xor 1:i8, %7
%9:i8 = or %6, %8
%10:i8 = or %5, %9
%11:i8 = or %4, %10
%12:i8 = or %3, %11
%13:i8 = or %2, %12
%14:i8 = or %1, %13
%15:i8 = or %0, %14

Cost = 8
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = xor 1:i8, %9
%11:i8 = or %8, %10
%12:i8 = or %7, %11
%13:i8 = or %6, %12
%14:i8 = or %5, %13
%15:i8 = or %4, %14
%16:i8 = or %3, %15
%17:i8 = or %2, %16
%18:i8 = or %1, %17
%19:i8 = or %0, %18
infer %19


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -127
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = xor 1:i8, %5
%7:i8 = or %4, %6
%8:i8 = or %3, %7
%9:i8 = or %2, %8
%10:i8 = or %1, %9
%11:i8 = or %0, %10

Cost = 6
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = xor 1:i8, %6
%8:i8 = or %5, %7
%9:i8 = or %4, %8
%10:i8 = or %3, %9
%11:i8 = or %2, %10
%12:i8 = or %1, %11
%13:i8 = or %0, %12

Cost = 7
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = xor 1:i8, %7
%9:i8 = or %6, %8
%10:i8 = or %5, %9
%11:i8 = or %4, %10
%12:i8 = or %3, %11
%13:i8 = or %2, %12
%14:i8 = or %1, %13
%15:i8 = or %0, %14

Cost = 8
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = xor 1:i8, %8
%10:i8 = or %7, %9
%11:i8 = or %6, %10
%12:i8 = or %5, %11
%13:i8 = or %4, %12
%14:i8 = or %3, %13
%15:i8 = or %2, %14
%16:i8 = or %1, %15
%17:i8 = or %0, %16

Cost = 9
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = xor 1:i8, %10
%12:i8 = or %9, %11
%13:i8 = or %8, %12
%14:i8 = or %7, %13
%15:i8 = or %6, %14
%16:i8 = or %5, %15
%17:i8 = or %4, %16
%18:i8 = or %3, %17
%19:i8 = or %2, %18
%20:i8 = or %1, %19
%21:i8 = or %0, %20
infer %21


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -127
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = xor 1:i8, %6
%8:i8 = or %5, %7
%9:i8 = or %4, %8
%10:i8 = or %3, %9
%11:i8 = or %2, %10
%12:i8 = or %1, %11
%13:i8 = or %0, %12

Cost = 7
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = xor 1:i8, %7
%9:i8 = or %6, %8
%10:i8 = or %5, %9
%11:i8 = or %4, %10
%12:i8 = or %3, %11
%13:i8 = or %2, %12
%14:i8 = or %1, %13
%15:i8 = or %0, %14

Cost = 8
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = xor 1:i8, %8
%10:i8 = or %7, %9
%11:i8 = or %6, %10
%12:i8 = or %5, %11
%13:i8 = or %4, %12
%14:i8 = or %3, %13
%15:i8 = or %2, %14
%16:i8 = or %1, %15
%17:i8 = or %0, %16

Cost = 9
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = xor 1:i8, %9
%11:i8 = or %8, %10
%12:i8 = or %7, %11
%13:i8 = or %6, %12
%14:i8 = or %5, %13
%15:i8 = or %4, %14
%16:i8 = or %3, %15
%17:i8 = or %2, %16
%18:i8 = or %1, %17
%19:i8 = or %0, %18

Cost = 10
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = xor 1:i8, %11
%13:i8 = or %10, %12
%14:i8 = or %9, %13
%15:i8 = or %8, %14
%16:i8 = or %7, %15
%17:i8 = or %6, %16
%18:i8 = or %5, %17
%19:i8 = or %4, %18
%20:i8 = or %3, %19
%21:i8 = or %2, %20
%22:i8 = or %1, %21
%23:i8 = or %0, %22
infer %23


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -127
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = xor 1:i8, %7
%9:i8 = or %6, %8
%10:i8 = or %5, %9
%11:i8 = or %4, %10
%12:i8 = or %3, %11
%13:i8 = or %2, %12
%14:i8 = or %1, %13
%15:i8 = or %0, %14

Cost = 8
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = xor 1:i8, %8
%10:i8 = or %7, %9
%11:i8 = or %6, %10
%12:i8 = or %5, %11
%13:i8 = or %4, %12
%14:i8 = or %3, %13
%15:i8 = or %2, %14
%16:i8 = or %1, %15
%17:i8 = or %0, %16

Cost = 9
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = xor 1:i8, %9
%11:i8 = or %8, %10
%12:i8 = or %7, %11
%13:i8 = or %6, %12
%14:i8 = or %5, %13
%15:i8 = or %4, %14
%16:i8 = or %3, %15
%17:i8 = or %2, %16
%18:i8 = or %1, %17
%19:i8 = or %0, %18

Cost = 10
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = xor 1:i8, %10
%12:i8 = or %9, %11
%13:i8 = or %8, %12
%14:i8 = or %7, %13
%15:i8 = or %6, %14
%16:i8 = or %5, %15
%17:i8 = or %4, %16
%18:i8 = or %3, %17
%19:i8 = or %2, %18
%20:i8 = or %1, %19
%21:i8 = or %0, %20

Cost = 11
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = xor 1:i8, %12
%14:i8 = or %11, %13
%15:i8 = or %10, %14
%16:i8 = or %9, %15
%17:i8 = or %8, %16
%18:i8 = or %7, %17
%19:i8 = or %6, %18
%20:i8 = or %5, %19
%21:i8 = or %4, %20
%22:i8 = or %3, %21
%23:i8 = or %2, %22
%24:i8 = or %1, %23
%25:i8 = or %0, %24
infer %25


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -127
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = xor 1:i8, %8
%10:i8 = or %7, %9
%11:i8 = or %6, %10
%12:i8 = or %5, %11
%13:i8 = or %4, %12
%14:i8 = or %3, %13
%15:i8 = or %2, %14
%16:i8 = or %1, %15
%17:i8 = or %0, %16

Cost = 9
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = xor 1:i8, %9
%11:i8 = or %8, %10
%12:i8 = or %7, %11
%13:i8 = or %6, %12
%14:i8 = or %5, %13
%15:i8 = or %4, %14
%16:i8 = or %3, %15
%17:i8 = or %2, %16
%18:i8 = or %1, %17
%19:i8 = or %0, %18

Cost = 10
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = xor 1:i8, %10
%12:i8 = or %9, %11
%13:i8 = or %8, %12
%14:i8 = or %7, %13
%15:i8 = or %6, %14
%16:i8 = or %5, %15
%17:i8 = or %4, %16
%18:i8 = or %3, %17
%19:i8 = or %2, %18
%20:i8 = or %1, %19
%21:i8 = or %0, %20

Cost = 11
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = xor 1:i8, %11
%13:i8 = or %10, %12
%14:i8 = or %9, %13
%15:i8 = or %8, %14
%16:i8 = or %7, %15
%17:i8 = or %6, %16
%18:i8 = or %5, %17
%19:i8 = or %4, %18
%20:i8 = or %3, %19
%21:i8 = or %2, %20
%22:i8 = or %1, %21
%23:i8 = or %0, %22

Cost = 12
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = xor 1:i8, %13
%15:i8 = or %12, %14
%16:i8 = or %11, %15
%17:i8 = or %10, %16
%18:i8 = or %9, %17
%19:i8 = or %8, %18
%20:i8 = or %7, %19
%21:i8 = or %6, %20
%22:i8 = or %5, %21
%23:i8 = or %4, %22
%24:i8 = or %3, %23
%25:i8 = or %2, %24
%26:i8 = or %1, %25
%27:i8 = or %0, %26
infer %27


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -127
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = xor 1:i8, %9
%11:i8 = or %8, %10
%12:i8 = or %7, %11
%13:i8 = or %6, %12
%14:i8 = or %5, %13
%15:i8 = or %4, %14
%16:i8 = or %3, %15
%17:i8 = or %2, %16
%18:i8 = or %1, %17
%19:i8 = or %0, %18

Cost = 10
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = xor 1:i8, %10
%12:i8 = or %9, %11
%13:i8 = or %8, %12
%14:i8 = or %7, %13
%15:i8 = or %6, %14
%16:i8 = or %5, %15
%17:i8 = or %4, %16
%18:i8 = or %3, %17
%19:i8 = or %2, %18
%20:i8 = or %1, %19
%21:i8 = or %0, %20

Cost = 11
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = xor 1:i8, %11
%13:i8 = or %10, %12
%14:i8 = or %9, %13
%15:i8 = or %8, %14
%16:i8 = or %7, %15
%17:i8 = or %6, %16
%18:i8 = or %5, %17
%19:i8 = or %4, %18
%20:i8 = or %3, %19
%21:i8 = or %2, %20
%22:i8 = or %1, %21
%23:i8 = or %0, %22

Cost = 12
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = xor 1:i8, %12
%14:i8 = or %11, %13
%15:i8 = or %10, %14
%16:i8 = or %9, %15
%17:i8 = or %8, %16
%18:i8 = or %7, %17
%19:i8 = or %6, %18
%20:i8 = or %5, %19
%21:i8 = or %4, %20
%22:i8 = or %3, %21
%23:i8 = or %2, %22
%24:i8 = or %1, %23
%25:i8 = or %0, %24

Cost = 13
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = xor 1:i8, %14
%16:i8 = or %13, %15
%17:i8 = or %12, %16
%18:i8 = or %11, %17
%19:i8 = or %10, %18
%20:i8 = or %9, %19
%21:i8 = or %8, %20
%22:i8 = or %7, %21
%23:i8 = or %6, %22
%24:i8 = or %5, %23
%25:i8 = or %4, %24
%26:i8 = or %3, %25
%27:i8 = or %2, %26
%28:i8 = or %1, %27
%29:i8 = or %0, %28
infer %29


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -127
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = xor 1:i8, %10
%12:i8 = or %9, %11
%13:i8 = or %8, %12
%14:i8 = or %7, %13
%15:i8 = or %6, %14
%16:i8 = or %5, %15
%17:i8 = or %4, %16
%18:i8 = or %3, %17
%19:i8 = or %2, %18
%20:i8 = or %1, %19
%21:i8 = or %0, %20

Cost = 11
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = xor 1:i8, %11
%13:i8 = or %10, %12
%14:i8 = or %9, %13
%15:i8 = or %8, %14
%16:i8 = or %7, %15
%17:i8 = or %6, %16
%18:i8 = or %5, %17
%19:i8 = or %4, %18
%20:i8 = or %3, %19
%21:i8 = or %2, %20
%22:i8 = or %1, %21
%23:i8 = or %0, %22

Cost = 12
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = xor 1:i8, %12
%14:i8 = or %11, %13
%15:i8 = or %10, %14
%16:i8 = or %9, %15
%17:i8 = or %8, %16
%18:i8 = or %7, %17
%19:i8 = or %6, %18
%20:i8 = or %5, %19
%21:i8 = or %4, %20
%22:i8 = or %3, %21
%23:i8 = or %2, %22
%24:i8 = or %1, %23
%25:i8 = or %0, %24

Cost = 13
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = xor 1:i8, %13
%15:i8 = or %12, %14
%16:i8 = or %11, %15
%17:i8 = or %10, %16
%18:i8 = or %9, %17
%19:i8 = or %8, %18
%20:i8 = or %7, %19
%21:i8 = or %6, %20
%22:i8 = or %5, %21
%23:i8 = or %4, %22
%24:i8 = or %3, %23
%25:i8 = or %2, %24
%26:i8 = or %1, %25
%27:i8 = or %0, %26

Cost = 14
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = xor 1:i8, %15
%17:i8 = or %14, %16
%18:i8 = or %13, %17
%19:i8 = or %12, %18
%20:i8 = or %11, %19
%21:i8 = or %10, %20
%22:i8 = or %9, %21
%23:i8 = or %8, %22
%24:i8 = or %7, %23
%25:i8 = or %6, %24
%26:i8 = or %5, %25
%27:i8 = or %4, %26
%28:i8 = or %3, %27
%29:i8 = or %2, %28
%30:i8 = or %1, %29
%31:i8 = or %0, %30
infer %31


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -127
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = xor 1:i8, %11
%13:i8 = or %10, %12
%14:i8 = or %9, %13
%15:i8 = or %8, %14
%16:i8 = or %7, %15
%17:i8 = or %6, %16
%18:i8 = or %5, %17
%19:i8 = or %4, %18
%20:i8 = or %3, %19
%21:i8 = or %2, %20
%22:i8 = or %1, %21
%23:i8 = or %0, %22

Cost = 12
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = xor 1:i8, %12
%14:i8 = or %11, %13
%15:i8 = or %10, %14
%16:i8 = or %9, %15
%17:i8 = or %8, %16
%18:i8 = or %7, %17
%19:i8 = or %6, %18
%20:i8 = or %5, %19
%21:i8 = or %4, %20
%22:i8 = or %3, %21
%23:i8 = or %2, %22
%24:i8 = or %1, %23
%25:i8 = or %0, %24

Cost = 13
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = xor 1:i8, %13
%15:i8 = or %12, %14
%16:i8 = or %11, %15
%17:i8 = or %10, %16
%18:i8 = or %9, %17
%19:i8 = or %8, %18
%20:i8 = or %7, %19
%21:i8 = or %6, %20
%22:i8 = or %5, %21
%23:i8 = or %4, %22
%24:i8 = or %3, %23
%25:i8 = or %2, %24
%26:i8 = or %1, %25
%27:i8 = or %0, %26

Cost = 14
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = xor 1:i8, %14
%16:i8 = or %13, %15
%17:i8 = or %12, %16
%18:i8 = or %11, %17
%19:i8 = or %10, %18
%20:i8 = or %9, %19
%21:i8 = or %8, %20
%22:i8 = or %7, %21
%23:i8 = or %6, %22
%24:i8 = or %5, %23
%25:i8 = or %4, %24
%26:i8 = or %3, %25
%27:i8 = or %2, %26
%28:i8 = or %1, %27
%29:i8 = or %0, %28

Cost = 15
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = xor 1:i8, %16
%18:i8 = or %15, %17
%19:i8 = or %14, %18
%20:i8 = or %13, %19
%21:i8 = or %12, %20
%22:i8 = or %11, %21
%23:i8 = or %10, %22
%24:i8 = or %9, %23
%25:i8 = or %8, %24
%26:i8 = or %7, %25
%27:i8 = or %6, %26
%28:i8 = or %5, %27
%29:i8 = or %4, %28
%30:i8 = or %3, %29
%31:i8 = or %2, %30
%32:i8 = or %1, %31
%33:i8 = or %0, %32
infer %33


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -127
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = xor 1:i8, %12
%14:i8 = or %11, %13
%15:i8 = or %10, %14
%16:i8 = or %9, %15
%17:i8 = or %8, %16
%18:i8 = or %7, %17
%19:i8 = or %6, %18
%20:i8 = or %5, %19
%21:i8 = or %4, %20
%22:i8 = or %3, %21
%23:i8 = or %2, %22
%24:i8 = or %1, %23
%25:i8 = or %0, %24

Cost = 13
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = xor 1:i8, %13
%15:i8 = or %12, %14
%16:i8 = or %11, %15
%17:i8 = or %10, %16
%18:i8 = or %9, %17
%19:i8 = or %8, %18
%20:i8 = or %7, %19
%21:i8 = or %6, %20
%22:i8 = or %5, %21
%23:i8 = or %4, %22
%24:i8 = or %3, %23
%25:i8 = or %2, %24
%26:i8 = or %1, %25
%27:i8 = or %0, %26

Cost = 14
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = xor 1:i8, %14
%16:i8 = or %13, %15
%17:i8 = or %12, %16
%18:i8 = or %11, %17
%19:i8 = or %10, %18
%20:i8 = or %9, %19
%21:i8 = or %8, %20
%22:i8 = or %7, %21
%23:i8 = or %6, %22
%24:i8 = or %5, %23
%25:i8 = or %4, %24
%26:i8 = or %3, %25
%27:i8 = or %2, %26
%28:i8 = or %1, %27
%29:i8 = or %0, %28

Cost = 15
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = xor 1:i8, %15
%17:i8 = or %14, %16
%18:i8 = or %13, %17
%19:i8 = or %12, %18
%20:i8 = or %11, %19
%21:i8 = or %10, %20
%22:i8 = or %9, %21
%23:i8 = or %8, %22
%24:i8 = or %7, %23
%25:i8 = or %6, %24
%26:i8 = or %5, %25
%27:i8 = or %4, %26
%28:i8 = or %3, %27
%29:i8 = or %2, %28
%30:i8 = or %1, %29
%31:i8 = or %0, %30

Cost = 16
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = xor 1:i8, %17
%19:i8 = or %16, %18
%20:i8 = or %15, %19
%21:i8 = or %14, %20
%22:i8 = or %13, %21
%23:i8 = or %12, %22
%24:i8 = or %11, %23
%25:i8 = or %10, %24
%26:i8 = or %9, %25
%27:i8 = or %8, %26
%28:i8 = or %7, %27
%29:i8 = or %6, %28
%30:i8 = or %5, %29
%31:i8 = or %4, %30
%32:i8 = or %3, %31
%33:i8 = or %2, %32
%34:i8 = or %1, %33
%35:i8 = or %0, %34
infer %35


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -127
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = xor 1:i8, %13
%15:i8 = or %12, %14
%16:i8 = or %11, %15
%17:i8 = or %10, %16
%18:i8 = or %9, %17
%19:i8 = or %8, %18
%20:i8 = or %7, %19
%21:i8 = or %6, %20
%22:i8 = or %5, %21
%23:i8 = or %4, %22
%24:i8 = or %3, %23
%25:i8 = or %2, %24
%26:i8 = or %1, %25
%27:i8 = or %0, %26

Cost = 14
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = xor 1:i8, %14
%16:i8 = or %13, %15
%17:i8 = or %12, %16
%18:i8 = or %11, %17
%19:i8 = or %10, %18
%20:i8 = or %9, %19
%21:i8 = or %8, %20
%22:i8 = or %7, %21
%23:i8 = or %6, %22
%24:i8 = or %5, %23
%25:i8 = or %4, %24
%26:i8 = or %3, %25
%27:i8 = or %2, %26
%28:i8 = or %1, %27
%29:i8 = or %0, %28

Cost = 15
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = xor 1:i8, %15
%17:i8 = or %14, %16
%18:i8 = or %13, %17
%19:i8 = or %12, %18
%20:i8 = or %11, %19
%21:i8 = or %10, %20
%22:i8 = or %9, %21
%23:i8 = or %8, %22
%24:i8 = or %7, %23
%25:i8 = or %6, %24
%26:i8 = or %5, %25
%27:i8 = or %4, %26
%28:i8 = or %3, %27
%29:i8 = or %2, %28
%30:i8 = or %1, %29
%31:i8 = or %0, %30

Cost = 16
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = xor 1:i8, %16
%18:i8 = or %15, %17
%19:i8 = or %14, %18
%20:i8 = or %13, %19
%21:i8 = or %12, %20
%22:i8 = or %11, %21
%23:i8 = or %10, %22
%24:i8 = or %9, %23
%25:i8 = or %8, %24
%26:i8 = or %7, %25
%27:i8 = or %6, %26
%28:i8 = or %5, %27
%29:i8 = or %4, %28
%30:i8 = or %3, %29
%31:i8 = or %2, %30
%32:i8 = or %1, %31
%33:i8 = or %0, %32

Cost = 17
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = xor 1:i8, %18
%20:i8 = or %17, %19
%21:i8 = or %16, %20
%22:i8 = or %15, %21
%23:i8 = or %14, %22
%24:i8 = or %13, %23
%25:i8 = or %12, %24
%26:i8 = or %11, %25
%27:i8 = or %10, %26
%28:i8 = or %9, %27
%29:i8 = or %8, %28
%30:i8 = or %7, %29
%31:i8 = or %6, %30
%32:i8 = or %5, %31
%33:i8 = or %4, %32
%34:i8 = or %3, %33
%35:i8 = or %2, %34
%36:i8 = or %1, %35
%37:i8 = or %0, %36
infer %37


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -127
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = xor 1:i8, %14
%16:i8 = or %13, %15
%17:i8 = or %12, %16
%18:i8 = or %11, %17
%19:i8 = or %10, %18
%20:i8 = or %9, %19
%21:i8 = or %8, %20
%22:i8 = or %7, %21
%23:i8 = or %6, %22
%24:i8 = or %5, %23
%25:i8 = or %4, %24
%26:i8 = or %3, %25
%27:i8 = or %2, %26
%28:i8 = or %1, %27
%29:i8 = or %0, %28

Cost = 15
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = xor 1:i8, %15
%17:i8 = or %14, %16
%18:i8 = or %13, %17
%19:i8 = or %12, %18
%20:i8 = or %11, %19
%21:i8 = or %10, %20
%22:i8 = or %9, %21
%23:i8 = or %8, %22
%24:i8 = or %7, %23
%25:i8 = or %6, %24
%26:i8 = or %5, %25
%27:i8 = or %4, %26
%28:i8 = or %3, %27
%29:i8 = or %2, %28
%30:i8 = or %1, %29
%31:i8 = or %0, %30

Cost = 16
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = xor 1:i8, %16
%18:i8 = or %15, %17
%19:i8 = or %14, %18
%20:i8 = or %13, %19
%21:i8 = or %12, %20
%22:i8 = or %11, %21
%23:i8 = or %10, %22
%24:i8 = or %9, %23
%25:i8 = or %8, %24
%26:i8 = or %7, %25
%27:i8 = or %6, %26
%28:i8 = or %5, %27
%29:i8 = or %4, %28
%30:i8 = or %3, %29
%31:i8 = or %2, %30
%32:i8 = or %1, %31
%33:i8 = or %0, %32

Cost = 17
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = xor 1:i8, %17
%19:i8 = or %16, %18
%20:i8 = or %15, %19
%21:i8 = or %14, %20
%22:i8 = or %13, %21
%23:i8 = or %12, %22
%24:i8 = or %11, %23
%25:i8 = or %10, %24
%26:i8 = or %9, %25
%27:i8 = or %8, %26
%28:i8 = or %7, %27
%29:i8 = or %6, %28
%30:i8 = or %5, %29
%31:i8 = or %4, %30
%32:i8 = or %3, %31
%33:i8 = or %2, %32
%34:i8 = or %1, %33
%35:i8 = or %0, %34

Cost = 18
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = xor 1:i8, %19
%21:i8 = or %18, %20
%22:i8 = or %17, %21
%23:i8 = or %16, %22
%24:i8 = or %15, %23
%25:i8 = or %14, %24
%26:i8 = or %13, %25
%27:i8 = or %12, %26
%28:i8 = or %11, %27
%29:i8 = or %10, %28
%30:i8 = or %9, %29
%31:i8 = or %8, %30
%32:i8 = or %7, %31
%33:i8 = or %6, %32
%34:i8 = or %5, %33
%35:i8 = or %4, %34
%36:i8 = or %3, %35
%37:i8 = or %2, %36
%38:i8 = or %1, %37
%39:i8 = or %0, %38
infer %39


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -127
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = xor 1:i8, %15
%17:i8 = or %14, %16
%18:i8 = or %13, %17
%19:i8 = or %12, %18
%20:i8 = or %11, %19
%21:i8 = or %10, %20
%22:i8 = or %9, %21
%23:i8 = or %8, %22
%24:i8 = or %7, %23
%25:i8 = or %6, %24
%26:i8 = or %5, %25
%27:i8 = or %4, %26
%28:i8 = or %3, %27
%29:i8 = or %2, %28
%30:i8 = or %1, %29
%31:i8 = or %0, %30

Cost = 16
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = xor 1:i8, %16
%18:i8 = or %15, %17
%19:i8 = or %14, %18
%20:i8 = or %13, %19
%21:i8 = or %12, %20
%22:i8 = or %11, %21
%23:i8 = or %10, %22
%24:i8 = or %9, %23
%25:i8 = or %8, %24
%26:i8 = or %7, %25
%27:i8 = or %6, %26
%28:i8 = or %5, %27
%29:i8 = or %4, %28
%30:i8 = or %3, %29
%31:i8 = or %2, %30
%32:i8 = or %1, %31
%33:i8 = or %0, %32

Cost = 17
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = xor 1:i8, %17
%19:i8 = or %16, %18
%20:i8 = or %15, %19
%21:i8 = or %14, %20
%22:i8 = or %13, %21
%23:i8 = or %12, %22
%24:i8 = or %11, %23
%25:i8 = or %10, %24
%26:i8 = or %9, %25
%27:i8 = or %8, %26
%28:i8 = or %7, %27
%29:i8 = or %6, %28
%30:i8 = or %5, %29
%31:i8 = or %4, %30
%32:i8 = or %3, %31
%33:i8 = or %2, %32
%34:i8 = or %1, %33
%35:i8 = or %0, %34

Cost = 18
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = xor 1:i8, %18
%20:i8 = or %17, %19
%21:i8 = or %16, %20
%22:i8 = or %15, %21
%23:i8 = or %14, %22
%24:i8 = or %13, %23
%25:i8 = or %12, %24
%26:i8 = or %11, %25
%27:i8 = or %10, %26
%28:i8 = or %9, %27
%29:i8 = or %8, %28
%30:i8 = or %7, %29
%31:i8 = or %6, %30
%32:i8 = or %5, %31
%33:i8 = or %4, %32
%34:i8 = or %3, %33
%35:i8 = or %2, %34
%36:i8 = or %1, %35
%37:i8 = or %0, %36

Cost = 19
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = xor 1:i8, %20
%22:i8 = or %19, %21
%23:i8 = or %18, %22
%24:i8 = or %17, %23
%25:i8 = or %16, %24
%26:i8 = or %15, %25
%27:i8 = or %14, %26
%28:i8 = or %13, %27
%29:i8 = or %12, %28
%30:i8 = or %11, %29
%31:i8 = or %10, %30
%32:i8 = or %9, %31
%33:i8 = or %8, %32
%34:i8 = or %7, %33
%35:i8 = or %6, %34
%36:i8 = or %5, %35
%37:i8 = or %4, %36
%38:i8 = or %3, %37
%39:i8 = or %2, %38
%40:i8 = or %1, %39
%41:i8 = or %0, %40
infer %41


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -127
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = xor 1:i8, %16
%18:i8 = or %15, %17
%19:i8 = or %14, %18
%20:i8 = or %13, %19
%21:i8 = or %12, %20
%22:i8 = or %11, %21
%23:i8 = or %10, %22
%24:i8 = or %9, %23
%25:i8 = or %8, %24
%26:i8 = or %7, %25
%27:i8 = or %6, %26
%28:i8 = or %5, %27
%29:i8 = or %4, %28
%30:i8 = or %3, %29
%31:i8 = or %2, %30
%32:i8 = or %1, %31
%33:i8 = or %0, %32

Cost = 17
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = xor 1:i8, %17
%19:i8 = or %16, %18
%20:i8 = or %15, %19
%21:i8 = or %14, %20
%22:i8 = or %13, %21
%23:i8 = or %12, %22
%24:i8 = or %11, %23
%25:i8 = or %10, %24
%26:i8 = or %9, %25
%27:i8 = or %8, %26
%28:i8 = or %7, %27
%29:i8 = or %6, %28
%30:i8 = or %5, %29
%31:i8 = or %4, %30
%32:i8 = or %3, %31
%33:i8 = or %2, %32
%34:i8 = or %1, %33
%35:i8 = or %0, %34

Cost = 18
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = xor 1:i8, %18
%20:i8 = or %17, %19
%21:i8 = or %16, %20
%22:i8 = or %15, %21
%23:i8 = or %14, %22
%24:i8 = or %13, %23
%25:i8 = or %12, %24
%26:i8 = or %11, %25
%27:i8 = or %10, %26
%28:i8 = or %9, %27
%29:i8 = or %8, %28
%30:i8 = or %7, %29
%31:i8 = or %6, %30
%32:i8 = or %5, %31
%33:i8 = or %4, %32
%34:i8 = or %3, %33
%35:i8 = or %2, %34
%36:i8 = or %1, %35
%37:i8 = or %0, %36

Cost = 19
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = xor 1:i8, %19
%21:i8 = or %18, %20
%22:i8 = or %17, %21
%23:i8 = or %16, %22
%24:i8 = or %15, %23
%25:i8 = or %14, %24
%26:i8 = or %13, %25
%27:i8 = or %12, %26
%28:i8 = or %11, %27
%29:i8 = or %10, %28
%30:i8 = or %9, %29
%31:i8 = or %8, %30
%32:i8 = or %7, %31
%33:i8 = or %6, %32
%34:i8 = or %5, %33
%35:i8 = or %4, %34
%36:i8 = or %3, %35
%37:i8 = or %2, %36
%38:i8 = or %1, %37
%39:i8 = or %0, %38

Cost = 20
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = xor 1:i8, %21
%23:i8 = or %20, %22
%24:i8 = or %19, %23
%25:i8 = or %18, %24
%26:i8 = or %17, %25
%27:i8 = or %16, %26
%28:i8 = or %15, %27
%29:i8 = or %14, %28
%30:i8 = or %13, %29
%31:i8 = or %12, %30
%32:i8 = or %11, %31
%33:i8 = or %10, %32
%34:i8 = or %9, %33
%35:i8 = or %8, %34
%36:i8 = or %7, %35
%37:i8 = or %6, %36
%38:i8 = or %5, %37
%39:i8 = or %4, %38
%40:i8 = or %3, %39
%41:i8 = or %2, %40
%42:i8 = or %1, %41
%43:i8 = or %0, %42
infer %43


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -127
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = xor 1:i8, %17
%19:i8 = or %16, %18
%20:i8 = or %15, %19
%21:i8 = or %14, %20
%22:i8 = or %13, %21
%23:i8 = or %12, %22
%24:i8 = or %11, %23
%25:i8 = or %10, %24
%26:i8 = or %9, %25
%27:i8 = or %8, %26
%28:i8 = or %7, %27
%29:i8 = or %6, %28
%30:i8 = or %5, %29
%31:i8 = or %4, %30
%32:i8 = or %3, %31
%33:i8 = or %2, %32
%34:i8 = or %1, %33
%35:i8 = or %0, %34

Cost = 18
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = xor 1:i8, %18
%20:i8 = or %17, %19
%21:i8 = or %16, %20
%22:i8 = or %15, %21
%23:i8 = or %14, %22
%24:i8 = or %13, %23
%25:i8 = or %12, %24
%26:i8 = or %11, %25
%27:i8 = or %10, %26
%28:i8 = or %9, %27
%29:i8 = or %8, %28
%30:i8 = or %7, %29
%31:i8 = or %6, %30
%32:i8 = or %5, %31
%33:i8 = or %4, %32
%34:i8 = or %3, %33
%35:i8 = or %2, %34
%36:i8 = or %1, %35
%37:i8 = or %0, %36

Cost = 19
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = xor 1:i8, %19
%21:i8 = or %18, %20
%22:i8 = or %17, %21
%23:i8 = or %16, %22
%24:i8 = or %15, %23
%25:i8 = or %14, %24
%26:i8 = or %13, %25
%27:i8 = or %12, %26
%28:i8 = or %11, %27
%29:i8 = or %10, %28
%30:i8 = or %9, %29
%31:i8 = or %8, %30
%32:i8 = or %7, %31
%33:i8 = or %6, %32
%34:i8 = or %5, %33
%35:i8 = or %4, %34
%36:i8 = or %3, %35
%37:i8 = or %2, %36
%38:i8 = or %1, %37
%39:i8 = or %0, %38

Cost = 20
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = xor 1:i8, %20
%22:i8 = or %19, %21
%23:i8 = or %18, %22
%24:i8 = or %17, %23
%25:i8 = or %16, %24
%26:i8 = or %15, %25
%27:i8 = or %14, %26
%28:i8 = or %13, %27
%29:i8 = or %12, %28
%30:i8 = or %11, %29
%31:i8 = or %10, %30
%32:i8 = or %9, %31
%33:i8 = or %8, %32
%34:i8 = or %7, %33
%35:i8 = or %6, %34
%36:i8 = or %5, %35
%37:i8 = or %4, %36
%38:i8 = or %3, %37
%39:i8 = or %2, %38
%40:i8 = or %1, %39
%41:i8 = or %0, %40

Cost = 21
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = xor 1:i8, %22
%24:i8 = or %21, %23
%25:i8 = or %20, %24
%26:i8 = or %19, %25
%27:i8 = or %18, %26
%28:i8 = or %17, %27
%29:i8 = or %16, %28
%30:i8 = or %15, %29
%31:i8 = or %14, %30
%32:i8 = or %13, %31
%33:i8 = or %12, %32
%34:i8 = or %11, %33
%35:i8 = or %10, %34
%36:i8 = or %9, %35
%37:i8 = or %8, %36
%38:i8 = or %7, %37
%39:i8 = or %6, %38
%40:i8 = or %5, %39
%41:i8 = or %4, %40
%42:i8 = or %3, %41
%43:i8 = or %2, %42
%44:i8 = or %1, %43
%45:i8 = or %0, %44
infer %45


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -127
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = xor 1:i8, %18
%20:i8 = or %17, %19
%21:i8 = or %16, %20
%22:i8 = or %15, %21
%23:i8 = or %14, %22
%24:i8 = or %13, %23
%25:i8 = or %12, %24
%26:i8 = or %11, %25
%27:i8 = or %10, %26
%28:i8 = or %9, %27
%29:i8 = or %8, %28
%30:i8 = or %7, %29
%31:i8 = or %6, %30
%32:i8 = or %5, %31
%33:i8 = or %4, %32
%34:i8 = or %3, %33
%35:i8 = or %2, %34
%36:i8 = or %1, %35
%37:i8 = or %0, %36

Cost = 19
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = xor 1:i8, %19
%21:i8 = or %18, %20
%22:i8 = or %17, %21
%23:i8 = or %16, %22
%24:i8 = or %15, %23
%25:i8 = or %14, %24
%26:i8 = or %13, %25
%27:i8 = or %12, %26
%28:i8 = or %11, %27
%29:i8 = or %10, %28
%30:i8 = or %9, %29
%31:i8 = or %8, %30
%32:i8 = or %7, %31
%33:i8 = or %6, %32
%34:i8 = or %5, %33
%35:i8 = or %4, %34
%36:i8 = or %3, %35
%37:i8 = or %2, %36
%38:i8 = or %1, %37
%39:i8 = or %0, %38

Cost = 20
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = xor 1:i8, %20
%22:i8 = or %19, %21
%23:i8 = or %18, %22
%24:i8 = or %17, %23
%25:i8 = or %16, %24
%26:i8 = or %15, %25
%27:i8 = or %14, %26
%28:i8 = or %13, %27
%29:i8 = or %12, %28
%30:i8 = or %11, %29
%31:i8 = or %10, %30
%32:i8 = or %9, %31
%33:i8 = or %8, %32
%34:i8 = or %7, %33
%35:i8 = or %6, %34
%36:i8 = or %5, %35
%37:i8 = or %4, %36
%38:i8 = or %3, %37
%39:i8 = or %2, %38
%40:i8 = or %1, %39
%41:i8 = or %0, %40

Cost = 21
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = xor 1:i8, %21
%23:i8 = or %20, %22
%24:i8 = or %19, %23
%25:i8 = or %18, %24
%26:i8 = or %17, %25
%27:i8 = or %16, %26
%28:i8 = or %15, %27
%29:i8 = or %14, %28
%30:i8 = or %13, %29
%31:i8 = or %12, %30
%32:i8 = or %11, %31
%33:i8 = or %10, %32
%34:i8 = or %9, %33
%35:i8 = or %8, %34
%36:i8 = or %7, %35
%37:i8 = or %6, %36
%38:i8 = or %5, %37
%39:i8 = or %4, %38
%40:i8 = or %3, %39
%41:i8 = or %2, %40
%42:i8 = or %1, %41
%43:i8 = or %0, %42

Cost = 22
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = xor 1:i8, %23
%25:i8 = or %22, %24
%26:i8 = or %21, %25
%27:i8 = or %20, %26
%28:i8 = or %19, %27
%29:i8 = or %18, %28
%30:i8 = or %17, %29
%31:i8 = or %16, %30
%32:i8 = or %15, %31
%33:i8 = or %14, %32
%34:i8 = or %13, %33
%35:i8 = or %12, %34
%36:i8 = or %11, %35
%37:i8 = or %10, %36
%38:i8 = or %9, %37
%39:i8 = or %8, %38
%40:i8 = or %7, %39
%41:i8 = or %6, %40
%42:i8 = or %5, %41
%43:i8 = or %4, %42
%44:i8 = or %3, %43
%45:i8 = or %2, %44
%46:i8 = or %1, %45
%47:i8 = or %0, %46
infer %47


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -127
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = xor 1:i8, %19
%21:i8 = or %18, %20
%22:i8 = or %17, %21
%23:i8 = or %16, %22
%24:i8 = or %15, %23
%25:i8 = or %14, %24
%26:i8 = or %13, %25
%27:i8 = or %12, %26
%28:i8 = or %11, %27
%29:i8 = or %10, %28
%30:i8 = or %9, %29
%31:i8 = or %8, %30
%32:i8 = or %7, %31
%33:i8 = or %6, %32
%34:i8 = or %5, %33
%35:i8 = or %4, %34
%36:i8 = or %3, %35
%37:i8 = or %2, %36
%38:i8 = or %1, %37
%39:i8 = or %0, %38

Cost = 20
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = xor 1:i8, %20
%22:i8 = or %19, %21
%23:i8 = or %18, %22
%24:i8 = or %17, %23
%25:i8 = or %16, %24
%26:i8 = or %15, %25
%27:i8 = or %14, %26
%28:i8 = or %13, %27
%29:i8 = or %12, %28
%30:i8 = or %11, %29
%31:i8 = or %10, %30
%32:i8 = or %9, %31
%33:i8 = or %8, %32
%34:i8 = or %7, %33
%35:i8 = or %6, %34
%36:i8 = or %5, %35
%37:i8 = or %4, %36
%38:i8 = or %3, %37
%39:i8 = or %2, %38
%40:i8 = or %1, %39
%41:i8 = or %0, %40

Cost = 21
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = xor 1:i8, %21
%23:i8 = or %20, %22
%24:i8 = or %19, %23
%25:i8 = or %18, %24
%26:i8 = or %17, %25
%27:i8 = or %16, %26
%28:i8 = or %15, %27
%29:i8 = or %14, %28
%30:i8 = or %13, %29
%31:i8 = or %12, %30
%32:i8 = or %11, %31
%33:i8 = or %10, %32
%34:i8 = or %9, %33
%35:i8 = or %8, %34
%36:i8 = or %7, %35
%37:i8 = or %6, %36
%38:i8 = or %5, %37
%39:i8 = or %4, %38
%40:i8 = or %3, %39
%41:i8 = or %2, %40
%42:i8 = or %1, %41
%43:i8 = or %0, %42

Cost = 22
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = xor 1:i8, %22
%24:i8 = or %21, %23
%25:i8 = or %20, %24
%26:i8 = or %19, %25
%27:i8 = or %18, %26
%28:i8 = or %17, %27
%29:i8 = or %16, %28
%30:i8 = or %15, %29
%31:i8 = or %14, %30
%32:i8 = or %13, %31
%33:i8 = or %12, %32
%34:i8 = or %11, %33
%35:i8 = or %10, %34
%36:i8 = or %9, %35
%37:i8 = or %8, %36
%38:i8 = or %7, %37
%39:i8 = or %6, %38
%40:i8 = or %5, %39
%41:i8 = or %4, %40
%42:i8 = or %3, %41
%43:i8 = or %2, %42
%44:i8 = or %1, %43
%45:i8 = or %0, %44

Cost = 23
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = xor 1:i8, %24
%26:i8 = or %23, %25
%27:i8 = or %22, %26
%28:i8 = or %21, %27
%29:i8 = or %20, %28
%30:i8 = or %19, %29
%31:i8 = or %18, %30
%32:i8 = or %17, %31
%33:i8 = or %16, %32
%34:i8 = or %15, %33
%35:i8 = or %14, %34
%36:i8 = or %13, %35
%37:i8 = or %12, %36
%38:i8 = or %11, %37
%39:i8 = or %10, %38
%40:i8 = or %9, %39
%41:i8 = or %8, %40
%42:i8 = or %7, %41
%43:i8 = or %6, %42
%44:i8 = or %5, %43
%45:i8 = or %4, %44
%46:i8 = or %3, %45
%47:i8 = or %2, %46
%48:i8 = or %1, %47
%49:i8 = or %0, %48
infer %49


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -127
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = xor 1:i8, %20
%22:i8 = or %19, %21
%23:i8 = or %18, %22
%24:i8 = or %17, %23
%25:i8 = or %16, %24
%26:i8 = or %15, %25
%27:i8 = or %14, %26
%28:i8 = or %13, %27
%29:i8 = or %12, %28
%30:i8 = or %11, %29
%31:i8 = or %10, %30
%32:i8 = or %9, %31
%33:i8 = or %8, %32
%34:i8 = or %7, %33
%35:i8 = or %6, %34
%36:i8 = or %5, %35
%37:i8 = or %4, %36
%38:i8 = or %3, %37
%39:i8 = or %2, %38
%40:i8 = or %1, %39
%41:i8 = or %0, %40

Cost = 21
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = xor 1:i8, %21
%23:i8 = or %20, %22
%24:i8 = or %19, %23
%25:i8 = or %18, %24
%26:i8 = or %17, %25
%27:i8 = or %16, %26
%28:i8 = or %15, %27
%29:i8 = or %14, %28
%30:i8 = or %13, %29
%31:i8 = or %12, %30
%32:i8 = or %11, %31
%33:i8 = or %10, %32
%34:i8 = or %9, %33
%35:i8 = or %8, %34
%36:i8 = or %7, %35
%37:i8 = or %6, %36
%38:i8 = or %5, %37
%39:i8 = or %4, %38
%40:i8 = or %3, %39
%41:i8 = or %2, %40
%42:i8 = or %1, %41
%43:i8 = or %0, %42

Cost = 22
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = xor 1:i8, %22
%24:i8 = or %21, %23
%25:i8 = or %20, %24
%26:i8 = or %19, %25
%27:i8 = or %18, %26
%28:i8 = or %17, %27
%29:i8 = or %16, %28
%30:i8 = or %15, %29
%31:i8 = or %14, %30
%32:i8 = or %13, %31
%33:i8 = or %12, %32
%34:i8 = or %11, %33
%35:i8 = or %10, %34
%36:i8 = or %9, %35
%37:i8 = or %8, %36
%38:i8 = or %7, %37
%39:i8 = or %6, %38
%40:i8 = or %5, %39
%41:i8 = or %4, %40
%42:i8 = or %3, %41
%43:i8 = or %2, %42
%44:i8 = or %1, %43
%45:i8 = or %0, %44

Cost = 23
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = xor 1:i8, %23
%25:i8 = or %22, %24
%26:i8 = or %21, %25
%27:i8 = or %20, %26
%28:i8 = or %19, %27
%29:i8 = or %18, %28
%30:i8 = or %17, %29
%31:i8 = or %16, %30
%32:i8 = or %15, %31
%33:i8 = or %14, %32
%34:i8 = or %13, %33
%35:i8 = or %12, %34
%36:i8 = or %11, %35
%37:i8 = or %10, %36
%38:i8 = or %9, %37
%39:i8 = or %8, %38
%40:i8 = or %7, %39
%41:i8 = or %6, %40
%42:i8 = or %5, %41
%43:i8 = or %4, %42
%44:i8 = or %3, %43
%45:i8 = or %2, %44
%46:i8 = or %1, %45
%47:i8 = or %0, %46

Cost = 24
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = var
%26:i8 = xor 1:i8, %25
%27:i8 = or %24, %26
%28:i8 = or %23, %27
%29:i8 = or %22, %28
%30:i8 = or %21, %29
%31:i8 = or %20, %30
%32:i8 = or %19, %31
%33:i8 = or %18, %32
%34:i8 = or %17, %33
%35:i8 = or %16, %34
%36:i8 = or %15, %35
%37:i8 = or %14, %36
%38:i8 = or %13, %37
%39:i8 = or %12, %38
%40:i8 = or %11, %39
%41:i8 = or %10, %40
%42:i8 = or %9, %41
%43:i8 = or %8, %42
%44:i8 = or %7, %43
%45:i8 = or %6, %44
%46:i8 = or %5, %45
%47:i8 = or %4, %46
%48:i8 = or %3, %47
%49:i8 = or %2, %48
%50:i8 = or %1, %49
%51:i8 = or %0, %50
infer %51


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -127
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = xor 1:i8, %21
%23:i8 = or %20, %22
%24:i8 = or %19, %23
%25:i8 = or %18, %24
%26:i8 = or %17, %25
%27:i8 = or %16, %26
%28:i8 = or %15, %27
%29:i8 = or %14, %28
%30:i8 = or %13, %29
%31:i8 = or %12, %30
%32:i8 = or %11, %31
%33:i8 = or %10, %32
%34:i8 = or %9, %33
%35:i8 = or %8, %34
%36:i8 = or %7, %35
%37:i8 = or %6, %36
%38:i8 = or %5, %37
%39:i8 = or %4, %38
%40:i8 = or %3, %39
%41:i8 = or %2, %40
%42:i8 = or %1, %41
%43:i8 = or %0, %42

Cost = 22
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = xor 1:i8, %22
%24:i8 = or %21, %23
%25:i8 = or %20, %24
%26:i8 = or %19, %25
%27:i8 = or %18, %26
%28:i8 = or %17, %27
%29:i8 = or %16, %28
%30:i8 = or %15, %29
%31:i8 = or %14, %30
%32:i8 = or %13, %31
%33:i8 = or %12, %32
%34:i8 = or %11, %33
%35:i8 = or %10, %34
%36:i8 = or %9, %35
%37:i8 = or %8, %36
%38:i8 = or %7, %37
%39:i8 = or %6, %38
%40:i8 = or %5, %39
%41:i8 = or %4, %40
%42:i8 = or %3, %41
%43:i8 = or %2, %42
%44:i8 = or %1, %43
%45:i8 = or %0, %44

Cost = 23
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = xor 1:i8, %23
%25:i8 = or %22, %24
%26:i8 = or %21, %25
%27:i8 = or %20, %26
%28:i8 = or %19, %27
%29:i8 = or %18, %28
%30:i8 = or %17, %29
%31:i8 = or %16, %30
%32:i8 = or %15, %31
%33:i8 = or %14, %32
%34:i8 = or %13, %33
%35:i8 = or %12, %34
%36:i8 = or %11, %35
%37:i8 = or %10, %36
%38:i8 = or %9, %37
%39:i8 = or %8, %38
%40:i8 = or %7, %39
%41:i8 = or %6, %40
%42:i8 = or %5, %41
%43:i8 = or %4, %42
%44:i8 = or %3, %43
%45:i8 = or %2, %44
%46:i8 = or %1, %45
%47:i8 = or %0, %46

Cost = 24
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = xor 1:i8, %24
%26:i8 = or %23, %25
%27:i8 = or %22, %26
%28:i8 = or %21, %27
%29:i8 = or %20, %28
%30:i8 = or %19, %29
%31:i8 = or %18, %30
%32:i8 = or %17, %31
%33:i8 = or %16, %32
%34:i8 = or %15, %33
%35:i8 = or %14, %34
%36:i8 = or %13, %35
%37:i8 = or %12, %36
%38:i8 = or %11, %37
%39:i8 = or %10, %38
%40:i8 = or %9, %39
%41:i8 = or %8, %40
%42:i8 = or %7, %41
%43:i8 = or %6, %42
%44:i8 = or %5, %43
%45:i8 = or %4, %44
%46:i8 = or %3, %45
%47:i8 = or %2, %46
%48:i8 = or %1, %47
%49:i8 = or %0, %48

Cost = 25
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = var
%26:i8 = var
%27:i8 = xor 1:i8, %26
%28:i8 = or %25, %27
%29:i8 = or %24, %28
%30:i8 = or %23, %29
%31:i8 = or %22, %30
%32:i8 = or %21, %31
%33:i8 = or %20, %32
%34:i8 = or %19, %33
%35:i8 = or %18, %34
%36:i8 = or %17, %35
%37:i8 = or %16, %36
%38:i8 = or %15, %37
%39:i8 = or %14, %38
%40:i8 = or %13, %39
%41:i8 = or %12, %40
%42:i8 = or %11, %41
%43:i8 = or %10, %42
%44:i8 = or %9, %43
%45:i8 = or %8, %44
%46:i8 = or %7, %45
%47:i8 = or %6, %46
%48:i8 = or %5, %47
%49:i8 = or %4, %48
%50:i8 = or %3, %49
%51:i8 = or %2, %50
%52:i8 = or %1, %51
%53:i8 = or %0, %52
infer %53


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -127
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = xor 1:i8, %22
%24:i8 = or %21, %23
%25:i8 = or %20, %24
%26:i8 = or %19, %25
%27:i8 = or %18, %26
%28:i8 = or %17, %27
%29:i8 = or %16, %28
%30:i8 = or %15, %29
%31:i8 = or %14, %30
%32:i8 = or %13, %31
%33:i8 = or %12, %32
%34:i8 = or %11, %33
%35:i8 = or %10, %34
%36:i8 = or %9, %35
%37:i8 = or %8, %36
%38:i8 = or %7, %37
%39:i8 = or %6, %38
%40:i8 = or %5, %39
%41:i8 = or %4, %40
%42:i8 = or %3, %41
%43:i8 = or %2, %42
%44:i8 = or %1, %43
%45:i8 = or %0, %44

Cost = 23
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = xor 1:i8, %23
%25:i8 = or %22, %24
%26:i8 = or %21, %25
%27:i8 = or %20, %26
%28:i8 = or %19, %27
%29:i8 = or %18, %28
%30:i8 = or %17, %29
%31:i8 = or %16, %30
%32:i8 = or %15, %31
%33:i8 = or %14, %32
%34:i8 = or %13, %33
%35:i8 = or %12, %34
%36:i8 = or %11, %35
%37:i8 = or %10, %36
%38:i8 = or %9, %37
%39:i8 = or %8, %38
%40:i8 = or %7, %39
%41:i8 = or %6, %40
%42:i8 = or %5, %41
%43:i8 = or %4, %42
%44:i8 = or %3, %43
%45:i8 = or %2, %44
%46:i8 = or %1, %45
%47:i8 = or %0, %46

Cost = 24
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = xor 1:i8, %24
%26:i8 = or %23, %25
%27:i8 = or %22, %26
%28:i8 = or %21, %27
%29:i8 = or %20, %28
%30:i8 = or %19, %29
%31:i8 = or %18, %30
%32:i8 = or %17, %31
%33:i8 = or %16, %32
%34:i8 = or %15, %33
%35:i8 = or %14, %34
%36:i8 = or %13, %35
%37:i8 = or %12, %36
%38:i8 = or %11, %37
%39:i8 = or %10, %38
%40:i8 = or %9, %39
%41:i8 = or %8, %40
%42:i8 = or %7, %41
%43:i8 = or %6, %42
%44:i8 = or %5, %43
%45:i8 = or %4, %44
%46:i8 = or %3, %45
%47:i8 = or %2, %46
%48:i8 = or %1, %47
%49:i8 = or %0, %48

Cost = 25
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = var
%26:i8 = xor 1:i8, %25
%27:i8 = or %24, %26
%28:i8 = or %23, %27
%29:i8 = or %22, %28
%30:i8 = or %21, %29
%31:i8 = or %20, %30
%32:i8 = or %19, %31
%33:i8 = or %18, %32
%34:i8 = or %17, %33
%35:i8 = or %16, %34
%36:i8 = or %15, %35
%37:i8 = or %14, %36
%38:i8 = or %13, %37
%39:i8 = or %12, %38
%40:i8 = or %11, %39
%41:i8 = or %10, %40
%42:i8 = or %9, %41
%43:i8 = or %8, %42
%44:i8 = or %7, %43
%45:i8 = or %6, %44
%46:i8 = or %5, %45
%47:i8 = or %4, %46
%48:i8 = or %3, %47
%49:i8 = or %2, %48
%50:i8 = or %1, %49
%51:i8 = or %0, %50

Cost = 26
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = var
%26:i8 = var
%27:i8 = var
%28:i8 = xor 1:i8, %27
%29:i8 = or %26, %28
%30:i8 = or %25, %29
%31:i8 = or %24, %30
%32:i8 = or %23, %31
%33:i8 = or %22, %32
%34:i8 = or %21, %33
%35:i8 = or %20, %34
%36:i8 = or %19, %35
%37:i8 = or %18, %36
%38:i8 = or %17, %37
%39:i8 = or %16, %38
%40:i8 = or %15, %39
%41:i8 = or %14, %40
%42:i8 = or %13, %41
%43:i8 = or %12, %42
%44:i8 = or %11, %43
%45:i8 = or %10, %44
%46:i8 = or %9, %45
%47:i8 = or %8, %46
%48:i8 = or %7, %47
%49:i8 = or %6, %48
%50:i8 = or %5, %49
%51:i8 = or %4, %50
%52:i8 = or %3, %51
%53:i8 = or %2, %52
%54:i8 = or %1, %53
%55:i8 = or %0, %54
infer %55


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -127
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = xor 1:i8, %23
%25:i8 = or %22, %24
%26:i8 = or %21, %25
%27:i8 = or %20, %26
%28:i8 = or %19, %27
%29:i8 = or %18, %28
%30:i8 = or %17, %29
%31:i8 = or %16, %30
%32:i8 = or %15, %31
%33:i8 = or %14, %32
%34:i8 = or %13, %33
%35:i8 = or %12, %34
%36:i8 = or %11, %35
%37:i8 = or %10, %36
%38:i8 = or %9, %37
%39:i8 = or %8, %38
%40:i8 = or %7, %39
%41:i8 = or %6, %40
%42:i8 = or %5, %41
%43:i8 = or %4, %42
%44:i8 = or %3, %43
%45:i8 = or %2, %44
%46:i8 = or %1, %45
%47:i8 = or %0, %46

Cost = 24
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = xor 1:i8, %24
%26:i8 = or %23, %25
%27:i8 = or %22, %26
%28:i8 = or %21, %27
%29:i8 = or %20, %28
%30:i8 = or %19, %29
%31:i8 = or %18, %30
%32:i8 = or %17, %31
%33:i8 = or %16, %32
%34:i8 = or %15, %33
%35:i8 = or %14, %34
%36:i8 = or %13, %35
%37:i8 = or %12, %36
%38:i8 = or %11, %37
%39:i8 = or %10, %38
%40:i8 = or %9, %39
%41:i8 = or %8, %40
%42:i8 = or %7, %41
%43:i8 = or %6, %42
%44:i8 = or %5, %43
%45:i8 = or %4, %44
%46:i8 = or %3, %45
%47:i8 = or %2, %46
%48:i8 = or %1, %47
%49:i8 = or %0, %48

Cost = 25
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = var
%26:i8 = xor 1:i8, %25
%27:i8 = or %24, %26
%28:i8 = or %23, %27
%29:i8 = or %22, %28
%30:i8 = or %21, %29
%31:i8 = or %20, %30
%32:i8 = or %19, %31
%33:i8 = or %18, %32
%34:i8 = or %17, %33
%35:i8 = or %16, %34
%36:i8 = or %15, %35
%37:i8 = or %14, %36
%38:i8 = or %13, %37
%39:i8 = or %12, %38
%40:i8 = or %11, %39
%41:i8 = or %10, %40
%42:i8 = or %9, %41
%43:i8 = or %8, %42
%44:i8 = or %7, %43
%45:i8 = or %6, %44
%46:i8 = or %5, %45
%47:i8 = or %4, %46
%48:i8 = or %3, %47
%49:i8 = or %2, %48
%50:i8 = or %1, %49
%51:i8 = or %0, %50

Cost = 26
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = var
%26:i8 = var
%27:i8 = xor 1:i8, %26
%28:i8 = or %25, %27
%29:i8 = or %24, %28
%30:i8 = or %23, %29
%31:i8 = or %22, %30
%32:i8 = or %21, %31
%33:i8 = or %20, %32
%34:i8 = or %19, %33
%35:i8 = or %18, %34
%36:i8 = or %17, %35
%37:i8 = or %16, %36
%38:i8 = or %15, %37
%39:i8 = or %14, %38
%40:i8 = or %13, %39
%41:i8 = or %12, %40
%42:i8 = or %11, %41
%43:i8 = or %10, %42
%44:i8 = or %9, %43
%45:i8 = or %8, %44
%46:i8 = or %7, %45
%47:i8 = or %6, %46
%48:i8 = or %5, %47
%49:i8 = or %4, %48
%50:i8 = or %3, %49
%51:i8 = or %2, %50
%52:i8 = or %1, %51
%53:i8 = or %0, %52

Cost = 27
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = var
%26:i8 = var
%27:i8 = var
%28:i8 = var
%29:i8 = xor 1:i8, %28
%30:i8 = or %27, %29
%31:i8 = or %26, %30
%32:i8 = or %25, %31
%33:i8 = or %24, %32
%34:i8 = or %23, %33
%35:i8 = or %22, %34
%36:i8 = or %21, %35
%37:i8 = or %20, %36
%38:i8 = or %19, %37
%39:i8 = or %18, %38
%40:i8 = or %17, %39
%41:i8 = or %16, %40
%42:i8 = or %15, %41
%43:i8 = or %14, %42
%44:i8 = or %13, %43
%45:i8 = or %12, %44
%46:i8 = or %11, %45
%47:i8 = or %10, %46
%48:i8 = or %9, %47
%49:i8 = or %8, %48
%50:i8 = or %7, %49
%51:i8 = or %6, %50
%52:i8 = or %5, %51
%53:i8 = or %4, %52
%54:i8 = or %3, %53
%55:i8 = or %2, %54
%56:i8 = or %1, %55
%57:i8 = or %0, %56
infer %57


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 65
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = xor 1:i8, %24
%26:i8 = or %23, %25
%27:i8 = or %22, %26
%28:i8 = or %21, %27
%29:i8 = or %20, %28
%30:i8 = or %19, %29
%31:i8 = or %18, %30
%32:i8 = or %17, %31
%33:i8 = or %16, %32
%34:i8 = or %15, %33
%35:i8 = or %14, %34
%36:i8 = or %13, %35
%37:i8 = or %12, %36
%38:i8 = or %11, %37
%39:i8 = or %10, %38
%40:i8 = or %9, %39
%41:i8 = or %8, %40
%42:i8 = or %7, %41
%43:i8 = or %6, %42
%44:i8 = or %5, %43
%45:i8 = or %4, %44
%46:i8 = or %3, %45
%47:i8 = or %2, %46
%48:i8 = or %1, %47
%49:i8 = or %0, %48

Cost = 25
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = var
%26:i8 = xor 1:i8, %25
%27:i8 = or %24, %26
%28:i8 = or %23, %27
%29:i8 = or %22, %28
%30:i8 = or %21, %29
%31:i8 = or %20, %30
%32:i8 = or %19, %31
%33:i8 = or %18, %32
%34:i8 = or %17, %33
%35:i8 = or %16, %34
%36:i8 = or %15, %35
%37:i8 = or %14, %36
%38:i8 = or %13, %37
%39:i8 = or %12, %38
%40:i8 = or %11, %39
%41:i8 = or %10, %40
%42:i8 = or %9, %41
%43:i8 = or %8, %42
%44:i8 = or %7, %43
%45:i8 = or %6, %44
%46:i8 = or %5, %45
%47:i8 = or %4, %46
%48:i8 = or %3, %47
%49:i8 = or %2, %48
%50:i8 = or %1, %49
%51:i8 = or %0, %50

Cost = 26
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = var
%26:i8 = var
%27:i8 = xor 1:i8, %26
%28:i8 = or %25, %27
%29:i8 = or %24, %28
%30:i8 = or %23, %29
%31:i8 = or %22, %30
%32:i8 = or %21, %31
%33:i8 = or %20, %32
%34:i8 = or %19, %33
%35:i8 = or %18, %34
%36:i8 = or %17, %35
%37:i8 = or %16, %36
%38:i8 = or %15, %37
%39:i8 = or %14, %38
%40:i8 = or %13, %39
%41:i8 = or %12, %40
%42:i8 = or %11, %41
%43:i8 = or %10, %42
%44:i8 = or %9, %43
%45:i8 = or %8, %44
%46:i8 = or %7, %45
%47:i8 = or %6, %46
%48:i8 = or %5, %47
%49:i8 = or %4, %48
%50:i8 = or %3, %49
%51:i8 = or %2, %50
%52:i8 = or %1, %51
%53:i8 = or %0, %52

Cost = 27
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = var
%26:i8 = var
%27:i8 = var
%28:i8 = xor 1:i8, %27
%29:i8 = or %26, %28
%30:i8 = or %25, %29
%31:i8 = or %24, %30
%32:i8 = or %23, %31
%33:i8 = or %22, %32
%34:i8 = or %21, %33
%35:i8 = or %20, %34
%36:i8 = or %19, %35
%37:i8 = or %18, %36
%38:i8 = or %17, %37
%39:i8 = or %16, %38
%40:i8 = or %15, %39
%41:i8 = or %14, %40
%42:i8 = or %13, %41
%43:i8 = or %12, %42
%44:i8 = or %11, %43
%45:i8 = or %10, %44
%46:i8 = or %9, %45
%47:i8 = or %8, %46
%48:i8 = or %7, %47
%49:i8 = or %6, %48
%50:i8 = or %5, %49
%51:i8 = or %4, %50
%52:i8 = or %3, %51
%53:i8 = or %2, %52
%54:i8 = or %1, %53
%55:i8 = or %0, %54

Cost = 28
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = var
%26:i8 = var
%27:i8 = var
%28:i8 = var
%29:i8 = var
%30:i8 = xor 1:i8, %29
%31:i8 = or %28, %30
%32:i8 = or %27, %31
%33:i8 = or %26, %32
%34:i8 = or %25, %33
%35:i8 = or %24, %34
%36:i8 = or %23, %35
%37:i8 = or %22, %36
%38:i8 = or %21, %37
%39:i8 = or %20, %38
%40:i8 = or %19, %39
%41:i8 = or %18, %40
%42:i8 = or %17, %41
%43:i8 = or %16, %42
%44:i8 = or %15, %43
%45:i8 = or %14, %44
%46:i8 = or %13, %45
%47:i8 = or %12, %46
%48:i8 = or %11, %47
%49:i8 = or %10, %48
%50:i8 = or %9, %49
%51:i8 = or %8, %50
%52:i8 = or %7, %51
%53:i8 = or %6, %52
%54:i8 = or %5, %53
%55:i8 = or %4, %54
%56:i8 = or %3, %55
%57:i8 = or %2, %56
%58:i8 = or %1, %57
%59:i8 = or %0, %58
infer %59


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -127
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = var
%26:i8 = xor 1:i8, %25
%27:i8 = or %24, %26
%28:i8 = or %23, %27
%29:i8 = or %22, %28
%30:i8 = or %21, %29
%31:i8 = or %20, %30
%32:i8 = or %19, %31
%33:i8 = or %18, %32
%34:i8 = or %17, %33
%35:i8 = or %16, %34
%36:i8 = or %15, %35
%37:i8 = or %14, %36
%38:i8 = or %13, %37
%39:i8 = or %12, %38
%40:i8 = or %11, %39
%41:i8 = or %10, %40
%42:i8 = or %9, %41
%43:i8 = or %8, %42
%44:i8 = or %7, %43
%45:i8 = or %6, %44
%46:i8 = or %5, %45
%47:i8 = or %4, %46
%48:i8 = or %3, %47
%49:i8 = or %2, %48
%50:i8 = or %1, %49
%51:i8 = or %0, %50

Cost = 26
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = var
%26:i8 = var
%27:i8 = xor 1:i8, %26
%28:i8 = or %25, %27
%29:i8 = or %24, %28
%30:i8 = or %23, %29
%31:i8 = or %22, %30
%32:i8 = or %21, %31
%33:i8 = or %20, %32
%34:i8 = or %19, %33
%35:i8 = or %18, %34
%36:i8 = or %17, %35
%37:i8 = or %16, %36
%38:i8 = or %15, %37
%39:i8 = or %14, %38
%40:i8 = or %13, %39
%41:i8 = or %12, %40
%42:i8 = or %11, %41
%43:i8 = or %10, %42
%44:i8 = or %9, %43
%45:i8 = or %8, %44
%46:i8 = or %7, %45
%47:i8 = or %6, %46
%48:i8 = or %5, %47
%49:i8 = or %4, %48
%50:i8 = or %3, %49
%51:i8 = or %2, %50
%52:i8 = or %1, %51
%53:i8 = or %0, %52

Cost = 27
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = var
%26:i8 = var
%27:i8 = var
%28:i8 = xor 1:i8, %27
%29:i8 = or %26, %28
%30:i8 = or %25, %29
%31:i8 = or %24, %30
%32:i8 = or %23, %31
%33:i8 = or %22, %32
%34:i8 = or %21, %33
%35:i8 = or %20, %34
%36:i8 = or %19, %35
%37:i8 = or %18, %36
%38:i8 = or %17, %37
%39:i8 = or %16, %38
%40:i8 = or %15, %39
%41:i8 = or %14, %40
%42:i8 = or %13, %41
%43:i8 = or %12, %42
%44:i8 = or %11, %43
%45:i8 = or %10, %44
%46:i8 = or %9, %45
%47:i8 = or %8, %46
%48:i8 = or %7, %47
%49:i8 = or %6, %48
%50:i8 = or %5, %49
%51:i8 = or %4, %50
%52:i8 = or %3, %51
%53:i8 = or %2, %52
%54:i8 = or %1, %53
%55:i8 = or %0, %54

Cost = 28
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = var
%26:i8 = var
%27:i8 = var
%28:i8 = var
%29:i8 = xor 1:i8, %28
%30:i8 = or %27, %29
%31:i8 = or %26, %30
%32:i8 = or %25, %31
%33:i8 = or %24, %32
%34:i8 = or %23, %33
%35:i8 = or %22, %34
%36:i8 = or %21, %35
%37:i8 = or %20, %36
%38:i8 = or %19, %37
%39:i8 = or %18, %38
%40:i8 = or %17, %39
%41:i8 = or %16, %40
%42:i8 = or %15, %41
%43:i8 = or %14, %42
%44:i8 = or %13, %43
%45:i8 = or %12, %44
%46:i8 = or %11, %45
%47:i8 = or %10, %46
%48:i8 = or %9, %47
%49:i8 = or %8, %48
%50:i8 = or %7, %49
%51:i8 = or %6, %50
%52:i8 = or %5, %51
%53:i8 = or %4, %52
%54:i8 = or %3, %53
%55:i8 = or %2, %54
%56:i8 = or %1, %55
%57:i8 = or %0, %56

Cost = 29
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = var
%26:i8 = var
%27:i8 = var
%28:i8 = var
%29:i8 = var
%30:i8 = var
%31:i8 = xor 1:i8, %30
%32:i8 = or %29, %31
%33:i8 = or %28, %32
%34:i8 = or %27, %33
%35:i8 = or %26, %34
%36:i8 = or %25, %35
%37:i8 = or %24, %36
%38:i8 = or %23, %37
%39:i8 = or %22, %38
%40:i8 = or %21, %39
%41:i8 = or %20, %40
%42:i8 = or %19, %41
%43:i8 = or %18, %42
%44:i8 = or %17, %43
%45:i8 = or %16, %44
%46:i8 = or %15, %45
%47:i8 = or %14, %46
%48:i8 = or %13, %47
%49:i8 = or %12, %48
%50:i8 = or %11, %49
%51:i8 = or %10, %50
%52:i8 = or %9, %51
%53:i8 = or %8, %52
%54:i8 = or %7, %53
%55:i8 = or %6, %54
%56:i8 = or %5, %55
%57:i8 = or %4, %56
%58:i8 = or %3, %57
%59:i8 = or %2, %58
%60:i8 = or %1, %59
%61:i8 = or %0, %60
infer %61


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -127
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = var
%26:i8 = var
%27:i8 = xor 1:i8, %26
%28:i8 = or %25, %27
%29:i8 = or %24, %28
%30:i8 = or %23, %29
%31:i8 = or %22, %30
%32:i8 = or %21, %31
%33:i8 = or %20, %32
%34:i8 = or %19, %33
%35:i8 = or %18, %34
%36:i8 = or %17, %35
%37:i8 = or %16, %36
%38:i8 = or %15, %37
%39:i8 = or %14, %38
%40:i8 = or %13, %39
%41:i8 = or %12, %40
%42:i8 = or %11, %41
%43:i8 = or %10, %42
%44:i8 = or %9, %43
%45:i8 = or %8, %44
%46:i8 = or %7, %45
%47:i8 = or %6, %46
%48:i8 = or %5, %47
%49:i8 = or %4, %48
%50:i8 = or %3, %49
%51:i8 = or %2, %50
%52:i8 = or %1, %51
%53:i8 = or %0, %52

Cost = 27
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = var
%26:i8 = var
%27:i8 = var
%28:i8 = xor 1:i8, %27
%29:i8 = or %26, %28
%30:i8 = or %25, %29
%31:i8 = or %24, %30
%32:i8 = or %23, %31
%33:i8 = or %22, %32
%34:i8 = or %21, %33
%35:i8 = or %20, %34
%36:i8 = or %19, %35
%37:i8 = or %18, %36
%38:i8 = or %17, %37
%39:i8 = or %16, %38
%40:i8 = or %15, %39
%41:i8 = or %14, %40
%42:i8 = or %13, %41
%43:i8 = or %12, %42
%44:i8 = or %11, %43
%45:i8 = or %10, %44
%46:i8 = or %9, %45
%47:i8 = or %8, %46
%48:i8 = or %7, %47
%49:i8 = or %6, %48
%50:i8 = or %5, %49
%51:i8 = or %4, %50
%52:i8 = or %3, %51
%53:i8 = or %2, %52
%54:i8 = or %1, %53
%55:i8 = or %0, %54

Cost = 28
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = var
%26:i8 = var
%27:i8 = var
%28:i8 = var
%29:i8 = xor 1:i8, %28
%30:i8 = or %27, %29
%31:i8 = or %26, %30
%32:i8 = or %25, %31
%33:i8 = or %24, %32
%34:i8 = or %23, %33
%35:i8 = or %22, %34
%36:i8 = or %21, %35
%37:i8 = or %20, %36
%38:i8 = or %19, %37
%39:i8 = or %18, %38
%40:i8 = or %17, %39
%41:i8 = or %16, %40
%42:i8 = or %15, %41
%43:i8 = or %14, %42
%44:i8 = or %13, %43
%45:i8 = or %12, %44
%46:i8 = or %11, %45
%47:i8 = or %10, %46
%48:i8 = or %9, %47
%49:i8 = or %8, %48
%50:i8 = or %7, %49
%51:i8 = or %6, %50
%52:i8 = or %5, %51
%53:i8 = or %4, %52
%54:i8 = or %3, %53
%55:i8 = or %2, %54
%56:i8 = or %1, %55
%57:i8 = or %0, %56

Cost = 29
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = var
%26:i8 = var
%27:i8 = var
%28:i8 = var
%29:i8 = var
%30:i8 = xor 1:i8, %29
%31:i8 = or %28, %30
%32:i8 = or %27, %31
%33:i8 = or %26, %32
%34:i8 = or %25, %33
%35:i8 = or %24, %34
%36:i8 = or %23, %35
%37:i8 = or %22, %36
%38:i8 = or %21, %37
%39:i8 = or %20, %38
%40:i8 = or %19, %39
%41:i8 = or %18, %40
%42:i8 = or %17, %41
%43:i8 = or %16, %42
%44:i8 = or %15, %43
%45:i8 = or %14, %44
%46:i8 = or %13, %45
%47:i8 = or %12, %46
%48:i8 = or %11, %47
%49:i8 = or %10, %48
%50:i8 = or %9, %49
%51:i8 = or %8, %50
%52:i8 = or %7, %51
%53:i8 = or %6, %52
%54:i8 = or %5, %53
%55:i8 = or %4, %54
%56:i8 = or %3, %55
%57:i8 = or %2, %56
%58:i8 = or %1, %57
%59:i8 = or %0, %58

Cost = 30
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = and 127:i8, %0
infer %1


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 127
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = and 127:i8, %0
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = var
%26:i8 = var
%27:i8 = var
%28:i8 = var
%29:i8 = var
%30:i8 = var
%31:i8 = var
%32:i8 = var
%33:i8 = xor 1:i8, %32
%34:i8 = or %31, %33
%35:i8 = or %30, %34
%36:i8 = or %29, %35
%37:i8 = or %28, %36
%38:i8 = or %27, %37
%39:i8 = or %26, %38
%40:i8 = or %25, %39
%41:i8 = or %24, %40
%42:i8 = or %23, %41
%43:i8 = or %22, %42
%44:i8 = or %21, %43
%45:i8 = or %20, %44
%46:i8 = or %19, %45
%47:i8 = or %18, %46
%48:i8 = or %17, %47
%49:i8 = or %16, %48
%50:i8 = or %15, %49
%51:i8 = or %14, %50
%52:i8 = or %13, %51
%53:i8 = or %12, %52
%54:i8 = or %11, %53
%55:i8 = or %10, %54
%56:i8 = or %9, %55
%57:i8 = or %8, %56
%58:i8 = or %7, %57
%59:i8 = or %6, %58
%60:i8 = or %5, %59
%61:i8 = or %4, %60
%62:i8 = or %3, %61
%63:i8 = or %2, %62
%64:i8 = or %1, %63
infer %64


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -127
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i8 = and 127:i8, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = var
%26:i8 = var
%27:i8 = var
%28:i8 = var
%29:i8 = xor 1:i8, %28
%30:i8 = or %27, %29
%31:i8 = or %26, %30
%32:i8 = or %25, %31
%33:i8 = or %24, %32
%34:i8 = or %23, %33
%35:i8 = or %22, %34
%36:i8 = or %21, %35
%37:i8 = or %20, %36
%38:i8 = or %19, %37
%39:i8 = or %18, %38
%40:i8 = or %17, %39
%41:i8 = or %16, %40
%42:i8 = or %15, %41
%43:i8 = or %14, %42
%44:i8 = or %13, %43
%45:i8 = or %12, %44
%46:i8 = or %11, %45
%47:i8 = or %10, %46
%48:i8 = or %9, %47
%49:i8 = or %8, %48
%50:i8 = or %7, %49
%51:i8 = or %6, %50
%52:i8 = or %5, %51
%53:i8 = or %4, %52
%54:i8 = or %3, %53
%55:i8 = or %2, %54
%56:i8 = or %1, %55
%57:i8 = or %0, %56

Cost = 29
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = var
%26:i8 = var
%27:i8 = var
%28:i8 = var
%29:i8 = var
%30:i8 = xor 1:i8, %29
%31:i8 = or %28, %30
%32:i8 = or %27, %31
%33:i8 = or %26, %32
%34:i8 = or %25, %33
%35:i8 = or %24, %34
%36:i8 = or %23, %35
%37:i8 = or %22, %36
%38:i8 = or %21, %37
%39:i8 = or %20, %38
%40:i8 = or %19, %39
%41:i8 = or %18, %40
%42:i8 = or %17, %41
%43:i8 = or %16, %42
%44:i8 = or %15, %43
%45:i8 = or %14, %44
%46:i8 = or %13, %45
%47:i8 = or %12, %46
%48:i8 = or %11, %47
%49:i8 = or %10, %48
%50:i8 = or %9, %49
%51:i8 = or %8, %50
%52:i8 = or %7, %51
%53:i8 = or %6, %52
%54:i8 = or %5, %53
%55:i8 = or %4, %54
%56:i8 = or %3, %55
%57:i8 = or %2, %56
%58:i8 = or %1, %57
%59:i8 = or %0, %58

Cost = 30
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = var
%26:i8 = var
%27:i8 = var
%28:i8 = var
%29:i8 = var
%30:i8 = var
%31:i8 = xor 1:i8, %30
%32:i8 = or %29, %31
%33:i8 = or %28, %32
%34:i8 = or %27, %33
%35:i8 = or %26, %34
%36:i8 = or %25, %35
%37:i8 = or %24, %36
%38:i8 = or %23, %37
%39:i8 = or %22, %38
%40:i8 = or %21, %39
%41:i8 = or %20, %40
%42:i8 = or %19, %41
%43:i8 = or %18, %42
%44:i8 = or %17, %43
%45:i8 = or %16, %44
%46:i8 = or %15, %45
%47:i8 = or %14, %46
%48:i8 = or %13, %47
%49:i8 = or %12, %48
%50:i8 = or %11, %49
%51:i8 = or %10, %50
%52:i8 = or %9, %51
%53:i8 = or %8, %52
%54:i8 = or %7, %53
%55:i8 = or %6, %54
%56:i8 = or %5, %55
%57:i8 = or %4, %56
%58:i8 = or %3, %57
%59:i8 = or %2, %58
%60:i8 = or %1, %59
%61:i8 = or %0, %60

Cost = 31
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = and 127:i8, %0
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = var
%26:i8 = var
%27:i8 = var
%28:i8 = var
%29:i8 = var
%30:i8 = var
%31:i8 = var
%32:i8 = var
%33:i8 = xor 1:i8, %32
%34:i8 = or %31, %33
%35:i8 = or %30, %34
%36:i8 = or %29, %35
%37:i8 = or %28, %36
%38:i8 = or %27, %37
%39:i8 = or %26, %38
%40:i8 = or %25, %39
%41:i8 = or %24, %40
%42:i8 = or %23, %41
%43:i8 = or %22, %42
%44:i8 = or %21, %43
%45:i8 = or %20, %44
%46:i8 = or %19, %45
%47:i8 = or %18, %46
%48:i8 = or %17, %47
%49:i8 = or %16, %48
%50:i8 = or %15, %49
%51:i8 = or %14, %50
%52:i8 = or %13, %51
%53:i8 = or %12, %52
%54:i8 = or %11, %53
%55:i8 = or %10, %54
%56:i8 = or %9, %55
%57:i8 = or %8, %56
%58:i8 = or %7, %57
%59:i8 = or %6, %58
%60:i8 = or %5, %59
%61:i8 = or %4, %60
%62:i8 = or %3, %61
%63:i8 = or %2, %62
%64:i8 = or %1, %63
%65:i32 = zext %64
infer %65 (demandedBits=00000000000000000000000111111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 129
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = and 127:i8, %0
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = var
%26:i8 = var
%27:i8 = var
%28:i8 = var
%29:i8 = var
%30:i8 = var
%31:i8 = var
%32:i8 = var
%33:i8 = xor 1:i8, %32
%34:i8 = or %31, %33
%35:i8 = or %30, %34
%36:i8 = or %29, %35
%37:i8 = or %28, %36
%38:i8 = or %27, %37
%39:i8 = or %26, %38
%40:i8 = or %25, %39
%41:i8 = or %24, %40
%42:i8 = or %23, %41
%43:i8 = or %22, %42
%44:i8 = or %21, %43
%45:i8 = or %20, %44
%46:i8 = or %19, %45
%47:i8 = or %18, %46
%48:i8 = or %17, %47
%49:i8 = or %16, %48
%50:i8 = or %15, %49
%51:i8 = or %14, %50
%52:i8 = or %13, %51
%53:i8 = or %12, %52
%54:i8 = or %11, %53
%55:i8 = or %10, %54
%56:i8 = or %9, %55
%57:i8 = or %8, %56
%58:i8 = or %7, %57
%59:i8 = or %6, %58
%60:i8 = or %5, %59
%61:i8 = or %4, %60
%62:i8 = or %3, %61
%63:i8 = or %2, %62
%64:i8 = or %1, %63
%65:i32 = zext %64
%66:i32 = addnw 511:i32, %65
infer %66 (demandedBits=00000000000000000000000100000000)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 511
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i8 = and 127:i8, %0
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = var
%26:i8 = var
%27:i8 = var
%28:i8 = var
%29:i8 = var
%30:i8 = var
%31:i8 = var
%32:i8 = var
%33:i8 = xor 1:i8, %32
%34:i8 = or %31, %33
%35:i8 = or %30, %34
%36:i8 = or %29, %35
%37:i8 = or %28, %36
%38:i8 = or %27, %37
%39:i8 = or %26, %38
%40:i8 = or %25, %39
%41:i8 = or %24, %40
%42:i8 = or %23, %41
%43:i8 = or %22, %42
%44:i8 = or %21, %43
%45:i8 = or %20, %44
%46:i8 = or %19, %45
%47:i8 = or %18, %46
%48:i8 = or %17, %47
%49:i8 = or %16, %48
%50:i8 = or %15, %49
%51:i8 = or %14, %50
%52:i8 = or %13, %51
%53:i8 = or %12, %52
%54:i8 = or %11, %53
%55:i8 = or %10, %54
%56:i8 = or %9, %55
%57:i8 = or %8, %56
%58:i8 = or %7, %57
%59:i8 = or %6, %58
%60:i8 = or %5, %59
%61:i8 = or %4, %60
%62:i8 = or %3, %61
%63:i8 = or %2, %62
%64:i8 = or %1, %63
%65:i32 = zext %64

Cost = 34
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = and 127:i8, %0
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = var
%26:i8 = var
%27:i8 = var
%28:i8 = var
%29:i8 = var
%30:i8 = var
%31:i8 = var
%32:i8 = var
%33:i8 = xor 1:i8, %32
%34:i8 = or %31, %33
%35:i8 = or %30, %34
%36:i8 = or %29, %35
%37:i8 = or %28, %36
%38:i8 = or %27, %37
%39:i8 = or %26, %38
%40:i8 = or %25, %39
%41:i8 = or %24, %40
%42:i8 = or %23, %41
%43:i8 = or %22, %42
%44:i8 = or %21, %43
%45:i8 = or %20, %44
%46:i8 = or %19, %45
%47:i8 = or %18, %46
%48:i8 = or %17, %47
%49:i8 = or %16, %48
%50:i8 = or %15, %49
%51:i8 = or %14, %50
%52:i8 = or %13, %51
%53:i8 = or %12, %52
%54:i8 = or %11, %53
%55:i8 = or %10, %54
%56:i8 = or %9, %55
%57:i8 = or %8, %56
%58:i8 = or %7, %57
%59:i8 = or %6, %58
%60:i8 = or %5, %59
%61:i8 = or %4, %60
%62:i8 = or %3, %61
%63:i8 = or %2, %62
%64:i8 = or %1, %63
%65:i32 = zext %64
%66:i32 = addnw 511:i32, %65
%67:i32 = and 256:i32, %66
infer %67


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 256
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i8 = and 127:i8, %0
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = var
%26:i8 = var
%27:i8 = var
%28:i8 = var
%29:i8 = var
%30:i8 = var
%31:i8 = var
%32:i8 = var
%33:i8 = xor 1:i8, %32
%34:i8 = or %31, %33
%35:i8 = or %30, %34
%36:i8 = or %29, %35
%37:i8 = or %28, %36
%38:i8 = or %27, %37
%39:i8 = or %26, %38
%40:i8 = or %25, %39
%41:i8 = or %24, %40
%42:i8 = or %23, %41
%43:i8 = or %22, %42
%44:i8 = or %21, %43
%45:i8 = or %20, %44
%46:i8 = or %19, %45
%47:i8 = or %18, %46
%48:i8 = or %17, %47
%49:i8 = or %16, %48
%50:i8 = or %15, %49
%51:i8 = or %14, %50
%52:i8 = or %13, %51
%53:i8 = or %12, %52
%54:i8 = or %11, %53
%55:i8 = or %10, %54
%56:i8 = or %9, %55
%57:i8 = or %8, %56
%58:i8 = or %7, %57
%59:i8 = or %6, %58
%60:i8 = or %5, %59
%61:i8 = or %4, %60
%62:i8 = or %3, %61
%63:i8 = or %2, %62
%64:i8 = or %1, %63
%65:i32 = zext %64

Cost = 34
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i8 = and 127:i8, %0
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = var
%26:i8 = var
%27:i8 = var
%28:i8 = var
%29:i8 = var
%30:i8 = var
%31:i8 = var
%32:i8 = var
%33:i8 = xor 1:i8, %32
%34:i8 = or %31, %33
%35:i8 = or %30, %34
%36:i8 = or %29, %35
%37:i8 = or %28, %36
%38:i8 = or %27, %37
%39:i8 = or %26, %38
%40:i8 = or %25, %39
%41:i8 = or %24, %40
%42:i8 = or %23, %41
%43:i8 = or %22, %42
%44:i8 = or %21, %43
%45:i8 = or %20, %44
%46:i8 = or %19, %45
%47:i8 = or %18, %46
%48:i8 = or %17, %47
%49:i8 = or %16, %48
%50:i8 = or %15, %49
%51:i8 = or %14, %50
%52:i8 = or %13, %51
%53:i8 = or %12, %52
%54:i8 = or %11, %53
%55:i8 = or %10, %54
%56:i8 = or %9, %55
%57:i8 = or %8, %56
%58:i8 = or %7, %57
%59:i8 = or %6, %58
%60:i8 = or %5, %59
%61:i8 = or %4, %60
%62:i8 = or %3, %61
%63:i8 = or %2, %62
%64:i8 = or %1, %63
%65:i32 = zext %64
%66:i32 = addnw 511:i32, %65

Cost = 35
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = and 127:i8, %0
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = var
%26:i8 = var
%27:i8 = var
%28:i8 = var
%29:i8 = var
%30:i8 = var
%31:i8 = var
%32:i8 = var
%33:i8 = xor 1:i8, %32
%34:i8 = or %31, %33
%35:i8 = or %30, %34
%36:i8 = or %29, %35
%37:i8 = or %28, %36
%38:i8 = or %27, %37
%39:i8 = or %26, %38
%40:i8 = or %25, %39
%41:i8 = or %24, %40
%42:i8 = or %23, %41
%43:i8 = or %22, %42
%44:i8 = or %21, %43
%45:i8 = or %20, %44
%46:i8 = or %19, %45
%47:i8 = or %18, %46
%48:i8 = or %17, %47
%49:i8 = or %16, %48
%50:i8 = or %15, %49
%51:i8 = or %14, %50
%52:i8 = or %13, %51
%53:i8 = or %12, %52
%54:i8 = or %11, %53
%55:i8 = or %10, %54
%56:i8 = or %9, %55
%57:i8 = or %8, %56
%58:i8 = or %7, %57
%59:i8 = or %6, %58
%60:i8 = or %5, %59
%61:i8 = or %4, %60
%62:i8 = or %3, %61
%63:i8 = or %2, %62
%64:i8 = or %1, %63
%65:i32 = zext %64
%66:i32 = addnw 511:i32, %65
%67:i32 = and 256:i32, %66
%68:i1 = eq 0:i32, %67
infer %68


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i32 = sext %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0 = block 6
%1:i32 = var
%2:i1 = ne 0:i32, %1
%3:i32 = sext %2
%4:i32 = phi %0, 4294967295:i32, 4294967295:i32, 4294967295:i32, 4294967295:i32, 4294967295:i32, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i32 = sext %1

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for ./scalarmult_ed25519_ref10.c.bc:_crypto_scalarmult_ed25519()

; entering Souper's runOnFunction() for crypto_scalarmult_ed25519_noclamp()

; ModuleID = './scalarmult_ed25519_ref10.c.bc'
source_filename = "crypto_scalarmult/ed25519/ref10/scalarmult_ed25519_ref10.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.ge25519_p3 = type { [10 x i32], [10 x i32], [10 x i32], [10 x i32] }

; Function Attrs: nounwind
define i32 @crypto_scalarmult_ed25519(i8* nonnull %0, i8* nonnull %1, i8* nonnull %2) local_unnamed_addr #0 {
  %4 = tail call fastcc i32 @_crypto_scalarmult_ed25519(i8* nonnull %0, i8* nonnull %1, i8* nonnull %2, i32 1)
  ret i32 %4
}

; Function Attrs: nounwind
define internal fastcc i32 @_crypto_scalarmult_ed25519(i8* %0, i8* %1, i8* %2, i32 %3) unnamed_addr #0 {
  %5 = alloca %struct.ge25519_p3, align 4
  %6 = alloca %struct.ge25519_p3, align 4
  %7 = bitcast %struct.ge25519_p3* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %7) #4
  %8 = bitcast %struct.ge25519_p3* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %8) #4
  %9 = tail call i32 @ge25519_is_canonical(i8* %2) #4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %145, label %11

11:                                               ; preds = %4
  %12 = tail call i32 @ge25519_has_small_order(i8* %2) #4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %145

14:                                               ; preds = %11
  %15 = call i32 @ge25519_frombytes(%struct.ge25519_p3* nonnull %6, i8* %2) #4
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %145

17:                                               ; preds = %14
  %18 = call i32 @ge25519_is_on_main_subgroup(%struct.ge25519_p3* nonnull %6) #4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %145, label %20

20:                                               ; preds = %17, %20
  %21 = phi i32 [ %25, %20 ], [ 0, %17 ]
  %22 = getelementptr i8, i8* %1, i32 %21
  %23 = load i8, i8* %22, align 1
  %24 = getelementptr i8, i8* %0, i32 %21
  store i8 %23, i8* %24, align 1
  %25 = add nuw nsw i32 %21, 1
  %26 = icmp eq i32 %25, 32
  br i1 %26, label %27, label %20

27:                                               ; preds = %20
  %28 = icmp eq i32 %3, 0
  br i1 %28, label %29, label %32

29:                                               ; preds = %27
  %30 = getelementptr i8, i8* %0, i32 31
  %31 = load i8, i8* %30, align 1
  br label %38

32:                                               ; preds = %27
  %33 = load i8, i8* %0, align 1
  %34 = and i8 %33, -8
  store i8 %34, i8* %0, align 1
  %35 = getelementptr i8, i8* %0, i32 31
  %36 = load i8, i8* %35, align 1
  %37 = or i8 %36, 64
  store i8 %37, i8* %35, align 1
  br label %38

38:                                               ; preds = %29, %32
  %39 = phi i8 [ %31, %29 ], [ %37, %32 ]
  %40 = getelementptr i8, i8* %0, i32 31
  %41 = and i8 %39, 127
  store i8 %41, i8* %40, align 1
  call void @ge25519_scalarmult(%struct.ge25519_p3* nonnull %5, i8* nonnull %0, %struct.ge25519_p3* nonnull %6) #4
  call void @ge25519_p3_tobytes(i8* nonnull %0, %struct.ge25519_p3* nonnull %5) #4
  %42 = load i8, i8* %0, align 1
  %43 = xor i8 %42, 1
  %44 = getelementptr i8, i8* %0, i32 1
  %45 = load i8, i8* %44, align 1
  %46 = or i8 %45, %43
  %47 = getelementptr i8, i8* %0, i32 2
  %48 = load i8, i8* %47, align 1
  %49 = or i8 %46, %48
  %50 = getelementptr i8, i8* %0, i32 3
  %51 = load i8, i8* %50, align 1
  %52 = or i8 %49, %51
  %53 = getelementptr i8, i8* %0, i32 4
  %54 = load i8, i8* %53, align 1
  %55 = or i8 %52, %54
  %56 = getelementptr i8, i8* %0, i32 5
  %57 = load i8, i8* %56, align 1
  %58 = or i8 %55, %57
  %59 = getelementptr i8, i8* %0, i32 6
  %60 = load i8, i8* %59, align 1
  %61 = or i8 %58, %60
  %62 = getelementptr i8, i8* %0, i32 7
  %63 = load i8, i8* %62, align 1
  %64 = or i8 %61, %63
  %65 = getelementptr i8, i8* %0, i32 8
  %66 = load i8, i8* %65, align 1
  %67 = or i8 %64, %66
  %68 = getelementptr i8, i8* %0, i32 9
  %69 = load i8, i8* %68, align 1
  %70 = or i8 %67, %69
  %71 = getelementptr i8, i8* %0, i32 10
  %72 = load i8, i8* %71, align 1
  %73 = or i8 %70, %72
  %74 = getelementptr i8, i8* %0, i32 11
  %75 = load i8, i8* %74, align 1
  %76 = or i8 %73, %75
  %77 = getelementptr i8, i8* %0, i32 12
  %78 = load i8, i8* %77, align 1
  %79 = or i8 %76, %78
  %80 = getelementptr i8, i8* %0, i32 13
  %81 = load i8, i8* %80, align 1
  %82 = or i8 %79, %81
  %83 = getelementptr i8, i8* %0, i32 14
  %84 = load i8, i8* %83, align 1
  %85 = or i8 %82, %84
  %86 = getelementptr i8, i8* %0, i32 15
  %87 = load i8, i8* %86, align 1
  %88 = or i8 %85, %87
  %89 = getelementptr i8, i8* %0, i32 16
  %90 = load i8, i8* %89, align 1
  %91 = or i8 %88, %90
  %92 = getelementptr i8, i8* %0, i32 17
  %93 = load i8, i8* %92, align 1
  %94 = or i8 %91, %93
  %95 = getelementptr i8, i8* %0, i32 18
  %96 = load i8, i8* %95, align 1
  %97 = or i8 %94, %96
  %98 = getelementptr i8, i8* %0, i32 19
  %99 = load i8, i8* %98, align 1
  %100 = or i8 %97, %99
  %101 = getelementptr i8, i8* %0, i32 20
  %102 = load i8, i8* %101, align 1
  %103 = or i8 %100, %102
  %104 = getelementptr i8, i8* %0, i32 21
  %105 = load i8, i8* %104, align 1
  %106 = or i8 %103, %105
  %107 = getelementptr i8, i8* %0, i32 22
  %108 = load i8, i8* %107, align 1
  %109 = or i8 %106, %108
  %110 = getelementptr i8, i8* %0, i32 23
  %111 = load i8, i8* %110, align 1
  %112 = or i8 %109, %111
  %113 = getelementptr i8, i8* %0, i32 24
  %114 = load i8, i8* %113, align 1
  %115 = or i8 %112, %114
  %116 = getelementptr i8, i8* %0, i32 25
  %117 = load i8, i8* %116, align 1
  %118 = or i8 %115, %117
  %119 = getelementptr i8, i8* %0, i32 26
  %120 = load i8, i8* %119, align 1
  %121 = or i8 %118, %120
  %122 = getelementptr i8, i8* %0, i32 27
  %123 = load i8, i8* %122, align 1
  %124 = or i8 %121, %123
  %125 = getelementptr i8, i8* %0, i32 28
  %126 = load i8, i8* %125, align 1
  %127 = or i8 %124, %126
  %128 = getelementptr i8, i8* %0, i32 29
  %129 = load i8, i8* %128, align 1
  %130 = or i8 %127, %129
  %131 = getelementptr i8, i8* %0, i32 30
  %132 = load i8, i8* %131, align 1
  %133 = or i8 %130, %132
  %134 = load i8, i8* %40, align 1
  %135 = and i8 %134, 127
  %136 = or i8 %133, %135
  %137 = zext i8 %136 to i32
  %138 = add nuw nsw i32 %137, 511
  %139 = and i32 %138, 256
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %141, label %145

141:                                              ; preds = %38
  %142 = call i32 @sodium_is_zero(i8* nonnull %1, i32 32) #4
  %143 = icmp ne i32 %142, 0
  %144 = sext i1 %143 to i32
  br label %145

145:                                              ; preds = %141, %38, %4, %17, %11, %14
  %146 = phi i32 [ -1, %14 ], [ -1, %11 ], [ -1, %17 ], [ -1, %4 ], [ -1, %38 ], [ %144, %141 ]
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %8) #4
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %7) #4
  ret i32 %146
}

; Function Attrs: nounwind
define i32 @crypto_scalarmult_ed25519_noclamp(i8* nonnull %0, i8* nonnull %1, i8* nonnull %2) local_unnamed_addr #0 {
  %4 = tail call fastcc i32 @_crypto_scalarmult_ed25519(i8* nonnull %0, i8* nonnull %1, i8* nonnull %2, i32 0)
  ret i32 %4
}

; Function Attrs: nounwind
define i32 @crypto_scalarmult_ed25519_base(i8* nonnull %0, i8* nonnull %1) local_unnamed_addr #0 {
  %3 = tail call fastcc i32 @_crypto_scalarmult_ed25519_base(i8* nonnull %0, i8* nonnull %1, i32 1)
  ret i32 %3
}

; Function Attrs: nounwind
define internal fastcc i32 @_crypto_scalarmult_ed25519_base(i8* %0, i8* %1, i32 %2) unnamed_addr #0 {
  %4 = alloca %struct.ge25519_p3, align 4
  %5 = bitcast %struct.ge25519_p3* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %5) #4
  br label %6

6:                                                ; preds = %6, %3
  %7 = phi i32 [ 0, %3 ], [ %11, %6 ]
  %8 = getelementptr i8, i8* %1, i32 %7
  %9 = load i8, i8* %8, align 1
  %10 = getelementptr i8, i8* %0, i32 %7
  store i8 %9, i8* %10, align 1
  %11 = add nuw nsw i32 %7, 1
  %12 = icmp eq i32 %11, 32
  br i1 %12, label %13, label %6

13:                                               ; preds = %6
  %14 = icmp eq i32 %2, 0
  br i1 %14, label %15, label %18

15:                                               ; preds = %13
  %16 = getelementptr i8, i8* %0, i32 31
  %17 = load i8, i8* %16, align 1
  br label %24

18:                                               ; preds = %13
  %19 = load i8, i8* %0, align 1
  %20 = and i8 %19, -8
  store i8 %20, i8* %0, align 1
  %21 = getelementptr i8, i8* %0, i32 31
  %22 = load i8, i8* %21, align 1
  %23 = or i8 %22, 64
  store i8 %23, i8* %21, align 1
  br label %24

24:                                               ; preds = %15, %18
  %25 = phi i8 [ %17, %15 ], [ %23, %18 ]
  %26 = getelementptr i8, i8* %0, i32 31
  %27 = and i8 %25, 127
  store i8 %27, i8* %26, align 1
  call void @ge25519_scalarmult_base(%struct.ge25519_p3* nonnull %4, i8* nonnull %0) #4
  call void @ge25519_p3_tobytes(i8* nonnull %0, %struct.ge25519_p3* nonnull %4) #4
  %28 = load i8, i8* %0, align 1
  %29 = xor i8 %28, 1
  %30 = getelementptr i8, i8* %0, i32 1
  %31 = load i8, i8* %30, align 1
  %32 = or i8 %31, %29
  %33 = getelementptr i8, i8* %0, i32 2
  %34 = load i8, i8* %33, align 1
  %35 = or i8 %32, %34
  %36 = getelementptr i8, i8* %0, i32 3
  %37 = load i8, i8* %36, align 1
  %38 = or i8 %35, %37
  %39 = getelementptr i8, i8* %0, i32 4
  %40 = load i8, i8* %39, align 1
  %41 = or i8 %38, %40
  %42 = getelementptr i8, i8* %0, i32 5
  %43 = load i8, i8* %42, align 1
  %44 = or i8 %41, %43
  %45 = getelementptr i8, i8* %0, i32 6
  %46 = load i8, i8* %45, align 1
  %47 = or i8 %44, %46
  %48 = getelementptr i8, i8* %0, i32 7
  %49 = load i8, i8* %48, align 1
  %50 = or i8 %47, %49
  %51 = getelementptr i8, i8* %0, i32 8
  %52 = load i8, i8* %51, align 1
  %53 = or i8 %50, %52
  %54 = getelementptr i8, i8* %0, i32 9
  %55 = load i8, i8* %54, align 1
  %56 = or i8 %53, %55
  %57 = getelementptr i8, i8* %0, i32 10
  %58 = load i8, i8* %57, align 1
  %59 = or i8 %56, %58
  %60 = getelementptr i8, i8* %0, i32 11
  %61 = load i8, i8* %60, align 1
  %62 = or i8 %59, %61
  %63 = getelementptr i8, i8* %0, i32 12
  %64 = load i8, i8* %63, align 1
  %65 = or i8 %62, %64
  %66 = getelementptr i8, i8* %0, i32 13
  %67 = load i8, i8* %66, align 1
  %68 = or i8 %65, %67
  %69 = getelementptr i8, i8* %0, i32 14
  %70 = load i8, i8* %69, align 1
  %71 = or i8 %68, %70
  %72 = getelementptr i8, i8* %0, i32 15
  %73 = load i8, i8* %72, align 1
  %74 = or i8 %71, %73
  %75 = getelementptr i8, i8* %0, i32 16
  %76 = load i8, i8* %75, align 1
  %77 = or i8 %74, %76
  %78 = getelementptr i8, i8* %0, i32 17
  %79 = load i8, i8* %78, align 1
  %80 = or i8 %77, %79
  %81 = getelementptr i8, i8* %0, i32 18
  %82 = load i8, i8* %81, align 1
  %83 = or i8 %80, %82
  %84 = getelementptr i8, i8* %0, i32 19
  %85 = load i8, i8* %84, align 1
  %86 = or i8 %83, %85
  %87 = getelementptr i8, i8* %0, i32 20
  %88 = load i8, i8* %87, align 1
  %89 = or i8 %86, %88
  %90 = getelementptr i8, i8* %0, i32 21
  %91 = load i8, i8* %90, align 1
  %92 = or i8 %89, %91
  %93 = getelementptr i8, i8* %0, i32 22
  %94 = load i8, i8* %93, align 1
  %95 = or i8 %92, %94
  %96 = getelementptr i8, i8* %0, i32 23
  %97 = load i8, i8* %96, align 1
  %98 = or i8 %95, %97
  %99 = getelementptr i8, i8* %0, i32 24
  %100 = load i8, i8* %99, align 1
  %101 = or i8 %98, %100
  %102 = getelementptr i8, i8* %0, i32 25
  %103 = load i8, i8* %102, align 1
  %104 = or i8 %101, %103
  %105 = getelementptr i8, i8* %0, i32 26
  %106 = load i8, i8* %105, align 1
  %107 = or i8 %104, %106
  %108 = getelementptr i8, i8* %0, i32 27
  %109 = load i8, i8* %108, align 1
  %110 = or i8 %107, %109
  %111 = getelementptr i8, i8* %0, i32 28
  %112 = load i8, i8* %111, align 1
  %113 = or i8 %110, %112
  %114 = getelementptr i8, i8* %0, i32 29
  %115 = load i8, i8* %114, align 1
  %116 = or i8 %113, %115
  %117 = getelementptr i8, i8* %0, i32 30
  %118 = load i8, i8* %117, align 1
  %119 = or i8 %116, %118
  %120 = load i8, i8* %26, align 1
  %121 = and i8 %120, 127
  %122 = or i8 %119, %121
  %123 = zext i8 %122 to i32
  %124 = add nuw nsw i32 %123, 511
  %125 = and i32 %124, 256
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %127, label %131

127:                                              ; preds = %24
  %128 = call i32 @sodium_is_zero(i8* nonnull %1, i32 32) #4
  %129 = icmp ne i32 %128, 0
  %130 = sext i1 %129 to i32
  br label %131

131:                                              ; preds = %127, %24
  %132 = phi i32 [ -1, %24 ], [ %130, %127 ]
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %5) #4
  ret i32 %132
}

; Function Attrs: nounwind
define i32 @crypto_scalarmult_ed25519_base_noclamp(i8* nonnull %0, i8* nonnull %1) local_unnamed_addr #0 {
  %3 = tail call fastcc i32 @_crypto_scalarmult_ed25519_base(i8* nonnull %0, i8* nonnull %1, i32 0)
  ret i32 %3
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_scalarmult_ed25519_bytes() local_unnamed_addr #1 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_scalarmult_ed25519_scalarbytes() local_unnamed_addr #1 {
  ret i32 32
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #2

declare i32 @ge25519_is_canonical(i8* %0) local_unnamed_addr #3

declare i32 @ge25519_has_small_order(i8* %0) local_unnamed_addr #3

declare i32 @ge25519_frombytes(%struct.ge25519_p3* %0, i8* %1) local_unnamed_addr #3

declare i32 @ge25519_is_on_main_subgroup(%struct.ge25519_p3* %0) local_unnamed_addr #3

declare void @ge25519_scalarmult(%struct.ge25519_p3* %0, i8* %1, %struct.ge25519_p3* %2) local_unnamed_addr #3

declare void @ge25519_p3_tobytes(i8* %0, %struct.ge25519_p3* %1) local_unnamed_addr #3

declare i32 @sodium_is_zero(i8* %0, i32 %1) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #2

declare void @ge25519_scalarmult_base(%struct.ge25519_p3* %0, i8* %1) local_unnamed_addr #3

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %4 = tail call fastcc i32 @_crypto_scalarmult_ed25519(i8* nonnull %0, i8* nonnull %1, i8* nonnull %2, i32 0)
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for crypto_scalarmult_ed25519_noclamp()

; entering Souper's runOnFunction() for crypto_scalarmult_ed25519_base()

; ModuleID = './scalarmult_ed25519_ref10.c.bc'
source_filename = "crypto_scalarmult/ed25519/ref10/scalarmult_ed25519_ref10.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.ge25519_p3 = type { [10 x i32], [10 x i32], [10 x i32], [10 x i32] }

; Function Attrs: nounwind
define i32 @crypto_scalarmult_ed25519(i8* nonnull %0, i8* nonnull %1, i8* nonnull %2) local_unnamed_addr #0 {
  %4 = tail call fastcc i32 @_crypto_scalarmult_ed25519(i8* nonnull %0, i8* nonnull %1, i8* nonnull %2, i32 1)
  ret i32 %4
}

; Function Attrs: nounwind
define internal fastcc i32 @_crypto_scalarmult_ed25519(i8* %0, i8* %1, i8* %2, i32 %3) unnamed_addr #0 {
  %5 = alloca %struct.ge25519_p3, align 4
  %6 = alloca %struct.ge25519_p3, align 4
  %7 = bitcast %struct.ge25519_p3* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %7) #4
  %8 = bitcast %struct.ge25519_p3* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %8) #4
  %9 = tail call i32 @ge25519_is_canonical(i8* %2) #4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %145, label %11

11:                                               ; preds = %4
  %12 = tail call i32 @ge25519_has_small_order(i8* %2) #4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %145

14:                                               ; preds = %11
  %15 = call i32 @ge25519_frombytes(%struct.ge25519_p3* nonnull %6, i8* %2) #4
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %145

17:                                               ; preds = %14
  %18 = call i32 @ge25519_is_on_main_subgroup(%struct.ge25519_p3* nonnull %6) #4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %145, label %20

20:                                               ; preds = %17, %20
  %21 = phi i32 [ %25, %20 ], [ 0, %17 ]
  %22 = getelementptr i8, i8* %1, i32 %21
  %23 = load i8, i8* %22, align 1
  %24 = getelementptr i8, i8* %0, i32 %21
  store i8 %23, i8* %24, align 1
  %25 = add nuw nsw i32 %21, 1
  %26 = icmp eq i32 %25, 32
  br i1 %26, label %27, label %20

27:                                               ; preds = %20
  %28 = icmp eq i32 %3, 0
  br i1 %28, label %29, label %32

29:                                               ; preds = %27
  %30 = getelementptr i8, i8* %0, i32 31
  %31 = load i8, i8* %30, align 1
  br label %38

32:                                               ; preds = %27
  %33 = load i8, i8* %0, align 1
  %34 = and i8 %33, -8
  store i8 %34, i8* %0, align 1
  %35 = getelementptr i8, i8* %0, i32 31
  %36 = load i8, i8* %35, align 1
  %37 = or i8 %36, 64
  store i8 %37, i8* %35, align 1
  br label %38

38:                                               ; preds = %29, %32
  %39 = phi i8 [ %31, %29 ], [ %37, %32 ]
  %40 = getelementptr i8, i8* %0, i32 31
  %41 = and i8 %39, 127
  store i8 %41, i8* %40, align 1
  call void @ge25519_scalarmult(%struct.ge25519_p3* nonnull %5, i8* nonnull %0, %struct.ge25519_p3* nonnull %6) #4
  call void @ge25519_p3_tobytes(i8* nonnull %0, %struct.ge25519_p3* nonnull %5) #4
  %42 = load i8, i8* %0, align 1
  %43 = xor i8 %42, 1
  %44 = getelementptr i8, i8* %0, i32 1
  %45 = load i8, i8* %44, align 1
  %46 = or i8 %45, %43
  %47 = getelementptr i8, i8* %0, i32 2
  %48 = load i8, i8* %47, align 1
  %49 = or i8 %46, %48
  %50 = getelementptr i8, i8* %0, i32 3
  %51 = load i8, i8* %50, align 1
  %52 = or i8 %49, %51
  %53 = getelementptr i8, i8* %0, i32 4
  %54 = load i8, i8* %53, align 1
  %55 = or i8 %52, %54
  %56 = getelementptr i8, i8* %0, i32 5
  %57 = load i8, i8* %56, align 1
  %58 = or i8 %55, %57
  %59 = getelementptr i8, i8* %0, i32 6
  %60 = load i8, i8* %59, align 1
  %61 = or i8 %58, %60
  %62 = getelementptr i8, i8* %0, i32 7
  %63 = load i8, i8* %62, align 1
  %64 = or i8 %61, %63
  %65 = getelementptr i8, i8* %0, i32 8
  %66 = load i8, i8* %65, align 1
  %67 = or i8 %64, %66
  %68 = getelementptr i8, i8* %0, i32 9
  %69 = load i8, i8* %68, align 1
  %70 = or i8 %67, %69
  %71 = getelementptr i8, i8* %0, i32 10
  %72 = load i8, i8* %71, align 1
  %73 = or i8 %70, %72
  %74 = getelementptr i8, i8* %0, i32 11
  %75 = load i8, i8* %74, align 1
  %76 = or i8 %73, %75
  %77 = getelementptr i8, i8* %0, i32 12
  %78 = load i8, i8* %77, align 1
  %79 = or i8 %76, %78
  %80 = getelementptr i8, i8* %0, i32 13
  %81 = load i8, i8* %80, align 1
  %82 = or i8 %79, %81
  %83 = getelementptr i8, i8* %0, i32 14
  %84 = load i8, i8* %83, align 1
  %85 = or i8 %82, %84
  %86 = getelementptr i8, i8* %0, i32 15
  %87 = load i8, i8* %86, align 1
  %88 = or i8 %85, %87
  %89 = getelementptr i8, i8* %0, i32 16
  %90 = load i8, i8* %89, align 1
  %91 = or i8 %88, %90
  %92 = getelementptr i8, i8* %0, i32 17
  %93 = load i8, i8* %92, align 1
  %94 = or i8 %91, %93
  %95 = getelementptr i8, i8* %0, i32 18
  %96 = load i8, i8* %95, align 1
  %97 = or i8 %94, %96
  %98 = getelementptr i8, i8* %0, i32 19
  %99 = load i8, i8* %98, align 1
  %100 = or i8 %97, %99
  %101 = getelementptr i8, i8* %0, i32 20
  %102 = load i8, i8* %101, align 1
  %103 = or i8 %100, %102
  %104 = getelementptr i8, i8* %0, i32 21
  %105 = load i8, i8* %104, align 1
  %106 = or i8 %103, %105
  %107 = getelementptr i8, i8* %0, i32 22
  %108 = load i8, i8* %107, align 1
  %109 = or i8 %106, %108
  %110 = getelementptr i8, i8* %0, i32 23
  %111 = load i8, i8* %110, align 1
  %112 = or i8 %109, %111
  %113 = getelementptr i8, i8* %0, i32 24
  %114 = load i8, i8* %113, align 1
  %115 = or i8 %112, %114
  %116 = getelementptr i8, i8* %0, i32 25
  %117 = load i8, i8* %116, align 1
  %118 = or i8 %115, %117
  %119 = getelementptr i8, i8* %0, i32 26
  %120 = load i8, i8* %119, align 1
  %121 = or i8 %118, %120
  %122 = getelementptr i8, i8* %0, i32 27
  %123 = load i8, i8* %122, align 1
  %124 = or i8 %121, %123
  %125 = getelementptr i8, i8* %0, i32 28
  %126 = load i8, i8* %125, align 1
  %127 = or i8 %124, %126
  %128 = getelementptr i8, i8* %0, i32 29
  %129 = load i8, i8* %128, align 1
  %130 = or i8 %127, %129
  %131 = getelementptr i8, i8* %0, i32 30
  %132 = load i8, i8* %131, align 1
  %133 = or i8 %130, %132
  %134 = load i8, i8* %40, align 1
  %135 = and i8 %134, 127
  %136 = or i8 %133, %135
  %137 = zext i8 %136 to i32
  %138 = add nuw nsw i32 %137, 511
  %139 = and i32 %138, 256
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %141, label %145

141:                                              ; preds = %38
  %142 = call i32 @sodium_is_zero(i8* nonnull %1, i32 32) #4
  %143 = icmp ne i32 %142, 0
  %144 = sext i1 %143 to i32
  br label %145

145:                                              ; preds = %141, %38, %4, %17, %11, %14
  %146 = phi i32 [ -1, %14 ], [ -1, %11 ], [ -1, %17 ], [ -1, %4 ], [ -1, %38 ], [ %144, %141 ]
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %8) #4
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %7) #4
  ret i32 %146
}

; Function Attrs: nounwind
define i32 @crypto_scalarmult_ed25519_noclamp(i8* nonnull %0, i8* nonnull %1, i8* nonnull %2) local_unnamed_addr #0 {
  %4 = tail call fastcc i32 @_crypto_scalarmult_ed25519(i8* nonnull %0, i8* nonnull %1, i8* nonnull %2, i32 0)
  ret i32 %4
}

; Function Attrs: nounwind
define i32 @crypto_scalarmult_ed25519_base(i8* nonnull %0, i8* nonnull %1) local_unnamed_addr #0 {
  %3 = tail call fastcc i32 @_crypto_scalarmult_ed25519_base(i8* nonnull %0, i8* nonnull %1, i32 1)
  ret i32 %3
}

; Function Attrs: nounwind
define internal fastcc i32 @_crypto_scalarmult_ed25519_base(i8* %0, i8* %1, i32 %2) unnamed_addr #0 {
  %4 = alloca %struct.ge25519_p3, align 4
  %5 = bitcast %struct.ge25519_p3* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %5) #4
  br label %6

6:                                                ; preds = %6, %3
  %7 = phi i32 [ 0, %3 ], [ %11, %6 ]
  %8 = getelementptr i8, i8* %1, i32 %7
  %9 = load i8, i8* %8, align 1
  %10 = getelementptr i8, i8* %0, i32 %7
  store i8 %9, i8* %10, align 1
  %11 = add nuw nsw i32 %7, 1
  %12 = icmp eq i32 %11, 32
  br i1 %12, label %13, label %6

13:                                               ; preds = %6
  %14 = icmp eq i32 %2, 0
  br i1 %14, label %15, label %18

15:                                               ; preds = %13
  %16 = getelementptr i8, i8* %0, i32 31
  %17 = load i8, i8* %16, align 1
  br label %24

18:                                               ; preds = %13
  %19 = load i8, i8* %0, align 1
  %20 = and i8 %19, -8
  store i8 %20, i8* %0, align 1
  %21 = getelementptr i8, i8* %0, i32 31
  %22 = load i8, i8* %21, align 1
  %23 = or i8 %22, 64
  store i8 %23, i8* %21, align 1
  br label %24

24:                                               ; preds = %15, %18
  %25 = phi i8 [ %17, %15 ], [ %23, %18 ]
  %26 = getelementptr i8, i8* %0, i32 31
  %27 = and i8 %25, 127
  store i8 %27, i8* %26, align 1
  call void @ge25519_scalarmult_base(%struct.ge25519_p3* nonnull %4, i8* nonnull %0) #4
  call void @ge25519_p3_tobytes(i8* nonnull %0, %struct.ge25519_p3* nonnull %4) #4
  %28 = load i8, i8* %0, align 1
  %29 = xor i8 %28, 1
  %30 = getelementptr i8, i8* %0, i32 1
  %31 = load i8, i8* %30, align 1
  %32 = or i8 %31, %29
  %33 = getelementptr i8, i8* %0, i32 2
  %34 = load i8, i8* %33, align 1
  %35 = or i8 %32, %34
  %36 = getelementptr i8, i8* %0, i32 3
  %37 = load i8, i8* %36, align 1
  %38 = or i8 %35, %37
  %39 = getelementptr i8, i8* %0, i32 4
  %40 = load i8, i8* %39, align 1
  %41 = or i8 %38, %40
  %42 = getelementptr i8, i8* %0, i32 5
  %43 = load i8, i8* %42, align 1
  %44 = or i8 %41, %43
  %45 = getelementptr i8, i8* %0, i32 6
  %46 = load i8, i8* %45, align 1
  %47 = or i8 %44, %46
  %48 = getelementptr i8, i8* %0, i32 7
  %49 = load i8, i8* %48, align 1
  %50 = or i8 %47, %49
  %51 = getelementptr i8, i8* %0, i32 8
  %52 = load i8, i8* %51, align 1
  %53 = or i8 %50, %52
  %54 = getelementptr i8, i8* %0, i32 9
  %55 = load i8, i8* %54, align 1
  %56 = or i8 %53, %55
  %57 = getelementptr i8, i8* %0, i32 10
  %58 = load i8, i8* %57, align 1
  %59 = or i8 %56, %58
  %60 = getelementptr i8, i8* %0, i32 11
  %61 = load i8, i8* %60, align 1
  %62 = or i8 %59, %61
  %63 = getelementptr i8, i8* %0, i32 12
  %64 = load i8, i8* %63, align 1
  %65 = or i8 %62, %64
  %66 = getelementptr i8, i8* %0, i32 13
  %67 = load i8, i8* %66, align 1
  %68 = or i8 %65, %67
  %69 = getelementptr i8, i8* %0, i32 14
  %70 = load i8, i8* %69, align 1
  %71 = or i8 %68, %70
  %72 = getelementptr i8, i8* %0, i32 15
  %73 = load i8, i8* %72, align 1
  %74 = or i8 %71, %73
  %75 = getelementptr i8, i8* %0, i32 16
  %76 = load i8, i8* %75, align 1
  %77 = or i8 %74, %76
  %78 = getelementptr i8, i8* %0, i32 17
  %79 = load i8, i8* %78, align 1
  %80 = or i8 %77, %79
  %81 = getelementptr i8, i8* %0, i32 18
  %82 = load i8, i8* %81, align 1
  %83 = or i8 %80, %82
  %84 = getelementptr i8, i8* %0, i32 19
  %85 = load i8, i8* %84, align 1
  %86 = or i8 %83, %85
  %87 = getelementptr i8, i8* %0, i32 20
  %88 = load i8, i8* %87, align 1
  %89 = or i8 %86, %88
  %90 = getelementptr i8, i8* %0, i32 21
  %91 = load i8, i8* %90, align 1
  %92 = or i8 %89, %91
  %93 = getelementptr i8, i8* %0, i32 22
  %94 = load i8, i8* %93, align 1
  %95 = or i8 %92, %94
  %96 = getelementptr i8, i8* %0, i32 23
  %97 = load i8, i8* %96, align 1
  %98 = or i8 %95, %97
  %99 = getelementptr i8, i8* %0, i32 24
  %100 = load i8, i8* %99, align 1
  %101 = or i8 %98, %100
  %102 = getelementptr i8, i8* %0, i32 25
  %103 = load i8, i8* %102, align 1
  %104 = or i8 %101, %103
  %105 = getelementptr i8, i8* %0, i32 26
  %106 = load i8, i8* %105, align 1
  %107 = or i8 %104, %106
  %108 = getelementptr i8, i8* %0, i32 27
  %109 = load i8, i8* %108, align 1
  %110 = or i8 %107, %109
  %111 = getelementptr i8, i8* %0, i32 28
  %112 = load i8, i8* %111, align 1
  %113 = or i8 %110, %112
  %114 = getelementptr i8, i8* %0, i32 29
  %115 = load i8, i8* %114, align 1
  %116 = or i8 %113, %115
  %117 = getelementptr i8, i8* %0, i32 30
  %118 = load i8, i8* %117, align 1
  %119 = or i8 %116, %118
  %120 = load i8, i8* %26, align 1
  %121 = and i8 %120, 127
  %122 = or i8 %119, %121
  %123 = zext i8 %122 to i32
  %124 = add nuw nsw i32 %123, 511
  %125 = and i32 %124, 256
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %127, label %131

127:                                              ; preds = %24
  %128 = call i32 @sodium_is_zero(i8* nonnull %1, i32 32) #4
  %129 = icmp ne i32 %128, 0
  %130 = sext i1 %129 to i32
  br label %131

131:                                              ; preds = %127, %24
  %132 = phi i32 [ -1, %24 ], [ %130, %127 ]
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %5) #4
  ret i32 %132
}

; Function Attrs: nounwind
define i32 @crypto_scalarmult_ed25519_base_noclamp(i8* nonnull %0, i8* nonnull %1) local_unnamed_addr #0 {
  %3 = tail call fastcc i32 @_crypto_scalarmult_ed25519_base(i8* nonnull %0, i8* nonnull %1, i32 0)
  ret i32 %3
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_scalarmult_ed25519_bytes() local_unnamed_addr #1 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_scalarmult_ed25519_scalarbytes() local_unnamed_addr #1 {
  ret i32 32
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #2

declare i32 @ge25519_is_canonical(i8* %0) local_unnamed_addr #3

declare i32 @ge25519_has_small_order(i8* %0) local_unnamed_addr #3

declare i32 @ge25519_frombytes(%struct.ge25519_p3* %0, i8* %1) local_unnamed_addr #3

declare i32 @ge25519_is_on_main_subgroup(%struct.ge25519_p3* %0) local_unnamed_addr #3

declare void @ge25519_scalarmult(%struct.ge25519_p3* %0, i8* %1, %struct.ge25519_p3* %2) local_unnamed_addr #3

declare void @ge25519_p3_tobytes(i8* %0, %struct.ge25519_p3* %1) local_unnamed_addr #3

declare i32 @sodium_is_zero(i8* %0, i32 %1) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #2

declare void @ge25519_scalarmult_base(%struct.ge25519_p3* %0, i8* %1) local_unnamed_addr #3

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %3 = tail call fastcc i32 @_crypto_scalarmult_ed25519_base(i8* nonnull %0, i8* nonnull %1, i32 1)
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for crypto_scalarmult_ed25519_base()

; entering Souper's runOnFunction() for ./scalarmult_ed25519_ref10.c.bc:_crypto_scalarmult_ed25519_base()

; ModuleID = './scalarmult_ed25519_ref10.c.bc'
source_filename = "crypto_scalarmult/ed25519/ref10/scalarmult_ed25519_ref10.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.ge25519_p3 = type { [10 x i32], [10 x i32], [10 x i32], [10 x i32] }

; Function Attrs: nounwind
define i32 @crypto_scalarmult_ed25519(i8* nonnull %0, i8* nonnull %1, i8* nonnull %2) local_unnamed_addr #0 {
  %4 = tail call fastcc i32 @_crypto_scalarmult_ed25519(i8* nonnull %0, i8* nonnull %1, i8* nonnull %2, i32 1)
  ret i32 %4
}

; Function Attrs: nounwind
define internal fastcc i32 @_crypto_scalarmult_ed25519(i8* %0, i8* %1, i8* %2, i32 %3) unnamed_addr #0 {
  %5 = alloca %struct.ge25519_p3, align 4
  %6 = alloca %struct.ge25519_p3, align 4
  %7 = bitcast %struct.ge25519_p3* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %7) #4
  %8 = bitcast %struct.ge25519_p3* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %8) #4
  %9 = tail call i32 @ge25519_is_canonical(i8* %2) #4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %145, label %11

11:                                               ; preds = %4
  %12 = tail call i32 @ge25519_has_small_order(i8* %2) #4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %145

14:                                               ; preds = %11
  %15 = call i32 @ge25519_frombytes(%struct.ge25519_p3* nonnull %6, i8* %2) #4
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %145

17:                                               ; preds = %14
  %18 = call i32 @ge25519_is_on_main_subgroup(%struct.ge25519_p3* nonnull %6) #4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %145, label %20

20:                                               ; preds = %17, %20
  %21 = phi i32 [ %25, %20 ], [ 0, %17 ]
  %22 = getelementptr i8, i8* %1, i32 %21
  %23 = load i8, i8* %22, align 1
  %24 = getelementptr i8, i8* %0, i32 %21
  store i8 %23, i8* %24, align 1
  %25 = add nuw nsw i32 %21, 1
  %26 = icmp eq i32 %25, 32
  br i1 %26, label %27, label %20

27:                                               ; preds = %20
  %28 = icmp eq i32 %3, 0
  br i1 %28, label %29, label %32

29:                                               ; preds = %27
  %30 = getelementptr i8, i8* %0, i32 31
  %31 = load i8, i8* %30, align 1
  br label %38

32:                                               ; preds = %27
  %33 = load i8, i8* %0, align 1
  %34 = and i8 %33, -8
  store i8 %34, i8* %0, align 1
  %35 = getelementptr i8, i8* %0, i32 31
  %36 = load i8, i8* %35, align 1
  %37 = or i8 %36, 64
  store i8 %37, i8* %35, align 1
  br label %38

38:                                               ; preds = %29, %32
  %39 = phi i8 [ %31, %29 ], [ %37, %32 ]
  %40 = getelementptr i8, i8* %0, i32 31
  %41 = and i8 %39, 127
  store i8 %41, i8* %40, align 1
  call void @ge25519_scalarmult(%struct.ge25519_p3* nonnull %5, i8* nonnull %0, %struct.ge25519_p3* nonnull %6) #4
  call void @ge25519_p3_tobytes(i8* nonnull %0, %struct.ge25519_p3* nonnull %5) #4
  %42 = load i8, i8* %0, align 1
  %43 = xor i8 %42, 1
  %44 = getelementptr i8, i8* %0, i32 1
  %45 = load i8, i8* %44, align 1
  %46 = or i8 %45, %43
  %47 = getelementptr i8, i8* %0, i32 2
  %48 = load i8, i8* %47, align 1
  %49 = or i8 %46, %48
  %50 = getelementptr i8, i8* %0, i32 3
  %51 = load i8, i8* %50, align 1
  %52 = or i8 %49, %51
  %53 = getelementptr i8, i8* %0, i32 4
  %54 = load i8, i8* %53, align 1
  %55 = or i8 %52, %54
  %56 = getelementptr i8, i8* %0, i32 5
  %57 = load i8, i8* %56, align 1
  %58 = or i8 %55, %57
  %59 = getelementptr i8, i8* %0, i32 6
  %60 = load i8, i8* %59, align 1
  %61 = or i8 %58, %60
  %62 = getelementptr i8, i8* %0, i32 7
  %63 = load i8, i8* %62, align 1
  %64 = or i8 %61, %63
  %65 = getelementptr i8, i8* %0, i32 8
  %66 = load i8, i8* %65, align 1
  %67 = or i8 %64, %66
  %68 = getelementptr i8, i8* %0, i32 9
  %69 = load i8, i8* %68, align 1
  %70 = or i8 %67, %69
  %71 = getelementptr i8, i8* %0, i32 10
  %72 = load i8, i8* %71, align 1
  %73 = or i8 %70, %72
  %74 = getelementptr i8, i8* %0, i32 11
  %75 = load i8, i8* %74, align 1
  %76 = or i8 %73, %75
  %77 = getelementptr i8, i8* %0, i32 12
  %78 = load i8, i8* %77, align 1
  %79 = or i8 %76, %78
  %80 = getelementptr i8, i8* %0, i32 13
  %81 = load i8, i8* %80, align 1
  %82 = or i8 %79, %81
  %83 = getelementptr i8, i8* %0, i32 14
  %84 = load i8, i8* %83, align 1
  %85 = or i8 %82, %84
  %86 = getelementptr i8, i8* %0, i32 15
  %87 = load i8, i8* %86, align 1
  %88 = or i8 %85, %87
  %89 = getelementptr i8, i8* %0, i32 16
  %90 = load i8, i8* %89, align 1
  %91 = or i8 %88, %90
  %92 = getelementptr i8, i8* %0, i32 17
  %93 = load i8, i8* %92, align 1
  %94 = or i8 %91, %93
  %95 = getelementptr i8, i8* %0, i32 18
  %96 = load i8, i8* %95, align 1
  %97 = or i8 %94, %96
  %98 = getelementptr i8, i8* %0, i32 19
  %99 = load i8, i8* %98, align 1
  %100 = or i8 %97, %99
  %101 = getelementptr i8, i8* %0, i32 20
  %102 = load i8, i8* %101, align 1
  %103 = or i8 %100, %102
  %104 = getelementptr i8, i8* %0, i32 21
  %105 = load i8, i8* %104, align 1
  %106 = or i8 %103, %105
  %107 = getelementptr i8, i8* %0, i32 22
  %108 = load i8, i8* %107, align 1
  %109 = or i8 %106, %108
  %110 = getelementptr i8, i8* %0, i32 23
  %111 = load i8, i8* %110, align 1
  %112 = or i8 %109, %111
  %113 = getelementptr i8, i8* %0, i32 24
  %114 = load i8, i8* %113, align 1
  %115 = or i8 %112, %114
  %116 = getelementptr i8, i8* %0, i32 25
  %117 = load i8, i8* %116, align 1
  %118 = or i8 %115, %117
  %119 = getelementptr i8, i8* %0, i32 26
  %120 = load i8, i8* %119, align 1
  %121 = or i8 %118, %120
  %122 = getelementptr i8, i8* %0, i32 27
  %123 = load i8, i8* %122, align 1
  %124 = or i8 %121, %123
  %125 = getelementptr i8, i8* %0, i32 28
  %126 = load i8, i8* %125, align 1
  %127 = or i8 %124, %126
  %128 = getelementptr i8, i8* %0, i32 29
  %129 = load i8, i8* %128, align 1
  %130 = or i8 %127, %129
  %131 = getelementptr i8, i8* %0, i32 30
  %132 = load i8, i8* %131, align 1
  %133 = or i8 %130, %132
  %134 = load i8, i8* %40, align 1
  %135 = and i8 %134, 127
  %136 = or i8 %133, %135
  %137 = zext i8 %136 to i32
  %138 = add nuw nsw i32 %137, 511
  %139 = and i32 %138, 256
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %141, label %145

141:                                              ; preds = %38
  %142 = call i32 @sodium_is_zero(i8* nonnull %1, i32 32) #4
  %143 = icmp ne i32 %142, 0
  %144 = sext i1 %143 to i32
  br label %145

145:                                              ; preds = %141, %38, %4, %17, %11, %14
  %146 = phi i32 [ -1, %14 ], [ -1, %11 ], [ -1, %17 ], [ -1, %4 ], [ -1, %38 ], [ %144, %141 ]
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %8) #4
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %7) #4
  ret i32 %146
}

; Function Attrs: nounwind
define i32 @crypto_scalarmult_ed25519_noclamp(i8* nonnull %0, i8* nonnull %1, i8* nonnull %2) local_unnamed_addr #0 {
  %4 = tail call fastcc i32 @_crypto_scalarmult_ed25519(i8* nonnull %0, i8* nonnull %1, i8* nonnull %2, i32 0)
  ret i32 %4
}

; Function Attrs: nounwind
define i32 @crypto_scalarmult_ed25519_base(i8* nonnull %0, i8* nonnull %1) local_unnamed_addr #0 {
  %3 = tail call fastcc i32 @_crypto_scalarmult_ed25519_base(i8* nonnull %0, i8* nonnull %1, i32 1)
  ret i32 %3
}

; Function Attrs: nounwind
define internal fastcc i32 @_crypto_scalarmult_ed25519_base(i8* %0, i8* %1, i32 %2) unnamed_addr #0 {
  %4 = alloca %struct.ge25519_p3, align 4
  %5 = bitcast %struct.ge25519_p3* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %5) #4
  br label %6

6:                                                ; preds = %6, %3
  %7 = phi i32 [ 0, %3 ], [ %11, %6 ]
  %8 = getelementptr i8, i8* %1, i32 %7
  %9 = load i8, i8* %8, align 1
  %10 = getelementptr i8, i8* %0, i32 %7
  store i8 %9, i8* %10, align 1
  %11 = add nuw nsw i32 %7, 1
  %12 = icmp eq i32 %11, 32
  br i1 %12, label %13, label %6

13:                                               ; preds = %6
  %14 = icmp eq i32 %2, 0
  br i1 %14, label %15, label %18

15:                                               ; preds = %13
  %16 = getelementptr i8, i8* %0, i32 31
  %17 = load i8, i8* %16, align 1
  br label %24

18:                                               ; preds = %13
  %19 = load i8, i8* %0, align 1
  %20 = and i8 %19, -8
  store i8 %20, i8* %0, align 1
  %21 = getelementptr i8, i8* %0, i32 31
  %22 = load i8, i8* %21, align 1
  %23 = or i8 %22, 64
  store i8 %23, i8* %21, align 1
  br label %24

24:                                               ; preds = %15, %18
  %25 = phi i8 [ %17, %15 ], [ %23, %18 ]
  %26 = getelementptr i8, i8* %0, i32 31
  %27 = and i8 %25, 127
  store i8 %27, i8* %26, align 1
  call void @ge25519_scalarmult_base(%struct.ge25519_p3* nonnull %4, i8* nonnull %0) #4
  call void @ge25519_p3_tobytes(i8* nonnull %0, %struct.ge25519_p3* nonnull %4) #4
  %28 = load i8, i8* %0, align 1
  %29 = xor i8 %28, 1
  %30 = getelementptr i8, i8* %0, i32 1
  %31 = load i8, i8* %30, align 1
  %32 = or i8 %31, %29
  %33 = getelementptr i8, i8* %0, i32 2
  %34 = load i8, i8* %33, align 1
  %35 = or i8 %32, %34
  %36 = getelementptr i8, i8* %0, i32 3
  %37 = load i8, i8* %36, align 1
  %38 = or i8 %35, %37
  %39 = getelementptr i8, i8* %0, i32 4
  %40 = load i8, i8* %39, align 1
  %41 = or i8 %38, %40
  %42 = getelementptr i8, i8* %0, i32 5
  %43 = load i8, i8* %42, align 1
  %44 = or i8 %41, %43
  %45 = getelementptr i8, i8* %0, i32 6
  %46 = load i8, i8* %45, align 1
  %47 = or i8 %44, %46
  %48 = getelementptr i8, i8* %0, i32 7
  %49 = load i8, i8* %48, align 1
  %50 = or i8 %47, %49
  %51 = getelementptr i8, i8* %0, i32 8
  %52 = load i8, i8* %51, align 1
  %53 = or i8 %50, %52
  %54 = getelementptr i8, i8* %0, i32 9
  %55 = load i8, i8* %54, align 1
  %56 = or i8 %53, %55
  %57 = getelementptr i8, i8* %0, i32 10
  %58 = load i8, i8* %57, align 1
  %59 = or i8 %56, %58
  %60 = getelementptr i8, i8* %0, i32 11
  %61 = load i8, i8* %60, align 1
  %62 = or i8 %59, %61
  %63 = getelementptr i8, i8* %0, i32 12
  %64 = load i8, i8* %63, align 1
  %65 = or i8 %62, %64
  %66 = getelementptr i8, i8* %0, i32 13
  %67 = load i8, i8* %66, align 1
  %68 = or i8 %65, %67
  %69 = getelementptr i8, i8* %0, i32 14
  %70 = load i8, i8* %69, align 1
  %71 = or i8 %68, %70
  %72 = getelementptr i8, i8* %0, i32 15
  %73 = load i8, i8* %72, align 1
  %74 = or i8 %71, %73
  %75 = getelementptr i8, i8* %0, i32 16
  %76 = load i8, i8* %75, align 1
  %77 = or i8 %74, %76
  %78 = getelementptr i8, i8* %0, i32 17
  %79 = load i8, i8* %78, align 1
  %80 = or i8 %77, %79
  %81 = getelementptr i8, i8* %0, i32 18
  %82 = load i8, i8* %81, align 1
  %83 = or i8 %80, %82
  %84 = getelementptr i8, i8* %0, i32 19
  %85 = load i8, i8* %84, align 1
  %86 = or i8 %83, %85
  %87 = getelementptr i8, i8* %0, i32 20
  %88 = load i8, i8* %87, align 1
  %89 = or i8 %86, %88
  %90 = getelementptr i8, i8* %0, i32 21
  %91 = load i8, i8* %90, align 1
  %92 = or i8 %89, %91
  %93 = getelementptr i8, i8* %0, i32 22
  %94 = load i8, i8* %93, align 1
  %95 = or i8 %92, %94
  %96 = getelementptr i8, i8* %0, i32 23
  %97 = load i8, i8* %96, align 1
  %98 = or i8 %95, %97
  %99 = getelementptr i8, i8* %0, i32 24
  %100 = load i8, i8* %99, align 1
  %101 = or i8 %98, %100
  %102 = getelementptr i8, i8* %0, i32 25
  %103 = load i8, i8* %102, align 1
  %104 = or i8 %101, %103
  %105 = getelementptr i8, i8* %0, i32 26
  %106 = load i8, i8* %105, align 1
  %107 = or i8 %104, %106
  %108 = getelementptr i8, i8* %0, i32 27
  %109 = load i8, i8* %108, align 1
  %110 = or i8 %107, %109
  %111 = getelementptr i8, i8* %0, i32 28
  %112 = load i8, i8* %111, align 1
  %113 = or i8 %110, %112
  %114 = getelementptr i8, i8* %0, i32 29
  %115 = load i8, i8* %114, align 1
  %116 = or i8 %113, %115
  %117 = getelementptr i8, i8* %0, i32 30
  %118 = load i8, i8* %117, align 1
  %119 = or i8 %116, %118
  %120 = load i8, i8* %26, align 1
  %121 = and i8 %120, 127
  %122 = or i8 %119, %121
  %123 = zext i8 %122 to i32
  %124 = add nuw nsw i32 %123, 511
  %125 = and i32 %124, 256
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %127, label %131

127:                                              ; preds = %24
  %128 = call i32 @sodium_is_zero(i8* nonnull %1, i32 32) #4
  %129 = icmp ne i32 %128, 0
  %130 = sext i1 %129 to i32
  br label %131

131:                                              ; preds = %127, %24
  %132 = phi i32 [ -1, %24 ], [ %130, %127 ]
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %5) #4
  ret i32 %132
}

; Function Attrs: nounwind
define i32 @crypto_scalarmult_ed25519_base_noclamp(i8* nonnull %0, i8* nonnull %1) local_unnamed_addr #0 {
  %3 = tail call fastcc i32 @_crypto_scalarmult_ed25519_base(i8* nonnull %0, i8* nonnull %1, i32 0)
  ret i32 %3
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_scalarmult_ed25519_bytes() local_unnamed_addr #1 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_scalarmult_ed25519_scalarbytes() local_unnamed_addr #1 {
  ret i32 32
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #2

declare i32 @ge25519_is_canonical(i8* %0) local_unnamed_addr #3

declare i32 @ge25519_has_small_order(i8* %0) local_unnamed_addr #3

declare i32 @ge25519_frombytes(%struct.ge25519_p3* %0, i8* %1) local_unnamed_addr #3

declare i32 @ge25519_is_on_main_subgroup(%struct.ge25519_p3* %0) local_unnamed_addr #3

declare void @ge25519_scalarmult(%struct.ge25519_p3* %0, i8* %1, %struct.ge25519_p3* %2) local_unnamed_addr #3

declare void @ge25519_p3_tobytes(i8* %0, %struct.ge25519_p3* %1) local_unnamed_addr #3

declare i32 @sodium_is_zero(i8* %0, i32 %1) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #2

declare void @ge25519_scalarmult_base(%struct.ge25519_p3* %0, i8* %1) local_unnamed_addr #3

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %7 = phi i32 [ 0, %3 ], [ %11, %6 ]
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,32))
infer %0

; *****
; For LLVM instruction:
;  %9 = load i8, i8* %8, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = add nuw nsw i32 %7, 1
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,32))
%1:i32 = addnw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = icmp eq i32 %11, 32
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,32))
%1:i32 = addnw 1:i32, %0 (hasExternalUses)
%2:i1 = eq 32:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %14 = icmp eq i32 %2, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %17 = load i8, i8* %16, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=01111111)

; *****
; For LLVM instruction:
;  %19 = load i8, i8* %0, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=11111000)

; *****
; For LLVM instruction:
;  %20 = and i8 %19, -8
; Looking for a replacement for:
%0:i8 = var
%1:i8 = and 248:i8, %0
infer %1

; *****
; For LLVM instruction:
;  %22 = load i8, i8* %21, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=10111111)

; *****
; For LLVM instruction:
;  %23 = or i8 %22, 64
; Looking for a replacement for:
%0:i8 = var
%1:i8 = or 64:i8, %0
infer %1

; *****
; For LLVM instruction:
;  %25 = phi i8 [ %17, %15 ], [ %23, %18 ]
; Looking for a replacement for:
%0 = block 2
%1:i8 = var
%2:i8 = var
%3:i8 = or 64:i8, %2 (hasExternalUses)
%4:i8 = phi %0, %1, %3
infer %4 (demandedBits=01111111)

; *****
; For LLVM instruction:
;  %27 = and i8 %25, 127
; Looking for a replacement for:
%0 = block 2
%1:i8 = var
%2:i8 = var
%3:i8 = or 64:i8, %2
%4:i8 = phi %0, %1, %3
%5:i8 = and 127:i8, %4
infer %5

; *****
; For LLVM instruction:
;  %28 = load i8, i8* %0, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %29 = xor i8 %28, 1
; Looking for a replacement for:
%0:i8 = var
%1:i8 = xor 1:i8, %0
infer %1

; *****
; For LLVM instruction:
;  %31 = load i8, i8* %30, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %32 = or i8 %31, %29
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = xor 1:i8, %1
%3:i8 = or %0, %2
infer %3

; *****
; For LLVM instruction:
;  %34 = load i8, i8* %33, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %35 = or i8 %32, %34
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor 1:i8, %2
%4:i8 = or %1, %3
%5:i8 = or %0, %4
infer %5

; *****
; For LLVM instruction:
;  %37 = load i8, i8* %36, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %38 = or i8 %35, %37
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = xor 1:i8, %3
%5:i8 = or %2, %4
%6:i8 = or %1, %5
%7:i8 = or %0, %6
infer %7

; *****
; For LLVM instruction:
;  %40 = load i8, i8* %39, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %41 = or i8 %38, %40
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = xor 1:i8, %4
%6:i8 = or %3, %5
%7:i8 = or %2, %6
%8:i8 = or %1, %7
%9:i8 = or %0, %8
infer %9

; *****
; For LLVM instruction:
;  %43 = load i8, i8* %42, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %44 = or i8 %41, %43
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = xor 1:i8, %5
%7:i8 = or %4, %6
%8:i8 = or %3, %7
%9:i8 = or %2, %8
%10:i8 = or %1, %9
%11:i8 = or %0, %10
infer %11

; *****
; For LLVM instruction:
;  %46 = load i8, i8* %45, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %47 = or i8 %44, %46
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = xor 1:i8, %6
%8:i8 = or %5, %7
%9:i8 = or %4, %8
%10:i8 = or %3, %9
%11:i8 = or %2, %10
%12:i8 = or %1, %11
%13:i8 = or %0, %12
infer %13

; *****
; For LLVM instruction:
;  %49 = load i8, i8* %48, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %50 = or i8 %47, %49
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = xor 1:i8, %7
%9:i8 = or %6, %8
%10:i8 = or %5, %9
%11:i8 = or %4, %10
%12:i8 = or %3, %11
%13:i8 = or %2, %12
%14:i8 = or %1, %13
%15:i8 = or %0, %14
infer %15

; *****
; For LLVM instruction:
;  %52 = load i8, i8* %51, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %53 = or i8 %50, %52
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = xor 1:i8, %8
%10:i8 = or %7, %9
%11:i8 = or %6, %10
%12:i8 = or %5, %11
%13:i8 = or %4, %12
%14:i8 = or %3, %13
%15:i8 = or %2, %14
%16:i8 = or %1, %15
%17:i8 = or %0, %16
infer %17

; *****
; For LLVM instruction:
;  %55 = load i8, i8* %54, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %56 = or i8 %53, %55
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = xor 1:i8, %9
%11:i8 = or %8, %10
%12:i8 = or %7, %11
%13:i8 = or %6, %12
%14:i8 = or %5, %13
%15:i8 = or %4, %14
%16:i8 = or %3, %15
%17:i8 = or %2, %16
%18:i8 = or %1, %17
%19:i8 = or %0, %18
infer %19

; *****
; For LLVM instruction:
;  %58 = load i8, i8* %57, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %59 = or i8 %56, %58
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = xor 1:i8, %10
%12:i8 = or %9, %11
%13:i8 = or %8, %12
%14:i8 = or %7, %13
%15:i8 = or %6, %14
%16:i8 = or %5, %15
%17:i8 = or %4, %16
%18:i8 = or %3, %17
%19:i8 = or %2, %18
%20:i8 = or %1, %19
%21:i8 = or %0, %20
infer %21

; *****
; For LLVM instruction:
;  %61 = load i8, i8* %60, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %62 = or i8 %59, %61
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = xor 1:i8, %11
%13:i8 = or %10, %12
%14:i8 = or %9, %13
%15:i8 = or %8, %14
%16:i8 = or %7, %15
%17:i8 = or %6, %16
%18:i8 = or %5, %17
%19:i8 = or %4, %18
%20:i8 = or %3, %19
%21:i8 = or %2, %20
%22:i8 = or %1, %21
%23:i8 = or %0, %22
infer %23

; *****
; For LLVM instruction:
;  %64 = load i8, i8* %63, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %65 = or i8 %62, %64
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = xor 1:i8, %12
%14:i8 = or %11, %13
%15:i8 = or %10, %14
%16:i8 = or %9, %15
%17:i8 = or %8, %16
%18:i8 = or %7, %17
%19:i8 = or %6, %18
%20:i8 = or %5, %19
%21:i8 = or %4, %20
%22:i8 = or %3, %21
%23:i8 = or %2, %22
%24:i8 = or %1, %23
%25:i8 = or %0, %24
infer %25

; *****
; For LLVM instruction:
;  %67 = load i8, i8* %66, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %68 = or i8 %65, %67
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = xor 1:i8, %13
%15:i8 = or %12, %14
%16:i8 = or %11, %15
%17:i8 = or %10, %16
%18:i8 = or %9, %17
%19:i8 = or %8, %18
%20:i8 = or %7, %19
%21:i8 = or %6, %20
%22:i8 = or %5, %21
%23:i8 = or %4, %22
%24:i8 = or %3, %23
%25:i8 = or %2, %24
%26:i8 = or %1, %25
%27:i8 = or %0, %26
infer %27

; *****
; For LLVM instruction:
;  %70 = load i8, i8* %69, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %71 = or i8 %68, %70
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = xor 1:i8, %14
%16:i8 = or %13, %15
%17:i8 = or %12, %16
%18:i8 = or %11, %17
%19:i8 = or %10, %18
%20:i8 = or %9, %19
%21:i8 = or %8, %20
%22:i8 = or %7, %21
%23:i8 = or %6, %22
%24:i8 = or %5, %23
%25:i8 = or %4, %24
%26:i8 = or %3, %25
%27:i8 = or %2, %26
%28:i8 = or %1, %27
%29:i8 = or %0, %28
infer %29

; *****
; For LLVM instruction:
;  %73 = load i8, i8* %72, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %74 = or i8 %71, %73
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = xor 1:i8, %15
%17:i8 = or %14, %16
%18:i8 = or %13, %17
%19:i8 = or %12, %18
%20:i8 = or %11, %19
%21:i8 = or %10, %20
%22:i8 = or %9, %21
%23:i8 = or %8, %22
%24:i8 = or %7, %23
%25:i8 = or %6, %24
%26:i8 = or %5, %25
%27:i8 = or %4, %26
%28:i8 = or %3, %27
%29:i8 = or %2, %28
%30:i8 = or %1, %29
%31:i8 = or %0, %30
infer %31

; *****
; For LLVM instruction:
;  %76 = load i8, i8* %75, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %77 = or i8 %74, %76
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = xor 1:i8, %16
%18:i8 = or %15, %17
%19:i8 = or %14, %18
%20:i8 = or %13, %19
%21:i8 = or %12, %20
%22:i8 = or %11, %21
%23:i8 = or %10, %22
%24:i8 = or %9, %23
%25:i8 = or %8, %24
%26:i8 = or %7, %25
%27:i8 = or %6, %26
%28:i8 = or %5, %27
%29:i8 = or %4, %28
%30:i8 = or %3, %29
%31:i8 = or %2, %30
%32:i8 = or %1, %31
%33:i8 = or %0, %32
infer %33

; *****
; For LLVM instruction:
;  %79 = load i8, i8* %78, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %80 = or i8 %77, %79
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = xor 1:i8, %17
%19:i8 = or %16, %18
%20:i8 = or %15, %19
%21:i8 = or %14, %20
%22:i8 = or %13, %21
%23:i8 = or %12, %22
%24:i8 = or %11, %23
%25:i8 = or %10, %24
%26:i8 = or %9, %25
%27:i8 = or %8, %26
%28:i8 = or %7, %27
%29:i8 = or %6, %28
%30:i8 = or %5, %29
%31:i8 = or %4, %30
%32:i8 = or %3, %31
%33:i8 = or %2, %32
%34:i8 = or %1, %33
%35:i8 = or %0, %34
infer %35

; *****
; For LLVM instruction:
;  %82 = load i8, i8* %81, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %83 = or i8 %80, %82
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = xor 1:i8, %18
%20:i8 = or %17, %19
%21:i8 = or %16, %20
%22:i8 = or %15, %21
%23:i8 = or %14, %22
%24:i8 = or %13, %23
%25:i8 = or %12, %24
%26:i8 = or %11, %25
%27:i8 = or %10, %26
%28:i8 = or %9, %27
%29:i8 = or %8, %28
%30:i8 = or %7, %29
%31:i8 = or %6, %30
%32:i8 = or %5, %31
%33:i8 = or %4, %32
%34:i8 = or %3, %33
%35:i8 = or %2, %34
%36:i8 = or %1, %35
%37:i8 = or %0, %36
infer %37

; *****
; For LLVM instruction:
;  %85 = load i8, i8* %84, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %86 = or i8 %83, %85
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = xor 1:i8, %19
%21:i8 = or %18, %20
%22:i8 = or %17, %21
%23:i8 = or %16, %22
%24:i8 = or %15, %23
%25:i8 = or %14, %24
%26:i8 = or %13, %25
%27:i8 = or %12, %26
%28:i8 = or %11, %27
%29:i8 = or %10, %28
%30:i8 = or %9, %29
%31:i8 = or %8, %30
%32:i8 = or %7, %31
%33:i8 = or %6, %32
%34:i8 = or %5, %33
%35:i8 = or %4, %34
%36:i8 = or %3, %35
%37:i8 = or %2, %36
%38:i8 = or %1, %37
%39:i8 = or %0, %38
infer %39

; *****
; For LLVM instruction:
;  %88 = load i8, i8* %87, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %89 = or i8 %86, %88
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = xor 1:i8, %20
%22:i8 = or %19, %21
%23:i8 = or %18, %22
%24:i8 = or %17, %23
%25:i8 = or %16, %24
%26:i8 = or %15, %25
%27:i8 = or %14, %26
%28:i8 = or %13, %27
%29:i8 = or %12, %28
%30:i8 = or %11, %29
%31:i8 = or %10, %30
%32:i8 = or %9, %31
%33:i8 = or %8, %32
%34:i8 = or %7, %33
%35:i8 = or %6, %34
%36:i8 = or %5, %35
%37:i8 = or %4, %36
%38:i8 = or %3, %37
%39:i8 = or %2, %38
%40:i8 = or %1, %39
%41:i8 = or %0, %40
infer %41

; *****
; For LLVM instruction:
;  %91 = load i8, i8* %90, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %92 = or i8 %89, %91
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = xor 1:i8, %21
%23:i8 = or %20, %22
%24:i8 = or %19, %23
%25:i8 = or %18, %24
%26:i8 = or %17, %25
%27:i8 = or %16, %26
%28:i8 = or %15, %27
%29:i8 = or %14, %28
%30:i8 = or %13, %29
%31:i8 = or %12, %30
%32:i8 = or %11, %31
%33:i8 = or %10, %32
%34:i8 = or %9, %33
%35:i8 = or %8, %34
%36:i8 = or %7, %35
%37:i8 = or %6, %36
%38:i8 = or %5, %37
%39:i8 = or %4, %38
%40:i8 = or %3, %39
%41:i8 = or %2, %40
%42:i8 = or %1, %41
%43:i8 = or %0, %42
infer %43

; *****
; For LLVM instruction:
;  %94 = load i8, i8* %93, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %95 = or i8 %92, %94
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = xor 1:i8, %22
%24:i8 = or %21, %23
%25:i8 = or %20, %24
%26:i8 = or %19, %25
%27:i8 = or %18, %26
%28:i8 = or %17, %27
%29:i8 = or %16, %28
%30:i8 = or %15, %29
%31:i8 = or %14, %30
%32:i8 = or %13, %31
%33:i8 = or %12, %32
%34:i8 = or %11, %33
%35:i8 = or %10, %34
%36:i8 = or %9, %35
%37:i8 = or %8, %36
%38:i8 = or %7, %37
%39:i8 = or %6, %38
%40:i8 = or %5, %39
%41:i8 = or %4, %40
%42:i8 = or %3, %41
%43:i8 = or %2, %42
%44:i8 = or %1, %43
%45:i8 = or %0, %44
infer %45

; *****
; For LLVM instruction:
;  %97 = load i8, i8* %96, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %98 = or i8 %95, %97
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = xor 1:i8, %23
%25:i8 = or %22, %24
%26:i8 = or %21, %25
%27:i8 = or %20, %26
%28:i8 = or %19, %27
%29:i8 = or %18, %28
%30:i8 = or %17, %29
%31:i8 = or %16, %30
%32:i8 = or %15, %31
%33:i8 = or %14, %32
%34:i8 = or %13, %33
%35:i8 = or %12, %34
%36:i8 = or %11, %35
%37:i8 = or %10, %36
%38:i8 = or %9, %37
%39:i8 = or %8, %38
%40:i8 = or %7, %39
%41:i8 = or %6, %40
%42:i8 = or %5, %41
%43:i8 = or %4, %42
%44:i8 = or %3, %43
%45:i8 = or %2, %44
%46:i8 = or %1, %45
%47:i8 = or %0, %46
infer %47

; *****
; For LLVM instruction:
;  %100 = load i8, i8* %99, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %101 = or i8 %98, %100
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = xor 1:i8, %24
%26:i8 = or %23, %25
%27:i8 = or %22, %26
%28:i8 = or %21, %27
%29:i8 = or %20, %28
%30:i8 = or %19, %29
%31:i8 = or %18, %30
%32:i8 = or %17, %31
%33:i8 = or %16, %32
%34:i8 = or %15, %33
%35:i8 = or %14, %34
%36:i8 = or %13, %35
%37:i8 = or %12, %36
%38:i8 = or %11, %37
%39:i8 = or %10, %38
%40:i8 = or %9, %39
%41:i8 = or %8, %40
%42:i8 = or %7, %41
%43:i8 = or %6, %42
%44:i8 = or %5, %43
%45:i8 = or %4, %44
%46:i8 = or %3, %45
%47:i8 = or %2, %46
%48:i8 = or %1, %47
%49:i8 = or %0, %48
infer %49

; *****
; For LLVM instruction:
;  %103 = load i8, i8* %102, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %104 = or i8 %101, %103
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = var
%26:i8 = xor 1:i8, %25
%27:i8 = or %24, %26
%28:i8 = or %23, %27
%29:i8 = or %22, %28
%30:i8 = or %21, %29
%31:i8 = or %20, %30
%32:i8 = or %19, %31
%33:i8 = or %18, %32
%34:i8 = or %17, %33
%35:i8 = or %16, %34
%36:i8 = or %15, %35
%37:i8 = or %14, %36
%38:i8 = or %13, %37
%39:i8 = or %12, %38
%40:i8 = or %11, %39
%41:i8 = or %10, %40
%42:i8 = or %9, %41
%43:i8 = or %8, %42
%44:i8 = or %7, %43
%45:i8 = or %6, %44
%46:i8 = or %5, %45
%47:i8 = or %4, %46
%48:i8 = or %3, %47
%49:i8 = or %2, %48
%50:i8 = or %1, %49
%51:i8 = or %0, %50
infer %51

; *****
; For LLVM instruction:
;  %106 = load i8, i8* %105, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %107 = or i8 %104, %106
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = var
%26:i8 = var
%27:i8 = xor 1:i8, %26
%28:i8 = or %25, %27
%29:i8 = or %24, %28
%30:i8 = or %23, %29
%31:i8 = or %22, %30
%32:i8 = or %21, %31
%33:i8 = or %20, %32
%34:i8 = or %19, %33
%35:i8 = or %18, %34
%36:i8 = or %17, %35
%37:i8 = or %16, %36
%38:i8 = or %15, %37
%39:i8 = or %14, %38
%40:i8 = or %13, %39
%41:i8 = or %12, %40
%42:i8 = or %11, %41
%43:i8 = or %10, %42
%44:i8 = or %9, %43
%45:i8 = or %8, %44
%46:i8 = or %7, %45
%47:i8 = or %6, %46
%48:i8 = or %5, %47
%49:i8 = or %4, %48
%50:i8 = or %3, %49
%51:i8 = or %2, %50
%52:i8 = or %1, %51
%53:i8 = or %0, %52
infer %53

; *****
; For LLVM instruction:
;  %109 = load i8, i8* %108, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %110 = or i8 %107, %109
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = var
%26:i8 = var
%27:i8 = var
%28:i8 = xor 1:i8, %27
%29:i8 = or %26, %28
%30:i8 = or %25, %29
%31:i8 = or %24, %30
%32:i8 = or %23, %31
%33:i8 = or %22, %32
%34:i8 = or %21, %33
%35:i8 = or %20, %34
%36:i8 = or %19, %35
%37:i8 = or %18, %36
%38:i8 = or %17, %37
%39:i8 = or %16, %38
%40:i8 = or %15, %39
%41:i8 = or %14, %40
%42:i8 = or %13, %41
%43:i8 = or %12, %42
%44:i8 = or %11, %43
%45:i8 = or %10, %44
%46:i8 = or %9, %45
%47:i8 = or %8, %46
%48:i8 = or %7, %47
%49:i8 = or %6, %48
%50:i8 = or %5, %49
%51:i8 = or %4, %50
%52:i8 = or %3, %51
%53:i8 = or %2, %52
%54:i8 = or %1, %53
%55:i8 = or %0, %54
infer %55

; *****
; For LLVM instruction:
;  %112 = load i8, i8* %111, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %113 = or i8 %110, %112
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = var
%26:i8 = var
%27:i8 = var
%28:i8 = var
%29:i8 = xor 1:i8, %28
%30:i8 = or %27, %29
%31:i8 = or %26, %30
%32:i8 = or %25, %31
%33:i8 = or %24, %32
%34:i8 = or %23, %33
%35:i8 = or %22, %34
%36:i8 = or %21, %35
%37:i8 = or %20, %36
%38:i8 = or %19, %37
%39:i8 = or %18, %38
%40:i8 = or %17, %39
%41:i8 = or %16, %40
%42:i8 = or %15, %41
%43:i8 = or %14, %42
%44:i8 = or %13, %43
%45:i8 = or %12, %44
%46:i8 = or %11, %45
%47:i8 = or %10, %46
%48:i8 = or %9, %47
%49:i8 = or %8, %48
%50:i8 = or %7, %49
%51:i8 = or %6, %50
%52:i8 = or %5, %51
%53:i8 = or %4, %52
%54:i8 = or %3, %53
%55:i8 = or %2, %54
%56:i8 = or %1, %55
%57:i8 = or %0, %56
infer %57

; *****
; For LLVM instruction:
;  %115 = load i8, i8* %114, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %116 = or i8 %113, %115
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = var
%26:i8 = var
%27:i8 = var
%28:i8 = var
%29:i8 = var
%30:i8 = xor 1:i8, %29
%31:i8 = or %28, %30
%32:i8 = or %27, %31
%33:i8 = or %26, %32
%34:i8 = or %25, %33
%35:i8 = or %24, %34
%36:i8 = or %23, %35
%37:i8 = or %22, %36
%38:i8 = or %21, %37
%39:i8 = or %20, %38
%40:i8 = or %19, %39
%41:i8 = or %18, %40
%42:i8 = or %17, %41
%43:i8 = or %16, %42
%44:i8 = or %15, %43
%45:i8 = or %14, %44
%46:i8 = or %13, %45
%47:i8 = or %12, %46
%48:i8 = or %11, %47
%49:i8 = or %10, %48
%50:i8 = or %9, %49
%51:i8 = or %8, %50
%52:i8 = or %7, %51
%53:i8 = or %6, %52
%54:i8 = or %5, %53
%55:i8 = or %4, %54
%56:i8 = or %3, %55
%57:i8 = or %2, %56
%58:i8 = or %1, %57
%59:i8 = or %0, %58
infer %59

; *****
; For LLVM instruction:
;  %118 = load i8, i8* %117, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %119 = or i8 %116, %118
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = var
%26:i8 = var
%27:i8 = var
%28:i8 = var
%29:i8 = var
%30:i8 = var
%31:i8 = xor 1:i8, %30
%32:i8 = or %29, %31
%33:i8 = or %28, %32
%34:i8 = or %27, %33
%35:i8 = or %26, %34
%36:i8 = or %25, %35
%37:i8 = or %24, %36
%38:i8 = or %23, %37
%39:i8 = or %22, %38
%40:i8 = or %21, %39
%41:i8 = or %20, %40
%42:i8 = or %19, %41
%43:i8 = or %18, %42
%44:i8 = or %17, %43
%45:i8 = or %16, %44
%46:i8 = or %15, %45
%47:i8 = or %14, %46
%48:i8 = or %13, %47
%49:i8 = or %12, %48
%50:i8 = or %11, %49
%51:i8 = or %10, %50
%52:i8 = or %9, %51
%53:i8 = or %8, %52
%54:i8 = or %7, %53
%55:i8 = or %6, %54
%56:i8 = or %5, %55
%57:i8 = or %4, %56
%58:i8 = or %3, %57
%59:i8 = or %2, %58
%60:i8 = or %1, %59
%61:i8 = or %0, %60
infer %61

; *****
; For LLVM instruction:
;  %120 = load i8, i8* %26, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=01111111)

; *****
; For LLVM instruction:
;  %121 = and i8 %120, 127
; Looking for a replacement for:
%0:i8 = var
%1:i8 = and 127:i8, %0
infer %1

; *****
; For LLVM instruction:
;  %122 = or i8 %119, %121
; Looking for a replacement for:
%0:i8 = var
%1:i8 = and 127:i8, %0
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = var
%26:i8 = var
%27:i8 = var
%28:i8 = var
%29:i8 = var
%30:i8 = var
%31:i8 = var
%32:i8 = var
%33:i8 = xor 1:i8, %32
%34:i8 = or %31, %33
%35:i8 = or %30, %34
%36:i8 = or %29, %35
%37:i8 = or %28, %36
%38:i8 = or %27, %37
%39:i8 = or %26, %38
%40:i8 = or %25, %39
%41:i8 = or %24, %40
%42:i8 = or %23, %41
%43:i8 = or %22, %42
%44:i8 = or %21, %43
%45:i8 = or %20, %44
%46:i8 = or %19, %45
%47:i8 = or %18, %46
%48:i8 = or %17, %47
%49:i8 = or %16, %48
%50:i8 = or %15, %49
%51:i8 = or %14, %50
%52:i8 = or %13, %51
%53:i8 = or %12, %52
%54:i8 = or %11, %53
%55:i8 = or %10, %54
%56:i8 = or %9, %55
%57:i8 = or %8, %56
%58:i8 = or %7, %57
%59:i8 = or %6, %58
%60:i8 = or %5, %59
%61:i8 = or %4, %60
%62:i8 = or %3, %61
%63:i8 = or %2, %62
%64:i8 = or %1, %63
infer %64

; *****
; For LLVM instruction:
;  %123 = zext i8 %122 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i8 = and 127:i8, %0
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = var
%26:i8 = var
%27:i8 = var
%28:i8 = var
%29:i8 = var
%30:i8 = var
%31:i8 = var
%32:i8 = var
%33:i8 = xor 1:i8, %32
%34:i8 = or %31, %33
%35:i8 = or %30, %34
%36:i8 = or %29, %35
%37:i8 = or %28, %36
%38:i8 = or %27, %37
%39:i8 = or %26, %38
%40:i8 = or %25, %39
%41:i8 = or %24, %40
%42:i8 = or %23, %41
%43:i8 = or %22, %42
%44:i8 = or %21, %43
%45:i8 = or %20, %44
%46:i8 = or %19, %45
%47:i8 = or %18, %46
%48:i8 = or %17, %47
%49:i8 = or %16, %48
%50:i8 = or %15, %49
%51:i8 = or %14, %50
%52:i8 = or %13, %51
%53:i8 = or %12, %52
%54:i8 = or %11, %53
%55:i8 = or %10, %54
%56:i8 = or %9, %55
%57:i8 = or %8, %56
%58:i8 = or %7, %57
%59:i8 = or %6, %58
%60:i8 = or %5, %59
%61:i8 = or %4, %60
%62:i8 = or %3, %61
%63:i8 = or %2, %62
%64:i8 = or %1, %63
%65:i32 = zext %64
infer %65 (demandedBits=00000000000000000000000111111111)

; *****
; For LLVM instruction:
;  %124 = add nuw nsw i32 %123, 511
; Looking for a replacement for:
%0:i8 = var
%1:i8 = and 127:i8, %0
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = var
%26:i8 = var
%27:i8 = var
%28:i8 = var
%29:i8 = var
%30:i8 = var
%31:i8 = var
%32:i8 = var
%33:i8 = xor 1:i8, %32
%34:i8 = or %31, %33
%35:i8 = or %30, %34
%36:i8 = or %29, %35
%37:i8 = or %28, %36
%38:i8 = or %27, %37
%39:i8 = or %26, %38
%40:i8 = or %25, %39
%41:i8 = or %24, %40
%42:i8 = or %23, %41
%43:i8 = or %22, %42
%44:i8 = or %21, %43
%45:i8 = or %20, %44
%46:i8 = or %19, %45
%47:i8 = or %18, %46
%48:i8 = or %17, %47
%49:i8 = or %16, %48
%50:i8 = or %15, %49
%51:i8 = or %14, %50
%52:i8 = or %13, %51
%53:i8 = or %12, %52
%54:i8 = or %11, %53
%55:i8 = or %10, %54
%56:i8 = or %9, %55
%57:i8 = or %8, %56
%58:i8 = or %7, %57
%59:i8 = or %6, %58
%60:i8 = or %5, %59
%61:i8 = or %4, %60
%62:i8 = or %3, %61
%63:i8 = or %2, %62
%64:i8 = or %1, %63
%65:i32 = zext %64
%66:i32 = addnw 511:i32, %65
infer %66 (demandedBits=00000000000000000000000100000000)

; *****
; For LLVM instruction:
;  %125 = and i32 %124, 256
; Looking for a replacement for:
%0:i8 = var
%1:i8 = and 127:i8, %0
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = var
%26:i8 = var
%27:i8 = var
%28:i8 = var
%29:i8 = var
%30:i8 = var
%31:i8 = var
%32:i8 = var
%33:i8 = xor 1:i8, %32
%34:i8 = or %31, %33
%35:i8 = or %30, %34
%36:i8 = or %29, %35
%37:i8 = or %28, %36
%38:i8 = or %27, %37
%39:i8 = or %26, %38
%40:i8 = or %25, %39
%41:i8 = or %24, %40
%42:i8 = or %23, %41
%43:i8 = or %22, %42
%44:i8 = or %21, %43
%45:i8 = or %20, %44
%46:i8 = or %19, %45
%47:i8 = or %18, %46
%48:i8 = or %17, %47
%49:i8 = or %16, %48
%50:i8 = or %15, %49
%51:i8 = or %14, %50
%52:i8 = or %13, %51
%53:i8 = or %12, %52
%54:i8 = or %11, %53
%55:i8 = or %10, %54
%56:i8 = or %9, %55
%57:i8 = or %8, %56
%58:i8 = or %7, %57
%59:i8 = or %6, %58
%60:i8 = or %5, %59
%61:i8 = or %4, %60
%62:i8 = or %3, %61
%63:i8 = or %2, %62
%64:i8 = or %1, %63
%65:i32 = zext %64
%66:i32 = addnw 511:i32, %65
%67:i32 = and 256:i32, %66
infer %67

; *****
; For LLVM instruction:
;  %126 = icmp eq i32 %125, 0
; Looking for a replacement for:
%0:i8 = var
%1:i8 = and 127:i8, %0
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = var
%6:i8 = var
%7:i8 = var
%8:i8 = var
%9:i8 = var
%10:i8 = var
%11:i8 = var
%12:i8 = var
%13:i8 = var
%14:i8 = var
%15:i8 = var
%16:i8 = var
%17:i8 = var
%18:i8 = var
%19:i8 = var
%20:i8 = var
%21:i8 = var
%22:i8 = var
%23:i8 = var
%24:i8 = var
%25:i8 = var
%26:i8 = var
%27:i8 = var
%28:i8 = var
%29:i8 = var
%30:i8 = var
%31:i8 = var
%32:i8 = var
%33:i8 = xor 1:i8, %32
%34:i8 = or %31, %33
%35:i8 = or %30, %34
%36:i8 = or %29, %35
%37:i8 = or %28, %36
%38:i8 = or %27, %37
%39:i8 = or %26, %38
%40:i8 = or %25, %39
%41:i8 = or %24, %40
%42:i8 = or %23, %41
%43:i8 = or %22, %42
%44:i8 = or %21, %43
%45:i8 = or %20, %44
%46:i8 = or %19, %45
%47:i8 = or %18, %46
%48:i8 = or %17, %47
%49:i8 = or %16, %48
%50:i8 = or %15, %49
%51:i8 = or %14, %50
%52:i8 = or %13, %51
%53:i8 = or %12, %52
%54:i8 = or %11, %53
%55:i8 = or %10, %54
%56:i8 = or %9, %55
%57:i8 = or %8, %56
%58:i8 = or %7, %57
%59:i8 = or %6, %58
%60:i8 = or %5, %59
%61:i8 = or %4, %60
%62:i8 = or %3, %61
%63:i8 = or %2, %62
%64:i8 = or %1, %63
%65:i32 = zext %64
%66:i32 = addnw 511:i32, %65
%67:i32 = and 256:i32, %66
%68:i1 = eq 0:i32, %67
infer %68

; *****
; For LLVM instruction:
;  %128 = call i32 @sodium_is_zero(i8* nonnull %1, i32 32) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %129 = icmp ne i32 %128, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %130 = sext i1 %129 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i32 = sext %1
infer %2

; *****
; For LLVM instruction:
;  %132 = phi i32 [ -1, %24 ], [ %130, %127 ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i1 = ne 0:i32, %1
%3:i32 = sext %2
%4:i32 = phi %0, 4294967295:i32, %3
infer %4
got 4 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i1 = ne 0:i32, %1
%3:i32 = sext %2
%4:i32 = phi %0, 4294967295:i32, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i32 = sext %1

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for ./scalarmult_ed25519_ref10.c.bc:_crypto_scalarmult_ed25519_base()

; entering Souper's runOnFunction() for crypto_scalarmult_ed25519_base_noclamp()

; ModuleID = './scalarmult_ed25519_ref10.c.bc'
source_filename = "crypto_scalarmult/ed25519/ref10/scalarmult_ed25519_ref10.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.ge25519_p3 = type { [10 x i32], [10 x i32], [10 x i32], [10 x i32] }

; Function Attrs: nounwind
define i32 @crypto_scalarmult_ed25519(i8* nonnull %0, i8* nonnull %1, i8* nonnull %2) local_unnamed_addr #0 {
  %4 = tail call fastcc i32 @_crypto_scalarmult_ed25519(i8* nonnull %0, i8* nonnull %1, i8* nonnull %2, i32 1)
  ret i32 %4
}

; Function Attrs: nounwind
define internal fastcc i32 @_crypto_scalarmult_ed25519(i8* %0, i8* %1, i8* %2, i32 %3) unnamed_addr #0 {
  %5 = alloca %struct.ge25519_p3, align 4
  %6 = alloca %struct.ge25519_p3, align 4
  %7 = bitcast %struct.ge25519_p3* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %7) #4
  %8 = bitcast %struct.ge25519_p3* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %8) #4
  %9 = tail call i32 @ge25519_is_canonical(i8* %2) #4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %145, label %11

11:                                               ; preds = %4
  %12 = tail call i32 @ge25519_has_small_order(i8* %2) #4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %145

14:                                               ; preds = %11
  %15 = call i32 @ge25519_frombytes(%struct.ge25519_p3* nonnull %6, i8* %2) #4
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %145

17:                                               ; preds = %14
  %18 = call i32 @ge25519_is_on_main_subgroup(%struct.ge25519_p3* nonnull %6) #4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %145, label %20

20:                                               ; preds = %17, %20
  %21 = phi i32 [ %25, %20 ], [ 0, %17 ]
  %22 = getelementptr i8, i8* %1, i32 %21
  %23 = load i8, i8* %22, align 1
  %24 = getelementptr i8, i8* %0, i32 %21
  store i8 %23, i8* %24, align 1
  %25 = add nuw nsw i32 %21, 1
  %26 = icmp eq i32 %25, 32
  br i1 %26, label %27, label %20

27:                                               ; preds = %20
  %28 = icmp eq i32 %3, 0
  br i1 %28, label %29, label %32

29:                                               ; preds = %27
  %30 = getelementptr i8, i8* %0, i32 31
  %31 = load i8, i8* %30, align 1
  br label %38

32:                                               ; preds = %27
  %33 = load i8, i8* %0, align 1
  %34 = and i8 %33, -8
  store i8 %34, i8* %0, align 1
  %35 = getelementptr i8, i8* %0, i32 31
  %36 = load i8, i8* %35, align 1
  %37 = or i8 %36, 64
  store i8 %37, i8* %35, align 1
  br label %38

38:                                               ; preds = %29, %32
  %39 = phi i8 [ %31, %29 ], [ %37, %32 ]
  %40 = getelementptr i8, i8* %0, i32 31
  %41 = and i8 %39, 127
  store i8 %41, i8* %40, align 1
  call void @ge25519_scalarmult(%struct.ge25519_p3* nonnull %5, i8* nonnull %0, %struct.ge25519_p3* nonnull %6) #4
  call void @ge25519_p3_tobytes(i8* nonnull %0, %struct.ge25519_p3* nonnull %5) #4
  %42 = load i8, i8* %0, align 1
  %43 = xor i8 %42, 1
  %44 = getelementptr i8, i8* %0, i32 1
  %45 = load i8, i8* %44, align 1
  %46 = or i8 %45, %43
  %47 = getelementptr i8, i8* %0, i32 2
  %48 = load i8, i8* %47, align 1
  %49 = or i8 %46, %48
  %50 = getelementptr i8, i8* %0, i32 3
  %51 = load i8, i8* %50, align 1
  %52 = or i8 %49, %51
  %53 = getelementptr i8, i8* %0, i32 4
  %54 = load i8, i8* %53, align 1
  %55 = or i8 %52, %54
  %56 = getelementptr i8, i8* %0, i32 5
  %57 = load i8, i8* %56, align 1
  %58 = or i8 %55, %57
  %59 = getelementptr i8, i8* %0, i32 6
  %60 = load i8, i8* %59, align 1
  %61 = or i8 %58, %60
  %62 = getelementptr i8, i8* %0, i32 7
  %63 = load i8, i8* %62, align 1
  %64 = or i8 %61, %63
  %65 = getelementptr i8, i8* %0, i32 8
  %66 = load i8, i8* %65, align 1
  %67 = or i8 %64, %66
  %68 = getelementptr i8, i8* %0, i32 9
  %69 = load i8, i8* %68, align 1
  %70 = or i8 %67, %69
  %71 = getelementptr i8, i8* %0, i32 10
  %72 = load i8, i8* %71, align 1
  %73 = or i8 %70, %72
  %74 = getelementptr i8, i8* %0, i32 11
  %75 = load i8, i8* %74, align 1
  %76 = or i8 %73, %75
  %77 = getelementptr i8, i8* %0, i32 12
  %78 = load i8, i8* %77, align 1
  %79 = or i8 %76, %78
  %80 = getelementptr i8, i8* %0, i32 13
  %81 = load i8, i8* %80, align 1
  %82 = or i8 %79, %81
  %83 = getelementptr i8, i8* %0, i32 14
  %84 = load i8, i8* %83, align 1
  %85 = or i8 %82, %84
  %86 = getelementptr i8, i8* %0, i32 15
  %87 = load i8, i8* %86, align 1
  %88 = or i8 %85, %87
  %89 = getelementptr i8, i8* %0, i32 16
  %90 = load i8, i8* %89, align 1
  %91 = or i8 %88, %90
  %92 = getelementptr i8, i8* %0, i32 17
  %93 = load i8, i8* %92, align 1
  %94 = or i8 %91, %93
  %95 = getelementptr i8, i8* %0, i32 18
  %96 = load i8, i8* %95, align 1
  %97 = or i8 %94, %96
  %98 = getelementptr i8, i8* %0, i32 19
  %99 = load i8, i8* %98, align 1
  %100 = or i8 %97, %99
  %101 = getelementptr i8, i8* %0, i32 20
  %102 = load i8, i8* %101, align 1
  %103 = or i8 %100, %102
  %104 = getelementptr i8, i8* %0, i32 21
  %105 = load i8, i8* %104, align 1
  %106 = or i8 %103, %105
  %107 = getelementptr i8, i8* %0, i32 22
  %108 = load i8, i8* %107, align 1
  %109 = or i8 %106, %108
  %110 = getelementptr i8, i8* %0, i32 23
  %111 = load i8, i8* %110, align 1
  %112 = or i8 %109, %111
  %113 = getelementptr i8, i8* %0, i32 24
  %114 = load i8, i8* %113, align 1
  %115 = or i8 %112, %114
  %116 = getelementptr i8, i8* %0, i32 25
  %117 = load i8, i8* %116, align 1
  %118 = or i8 %115, %117
  %119 = getelementptr i8, i8* %0, i32 26
  %120 = load i8, i8* %119, align 1
  %121 = or i8 %118, %120
  %122 = getelementptr i8, i8* %0, i32 27
  %123 = load i8, i8* %122, align 1
  %124 = or i8 %121, %123
  %125 = getelementptr i8, i8* %0, i32 28
  %126 = load i8, i8* %125, align 1
  %127 = or i8 %124, %126
  %128 = getelementptr i8, i8* %0, i32 29
  %129 = load i8, i8* %128, align 1
  %130 = or i8 %127, %129
  %131 = getelementptr i8, i8* %0, i32 30
  %132 = load i8, i8* %131, align 1
  %133 = or i8 %130, %132
  %134 = load i8, i8* %40, align 1
  %135 = and i8 %134, 127
  %136 = or i8 %133, %135
  %137 = zext i8 %136 to i32
  %138 = add nuw nsw i32 %137, 511
  %139 = and i32 %138, 256
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %141, label %145

141:                                              ; preds = %38
  %142 = call i32 @sodium_is_zero(i8* nonnull %1, i32 32) #4
  %143 = icmp ne i32 %142, 0
  %144 = sext i1 %143 to i32
  br label %145

145:                                              ; preds = %141, %38, %4, %17, %11, %14
  %146 = phi i32 [ -1, %14 ], [ -1, %11 ], [ -1, %17 ], [ -1, %4 ], [ -1, %38 ], [ %144, %141 ]
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %8) #4
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %7) #4
  ret i32 %146
}

; Function Attrs: nounwind
define i32 @crypto_scalarmult_ed25519_noclamp(i8* nonnull %0, i8* nonnull %1, i8* nonnull %2) local_unnamed_addr #0 {
  %4 = tail call fastcc i32 @_crypto_scalarmult_ed25519(i8* nonnull %0, i8* nonnull %1, i8* nonnull %2, i32 0)
  ret i32 %4
}

; Function Attrs: nounwind
define i32 @crypto_scalarmult_ed25519_base(i8* nonnull %0, i8* nonnull %1) local_unnamed_addr #0 {
  %3 = tail call fastcc i32 @_crypto_scalarmult_ed25519_base(i8* nonnull %0, i8* nonnull %1, i32 1)
  ret i32 %3
}

; Function Attrs: nounwind
define internal fastcc i32 @_crypto_scalarmult_ed25519_base(i8* %0, i8* %1, i32 %2) unnamed_addr #0 {
  %4 = alloca %struct.ge25519_p3, align 4
  %5 = bitcast %struct.ge25519_p3* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %5) #4
  br label %6

6:                                                ; preds = %6, %3
  %7 = phi i32 [ 0, %3 ], [ %11, %6 ]
  %8 = getelementptr i8, i8* %1, i32 %7
  %9 = load i8, i8* %8, align 1
  %10 = getelementptr i8, i8* %0, i32 %7
  store i8 %9, i8* %10, align 1
  %11 = add nuw nsw i32 %7, 1
  %12 = icmp eq i32 %11, 32
  br i1 %12, label %13, label %6

13:                                               ; preds = %6
  %14 = icmp eq i32 %2, 0
  br i1 %14, label %15, label %18

15:                                               ; preds = %13
  %16 = getelementptr i8, i8* %0, i32 31
  %17 = load i8, i8* %16, align 1
  br label %24

18:                                               ; preds = %13
  %19 = load i8, i8* %0, align 1
  %20 = and i8 %19, -8
  store i8 %20, i8* %0, align 1
  %21 = getelementptr i8, i8* %0, i32 31
  %22 = load i8, i8* %21, align 1
  %23 = or i8 %22, 64
  store i8 %23, i8* %21, align 1
  br label %24

24:                                               ; preds = %15, %18
  %25 = phi i8 [ %17, %15 ], [ %23, %18 ]
  %26 = getelementptr i8, i8* %0, i32 31
  %27 = and i8 %25, 127
  store i8 %27, i8* %26, align 1
  call void @ge25519_scalarmult_base(%struct.ge25519_p3* nonnull %4, i8* nonnull %0) #4
  call void @ge25519_p3_tobytes(i8* nonnull %0, %struct.ge25519_p3* nonnull %4) #4
  %28 = load i8, i8* %0, align 1
  %29 = xor i8 %28, 1
  %30 = getelementptr i8, i8* %0, i32 1
  %31 = load i8, i8* %30, align 1
  %32 = or i8 %31, %29
  %33 = getelementptr i8, i8* %0, i32 2
  %34 = load i8, i8* %33, align 1
  %35 = or i8 %32, %34
  %36 = getelementptr i8, i8* %0, i32 3
  %37 = load i8, i8* %36, align 1
  %38 = or i8 %35, %37
  %39 = getelementptr i8, i8* %0, i32 4
  %40 = load i8, i8* %39, align 1
  %41 = or i8 %38, %40
  %42 = getelementptr i8, i8* %0, i32 5
  %43 = load i8, i8* %42, align 1
  %44 = or i8 %41, %43
  %45 = getelementptr i8, i8* %0, i32 6
  %46 = load i8, i8* %45, align 1
  %47 = or i8 %44, %46
  %48 = getelementptr i8, i8* %0, i32 7
  %49 = load i8, i8* %48, align 1
  %50 = or i8 %47, %49
  %51 = getelementptr i8, i8* %0, i32 8
  %52 = load i8, i8* %51, align 1
  %53 = or i8 %50, %52
  %54 = getelementptr i8, i8* %0, i32 9
  %55 = load i8, i8* %54, align 1
  %56 = or i8 %53, %55
  %57 = getelementptr i8, i8* %0, i32 10
  %58 = load i8, i8* %57, align 1
  %59 = or i8 %56, %58
  %60 = getelementptr i8, i8* %0, i32 11
  %61 = load i8, i8* %60, align 1
  %62 = or i8 %59, %61
  %63 = getelementptr i8, i8* %0, i32 12
  %64 = load i8, i8* %63, align 1
  %65 = or i8 %62, %64
  %66 = getelementptr i8, i8* %0, i32 13
  %67 = load i8, i8* %66, align 1
  %68 = or i8 %65, %67
  %69 = getelementptr i8, i8* %0, i32 14
  %70 = load i8, i8* %69, align 1
  %71 = or i8 %68, %70
  %72 = getelementptr i8, i8* %0, i32 15
  %73 = load i8, i8* %72, align 1
  %74 = or i8 %71, %73
  %75 = getelementptr i8, i8* %0, i32 16
  %76 = load i8, i8* %75, align 1
  %77 = or i8 %74, %76
  %78 = getelementptr i8, i8* %0, i32 17
  %79 = load i8, i8* %78, align 1
  %80 = or i8 %77, %79
  %81 = getelementptr i8, i8* %0, i32 18
  %82 = load i8, i8* %81, align 1
  %83 = or i8 %80, %82
  %84 = getelementptr i8, i8* %0, i32 19
  %85 = load i8, i8* %84, align 1
  %86 = or i8 %83, %85
  %87 = getelementptr i8, i8* %0, i32 20
  %88 = load i8, i8* %87, align 1
  %89 = or i8 %86, %88
  %90 = getelementptr i8, i8* %0, i32 21
  %91 = load i8, i8* %90, align 1
  %92 = or i8 %89, %91
  %93 = getelementptr i8, i8* %0, i32 22
  %94 = load i8, i8* %93, align 1
  %95 = or i8 %92, %94
  %96 = getelementptr i8, i8* %0, i32 23
  %97 = load i8, i8* %96, align 1
  %98 = or i8 %95, %97
  %99 = getelementptr i8, i8* %0, i32 24
  %100 = load i8, i8* %99, align 1
  %101 = or i8 %98, %100
  %102 = getelementptr i8, i8* %0, i32 25
  %103 = load i8, i8* %102, align 1
  %104 = or i8 %101, %103
  %105 = getelementptr i8, i8* %0, i32 26
  %106 = load i8, i8* %105, align 1
  %107 = or i8 %104, %106
  %108 = getelementptr i8, i8* %0, i32 27
  %109 = load i8, i8* %108, align 1
  %110 = or i8 %107, %109
  %111 = getelementptr i8, i8* %0, i32 28
  %112 = load i8, i8* %111, align 1
  %113 = or i8 %110, %112
  %114 = getelementptr i8, i8* %0, i32 29
  %115 = load i8, i8* %114, align 1
  %116 = or i8 %113, %115
  %117 = getelementptr i8, i8* %0, i32 30
  %118 = load i8, i8* %117, align 1
  %119 = or i8 %116, %118
  %120 = load i8, i8* %26, align 1
  %121 = and i8 %120, 127
  %122 = or i8 %119, %121
  %123 = zext i8 %122 to i32
  %124 = add nuw nsw i32 %123, 511
  %125 = and i32 %124, 256
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %127, label %131

127:                                              ; preds = %24
  %128 = call i32 @sodium_is_zero(i8* nonnull %1, i32 32) #4
  %129 = icmp ne i32 %128, 0
  %130 = sext i1 %129 to i32
  br label %131

131:                                              ; preds = %127, %24
  %132 = phi i32 [ -1, %24 ], [ %130, %127 ]
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %5) #4
  ret i32 %132
}

; Function Attrs: nounwind
define i32 @crypto_scalarmult_ed25519_base_noclamp(i8* nonnull %0, i8* nonnull %1) local_unnamed_addr #0 {
  %3 = tail call fastcc i32 @_crypto_scalarmult_ed25519_base(i8* nonnull %0, i8* nonnull %1, i32 0)
  ret i32 %3
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_scalarmult_ed25519_bytes() local_unnamed_addr #1 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_scalarmult_ed25519_scalarbytes() local_unnamed_addr #1 {
  ret i32 32
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #2

declare i32 @ge25519_is_canonical(i8* %0) local_unnamed_addr #3

declare i32 @ge25519_has_small_order(i8* %0) local_unnamed_addr #3

declare i32 @ge25519_frombytes(%struct.ge25519_p3* %0, i8* %1) local_unnamed_addr #3

declare i32 @ge25519_is_on_main_subgroup(%struct.ge25519_p3* %0) local_unnamed_addr #3

declare void @ge25519_scalarmult(%struct.ge25519_p3* %0, i8* %1, %struct.ge25519_p3* %2) local_unnamed_addr #3

declare void @ge25519_p3_tobytes(i8* %0, %struct.ge25519_p3* %1) local_unnamed_addr #3

declare i32 @sodium_is_zero(i8* %0, i32 %1) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #2

declare void @ge25519_scalarmult_base(%struct.ge25519_p3* %0, i8* %1) local_unnamed_addr #3

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %3 = tail call fastcc i32 @_crypto_scalarmult_ed25519_base(i8* nonnull %0, i8* nonnull %1, i32 0)
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for crypto_scalarmult_ed25519_base_noclamp()

; entering Souper's runOnFunction() for crypto_scalarmult_ed25519_bytes()

; ModuleID = './scalarmult_ed25519_ref10.c.bc'
source_filename = "crypto_scalarmult/ed25519/ref10/scalarmult_ed25519_ref10.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.ge25519_p3 = type { [10 x i32], [10 x i32], [10 x i32], [10 x i32] }

; Function Attrs: nounwind
define i32 @crypto_scalarmult_ed25519(i8* nonnull %0, i8* nonnull %1, i8* nonnull %2) local_unnamed_addr #0 {
  %4 = tail call fastcc i32 @_crypto_scalarmult_ed25519(i8* nonnull %0, i8* nonnull %1, i8* nonnull %2, i32 1)
  ret i32 %4
}

; Function Attrs: nounwind
define internal fastcc i32 @_crypto_scalarmult_ed25519(i8* %0, i8* %1, i8* %2, i32 %3) unnamed_addr #0 {
  %5 = alloca %struct.ge25519_p3, align 4
  %6 = alloca %struct.ge25519_p3, align 4
  %7 = bitcast %struct.ge25519_p3* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %7) #4
  %8 = bitcast %struct.ge25519_p3* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %8) #4
  %9 = tail call i32 @ge25519_is_canonical(i8* %2) #4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %145, label %11

11:                                               ; preds = %4
  %12 = tail call i32 @ge25519_has_small_order(i8* %2) #4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %145

14:                                               ; preds = %11
  %15 = call i32 @ge25519_frombytes(%struct.ge25519_p3* nonnull %6, i8* %2) #4
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %145

17:                                               ; preds = %14
  %18 = call i32 @ge25519_is_on_main_subgroup(%struct.ge25519_p3* nonnull %6) #4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %145, label %20

20:                                               ; preds = %17, %20
  %21 = phi i32 [ %25, %20 ], [ 0, %17 ]
  %22 = getelementptr i8, i8* %1, i32 %21
  %23 = load i8, i8* %22, align 1
  %24 = getelementptr i8, i8* %0, i32 %21
  store i8 %23, i8* %24, align 1
  %25 = add nuw nsw i32 %21, 1
  %26 = icmp eq i32 %25, 32
  br i1 %26, label %27, label %20

27:                                               ; preds = %20
  %28 = icmp eq i32 %3, 0
  br i1 %28, label %29, label %32

29:                                               ; preds = %27
  %30 = getelementptr i8, i8* %0, i32 31
  %31 = load i8, i8* %30, align 1
  br label %38

32:                                               ; preds = %27
  %33 = load i8, i8* %0, align 1
  %34 = and i8 %33, -8
  store i8 %34, i8* %0, align 1
  %35 = getelementptr i8, i8* %0, i32 31
  %36 = load i8, i8* %35, align 1
  %37 = or i8 %36, 64
  store i8 %37, i8* %35, align 1
  br label %38

38:                                               ; preds = %29, %32
  %39 = phi i8 [ %31, %29 ], [ %37, %32 ]
  %40 = getelementptr i8, i8* %0, i32 31
  %41 = and i8 %39, 127
  store i8 %41, i8* %40, align 1
  call void @ge25519_scalarmult(%struct.ge25519_p3* nonnull %5, i8* nonnull %0, %struct.ge25519_p3* nonnull %6) #4
  call void @ge25519_p3_tobytes(i8* nonnull %0, %struct.ge25519_p3* nonnull %5) #4
  %42 = load i8, i8* %0, align 1
  %43 = xor i8 %42, 1
  %44 = getelementptr i8, i8* %0, i32 1
  %45 = load i8, i8* %44, align 1
  %46 = or i8 %45, %43
  %47 = getelementptr i8, i8* %0, i32 2
  %48 = load i8, i8* %47, align 1
  %49 = or i8 %46, %48
  %50 = getelementptr i8, i8* %0, i32 3
  %51 = load i8, i8* %50, align 1
  %52 = or i8 %49, %51
  %53 = getelementptr i8, i8* %0, i32 4
  %54 = load i8, i8* %53, align 1
  %55 = or i8 %52, %54
  %56 = getelementptr i8, i8* %0, i32 5
  %57 = load i8, i8* %56, align 1
  %58 = or i8 %55, %57
  %59 = getelementptr i8, i8* %0, i32 6
  %60 = load i8, i8* %59, align 1
  %61 = or i8 %58, %60
  %62 = getelementptr i8, i8* %0, i32 7
  %63 = load i8, i8* %62, align 1
  %64 = or i8 %61, %63
  %65 = getelementptr i8, i8* %0, i32 8
  %66 = load i8, i8* %65, align 1
  %67 = or i8 %64, %66
  %68 = getelementptr i8, i8* %0, i32 9
  %69 = load i8, i8* %68, align 1
  %70 = or i8 %67, %69
  %71 = getelementptr i8, i8* %0, i32 10
  %72 = load i8, i8* %71, align 1
  %73 = or i8 %70, %72
  %74 = getelementptr i8, i8* %0, i32 11
  %75 = load i8, i8* %74, align 1
  %76 = or i8 %73, %75
  %77 = getelementptr i8, i8* %0, i32 12
  %78 = load i8, i8* %77, align 1
  %79 = or i8 %76, %78
  %80 = getelementptr i8, i8* %0, i32 13
  %81 = load i8, i8* %80, align 1
  %82 = or i8 %79, %81
  %83 = getelementptr i8, i8* %0, i32 14
  %84 = load i8, i8* %83, align 1
  %85 = or i8 %82, %84
  %86 = getelementptr i8, i8* %0, i32 15
  %87 = load i8, i8* %86, align 1
  %88 = or i8 %85, %87
  %89 = getelementptr i8, i8* %0, i32 16
  %90 = load i8, i8* %89, align 1
  %91 = or i8 %88, %90
  %92 = getelementptr i8, i8* %0, i32 17
  %93 = load i8, i8* %92, align 1
  %94 = or i8 %91, %93
  %95 = getelementptr i8, i8* %0, i32 18
  %96 = load i8, i8* %95, align 1
  %97 = or i8 %94, %96
  %98 = getelementptr i8, i8* %0, i32 19
  %99 = load i8, i8* %98, align 1
  %100 = or i8 %97, %99
  %101 = getelementptr i8, i8* %0, i32 20
  %102 = load i8, i8* %101, align 1
  %103 = or i8 %100, %102
  %104 = getelementptr i8, i8* %0, i32 21
  %105 = load i8, i8* %104, align 1
  %106 = or i8 %103, %105
  %107 = getelementptr i8, i8* %0, i32 22
  %108 = load i8, i8* %107, align 1
  %109 = or i8 %106, %108
  %110 = getelementptr i8, i8* %0, i32 23
  %111 = load i8, i8* %110, align 1
  %112 = or i8 %109, %111
  %113 = getelementptr i8, i8* %0, i32 24
  %114 = load i8, i8* %113, align 1
  %115 = or i8 %112, %114
  %116 = getelementptr i8, i8* %0, i32 25
  %117 = load i8, i8* %116, align 1
  %118 = or i8 %115, %117
  %119 = getelementptr i8, i8* %0, i32 26
  %120 = load i8, i8* %119, align 1
  %121 = or i8 %118, %120
  %122 = getelementptr i8, i8* %0, i32 27
  %123 = load i8, i8* %122, align 1
  %124 = or i8 %121, %123
  %125 = getelementptr i8, i8* %0, i32 28
  %126 = load i8, i8* %125, align 1
  %127 = or i8 %124, %126
  %128 = getelementptr i8, i8* %0, i32 29
  %129 = load i8, i8* %128, align 1
  %130 = or i8 %127, %129
  %131 = getelementptr i8, i8* %0, i32 30
  %132 = load i8, i8* %131, align 1
  %133 = or i8 %130, %132
  %134 = load i8, i8* %40, align 1
  %135 = and i8 %134, 127
  %136 = or i8 %133, %135
  %137 = zext i8 %136 to i32
  %138 = add nuw nsw i32 %137, 511
  %139 = and i32 %138, 256
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %141, label %145

141:                                              ; preds = %38
  %142 = call i32 @sodium_is_zero(i8* nonnull %1, i32 32) #4
  %143 = icmp ne i32 %142, 0
  %144 = sext i1 %143 to i32
  br label %145

145:                                              ; preds = %141, %38, %4, %17, %11, %14
  %146 = phi i32 [ -1, %14 ], [ -1, %11 ], [ -1, %17 ], [ -1, %4 ], [ -1, %38 ], [ %144, %141 ]
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %8) #4
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %7) #4
  ret i32 %146
}

; Function Attrs: nounwind
define i32 @crypto_scalarmult_ed25519_noclamp(i8* nonnull %0, i8* nonnull %1, i8* nonnull %2) local_unnamed_addr #0 {
  %4 = tail call fastcc i32 @_crypto_scalarmult_ed25519(i8* nonnull %0, i8* nonnull %1, i8* nonnull %2, i32 0)
  ret i32 %4
}

; Function Attrs: nounwind
define i32 @crypto_scalarmult_ed25519_base(i8* nonnull %0, i8* nonnull %1) local_unnamed_addr #0 {
  %3 = tail call fastcc i32 @_crypto_scalarmult_ed25519_base(i8* nonnull %0, i8* nonnull %1, i32 1)
  ret i32 %3
}

; Function Attrs: nounwind
define internal fastcc i32 @_crypto_scalarmult_ed25519_base(i8* %0, i8* %1, i32 %2) unnamed_addr #0 {
  %4 = alloca %struct.ge25519_p3, align 4
  %5 = bitcast %struct.ge25519_p3* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %5) #4
  br label %6

6:                                                ; preds = %6, %3
  %7 = phi i32 [ 0, %3 ], [ %11, %6 ]
  %8 = getelementptr i8, i8* %1, i32 %7
  %9 = load i8, i8* %8, align 1
  %10 = getelementptr i8, i8* %0, i32 %7
  store i8 %9, i8* %10, align 1
  %11 = add nuw nsw i32 %7, 1
  %12 = icmp eq i32 %11, 32
  br i1 %12, label %13, label %6

13:                                               ; preds = %6
  %14 = icmp eq i32 %2, 0
  br i1 %14, label %15, label %18

15:                                               ; preds = %13
  %16 = getelementptr i8, i8* %0, i32 31
  %17 = load i8, i8* %16, align 1
  br label %24

18:                                               ; preds = %13
  %19 = load i8, i8* %0, align 1
  %20 = and i8 %19, -8
  store i8 %20, i8* %0, align 1
  %21 = getelementptr i8, i8* %0, i32 31
  %22 = load i8, i8* %21, align 1
  %23 = or i8 %22, 64
  store i8 %23, i8* %21, align 1
  br label %24

24:                                               ; preds = %15, %18
  %25 = phi i8 [ %17, %15 ], [ %23, %18 ]
  %26 = getelementptr i8, i8* %0, i32 31
  %27 = and i8 %25, 127
  store i8 %27, i8* %26, align 1
  call void @ge25519_scalarmult_base(%struct.ge25519_p3* nonnull %4, i8* nonnull %0) #4
  call void @ge25519_p3_tobytes(i8* nonnull %0, %struct.ge25519_p3* nonnull %4) #4
  %28 = load i8, i8* %0, align 1
  %29 = xor i8 %28, 1
  %30 = getelementptr i8, i8* %0, i32 1
  %31 = load i8, i8* %30, align 1
  %32 = or i8 %31, %29
  %33 = getelementptr i8, i8* %0, i32 2
  %34 = load i8, i8* %33, align 1
  %35 = or i8 %32, %34
  %36 = getelementptr i8, i8* %0, i32 3
  %37 = load i8, i8* %36, align 1
  %38 = or i8 %35, %37
  %39 = getelementptr i8, i8* %0, i32 4
  %40 = load i8, i8* %39, align 1
  %41 = or i8 %38, %40
  %42 = getelementptr i8, i8* %0, i32 5
  %43 = load i8, i8* %42, align 1
  %44 = or i8 %41, %43
  %45 = getelementptr i8, i8* %0, i32 6
  %46 = load i8, i8* %45, align 1
  %47 = or i8 %44, %46
  %48 = getelementptr i8, i8* %0, i32 7
  %49 = load i8, i8* %48, align 1
  %50 = or i8 %47, %49
  %51 = getelementptr i8, i8* %0, i32 8
  %52 = load i8, i8* %51, align 1
  %53 = or i8 %50, %52
  %54 = getelementptr i8, i8* %0, i32 9
  %55 = load i8, i8* %54, align 1
  %56 = or i8 %53, %55
  %57 = getelementptr i8, i8* %0, i32 10
  %58 = load i8, i8* %57, align 1
  %59 = or i8 %56, %58
  %60 = getelementptr i8, i8* %0, i32 11
  %61 = load i8, i8* %60, align 1
  %62 = or i8 %59, %61
  %63 = getelementptr i8, i8* %0, i32 12
  %64 = load i8, i8* %63, align 1
  %65 = or i8 %62, %64
  %66 = getelementptr i8, i8* %0, i32 13
  %67 = load i8, i8* %66, align 1
  %68 = or i8 %65, %67
  %69 = getelementptr i8, i8* %0, i32 14
  %70 = load i8, i8* %69, align 1
  %71 = or i8 %68, %70
  %72 = getelementptr i8, i8* %0, i32 15
  %73 = load i8, i8* %72, align 1
  %74 = or i8 %71, %73
  %75 = getelementptr i8, i8* %0, i32 16
  %76 = load i8, i8* %75, align 1
  %77 = or i8 %74, %76
  %78 = getelementptr i8, i8* %0, i32 17
  %79 = load i8, i8* %78, align 1
  %80 = or i8 %77, %79
  %81 = getelementptr i8, i8* %0, i32 18
  %82 = load i8, i8* %81, align 1
  %83 = or i8 %80, %82
  %84 = getelementptr i8, i8* %0, i32 19
  %85 = load i8, i8* %84, align 1
  %86 = or i8 %83, %85
  %87 = getelementptr i8, i8* %0, i32 20
  %88 = load i8, i8* %87, align 1
  %89 = or i8 %86, %88
  %90 = getelementptr i8, i8* %0, i32 21
  %91 = load i8, i8* %90, align 1
  %92 = or i8 %89, %91
  %93 = getelementptr i8, i8* %0, i32 22
  %94 = load i8, i8* %93, align 1
  %95 = or i8 %92, %94
  %96 = getelementptr i8, i8* %0, i32 23
  %97 = load i8, i8* %96, align 1
  %98 = or i8 %95, %97
  %99 = getelementptr i8, i8* %0, i32 24
  %100 = load i8, i8* %99, align 1
  %101 = or i8 %98, %100
  %102 = getelementptr i8, i8* %0, i32 25
  %103 = load i8, i8* %102, align 1
  %104 = or i8 %101, %103
  %105 = getelementptr i8, i8* %0, i32 26
  %106 = load i8, i8* %105, align 1
  %107 = or i8 %104, %106
  %108 = getelementptr i8, i8* %0, i32 27
  %109 = load i8, i8* %108, align 1
  %110 = or i8 %107, %109
  %111 = getelementptr i8, i8* %0, i32 28
  %112 = load i8, i8* %111, align 1
  %113 = or i8 %110, %112
  %114 = getelementptr i8, i8* %0, i32 29
  %115 = load i8, i8* %114, align 1
  %116 = or i8 %113, %115
  %117 = getelementptr i8, i8* %0, i32 30
  %118 = load i8, i8* %117, align 1
  %119 = or i8 %116, %118
  %120 = load i8, i8* %26, align 1
  %121 = and i8 %120, 127
  %122 = or i8 %119, %121
  %123 = zext i8 %122 to i32
  %124 = add nuw nsw i32 %123, 511
  %125 = and i32 %124, 256
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %127, label %131

127:                                              ; preds = %24
  %128 = call i32 @sodium_is_zero(i8* nonnull %1, i32 32) #4
  %129 = icmp ne i32 %128, 0
  %130 = sext i1 %129 to i32
  br label %131

131:                                              ; preds = %127, %24
  %132 = phi i32 [ -1, %24 ], [ %130, %127 ]
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %5) #4
  ret i32 %132
}

; Function Attrs: nounwind
define i32 @crypto_scalarmult_ed25519_base_noclamp(i8* nonnull %0, i8* nonnull %1) local_unnamed_addr #0 {
  %3 = tail call fastcc i32 @_crypto_scalarmult_ed25519_base(i8* nonnull %0, i8* nonnull %1, i32 0)
  ret i32 %3
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_scalarmult_ed25519_bytes() local_unnamed_addr #1 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_scalarmult_ed25519_scalarbytes() local_unnamed_addr #1 {
  ret i32 32
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #2

declare i32 @ge25519_is_canonical(i8* %0) local_unnamed_addr #3

declare i32 @ge25519_has_small_order(i8* %0) local_unnamed_addr #3

declare i32 @ge25519_frombytes(%struct.ge25519_p3* %0, i8* %1) local_unnamed_addr #3

declare i32 @ge25519_is_on_main_subgroup(%struct.ge25519_p3* %0) local_unnamed_addr #3

declare void @ge25519_scalarmult(%struct.ge25519_p3* %0, i8* %1, %struct.ge25519_p3* %2) local_unnamed_addr #3

declare void @ge25519_p3_tobytes(i8* %0, %struct.ge25519_p3* %1) local_unnamed_addr #3

declare i32 @sodium_is_zero(i8* %0, i32 %1) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #2

declare void @ge25519_scalarmult_base(%struct.ge25519_p3* %0, i8* %1) local_unnamed_addr #3

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for crypto_scalarmult_ed25519_bytes()

; entering Souper's runOnFunction() for crypto_scalarmult_ed25519_scalarbytes()

; ModuleID = './scalarmult_ed25519_ref10.c.bc'
source_filename = "crypto_scalarmult/ed25519/ref10/scalarmult_ed25519_ref10.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.ge25519_p3 = type { [10 x i32], [10 x i32], [10 x i32], [10 x i32] }

; Function Attrs: nounwind
define i32 @crypto_scalarmult_ed25519(i8* nonnull %0, i8* nonnull %1, i8* nonnull %2) local_unnamed_addr #0 {
  %4 = tail call fastcc i32 @_crypto_scalarmult_ed25519(i8* nonnull %0, i8* nonnull %1, i8* nonnull %2, i32 1)
  ret i32 %4
}

; Function Attrs: nounwind
define internal fastcc i32 @_crypto_scalarmult_ed25519(i8* %0, i8* %1, i8* %2, i32 %3) unnamed_addr #0 {
  %5 = alloca %struct.ge25519_p3, align 4
  %6 = alloca %struct.ge25519_p3, align 4
  %7 = bitcast %struct.ge25519_p3* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %7) #4
  %8 = bitcast %struct.ge25519_p3* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %8) #4
  %9 = tail call i32 @ge25519_is_canonical(i8* %2) #4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %145, label %11

11:                                               ; preds = %4
  %12 = tail call i32 @ge25519_has_small_order(i8* %2) #4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %145

14:                                               ; preds = %11
  %15 = call i32 @ge25519_frombytes(%struct.ge25519_p3* nonnull %6, i8* %2) #4
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %145

17:                                               ; preds = %14
  %18 = call i32 @ge25519_is_on_main_subgroup(%struct.ge25519_p3* nonnull %6) #4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %145, label %20

20:                                               ; preds = %17, %20
  %21 = phi i32 [ %25, %20 ], [ 0, %17 ]
  %22 = getelementptr i8, i8* %1, i32 %21
  %23 = load i8, i8* %22, align 1
  %24 = getelementptr i8, i8* %0, i32 %21
  store i8 %23, i8* %24, align 1
  %25 = add nuw nsw i32 %21, 1
  %26 = icmp eq i32 %25, 32
  br i1 %26, label %27, label %20

27:                                               ; preds = %20
  %28 = icmp eq i32 %3, 0
  br i1 %28, label %29, label %32

29:                                               ; preds = %27
  %30 = getelementptr i8, i8* %0, i32 31
  %31 = load i8, i8* %30, align 1
  br label %38

32:                                               ; preds = %27
  %33 = load i8, i8* %0, align 1
  %34 = and i8 %33, -8
  store i8 %34, i8* %0, align 1
  %35 = getelementptr i8, i8* %0, i32 31
  %36 = load i8, i8* %35, align 1
  %37 = or i8 %36, 64
  store i8 %37, i8* %35, align 1
  br label %38

38:                                               ; preds = %29, %32
  %39 = phi i8 [ %31, %29 ], [ %37, %32 ]
  %40 = getelementptr i8, i8* %0, i32 31
  %41 = and i8 %39, 127
  store i8 %41, i8* %40, align 1
  call void @ge25519_scalarmult(%struct.ge25519_p3* nonnull %5, i8* nonnull %0, %struct.ge25519_p3* nonnull %6) #4
  call void @ge25519_p3_tobytes(i8* nonnull %0, %struct.ge25519_p3* nonnull %5) #4
  %42 = load i8, i8* %0, align 1
  %43 = xor i8 %42, 1
  %44 = getelementptr i8, i8* %0, i32 1
  %45 = load i8, i8* %44, align 1
  %46 = or i8 %45, %43
  %47 = getelementptr i8, i8* %0, i32 2
  %48 = load i8, i8* %47, align 1
  %49 = or i8 %46, %48
  %50 = getelementptr i8, i8* %0, i32 3
  %51 = load i8, i8* %50, align 1
  %52 = or i8 %49, %51
  %53 = getelementptr i8, i8* %0, i32 4
  %54 = load i8, i8* %53, align 1
  %55 = or i8 %52, %54
  %56 = getelementptr i8, i8* %0, i32 5
  %57 = load i8, i8* %56, align 1
  %58 = or i8 %55, %57
  %59 = getelementptr i8, i8* %0, i32 6
  %60 = load i8, i8* %59, align 1
  %61 = or i8 %58, %60
  %62 = getelementptr i8, i8* %0, i32 7
  %63 = load i8, i8* %62, align 1
  %64 = or i8 %61, %63
  %65 = getelementptr i8, i8* %0, i32 8
  %66 = load i8, i8* %65, align 1
  %67 = or i8 %64, %66
  %68 = getelementptr i8, i8* %0, i32 9
  %69 = load i8, i8* %68, align 1
  %70 = or i8 %67, %69
  %71 = getelementptr i8, i8* %0, i32 10
  %72 = load i8, i8* %71, align 1
  %73 = or i8 %70, %72
  %74 = getelementptr i8, i8* %0, i32 11
  %75 = load i8, i8* %74, align 1
  %76 = or i8 %73, %75
  %77 = getelementptr i8, i8* %0, i32 12
  %78 = load i8, i8* %77, align 1
  %79 = or i8 %76, %78
  %80 = getelementptr i8, i8* %0, i32 13
  %81 = load i8, i8* %80, align 1
  %82 = or i8 %79, %81
  %83 = getelementptr i8, i8* %0, i32 14
  %84 = load i8, i8* %83, align 1
  %85 = or i8 %82, %84
  %86 = getelementptr i8, i8* %0, i32 15
  %87 = load i8, i8* %86, align 1
  %88 = or i8 %85, %87
  %89 = getelementptr i8, i8* %0, i32 16
  %90 = load i8, i8* %89, align 1
  %91 = or i8 %88, %90
  %92 = getelementptr i8, i8* %0, i32 17
  %93 = load i8, i8* %92, align 1
  %94 = or i8 %91, %93
  %95 = getelementptr i8, i8* %0, i32 18
  %96 = load i8, i8* %95, align 1
  %97 = or i8 %94, %96
  %98 = getelementptr i8, i8* %0, i32 19
  %99 = load i8, i8* %98, align 1
  %100 = or i8 %97, %99
  %101 = getelementptr i8, i8* %0, i32 20
  %102 = load i8, i8* %101, align 1
  %103 = or i8 %100, %102
  %104 = getelementptr i8, i8* %0, i32 21
  %105 = load i8, i8* %104, align 1
  %106 = or i8 %103, %105
  %107 = getelementptr i8, i8* %0, i32 22
  %108 = load i8, i8* %107, align 1
  %109 = or i8 %106, %108
  %110 = getelementptr i8, i8* %0, i32 23
  %111 = load i8, i8* %110, align 1
  %112 = or i8 %109, %111
  %113 = getelementptr i8, i8* %0, i32 24
  %114 = load i8, i8* %113, align 1
  %115 = or i8 %112, %114
  %116 = getelementptr i8, i8* %0, i32 25
  %117 = load i8, i8* %116, align 1
  %118 = or i8 %115, %117
  %119 = getelementptr i8, i8* %0, i32 26
  %120 = load i8, i8* %119, align 1
  %121 = or i8 %118, %120
  %122 = getelementptr i8, i8* %0, i32 27
  %123 = load i8, i8* %122, align 1
  %124 = or i8 %121, %123
  %125 = getelementptr i8, i8* %0, i32 28
  %126 = load i8, i8* %125, align 1
  %127 = or i8 %124, %126
  %128 = getelementptr i8, i8* %0, i32 29
  %129 = load i8, i8* %128, align 1
  %130 = or i8 %127, %129
  %131 = getelementptr i8, i8* %0, i32 30
  %132 = load i8, i8* %131, align 1
  %133 = or i8 %130, %132
  %134 = load i8, i8* %40, align 1
  %135 = and i8 %134, 127
  %136 = or i8 %133, %135
  %137 = zext i8 %136 to i32
  %138 = add nuw nsw i32 %137, 511
  %139 = and i32 %138, 256
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %141, label %145

141:                                              ; preds = %38
  %142 = call i32 @sodium_is_zero(i8* nonnull %1, i32 32) #4
  %143 = icmp ne i32 %142, 0
  %144 = sext i1 %143 to i32
  br label %145

145:                                              ; preds = %141, %38, %4, %17, %11, %14
  %146 = phi i32 [ -1, %14 ], [ -1, %11 ], [ -1, %17 ], [ -1, %4 ], [ -1, %38 ], [ %144, %141 ]
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %8) #4
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %7) #4
  ret i32 %146
}

; Function Attrs: nounwind
define i32 @crypto_scalarmult_ed25519_noclamp(i8* nonnull %0, i8* nonnull %1, i8* nonnull %2) local_unnamed_addr #0 {
  %4 = tail call fastcc i32 @_crypto_scalarmult_ed25519(i8* nonnull %0, i8* nonnull %1, i8* nonnull %2, i32 0)
  ret i32 %4
}

; Function Attrs: nounwind
define i32 @crypto_scalarmult_ed25519_base(i8* nonnull %0, i8* nonnull %1) local_unnamed_addr #0 {
  %3 = tail call fastcc i32 @_crypto_scalarmult_ed25519_base(i8* nonnull %0, i8* nonnull %1, i32 1)
  ret i32 %3
}

; Function Attrs: nounwind
define internal fastcc i32 @_crypto_scalarmult_ed25519_base(i8* %0, i8* %1, i32 %2) unnamed_addr #0 {
  %4 = alloca %struct.ge25519_p3, align 4
  %5 = bitcast %struct.ge25519_p3* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %5) #4
  br label %6

6:                                                ; preds = %6, %3
  %7 = phi i32 [ 0, %3 ], [ %11, %6 ]
  %8 = getelementptr i8, i8* %1, i32 %7
  %9 = load i8, i8* %8, align 1
  %10 = getelementptr i8, i8* %0, i32 %7
  store i8 %9, i8* %10, align 1
  %11 = add nuw nsw i32 %7, 1
  %12 = icmp eq i32 %11, 32
  br i1 %12, label %13, label %6

13:                                               ; preds = %6
  %14 = icmp eq i32 %2, 0
  br i1 %14, label %15, label %18

15:                                               ; preds = %13
  %16 = getelementptr i8, i8* %0, i32 31
  %17 = load i8, i8* %16, align 1
  br label %24

18:                                               ; preds = %13
  %19 = load i8, i8* %0, align 1
  %20 = and i8 %19, -8
  store i8 %20, i8* %0, align 1
  %21 = getelementptr i8, i8* %0, i32 31
  %22 = load i8, i8* %21, align 1
  %23 = or i8 %22, 64
  store i8 %23, i8* %21, align 1
  br label %24

24:                                               ; preds = %15, %18
  %25 = phi i8 [ %17, %15 ], [ %23, %18 ]
  %26 = getelementptr i8, i8* %0, i32 31
  %27 = and i8 %25, 127
  store i8 %27, i8* %26, align 1
  call void @ge25519_scalarmult_base(%struct.ge25519_p3* nonnull %4, i8* nonnull %0) #4
  call void @ge25519_p3_tobytes(i8* nonnull %0, %struct.ge25519_p3* nonnull %4) #4
  %28 = load i8, i8* %0, align 1
  %29 = xor i8 %28, 1
  %30 = getelementptr i8, i8* %0, i32 1
  %31 = load i8, i8* %30, align 1
  %32 = or i8 %31, %29
  %33 = getelementptr i8, i8* %0, i32 2
  %34 = load i8, i8* %33, align 1
  %35 = or i8 %32, %34
  %36 = getelementptr i8, i8* %0, i32 3
  %37 = load i8, i8* %36, align 1
  %38 = or i8 %35, %37
  %39 = getelementptr i8, i8* %0, i32 4
  %40 = load i8, i8* %39, align 1
  %41 = or i8 %38, %40
  %42 = getelementptr i8, i8* %0, i32 5
  %43 = load i8, i8* %42, align 1
  %44 = or i8 %41, %43
  %45 = getelementptr i8, i8* %0, i32 6
  %46 = load i8, i8* %45, align 1
  %47 = or i8 %44, %46
  %48 = getelementptr i8, i8* %0, i32 7
  %49 = load i8, i8* %48, align 1
  %50 = or i8 %47, %49
  %51 = getelementptr i8, i8* %0, i32 8
  %52 = load i8, i8* %51, align 1
  %53 = or i8 %50, %52
  %54 = getelementptr i8, i8* %0, i32 9
  %55 = load i8, i8* %54, align 1
  %56 = or i8 %53, %55
  %57 = getelementptr i8, i8* %0, i32 10
  %58 = load i8, i8* %57, align 1
  %59 = or i8 %56, %58
  %60 = getelementptr i8, i8* %0, i32 11
  %61 = load i8, i8* %60, align 1
  %62 = or i8 %59, %61
  %63 = getelementptr i8, i8* %0, i32 12
  %64 = load i8, i8* %63, align 1
  %65 = or i8 %62, %64
  %66 = getelementptr i8, i8* %0, i32 13
  %67 = load i8, i8* %66, align 1
  %68 = or i8 %65, %67
  %69 = getelementptr i8, i8* %0, i32 14
  %70 = load i8, i8* %69, align 1
  %71 = or i8 %68, %70
  %72 = getelementptr i8, i8* %0, i32 15
  %73 = load i8, i8* %72, align 1
  %74 = or i8 %71, %73
  %75 = getelementptr i8, i8* %0, i32 16
  %76 = load i8, i8* %75, align 1
  %77 = or i8 %74, %76
  %78 = getelementptr i8, i8* %0, i32 17
  %79 = load i8, i8* %78, align 1
  %80 = or i8 %77, %79
  %81 = getelementptr i8, i8* %0, i32 18
  %82 = load i8, i8* %81, align 1
  %83 = or i8 %80, %82
  %84 = getelementptr i8, i8* %0, i32 19
  %85 = load i8, i8* %84, align 1
  %86 = or i8 %83, %85
  %87 = getelementptr i8, i8* %0, i32 20
  %88 = load i8, i8* %87, align 1
  %89 = or i8 %86, %88
  %90 = getelementptr i8, i8* %0, i32 21
  %91 = load i8, i8* %90, align 1
  %92 = or i8 %89, %91
  %93 = getelementptr i8, i8* %0, i32 22
  %94 = load i8, i8* %93, align 1
  %95 = or i8 %92, %94
  %96 = getelementptr i8, i8* %0, i32 23
  %97 = load i8, i8* %96, align 1
  %98 = or i8 %95, %97
  %99 = getelementptr i8, i8* %0, i32 24
  %100 = load i8, i8* %99, align 1
  %101 = or i8 %98, %100
  %102 = getelementptr i8, i8* %0, i32 25
  %103 = load i8, i8* %102, align 1
  %104 = or i8 %101, %103
  %105 = getelementptr i8, i8* %0, i32 26
  %106 = load i8, i8* %105, align 1
  %107 = or i8 %104, %106
  %108 = getelementptr i8, i8* %0, i32 27
  %109 = load i8, i8* %108, align 1
  %110 = or i8 %107, %109
  %111 = getelementptr i8, i8* %0, i32 28
  %112 = load i8, i8* %111, align 1
  %113 = or i8 %110, %112
  %114 = getelementptr i8, i8* %0, i32 29
  %115 = load i8, i8* %114, align 1
  %116 = or i8 %113, %115
  %117 = getelementptr i8, i8* %0, i32 30
  %118 = load i8, i8* %117, align 1
  %119 = or i8 %116, %118
  %120 = load i8, i8* %26, align 1
  %121 = and i8 %120, 127
  %122 = or i8 %119, %121
  %123 = zext i8 %122 to i32
  %124 = add nuw nsw i32 %123, 511
  %125 = and i32 %124, 256
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %127, label %131

127:                                              ; preds = %24
  %128 = call i32 @sodium_is_zero(i8* nonnull %1, i32 32) #4
  %129 = icmp ne i32 %128, 0
  %130 = sext i1 %129 to i32
  br label %131

131:                                              ; preds = %127, %24
  %132 = phi i32 [ -1, %24 ], [ %130, %127 ]
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %5) #4
  ret i32 %132
}

; Function Attrs: nounwind
define i32 @crypto_scalarmult_ed25519_base_noclamp(i8* nonnull %0, i8* nonnull %1) local_unnamed_addr #0 {
  %3 = tail call fastcc i32 @_crypto_scalarmult_ed25519_base(i8* nonnull %0, i8* nonnull %1, i32 0)
  ret i32 %3
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_scalarmult_ed25519_bytes() local_unnamed_addr #1 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_scalarmult_ed25519_scalarbytes() local_unnamed_addr #1 {
  ret i32 32
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #2

declare i32 @ge25519_is_canonical(i8* %0) local_unnamed_addr #3

declare i32 @ge25519_has_small_order(i8* %0) local_unnamed_addr #3

declare i32 @ge25519_frombytes(%struct.ge25519_p3* %0, i8* %1) local_unnamed_addr #3

declare i32 @ge25519_is_on_main_subgroup(%struct.ge25519_p3* %0) local_unnamed_addr #3

declare void @ge25519_scalarmult(%struct.ge25519_p3* %0, i8* %1, %struct.ge25519_p3* %2) local_unnamed_addr #3

declare void @ge25519_p3_tobytes(i8* %0, %struct.ge25519_p3* %1) local_unnamed_addr #3

declare i32 @sodium_is_zero(i8* %0, i32 %1) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #2

declare void @ge25519_scalarmult_base(%struct.ge25519_p3* %0, i8* %1) local_unnamed_addr #3

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for crypto_scalarmult_ed25519_scalarbytes()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
