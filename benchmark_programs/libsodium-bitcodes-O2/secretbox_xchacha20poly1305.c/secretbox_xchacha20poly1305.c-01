; entering Souper's runOnFunction() for crypto_secretbox_xchacha20poly1305_detached()

; ModuleID = './secretbox_xchacha20poly1305.c.bc'
source_filename = "crypto_secretbox/xchacha20poly1305/secretbox_xchacha20poly1305.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.crypto_onetimeauth_poly1305_state = type { [256 x i8] }

; Function Attrs: nounwind
define i32 @crypto_secretbox_xchacha20poly1305_detached(i8* nonnull %0, i8* nonnull %1, i8* %2, i64 %3, i8* nonnull %4, i8* nonnull %5) local_unnamed_addr #0 {
  %7 = alloca %struct.crypto_onetimeauth_poly1305_state, align 16
  %8 = alloca [64 x i8], align 16
  %9 = alloca [32 x i8], align 16
  %10 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %7, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %10) #6
  %11 = getelementptr inbounds [64 x i8], [64 x i8]* %8, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %11) #6
  %12 = getelementptr inbounds [32 x i8], [32 x i8]* %9, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %12) #6
  %13 = call i32 @crypto_core_hchacha20(i8* nonnull %12, i8* nonnull %4, i8* nonnull %5, i8* null) #6
  %14 = ptrtoint i8* %0 to i32
  %15 = ptrtoint i8* %2 to i32
  %16 = icmp ugt i8* %0, %2
  br i1 %16, label %17, label %21

17:                                               ; preds = %6
  %18 = sub i32 %14, %15
  %19 = zext i32 %18 to i64
  %20 = icmp ult i64 %19, %3
  br i1 %20, label %27, label %21

21:                                               ; preds = %17, %6
  %22 = icmp ugt i8* %2, %0
  br i1 %22, label %23, label %29

23:                                               ; preds = %21
  %24 = sub i32 %15, %14
  %25 = zext i32 %24 to i64
  %26 = icmp ult i64 %25, %3
  br i1 %26, label %27, label %29

27:                                               ; preds = %23, %17
  %28 = trunc i64 %3 to i32
  call void @llvm.memmove.p0i8.p0i8.i32(i8* nonnull align 1 %0, i8* align 1 %2, i32 %28, i1 false)
  br label %29

29:                                               ; preds = %27, %23, %21
  %30 = phi i8* [ %0, %27 ], [ %2, %23 ], [ %2, %21 ]
  call void @llvm.memset.p0i8.i32(i8* nonnull align 16 dereferenceable(32) %11, i8 0, i32 32, i1 false)
  %31 = icmp ugt i64 %3, 32
  %32 = select i1 %31, i64 32, i64 %3
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %37, label %34

34:                                               ; preds = %29
  %35 = getelementptr inbounds [64 x i8], [64 x i8]* %8, i32 0, i32 32
  %36 = trunc i64 %32 to i32
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 16 %35, i8* align 1 %30, i32 %36, i1 false)
  br label %37

37:                                               ; preds = %34, %29
  %38 = add nuw nsw i64 %32, 32
  %39 = getelementptr i8, i8* %4, i32 16
  %40 = call i32 @crypto_stream_chacha20_xor(i8* nonnull %11, i8* nonnull %11, i64 %38, i8* %39, i8* nonnull %12) #6
  %41 = call i32 @crypto_onetimeauth_poly1305_init(%struct.crypto_onetimeauth_poly1305_state* nonnull %7, i8* nonnull %11) #6
  br i1 %33, label %45, label %42

42:                                               ; preds = %37
  %43 = getelementptr inbounds [64 x i8], [64 x i8]* %8, i32 0, i32 32
  %44 = trunc i64 %32 to i32
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 1 %0, i8* nonnull align 16 %43, i32 %44, i1 false)
  br label %45

45:                                               ; preds = %42, %37
  call void @sodium_memzero(i8* nonnull %11, i32 64) #6
  br i1 %31, label %46, label %52

46:                                               ; preds = %45
  %47 = trunc i64 %32 to i32
  %48 = getelementptr i8, i8* %0, i32 %47
  %49 = getelementptr i8, i8* %30, i32 %47
  %50 = sub i64 %3, %32
  %51 = call i32 @crypto_stream_chacha20_xor_ic(i8* %48, i8* %49, i64 %50, i8* %39, i64 1, i8* nonnull %12) #6
  br label %52

52:                                               ; preds = %46, %45
  call void @sodium_memzero(i8* nonnull %12, i32 32) #6
  %53 = call i32 @crypto_onetimeauth_poly1305_update(%struct.crypto_onetimeauth_poly1305_state* nonnull %7, i8* nonnull %0, i64 %3) #6
  %54 = call i32 @crypto_onetimeauth_poly1305_final(%struct.crypto_onetimeauth_poly1305_state* nonnull %7, i8* nonnull %1) #6
  call void @sodium_memzero(i8* nonnull %10, i32 256) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %12) #6
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %11) #6
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %10) #6
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #1

declare i32 @crypto_core_hchacha20(i8* %0, i8* %1, i8* %2, i8* %3) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i32(i8* nocapture %0, i8* nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #3

declare i32 @crypto_stream_chacha20_xor(i8* %0, i8* %1, i64 %2, i8* %3, i8* %4) local_unnamed_addr #2

declare i32 @crypto_onetimeauth_poly1305_init(%struct.crypto_onetimeauth_poly1305_state* %0, i8* %1) local_unnamed_addr #2

declare void @sodium_memzero(i8* %0, i32 %1) local_unnamed_addr #2

declare i32 @crypto_stream_chacha20_xor_ic(i8* %0, i8* %1, i64 %2, i8* %3, i64 %4, i8* %5) local_unnamed_addr #2

declare i32 @crypto_onetimeauth_poly1305_update(%struct.crypto_onetimeauth_poly1305_state* %0, i8* %1, i64 %2) local_unnamed_addr #2

declare i32 @crypto_onetimeauth_poly1305_final(%struct.crypto_onetimeauth_poly1305_state* %0, i8* %1) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #1

; Function Attrs: nounwind
define i32 @crypto_secretbox_xchacha20poly1305_easy(i8* nonnull %0, i8* %1, i64 %2, i8* nonnull %3, i8* nonnull %4) local_unnamed_addr #0 {
  %6 = icmp ugt i64 %2, 4294967279
  br i1 %6, label %7, label %8

7:                                                ; preds = %5
  tail call void @sodium_misuse() #7
  unreachable

8:                                                ; preds = %5
  %9 = getelementptr i8, i8* %0, i32 16
  %10 = tail call i32 @crypto_secretbox_xchacha20poly1305_detached(i8* %9, i8* %0, i8* %1, i64 %2, i8* %3, i8* %4)
  ret i32 0
}

; Function Attrs: noreturn
declare void @sodium_misuse() local_unnamed_addr #4

; Function Attrs: nounwind
define i32 @crypto_secretbox_xchacha20poly1305_open_detached(i8* %0, i8* nonnull %1, i8* nonnull %2, i64 %3, i8* nonnull %4, i8* nonnull %5) local_unnamed_addr #0 {
  %7 = alloca [64 x i8], align 16
  %8 = alloca [32 x i8], align 16
  %9 = getelementptr inbounds [64 x i8], [64 x i8]* %7, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %9) #6
  %10 = getelementptr inbounds [32 x i8], [32 x i8]* %8, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %10) #6
  %11 = call i32 @crypto_core_hchacha20(i8* nonnull %10, i8* nonnull %4, i8* nonnull %5, i8* null) #6
  %12 = getelementptr i8, i8* %4, i32 16
  %13 = call i32 @crypto_stream_chacha20(i8* nonnull %9, i64 32, i8* %12, i8* nonnull %10) #6
  %14 = call i32 @crypto_onetimeauth_poly1305_verify(i8* nonnull %2, i8* nonnull %1, i64 %3, i8* nonnull %9) #6
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %56

16:                                               ; preds = %6
  %17 = icmp eq i8* %0, null
  br i1 %17, label %58, label %18

18:                                               ; preds = %16
  %19 = ptrtoint i8* %1 to i32
  %20 = ptrtoint i8* %0 to i32
  %21 = icmp ugt i8* %1, %0
  br i1 %21, label %22, label %26

22:                                               ; preds = %18
  %23 = sub i32 %19, %20
  %24 = zext i32 %23 to i64
  %25 = icmp ult i64 %24, %3
  br i1 %25, label %32, label %26

26:                                               ; preds = %22, %18
  %27 = icmp ugt i8* %0, %1
  br i1 %27, label %28, label %34

28:                                               ; preds = %26
  %29 = sub i32 %20, %19
  %30 = zext i32 %29 to i64
  %31 = icmp ult i64 %30, %3
  br i1 %31, label %32, label %34

32:                                               ; preds = %28, %22
  %33 = trunc i64 %3 to i32
  call void @llvm.memmove.p0i8.p0i8.i32(i8* nonnull align 1 %0, i8* nonnull align 1 %1, i32 %33, i1 false)
  br label %34

34:                                               ; preds = %32, %28, %26
  %35 = phi i8* [ %0, %32 ], [ %1, %28 ], [ %1, %26 ]
  %36 = icmp ugt i64 %3, 32
  %37 = select i1 %36, i64 32, i64 %3
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %39, label %42

39:                                               ; preds = %34
  %40 = add nuw nsw i64 %37, 32
  %41 = call i32 @crypto_stream_chacha20_xor(i8* nonnull %9, i8* nonnull %9, i64 %40, i8* %12, i8* nonnull %10) #6
  br label %49

42:                                               ; preds = %34
  %43 = getelementptr inbounds [64 x i8], [64 x i8]* %7, i32 0, i32 32
  %44 = trunc i64 %37 to i32
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 16 %43, i8* nonnull align 1 %35, i32 %44, i1 false)
  %45 = add nuw nsw i64 %37, 32
  %46 = call i32 @crypto_stream_chacha20_xor(i8* nonnull %9, i8* nonnull %9, i64 %45, i8* %12, i8* nonnull %10) #6
  %47 = getelementptr inbounds [64 x i8], [64 x i8]* %7, i32 0, i32 32
  %48 = trunc i64 %37 to i32
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 1 %0, i8* nonnull align 16 %47, i32 %48, i1 false)
  br label %49

49:                                               ; preds = %39, %42
  br i1 %36, label %50, label %56

50:                                               ; preds = %49
  %51 = trunc i64 %37 to i32
  %52 = getelementptr i8, i8* %0, i32 %51
  %53 = getelementptr i8, i8* %35, i32 %51
  %54 = sub i64 %3, %37
  %55 = call i32 @crypto_stream_chacha20_xor_ic(i8* %52, i8* %53, i64 %54, i8* %12, i64 1, i8* nonnull %10) #6
  br label %56

56:                                               ; preds = %49, %50, %6
  %57 = phi i32 [ -1, %6 ], [ 0, %50 ], [ 0, %49 ]
  call void @sodium_memzero(i8* nonnull %10, i32 32) #6
  br label %58

58:                                               ; preds = %56, %16
  %59 = phi i32 [ 0, %16 ], [ %57, %56 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %10) #6
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %9) #6
  ret i32 %59
}

declare i32 @crypto_stream_chacha20(i8* %0, i64 %1, i8* %2, i8* %3) local_unnamed_addr #2

declare i32 @crypto_onetimeauth_poly1305_verify(i8* %0, i8* %1, i64 %2, i8* %3) local_unnamed_addr #2

; Function Attrs: nounwind
define i32 @crypto_secretbox_xchacha20poly1305_open_easy(i8* %0, i8* nonnull %1, i64 %2, i8* nonnull %3, i8* nonnull %4) local_unnamed_addr #0 {
  %6 = icmp ult i64 %2, 16
  br i1 %6, label %11, label %7

7:                                                ; preds = %5
  %8 = getelementptr i8, i8* %1, i32 16
  %9 = add i64 %2, -16
  %10 = tail call i32 @crypto_secretbox_xchacha20poly1305_open_detached(i8* %0, i8* %8, i8* %1, i64 %9, i8* %3, i8* %4)
  br label %11

11:                                               ; preds = %5, %7
  %12 = phi i32 [ %10, %7 ], [ -1, %5 ]
  ret i32 %12
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xchacha20poly1305_keybytes() local_unnamed_addr #5 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xchacha20poly1305_noncebytes() local_unnamed_addr #5 {
  ret i32 24
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xchacha20poly1305_macbytes() local_unnamed_addr #5 {
  ret i32 16
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xchacha20poly1305_messagebytes_max() local_unnamed_addr #5 {
  ret i32 -17
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn writeonly }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %14 = ptrtoint i8* %0 to i32
; Looking for a replacement for:
%0:i32 = var (nonZero)
infer %0

; *****
; For LLVM instruction:
;  %15 = ptrtoint i8* %2 to i32
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = icmp ugt i8* %0, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (nonZero)
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %18 = sub i32 %14, %15
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (nonZero)
%2:i1 = ult %0, %1
pc %2 1:i1
%3:i32 = sub %1, %0
infer %3

; *****
; For LLVM instruction:
;  %19 = zext i32 %18 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (nonZero)
%2:i1 = ult %0, %1
pc %2 1:i1
%3:i32 = sub %1, %0
%4:i64 = zext %3
infer %4

; *****
; For LLVM instruction:
;  %20 = icmp ult i64 %19, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (nonZero)
%2:i1 = ult %0, %1
pc %2 1:i1
%3:i32 = sub %1, %0
%4:i64 = zext %3
%5:i64 = var
%6:i1 = ult %4, %5
infer %6

; *****
; For LLVM instruction:
;  %22 = icmp ugt i8* %2, %0
; Looking for a replacement for:
%0:i32 = var (nonZero)
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %24 = sub i32 %15, %14
; Looking for a replacement for:
%0:i32 = var (nonZero)
%1:i32 = var
%2:i1 = ult %0, %1
pc %2 1:i1
%3:i32 = sub %1, %0
infer %3

; *****
; For LLVM instruction:
;  %25 = zext i32 %24 to i64
; Looking for a replacement for:
%0:i32 = var (nonZero)
%1:i32 = var
%2:i1 = ult %0, %1
pc %2 1:i1
%3:i32 = sub %1, %0
%4:i64 = zext %3
infer %4

; *****
; For LLVM instruction:
;  %26 = icmp ult i64 %25, %3
; Looking for a replacement for:
%0:i32 = var (nonZero)
%1:i32 = var
%2:i1 = ult %0, %1
pc %2 1:i1
%3:i32 = sub %1, %0
%4:i64 = zext %3
%5:i64 = var
%6:i1 = ult %4, %5
infer %6

; *****
; For LLVM instruction:
;  %28 = trunc i64 %3 to i32
; Looking for a replacement for:
%0:i64 = var
%1:i32 = trunc %0
infer %1

; *****
; For LLVM instruction:
;  %31 = icmp ugt i64 %3, 32
; Looking for a replacement for:
%0:i64 = var
%1:i1 = ult 32:i64, %0
infer %1

; *****
; For LLVM instruction:
;  %32 = select i1 %31, i64 32, i64 %3
; Looking for a replacement for:
%0:i64 = var
%1:i1 = ult 32:i64, %0 (hasExternalUses)
%2:i64 = select %1, 32:i64, %0
infer %2

; *****
; For LLVM instruction:
;  %33 = icmp eq i64 %32, 0
; Looking for a replacement for:
%0:i64 = var
%1:i1 = ult 32:i64, %0 (hasExternalUses)
%2:i64 = select %1, 32:i64, %0 (hasExternalUses)
%3:i1 = eq 0:i64, %2
infer %3

; *****
; For LLVM instruction:
;  %36 = trunc i64 %32 to i32
; Looking for a replacement for:
%0:i64 = var
%1:i1 = ult 32:i64, %0 (hasExternalUses)
%2:i64 = select %1, 32:i64, %0 (hasExternalUses)
%3:i1 = eq 0:i64, %2
pc %3 0:i1
%4:i32 = trunc %2
infer %4

; *****
; For LLVM instruction:
;  %38 = add nuw nsw i64 %32, 32
; Looking for a replacement for:
%0:i64 = var
%1:i1 = ult 32:i64, %0 (hasExternalUses)
%2:i64 = select %1, 32:i64, %0 (hasExternalUses)
%3:i64 = addnw 32:i64, %2
infer %3

; *****
; For LLVM instruction:
;  %44 = trunc i64 %32 to i32
; Looking for a replacement for:
%0:i64 = var
%1:i1 = ult 32:i64, %0 (hasExternalUses)
%2:i64 = select %1, 32:i64, %0 (hasExternalUses)
%3:i1 = eq 0:i64, %2
pc %3 0:i1
%4:i32 = trunc %2
infer %4

; *****
; For LLVM instruction:
;  %47 = trunc i64 %32 to i32
; Looking for a replacement for:
%0:i64 = var
%1:i1 = ult 32:i64, %0
pc %1 1:i1
%2:i64 = select %1, 32:i64, %0 (hasExternalUses)
%3:i32 = trunc %2
infer %3

; *****
; For LLVM instruction:
;  %50 = sub i64 %3, %32
; Looking for a replacement for:
%0:i64 = var
%1:i1 = ult 32:i64, %0
pc %1 1:i1
%2:i64 = select %1, 32:i64, %0 (hasExternalUses)
%3:i64 = sub %0, %2
infer %3
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var (nonZero)
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 134742016
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var (nonZero)
%2:i1 = ult %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var (nonZero)
%2:i1 = ult %0, %1
pc %2 1:i1
%3:i32 = sub %1, %0
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483647
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var (nonZero)

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var (nonZero)
%2:i1 = ult %0, %1
pc %2 1:i1
%3:i32 = sub %1, %0
%4:i64 = zext %3
infer %4


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483649
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var (nonZero)
%2:i1 = ult %0, %1
pc %2 1:i1
%3:i32 = sub %1, %0
%4:i64 = zext %3
%5:i64 = var
%6:i1 = ult %4, %5
infer %6


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var (nonZero)
%1:i32 = var
%2:i1 = ult %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var (nonZero)
%1:i32 = var
%2:i1 = ult %0, %1
pc %2 1:i1
%3:i32 = sub %1, %0
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741825
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var (nonZero)

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var (nonZero)
%1:i32 = var
%2:i1 = ult %0, %1
pc %2 1:i1
%3:i32 = sub %1, %0
%4:i64 = zext %3
infer %4


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741825
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var (nonZero)
%1:i32 = var
%2:i1 = ult %0, %1
pc %2 1:i1
%3:i32 = sub %1, %0
%4:i64 = zext %3
%5:i64 = var
%6:i1 = ult %4, %5
infer %6


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i32 = trunc %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i1 = ult 32:i64, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i1 = ult 32:i64, %0 (hasExternalUses)
%2:i64 = select %1, 32:i64, %0
infer %2


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 32
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i1 = ult 32:i64, %0 (hasExternalUses)
%2:i64 = select %1, 32:i64, %0 (hasExternalUses)
%3:i1 = eq 0:i64, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i1 = ult 32:i64, %0 (hasExternalUses)
%2:i64 = select %1, 32:i64, %0 (hasExternalUses)
%3:i1 = eq 0:i64, %2
pc %3 0:i1
%4:i32 = trunc %2
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 32
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i1 = ult 32:i64, %0 (hasExternalUses)
%2:i64 = select %1, 32:i64, %0 (hasExternalUses)
%3:i64 = addnw 32:i64, %2
infer %3


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 32
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 64
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i1 = ult 32:i64, %0
pc %1 1:i1
%2:i64 = select %1, 32:i64, %0 (hasExternalUses)
%3:i32 = trunc %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 32
second query is UNSAT-- this guess works
Dataflow Pruned 0/0
There are 1 Guesses
There are 1 RHSs before deduplication
There are 1 RHSs after deduplication
"
; No valid RHS in the list
#########################################################

Module before replacement:
; ModuleID = './secretbox_xchacha20poly1305.c.bc'
source_filename = "crypto_secretbox/xchacha20poly1305/secretbox_xchacha20poly1305.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.crypto_onetimeauth_poly1305_state = type { [256 x i8] }

; Function Attrs: nounwind
define i32 @crypto_secretbox_xchacha20poly1305_detached(i8* nonnull %0, i8* nonnull %1, i8* %2, i64 %3, i8* nonnull %4, i8* nonnull %5) local_unnamed_addr #0 {
  %7 = alloca %struct.crypto_onetimeauth_poly1305_state, align 16
  %8 = alloca [64 x i8], align 16
  %9 = alloca [32 x i8], align 16
  %10 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %7, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %10) #6
  %11 = getelementptr inbounds [64 x i8], [64 x i8]* %8, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %11) #6
  %12 = getelementptr inbounds [32 x i8], [32 x i8]* %9, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %12) #6
  %13 = call i32 @crypto_core_hchacha20(i8* nonnull %12, i8* nonnull %4, i8* nonnull %5, i8* null) #6
  %14 = ptrtoint i8* %0 to i32
  %15 = ptrtoint i8* %2 to i32
  %16 = icmp ugt i8* %0, %2
  br i1 %16, label %17, label %21

17:                                               ; preds = %6
  %18 = sub i32 %14, %15
  %19 = zext i32 %18 to i64
  %20 = icmp ult i64 %19, %3
  br i1 %20, label %27, label %21

21:                                               ; preds = %17, %6
  %22 = icmp ugt i8* %2, %0
  br i1 %22, label %23, label %29

23:                                               ; preds = %21
  %24 = sub i32 %15, %14
  %25 = zext i32 %24 to i64
  %26 = icmp ult i64 %25, %3
  br i1 %26, label %27, label %29

27:                                               ; preds = %23, %17
  %28 = trunc i64 %3 to i32
  call void @llvm.memmove.p0i8.p0i8.i32(i8* nonnull align 1 %0, i8* align 1 %2, i32 %28, i1 false)
  br label %29

29:                                               ; preds = %27, %23, %21
  %30 = phi i8* [ %0, %27 ], [ %2, %23 ], [ %2, %21 ]
  call void @llvm.memset.p0i8.i32(i8* nonnull align 16 dereferenceable(32) %11, i8 0, i32 32, i1 false)
  %31 = icmp ugt i64 %3, 32
  %32 = select i1 %31, i64 32, i64 %3
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %37, label %34

34:                                               ; preds = %29
  %35 = getelementptr inbounds [64 x i8], [64 x i8]* %8, i32 0, i32 32
  %36 = trunc i64 %32 to i32
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 16 %35, i8* align 1 %30, i32 %36, i1 false)
  br label %37

37:                                               ; preds = %34, %29
  %38 = add nuw nsw i64 %32, 32
  %39 = getelementptr i8, i8* %4, i32 16
  %40 = call i32 @crypto_stream_chacha20_xor(i8* nonnull %11, i8* nonnull %11, i64 %38, i8* %39, i8* nonnull %12) #6
  %41 = call i32 @crypto_onetimeauth_poly1305_init(%struct.crypto_onetimeauth_poly1305_state* nonnull %7, i8* nonnull %11) #6
  br i1 %33, label %45, label %42

42:                                               ; preds = %37
  %43 = getelementptr inbounds [64 x i8], [64 x i8]* %8, i32 0, i32 32
  %44 = trunc i64 %32 to i32
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 1 %0, i8* nonnull align 16 %43, i32 %44, i1 false)
  br label %45

45:                                               ; preds = %42, %37
  call void @sodium_memzero(i8* nonnull %11, i32 64) #6
  br i1 %31, label %46, label %52

46:                                               ; preds = %45
  %47 = trunc i64 %32 to i32
  %48 = getelementptr i8, i8* %0, i32 %47
  %49 = getelementptr i8, i8* %30, i32 %47
  %50 = sub i64 %3, %32
  %51 = call i32 @crypto_stream_chacha20_xor_ic(i8* %48, i8* %49, i64 %50, i8* %39, i64 1, i8* nonnull %12) #6
  br label %52

52:                                               ; preds = %46, %45
  call void @sodium_memzero(i8* nonnull %12, i32 32) #6
  %53 = call i32 @crypto_onetimeauth_poly1305_update(%struct.crypto_onetimeauth_poly1305_state* nonnull %7, i8* nonnull %0, i64 %3) #6
  %54 = call i32 @crypto_onetimeauth_poly1305_final(%struct.crypto_onetimeauth_poly1305_state* nonnull %7, i8* nonnull %1) #6
  call void @sodium_memzero(i8* nonnull %10, i32 256) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %12) #6
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %11) #6
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %10) #6
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #1

declare i32 @crypto_core_hchacha20(i8* %0, i8* %1, i8* %2, i8* %3) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i32(i8* nocapture %0, i8* nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #3

declare i32 @crypto_stream_chacha20_xor(i8* %0, i8* %1, i64 %2, i8* %3, i8* %4) local_unnamed_addr #2

declare i32 @crypto_onetimeauth_poly1305_init(%struct.crypto_onetimeauth_poly1305_state* %0, i8* %1) local_unnamed_addr #2

declare void @sodium_memzero(i8* %0, i32 %1) local_unnamed_addr #2

declare i32 @crypto_stream_chacha20_xor_ic(i8* %0, i8* %1, i64 %2, i8* %3, i64 %4, i8* %5) local_unnamed_addr #2

declare i32 @crypto_onetimeauth_poly1305_update(%struct.crypto_onetimeauth_poly1305_state* %0, i8* %1, i64 %2) local_unnamed_addr #2

declare i32 @crypto_onetimeauth_poly1305_final(%struct.crypto_onetimeauth_poly1305_state* %0, i8* %1) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #1

; Function Attrs: nounwind
define i32 @crypto_secretbox_xchacha20poly1305_easy(i8* nonnull %0, i8* %1, i64 %2, i8* nonnull %3, i8* nonnull %4) local_unnamed_addr #0 {
  %6 = icmp ugt i64 %2, 4294967279
  br i1 %6, label %7, label %8

7:                                                ; preds = %5
  tail call void @sodium_misuse() #7
  unreachable

8:                                                ; preds = %5
  %9 = getelementptr i8, i8* %0, i32 16
  %10 = tail call i32 @crypto_secretbox_xchacha20poly1305_detached(i8* %9, i8* %0, i8* %1, i64 %2, i8* %3, i8* %4)
  ret i32 0
}

; Function Attrs: noreturn
declare void @sodium_misuse() local_unnamed_addr #4

; Function Attrs: nounwind
define i32 @crypto_secretbox_xchacha20poly1305_open_detached(i8* %0, i8* nonnull %1, i8* nonnull %2, i64 %3, i8* nonnull %4, i8* nonnull %5) local_unnamed_addr #0 {
  %7 = alloca [64 x i8], align 16
  %8 = alloca [32 x i8], align 16
  %9 = getelementptr inbounds [64 x i8], [64 x i8]* %7, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %9) #6
  %10 = getelementptr inbounds [32 x i8], [32 x i8]* %8, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %10) #6
  %11 = call i32 @crypto_core_hchacha20(i8* nonnull %10, i8* nonnull %4, i8* nonnull %5, i8* null) #6
  %12 = getelementptr i8, i8* %4, i32 16
  %13 = call i32 @crypto_stream_chacha20(i8* nonnull %9, i64 32, i8* %12, i8* nonnull %10) #6
  %14 = call i32 @crypto_onetimeauth_poly1305_verify(i8* nonnull %2, i8* nonnull %1, i64 %3, i8* nonnull %9) #6
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %56

16:                                               ; preds = %6
  %17 = icmp eq i8* %0, null
  br i1 %17, label %58, label %18

18:                                               ; preds = %16
  %19 = ptrtoint i8* %1 to i32
  %20 = ptrtoint i8* %0 to i32
  %21 = icmp ugt i8* %1, %0
  br i1 %21, label %22, label %26

22:                                               ; preds = %18
  %23 = sub i32 %19, %20
  %24 = zext i32 %23 to i64
  %25 = icmp ult i64 %24, %3
  br i1 %25, label %32, label %26

26:                                               ; preds = %22, %18
  %27 = icmp ugt i8* %0, %1
  br i1 %27, label %28, label %34

28:                                               ; preds = %26
  %29 = sub i32 %20, %19
  %30 = zext i32 %29 to i64
  %31 = icmp ult i64 %30, %3
  br i1 %31, label %32, label %34

32:                                               ; preds = %28, %22
  %33 = trunc i64 %3 to i32
  call void @llvm.memmove.p0i8.p0i8.i32(i8* nonnull align 1 %0, i8* nonnull align 1 %1, i32 %33, i1 false)
  br label %34

34:                                               ; preds = %32, %28, %26
  %35 = phi i8* [ %0, %32 ], [ %1, %28 ], [ %1, %26 ]
  %36 = icmp ugt i64 %3, 32
  %37 = select i1 %36, i64 32, i64 %3
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %39, label %42

39:                                               ; preds = %34
  %40 = add nuw nsw i64 %37, 32
  %41 = call i32 @crypto_stream_chacha20_xor(i8* nonnull %9, i8* nonnull %9, i64 %40, i8* %12, i8* nonnull %10) #6
  br label %49

42:                                               ; preds = %34
  %43 = getelementptr inbounds [64 x i8], [64 x i8]* %7, i32 0, i32 32
  %44 = trunc i64 %37 to i32
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 16 %43, i8* nonnull align 1 %35, i32 %44, i1 false)
  %45 = add nuw nsw i64 %37, 32
  %46 = call i32 @crypto_stream_chacha20_xor(i8* nonnull %9, i8* nonnull %9, i64 %45, i8* %12, i8* nonnull %10) #6
  %47 = getelementptr inbounds [64 x i8], [64 x i8]* %7, i32 0, i32 32
  %48 = trunc i64 %37 to i32
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 1 %0, i8* nonnull align 16 %47, i32 %48, i1 false)
  br label %49

49:                                               ; preds = %39, %42
  br i1 %36, label %50, label %56

50:                                               ; preds = %49
  %51 = trunc i64 %37 to i32
  %52 = getelementptr i8, i8* %0, i32 %51
  %53 = getelementptr i8, i8* %35, i32 %51
  %54 = sub i64 %3, %37
  %55 = call i32 @crypto_stream_chacha20_xor_ic(i8* %52, i8* %53, i64 %54, i8* %12, i64 1, i8* nonnull %10) #6
  br label %56

56:                                               ; preds = %49, %50, %6
  %57 = phi i32 [ -1, %6 ], [ 0, %50 ], [ 0, %49 ]
  call void @sodium_memzero(i8* nonnull %10, i32 32) #6
  br label %58

58:                                               ; preds = %56, %16
  %59 = phi i32 [ 0, %16 ], [ %57, %56 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %10) #6
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %9) #6
  ret i32 %59
}

declare i32 @crypto_stream_chacha20(i8* %0, i64 %1, i8* %2, i8* %3) local_unnamed_addr #2

declare i32 @crypto_onetimeauth_poly1305_verify(i8* %0, i8* %1, i64 %2, i8* %3) local_unnamed_addr #2

; Function Attrs: nounwind
define i32 @crypto_secretbox_xchacha20poly1305_open_easy(i8* %0, i8* nonnull %1, i64 %2, i8* nonnull %3, i8* nonnull %4) local_unnamed_addr #0 {
  %6 = icmp ult i64 %2, 16
  br i1 %6, label %11, label %7

7:                                                ; preds = %5
  %8 = getelementptr i8, i8* %1, i32 16
  %9 = add i64 %2, -16
  %10 = tail call i32 @crypto_secretbox_xchacha20poly1305_open_detached(i8* %0, i8* %8, i8* %1, i64 %9, i8* %3, i8* %4)
  br label %11

11:                                               ; preds = %5, %7
  %12 = phi i32 [ %10, %7 ], [ -1, %5 ]
  ret i32 %12
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xchacha20poly1305_keybytes() local_unnamed_addr #5 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xchacha20poly1305_noncebytes() local_unnamed_addr #5 {
  ret i32 24
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xchacha20poly1305_macbytes() local_unnamed_addr #5 {
  ret i32 16
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xchacha20poly1305_messagebytes_max() local_unnamed_addr #5 {
  ret i32 -17
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn writeonly }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; Replacing "  %47 = trunc i64 %32 to i32"
; from ""
; with "i32 32" in:
"%0:i64 = var
%1:i1 = ult 32:i64, %0
pc %1 1:i1
%2:i64 = select %1, 32:i64, %0 (hasExternalUses)
%3:i32 = trunc %2
cand %3 32:i32
"
; with "i32 32"

Module after replacement:
; ModuleID = './secretbox_xchacha20poly1305.c.bc'
source_filename = "crypto_secretbox/xchacha20poly1305/secretbox_xchacha20poly1305.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.crypto_onetimeauth_poly1305_state = type { [256 x i8] }

; Function Attrs: nounwind
define i32 @crypto_secretbox_xchacha20poly1305_detached(i8* nonnull %0, i8* nonnull %1, i8* %2, i64 %3, i8* nonnull %4, i8* nonnull %5) local_unnamed_addr #0 {
  %7 = alloca %struct.crypto_onetimeauth_poly1305_state, align 16
  %8 = alloca [64 x i8], align 16
  %9 = alloca [32 x i8], align 16
  %10 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %7, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %10) #6
  %11 = getelementptr inbounds [64 x i8], [64 x i8]* %8, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %11) #6
  %12 = getelementptr inbounds [32 x i8], [32 x i8]* %9, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %12) #6
  %13 = call i32 @crypto_core_hchacha20(i8* nonnull %12, i8* nonnull %4, i8* nonnull %5, i8* null) #6
  %14 = ptrtoint i8* %0 to i32
  %15 = ptrtoint i8* %2 to i32
  %16 = icmp ugt i8* %0, %2
  br i1 %16, label %17, label %21

17:                                               ; preds = %6
  %18 = sub i32 %14, %15
  %19 = zext i32 %18 to i64
  %20 = icmp ult i64 %19, %3
  br i1 %20, label %27, label %21

21:                                               ; preds = %17, %6
  %22 = icmp ugt i8* %2, %0
  br i1 %22, label %23, label %29

23:                                               ; preds = %21
  %24 = sub i32 %15, %14
  %25 = zext i32 %24 to i64
  %26 = icmp ult i64 %25, %3
  br i1 %26, label %27, label %29

27:                                               ; preds = %23, %17
  %28 = trunc i64 %3 to i32
  call void @llvm.memmove.p0i8.p0i8.i32(i8* nonnull align 1 %0, i8* align 1 %2, i32 %28, i1 false)
  br label %29

29:                                               ; preds = %27, %23, %21
  %30 = phi i8* [ %0, %27 ], [ %2, %23 ], [ %2, %21 ]
  call void @llvm.memset.p0i8.i32(i8* nonnull align 16 dereferenceable(32) %11, i8 0, i32 32, i1 false)
  %31 = icmp ugt i64 %3, 32
  %32 = select i1 %31, i64 32, i64 %3
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %37, label %34

34:                                               ; preds = %29
  %35 = getelementptr inbounds [64 x i8], [64 x i8]* %8, i32 0, i32 32
  %36 = trunc i64 %32 to i32
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 16 %35, i8* align 1 %30, i32 %36, i1 false)
  br label %37

37:                                               ; preds = %34, %29
  %38 = add nuw nsw i64 %32, 32
  %39 = getelementptr i8, i8* %4, i32 16
  %40 = call i32 @crypto_stream_chacha20_xor(i8* nonnull %11, i8* nonnull %11, i64 %38, i8* %39, i8* nonnull %12) #6
  %41 = call i32 @crypto_onetimeauth_poly1305_init(%struct.crypto_onetimeauth_poly1305_state* nonnull %7, i8* nonnull %11) #6
  br i1 %33, label %45, label %42

42:                                               ; preds = %37
  %43 = getelementptr inbounds [64 x i8], [64 x i8]* %8, i32 0, i32 32
  %44 = trunc i64 %32 to i32
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 1 %0, i8* nonnull align 16 %43, i32 %44, i1 false)
  br label %45

45:                                               ; preds = %42, %37
  call void @sodium_memzero(i8* nonnull %11, i32 64) #6
  br i1 %31, label %46, label %51

46:                                               ; preds = %45
  %47 = getelementptr i8, i8* %0, i32 32
  %48 = getelementptr i8, i8* %30, i32 32
  %49 = sub i64 %3, %32
  %50 = call i32 @crypto_stream_chacha20_xor_ic(i8* %47, i8* %48, i64 %49, i8* %39, i64 1, i8* nonnull %12) #6
  br label %51

51:                                               ; preds = %46, %45
  call void @sodium_memzero(i8* nonnull %12, i32 32) #6
  %52 = call i32 @crypto_onetimeauth_poly1305_update(%struct.crypto_onetimeauth_poly1305_state* nonnull %7, i8* nonnull %0, i64 %3) #6
  %53 = call i32 @crypto_onetimeauth_poly1305_final(%struct.crypto_onetimeauth_poly1305_state* nonnull %7, i8* nonnull %1) #6
  call void @sodium_memzero(i8* nonnull %10, i32 256) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %12) #6
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %11) #6
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %10) #6
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #1

declare i32 @crypto_core_hchacha20(i8* %0, i8* %1, i8* %2, i8* %3) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i32(i8* nocapture %0, i8* nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #3

declare i32 @crypto_stream_chacha20_xor(i8* %0, i8* %1, i64 %2, i8* %3, i8* %4) local_unnamed_addr #2

declare i32 @crypto_onetimeauth_poly1305_init(%struct.crypto_onetimeauth_poly1305_state* %0, i8* %1) local_unnamed_addr #2

declare void @sodium_memzero(i8* %0, i32 %1) local_unnamed_addr #2

declare i32 @crypto_stream_chacha20_xor_ic(i8* %0, i8* %1, i64 %2, i8* %3, i64 %4, i8* %5) local_unnamed_addr #2

declare i32 @crypto_onetimeauth_poly1305_update(%struct.crypto_onetimeauth_poly1305_state* %0, i8* %1, i64 %2) local_unnamed_addr #2

declare i32 @crypto_onetimeauth_poly1305_final(%struct.crypto_onetimeauth_poly1305_state* %0, i8* %1) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #1

; Function Attrs: nounwind
define i32 @crypto_secretbox_xchacha20poly1305_easy(i8* nonnull %0, i8* %1, i64 %2, i8* nonnull %3, i8* nonnull %4) local_unnamed_addr #0 {
  %6 = icmp ugt i64 %2, 4294967279
  br i1 %6, label %7, label %8

7:                                                ; preds = %5
  tail call void @sodium_misuse() #7
  unreachable

8:                                                ; preds = %5
  %9 = getelementptr i8, i8* %0, i32 16
  %10 = tail call i32 @crypto_secretbox_xchacha20poly1305_detached(i8* %9, i8* %0, i8* %1, i64 %2, i8* %3, i8* %4)
  ret i32 0
}

; Function Attrs: noreturn
declare void @sodium_misuse() local_unnamed_addr #4

; Function Attrs: nounwind
define i32 @crypto_secretbox_xchacha20poly1305_open_detached(i8* %0, i8* nonnull %1, i8* nonnull %2, i64 %3, i8* nonnull %4, i8* nonnull %5) local_unnamed_addr #0 {
  %7 = alloca [64 x i8], align 16
  %8 = alloca [32 x i8], align 16
  %9 = getelementptr inbounds [64 x i8], [64 x i8]* %7, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %9) #6
  %10 = getelementptr inbounds [32 x i8], [32 x i8]* %8, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %10) #6
  %11 = call i32 @crypto_core_hchacha20(i8* nonnull %10, i8* nonnull %4, i8* nonnull %5, i8* null) #6
  %12 = getelementptr i8, i8* %4, i32 16
  %13 = call i32 @crypto_stream_chacha20(i8* nonnull %9, i64 32, i8* %12, i8* nonnull %10) #6
  %14 = call i32 @crypto_onetimeauth_poly1305_verify(i8* nonnull %2, i8* nonnull %1, i64 %3, i8* nonnull %9) #6
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %56

16:                                               ; preds = %6
  %17 = icmp eq i8* %0, null
  br i1 %17, label %58, label %18

18:                                               ; preds = %16
  %19 = ptrtoint i8* %1 to i32
  %20 = ptrtoint i8* %0 to i32
  %21 = icmp ugt i8* %1, %0
  br i1 %21, label %22, label %26

22:                                               ; preds = %18
  %23 = sub i32 %19, %20
  %24 = zext i32 %23 to i64
  %25 = icmp ult i64 %24, %3
  br i1 %25, label %32, label %26

26:                                               ; preds = %22, %18
  %27 = icmp ugt i8* %0, %1
  br i1 %27, label %28, label %34

28:                                               ; preds = %26
  %29 = sub i32 %20, %19
  %30 = zext i32 %29 to i64
  %31 = icmp ult i64 %30, %3
  br i1 %31, label %32, label %34

32:                                               ; preds = %28, %22
  %33 = trunc i64 %3 to i32
  call void @llvm.memmove.p0i8.p0i8.i32(i8* nonnull align 1 %0, i8* nonnull align 1 %1, i32 %33, i1 false)
  br label %34

34:                                               ; preds = %32, %28, %26
  %35 = phi i8* [ %0, %32 ], [ %1, %28 ], [ %1, %26 ]
  %36 = icmp ugt i64 %3, 32
  %37 = select i1 %36, i64 32, i64 %3
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %39, label %42

39:                                               ; preds = %34
  %40 = add nuw nsw i64 %37, 32
  %41 = call i32 @crypto_stream_chacha20_xor(i8* nonnull %9, i8* nonnull %9, i64 %40, i8* %12, i8* nonnull %10) #6
  br label %49

42:                                               ; preds = %34
  %43 = getelementptr inbounds [64 x i8], [64 x i8]* %7, i32 0, i32 32
  %44 = trunc i64 %37 to i32
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 16 %43, i8* nonnull align 1 %35, i32 %44, i1 false)
  %45 = add nuw nsw i64 %37, 32
  %46 = call i32 @crypto_stream_chacha20_xor(i8* nonnull %9, i8* nonnull %9, i64 %45, i8* %12, i8* nonnull %10) #6
  %47 = getelementptr inbounds [64 x i8], [64 x i8]* %7, i32 0, i32 32
  %48 = trunc i64 %37 to i32
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 1 %0, i8* nonnull align 16 %47, i32 %48, i1 false)
  br label %49

49:                                               ; preds = %39, %42
  br i1 %36, label %50, label %56

50:                                               ; preds = %49
  %51 = trunc i64 %37 to i32
  %52 = getelementptr i8, i8* %0, i32 %51
  %53 = getelementptr i8, i8* %35, i32 %51
  %54 = sub i64 %3, %37
  %55 = call i32 @crypto_stream_chacha20_xor_ic(i8* %52, i8* %53, i64 %54, i8* %12, i64 1, i8* nonnull %10) #6
  br label %56

56:                                               ; preds = %49, %50, %6
  %57 = phi i32 [ -1, %6 ], [ 0, %50 ], [ 0, %49 ]
  call void @sodium_memzero(i8* nonnull %10, i32 32) #6
  br label %58

58:                                               ; preds = %56, %16
  %59 = phi i32 [ 0, %16 ], [ %57, %56 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %10) #6
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %9) #6
  ret i32 %59
}

declare i32 @crypto_stream_chacha20(i8* %0, i64 %1, i8* %2, i8* %3) local_unnamed_addr #2

declare i32 @crypto_onetimeauth_poly1305_verify(i8* %0, i8* %1, i64 %2, i8* %3) local_unnamed_addr #2

; Function Attrs: nounwind
define i32 @crypto_secretbox_xchacha20poly1305_open_easy(i8* %0, i8* nonnull %1, i64 %2, i8* nonnull %3, i8* nonnull %4) local_unnamed_addr #0 {
  %6 = icmp ult i64 %2, 16
  br i1 %6, label %11, label %7

7:                                                ; preds = %5
  %8 = getelementptr i8, i8* %1, i32 16
  %9 = add i64 %2, -16
  %10 = tail call i32 @crypto_secretbox_xchacha20poly1305_open_detached(i8* %0, i8* %8, i8* %1, i64 %9, i8* %3, i8* %4)
  br label %11

11:                                               ; preds = %5, %7
  %12 = phi i32 [ %10, %7 ], [ -1, %5 ]
  ret i32 %12
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xchacha20poly1305_keybytes() local_unnamed_addr #5 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xchacha20poly1305_noncebytes() local_unnamed_addr #5 {
  ret i32 24
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xchacha20poly1305_macbytes() local_unnamed_addr #5 {
  ret i32 16
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xchacha20poly1305_messagebytes_max() local_unnamed_addr #5 {
  ret i32 -17
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn writeonly }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

#########################################################
; exiting Souper's runOnFunction() for crypto_secretbox_xchacha20poly1305_detached()
rescanning function after transformation was applied

