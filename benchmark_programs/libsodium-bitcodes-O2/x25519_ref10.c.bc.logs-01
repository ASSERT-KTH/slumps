; entering Souper's runOnFunction() for ./x25519_ref10.c.bc:crypto_scalarmult_curve25519_ref10()

; ModuleID = './x25519_ref10.c.bc'
source_filename = "crypto_scalarmult/curve25519/ref10/x25519_ref10.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.crypto_scalarmult_curve25519_implementation = type { i32 (i8*, i8*, i8*)*, i32 (i8*, i8*)* }
%struct.ge25519_p3 = type { [10 x i32], [10 x i32], [10 x i32], [10 x i32] }

@crypto_scalarmult_curve25519_ref10_implementation = hidden local_unnamed_addr global %struct.crypto_scalarmult_curve25519_implementation { i32 (i8*, i8*, i8*)* @crypto_scalarmult_curve25519_ref10, i32 (i8*, i8*)* @crypto_scalarmult_curve25519_ref10_base }, align 4
@has_small_order.blacklist = internal unnamed_addr constant <{ [32 x i8], <{ i8, [31 x i8] }>, [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8] }> <{ [32 x i8] zeroinitializer, <{ i8, [31 x i8] }> <{ i8 1, [31 x i8] zeroinitializer }>, [32 x i8] c"\E0\EBz|;A\B8\AE\16V\E3\FA\F1\9F\C4j\DA\09\8D\EB\9C2\B1\FD\86b\05\16_I\B8\00", [32 x i8] c"_\9C\95\BC\A3P\8C$\B1\D0\B1U\9C\83\EF[\04D\\\C4X\1C\8E\86\D8\22N\DD\D0\9F\11W", [32 x i8] c"\EC\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\7F", [32 x i8] c"\ED\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\7F", [32 x i8] c"\EE\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\7F" }>, align 16

; Function Attrs: nounwind
define internal i32 @crypto_scalarmult_curve25519_ref10(i8* %0, i8* nocapture readonly %1, i8* %2) #0 {
  %4 = alloca [10 x i32], align 16
  %5 = alloca [10 x i32], align 16
  %6 = alloca [10 x i32], align 16
  %7 = alloca [10 x i32], align 16
  %8 = alloca [10 x i32], align 16
  %9 = alloca [10 x i32], align 16
  %10 = alloca [10 x i32], align 16
  %11 = bitcast [10 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %11) #5
  %12 = bitcast [10 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %12) #5
  %13 = bitcast [10 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %13) #5
  %14 = bitcast [10 x i32]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %14) #5
  %15 = bitcast [10 x i32]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %15) #5
  %16 = bitcast [10 x i32]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %16) #5
  %17 = bitcast [10 x i32]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %17) #5
  br label %18

18:                                               ; preds = %18, %3
  %19 = phi i8 [ 0, %3 ], [ %56, %18 ]
  %20 = phi i8 [ 0, %3 ], [ %52, %18 ]
  %21 = phi i8 [ 0, %3 ], [ %48, %18 ]
  %22 = phi i8 [ 0, %3 ], [ %44, %18 ]
  %23 = phi i8 [ 0, %3 ], [ %40, %18 ]
  %24 = phi i8 [ 0, %3 ], [ %36, %18 ]
  %25 = phi i8 [ 0, %3 ], [ %32, %18 ]
  %26 = phi i32 [ 0, %3 ], [ %57, %18 ]
  %27 = getelementptr i8, i8* %2, i32 %26
  %28 = load i8, i8* %27, align 1
  %29 = getelementptr [7 x [32 x i8]], [7 x [32 x i8]]* bitcast (<{ [32 x i8], <{ i8, [31 x i8] }>, [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8] }>* @has_small_order.blacklist to [7 x [32 x i8]]*), i32 0, i32 0, i32 %26
  %30 = load i8, i8* %29, align 1
  %31 = xor i8 %30, %28
  %32 = or i8 %31, %25
  %33 = getelementptr [7 x [32 x i8]], [7 x [32 x i8]]* bitcast (<{ [32 x i8], <{ i8, [31 x i8] }>, [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8] }>* @has_small_order.blacklist to [7 x [32 x i8]]*), i32 0, i32 1, i32 %26
  %34 = load i8, i8* %33, align 1
  %35 = xor i8 %34, %28
  %36 = or i8 %35, %24
  %37 = getelementptr [7 x [32 x i8]], [7 x [32 x i8]]* bitcast (<{ [32 x i8], <{ i8, [31 x i8] }>, [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8] }>* @has_small_order.blacklist to [7 x [32 x i8]]*), i32 0, i32 2, i32 %26
  %38 = load i8, i8* %37, align 1
  %39 = xor i8 %38, %28
  %40 = or i8 %39, %23
  %41 = getelementptr [7 x [32 x i8]], [7 x [32 x i8]]* bitcast (<{ [32 x i8], <{ i8, [31 x i8] }>, [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8] }>* @has_small_order.blacklist to [7 x [32 x i8]]*), i32 0, i32 3, i32 %26
  %42 = load i8, i8* %41, align 1
  %43 = xor i8 %42, %28
  %44 = or i8 %43, %22
  %45 = getelementptr [7 x [32 x i8]], [7 x [32 x i8]]* bitcast (<{ [32 x i8], <{ i8, [31 x i8] }>, [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8] }>* @has_small_order.blacklist to [7 x [32 x i8]]*), i32 0, i32 4, i32 %26
  %46 = load i8, i8* %45, align 1
  %47 = xor i8 %46, %28
  %48 = or i8 %47, %21
  %49 = getelementptr [7 x [32 x i8]], [7 x [32 x i8]]* bitcast (<{ [32 x i8], <{ i8, [31 x i8] }>, [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8] }>* @has_small_order.blacklist to [7 x [32 x i8]]*), i32 0, i32 5, i32 %26
  %50 = load i8, i8* %49, align 1
  %51 = xor i8 %50, %28
  %52 = or i8 %51, %20
  %53 = getelementptr [7 x [32 x i8]], [7 x [32 x i8]]* bitcast (<{ [32 x i8], <{ i8, [31 x i8] }>, [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8] }>* @has_small_order.blacklist to [7 x [32 x i8]]*), i32 0, i32 6, i32 %26
  %54 = load i8, i8* %53, align 1
  %55 = xor i8 %54, %28
  %56 = or i8 %55, %19
  %57 = add nuw nsw i32 %26, 1
  %58 = icmp eq i32 %57, 31
  br i1 %58, label %59, label %18

59:                                               ; preds = %18
  %60 = getelementptr i8, i8* %2, i32 31
  %61 = load i8, i8* %60, align 1
  %62 = and i8 %61, 127
  %63 = or i8 %62, %32
  %64 = or i8 %62, %36
  %65 = or i8 %62, %40
  %66 = xor i8 %62, 87
  %67 = or i8 %66, %44
  %68 = xor i8 %62, 127
  %69 = or i8 %68, %48
  %70 = or i8 %68, %52
  %71 = or i8 %68, %56
  %72 = zext i8 %63 to i32
  %73 = add nsw i32 %72, -1
  %74 = zext i8 %64 to i32
  %75 = add nsw i32 %74, -1
  %76 = or i32 %75, %73
  %77 = zext i8 %65 to i32
  %78 = add nsw i32 %77, -1
  %79 = or i32 %76, %78
  %80 = zext i8 %67 to i32
  %81 = add nuw nsw i32 %80, 511
  %82 = or i32 %79, %81
  %83 = zext i8 %69 to i32
  %84 = add nuw nsw i32 %83, 511
  %85 = or i32 %82, %84
  %86 = zext i8 %70 to i32
  %87 = add nuw nsw i32 %86, 511
  %88 = or i32 %85, %87
  %89 = zext i8 %71 to i32
  %90 = add nuw nsw i32 %89, 511
  %91 = or i32 %88, %90
  %92 = and i32 %91, 256
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %94, label %687

94:                                               ; preds = %59, %94
  %95 = phi i32 [ %99, %94 ], [ 0, %59 ]
  %96 = getelementptr i8, i8* %1, i32 %95
  %97 = load i8, i8* %96, align 1
  %98 = getelementptr i8, i8* %0, i32 %95
  store i8 %97, i8* %98, align 1
  %99 = add nuw nsw i32 %95, 1
  %100 = icmp eq i32 %99, 32
  br i1 %100, label %101, label %94

101:                                              ; preds = %94
  %102 = load i8, i8* %0, align 1
  %103 = and i8 %102, -8
  store i8 %103, i8* %0, align 1
  %104 = getelementptr i8, i8* %0, i32 31
  %105 = load i8, i8* %104, align 1
  %106 = and i8 %105, 63
  %107 = or i8 %106, 64
  store i8 %107, i8* %104, align 1
  %108 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 0
  call void @fe25519_frombytes(i32* nonnull %108, i8* %2) #5
  %109 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 0
  store i32 1, i32* %109, align 16
  %110 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 1
  %111 = bitcast i32* %110 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(36) %111, i8 0, i64 36, i1 false) #5
  %112 = getelementptr inbounds [10 x i32], [10 x i32]* %6, i32 0, i32 0
  call void @llvm.memset.p0i8.i32(i8* nonnull align 16 dereferenceable(40) %13, i8 0, i32 40, i1 false) #5
  %113 = getelementptr inbounds [10 x i32], [10 x i32]* %7, i32 0, i32 0
  %114 = load i32, i32* %108, align 16
  %115 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 1
  %116 = load i32, i32* %115, align 4
  %117 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 2
  %118 = load i32, i32* %117, align 8
  %119 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 3
  %120 = load i32, i32* %119, align 4
  %121 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 4
  %122 = load i32, i32* %121, align 16
  %123 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 5
  %124 = load i32, i32* %123, align 4
  %125 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 6
  %126 = load i32, i32* %125, align 8
  %127 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 7
  %128 = load i32, i32* %127, align 4
  %129 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 8
  %130 = load i32, i32* %129, align 16
  %131 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 9
  %132 = load i32, i32* %131, align 4
  store i32 %114, i32* %113, align 16
  %133 = getelementptr inbounds [10 x i32], [10 x i32]* %7, i32 0, i32 1
  store i32 %116, i32* %133, align 4
  %134 = getelementptr inbounds [10 x i32], [10 x i32]* %7, i32 0, i32 2
  store i32 %118, i32* %134, align 8
  %135 = getelementptr inbounds [10 x i32], [10 x i32]* %7, i32 0, i32 3
  store i32 %120, i32* %135, align 4
  %136 = getelementptr inbounds [10 x i32], [10 x i32]* %7, i32 0, i32 4
  store i32 %122, i32* %136, align 16
  %137 = getelementptr inbounds [10 x i32], [10 x i32]* %7, i32 0, i32 5
  store i32 %124, i32* %137, align 4
  %138 = getelementptr inbounds [10 x i32], [10 x i32]* %7, i32 0, i32 6
  store i32 %126, i32* %138, align 8
  %139 = getelementptr inbounds [10 x i32], [10 x i32]* %7, i32 0, i32 7
  store i32 %128, i32* %139, align 4
  %140 = getelementptr inbounds [10 x i32], [10 x i32]* %7, i32 0, i32 8
  store i32 %130, i32* %140, align 16
  %141 = getelementptr inbounds [10 x i32], [10 x i32]* %7, i32 0, i32 9
  store i32 %132, i32* %141, align 4
  %142 = getelementptr inbounds [10 x i32], [10 x i32]* %8, i32 0, i32 0
  store i32 1, i32* %142, align 16
  %143 = getelementptr inbounds [10 x i32], [10 x i32]* %8, i32 0, i32 1
  %144 = bitcast i32* %143 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(36) %144, i8 0, i64 36, i1 false) #5
  %145 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 2
  %146 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 3
  %147 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 4
  %148 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 5
  %149 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 6
  %150 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 7
  %151 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 8
  %152 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 9
  %153 = getelementptr inbounds [10 x i32], [10 x i32]* %6, i32 0, i32 1
  %154 = getelementptr inbounds [10 x i32], [10 x i32]* %6, i32 0, i32 2
  %155 = getelementptr inbounds [10 x i32], [10 x i32]* %6, i32 0, i32 3
  %156 = getelementptr inbounds [10 x i32], [10 x i32]* %6, i32 0, i32 4
  %157 = getelementptr inbounds [10 x i32], [10 x i32]* %6, i32 0, i32 5
  %158 = getelementptr inbounds [10 x i32], [10 x i32]* %6, i32 0, i32 6
  %159 = getelementptr inbounds [10 x i32], [10 x i32]* %6, i32 0, i32 7
  %160 = getelementptr inbounds [10 x i32], [10 x i32]* %6, i32 0, i32 8
  %161 = getelementptr inbounds [10 x i32], [10 x i32]* %6, i32 0, i32 9
  %162 = getelementptr inbounds [10 x i32], [10 x i32]* %8, i32 0, i32 2
  %163 = getelementptr inbounds [10 x i32], [10 x i32]* %8, i32 0, i32 3
  %164 = getelementptr inbounds [10 x i32], [10 x i32]* %8, i32 0, i32 4
  %165 = getelementptr inbounds [10 x i32], [10 x i32]* %8, i32 0, i32 5
  %166 = getelementptr inbounds [10 x i32], [10 x i32]* %8, i32 0, i32 6
  %167 = getelementptr inbounds [10 x i32], [10 x i32]* %8, i32 0, i32 7
  %168 = getelementptr inbounds [10 x i32], [10 x i32]* %8, i32 0, i32 8
  %169 = getelementptr inbounds [10 x i32], [10 x i32]* %8, i32 0, i32 9
  %170 = getelementptr inbounds [10 x i32], [10 x i32]* %9, i32 0, i32 0
  %171 = getelementptr inbounds [10 x i32], [10 x i32]* %9, i32 0, i32 1
  %172 = getelementptr inbounds [10 x i32], [10 x i32]* %9, i32 0, i32 2
  %173 = getelementptr inbounds [10 x i32], [10 x i32]* %9, i32 0, i32 3
  %174 = getelementptr inbounds [10 x i32], [10 x i32]* %9, i32 0, i32 4
  %175 = getelementptr inbounds [10 x i32], [10 x i32]* %9, i32 0, i32 5
  %176 = getelementptr inbounds [10 x i32], [10 x i32]* %9, i32 0, i32 6
  %177 = getelementptr inbounds [10 x i32], [10 x i32]* %9, i32 0, i32 7
  %178 = getelementptr inbounds [10 x i32], [10 x i32]* %9, i32 0, i32 8
  %179 = getelementptr inbounds [10 x i32], [10 x i32]* %9, i32 0, i32 9
  %180 = getelementptr inbounds [10 x i32], [10 x i32]* %10, i32 0, i32 0
  %181 = getelementptr inbounds [10 x i32], [10 x i32]* %10, i32 0, i32 1
  %182 = getelementptr inbounds [10 x i32], [10 x i32]* %10, i32 0, i32 2
  %183 = getelementptr inbounds [10 x i32], [10 x i32]* %10, i32 0, i32 3
  %184 = getelementptr inbounds [10 x i32], [10 x i32]* %10, i32 0, i32 4
  %185 = getelementptr inbounds [10 x i32], [10 x i32]* %10, i32 0, i32 5
  %186 = getelementptr inbounds [10 x i32], [10 x i32]* %10, i32 0, i32 6
  %187 = getelementptr inbounds [10 x i32], [10 x i32]* %10, i32 0, i32 7
  %188 = getelementptr inbounds [10 x i32], [10 x i32]* %10, i32 0, i32 8
  %189 = getelementptr inbounds [10 x i32], [10 x i32]* %10, i32 0, i32 9
  br label %190

190:                                              ; preds = %534, %101
  %191 = phi i32 [ 0, %101 ], [ %564, %534 ]
  %192 = phi i32 [ 0, %101 ], [ %563, %534 ]
  %193 = phi i32 [ 0, %101 ], [ %562, %534 ]
  %194 = phi i32 [ 0, %101 ], [ %561, %534 ]
  %195 = phi i32 [ 0, %101 ], [ %560, %534 ]
  %196 = phi i32 [ 0, %101 ], [ %559, %534 ]
  %197 = phi i32 [ 0, %101 ], [ %558, %534 ]
  %198 = phi i32 [ 0, %101 ], [ %557, %534 ]
  %199 = phi i32 [ 0, %101 ], [ %556, %534 ]
  %200 = phi i32 [ %132, %101 ], [ %555, %534 ]
  %201 = phi i32 [ %130, %101 ], [ %554, %534 ]
  %202 = phi i32 [ %128, %101 ], [ %553, %534 ]
  %203 = phi i32 [ %126, %101 ], [ %552, %534 ]
  %204 = phi i32 [ %124, %101 ], [ %551, %534 ]
  %205 = phi i32 [ %122, %101 ], [ %550, %534 ]
  %206 = phi i32 [ %120, %101 ], [ %549, %534 ]
  %207 = phi i32 [ %118, %101 ], [ %548, %534 ]
  %208 = phi i32 [ %116, %101 ], [ %547, %534 ]
  %209 = phi i32 [ %114, %101 ], [ %546, %534 ]
  %210 = phi i32 [ 0, %101 ], [ %545, %534 ]
  %211 = phi i32 [ 0, %101 ], [ %544, %534 ]
  %212 = phi i32 [ 0, %101 ], [ %543, %534 ]
  %213 = phi i32 [ 0, %101 ], [ %542, %534 ]
  %214 = phi i32 [ 0, %101 ], [ %541, %534 ]
  %215 = phi i32 [ 0, %101 ], [ %540, %534 ]
  %216 = phi i32 [ 0, %101 ], [ %539, %534 ]
  %217 = phi i32 [ 0, %101 ], [ %538, %534 ]
  %218 = phi i32 [ 0, %101 ], [ %537, %534 ]
  %219 = phi i32 [ 1, %101 ], [ %536, %534 ]
  %220 = phi i32 [ 0, %101 ], [ %228, %534 ]
  %221 = phi i32 [ 254, %101 ], [ %535, %534 ]
  %222 = lshr i32 %221, 3
  %223 = getelementptr i8, i8* %0, i32 %222
  %224 = load i8, i8* %223, align 1
  %225 = zext i8 %224 to i32
  %226 = and i32 %221, 7
  %227 = lshr i32 %225, %226
  %228 = and i32 %227, 1
  %229 = xor i32 %228, %220
  %230 = sub nsw i32 0, %229
  %231 = xor i32 %209, %219
  %232 = xor i32 %208, %218
  %233 = xor i32 %207, %217
  %234 = xor i32 %206, %216
  %235 = xor i32 %205, %215
  %236 = xor i32 %204, %214
  %237 = xor i32 %203, %213
  %238 = xor i32 %202, %212
  %239 = xor i32 %201, %211
  %240 = xor i32 %200, %210
  %241 = and i32 %231, %230
  %242 = and i32 %232, %230
  %243 = and i32 %233, %230
  %244 = and i32 %234, %230
  %245 = and i32 %235, %230
  %246 = and i32 %236, %230
  %247 = and i32 %237, %230
  %248 = and i32 %238, %230
  %249 = and i32 %239, %230
  %250 = and i32 %240, %230
  %251 = xor i32 %241, %219
  store i32 %251, i32* %109, align 16
  %252 = xor i32 %242, %218
  store i32 %252, i32* %110, align 4
  %253 = xor i32 %243, %217
  store i32 %253, i32* %145, align 8
  %254 = xor i32 %244, %216
  store i32 %254, i32* %146, align 4
  %255 = xor i32 %245, %215
  store i32 %255, i32* %147, align 16
  %256 = xor i32 %246, %214
  store i32 %256, i32* %148, align 4
  %257 = xor i32 %247, %213
  store i32 %257, i32* %149, align 8
  %258 = xor i32 %248, %212
  store i32 %258, i32* %150, align 4
  %259 = xor i32 %249, %211
  store i32 %259, i32* %151, align 16
  %260 = xor i32 %250, %210
  store i32 %260, i32* %152, align 4
  %261 = xor i32 %241, %209
  store i32 %261, i32* %113, align 16
  %262 = xor i32 %242, %208
  store i32 %262, i32* %133, align 4
  %263 = xor i32 %243, %207
  store i32 %263, i32* %134, align 8
  %264 = xor i32 %244, %206
  store i32 %264, i32* %135, align 4
  %265 = xor i32 %245, %205
  store i32 %265, i32* %136, align 16
  %266 = xor i32 %246, %204
  store i32 %266, i32* %137, align 4
  %267 = xor i32 %247, %203
  store i32 %267, i32* %138, align 8
  %268 = xor i32 %248, %202
  store i32 %268, i32* %139, align 4
  %269 = xor i32 %249, %201
  store i32 %269, i32* %140, align 16
  %270 = xor i32 %250, %200
  store i32 %270, i32* %141, align 4
  %271 = load i32, i32* %161, align 4
  %272 = load i32, i32* %142, align 16
  %273 = load i32, i32* %143, align 4
  %274 = load i32, i32* %162, align 8
  %275 = load i32, i32* %163, align 4
  %276 = load i32, i32* %164, align 16
  %277 = load i32, i32* %165, align 4
  %278 = load i32, i32* %166, align 8
  %279 = load i32, i32* %167, align 4
  %280 = load i32, i32* %168, align 16
  %281 = load i32, i32* %169, align 4
  %282 = xor i32 %272, %199
  %283 = xor i32 %273, %198
  %284 = xor i32 %274, %197
  %285 = xor i32 %275, %196
  %286 = xor i32 %276, %195
  %287 = xor i32 %277, %194
  %288 = xor i32 %278, %193
  %289 = xor i32 %279, %192
  %290 = xor i32 %280, %191
  %291 = xor i32 %281, %271
  %292 = and i32 %282, %230
  %293 = and i32 %283, %230
  %294 = and i32 %284, %230
  %295 = and i32 %285, %230
  %296 = and i32 %286, %230
  %297 = and i32 %287, %230
  %298 = and i32 %288, %230
  %299 = and i32 %289, %230
  %300 = and i32 %290, %230
  %301 = and i32 %291, %230
  %302 = xor i32 %292, %199
  store i32 %302, i32* %112, align 16
  %303 = xor i32 %293, %198
  store i32 %303, i32* %153, align 4
  %304 = xor i32 %294, %197
  store i32 %304, i32* %154, align 8
  %305 = xor i32 %295, %196
  store i32 %305, i32* %155, align 4
  %306 = xor i32 %296, %195
  store i32 %306, i32* %156, align 16
  %307 = xor i32 %297, %194
  store i32 %307, i32* %157, align 4
  %308 = xor i32 %298, %193
  store i32 %308, i32* %158, align 8
  %309 = xor i32 %299, %192
  store i32 %309, i32* %159, align 4
  %310 = xor i32 %300, %191
  store i32 %310, i32* %160, align 16
  %311 = xor i32 %301, %271
  store i32 %311, i32* %161, align 4
  %312 = xor i32 %292, %272
  store i32 %312, i32* %142, align 16
  %313 = xor i32 %293, %273
  store i32 %313, i32* %143, align 4
  %314 = xor i32 %294, %274
  store i32 %314, i32* %162, align 8
  %315 = xor i32 %295, %275
  store i32 %315, i32* %163, align 4
  %316 = xor i32 %296, %276
  store i32 %316, i32* %164, align 16
  %317 = xor i32 %297, %277
  store i32 %317, i32* %165, align 4
  %318 = xor i32 %298, %278
  store i32 %318, i32* %166, align 8
  %319 = xor i32 %299, %279
  store i32 %319, i32* %167, align 4
  %320 = xor i32 %300, %280
  store i32 %320, i32* %168, align 16
  %321 = xor i32 %301, %281
  store i32 %321, i32* %169, align 4
  %322 = sub i32 %261, %312
  %323 = sub i32 %262, %313
  %324 = sub i32 %263, %314
  %325 = sub i32 %264, %315
  %326 = sub i32 %265, %316
  %327 = sub i32 %266, %317
  %328 = sub i32 %267, %318
  %329 = sub i32 %268, %319
  %330 = sub i32 %269, %320
  %331 = sub i32 %270, %321
  store i32 %322, i32* %170, align 16
  store i32 %323, i32* %171, align 4
  store i32 %324, i32* %172, align 8
  store i32 %325, i32* %173, align 4
  store i32 %326, i32* %174, align 16
  store i32 %327, i32* %175, align 4
  store i32 %328, i32* %176, align 8
  store i32 %329, i32* %177, align 4
  store i32 %330, i32* %178, align 16
  store i32 %331, i32* %179, align 4
  %332 = sub i32 %251, %302
  %333 = sub i32 %252, %303
  %334 = sub i32 %253, %304
  %335 = sub i32 %254, %305
  %336 = sub i32 %255, %306
  %337 = sub i32 %256, %307
  %338 = sub i32 %257, %308
  %339 = sub i32 %258, %309
  %340 = sub i32 %259, %310
  %341 = sub i32 %260, %311
  store i32 %332, i32* %180, align 16
  store i32 %333, i32* %181, align 4
  store i32 %334, i32* %182, align 8
  store i32 %335, i32* %183, align 4
  store i32 %336, i32* %184, align 16
  store i32 %337, i32* %185, align 4
  store i32 %338, i32* %186, align 8
  store i32 %339, i32* %187, align 4
  store i32 %340, i32* %188, align 16
  store i32 %341, i32* %189, align 4
  %342 = add i32 %302, %251
  %343 = add i32 %303, %252
  %344 = add i32 %304, %253
  %345 = add i32 %305, %254
  %346 = add i32 %306, %255
  %347 = add i32 %307, %256
  %348 = add i32 %308, %257
  %349 = add i32 %309, %258
  %350 = add i32 %310, %259
  %351 = add i32 %311, %260
  store i32 %342, i32* %109, align 16
  store i32 %343, i32* %110, align 4
  store i32 %344, i32* %145, align 8
  store i32 %345, i32* %146, align 4
  store i32 %346, i32* %147, align 16
  store i32 %347, i32* %148, align 4
  store i32 %348, i32* %149, align 8
  store i32 %349, i32* %150, align 4
  store i32 %350, i32* %151, align 16
  store i32 %351, i32* %152, align 4
  %352 = add i32 %312, %261
  %353 = add i32 %313, %262
  %354 = add i32 %314, %263
  %355 = add i32 %315, %264
  %356 = add i32 %316, %265
  %357 = add i32 %317, %266
  %358 = add i32 %318, %267
  %359 = add i32 %319, %268
  %360 = add i32 %320, %269
  %361 = add i32 %321, %270
  store i32 %352, i32* %112, align 16
  store i32 %353, i32* %153, align 4
  store i32 %354, i32* %154, align 8
  store i32 %355, i32* %155, align 4
  store i32 %356, i32* %156, align 16
  store i32 %357, i32* %157, align 4
  store i32 %358, i32* %158, align 8
  store i32 %359, i32* %159, align 4
  store i32 %360, i32* %160, align 16
  store i32 %361, i32* %161, align 4
  call fastcc void @fe25519_mul(i32* nonnull %142, i32* nonnull %170, i32* nonnull %109)
  call fastcc void @fe25519_mul(i32* nonnull %112, i32* nonnull %112, i32* nonnull %180)
  call fastcc void @fe25519_sq(i32* nonnull %170, i32* nonnull %180)
  call fastcc void @fe25519_sq(i32* nonnull %180, i32* nonnull %109)
  %362 = load i32, i32* %142, align 16
  %363 = load i32, i32* %112, align 16
  %364 = add i32 %363, %362
  %365 = load i32, i32* %143, align 4
  %366 = load i32, i32* %153, align 4
  %367 = add i32 %366, %365
  %368 = load i32, i32* %162, align 8
  %369 = load i32, i32* %154, align 8
  %370 = add i32 %369, %368
  %371 = load i32, i32* %163, align 4
  %372 = load i32, i32* %155, align 4
  %373 = add i32 %372, %371
  %374 = load i32, i32* %164, align 16
  %375 = load i32, i32* %156, align 16
  %376 = add i32 %375, %374
  %377 = load i32, i32* %165, align 4
  %378 = load i32, i32* %157, align 4
  %379 = add i32 %378, %377
  %380 = load i32, i32* %166, align 8
  %381 = load i32, i32* %158, align 8
  %382 = add i32 %381, %380
  %383 = load i32, i32* %167, align 4
  %384 = load i32, i32* %159, align 4
  %385 = add i32 %384, %383
  %386 = load i32, i32* %168, align 16
  %387 = load i32, i32* %160, align 16
  %388 = add i32 %387, %386
  %389 = load i32, i32* %169, align 4
  %390 = load i32, i32* %161, align 4
  %391 = add i32 %390, %389
  store i32 %364, i32* %113, align 16
  store i32 %367, i32* %133, align 4
  store i32 %370, i32* %134, align 8
  store i32 %373, i32* %135, align 4
  store i32 %376, i32* %136, align 16
  store i32 %379, i32* %137, align 4
  store i32 %382, i32* %138, align 8
  store i32 %385, i32* %139, align 4
  store i32 %388, i32* %140, align 16
  store i32 %391, i32* %141, align 4
  %392 = sub i32 %362, %363
  %393 = sub i32 %365, %366
  %394 = sub i32 %368, %369
  %395 = sub i32 %371, %372
  %396 = sub i32 %374, %375
  %397 = sub i32 %377, %378
  %398 = sub i32 %380, %381
  %399 = sub i32 %383, %384
  %400 = sub i32 %386, %387
  %401 = sub i32 %389, %390
  store i32 %392, i32* %112, align 16
  store i32 %393, i32* %153, align 4
  store i32 %394, i32* %154, align 8
  store i32 %395, i32* %155, align 4
  store i32 %396, i32* %156, align 16
  store i32 %397, i32* %157, align 4
  store i32 %398, i32* %158, align 8
  store i32 %399, i32* %159, align 4
  store i32 %400, i32* %160, align 16
  store i32 %401, i32* %161, align 4
  call fastcc void @fe25519_mul(i32* nonnull %109, i32* nonnull %180, i32* nonnull %170)
  %402 = load i32, i32* %180, align 16
  %403 = load i32, i32* %170, align 16
  %404 = sub i32 %402, %403
  %405 = load i32, i32* %181, align 4
  %406 = load i32, i32* %171, align 4
  %407 = sub i32 %405, %406
  %408 = load i32, i32* %182, align 8
  %409 = load i32, i32* %172, align 8
  %410 = sub i32 %408, %409
  %411 = load i32, i32* %183, align 4
  %412 = load i32, i32* %173, align 4
  %413 = sub i32 %411, %412
  %414 = load i32, i32* %184, align 16
  %415 = load i32, i32* %174, align 16
  %416 = sub i32 %414, %415
  %417 = load i32, i32* %185, align 4
  %418 = load i32, i32* %175, align 4
  %419 = sub i32 %417, %418
  %420 = load i32, i32* %186, align 8
  %421 = load i32, i32* %176, align 8
  %422 = sub i32 %420, %421
  %423 = load i32, i32* %187, align 4
  %424 = load i32, i32* %177, align 4
  %425 = sub i32 %423, %424
  %426 = load i32, i32* %188, align 16
  %427 = load i32, i32* %178, align 16
  %428 = sub i32 %426, %427
  %429 = load i32, i32* %189, align 4
  %430 = load i32, i32* %179, align 4
  %431 = sub i32 %429, %430
  store i32 %404, i32* %180, align 16
  store i32 %407, i32* %181, align 4
  store i32 %410, i32* %182, align 8
  store i32 %413, i32* %183, align 4
  store i32 %416, i32* %184, align 16
  store i32 %419, i32* %185, align 4
  store i32 %422, i32* %186, align 8
  store i32 %425, i32* %187, align 4
  store i32 %428, i32* %188, align 16
  store i32 %431, i32* %189, align 4
  call fastcc void @fe25519_sq(i32* nonnull %112, i32* nonnull %112)
  %432 = sext i32 %404 to i64
  %433 = mul nsw i64 %432, 121666
  %434 = sext i32 %407 to i64
  %435 = mul nsw i64 %434, 121666
  %436 = sext i32 %410 to i64
  %437 = mul nsw i64 %436, 121666
  %438 = sext i32 %413 to i64
  %439 = mul nsw i64 %438, 121666
  %440 = sext i32 %416 to i64
  %441 = mul nsw i64 %440, 121666
  %442 = sext i32 %419 to i64
  %443 = mul nsw i64 %442, 121666
  %444 = sext i32 %422 to i64
  %445 = mul nsw i64 %444, 121666
  %446 = sext i32 %425 to i64
  %447 = mul nsw i64 %446, 121666
  %448 = sext i32 %428 to i64
  %449 = mul nsw i64 %448, 121666
  %450 = sext i32 %431 to i64
  %451 = mul nsw i64 %450, 121666
  %452 = add nsw i64 %451, 16777216
  %453 = ashr i64 %452, 25
  %454 = mul nsw i64 %453, 19
  %455 = add nsw i64 %433, %454
  %456 = and i64 %452, 4261412864
  %457 = add nsw i64 %435, 16777216
  %458 = ashr i64 %457, 25
  %459 = add nsw i64 %458, %437
  %460 = and i64 %457, 4261412864
  %461 = sub nsw i64 %435, %460
  %462 = add nsw i64 %439, 16777216
  %463 = ashr i64 %462, 25
  %464 = add nsw i64 %463, %441
  %465 = and i64 %462, 4261412864
  %466 = sub nsw i64 %439, %465
  %467 = add nsw i64 %443, 16777216
  %468 = ashr i64 %467, 25
  %469 = add nsw i64 %468, %445
  %470 = and i64 %467, 4261412864
  %471 = sub nsw i64 %443, %470
  %472 = add nsw i64 %447, 16777216
  %473 = ashr i64 %472, 25
  %474 = add nsw i64 %473, %449
  %475 = and i64 %472, 4261412864
  %476 = sub nsw i64 %447, %475
  %477 = add nsw i64 %455, 33554432
  %478 = lshr i64 %477, 26
  %479 = add nsw i64 %461, %478
  %480 = and i64 %477, 4227858432
  %481 = sub nsw i64 %455, %480
  %482 = add nsw i64 %459, 33554432
  %483 = lshr i64 %482, 26
  %484 = add nsw i64 %466, %483
  %485 = and i64 %482, 4227858432
  %486 = sub nsw i64 %459, %485
  %487 = add nsw i64 %464, 33554432
  %488 = lshr i64 %487, 26
  %489 = add nsw i64 %471, %488
  %490 = and i64 %487, 4227858432
  %491 = sub nsw i64 %464, %490
  %492 = add nsw i64 %469, 33554432
  %493 = lshr i64 %492, 26
  %494 = add nsw i64 %476, %493
  %495 = and i64 %492, 4227858432
  %496 = sub nsw i64 %469, %495
  %497 = add nsw i64 %474, 33554432
  %498 = lshr i64 %497, 26
  %499 = add nsw i64 %498, %451
  %500 = sub nsw i64 %499, %456
  %501 = and i64 %497, 4227858432
  %502 = sub nsw i64 %474, %501
  %503 = trunc i64 %481 to i32
  store i32 %503, i32* %142, align 16
  %504 = trunc i64 %479 to i32
  store i32 %504, i32* %143, align 4
  %505 = trunc i64 %486 to i32
  store i32 %505, i32* %162, align 8
  %506 = trunc i64 %484 to i32
  store i32 %506, i32* %163, align 4
  %507 = trunc i64 %491 to i32
  store i32 %507, i32* %164, align 16
  %508 = trunc i64 %489 to i32
  store i32 %508, i32* %165, align 4
  %509 = trunc i64 %496 to i32
  store i32 %509, i32* %166, align 8
  %510 = trunc i64 %494 to i32
  store i32 %510, i32* %167, align 4
  %511 = trunc i64 %502 to i32
  store i32 %511, i32* %168, align 16
  %512 = trunc i64 %500 to i32
  store i32 %512, i32* %169, align 4
  call fastcc void @fe25519_sq(i32* nonnull %113, i32* nonnull %113)
  %513 = load i32, i32* %170, align 16
  %514 = add i32 %513, %503
  %515 = load i32, i32* %171, align 4
  %516 = add i32 %515, %504
  %517 = load i32, i32* %172, align 8
  %518 = add i32 %517, %505
  %519 = load i32, i32* %173, align 4
  %520 = add i32 %519, %506
  %521 = load i32, i32* %174, align 16
  %522 = add i32 %521, %507
  %523 = load i32, i32* %175, align 4
  %524 = add i32 %523, %508
  %525 = load i32, i32* %176, align 8
  %526 = add i32 %525, %509
  %527 = load i32, i32* %177, align 4
  %528 = add i32 %527, %510
  %529 = load i32, i32* %178, align 16
  %530 = add i32 %529, %511
  %531 = load i32, i32* %179, align 4
  %532 = add i32 %531, %512
  store i32 %514, i32* %170, align 16
  store i32 %516, i32* %171, align 4
  store i32 %518, i32* %172, align 8
  store i32 %520, i32* %173, align 4
  store i32 %522, i32* %174, align 16
  store i32 %524, i32* %175, align 4
  store i32 %526, i32* %176, align 8
  store i32 %528, i32* %177, align 4
  store i32 %530, i32* %178, align 16
  store i32 %532, i32* %179, align 4
  call fastcc void @fe25519_mul(i32* nonnull %142, i32* nonnull %108, i32* nonnull %112)
  call fastcc void @fe25519_mul(i32* nonnull %112, i32* nonnull %180, i32* nonnull %170)
  %533 = icmp eq i32 %221, 0
  br i1 %533, label %565, label %534

534:                                              ; preds = %190
  %535 = add nsw i32 %221, -1
  %536 = load i32, i32* %109, align 16
  %537 = load i32, i32* %110, align 4
  %538 = load i32, i32* %145, align 8
  %539 = load i32, i32* %146, align 4
  %540 = load i32, i32* %147, align 16
  %541 = load i32, i32* %148, align 4
  %542 = load i32, i32* %149, align 8
  %543 = load i32, i32* %150, align 4
  %544 = load i32, i32* %151, align 16
  %545 = load i32, i32* %152, align 4
  %546 = load i32, i32* %113, align 16
  %547 = load i32, i32* %133, align 4
  %548 = load i32, i32* %134, align 8
  %549 = load i32, i32* %135, align 4
  %550 = load i32, i32* %136, align 16
  %551 = load i32, i32* %137, align 4
  %552 = load i32, i32* %138, align 8
  %553 = load i32, i32* %139, align 4
  %554 = load i32, i32* %140, align 16
  %555 = load i32, i32* %141, align 4
  %556 = load i32, i32* %112, align 16
  %557 = load i32, i32* %153, align 4
  %558 = load i32, i32* %154, align 8
  %559 = load i32, i32* %155, align 4
  %560 = load i32, i32* %156, align 16
  %561 = load i32, i32* %157, align 4
  %562 = load i32, i32* %158, align 8
  %563 = load i32, i32* %159, align 4
  %564 = load i32, i32* %160, align 16
  br label %190

565:                                              ; preds = %190
  %566 = sub nsw i32 0, %228
  %567 = load i32, i32* %109, align 16
  %568 = load i32, i32* %110, align 4
  %569 = load i32, i32* %145, align 8
  %570 = load i32, i32* %146, align 4
  %571 = load i32, i32* %147, align 16
  %572 = load i32, i32* %148, align 4
  %573 = load i32, i32* %149, align 8
  %574 = load i32, i32* %150, align 4
  %575 = load i32, i32* %151, align 16
  %576 = load i32, i32* %152, align 4
  %577 = load i32, i32* %113, align 16
  %578 = load i32, i32* %133, align 4
  %579 = load i32, i32* %134, align 8
  %580 = load i32, i32* %135, align 4
  %581 = load i32, i32* %136, align 16
  %582 = load i32, i32* %137, align 4
  %583 = load i32, i32* %138, align 8
  %584 = load i32, i32* %139, align 4
  %585 = load i32, i32* %140, align 16
  %586 = load i32, i32* %141, align 4
  %587 = xor i32 %577, %567
  %588 = xor i32 %578, %568
  %589 = xor i32 %579, %569
  %590 = xor i32 %580, %570
  %591 = xor i32 %581, %571
  %592 = xor i32 %582, %572
  %593 = xor i32 %583, %573
  %594 = xor i32 %584, %574
  %595 = xor i32 %585, %575
  %596 = xor i32 %586, %576
  %597 = and i32 %587, %566
  %598 = and i32 %588, %566
  %599 = and i32 %589, %566
  %600 = and i32 %590, %566
  %601 = and i32 %591, %566
  %602 = and i32 %592, %566
  %603 = and i32 %593, %566
  %604 = and i32 %594, %566
  %605 = and i32 %595, %566
  %606 = and i32 %596, %566
  %607 = xor i32 %597, %567
  store i32 %607, i32* %109, align 16
  %608 = xor i32 %598, %568
  store i32 %608, i32* %110, align 4
  %609 = xor i32 %599, %569
  store i32 %609, i32* %145, align 8
  %610 = xor i32 %600, %570
  store i32 %610, i32* %146, align 4
  %611 = xor i32 %601, %571
  store i32 %611, i32* %147, align 16
  %612 = xor i32 %602, %572
  store i32 %612, i32* %148, align 4
  %613 = xor i32 %603, %573
  store i32 %613, i32* %149, align 8
  %614 = xor i32 %604, %574
  store i32 %614, i32* %150, align 4
  %615 = xor i32 %605, %575
  store i32 %615, i32* %151, align 16
  %616 = xor i32 %606, %576
  store i32 %616, i32* %152, align 4
  %617 = xor i32 %597, %577
  store i32 %617, i32* %113, align 16
  %618 = xor i32 %598, %578
  store i32 %618, i32* %133, align 4
  %619 = xor i32 %599, %579
  store i32 %619, i32* %134, align 8
  %620 = xor i32 %600, %580
  store i32 %620, i32* %135, align 4
  %621 = xor i32 %601, %581
  store i32 %621, i32* %136, align 16
  %622 = xor i32 %602, %582
  store i32 %622, i32* %137, align 4
  %623 = xor i32 %603, %583
  store i32 %623, i32* %138, align 8
  %624 = xor i32 %604, %584
  store i32 %624, i32* %139, align 4
  %625 = xor i32 %605, %585
  store i32 %625, i32* %140, align 16
  %626 = xor i32 %606, %586
  store i32 %626, i32* %141, align 4
  %627 = load i32, i32* %112, align 16
  %628 = load i32, i32* %153, align 4
  %629 = load i32, i32* %154, align 8
  %630 = load i32, i32* %155, align 4
  %631 = load i32, i32* %156, align 16
  %632 = load i32, i32* %157, align 4
  %633 = load i32, i32* %158, align 8
  %634 = load i32, i32* %159, align 4
  %635 = load i32, i32* %160, align 16
  %636 = load i32, i32* %161, align 4
  %637 = load i32, i32* %142, align 16
  %638 = load i32, i32* %143, align 4
  %639 = load i32, i32* %162, align 8
  %640 = load i32, i32* %163, align 4
  %641 = load i32, i32* %164, align 16
  %642 = load i32, i32* %165, align 4
  %643 = load i32, i32* %166, align 8
  %644 = load i32, i32* %167, align 4
  %645 = load i32, i32* %168, align 16
  %646 = load i32, i32* %169, align 4
  %647 = xor i32 %637, %627
  %648 = xor i32 %638, %628
  %649 = xor i32 %639, %629
  %650 = xor i32 %640, %630
  %651 = xor i32 %641, %631
  %652 = xor i32 %642, %632
  %653 = xor i32 %643, %633
  %654 = xor i32 %644, %634
  %655 = xor i32 %645, %635
  %656 = xor i32 %646, %636
  %657 = and i32 %647, %566
  %658 = and i32 %648, %566
  %659 = and i32 %649, %566
  %660 = and i32 %650, %566
  %661 = and i32 %651, %566
  %662 = and i32 %652, %566
  %663 = and i32 %653, %566
  %664 = and i32 %654, %566
  %665 = and i32 %655, %566
  %666 = and i32 %656, %566
  %667 = xor i32 %657, %627
  store i32 %667, i32* %112, align 16
  %668 = xor i32 %658, %628
  store i32 %668, i32* %153, align 4
  %669 = xor i32 %659, %629
  store i32 %669, i32* %154, align 8
  %670 = xor i32 %660, %630
  store i32 %670, i32* %155, align 4
  %671 = xor i32 %661, %631
  store i32 %671, i32* %156, align 16
  %672 = xor i32 %662, %632
  store i32 %672, i32* %157, align 4
  %673 = xor i32 %663, %633
  store i32 %673, i32* %158, align 8
  %674 = xor i32 %664, %634
  store i32 %674, i32* %159, align 4
  %675 = xor i32 %665, %635
  store i32 %675, i32* %160, align 16
  %676 = xor i32 %666, %636
  store i32 %676, i32* %161, align 4
  %677 = xor i32 %657, %637
  store i32 %677, i32* %142, align 16
  %678 = xor i32 %658, %638
  store i32 %678, i32* %143, align 4
  %679 = xor i32 %659, %639
  store i32 %679, i32* %162, align 8
  %680 = xor i32 %660, %640
  store i32 %680, i32* %163, align 4
  %681 = xor i32 %661, %641
  store i32 %681, i32* %164, align 16
  %682 = xor i32 %662, %642
  store i32 %682, i32* %165, align 4
  %683 = xor i32 %663, %643
  store i32 %683, i32* %166, align 8
  %684 = xor i32 %664, %644
  store i32 %684, i32* %167, align 4
  %685 = xor i32 %665, %645
  store i32 %685, i32* %168, align 16
  %686 = xor i32 %666, %646
  store i32 %686, i32* %169, align 4
  call void @fe25519_invert(i32* nonnull %112, i32* nonnull %112) #5
  call fastcc void @fe25519_mul(i32* nonnull %109, i32* nonnull %109, i32* nonnull %112)
  call void @fe25519_tobytes(i8* nonnull %0, i32* nonnull %109) #5
  br label %687

687:                                              ; preds = %59, %565
  %688 = phi i32 [ 0, %565 ], [ -1, %59 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %17) #5
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %16) #5
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %15) #5
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %14) #5
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %13) #5
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %11) #5
  ret i32 %688
}

; Function Attrs: nounwind
define internal i32 @crypto_scalarmult_curve25519_ref10_base(i8* %0, i8* nocapture readonly %1) #0 {
  %3 = alloca [10 x i32], align 16
  %4 = alloca [10 x i32], align 16
  %5 = alloca %struct.ge25519_p3, align 4
  %6 = alloca [10 x i32], align 16
  %7 = bitcast %struct.ge25519_p3* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %7) #5
  %8 = bitcast [10 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %8) #5
  br label %9

9:                                                ; preds = %9, %2
  %10 = phi i32 [ 0, %2 ], [ %14, %9 ]
  %11 = getelementptr i8, i8* %1, i32 %10
  %12 = load i8, i8* %11, align 1
  %13 = getelementptr i8, i8* %0, i32 %10
  store i8 %12, i8* %13, align 1
  %14 = add nuw nsw i32 %10, 1
  %15 = icmp eq i32 %14, 32
  br i1 %15, label %16, label %9

16:                                               ; preds = %9
  %17 = load i8, i8* %0, align 1
  %18 = and i8 %17, -8
  store i8 %18, i8* %0, align 1
  %19 = getelementptr i8, i8* %0, i32 31
  %20 = load i8, i8* %19, align 1
  %21 = and i8 %20, 63
  %22 = or i8 %21, 64
  store i8 %22, i8* %19, align 1
  call void @ge25519_scalarmult_base(%struct.ge25519_p3* nonnull %5, i8* nonnull %0) #5
  %23 = getelementptr inbounds [10 x i32], [10 x i32]* %6, i32 0, i32 0
  %24 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %5, i32 0, i32 1, i32 0
  %25 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %5, i32 0, i32 2, i32 0
  %26 = bitcast [10 x i32]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %26) #5
  %27 = bitcast [10 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %27) #5
  %28 = getelementptr inbounds [10 x i32], [10 x i32]* %3, i32 0, i32 0
  %29 = load i32, i32* %25, align 4
  %30 = load i32, i32* %24, align 4
  %31 = add i32 %30, %29
  %32 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %5, i32 0, i32 2, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %5, i32 0, i32 1, i32 1
  %35 = load i32, i32* %34, align 4
  %36 = add i32 %35, %33
  %37 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %5, i32 0, i32 2, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %5, i32 0, i32 1, i32 2
  %40 = load i32, i32* %39, align 4
  %41 = add i32 %40, %38
  %42 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %5, i32 0, i32 2, i32 3
  %43 = load i32, i32* %42, align 4
  %44 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %5, i32 0, i32 1, i32 3
  %45 = load i32, i32* %44, align 4
  %46 = add i32 %45, %43
  %47 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %5, i32 0, i32 2, i32 4
  %48 = load i32, i32* %47, align 4
  %49 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %5, i32 0, i32 1, i32 4
  %50 = load i32, i32* %49, align 4
  %51 = add i32 %50, %48
  %52 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %5, i32 0, i32 2, i32 5
  %53 = load i32, i32* %52, align 4
  %54 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %5, i32 0, i32 1, i32 5
  %55 = load i32, i32* %54, align 4
  %56 = add i32 %55, %53
  %57 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %5, i32 0, i32 2, i32 6
  %58 = load i32, i32* %57, align 4
  %59 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %5, i32 0, i32 1, i32 6
  %60 = load i32, i32* %59, align 4
  %61 = add i32 %60, %58
  %62 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %5, i32 0, i32 2, i32 7
  %63 = load i32, i32* %62, align 4
  %64 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %5, i32 0, i32 1, i32 7
  %65 = load i32, i32* %64, align 4
  %66 = add i32 %65, %63
  %67 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %5, i32 0, i32 2, i32 8
  %68 = load i32, i32* %67, align 4
  %69 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %5, i32 0, i32 1, i32 8
  %70 = load i32, i32* %69, align 4
  %71 = add i32 %70, %68
  %72 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %5, i32 0, i32 2, i32 9
  %73 = load i32, i32* %72, align 4
  %74 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %5, i32 0, i32 1, i32 9
  %75 = load i32, i32* %74, align 4
  %76 = add i32 %75, %73
  store i32 %31, i32* %28, align 16
  %77 = getelementptr inbounds [10 x i32], [10 x i32]* %3, i32 0, i32 1
  store i32 %36, i32* %77, align 4
  %78 = getelementptr inbounds [10 x i32], [10 x i32]* %3, i32 0, i32 2
  store i32 %41, i32* %78, align 8
  %79 = getelementptr inbounds [10 x i32], [10 x i32]* %3, i32 0, i32 3
  store i32 %46, i32* %79, align 4
  %80 = getelementptr inbounds [10 x i32], [10 x i32]* %3, i32 0, i32 4
  store i32 %51, i32* %80, align 16
  %81 = getelementptr inbounds [10 x i32], [10 x i32]* %3, i32 0, i32 5
  store i32 %56, i32* %81, align 4
  %82 = getelementptr inbounds [10 x i32], [10 x i32]* %3, i32 0, i32 6
  store i32 %61, i32* %82, align 8
  %83 = getelementptr inbounds [10 x i32], [10 x i32]* %3, i32 0, i32 7
  store i32 %66, i32* %83, align 4
  %84 = getelementptr inbounds [10 x i32], [10 x i32]* %3, i32 0, i32 8
  store i32 %71, i32* %84, align 16
  %85 = getelementptr inbounds [10 x i32], [10 x i32]* %3, i32 0, i32 9
  store i32 %76, i32* %85, align 4
  %86 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 0
  %87 = sub i32 %29, %30
  %88 = sub i32 %33, %35
  %89 = sub i32 %38, %40
  %90 = sub i32 %43, %45
  %91 = sub i32 %48, %50
  %92 = sub i32 %53, %55
  %93 = sub i32 %58, %60
  %94 = sub i32 %63, %65
  %95 = sub i32 %68, %70
  %96 = sub i32 %73, %75
  store i32 %87, i32* %86, align 16
  %97 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 1
  store i32 %88, i32* %97, align 4
  %98 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 2
  store i32 %89, i32* %98, align 8
  %99 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 3
  store i32 %90, i32* %99, align 4
  %100 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 4
  store i32 %91, i32* %100, align 16
  %101 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 5
  store i32 %92, i32* %101, align 4
  %102 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 6
  store i32 %93, i32* %102, align 8
  %103 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 7
  store i32 %94, i32* %103, align 4
  %104 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 8
  store i32 %95, i32* %104, align 16
  %105 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 9
  store i32 %96, i32* %105, align 4
  call void @fe25519_invert(i32* nonnull %86, i32* nonnull %86) #5
  call fastcc void @fe25519_mul(i32* nonnull %23, i32* nonnull %28, i32* nonnull %86) #5
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %27) #5
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %26) #5
  call void @fe25519_tobytes(i8* nonnull %0, i32* nonnull %23) #5
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #1

declare void @fe25519_frombytes(i32* %0, i8* %1) local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind
define internal fastcc void @fe25519_mul(i32* nocapture %0, i32* nocapture readonly %1, i32* nocapture readonly %2) unnamed_addr #3 {
  %4 = load i32, i32* %1, align 4
  %5 = getelementptr i32, i32* %1, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr i32, i32* %1, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr i32, i32* %1, i32 3
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr i32, i32* %1, i32 4
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr i32, i32* %1, i32 5
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr i32, i32* %1, i32 6
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr i32, i32* %1, i32 7
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr i32, i32* %1, i32 8
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr i32, i32* %1, i32 9
  %22 = load i32, i32* %21, align 4
  %23 = load i32, i32* %2, align 4
  %24 = getelementptr i32, i32* %2, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = getelementptr i32, i32* %2, i32 2
  %27 = load i32, i32* %26, align 4
  %28 = getelementptr i32, i32* %2, i32 3
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr i32, i32* %2, i32 4
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr i32, i32* %2, i32 5
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr i32, i32* %2, i32 6
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr i32, i32* %2, i32 7
  %37 = load i32, i32* %36, align 4
  %38 = getelementptr i32, i32* %2, i32 8
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr i32, i32* %2, i32 9
  %41 = load i32, i32* %40, align 4
  %42 = mul i32 %25, 19
  %43 = mul i32 %27, 19
  %44 = mul i32 %29, 19
  %45 = mul i32 %31, 19
  %46 = mul i32 %33, 19
  %47 = mul i32 %35, 19
  %48 = mul i32 %37, 19
  %49 = mul i32 %39, 19
  %50 = mul i32 %41, 19
  %51 = shl i32 %6, 1
  %52 = shl i32 %10, 1
  %53 = shl i32 %14, 1
  %54 = shl i32 %18, 1
  %55 = shl i32 %22, 1
  %56 = sext i32 %4 to i64
  %57 = sext i32 %23 to i64
  %58 = mul nsw i64 %57, %56
  %59 = sext i32 %25 to i64
  %60 = mul nsw i64 %59, %56
  %61 = sext i32 %27 to i64
  %62 = mul nsw i64 %61, %56
  %63 = sext i32 %29 to i64
  %64 = mul nsw i64 %63, %56
  %65 = sext i32 %31 to i64
  %66 = mul nsw i64 %65, %56
  %67 = sext i32 %33 to i64
  %68 = mul nsw i64 %67, %56
  %69 = sext i32 %35 to i64
  %70 = mul nsw i64 %69, %56
  %71 = sext i32 %37 to i64
  %72 = mul nsw i64 %71, %56
  %73 = sext i32 %39 to i64
  %74 = mul nsw i64 %73, %56
  %75 = sext i32 %41 to i64
  %76 = mul nsw i64 %75, %56
  %77 = sext i32 %6 to i64
  %78 = mul nsw i64 %57, %77
  %79 = sext i32 %51 to i64
  %80 = mul nsw i64 %59, %79
  %81 = mul nsw i64 %61, %77
  %82 = mul nsw i64 %63, %79
  %83 = mul nsw i64 %65, %77
  %84 = mul nsw i64 %67, %79
  %85 = mul nsw i64 %69, %77
  %86 = mul nsw i64 %71, %79
  %87 = mul nsw i64 %73, %77
  %88 = sext i32 %50 to i64
  %89 = mul nsw i64 %88, %79
  %90 = sext i32 %8 to i64
  %91 = mul nsw i64 %57, %90
  %92 = mul nsw i64 %59, %90
  %93 = mul nsw i64 %61, %90
  %94 = mul nsw i64 %63, %90
  %95 = mul nsw i64 %65, %90
  %96 = mul nsw i64 %67, %90
  %97 = mul nsw i64 %69, %90
  %98 = mul nsw i64 %71, %90
  %99 = sext i32 %49 to i64
  %100 = mul nsw i64 %99, %90
  %101 = mul nsw i64 %88, %90
  %102 = sext i32 %10 to i64
  %103 = mul nsw i64 %57, %102
  %104 = sext i32 %52 to i64
  %105 = mul nsw i64 %59, %104
  %106 = mul nsw i64 %61, %102
  %107 = mul nsw i64 %63, %104
  %108 = mul nsw i64 %65, %102
  %109 = mul nsw i64 %67, %104
  %110 = mul nsw i64 %69, %102
  %111 = sext i32 %48 to i64
  %112 = mul nsw i64 %111, %104
  %113 = mul nsw i64 %99, %102
  %114 = mul nsw i64 %88, %104
  %115 = sext i32 %12 to i64
  %116 = mul nsw i64 %57, %115
  %117 = mul nsw i64 %59, %115
  %118 = mul nsw i64 %61, %115
  %119 = mul nsw i64 %63, %115
  %120 = mul nsw i64 %65, %115
  %121 = mul nsw i64 %67, %115
  %122 = sext i32 %47 to i64
  %123 = mul nsw i64 %122, %115
  %124 = mul nsw i64 %111, %115
  %125 = mul nsw i64 %99, %115
  %126 = mul nsw i64 %88, %115
  %127 = sext i32 %14 to i64
  %128 = mul nsw i64 %57, %127
  %129 = sext i32 %53 to i64
  %130 = mul nsw i64 %59, %129
  %131 = mul nsw i64 %61, %127
  %132 = mul nsw i64 %63, %129
  %133 = mul nsw i64 %65, %127
  %134 = sext i32 %46 to i64
  %135 = mul nsw i64 %134, %129
  %136 = mul nsw i64 %122, %127
  %137 = mul nsw i64 %111, %129
  %138 = mul nsw i64 %99, %127
  %139 = mul nsw i64 %88, %129
  %140 = sext i32 %16 to i64
  %141 = mul nsw i64 %57, %140
  %142 = mul nsw i64 %59, %140
  %143 = mul nsw i64 %61, %140
  %144 = mul nsw i64 %63, %140
  %145 = sext i32 %45 to i64
  %146 = mul nsw i64 %145, %140
  %147 = mul nsw i64 %134, %140
  %148 = mul nsw i64 %122, %140
  %149 = mul nsw i64 %111, %140
  %150 = mul nsw i64 %99, %140
  %151 = mul nsw i64 %88, %140
  %152 = sext i32 %18 to i64
  %153 = mul nsw i64 %57, %152
  %154 = sext i32 %54 to i64
  %155 = mul nsw i64 %59, %154
  %156 = mul nsw i64 %61, %152
  %157 = sext i32 %44 to i64
  %158 = mul nsw i64 %157, %154
  %159 = mul nsw i64 %145, %152
  %160 = mul nsw i64 %134, %154
  %161 = mul nsw i64 %122, %152
  %162 = mul nsw i64 %111, %154
  %163 = mul nsw i64 %99, %152
  %164 = mul nsw i64 %88, %154
  %165 = sext i32 %20 to i64
  %166 = mul nsw i64 %57, %165
  %167 = mul nsw i64 %59, %165
  %168 = sext i32 %43 to i64
  %169 = mul nsw i64 %168, %165
  %170 = mul nsw i64 %157, %165
  %171 = mul nsw i64 %145, %165
  %172 = mul nsw i64 %134, %165
  %173 = mul nsw i64 %122, %165
  %174 = mul nsw i64 %111, %165
  %175 = mul nsw i64 %99, %165
  %176 = mul nsw i64 %88, %165
  %177 = sext i32 %22 to i64
  %178 = mul nsw i64 %57, %177
  %179 = sext i32 %55 to i64
  %180 = sext i32 %42 to i64
  %181 = mul nsw i64 %180, %179
  %182 = mul nsw i64 %168, %177
  %183 = mul nsw i64 %157, %179
  %184 = mul nsw i64 %145, %177
  %185 = mul nsw i64 %134, %179
  %186 = mul nsw i64 %122, %177
  %187 = mul nsw i64 %111, %179
  %188 = mul nsw i64 %99, %177
  %189 = mul nsw i64 %88, %179
  %190 = add i64 %181, %58
  %191 = add i64 %190, %169
  %192 = add i64 %191, %158
  %193 = add i64 %192, %146
  %194 = add i64 %193, %135
  %195 = add i64 %194, %123
  %196 = add i64 %195, %112
  %197 = add i64 %196, %100
  %198 = add i64 %197, %89
  %199 = add i64 %60, %78
  %200 = add i64 %105, %116
  %201 = add i64 %200, %93
  %202 = add i64 %201, %82
  %203 = add i64 %202, %66
  %204 = add i64 %203, %185
  %205 = add i64 %204, %173
  %206 = add i64 %205, %162
  %207 = add i64 %206, %150
  %208 = add i64 %207, %139
  %209 = add i64 %198, 33554432
  %210 = ashr i64 %209, 26
  %211 = add i64 %199, %182
  %212 = add i64 %211, %170
  %213 = add i64 %212, %159
  %214 = add i64 %213, %147
  %215 = add i64 %214, %136
  %216 = add i64 %215, %124
  %217 = add i64 %216, %113
  %218 = add i64 %217, %101
  %219 = add i64 %218, %210
  %220 = and i64 %209, -67108864
  %221 = sub i64 %198, %220
  %222 = add i64 %208, 33554432
  %223 = ashr i64 %222, 26
  %224 = add i64 %117, %128
  %225 = add i64 %224, %106
  %226 = add i64 %225, %94
  %227 = add i64 %226, %83
  %228 = add i64 %227, %68
  %229 = add i64 %228, %186
  %230 = add i64 %229, %174
  %231 = add i64 %230, %163
  %232 = add i64 %231, %151
  %233 = add i64 %232, %223
  %234 = and i64 %222, -67108864
  %235 = sub i64 %208, %234
  %236 = add i64 %219, 16777216
  %237 = ashr i64 %236, 25
  %238 = add i64 %80, %91
  %239 = add i64 %238, %62
  %240 = add i64 %239, %183
  %241 = add i64 %240, %171
  %242 = add i64 %241, %160
  %243 = add i64 %242, %148
  %244 = add i64 %243, %137
  %245 = add i64 %244, %125
  %246 = add i64 %245, %114
  %247 = add i64 %246, %237
  %248 = and i64 %236, 4261412864
  %249 = sub i64 %219, %248
  %250 = add i64 %233, 16777216
  %251 = ashr i64 %250, 25
  %252 = add i64 %130, %141
  %253 = add i64 %252, %118
  %254 = add i64 %253, %107
  %255 = add i64 %254, %95
  %256 = add i64 %255, %84
  %257 = add i64 %256, %70
  %258 = add i64 %257, %187
  %259 = add i64 %258, %175
  %260 = add i64 %259, %164
  %261 = add i64 %260, %251
  %262 = and i64 %250, 4261412864
  %263 = sub i64 %233, %262
  %264 = add i64 %247, 33554432
  %265 = ashr i64 %264, 26
  %266 = add i64 %92, %103
  %267 = add i64 %266, %81
  %268 = add i64 %267, %64
  %269 = add i64 %268, %184
  %270 = add i64 %269, %172
  %271 = add i64 %270, %161
  %272 = add i64 %271, %149
  %273 = add i64 %272, %138
  %274 = add i64 %273, %126
  %275 = add i64 %274, %265
  %276 = and i64 %264, 4227858432
  %277 = sub i64 %247, %276
  %278 = add i64 %261, 33554432
  %279 = ashr i64 %278, 26
  %280 = add i64 %142, %153
  %281 = add i64 %280, %131
  %282 = add i64 %281, %119
  %283 = add i64 %282, %108
  %284 = add i64 %283, %96
  %285 = add i64 %284, %85
  %286 = add i64 %285, %72
  %287 = add i64 %286, %188
  %288 = add i64 %287, %176
  %289 = add i64 %288, %279
  %290 = and i64 %278, 4227858432
  %291 = sub i64 %261, %290
  %292 = add i64 %275, 16777216
  %293 = ashr i64 %292, 25
  %294 = add i64 %293, %235
  %295 = and i64 %292, 4261412864
  %296 = sub i64 %275, %295
  %297 = add i64 %289, 16777216
  %298 = ashr i64 %297, 25
  %299 = add i64 %155, %166
  %300 = add i64 %299, %143
  %301 = add i64 %300, %132
  %302 = add i64 %301, %120
  %303 = add i64 %302, %109
  %304 = add i64 %303, %97
  %305 = add i64 %304, %86
  %306 = add i64 %305, %74
  %307 = add i64 %306, %189
  %308 = add i64 %307, %298
  %309 = and i64 %297, 4261412864
  %310 = sub i64 %289, %309
  %311 = add i64 %294, 33554432
  %312 = lshr i64 %311, 26
  %313 = add i64 %263, %312
  %314 = and i64 %311, 4227858432
  %315 = sub i64 %294, %314
  %316 = add i64 %308, 33554432
  %317 = ashr i64 %316, 26
  %318 = add i64 %167, %178
  %319 = add i64 %318, %156
  %320 = add i64 %319, %144
  %321 = add i64 %320, %133
  %322 = add i64 %321, %121
  %323 = add i64 %322, %110
  %324 = add i64 %323, %98
  %325 = add i64 %324, %87
  %326 = add i64 %325, %76
  %327 = add i64 %326, %317
  %328 = and i64 %316, 4227858432
  %329 = sub i64 %308, %328
  %330 = add i64 %327, 16777216
  %331 = ashr i64 %330, 25
  %332 = mul nsw i64 %331, 19
  %333 = add i64 %332, %221
  %334 = and i64 %330, 4261412864
  %335 = sub i64 %327, %334
  %336 = add i64 %333, 33554432
  %337 = lshr i64 %336, 26
  %338 = add i64 %249, %337
  %339 = and i64 %336, 4227858432
  %340 = sub i64 %333, %339
  %341 = trunc i64 %340 to i32
  store i32 %341, i32* %0, align 4
  %342 = trunc i64 %338 to i32
  %343 = getelementptr i32, i32* %0, i32 1
  store i32 %342, i32* %343, align 4
  %344 = trunc i64 %277 to i32
  %345 = getelementptr i32, i32* %0, i32 2
  store i32 %344, i32* %345, align 4
  %346 = trunc i64 %296 to i32
  %347 = getelementptr i32, i32* %0, i32 3
  store i32 %346, i32* %347, align 4
  %348 = trunc i64 %315 to i32
  %349 = getelementptr i32, i32* %0, i32 4
  store i32 %348, i32* %349, align 4
  %350 = trunc i64 %313 to i32
  %351 = getelementptr i32, i32* %0, i32 5
  store i32 %350, i32* %351, align 4
  %352 = trunc i64 %291 to i32
  %353 = getelementptr i32, i32* %0, i32 6
  store i32 %352, i32* %353, align 4
  %354 = trunc i64 %310 to i32
  %355 = getelementptr i32, i32* %0, i32 7
  store i32 %354, i32* %355, align 4
  %356 = trunc i64 %329 to i32
  %357 = getelementptr i32, i32* %0, i32 8
  store i32 %356, i32* %357, align 4
  %358 = trunc i64 %335 to i32
  %359 = getelementptr i32, i32* %0, i32 9
  store i32 %358, i32* %359, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind
define internal fastcc void @fe25519_sq(i32* nocapture %0, i32* nocapture readonly %1) unnamed_addr #3 {
  %3 = load i32, i32* %1, align 4
  %4 = getelementptr i32, i32* %1, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr i32, i32* %1, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr i32, i32* %1, i32 3
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr i32, i32* %1, i32 4
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr i32, i32* %1, i32 5
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr i32, i32* %1, i32 6
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr i32, i32* %1, i32 7
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr i32, i32* %1, i32 8
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr i32, i32* %1, i32 9
  %21 = load i32, i32* %20, align 4
  %22 = shl i32 %3, 1
  %23 = shl i32 %5, 1
  %24 = shl i32 %7, 1
  %25 = shl i32 %9, 1
  %26 = shl i32 %11, 1
  %27 = shl i32 %13, 1
  %28 = shl i32 %15, 1
  %29 = shl i32 %17, 1
  %30 = mul i32 %13, 38
  %31 = mul i32 %15, 19
  %32 = mul i32 %17, 38
  %33 = mul i32 %19, 19
  %34 = mul i32 %21, 38
  %35 = sext i32 %3 to i64
  %36 = mul nsw i64 %35, %35
  %37 = sext i32 %22 to i64
  %38 = sext i32 %5 to i64
  %39 = mul nsw i64 %37, %38
  %40 = sext i32 %7 to i64
  %41 = mul nsw i64 %40, %37
  %42 = sext i32 %9 to i64
  %43 = mul nsw i64 %42, %37
  %44 = sext i32 %11 to i64
  %45 = mul nsw i64 %44, %37
  %46 = sext i32 %13 to i64
  %47 = mul nsw i64 %46, %37
  %48 = sext i32 %15 to i64
  %49 = mul nsw i64 %48, %37
  %50 = sext i32 %17 to i64
  %51 = mul nsw i64 %50, %37
  %52 = sext i32 %19 to i64
  %53 = mul nsw i64 %52, %37
  %54 = sext i32 %21 to i64
  %55 = mul nsw i64 %54, %37
  %56 = sext i32 %23 to i64
  %57 = mul nsw i64 %56, %38
  %58 = mul nsw i64 %56, %40
  %59 = sext i32 %25 to i64
  %60 = mul nsw i64 %59, %56
  %61 = mul nsw i64 %44, %56
  %62 = sext i32 %27 to i64
  %63 = mul nsw i64 %62, %56
  %64 = mul nsw i64 %48, %56
  %65 = sext i32 %29 to i64
  %66 = mul nsw i64 %65, %56
  %67 = mul nsw i64 %52, %56
  %68 = sext i32 %34 to i64
  %69 = mul nsw i64 %68, %56
  %70 = mul nsw i64 %40, %40
  %71 = sext i32 %24 to i64
  %72 = mul nsw i64 %71, %42
  %73 = mul nsw i64 %44, %71
  %74 = mul nsw i64 %46, %71
  %75 = mul nsw i64 %48, %71
  %76 = mul nsw i64 %50, %71
  %77 = sext i32 %33 to i64
  %78 = mul nsw i64 %77, %71
  %79 = mul nsw i64 %68, %40
  %80 = mul nsw i64 %59, %42
  %81 = mul nsw i64 %59, %44
  %82 = mul nsw i64 %62, %59
  %83 = mul nsw i64 %48, %59
  %84 = sext i32 %32 to i64
  %85 = mul nsw i64 %84, %59
  %86 = mul nsw i64 %77, %59
  %87 = mul nsw i64 %68, %59
  %88 = mul nsw i64 %44, %44
  %89 = sext i32 %26 to i64
  %90 = mul nsw i64 %89, %46
  %91 = sext i32 %31 to i64
  %92 = mul nsw i64 %91, %89
  %93 = mul nsw i64 %84, %44
  %94 = mul nsw i64 %77, %89
  %95 = mul nsw i64 %68, %44
  %96 = sext i32 %30 to i64
  %97 = mul nsw i64 %96, %46
  %98 = mul nsw i64 %91, %62
  %99 = mul nsw i64 %84, %62
  %100 = mul nsw i64 %77, %62
  %101 = mul nsw i64 %68, %62
  %102 = mul nsw i64 %91, %48
  %103 = mul nsw i64 %84, %48
  %104 = sext i32 %28 to i64
  %105 = mul nsw i64 %77, %104
  %106 = mul nsw i64 %68, %48
  %107 = mul nsw i64 %84, %50
  %108 = mul nsw i64 %77, %65
  %109 = mul nsw i64 %68, %65
  %110 = mul nsw i64 %77, %52
  %111 = mul nsw i64 %68, %52
  %112 = mul nsw i64 %68, %54
  %113 = add i64 %97, %36
  %114 = add i64 %113, %92
  %115 = add i64 %114, %85
  %116 = add i64 %115, %78
  %117 = add i64 %116, %69
  %118 = add i64 %41, %57
  %119 = add i64 %43, %58
  %120 = add i64 %60, %70
  %121 = add i64 %120, %45
  %122 = add i64 %121, %107
  %123 = add i64 %122, %105
  %124 = add i64 %123, %101
  %125 = add i64 %117, 33554432
  %126 = ashr i64 %125, 26
  %127 = add i64 %98, %39
  %128 = add i64 %127, %93
  %129 = add i64 %128, %86
  %130 = add i64 %129, %79
  %131 = add i64 %130, %126
  %132 = and i64 %125, -67108864
  %133 = sub i64 %117, %132
  %134 = add i64 %124, 33554432
  %135 = ashr i64 %134, 26
  %136 = add i64 %61, %72
  %137 = add i64 %136, %47
  %138 = add i64 %137, %108
  %139 = add i64 %138, %106
  %140 = add i64 %139, %135
  %141 = and i64 %134, -67108864
  %142 = sub i64 %124, %141
  %143 = add i64 %131, 16777216
  %144 = ashr i64 %143, 25
  %145 = add i64 %118, %102
  %146 = add i64 %145, %99
  %147 = add i64 %146, %94
  %148 = add i64 %147, %87
  %149 = add i64 %148, %144
  %150 = and i64 %143, 4261412864
  %151 = sub i64 %131, %150
  %152 = add i64 %140, 16777216
  %153 = ashr i64 %152, 25
  %154 = add i64 %80, %73
  %155 = add i64 %154, %63
  %156 = add i64 %155, %49
  %157 = add i64 %156, %110
  %158 = add i64 %157, %109
  %159 = add i64 %158, %153
  %160 = and i64 %152, 4261412864
  %161 = sub i64 %140, %160
  %162 = add i64 %149, 33554432
  %163 = ashr i64 %162, 26
  %164 = add i64 %119, %103
  %165 = add i64 %164, %100
  %166 = add i64 %165, %95
  %167 = add i64 %166, %163
  %168 = and i64 %162, 4227858432
  %169 = sub i64 %149, %168
  %170 = add i64 %159, 33554432
  %171 = ashr i64 %170, 26
  %172 = add i64 %74, %81
  %173 = add i64 %172, %64
  %174 = add i64 %173, %51
  %175 = add i64 %174, %111
  %176 = add i64 %175, %171
  %177 = and i64 %170, 4227858432
  %178 = sub i64 %159, %177
  %179 = add i64 %167, 16777216
  %180 = ashr i64 %179, 25
  %181 = add i64 %180, %142
  %182 = and i64 %179, 4261412864
  %183 = sub i64 %167, %182
  %184 = add i64 %176, 16777216
  %185 = ashr i64 %184, 25
  %186 = add i64 %75, %88
  %187 = add i64 %186, %82
  %188 = add i64 %187, %66
  %189 = add i64 %188, %53
  %190 = add i64 %189, %112
  %191 = add i64 %190, %185
  %192 = and i64 %184, 4261412864
  %193 = sub i64 %176, %192
  %194 = add i64 %181, 33554432
  %195 = lshr i64 %194, 26
  %196 = add i64 %161, %195
  %197 = and i64 %194, 4227858432
  %198 = sub i64 %181, %197
  %199 = add i64 %191, 33554432
  %200 = ashr i64 %199, 26
  %201 = add i64 %83, %90
  %202 = add i64 %201, %76
  %203 = add i64 %202, %67
  %204 = add i64 %203, %55
  %205 = add i64 %204, %200
  %206 = and i64 %199, 4227858432
  %207 = sub i64 %191, %206
  %208 = add i64 %205, 16777216
  %209 = ashr i64 %208, 25
  %210 = mul nsw i64 %209, 19
  %211 = add i64 %210, %133
  %212 = and i64 %208, 4261412864
  %213 = sub i64 %205, %212
  %214 = add i64 %211, 33554432
  %215 = lshr i64 %214, 26
  %216 = add i64 %151, %215
  %217 = and i64 %214, 4227858432
  %218 = sub i64 %211, %217
  %219 = trunc i64 %218 to i32
  store i32 %219, i32* %0, align 4
  %220 = trunc i64 %216 to i32
  %221 = getelementptr i32, i32* %0, i32 1
  store i32 %220, i32* %221, align 4
  %222 = trunc i64 %169 to i32
  %223 = getelementptr i32, i32* %0, i32 2
  store i32 %222, i32* %223, align 4
  %224 = trunc i64 %183 to i32
  %225 = getelementptr i32, i32* %0, i32 3
  store i32 %224, i32* %225, align 4
  %226 = trunc i64 %198 to i32
  %227 = getelementptr i32, i32* %0, i32 4
  store i32 %226, i32* %227, align 4
  %228 = trunc i64 %196 to i32
  %229 = getelementptr i32, i32* %0, i32 5
  store i32 %228, i32* %229, align 4
  %230 = trunc i64 %178 to i32
  %231 = getelementptr i32, i32* %0, i32 6
  store i32 %230, i32* %231, align 4
  %232 = trunc i64 %193 to i32
  %233 = getelementptr i32, i32* %0, i32 7
  store i32 %232, i32* %233, align 4
  %234 = trunc i64 %207 to i32
  %235 = getelementptr i32, i32* %0, i32 8
  store i32 %234, i32* %235, align 4
  %236 = trunc i64 %213 to i32
  %237 = getelementptr i32, i32* %0, i32 9
  store i32 %236, i32* %237, align 4
  ret void
}

declare void @fe25519_invert(i32* %0, i32* %1) local_unnamed_addr #2

declare void @fe25519_tobytes(i8* %0, i32* %1) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #1

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #4

declare void @ge25519_scalarmult_base(%struct.ge25519_p3* %0, i8* %1) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly %0, i8 %1, i64 %2, i1 immarg %3) #4

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind willreturn writeonly }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %19 = phi i8 [ 0, %3 ], [ %56, %18 ]
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = phi i8 [ 0, %3 ], [ %52, %18 ]
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = phi i8 [ 0, %3 ], [ %48, %18 ]
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = phi i8 [ 0, %3 ], [ %44, %18 ]
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = phi i8 [ 0, %3 ], [ %40, %18 ]
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = phi i8 [ 0, %3 ], [ %36, %18 ]
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = phi i8 [ 0, %3 ], [ %32, %18 ]
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = phi i32 [ 0, %3 ], [ %57, %18 ]
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,31))
infer %0

; *****
; For LLVM instruction:
;  %28 = load i8, i8* %27, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i8, i8* %29, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %31 = xor i8 %30, %28
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %32 = or i8 %31, %25
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3
infer %4

; *****
; For LLVM instruction:
;  %34 = load i8, i8* %33, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %35 = xor i8 %34, %28
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %36 = or i8 %35, %24
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3
infer %4

; *****
; For LLVM instruction:
;  %38 = load i8, i8* %37, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %39 = xor i8 %38, %28
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %40 = or i8 %39, %23
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3
infer %4

; *****
; For LLVM instruction:
;  %42 = load i8, i8* %41, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %43 = xor i8 %42, %28
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %44 = or i8 %43, %22
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3
infer %4

; *****
; For LLVM instruction:
;  %46 = load i8, i8* %45, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %47 = xor i8 %46, %28
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %48 = or i8 %47, %21
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3
infer %4

; *****
; For LLVM instruction:
;  %50 = load i8, i8* %49, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %51 = xor i8 %50, %28
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %52 = or i8 %51, %20
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3
infer %4

; *****
; For LLVM instruction:
;  %54 = load i8, i8* %53, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %55 = xor i8 %54, %28
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %56 = or i8 %55, %19
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3
infer %4

; *****
; For LLVM instruction:
;  %57 = add nuw nsw i32 %26, 1
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,31))
%1:i32 = addnw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %58 = icmp eq i32 %57, 31
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,31))
%1:i32 = addnw 1:i32, %0 (hasExternalUses)
%2:i1 = eq 31:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %61 = load i8, i8* %60, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=01111111)

; *****
; For LLVM instruction:
;  %62 = and i8 %61, 127
; Looking for a replacement for:
%0:i8 = var
%1:i8 = and 127:i8, %0
infer %1

; *****
; For LLVM instruction:
;  %63 = or i8 %62, %32
; Looking for a replacement for:
%0:i8 = var
%1:i8 = and 127:i8, %0 (hasExternalUses)
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = xor %3, %4
%6:i8 = or %2, %5 (hasExternalUses)
%7:i8 = or %1, %6
infer %7

; *****
; For LLVM instruction:
;  %64 = or i8 %62, %36
; Looking for a replacement for:
%0:i8 = var
%1:i8 = and 127:i8, %0 (hasExternalUses)
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = xor %3, %4
%6:i8 = or %2, %5 (hasExternalUses)
%7:i8 = or %1, %6
infer %7

; *****
; For LLVM instruction:
;  %65 = or i8 %62, %40
; Looking for a replacement for:
%0:i8 = var
%1:i8 = and 127:i8, %0 (hasExternalUses)
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = xor %3, %4
%6:i8 = or %2, %5 (hasExternalUses)
%7:i8 = or %1, %6
infer %7

; *****
; For LLVM instruction:
;  %66 = xor i8 %62, 87
; Looking for a replacement for:
%0:i8 = var
%1:i8 = and 127:i8, %0 (hasExternalUses)
%2:i8 = xor 87:i8, %1
infer %2

; *****
; For LLVM instruction:
;  %67 = or i8 %66, %44
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3 (hasExternalUses)
%5:i8 = var
%6:i8 = and 127:i8, %5 (hasExternalUses)
%7:i8 = xor 87:i8, %6
%8:i8 = or %4, %7
infer %8

; *****
; For LLVM instruction:
;  %68 = xor i8 %62, 127
; Looking for a replacement for:
%0:i8 = var
%1:i8 = and 127:i8, %0 (hasExternalUses)
%2:i8 = xor 127:i8, %1
infer %2

; *****
; For LLVM instruction:
;  %69 = or i8 %68, %48
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3 (hasExternalUses)
%5:i8 = var
%6:i8 = and 127:i8, %5 (hasExternalUses)
%7:i8 = xor 127:i8, %6 (hasExternalUses)
%8:i8 = or %4, %7
infer %8

; *****
; For LLVM instruction:
;  %70 = or i8 %68, %52
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3 (hasExternalUses)
%5:i8 = var
%6:i8 = and 127:i8, %5 (hasExternalUses)
%7:i8 = xor 127:i8, %6 (hasExternalUses)
%8:i8 = or %4, %7
infer %8

; *****
; For LLVM instruction:
;  %71 = or i8 %68, %56
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3 (hasExternalUses)
%5:i8 = var
%6:i8 = and 127:i8, %5 (hasExternalUses)
%7:i8 = xor 127:i8, %6 (hasExternalUses)
%8:i8 = or %4, %7
infer %8

; *****
; For LLVM instruction:
;  %72 = zext i8 %63 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i8 = and 127:i8, %0 (hasExternalUses)
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = xor %3, %4
%6:i8 = or %2, %5 (hasExternalUses)
%7:i8 = or %1, %6
%8:i32 = zext %7
infer %8 (demandedBits=00000000000000000000000111111111)

; *****
; For LLVM instruction:
;  %73 = add nsw i32 %72, -1
; Looking for a replacement for:
%0:i8 = var
%1:i8 = and 127:i8, %0 (hasExternalUses)
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = xor %3, %4
%6:i8 = or %2, %5 (hasExternalUses)
%7:i8 = or %1, %6
%8:i32 = zext %7
%9:i32 = addnsw 4294967295:i32, %8
infer %9 (demandedBits=00000000000000000000000100000000)

; *****
; For LLVM instruction:
;  %74 = zext i8 %64 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i8 = and 127:i8, %0 (hasExternalUses)
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = xor %3, %4
%6:i8 = or %2, %5 (hasExternalUses)
%7:i8 = or %1, %6
%8:i32 = zext %7
infer %8 (demandedBits=00000000000000000000000111111111)

; *****
; For LLVM instruction:
;  %75 = add nsw i32 %74, -1
; Looking for a replacement for:
%0:i8 = var
%1:i8 = and 127:i8, %0 (hasExternalUses)
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = xor %3, %4
%6:i8 = or %2, %5 (hasExternalUses)
%7:i8 = or %1, %6
%8:i32 = zext %7
%9:i32 = addnsw 4294967295:i32, %8
infer %9 (demandedBits=00000000000000000000000100000000)

; *****
; For LLVM instruction:
;  %76 = or i32 %75, %73
; Looking for a replacement for:
%0:i8 = var
%1:i8 = and 127:i8, %0 (hasExternalUses)
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = xor %3, %4
%6:i8 = or %2, %5 (hasExternalUses)
%7:i8 = or %1, %6
%8:i32 = zext %7
%9:i32 = addnsw 4294967295:i32, %8
%10:i8 = var
%11:i8 = var
%12:i8 = xor %3, %11
%13:i8 = or %10, %12 (hasExternalUses)
%14:i8 = or %1, %13
%15:i32 = zext %14
%16:i32 = addnsw 4294967295:i32, %15
%17:i32 = or %9, %16
infer %17 (demandedBits=00000000000000000000000100000000)

; *****
; For LLVM instruction:
;  %77 = zext i8 %65 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i8 = and 127:i8, %0 (hasExternalUses)
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = xor %3, %4
%6:i8 = or %2, %5 (hasExternalUses)
%7:i8 = or %1, %6
%8:i32 = zext %7
infer %8 (demandedBits=00000000000000000000000111111111)

; *****
; For LLVM instruction:
;  %78 = add nsw i32 %77, -1
; Looking for a replacement for:
%0:i8 = var
%1:i8 = and 127:i8, %0 (hasExternalUses)
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = xor %3, %4
%6:i8 = or %2, %5 (hasExternalUses)
%7:i8 = or %1, %6
%8:i32 = zext %7
%9:i32 = addnsw 4294967295:i32, %8
infer %9 (demandedBits=00000000000000000000000100000000)

; *****
; For LLVM instruction:
;  %79 = or i32 %76, %78
; Looking for a replacement for:
%0:i8 = var
%1:i8 = and 127:i8, %0 (hasExternalUses)
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = xor %3, %4
%6:i8 = or %2, %5 (hasExternalUses)
%7:i8 = or %1, %6
%8:i32 = zext %7
%9:i32 = addnsw 4294967295:i32, %8
%10:i8 = var
%11:i8 = var
%12:i8 = xor %3, %11
%13:i8 = or %10, %12 (hasExternalUses)
%14:i8 = or %1, %13
%15:i32 = zext %14
%16:i32 = addnsw 4294967295:i32, %15
%17:i8 = var
%18:i8 = var
%19:i8 = xor %3, %18
%20:i8 = or %17, %19 (hasExternalUses)
%21:i8 = or %1, %20
%22:i32 = zext %21
%23:i32 = addnsw 4294967295:i32, %22
%24:i32 = or %16, %23
%25:i32 = or %9, %24
infer %25 (demandedBits=00000000000000000000000100000000)

; *****
; For LLVM instruction:
;  %80 = zext i8 %67 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3 (hasExternalUses)
%5:i8 = var
%6:i8 = and 127:i8, %5 (hasExternalUses)
%7:i8 = xor 87:i8, %6
%8:i8 = or %4, %7
%9:i32 = zext %8
infer %9 (demandedBits=00000000000000000000000111111111)

; *****
; For LLVM instruction:
;  %81 = add nuw nsw i32 %80, 511
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3 (hasExternalUses)
%5:i8 = var
%6:i8 = and 127:i8, %5 (hasExternalUses)
%7:i8 = xor 87:i8, %6
%8:i8 = or %4, %7
%9:i32 = zext %8
%10:i32 = addnw 511:i32, %9
infer %10 (demandedBits=00000000000000000000000100000000)

; *****
; For LLVM instruction:
;  %82 = or i32 %79, %81
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3 (hasExternalUses)
%5:i8 = var
%6:i8 = and 127:i8, %5 (hasExternalUses)
%7:i8 = xor 87:i8, %6
%8:i8 = or %4, %7
%9:i32 = zext %8
%10:i32 = addnw 511:i32, %9
%11:i8 = var
%12:i8 = var
%13:i8 = xor %1, %12
%14:i8 = or %11, %13 (hasExternalUses)
%15:i8 = or %6, %14
%16:i32 = zext %15
%17:i32 = addnsw 4294967295:i32, %16
%18:i8 = var
%19:i8 = var
%20:i8 = xor %1, %19
%21:i8 = or %18, %20 (hasExternalUses)
%22:i8 = or %6, %21
%23:i32 = zext %22
%24:i32 = addnsw 4294967295:i32, %23
%25:i8 = var
%26:i8 = var
%27:i8 = xor %1, %26
%28:i8 = or %25, %27 (hasExternalUses)
%29:i8 = or %6, %28
%30:i32 = zext %29
%31:i32 = addnsw 4294967295:i32, %30
%32:i32 = or %24, %31
%33:i32 = or %17, %32
%34:i32 = or %10, %33
infer %34 (demandedBits=00000000000000000000000100000000)

; *****
; For LLVM instruction:
;  %83 = zext i8 %69 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3 (hasExternalUses)
%5:i8 = var
%6:i8 = and 127:i8, %5 (hasExternalUses)
%7:i8 = xor 127:i8, %6 (hasExternalUses)
%8:i8 = or %4, %7
%9:i32 = zext %8
infer %9 (demandedBits=00000000000000000000000111111111)

; *****
; For LLVM instruction:
;  %84 = add nuw nsw i32 %83, 511
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3 (hasExternalUses)
%5:i8 = var
%6:i8 = and 127:i8, %5 (hasExternalUses)
%7:i8 = xor 127:i8, %6 (hasExternalUses)
%8:i8 = or %4, %7
%9:i32 = zext %8
%10:i32 = addnw 511:i32, %9
infer %10 (demandedBits=00000000000000000000000100000000)

; *****
; For LLVM instruction:
;  %85 = or i32 %82, %84
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3 (hasExternalUses)
%5:i8 = var
%6:i8 = and 127:i8, %5
%7:i8 = xor 127:i8, %6 (hasExternalUses)
%8:i8 = or %4, %7
%9:i32 = zext %8
%10:i32 = addnw 511:i32, %9
%11:i8 = var
%12:i8 = var
%13:i8 = xor %1, %12
%14:i8 = or %11, %13 (hasExternalUses)
%15:i8 = xor 87:i8, %6
%16:i8 = or %14, %15
%17:i32 = zext %16
%18:i32 = addnw 511:i32, %17
%19:i8 = var
%20:i8 = var
%21:i8 = xor %1, %20
%22:i8 = or %19, %21 (hasExternalUses)
%23:i8 = or %6, %22
%24:i32 = zext %23
%25:i32 = addnsw 4294967295:i32, %24
%26:i8 = var
%27:i8 = var
%28:i8 = xor %1, %27
%29:i8 = or %26, %28 (hasExternalUses)
%30:i8 = or %6, %29
%31:i32 = zext %30
%32:i32 = addnsw 4294967295:i32, %31
%33:i8 = var
%34:i8 = var
%35:i8 = xor %1, %34
%36:i8 = or %33, %35 (hasExternalUses)
%37:i8 = or %6, %36
%38:i32 = zext %37
%39:i32 = addnsw 4294967295:i32, %38
%40:i32 = or %32, %39
%41:i32 = or %25, %40
%42:i32 = or %18, %41
%43:i32 = or %10, %42
infer %43 (demandedBits=00000000000000000000000100000000)

; *****
; For LLVM instruction:
;  %86 = zext i8 %70 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3 (hasExternalUses)
%5:i8 = var
%6:i8 = and 127:i8, %5 (hasExternalUses)
%7:i8 = xor 127:i8, %6 (hasExternalUses)
%8:i8 = or %4, %7
%9:i32 = zext %8
infer %9 (demandedBits=00000000000000000000000111111111)

; *****
; For LLVM instruction:
;  %87 = add nuw nsw i32 %86, 511
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3 (hasExternalUses)
%5:i8 = var
%6:i8 = and 127:i8, %5 (hasExternalUses)
%7:i8 = xor 127:i8, %6 (hasExternalUses)
%8:i8 = or %4, %7
%9:i32 = zext %8
%10:i32 = addnw 511:i32, %9
infer %10 (demandedBits=00000000000000000000000100000000)

; *****
; For LLVM instruction:
;  %88 = or i32 %85, %87
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3 (hasExternalUses)
%5:i8 = var
%6:i8 = and 127:i8, %5
%7:i8 = xor 127:i8, %6 (hasExternalUses)
%8:i8 = or %4, %7
%9:i32 = zext %8
%10:i32 = addnw 511:i32, %9
%11:i8 = var
%12:i8 = var
%13:i8 = xor %1, %12
%14:i8 = or %11, %13 (hasExternalUses)
%15:i8 = or %14, %7
%16:i32 = zext %15
%17:i32 = addnw 511:i32, %16
%18:i8 = var
%19:i8 = var
%20:i8 = xor %1, %19
%21:i8 = or %18, %20 (hasExternalUses)
%22:i8 = xor 87:i8, %6
%23:i8 = or %21, %22
%24:i32 = zext %23
%25:i32 = addnw 511:i32, %24
%26:i8 = var
%27:i8 = var
%28:i8 = xor %1, %27
%29:i8 = or %26, %28 (hasExternalUses)
%30:i8 = or %6, %29
%31:i32 = zext %30
%32:i32 = addnsw 4294967295:i32, %31
%33:i8 = var
%34:i8 = var
%35:i8 = xor %1, %34
%36:i8 = or %33, %35 (hasExternalUses)
%37:i8 = or %6, %36
%38:i32 = zext %37
%39:i32 = addnsw 4294967295:i32, %38
%40:i8 = var
%41:i8 = var
%42:i8 = xor %1, %41
%43:i8 = or %40, %42 (hasExternalUses)
%44:i8 = or %6, %43
%45:i32 = zext %44
%46:i32 = addnsw 4294967295:i32, %45
%47:i32 = or %39, %46
%48:i32 = or %32, %47
%49:i32 = or %25, %48
%50:i32 = or %17, %49
%51:i32 = or %10, %50
infer %51 (demandedBits=00000000000000000000000100000000)

; *****
; For LLVM instruction:
;  %89 = zext i8 %71 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3 (hasExternalUses)
%5:i8 = var
%6:i8 = and 127:i8, %5 (hasExternalUses)
%7:i8 = xor 127:i8, %6 (hasExternalUses)
%8:i8 = or %4, %7
%9:i32 = zext %8
infer %9 (demandedBits=00000000000000000000000111111111)

; *****
; For LLVM instruction:
;  %90 = add nuw nsw i32 %89, 511
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3 (hasExternalUses)
%5:i8 = var
%6:i8 = and 127:i8, %5 (hasExternalUses)
%7:i8 = xor 127:i8, %6 (hasExternalUses)
%8:i8 = or %4, %7
%9:i32 = zext %8
%10:i32 = addnw 511:i32, %9
infer %10 (demandedBits=00000000000000000000000100000000)

; *****
; For LLVM instruction:
;  %91 = or i32 %88, %90
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3 (hasExternalUses)
%5:i8 = var
%6:i8 = and 127:i8, %5
%7:i8 = xor 127:i8, %6
%8:i8 = or %4, %7
%9:i32 = zext %8
%10:i32 = addnw 511:i32, %9
%11:i8 = var
%12:i8 = var
%13:i8 = xor %1, %12
%14:i8 = or %11, %13 (hasExternalUses)
%15:i8 = or %14, %7
%16:i32 = zext %15
%17:i32 = addnw 511:i32, %16
%18:i8 = var
%19:i8 = var
%20:i8 = xor %1, %19
%21:i8 = or %18, %20 (hasExternalUses)
%22:i8 = or %21, %7
%23:i32 = zext %22
%24:i32 = addnw 511:i32, %23
%25:i8 = var
%26:i8 = var
%27:i8 = xor %1, %26
%28:i8 = or %25, %27 (hasExternalUses)
%29:i8 = xor 87:i8, %6
%30:i8 = or %28, %29
%31:i32 = zext %30
%32:i32 = addnw 511:i32, %31
%33:i8 = var
%34:i8 = var
%35:i8 = xor %1, %34
%36:i8 = or %33, %35 (hasExternalUses)
%37:i8 = or %6, %36
%38:i32 = zext %37
%39:i32 = addnsw 4294967295:i32, %38
%40:i8 = var
%41:i8 = var
%42:i8 = xor %1, %41
%43:i8 = or %40, %42 (hasExternalUses)
%44:i8 = or %6, %43
%45:i32 = zext %44
%46:i32 = addnsw 4294967295:i32, %45
%47:i8 = var
%48:i8 = var
%49:i8 = xor %1, %48
%50:i8 = or %47, %49 (hasExternalUses)
%51:i8 = or %6, %50
%52:i32 = zext %51
%53:i32 = addnsw 4294967295:i32, %52
%54:i32 = or %46, %53
%55:i32 = or %39, %54
%56:i32 = or %32, %55
%57:i32 = or %24, %56
%58:i32 = or %17, %57
%59:i32 = or %10, %58
infer %59 (demandedBits=00000000000000000000000100000000)

; *****
; For LLVM instruction:
;  %92 = and i32 %91, 256
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3 (hasExternalUses)
%5:i8 = var
%6:i8 = and 127:i8, %5
%7:i8 = xor 127:i8, %6
%8:i8 = or %4, %7
%9:i32 = zext %8
%10:i32 = addnw 511:i32, %9
%11:i8 = var
%12:i8 = var
%13:i8 = xor %1, %12
%14:i8 = or %11, %13 (hasExternalUses)
%15:i8 = or %14, %7
%16:i32 = zext %15
%17:i32 = addnw 511:i32, %16
%18:i8 = var
%19:i8 = var
%20:i8 = xor %1, %19
%21:i8 = or %18, %20 (hasExternalUses)
%22:i8 = or %21, %7
%23:i32 = zext %22
%24:i32 = addnw 511:i32, %23
%25:i8 = var
%26:i8 = var
%27:i8 = xor %1, %26
%28:i8 = or %25, %27 (hasExternalUses)
%29:i8 = xor 87:i8, %6
%30:i8 = or %28, %29
%31:i32 = zext %30
%32:i32 = addnw 511:i32, %31
%33:i8 = var
%34:i8 = var
%35:i8 = xor %1, %34
%36:i8 = or %33, %35 (hasExternalUses)
%37:i8 = or %6, %36
%38:i32 = zext %37
%39:i32 = addnsw 4294967295:i32, %38
%40:i8 = var
%41:i8 = var
%42:i8 = xor %1, %41
%43:i8 = or %40, %42 (hasExternalUses)
%44:i8 = or %6, %43
%45:i32 = zext %44
%46:i32 = addnsw 4294967295:i32, %45
%47:i8 = var
%48:i8 = var
%49:i8 = xor %1, %48
%50:i8 = or %47, %49 (hasExternalUses)
%51:i8 = or %6, %50
%52:i32 = zext %51
%53:i32 = addnsw 4294967295:i32, %52
%54:i32 = or %46, %53
%55:i32 = or %39, %54
%56:i32 = or %32, %55
%57:i32 = or %24, %56
%58:i32 = or %17, %57
%59:i32 = or %10, %58
%60:i32 = and 256:i32, %59
infer %60

; *****
; For LLVM instruction:
;  %93 = icmp eq i32 %92, 0
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3 (hasExternalUses)
%5:i8 = var
%6:i8 = and 127:i8, %5
%7:i8 = xor 127:i8, %6
%8:i8 = or %4, %7
%9:i32 = zext %8
%10:i32 = addnw 511:i32, %9
%11:i8 = var
%12:i8 = var
%13:i8 = xor %1, %12
%14:i8 = or %11, %13 (hasExternalUses)
%15:i8 = or %14, %7
%16:i32 = zext %15
%17:i32 = addnw 511:i32, %16
%18:i8 = var
%19:i8 = var
%20:i8 = xor %1, %19
%21:i8 = or %18, %20 (hasExternalUses)
%22:i8 = or %21, %7
%23:i32 = zext %22
%24:i32 = addnw 511:i32, %23
%25:i8 = var
%26:i8 = var
%27:i8 = xor %1, %26
%28:i8 = or %25, %27 (hasExternalUses)
%29:i8 = xor 87:i8, %6
%30:i8 = or %28, %29
%31:i32 = zext %30
%32:i32 = addnw 511:i32, %31
%33:i8 = var
%34:i8 = var
%35:i8 = xor %1, %34
%36:i8 = or %33, %35 (hasExternalUses)
%37:i8 = or %6, %36
%38:i32 = zext %37
%39:i32 = addnsw 4294967295:i32, %38
%40:i8 = var
%41:i8 = var
%42:i8 = xor %1, %41
%43:i8 = or %40, %42 (hasExternalUses)
%44:i8 = or %6, %43
%45:i32 = zext %44
%46:i32 = addnsw 4294967295:i32, %45
%47:i8 = var
%48:i8 = var
%49:i8 = xor %1, %48
%50:i8 = or %47, %49 (hasExternalUses)
%51:i8 = or %6, %50
%52:i32 = zext %51
%53:i32 = addnsw 4294967295:i32, %52
%54:i32 = or %46, %53
%55:i32 = or %39, %54
%56:i32 = or %32, %55
%57:i32 = or %24, %56
%58:i32 = or %17, %57
%59:i32 = or %10, %58
%60:i32 = and 256:i32, %59
%61:i1 = eq 0:i32, %60
infer %61

; *****
; For LLVM instruction:
;  %95 = phi i32 [ %99, %94 ], [ 0, %59 ]
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,32))
infer %0

; *****
; For LLVM instruction:
;  %97 = load i8, i8* %96, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %99 = add nuw nsw i32 %95, 1
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,32))
%1:i32 = addnw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %100 = icmp eq i32 %99, 32
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,32))
%1:i32 = addnw 1:i32, %0 (hasExternalUses)
%2:i1 = eq 32:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %102 = load i8, i8* %0, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=11111000)

; *****
; For LLVM instruction:
;  %103 = and i8 %102, -8
; Looking for a replacement for:
%0:i8 = var
%1:i8 = and 248:i8, %0
infer %1

; *****
; For LLVM instruction:
;  %105 = load i8, i8* %104, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=00111111)

; *****
; For LLVM instruction:
;  %106 = and i8 %105, 63
; Looking for a replacement for:
%0:i8 = var
%1:i8 = and 63:i8, %0
infer %1 (demandedBits=10111111)

; *****
; For LLVM instruction:
;  %107 = or i8 %106, 64
; Looking for a replacement for:
%0:i8 = var
%1:i8 = and 63:i8, %0
%2:i8 = or 64:i8, %1
infer %2

; *****
; For LLVM instruction:
;  %114 = load i32, i32* %108, align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %116 = load i32, i32* %115, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %118 = load i32, i32* %117, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %120 = load i32, i32* %119, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %122 = load i32, i32* %121, align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %124 = load i32, i32* %123, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %126 = load i32, i32* %125, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %128 = load i32, i32* %127, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %130 = load i32, i32* %129, align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %132 = load i32, i32* %131, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %191 = phi i32 [ 0, %101 ], [ %564, %534 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %192 = phi i32 [ 0, %101 ], [ %563, %534 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %193 = phi i32 [ 0, %101 ], [ %562, %534 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %194 = phi i32 [ 0, %101 ], [ %561, %534 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %195 = phi i32 [ 0, %101 ], [ %560, %534 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %196 = phi i32 [ 0, %101 ], [ %559, %534 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %197 = phi i32 [ 0, %101 ], [ %558, %534 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %198 = phi i32 [ 0, %101 ], [ %557, %534 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %199 = phi i32 [ 0, %101 ], [ %556, %534 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %200 = phi i32 [ %132, %101 ], [ %555, %534 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %201 = phi i32 [ %130, %101 ], [ %554, %534 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %202 = phi i32 [ %128, %101 ], [ %553, %534 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %203 = phi i32 [ %126, %101 ], [ %552, %534 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %204 = phi i32 [ %124, %101 ], [ %551, %534 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %205 = phi i32 [ %122, %101 ], [ %550, %534 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %206 = phi i32 [ %120, %101 ], [ %549, %534 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %207 = phi i32 [ %118, %101 ], [ %548, %534 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %208 = phi i32 [ %116, %101 ], [ %547, %534 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %209 = phi i32 [ %114, %101 ], [ %546, %534 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %210 = phi i32 [ 0, %101 ], [ %545, %534 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %211 = phi i32 [ 0, %101 ], [ %544, %534 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %212 = phi i32 [ 0, %101 ], [ %543, %534 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %213 = phi i32 [ 0, %101 ], [ %542, %534 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %214 = phi i32 [ 0, %101 ], [ %541, %534 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %215 = phi i32 [ 0, %101 ], [ %540, %534 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %216 = phi i32 [ 0, %101 ], [ %539, %534 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %217 = phi i32 [ 0, %101 ], [ %538, %534 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %218 = phi i32 [ 0, %101 ], [ %537, %534 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %219 = phi i32 [ 1, %101 ], [ %536, %534 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %220 = phi i32 [ 0, %101 ], [ %228, %534 ]
; Looking for a replacement for:
%0:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
infer %0

; *****
; For LLVM instruction:
;  %221 = phi i32 [ 254, %101 ], [ %535, %534 ]
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
infer %0

; *****
; For LLVM instruction:
;  %222 = lshr i32 %221, 3
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i32 = lshr %0, 3:i32
infer %1

; *****
; For LLVM instruction:
;  %224 = load i8, i8* %223, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %225 = zext i8 %224 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %226 = and i32 %221, 7
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i32 = and 7:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %227 = lshr i32 %225, %226
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i32 = var (range=[0,255))
%3:i32 = and 7:i32, %2
%4:i32 = lshr %1, %3
infer %4 (demandedBits=00000000000000000000000000000001)

; *****
; For LLVM instruction:
;  %228 = and i32 %227, 1
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i32 = var (range=[0,255))
%3:i32 = and 7:i32, %2
%4:i32 = lshr %1, %3
%5:i32 = and 1:i32, %4
infer %5

; *****
; For LLVM instruction:
;  %229 = xor i32 %228, %220
; Looking for a replacement for:
%0:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%1:i8 = var
%2:i32 = zext %1
%3:i32 = var (range=[0,255))
%4:i32 = and 7:i32, %3
%5:i32 = lshr %2, %4
%6:i32 = and 1:i32, %5 (hasExternalUses)
%7:i32 = xor %0, %6
infer %7

; *****
; For LLVM instruction:
;  %230 = sub nsw i32 0, %229
; Looking for a replacement for:
%0:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%1:i8 = var
%2:i32 = zext %1
%3:i32 = var (range=[0,255))
%4:i32 = and 7:i32, %3
%5:i32 = lshr %2, %4
%6:i32 = and 1:i32, %5 (hasExternalUses)
%7:i32 = xor %0, %6
%8:i32 = subnsw 0:i32, %7
infer %8

; *****
; For LLVM instruction:
;  %231 = xor i32 %209, %219
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %232 = xor i32 %208, %218
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %233 = xor i32 %207, %217
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %234 = xor i32 %206, %216
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %235 = xor i32 %205, %215
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %236 = xor i32 %204, %214
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %237 = xor i32 %203, %213
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %238 = xor i32 %202, %212
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %239 = xor i32 %201, %211
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %240 = xor i32 %200, %210
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %241 = and i32 %231, %230
; Looking for a replacement for:
%0:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%1:i8 = var
%2:i32 = zext %1
%3:i32 = var (range=[0,255))
%4:i32 = and 7:i32, %3
%5:i32 = lshr %2, %4
%6:i32 = and 1:i32, %5 (hasExternalUses)
%7:i32 = xor %0, %6
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = var
%11:i32 = xor %9, %10
%12:i32 = and %8, %11
infer %12

; *****
; For LLVM instruction:
;  %242 = and i32 %232, %230
; Looking for a replacement for:
%0:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%1:i8 = var
%2:i32 = zext %1
%3:i32 = var (range=[0,255))
%4:i32 = and 7:i32, %3
%5:i32 = lshr %2, %4
%6:i32 = and 1:i32, %5 (hasExternalUses)
%7:i32 = xor %0, %6
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = var
%11:i32 = xor %9, %10
%12:i32 = and %8, %11
infer %12

; *****
; For LLVM instruction:
;  %243 = and i32 %233, %230
; Looking for a replacement for:
%0:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%1:i8 = var
%2:i32 = zext %1
%3:i32 = var (range=[0,255))
%4:i32 = and 7:i32, %3
%5:i32 = lshr %2, %4
%6:i32 = and 1:i32, %5 (hasExternalUses)
%7:i32 = xor %0, %6
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = var
%11:i32 = xor %9, %10
%12:i32 = and %8, %11
infer %12

; *****
; For LLVM instruction:
;  %244 = and i32 %234, %230
; Looking for a replacement for:
%0:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%1:i8 = var
%2:i32 = zext %1
%3:i32 = var (range=[0,255))
%4:i32 = and 7:i32, %3
%5:i32 = lshr %2, %4
%6:i32 = and 1:i32, %5 (hasExternalUses)
%7:i32 = xor %0, %6
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = var
%11:i32 = xor %9, %10
%12:i32 = and %8, %11
infer %12

; *****
; For LLVM instruction:
;  %245 = and i32 %235, %230
; Looking for a replacement for:
%0:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%1:i8 = var
%2:i32 = zext %1
%3:i32 = var (range=[0,255))
%4:i32 = and 7:i32, %3
%5:i32 = lshr %2, %4
%6:i32 = and 1:i32, %5 (hasExternalUses)
%7:i32 = xor %0, %6
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = var
%11:i32 = xor %9, %10
%12:i32 = and %8, %11
infer %12

; *****
; For LLVM instruction:
;  %246 = and i32 %236, %230
; Looking for a replacement for:
%0:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%1:i8 = var
%2:i32 = zext %1
%3:i32 = var (range=[0,255))
%4:i32 = and 7:i32, %3
%5:i32 = lshr %2, %4
%6:i32 = and 1:i32, %5 (hasExternalUses)
%7:i32 = xor %0, %6
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = var
%11:i32 = xor %9, %10
%12:i32 = and %8, %11
infer %12

; *****
; For LLVM instruction:
;  %247 = and i32 %237, %230
; Looking for a replacement for:
%0:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%1:i8 = var
%2:i32 = zext %1
%3:i32 = var (range=[0,255))
%4:i32 = and 7:i32, %3
%5:i32 = lshr %2, %4
%6:i32 = and 1:i32, %5 (hasExternalUses)
%7:i32 = xor %0, %6
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = var
%11:i32 = xor %9, %10
%12:i32 = and %8, %11
infer %12

; *****
; For LLVM instruction:
;  %248 = and i32 %238, %230
; Looking for a replacement for:
%0:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%1:i8 = var
%2:i32 = zext %1
%3:i32 = var (range=[0,255))
%4:i32 = and 7:i32, %3
%5:i32 = lshr %2, %4
%6:i32 = and 1:i32, %5 (hasExternalUses)
%7:i32 = xor %0, %6
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = var
%11:i32 = xor %9, %10
%12:i32 = and %8, %11
infer %12

; *****
; For LLVM instruction:
;  %249 = and i32 %239, %230
; Looking for a replacement for:
%0:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%1:i8 = var
%2:i32 = zext %1
%3:i32 = var (range=[0,255))
%4:i32 = and 7:i32, %3
%5:i32 = lshr %2, %4
%6:i32 = and 1:i32, %5 (hasExternalUses)
%7:i32 = xor %0, %6
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = var
%11:i32 = xor %9, %10
%12:i32 = and %8, %11
infer %12

; *****
; For LLVM instruction:
;  %250 = and i32 %240, %230
; Looking for a replacement for:
%0:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%1:i8 = var
%2:i32 = zext %1
%3:i32 = var (range=[0,255))
%4:i32 = and 7:i32, %3
%5:i32 = lshr %2, %4
%6:i32 = and 1:i32, %5 (hasExternalUses)
%7:i32 = xor %0, %6
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = var
%11:i32 = xor %9, %10
%12:i32 = and %8, %11
infer %12

; *****
; For LLVM instruction:
;  %251 = xor i32 %241, %219
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %10, %0
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12
infer %13

; *****
; For LLVM instruction:
;  %252 = xor i32 %242, %218
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %10, %0
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12
infer %13

; *****
; For LLVM instruction:
;  %253 = xor i32 %243, %217
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %10, %0
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12
infer %13

; *****
; For LLVM instruction:
;  %254 = xor i32 %244, %216
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %10, %0
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12
infer %13

; *****
; For LLVM instruction:
;  %255 = xor i32 %245, %215
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %10, %0
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12
infer %13

; *****
; For LLVM instruction:
;  %256 = xor i32 %246, %214
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %10, %0
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12
infer %13

; *****
; For LLVM instruction:
;  %257 = xor i32 %247, %213
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %10, %0
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12
infer %13

; *****
; For LLVM instruction:
;  %258 = xor i32 %248, %212
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %10, %0
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12
infer %13

; *****
; For LLVM instruction:
;  %259 = xor i32 %249, %211
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %10, %0
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12
infer %13

; *****
; For LLVM instruction:
;  %260 = xor i32 %250, %210
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %10, %0
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12
infer %13

; *****
; For LLVM instruction:
;  %261 = xor i32 %241, %209
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %0, %10
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12
infer %13

; *****
; For LLVM instruction:
;  %262 = xor i32 %242, %208
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %0, %10
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12
infer %13

; *****
; For LLVM instruction:
;  %263 = xor i32 %243, %207
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %0, %10
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12
infer %13

; *****
; For LLVM instruction:
;  %264 = xor i32 %244, %206
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %0, %10
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12
infer %13

; *****
; For LLVM instruction:
;  %265 = xor i32 %245, %205
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %0, %10
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12
infer %13

; *****
; For LLVM instruction:
;  %266 = xor i32 %246, %204
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %0, %10
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12
infer %13

; *****
; For LLVM instruction:
;  %267 = xor i32 %247, %203
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %0, %10
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12
infer %13

; *****
; For LLVM instruction:
;  %268 = xor i32 %248, %202
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %0, %10
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12
infer %13

; *****
; For LLVM instruction:
;  %269 = xor i32 %249, %201
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %0, %10
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12
infer %13

; *****
; For LLVM instruction:
;  %270 = xor i32 %250, %200
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %0, %10
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12
infer %13

; *****
; For LLVM instruction:
;  %271 = load i32, i32* %161, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %272 = load i32, i32* %142, align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %273 = load i32, i32* %143, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %274 = load i32, i32* %162, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %275 = load i32, i32* %163, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %276 = load i32, i32* %164, align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %277 = load i32, i32* %165, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %278 = load i32, i32* %166, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %279 = load i32, i32* %167, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %280 = load i32, i32* %168, align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %281 = load i32, i32* %169, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %282 = xor i32 %272, %199
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %283 = xor i32 %273, %198
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %284 = xor i32 %274, %197
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %285 = xor i32 %275, %196
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %286 = xor i32 %276, %195
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %287 = xor i32 %277, %194
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %288 = xor i32 %278, %193
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %289 = xor i32 %279, %192
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %290 = xor i32 %280, %191
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %291 = xor i32 %281, %271
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %292 = and i32 %282, %230
; Looking for a replacement for:
%0:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%1:i8 = var
%2:i32 = zext %1
%3:i32 = var (range=[0,255))
%4:i32 = and 7:i32, %3
%5:i32 = lshr %2, %4
%6:i32 = and 1:i32, %5 (hasExternalUses)
%7:i32 = xor %0, %6
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = var
%11:i32 = xor %9, %10
%12:i32 = and %8, %11
infer %12

; *****
; For LLVM instruction:
;  %293 = and i32 %283, %230
; Looking for a replacement for:
%0:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%1:i8 = var
%2:i32 = zext %1
%3:i32 = var (range=[0,255))
%4:i32 = and 7:i32, %3
%5:i32 = lshr %2, %4
%6:i32 = and 1:i32, %5 (hasExternalUses)
%7:i32 = xor %0, %6
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = var
%11:i32 = xor %9, %10
%12:i32 = and %8, %11
infer %12

; *****
; For LLVM instruction:
;  %294 = and i32 %284, %230
; Looking for a replacement for:
%0:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%1:i8 = var
%2:i32 = zext %1
%3:i32 = var (range=[0,255))
%4:i32 = and 7:i32, %3
%5:i32 = lshr %2, %4
%6:i32 = and 1:i32, %5 (hasExternalUses)
%7:i32 = xor %0, %6
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = var
%11:i32 = xor %9, %10
%12:i32 = and %8, %11
infer %12

; *****
; For LLVM instruction:
;  %295 = and i32 %285, %230
; Looking for a replacement for:
%0:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%1:i8 = var
%2:i32 = zext %1
%3:i32 = var (range=[0,255))
%4:i32 = and 7:i32, %3
%5:i32 = lshr %2, %4
%6:i32 = and 1:i32, %5 (hasExternalUses)
%7:i32 = xor %0, %6
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = var
%11:i32 = xor %9, %10
%12:i32 = and %8, %11
infer %12

; *****
; For LLVM instruction:
;  %296 = and i32 %286, %230
; Looking for a replacement for:
%0:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%1:i8 = var
%2:i32 = zext %1
%3:i32 = var (range=[0,255))
%4:i32 = and 7:i32, %3
%5:i32 = lshr %2, %4
%6:i32 = and 1:i32, %5 (hasExternalUses)
%7:i32 = xor %0, %6
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = var
%11:i32 = xor %9, %10
%12:i32 = and %8, %11
infer %12

; *****
; For LLVM instruction:
;  %297 = and i32 %287, %230
; Looking for a replacement for:
%0:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%1:i8 = var
%2:i32 = zext %1
%3:i32 = var (range=[0,255))
%4:i32 = and 7:i32, %3
%5:i32 = lshr %2, %4
%6:i32 = and 1:i32, %5 (hasExternalUses)
%7:i32 = xor %0, %6
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = var
%11:i32 = xor %9, %10
%12:i32 = and %8, %11
infer %12

; *****
; For LLVM instruction:
;  %298 = and i32 %288, %230
; Looking for a replacement for:
%0:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%1:i8 = var
%2:i32 = zext %1
%3:i32 = var (range=[0,255))
%4:i32 = and 7:i32, %3
%5:i32 = lshr %2, %4
%6:i32 = and 1:i32, %5 (hasExternalUses)
%7:i32 = xor %0, %6
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = var
%11:i32 = xor %9, %10
%12:i32 = and %8, %11
infer %12

; *****
; For LLVM instruction:
;  %299 = and i32 %289, %230
; Looking for a replacement for:
%0:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%1:i8 = var
%2:i32 = zext %1
%3:i32 = var (range=[0,255))
%4:i32 = and 7:i32, %3
%5:i32 = lshr %2, %4
%6:i32 = and 1:i32, %5 (hasExternalUses)
%7:i32 = xor %0, %6
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = var
%11:i32 = xor %9, %10
%12:i32 = and %8, %11
infer %12

; *****
; For LLVM instruction:
;  %300 = and i32 %290, %230
; Looking for a replacement for:
%0:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%1:i8 = var
%2:i32 = zext %1
%3:i32 = var (range=[0,255))
%4:i32 = and 7:i32, %3
%5:i32 = lshr %2, %4
%6:i32 = and 1:i32, %5 (hasExternalUses)
%7:i32 = xor %0, %6
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = var
%11:i32 = xor %9, %10
%12:i32 = and %8, %11
infer %12

; *****
; For LLVM instruction:
;  %301 = and i32 %291, %230
; Looking for a replacement for:
%0:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%1:i8 = var
%2:i32 = zext %1
%3:i32 = var (range=[0,255))
%4:i32 = and 7:i32, %3
%5:i32 = lshr %2, %4
%6:i32 = and 1:i32, %5 (hasExternalUses)
%7:i32 = xor %0, %6
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = var
%11:i32 = xor %9, %10
%12:i32 = and %8, %11
infer %12

; *****
; For LLVM instruction:
;  %302 = xor i32 %292, %199
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %0, %10
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12
infer %13

; *****
; For LLVM instruction:
;  %303 = xor i32 %293, %198
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %0, %10
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12
infer %13

; *****
; For LLVM instruction:
;  %304 = xor i32 %294, %197
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %0, %10
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12
infer %13

; *****
; For LLVM instruction:
;  %305 = xor i32 %295, %196
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %0, %10
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12
infer %13

; *****
; For LLVM instruction:
;  %306 = xor i32 %296, %195
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %0, %10
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12
infer %13

; *****
; For LLVM instruction:
;  %307 = xor i32 %297, %194
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %0, %10
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12
infer %13

; *****
; For LLVM instruction:
;  %308 = xor i32 %298, %193
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %0, %10
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12
infer %13

; *****
; For LLVM instruction:
;  %309 = xor i32 %299, %192
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %0, %10
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12
infer %13

; *****
; For LLVM instruction:
;  %310 = xor i32 %300, %191
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %0, %10
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12
infer %13

; *****
; For LLVM instruction:
;  %311 = xor i32 %301, %271
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %0, %10
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12
infer %13

; *****
; For LLVM instruction:
;  %312 = xor i32 %292, %272
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %10, %0
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12
infer %13

; *****
; For LLVM instruction:
;  %313 = xor i32 %293, %273
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %10, %0
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12
infer %13

; *****
; For LLVM instruction:
;  %314 = xor i32 %294, %274
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %10, %0
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12
infer %13

; *****
; For LLVM instruction:
;  %315 = xor i32 %295, %275
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %10, %0
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12
infer %13

; *****
; For LLVM instruction:
;  %316 = xor i32 %296, %276
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %10, %0
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12
infer %13

; *****
; For LLVM instruction:
;  %317 = xor i32 %297, %277
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %10, %0
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12
infer %13

; *****
; For LLVM instruction:
;  %318 = xor i32 %298, %278
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %10, %0
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12
infer %13

; *****
; For LLVM instruction:
;  %319 = xor i32 %299, %279
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %10, %0
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12
infer %13

; *****
; For LLVM instruction:
;  %320 = xor i32 %300, %280
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %10, %0
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12
infer %13

; *****
; For LLVM instruction:
;  %321 = xor i32 %301, %281
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %10, %0
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12
infer %13

; *****
; For LLVM instruction:
;  %322 = sub i32 %261, %312
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %0, %10
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = var
%15:i32 = var
%16:i32 = xor %15, %14
%17:i32 = and %9, %16 (hasExternalUses)
%18:i32 = xor %14, %17 (hasExternalUses)
%19:i32 = sub %13, %18
infer %19

; *****
; For LLVM instruction:
;  %323 = sub i32 %262, %313
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %0, %10
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = var
%15:i32 = var
%16:i32 = xor %15, %14
%17:i32 = and %9, %16 (hasExternalUses)
%18:i32 = xor %14, %17 (hasExternalUses)
%19:i32 = sub %13, %18
infer %19

; *****
; For LLVM instruction:
;  %324 = sub i32 %263, %314
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %0, %10
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = var
%15:i32 = var
%16:i32 = xor %15, %14
%17:i32 = and %9, %16 (hasExternalUses)
%18:i32 = xor %14, %17 (hasExternalUses)
%19:i32 = sub %13, %18
infer %19

; *****
; For LLVM instruction:
;  %325 = sub i32 %264, %315
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %0, %10
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = var
%15:i32 = var
%16:i32 = xor %15, %14
%17:i32 = and %9, %16 (hasExternalUses)
%18:i32 = xor %14, %17 (hasExternalUses)
%19:i32 = sub %13, %18
infer %19

; *****
; For LLVM instruction:
;  %326 = sub i32 %265, %316
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %0, %10
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = var
%15:i32 = var
%16:i32 = xor %15, %14
%17:i32 = and %9, %16 (hasExternalUses)
%18:i32 = xor %14, %17 (hasExternalUses)
%19:i32 = sub %13, %18
infer %19

; *****
; For LLVM instruction:
;  %327 = sub i32 %266, %317
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %0, %10
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = var
%15:i32 = var
%16:i32 = xor %15, %14
%17:i32 = and %9, %16 (hasExternalUses)
%18:i32 = xor %14, %17 (hasExternalUses)
%19:i32 = sub %13, %18
infer %19

; *****
; For LLVM instruction:
;  %328 = sub i32 %267, %318
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %0, %10
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = var
%15:i32 = var
%16:i32 = xor %15, %14
%17:i32 = and %9, %16 (hasExternalUses)
%18:i32 = xor %14, %17 (hasExternalUses)
%19:i32 = sub %13, %18
infer %19

; *****
; For LLVM instruction:
;  %329 = sub i32 %268, %319
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %0, %10
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = var
%15:i32 = var
%16:i32 = xor %15, %14
%17:i32 = and %9, %16 (hasExternalUses)
%18:i32 = xor %14, %17 (hasExternalUses)
%19:i32 = sub %13, %18
infer %19

; *****
; For LLVM instruction:
;  %330 = sub i32 %269, %320
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %0, %10
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = var
%15:i32 = var
%16:i32 = xor %15, %14
%17:i32 = and %9, %16 (hasExternalUses)
%18:i32 = xor %14, %17 (hasExternalUses)
%19:i32 = sub %13, %18
infer %19

; *****
; For LLVM instruction:
;  %331 = sub i32 %270, %321
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %0, %10
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = var
%15:i32 = var
%16:i32 = xor %15, %14
%17:i32 = and %9, %16 (hasExternalUses)
%18:i32 = xor %14, %17 (hasExternalUses)
%19:i32 = sub %13, %18
infer %19

; *****
; For LLVM instruction:
;  %332 = sub i32 %251, %302
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %10, %0
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = var
%15:i32 = var
%16:i32 = xor %14, %15
%17:i32 = and %9, %16 (hasExternalUses)
%18:i32 = xor %14, %17 (hasExternalUses)
%19:i32 = sub %13, %18
infer %19

; *****
; For LLVM instruction:
;  %333 = sub i32 %252, %303
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %10, %0
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = var
%15:i32 = var
%16:i32 = xor %14, %15
%17:i32 = and %9, %16 (hasExternalUses)
%18:i32 = xor %14, %17 (hasExternalUses)
%19:i32 = sub %13, %18
infer %19

; *****
; For LLVM instruction:
;  %334 = sub i32 %253, %304
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %10, %0
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = var
%15:i32 = var
%16:i32 = xor %14, %15
%17:i32 = and %9, %16 (hasExternalUses)
%18:i32 = xor %14, %17 (hasExternalUses)
%19:i32 = sub %13, %18
infer %19

; *****
; For LLVM instruction:
;  %335 = sub i32 %254, %305
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %10, %0
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = var
%15:i32 = var
%16:i32 = xor %14, %15
%17:i32 = and %9, %16 (hasExternalUses)
%18:i32 = xor %14, %17 (hasExternalUses)
%19:i32 = sub %13, %18
infer %19

; *****
; For LLVM instruction:
;  %336 = sub i32 %255, %306
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %10, %0
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = var
%15:i32 = var
%16:i32 = xor %14, %15
%17:i32 = and %9, %16 (hasExternalUses)
%18:i32 = xor %14, %17 (hasExternalUses)
%19:i32 = sub %13, %18
infer %19

; *****
; For LLVM instruction:
;  %337 = sub i32 %256, %307
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %10, %0
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = var
%15:i32 = var
%16:i32 = xor %14, %15
%17:i32 = and %9, %16 (hasExternalUses)
%18:i32 = xor %14, %17 (hasExternalUses)
%19:i32 = sub %13, %18
infer %19

; *****
; For LLVM instruction:
;  %338 = sub i32 %257, %308
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %10, %0
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = var
%15:i32 = var
%16:i32 = xor %14, %15
%17:i32 = and %9, %16 (hasExternalUses)
%18:i32 = xor %14, %17 (hasExternalUses)
%19:i32 = sub %13, %18
infer %19

; *****
; For LLVM instruction:
;  %339 = sub i32 %258, %309
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %10, %0
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = var
%15:i32 = var
%16:i32 = xor %14, %15
%17:i32 = and %9, %16 (hasExternalUses)
%18:i32 = xor %14, %17 (hasExternalUses)
%19:i32 = sub %13, %18
infer %19

; *****
; For LLVM instruction:
;  %340 = sub i32 %259, %310
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %10, %0
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = var
%15:i32 = var
%16:i32 = xor %14, %15
%17:i32 = and %9, %16 (hasExternalUses)
%18:i32 = xor %14, %17 (hasExternalUses)
%19:i32 = sub %13, %18
infer %19

; *****
; For LLVM instruction:
;  %341 = sub i32 %260, %311
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %10, %0
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = var
%15:i32 = var
%16:i32 = xor %14, %15
%17:i32 = and %9, %16 (hasExternalUses)
%18:i32 = xor %14, %17 (hasExternalUses)
%19:i32 = sub %13, %18
infer %19

; *****
; For LLVM instruction:
;  %342 = add i32 %302, %251
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %0, %10
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = var
%15:i32 = var
%16:i32 = xor %15, %14
%17:i32 = and %9, %16 (hasExternalUses)
%18:i32 = xor %14, %17 (hasExternalUses)
%19:i32 = add %13, %18
infer %19

; *****
; For LLVM instruction:
;  %343 = add i32 %303, %252
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %0, %10
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = var
%15:i32 = var
%16:i32 = xor %15, %14
%17:i32 = and %9, %16 (hasExternalUses)
%18:i32 = xor %14, %17 (hasExternalUses)
%19:i32 = add %13, %18
infer %19

; *****
; For LLVM instruction:
;  %344 = add i32 %304, %253
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %0, %10
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = var
%15:i32 = var
%16:i32 = xor %15, %14
%17:i32 = and %9, %16 (hasExternalUses)
%18:i32 = xor %14, %17 (hasExternalUses)
%19:i32 = add %13, %18
infer %19

; *****
; For LLVM instruction:
;  %345 = add i32 %305, %254
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %0, %10
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = var
%15:i32 = var
%16:i32 = xor %15, %14
%17:i32 = and %9, %16 (hasExternalUses)
%18:i32 = xor %14, %17 (hasExternalUses)
%19:i32 = add %13, %18
infer %19

; *****
; For LLVM instruction:
;  %346 = add i32 %306, %255
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %0, %10
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = var
%15:i32 = var
%16:i32 = xor %15, %14
%17:i32 = and %9, %16 (hasExternalUses)
%18:i32 = xor %14, %17 (hasExternalUses)
%19:i32 = add %13, %18
infer %19

; *****
; For LLVM instruction:
;  %347 = add i32 %307, %256
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %0, %10
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = var
%15:i32 = var
%16:i32 = xor %15, %14
%17:i32 = and %9, %16 (hasExternalUses)
%18:i32 = xor %14, %17 (hasExternalUses)
%19:i32 = add %13, %18
infer %19

; *****
; For LLVM instruction:
;  %348 = add i32 %308, %257
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %0, %10
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = var
%15:i32 = var
%16:i32 = xor %15, %14
%17:i32 = and %9, %16 (hasExternalUses)
%18:i32 = xor %14, %17 (hasExternalUses)
%19:i32 = add %13, %18
infer %19

; *****
; For LLVM instruction:
;  %349 = add i32 %309, %258
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %0, %10
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = var
%15:i32 = var
%16:i32 = xor %15, %14
%17:i32 = and %9, %16 (hasExternalUses)
%18:i32 = xor %14, %17 (hasExternalUses)
%19:i32 = add %13, %18
infer %19

; *****
; For LLVM instruction:
;  %350 = add i32 %310, %259
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %0, %10
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = var
%15:i32 = var
%16:i32 = xor %15, %14
%17:i32 = and %9, %16 (hasExternalUses)
%18:i32 = xor %14, %17 (hasExternalUses)
%19:i32 = add %13, %18
infer %19

; *****
; For LLVM instruction:
;  %351 = add i32 %311, %260
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %10, %0
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = var
%15:i32 = var
%16:i32 = xor %14, %15
%17:i32 = and %9, %16 (hasExternalUses)
%18:i32 = xor %14, %17 (hasExternalUses)
%19:i32 = add %13, %18
infer %19

; *****
; For LLVM instruction:
;  %352 = add i32 %312, %261
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %0, %10
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = var
%15:i32 = var
%16:i32 = xor %15, %14
%17:i32 = and %9, %16 (hasExternalUses)
%18:i32 = xor %14, %17 (hasExternalUses)
%19:i32 = add %13, %18
infer %19

; *****
; For LLVM instruction:
;  %353 = add i32 %313, %262
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %0, %10
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = var
%15:i32 = var
%16:i32 = xor %15, %14
%17:i32 = and %9, %16 (hasExternalUses)
%18:i32 = xor %14, %17 (hasExternalUses)
%19:i32 = add %13, %18
infer %19

; *****
; For LLVM instruction:
;  %354 = add i32 %314, %263
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %0, %10
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = var
%15:i32 = var
%16:i32 = xor %15, %14
%17:i32 = and %9, %16 (hasExternalUses)
%18:i32 = xor %14, %17 (hasExternalUses)
%19:i32 = add %13, %18
infer %19

; *****
; For LLVM instruction:
;  %355 = add i32 %315, %264
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %0, %10
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = var
%15:i32 = var
%16:i32 = xor %15, %14
%17:i32 = and %9, %16 (hasExternalUses)
%18:i32 = xor %14, %17 (hasExternalUses)
%19:i32 = add %13, %18
infer %19

; *****
; For LLVM instruction:
;  %356 = add i32 %316, %265
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %0, %10
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = var
%15:i32 = var
%16:i32 = xor %15, %14
%17:i32 = and %9, %16 (hasExternalUses)
%18:i32 = xor %14, %17 (hasExternalUses)
%19:i32 = add %13, %18
infer %19

; *****
; For LLVM instruction:
;  %357 = add i32 %317, %266
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %0, %10
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = var
%15:i32 = var
%16:i32 = xor %15, %14
%17:i32 = and %9, %16 (hasExternalUses)
%18:i32 = xor %14, %17 (hasExternalUses)
%19:i32 = add %13, %18
infer %19

; *****
; For LLVM instruction:
;  %358 = add i32 %318, %267
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %0, %10
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = var
%15:i32 = var
%16:i32 = xor %15, %14
%17:i32 = and %9, %16 (hasExternalUses)
%18:i32 = xor %14, %17 (hasExternalUses)
%19:i32 = add %13, %18
infer %19

; *****
; For LLVM instruction:
;  %359 = add i32 %319, %268
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %0, %10
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = var
%15:i32 = var
%16:i32 = xor %15, %14
%17:i32 = and %9, %16 (hasExternalUses)
%18:i32 = xor %14, %17 (hasExternalUses)
%19:i32 = add %13, %18
infer %19

; *****
; For LLVM instruction:
;  %360 = add i32 %320, %269
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %0, %10
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = var
%15:i32 = var
%16:i32 = xor %15, %14
%17:i32 = and %9, %16 (hasExternalUses)
%18:i32 = xor %14, %17 (hasExternalUses)
%19:i32 = add %13, %18
infer %19

; *****
; For LLVM instruction:
;  %361 = add i32 %321, %270
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %0, %10
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = var
%15:i32 = var
%16:i32 = xor %15, %14
%17:i32 = and %9, %16 (hasExternalUses)
%18:i32 = xor %14, %17 (hasExternalUses)
%19:i32 = add %13, %18
infer %19

; *****
; For LLVM instruction:
;  %362 = load i32, i32* %142, align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %363 = load i32, i32* %112, align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %364 = add i32 %363, %362
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %365 = load i32, i32* %143, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %366 = load i32, i32* %153, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %367 = add i32 %366, %365
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %368 = load i32, i32* %162, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %369 = load i32, i32* %154, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %370 = add i32 %369, %368
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %371 = load i32, i32* %163, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %372 = load i32, i32* %155, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %373 = add i32 %372, %371
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %374 = load i32, i32* %164, align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %375 = load i32, i32* %156, align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %376 = add i32 %375, %374
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %377 = load i32, i32* %165, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %378 = load i32, i32* %157, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %379 = add i32 %378, %377
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %380 = load i32, i32* %166, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %381 = load i32, i32* %158, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %382 = add i32 %381, %380
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %383 = load i32, i32* %167, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %384 = load i32, i32* %159, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %385 = add i32 %384, %383
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %386 = load i32, i32* %168, align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %387 = load i32, i32* %160, align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %388 = add i32 %387, %386
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %389 = load i32, i32* %169, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %390 = load i32, i32* %161, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %391 = add i32 %390, %389
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %392 = sub i32 %362, %363
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2

; *****
; For LLVM instruction:
;  %393 = sub i32 %365, %366
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2

; *****
; For LLVM instruction:
;  %394 = sub i32 %368, %369
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2

; *****
; For LLVM instruction:
;  %395 = sub i32 %371, %372
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2

; *****
; For LLVM instruction:
;  %396 = sub i32 %374, %375
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2

; *****
; For LLVM instruction:
;  %397 = sub i32 %377, %378
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2

; *****
; For LLVM instruction:
;  %398 = sub i32 %380, %381
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2

; *****
; For LLVM instruction:
;  %399 = sub i32 %383, %384
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2

; *****
; For LLVM instruction:
;  %400 = sub i32 %386, %387
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2

; *****
; For LLVM instruction:
;  %401 = sub i32 %389, %390
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2

; *****
; For LLVM instruction:
;  %402 = load i32, i32* %180, align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %403 = load i32, i32* %170, align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %404 = sub i32 %402, %403
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2

; *****
; For LLVM instruction:
;  %405 = load i32, i32* %181, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %406 = load i32, i32* %171, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %407 = sub i32 %405, %406
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2

; *****
; For LLVM instruction:
;  %408 = load i32, i32* %182, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %409 = load i32, i32* %172, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %410 = sub i32 %408, %409
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2

; *****
; For LLVM instruction:
;  %411 = load i32, i32* %183, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %412 = load i32, i32* %173, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %413 = sub i32 %411, %412
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2

; *****
; For LLVM instruction:
;  %414 = load i32, i32* %184, align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %415 = load i32, i32* %174, align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %416 = sub i32 %414, %415
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2

; *****
; For LLVM instruction:
;  %417 = load i32, i32* %185, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %418 = load i32, i32* %175, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %419 = sub i32 %417, %418
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2

; *****
; For LLVM instruction:
;  %420 = load i32, i32* %186, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %421 = load i32, i32* %176, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %422 = sub i32 %420, %421
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2

; *****
; For LLVM instruction:
;  %423 = load i32, i32* %187, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %424 = load i32, i32* %177, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %425 = sub i32 %423, %424
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2

; *****
; For LLVM instruction:
;  %426 = load i32, i32* %188, align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %427 = load i32, i32* %178, align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %428 = sub i32 %426, %427
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2

; *****
; For LLVM instruction:
;  %429 = load i32, i32* %189, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %430 = load i32, i32* %179, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %431 = sub i32 %429, %430
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2

; *****
; For LLVM instruction:
;  %432 = sext i32 %404 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
infer %3 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %433 = mul nsw i64 %432, 121666
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
infer %4 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %434 = sext i32 %407 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
infer %3

; *****
; For LLVM instruction:
;  %435 = mul nsw i64 %434, 121666
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
infer %4

; *****
; For LLVM instruction:
;  %436 = sext i32 %410 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
infer %3 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %437 = mul nsw i64 %436, 121666
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
infer %4 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %438 = sext i32 %413 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
infer %3

; *****
; For LLVM instruction:
;  %439 = mul nsw i64 %438, 121666
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
infer %4

; *****
; For LLVM instruction:
;  %440 = sext i32 %416 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
infer %3 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %441 = mul nsw i64 %440, 121666
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
infer %4 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %442 = sext i32 %419 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
infer %3

; *****
; For LLVM instruction:
;  %443 = mul nsw i64 %442, 121666
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
infer %4

; *****
; For LLVM instruction:
;  %444 = sext i32 %422 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
infer %3 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %445 = mul nsw i64 %444, 121666
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
infer %4 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %446 = sext i32 %425 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
infer %3

; *****
; For LLVM instruction:
;  %447 = mul nsw i64 %446, 121666
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
infer %4

; *****
; For LLVM instruction:
;  %448 = sext i32 %428 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
infer %3 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %449 = mul nsw i64 %448, 121666
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
infer %4 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %450 = sext i32 %431 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
infer %3

; *****
; For LLVM instruction:
;  %451 = mul nsw i64 %450, 121666
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
infer %4

; *****
; For LLVM instruction:
;  %452 = add nsw i64 %451, 16777216
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3 (hasExternalUses)
%5:i64 = addnsw 16777216:i64, %4
infer %5 (demandedBits=1111111111111111111111111111111111111110000000000000000000000000)

; *****
; For LLVM instruction:
;  %453 = ashr i64 %452, 25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3 (hasExternalUses)
%5:i64 = addnsw 16777216:i64, %4 (hasExternalUses)
%6:i64 = ashr %5, 25:i64
infer %6 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %454 = mul nsw i64 %453, 19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3 (hasExternalUses)
%5:i64 = addnsw 16777216:i64, %4 (hasExternalUses)
%6:i64 = ashr %5, 25:i64
%7:i64 = mulnsw 19:i64, %6
infer %7 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %455 = add nsw i64 %433, %454
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3 (hasExternalUses)
%5:i64 = addnsw 16777216:i64, %4 (hasExternalUses)
%6:i64 = ashr %5, 25:i64
%7:i64 = mulnsw 19:i64, %6
%8:i32 = var
%9:i32 = var
%10:i32 = sub %8, %9 (hasExternalUses)
%11:i64 = sext %10
%12:i64 = mulnsw 121666:i64, %11
%13:i64 = addnsw %7, %12
infer %13 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %456 = and i64 %452, 4261412864
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3 (hasExternalUses)
%5:i64 = addnsw 16777216:i64, %4 (hasExternalUses)
%6:i64 = and 4261412864:i64, %5
infer %6 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %457 = add nsw i64 %435, 16777216
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3 (hasExternalUses)
%5:i64 = addnsw 16777216:i64, %4
infer %5 (demandedBits=1111111111111111111111111111111111111110000000000000000000000000)

; *****
; For LLVM instruction:
;  %458 = ashr i64 %457, 25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3 (hasExternalUses)
%5:i64 = addnsw 16777216:i64, %4 (hasExternalUses)
%6:i64 = ashr %5, 25:i64
infer %6 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %459 = add nsw i64 %458, %437
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
%5:i32 = var
%6:i32 = var
%7:i32 = sub %5, %6 (hasExternalUses)
%8:i64 = sext %7
%9:i64 = mulnsw 121666:i64, %8 (hasExternalUses)
%10:i64 = addnsw 16777216:i64, %9 (hasExternalUses)
%11:i64 = ashr %10, 25:i64
%12:i64 = addnsw %4, %11
infer %12 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %460 = and i64 %457, 4261412864
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3 (hasExternalUses)
%5:i64 = addnsw 16777216:i64, %4 (hasExternalUses)
%6:i64 = and 4261412864:i64, %5
infer %6 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %461 = sub nsw i64 %435, %460
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
%5:i64 = addnsw 16777216:i64, %4 (hasExternalUses)
%6:i64 = and 4261412864:i64, %5
%7:i64 = subnsw %4, %6
infer %7 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %462 = add nsw i64 %439, 16777216
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3 (hasExternalUses)
%5:i64 = addnsw 16777216:i64, %4
infer %5 (demandedBits=1111111111111111111111111111111111111110000000000000000000000000)

; *****
; For LLVM instruction:
;  %463 = ashr i64 %462, 25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3 (hasExternalUses)
%5:i64 = addnsw 16777216:i64, %4 (hasExternalUses)
%6:i64 = ashr %5, 25:i64
infer %6 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %464 = add nsw i64 %463, %441
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
%5:i32 = var
%6:i32 = var
%7:i32 = sub %5, %6 (hasExternalUses)
%8:i64 = sext %7
%9:i64 = mulnsw 121666:i64, %8 (hasExternalUses)
%10:i64 = addnsw 16777216:i64, %9 (hasExternalUses)
%11:i64 = ashr %10, 25:i64
%12:i64 = addnsw %4, %11
infer %12 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %465 = and i64 %462, 4261412864
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3 (hasExternalUses)
%5:i64 = addnsw 16777216:i64, %4 (hasExternalUses)
%6:i64 = and 4261412864:i64, %5
infer %6 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %466 = sub nsw i64 %439, %465
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
%5:i64 = addnsw 16777216:i64, %4 (hasExternalUses)
%6:i64 = and 4261412864:i64, %5
%7:i64 = subnsw %4, %6
infer %7 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %467 = add nsw i64 %443, 16777216
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3 (hasExternalUses)
%5:i64 = addnsw 16777216:i64, %4
infer %5 (demandedBits=1111111111111111111111111111111111111110000000000000000000000000)

; *****
; For LLVM instruction:
;  %468 = ashr i64 %467, 25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3 (hasExternalUses)
%5:i64 = addnsw 16777216:i64, %4 (hasExternalUses)
%6:i64 = ashr %5, 25:i64
infer %6 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %469 = add nsw i64 %468, %445
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
%5:i32 = var
%6:i32 = var
%7:i32 = sub %5, %6 (hasExternalUses)
%8:i64 = sext %7
%9:i64 = mulnsw 121666:i64, %8 (hasExternalUses)
%10:i64 = addnsw 16777216:i64, %9 (hasExternalUses)
%11:i64 = ashr %10, 25:i64
%12:i64 = addnsw %4, %11
infer %12 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %470 = and i64 %467, 4261412864
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3 (hasExternalUses)
%5:i64 = addnsw 16777216:i64, %4 (hasExternalUses)
%6:i64 = and 4261412864:i64, %5
infer %6 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %471 = sub nsw i64 %443, %470
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
%5:i64 = addnsw 16777216:i64, %4 (hasExternalUses)
%6:i64 = and 4261412864:i64, %5
%7:i64 = subnsw %4, %6
infer %7 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %472 = add nsw i64 %447, 16777216
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3 (hasExternalUses)
%5:i64 = addnsw 16777216:i64, %4
infer %5 (demandedBits=1111111111111111111111111111111111111110000000000000000000000000)

; *****
; For LLVM instruction:
;  %473 = ashr i64 %472, 25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3 (hasExternalUses)
%5:i64 = addnsw 16777216:i64, %4 (hasExternalUses)
%6:i64 = ashr %5, 25:i64
infer %6 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %474 = add nsw i64 %473, %449
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
%5:i32 = var
%6:i32 = var
%7:i32 = sub %5, %6 (hasExternalUses)
%8:i64 = sext %7
%9:i64 = mulnsw 121666:i64, %8 (hasExternalUses)
%10:i64 = addnsw 16777216:i64, %9 (hasExternalUses)
%11:i64 = ashr %10, 25:i64
%12:i64 = addnsw %4, %11
infer %12 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %475 = and i64 %472, 4261412864
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3 (hasExternalUses)
%5:i64 = addnsw 16777216:i64, %4 (hasExternalUses)
%6:i64 = and 4261412864:i64, %5
infer %6 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %476 = sub nsw i64 %447, %475
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
%5:i64 = addnsw 16777216:i64, %4 (hasExternalUses)
%6:i64 = and 4261412864:i64, %5
%7:i64 = subnsw %4, %6
infer %7 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %477 = add nsw i64 %455, 33554432
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3 (hasExternalUses)
%5:i64 = addnsw 16777216:i64, %4 (hasExternalUses)
%6:i64 = ashr %5, 25:i64
%7:i64 = mulnsw 19:i64, %6
%8:i32 = var
%9:i32 = var
%10:i32 = sub %8, %9 (hasExternalUses)
%11:i64 = sext %10
%12:i64 = mulnsw 121666:i64, %11
%13:i64 = addnsw %7, %12 (hasExternalUses)
%14:i64 = addnsw 33554432:i64, %13
infer %14 (demandedBits=0000001111111111111111111111111111111100000000000000000000000000)

; *****
; For LLVM instruction:
;  %478 = lshr i64 %477, 26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3 (hasExternalUses)
%5:i64 = addnsw 16777216:i64, %4 (hasExternalUses)
%6:i64 = ashr %5, 25:i64
%7:i64 = mulnsw 19:i64, %6
%8:i32 = var
%9:i32 = var
%10:i32 = sub %8, %9 (hasExternalUses)
%11:i64 = sext %10
%12:i64 = mulnsw 121666:i64, %11
%13:i64 = addnsw %7, %12 (hasExternalUses)
%14:i64 = addnsw 33554432:i64, %13 (hasExternalUses)
%15:i64 = lshr %14, 26:i64
infer %15 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %479 = add nsw i64 %461, %478
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
%5:i64 = addnsw 16777216:i64, %4 (hasExternalUses)
%6:i64 = and 4261412864:i64, %5
%7:i64 = subnsw %4, %6
%8:i32 = var
%9:i32 = var
%10:i32 = sub %8, %9 (hasExternalUses)
%11:i64 = sext %10
%12:i64 = mulnsw 121666:i64, %11 (hasExternalUses)
%13:i64 = addnsw 16777216:i64, %12 (hasExternalUses)
%14:i64 = ashr %13, 25:i64
%15:i64 = mulnsw 19:i64, %14
%16:i32 = var
%17:i32 = var
%18:i32 = sub %16, %17 (hasExternalUses)
%19:i64 = sext %18
%20:i64 = mulnsw 121666:i64, %19
%21:i64 = addnsw %15, %20 (hasExternalUses)
%22:i64 = addnsw 33554432:i64, %21 (hasExternalUses)
%23:i64 = lshr %22, 26:i64
%24:i64 = addnsw %7, %23
infer %24 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %480 = and i64 %477, 4227858432
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3 (hasExternalUses)
%5:i64 = addnsw 16777216:i64, %4 (hasExternalUses)
%6:i64 = ashr %5, 25:i64
%7:i64 = mulnsw 19:i64, %6
%8:i32 = var
%9:i32 = var
%10:i32 = sub %8, %9 (hasExternalUses)
%11:i64 = sext %10
%12:i64 = mulnsw 121666:i64, %11
%13:i64 = addnsw %7, %12 (hasExternalUses)
%14:i64 = addnsw 33554432:i64, %13 (hasExternalUses)
%15:i64 = and 4227858432:i64, %14
infer %15 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %481 = sub nsw i64 %455, %480
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3 (hasExternalUses)
%5:i64 = addnsw 16777216:i64, %4 (hasExternalUses)
%6:i64 = ashr %5, 25:i64
%7:i64 = mulnsw 19:i64, %6
%8:i32 = var
%9:i32 = var
%10:i32 = sub %8, %9 (hasExternalUses)
%11:i64 = sext %10
%12:i64 = mulnsw 121666:i64, %11
%13:i64 = addnsw %7, %12
%14:i64 = addnsw 33554432:i64, %13 (hasExternalUses)
%15:i64 = and 4227858432:i64, %14
%16:i64 = subnsw %13, %15
infer %16 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %482 = add nsw i64 %459, 33554432
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
%5:i32 = var
%6:i32 = var
%7:i32 = sub %5, %6 (hasExternalUses)
%8:i64 = sext %7
%9:i64 = mulnsw 121666:i64, %8 (hasExternalUses)
%10:i64 = addnsw 16777216:i64, %9 (hasExternalUses)
%11:i64 = ashr %10, 25:i64
%12:i64 = addnsw %4, %11 (hasExternalUses)
%13:i64 = addnsw 33554432:i64, %12
infer %13 (demandedBits=0000001111111111111111111111111111111100000000000000000000000000)

; *****
; For LLVM instruction:
;  %483 = lshr i64 %482, 26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
%5:i32 = var
%6:i32 = var
%7:i32 = sub %5, %6 (hasExternalUses)
%8:i64 = sext %7
%9:i64 = mulnsw 121666:i64, %8 (hasExternalUses)
%10:i64 = addnsw 16777216:i64, %9 (hasExternalUses)
%11:i64 = ashr %10, 25:i64
%12:i64 = addnsw %4, %11 (hasExternalUses)
%13:i64 = addnsw 33554432:i64, %12 (hasExternalUses)
%14:i64 = lshr %13, 26:i64
infer %14 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %484 = add nsw i64 %466, %483
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
%5:i64 = addnsw 16777216:i64, %4 (hasExternalUses)
%6:i64 = and 4261412864:i64, %5
%7:i64 = subnsw %4, %6
%8:i32 = var
%9:i32 = var
%10:i32 = sub %8, %9 (hasExternalUses)
%11:i64 = sext %10
%12:i64 = mulnsw 121666:i64, %11
%13:i32 = var
%14:i32 = var
%15:i32 = sub %13, %14 (hasExternalUses)
%16:i64 = sext %15
%17:i64 = mulnsw 121666:i64, %16 (hasExternalUses)
%18:i64 = addnsw 16777216:i64, %17 (hasExternalUses)
%19:i64 = ashr %18, 25:i64
%20:i64 = addnsw %12, %19 (hasExternalUses)
%21:i64 = addnsw 33554432:i64, %20 (hasExternalUses)
%22:i64 = lshr %21, 26:i64
%23:i64 = addnsw %7, %22
infer %23 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %485 = and i64 %482, 4227858432
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
%5:i32 = var
%6:i32 = var
%7:i32 = sub %5, %6 (hasExternalUses)
%8:i64 = sext %7
%9:i64 = mulnsw 121666:i64, %8 (hasExternalUses)
%10:i64 = addnsw 16777216:i64, %9 (hasExternalUses)
%11:i64 = ashr %10, 25:i64
%12:i64 = addnsw %4, %11 (hasExternalUses)
%13:i64 = addnsw 33554432:i64, %12 (hasExternalUses)
%14:i64 = and 4227858432:i64, %13
infer %14 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %486 = sub nsw i64 %459, %485
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
%5:i32 = var
%6:i32 = var
%7:i32 = sub %5, %6 (hasExternalUses)
%8:i64 = sext %7
%9:i64 = mulnsw 121666:i64, %8 (hasExternalUses)
%10:i64 = addnsw 16777216:i64, %9 (hasExternalUses)
%11:i64 = ashr %10, 25:i64
%12:i64 = addnsw %4, %11
%13:i64 = addnsw 33554432:i64, %12 (hasExternalUses)
%14:i64 = and 4227858432:i64, %13
%15:i64 = subnsw %12, %14
infer %15 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %487 = add nsw i64 %464, 33554432
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
%5:i32 = var
%6:i32 = var
%7:i32 = sub %5, %6 (hasExternalUses)
%8:i64 = sext %7
%9:i64 = mulnsw 121666:i64, %8 (hasExternalUses)
%10:i64 = addnsw 16777216:i64, %9 (hasExternalUses)
%11:i64 = ashr %10, 25:i64
%12:i64 = addnsw %4, %11 (hasExternalUses)
%13:i64 = addnsw 33554432:i64, %12
infer %13 (demandedBits=0000001111111111111111111111111111111100000000000000000000000000)

; *****
; For LLVM instruction:
;  %488 = lshr i64 %487, 26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
%5:i32 = var
%6:i32 = var
%7:i32 = sub %5, %6 (hasExternalUses)
%8:i64 = sext %7
%9:i64 = mulnsw 121666:i64, %8 (hasExternalUses)
%10:i64 = addnsw 16777216:i64, %9 (hasExternalUses)
%11:i64 = ashr %10, 25:i64
%12:i64 = addnsw %4, %11 (hasExternalUses)
%13:i64 = addnsw 33554432:i64, %12 (hasExternalUses)
%14:i64 = lshr %13, 26:i64
infer %14 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %489 = add nsw i64 %471, %488
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
%5:i64 = addnsw 16777216:i64, %4 (hasExternalUses)
%6:i64 = and 4261412864:i64, %5
%7:i64 = subnsw %4, %6
%8:i32 = var
%9:i32 = var
%10:i32 = sub %8, %9 (hasExternalUses)
%11:i64 = sext %10
%12:i64 = mulnsw 121666:i64, %11
%13:i32 = var
%14:i32 = var
%15:i32 = sub %13, %14 (hasExternalUses)
%16:i64 = sext %15
%17:i64 = mulnsw 121666:i64, %16 (hasExternalUses)
%18:i64 = addnsw 16777216:i64, %17 (hasExternalUses)
%19:i64 = ashr %18, 25:i64
%20:i64 = addnsw %12, %19 (hasExternalUses)
%21:i64 = addnsw 33554432:i64, %20 (hasExternalUses)
%22:i64 = lshr %21, 26:i64
%23:i64 = addnsw %7, %22
infer %23 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %490 = and i64 %487, 4227858432
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
%5:i32 = var
%6:i32 = var
%7:i32 = sub %5, %6 (hasExternalUses)
%8:i64 = sext %7
%9:i64 = mulnsw 121666:i64, %8 (hasExternalUses)
%10:i64 = addnsw 16777216:i64, %9 (hasExternalUses)
%11:i64 = ashr %10, 25:i64
%12:i64 = addnsw %4, %11 (hasExternalUses)
%13:i64 = addnsw 33554432:i64, %12 (hasExternalUses)
%14:i64 = and 4227858432:i64, %13
infer %14 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %491 = sub nsw i64 %464, %490
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
%5:i32 = var
%6:i32 = var
%7:i32 = sub %5, %6 (hasExternalUses)
%8:i64 = sext %7
%9:i64 = mulnsw 121666:i64, %8 (hasExternalUses)
%10:i64 = addnsw 16777216:i64, %9 (hasExternalUses)
%11:i64 = ashr %10, 25:i64
%12:i64 = addnsw %4, %11
%13:i64 = addnsw 33554432:i64, %12 (hasExternalUses)
%14:i64 = and 4227858432:i64, %13
%15:i64 = subnsw %12, %14
infer %15 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %492 = add nsw i64 %469, 33554432
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
%5:i32 = var
%6:i32 = var
%7:i32 = sub %5, %6 (hasExternalUses)
%8:i64 = sext %7
%9:i64 = mulnsw 121666:i64, %8 (hasExternalUses)
%10:i64 = addnsw 16777216:i64, %9 (hasExternalUses)
%11:i64 = ashr %10, 25:i64
%12:i64 = addnsw %4, %11 (hasExternalUses)
%13:i64 = addnsw 33554432:i64, %12
infer %13 (demandedBits=0000001111111111111111111111111111111100000000000000000000000000)

; *****
; For LLVM instruction:
;  %493 = lshr i64 %492, 26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
%5:i32 = var
%6:i32 = var
%7:i32 = sub %5, %6 (hasExternalUses)
%8:i64 = sext %7
%9:i64 = mulnsw 121666:i64, %8 (hasExternalUses)
%10:i64 = addnsw 16777216:i64, %9 (hasExternalUses)
%11:i64 = ashr %10, 25:i64
%12:i64 = addnsw %4, %11 (hasExternalUses)
%13:i64 = addnsw 33554432:i64, %12 (hasExternalUses)
%14:i64 = lshr %13, 26:i64
infer %14 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %494 = add nsw i64 %476, %493
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
%5:i64 = addnsw 16777216:i64, %4 (hasExternalUses)
%6:i64 = and 4261412864:i64, %5
%7:i64 = subnsw %4, %6
%8:i32 = var
%9:i32 = var
%10:i32 = sub %8, %9 (hasExternalUses)
%11:i64 = sext %10
%12:i64 = mulnsw 121666:i64, %11
%13:i32 = var
%14:i32 = var
%15:i32 = sub %13, %14 (hasExternalUses)
%16:i64 = sext %15
%17:i64 = mulnsw 121666:i64, %16 (hasExternalUses)
%18:i64 = addnsw 16777216:i64, %17 (hasExternalUses)
%19:i64 = ashr %18, 25:i64
%20:i64 = addnsw %12, %19 (hasExternalUses)
%21:i64 = addnsw 33554432:i64, %20 (hasExternalUses)
%22:i64 = lshr %21, 26:i64
%23:i64 = addnsw %7, %22
infer %23 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %495 = and i64 %492, 4227858432
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
%5:i32 = var
%6:i32 = var
%7:i32 = sub %5, %6 (hasExternalUses)
%8:i64 = sext %7
%9:i64 = mulnsw 121666:i64, %8 (hasExternalUses)
%10:i64 = addnsw 16777216:i64, %9 (hasExternalUses)
%11:i64 = ashr %10, 25:i64
%12:i64 = addnsw %4, %11 (hasExternalUses)
%13:i64 = addnsw 33554432:i64, %12 (hasExternalUses)
%14:i64 = and 4227858432:i64, %13
infer %14 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %496 = sub nsw i64 %469, %495
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
%5:i32 = var
%6:i32 = var
%7:i32 = sub %5, %6 (hasExternalUses)
%8:i64 = sext %7
%9:i64 = mulnsw 121666:i64, %8 (hasExternalUses)
%10:i64 = addnsw 16777216:i64, %9 (hasExternalUses)
%11:i64 = ashr %10, 25:i64
%12:i64 = addnsw %4, %11
%13:i64 = addnsw 33554432:i64, %12 (hasExternalUses)
%14:i64 = and 4227858432:i64, %13
%15:i64 = subnsw %12, %14
infer %15 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %497 = add nsw i64 %474, 33554432
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
%5:i32 = var
%6:i32 = var
%7:i32 = sub %5, %6 (hasExternalUses)
%8:i64 = sext %7
%9:i64 = mulnsw 121666:i64, %8 (hasExternalUses)
%10:i64 = addnsw 16777216:i64, %9 (hasExternalUses)
%11:i64 = ashr %10, 25:i64
%12:i64 = addnsw %4, %11 (hasExternalUses)
%13:i64 = addnsw 33554432:i64, %12
infer %13 (demandedBits=0000001111111111111111111111111111111100000000000000000000000000)

; *****
; For LLVM instruction:
;  %498 = lshr i64 %497, 26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
%5:i32 = var
%6:i32 = var
%7:i32 = sub %5, %6 (hasExternalUses)
%8:i64 = sext %7
%9:i64 = mulnsw 121666:i64, %8 (hasExternalUses)
%10:i64 = addnsw 16777216:i64, %9 (hasExternalUses)
%11:i64 = ashr %10, 25:i64
%12:i64 = addnsw %4, %11 (hasExternalUses)
%13:i64 = addnsw 33554432:i64, %12 (hasExternalUses)
%14:i64 = lshr %13, 26:i64
infer %14 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %499 = add nsw i64 %498, %451
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3 (hasExternalUses)
%5:i32 = var
%6:i32 = var
%7:i32 = sub %5, %6 (hasExternalUses)
%8:i64 = sext %7
%9:i64 = mulnsw 121666:i64, %8
%10:i32 = var
%11:i32 = var
%12:i32 = sub %10, %11 (hasExternalUses)
%13:i64 = sext %12
%14:i64 = mulnsw 121666:i64, %13 (hasExternalUses)
%15:i64 = addnsw 16777216:i64, %14 (hasExternalUses)
%16:i64 = ashr %15, 25:i64
%17:i64 = addnsw %9, %16 (hasExternalUses)
%18:i64 = addnsw 33554432:i64, %17 (hasExternalUses)
%19:i64 = lshr %18, 26:i64
%20:i64 = addnsw %4, %19
infer %20 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %500 = sub nsw i64 %499, %456
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
%5:i32 = var
%6:i32 = var
%7:i32 = sub %5, %6 (hasExternalUses)
%8:i64 = sext %7
%9:i64 = mulnsw 121666:i64, %8
%10:i32 = var
%11:i32 = var
%12:i32 = sub %10, %11 (hasExternalUses)
%13:i64 = sext %12
%14:i64 = mulnsw 121666:i64, %13 (hasExternalUses)
%15:i64 = addnsw 16777216:i64, %14 (hasExternalUses)
%16:i64 = ashr %15, 25:i64
%17:i64 = addnsw %9, %16 (hasExternalUses)
%18:i64 = addnsw 33554432:i64, %17 (hasExternalUses)
%19:i64 = lshr %18, 26:i64
%20:i64 = addnsw %4, %19
%21:i64 = addnsw 16777216:i64, %4 (hasExternalUses)
%22:i64 = and 4261412864:i64, %21
%23:i64 = subnsw %20, %22
infer %23 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %501 = and i64 %497, 4227858432
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
%5:i32 = var
%6:i32 = var
%7:i32 = sub %5, %6 (hasExternalUses)
%8:i64 = sext %7
%9:i64 = mulnsw 121666:i64, %8 (hasExternalUses)
%10:i64 = addnsw 16777216:i64, %9 (hasExternalUses)
%11:i64 = ashr %10, 25:i64
%12:i64 = addnsw %4, %11 (hasExternalUses)
%13:i64 = addnsw 33554432:i64, %12 (hasExternalUses)
%14:i64 = and 4227858432:i64, %13
infer %14 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %502 = sub nsw i64 %474, %501
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
%5:i32 = var
%6:i32 = var
%7:i32 = sub %5, %6 (hasExternalUses)
%8:i64 = sext %7
%9:i64 = mulnsw 121666:i64, %8 (hasExternalUses)
%10:i64 = addnsw 16777216:i64, %9 (hasExternalUses)
%11:i64 = ashr %10, 25:i64
%12:i64 = addnsw %4, %11
%13:i64 = addnsw 33554432:i64, %12 (hasExternalUses)
%14:i64 = and 4227858432:i64, %13
%15:i64 = subnsw %12, %14
infer %15 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %503 = trunc i64 %481 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3 (hasExternalUses)
%5:i64 = addnsw 16777216:i64, %4 (hasExternalUses)
%6:i64 = ashr %5, 25:i64
%7:i64 = mulnsw 19:i64, %6
%8:i32 = var
%9:i32 = var
%10:i32 = sub %8, %9 (hasExternalUses)
%11:i64 = sext %10
%12:i64 = mulnsw 121666:i64, %11
%13:i64 = addnsw %7, %12
%14:i64 = addnsw 33554432:i64, %13 (hasExternalUses)
%15:i64 = and 4227858432:i64, %14
%16:i64 = subnsw %13, %15
%17:i32 = trunc %16
infer %17

; *****
; For LLVM instruction:
;  %504 = trunc i64 %479 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
%5:i64 = addnsw 16777216:i64, %4 (hasExternalUses)
%6:i64 = and 4261412864:i64, %5
%7:i64 = subnsw %4, %6
%8:i32 = var
%9:i32 = var
%10:i32 = sub %8, %9 (hasExternalUses)
%11:i64 = sext %10
%12:i64 = mulnsw 121666:i64, %11 (hasExternalUses)
%13:i64 = addnsw 16777216:i64, %12 (hasExternalUses)
%14:i64 = ashr %13, 25:i64
%15:i64 = mulnsw 19:i64, %14
%16:i32 = var
%17:i32 = var
%18:i32 = sub %16, %17 (hasExternalUses)
%19:i64 = sext %18
%20:i64 = mulnsw 121666:i64, %19
%21:i64 = addnsw %15, %20 (hasExternalUses)
%22:i64 = addnsw 33554432:i64, %21 (hasExternalUses)
%23:i64 = lshr %22, 26:i64
%24:i64 = addnsw %7, %23
%25:i32 = trunc %24
infer %25

; *****
; For LLVM instruction:
;  %505 = trunc i64 %486 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
%5:i32 = var
%6:i32 = var
%7:i32 = sub %5, %6 (hasExternalUses)
%8:i64 = sext %7
%9:i64 = mulnsw 121666:i64, %8 (hasExternalUses)
%10:i64 = addnsw 16777216:i64, %9 (hasExternalUses)
%11:i64 = ashr %10, 25:i64
%12:i64 = addnsw %4, %11
%13:i64 = addnsw 33554432:i64, %12 (hasExternalUses)
%14:i64 = and 4227858432:i64, %13
%15:i64 = subnsw %12, %14
%16:i32 = trunc %15
infer %16

; *****
; For LLVM instruction:
;  %506 = trunc i64 %484 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
%5:i64 = addnsw 16777216:i64, %4 (hasExternalUses)
%6:i64 = and 4261412864:i64, %5
%7:i64 = subnsw %4, %6
%8:i32 = var
%9:i32 = var
%10:i32 = sub %8, %9 (hasExternalUses)
%11:i64 = sext %10
%12:i64 = mulnsw 121666:i64, %11
%13:i32 = var
%14:i32 = var
%15:i32 = sub %13, %14 (hasExternalUses)
%16:i64 = sext %15
%17:i64 = mulnsw 121666:i64, %16 (hasExternalUses)
%18:i64 = addnsw 16777216:i64, %17 (hasExternalUses)
%19:i64 = ashr %18, 25:i64
%20:i64 = addnsw %12, %19 (hasExternalUses)
%21:i64 = addnsw 33554432:i64, %20 (hasExternalUses)
%22:i64 = lshr %21, 26:i64
%23:i64 = addnsw %7, %22
%24:i32 = trunc %23
infer %24

; *****
; For LLVM instruction:
;  %507 = trunc i64 %491 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
%5:i32 = var
%6:i32 = var
%7:i32 = sub %5, %6 (hasExternalUses)
%8:i64 = sext %7
%9:i64 = mulnsw 121666:i64, %8 (hasExternalUses)
%10:i64 = addnsw 16777216:i64, %9 (hasExternalUses)
%11:i64 = ashr %10, 25:i64
%12:i64 = addnsw %4, %11
%13:i64 = addnsw 33554432:i64, %12 (hasExternalUses)
%14:i64 = and 4227858432:i64, %13
%15:i64 = subnsw %12, %14
%16:i32 = trunc %15
infer %16

; *****
; For LLVM instruction:
;  %508 = trunc i64 %489 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
%5:i64 = addnsw 16777216:i64, %4 (hasExternalUses)
%6:i64 = and 4261412864:i64, %5
%7:i64 = subnsw %4, %6
%8:i32 = var
%9:i32 = var
%10:i32 = sub %8, %9 (hasExternalUses)
%11:i64 = sext %10
%12:i64 = mulnsw 121666:i64, %11
%13:i32 = var
%14:i32 = var
%15:i32 = sub %13, %14 (hasExternalUses)
%16:i64 = sext %15
%17:i64 = mulnsw 121666:i64, %16 (hasExternalUses)
%18:i64 = addnsw 16777216:i64, %17 (hasExternalUses)
%19:i64 = ashr %18, 25:i64
%20:i64 = addnsw %12, %19 (hasExternalUses)
%21:i64 = addnsw 33554432:i64, %20 (hasExternalUses)
%22:i64 = lshr %21, 26:i64
%23:i64 = addnsw %7, %22
%24:i32 = trunc %23
infer %24

; *****
; For LLVM instruction:
;  %509 = trunc i64 %496 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
%5:i32 = var
%6:i32 = var
%7:i32 = sub %5, %6 (hasExternalUses)
%8:i64 = sext %7
%9:i64 = mulnsw 121666:i64, %8 (hasExternalUses)
%10:i64 = addnsw 16777216:i64, %9 (hasExternalUses)
%11:i64 = ashr %10, 25:i64
%12:i64 = addnsw %4, %11
%13:i64 = addnsw 33554432:i64, %12 (hasExternalUses)
%14:i64 = and 4227858432:i64, %13
%15:i64 = subnsw %12, %14
%16:i32 = trunc %15
infer %16

; *****
; For LLVM instruction:
;  %510 = trunc i64 %494 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
%5:i64 = addnsw 16777216:i64, %4 (hasExternalUses)
%6:i64 = and 4261412864:i64, %5
%7:i64 = subnsw %4, %6
%8:i32 = var
%9:i32 = var
%10:i32 = sub %8, %9 (hasExternalUses)
%11:i64 = sext %10
%12:i64 = mulnsw 121666:i64, %11
%13:i32 = var
%14:i32 = var
%15:i32 = sub %13, %14 (hasExternalUses)
%16:i64 = sext %15
%17:i64 = mulnsw 121666:i64, %16 (hasExternalUses)
%18:i64 = addnsw 16777216:i64, %17 (hasExternalUses)
%19:i64 = ashr %18, 25:i64
%20:i64 = addnsw %12, %19 (hasExternalUses)
%21:i64 = addnsw 33554432:i64, %20 (hasExternalUses)
%22:i64 = lshr %21, 26:i64
%23:i64 = addnsw %7, %22
%24:i32 = trunc %23
infer %24

; *****
; For LLVM instruction:
;  %511 = trunc i64 %502 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
%5:i32 = var
%6:i32 = var
%7:i32 = sub %5, %6 (hasExternalUses)
%8:i64 = sext %7
%9:i64 = mulnsw 121666:i64, %8 (hasExternalUses)
%10:i64 = addnsw 16777216:i64, %9 (hasExternalUses)
%11:i64 = ashr %10, 25:i64
%12:i64 = addnsw %4, %11
%13:i64 = addnsw 33554432:i64, %12 (hasExternalUses)
%14:i64 = and 4227858432:i64, %13
%15:i64 = subnsw %12, %14
%16:i32 = trunc %15
infer %16

; *****
; For LLVM instruction:
;  %512 = trunc i64 %500 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
%5:i32 = var
%6:i32 = var
%7:i32 = sub %5, %6 (hasExternalUses)
%8:i64 = sext %7
%9:i64 = mulnsw 121666:i64, %8
%10:i32 = var
%11:i32 = var
%12:i32 = sub %10, %11 (hasExternalUses)
%13:i64 = sext %12
%14:i64 = mulnsw 121666:i64, %13 (hasExternalUses)
%15:i64 = addnsw 16777216:i64, %14 (hasExternalUses)
%16:i64 = ashr %15, 25:i64
%17:i64 = addnsw %9, %16 (hasExternalUses)
%18:i64 = addnsw 33554432:i64, %17 (hasExternalUses)
%19:i64 = lshr %18, 26:i64
%20:i64 = addnsw %4, %19
%21:i64 = addnsw 16777216:i64, %4 (hasExternalUses)
%22:i64 = and 4261412864:i64, %21
%23:i64 = subnsw %20, %22
%24:i32 = trunc %23
infer %24

; *****
; For LLVM instruction:
;  %513 = load i32, i32* %170, align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %514 = add i32 %513, %503
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = sub %1, %2 (hasExternalUses)
%4:i64 = sext %3
%5:i64 = mulnsw 121666:i64, %4 (hasExternalUses)
%6:i64 = addnsw 16777216:i64, %5 (hasExternalUses)
%7:i64 = ashr %6, 25:i64
%8:i64 = mulnsw 19:i64, %7
%9:i32 = var
%10:i32 = var
%11:i32 = sub %9, %10 (hasExternalUses)
%12:i64 = sext %11
%13:i64 = mulnsw 121666:i64, %12
%14:i64 = addnsw %8, %13
%15:i64 = addnsw 33554432:i64, %14 (hasExternalUses)
%16:i64 = and 4227858432:i64, %15
%17:i64 = subnsw %14, %16
%18:i32 = trunc %17 (hasExternalUses)
%19:i32 = add %0, %18
infer %19

; *****
; For LLVM instruction:
;  %515 = load i32, i32* %171, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %516 = add i32 %515, %504
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = sub %1, %2 (hasExternalUses)
%4:i64 = sext %3
%5:i64 = mulnsw 121666:i64, %4
%6:i64 = addnsw 16777216:i64, %5 (hasExternalUses)
%7:i64 = and 4261412864:i64, %6
%8:i64 = subnsw %5, %7
%9:i32 = var
%10:i32 = var
%11:i32 = sub %9, %10 (hasExternalUses)
%12:i64 = sext %11
%13:i64 = mulnsw 121666:i64, %12 (hasExternalUses)
%14:i64 = addnsw 16777216:i64, %13 (hasExternalUses)
%15:i64 = ashr %14, 25:i64
%16:i64 = mulnsw 19:i64, %15
%17:i32 = var
%18:i32 = var
%19:i32 = sub %17, %18 (hasExternalUses)
%20:i64 = sext %19
%21:i64 = mulnsw 121666:i64, %20
%22:i64 = addnsw %16, %21 (hasExternalUses)
%23:i64 = addnsw 33554432:i64, %22 (hasExternalUses)
%24:i64 = lshr %23, 26:i64
%25:i64 = addnsw %8, %24
%26:i32 = trunc %25 (hasExternalUses)
%27:i32 = add %0, %26
infer %27

; *****
; For LLVM instruction:
;  %517 = load i32, i32* %172, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %518 = add i32 %517, %505
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = sub %1, %2 (hasExternalUses)
%4:i64 = sext %3
%5:i64 = mulnsw 121666:i64, %4
%6:i32 = var
%7:i32 = var
%8:i32 = sub %6, %7 (hasExternalUses)
%9:i64 = sext %8
%10:i64 = mulnsw 121666:i64, %9 (hasExternalUses)
%11:i64 = addnsw 16777216:i64, %10 (hasExternalUses)
%12:i64 = ashr %11, 25:i64
%13:i64 = addnsw %5, %12
%14:i64 = addnsw 33554432:i64, %13 (hasExternalUses)
%15:i64 = and 4227858432:i64, %14
%16:i64 = subnsw %13, %15
%17:i32 = trunc %16 (hasExternalUses)
%18:i32 = add %0, %17
infer %18

; *****
; For LLVM instruction:
;  %519 = load i32, i32* %173, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %520 = add i32 %519, %506
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = sub %1, %2 (hasExternalUses)
%4:i64 = sext %3
%5:i64 = mulnsw 121666:i64, %4
%6:i64 = addnsw 16777216:i64, %5 (hasExternalUses)
%7:i64 = and 4261412864:i64, %6
%8:i64 = subnsw %5, %7
%9:i32 = var
%10:i32 = var
%11:i32 = sub %9, %10 (hasExternalUses)
%12:i64 = sext %11
%13:i64 = mulnsw 121666:i64, %12
%14:i32 = var
%15:i32 = var
%16:i32 = sub %14, %15 (hasExternalUses)
%17:i64 = sext %16
%18:i64 = mulnsw 121666:i64, %17 (hasExternalUses)
%19:i64 = addnsw 16777216:i64, %18 (hasExternalUses)
%20:i64 = ashr %19, 25:i64
%21:i64 = addnsw %13, %20 (hasExternalUses)
%22:i64 = addnsw 33554432:i64, %21 (hasExternalUses)
%23:i64 = lshr %22, 26:i64
%24:i64 = addnsw %8, %23
%25:i32 = trunc %24 (hasExternalUses)
%26:i32 = add %0, %25
infer %26

; *****
; For LLVM instruction:
;  %521 = load i32, i32* %174, align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %522 = add i32 %521, %507
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = sub %1, %2 (hasExternalUses)
%4:i64 = sext %3
%5:i64 = mulnsw 121666:i64, %4
%6:i32 = var
%7:i32 = var
%8:i32 = sub %6, %7 (hasExternalUses)
%9:i64 = sext %8
%10:i64 = mulnsw 121666:i64, %9 (hasExternalUses)
%11:i64 = addnsw 16777216:i64, %10 (hasExternalUses)
%12:i64 = ashr %11, 25:i64
%13:i64 = addnsw %5, %12
%14:i64 = addnsw 33554432:i64, %13 (hasExternalUses)
%15:i64 = and 4227858432:i64, %14
%16:i64 = subnsw %13, %15
%17:i32 = trunc %16 (hasExternalUses)
%18:i32 = add %0, %17
infer %18

; *****
; For LLVM instruction:
;  %523 = load i32, i32* %175, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %524 = add i32 %523, %508
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = sub %1, %2 (hasExternalUses)
%4:i64 = sext %3
%5:i64 = mulnsw 121666:i64, %4
%6:i64 = addnsw 16777216:i64, %5 (hasExternalUses)
%7:i64 = and 4261412864:i64, %6
%8:i64 = subnsw %5, %7
%9:i32 = var
%10:i32 = var
%11:i32 = sub %9, %10 (hasExternalUses)
%12:i64 = sext %11
%13:i64 = mulnsw 121666:i64, %12
%14:i32 = var
%15:i32 = var
%16:i32 = sub %14, %15 (hasExternalUses)
%17:i64 = sext %16
%18:i64 = mulnsw 121666:i64, %17 (hasExternalUses)
%19:i64 = addnsw 16777216:i64, %18 (hasExternalUses)
%20:i64 = ashr %19, 25:i64
%21:i64 = addnsw %13, %20 (hasExternalUses)
%22:i64 = addnsw 33554432:i64, %21 (hasExternalUses)
%23:i64 = lshr %22, 26:i64
%24:i64 = addnsw %8, %23
%25:i32 = trunc %24 (hasExternalUses)
%26:i32 = add %0, %25
infer %26

; *****
; For LLVM instruction:
;  %525 = load i32, i32* %176, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %526 = add i32 %525, %509
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = sub %1, %2 (hasExternalUses)
%4:i64 = sext %3
%5:i64 = mulnsw 121666:i64, %4
%6:i32 = var
%7:i32 = var
%8:i32 = sub %6, %7 (hasExternalUses)
%9:i64 = sext %8
%10:i64 = mulnsw 121666:i64, %9 (hasExternalUses)
%11:i64 = addnsw 16777216:i64, %10 (hasExternalUses)
%12:i64 = ashr %11, 25:i64
%13:i64 = addnsw %5, %12
%14:i64 = addnsw 33554432:i64, %13 (hasExternalUses)
%15:i64 = and 4227858432:i64, %14
%16:i64 = subnsw %13, %15
%17:i32 = trunc %16 (hasExternalUses)
%18:i32 = add %0, %17
infer %18

; *****
; For LLVM instruction:
;  %527 = load i32, i32* %177, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %528 = add i32 %527, %510
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = sub %1, %2 (hasExternalUses)
%4:i64 = sext %3
%5:i64 = mulnsw 121666:i64, %4
%6:i64 = addnsw 16777216:i64, %5 (hasExternalUses)
%7:i64 = and 4261412864:i64, %6
%8:i64 = subnsw %5, %7
%9:i32 = var
%10:i32 = var
%11:i32 = sub %9, %10 (hasExternalUses)
%12:i64 = sext %11
%13:i64 = mulnsw 121666:i64, %12
%14:i32 = var
%15:i32 = var
%16:i32 = sub %14, %15 (hasExternalUses)
%17:i64 = sext %16
%18:i64 = mulnsw 121666:i64, %17 (hasExternalUses)
%19:i64 = addnsw 16777216:i64, %18 (hasExternalUses)
%20:i64 = ashr %19, 25:i64
%21:i64 = addnsw %13, %20 (hasExternalUses)
%22:i64 = addnsw 33554432:i64, %21 (hasExternalUses)
%23:i64 = lshr %22, 26:i64
%24:i64 = addnsw %8, %23
%25:i32 = trunc %24 (hasExternalUses)
%26:i32 = add %0, %25
infer %26

; *****
; For LLVM instruction:
;  %529 = load i32, i32* %178, align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %530 = add i32 %529, %511
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = sub %1, %2 (hasExternalUses)
%4:i64 = sext %3
%5:i64 = mulnsw 121666:i64, %4
%6:i32 = var
%7:i32 = var
%8:i32 = sub %6, %7 (hasExternalUses)
%9:i64 = sext %8
%10:i64 = mulnsw 121666:i64, %9 (hasExternalUses)
%11:i64 = addnsw 16777216:i64, %10 (hasExternalUses)
%12:i64 = ashr %11, 25:i64
%13:i64 = addnsw %5, %12
%14:i64 = addnsw 33554432:i64, %13 (hasExternalUses)
%15:i64 = and 4227858432:i64, %14
%16:i64 = subnsw %13, %15
%17:i32 = trunc %16 (hasExternalUses)
%18:i32 = add %0, %17
infer %18

; *****
; For LLVM instruction:
;  %531 = load i32, i32* %179, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %532 = add i32 %531, %512
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = sub %1, %2 (hasExternalUses)
%4:i64 = sext %3
%5:i64 = mulnsw 121666:i64, %4
%6:i32 = var
%7:i32 = var
%8:i32 = sub %6, %7 (hasExternalUses)
%9:i64 = sext %8
%10:i64 = mulnsw 121666:i64, %9
%11:i32 = var
%12:i32 = var
%13:i32 = sub %11, %12 (hasExternalUses)
%14:i64 = sext %13
%15:i64 = mulnsw 121666:i64, %14 (hasExternalUses)
%16:i64 = addnsw 16777216:i64, %15 (hasExternalUses)
%17:i64 = ashr %16, 25:i64
%18:i64 = addnsw %10, %17 (hasExternalUses)
%19:i64 = addnsw 33554432:i64, %18 (hasExternalUses)
%20:i64 = lshr %19, 26:i64
%21:i64 = addnsw %5, %20
%22:i64 = addnsw 16777216:i64, %5 (hasExternalUses)
%23:i64 = and 4261412864:i64, %22
%24:i64 = subnsw %21, %23
%25:i32 = trunc %24 (hasExternalUses)
%26:i32 = add %0, %25
infer %26

; *****
; For LLVM instruction:
;  %533 = icmp eq i32 %221, 0
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %535 = add nsw i32 %221, -1
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 0:i1
%2:i32 = addnsw 4294967295:i32, %0
infer %2

; *****
; For LLVM instruction:
;  %536 = load i32, i32* %109, align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %537 = load i32, i32* %110, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %538 = load i32, i32* %145, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %539 = load i32, i32* %146, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %540 = load i32, i32* %147, align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %541 = load i32, i32* %148, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %542 = load i32, i32* %149, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %543 = load i32, i32* %150, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %544 = load i32, i32* %151, align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %545 = load i32, i32* %152, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %546 = load i32, i32* %113, align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %547 = load i32, i32* %133, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %548 = load i32, i32* %134, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %549 = load i32, i32* %135, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %550 = load i32, i32* %136, align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %551 = load i32, i32* %137, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %552 = load i32, i32* %138, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %553 = load i32, i32* %139, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %554 = load i32, i32* %140, align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %555 = load i32, i32* %141, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %556 = load i32, i32* %112, align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %557 = load i32, i32* %153, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %558 = load i32, i32* %154, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %559 = load i32, i32* %155, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %560 = load i32, i32* %156, align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %561 = load i32, i32* %157, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %562 = load i32, i32* %158, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %563 = load i32, i32* %159, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %564 = load i32, i32* %160, align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %566 = sub nsw i32 0, %228
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i8 = var
%3:i32 = zext %2
%4:i32 = and 7:i32, %0
%5:i32 = lshr %3, %4
%6:i32 = and 1:i32, %5 (hasExternalUses)
%7:i32 = subnsw 0:i32, %6
infer %7

; *****
; For LLVM instruction:
;  %567 = load i32, i32* %109, align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %568 = load i32, i32* %110, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %569 = load i32, i32* %145, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %570 = load i32, i32* %146, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %571 = load i32, i32* %147, align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %572 = load i32, i32* %148, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %573 = load i32, i32* %149, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %574 = load i32, i32* %150, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %575 = load i32, i32* %151, align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %576 = load i32, i32* %152, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %577 = load i32, i32* %113, align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %578 = load i32, i32* %133, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %579 = load i32, i32* %134, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %580 = load i32, i32* %135, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %581 = load i32, i32* %136, align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %582 = load i32, i32* %137, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %583 = load i32, i32* %138, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %584 = load i32, i32* %139, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %585 = load i32, i32* %140, align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %586 = load i32, i32* %141, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %587 = xor i32 %577, %567
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %588 = xor i32 %578, %568
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %589 = xor i32 %579, %569
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %590 = xor i32 %580, %570
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %591 = xor i32 %581, %571
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %592 = xor i32 %582, %572
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %593 = xor i32 %583, %573
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %594 = xor i32 %584, %574
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %595 = xor i32 %585, %575
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %596 = xor i32 %586, %576
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %597 = and i32 %587, %566
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i8 = var
%3:i32 = zext %2
%4:i32 = and 7:i32, %0
%5:i32 = lshr %3, %4
%6:i32 = and 1:i32, %5 (hasExternalUses)
%7:i32 = subnsw 0:i32, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = xor %8, %9
%11:i32 = and %7, %10
infer %11

; *****
; For LLVM instruction:
;  %598 = and i32 %588, %566
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i8 = var
%3:i32 = zext %2
%4:i32 = and 7:i32, %0
%5:i32 = lshr %3, %4
%6:i32 = and 1:i32, %5 (hasExternalUses)
%7:i32 = subnsw 0:i32, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = xor %8, %9
%11:i32 = and %7, %10
infer %11

; *****
; For LLVM instruction:
;  %599 = and i32 %589, %566
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i8 = var
%3:i32 = zext %2
%4:i32 = and 7:i32, %0
%5:i32 = lshr %3, %4
%6:i32 = and 1:i32, %5 (hasExternalUses)
%7:i32 = subnsw 0:i32, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = xor %8, %9
%11:i32 = and %7, %10
infer %11

; *****
; For LLVM instruction:
;  %600 = and i32 %590, %566
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i8 = var
%3:i32 = zext %2
%4:i32 = and 7:i32, %0
%5:i32 = lshr %3, %4
%6:i32 = and 1:i32, %5 (hasExternalUses)
%7:i32 = subnsw 0:i32, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = xor %8, %9
%11:i32 = and %7, %10
infer %11

; *****
; For LLVM instruction:
;  %601 = and i32 %591, %566
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i8 = var
%3:i32 = zext %2
%4:i32 = and 7:i32, %0
%5:i32 = lshr %3, %4
%6:i32 = and 1:i32, %5 (hasExternalUses)
%7:i32 = subnsw 0:i32, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = xor %8, %9
%11:i32 = and %7, %10
infer %11

; *****
; For LLVM instruction:
;  %602 = and i32 %592, %566
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i8 = var
%3:i32 = zext %2
%4:i32 = and 7:i32, %0
%5:i32 = lshr %3, %4
%6:i32 = and 1:i32, %5 (hasExternalUses)
%7:i32 = subnsw 0:i32, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = xor %8, %9
%11:i32 = and %7, %10
infer %11

; *****
; For LLVM instruction:
;  %603 = and i32 %593, %566
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i8 = var
%3:i32 = zext %2
%4:i32 = and 7:i32, %0
%5:i32 = lshr %3, %4
%6:i32 = and 1:i32, %5 (hasExternalUses)
%7:i32 = subnsw 0:i32, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = xor %8, %9
%11:i32 = and %7, %10
infer %11

; *****
; For LLVM instruction:
;  %604 = and i32 %594, %566
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i8 = var
%3:i32 = zext %2
%4:i32 = and 7:i32, %0
%5:i32 = lshr %3, %4
%6:i32 = and 1:i32, %5 (hasExternalUses)
%7:i32 = subnsw 0:i32, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = xor %8, %9
%11:i32 = and %7, %10
infer %11

; *****
; For LLVM instruction:
;  %605 = and i32 %595, %566
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i8 = var
%3:i32 = zext %2
%4:i32 = and 7:i32, %0
%5:i32 = lshr %3, %4
%6:i32 = and 1:i32, %5 (hasExternalUses)
%7:i32 = subnsw 0:i32, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = xor %8, %9
%11:i32 = and %7, %10
infer %11

; *****
; For LLVM instruction:
;  %606 = and i32 %596, %566
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i8 = var
%3:i32 = zext %2
%4:i32 = and 7:i32, %0
%5:i32 = lshr %3, %4
%6:i32 = and 1:i32, %5 (hasExternalUses)
%7:i32 = subnsw 0:i32, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = xor %8, %9
%11:i32 = and %7, %10
infer %11

; *****
; For LLVM instruction:
;  %607 = xor i32 %597, %567
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i32 = var
%3:i8 = var
%4:i32 = zext %3
%5:i32 = and 7:i32, %0
%6:i32 = lshr %4, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = xor %2, %9
%11:i32 = and %8, %10 (hasExternalUses)
%12:i32 = xor %2, %11
infer %12

; *****
; For LLVM instruction:
;  %608 = xor i32 %598, %568
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i32 = var
%3:i8 = var
%4:i32 = zext %3
%5:i32 = and 7:i32, %0
%6:i32 = lshr %4, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = xor %2, %9
%11:i32 = and %8, %10 (hasExternalUses)
%12:i32 = xor %2, %11
infer %12

; *****
; For LLVM instruction:
;  %609 = xor i32 %599, %569
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i32 = var
%3:i8 = var
%4:i32 = zext %3
%5:i32 = and 7:i32, %0
%6:i32 = lshr %4, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = xor %2, %9
%11:i32 = and %8, %10 (hasExternalUses)
%12:i32 = xor %2, %11
infer %12

; *****
; For LLVM instruction:
;  %610 = xor i32 %600, %570
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i32 = var
%3:i8 = var
%4:i32 = zext %3
%5:i32 = and 7:i32, %0
%6:i32 = lshr %4, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = xor %2, %9
%11:i32 = and %8, %10 (hasExternalUses)
%12:i32 = xor %2, %11
infer %12

; *****
; For LLVM instruction:
;  %611 = xor i32 %601, %571
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i32 = var
%3:i8 = var
%4:i32 = zext %3
%5:i32 = and 7:i32, %0
%6:i32 = lshr %4, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = xor %2, %9
%11:i32 = and %8, %10 (hasExternalUses)
%12:i32 = xor %2, %11
infer %12

; *****
; For LLVM instruction:
;  %612 = xor i32 %602, %572
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i32 = var
%3:i8 = var
%4:i32 = zext %3
%5:i32 = and 7:i32, %0
%6:i32 = lshr %4, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = xor %2, %9
%11:i32 = and %8, %10 (hasExternalUses)
%12:i32 = xor %2, %11
infer %12

; *****
; For LLVM instruction:
;  %613 = xor i32 %603, %573
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i32 = var
%3:i8 = var
%4:i32 = zext %3
%5:i32 = and 7:i32, %0
%6:i32 = lshr %4, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = xor %2, %9
%11:i32 = and %8, %10 (hasExternalUses)
%12:i32 = xor %2, %11
infer %12

; *****
; For LLVM instruction:
;  %614 = xor i32 %604, %574
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i32 = var
%3:i8 = var
%4:i32 = zext %3
%5:i32 = and 7:i32, %0
%6:i32 = lshr %4, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = xor %2, %9
%11:i32 = and %8, %10 (hasExternalUses)
%12:i32 = xor %2, %11
infer %12

; *****
; For LLVM instruction:
;  %615 = xor i32 %605, %575
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i32 = var
%3:i8 = var
%4:i32 = zext %3
%5:i32 = and 7:i32, %0
%6:i32 = lshr %4, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = xor %2, %9
%11:i32 = and %8, %10 (hasExternalUses)
%12:i32 = xor %2, %11
infer %12

; *****
; For LLVM instruction:
;  %616 = xor i32 %606, %576
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i32 = var
%3:i8 = var
%4:i32 = zext %3
%5:i32 = and 7:i32, %0
%6:i32 = lshr %4, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = xor %2, %9
%11:i32 = and %8, %10 (hasExternalUses)
%12:i32 = xor %2, %11
infer %12

; *****
; For LLVM instruction:
;  %617 = xor i32 %597, %577
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i32 = var
%3:i8 = var
%4:i32 = zext %3
%5:i32 = and 7:i32, %0
%6:i32 = lshr %4, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = xor %9, %2
%11:i32 = and %8, %10 (hasExternalUses)
%12:i32 = xor %2, %11
infer %12

; *****
; For LLVM instruction:
;  %618 = xor i32 %598, %578
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i32 = var
%3:i8 = var
%4:i32 = zext %3
%5:i32 = and 7:i32, %0
%6:i32 = lshr %4, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = xor %9, %2
%11:i32 = and %8, %10 (hasExternalUses)
%12:i32 = xor %2, %11
infer %12

; *****
; For LLVM instruction:
;  %619 = xor i32 %599, %579
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i32 = var
%3:i8 = var
%4:i32 = zext %3
%5:i32 = and 7:i32, %0
%6:i32 = lshr %4, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = xor %9, %2
%11:i32 = and %8, %10 (hasExternalUses)
%12:i32 = xor %2, %11
infer %12

; *****
; For LLVM instruction:
;  %620 = xor i32 %600, %580
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i32 = var
%3:i8 = var
%4:i32 = zext %3
%5:i32 = and 7:i32, %0
%6:i32 = lshr %4, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = xor %9, %2
%11:i32 = and %8, %10 (hasExternalUses)
%12:i32 = xor %2, %11
infer %12

; *****
; For LLVM instruction:
;  %621 = xor i32 %601, %581
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i32 = var
%3:i8 = var
%4:i32 = zext %3
%5:i32 = and 7:i32, %0
%6:i32 = lshr %4, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = xor %9, %2
%11:i32 = and %8, %10 (hasExternalUses)
%12:i32 = xor %2, %11
infer %12

; *****
; For LLVM instruction:
;  %622 = xor i32 %602, %582
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i32 = var
%3:i8 = var
%4:i32 = zext %3
%5:i32 = and 7:i32, %0
%6:i32 = lshr %4, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = xor %9, %2
%11:i32 = and %8, %10 (hasExternalUses)
%12:i32 = xor %2, %11
infer %12

; *****
; For LLVM instruction:
;  %623 = xor i32 %603, %583
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i32 = var
%3:i8 = var
%4:i32 = zext %3
%5:i32 = and 7:i32, %0
%6:i32 = lshr %4, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = xor %9, %2
%11:i32 = and %8, %10 (hasExternalUses)
%12:i32 = xor %2, %11
infer %12

; *****
; For LLVM instruction:
;  %624 = xor i32 %604, %584
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i32 = var
%3:i8 = var
%4:i32 = zext %3
%5:i32 = and 7:i32, %0
%6:i32 = lshr %4, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = xor %9, %2
%11:i32 = and %8, %10 (hasExternalUses)
%12:i32 = xor %2, %11
infer %12

; *****
; For LLVM instruction:
;  %625 = xor i32 %605, %585
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i32 = var
%3:i8 = var
%4:i32 = zext %3
%5:i32 = and 7:i32, %0
%6:i32 = lshr %4, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = xor %9, %2
%11:i32 = and %8, %10 (hasExternalUses)
%12:i32 = xor %2, %11
infer %12

; *****
; For LLVM instruction:
;  %626 = xor i32 %606, %586
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i32 = var
%3:i8 = var
%4:i32 = zext %3
%5:i32 = and 7:i32, %0
%6:i32 = lshr %4, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = xor %9, %2
%11:i32 = and %8, %10 (hasExternalUses)
%12:i32 = xor %2, %11
infer %12

; *****
; For LLVM instruction:
;  %627 = load i32, i32* %112, align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %628 = load i32, i32* %153, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %629 = load i32, i32* %154, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %630 = load i32, i32* %155, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %631 = load i32, i32* %156, align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %632 = load i32, i32* %157, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %633 = load i32, i32* %158, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %634 = load i32, i32* %159, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %635 = load i32, i32* %160, align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %636 = load i32, i32* %161, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %637 = load i32, i32* %142, align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %638 = load i32, i32* %143, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %639 = load i32, i32* %162, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %640 = load i32, i32* %163, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %641 = load i32, i32* %164, align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %642 = load i32, i32* %165, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %643 = load i32, i32* %166, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %644 = load i32, i32* %167, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %645 = load i32, i32* %168, align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %646 = load i32, i32* %169, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %647 = xor i32 %637, %627
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %648 = xor i32 %638, %628
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %649 = xor i32 %639, %629
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %650 = xor i32 %640, %630
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %651 = xor i32 %641, %631
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %652 = xor i32 %642, %632
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %653 = xor i32 %643, %633
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %654 = xor i32 %644, %634
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %655 = xor i32 %645, %635
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %656 = xor i32 %646, %636
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %657 = and i32 %647, %566
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i8 = var
%3:i32 = zext %2
%4:i32 = and 7:i32, %0
%5:i32 = lshr %3, %4
%6:i32 = and 1:i32, %5 (hasExternalUses)
%7:i32 = subnsw 0:i32, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = xor %8, %9
%11:i32 = and %7, %10
infer %11

; *****
; For LLVM instruction:
;  %658 = and i32 %648, %566
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i8 = var
%3:i32 = zext %2
%4:i32 = and 7:i32, %0
%5:i32 = lshr %3, %4
%6:i32 = and 1:i32, %5 (hasExternalUses)
%7:i32 = subnsw 0:i32, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = xor %8, %9
%11:i32 = and %7, %10
infer %11

; *****
; For LLVM instruction:
;  %659 = and i32 %649, %566
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i8 = var
%3:i32 = zext %2
%4:i32 = and 7:i32, %0
%5:i32 = lshr %3, %4
%6:i32 = and 1:i32, %5 (hasExternalUses)
%7:i32 = subnsw 0:i32, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = xor %8, %9
%11:i32 = and %7, %10
infer %11

; *****
; For LLVM instruction:
;  %660 = and i32 %650, %566
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i8 = var
%3:i32 = zext %2
%4:i32 = and 7:i32, %0
%5:i32 = lshr %3, %4
%6:i32 = and 1:i32, %5 (hasExternalUses)
%7:i32 = subnsw 0:i32, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = xor %8, %9
%11:i32 = and %7, %10
infer %11

; *****
; For LLVM instruction:
;  %661 = and i32 %651, %566
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i8 = var
%3:i32 = zext %2
%4:i32 = and 7:i32, %0
%5:i32 = lshr %3, %4
%6:i32 = and 1:i32, %5 (hasExternalUses)
%7:i32 = subnsw 0:i32, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = xor %8, %9
%11:i32 = and %7, %10
infer %11

; *****
; For LLVM instruction:
;  %662 = and i32 %652, %566
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i8 = var
%3:i32 = zext %2
%4:i32 = and 7:i32, %0
%5:i32 = lshr %3, %4
%6:i32 = and 1:i32, %5 (hasExternalUses)
%7:i32 = subnsw 0:i32, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = xor %8, %9
%11:i32 = and %7, %10
infer %11

; *****
; For LLVM instruction:
;  %663 = and i32 %653, %566
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i8 = var
%3:i32 = zext %2
%4:i32 = and 7:i32, %0
%5:i32 = lshr %3, %4
%6:i32 = and 1:i32, %5 (hasExternalUses)
%7:i32 = subnsw 0:i32, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = xor %8, %9
%11:i32 = and %7, %10
infer %11

; *****
; For LLVM instruction:
;  %664 = and i32 %654, %566
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i8 = var
%3:i32 = zext %2
%4:i32 = and 7:i32, %0
%5:i32 = lshr %3, %4
%6:i32 = and 1:i32, %5 (hasExternalUses)
%7:i32 = subnsw 0:i32, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = xor %8, %9
%11:i32 = and %7, %10
infer %11

; *****
; For LLVM instruction:
;  %665 = and i32 %655, %566
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i8 = var
%3:i32 = zext %2
%4:i32 = and 7:i32, %0
%5:i32 = lshr %3, %4
%6:i32 = and 1:i32, %5 (hasExternalUses)
%7:i32 = subnsw 0:i32, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = xor %8, %9
%11:i32 = and %7, %10
infer %11

; *****
; For LLVM instruction:
;  %666 = and i32 %656, %566
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i8 = var
%3:i32 = zext %2
%4:i32 = and 7:i32, %0
%5:i32 = lshr %3, %4
%6:i32 = and 1:i32, %5 (hasExternalUses)
%7:i32 = subnsw 0:i32, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = xor %8, %9
%11:i32 = and %7, %10
infer %11

; *****
; For LLVM instruction:
;  %667 = xor i32 %657, %627
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i32 = var
%3:i8 = var
%4:i32 = zext %3
%5:i32 = and 7:i32, %0
%6:i32 = lshr %4, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = xor %2, %9
%11:i32 = and %8, %10 (hasExternalUses)
%12:i32 = xor %2, %11
infer %12

; *****
; For LLVM instruction:
;  %668 = xor i32 %658, %628
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i32 = var
%3:i8 = var
%4:i32 = zext %3
%5:i32 = and 7:i32, %0
%6:i32 = lshr %4, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = xor %2, %9
%11:i32 = and %8, %10 (hasExternalUses)
%12:i32 = xor %2, %11
infer %12

; *****
; For LLVM instruction:
;  %669 = xor i32 %659, %629
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i32 = var
%3:i8 = var
%4:i32 = zext %3
%5:i32 = and 7:i32, %0
%6:i32 = lshr %4, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = xor %2, %9
%11:i32 = and %8, %10 (hasExternalUses)
%12:i32 = xor %2, %11
infer %12

; *****
; For LLVM instruction:
;  %670 = xor i32 %660, %630
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i32 = var
%3:i8 = var
%4:i32 = zext %3
%5:i32 = and 7:i32, %0
%6:i32 = lshr %4, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = xor %2, %9
%11:i32 = and %8, %10 (hasExternalUses)
%12:i32 = xor %2, %11
infer %12

; *****
; For LLVM instruction:
;  %671 = xor i32 %661, %631
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i32 = var
%3:i8 = var
%4:i32 = zext %3
%5:i32 = and 7:i32, %0
%6:i32 = lshr %4, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = xor %2, %9
%11:i32 = and %8, %10 (hasExternalUses)
%12:i32 = xor %2, %11
infer %12

; *****
; For LLVM instruction:
;  %672 = xor i32 %662, %632
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i32 = var
%3:i8 = var
%4:i32 = zext %3
%5:i32 = and 7:i32, %0
%6:i32 = lshr %4, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = xor %2, %9
%11:i32 = and %8, %10 (hasExternalUses)
%12:i32 = xor %2, %11
infer %12

; *****
; For LLVM instruction:
;  %673 = xor i32 %663, %633
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i32 = var
%3:i8 = var
%4:i32 = zext %3
%5:i32 = and 7:i32, %0
%6:i32 = lshr %4, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = xor %2, %9
%11:i32 = and %8, %10 (hasExternalUses)
%12:i32 = xor %2, %11
infer %12

; *****
; For LLVM instruction:
;  %674 = xor i32 %664, %634
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i32 = var
%3:i8 = var
%4:i32 = zext %3
%5:i32 = and 7:i32, %0
%6:i32 = lshr %4, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = xor %2, %9
%11:i32 = and %8, %10 (hasExternalUses)
%12:i32 = xor %2, %11
infer %12

; *****
; For LLVM instruction:
;  %675 = xor i32 %665, %635
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i32 = var
%3:i8 = var
%4:i32 = zext %3
%5:i32 = and 7:i32, %0
%6:i32 = lshr %4, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = xor %2, %9
%11:i32 = and %8, %10 (hasExternalUses)
%12:i32 = xor %2, %11
infer %12

; *****
; For LLVM instruction:
;  %676 = xor i32 %666, %636
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i32 = var
%3:i8 = var
%4:i32 = zext %3
%5:i32 = and 7:i32, %0
%6:i32 = lshr %4, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = xor %2, %9
%11:i32 = and %8, %10 (hasExternalUses)
%12:i32 = xor %2, %11
infer %12

; *****
; For LLVM instruction:
;  %677 = xor i32 %657, %637
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i32 = var
%3:i8 = var
%4:i32 = zext %3
%5:i32 = and 7:i32, %0
%6:i32 = lshr %4, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = xor %9, %2
%11:i32 = and %8, %10 (hasExternalUses)
%12:i32 = xor %2, %11
infer %12

; *****
; For LLVM instruction:
;  %678 = xor i32 %658, %638
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i32 = var
%3:i8 = var
%4:i32 = zext %3
%5:i32 = and 7:i32, %0
%6:i32 = lshr %4, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = xor %9, %2
%11:i32 = and %8, %10 (hasExternalUses)
%12:i32 = xor %2, %11
infer %12

; *****
; For LLVM instruction:
;  %679 = xor i32 %659, %639
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i32 = var
%3:i8 = var
%4:i32 = zext %3
%5:i32 = and 7:i32, %0
%6:i32 = lshr %4, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = xor %9, %2
%11:i32 = and %8, %10 (hasExternalUses)
%12:i32 = xor %2, %11
infer %12

; *****
; For LLVM instruction:
;  %680 = xor i32 %660, %640
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i32 = var
%3:i8 = var
%4:i32 = zext %3
%5:i32 = and 7:i32, %0
%6:i32 = lshr %4, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = xor %9, %2
%11:i32 = and %8, %10 (hasExternalUses)
%12:i32 = xor %2, %11
infer %12

; *****
; For LLVM instruction:
;  %681 = xor i32 %661, %641
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i32 = var
%3:i8 = var
%4:i32 = zext %3
%5:i32 = and 7:i32, %0
%6:i32 = lshr %4, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = xor %9, %2
%11:i32 = and %8, %10 (hasExternalUses)
%12:i32 = xor %2, %11
infer %12

; *****
; For LLVM instruction:
;  %682 = xor i32 %662, %642
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i32 = var
%3:i8 = var
%4:i32 = zext %3
%5:i32 = and 7:i32, %0
%6:i32 = lshr %4, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = xor %9, %2
%11:i32 = and %8, %10 (hasExternalUses)
%12:i32 = xor %2, %11
infer %12

; *****
; For LLVM instruction:
;  %683 = xor i32 %663, %643
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i32 = var
%3:i8 = var
%4:i32 = zext %3
%5:i32 = and 7:i32, %0
%6:i32 = lshr %4, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = xor %9, %2
%11:i32 = and %8, %10 (hasExternalUses)
%12:i32 = xor %2, %11
infer %12

; *****
; For LLVM instruction:
;  %684 = xor i32 %664, %644
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i32 = var
%3:i8 = var
%4:i32 = zext %3
%5:i32 = and 7:i32, %0
%6:i32 = lshr %4, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = xor %9, %2
%11:i32 = and %8, %10 (hasExternalUses)
%12:i32 = xor %2, %11
infer %12

; *****
; For LLVM instruction:
;  %685 = xor i32 %665, %645
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i32 = var
%3:i8 = var
%4:i32 = zext %3
%5:i32 = and 7:i32, %0
%6:i32 = lshr %4, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = xor %9, %2
%11:i32 = and %8, %10 (hasExternalUses)
%12:i32 = xor %2, %11
infer %12

; *****
; For LLVM instruction:
;  %686 = xor i32 %666, %646
; Looking for a replacement for:
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i32 = var
%3:i8 = var
%4:i32 = zext %3
%5:i32 = and 7:i32, %0
%6:i32 = lshr %4, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = xor %9, %2
%11:i32 = and %8, %10 (hasExternalUses)
%12:i32 = xor %2, %11
infer %12

; *****
; For LLVM instruction:
;  %688 = phi i32 [ 0, %565 ], [ -1, %59 ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = phi %0, 0:i32, 4294967295:i32
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,31))
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 15
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = var
%2:i8 = xor %0, %1
infer %2


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -128
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3
infer %4


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -128
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i8 = var
%2:i8 = xor %0, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,31))
%1:i32 = addnw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 16
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,31))

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,31))
%1:i32 = addnw 1:i32, %0 (hasExternalUses)
%2:i1 = eq 31:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0 (demandedBits=01111111)


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 127
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = and 127:i8, %0
infer %1


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 127
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = and 127:i8, %0 (hasExternalUses)
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = xor %3, %4
%6:i8 = or %2, %5 (hasExternalUses)
%7:i8 = or %1, %6
infer %7


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -128
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = and 127:i8, %0 (hasExternalUses)
%2:i8 = xor 87:i8, %1
infer %2


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 87
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 85
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3 (hasExternalUses)
%5:i8 = var
%6:i8 = and 127:i8, %5 (hasExternalUses)
%7:i8 = xor 87:i8, %6
%8:i8 = or %4, %7
infer %8


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 87
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i8 = var
%2:i8 = xor %0, %1

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i8 = var
%1:i8 = and 127:i8, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 6 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = and 127:i8, %0 (hasExternalUses)
%2:i8 = xor 127:i8, %1
infer %2


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 127
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3 (hasExternalUses)
%5:i8 = var
%6:i8 = and 127:i8, %5 (hasExternalUses)
%7:i8 = xor 127:i8, %6 (hasExternalUses)
%8:i8 = or %4, %7
infer %8


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 127
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = and 127:i8, %0 (hasExternalUses)
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = xor %3, %4
%6:i8 = or %2, %5 (hasExternalUses)
%7:i8 = or %1, %6
%8:i32 = zext %7
infer %8 (demandedBits=00000000000000000000000111111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 128
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = and 127:i8, %0 (hasExternalUses)
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = xor %3, %4
%6:i8 = or %2, %5 (hasExternalUses)
%7:i8 = or %1, %6
%8:i32 = zext %7
%9:i32 = addnsw 4294967295:i32, %8
infer %9 (demandedBits=00000000000000000000000100000000)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 256
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 254
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = and 127:i8, %0 (hasExternalUses)
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = xor %3, %4
%6:i8 = or %2, %5 (hasExternalUses)
%7:i8 = or %1, %6
%8:i32 = zext %7
%9:i32 = addnsw 4294967295:i32, %8
%10:i8 = var
%11:i8 = var
%12:i8 = xor %3, %11
%13:i8 = or %10, %12 (hasExternalUses)
%14:i8 = or %1, %13
%15:i32 = zext %14
%16:i32 = addnsw 4294967295:i32, %15
%17:i32 = or %9, %16
infer %17 (demandedBits=00000000000000000000000100000000)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 256
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 126
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i8 = and 127:i8, %0 (hasExternalUses)
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = xor %3, %4
%6:i8 = or %2, %5 (hasExternalUses)
%7:i8 = or %1, %6
%8:i32 = zext %7

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i8 = and 127:i8, %0 (hasExternalUses)
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = xor %3, %4
%6:i8 = or %2, %5 (hasExternalUses)
%7:i8 = or %1, %6
%8:i32 = zext %7

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var
%1:i8 = and 127:i8, %0 (hasExternalUses)
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = xor %3, %4
%6:i8 = or %2, %5 (hasExternalUses)
%7:i8 = or %1, %6
%8:i32 = zext %7
%9:i32 = addnsw 4294967295:i32, %8

Cost = 3
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i8 = and 127:i8, %0 (hasExternalUses)
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = xor %3, %4
%6:i8 = or %2, %5 (hasExternalUses)
%7:i8 = or %1, %6
%8:i32 = zext %7
%9:i32 = addnsw 4294967295:i32, %8

Cost = 3
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = and 127:i8, %0 (hasExternalUses)
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = xor %3, %4
%6:i8 = or %2, %5 (hasExternalUses)
%7:i8 = or %1, %6
%8:i32 = zext %7
%9:i32 = addnsw 4294967295:i32, %8
%10:i8 = var
%11:i8 = var
%12:i8 = xor %3, %11
%13:i8 = or %10, %12 (hasExternalUses)
%14:i8 = or %1, %13
%15:i32 = zext %14
%16:i32 = addnsw 4294967295:i32, %15
%17:i8 = var
%18:i8 = var
%19:i8 = xor %3, %18
%20:i8 = or %17, %19 (hasExternalUses)
%21:i8 = or %1, %20
%22:i32 = zext %21
%23:i32 = addnsw 4294967295:i32, %22
%24:i32 = or %16, %23
%25:i32 = or %9, %24
infer %25 (demandedBits=00000000000000000000000100000000)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 256
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 255
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i8 = and 127:i8, %0 (hasExternalUses)
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = xor %3, %4
%6:i8 = or %2, %5 (hasExternalUses)
%7:i8 = or %1, %6
%8:i32 = zext %7

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i8 = and 127:i8, %0 (hasExternalUses)
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = xor %3, %4
%6:i8 = or %2, %5 (hasExternalUses)
%7:i8 = or %1, %6
%8:i32 = zext %7

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var
%1:i8 = and 127:i8, %0 (hasExternalUses)
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = xor %3, %4
%6:i8 = or %2, %5 (hasExternalUses)
%7:i8 = or %1, %6
%8:i32 = zext %7
%9:i32 = addnsw 4294967295:i32, %8

Cost = 3
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i8 = and 127:i8, %0 (hasExternalUses)
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = xor %3, %4
%6:i8 = or %2, %5 (hasExternalUses)
%7:i8 = or %1, %6
%8:i32 = zext %7
%9:i32 = addnsw 4294967295:i32, %8

Cost = 3
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i8 = var
%1:i8 = and 127:i8, %0 (hasExternalUses)
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = xor %3, %4
%6:i8 = or %2, %5 (hasExternalUses)
%7:i8 = or %1, %6
%8:i32 = zext %7
%9:i32 = addnsw 4294967295:i32, %8

Cost = 3
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 6 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3 (hasExternalUses)
%5:i8 = var
%6:i8 = and 127:i8, %5 (hasExternalUses)
%7:i8 = xor 87:i8, %6
%8:i8 = or %4, %7
%9:i32 = zext %8
infer %9 (demandedBits=00000000000000000000000111111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 87
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3 (hasExternalUses)
%5:i8 = var
%6:i8 = and 127:i8, %5 (hasExternalUses)
%7:i8 = xor 87:i8, %6
%8:i8 = or %4, %7
%9:i32 = zext %8
%10:i32 = addnw 511:i32, %9
infer %10 (demandedBits=00000000000000000000000100000000)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 511
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3 (hasExternalUses)
%5:i8 = var
%6:i8 = and 127:i8, %5 (hasExternalUses)
%7:i8 = xor 87:i8, %6
%8:i8 = or %4, %7
%9:i32 = zext %8
%10:i32 = addnw 511:i32, %9
%11:i8 = var
%12:i8 = var
%13:i8 = xor %1, %12
%14:i8 = or %11, %13 (hasExternalUses)
%15:i8 = or %6, %14
%16:i32 = zext %15
%17:i32 = addnsw 4294967295:i32, %16
%18:i8 = var
%19:i8 = var
%20:i8 = xor %1, %19
%21:i8 = or %18, %20 (hasExternalUses)
%22:i8 = or %6, %21
%23:i32 = zext %22
%24:i32 = addnsw 4294967295:i32, %23
%25:i8 = var
%26:i8 = var
%27:i8 = xor %1, %26
%28:i8 = or %25, %27 (hasExternalUses)
%29:i8 = or %6, %28
%30:i32 = zext %29
%31:i32 = addnsw 4294967295:i32, %30
%32:i32 = or %24, %31
%33:i32 = or %17, %32
%34:i32 = or %10, %33
infer %34 (demandedBits=00000000000000000000000100000000)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 256
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 638
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i8 = and 127:i8, %0 (hasExternalUses)
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = xor %3, %4
%6:i8 = or %2, %5 (hasExternalUses)
%7:i8 = or %1, %6
%8:i32 = zext %7

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i8 = and 127:i8, %0 (hasExternalUses)
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = xor %3, %4
%6:i8 = or %2, %5 (hasExternalUses)
%7:i8 = or %1, %6
%8:i32 = zext %7
%9:i32 = addnsw 4294967295:i32, %8

Cost = 3
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3 (hasExternalUses)
%5:i8 = var
%6:i8 = and 127:i8, %5 (hasExternalUses)
%7:i8 = xor 87:i8, %6
%8:i8 = or %4, %7
%9:i32 = zext %8

Cost = 3
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i8 = and 127:i8, %0 (hasExternalUses)
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = xor %3, %4
%6:i8 = or %2, %5 (hasExternalUses)
%7:i8 = or %1, %6
%8:i32 = zext %7
%9:i32 = addnsw 4294967295:i32, %8

Cost = 3
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3 (hasExternalUses)
%5:i8 = var
%6:i8 = and 127:i8, %5 (hasExternalUses)
%7:i8 = xor 87:i8, %6
%8:i8 = or %4, %7
%9:i32 = zext %8
%10:i32 = addnw 511:i32, %9

Cost = 4
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i8 = var
%1:i8 = and 127:i8, %0 (hasExternalUses)
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = xor %3, %4
%6:i8 = or %2, %5 (hasExternalUses)
%7:i8 = or %1, %6
%8:i32 = zext %7
%9:i32 = addnsw 4294967295:i32, %8
%10:i8 = var
%11:i8 = var
%12:i8 = xor %3, %11
%13:i8 = or %10, %12 (hasExternalUses)
%14:i8 = or %1, %13
%15:i32 = zext %14
%16:i32 = addnsw 4294967295:i32, %15
%17:i32 = or %9, %16

Cost = 7
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 7 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3 (hasExternalUses)
%5:i8 = var
%6:i8 = and 127:i8, %5 (hasExternalUses)
%7:i8 = xor 127:i8, %6 (hasExternalUses)
%8:i8 = or %4, %7
%9:i32 = zext %8
infer %9 (demandedBits=00000000000000000000000111111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 32
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3 (hasExternalUses)
%5:i8 = var
%6:i8 = and 127:i8, %5 (hasExternalUses)
%7:i8 = xor 127:i8, %6 (hasExternalUses)
%8:i8 = or %4, %7
%9:i32 = zext %8
%10:i32 = addnw 511:i32, %9
infer %10 (demandedBits=00000000000000000000000100000000)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 256
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 638
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3 (hasExternalUses)
%5:i8 = var
%6:i8 = and 127:i8, %5
%7:i8 = xor 127:i8, %6 (hasExternalUses)
%8:i8 = or %4, %7
%9:i32 = zext %8
%10:i32 = addnw 511:i32, %9
%11:i8 = var
%12:i8 = var
%13:i8 = xor %1, %12
%14:i8 = or %11, %13 (hasExternalUses)
%15:i8 = xor 87:i8, %6
%16:i8 = or %14, %15
%17:i32 = zext %16
%18:i32 = addnw 511:i32, %17
%19:i8 = var
%20:i8 = var
%21:i8 = xor %1, %20
%22:i8 = or %19, %21 (hasExternalUses)
%23:i8 = or %6, %22
%24:i32 = zext %23
%25:i32 = addnsw 4294967295:i32, %24
%26:i8 = var
%27:i8 = var
%28:i8 = xor %1, %27
%29:i8 = or %26, %28 (hasExternalUses)
%30:i8 = or %6, %29
%31:i32 = zext %30
%32:i32 = addnsw 4294967295:i32, %31
%33:i8 = var
%34:i8 = var
%35:i8 = xor %1, %34
%36:i8 = or %33, %35 (hasExternalUses)
%37:i8 = or %6, %36
%38:i32 = zext %37
%39:i32 = addnsw 4294967295:i32, %38
%40:i32 = or %32, %39
%41:i32 = or %25, %40
%42:i32 = or %18, %41
%43:i32 = or %10, %42
infer %43 (demandedBits=00000000000000000000000100000000)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 256
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 638
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3 (hasExternalUses)
%5:i8 = var
%6:i8 = and 127:i8, %5 (hasExternalUses)
%7:i8 = xor 127:i8, %6 (hasExternalUses)
%8:i8 = or %4, %7
%9:i32 = zext %8

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i8 = and 127:i8, %0 (hasExternalUses)
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = xor %3, %4
%6:i8 = or %2, %5 (hasExternalUses)
%7:i8 = or %1, %6
%8:i32 = zext %7
%9:i32 = addnsw 4294967295:i32, %8

Cost = 3
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3 (hasExternalUses)
%5:i8 = var
%6:i8 = and 127:i8, %5 (hasExternalUses)
%7:i8 = xor 127:i8, %6 (hasExternalUses)
%8:i8 = or %4, %7
%9:i32 = zext %8
%10:i32 = addnw 511:i32, %9

Cost = 3
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3 (hasExternalUses)
%5:i8 = var
%6:i8 = and 127:i8, %5 (hasExternalUses)
%7:i8 = xor 87:i8, %6
%8:i8 = or %4, %7
%9:i32 = zext %8
%10:i32 = addnw 511:i32, %9

Cost = 4
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i8 = var
%1:i8 = and 127:i8, %0 (hasExternalUses)
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = xor %3, %4
%6:i8 = or %2, %5 (hasExternalUses)
%7:i8 = or %1, %6
%8:i32 = zext %7
%9:i32 = addnsw 4294967295:i32, %8
%10:i8 = var
%11:i8 = var
%12:i8 = xor %3, %11
%13:i8 = or %10, %12 (hasExternalUses)
%14:i8 = or %1, %13
%15:i32 = zext %14
%16:i32 = addnsw 4294967295:i32, %15
%17:i32 = or %9, %16

Cost = 7
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i8 = var
%1:i8 = and 127:i8, %0 (hasExternalUses)
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = xor %3, %4
%6:i8 = or %2, %5 (hasExternalUses)
%7:i8 = or %1, %6
%8:i32 = zext %7
%9:i32 = addnsw 4294967295:i32, %8
%10:i8 = var
%11:i8 = var
%12:i8 = xor %3, %11
%13:i8 = or %10, %12 (hasExternalUses)
%14:i8 = or %1, %13
%15:i32 = zext %14
%16:i32 = addnsw 4294967295:i32, %15
%17:i8 = var
%18:i8 = var
%19:i8 = xor %3, %18
%20:i8 = or %17, %19 (hasExternalUses)
%21:i8 = or %1, %20
%22:i32 = zext %21
%23:i32 = addnsw 4294967295:i32, %22
%24:i32 = or %16, %23
%25:i32 = or %9, %24

Cost = 11
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 7 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3 (hasExternalUses)
%5:i8 = var
%6:i8 = and 127:i8, %5
%7:i8 = xor 127:i8, %6 (hasExternalUses)
%8:i8 = or %4, %7
%9:i32 = zext %8
%10:i32 = addnw 511:i32, %9
%11:i8 = var
%12:i8 = var
%13:i8 = xor %1, %12
%14:i8 = or %11, %13 (hasExternalUses)
%15:i8 = or %14, %7
%16:i32 = zext %15
%17:i32 = addnw 511:i32, %16
%18:i8 = var
%19:i8 = var
%20:i8 = xor %1, %19
%21:i8 = or %18, %20 (hasExternalUses)
%22:i8 = xor 87:i8, %6
%23:i8 = or %21, %22
%24:i32 = zext %23
%25:i32 = addnw 511:i32, %24
%26:i8 = var
%27:i8 = var
%28:i8 = xor %1, %27
%29:i8 = or %26, %28 (hasExternalUses)
%30:i8 = or %6, %29
%31:i32 = zext %30
%32:i32 = addnsw 4294967295:i32, %31
%33:i8 = var
%34:i8 = var
%35:i8 = xor %1, %34
%36:i8 = or %33, %35 (hasExternalUses)
%37:i8 = or %6, %36
%38:i32 = zext %37
%39:i32 = addnsw 4294967295:i32, %38
%40:i8 = var
%41:i8 = var
%42:i8 = xor %1, %41
%43:i8 = or %40, %42 (hasExternalUses)
%44:i8 = or %6, %43
%45:i32 = zext %44
%46:i32 = addnsw 4294967295:i32, %45
%47:i32 = or %39, %46
%48:i32 = or %32, %47
%49:i32 = or %25, %48
%50:i32 = or %17, %49
%51:i32 = or %10, %50
infer %51 (demandedBits=00000000000000000000000100000000)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 256
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 638
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3 (hasExternalUses)
%5:i8 = var
%6:i8 = and 127:i8, %5 (hasExternalUses)
%7:i8 = xor 127:i8, %6 (hasExternalUses)
%8:i8 = or %4, %7
%9:i32 = zext %8

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3 (hasExternalUses)
%5:i8 = var
%6:i8 = and 127:i8, %5 (hasExternalUses)
%7:i8 = xor 127:i8, %6 (hasExternalUses)
%8:i8 = or %4, %7
%9:i32 = zext %8
%10:i32 = addnw 511:i32, %9

Cost = 3
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3 (hasExternalUses)
%5:i8 = var
%6:i8 = and 127:i8, %5 (hasExternalUses)
%7:i8 = xor 127:i8, %6 (hasExternalUses)
%8:i8 = or %4, %7
%9:i32 = zext %8
%10:i32 = addnw 511:i32, %9

Cost = 3
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3 (hasExternalUses)
%5:i8 = var
%6:i8 = and 127:i8, %5 (hasExternalUses)
%7:i8 = xor 87:i8, %6
%8:i8 = or %4, %7
%9:i32 = zext %8
%10:i32 = addnw 511:i32, %9

Cost = 4
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i8 = var
%1:i8 = and 127:i8, %0 (hasExternalUses)
%2:i8 = var
%3:i8 = var
%4:i8 = var
%5:i8 = xor %3, %4
%6:i8 = or %2, %5 (hasExternalUses)
%7:i8 = or %1, %6
%8:i32 = zext %7
%9:i32 = addnsw 4294967295:i32, %8
%10:i8 = var
%11:i8 = var
%12:i8 = xor %3, %11
%13:i8 = or %10, %12 (hasExternalUses)
%14:i8 = or %1, %13
%15:i32 = zext %14
%16:i32 = addnsw 4294967295:i32, %15
%17:i8 = var
%18:i8 = var
%19:i8 = xor %3, %18
%20:i8 = or %17, %19 (hasExternalUses)
%21:i8 = or %1, %20
%22:i32 = zext %21
%23:i32 = addnsw 4294967295:i32, %22
%24:i32 = or %16, %23
%25:i32 = or %9, %24

Cost = 11
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 6 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3 (hasExternalUses)
%5:i8 = var
%6:i8 = and 127:i8, %5
%7:i8 = xor 127:i8, %6
%8:i8 = or %4, %7
%9:i32 = zext %8
%10:i32 = addnw 511:i32, %9
%11:i8 = var
%12:i8 = var
%13:i8 = xor %1, %12
%14:i8 = or %11, %13 (hasExternalUses)
%15:i8 = or %14, %7
%16:i32 = zext %15
%17:i32 = addnw 511:i32, %16
%18:i8 = var
%19:i8 = var
%20:i8 = xor %1, %19
%21:i8 = or %18, %20 (hasExternalUses)
%22:i8 = or %21, %7
%23:i32 = zext %22
%24:i32 = addnw 511:i32, %23
%25:i8 = var
%26:i8 = var
%27:i8 = xor %1, %26
%28:i8 = or %25, %27 (hasExternalUses)
%29:i8 = xor 87:i8, %6
%30:i8 = or %28, %29
%31:i32 = zext %30
%32:i32 = addnw 511:i32, %31
%33:i8 = var
%34:i8 = var
%35:i8 = xor %1, %34
%36:i8 = or %33, %35 (hasExternalUses)
%37:i8 = or %6, %36
%38:i32 = zext %37
%39:i32 = addnsw 4294967295:i32, %38
%40:i8 = var
%41:i8 = var
%42:i8 = xor %1, %41
%43:i8 = or %40, %42 (hasExternalUses)
%44:i8 = or %6, %43
%45:i32 = zext %44
%46:i32 = addnsw 4294967295:i32, %45
%47:i8 = var
%48:i8 = var
%49:i8 = xor %1, %48
%50:i8 = or %47, %49 (hasExternalUses)
%51:i8 = or %6, %50
%52:i32 = zext %51
%53:i32 = addnsw 4294967295:i32, %52
%54:i32 = or %46, %53
%55:i32 = or %39, %54
%56:i32 = or %32, %55
%57:i32 = or %24, %56
%58:i32 = or %17, %57
%59:i32 = or %10, %58
infer %59 (demandedBits=00000000000000000000000100000000)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 256
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 638
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3 (hasExternalUses)
%5:i8 = var
%6:i8 = and 127:i8, %5 (hasExternalUses)
%7:i8 = xor 127:i8, %6 (hasExternalUses)
%8:i8 = or %4, %7
%9:i32 = zext %8

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3 (hasExternalUses)
%5:i8 = var
%6:i8 = and 127:i8, %5 (hasExternalUses)
%7:i8 = xor 127:i8, %6 (hasExternalUses)
%8:i8 = or %4, %7
%9:i32 = zext %8
%10:i32 = addnw 511:i32, %9

Cost = 3
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3 (hasExternalUses)
%5:i8 = var
%6:i8 = and 127:i8, %5 (hasExternalUses)
%7:i8 = xor 127:i8, %6 (hasExternalUses)
%8:i8 = or %4, %7
%9:i32 = zext %8
%10:i32 = addnw 511:i32, %9

Cost = 3
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3 (hasExternalUses)
%5:i8 = var
%6:i8 = and 127:i8, %5 (hasExternalUses)
%7:i8 = xor 127:i8, %6 (hasExternalUses)
%8:i8 = or %4, %7
%9:i32 = zext %8
%10:i32 = addnw 511:i32, %9

Cost = 3
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3 (hasExternalUses)
%5:i8 = var
%6:i8 = and 127:i8, %5 (hasExternalUses)
%7:i8 = xor 87:i8, %6
%8:i8 = or %4, %7
%9:i32 = zext %8
%10:i32 = addnw 511:i32, %9
%11:i8 = var
%12:i8 = var
%13:i8 = xor %1, %12
%14:i8 = or %11, %13 (hasExternalUses)
%15:i8 = or %6, %14
%16:i32 = zext %15
%17:i32 = addnsw 4294967295:i32, %16
%18:i8 = var
%19:i8 = var
%20:i8 = xor %1, %19
%21:i8 = or %18, %20 (hasExternalUses)
%22:i8 = or %6, %21
%23:i32 = zext %22
%24:i32 = addnsw 4294967295:i32, %23
%25:i8 = var
%26:i8 = var
%27:i8 = xor %1, %26
%28:i8 = or %25, %27 (hasExternalUses)
%29:i8 = or %6, %28
%30:i32 = zext %29
%31:i32 = addnsw 4294967295:i32, %30
%32:i32 = or %24, %31
%33:i32 = or %17, %32
%34:i32 = or %10, %33

Cost = 16
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 6 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3 (hasExternalUses)
%5:i8 = var
%6:i8 = and 127:i8, %5
%7:i8 = xor 127:i8, %6
%8:i8 = or %4, %7
%9:i32 = zext %8
%10:i32 = addnw 511:i32, %9
%11:i8 = var
%12:i8 = var
%13:i8 = xor %1, %12
%14:i8 = or %11, %13 (hasExternalUses)
%15:i8 = or %14, %7
%16:i32 = zext %15
%17:i32 = addnw 511:i32, %16
%18:i8 = var
%19:i8 = var
%20:i8 = xor %1, %19
%21:i8 = or %18, %20 (hasExternalUses)
%22:i8 = or %21, %7
%23:i32 = zext %22
%24:i32 = addnw 511:i32, %23
%25:i8 = var
%26:i8 = var
%27:i8 = xor %1, %26
%28:i8 = or %25, %27 (hasExternalUses)
%29:i8 = xor 87:i8, %6
%30:i8 = or %28, %29
%31:i32 = zext %30
%32:i32 = addnw 511:i32, %31
%33:i8 = var
%34:i8 = var
%35:i8 = xor %1, %34
%36:i8 = or %33, %35 (hasExternalUses)
%37:i8 = or %6, %36
%38:i32 = zext %37
%39:i32 = addnsw 4294967295:i32, %38
%40:i8 = var
%41:i8 = var
%42:i8 = xor %1, %41
%43:i8 = or %40, %42 (hasExternalUses)
%44:i8 = or %6, %43
%45:i32 = zext %44
%46:i32 = addnsw 4294967295:i32, %45
%47:i8 = var
%48:i8 = var
%49:i8 = xor %1, %48
%50:i8 = or %47, %49 (hasExternalUses)
%51:i8 = or %6, %50
%52:i32 = zext %51
%53:i32 = addnsw 4294967295:i32, %52
%54:i32 = or %46, %53
%55:i32 = or %39, %54
%56:i32 = or %32, %55
%57:i32 = or %24, %56
%58:i32 = or %17, %57
%59:i32 = or %10, %58
%60:i32 = and 256:i32, %59
infer %60


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 256
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3 (hasExternalUses)
%5:i8 = var
%6:i8 = and 127:i8, %5 (hasExternalUses)
%7:i8 = xor 127:i8, %6 (hasExternalUses)
%8:i8 = or %4, %7
%9:i32 = zext %8

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3 (hasExternalUses)
%5:i8 = var
%6:i8 = and 127:i8, %5 (hasExternalUses)
%7:i8 = xor 127:i8, %6 (hasExternalUses)
%8:i8 = or %4, %7
%9:i32 = zext %8
%10:i32 = addnw 511:i32, %9

Cost = 3
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3 (hasExternalUses)
%5:i8 = var
%6:i8 = and 127:i8, %5 (hasExternalUses)
%7:i8 = xor 127:i8, %6 (hasExternalUses)
%8:i8 = or %4, %7
%9:i32 = zext %8
%10:i32 = addnw 511:i32, %9

Cost = 3
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3 (hasExternalUses)
%5:i8 = var
%6:i8 = and 127:i8, %5 (hasExternalUses)
%7:i8 = xor 87:i8, %6
%8:i8 = or %4, %7
%9:i32 = zext %8
%10:i32 = addnw 511:i32, %9
%11:i8 = var
%12:i8 = var
%13:i8 = xor %1, %12
%14:i8 = or %11, %13 (hasExternalUses)
%15:i8 = or %6, %14
%16:i32 = zext %15
%17:i32 = addnsw 4294967295:i32, %16
%18:i8 = var
%19:i8 = var
%20:i8 = xor %1, %19
%21:i8 = or %18, %20 (hasExternalUses)
%22:i8 = or %6, %21
%23:i32 = zext %22
%24:i32 = addnsw 4294967295:i32, %23
%25:i8 = var
%26:i8 = var
%27:i8 = xor %1, %26
%28:i8 = or %25, %27 (hasExternalUses)
%29:i8 = or %6, %28
%30:i32 = zext %29
%31:i32 = addnsw 4294967295:i32, %30
%32:i32 = or %24, %31
%33:i32 = or %17, %32
%34:i32 = or %10, %33

Cost = 16
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i8 = or %0, %3 (hasExternalUses)
%5:i8 = var
%6:i8 = and 127:i8, %5
%7:i8 = xor 127:i8, %6
%8:i8 = or %4, %7
%9:i32 = zext %8
%10:i32 = addnw 511:i32, %9
%11:i8 = var
%12:i8 = var
%13:i8 = xor %1, %12
%14:i8 = or %11, %13 (hasExternalUses)
%15:i8 = or %14, %7
%16:i32 = zext %15
%17:i32 = addnw 511:i32, %16
%18:i8 = var
%19:i8 = var
%20:i8 = xor %1, %19
%21:i8 = or %18, %20 (hasExternalUses)
%22:i8 = or %21, %7
%23:i32 = zext %22
%24:i32 = addnw 511:i32, %23
%25:i8 = var
%26:i8 = var
%27:i8 = xor %1, %26
%28:i8 = or %25, %27 (hasExternalUses)
%29:i8 = xor 87:i8, %6
%30:i8 = or %28, %29
%31:i32 = zext %30
%32:i32 = addnw 511:i32, %31
%33:i8 = var
%34:i8 = var
%35:i8 = xor %1, %34
%36:i8 = or %33, %35 (hasExternalUses)
%37:i8 = or %6, %36
%38:i32 = zext %37
%39:i32 = addnsw 4294967295:i32, %38
%40:i8 = var
%41:i8 = var
%42:i8 = xor %1, %41
%43:i8 = or %40, %42 (hasExternalUses)
%44:i8 = or %6, %43
%45:i32 = zext %44
%46:i32 = addnsw 4294967295:i32, %45
%47:i8 = var
%48:i8 = var
%49:i8 = xor %1, %48
%50:i8 = or %47, %49 (hasExternalUses)
%51:i8 = or %6, %50
%52:i32 = zext %51
%53:i32 = addnsw 4294967295:i32, %52
%54:i32 = or %46, %53
%55:i32 = or %39, %54
%56:i32 = or %32, %55
%57:i32 = or %24, %56
%58:i32 = or %17, %57
%59:i32 = or %10, %58
%60:i32 = and 256:i32, %59
%61:i1 = eq 0:i32, %60
infer %61


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,32))
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 8
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,32))
%1:i32 = addnw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 9
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,32))

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,32))
%1:i32 = addnw 1:i32, %0 (hasExternalUses)
%2:i1 = eq 32:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0 (demandedBits=11111000)


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -8
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = and 248:i8, %0
infer %1


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -8
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0 (demandedBits=00111111)


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 63
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = and 63:i8, %0
infer %1 (demandedBits=10111111)


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 63
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = and 63:i8, %0
%2:i8 = or 64:i8, %1
infer %2


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 64
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 127
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i8 = and 63:i8, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var (range=[0,255))
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 254
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var (range=[0,255))
%1:i32 = lshr %0, 3:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 31
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var (range=[0,255))

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = zext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 255
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var (range=[0,255))
%1:i32 = and 7:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 6
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var (range=[0,255))

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = zext %0
%2:i32 = var (range=[0,255))
%3:i32 = and 7:i32, %2
%4:i32 = lshr %1, %3
infer %4 (demandedBits=00000000000000000000000000000001)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var (range=[0,255))

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i32 = zext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var (range=[0,255))
%1:i32 = and 7:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = zext %0
%2:i32 = var (range=[0,255))
%3:i32 = and 7:i32, %2
%4:i32 = lshr %1, %3
%5:i32 = and 1:i32, %4
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var (range=[0,255))

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i32 = zext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var (range=[0,255))
%1:i32 = and 7:i32, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i32 = zext %0
%2:i32 = var (range=[0,255))
%3:i32 = and 7:i32, %2
%4:i32 = lshr %1, %3

Cost = 3
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%1:i8 = var
%2:i32 = zext %1
%3:i32 = var (range=[0,255))
%4:i32 = and 7:i32, %3
%5:i32 = lshr %2, %4
%6:i32 = and 1:i32, %5 (hasExternalUses)
%7:i32 = xor %0, %6
infer %7


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var (range=[0,255))

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%1:i8 = var
%2:i32 = zext %1
%3:i32 = var (range=[0,255))
%4:i32 = and 7:i32, %3
%5:i32 = lshr %2, %4
%6:i32 = and 1:i32, %5 (hasExternalUses)
%7:i32 = xor %0, %6
%8:i32 = subnsw 0:i32, %7
infer %8


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i32 = zext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var (range=[0,255))
%1:i32 = and 7:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%1:i8 = var
%2:i32 = zext %1
%3:i32 = var (range=[0,255))
%4:i32 = and 7:i32, %3
%5:i32 = lshr %2, %4
%6:i32 = and 1:i32, %5 (hasExternalUses)
%7:i32 = xor %0, %6
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = var
%11:i32 = xor %9, %10
%12:i32 = and %8, %11
infer %12


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %10, %0
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12
infer %13


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %0, %10
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12
infer %13


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %0, %10
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = var
%15:i32 = var
%16:i32 = xor %15, %14
%17:i32 = and %9, %16 (hasExternalUses)
%18:i32 = xor %14, %17 (hasExternalUses)
%19:i32 = sub %13, %18
infer %19


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %10, %0
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = var
%15:i32 = var
%16:i32 = xor %14, %15
%17:i32 = and %9, %16 (hasExternalUses)
%18:i32 = xor %14, %17 (hasExternalUses)
%19:i32 = sub %13, %18
infer %19


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %0, %10
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = var
%15:i32 = var
%16:i32 = xor %15, %14
%17:i32 = and %9, %16 (hasExternalUses)
%18:i32 = xor %14, %17 (hasExternalUses)
%19:i32 = add %13, %18
infer %19


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var (knownBits=0000000000000000000000000000000x) (nonNegative) (signBits=31) (range=[0,2))
%2:i8 = var
%3:i32 = zext %2
%4:i32 = var (range=[0,255))
%5:i32 = and 7:i32, %4
%6:i32 = lshr %3, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = xor %1, %7
%9:i32 = subnsw 0:i32, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = xor %10, %0
%12:i32 = and %9, %11 (hasExternalUses)
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = var
%15:i32 = var
%16:i32 = xor %14, %15
%17:i32 = and %9, %16 (hasExternalUses)
%18:i32 = xor %14, %17 (hasExternalUses)
%19:i32 = add %13, %18
infer %19


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
infer %3 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -65536
1 th attempt: second query is SAT-- constant doesn't work
ConstantSynthesis: solver returns error on first query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
infer %4 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 241041010605102
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
infer %3


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
infer %4


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -224521562594788
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3 (hasExternalUses)
%5:i64 = addnsw 16777216:i64, %4
infer %5 (demandedBits=1111111111111111111111111111111111111110000000000000000000000000)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 216944791383878
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 7 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3 (hasExternalUses)
%5:i64 = addnsw 16777216:i64, %4 (hasExternalUses)
%6:i64 = ashr %5, 25:i64
infer %6 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 3277309
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3 (hasExternalUses)
%5:i64 = addnsw 16777216:i64, %4 (hasExternalUses)
%6:i64 = ashr %5, 25:i64
%7:i64 = mulnsw 19:i64, %6
infer %7 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -69190096
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3 (hasExternalUses)
%5:i64 = addnsw 16777216:i64, %4 (hasExternalUses)
%6:i64 = ashr %5, 25:i64
%7:i64 = mulnsw 19:i64, %6
%8:i32 = var
%9:i32 = var
%10:i32 = sub %8, %9 (hasExternalUses)
%11:i64 = sext %10
%12:i64 = mulnsw 121666:i64, %11
%13:i64 = addnsw %7, %12
infer %13 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
ConstantSynthesis: solver returns error on first query

--------------------------------
guess 1

%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 7 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3 (hasExternalUses)
%5:i64 = addnsw 16777216:i64, %4 (hasExternalUses)
%6:i64 = and 4261412864:i64, %5
infer %6 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
%5:i32 = var
%6:i32 = var
%7:i32 = sub %5, %6 (hasExternalUses)
%8:i64 = sext %7
%9:i64 = mulnsw 121666:i64, %8 (hasExternalUses)
%10:i64 = addnsw 16777216:i64, %9 (hasExternalUses)
%11:i64 = ashr %10, 25:i64
%12:i64 = addnsw %4, %11
infer %12 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -255493220994050
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
%5:i64 = addnsw 16777216:i64, %4 (hasExternalUses)
%6:i64 = and 4261412864:i64, %5
%7:i64 = subnsw %4, %6
infer %7 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -179632699363978
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3 (hasExternalUses)
%5:i64 = addnsw 16777216:i64, %4 (hasExternalUses)
%6:i64 = ashr %5, 25:i64
%7:i64 = mulnsw 19:i64, %6
%8:i32 = var
%9:i32 = var
%10:i32 = sub %8, %9 (hasExternalUses)
%11:i64 = sext %10
%12:i64 = mulnsw 121666:i64, %11
%13:i64 = addnsw %7, %12 (hasExternalUses)
%14:i64 = addnsw 33554432:i64, %13
infer %14 (demandedBits=0000001111111111111111111111111111111100000000000000000000000000)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -80151034387115
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3 (hasExternalUses)
%5:i64 = addnsw 16777216:i64, %4 (hasExternalUses)
%6:i64 = ashr %5, 25:i64
%7:i64 = mulnsw 19:i64, %6
%8:i32 = var
%9:i32 = var
%10:i32 = sub %8, %9 (hasExternalUses)
%11:i64 = sext %10
%12:i64 = mulnsw 121666:i64, %11
%13:i64 = addnsw %7, %12 (hasExternalUses)
%14:i64 = addnsw 33554432:i64, %13 (hasExternalUses)
%15:i64 = lshr %14, 26:i64
infer %15 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 274876712600
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
%5:i64 = addnsw 16777216:i64, %4 (hasExternalUses)
%6:i64 = and 4261412864:i64, %5
%7:i64 = subnsw %4, %6
%8:i32 = var
%9:i32 = var
%10:i32 = sub %8, %9 (hasExternalUses)
%11:i64 = sext %10
%12:i64 = mulnsw 121666:i64, %11 (hasExternalUses)
%13:i64 = addnsw 16777216:i64, %12 (hasExternalUses)
%14:i64 = ashr %13, 25:i64
%15:i64 = mulnsw 19:i64, %14
%16:i32 = var
%17:i32 = var
%18:i32 = sub %16, %17 (hasExternalUses)
%19:i64 = sext %18
%20:i64 = mulnsw 121666:i64, %19
%21:i64 = addnsw %15, %20 (hasExternalUses)
%22:i64 = addnsw 33554432:i64, %21 (hasExternalUses)
%23:i64 = lshr %22, 26:i64
%24:i64 = addnsw %7, %23
infer %24 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -13142602136633
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3 (hasExternalUses)
%5:i64 = addnsw 16777216:i64, %4

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3 (hasExternalUses)
%5:i64 = addnsw 16777216:i64, %4 (hasExternalUses)
%6:i64 = and 4261412864:i64, %5

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3 (hasExternalUses)
%5:i64 = addnsw 16777216:i64, %4 (hasExternalUses)
%6:i64 = ashr %5, 25:i64
%7:i64 = mulnsw 19:i64, %6
%8:i32 = var
%9:i32 = var
%10:i32 = sub %8, %9 (hasExternalUses)
%11:i64 = sext %10
%12:i64 = mulnsw 121666:i64, %11
%13:i64 = addnsw %7, %12 (hasExternalUses)
%14:i64 = addnsw 33554432:i64, %13 (hasExternalUses)
%15:i64 = and 4227858432:i64, %14
infer %15 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3 (hasExternalUses)
%5:i64 = addnsw 16777216:i64, %4 (hasExternalUses)
%6:i64 = ashr %5, 25:i64
%7:i64 = mulnsw 19:i64, %6
%8:i32 = var
%9:i32 = var
%10:i32 = sub %8, %9 (hasExternalUses)
%11:i64 = sext %10
%12:i64 = mulnsw 121666:i64, %11
%13:i64 = addnsw %7, %12
%14:i64 = addnsw 33554432:i64, %13 (hasExternalUses)
%15:i64 = and 4227858432:i64, %14
%16:i64 = subnsw %13, %15
infer %16 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -21463437777
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3 (hasExternalUses)
%5:i64 = addnsw 16777216:i64, %4 (hasExternalUses)
%6:i64 = ashr %5, 25:i64

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3 (hasExternalUses)
%5:i64 = addnsw 16777216:i64, %4 (hasExternalUses)
%6:i64 = ashr %5, 25:i64
%7:i64 = mulnsw 19:i64, %6

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
%5:i32 = var
%6:i32 = var
%7:i32 = sub %5, %6 (hasExternalUses)
%8:i64 = sext %7
%9:i64 = mulnsw 121666:i64, %8 (hasExternalUses)
%10:i64 = addnsw 16777216:i64, %9 (hasExternalUses)
%11:i64 = ashr %10, 25:i64
%12:i64 = addnsw %4, %11 (hasExternalUses)
%13:i64 = addnsw 33554432:i64, %12
infer %13 (demandedBits=0000001111111111111111111111111111111100000000000000000000000000)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -18402875644803
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
%5:i32 = var
%6:i32 = var
%7:i32 = sub %5, %6 (hasExternalUses)
%8:i64 = sext %7
%9:i64 = mulnsw 121666:i64, %8 (hasExternalUses)
%10:i64 = addnsw 16777216:i64, %9 (hasExternalUses)
%11:i64 = ashr %10, 25:i64
%12:i64 = addnsw %4, %11 (hasExternalUses)
%13:i64 = addnsw 33554432:i64, %12 (hasExternalUses)
%14:i64 = lshr %13, 26:i64
infer %14 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 274874834877
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
%5:i64 = addnsw 16777216:i64, %4 (hasExternalUses)
%6:i64 = and 4261412864:i64, %5
%7:i64 = subnsw %4, %6
%8:i32 = var
%9:i32 = var
%10:i32 = sub %8, %9 (hasExternalUses)
%11:i64 = sext %10
%12:i64 = mulnsw 121666:i64, %11
%13:i32 = var
%14:i32 = var
%15:i32 = sub %13, %14 (hasExternalUses)
%16:i64 = sext %15
%17:i64 = mulnsw 121666:i64, %16 (hasExternalUses)
%18:i64 = addnsw 16777216:i64, %17 (hasExternalUses)
%19:i64 = ashr %18, 25:i64
%20:i64 = addnsw %12, %19 (hasExternalUses)
%21:i64 = addnsw 33554432:i64, %20 (hasExternalUses)
%22:i64 = lshr %21, 26:i64
%23:i64 = addnsw %7, %22
infer %23 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -142043153877552
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3 (hasExternalUses)
%5:i64 = addnsw 16777216:i64, %4

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3 (hasExternalUses)
%5:i64 = addnsw 16777216:i64, %4 (hasExternalUses)
%6:i64 = and 4261412864:i64, %5

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
%5:i32 = var
%6:i32 = var
%7:i32 = sub %5, %6 (hasExternalUses)
%8:i64 = sext %7
%9:i64 = mulnsw 121666:i64, %8 (hasExternalUses)
%10:i64 = addnsw 16777216:i64, %9 (hasExternalUses)
%11:i64 = ashr %10, 25:i64
%12:i64 = addnsw %4, %11 (hasExternalUses)
%13:i64 = addnsw 33554432:i64, %12 (hasExternalUses)
%14:i64 = and 4227858432:i64, %13
infer %14 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2818572288
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
%5:i32 = var
%6:i32 = var
%7:i32 = sub %5, %6 (hasExternalUses)
%8:i64 = sext %7
%9:i64 = mulnsw 121666:i64, %8 (hasExternalUses)
%10:i64 = addnsw 16777216:i64, %9 (hasExternalUses)
%11:i64 = ashr %10, 25:i64
%12:i64 = addnsw %4, %11
%13:i64 = addnsw 33554432:i64, %12 (hasExternalUses)
%14:i64 = and 4227858432:i64, %13
%15:i64 = subnsw %12, %14
infer %15 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -162431365421585
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3 (hasExternalUses)
%5:i64 = addnsw 16777216:i64, %4

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3 (hasExternalUses)
%5:i64 = addnsw 16777216:i64, %4 (hasExternalUses)
%6:i64 = ashr %5, 25:i64

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3 (hasExternalUses)
%5:i32 = var
%6:i32 = var
%7:i32 = sub %5, %6 (hasExternalUses)
%8:i64 = sext %7
%9:i64 = mulnsw 121666:i64, %8
%10:i32 = var
%11:i32 = var
%12:i32 = sub %10, %11 (hasExternalUses)
%13:i64 = sext %12
%14:i64 = mulnsw 121666:i64, %13 (hasExternalUses)
%15:i64 = addnsw 16777216:i64, %14 (hasExternalUses)
%16:i64 = ashr %15, 25:i64
%17:i64 = addnsw %9, %16 (hasExternalUses)
%18:i64 = addnsw 33554432:i64, %17 (hasExternalUses)
%19:i64 = lshr %18, 26:i64
%20:i64 = addnsw %4, %19
infer %20 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -25159795826948
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
%5:i32 = var
%6:i32 = var
%7:i32 = sub %5, %6 (hasExternalUses)
%8:i64 = sext %7
%9:i64 = mulnsw 121666:i64, %8
%10:i32 = var
%11:i32 = var
%12:i32 = sub %10, %11 (hasExternalUses)
%13:i64 = sext %12
%14:i64 = mulnsw 121666:i64, %13 (hasExternalUses)
%15:i64 = addnsw 16777216:i64, %14 (hasExternalUses)
%16:i64 = ashr %15, 25:i64
%17:i64 = addnsw %9, %16 (hasExternalUses)
%18:i64 = addnsw 33554432:i64, %17 (hasExternalUses)
%19:i64 = lshr %18, 26:i64
%20:i64 = addnsw %4, %19
%21:i64 = addnsw 16777216:i64, %4 (hasExternalUses)
%22:i64 = and 4261412864:i64, %21
%23:i64 = subnsw %20, %22
infer %23 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 27702523875894
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3 (hasExternalUses)
%5:i64 = addnsw 16777216:i64, %4

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3 (hasExternalUses)
%5:i64 = addnsw 16777216:i64, %4 (hasExternalUses)
%6:i64 = and 4261412864:i64, %5

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3 (hasExternalUses)
%5:i64 = addnsw 16777216:i64, %4 (hasExternalUses)
%6:i64 = ashr %5, 25:i64
%7:i64 = mulnsw 19:i64, %6
%8:i32 = var
%9:i32 = var
%10:i32 = sub %8, %9 (hasExternalUses)
%11:i64 = sext %10
%12:i64 = mulnsw 121666:i64, %11
%13:i64 = addnsw %7, %12
%14:i64 = addnsw 33554432:i64, %13 (hasExternalUses)
%15:i64 = and 4227858432:i64, %14
%16:i64 = subnsw %13, %15
%17:i32 = trunc %16
infer %17


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2875814
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
%5:i64 = addnsw 16777216:i64, %4 (hasExternalUses)
%6:i64 = and 4261412864:i64, %5
%7:i64 = subnsw %4, %6
%8:i32 = var
%9:i32 = var
%10:i32 = sub %8, %9 (hasExternalUses)
%11:i64 = sext %10
%12:i64 = mulnsw 121666:i64, %11 (hasExternalUses)
%13:i64 = addnsw 16777216:i64, %12 (hasExternalUses)
%14:i64 = ashr %13, 25:i64
%15:i64 = mulnsw 19:i64, %14
%16:i32 = var
%17:i32 = var
%18:i32 = sub %16, %17 (hasExternalUses)
%19:i64 = sext %18
%20:i64 = mulnsw 121666:i64, %19
%21:i64 = addnsw %15, %20 (hasExternalUses)
%22:i64 = addnsw 33554432:i64, %21 (hasExternalUses)
%23:i64 = lshr %22, 26:i64
%24:i64 = addnsw %7, %23
%25:i32 = trunc %24
infer %25


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -8901915
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
%5:i32 = var
%6:i32 = var
%7:i32 = sub %5, %6 (hasExternalUses)
%8:i64 = sext %7
%9:i64 = mulnsw 121666:i64, %8 (hasExternalUses)
%10:i64 = addnsw 16777216:i64, %9 (hasExternalUses)
%11:i64 = ashr %10, 25:i64
%12:i64 = addnsw %4, %11
%13:i64 = addnsw 33554432:i64, %12 (hasExternalUses)
%14:i64 = and 4227858432:i64, %13
%15:i64 = subnsw %12, %14
%16:i32 = trunc %15
infer %16


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2616829
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
%5:i64 = addnsw 16777216:i64, %4 (hasExternalUses)
%6:i64 = and 4261412864:i64, %5
%7:i64 = subnsw %4, %6
%8:i32 = var
%9:i32 = var
%10:i32 = sub %8, %9 (hasExternalUses)
%11:i64 = sext %10
%12:i64 = mulnsw 121666:i64, %11
%13:i32 = var
%14:i32 = var
%15:i32 = sub %13, %14 (hasExternalUses)
%16:i64 = sext %15
%17:i64 = mulnsw 121666:i64, %16 (hasExternalUses)
%18:i64 = addnsw 16777216:i64, %17 (hasExternalUses)
%19:i64 = ashr %18, 25:i64
%20:i64 = addnsw %12, %19 (hasExternalUses)
%21:i64 = addnsw 33554432:i64, %20 (hasExternalUses)
%22:i64 = lshr %21, 26:i64
%23:i64 = addnsw %7, %22
%24:i32 = trunc %23
infer %24


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4535760
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1 (hasExternalUses)
%3:i64 = sext %2
%4:i64 = mulnsw 121666:i64, %3
%5:i32 = var
%6:i32 = var
%7:i32 = sub %5, %6 (hasExternalUses)
%8:i64 = sext %7
%9:i64 = mulnsw 121666:i64, %8
%10:i32 = var
%11:i32 = var
%12:i32 = sub %10, %11 (hasExternalUses)
%13:i64 = sext %12
%14:i64 = mulnsw 121666:i64, %13 (hasExternalUses)
%15:i64 = addnsw 16777216:i64, %14 (hasExternalUses)
%16:i64 = ashr %15, 25:i64
%17:i64 = addnsw %9, %16 (hasExternalUses)
%18:i64 = addnsw 33554432:i64, %17 (hasExternalUses)
%19:i64 = lshr %18, 26:i64
%20:i64 = addnsw %4, %19
%21:i64 = addnsw 16777216:i64, %4 (hasExternalUses)
%22:i64 = and 4261412864:i64, %21
%23:i64 = subnsw %20, %22
%24:i32 = trunc %23
infer %24


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -15998403
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = sub %1, %2 (hasExternalUses)
%4:i64 = sext %3
%5:i64 = mulnsw 121666:i64, %4 (hasExternalUses)
%6:i64 = addnsw 16777216:i64, %5 (hasExternalUses)
%7:i64 = ashr %6, 25:i64
%8:i64 = mulnsw 19:i64, %7
%9:i32 = var
%10:i32 = var
%11:i32 = sub %9, %10 (hasExternalUses)
%12:i64 = sext %11
%13:i64 = mulnsw 121666:i64, %12
%14:i64 = addnsw %8, %13
%15:i64 = addnsw 33554432:i64, %14 (hasExternalUses)
%16:i64 = and 4227858432:i64, %15
%17:i64 = subnsw %14, %16
%18:i32 = trunc %17 (hasExternalUses)
%19:i32 = add %0, %18
infer %19


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -27828581
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = sub %1, %2 (hasExternalUses)
%4:i64 = sext %3
%5:i64 = mulnsw 121666:i64, %4
%6:i64 = addnsw 16777216:i64, %5 (hasExternalUses)
%7:i64 = and 4261412864:i64, %6
%8:i64 = subnsw %5, %7
%9:i32 = var
%10:i32 = var
%11:i32 = sub %9, %10 (hasExternalUses)
%12:i64 = sext %11
%13:i64 = mulnsw 121666:i64, %12 (hasExternalUses)
%14:i64 = addnsw 16777216:i64, %13 (hasExternalUses)
%15:i64 = ashr %14, 25:i64
%16:i64 = mulnsw 19:i64, %15
%17:i32 = var
%18:i32 = var
%19:i32 = sub %17, %18 (hasExternalUses)
%20:i64 = sext %19
%21:i64 = mulnsw 121666:i64, %20
%22:i64 = addnsw %16, %21 (hasExternalUses)
%23:i64 = addnsw 33554432:i64, %22 (hasExternalUses)
%24:i64 = lshr %23, 26:i64
%25:i64 = addnsw %8, %24
%26:i32 = trunc %25 (hasExternalUses)
%27:i32 = add %0, %26
infer %27


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -4144311
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = sub %1, %2 (hasExternalUses)
%4:i64 = sext %3
%5:i64 = mulnsw 121666:i64, %4
%6:i32 = var
%7:i32 = var
%8:i32 = sub %6, %7 (hasExternalUses)
%9:i64 = sext %8
%10:i64 = mulnsw 121666:i64, %9 (hasExternalUses)
%11:i64 = addnsw 16777216:i64, %10 (hasExternalUses)
%12:i64 = ashr %11, 25:i64
%13:i64 = addnsw %5, %12
%14:i64 = addnsw 33554432:i64, %13 (hasExternalUses)
%15:i64 = and 4227858432:i64, %14
%16:i64 = subnsw %13, %15
%17:i32 = trunc %16 (hasExternalUses)
%18:i32 = add %0, %17
infer %18


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 60734381
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = sub %1, %2 (hasExternalUses)
%4:i64 = sext %3
%5:i64 = mulnsw 121666:i64, %4
%6:i64 = addnsw 16777216:i64, %5 (hasExternalUses)
%7:i64 = and 4261412864:i64, %6
%8:i64 = subnsw %5, %7
%9:i32 = var
%10:i32 = var
%11:i32 = sub %9, %10 (hasExternalUses)
%12:i64 = sext %11
%13:i64 = mulnsw 121666:i64, %12
%14:i32 = var
%15:i32 = var
%16:i32 = sub %14, %15 (hasExternalUses)
%17:i64 = sext %16
%18:i64 = mulnsw 121666:i64, %17 (hasExternalUses)
%19:i64 = addnsw 16777216:i64, %18 (hasExternalUses)
%20:i64 = ashr %19, 25:i64
%21:i64 = addnsw %13, %20 (hasExternalUses)
%22:i64 = addnsw 33554432:i64, %21 (hasExternalUses)
%23:i64 = lshr %22, 26:i64
%24:i64 = addnsw %8, %23
%25:i32 = trunc %24 (hasExternalUses)
%26:i32 = add %0, %25
infer %26


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -31257017
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = sub %1, %2 (hasExternalUses)
%4:i64 = sext %3
%5:i64 = mulnsw 121666:i64, %4
%6:i32 = var
%7:i32 = var
%8:i32 = sub %6, %7 (hasExternalUses)
%9:i64 = sext %8
%10:i64 = mulnsw 121666:i64, %9
%11:i32 = var
%12:i32 = var
%13:i32 = sub %11, %12 (hasExternalUses)
%14:i64 = sext %13
%15:i64 = mulnsw 121666:i64, %14 (hasExternalUses)
%16:i64 = addnsw 16777216:i64, %15 (hasExternalUses)
%17:i64 = ashr %16, 25:i64
%18:i64 = addnsw %10, %17 (hasExternalUses)
%19:i64 = addnsw 33554432:i64, %18 (hasExternalUses)
%20:i64 = lshr %19, 26:i64
%21:i64 = addnsw %5, %20
%22:i64 = addnsw 16777216:i64, %5 (hasExternalUses)
%23:i64 = and 4261412864:i64, %22
%24:i64 = subnsw %21, %23
%25:i32 = trunc %24 (hasExternalUses)
%26:i32 = add %0, %25
infer %26


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -5867083
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 0:i1
%2:i32 = addnsw 4294967295:i32, %0
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 127
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 63
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var (range=[0,255))

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 7 candidates from LHS

-------------------------------------------------
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i8 = var
%3:i32 = zext %2
%4:i32 = and 7:i32, %0
%5:i32 = lshr %3, %4
%6:i32 = and 1:i32, %5 (hasExternalUses)
%7:i32 = subnsw 0:i32, %6
infer %7


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var (range=[0,255))

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i8 = var
%3:i32 = zext %2
%4:i32 = and 7:i32, %0
%5:i32 = lshr %3, %4
%6:i32 = and 1:i32, %5 (hasExternalUses)
%7:i32 = subnsw 0:i32, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = xor %8, %9
%11:i32 = and %7, %10
infer %11


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i32 = zext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i32 = var
%3:i8 = var
%4:i32 = zext %3
%5:i32 = and 7:i32, %0
%6:i32 = lshr %4, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = xor %2, %9
%11:i32 = and %8, %10 (hasExternalUses)
%12:i32 = xor %2, %11
infer %12


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var (range=[0,255))
%1:i1 = eq 0:i32, %0
pc %1 1:i1
%2:i32 = var
%3:i8 = var
%4:i32 = zext %3
%5:i32 = and 7:i32, %0
%6:i32 = lshr %4, %5
%7:i32 = and 1:i32, %6 (hasExternalUses)
%8:i32 = subnsw 0:i32, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = xor %9, %2
%11:i32 = and %8, %10 (hasExternalUses)
%12:i32 = xor %2, %11
infer %12


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = phi %0, 0:i32, 4294967295:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for ./x25519_ref10.c.bc:crypto_scalarmult_curve25519_ref10()

