; entering Souper's runOnFunction() for crypto_core_hsalsa20()

; ModuleID = './core_hsalsa20_ref2.c.bc'
source_filename = "crypto_core/hsalsa20/ref2/core_hsalsa20_ref2.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

; Function Attrs: nofree norecurse nounwind
define i32 @crypto_core_hsalsa20(i8* nocapture nonnull %0, i8* nocapture nonnull readonly %1, i8* nocapture nonnull readonly %2, i8* readonly %3) local_unnamed_addr #0 {
  %5 = icmp eq i8* %3, null
  br i1 %5, label %18, label %6

6:                                                ; preds = %4
  %7 = bitcast i8* %3 to i32*
  %8 = load i32, i32* %7, align 1
  %9 = getelementptr i8, i8* %3, i32 4
  %10 = bitcast i8* %9 to i32*
  %11 = load i32, i32* %10, align 1
  %12 = getelementptr i8, i8* %3, i32 8
  %13 = bitcast i8* %12 to i32*
  %14 = load i32, i32* %13, align 1
  %15 = getelementptr i8, i8* %3, i32 12
  %16 = bitcast i8* %15 to i32*
  %17 = load i32, i32* %16, align 1
  br label %18

18:                                               ; preds = %4, %6
  %19 = phi i32 [ %8, %6 ], [ 1634760805, %4 ]
  %20 = phi i32 [ %11, %6 ], [ 857760878, %4 ]
  %21 = phi i32 [ %14, %6 ], [ 2036477234, %4 ]
  %22 = phi i32 [ %17, %6 ], [ 1797285236, %4 ]
  %23 = bitcast i8* %2 to i32*
  %24 = load i32, i32* %23, align 1
  %25 = getelementptr i8, i8* %2, i32 4
  %26 = bitcast i8* %25 to i32*
  %27 = load i32, i32* %26, align 1
  %28 = getelementptr i8, i8* %2, i32 8
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 1
  %31 = getelementptr i8, i8* %2, i32 12
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 1
  %34 = getelementptr i8, i8* %2, i32 16
  %35 = bitcast i8* %34 to i32*
  %36 = load i32, i32* %35, align 1
  %37 = getelementptr i8, i8* %2, i32 20
  %38 = bitcast i8* %37 to i32*
  %39 = load i32, i32* %38, align 1
  %40 = getelementptr i8, i8* %2, i32 24
  %41 = bitcast i8* %40 to i32*
  %42 = load i32, i32* %41, align 1
  %43 = getelementptr i8, i8* %2, i32 28
  %44 = bitcast i8* %43 to i32*
  %45 = load i32, i32* %44, align 1
  %46 = bitcast i8* %1 to i32*
  %47 = load i32, i32* %46, align 1
  %48 = getelementptr i8, i8* %1, i32 4
  %49 = bitcast i8* %48 to i32*
  %50 = load i32, i32* %49, align 1
  %51 = getelementptr i8, i8* %1, i32 8
  %52 = bitcast i8* %51 to i32*
  %53 = load i32, i32* %52, align 1
  %54 = getelementptr i8, i8* %1, i32 12
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 1
  br label %57

57:                                               ; preds = %18, %57
  %58 = phi i32 [ 20, %18 ], [ %235, %57 ]
  %59 = phi i32 [ %22, %18 ], [ %234, %57 ]
  %60 = phi i32 [ %45, %18 ], [ %229, %57 ]
  %61 = phi i32 [ %42, %18 ], [ %224, %57 ]
  %62 = phi i32 [ %39, %18 ], [ %219, %57 ]
  %63 = phi i32 [ %36, %18 ], [ %199, %57 ]
  %64 = phi i32 [ %21, %18 ], [ %214, %57 ]
  %65 = phi i32 [ %56, %18 ], [ %209, %57 ]
  %66 = phi i32 [ %53, %18 ], [ %204, %57 ]
  %67 = phi i32 [ %50, %18 ], [ %184, %57 ]
  %68 = phi i32 [ %47, %18 ], [ %179, %57 ]
  %69 = phi i32 [ %20, %18 ], [ %194, %57 ]
  %70 = phi i32 [ %33, %18 ], [ %189, %57 ]
  %71 = phi i32 [ %30, %18 ], [ %169, %57 ]
  %72 = phi i32 [ %27, %18 ], [ %164, %57 ]
  %73 = phi i32 [ %24, %18 ], [ %159, %57 ]
  %74 = phi i32 [ %19, %18 ], [ %174, %57 ]
  %75 = add i32 %62, %74
  %76 = shl i32 %75, 7
  %77 = lshr i32 %75, 25
  %78 = or i32 %77, %76
  %79 = xor i32 %78, %70
  %80 = add i32 %79, %74
  %81 = shl i32 %80, 9
  %82 = lshr i32 %80, 23
  %83 = or i32 %82, %81
  %84 = xor i32 %83, %66
  %85 = add i32 %84, %79
  %86 = shl i32 %85, 13
  %87 = lshr i32 %85, 19
  %88 = or i32 %87, %86
  %89 = xor i32 %88, %62
  %90 = add i32 %89, %84
  %91 = shl i32 %90, 18
  %92 = lshr i32 %90, 14
  %93 = or i32 %92, %91
  %94 = xor i32 %93, %74
  %95 = add i32 %69, %73
  %96 = shl i32 %95, 7
  %97 = lshr i32 %95, 25
  %98 = or i32 %97, %96
  %99 = xor i32 %65, %98
  %100 = add i32 %99, %69
  %101 = shl i32 %100, 9
  %102 = lshr i32 %100, 23
  %103 = or i32 %102, %101
  %104 = xor i32 %61, %103
  %105 = add i32 %104, %99
  %106 = shl i32 %105, 13
  %107 = lshr i32 %105, 19
  %108 = or i32 %107, %106
  %109 = xor i32 %108, %73
  %110 = add i32 %109, %104
  %111 = shl i32 %110, 18
  %112 = lshr i32 %110, 14
  %113 = or i32 %112, %111
  %114 = xor i32 %113, %69
  %115 = add i32 %64, %68
  %116 = shl i32 %115, 7
  %117 = lshr i32 %115, 25
  %118 = or i32 %117, %116
  %119 = xor i32 %60, %118
  %120 = add i32 %119, %64
  %121 = shl i32 %120, 9
  %122 = lshr i32 %120, 23
  %123 = or i32 %122, %121
  %124 = xor i32 %123, %72
  %125 = add i32 %124, %119
  %126 = shl i32 %125, 13
  %127 = lshr i32 %125, 19
  %128 = or i32 %127, %126
  %129 = xor i32 %128, %68
  %130 = add i32 %129, %124
  %131 = shl i32 %130, 18
  %132 = lshr i32 %130, 14
  %133 = or i32 %132, %131
  %134 = xor i32 %133, %64
  %135 = add i32 %59, %63
  %136 = shl i32 %135, 7
  %137 = lshr i32 %135, 25
  %138 = or i32 %137, %136
  %139 = xor i32 %138, %71
  %140 = add i32 %139, %59
  %141 = shl i32 %140, 9
  %142 = lshr i32 %140, 23
  %143 = or i32 %142, %141
  %144 = xor i32 %143, %67
  %145 = add i32 %144, %139
  %146 = shl i32 %145, 13
  %147 = lshr i32 %145, 19
  %148 = or i32 %147, %146
  %149 = xor i32 %148, %63
  %150 = add i32 %149, %144
  %151 = shl i32 %150, 18
  %152 = lshr i32 %150, 14
  %153 = or i32 %152, %151
  %154 = xor i32 %153, %59
  %155 = add i32 %94, %139
  %156 = shl i32 %155, 7
  %157 = lshr i32 %155, 25
  %158 = or i32 %157, %156
  %159 = xor i32 %158, %109
  %160 = add i32 %159, %94
  %161 = shl i32 %160, 9
  %162 = lshr i32 %160, 23
  %163 = or i32 %162, %161
  %164 = xor i32 %163, %124
  %165 = add i32 %164, %159
  %166 = shl i32 %165, 13
  %167 = lshr i32 %165, 19
  %168 = or i32 %167, %166
  %169 = xor i32 %168, %139
  %170 = add i32 %169, %164
  %171 = shl i32 %170, 18
  %172 = lshr i32 %170, 14
  %173 = or i32 %172, %171
  %174 = xor i32 %173, %94
  %175 = add i32 %114, %79
  %176 = shl i32 %175, 7
  %177 = lshr i32 %175, 25
  %178 = or i32 %177, %176
  %179 = xor i32 %178, %129
  %180 = add i32 %179, %114
  %181 = shl i32 %180, 9
  %182 = lshr i32 %180, 23
  %183 = or i32 %182, %181
  %184 = xor i32 %183, %144
  %185 = add i32 %184, %179
  %186 = shl i32 %185, 13
  %187 = lshr i32 %185, 19
  %188 = or i32 %187, %186
  %189 = xor i32 %188, %79
  %190 = add i32 %189, %184
  %191 = shl i32 %190, 18
  %192 = lshr i32 %190, 14
  %193 = or i32 %192, %191
  %194 = xor i32 %193, %114
  %195 = add i32 %134, %99
  %196 = shl i32 %195, 7
  %197 = lshr i32 %195, 25
  %198 = or i32 %197, %196
  %199 = xor i32 %198, %149
  %200 = add i32 %199, %134
  %201 = shl i32 %200, 9
  %202 = lshr i32 %200, 23
  %203 = or i32 %202, %201
  %204 = xor i32 %203, %84
  %205 = add i32 %204, %199
  %206 = shl i32 %205, 13
  %207 = lshr i32 %205, 19
  %208 = or i32 %207, %206
  %209 = xor i32 %208, %99
  %210 = add i32 %209, %204
  %211 = shl i32 %210, 18
  %212 = lshr i32 %210, 14
  %213 = or i32 %212, %211
  %214 = xor i32 %213, %134
  %215 = add i32 %154, %119
  %216 = shl i32 %215, 7
  %217 = lshr i32 %215, 25
  %218 = or i32 %217, %216
  %219 = xor i32 %218, %89
  %220 = add i32 %219, %154
  %221 = shl i32 %220, 9
  %222 = lshr i32 %220, 23
  %223 = or i32 %222, %221
  %224 = xor i32 %223, %104
  %225 = add i32 %224, %219
  %226 = shl i32 %225, 13
  %227 = lshr i32 %225, 19
  %228 = or i32 %227, %226
  %229 = xor i32 %228, %119
  %230 = add i32 %229, %224
  %231 = shl i32 %230, 18
  %232 = lshr i32 %230, 14
  %233 = or i32 %232, %231
  %234 = xor i32 %233, %154
  %235 = add nsw i32 %58, -2
  %236 = icmp ugt i32 %58, 2
  br i1 %236, label %57, label %237

237:                                              ; preds = %57
  %238 = bitcast i8* %0 to i32*
  store i32 %174, i32* %238, align 1
  %239 = getelementptr i8, i8* %0, i32 4
  %240 = bitcast i8* %239 to i32*
  store i32 %194, i32* %240, align 1
  %241 = getelementptr i8, i8* %0, i32 8
  %242 = bitcast i8* %241 to i32*
  store i32 %214, i32* %242, align 1
  %243 = getelementptr i8, i8* %0, i32 12
  %244 = bitcast i8* %243 to i32*
  store i32 %234, i32* %244, align 1
  %245 = getelementptr i8, i8* %0, i32 16
  %246 = bitcast i8* %245 to i32*
  store i32 %179, i32* %246, align 1
  %247 = getelementptr i8, i8* %0, i32 20
  %248 = bitcast i8* %247 to i32*
  store i32 %184, i32* %248, align 1
  %249 = getelementptr i8, i8* %0, i32 24
  %250 = bitcast i8* %249 to i32*
  store i32 %204, i32* %250, align 1
  %251 = getelementptr i8, i8* %0, i32 28
  %252 = bitcast i8* %251 to i32*
  store i32 %209, i32* %252, align 1
  ret i32 0
}

attributes #0 = { nofree norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %5 = icmp eq i8* %3, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %7, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %10, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %13, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %16, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = phi i32 [ %8, %6 ], [ 1634760805, %4 ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = phi %0, %1, 1634760805:i32
infer %2

; *****
; For LLVM instruction:
;  %20 = phi i32 [ %11, %6 ], [ 857760878, %4 ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = phi %0, %1, 857760878:i32
infer %2

; *****
; For LLVM instruction:
;  %21 = phi i32 [ %14, %6 ], [ 2036477234, %4 ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = phi %0, %1, 2036477234:i32
infer %2

; *****
; For LLVM instruction:
;  %22 = phi i32 [ %17, %6 ], [ 1797285236, %4 ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = phi %0, %1, 1797285236:i32
infer %2

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %23, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %26, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %29, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %32, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %35, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %38, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %42 = load i32, i32* %41, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %45 = load i32, i32* %44, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %46, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %50 = load i32, i32* %49, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %53 = load i32, i32* %52, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %56 = load i32, i32* %55, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %58 = phi i32 [ 20, %18 ], [ %235, %57 ]
; Looking for a replacement for:
%0:i32 = var (knownBits=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0) (range=[2,21))
infer %0

; *****
; For LLVM instruction:
;  %59 = phi i32 [ %22, %18 ], [ %234, %57 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %60 = phi i32 [ %45, %18 ], [ %229, %57 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %61 = phi i32 [ %42, %18 ], [ %224, %57 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %62 = phi i32 [ %39, %18 ], [ %219, %57 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %63 = phi i32 [ %36, %18 ], [ %199, %57 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %64 = phi i32 [ %21, %18 ], [ %214, %57 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %65 = phi i32 [ %56, %18 ], [ %209, %57 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %66 = phi i32 [ %53, %18 ], [ %204, %57 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %67 = phi i32 [ %50, %18 ], [ %184, %57 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %68 = phi i32 [ %47, %18 ], [ %179, %57 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %69 = phi i32 [ %20, %18 ], [ %194, %57 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %70 = phi i32 [ %33, %18 ], [ %189, %57 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %71 = phi i32 [ %30, %18 ], [ %169, %57 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %72 = phi i32 [ %27, %18 ], [ %164, %57 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %73 = phi i32 [ %24, %18 ], [ %159, %57 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %74 = phi i32 [ %19, %18 ], [ %174, %57 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %75 = add i32 %62, %74
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %76 = shl i32 %75, 7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1 (hasExternalUses)
%3:i32 = shl %2, 7:i32
infer %3

; *****
; For LLVM instruction:
;  %77 = lshr i32 %75, 25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1 (hasExternalUses)
%3:i32 = lshr %2, 25:i32
infer %3

; *****
; For LLVM instruction:
;  %78 = or i32 %77, %76
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = shl %2, 7:i32
%4:i32 = lshr %2, 25:i32
%5:i32 = or %3, %4
infer %5

; *****
; For LLVM instruction:
;  %79 = xor i32 %78, %70
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6
infer %7

; *****
; For LLVM instruction:
;  %80 = add i32 %79, %74
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7
infer %8

; *****
; For LLVM instruction:
;  %81 = shl i32 %80, 9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7 (hasExternalUses)
%9:i32 = shl %8, 9:i32
infer %9

; *****
; For LLVM instruction:
;  %82 = lshr i32 %80, 23
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7 (hasExternalUses)
%9:i32 = lshr %8, 23:i32
infer %9

; *****
; For LLVM instruction:
;  %83 = or i32 %82, %81
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7
%9:i32 = shl %8, 9:i32
%10:i32 = lshr %8, 23:i32
%11:i32 = or %9, %10
infer %11

; *****
; For LLVM instruction:
;  %84 = xor i32 %83, %66
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12
infer %13

; *****
; For LLVM instruction:
;  %85 = add i32 %84, %79
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %13, %8
infer %14

; *****
; For LLVM instruction:
;  %86 = shl i32 %85, 13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %13, %8 (hasExternalUses)
%15:i32 = shl %14, 13:i32
infer %15

; *****
; For LLVM instruction:
;  %87 = lshr i32 %85, 19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %13, %8 (hasExternalUses)
%15:i32 = lshr %14, 19:i32
infer %15

; *****
; For LLVM instruction:
;  %88 = or i32 %87, %86
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
infer %17

; *****
; For LLVM instruction:
;  %89 = xor i32 %88, %62
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %2
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %2, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17
infer %18

; *****
; For LLVM instruction:
;  %90 = add i32 %89, %84
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %2
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %2, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17 (hasExternalUses)
%19:i32 = add %18, %13
infer %19

; *****
; For LLVM instruction:
;  %91 = shl i32 %90, 18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %2
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %2, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17 (hasExternalUses)
%19:i32 = add %18, %13 (hasExternalUses)
%20:i32 = shl %19, 18:i32
infer %20

; *****
; For LLVM instruction:
;  %92 = lshr i32 %90, 14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %2
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %2, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17 (hasExternalUses)
%19:i32 = add %18, %13 (hasExternalUses)
%20:i32 = lshr %19, 14:i32
infer %20

; *****
; For LLVM instruction:
;  %93 = or i32 %92, %91
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %2
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %2, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
infer %22

; *****
; For LLVM instruction:
;  %94 = xor i32 %93, %74
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22
infer %23

; *****
; For LLVM instruction:
;  %95 = add i32 %69, %73
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %96 = shl i32 %95, 7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1 (hasExternalUses)
%3:i32 = shl %2, 7:i32
infer %3

; *****
; For LLVM instruction:
;  %97 = lshr i32 %95, 25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1 (hasExternalUses)
%3:i32 = lshr %2, 25:i32
infer %3

; *****
; For LLVM instruction:
;  %98 = or i32 %97, %96
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = shl %2, 7:i32
%4:i32 = lshr %2, 25:i32
%5:i32 = or %3, %4
infer %5

; *****
; For LLVM instruction:
;  %99 = xor i32 %65, %98
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6
infer %7

; *****
; For LLVM instruction:
;  %100 = add i32 %99, %69
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7
infer %8

; *****
; For LLVM instruction:
;  %101 = shl i32 %100, 9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7 (hasExternalUses)
%9:i32 = shl %8, 9:i32
infer %9

; *****
; For LLVM instruction:
;  %102 = lshr i32 %100, 23
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7 (hasExternalUses)
%9:i32 = lshr %8, 23:i32
infer %9

; *****
; For LLVM instruction:
;  %103 = or i32 %102, %101
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7
%9:i32 = shl %8, 9:i32
%10:i32 = lshr %8, 23:i32
%11:i32 = or %9, %10
infer %11

; *****
; For LLVM instruction:
;  %104 = xor i32 %61, %103
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12
infer %13

; *****
; For LLVM instruction:
;  %105 = add i32 %104, %99
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %13, %8
infer %14

; *****
; For LLVM instruction:
;  %106 = shl i32 %105, 13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %13, %8 (hasExternalUses)
%15:i32 = shl %14, 13:i32
infer %15

; *****
; For LLVM instruction:
;  %107 = lshr i32 %105, 19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %13, %8 (hasExternalUses)
%15:i32 = lshr %14, 19:i32
infer %15

; *****
; For LLVM instruction:
;  %108 = or i32 %107, %106
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
infer %17

; *****
; For LLVM instruction:
;  %109 = xor i32 %108, %73
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %2, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17
infer %18

; *****
; For LLVM instruction:
;  %110 = add i32 %109, %104
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
infer %19

; *****
; For LLVM instruction:
;  %111 = shl i32 %110, 18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18 (hasExternalUses)
%20:i32 = shl %19, 18:i32
infer %20

; *****
; For LLVM instruction:
;  %112 = lshr i32 %110, 14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18 (hasExternalUses)
%20:i32 = lshr %19, 14:i32
infer %20

; *****
; For LLVM instruction:
;  %113 = or i32 %112, %111
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
infer %22

; *****
; For LLVM instruction:
;  %114 = xor i32 %113, %69
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22
infer %23

; *****
; For LLVM instruction:
;  %115 = add i32 %64, %68
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %116 = shl i32 %115, 7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1 (hasExternalUses)
%3:i32 = shl %2, 7:i32
infer %3

; *****
; For LLVM instruction:
;  %117 = lshr i32 %115, 25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1 (hasExternalUses)
%3:i32 = lshr %2, 25:i32
infer %3

; *****
; For LLVM instruction:
;  %118 = or i32 %117, %116
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = shl %2, 7:i32
%4:i32 = lshr %2, 25:i32
%5:i32 = or %3, %4
infer %5

; *****
; For LLVM instruction:
;  %119 = xor i32 %60, %118
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6
infer %7

; *****
; For LLVM instruction:
;  %120 = add i32 %119, %64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7
infer %8

; *****
; For LLVM instruction:
;  %121 = shl i32 %120, 9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7 (hasExternalUses)
%9:i32 = shl %8, 9:i32
infer %9

; *****
; For LLVM instruction:
;  %122 = lshr i32 %120, 23
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7 (hasExternalUses)
%9:i32 = lshr %8, 23:i32
infer %9

; *****
; For LLVM instruction:
;  %123 = or i32 %122, %121
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7
%9:i32 = shl %8, 9:i32
%10:i32 = lshr %8, 23:i32
%11:i32 = or %9, %10
infer %11

; *****
; For LLVM instruction:
;  %124 = xor i32 %123, %72
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12
infer %13

; *****
; For LLVM instruction:
;  %125 = add i32 %124, %119
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %1, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
infer %14

; *****
; For LLVM instruction:
;  %126 = shl i32 %125, 13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %1, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13 (hasExternalUses)
%15:i32 = shl %14, 13:i32
infer %15

; *****
; For LLVM instruction:
;  %127 = lshr i32 %125, 19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %1, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13 (hasExternalUses)
%15:i32 = lshr %14, 19:i32
infer %15

; *****
; For LLVM instruction:
;  %128 = or i32 %127, %126
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %1, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
infer %17

; *****
; For LLVM instruction:
;  %129 = xor i32 %128, %68
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17
infer %18

; *****
; For LLVM instruction:
;  %130 = add i32 %129, %124
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17 (hasExternalUses)
%19:i32 = add %18, %13
infer %19

; *****
; For LLVM instruction:
;  %131 = shl i32 %130, 18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17 (hasExternalUses)
%19:i32 = add %18, %13 (hasExternalUses)
%20:i32 = shl %19, 18:i32
infer %20

; *****
; For LLVM instruction:
;  %132 = lshr i32 %130, 14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17 (hasExternalUses)
%19:i32 = add %18, %13 (hasExternalUses)
%20:i32 = lshr %19, 14:i32
infer %20

; *****
; For LLVM instruction:
;  %133 = or i32 %132, %131
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
infer %22

; *****
; For LLVM instruction:
;  %134 = xor i32 %133, %64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %1
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22
infer %23

; *****
; For LLVM instruction:
;  %135 = add i32 %59, %63
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %136 = shl i32 %135, 7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1 (hasExternalUses)
%3:i32 = shl %2, 7:i32
infer %3

; *****
; For LLVM instruction:
;  %137 = lshr i32 %135, 25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1 (hasExternalUses)
%3:i32 = lshr %2, 25:i32
infer %3

; *****
; For LLVM instruction:
;  %138 = or i32 %137, %136
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = shl %2, 7:i32
%4:i32 = lshr %2, 25:i32
%5:i32 = or %3, %4
infer %5

; *****
; For LLVM instruction:
;  %139 = xor i32 %138, %71
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6
infer %7

; *****
; For LLVM instruction:
;  %140 = add i32 %139, %59
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7
infer %8

; *****
; For LLVM instruction:
;  %141 = shl i32 %140, 9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7 (hasExternalUses)
%9:i32 = shl %8, 9:i32
infer %9

; *****
; For LLVM instruction:
;  %142 = lshr i32 %140, 23
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7 (hasExternalUses)
%9:i32 = lshr %8, 23:i32
infer %9

; *****
; For LLVM instruction:
;  %143 = or i32 %142, %141
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7
%9:i32 = shl %8, 9:i32
%10:i32 = lshr %8, 23:i32
%11:i32 = or %9, %10
infer %11

; *****
; For LLVM instruction:
;  %144 = xor i32 %143, %67
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12
infer %13

; *****
; For LLVM instruction:
;  %145 = add i32 %144, %139
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %13, %8
infer %14

; *****
; For LLVM instruction:
;  %146 = shl i32 %145, 13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %13, %8 (hasExternalUses)
%15:i32 = shl %14, 13:i32
infer %15

; *****
; For LLVM instruction:
;  %147 = lshr i32 %145, 19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %13, %8 (hasExternalUses)
%15:i32 = lshr %14, 19:i32
infer %15

; *****
; For LLVM instruction:
;  %148 = or i32 %147, %146
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
infer %17

; *****
; For LLVM instruction:
;  %149 = xor i32 %148, %63
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %2, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17
infer %18

; *****
; For LLVM instruction:
;  %150 = add i32 %149, %144
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %2, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17 (hasExternalUses)
%19:i32 = add %18, %13
infer %19

; *****
; For LLVM instruction:
;  %151 = shl i32 %150, 18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %2, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17 (hasExternalUses)
%19:i32 = add %18, %13 (hasExternalUses)
%20:i32 = shl %19, 18:i32
infer %20

; *****
; For LLVM instruction:
;  %152 = lshr i32 %150, 14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %2, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17 (hasExternalUses)
%19:i32 = add %18, %13 (hasExternalUses)
%20:i32 = lshr %19, 14:i32
infer %20

; *****
; For LLVM instruction:
;  %153 = or i32 %152, %151
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %2, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
infer %22

; *****
; For LLVM instruction:
;  %154 = xor i32 %153, %59
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22
infer %23

; *****
; For LLVM instruction:
;  %155 = add i32 %94, %139
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = var
%12:i32 = add %9, %8
%13:i32 = shl %12, 7:i32
%14:i32 = lshr %12, 25:i32
%15:i32 = or %13, %14
%16:i32 = xor %11, %15 (hasExternalUses)
%17:i32 = add %8, %16
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %10, %20 (hasExternalUses)
%22:i32 = add %21, %16
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
infer %32

; *****
; For LLVM instruction:
;  %156 = shl i32 %155, 7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = var
%12:i32 = add %9, %8
%13:i32 = shl %12, 7:i32
%14:i32 = lshr %12, 25:i32
%15:i32 = or %13, %14
%16:i32 = xor %11, %15 (hasExternalUses)
%17:i32 = add %8, %16
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %10, %20 (hasExternalUses)
%22:i32 = add %21, %16
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31 (hasExternalUses)
%33:i32 = shl %32, 7:i32
infer %33

; *****
; For LLVM instruction:
;  %157 = lshr i32 %155, 25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = var
%12:i32 = add %9, %8
%13:i32 = shl %12, 7:i32
%14:i32 = lshr %12, 25:i32
%15:i32 = or %13, %14
%16:i32 = xor %11, %15 (hasExternalUses)
%17:i32 = add %8, %16
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %10, %20 (hasExternalUses)
%22:i32 = add %21, %16
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31 (hasExternalUses)
%33:i32 = lshr %32, 25:i32
infer %33

; *****
; For LLVM instruction:
;  %158 = or i32 %157, %156
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = var
%12:i32 = add %9, %8
%13:i32 = shl %12, 7:i32
%14:i32 = lshr %12, 25:i32
%15:i32 = or %13, %14
%16:i32 = xor %11, %15 (hasExternalUses)
%17:i32 = add %8, %16
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %10, %20 (hasExternalUses)
%22:i32 = add %21, %16
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
infer %35

; *****
; For LLVM instruction:
;  %159 = xor i32 %158, %109
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = var
%12:i32 = add %9, %8
%13:i32 = shl %12, 7:i32
%14:i32 = lshr %12, 25:i32
%15:i32 = or %13, %14
%16:i32 = xor %11, %15 (hasExternalUses)
%17:i32 = add %8, %16
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %10, %20 (hasExternalUses)
%22:i32 = add %21, %16
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54
infer %55

; *****
; For LLVM instruction:
;  %160 = add i32 %159, %94
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
infer %56

; *****
; For LLVM instruction:
;  %161 = shl i32 %160, 9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55 (hasExternalUses)
%57:i32 = shl %56, 9:i32
infer %57

; *****
; For LLVM instruction:
;  %162 = lshr i32 %160, 23
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55 (hasExternalUses)
%57:i32 = lshr %56, 23:i32
infer %57

; *****
; For LLVM instruction:
;  %163 = or i32 %162, %161
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
infer %59

; *****
; For LLVM instruction:
;  %164 = xor i32 %163, %124
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73
infer %74

; *****
; For LLVM instruction:
;  %165 = add i32 %164, %159
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = var
%12:i32 = add %9, %8
%13:i32 = shl %12, 7:i32
%14:i32 = lshr %12, 25:i32
%15:i32 = or %13, %14
%16:i32 = xor %11, %15 (hasExternalUses)
%17:i32 = add %8, %16
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %10, %20 (hasExternalUses)
%22:i32 = add %21, %16
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %31, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
infer %75

; *****
; For LLVM instruction:
;  %166 = shl i32 %165, 13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = var
%12:i32 = add %9, %8
%13:i32 = shl %12, 7:i32
%14:i32 = lshr %12, 25:i32
%15:i32 = or %13, %14
%16:i32 = xor %11, %15 (hasExternalUses)
%17:i32 = add %8, %16
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %10, %20 (hasExternalUses)
%22:i32 = add %21, %16
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %31, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74 (hasExternalUses)
%76:i32 = shl %75, 13:i32
infer %76

; *****
; For LLVM instruction:
;  %167 = lshr i32 %165, 19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = var
%12:i32 = add %9, %8
%13:i32 = shl %12, 7:i32
%14:i32 = lshr %12, 25:i32
%15:i32 = or %13, %14
%16:i32 = xor %11, %15 (hasExternalUses)
%17:i32 = add %8, %16
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %10, %20 (hasExternalUses)
%22:i32 = add %21, %16
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %31, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74 (hasExternalUses)
%76:i32 = lshr %75, 19:i32
infer %76

; *****
; For LLVM instruction:
;  %168 = or i32 %167, %166
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = var
%12:i32 = add %9, %8
%13:i32 = shl %12, 7:i32
%14:i32 = lshr %12, 25:i32
%15:i32 = or %13, %14
%16:i32 = xor %11, %15 (hasExternalUses)
%17:i32 = add %8, %16
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %10, %20 (hasExternalUses)
%22:i32 = add %21, %16
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %31, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
infer %78

; *****
; For LLVM instruction:
;  %169 = xor i32 %168, %139
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = var
%12:i32 = add %9, %8
%13:i32 = shl %12, 7:i32
%14:i32 = lshr %12, 25:i32
%15:i32 = or %13, %14
%16:i32 = xor %11, %15 (hasExternalUses)
%17:i32 = add %8, %16
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %10, %20 (hasExternalUses)
%22:i32 = add %21, %16
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %31, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %7
infer %79

; *****
; For LLVM instruction:
;  %170 = add i32 %169, %164
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
infer %80

; *****
; For LLVM instruction:
;  %171 = shl i32 %170, 18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79 (hasExternalUses)
%81:i32 = shl %80, 18:i32
infer %81

; *****
; For LLVM instruction:
;  %172 = lshr i32 %170, 14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79 (hasExternalUses)
%81:i32 = lshr %80, 14:i32
infer %81

; *****
; For LLVM instruction:
;  %173 = or i32 %172, %171
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
%81:i32 = shl %80, 18:i32
%82:i32 = lshr %80, 14:i32
%83:i32 = or %81, %82
infer %83

; *****
; For LLVM instruction:
;  %174 = xor i32 %173, %94
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
%81:i32 = shl %80, 18:i32
%82:i32 = lshr %80, 14:i32
%83:i32 = or %81, %82
%84:i32 = xor %83, %23
infer %84

; *****
; For LLVM instruction:
;  %175 = add i32 %114, %79
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
infer %32

; *****
; For LLVM instruction:
;  %176 = shl i32 %175, 7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31 (hasExternalUses)
%33:i32 = shl %32, 7:i32
infer %33

; *****
; For LLVM instruction:
;  %177 = lshr i32 %175, 25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31 (hasExternalUses)
%33:i32 = lshr %32, 25:i32
infer %33

; *****
; For LLVM instruction:
;  %178 = or i32 %177, %176
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
infer %35

; *****
; For LLVM instruction:
;  %179 = xor i32 %178, %129
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54
infer %55

; *****
; For LLVM instruction:
;  %180 = add i32 %179, %114
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
infer %56

; *****
; For LLVM instruction:
;  %181 = shl i32 %180, 9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55 (hasExternalUses)
%57:i32 = shl %56, 9:i32
infer %57

; *****
; For LLVM instruction:
;  %182 = lshr i32 %180, 23
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55 (hasExternalUses)
%57:i32 = lshr %56, 23:i32
infer %57

; *****
; For LLVM instruction:
;  %183 = or i32 %182, %181
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
infer %59

; *****
; For LLVM instruction:
;  %184 = xor i32 %183, %144
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73
infer %74

; *****
; For LLVM instruction:
;  %185 = add i32 %184, %179
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
infer %75

; *****
; For LLVM instruction:
;  %186 = shl i32 %185, 13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74 (hasExternalUses)
%76:i32 = shl %75, 13:i32
infer %76

; *****
; For LLVM instruction:
;  %187 = lshr i32 %185, 19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74 (hasExternalUses)
%76:i32 = lshr %75, 19:i32
infer %76

; *****
; For LLVM instruction:
;  %188 = or i32 %187, %186
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
infer %78

; *****
; For LLVM instruction:
;  %189 = xor i32 %188, %79
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31
infer %79

; *****
; For LLVM instruction:
;  %190 = add i32 %189, %184
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
infer %80

; *****
; For LLVM instruction:
;  %191 = shl i32 %190, 18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79 (hasExternalUses)
%81:i32 = shl %80, 18:i32
infer %81

; *****
; For LLVM instruction:
;  %192 = lshr i32 %190, 14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79 (hasExternalUses)
%81:i32 = lshr %80, 14:i32
infer %81

; *****
; For LLVM instruction:
;  %193 = or i32 %192, %191
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
%81:i32 = shl %80, 18:i32
%82:i32 = lshr %80, 14:i32
%83:i32 = or %81, %82
infer %83

; *****
; For LLVM instruction:
;  %194 = xor i32 %193, %114
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
%81:i32 = shl %80, 18:i32
%82:i32 = lshr %80, 14:i32
%83:i32 = or %81, %82
%84:i32 = xor %83, %23
infer %84

; *****
; For LLVM instruction:
;  %195 = add i32 %134, %99
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %1
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
infer %32

; *****
; For LLVM instruction:
;  %196 = shl i32 %195, 7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %1
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31 (hasExternalUses)
%33:i32 = shl %32, 7:i32
infer %33

; *****
; For LLVM instruction:
;  %197 = lshr i32 %195, 25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %1
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31 (hasExternalUses)
%33:i32 = lshr %32, 25:i32
infer %33

; *****
; For LLVM instruction:
;  %198 = or i32 %197, %196
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %1
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
infer %35

; *****
; For LLVM instruction:
;  %199 = xor i32 %198, %149
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %1
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54
infer %55

; *****
; For LLVM instruction:
;  %200 = add i32 %199, %134
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %1
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
infer %56

; *****
; For LLVM instruction:
;  %201 = shl i32 %200, 9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %1
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55 (hasExternalUses)
%57:i32 = shl %56, 9:i32
infer %57

; *****
; For LLVM instruction:
;  %202 = lshr i32 %200, 23
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %1
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55 (hasExternalUses)
%57:i32 = lshr %56, 23:i32
infer %57

; *****
; For LLVM instruction:
;  %203 = or i32 %202, %201
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %1
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
infer %59

; *****
; For LLVM instruction:
;  %204 = xor i32 %203, %84
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %1
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73
infer %74

; *****
; For LLVM instruction:
;  %205 = add i32 %204, %199
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %1
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
infer %75

; *****
; For LLVM instruction:
;  %206 = shl i32 %205, 13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %1
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74 (hasExternalUses)
%76:i32 = shl %75, 13:i32
infer %76

; *****
; For LLVM instruction:
;  %207 = lshr i32 %205, 19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %1
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74 (hasExternalUses)
%76:i32 = lshr %75, 19:i32
infer %76

; *****
; For LLVM instruction:
;  %208 = or i32 %207, %206
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %1
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
infer %78

; *****
; For LLVM instruction:
;  %209 = xor i32 %208, %99
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %1
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31
infer %79

; *****
; For LLVM instruction:
;  %210 = add i32 %209, %204
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %1
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
infer %80

; *****
; For LLVM instruction:
;  %211 = shl i32 %210, 18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %1
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79 (hasExternalUses)
%81:i32 = shl %80, 18:i32
infer %81

; *****
; For LLVM instruction:
;  %212 = lshr i32 %210, 14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %1
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79 (hasExternalUses)
%81:i32 = lshr %80, 14:i32
infer %81

; *****
; For LLVM instruction:
;  %213 = or i32 %212, %211
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %1
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
%81:i32 = shl %80, 18:i32
%82:i32 = lshr %80, 14:i32
%83:i32 = or %81, %82
infer %83

; *****
; For LLVM instruction:
;  %214 = xor i32 %213, %134
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %1
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
%81:i32 = shl %80, 18:i32
%82:i32 = lshr %80, 14:i32
%83:i32 = or %81, %82
%84:i32 = xor %83, %23
infer %84

; *****
; For LLVM instruction:
;  %215 = add i32 %154, %119
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
infer %32

; *****
; For LLVM instruction:
;  %216 = shl i32 %215, 7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31 (hasExternalUses)
%33:i32 = shl %32, 7:i32
infer %33

; *****
; For LLVM instruction:
;  %217 = lshr i32 %215, 25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31 (hasExternalUses)
%33:i32 = lshr %32, 25:i32
infer %33

; *****
; For LLVM instruction:
;  %218 = or i32 %217, %216
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
infer %35

; *****
; For LLVM instruction:
;  %219 = xor i32 %218, %89
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54
infer %55

; *****
; For LLVM instruction:
;  %220 = add i32 %219, %154
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
infer %56

; *****
; For LLVM instruction:
;  %221 = shl i32 %220, 9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55 (hasExternalUses)
%57:i32 = shl %56, 9:i32
infer %57

; *****
; For LLVM instruction:
;  %222 = lshr i32 %220, 23
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55 (hasExternalUses)
%57:i32 = lshr %56, 23:i32
infer %57

; *****
; For LLVM instruction:
;  %223 = or i32 %222, %221
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
infer %59

; *****
; For LLVM instruction:
;  %224 = xor i32 %223, %104
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73
infer %74

; *****
; For LLVM instruction:
;  %225 = add i32 %224, %219
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
infer %75

; *****
; For LLVM instruction:
;  %226 = shl i32 %225, 13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74 (hasExternalUses)
%76:i32 = shl %75, 13:i32
infer %76

; *****
; For LLVM instruction:
;  %227 = lshr i32 %225, 19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74 (hasExternalUses)
%76:i32 = lshr %75, 19:i32
infer %76

; *****
; For LLVM instruction:
;  %228 = or i32 %227, %226
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
infer %78

; *****
; For LLVM instruction:
;  %229 = xor i32 %228, %119
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31
infer %79

; *****
; For LLVM instruction:
;  %230 = add i32 %229, %224
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
infer %80

; *****
; For LLVM instruction:
;  %231 = shl i32 %230, 18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79 (hasExternalUses)
%81:i32 = shl %80, 18:i32
infer %81

; *****
; For LLVM instruction:
;  %232 = lshr i32 %230, 14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79 (hasExternalUses)
%81:i32 = lshr %80, 14:i32
infer %81

; *****
; For LLVM instruction:
;  %233 = or i32 %232, %231
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
%81:i32 = shl %80, 18:i32
%82:i32 = lshr %80, 14:i32
%83:i32 = or %81, %82
infer %83

; *****
; For LLVM instruction:
;  %234 = xor i32 %233, %154
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
%81:i32 = shl %80, 18:i32
%82:i32 = lshr %80, 14:i32
%83:i32 = or %81, %82
%84:i32 = xor %83, %23
infer %84

; *****
; For LLVM instruction:
;  %235 = add nsw i32 %58, -2
; Looking for a replacement for:
%0:i32 = var (knownBits=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0) (range=[2,21))
%1:i32 = addnsw 4294967294:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %236 = icmp ugt i32 %58, 2
; Looking for a replacement for:
%0:i32 = var (knownBits=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0) (range=[2,21))
%1:i1 = ult 2:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = phi %0, %1, 1634760805:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1634760805
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1634760806
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = phi %0, %1, 857760878:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 857760878
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -857760879
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = phi %0, %1, 2036477234:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 2036477234
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2036477235
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = phi %0, %1, 1797285236:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1797285236
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1797285237
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var (knownBits=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0) (range=[2,21))
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 2
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 8
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1 (hasExternalUses)
%3:i32 = shl %2, 7:i32
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -128
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1 (hasExternalUses)
%3:i32 = lshr %2, 25:i32
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 127
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = shl %2, 7:i32
%4:i32 = lshr %2, 25:i32
%5:i32 = or %3, %4
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1024
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1 (hasExternalUses)
%3:i32 = shl %2, 7:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1 (hasExternalUses)
%3:i32 = lshr %2, 25:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 6 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6
infer %7


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1 (hasExternalUses)
%3:i32 = shl %2, 7:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1 (hasExternalUses)
%3:i32 = lshr %2, 25:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = shl %2, 7:i32
%4:i32 = lshr %2, 25:i32
%5:i32 = or %3, %4

Cost = 4
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7
infer %8


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483647
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7 (hasExternalUses)
%9:i32 = shl %8, 9:i32
infer %9


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483136
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7 (hasExternalUses)
%9:i32 = lshr %8, 23:i32
infer %9


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 256
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7
%9:i32 = shl %8, 9:i32
%10:i32 = lshr %8, 23:i32
%11:i32 = or %9, %10
infer %11


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -506368
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12
infer %13


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %13, %8
infer %14


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2113830912
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %13, %8 (hasExternalUses)
%15:i32 = shl %14, 13:i32
infer %15


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %13, %8 (hasExternalUses)
%15:i32 = lshr %14, 19:i32
infer %15


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4096
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
infer %17


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -60325888
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %2
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %2, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17
infer %18


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %2
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %2, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17 (hasExternalUses)
%19:i32 = add %18, %13
infer %19


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1867536060
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %2
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %2, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17 (hasExternalUses)
%19:i32 = add %18, %13 (hasExternalUses)
%20:i32 = shl %19, 18:i32
infer %20


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2080112640
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %2
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %2, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17 (hasExternalUses)
%19:i32 = add %18, %13 (hasExternalUses)
%20:i32 = lshr %19, 14:i32
infer %20


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 131072
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %2
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %2, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
infer %22


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -524288
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22
infer %23


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7
infer %8


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483647
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7 (hasExternalUses)
%9:i32 = shl %8, 9:i32
infer %9


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7 (hasExternalUses)
%9:i32 = lshr %8, 23:i32
infer %9


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 256
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7
%9:i32 = shl %8, 9:i32
%10:i32 = lshr %8, 23:i32
%11:i32 = or %9, %10
infer %11


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -268898304
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12
infer %13


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %13, %8
infer %14


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 6029312
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %13, %8 (hasExternalUses)
%15:i32 = shl %14, 13:i32
infer %15


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %13, %8 (hasExternalUses)
%15:i32 = lshr %14, 19:i32
infer %15


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4096
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
infer %17


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -951517184
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %2, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17
infer %18


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
infer %19


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18 (hasExternalUses)
%20:i32 = shl %19, 18:i32
infer %20


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18 (hasExternalUses)
%20:i32 = lshr %19, 14:i32
infer %20


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 131072
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
infer %22


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -4718592
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22
infer %23


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %1, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
infer %14


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483647
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %1, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13 (hasExternalUses)
%15:i32 = shl %14, 13:i32
infer %15


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147475456
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %1, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13 (hasExternalUses)
%15:i32 = lshr %14, 19:i32
infer %15


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4096
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %1, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
infer %17


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -8144
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17
infer %18


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 16384
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17 (hasExternalUses)
%19:i32 = add %18, %13
infer %19


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1660681264
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17 (hasExternalUses)
%19:i32 = add %18, %13 (hasExternalUses)
%20:i32 = shl %19, 18:i32
infer %20


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 403963904
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17 (hasExternalUses)
%19:i32 = add %18, %13 (hasExternalUses)
%20:i32 = lshr %19, 14:i32
infer %20


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 131072
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
infer %22


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -262144
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %1
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22
infer %23


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %2, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17 (hasExternalUses)
%19:i32 = add %18, %13
infer %19


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1007159756
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %2, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17 (hasExternalUses)
%19:i32 = add %18, %13 (hasExternalUses)
%20:i32 = shl %19, 18:i32
infer %20


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2139095040
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %2, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17 (hasExternalUses)
%19:i32 = add %18, %13 (hasExternalUses)
%20:i32 = lshr %19, 14:i32
infer %20


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 131072
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %2, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
infer %22


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 83361792
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22
infer %23


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = var
%12:i32 = add %9, %8
%13:i32 = shl %12, 7:i32
%14:i32 = lshr %12, 25:i32
%15:i32 = or %13, %14
%16:i32 = xor %11, %15 (hasExternalUses)
%17:i32 = add %8, %16
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %10, %20 (hasExternalUses)
%22:i32 = add %21, %16
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
infer %32


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = var
%12:i32 = add %9, %8
%13:i32 = shl %12, 7:i32
%14:i32 = lshr %12, 25:i32
%15:i32 = or %13, %14
%16:i32 = xor %11, %15 (hasExternalUses)
%17:i32 = add %8, %16
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %10, %20 (hasExternalUses)
%22:i32 = add %21, %16
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31 (hasExternalUses)
%33:i32 = shl %32, 7:i32
infer %33


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = var
%12:i32 = add %9, %8
%13:i32 = shl %12, 7:i32
%14:i32 = lshr %12, 25:i32
%15:i32 = or %13, %14
%16:i32 = xor %11, %15 (hasExternalUses)
%17:i32 = add %8, %16
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %10, %20 (hasExternalUses)
%22:i32 = add %21, %16
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31 (hasExternalUses)
%33:i32 = lshr %32, 25:i32
infer %33


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 64
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = var
%12:i32 = add %9, %8
%13:i32 = shl %12, 7:i32
%14:i32 = lshr %12, 25:i32
%15:i32 = or %13, %14
%16:i32 = xor %11, %15 (hasExternalUses)
%17:i32 = add %8, %16
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %10, %20 (hasExternalUses)
%22:i32 = add %21, %16
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
infer %35


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -8448
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = var
%12:i32 = add %9, %8
%13:i32 = shl %12, 7:i32
%14:i32 = lshr %12, 25:i32
%15:i32 = or %13, %14
%16:i32 = xor %11, %15 (hasExternalUses)
%17:i32 = add %8, %16
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %10, %20 (hasExternalUses)
%22:i32 = add %21, %16
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54
infer %55


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
infer %56


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55 (hasExternalUses)
%57:i32 = shl %56, 9:i32
infer %57


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1610613248
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55 (hasExternalUses)
%57:i32 = lshr %56, 23:i32
infer %57


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 256
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
infer %59


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 70691905
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73
infer %74


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483136
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = var
%12:i32 = add %9, %8
%13:i32 = shl %12, 7:i32
%14:i32 = lshr %12, 25:i32
%15:i32 = or %13, %14
%16:i32 = xor %11, %15 (hasExternalUses)
%17:i32 = add %8, %16
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %10, %20 (hasExternalUses)
%22:i32 = add %21, %16
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %31, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
infer %75


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = var
%12:i32 = add %9, %8
%13:i32 = shl %12, 7:i32
%14:i32 = lshr %12, 25:i32
%15:i32 = or %13, %14
%16:i32 = xor %11, %15 (hasExternalUses)
%17:i32 = add %8, %16
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %10, %20 (hasExternalUses)
%22:i32 = add %21, %16
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %31, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74 (hasExternalUses)
%76:i32 = shl %75, 13:i32
infer %76


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -8192
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = var
%12:i32 = add %9, %8
%13:i32 = shl %12, 7:i32
%14:i32 = lshr %12, 25:i32
%15:i32 = or %13, %14
%16:i32 = xor %11, %15 (hasExternalUses)
%17:i32 = add %8, %16
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %10, %20 (hasExternalUses)
%22:i32 = add %21, %16
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %31, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74 (hasExternalUses)
%76:i32 = lshr %75, 19:i32
infer %76


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4096
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = var
%12:i32 = add %9, %8
%13:i32 = shl %12, 7:i32
%14:i32 = lshr %12, 25:i32
%15:i32 = or %13, %14
%16:i32 = xor %11, %15 (hasExternalUses)
%17:i32 = add %8, %16
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %10, %20 (hasExternalUses)
%22:i32 = add %21, %16
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %31, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
infer %78


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1996275712
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = var
%12:i32 = add %9, %8
%13:i32 = shl %12, 7:i32
%14:i32 = lshr %12, 25:i32
%15:i32 = or %13, %14
%16:i32 = xor %11, %15 (hasExternalUses)
%17:i32 = add %8, %16
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %10, %20 (hasExternalUses)
%22:i32 = add %21, %16
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %31, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %7
infer %79


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 8463105
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1 (hasExternalUses)
%3:i32 = shl %2, 7:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = shl %2, 7:i32
%4:i32 = lshr %2, 25:i32
%5:i32 = or %3, %4

Cost = 4
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
infer %80


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147450440
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79 (hasExternalUses)
%81:i32 = shl %80, 18:i32
infer %81


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -156499968
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79 (hasExternalUses)
%81:i32 = lshr %80, 14:i32
infer %81


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 203900
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
%81:i32 = shl %80, 18:i32
%82:i32 = lshr %80, 14:i32
%83:i32 = or %81, %82
infer %83


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2141947480
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
%81:i32 = shl %80, 18:i32
%82:i32 = lshr %80, 14:i32
%83:i32 = or %81, %82
%84:i32 = xor %83, %23
infer %84


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2090676040
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
infer %32


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31 (hasExternalUses)
%33:i32 = shl %32, 7:i32
infer %33


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 8388608
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31 (hasExternalUses)
%33:i32 = lshr %32, 25:i32
infer %33


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 64
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
infer %35


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -33554688
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54
infer %55


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
infer %56


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55 (hasExternalUses)
%57:i32 = shl %56, 9:i32
infer %57


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55 (hasExternalUses)
%57:i32 = lshr %56, 23:i32
infer %57


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 488
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
infer %59


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -741507377
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73
infer %74


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
infer %75


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74 (hasExternalUses)
%76:i32 = shl %75, 13:i32
infer %76


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1610604544
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74 (hasExternalUses)
%76:i32 = lshr %75, 19:i32
infer %76


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4096
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
infer %78


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -16384
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31
infer %79


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2139035160
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1 (hasExternalUses)
%3:i32 = shl %2, 7:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = shl %2, 7:i32
%4:i32 = lshr %2, 25:i32
%5:i32 = or %3, %4

Cost = 4
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
infer %80


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483624
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79 (hasExternalUses)
%81:i32 = shl %80, 18:i32
infer %81


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 893124608
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79 (hasExternalUses)
%81:i32 = lshr %80, 14:i32
infer %81


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 131072
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
%81:i32 = shl %80, 18:i32
%82:i32 = lshr %80, 14:i32
%83:i32 = or %81, %82
infer %83


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -18350080
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
%81:i32 = shl %80, 18:i32
%82:i32 = lshr %80, 14:i32
%83:i32 = or %81, %82
%84:i32 = xor %83, %23
infer %84


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1724659800
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %1
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
infer %32


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %1
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31 (hasExternalUses)
%33:i32 = shl %32, 7:i32
infer %33


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %1
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31 (hasExternalUses)
%33:i32 = lshr %32, 25:i32
infer %33


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 64
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %1
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
infer %35


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -128
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %1
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54
infer %55


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483520
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %1
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
infer %56


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %1
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55 (hasExternalUses)
%57:i32 = shl %56, 9:i32
infer %57


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %1
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55 (hasExternalUses)
%57:i32 = lshr %56, 23:i32
infer %57


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 504
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %1
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
infer %59


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -66048
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %1
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73
infer %74


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147450880
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %1
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
infer %75


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %1
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74 (hasExternalUses)
%76:i32 = shl %75, 13:i32
infer %76


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1753219072
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %1
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74 (hasExternalUses)
%76:i32 = lshr %75, 19:i32
infer %76


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4096
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %1
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
infer %78


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -16384
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %1
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31
infer %79


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 109171236
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1 (hasExternalUses)
%3:i32 = shl %2, 7:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = shl %2, 7:i32
%4:i32 = lshr %2, 25:i32
%5:i32 = or %3, %4

Cost = 4
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %1
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
infer %80


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1363096285
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %1
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79 (hasExternalUses)
%81:i32 = shl %80, 18:i32
infer %81


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -33816576
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %1
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79 (hasExternalUses)
%81:i32 = lshr %80, 14:i32
infer %81


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 170265
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %1
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
%81:i32 = shl %80, 18:i32
%82:i32 = lshr %80, 14:i32
%83:i32 = or %81, %82
infer %83


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1278214144
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %1
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %36
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
%81:i32 = shl %80, 18:i32
%82:i32 = lshr %80, 14:i32
%83:i32 = or %81, %82
%84:i32 = xor %83, %23
infer %84


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 361109729
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
infer %32


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31 (hasExternalUses)
%33:i32 = shl %32, 7:i32
infer %33


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31 (hasExternalUses)
%33:i32 = lshr %32, 25:i32
infer %33


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 64
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
infer %35


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -128
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54
infer %55


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
infer %56


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55 (hasExternalUses)
%57:i32 = shl %56, 9:i32
infer %57


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55 (hasExternalUses)
%57:i32 = lshr %56, 23:i32
infer %57


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 504
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
infer %59


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1024
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73
infer %74


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483647
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
infer %75


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74 (hasExternalUses)
%76:i32 = shl %75, 13:i32
infer %76


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74 (hasExternalUses)
%76:i32 = lshr %75, 19:i32
infer %76


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4096
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
infer %78


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -16384
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31
infer %79


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 33722368
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1 (hasExternalUses)
%3:i32 = shl %2, 7:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = shl %2, 7:i32
%4:i32 = lshr %2, 25:i32
%5:i32 = or %3, %4

Cost = 4
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
infer %80


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79 (hasExternalUses)
%81:i32 = shl %80, 18:i32
infer %81


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1875902464
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79 (hasExternalUses)
%81:i32 = lshr %80, 14:i32
infer %81


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 131071
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
%81:i32 = shl %80, 18:i32
%82:i32 = lshr %80, 14:i32
%83:i32 = or %81, %82
infer %83


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -867434496
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %2, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
%81:i32 = shl %80, 18:i32
%82:i32 = lshr %80, 14:i32
%83:i32 = or %81, %82
%84:i32 = xor %83, %23
infer %84


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1489639689
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var (knownBits=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0) (range=[2,21))
%1:i32 = addnsw 4294967294:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 6
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var (knownBits=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0) (range=[2,21))

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var (knownBits=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0) (range=[2,21))
%1:i1 = ult 2:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for crypto_core_hsalsa20()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
