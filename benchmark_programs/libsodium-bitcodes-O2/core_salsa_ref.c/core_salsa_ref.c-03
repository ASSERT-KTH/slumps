; entering Souper's runOnFunction() for crypto_core_salsa20_outputbytes()

; ModuleID = './core_salsa_ref.c.bc'
source_filename = "crypto_core/salsa/ref/core_salsa_ref.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

; Function Attrs: nofree norecurse nounwind
define i32 @crypto_core_salsa20(i8* nocapture nonnull %0, i8* nocapture nonnull readonly %1, i8* nocapture nonnull readonly %2, i8* readonly %3) local_unnamed_addr #0 {
  tail call fastcc void @crypto_core_salsa(i8* nonnull %0, i8* nonnull %1, i8* nonnull %2, i8* %3, i32 20)
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind
define internal fastcc void @crypto_core_salsa(i8* nocapture %0, i8* nocapture readonly %1, i8* nocapture readonly %2, i8* readonly %3, i32 %4) unnamed_addr #0 {
  %6 = icmp eq i8* %3, null
  br i1 %6, label %19, label %7

7:                                                ; preds = %5
  %8 = bitcast i8* %3 to i32*
  %9 = load i32, i32* %8, align 1
  %10 = getelementptr i8, i8* %3, i32 4
  %11 = bitcast i8* %10 to i32*
  %12 = load i32, i32* %11, align 1
  %13 = getelementptr i8, i8* %3, i32 8
  %14 = bitcast i8* %13 to i32*
  %15 = load i32, i32* %14, align 1
  %16 = getelementptr i8, i8* %3, i32 12
  %17 = bitcast i8* %16 to i32*
  %18 = load i32, i32* %17, align 1
  br label %19

19:                                               ; preds = %5, %7
  %20 = phi i32 [ %18, %7 ], [ 1797285236, %5 ]
  %21 = phi i32 [ %9, %7 ], [ 1634760805, %5 ]
  %22 = phi i32 [ %15, %7 ], [ 2036477234, %5 ]
  %23 = phi i32 [ %12, %7 ], [ 857760878, %5 ]
  %24 = bitcast i8* %2 to i32*
  %25 = load i32, i32* %24, align 1
  %26 = getelementptr i8, i8* %2, i32 4
  %27 = bitcast i8* %26 to i32*
  %28 = load i32, i32* %27, align 1
  %29 = getelementptr i8, i8* %2, i32 8
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 1
  %32 = getelementptr i8, i8* %2, i32 12
  %33 = bitcast i8* %32 to i32*
  %34 = load i32, i32* %33, align 1
  %35 = getelementptr i8, i8* %2, i32 16
  %36 = bitcast i8* %35 to i32*
  %37 = load i32, i32* %36, align 1
  %38 = getelementptr i8, i8* %2, i32 20
  %39 = bitcast i8* %38 to i32*
  %40 = load i32, i32* %39, align 1
  %41 = getelementptr i8, i8* %2, i32 24
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %42, align 1
  %44 = getelementptr i8, i8* %2, i32 28
  %45 = bitcast i8* %44 to i32*
  %46 = load i32, i32* %45, align 1
  %47 = bitcast i8* %1 to i32*
  %48 = load i32, i32* %47, align 1
  %49 = getelementptr i8, i8* %1, i32 4
  %50 = bitcast i8* %49 to i32*
  %51 = load i32, i32* %50, align 1
  %52 = getelementptr i8, i8* %1, i32 8
  %53 = bitcast i8* %52 to i32*
  %54 = load i32, i32* %53, align 1
  %55 = getelementptr i8, i8* %1, i32 12
  %56 = bitcast i8* %55 to i32*
  %57 = load i32, i32* %56, align 1
  %58 = icmp sgt i32 %4, 0
  br i1 %58, label %59, label %239

59:                                               ; preds = %19, %59
  %60 = phi i32 [ %237, %59 ], [ 0, %19 ]
  %61 = phi i32 [ %176, %59 ], [ %21, %19 ]
  %62 = phi i32 [ %161, %59 ], [ %25, %19 ]
  %63 = phi i32 [ %166, %59 ], [ %28, %19 ]
  %64 = phi i32 [ %171, %59 ], [ %31, %19 ]
  %65 = phi i32 [ %191, %59 ], [ %34, %19 ]
  %66 = phi i32 [ %196, %59 ], [ %23, %19 ]
  %67 = phi i32 [ %181, %59 ], [ %48, %19 ]
  %68 = phi i32 [ %186, %59 ], [ %51, %19 ]
  %69 = phi i32 [ %206, %59 ], [ %54, %19 ]
  %70 = phi i32 [ %211, %59 ], [ %57, %19 ]
  %71 = phi i32 [ %216, %59 ], [ %22, %19 ]
  %72 = phi i32 [ %201, %59 ], [ %37, %19 ]
  %73 = phi i32 [ %236, %59 ], [ %20, %19 ]
  %74 = phi i32 [ %231, %59 ], [ %46, %19 ]
  %75 = phi i32 [ %226, %59 ], [ %43, %19 ]
  %76 = phi i32 [ %221, %59 ], [ %40, %19 ]
  %77 = add i32 %61, %76
  %78 = shl i32 %77, 7
  %79 = lshr i32 %77, 25
  %80 = or i32 %79, %78
  %81 = xor i32 %80, %65
  %82 = add i32 %81, %61
  %83 = shl i32 %82, 9
  %84 = lshr i32 %82, 23
  %85 = or i32 %84, %83
  %86 = xor i32 %85, %69
  %87 = add i32 %86, %81
  %88 = shl i32 %87, 13
  %89 = lshr i32 %87, 19
  %90 = or i32 %89, %88
  %91 = xor i32 %90, %76
  %92 = add i32 %91, %86
  %93 = shl i32 %92, 18
  %94 = lshr i32 %92, 14
  %95 = or i32 %94, %93
  %96 = xor i32 %95, %61
  %97 = add i32 %62, %66
  %98 = shl i32 %97, 7
  %99 = lshr i32 %97, 25
  %100 = or i32 %99, %98
  %101 = xor i32 %100, %70
  %102 = add i32 %101, %66
  %103 = shl i32 %102, 9
  %104 = lshr i32 %102, 23
  %105 = or i32 %104, %103
  %106 = xor i32 %105, %75
  %107 = add i32 %106, %101
  %108 = shl i32 %107, 13
  %109 = lshr i32 %107, 19
  %110 = or i32 %109, %108
  %111 = xor i32 %110, %62
  %112 = add i32 %111, %106
  %113 = shl i32 %112, 18
  %114 = lshr i32 %112, 14
  %115 = or i32 %114, %113
  %116 = xor i32 %115, %66
  %117 = add i32 %67, %71
  %118 = shl i32 %117, 7
  %119 = lshr i32 %117, 25
  %120 = or i32 %119, %118
  %121 = xor i32 %120, %74
  %122 = add i32 %121, %71
  %123 = shl i32 %122, 9
  %124 = lshr i32 %122, 23
  %125 = or i32 %124, %123
  %126 = xor i32 %125, %63
  %127 = add i32 %126, %121
  %128 = shl i32 %127, 13
  %129 = lshr i32 %127, 19
  %130 = or i32 %129, %128
  %131 = xor i32 %130, %67
  %132 = add i32 %131, %126
  %133 = shl i32 %132, 18
  %134 = lshr i32 %132, 14
  %135 = or i32 %134, %133
  %136 = xor i32 %135, %71
  %137 = add i32 %72, %73
  %138 = shl i32 %137, 7
  %139 = lshr i32 %137, 25
  %140 = or i32 %139, %138
  %141 = xor i32 %64, %140
  %142 = add i32 %141, %73
  %143 = shl i32 %142, 9
  %144 = lshr i32 %142, 23
  %145 = or i32 %144, %143
  %146 = xor i32 %145, %68
  %147 = add i32 %146, %141
  %148 = shl i32 %147, 13
  %149 = lshr i32 %147, 19
  %150 = or i32 %149, %148
  %151 = xor i32 %150, %72
  %152 = add i32 %151, %146
  %153 = shl i32 %152, 18
  %154 = lshr i32 %152, 14
  %155 = or i32 %154, %153
  %156 = xor i32 %155, %73
  %157 = add i32 %96, %141
  %158 = shl i32 %157, 7
  %159 = lshr i32 %157, 25
  %160 = or i32 %159, %158
  %161 = xor i32 %160, %111
  %162 = add i32 %161, %96
  %163 = shl i32 %162, 9
  %164 = lshr i32 %162, 23
  %165 = or i32 %164, %163
  %166 = xor i32 %165, %126
  %167 = add i32 %166, %161
  %168 = shl i32 %167, 13
  %169 = lshr i32 %167, 19
  %170 = or i32 %169, %168
  %171 = xor i32 %170, %141
  %172 = add i32 %171, %166
  %173 = shl i32 %172, 18
  %174 = lshr i32 %172, 14
  %175 = or i32 %174, %173
  %176 = xor i32 %175, %96
  %177 = add i32 %116, %81
  %178 = shl i32 %177, 7
  %179 = lshr i32 %177, 25
  %180 = or i32 %179, %178
  %181 = xor i32 %180, %131
  %182 = add i32 %181, %116
  %183 = shl i32 %182, 9
  %184 = lshr i32 %182, 23
  %185 = or i32 %184, %183
  %186 = xor i32 %185, %146
  %187 = add i32 %186, %181
  %188 = shl i32 %187, 13
  %189 = lshr i32 %187, 19
  %190 = or i32 %189, %188
  %191 = xor i32 %190, %81
  %192 = add i32 %191, %186
  %193 = shl i32 %192, 18
  %194 = lshr i32 %192, 14
  %195 = or i32 %194, %193
  %196 = xor i32 %195, %116
  %197 = add i32 %136, %101
  %198 = shl i32 %197, 7
  %199 = lshr i32 %197, 25
  %200 = or i32 %199, %198
  %201 = xor i32 %200, %151
  %202 = add i32 %201, %136
  %203 = shl i32 %202, 9
  %204 = lshr i32 %202, 23
  %205 = or i32 %204, %203
  %206 = xor i32 %205, %86
  %207 = add i32 %206, %201
  %208 = shl i32 %207, 13
  %209 = lshr i32 %207, 19
  %210 = or i32 %209, %208
  %211 = xor i32 %210, %101
  %212 = add i32 %211, %206
  %213 = shl i32 %212, 18
  %214 = lshr i32 %212, 14
  %215 = or i32 %214, %213
  %216 = xor i32 %215, %136
  %217 = add i32 %156, %121
  %218 = shl i32 %217, 7
  %219 = lshr i32 %217, 25
  %220 = or i32 %219, %218
  %221 = xor i32 %220, %91
  %222 = add i32 %221, %156
  %223 = shl i32 %222, 9
  %224 = lshr i32 %222, 23
  %225 = or i32 %224, %223
  %226 = xor i32 %225, %106
  %227 = add i32 %226, %221
  %228 = shl i32 %227, 13
  %229 = lshr i32 %227, 19
  %230 = or i32 %229, %228
  %231 = xor i32 %230, %121
  %232 = add i32 %231, %226
  %233 = shl i32 %232, 18
  %234 = lshr i32 %232, 14
  %235 = or i32 %234, %233
  %236 = xor i32 %235, %156
  %237 = add i32 %60, 2
  %238 = icmp slt i32 %237, %4
  br i1 %238, label %59, label %239

239:                                              ; preds = %59, %19
  %240 = phi i32 [ %40, %19 ], [ %221, %59 ]
  %241 = phi i32 [ %43, %19 ], [ %226, %59 ]
  %242 = phi i32 [ %46, %19 ], [ %231, %59 ]
  %243 = phi i32 [ %20, %19 ], [ %236, %59 ]
  %244 = phi i32 [ %37, %19 ], [ %201, %59 ]
  %245 = phi i32 [ %22, %19 ], [ %216, %59 ]
  %246 = phi i32 [ %57, %19 ], [ %211, %59 ]
  %247 = phi i32 [ %54, %19 ], [ %206, %59 ]
  %248 = phi i32 [ %51, %19 ], [ %186, %59 ]
  %249 = phi i32 [ %48, %19 ], [ %181, %59 ]
  %250 = phi i32 [ %23, %19 ], [ %196, %59 ]
  %251 = phi i32 [ %34, %19 ], [ %191, %59 ]
  %252 = phi i32 [ %31, %19 ], [ %171, %59 ]
  %253 = phi i32 [ %28, %19 ], [ %166, %59 ]
  %254 = phi i32 [ %25, %19 ], [ %161, %59 ]
  %255 = phi i32 [ %21, %19 ], [ %176, %59 ]
  %256 = add i32 %255, %21
  %257 = bitcast i8* %0 to i32*
  store i32 %256, i32* %257, align 1
  %258 = getelementptr i8, i8* %0, i32 4
  %259 = add i32 %254, %25
  %260 = bitcast i8* %258 to i32*
  store i32 %259, i32* %260, align 1
  %261 = getelementptr i8, i8* %0, i32 8
  %262 = add i32 %253, %28
  %263 = bitcast i8* %261 to i32*
  store i32 %262, i32* %263, align 1
  %264 = getelementptr i8, i8* %0, i32 12
  %265 = add i32 %252, %31
  %266 = bitcast i8* %264 to i32*
  store i32 %265, i32* %266, align 1
  %267 = getelementptr i8, i8* %0, i32 16
  %268 = add i32 %251, %34
  %269 = bitcast i8* %267 to i32*
  store i32 %268, i32* %269, align 1
  %270 = getelementptr i8, i8* %0, i32 20
  %271 = add i32 %250, %23
  %272 = bitcast i8* %270 to i32*
  store i32 %271, i32* %272, align 1
  %273 = getelementptr i8, i8* %0, i32 24
  %274 = add i32 %249, %48
  %275 = bitcast i8* %273 to i32*
  store i32 %274, i32* %275, align 1
  %276 = getelementptr i8, i8* %0, i32 28
  %277 = add i32 %248, %51
  %278 = bitcast i8* %276 to i32*
  store i32 %277, i32* %278, align 1
  %279 = getelementptr i8, i8* %0, i32 32
  %280 = add i32 %247, %54
  %281 = bitcast i8* %279 to i32*
  store i32 %280, i32* %281, align 1
  %282 = getelementptr i8, i8* %0, i32 36
  %283 = add i32 %246, %57
  %284 = bitcast i8* %282 to i32*
  store i32 %283, i32* %284, align 1
  %285 = getelementptr i8, i8* %0, i32 40
  %286 = add i32 %245, %22
  %287 = bitcast i8* %285 to i32*
  store i32 %286, i32* %287, align 1
  %288 = getelementptr i8, i8* %0, i32 44
  %289 = add i32 %244, %37
  %290 = bitcast i8* %288 to i32*
  store i32 %289, i32* %290, align 1
  %291 = getelementptr i8, i8* %0, i32 48
  %292 = add i32 %240, %40
  %293 = bitcast i8* %291 to i32*
  store i32 %292, i32* %293, align 1
  %294 = getelementptr i8, i8* %0, i32 52
  %295 = add i32 %241, %43
  %296 = bitcast i8* %294 to i32*
  store i32 %295, i32* %296, align 1
  %297 = getelementptr i8, i8* %0, i32 56
  %298 = add i32 %242, %46
  %299 = bitcast i8* %297 to i32*
  store i32 %298, i32* %299, align 1
  %300 = getelementptr i8, i8* %0, i32 60
  %301 = add i32 %243, %20
  %302 = bitcast i8* %300 to i32*
  store i32 %301, i32* %302, align 1
  ret void
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_core_salsa20_outputbytes() local_unnamed_addr #1 {
  ret i32 64
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_core_salsa20_inputbytes() local_unnamed_addr #1 {
  ret i32 16
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_core_salsa20_keybytes() local_unnamed_addr #1 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_core_salsa20_constbytes() local_unnamed_addr #1 {
  ret i32 16
}

; Function Attrs: nofree norecurse nounwind
define i32 @crypto_core_salsa2012(i8* nocapture nonnull %0, i8* nocapture nonnull readonly %1, i8* nocapture nonnull readonly %2, i8* readonly %3) local_unnamed_addr #0 {
  tail call fastcc void @crypto_core_salsa(i8* nonnull %0, i8* nonnull %1, i8* nonnull %2, i8* %3, i32 12)
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_core_salsa2012_outputbytes() local_unnamed_addr #1 {
  ret i32 64
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_core_salsa2012_inputbytes() local_unnamed_addr #1 {
  ret i32 16
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_core_salsa2012_keybytes() local_unnamed_addr #1 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_core_salsa2012_constbytes() local_unnamed_addr #1 {
  ret i32 16
}

; Function Attrs: nofree norecurse nounwind
define i32 @crypto_core_salsa208(i8* nocapture nonnull %0, i8* nocapture nonnull readonly %1, i8* nocapture nonnull readonly %2, i8* readonly %3) local_unnamed_addr #0 {
  tail call fastcc void @crypto_core_salsa(i8* nonnull %0, i8* nonnull %1, i8* nonnull %2, i8* %3, i32 8)
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_core_salsa208_outputbytes() local_unnamed_addr #1 {
  ret i32 64
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_core_salsa208_inputbytes() local_unnamed_addr #1 {
  ret i32 16
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_core_salsa208_keybytes() local_unnamed_addr #1 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_core_salsa208_constbytes() local_unnamed_addr #1 {
  ret i32 16
}

attributes #0 = { nofree norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for crypto_core_salsa20_outputbytes()

