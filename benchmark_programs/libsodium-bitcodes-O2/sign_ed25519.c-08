; entering Souper's runOnFunction() for crypto_sign_ed25519_sk_to_pk()

; ModuleID = './sign_ed25519.c.bc'
source_filename = "crypto_sign/ed25519/sign_ed25519.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.crypto_sign_ed25519ph_state = type { %struct.crypto_hash_sha512_state }
%struct.crypto_hash_sha512_state = type { [8 x i64], [2 x i64], [128 x i8] }

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_sign_ed25519ph_statebytes() local_unnamed_addr #0 {
  ret i32 208
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_sign_ed25519_bytes() local_unnamed_addr #0 {
  ret i32 64
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_sign_ed25519_seedbytes() local_unnamed_addr #0 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_sign_ed25519_publickeybytes() local_unnamed_addr #0 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_sign_ed25519_secretkeybytes() local_unnamed_addr #0 {
  ret i32 64
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_sign_ed25519_messagebytes_max() local_unnamed_addr #0 {
  ret i32 -65
}

; Function Attrs: nounwind
define i32 @crypto_sign_ed25519_sk_to_seed(i8* nocapture nonnull %0, i8* nocapture nonnull readonly %1) local_unnamed_addr #1 {
  tail call void @llvm.memmove.p0i8.p0i8.i32(i8* nonnull align 1 dereferenceable(32) %0, i8* nonnull align 1 dereferenceable(32) %1, i32 32, i1 false)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i32(i8* nocapture %0, i8* nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: nounwind
define i32 @crypto_sign_ed25519_sk_to_pk(i8* nocapture nonnull %0, i8* nocapture nonnull readonly %1) local_unnamed_addr #1 {
  %3 = getelementptr i8, i8* %1, i32 32
  tail call void @llvm.memmove.p0i8.p0i8.i32(i8* nonnull align 1 dereferenceable(32) %0, i8* nonnull align 1 dereferenceable(32) %3, i32 32, i1 false)
  ret i32 0
}

; Function Attrs: nounwind
define i32 @crypto_sign_ed25519ph_init(%struct.crypto_sign_ed25519ph_state* nonnull %0) local_unnamed_addr #1 {
  %2 = getelementptr inbounds %struct.crypto_sign_ed25519ph_state, %struct.crypto_sign_ed25519ph_state* %0, i32 0, i32 0
  %3 = tail call i32 @crypto_hash_sha512_init(%struct.crypto_hash_sha512_state* nonnull %2) #4
  ret i32 0
}

declare i32 @crypto_hash_sha512_init(%struct.crypto_hash_sha512_state* %0) local_unnamed_addr #3

; Function Attrs: nounwind
define i32 @crypto_sign_ed25519ph_update(%struct.crypto_sign_ed25519ph_state* nonnull %0, i8* %1, i64 %2) local_unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.crypto_sign_ed25519ph_state, %struct.crypto_sign_ed25519ph_state* %0, i32 0, i32 0
  %5 = tail call i32 @crypto_hash_sha512_update(%struct.crypto_hash_sha512_state* nonnull %4, i8* %1, i64 %2) #4
  ret i32 %5
}

declare i32 @crypto_hash_sha512_update(%struct.crypto_hash_sha512_state* %0, i8* %1, i64 %2) local_unnamed_addr #3

; Function Attrs: nounwind
define i32 @crypto_sign_ed25519ph_final_create(%struct.crypto_sign_ed25519ph_state* nonnull %0, i8* nonnull %1, i64* %2, i8* nonnull %3) local_unnamed_addr #1 {
  %5 = alloca [64 x i8], align 16
  %6 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %6) #4
  %7 = getelementptr inbounds %struct.crypto_sign_ed25519ph_state, %struct.crypto_sign_ed25519ph_state* %0, i32 0, i32 0
  %8 = call i32 @crypto_hash_sha512_final(%struct.crypto_hash_sha512_state* nonnull %7, i8* nonnull %6) #4
  %9 = call i32 @_crypto_sign_ed25519_detached(i8* nonnull %1, i64* %2, i8* nonnull %6, i64 64, i8* nonnull %3, i32 1) #4
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %6) #4
  ret i32 %9
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #2

declare i32 @crypto_hash_sha512_final(%struct.crypto_hash_sha512_state* %0, i8* %1) local_unnamed_addr #3

declare i32 @_crypto_sign_ed25519_detached(i8* %0, i64* %1, i8* %2, i64 %3, i8* %4, i32 %5) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #2

; Function Attrs: nounwind
define i32 @crypto_sign_ed25519ph_final_verify(%struct.crypto_sign_ed25519ph_state* nonnull %0, i8* nonnull %1, i8* nonnull %2) local_unnamed_addr #1 {
  %4 = alloca [64 x i8], align 16
  %5 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %5) #4
  %6 = getelementptr inbounds %struct.crypto_sign_ed25519ph_state, %struct.crypto_sign_ed25519ph_state* %0, i32 0, i32 0
  %7 = call i32 @crypto_hash_sha512_final(%struct.crypto_hash_sha512_state* nonnull %6, i8* nonnull %5) #4
  %8 = call i32 @_crypto_sign_ed25519_verify_detached(i8* nonnull %1, i8* nonnull %5, i64 64, i8* nonnull %2, i32 1) #4
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %5) #4
  ret i32 %8
}

declare i32 @_crypto_sign_ed25519_verify_detached(i8* %0, i8* %1, i64 %2, i8* %3, i32 %4) local_unnamed_addr #3

attributes #0 = { norecurse nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for crypto_sign_ed25519_sk_to_pk()

