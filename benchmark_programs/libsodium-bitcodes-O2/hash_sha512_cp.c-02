; entering Souper's runOnFunction() for crypto_hash_sha512_update()

; ModuleID = './hash_sha512_cp.c.bc'
source_filename = "crypto_hash/sha512/cp/hash_sha512_cp.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.crypto_hash_sha512_state = type { [8 x i64], [2 x i64], [128 x i8] }

@crypto_hash_sha512_init.sha512_initial_state = internal unnamed_addr constant [8 x i64] [i64 7640891576956012808, i64 -4942790177534073029, i64 4354685564936845355, i64 -6534734903238641935, i64 5840696475078001361, i64 -7276294671716946913, i64 2270897969802886507, i64 6620516959819538809], align 16
@Krnd = internal unnamed_addr constant [80 x i64] [i64 4794697086780616226, i64 8158064640168781261, i64 -5349999486874862801, i64 -1606136188198331460, i64 4131703408338449720, i64 6480981068601479193, i64 -7908458776815382629, i64 -6116909921290321640, i64 -2880145864133508542, i64 1334009975649890238, i64 2608012711638119052, i64 6128411473006802146, i64 8268148722764581231, i64 -9160688886553864527, i64 -7215885187991268811, i64 -4495734319001033068, i64 -1973867731355612462, i64 -1171420211273849373, i64 1135362057144423861, i64 2597628984639134821, i64 3308224258029322869, i64 5365058923640841347, i64 6679025012923562964, i64 8573033837759648693, i64 -7476448914759557205, i64 -6327057829258317296, i64 -5763719355590565569, i64 -4658551843659510044, i64 -4116276920077217854, i64 -3051310485924567259, i64 489312712824947311, i64 1452737877330783856, i64 2861767655752347644, i64 3322285676063803686, i64 5560940570517711597, i64 5996557281743188959, i64 7280758554555802590, i64 8532644243296465576, i64 -9096487096722542874, i64 -7894198246740708037, i64 -6719396339535248540, i64 -6333637450476146687, i64 -4446306890439682159, i64 -4076793802049405392, i64 -3345356375505022440, i64 -2983346525034927856, i64 -860691631967231958, i64 1182934255886127544, i64 1847814050463011016, i64 2177327727835720531, i64 2830643537854262169, i64 3796741975233480872, i64 4115178125766777443, i64 5681478168544905931, i64 6601373596472566643, i64 7507060721942968483, i64 8399075790359081724, i64 8693463985226723168, i64 -8878714635349349518, i64 -8302665154208450068, i64 -8016688836872298968, i64 -6606660893046293015, i64 -4685533653050689259, i64 -4147400797238176981, i64 -3880063495543823972, i64 -3348786107499101689, i64 -1523767162380948706, i64 -757361751448694408, i64 500013540394364858, i64 748580250866718886, i64 1242879168328830382, i64 1977374033974150939, i64 2944078676154940804, i64 3659926193048069267, i64 4368137639120453308, i64 4836135668995329356, i64 5532061633213252278, i64 6448918945643986474, i64 6902733635092675308, i64 7801388544844847127], align 16
@PAD = internal unnamed_addr constant <{ i8, [127 x i8] }> <{ i8 -128, [127 x i8] zeroinitializer }>, align 16

; Function Attrs: nounwind
define i32 @crypto_hash_sha512_init(%struct.crypto_hash_sha512_state* nocapture nonnull %0) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.crypto_hash_sha512_state, %struct.crypto_hash_sha512_state* %0, i32 0, i32 1, i32 0
  %3 = bitcast %struct.crypto_hash_sha512_state* %0 to i8*
  %4 = bitcast i64* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %4, i8 0, i64 16, i1 false)
  tail call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 8 dereferenceable(64) %3, i8* nonnull align 16 dereferenceable(64) bitcast ([8 x i64]* @crypto_hash_sha512_init.sha512_initial_state to i8*), i32 64, i1 false)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: nounwind
define i32 @crypto_hash_sha512_update(%struct.crypto_hash_sha512_state* nocapture nonnull %0, i8* nocapture readonly %1, i64 %2) local_unnamed_addr #0 {
  %4 = alloca [88 x i64], align 16
  %5 = bitcast [88 x i64]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 704, i8* nonnull %5) #4
  %6 = icmp eq i64 %2, 0
  br i1 %6, label %79, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.crypto_hash_sha512_state, %struct.crypto_hash_sha512_state* %0, i32 0, i32 1
  %9 = getelementptr %struct.crypto_hash_sha512_state, %struct.crypto_hash_sha512_state* %0, i32 0, i32 1, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = lshr i64 %10, 3
  %12 = and i64 %11, 127
  %13 = shl i64 %2, 3
  %14 = lshr i64 %2, 61
  %15 = add i64 %10, %13
  store i64 %15, i64* %9, align 8
  %16 = icmp ult i64 %15, %13
  %17 = getelementptr [2 x i64], [2 x i64]* %8, i32 0, i32 0
  %18 = load i64, i64* %17, align 8
  br i1 %16, label %19, label %21

19:                                               ; preds = %7
  %20 = add i64 %18, 1
  store i64 %20, i64* %17, align 8
  br label %21

21:                                               ; preds = %7, %19
  %22 = phi i64 [ %20, %19 ], [ %18, %7 ]
  %23 = getelementptr [2 x i64], [2 x i64]* %8, i32 0, i32 0
  %24 = add i64 %22, %14
  store i64 %24, i64* %23, align 8
  %25 = sub nuw nsw i64 128, %12
  %26 = icmp ugt i64 %25, %2
  br i1 %26, label %27, label %37

27:                                               ; preds = %21, %27
  %28 = phi i64 [ %35, %27 ], [ 0, %21 ]
  %29 = trunc i64 %28 to i32
  %30 = getelementptr i8, i8* %1, i32 %29
  %31 = load i8, i8* %30, align 1
  %32 = add i64 %28, %12
  %33 = trunc i64 %32 to i32
  %34 = getelementptr %struct.crypto_hash_sha512_state, %struct.crypto_hash_sha512_state* %0, i32 0, i32 2, i32 %33
  store i8 %31, i8* %34, align 1
  %35 = add nuw i64 %28, 1
  %36 = icmp ult i64 %35, %2
  br i1 %36, label %27, label %79

37:                                               ; preds = %21, %37
  %38 = phi i64 [ %45, %37 ], [ 0, %21 ]
  %39 = trunc i64 %38 to i32
  %40 = getelementptr i8, i8* %1, i32 %39
  %41 = load i8, i8* %40, align 1
  %42 = add nuw nsw i64 %38, %12
  %43 = trunc i64 %42 to i32
  %44 = getelementptr %struct.crypto_hash_sha512_state, %struct.crypto_hash_sha512_state* %0, i32 0, i32 2, i32 %43
  store i8 %41, i8* %44, align 1
  %45 = add nuw nsw i64 %38, 1
  %46 = icmp eq i64 %45, %25
  br i1 %46, label %47, label %37

47:                                               ; preds = %37
  %48 = getelementptr inbounds %struct.crypto_hash_sha512_state, %struct.crypto_hash_sha512_state* %0, i32 0, i32 0, i32 0
  %49 = getelementptr inbounds %struct.crypto_hash_sha512_state, %struct.crypto_hash_sha512_state* %0, i32 0, i32 2, i32 0
  %50 = getelementptr inbounds [88 x i64], [88 x i64]* %4, i32 0, i32 0
  %51 = getelementptr inbounds [88 x i64], [88 x i64]* %4, i32 0, i32 80
  call fastcc void @SHA512_Transform(i64* nonnull %48, i8* nonnull %49, i64* nonnull %50, i64* nonnull %51)
  %52 = trunc i64 %25 to i32
  %53 = getelementptr i8, i8* %1, i32 %52
  %54 = sub i64 %2, %25
  %55 = icmp ugt i64 %54, 127
  br i1 %55, label %56, label %60

56:                                               ; preds = %47
  %57 = add i64 %11, %2
  br label %64

58:                                               ; preds = %64
  %59 = and i64 %57, 127
  br label %60

60:                                               ; preds = %58, %47
  %61 = phi i64 [ %54, %47 ], [ %59, %58 ]
  %62 = phi i8* [ %53, %47 ], [ %67, %58 ]
  %63 = icmp eq i64 %61, 0
  br i1 %63, label %78, label %70

64:                                               ; preds = %56, %64
  %65 = phi i8* [ %67, %64 ], [ %53, %56 ]
  %66 = phi i64 [ %68, %64 ], [ %54, %56 ]
  call fastcc void @SHA512_Transform(i64* nonnull %48, i8* %65, i64* nonnull %50, i64* nonnull %51)
  %67 = getelementptr i8, i8* %65, i32 128
  %68 = add i64 %66, -128
  %69 = icmp ugt i64 %68, 127
  br i1 %69, label %64, label %58

70:                                               ; preds = %60, %70
  %71 = phi i64 [ %76, %70 ], [ 0, %60 ]
  %72 = trunc i64 %71 to i32
  %73 = getelementptr i8, i8* %62, i32 %72
  %74 = load i8, i8* %73, align 1
  %75 = getelementptr %struct.crypto_hash_sha512_state, %struct.crypto_hash_sha512_state* %0, i32 0, i32 2, i32 %72
  store i8 %74, i8* %75, align 1
  %76 = add nuw i64 %71, 1
  %77 = icmp eq i64 %76, %61
  br i1 %77, label %78, label %70

78:                                               ; preds = %70, %60
  call void @sodium_memzero(i8* nonnull %5, i32 704) #4
  br label %79

79:                                               ; preds = %27, %3, %78
  call void @llvm.lifetime.end.p0i8(i64 704, i8* nonnull %5) #4
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #1

; Function Attrs: nounwind
define internal fastcc void @SHA512_Transform(i64* nocapture %0, i8* nocapture readonly %1, i64* %2, i64* %3) unnamed_addr #0 {
  br label %5

5:                                                ; preds = %5, %4
  %6 = phi i32 [ 0, %4 ], [ %47, %5 ]
  %7 = shl nuw nsw i32 %6, 3
  %8 = getelementptr i8, i8* %1, i32 %7
  %9 = getelementptr i8, i8* %8, i32 7
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i64
  %12 = getelementptr i8, i8* %8, i32 6
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i64
  %15 = shl nuw nsw i64 %14, 8
  %16 = or i64 %15, %11
  %17 = getelementptr i8, i8* %8, i32 5
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i64
  %20 = shl nuw nsw i64 %19, 16
  %21 = or i64 %16, %20
  %22 = getelementptr i8, i8* %8, i32 4
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i64
  %25 = shl nuw nsw i64 %24, 24
  %26 = or i64 %21, %25
  %27 = getelementptr i8, i8* %8, i32 3
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i64
  %30 = shl nuw nsw i64 %29, 32
  %31 = or i64 %26, %30
  %32 = getelementptr i8, i8* %8, i32 2
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i64
  %35 = shl nuw nsw i64 %34, 40
  %36 = or i64 %31, %35
  %37 = getelementptr i8, i8* %8, i32 1
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i64
  %40 = shl nuw nsw i64 %39, 48
  %41 = or i64 %36, %40
  %42 = load i8, i8* %8, align 1
  %43 = zext i8 %42 to i64
  %44 = shl nuw i64 %43, 56
  %45 = or i64 %41, %44
  %46 = getelementptr i64, i64* %2, i32 %6
  store i64 %45, i64* %46, align 8
  %47 = add nuw nsw i32 %6, 1
  %48 = icmp eq i32 %47, 16
  br i1 %48, label %49, label %5

49:                                               ; preds = %5
  %50 = bitcast i64* %3 to i8*
  %51 = bitcast i64* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 8 dereferenceable(64) %50, i8* nonnull align 8 dereferenceable(64) %51, i32 64, i1 false)
  %52 = getelementptr i64, i64* %3, i32 4
  %53 = getelementptr i64, i64* %3, i32 5
  %54 = getelementptr i64, i64* %3, i32 6
  %55 = getelementptr i64, i64* %3, i32 7
  %56 = getelementptr i64, i64* %3, i32 3
  %57 = getelementptr i64, i64* %3, i32 1
  %58 = getelementptr i64, i64* %3, i32 2
  %59 = load i64, i64* %2, align 8
  br label %60

60:                                               ; preds = %725, %49
  %61 = phi i64 [ %59, %49 ], [ %1150, %725 ]
  %62 = phi i32 [ 0, %49 ], [ %752, %725 ]
  %63 = load i64, i64* %52, align 8
  %64 = lshr i64 %63, 14
  %65 = shl i64 %63, 50
  %66 = or i64 %65, %64
  %67 = lshr i64 %63, 18
  %68 = shl i64 %63, 46
  %69 = or i64 %68, %67
  %70 = xor i64 %66, %69
  %71 = lshr i64 %63, 41
  %72 = shl i64 %63, 23
  %73 = or i64 %72, %71
  %74 = xor i64 %70, %73
  %75 = load i64, i64* %53, align 8
  %76 = load i64, i64* %54, align 8
  %77 = xor i64 %76, %75
  %78 = and i64 %77, %63
  %79 = xor i64 %78, %76
  %80 = getelementptr [80 x i64], [80 x i64]* @Krnd, i32 0, i32 %62
  %81 = load i64, i64* %80, align 16
  %82 = load i64, i64* %55, align 8
  %83 = add i64 %74, %61
  %84 = add i64 %83, %81
  %85 = add i64 %84, %79
  %86 = add i64 %85, %82
  %87 = load i64, i64* %56, align 8
  %88 = add i64 %86, %87
  store i64 %88, i64* %56, align 8
  %89 = load i64, i64* %3, align 8
  %90 = lshr i64 %89, 28
  %91 = shl i64 %89, 36
  %92 = or i64 %91, %90
  %93 = lshr i64 %89, 34
  %94 = shl i64 %89, 30
  %95 = or i64 %94, %93
  %96 = xor i64 %92, %95
  %97 = lshr i64 %89, 39
  %98 = shl i64 %89, 25
  %99 = or i64 %98, %97
  %100 = xor i64 %96, %99
  %101 = load i64, i64* %57, align 8
  %102 = load i64, i64* %58, align 8
  %103 = or i64 %102, %101
  %104 = and i64 %103, %89
  %105 = and i64 %102, %101
  %106 = or i64 %104, %105
  %107 = add i64 %100, %86
  %108 = add i64 %107, %106
  store i64 %108, i64* %55, align 8
  %109 = lshr i64 %88, 14
  %110 = shl i64 %88, 50
  %111 = or i64 %110, %109
  %112 = lshr i64 %88, 18
  %113 = shl i64 %88, 46
  %114 = or i64 %113, %112
  %115 = xor i64 %111, %114
  %116 = lshr i64 %88, 41
  %117 = shl i64 %88, 23
  %118 = or i64 %117, %116
  %119 = xor i64 %115, %118
  %120 = xor i64 %75, %63
  %121 = and i64 %88, %120
  %122 = xor i64 %121, %75
  %123 = or i32 %62, 1
  %124 = getelementptr i64, i64* %2, i32 %123
  %125 = load i64, i64* %124, align 8
  %126 = getelementptr [80 x i64], [80 x i64]* @Krnd, i32 0, i32 %123
  %127 = load i64, i64* %126, align 8
  %128 = add i64 %122, %76
  %129 = add i64 %128, %125
  %130 = add i64 %129, %119
  %131 = add i64 %130, %127
  %132 = add i64 %131, %102
  store i64 %132, i64* %58, align 8
  %133 = lshr i64 %108, 28
  %134 = shl i64 %108, 36
  %135 = or i64 %134, %133
  %136 = lshr i64 %108, 34
  %137 = shl i64 %108, 30
  %138 = or i64 %137, %136
  %139 = xor i64 %135, %138
  %140 = lshr i64 %108, 39
  %141 = shl i64 %108, 25
  %142 = or i64 %141, %140
  %143 = xor i64 %139, %142
  %144 = or i64 %101, %89
  %145 = and i64 %108, %144
  %146 = and i64 %101, %89
  %147 = or i64 %145, %146
  %148 = add i64 %131, %147
  %149 = add i64 %148, %143
  store i64 %149, i64* %54, align 8
  %150 = lshr i64 %132, 14
  %151 = shl i64 %132, 50
  %152 = or i64 %151, %150
  %153 = lshr i64 %132, 18
  %154 = shl i64 %132, 46
  %155 = or i64 %154, %153
  %156 = xor i64 %152, %155
  %157 = lshr i64 %132, 41
  %158 = shl i64 %132, 23
  %159 = or i64 %158, %157
  %160 = xor i64 %156, %159
  %161 = xor i64 %88, %63
  %162 = and i64 %132, %161
  %163 = xor i64 %162, %63
  %164 = or i32 %62, 2
  %165 = getelementptr i64, i64* %2, i32 %164
  %166 = load i64, i64* %165, align 8
  %167 = getelementptr [80 x i64], [80 x i64]* @Krnd, i32 0, i32 %164
  %168 = load i64, i64* %167, align 16
  %169 = add i64 %166, %75
  %170 = add i64 %169, %168
  %171 = add i64 %170, %163
  %172 = add i64 %171, %160
  %173 = add i64 %172, %101
  store i64 %173, i64* %57, align 8
  %174 = lshr i64 %149, 28
  %175 = shl i64 %149, 36
  %176 = or i64 %175, %174
  %177 = lshr i64 %149, 34
  %178 = shl i64 %149, 30
  %179 = or i64 %178, %177
  %180 = xor i64 %176, %179
  %181 = lshr i64 %149, 39
  %182 = shl i64 %149, 25
  %183 = or i64 %182, %181
  %184 = xor i64 %180, %183
  %185 = or i64 %108, %89
  %186 = and i64 %149, %185
  %187 = and i64 %108, %89
  %188 = or i64 %186, %187
  %189 = add i64 %184, %188
  %190 = add i64 %189, %172
  store i64 %190, i64* %53, align 8
  %191 = lshr i64 %173, 14
  %192 = shl i64 %173, 50
  %193 = or i64 %192, %191
  %194 = lshr i64 %173, 18
  %195 = shl i64 %173, 46
  %196 = or i64 %195, %194
  %197 = xor i64 %193, %196
  %198 = lshr i64 %173, 41
  %199 = shl i64 %173, 23
  %200 = or i64 %199, %198
  %201 = xor i64 %197, %200
  %202 = xor i64 %132, %88
  %203 = and i64 %173, %202
  %204 = xor i64 %203, %88
  %205 = or i32 %62, 3
  %206 = getelementptr i64, i64* %2, i32 %205
  %207 = load i64, i64* %206, align 8
  %208 = getelementptr [80 x i64], [80 x i64]* @Krnd, i32 0, i32 %205
  %209 = load i64, i64* %208, align 8
  %210 = add i64 %207, %63
  %211 = add i64 %210, %209
  %212 = add i64 %211, %204
  %213 = add i64 %212, %201
  %214 = add i64 %213, %89
  store i64 %214, i64* %3, align 8
  %215 = lshr i64 %190, 28
  %216 = shl i64 %190, 36
  %217 = or i64 %216, %215
  %218 = lshr i64 %190, 34
  %219 = shl i64 %190, 30
  %220 = or i64 %219, %218
  %221 = xor i64 %217, %220
  %222 = lshr i64 %190, 39
  %223 = shl i64 %190, 25
  %224 = or i64 %223, %222
  %225 = xor i64 %221, %224
  %226 = or i64 %149, %108
  %227 = and i64 %190, %226
  %228 = and i64 %149, %108
  %229 = or i64 %227, %228
  %230 = add i64 %225, %229
  %231 = add i64 %230, %213
  store i64 %231, i64* %52, align 8
  %232 = lshr i64 %214, 14
  %233 = shl i64 %214, 50
  %234 = or i64 %233, %232
  %235 = lshr i64 %214, 18
  %236 = shl i64 %214, 46
  %237 = or i64 %236, %235
  %238 = xor i64 %234, %237
  %239 = lshr i64 %214, 41
  %240 = shl i64 %214, 23
  %241 = or i64 %240, %239
  %242 = xor i64 %238, %241
  %243 = xor i64 %173, %132
  %244 = and i64 %214, %243
  %245 = xor i64 %244, %132
  %246 = or i32 %62, 4
  %247 = getelementptr i64, i64* %2, i32 %246
  %248 = load i64, i64* %247, align 8
  %249 = getelementptr [80 x i64], [80 x i64]* @Krnd, i32 0, i32 %246
  %250 = load i64, i64* %249, align 16
  %251 = add i64 %248, %88
  %252 = add i64 %251, %250
  %253 = add i64 %252, %245
  %254 = add i64 %253, %242
  %255 = add i64 %254, %108
  store i64 %255, i64* %55, align 8
  %256 = lshr i64 %231, 28
  %257 = shl i64 %231, 36
  %258 = or i64 %257, %256
  %259 = lshr i64 %231, 34
  %260 = shl i64 %231, 30
  %261 = or i64 %260, %259
  %262 = xor i64 %258, %261
  %263 = lshr i64 %231, 39
  %264 = shl i64 %231, 25
  %265 = or i64 %264, %263
  %266 = xor i64 %262, %265
  %267 = or i64 %190, %149
  %268 = and i64 %231, %267
  %269 = and i64 %190, %149
  %270 = or i64 %268, %269
  %271 = add i64 %266, %270
  %272 = add i64 %271, %254
  store i64 %272, i64* %56, align 8
  %273 = lshr i64 %255, 14
  %274 = shl i64 %255, 50
  %275 = or i64 %274, %273
  %276 = lshr i64 %255, 18
  %277 = shl i64 %255, 46
  %278 = or i64 %277, %276
  %279 = xor i64 %275, %278
  %280 = lshr i64 %255, 41
  %281 = shl i64 %255, 23
  %282 = or i64 %281, %280
  %283 = xor i64 %279, %282
  %284 = xor i64 %214, %173
  %285 = and i64 %255, %284
  %286 = xor i64 %285, %173
  %287 = or i32 %62, 5
  %288 = getelementptr i64, i64* %2, i32 %287
  %289 = load i64, i64* %288, align 8
  %290 = getelementptr [80 x i64], [80 x i64]* @Krnd, i32 0, i32 %287
  %291 = load i64, i64* %290, align 8
  %292 = add i64 %289, %132
  %293 = add i64 %292, %291
  %294 = add i64 %293, %286
  %295 = add i64 %294, %283
  %296 = add i64 %295, %149
  store i64 %296, i64* %54, align 8
  %297 = lshr i64 %272, 28
  %298 = shl i64 %272, 36
  %299 = or i64 %298, %297
  %300 = lshr i64 %272, 34
  %301 = shl i64 %272, 30
  %302 = or i64 %301, %300
  %303 = xor i64 %299, %302
  %304 = lshr i64 %272, 39
  %305 = shl i64 %272, 25
  %306 = or i64 %305, %304
  %307 = xor i64 %303, %306
  %308 = or i64 %231, %190
  %309 = and i64 %272, %308
  %310 = and i64 %231, %190
  %311 = or i64 %309, %310
  %312 = add i64 %307, %311
  %313 = add i64 %312, %295
  store i64 %313, i64* %58, align 8
  %314 = lshr i64 %296, 14
  %315 = shl i64 %296, 50
  %316 = or i64 %315, %314
  %317 = lshr i64 %296, 18
  %318 = shl i64 %296, 46
  %319 = or i64 %318, %317
  %320 = xor i64 %316, %319
  %321 = lshr i64 %296, 41
  %322 = shl i64 %296, 23
  %323 = or i64 %322, %321
  %324 = xor i64 %320, %323
  %325 = xor i64 %255, %214
  %326 = and i64 %296, %325
  %327 = xor i64 %326, %214
  %328 = or i32 %62, 6
  %329 = getelementptr i64, i64* %2, i32 %328
  %330 = load i64, i64* %329, align 8
  %331 = getelementptr [80 x i64], [80 x i64]* @Krnd, i32 0, i32 %328
  %332 = load i64, i64* %331, align 16
  %333 = add i64 %330, %173
  %334 = add i64 %333, %332
  %335 = add i64 %334, %327
  %336 = add i64 %335, %324
  %337 = add i64 %336, %190
  store i64 %337, i64* %53, align 8
  %338 = lshr i64 %313, 28
  %339 = shl i64 %313, 36
  %340 = or i64 %339, %338
  %341 = lshr i64 %313, 34
  %342 = shl i64 %313, 30
  %343 = or i64 %342, %341
  %344 = xor i64 %340, %343
  %345 = lshr i64 %313, 39
  %346 = shl i64 %313, 25
  %347 = or i64 %346, %345
  %348 = xor i64 %344, %347
  %349 = or i64 %272, %231
  %350 = and i64 %313, %349
  %351 = and i64 %272, %231
  %352 = or i64 %350, %351
  %353 = add i64 %348, %352
  %354 = add i64 %353, %336
  store i64 %354, i64* %57, align 8
  %355 = lshr i64 %337, 14
  %356 = shl i64 %337, 50
  %357 = or i64 %356, %355
  %358 = lshr i64 %337, 18
  %359 = shl i64 %337, 46
  %360 = or i64 %359, %358
  %361 = xor i64 %357, %360
  %362 = lshr i64 %337, 41
  %363 = shl i64 %337, 23
  %364 = or i64 %363, %362
  %365 = xor i64 %361, %364
  %366 = xor i64 %296, %255
  %367 = and i64 %337, %366
  %368 = xor i64 %367, %255
  %369 = or i32 %62, 7
  %370 = getelementptr i64, i64* %2, i32 %369
  %371 = load i64, i64* %370, align 8
  %372 = getelementptr [80 x i64], [80 x i64]* @Krnd, i32 0, i32 %369
  %373 = load i64, i64* %372, align 8
  %374 = add i64 %371, %214
  %375 = add i64 %374, %373
  %376 = add i64 %375, %368
  %377 = add i64 %376, %365
  %378 = add i64 %377, %231
  store i64 %378, i64* %52, align 8
  %379 = lshr i64 %354, 28
  %380 = shl i64 %354, 36
  %381 = or i64 %380, %379
  %382 = lshr i64 %354, 34
  %383 = shl i64 %354, 30
  %384 = or i64 %383, %382
  %385 = xor i64 %381, %384
  %386 = lshr i64 %354, 39
  %387 = shl i64 %354, 25
  %388 = or i64 %387, %386
  %389 = xor i64 %385, %388
  %390 = or i64 %313, %272
  %391 = and i64 %354, %390
  %392 = and i64 %313, %272
  %393 = or i64 %391, %392
  %394 = add i64 %389, %393
  %395 = add i64 %394, %377
  store i64 %395, i64* %3, align 8
  %396 = lshr i64 %378, 14
  %397 = shl i64 %378, 50
  %398 = or i64 %397, %396
  %399 = lshr i64 %378, 18
  %400 = shl i64 %378, 46
  %401 = or i64 %400, %399
  %402 = xor i64 %398, %401
  %403 = lshr i64 %378, 41
  %404 = shl i64 %378, 23
  %405 = or i64 %404, %403
  %406 = xor i64 %402, %405
  %407 = xor i64 %337, %296
  %408 = and i64 %378, %407
  %409 = xor i64 %408, %296
  %410 = or i32 %62, 8
  %411 = getelementptr i64, i64* %2, i32 %410
  %412 = load i64, i64* %411, align 8
  %413 = getelementptr [80 x i64], [80 x i64]* @Krnd, i32 0, i32 %410
  %414 = load i64, i64* %413, align 16
  %415 = add i64 %412, %255
  %416 = add i64 %415, %414
  %417 = add i64 %416, %409
  %418 = add i64 %417, %406
  %419 = add i64 %418, %272
  store i64 %419, i64* %56, align 8
  %420 = lshr i64 %395, 28
  %421 = shl i64 %395, 36
  %422 = or i64 %421, %420
  %423 = lshr i64 %395, 34
  %424 = shl i64 %395, 30
  %425 = or i64 %424, %423
  %426 = xor i64 %422, %425
  %427 = lshr i64 %395, 39
  %428 = shl i64 %395, 25
  %429 = or i64 %428, %427
  %430 = xor i64 %426, %429
  %431 = or i64 %354, %313
  %432 = and i64 %395, %431
  %433 = and i64 %354, %313
  %434 = or i64 %432, %433
  %435 = add i64 %430, %434
  %436 = add i64 %435, %418
  store i64 %436, i64* %55, align 8
  %437 = lshr i64 %419, 14
  %438 = shl i64 %419, 50
  %439 = or i64 %438, %437
  %440 = lshr i64 %419, 18
  %441 = shl i64 %419, 46
  %442 = or i64 %441, %440
  %443 = xor i64 %439, %442
  %444 = lshr i64 %419, 41
  %445 = shl i64 %419, 23
  %446 = or i64 %445, %444
  %447 = xor i64 %443, %446
  %448 = xor i64 %378, %337
  %449 = and i64 %419, %448
  %450 = xor i64 %449, %337
  %451 = or i32 %62, 9
  %452 = getelementptr i64, i64* %2, i32 %451
  %453 = load i64, i64* %452, align 8
  %454 = getelementptr [80 x i64], [80 x i64]* @Krnd, i32 0, i32 %451
  %455 = load i64, i64* %454, align 8
  %456 = add i64 %455, %453
  %457 = add i64 %456, %296
  %458 = add i64 %457, %450
  %459 = add i64 %458, %447
  %460 = add i64 %459, %313
  store i64 %460, i64* %58, align 8
  %461 = lshr i64 %436, 28
  %462 = shl i64 %436, 36
  %463 = or i64 %462, %461
  %464 = lshr i64 %436, 34
  %465 = shl i64 %436, 30
  %466 = or i64 %465, %464
  %467 = xor i64 %463, %466
  %468 = lshr i64 %436, 39
  %469 = shl i64 %436, 25
  %470 = or i64 %469, %468
  %471 = xor i64 %467, %470
  %472 = or i64 %395, %354
  %473 = and i64 %436, %472
  %474 = and i64 %395, %354
  %475 = or i64 %473, %474
  %476 = add i64 %471, %475
  %477 = add i64 %476, %459
  store i64 %477, i64* %54, align 8
  %478 = lshr i64 %460, 14
  %479 = shl i64 %460, 50
  %480 = or i64 %479, %478
  %481 = lshr i64 %460, 18
  %482 = shl i64 %460, 46
  %483 = or i64 %482, %481
  %484 = xor i64 %480, %483
  %485 = lshr i64 %460, 41
  %486 = shl i64 %460, 23
  %487 = or i64 %486, %485
  %488 = xor i64 %484, %487
  %489 = xor i64 %419, %378
  %490 = and i64 %460, %489
  %491 = xor i64 %490, %378
  %492 = or i32 %62, 10
  %493 = getelementptr i64, i64* %2, i32 %492
  %494 = load i64, i64* %493, align 8
  %495 = getelementptr [80 x i64], [80 x i64]* @Krnd, i32 0, i32 %492
  %496 = load i64, i64* %495, align 16
  %497 = add i64 %496, %494
  %498 = add i64 %497, %337
  %499 = add i64 %498, %491
  %500 = add i64 %499, %488
  %501 = add i64 %500, %354
  store i64 %501, i64* %57, align 8
  %502 = lshr i64 %477, 28
  %503 = shl i64 %477, 36
  %504 = or i64 %503, %502
  %505 = lshr i64 %477, 34
  %506 = shl i64 %477, 30
  %507 = or i64 %506, %505
  %508 = xor i64 %504, %507
  %509 = lshr i64 %477, 39
  %510 = shl i64 %477, 25
  %511 = or i64 %510, %509
  %512 = xor i64 %508, %511
  %513 = or i64 %436, %395
  %514 = and i64 %477, %513
  %515 = and i64 %436, %395
  %516 = or i64 %514, %515
  %517 = add i64 %512, %516
  %518 = add i64 %517, %500
  store i64 %518, i64* %53, align 8
  %519 = lshr i64 %501, 14
  %520 = shl i64 %501, 50
  %521 = or i64 %520, %519
  %522 = lshr i64 %501, 18
  %523 = shl i64 %501, 46
  %524 = or i64 %523, %522
  %525 = xor i64 %521, %524
  %526 = lshr i64 %501, 41
  %527 = shl i64 %501, 23
  %528 = or i64 %527, %526
  %529 = xor i64 %525, %528
  %530 = xor i64 %460, %419
  %531 = and i64 %501, %530
  %532 = xor i64 %531, %419
  %533 = or i32 %62, 11
  %534 = getelementptr i64, i64* %2, i32 %533
  %535 = load i64, i64* %534, align 8
  %536 = getelementptr [80 x i64], [80 x i64]* @Krnd, i32 0, i32 %533
  %537 = load i64, i64* %536, align 8
  %538 = add i64 %537, %535
  %539 = add i64 %538, %378
  %540 = add i64 %539, %532
  %541 = add i64 %540, %529
  %542 = add i64 %541, %395
  store i64 %542, i64* %3, align 8
  %543 = lshr i64 %518, 28
  %544 = shl i64 %518, 36
  %545 = or i64 %544, %543
  %546 = lshr i64 %518, 34
  %547 = shl i64 %518, 30
  %548 = or i64 %547, %546
  %549 = xor i64 %545, %548
  %550 = lshr i64 %518, 39
  %551 = shl i64 %518, 25
  %552 = or i64 %551, %550
  %553 = xor i64 %549, %552
  %554 = or i64 %477, %436
  %555 = and i64 %518, %554
  %556 = and i64 %477, %436
  %557 = or i64 %555, %556
  %558 = add i64 %553, %557
  %559 = add i64 %558, %541
  store i64 %559, i64* %52, align 8
  %560 = lshr i64 %542, 14
  %561 = shl i64 %542, 50
  %562 = or i64 %561, %560
  %563 = lshr i64 %542, 18
  %564 = shl i64 %542, 46
  %565 = or i64 %564, %563
  %566 = xor i64 %562, %565
  %567 = lshr i64 %542, 41
  %568 = shl i64 %542, 23
  %569 = or i64 %568, %567
  %570 = xor i64 %566, %569
  %571 = xor i64 %501, %460
  %572 = and i64 %542, %571
  %573 = xor i64 %572, %460
  %574 = or i32 %62, 12
  %575 = getelementptr i64, i64* %2, i32 %574
  %576 = load i64, i64* %575, align 8
  %577 = getelementptr [80 x i64], [80 x i64]* @Krnd, i32 0, i32 %574
  %578 = load i64, i64* %577, align 16
  %579 = add i64 %578, %576
  %580 = add i64 %579, %419
  %581 = add i64 %580, %573
  %582 = add i64 %581, %570
  %583 = add i64 %582, %436
  store i64 %583, i64* %55, align 8
  %584 = lshr i64 %559, 28
  %585 = shl i64 %559, 36
  %586 = or i64 %585, %584
  %587 = lshr i64 %559, 34
  %588 = shl i64 %559, 30
  %589 = or i64 %588, %587
  %590 = xor i64 %586, %589
  %591 = lshr i64 %559, 39
  %592 = shl i64 %559, 25
  %593 = or i64 %592, %591
  %594 = xor i64 %590, %593
  %595 = or i64 %518, %477
  %596 = and i64 %559, %595
  %597 = and i64 %518, %477
  %598 = or i64 %596, %597
  %599 = add i64 %594, %598
  %600 = add i64 %599, %582
  store i64 %600, i64* %56, align 8
  %601 = lshr i64 %583, 14
  %602 = shl i64 %583, 50
  %603 = or i64 %602, %601
  %604 = lshr i64 %583, 18
  %605 = shl i64 %583, 46
  %606 = or i64 %605, %604
  %607 = xor i64 %603, %606
  %608 = lshr i64 %583, 41
  %609 = shl i64 %583, 23
  %610 = or i64 %609, %608
  %611 = xor i64 %607, %610
  %612 = xor i64 %542, %501
  %613 = and i64 %583, %612
  %614 = xor i64 %613, %501
  %615 = or i32 %62, 13
  %616 = getelementptr i64, i64* %2, i32 %615
  %617 = load i64, i64* %616, align 8
  %618 = getelementptr [80 x i64], [80 x i64]* @Krnd, i32 0, i32 %615
  %619 = load i64, i64* %618, align 8
  %620 = add i64 %619, %617
  %621 = add i64 %620, %460
  %622 = add i64 %621, %614
  %623 = add i64 %622, %611
  %624 = add i64 %623, %477
  store i64 %624, i64* %54, align 8
  %625 = lshr i64 %600, 28
  %626 = shl i64 %600, 36
  %627 = or i64 %626, %625
  %628 = lshr i64 %600, 34
  %629 = shl i64 %600, 30
  %630 = or i64 %629, %628
  %631 = xor i64 %627, %630
  %632 = lshr i64 %600, 39
  %633 = shl i64 %600, 25
  %634 = or i64 %633, %632
  %635 = xor i64 %631, %634
  %636 = or i64 %559, %518
  %637 = and i64 %600, %636
  %638 = and i64 %559, %518
  %639 = or i64 %637, %638
  %640 = add i64 %635, %639
  %641 = add i64 %640, %623
  store i64 %641, i64* %58, align 8
  %642 = lshr i64 %624, 14
  %643 = shl i64 %624, 50
  %644 = or i64 %643, %642
  %645 = lshr i64 %624, 18
  %646 = shl i64 %624, 46
  %647 = or i64 %646, %645
  %648 = xor i64 %644, %647
  %649 = lshr i64 %624, 41
  %650 = shl i64 %624, 23
  %651 = or i64 %650, %649
  %652 = xor i64 %648, %651
  %653 = xor i64 %583, %542
  %654 = and i64 %624, %653
  %655 = xor i64 %654, %542
  %656 = or i32 %62, 14
  %657 = getelementptr i64, i64* %2, i32 %656
  %658 = load i64, i64* %657, align 8
  %659 = getelementptr [80 x i64], [80 x i64]* @Krnd, i32 0, i32 %656
  %660 = load i64, i64* %659, align 16
  %661 = add i64 %660, %658
  %662 = add i64 %661, %501
  %663 = add i64 %662, %655
  %664 = add i64 %663, %652
  %665 = add i64 %664, %518
  store i64 %665, i64* %53, align 8
  %666 = lshr i64 %641, 28
  %667 = shl i64 %641, 36
  %668 = or i64 %667, %666
  %669 = lshr i64 %641, 34
  %670 = shl i64 %641, 30
  %671 = or i64 %670, %669
  %672 = xor i64 %668, %671
  %673 = lshr i64 %641, 39
  %674 = shl i64 %641, 25
  %675 = or i64 %674, %673
  %676 = xor i64 %672, %675
  %677 = or i64 %600, %559
  %678 = and i64 %641, %677
  %679 = and i64 %600, %559
  %680 = or i64 %678, %679
  %681 = add i64 %676, %680
  %682 = add i64 %681, %664
  store i64 %682, i64* %57, align 8
  %683 = lshr i64 %665, 14
  %684 = shl i64 %665, 50
  %685 = or i64 %684, %683
  %686 = lshr i64 %665, 18
  %687 = shl i64 %665, 46
  %688 = or i64 %687, %686
  %689 = xor i64 %685, %688
  %690 = lshr i64 %665, 41
  %691 = shl i64 %665, 23
  %692 = or i64 %691, %690
  %693 = xor i64 %689, %692
  %694 = xor i64 %624, %583
  %695 = and i64 %665, %694
  %696 = xor i64 %695, %583
  %697 = or i32 %62, 15
  %698 = getelementptr i64, i64* %2, i32 %697
  %699 = load i64, i64* %698, align 8
  %700 = getelementptr [80 x i64], [80 x i64]* @Krnd, i32 0, i32 %697
  %701 = load i64, i64* %700, align 8
  %702 = add i64 %701, %699
  %703 = add i64 %702, %542
  %704 = add i64 %703, %696
  %705 = add i64 %704, %693
  %706 = add i64 %705, %559
  store i64 %706, i64* %52, align 8
  %707 = lshr i64 %682, 28
  %708 = shl i64 %682, 36
  %709 = or i64 %708, %707
  %710 = lshr i64 %682, 34
  %711 = shl i64 %682, 30
  %712 = or i64 %711, %710
  %713 = xor i64 %709, %712
  %714 = lshr i64 %682, 39
  %715 = shl i64 %682, 25
  %716 = or i64 %715, %714
  %717 = xor i64 %713, %716
  %718 = or i64 %641, %600
  %719 = and i64 %682, %718
  %720 = and i64 %641, %600
  %721 = or i64 %719, %720
  %722 = add i64 %717, %721
  %723 = add i64 %722, %705
  store i64 %723, i64* %3, align 8
  %724 = icmp eq i32 %62, 64
  br i1 %724, label %1165, label %725

725:                                              ; preds = %60
  %726 = getelementptr i64, i64* %2, i32 %62
  %727 = load i64, i64* %657, align 8
  %728 = lshr i64 %727, 19
  %729 = shl i64 %727, 45
  %730 = or i64 %729, %728
  %731 = lshr i64 %727, 61
  %732 = shl i64 %727, 3
  %733 = or i64 %732, %731
  %734 = lshr i64 %727, 6
  %735 = xor i64 %733, %734
  %736 = xor i64 %735, %730
  %737 = load i64, i64* %452, align 8
  %738 = load i64, i64* %124, align 8
  %739 = lshr i64 %738, 1
  %740 = shl i64 %738, 63
  %741 = or i64 %740, %739
  %742 = lshr i64 %738, 8
  %743 = shl i64 %738, 56
  %744 = or i64 %743, %742
  %745 = lshr i64 %738, 7
  %746 = xor i64 %744, %745
  %747 = xor i64 %746, %741
  %748 = load i64, i64* %726, align 8
  %749 = add i64 %748, %737
  %750 = add i64 %749, %736
  %751 = add i64 %750, %747
  %752 = add nuw nsw i32 %62, 16
  %753 = getelementptr i64, i64* %2, i32 %752
  store i64 %751, i64* %753, align 8
  %754 = load i64, i64* %698, align 8
  %755 = lshr i64 %754, 19
  %756 = shl i64 %754, 45
  %757 = or i64 %756, %755
  %758 = lshr i64 %754, 61
  %759 = shl i64 %754, 3
  %760 = or i64 %759, %758
  %761 = lshr i64 %754, 6
  %762 = xor i64 %760, %761
  %763 = xor i64 %762, %757
  %764 = add nuw nsw i32 %123, 9
  %765 = getelementptr i64, i64* %2, i32 %764
  %766 = load i64, i64* %765, align 8
  %767 = add nuw nsw i32 %123, 1
  %768 = getelementptr i64, i64* %2, i32 %767
  %769 = load i64, i64* %768, align 8
  %770 = lshr i64 %769, 1
  %771 = shl i64 %769, 63
  %772 = or i64 %771, %770
  %773 = lshr i64 %769, 8
  %774 = shl i64 %769, 56
  %775 = or i64 %774, %773
  %776 = lshr i64 %769, 7
  %777 = xor i64 %775, %776
  %778 = xor i64 %777, %772
  %779 = add i64 %766, %738
  %780 = add i64 %779, %763
  %781 = add i64 %780, %778
  %782 = add nuw nsw i32 %123, 16
  %783 = getelementptr i64, i64* %2, i32 %782
  store i64 %781, i64* %783, align 8
  %784 = lshr i64 %751, 19
  %785 = shl i64 %751, 45
  %786 = or i64 %785, %784
  %787 = lshr i64 %751, 61
  %788 = shl i64 %751, 3
  %789 = or i64 %788, %787
  %790 = lshr i64 %751, 6
  %791 = xor i64 %789, %790
  %792 = xor i64 %791, %786
  %793 = load i64, i64* %534, align 8
  %794 = load i64, i64* %206, align 8
  %795 = lshr i64 %794, 1
  %796 = shl i64 %794, 63
  %797 = or i64 %796, %795
  %798 = lshr i64 %794, 8
  %799 = shl i64 %794, 56
  %800 = or i64 %799, %798
  %801 = lshr i64 %794, 7
  %802 = xor i64 %800, %801
  %803 = xor i64 %802, %797
  %804 = add i64 %769, %793
  %805 = add i64 %804, %792
  %806 = add i64 %805, %803
  %807 = add nuw nsw i32 %164, 16
  %808 = getelementptr i64, i64* %2, i32 %807
  store i64 %806, i64* %808, align 8
  %809 = lshr i64 %781, 19
  %810 = shl i64 %781, 45
  %811 = or i64 %810, %809
  %812 = lshr i64 %781, 61
  %813 = shl i64 %781, 3
  %814 = or i64 %813, %812
  %815 = lshr i64 %781, 6
  %816 = xor i64 %814, %815
  %817 = xor i64 %816, %811
  %818 = add nuw nsw i32 %205, 9
  %819 = getelementptr i64, i64* %2, i32 %818
  %820 = load i64, i64* %819, align 8
  %821 = add nuw nsw i32 %205, 1
  %822 = getelementptr i64, i64* %2, i32 %821
  %823 = load i64, i64* %822, align 8
  %824 = lshr i64 %823, 1
  %825 = shl i64 %823, 63
  %826 = or i64 %825, %824
  %827 = lshr i64 %823, 8
  %828 = shl i64 %823, 56
  %829 = or i64 %828, %827
  %830 = lshr i64 %823, 7
  %831 = xor i64 %829, %830
  %832 = xor i64 %831, %826
  %833 = add i64 %820, %794
  %834 = add i64 %833, %817
  %835 = add i64 %834, %832
  %836 = add nuw nsw i32 %205, 16
  %837 = getelementptr i64, i64* %2, i32 %836
  store i64 %835, i64* %837, align 8
  %838 = lshr i64 %806, 19
  %839 = shl i64 %806, 45
  %840 = or i64 %839, %838
  %841 = lshr i64 %806, 61
  %842 = shl i64 %806, 3
  %843 = or i64 %842, %841
  %844 = lshr i64 %806, 6
  %845 = xor i64 %843, %844
  %846 = xor i64 %845, %840
  %847 = load i64, i64* %616, align 8
  %848 = load i64, i64* %288, align 8
  %849 = lshr i64 %848, 1
  %850 = shl i64 %848, 63
  %851 = or i64 %850, %849
  %852 = lshr i64 %848, 8
  %853 = shl i64 %848, 56
  %854 = or i64 %853, %852
  %855 = lshr i64 %848, 7
  %856 = xor i64 %854, %855
  %857 = xor i64 %856, %851
  %858 = add i64 %823, %847
  %859 = add i64 %858, %846
  %860 = add i64 %859, %857
  %861 = add nuw nsw i32 %246, 16
  %862 = getelementptr i64, i64* %2, i32 %861
  store i64 %860, i64* %862, align 8
  %863 = lshr i64 %835, 19
  %864 = shl i64 %835, 45
  %865 = or i64 %864, %863
  %866 = lshr i64 %835, 61
  %867 = shl i64 %835, 3
  %868 = or i64 %867, %866
  %869 = lshr i64 %835, 6
  %870 = xor i64 %868, %869
  %871 = xor i64 %870, %865
  %872 = add nuw nsw i32 %287, 9
  %873 = getelementptr i64, i64* %2, i32 %872
  %874 = load i64, i64* %873, align 8
  %875 = add nuw nsw i32 %287, 1
  %876 = getelementptr i64, i64* %2, i32 %875
  %877 = load i64, i64* %876, align 8
  %878 = lshr i64 %877, 1
  %879 = shl i64 %877, 63
  %880 = or i64 %879, %878
  %881 = lshr i64 %877, 8
  %882 = shl i64 %877, 56
  %883 = or i64 %882, %881
  %884 = lshr i64 %877, 7
  %885 = xor i64 %883, %884
  %886 = xor i64 %885, %880
  %887 = add i64 %874, %848
  %888 = add i64 %887, %871
  %889 = add i64 %888, %886
  %890 = add nuw nsw i32 %287, 16
  %891 = getelementptr i64, i64* %2, i32 %890
  store i64 %889, i64* %891, align 8
  %892 = lshr i64 %860, 19
  %893 = shl i64 %860, 45
  %894 = or i64 %893, %892
  %895 = lshr i64 %860, 61
  %896 = shl i64 %860, 3
  %897 = or i64 %896, %895
  %898 = lshr i64 %860, 6
  %899 = xor i64 %897, %898
  %900 = xor i64 %899, %894
  %901 = load i64, i64* %370, align 8
  %902 = lshr i64 %901, 1
  %903 = shl i64 %901, 63
  %904 = or i64 %903, %902
  %905 = lshr i64 %901, 8
  %906 = shl i64 %901, 56
  %907 = or i64 %906, %905
  %908 = lshr i64 %901, 7
  %909 = xor i64 %907, %908
  %910 = xor i64 %909, %904
  %911 = add i64 %877, %754
  %912 = add i64 %911, %900
  %913 = add i64 %912, %910
  %914 = add nuw nsw i32 %328, 16
  %915 = getelementptr i64, i64* %2, i32 %914
  store i64 %913, i64* %915, align 8
  %916 = lshr i64 %889, 19
  %917 = shl i64 %889, 45
  %918 = or i64 %917, %916
  %919 = lshr i64 %889, 61
  %920 = shl i64 %889, 3
  %921 = or i64 %920, %919
  %922 = lshr i64 %889, 6
  %923 = xor i64 %921, %922
  %924 = xor i64 %923, %918
  %925 = add nuw nsw i32 %369, 9
  %926 = getelementptr i64, i64* %2, i32 %925
  %927 = load i64, i64* %926, align 8
  %928 = add nuw nsw i32 %369, 1
  %929 = getelementptr i64, i64* %2, i32 %928
  %930 = load i64, i64* %929, align 8
  %931 = lshr i64 %930, 1
  %932 = shl i64 %930, 63
  %933 = or i64 %932, %931
  %934 = lshr i64 %930, 8
  %935 = shl i64 %930, 56
  %936 = or i64 %935, %934
  %937 = lshr i64 %930, 7
  %938 = xor i64 %936, %937
  %939 = xor i64 %938, %933
  %940 = add i64 %927, %901
  %941 = add i64 %940, %924
  %942 = add i64 %941, %939
  %943 = add nuw nsw i32 %369, 16
  %944 = getelementptr i64, i64* %2, i32 %943
  store i64 %942, i64* %944, align 8
  %945 = lshr i64 %913, 19
  %946 = shl i64 %913, 45
  %947 = or i64 %946, %945
  %948 = lshr i64 %913, 61
  %949 = shl i64 %913, 3
  %950 = or i64 %949, %948
  %951 = lshr i64 %913, 6
  %952 = xor i64 %950, %951
  %953 = xor i64 %952, %947
  %954 = add nuw nsw i32 %410, 9
  %955 = getelementptr i64, i64* %2, i32 %954
  %956 = load i64, i64* %955, align 8
  %957 = lshr i64 %737, 1
  %958 = shl i64 %737, 63
  %959 = or i64 %958, %957
  %960 = lshr i64 %737, 8
  %961 = shl i64 %737, 56
  %962 = or i64 %961, %960
  %963 = lshr i64 %737, 7
  %964 = xor i64 %962, %963
  %965 = xor i64 %964, %959
  %966 = add i64 %956, %965
  %967 = add i64 %966, %930
  %968 = add i64 %967, %953
  %969 = add nuw nsw i32 %410, 16
  %970 = getelementptr i64, i64* %2, i32 %969
  store i64 %968, i64* %970, align 8
  %971 = lshr i64 %942, 19
  %972 = shl i64 %942, 45
  %973 = or i64 %972, %971
  %974 = lshr i64 %942, 61
  %975 = shl i64 %942, 3
  %976 = or i64 %975, %974
  %977 = lshr i64 %942, 6
  %978 = xor i64 %976, %977
  %979 = xor i64 %978, %973
  %980 = add nuw nsw i32 %451, 9
  %981 = getelementptr i64, i64* %2, i32 %980
  %982 = load i64, i64* %981, align 8
  %983 = add nuw nsw i32 %451, 1
  %984 = getelementptr i64, i64* %2, i32 %983
  %985 = load i64, i64* %984, align 8
  %986 = lshr i64 %985, 1
  %987 = shl i64 %985, 63
  %988 = or i64 %987, %986
  %989 = lshr i64 %985, 8
  %990 = shl i64 %985, 56
  %991 = or i64 %990, %989
  %992 = lshr i64 %985, 7
  %993 = xor i64 %991, %992
  %994 = xor i64 %993, %988
  %995 = add i64 %982, %737
  %996 = add i64 %995, %979
  %997 = add i64 %996, %994
  %998 = add nuw nsw i32 %451, 16
  %999 = getelementptr i64, i64* %2, i32 %998
  store i64 %997, i64* %999, align 8
  %1000 = lshr i64 %968, 19
  %1001 = shl i64 %968, 45
  %1002 = or i64 %1001, %1000
  %1003 = lshr i64 %968, 61
  %1004 = shl i64 %968, 3
  %1005 = or i64 %1004, %1003
  %1006 = lshr i64 %968, 6
  %1007 = xor i64 %1005, %1006
  %1008 = xor i64 %1007, %1002
  %1009 = add nuw nsw i32 %492, 9
  %1010 = getelementptr i64, i64* %2, i32 %1009
  %1011 = load i64, i64* %1010, align 8
  %1012 = lshr i64 %793, 1
  %1013 = shl i64 %793, 63
  %1014 = or i64 %1013, %1012
  %1015 = lshr i64 %793, 8
  %1016 = shl i64 %793, 56
  %1017 = or i64 %1016, %1015
  %1018 = lshr i64 %793, 7
  %1019 = xor i64 %1017, %1018
  %1020 = xor i64 %1019, %1014
  %1021 = add i64 %1011, %1020
  %1022 = add i64 %1021, %985
  %1023 = add i64 %1022, %1008
  %1024 = add nuw nsw i32 %492, 16
  %1025 = getelementptr i64, i64* %2, i32 %1024
  store i64 %1023, i64* %1025, align 8
  %1026 = lshr i64 %997, 19
  %1027 = shl i64 %997, 45
  %1028 = or i64 %1027, %1026
  %1029 = lshr i64 %997, 61
  %1030 = shl i64 %997, 3
  %1031 = or i64 %1030, %1029
  %1032 = lshr i64 %997, 6
  %1033 = xor i64 %1031, %1032
  %1034 = xor i64 %1033, %1028
  %1035 = add nuw nsw i32 %533, 9
  %1036 = getelementptr i64, i64* %2, i32 %1035
  %1037 = load i64, i64* %1036, align 8
  %1038 = add nuw nsw i32 %533, 1
  %1039 = getelementptr i64, i64* %2, i32 %1038
  %1040 = load i64, i64* %1039, align 8
  %1041 = lshr i64 %1040, 1
  %1042 = shl i64 %1040, 63
  %1043 = or i64 %1042, %1041
  %1044 = lshr i64 %1040, 8
  %1045 = shl i64 %1040, 56
  %1046 = or i64 %1045, %1044
  %1047 = lshr i64 %1040, 7
  %1048 = xor i64 %1046, %1047
  %1049 = xor i64 %1048, %1043
  %1050 = add i64 %1037, %793
  %1051 = add i64 %1050, %1034
  %1052 = add i64 %1051, %1049
  %1053 = add nuw nsw i32 %533, 16
  %1054 = getelementptr i64, i64* %2, i32 %1053
  store i64 %1052, i64* %1054, align 8
  %1055 = lshr i64 %1023, 19
  %1056 = shl i64 %1023, 45
  %1057 = or i64 %1056, %1055
  %1058 = lshr i64 %1023, 61
  %1059 = shl i64 %1023, 3
  %1060 = or i64 %1059, %1058
  %1061 = lshr i64 %1023, 6
  %1062 = xor i64 %1060, %1061
  %1063 = xor i64 %1062, %1057
  %1064 = add nuw nsw i32 %574, 9
  %1065 = getelementptr i64, i64* %2, i32 %1064
  %1066 = load i64, i64* %1065, align 8
  %1067 = lshr i64 %847, 1
  %1068 = shl i64 %847, 63
  %1069 = or i64 %1068, %1067
  %1070 = lshr i64 %847, 8
  %1071 = shl i64 %847, 56
  %1072 = or i64 %1071, %1070
  %1073 = lshr i64 %847, 7
  %1074 = xor i64 %1072, %1073
  %1075 = xor i64 %1074, %1069
  %1076 = add i64 %1066, %1075
  %1077 = add i64 %1076, %1040
  %1078 = add i64 %1077, %1063
  %1079 = add nuw nsw i32 %574, 16
  %1080 = getelementptr i64, i64* %2, i32 %1079
  store i64 %1078, i64* %1080, align 8
  %1081 = lshr i64 %1052, 19
  %1082 = shl i64 %1052, 45
  %1083 = or i64 %1082, %1081
  %1084 = lshr i64 %1052, 61
  %1085 = shl i64 %1052, 3
  %1086 = or i64 %1085, %1084
  %1087 = lshr i64 %1052, 6
  %1088 = xor i64 %1086, %1087
  %1089 = xor i64 %1088, %1083
  %1090 = add nuw nsw i32 %615, 9
  %1091 = getelementptr i64, i64* %2, i32 %1090
  %1092 = load i64, i64* %1091, align 8
  %1093 = add nuw nsw i32 %615, 1
  %1094 = getelementptr i64, i64* %2, i32 %1093
  %1095 = load i64, i64* %1094, align 8
  %1096 = lshr i64 %1095, 1
  %1097 = shl i64 %1095, 63
  %1098 = or i64 %1097, %1096
  %1099 = lshr i64 %1095, 8
  %1100 = shl i64 %1095, 56
  %1101 = or i64 %1100, %1099
  %1102 = lshr i64 %1095, 7
  %1103 = xor i64 %1101, %1102
  %1104 = xor i64 %1103, %1098
  %1105 = add i64 %1092, %847
  %1106 = add i64 %1105, %1089
  %1107 = add i64 %1106, %1104
  %1108 = add nuw nsw i32 %615, 16
  %1109 = getelementptr i64, i64* %2, i32 %1108
  store i64 %1107, i64* %1109, align 8
  %1110 = lshr i64 %1078, 19
  %1111 = shl i64 %1078, 45
  %1112 = or i64 %1111, %1110
  %1113 = lshr i64 %1078, 61
  %1114 = shl i64 %1078, 3
  %1115 = or i64 %1114, %1113
  %1116 = lshr i64 %1078, 6
  %1117 = xor i64 %1115, %1116
  %1118 = xor i64 %1117, %1112
  %1119 = add nuw nsw i32 %656, 9
  %1120 = getelementptr i64, i64* %2, i32 %1119
  %1121 = load i64, i64* %1120, align 8
  %1122 = lshr i64 %754, 1
  %1123 = shl i64 %754, 63
  %1124 = or i64 %1123, %1122
  %1125 = lshr i64 %754, 8
  %1126 = shl i64 %754, 56
  %1127 = or i64 %1126, %1125
  %1128 = lshr i64 %754, 7
  %1129 = xor i64 %1127, %1128
  %1130 = xor i64 %1129, %1124
  %1131 = add i64 %1130, %727
  %1132 = add i64 %1131, %1121
  %1133 = add i64 %1132, %1118
  %1134 = add nuw nsw i32 %656, 16
  %1135 = getelementptr i64, i64* %2, i32 %1134
  store i64 %1133, i64* %1135, align 8
  %1136 = lshr i64 %1107, 19
  %1137 = shl i64 %1107, 45
  %1138 = or i64 %1137, %1136
  %1139 = lshr i64 %1107, 61
  %1140 = shl i64 %1107, 3
  %1141 = or i64 %1140, %1139
  %1142 = lshr i64 %1107, 6
  %1143 = xor i64 %1141, %1142
  %1144 = xor i64 %1143, %1138
  %1145 = add nuw nsw i32 %697, 9
  %1146 = getelementptr i64, i64* %2, i32 %1145
  %1147 = load i64, i64* %1146, align 8
  %1148 = add nuw nsw i32 %697, 1
  %1149 = getelementptr i64, i64* %2, i32 %1148
  %1150 = load i64, i64* %1149, align 8
  %1151 = lshr i64 %1150, 1
  %1152 = shl i64 %1150, 63
  %1153 = or i64 %1152, %1151
  %1154 = lshr i64 %1150, 8
  %1155 = shl i64 %1150, 56
  %1156 = or i64 %1155, %1154
  %1157 = lshr i64 %1150, 7
  %1158 = xor i64 %1156, %1157
  %1159 = xor i64 %1158, %1153
  %1160 = add i64 %1147, %754
  %1161 = add i64 %1160, %1144
  %1162 = add i64 %1161, %1159
  %1163 = add nuw nsw i32 %697, 16
  %1164 = getelementptr i64, i64* %2, i32 %1163
  store i64 %1162, i64* %1164, align 8
  br label %60

1165:                                             ; preds = %60
  %1166 = load i64, i64* %0, align 8
  %1167 = add i64 %1166, %723
  store i64 %1167, i64* %0, align 8
  %1168 = load i64, i64* %57, align 8
  %1169 = getelementptr i64, i64* %0, i32 1
  %1170 = load i64, i64* %1169, align 8
  %1171 = add i64 %1170, %1168
  store i64 %1171, i64* %1169, align 8
  %1172 = load i64, i64* %58, align 8
  %1173 = getelementptr i64, i64* %0, i32 2
  %1174 = load i64, i64* %1173, align 8
  %1175 = add i64 %1174, %1172
  store i64 %1175, i64* %1173, align 8
  %1176 = load i64, i64* %56, align 8
  %1177 = getelementptr i64, i64* %0, i32 3
  %1178 = load i64, i64* %1177, align 8
  %1179 = add i64 %1178, %1176
  store i64 %1179, i64* %1177, align 8
  %1180 = load i64, i64* %52, align 8
  %1181 = getelementptr i64, i64* %0, i32 4
  %1182 = load i64, i64* %1181, align 8
  %1183 = add i64 %1182, %1180
  store i64 %1183, i64* %1181, align 8
  %1184 = load i64, i64* %53, align 8
  %1185 = getelementptr i64, i64* %0, i32 5
  %1186 = load i64, i64* %1185, align 8
  %1187 = add i64 %1186, %1184
  store i64 %1187, i64* %1185, align 8
  %1188 = load i64, i64* %54, align 8
  %1189 = getelementptr i64, i64* %0, i32 6
  %1190 = load i64, i64* %1189, align 8
  %1191 = add i64 %1190, %1188
  store i64 %1191, i64* %1189, align 8
  %1192 = load i64, i64* %55, align 8
  %1193 = getelementptr i64, i64* %0, i32 7
  %1194 = load i64, i64* %1193, align 8
  %1195 = add i64 %1194, %1192
  store i64 %1195, i64* %1193, align 8
  ret void
}

declare void @sodium_memzero(i8* %0, i32 %1) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #1

; Function Attrs: nounwind
define i32 @crypto_hash_sha512_final(%struct.crypto_hash_sha512_state* nonnull %0, i8* nocapture nonnull %1) local_unnamed_addr #0 {
  %3 = alloca [88 x i64], align 16
  %4 = bitcast [88 x i64]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 704, i8* nonnull %4) #4
  %5 = getelementptr inbounds [88 x i64], [88 x i64]* %3, i32 0, i32 0
  %6 = getelementptr %struct.crypto_hash_sha512_state, %struct.crypto_hash_sha512_state* %0, i32 0, i32 1, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = lshr i64 %7, 3
  %9 = trunc i64 %8 to i32
  %10 = and i32 %9, 127
  %11 = icmp ult i32 %10, 112
  br i1 %11, label %19, label %12

12:                                               ; preds = %2
  %13 = sub nuw nsw i32 128, %10
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %26, label %15

15:                                               ; preds = %12
  %16 = getelementptr %struct.crypto_hash_sha512_state, %struct.crypto_hash_sha512_state* %0, i32 0, i32 0, i32 10
  %17 = bitcast i64* %16 to i8*
  %18 = getelementptr i8, i8* %17, i32 %10
  tail call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %18, i8* align 16 getelementptr inbounds (<{ i8, [127 x i8] }>, <{ i8, [127 x i8] }>* @PAD, i32 0, i32 0), i32 %13, i1 false) #4
  br label %26

19:                                               ; preds = %2
  %20 = sub nuw nsw i32 112, %10
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %31, label %22

22:                                               ; preds = %19
  %23 = getelementptr %struct.crypto_hash_sha512_state, %struct.crypto_hash_sha512_state* %0, i32 0, i32 0, i32 10
  %24 = bitcast i64* %23 to i8*
  %25 = getelementptr i8, i8* %24, i32 %10
  tail call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %25, i8* align 16 getelementptr inbounds (<{ i8, [127 x i8] }>, <{ i8, [127 x i8] }>* @PAD, i32 0, i32 0), i32 %20, i1 false) #4
  br label %31

26:                                               ; preds = %15, %12
  %27 = getelementptr inbounds %struct.crypto_hash_sha512_state, %struct.crypto_hash_sha512_state* %0, i32 0, i32 0, i32 0
  %28 = getelementptr inbounds %struct.crypto_hash_sha512_state, %struct.crypto_hash_sha512_state* %0, i32 0, i32 2, i32 0
  %29 = getelementptr inbounds [88 x i64], [88 x i64]* %3, i32 0, i32 80
  call fastcc void @SHA512_Transform(i64* nonnull %27, i8* nonnull %28, i64* nonnull %5, i64* nonnull %29) #4
  call void @llvm.memset.p0i8.i32(i8* nonnull align 8 dereferenceable(112) %28, i8 0, i32 112, i1 false) #4
  %30 = load i64, i64* %6, align 8
  br label %31

31:                                               ; preds = %19, %22, %26
  %32 = phi i64 [ %7, %22 ], [ %7, %19 ], [ %30, %26 ]
  %33 = getelementptr %struct.crypto_hash_sha512_state, %struct.crypto_hash_sha512_state* %0, i32 0, i32 2, i32 112
  %34 = getelementptr %struct.crypto_hash_sha512_state, %struct.crypto_hash_sha512_state* %0, i32 0, i32 1, i32 0
  %35 = load i64, i64* %34, align 8
  %36 = trunc i64 %35 to i8
  %37 = getelementptr %struct.crypto_hash_sha512_state, %struct.crypto_hash_sha512_state* %0, i32 0, i32 2, i32 119
  store i8 %36, i8* %37, align 1
  %38 = lshr i64 %35, 8
  %39 = trunc i64 %38 to i8
  %40 = getelementptr %struct.crypto_hash_sha512_state, %struct.crypto_hash_sha512_state* %0, i32 0, i32 2, i32 118
  store i8 %39, i8* %40, align 1
  %41 = lshr i64 %35, 16
  %42 = trunc i64 %41 to i8
  %43 = getelementptr %struct.crypto_hash_sha512_state, %struct.crypto_hash_sha512_state* %0, i32 0, i32 2, i32 117
  store i8 %42, i8* %43, align 1
  %44 = lshr i64 %35, 24
  %45 = trunc i64 %44 to i8
  %46 = getelementptr %struct.crypto_hash_sha512_state, %struct.crypto_hash_sha512_state* %0, i32 0, i32 2, i32 116
  store i8 %45, i8* %46, align 1
  %47 = lshr i64 %35, 32
  %48 = trunc i64 %47 to i8
  %49 = getelementptr %struct.crypto_hash_sha512_state, %struct.crypto_hash_sha512_state* %0, i32 0, i32 2, i32 115
  store i8 %48, i8* %49, align 1
  %50 = lshr i64 %35, 40
  %51 = trunc i64 %50 to i8
  %52 = getelementptr %struct.crypto_hash_sha512_state, %struct.crypto_hash_sha512_state* %0, i32 0, i32 2, i32 114
  store i8 %51, i8* %52, align 1
  %53 = lshr i64 %35, 48
  %54 = trunc i64 %53 to i8
  %55 = getelementptr %struct.crypto_hash_sha512_state, %struct.crypto_hash_sha512_state* %0, i32 0, i32 2, i32 113
  store i8 %54, i8* %55, align 1
  %56 = lshr i64 %35, 56
  %57 = trunc i64 %56 to i8
  store i8 %57, i8* %33, align 1
  %58 = getelementptr %struct.crypto_hash_sha512_state, %struct.crypto_hash_sha512_state* %0, i32 0, i32 2, i32 120
  %59 = trunc i64 %32 to i8
  %60 = getelementptr %struct.crypto_hash_sha512_state, %struct.crypto_hash_sha512_state* %0, i32 0, i32 2, i32 127
  store i8 %59, i8* %60, align 1
  %61 = lshr i64 %32, 8
  %62 = trunc i64 %61 to i8
  %63 = getelementptr %struct.crypto_hash_sha512_state, %struct.crypto_hash_sha512_state* %0, i32 0, i32 2, i32 126
  store i8 %62, i8* %63, align 1
  %64 = lshr i64 %32, 16
  %65 = trunc i64 %64 to i8
  %66 = getelementptr %struct.crypto_hash_sha512_state, %struct.crypto_hash_sha512_state* %0, i32 0, i32 2, i32 125
  store i8 %65, i8* %66, align 1
  %67 = lshr i64 %32, 24
  %68 = trunc i64 %67 to i8
  %69 = getelementptr %struct.crypto_hash_sha512_state, %struct.crypto_hash_sha512_state* %0, i32 0, i32 2, i32 124
  store i8 %68, i8* %69, align 1
  %70 = lshr i64 %32, 32
  %71 = trunc i64 %70 to i8
  %72 = getelementptr %struct.crypto_hash_sha512_state, %struct.crypto_hash_sha512_state* %0, i32 0, i32 2, i32 123
  store i8 %71, i8* %72, align 1
  %73 = lshr i64 %32, 40
  %74 = trunc i64 %73 to i8
  %75 = getelementptr %struct.crypto_hash_sha512_state, %struct.crypto_hash_sha512_state* %0, i32 0, i32 2, i32 122
  store i8 %74, i8* %75, align 1
  %76 = lshr i64 %32, 48
  %77 = trunc i64 %76 to i8
  %78 = getelementptr %struct.crypto_hash_sha512_state, %struct.crypto_hash_sha512_state* %0, i32 0, i32 2, i32 121
  store i8 %77, i8* %78, align 1
  %79 = lshr i64 %32, 56
  %80 = trunc i64 %79 to i8
  store i8 %80, i8* %58, align 1
  %81 = getelementptr inbounds %struct.crypto_hash_sha512_state, %struct.crypto_hash_sha512_state* %0, i32 0, i32 0, i32 0
  %82 = getelementptr inbounds %struct.crypto_hash_sha512_state, %struct.crypto_hash_sha512_state* %0, i32 0, i32 2, i32 0
  %83 = getelementptr inbounds [88 x i64], [88 x i64]* %3, i32 0, i32 80
  call fastcc void @SHA512_Transform(i64* nonnull %81, i8* nonnull %82, i64* nonnull %5, i64* nonnull %83) #4
  br label %84

84:                                               ; preds = %84, %31
  %85 = phi i32 [ %112, %84 ], [ 0, %31 ]
  %86 = shl i32 %85, 3
  %87 = getelementptr i8, i8* %1, i32 %86
  %88 = getelementptr %struct.crypto_hash_sha512_state, %struct.crypto_hash_sha512_state* %0, i32 0, i32 0, i32 %85
  %89 = load i64, i64* %88, align 8
  %90 = trunc i64 %89 to i8
  %91 = getelementptr i8, i8* %87, i32 7
  store i8 %90, i8* %91, align 1
  %92 = lshr i64 %89, 8
  %93 = trunc i64 %92 to i8
  %94 = getelementptr i8, i8* %87, i32 6
  store i8 %93, i8* %94, align 1
  %95 = lshr i64 %89, 16
  %96 = trunc i64 %95 to i8
  %97 = getelementptr i8, i8* %87, i32 5
  store i8 %96, i8* %97, align 1
  %98 = lshr i64 %89, 24
  %99 = trunc i64 %98 to i8
  %100 = getelementptr i8, i8* %87, i32 4
  store i8 %99, i8* %100, align 1
  %101 = lshr i64 %89, 32
  %102 = trunc i64 %101 to i8
  %103 = getelementptr i8, i8* %87, i32 3
  store i8 %102, i8* %103, align 1
  %104 = lshr i64 %89, 40
  %105 = trunc i64 %104 to i8
  %106 = getelementptr i8, i8* %87, i32 2
  store i8 %105, i8* %106, align 1
  %107 = lshr i64 %89, 48
  %108 = trunc i64 %107 to i8
  %109 = getelementptr i8, i8* %87, i32 1
  store i8 %108, i8* %109, align 1
  %110 = lshr i64 %89, 56
  %111 = trunc i64 %110 to i8
  store i8 %111, i8* %87, align 1
  %112 = add nuw nsw i32 %85, 1
  %113 = icmp eq i32 %112, 8
  br i1 %113, label %114, label %84

114:                                              ; preds = %84
  call void @sodium_memzero(i8* nonnull %4, i32 704) #4
  %115 = bitcast %struct.crypto_hash_sha512_state* %0 to i8*
  call void @sodium_memzero(i8* nonnull %115, i32 208) #4
  call void @llvm.lifetime.end.p0i8(i64 704, i8* nonnull %4) #4
  ret i32 0
}

; Function Attrs: nounwind
define i32 @crypto_hash_sha512(i8* nocapture nonnull %0, i8* nocapture readonly %1, i64 %2) local_unnamed_addr #0 {
  %4 = alloca %struct.crypto_hash_sha512_state, align 8
  %5 = bitcast %struct.crypto_hash_sha512_state* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 208, i8* nonnull %5) #4
  %6 = getelementptr inbounds %struct.crypto_hash_sha512_state, %struct.crypto_hash_sha512_state* %4, i32 0, i32 1, i32 0
  %7 = bitcast i64* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %7, i8 0, i64 16, i1 false) #4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 8 dereferenceable(64) %5, i8* nonnull align 16 dereferenceable(64) bitcast ([8 x i64]* @crypto_hash_sha512_init.sha512_initial_state to i8*), i32 64, i1 false) #4
  %8 = call i32 @crypto_hash_sha512_update(%struct.crypto_hash_sha512_state* %4, i8* %1, i64 %2)
  %9 = call i32 @crypto_hash_sha512_final(%struct.crypto_hash_sha512_state* %4, i8* %0)
  call void @llvm.lifetime.end.p0i8(i64 208, i8* nonnull %5) #4
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #3

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly %0, i8 %1, i64 %2, i1 immarg %3) #3

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn writeonly }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %6 = icmp eq i64 %2, 0
; Looking for a replacement for:
%0:i64 = var
%1:i1 = eq 0:i64, %0
infer %1

; *****
; For LLVM instruction:
;  %10 = load i64, i64* %9, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = lshr i64 %10, 3
; Looking for a replacement for:
%0:i64 = var
%1:i64 = lshr %0, 3:i64
infer %1 (demandedBits=0000000000000000000000000000000000000000000000000000000001111111)

; *****
; For LLVM instruction:
;  %12 = and i64 %11, 127
; Looking for a replacement for:
%0:i64 = var
%1:i64 = lshr %0, 3:i64 (hasExternalUses)
%2:i64 = and 127:i64, %1
infer %2

; *****
; For LLVM instruction:
;  %13 = shl i64 %2, 3
; Looking for a replacement for:
%0:i64 = var
%1:i1 = eq 0:i64, %0
pc %1 0:i1
%2:i64 = shl %0, 3:i64
infer %2

; *****
; For LLVM instruction:
;  %14 = lshr i64 %2, 61
; Looking for a replacement for:
%0:i64 = var
%1:i1 = eq 0:i64, %0
pc %1 0:i1
%2:i64 = lshr %0, 61:i64
infer %2

; *****
; For LLVM instruction:
;  %15 = add i64 %10, %13
; Looking for a replacement for:
%0:i64 = var
%1:i1 = eq 0:i64, %0
pc %1 0:i1
%2:i64 = var
%3:i64 = shl %0, 3:i64 (hasExternalUses)
%4:i64 = add %2, %3
infer %4

; *****
; For LLVM instruction:
;  %16 = icmp ult i64 %15, %13
; Looking for a replacement for:
%0:i64 = var
%1:i1 = eq 0:i64, %0
pc %1 0:i1
%2:i64 = var
%3:i64 = shl %0, 3:i64
%4:i64 = add %2, %3 (hasExternalUses)
%5:i1 = ult %4, %3
infer %5

; *****
; For LLVM instruction:
;  %18 = load i64, i64* %17, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = add i64 %18, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = add 1:i64, %0
infer %1

; *****
; For LLVM instruction:
;  %22 = phi i64 [ %20, %19 ], [ %18, %7 ]
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = add 1:i64, %1 (hasExternalUses)
%3:i64 = phi %0, %2, %1
infer %3

; *****
; For LLVM instruction:
;  %24 = add i64 %22, %14
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = add 1:i64, %1
%3:i64 = phi %0, %2, %1
%4:i64 = var
%5:i64 = lshr %4, 61:i64
%6:i64 = add %3, %5
infer %6

; *****
; For LLVM instruction:
;  %25 = sub nuw nsw i64 128, %12
; Looking for a replacement for:
%0:i64 = var
%1:i64 = lshr %0, 3:i64 (hasExternalUses)
%2:i64 = and 127:i64, %1 (hasExternalUses)
%3:i64 = subnw 128:i64, %2
infer %3

; *****
; For LLVM instruction:
;  %26 = icmp ugt i64 %25, %2
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = lshr %1, 3:i64 (hasExternalUses)
%3:i64 = and 127:i64, %2 (hasExternalUses)
%4:i64 = subnw 128:i64, %3 (hasExternalUses)
%5:i1 = ult %0, %4
infer %5

; *****
; For LLVM instruction:
;  %28 = phi i64 [ %35, %27 ], [ 0, %21 ]
; Looking for a replacement for:
%0:i64 = var (range=[0,-1))
infer %0

; *****
; For LLVM instruction:
;  %29 = trunc i64 %28 to i32
; Looking for a replacement for:
%0:i64 = var (range=[0,-1))
%1:i32 = trunc %0
infer %1

; *****
; For LLVM instruction:
;  %31 = load i8, i8* %30, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %32 = add i64 %28, %12
; Looking for a replacement for:
%0:i64 = var (range=[0,-1))
%1:i64 = var
%2:i64 = lshr %1, 3:i64 (hasExternalUses)
%3:i64 = and 127:i64, %2 (hasExternalUses)
%4:i64 = add %0, %3
infer %4 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %33 = trunc i64 %32 to i32
; Looking for a replacement for:
%0:i64 = var (range=[0,-1))
%1:i64 = var
%2:i64 = lshr %1, 3:i64 (hasExternalUses)
%3:i64 = and 127:i64, %2 (hasExternalUses)
%4:i64 = add %0, %3
%5:i32 = trunc %4
infer %5

; *****
; For LLVM instruction:
;  %35 = add nuw i64 %28, 1
; Looking for a replacement for:
%0:i64 = var (range=[0,-1))
%1:i64 = addnuw 1:i64, %0
infer %1

; *****
; For LLVM instruction:
;  %36 = icmp ult i64 %35, %2
; Looking for a replacement for:
%0:i64 = var (range=[0,-1))
%1:i64 = addnuw 1:i64, %0 (hasExternalUses)
%2:i64 = var
%3:i1 = ult %1, %2
infer %3

; *****
; For LLVM instruction:
;  %38 = phi i64 [ %45, %37 ], [ 0, %21 ]
; Looking for a replacement for:
%0:i64 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,128))
infer %0

; *****
; For LLVM instruction:
;  %39 = trunc i64 %38 to i32
; Looking for a replacement for:
%0:i64 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,128))
%1:i32 = trunc %0
infer %1

; *****
; For LLVM instruction:
;  %41 = load i8, i8* %40, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %42 = add nuw nsw i64 %38, %12
; Looking for a replacement for:
%0:i64 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,128))
%1:i64 = var
%2:i64 = lshr %1, 3:i64 (hasExternalUses)
%3:i64 = and 127:i64, %2 (hasExternalUses)
%4:i64 = addnw %0, %3
infer %4 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %43 = trunc i64 %42 to i32
; Looking for a replacement for:
%0:i64 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,128))
%1:i64 = var
%2:i64 = lshr %1, 3:i64 (hasExternalUses)
%3:i64 = and 127:i64, %2 (hasExternalUses)
%4:i64 = addnw %0, %3
%5:i32 = trunc %4
infer %5

; *****
; For LLVM instruction:
;  %45 = add nuw nsw i64 %38, 1
; Looking for a replacement for:
%0:i64 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,128))
%1:i64 = addnw 1:i64, %0
infer %1

; *****
; For LLVM instruction:
;  %46 = icmp eq i64 %45, %25
; Looking for a replacement for:
%0:i64 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,128))
%1:i64 = addnw 1:i64, %0 (hasExternalUses)
%2:i64 = var
%3:i64 = lshr %2, 3:i64 (hasExternalUses)
%4:i64 = and 127:i64, %3 (hasExternalUses)
%5:i64 = subnw 128:i64, %4 (hasExternalUses)
%6:i1 = eq %1, %5
infer %6

; *****
; For LLVM instruction:
;  %52 = trunc i64 %25 to i32
; Looking for a replacement for:
%0:i64 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,128))
%1:i64 = addnw 1:i64, %0 (hasExternalUses)
%2:i64 = var
%3:i64 = lshr %2, 3:i64 (hasExternalUses)
%4:i64 = and 127:i64, %3 (hasExternalUses)
%5:i64 = subnw 128:i64, %4 (hasExternalUses)
%6:i1 = eq %1, %5
pc %6 1:i1
%7:i32 = trunc %5
infer %7

; *****
; For LLVM instruction:
;  %54 = sub i64 %2, %25
; Looking for a replacement for:
%0:i64 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,128))
%1:i64 = addnw 1:i64, %0 (hasExternalUses)
%2:i64 = var
%3:i64 = lshr %2, 3:i64 (hasExternalUses)
%4:i64 = and 127:i64, %3 (hasExternalUses)
%5:i64 = subnw 128:i64, %4 (hasExternalUses)
%6:i1 = eq %1, %5
pc %6 1:i1
%7:i64 = var
%8:i64 = sub %7, %5
infer %8

; *****
; For LLVM instruction:
;  %55 = icmp ugt i64 %54, 127
; Looking for a replacement for:
%0:i64 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,128))
%1:i64 = addnw 1:i64, %0 (hasExternalUses)
%2:i64 = var
%3:i64 = lshr %2, 3:i64 (hasExternalUses)
%4:i64 = and 127:i64, %3 (hasExternalUses)
%5:i64 = subnw 128:i64, %4 (hasExternalUses)
%6:i1 = eq %1, %5
pc %6 1:i1
%7:i64 = var
%8:i64 = sub %7, %5 (hasExternalUses)
%9:i1 = ult 127:i64, %8
infer %9

; *****
; For LLVM instruction:
;  %57 = add i64 %11, %2
; Looking for a replacement for:
%0:i64 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,128))
%1:i64 = addnw 1:i64, %0 (hasExternalUses)
%2:i64 = var
%3:i64 = lshr %2, 3:i64 (hasExternalUses)
%4:i64 = and 127:i64, %3 (hasExternalUses)
%5:i64 = subnw 128:i64, %4 (hasExternalUses)
%6:i1 = eq %1, %5
pc %6 1:i1
%7:i64 = var
%8:i64 = sub %7, %5 (hasExternalUses)
%9:i1 = ult 127:i64, %8
pc %9 1:i1
%10:i64 = add %7, %3
infer %10 (demandedBits=0000000000000000000000000000000000000000000000000000000001111111)

; *****
; For LLVM instruction:
;  %59 = and i64 %57, 127
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = lshr %1, 3:i64 (hasExternalUses)
%3:i64 = add %0, %2
%4:i64 = and 127:i64, %3
infer %4

; *****
; For LLVM instruction:
;  %61 = phi i64 [ %54, %47 ], [ %59, %58 ]
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = var
%3:i64 = lshr %2, 3:i64
%4:i64 = and 127:i64, %3 (hasExternalUses)
%5:i64 = subnw 128:i64, %4 (hasExternalUses)
%6:i64 = sub %1, %5 (hasExternalUses)
%7:i64 = add %1, %3
%8:i64 = and 127:i64, %7
%9:i64 = phi %0, %6, %8
infer %9

; *****
; For LLVM instruction:
;  %63 = icmp eq i64 %61, 0
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = var
%3:i64 = lshr %2, 3:i64
%4:i64 = and 127:i64, %3
%5:i64 = subnw 128:i64, %4
%6:i64 = sub %1, %5
%7:i64 = add %1, %3
%8:i64 = and 127:i64, %7
%9:i64 = phi %0, %6, %8
%10:i1 = eq 0:i64, %9
infer %10

; *****
; For LLVM instruction:
;  %66 = phi i64 [ %68, %64 ], [ %54, %56 ]
; Looking for a replacement for:
%0:i64 = var (range=[128,0))
infer %0

; *****
; For LLVM instruction:
;  %68 = add i64 %66, -128
; Looking for a replacement for:
%0:i64 = var (range=[128,0))
%1:i64 = add 18446744073709551488:i64, %0
infer %1

; *****
; For LLVM instruction:
;  %69 = icmp ugt i64 %68, 127
; Looking for a replacement for:
%0:i64 = var (range=[128,0))
%1:i64 = add 18446744073709551488:i64, %0 (hasExternalUses)
%2:i1 = ult 127:i64, %1
infer %2

; *****
; For LLVM instruction:
;  %71 = phi i64 [ %76, %70 ], [ 0, %60 ]
; Looking for a replacement for:
%0:i64 = var (range=[0,-1))
infer %0

; *****
; For LLVM instruction:
;  %72 = trunc i64 %71 to i32
; Looking for a replacement for:
%0:i64 = var (range=[0,-1))
%1:i32 = trunc %0
infer %1

; *****
; For LLVM instruction:
;  %74 = load i8, i8* %73, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %76 = add nuw i64 %71, 1
; Looking for a replacement for:
%0:i64 = var (range=[0,-1))
%1:i64 = addnuw 1:i64, %0
infer %1

; *****
; For LLVM instruction:
;  %77 = icmp eq i64 %76, %61
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = var
%3:i64 = lshr %2, 3:i64
%4:i64 = and 127:i64, %3
%5:i64 = subnw 128:i64, %4
%6:i64 = sub %1, %5
%7:i64 = add %1, %3
%8:i64 = and 127:i64, %7
%9:i64 = phi %0, %6, %8
%10:i64 = var (range=[0,-1))
%11:i64 = addnuw 1:i64, %10 (hasExternalUses)
%12:i1 = eq %9, %11
infer %12
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i1 = eq 0:i64, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i64 = var
infer %0


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = lshr %0, 3:i64
infer %1 (demandedBits=0000000000000000000000000000000000000000000000000000000001111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 127
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = lshr %0, 3:i64 (hasExternalUses)
%2:i64 = and 127:i64, %1
infer %2


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 127
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i1 = eq 0:i64, %0
pc %1 0:i1
%2:i64 = shl %0, 3:i64
infer %2


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -8
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 65536
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i1 = eq 0:i64, %0
pc %1 0:i1
%2:i64 = lshr %0, 61:i64
infer %2


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 7
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i1 = eq 0:i64, %0
pc %1 0:i1
%2:i64 = var
%3:i64 = shl %0, 3:i64 (hasExternalUses)
%4:i64 = add %2, %3
infer %4


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -8
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -9
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i1 = eq 0:i64, %0
pc %1 0:i1
%2:i64 = var
%3:i64 = shl %0, 3:i64
%4:i64 = add %2, %3 (hasExternalUses)
%5:i1 = ult %4, %3
infer %5


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = add 1:i64, %0
infer %1


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = add 1:i64, %1 (hasExternalUses)
%3:i64 = phi %0, %2, %1
infer %3


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = add 1:i64, %1
%3:i64 = phi %0, %2, %1
%4:i64 = var
%5:i64 = lshr %4, 61:i64
%6:i64 = add %3, %5
infer %6


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i64 = var
%1:i64 = lshr %0, 61:i64

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i64 = var
%1:i64 = add 1:i64, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0 = block 2
%1:i64 = var
%2:i64 = add 1:i64, %1 (hasExternalUses)
%3:i64 = phi %0, %2, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 6 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = lshr %0, 3:i64 (hasExternalUses)
%2:i64 = and 127:i64, %1 (hasExternalUses)
%3:i64 = subnw 128:i64, %2
infer %3


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 128
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 96
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = lshr %1, 3:i64 (hasExternalUses)
%3:i64 = and 127:i64, %2 (hasExternalUses)
%4:i64 = subnw 128:i64, %3 (hasExternalUses)
%5:i1 = ult %0, %4
infer %5


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i64 = var (range=[0,-1))
infer %0


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -524289
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var (range=[0,-1))
%1:i32 = trunc %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i64 = var (range=[0,-1))
%1:i64 = var
%2:i64 = lshr %1, 3:i64 (hasExternalUses)
%3:i64 = and 127:i64, %2 (hasExternalUses)
%4:i64 = add %0, %3
infer %4 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var (range=[0,-1))

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i64 = var (range=[0,-1))
%1:i64 = var
%2:i64 = lshr %1, 3:i64 (hasExternalUses)
%3:i64 = and 127:i64, %2 (hasExternalUses)
%4:i64 = add %0, %3
%5:i32 = trunc %4
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var (range=[0,-1))
%1:i64 = addnuw 1:i64, %0
infer %1


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4611686018427387905
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var (range=[0,-1))

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i64 = var (range=[0,-1))
%1:i64 = addnuw 1:i64, %0 (hasExternalUses)
%2:i64 = var
%3:i1 = ult %1, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i64 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,128))
infer %0


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 32
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,128))
%1:i32 = trunc %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 32
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i64 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,128))
%1:i64 = var
%2:i64 = lshr %1, 3:i64 (hasExternalUses)
%3:i64 = and 127:i64, %2 (hasExternalUses)
%4:i64 = addnw %0, %3
infer %4 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 16
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,128))

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i64 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,128))
%1:i64 = var
%2:i64 = lshr %1, 3:i64 (hasExternalUses)
%3:i64 = and 127:i64, %2 (hasExternalUses)
%4:i64 = addnw %0, %3
%5:i32 = trunc %4
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 16
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,128))
%1:i64 = addnw 1:i64, %0
infer %1


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 5
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,128))

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 7 candidates from LHS

-------------------------------------------------
%0:i64 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,128))
%1:i64 = addnw 1:i64, %0 (hasExternalUses)
%2:i64 = var
%3:i64 = lshr %2, 3:i64 (hasExternalUses)
%4:i64 = and 127:i64, %3 (hasExternalUses)
%5:i64 = subnw 128:i64, %4 (hasExternalUses)
%6:i1 = eq %1, %5
infer %6


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i64 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,128))
%1:i64 = addnw 1:i64, %0 (hasExternalUses)
%2:i64 = var
%3:i64 = lshr %2, 3:i64 (hasExternalUses)
%4:i64 = and 127:i64, %3 (hasExternalUses)
%5:i64 = subnw 128:i64, %4 (hasExternalUses)
%6:i1 = eq %1, %5
pc %6 1:i1
%7:i32 = trunc %5
infer %7


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 128
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 127
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i64 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,128))
%1:i64 = addnw 1:i64, %0 (hasExternalUses)
%2:i64 = var
%3:i64 = lshr %2, 3:i64 (hasExternalUses)
%4:i64 = and 127:i64, %3 (hasExternalUses)
%5:i64 = subnw 128:i64, %4 (hasExternalUses)
%6:i1 = eq %1, %5
pc %6 1:i1
%7:i64 = var
%8:i64 = sub %7, %5
infer %8


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -128
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -129
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 7 candidates from LHS

-------------------------------------------------
%0:i64 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,128))
%1:i64 = addnw 1:i64, %0 (hasExternalUses)
%2:i64 = var
%3:i64 = lshr %2, 3:i64 (hasExternalUses)
%4:i64 = and 127:i64, %3 (hasExternalUses)
%5:i64 = subnw 128:i64, %4 (hasExternalUses)
%6:i1 = eq %1, %5
pc %6 1:i1
%7:i64 = var
%8:i64 = sub %7, %5 (hasExternalUses)
%9:i1 = ult 127:i64, %8
infer %9


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i64 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,128))
%1:i64 = addnw 1:i64, %0 (hasExternalUses)
%2:i64 = var
%3:i64 = lshr %2, 3:i64 (hasExternalUses)
%4:i64 = and 127:i64, %3 (hasExternalUses)
%5:i64 = subnw 128:i64, %4 (hasExternalUses)
%6:i1 = eq %1, %5
pc %6 1:i1
%7:i64 = var
%8:i64 = sub %7, %5 (hasExternalUses)
%9:i1 = ult 127:i64, %8
pc %9 1:i1
%10:i64 = add %7, %3
infer %10 (demandedBits=0000000000000000000000000000000000000000000000000000000001111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -3317530020802716412
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = lshr %1, 3:i64 (hasExternalUses)
%3:i64 = add %0, %2
%4:i64 = and 127:i64, %3
infer %4


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 127
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i64 = var
%1:i64 = lshr %0, 3:i64

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = var
%3:i64 = lshr %2, 3:i64
%4:i64 = and 127:i64, %3 (hasExternalUses)
%5:i64 = subnw 128:i64, %4 (hasExternalUses)
%6:i64 = sub %1, %5 (hasExternalUses)
%7:i64 = add %1, %3
%8:i64 = and 127:i64, %7
%9:i64 = phi %0, %6, %8
infer %9


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 109
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var
%1:i64 = lshr %0, 3:i64

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i64 = var
%1:i64 = var
%2:i64 = lshr %1, 3:i64 (hasExternalUses)
%3:i64 = add %0, %2

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i64 = var
%1:i64 = lshr %0, 3:i64 (hasExternalUses)
%2:i64 = and 127:i64, %1

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i64 = var
%1:i64 = var
%2:i64 = lshr %1, 3:i64 (hasExternalUses)
%3:i64 = add %0, %2
%4:i64 = and 127:i64, %3

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i64 = var
%1:i64 = lshr %0, 3:i64 (hasExternalUses)
%2:i64 = and 127:i64, %1 (hasExternalUses)
%3:i64 = subnw 128:i64, %2

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 7 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = var
%3:i64 = lshr %2, 3:i64
%4:i64 = and 127:i64, %3
%5:i64 = subnw 128:i64, %4
%6:i64 = sub %1, %5
%7:i64 = add %1, %3
%8:i64 = and 127:i64, %7
%9:i64 = phi %0, %6, %8
%10:i1 = eq 0:i64, %9
infer %10


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i64 = var (range=[128,0))
infer %0


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 128
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -9223372036854775808
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var (range=[128,0))
%1:i64 = add 18446744073709551488:i64, %0
infer %1


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 9223372036854775680
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var (range=[128,0))

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i64 = var (range=[128,0))
%1:i64 = add 18446744073709551488:i64, %0 (hasExternalUses)
%2:i1 = ult 127:i64, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = var
%3:i64 = lshr %2, 3:i64
%4:i64 = and 127:i64, %3
%5:i64 = subnw 128:i64, %4
%6:i64 = sub %1, %5
%7:i64 = add %1, %3
%8:i64 = and 127:i64, %7
%9:i64 = phi %0, %6, %8
%10:i64 = var (range=[0,-1))
%11:i64 = addnuw 1:i64, %10 (hasExternalUses)
%12:i1 = eq %9, %11
infer %12


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for crypto_hash_sha512_update()

; entering Souper's runOnFunction() for ./hash_sha512_cp.c.bc:SHA512_Transform()
