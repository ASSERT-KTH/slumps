; entering Souper's runOnFunction() for crypto_kx_keypair()

; ModuleID = './t.bc'
source_filename = "crypto_kx/crypto_kx.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.crypto_generichash_blake2b_state = type { [384 x i8] }

@.str = private unnamed_addr constant [14 x i8] c"x25519blake2b\00", align 1

; Function Attrs: nounwind
define i32 @crypto_kx_seed_keypair(i8* nonnull %0, i8* nonnull %1, i8* nonnull %2) local_unnamed_addr #0 {
  %4 = tail call i32 @crypto_generichash(i8* nonnull %1, i32 32, i8* nonnull %2, i64 32, i8* null, i32 0) #5
  %5 = tail call i32 @crypto_scalarmult_base(i8* nonnull %0, i8* nonnull %1) #5
  ret i32 %5
}

declare i32 @crypto_generichash(i8* %0, i32 %1, i8* %2, i64 %3, i8* %4, i32 %5) local_unnamed_addr #1

declare i32 @crypto_scalarmult_base(i8* %0, i8* %1) local_unnamed_addr #1

; Function Attrs: nounwind
define i32 @crypto_kx_keypair(i8* nonnull %0, i8* nonnull %1) local_unnamed_addr #0 {
  tail call void @randombytes_buf(i8* nonnull %1, i32 32) #5
  %3 = tail call i32 @crypto_scalarmult_base(i8* nonnull %0, i8* nonnull %1) #5
  ret i32 %3
}

declare void @randombytes_buf(i8* %0, i32 %1) local_unnamed_addr #1

; Function Attrs: nounwind
define i32 @crypto_kx_client_session_keys(i8* %0, i8* %1, i8* nonnull %2, i8* nonnull %3, i8* nonnull %4) local_unnamed_addr #0 {
  %6 = alloca %struct.crypto_generichash_blake2b_state, align 64
  %7 = alloca [32 x i8], align 16
  %8 = alloca [64 x i8], align 16
  %9 = getelementptr inbounds %struct.crypto_generichash_blake2b_state, %struct.crypto_generichash_blake2b_state* %6, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 384, i8* nonnull %9) #5
  %10 = getelementptr inbounds [32 x i8], [32 x i8]* %7, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %10) #5
  %11 = getelementptr inbounds [64 x i8], [64 x i8]* %8, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %11) #5
  %12 = icmp eq i8* %0, null
  %13 = select i1 %12, i8* %1, i8* %0
  %14 = icmp eq i8* %1, null
  %15 = select i1 %14, i8* %13, i8* %1
  %16 = icmp eq i8* %13, null
  br i1 %16, label %17, label %18

17:                                               ; preds = %5
  tail call void @sodium_misuse() #6
  unreachable

18:                                               ; preds = %5
  %19 = call i32 @crypto_scalarmult(i8* nonnull %10, i8* nonnull %3, i8* nonnull %4) #5
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %39

21:                                               ; preds = %18
  %22 = call i32 @crypto_generichash_init(%struct.crypto_generichash_blake2b_state* nonnull %6, i8* null, i32 0, i32 64) #5
  %23 = call i32 @crypto_generichash_update(%struct.crypto_generichash_blake2b_state* nonnull %6, i8* nonnull %10, i64 32) #5
  call void @sodium_memzero(i8* nonnull %10, i32 32) #5
  %24 = call i32 @crypto_generichash_update(%struct.crypto_generichash_blake2b_state* nonnull %6, i8* nonnull %2, i64 32) #5
  %25 = call i32 @crypto_generichash_update(%struct.crypto_generichash_blake2b_state* nonnull %6, i8* nonnull %4, i64 32) #5
  %26 = call i32 @crypto_generichash_final(%struct.crypto_generichash_blake2b_state* nonnull %6, i8* nonnull %11, i32 64) #5
  call void @sodium_memzero(i8* nonnull %9, i32 384) #5
  br label %27

27:                                               ; preds = %27, %21
  %28 = phi i32 [ 0, %21 ], [ %36, %27 ]
  %29 = getelementptr [64 x i8], [64 x i8]* %8, i32 0, i32 %28
  %30 = load i8, i8* %29, align 1
  %31 = getelementptr i8, i8* %13, i32 %28
  store i8 %30, i8* %31, align 1
  %32 = add nuw nsw i32 %28, 32
  %33 = getelementptr [64 x i8], [64 x i8]* %8, i32 0, i32 %32
  %34 = load i8, i8* %33, align 1
  %35 = getelementptr i8, i8* %15, i32 %28
  store i8 %34, i8* %35, align 1
  %36 = add nuw nsw i32 %28, 1
  %37 = icmp eq i32 %36, 32
  br i1 %37, label %38, label %27

38:                                               ; preds = %27
  call void @sodium_memzero(i8* nonnull %11, i32 64) #5
  br label %39

39:                                               ; preds = %18, %38
  %40 = phi i32 [ 0, %38 ], [ -1, %18 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 384, i8* nonnull %9) #5
  ret i32 %40
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #2

; Function Attrs: noreturn
declare void @sodium_misuse() local_unnamed_addr #3

declare i32 @crypto_scalarmult(i8* %0, i8* %1, i8* %2) local_unnamed_addr #1

declare i32 @crypto_generichash_init(%struct.crypto_generichash_blake2b_state* %0, i8* %1, i32 %2, i32 %3) local_unnamed_addr #1

declare i32 @crypto_generichash_update(%struct.crypto_generichash_blake2b_state* %0, i8* %1, i64 %2) local_unnamed_addr #1

declare void @sodium_memzero(i8* %0, i32 %1) local_unnamed_addr #1

declare i32 @crypto_generichash_final(%struct.crypto_generichash_blake2b_state* %0, i8* %1, i32 %2) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #2

; Function Attrs: nounwind
define i32 @crypto_kx_server_session_keys(i8* %0, i8* %1, i8* nonnull %2, i8* nonnull %3, i8* nonnull %4) local_unnamed_addr #0 {
  %6 = alloca %struct.crypto_generichash_blake2b_state, align 64
  %7 = alloca [32 x i8], align 16
  %8 = alloca [64 x i8], align 16
  %9 = getelementptr inbounds %struct.crypto_generichash_blake2b_state, %struct.crypto_generichash_blake2b_state* %6, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 384, i8* nonnull %9) #5
  %10 = getelementptr inbounds [32 x i8], [32 x i8]* %7, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %10) #5
  %11 = getelementptr inbounds [64 x i8], [64 x i8]* %8, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %11) #5
  %12 = icmp eq i8* %0, null
  %13 = select i1 %12, i8* %1, i8* %0
  %14 = icmp eq i8* %1, null
  %15 = select i1 %14, i8* %13, i8* %1
  %16 = icmp eq i8* %13, null
  br i1 %16, label %17, label %18

17:                                               ; preds = %5
  tail call void @sodium_misuse() #6
  unreachable

18:                                               ; preds = %5
  %19 = call i32 @crypto_scalarmult(i8* nonnull %10, i8* nonnull %3, i8* nonnull %4) #5
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %39

21:                                               ; preds = %18
  %22 = call i32 @crypto_generichash_init(%struct.crypto_generichash_blake2b_state* nonnull %6, i8* null, i32 0, i32 64) #5
  %23 = call i32 @crypto_generichash_update(%struct.crypto_generichash_blake2b_state* nonnull %6, i8* nonnull %10, i64 32) #5
  call void @sodium_memzero(i8* nonnull %10, i32 32) #5
  %24 = call i32 @crypto_generichash_update(%struct.crypto_generichash_blake2b_state* nonnull %6, i8* nonnull %4, i64 32) #5
  %25 = call i32 @crypto_generichash_update(%struct.crypto_generichash_blake2b_state* nonnull %6, i8* nonnull %2, i64 32) #5
  %26 = call i32 @crypto_generichash_final(%struct.crypto_generichash_blake2b_state* nonnull %6, i8* nonnull %11, i32 64) #5
  call void @sodium_memzero(i8* nonnull %9, i32 384) #5
  br label %27

27:                                               ; preds = %27, %21
  %28 = phi i32 [ 0, %21 ], [ %36, %27 ]
  %29 = getelementptr [64 x i8], [64 x i8]* %8, i32 0, i32 %28
  %30 = load i8, i8* %29, align 1
  %31 = getelementptr i8, i8* %15, i32 %28
  store i8 %30, i8* %31, align 1
  %32 = add nuw nsw i32 %28, 32
  %33 = getelementptr [64 x i8], [64 x i8]* %8, i32 0, i32 %32
  %34 = load i8, i8* %33, align 1
  %35 = getelementptr i8, i8* %13, i32 %28
  store i8 %34, i8* %35, align 1
  %36 = add nuw nsw i32 %28, 1
  %37 = icmp eq i32 %36, 32
  br i1 %37, label %38, label %27

38:                                               ; preds = %27
  call void @sodium_memzero(i8* nonnull %11, i32 64) #5
  br label %39

39:                                               ; preds = %18, %38
  %40 = phi i32 [ 0, %38 ], [ -1, %18 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 384, i8* nonnull %9) #5
  ret i32 %40
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_kx_publickeybytes() local_unnamed_addr #4 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_kx_secretkeybytes() local_unnamed_addr #4 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_kx_seedbytes() local_unnamed_addr #4 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_kx_sessionkeybytes() local_unnamed_addr #4 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i8* @crypto_kx_primitive() local_unnamed_addr #4 {
  ret i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i32 0, i32 0)
}

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %3 = tail call i32 @crypto_scalarmult_base(i8* nonnull %0, i8* nonnull %1) #5
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for crypto_kx_keypair()

