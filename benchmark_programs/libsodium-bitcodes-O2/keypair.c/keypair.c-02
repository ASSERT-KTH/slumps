; entering Souper's runOnFunction() for crypto_sign_ed25519_keypair()

; ModuleID = './keypair.c.bc'
source_filename = "crypto_sign/ed25519/ref10/keypair.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.ge25519_p3 = type { [10 x i32], [10 x i32], [10 x i32], [10 x i32] }

; Function Attrs: nounwind
define i32 @crypto_sign_ed25519_seed_keypair(i8* nonnull %0, i8* nonnull %1, i8* nonnull %2) local_unnamed_addr #0 {
  %4 = alloca %struct.ge25519_p3, align 4
  %5 = bitcast %struct.ge25519_p3* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %5) #3
  %6 = tail call i32 @crypto_hash_sha512(i8* nonnull %1, i8* nonnull %2, i64 32) #3
  %7 = load i8, i8* %1, align 1
  %8 = and i8 %7, -8
  store i8 %8, i8* %1, align 1
  %9 = getelementptr i8, i8* %1, i32 31
  %10 = load i8, i8* %9, align 1
  %11 = and i8 %10, 63
  %12 = or i8 %11, 64
  store i8 %12, i8* %9, align 1
  call void @ge25519_scalarmult_base(%struct.ge25519_p3* nonnull %4, i8* nonnull %1) #3
  call void @ge25519_p3_tobytes(i8* nonnull %0, %struct.ge25519_p3* nonnull %4) #3
  call void @llvm.memmove.p0i8.p0i8.i32(i8* nonnull align 1 dereferenceable(32) %1, i8* nonnull align 1 dereferenceable(32) %2, i32 32, i1 false)
  %13 = getelementptr i8, i8* %1, i32 32
  call void @llvm.memmove.p0i8.p0i8.i32(i8* nonnull align 1 dereferenceable(32) %13, i8* nonnull align 1 dereferenceable(32) %0, i32 32, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %5) #3
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #1

declare i32 @crypto_hash_sha512(i8* %0, i8* %1, i64 %2) local_unnamed_addr #2

declare void @ge25519_scalarmult_base(%struct.ge25519_p3* %0, i8* %1) local_unnamed_addr #2

declare void @ge25519_p3_tobytes(i8* %0, %struct.ge25519_p3* %1) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i32(i8* nocapture %0, i8* nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #1

; Function Attrs: nounwind
define i32 @crypto_sign_ed25519_keypair(i8* nonnull %0, i8* nonnull %1) local_unnamed_addr #0 {
  %3 = alloca %struct.ge25519_p3, align 4
  %4 = alloca [32 x i8], align 16
  %5 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %5) #3
  call void @randombytes_buf(i8* nonnull %5, i32 32) #3
  %6 = bitcast %struct.ge25519_p3* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %6) #3
  %7 = call i32 @crypto_hash_sha512(i8* nonnull %1, i8* nonnull %5, i64 32) #3
  %8 = load i8, i8* %1, align 1
  %9 = and i8 %8, -8
  store i8 %9, i8* %1, align 1
  %10 = getelementptr i8, i8* %1, i32 31
  %11 = load i8, i8* %10, align 1
  %12 = and i8 %11, 63
  %13 = or i8 %12, 64
  store i8 %13, i8* %10, align 1
  call void @ge25519_scalarmult_base(%struct.ge25519_p3* nonnull %3, i8* nonnull %1) #3
  call void @ge25519_p3_tobytes(i8* nonnull %0, %struct.ge25519_p3* nonnull %3) #3
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 1 dereferenceable(32) %1, i8* nonnull align 16 dereferenceable(32) %5, i32 32, i1 false) #3
  %14 = getelementptr i8, i8* %1, i32 32
  call void @llvm.memmove.p0i8.p0i8.i32(i8* nonnull align 1 dereferenceable(32) %14, i8* nonnull align 1 dereferenceable(32) %0, i32 32, i1 false) #3
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %6) #3
  call void @sodium_memzero(i8* nonnull %5, i32 32) #3
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %5) #3
  ret i32 0
}

declare void @randombytes_buf(i8* %0, i32 %1) local_unnamed_addr #2

declare void @sodium_memzero(i8* %0, i32 %1) local_unnamed_addr #2

; Function Attrs: nounwind
define i32 @crypto_sign_ed25519_pk_to_curve25519(i8* nonnull %0, i8* nonnull %1) local_unnamed_addr #0 {
  %3 = alloca %struct.ge25519_p3, align 4
  %4 = alloca [10 x i32], align 16
  %5 = alloca [10 x i32], align 16
  %6 = bitcast %struct.ge25519_p3* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %6) #3
  %7 = bitcast [10 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %7) #3
  %8 = bitcast [10 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %8) #3
  %9 = tail call i32 @ge25519_has_small_order(i8* nonnull %1) #3
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %388

11:                                               ; preds = %2
  %12 = call i32 @ge25519_frombytes_negate_vartime(%struct.ge25519_p3* nonnull %3, i8* nonnull %1) #3
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %388

14:                                               ; preds = %11
  %15 = call i32 @ge25519_is_on_main_subgroup(%struct.ge25519_p3* nonnull %3) #3
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %388, label %17

17:                                               ; preds = %14
  %18 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 0
  %19 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 1
  %20 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %3, i32 0, i32 1, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = sub i32 1, %21
  %23 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %3, i32 0, i32 1, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = sub i32 0, %24
  %26 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 2
  %27 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %3, i32 0, i32 1, i32 2
  %28 = load i32, i32* %27, align 4
  %29 = sub i32 0, %28
  %30 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 3
  %31 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %3, i32 0, i32 1, i32 3
  %32 = load i32, i32* %31, align 4
  %33 = sub i32 0, %32
  %34 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 4
  %35 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %3, i32 0, i32 1, i32 4
  %36 = load i32, i32* %35, align 4
  %37 = sub i32 0, %36
  %38 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 5
  %39 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %3, i32 0, i32 1, i32 5
  %40 = load i32, i32* %39, align 4
  %41 = sub i32 0, %40
  %42 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 6
  %43 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %3, i32 0, i32 1, i32 6
  %44 = load i32, i32* %43, align 4
  %45 = sub i32 0, %44
  %46 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 7
  %47 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %3, i32 0, i32 1, i32 7
  %48 = load i32, i32* %47, align 4
  %49 = sub i32 0, %48
  %50 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 8
  %51 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %3, i32 0, i32 1, i32 8
  %52 = load i32, i32* %51, align 4
  %53 = sub i32 0, %52
  %54 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 9
  %55 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %3, i32 0, i32 1, i32 9
  %56 = load i32, i32* %55, align 4
  %57 = sub i32 0, %56
  store i32 %22, i32* %18, align 16
  store i32 %25, i32* %19, align 4
  store i32 %29, i32* %26, align 8
  store i32 %33, i32* %30, align 4
  store i32 %37, i32* %34, align 16
  store i32 %41, i32* %38, align 4
  store i32 %45, i32* %42, align 8
  store i32 %49, i32* %46, align 4
  store i32 %53, i32* %50, align 16
  store i32 %57, i32* %54, align 4
  %58 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 0
  %59 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 1
  %60 = add i32 %21, 1
  %61 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 2
  %62 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 3
  %63 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 4
  %64 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 5
  %65 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 6
  %66 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 7
  %67 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 8
  %68 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 9
  store i32 %60, i32* %58, align 16
  store i32 %24, i32* %59, align 4
  store i32 %28, i32* %61, align 8
  store i32 %32, i32* %62, align 4
  store i32 %36, i32* %63, align 16
  store i32 %40, i32* %64, align 4
  store i32 %44, i32* %65, align 8
  store i32 %48, i32* %66, align 4
  store i32 %52, i32* %67, align 16
  store i32 %56, i32* %68, align 4
  call void @fe25519_invert(i32* nonnull %18, i32* nonnull %18) #3
  %69 = load i32, i32* %18, align 16
  %70 = load i32, i32* %19, align 4
  %71 = load i32, i32* %26, align 8
  %72 = load i32, i32* %30, align 4
  %73 = load i32, i32* %34, align 16
  %74 = load i32, i32* %38, align 4
  %75 = load i32, i32* %42, align 8
  %76 = load i32, i32* %46, align 4
  %77 = load i32, i32* %50, align 16
  %78 = load i32, i32* %54, align 4
  %79 = mul i32 %70, 19
  %80 = mul i32 %71, 19
  %81 = mul i32 %72, 19
  %82 = mul i32 %73, 19
  %83 = mul i32 %74, 19
  %84 = mul i32 %75, 19
  %85 = mul i32 %76, 19
  %86 = mul i32 %77, 19
  %87 = mul i32 %78, 19
  %88 = shl i32 %24, 1
  %89 = shl i32 %32, 1
  %90 = shl i32 %40, 1
  %91 = shl i32 %48, 1
  %92 = shl i32 %56, 1
  %93 = sext i32 %60 to i64
  %94 = sext i32 %69 to i64
  %95 = mul nsw i64 %94, %93
  %96 = sext i32 %70 to i64
  %97 = mul nsw i64 %96, %93
  %98 = sext i32 %71 to i64
  %99 = mul nsw i64 %98, %93
  %100 = sext i32 %72 to i64
  %101 = mul nsw i64 %100, %93
  %102 = sext i32 %73 to i64
  %103 = mul nsw i64 %102, %93
  %104 = sext i32 %74 to i64
  %105 = mul nsw i64 %104, %93
  %106 = sext i32 %75 to i64
  %107 = mul nsw i64 %106, %93
  %108 = sext i32 %76 to i64
  %109 = mul nsw i64 %108, %93
  %110 = sext i32 %77 to i64
  %111 = mul nsw i64 %110, %93
  %112 = sext i32 %78 to i64
  %113 = mul nsw i64 %112, %93
  %114 = sext i32 %24 to i64
  %115 = mul nsw i64 %94, %114
  %116 = sext i32 %88 to i64
  %117 = mul nsw i64 %96, %116
  %118 = mul nsw i64 %98, %114
  %119 = mul nsw i64 %100, %116
  %120 = mul nsw i64 %102, %114
  %121 = mul nsw i64 %104, %116
  %122 = mul nsw i64 %106, %114
  %123 = mul nsw i64 %108, %116
  %124 = mul nsw i64 %110, %114
  %125 = sext i32 %87 to i64
  %126 = mul nsw i64 %125, %116
  %127 = sext i32 %28 to i64
  %128 = mul nsw i64 %94, %127
  %129 = mul nsw i64 %96, %127
  %130 = mul nsw i64 %98, %127
  %131 = mul nsw i64 %100, %127
  %132 = mul nsw i64 %102, %127
  %133 = mul nsw i64 %104, %127
  %134 = mul nsw i64 %106, %127
  %135 = mul nsw i64 %108, %127
  %136 = sext i32 %86 to i64
  %137 = mul nsw i64 %136, %127
  %138 = mul nsw i64 %125, %127
  %139 = sext i32 %32 to i64
  %140 = mul nsw i64 %94, %139
  %141 = sext i32 %89 to i64
  %142 = mul nsw i64 %96, %141
  %143 = mul nsw i64 %98, %139
  %144 = mul nsw i64 %100, %141
  %145 = mul nsw i64 %102, %139
  %146 = mul nsw i64 %104, %141
  %147 = mul nsw i64 %106, %139
  %148 = sext i32 %85 to i64
  %149 = mul nsw i64 %148, %141
  %150 = mul nsw i64 %136, %139
  %151 = mul nsw i64 %125, %141
  %152 = sext i32 %36 to i64
  %153 = mul nsw i64 %94, %152
  %154 = mul nsw i64 %96, %152
  %155 = mul nsw i64 %98, %152
  %156 = mul nsw i64 %100, %152
  %157 = mul nsw i64 %102, %152
  %158 = mul nsw i64 %104, %152
  %159 = sext i32 %84 to i64
  %160 = mul nsw i64 %159, %152
  %161 = mul nsw i64 %148, %152
  %162 = mul nsw i64 %136, %152
  %163 = mul nsw i64 %125, %152
  %164 = sext i32 %40 to i64
  %165 = mul nsw i64 %94, %164
  %166 = sext i32 %90 to i64
  %167 = mul nsw i64 %96, %166
  %168 = mul nsw i64 %98, %164
  %169 = mul nsw i64 %100, %166
  %170 = mul nsw i64 %102, %164
  %171 = sext i32 %83 to i64
  %172 = mul nsw i64 %171, %166
  %173 = mul nsw i64 %159, %164
  %174 = mul nsw i64 %148, %166
  %175 = mul nsw i64 %136, %164
  %176 = mul nsw i64 %125, %166
  %177 = sext i32 %44 to i64
  %178 = mul nsw i64 %94, %177
  %179 = mul nsw i64 %96, %177
  %180 = mul nsw i64 %98, %177
  %181 = mul nsw i64 %100, %177
  %182 = sext i32 %82 to i64
  %183 = mul nsw i64 %182, %177
  %184 = mul nsw i64 %171, %177
  %185 = mul nsw i64 %159, %177
  %186 = mul nsw i64 %148, %177
  %187 = mul nsw i64 %136, %177
  %188 = mul nsw i64 %125, %177
  %189 = sext i32 %48 to i64
  %190 = mul nsw i64 %94, %189
  %191 = sext i32 %91 to i64
  %192 = mul nsw i64 %96, %191
  %193 = mul nsw i64 %98, %189
  %194 = sext i32 %81 to i64
  %195 = mul nsw i64 %194, %191
  %196 = mul nsw i64 %182, %189
  %197 = mul nsw i64 %171, %191
  %198 = mul nsw i64 %159, %189
  %199 = mul nsw i64 %148, %191
  %200 = mul nsw i64 %136, %189
  %201 = mul nsw i64 %125, %191
  %202 = sext i32 %52 to i64
  %203 = mul nsw i64 %94, %202
  %204 = mul nsw i64 %96, %202
  %205 = sext i32 %80 to i64
  %206 = mul nsw i64 %205, %202
  %207 = mul nsw i64 %194, %202
  %208 = mul nsw i64 %182, %202
  %209 = mul nsw i64 %171, %202
  %210 = mul nsw i64 %159, %202
  %211 = mul nsw i64 %148, %202
  %212 = mul nsw i64 %136, %202
  %213 = mul nsw i64 %125, %202
  %214 = sext i32 %56 to i64
  %215 = mul nsw i64 %94, %214
  %216 = sext i32 %92 to i64
  %217 = sext i32 %79 to i64
  %218 = mul nsw i64 %217, %216
  %219 = mul nsw i64 %205, %214
  %220 = mul nsw i64 %194, %216
  %221 = mul nsw i64 %182, %214
  %222 = mul nsw i64 %171, %216
  %223 = mul nsw i64 %159, %214
  %224 = mul nsw i64 %148, %216
  %225 = mul nsw i64 %136, %214
  %226 = mul nsw i64 %125, %216
  %227 = add i64 %218, %95
  %228 = add i64 %227, %206
  %229 = add i64 %228, %195
  %230 = add i64 %229, %183
  %231 = add i64 %230, %172
  %232 = add i64 %231, %160
  %233 = add i64 %232, %149
  %234 = add i64 %233, %137
  %235 = add i64 %234, %126
  %236 = add i64 %97, %115
  %237 = add i64 %142, %153
  %238 = add i64 %237, %130
  %239 = add i64 %238, %119
  %240 = add i64 %239, %103
  %241 = add i64 %240, %222
  %242 = add i64 %241, %210
  %243 = add i64 %242, %199
  %244 = add i64 %243, %187
  %245 = add i64 %244, %176
  %246 = add i64 %235, 33554432
  %247 = ashr i64 %246, 26
  %248 = add i64 %236, %219
  %249 = add i64 %248, %207
  %250 = add i64 %249, %196
  %251 = add i64 %250, %184
  %252 = add i64 %251, %173
  %253 = add i64 %252, %161
  %254 = add i64 %253, %150
  %255 = add i64 %254, %138
  %256 = add i64 %255, %247
  %257 = and i64 %246, -67108864
  %258 = sub i64 %235, %257
  %259 = add i64 %245, 33554432
  %260 = ashr i64 %259, 26
  %261 = add i64 %154, %165
  %262 = add i64 %261, %143
  %263 = add i64 %262, %131
  %264 = add i64 %263, %120
  %265 = add i64 %264, %105
  %266 = add i64 %265, %223
  %267 = add i64 %266, %211
  %268 = add i64 %267, %200
  %269 = add i64 %268, %188
  %270 = add i64 %269, %260
  %271 = and i64 %259, -67108864
  %272 = sub i64 %245, %271
  %273 = add i64 %256, 16777216
  %274 = ashr i64 %273, 25
  %275 = add i64 %117, %128
  %276 = add i64 %275, %99
  %277 = add i64 %276, %220
  %278 = add i64 %277, %208
  %279 = add i64 %278, %197
  %280 = add i64 %279, %185
  %281 = add i64 %280, %174
  %282 = add i64 %281, %162
  %283 = add i64 %282, %151
  %284 = add i64 %283, %274
  %285 = and i64 %273, 4261412864
  %286 = sub i64 %256, %285
  %287 = add i64 %270, 16777216
  %288 = ashr i64 %287, 25
  %289 = add i64 %167, %178
  %290 = add i64 %289, %155
  %291 = add i64 %290, %144
  %292 = add i64 %291, %132
  %293 = add i64 %292, %121
  %294 = add i64 %293, %107
  %295 = add i64 %294, %224
  %296 = add i64 %295, %212
  %297 = add i64 %296, %201
  %298 = add i64 %297, %288
  %299 = and i64 %287, 4261412864
  %300 = sub i64 %270, %299
  %301 = add i64 %284, 33554432
  %302 = ashr i64 %301, 26
  %303 = add i64 %129, %140
  %304 = add i64 %303, %118
  %305 = add i64 %304, %101
  %306 = add i64 %305, %221
  %307 = add i64 %306, %209
  %308 = add i64 %307, %198
  %309 = add i64 %308, %186
  %310 = add i64 %309, %175
  %311 = add i64 %310, %163
  %312 = add i64 %311, %302
  %313 = and i64 %301, 4227858432
  %314 = sub i64 %284, %313
  %315 = add i64 %298, 33554432
  %316 = ashr i64 %315, 26
  %317 = add i64 %179, %190
  %318 = add i64 %317, %168
  %319 = add i64 %318, %156
  %320 = add i64 %319, %145
  %321 = add i64 %320, %133
  %322 = add i64 %321, %122
  %323 = add i64 %322, %109
  %324 = add i64 %323, %225
  %325 = add i64 %324, %213
  %326 = add i64 %325, %316
  %327 = and i64 %315, 4227858432
  %328 = sub i64 %298, %327
  %329 = add i64 %312, 16777216
  %330 = ashr i64 %329, 25
  %331 = add i64 %330, %272
  %332 = and i64 %329, 4261412864
  %333 = sub i64 %312, %332
  %334 = add i64 %326, 16777216
  %335 = ashr i64 %334, 25
  %336 = add i64 %192, %203
  %337 = add i64 %336, %180
  %338 = add i64 %337, %169
  %339 = add i64 %338, %157
  %340 = add i64 %339, %146
  %341 = add i64 %340, %134
  %342 = add i64 %341, %123
  %343 = add i64 %342, %111
  %344 = add i64 %343, %226
  %345 = add i64 %344, %335
  %346 = and i64 %334, 4261412864
  %347 = sub i64 %326, %346
  %348 = add i64 %331, 33554432
  %349 = lshr i64 %348, 26
  %350 = add i64 %300, %349
  %351 = and i64 %348, 4227858432
  %352 = sub i64 %331, %351
  %353 = add i64 %345, 33554432
  %354 = ashr i64 %353, 26
  %355 = add i64 %204, %215
  %356 = add i64 %355, %193
  %357 = add i64 %356, %181
  %358 = add i64 %357, %170
  %359 = add i64 %358, %158
  %360 = add i64 %359, %147
  %361 = add i64 %360, %135
  %362 = add i64 %361, %124
  %363 = add i64 %362, %113
  %364 = add i64 %363, %354
  %365 = and i64 %353, 4227858432
  %366 = sub i64 %345, %365
  %367 = add i64 %364, 16777216
  %368 = ashr i64 %367, 25
  %369 = mul nsw i64 %368, 19
  %370 = add i64 %369, %258
  %371 = and i64 %367, 4261412864
  %372 = sub i64 %364, %371
  %373 = add i64 %370, 33554432
  %374 = lshr i64 %373, 26
  %375 = add i64 %286, %374
  %376 = and i64 %373, 4227858432
  %377 = sub i64 %370, %376
  %378 = trunc i64 %377 to i32
  store i32 %378, i32* %58, align 16
  %379 = trunc i64 %375 to i32
  store i32 %379, i32* %59, align 4
  %380 = trunc i64 %314 to i32
  store i32 %380, i32* %61, align 8
  %381 = trunc i64 %333 to i32
  store i32 %381, i32* %62, align 4
  %382 = trunc i64 %352 to i32
  store i32 %382, i32* %63, align 16
  %383 = trunc i64 %350 to i32
  store i32 %383, i32* %64, align 4
  %384 = trunc i64 %328 to i32
  store i32 %384, i32* %65, align 8
  %385 = trunc i64 %347 to i32
  store i32 %385, i32* %66, align 4
  %386 = trunc i64 %366 to i32
  store i32 %386, i32* %67, align 16
  %387 = trunc i64 %372 to i32
  store i32 %387, i32* %68, align 4
  call void @fe25519_tobytes(i8* nonnull %0, i32* nonnull %58) #3
  br label %388

388:                                              ; preds = %14, %2, %11, %17
  %389 = phi i32 [ 0, %17 ], [ -1, %11 ], [ -1, %2 ], [ -1, %14 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %8) #3
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %7) #3
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %6) #3
  ret i32 %389
}

declare i32 @ge25519_has_small_order(i8* %0) local_unnamed_addr #2

declare i32 @ge25519_frombytes_negate_vartime(%struct.ge25519_p3* %0, i8* %1) local_unnamed_addr #2

declare i32 @ge25519_is_on_main_subgroup(%struct.ge25519_p3* %0) local_unnamed_addr #2

declare void @fe25519_invert(i32* %0, i32* %1) local_unnamed_addr #2

declare void @fe25519_tobytes(i8* %0, i32* %1) local_unnamed_addr #2

; Function Attrs: nounwind
define i32 @crypto_sign_ed25519_sk_to_curve25519(i8* nocapture nonnull %0, i8* nonnull %1) local_unnamed_addr #0 {
  %3 = alloca [64 x i8], align 16
  %4 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %4) #3
  %5 = call i32 @crypto_hash_sha512(i8* nonnull %4, i8* nonnull %1, i64 32) #3
  %6 = load i8, i8* %4, align 16
  %7 = and i8 %6, -8
  store i8 %7, i8* %4, align 16
  %8 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i32 0, i32 31
  %9 = load i8, i8* %8, align 1
  %10 = and i8 %9, 63
  %11 = or i8 %10, 64
  store i8 %11, i8* %8, align 1
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 1 dereferenceable(32) %0, i8* nonnull align 16 dereferenceable(32) %4, i32 32, i1 false)
  call void @sodium_memzero(i8* nonnull %4, i32 64) #3
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %4) #3
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %8 = load i8, i8* %1, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=11111000)

; *****
; For LLVM instruction:
;  %9 = and i8 %8, -8
; Looking for a replacement for:
%0:i8 = var
%1:i8 = and 248:i8, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i8, i8* %10, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=00111111)

; *****
; For LLVM instruction:
;  %12 = and i8 %11, 63
; Looking for a replacement for:
%0:i8 = var
%1:i8 = and 63:i8, %0
infer %1 (demandedBits=10111111)

; *****
; For LLVM instruction:
;  %13 = or i8 %12, 64
; Looking for a replacement for:
%0:i8 = var
%1:i8 = and 63:i8, %0
%2:i8 = or 64:i8, %1
infer %2
#########################################################
; exiting Souper's runOnFunction() for crypto_sign_ed25519_keypair()

