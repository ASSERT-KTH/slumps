; entering Souper's runOnFunction() for crypto_core_hchacha20_constbytes()

; ModuleID = './core_hchacha20.c.bc'
source_filename = "crypto_core/hchacha20/core_hchacha20.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

; Function Attrs: nofree norecurse nounwind
define i32 @crypto_core_hchacha20(i8* nocapture nonnull %0, i8* nocapture nonnull readonly %1, i8* nocapture nonnull readonly %2, i8* readonly %3) local_unnamed_addr #0 {
  %5 = icmp eq i8* %3, null
  br i1 %5, label %18, label %6

6:                                                ; preds = %4
  %7 = bitcast i8* %3 to i32*
  %8 = load i32, i32* %7, align 1
  %9 = getelementptr i8, i8* %3, i32 4
  %10 = bitcast i8* %9 to i32*
  %11 = load i32, i32* %10, align 1
  %12 = getelementptr i8, i8* %3, i32 8
  %13 = bitcast i8* %12 to i32*
  %14 = load i32, i32* %13, align 1
  %15 = getelementptr i8, i8* %3, i32 12
  %16 = bitcast i8* %15 to i32*
  %17 = load i32, i32* %16, align 1
  br label %18

18:                                               ; preds = %4, %6
  %19 = phi i32 [ %8, %6 ], [ 1634760805, %4 ]
  %20 = phi i32 [ %11, %6 ], [ 857760878, %4 ]
  %21 = phi i32 [ %14, %6 ], [ 2036477234, %4 ]
  %22 = phi i32 [ %17, %6 ], [ 1797285236, %4 ]
  %23 = bitcast i8* %2 to i32*
  %24 = load i32, i32* %23, align 1
  %25 = getelementptr i8, i8* %2, i32 4
  %26 = bitcast i8* %25 to i32*
  %27 = load i32, i32* %26, align 1
  %28 = getelementptr i8, i8* %2, i32 8
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 1
  %31 = getelementptr i8, i8* %2, i32 12
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 1
  %34 = getelementptr i8, i8* %2, i32 16
  %35 = bitcast i8* %34 to i32*
  %36 = load i32, i32* %35, align 1
  %37 = getelementptr i8, i8* %2, i32 20
  %38 = bitcast i8* %37 to i32*
  %39 = load i32, i32* %38, align 1
  %40 = getelementptr i8, i8* %2, i32 24
  %41 = bitcast i8* %40 to i32*
  %42 = load i32, i32* %41, align 1
  %43 = getelementptr i8, i8* %2, i32 28
  %44 = bitcast i8* %43 to i32*
  %45 = load i32, i32* %44, align 1
  %46 = bitcast i8* %1 to i32*
  %47 = load i32, i32* %46, align 1
  %48 = getelementptr i8, i8* %1, i32 4
  %49 = bitcast i8* %48 to i32*
  %50 = load i32, i32* %49, align 1
  %51 = getelementptr i8, i8* %1, i32 8
  %52 = bitcast i8* %51 to i32*
  %53 = load i32, i32* %52, align 1
  %54 = getelementptr i8, i8* %1, i32 12
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 1
  br label %57

57:                                               ; preds = %57, %18
  %58 = phi i32 [ %56, %18 ], [ %169, %57 ]
  %59 = phi i32 [ %53, %18 ], [ %229, %57 ]
  %60 = phi i32 [ %50, %18 ], [ %209, %57 ]
  %61 = phi i32 [ %47, %18 ], [ %189, %57 ]
  %62 = phi i32 [ %45, %18 ], [ %190, %57 ]
  %63 = phi i32 [ %42, %18 ], [ %170, %57 ]
  %64 = phi i32 [ %39, %18 ], [ %230, %57 ]
  %65 = phi i32 [ %36, %18 ], [ %210, %57 ]
  %66 = phi i32 [ %33, %18 ], [ %214, %57 ]
  %67 = phi i32 [ %30, %18 ], [ %194, %57 ]
  %68 = phi i32 [ %27, %18 ], [ %174, %57 ]
  %69 = phi i32 [ %24, %18 ], [ %234, %57 ]
  %70 = phi i32 [ %22, %18 ], [ %225, %57 ]
  %71 = phi i32 [ %21, %18 ], [ %205, %57 ]
  %72 = phi i32 [ %20, %18 ], [ %185, %57 ]
  %73 = phi i32 [ %19, %18 ], [ %165, %57 ]
  %74 = phi i32 [ 0, %18 ], [ %235, %57 ]
  %75 = add i32 %69, %73
  %76 = xor i32 %61, %75
  %77 = shl i32 %76, 16
  %78 = lshr i32 %76, 16
  %79 = or i32 %78, %77
  %80 = add i32 %79, %65
  %81 = xor i32 %80, %69
  %82 = shl i32 %81, 12
  %83 = lshr i32 %81, 20
  %84 = or i32 %83, %82
  %85 = add i32 %84, %75
  %86 = xor i32 %85, %79
  %87 = shl i32 %86, 8
  %88 = lshr i32 %86, 24
  %89 = or i32 %88, %87
  %90 = add i32 %89, %80
  %91 = xor i32 %90, %84
  %92 = shl i32 %91, 7
  %93 = lshr i32 %91, 25
  %94 = or i32 %93, %92
  %95 = add i32 %68, %72
  %96 = xor i32 %60, %95
  %97 = shl i32 %96, 16
  %98 = lshr i32 %96, 16
  %99 = or i32 %98, %97
  %100 = add i32 %99, %64
  %101 = xor i32 %100, %68
  %102 = shl i32 %101, 12
  %103 = lshr i32 %101, 20
  %104 = or i32 %103, %102
  %105 = add i32 %104, %95
  %106 = xor i32 %105, %99
  %107 = shl i32 %106, 8
  %108 = lshr i32 %106, 24
  %109 = or i32 %108, %107
  %110 = add i32 %109, %100
  %111 = xor i32 %110, %104
  %112 = shl i32 %111, 7
  %113 = lshr i32 %111, 25
  %114 = or i32 %113, %112
  %115 = add i32 %67, %71
  %116 = xor i32 %59, %115
  %117 = shl i32 %116, 16
  %118 = lshr i32 %116, 16
  %119 = or i32 %118, %117
  %120 = add i32 %119, %63
  %121 = xor i32 %120, %67
  %122 = shl i32 %121, 12
  %123 = lshr i32 %121, 20
  %124 = or i32 %123, %122
  %125 = add i32 %124, %115
  %126 = xor i32 %125, %119
  %127 = shl i32 %126, 8
  %128 = lshr i32 %126, 24
  %129 = or i32 %128, %127
  %130 = add i32 %129, %120
  %131 = xor i32 %130, %124
  %132 = shl i32 %131, 7
  %133 = lshr i32 %131, 25
  %134 = or i32 %133, %132
  %135 = add i32 %66, %70
  %136 = xor i32 %58, %135
  %137 = shl i32 %136, 16
  %138 = lshr i32 %136, 16
  %139 = or i32 %138, %137
  %140 = add i32 %139, %62
  %141 = xor i32 %140, %66
  %142 = shl i32 %141, 12
  %143 = lshr i32 %141, 20
  %144 = or i32 %143, %142
  %145 = add i32 %144, %135
  %146 = xor i32 %145, %139
  %147 = shl i32 %146, 8
  %148 = lshr i32 %146, 24
  %149 = or i32 %148, %147
  %150 = add i32 %149, %140
  %151 = xor i32 %150, %144
  %152 = shl i32 %151, 7
  %153 = lshr i32 %151, 25
  %154 = or i32 %153, %152
  %155 = add i32 %114, %85
  %156 = xor i32 %155, %149
  %157 = shl i32 %156, 16
  %158 = lshr i32 %156, 16
  %159 = or i32 %158, %157
  %160 = add i32 %159, %130
  %161 = xor i32 %160, %114
  %162 = shl i32 %161, 12
  %163 = lshr i32 %161, 20
  %164 = or i32 %163, %162
  %165 = add i32 %164, %155
  %166 = xor i32 %165, %159
  %167 = shl i32 %166, 8
  %168 = lshr i32 %166, 24
  %169 = or i32 %168, %167
  %170 = add i32 %169, %160
  %171 = xor i32 %170, %164
  %172 = shl i32 %171, 7
  %173 = lshr i32 %171, 25
  %174 = or i32 %173, %172
  %175 = add i32 %134, %105
  %176 = xor i32 %175, %89
  %177 = shl i32 %176, 16
  %178 = lshr i32 %176, 16
  %179 = or i32 %178, %177
  %180 = add i32 %179, %150
  %181 = xor i32 %180, %134
  %182 = shl i32 %181, 12
  %183 = lshr i32 %181, 20
  %184 = or i32 %183, %182
  %185 = add i32 %184, %175
  %186 = xor i32 %185, %179
  %187 = shl i32 %186, 8
  %188 = lshr i32 %186, 24
  %189 = or i32 %188, %187
  %190 = add i32 %189, %180
  %191 = xor i32 %190, %184
  %192 = shl i32 %191, 7
  %193 = lshr i32 %191, 25
  %194 = or i32 %193, %192
  %195 = add i32 %154, %125
  %196 = xor i32 %195, %109
  %197 = shl i32 %196, 16
  %198 = lshr i32 %196, 16
  %199 = or i32 %198, %197
  %200 = add i32 %199, %90
  %201 = xor i32 %200, %154
  %202 = shl i32 %201, 12
  %203 = lshr i32 %201, 20
  %204 = or i32 %203, %202
  %205 = add i32 %204, %195
  %206 = xor i32 %205, %199
  %207 = shl i32 %206, 8
  %208 = lshr i32 %206, 24
  %209 = or i32 %208, %207
  %210 = add i32 %209, %200
  %211 = xor i32 %210, %204
  %212 = shl i32 %211, 7
  %213 = lshr i32 %211, 25
  %214 = or i32 %213, %212
  %215 = add i32 %94, %145
  %216 = xor i32 %215, %129
  %217 = shl i32 %216, 16
  %218 = lshr i32 %216, 16
  %219 = or i32 %218, %217
  %220 = add i32 %219, %110
  %221 = xor i32 %220, %94
  %222 = shl i32 %221, 12
  %223 = lshr i32 %221, 20
  %224 = or i32 %223, %222
  %225 = add i32 %224, %215
  %226 = xor i32 %225, %219
  %227 = shl i32 %226, 8
  %228 = lshr i32 %226, 24
  %229 = or i32 %228, %227
  %230 = add i32 %229, %220
  %231 = xor i32 %230, %224
  %232 = shl i32 %231, 7
  %233 = lshr i32 %231, 25
  %234 = or i32 %233, %232
  %235 = add nuw nsw i32 %74, 1
  %236 = icmp eq i32 %235, 10
  br i1 %236, label %237, label %57

237:                                              ; preds = %57
  %238 = bitcast i8* %0 to i32*
  store i32 %165, i32* %238, align 1
  %239 = getelementptr i8, i8* %0, i32 4
  %240 = bitcast i8* %239 to i32*
  store i32 %185, i32* %240, align 1
  %241 = getelementptr i8, i8* %0, i32 8
  %242 = bitcast i8* %241 to i32*
  store i32 %205, i32* %242, align 1
  %243 = getelementptr i8, i8* %0, i32 12
  %244 = bitcast i8* %243 to i32*
  store i32 %225, i32* %244, align 1
  %245 = getelementptr i8, i8* %0, i32 16
  %246 = bitcast i8* %245 to i32*
  store i32 %189, i32* %246, align 1
  %247 = getelementptr i8, i8* %0, i32 20
  %248 = bitcast i8* %247 to i32*
  store i32 %209, i32* %248, align 1
  %249 = getelementptr i8, i8* %0, i32 24
  %250 = bitcast i8* %249 to i32*
  store i32 %229, i32* %250, align 1
  %251 = getelementptr i8, i8* %0, i32 28
  %252 = bitcast i8* %251 to i32*
  store i32 %169, i32* %252, align 1
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_core_hchacha20_outputbytes() local_unnamed_addr #1 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_core_hchacha20_inputbytes() local_unnamed_addr #1 {
  ret i32 16
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_core_hchacha20_keybytes() local_unnamed_addr #1 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_core_hchacha20_constbytes() local_unnamed_addr #1 {
  ret i32 16
}

attributes #0 = { nofree norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for crypto_core_hchacha20_constbytes()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
