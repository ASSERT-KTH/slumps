; entering Souper's runOnFunction() for crypto_shorthash_siphashx24()

; ModuleID = './shorthash_siphashx24_ref.c.bc'
source_filename = "crypto_shorthash/siphash24/ref/shorthash_siphashx24_ref.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

; Function Attrs: nofree norecurse nounwind
define i32 @crypto_shorthash_siphashx24(i8* nocapture nonnull %0, i8* readonly %1, i64 %2, i8* nocapture nonnull readonly %3) local_unnamed_addr #0 {
  %5 = bitcast i8* %3 to i64*
  %6 = load i64, i64* %5, align 1
  %7 = getelementptr i8, i8* %3, i32 8
  %8 = bitcast i8* %7 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = trunc i64 %2 to i32
  %11 = getelementptr i8, i8* %1, i32 %10
  %12 = and i32 %10, 7
  %13 = sub nsw i32 0, %12
  %14 = getelementptr i8, i8* %11, i32 %13
  %15 = shl i64 %2, 56
  %16 = xor i64 %9, 8387220255154660723
  %17 = xor i64 %6, 7816392313619706465
  %18 = xor i64 %9, 7237128888997146499
  %19 = xor i64 %6, 8317987319222330741
  %20 = icmp eq i8* %14, %1
  br i1 %20, label %85, label %21

21:                                               ; preds = %4, %21
  %22 = phi i8* [ %83, %21 ], [ %1, %4 ]
  %23 = phi i64 [ %82, %21 ], [ %19, %4 ]
  %24 = phi i64 [ %78, %21 ], [ %18, %4 ]
  %25 = phi i64 [ %81, %21 ], [ %17, %4 ]
  %26 = phi i64 [ %73, %21 ], [ %16, %4 ]
  %27 = bitcast i8* %22 to i64*
  %28 = load i64, i64* %27, align 1
  %29 = xor i64 %28, %26
  %30 = add i64 %23, %24
  %31 = shl i64 %24, 13
  %32 = lshr i64 %24, 51
  %33 = or i64 %32, %31
  %34 = xor i64 %33, %30
  %35 = shl i64 %30, 32
  %36 = lshr i64 %30, 32
  %37 = or i64 %36, %35
  %38 = add i64 %29, %25
  %39 = shl i64 %29, 16
  %40 = lshr i64 %29, 48
  %41 = or i64 %40, %39
  %42 = xor i64 %41, %38
  %43 = add i64 %42, %37
  %44 = shl i64 %42, 21
  %45 = lshr i64 %42, 43
  %46 = or i64 %45, %44
  %47 = xor i64 %46, %43
  %48 = add i64 %38, %34
  %49 = shl i64 %34, 17
  %50 = lshr i64 %34, 47
  %51 = or i64 %50, %49
  %52 = xor i64 %48, %51
  %53 = shl i64 %48, 32
  %54 = lshr i64 %48, 32
  %55 = or i64 %54, %53
  %56 = add i64 %43, %52
  %57 = shl i64 %52, 13
  %58 = lshr i64 %52, 51
  %59 = or i64 %58, %57
  %60 = xor i64 %59, %56
  %61 = shl i64 %56, 32
  %62 = lshr i64 %56, 32
  %63 = or i64 %62, %61
  %64 = add i64 %47, %55
  %65 = shl i64 %47, 16
  %66 = lshr i64 %47, 48
  %67 = or i64 %66, %65
  %68 = xor i64 %67, %64
  %69 = add i64 %68, %63
  %70 = shl i64 %68, 21
  %71 = lshr i64 %68, 43
  %72 = or i64 %71, %70
  %73 = xor i64 %72, %69
  %74 = add i64 %64, %60
  %75 = shl i64 %60, 17
  %76 = lshr i64 %60, 47
  %77 = or i64 %76, %75
  %78 = xor i64 %77, %74
  %79 = shl i64 %74, 32
  %80 = lshr i64 %74, 32
  %81 = or i64 %80, %79
  %82 = xor i64 %69, %28
  %83 = getelementptr i8, i8* %22, i32 8
  %84 = icmp eq i8* %83, %14
  br i1 %84, label %85, label %21

85:                                               ; preds = %21, %4
  %86 = phi i64 [ %16, %4 ], [ %73, %21 ]
  %87 = phi i64 [ %17, %4 ], [ %81, %21 ]
  %88 = phi i64 [ %18, %4 ], [ %78, %21 ]
  %89 = phi i64 [ %19, %4 ], [ %82, %21 ]
  %90 = phi i8* [ %1, %4 ], [ %14, %21 ]
  switch i32 %12, label %137 [
    i32 7, label %91
    i32 6, label %97
    i32 5, label %104
    i32 4, label %111
    i32 3, label %118
    i32 2, label %125
    i32 1, label %132
  ]

91:                                               ; preds = %85
  %92 = getelementptr i8, i8* %90, i32 6
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i64
  %95 = shl nuw nsw i64 %94, 48
  %96 = or i64 %95, %15
  br label %97

97:                                               ; preds = %85, %91
  %98 = phi i64 [ %15, %85 ], [ %96, %91 ]
  %99 = getelementptr i8, i8* %90, i32 5
  %100 = load i8, i8* %99, align 1
  %101 = zext i8 %100 to i64
  %102 = shl nuw nsw i64 %101, 40
  %103 = or i64 %102, %98
  br label %104

104:                                              ; preds = %85, %97
  %105 = phi i64 [ %15, %85 ], [ %103, %97 ]
  %106 = getelementptr i8, i8* %90, i32 4
  %107 = load i8, i8* %106, align 1
  %108 = zext i8 %107 to i64
  %109 = shl nuw nsw i64 %108, 32
  %110 = or i64 %109, %105
  br label %111

111:                                              ; preds = %85, %104
  %112 = phi i64 [ %15, %85 ], [ %110, %104 ]
  %113 = getelementptr i8, i8* %90, i32 3
  %114 = load i8, i8* %113, align 1
  %115 = zext i8 %114 to i64
  %116 = shl nuw nsw i64 %115, 24
  %117 = or i64 %116, %112
  br label %118

118:                                              ; preds = %85, %111
  %119 = phi i64 [ %15, %85 ], [ %117, %111 ]
  %120 = getelementptr i8, i8* %90, i32 2
  %121 = load i8, i8* %120, align 1
  %122 = zext i8 %121 to i64
  %123 = shl nuw nsw i64 %122, 16
  %124 = or i64 %123, %119
  br label %125

125:                                              ; preds = %85, %118
  %126 = phi i64 [ %15, %85 ], [ %124, %118 ]
  %127 = getelementptr i8, i8* %90, i32 1
  %128 = load i8, i8* %127, align 1
  %129 = zext i8 %128 to i64
  %130 = shl nuw nsw i64 %129, 8
  %131 = or i64 %130, %126
  br label %132

132:                                              ; preds = %85, %125
  %133 = phi i64 [ %15, %85 ], [ %131, %125 ]
  %134 = load i8, i8* %90, align 1
  %135 = zext i8 %134 to i64
  %136 = or i64 %133, %135
  br label %137

137:                                              ; preds = %85, %132
  %138 = phi i64 [ %15, %85 ], [ %136, %132 ]
  %139 = xor i64 %138, %86
  %140 = add i64 %89, %88
  %141 = shl i64 %88, 13
  %142 = lshr i64 %88, 51
  %143 = or i64 %142, %141
  %144 = xor i64 %143, %140
  %145 = shl i64 %140, 32
  %146 = lshr i64 %140, 32
  %147 = or i64 %146, %145
  %148 = add i64 %139, %87
  %149 = shl i64 %139, 16
  %150 = lshr i64 %139, 48
  %151 = or i64 %150, %149
  %152 = xor i64 %151, %148
  %153 = add i64 %152, %147
  %154 = shl i64 %152, 21
  %155 = lshr i64 %152, 43
  %156 = or i64 %155, %154
  %157 = xor i64 %156, %153
  %158 = add i64 %148, %144
  %159 = shl i64 %144, 17
  %160 = lshr i64 %144, 47
  %161 = or i64 %160, %159
  %162 = xor i64 %158, %161
  %163 = shl i64 %158, 32
  %164 = lshr i64 %158, 32
  %165 = or i64 %164, %163
  %166 = add i64 %153, %162
  %167 = shl i64 %162, 13
  %168 = lshr i64 %162, 51
  %169 = or i64 %168, %167
  %170 = xor i64 %169, %166
  %171 = shl i64 %166, 32
  %172 = lshr i64 %166, 32
  %173 = or i64 %172, %171
  %174 = add i64 %157, %165
  %175 = shl i64 %157, 16
  %176 = lshr i64 %157, 48
  %177 = or i64 %176, %175
  %178 = xor i64 %177, %174
  %179 = add i64 %178, %173
  %180 = shl i64 %178, 21
  %181 = lshr i64 %178, 43
  %182 = or i64 %181, %180
  %183 = xor i64 %182, %179
  %184 = add i64 %174, %170
  %185 = shl i64 %170, 17
  %186 = lshr i64 %170, 47
  %187 = or i64 %186, %185
  %188 = xor i64 %187, %184
  %189 = shl i64 %184, 32
  %190 = lshr i64 %184, 32
  %191 = or i64 %190, %189
  %192 = xor i64 %179, %138
  %193 = xor i64 %191, 238
  %194 = add i64 %192, %188
  %195 = shl i64 %188, 13
  %196 = lshr i64 %188, 51
  %197 = or i64 %196, %195
  %198 = xor i64 %194, %197
  %199 = shl i64 %194, 32
  %200 = lshr i64 %194, 32
  %201 = or i64 %200, %199
  %202 = add i64 %183, %193
  %203 = shl i64 %183, 16
  %204 = lshr i64 %183, 48
  %205 = or i64 %204, %203
  %206 = xor i64 %205, %202
  %207 = add i64 %206, %201
  %208 = shl i64 %206, 21
  %209 = lshr i64 %206, 43
  %210 = or i64 %209, %208
  %211 = xor i64 %210, %207
  %212 = add i64 %202, %198
  %213 = shl i64 %198, 17
  %214 = lshr i64 %198, 47
  %215 = or i64 %214, %213
  %216 = xor i64 %215, %212
  %217 = shl i64 %212, 32
  %218 = lshr i64 %212, 32
  %219 = or i64 %218, %217
  %220 = add i64 %207, %216
  %221 = shl i64 %216, 13
  %222 = lshr i64 %216, 51
  %223 = or i64 %222, %221
  %224 = xor i64 %223, %220
  %225 = shl i64 %220, 32
  %226 = lshr i64 %220, 32
  %227 = or i64 %226, %225
  %228 = add i64 %211, %219
  %229 = shl i64 %211, 16
  %230 = lshr i64 %211, 48
  %231 = or i64 %230, %229
  %232 = xor i64 %231, %228
  %233 = add i64 %232, %227
  %234 = shl i64 %232, 21
  %235 = lshr i64 %232, 43
  %236 = or i64 %235, %234
  %237 = xor i64 %236, %233
  %238 = add i64 %228, %224
  %239 = shl i64 %224, 17
  %240 = lshr i64 %224, 47
  %241 = or i64 %240, %239
  %242 = xor i64 %241, %238
  %243 = shl i64 %238, 32
  %244 = lshr i64 %238, 32
  %245 = or i64 %244, %243
  %246 = add i64 %233, %242
  %247 = shl i64 %242, 13
  %248 = lshr i64 %242, 51
  %249 = or i64 %248, %247
  %250 = xor i64 %249, %246
  %251 = shl i64 %246, 32
  %252 = lshr i64 %246, 32
  %253 = or i64 %252, %251
  %254 = add i64 %237, %245
  %255 = shl i64 %237, 16
  %256 = lshr i64 %237, 48
  %257 = or i64 %256, %255
  %258 = xor i64 %257, %254
  %259 = add i64 %258, %253
  %260 = shl i64 %258, 21
  %261 = lshr i64 %258, 43
  %262 = or i64 %261, %260
  %263 = xor i64 %262, %259
  %264 = add i64 %254, %250
  %265 = shl i64 %250, 17
  %266 = lshr i64 %250, 47
  %267 = or i64 %266, %265
  %268 = xor i64 %267, %264
  %269 = shl i64 %264, 32
  %270 = lshr i64 %264, 32
  %271 = or i64 %270, %269
  %272 = add i64 %259, %268
  %273 = shl i64 %268, 13
  %274 = lshr i64 %268, 51
  %275 = or i64 %274, %273
  %276 = xor i64 %275, %272
  %277 = shl i64 %272, 32
  %278 = lshr i64 %272, 32
  %279 = or i64 %278, %277
  %280 = add i64 %263, %271
  %281 = shl i64 %263, 16
  %282 = lshr i64 %263, 48
  %283 = or i64 %282, %281
  %284 = xor i64 %283, %280
  %285 = add i64 %284, %279
  %286 = shl i64 %284, 21
  %287 = lshr i64 %284, 43
  %288 = or i64 %287, %286
  %289 = xor i64 %288, %285
  %290 = add i64 %280, %276
  %291 = shl i64 %276, 17
  %292 = lshr i64 %276, 47
  %293 = or i64 %292, %291
  %294 = xor i64 %293, %290
  %295 = shl i64 %290, 32
  %296 = lshr i64 %290, 32
  %297 = or i64 %296, %295
  %298 = xor i64 %285, %294
  %299 = xor i64 %298, %297
  %300 = xor i64 %299, %289
  %301 = bitcast i8* %0 to i64*
  store i64 %300, i64* %301, align 1
  %302 = xor i64 %294, 221
  %303 = add i64 %302, %285
  %304 = shl i64 %302, 13
  %305 = lshr i64 %294, 51
  %306 = or i64 %304, %305
  %307 = xor i64 %306, %303
  %308 = shl i64 %303, 32
  %309 = lshr i64 %303, 32
  %310 = or i64 %309, %308
  %311 = add i64 %289, %297
  %312 = shl i64 %289, 16
  %313 = lshr i64 %289, 48
  %314 = or i64 %313, %312
  %315 = xor i64 %314, %311
  %316 = add i64 %315, %310
  %317 = shl i64 %315, 21
  %318 = lshr i64 %315, 43
  %319 = or i64 %318, %317
  %320 = xor i64 %319, %316
  %321 = add i64 %307, %311
  %322 = shl i64 %307, 17
  %323 = lshr i64 %307, 47
  %324 = or i64 %323, %322
  %325 = xor i64 %324, %321
  %326 = shl i64 %321, 32
  %327 = lshr i64 %321, 32
  %328 = or i64 %327, %326
  %329 = add i64 %325, %316
  %330 = shl i64 %325, 13
  %331 = lshr i64 %325, 51
  %332 = or i64 %331, %330
  %333 = xor i64 %332, %329
  %334 = shl i64 %329, 32
  %335 = lshr i64 %329, 32
  %336 = or i64 %335, %334
  %337 = add i64 %320, %328
  %338 = shl i64 %320, 16
  %339 = lshr i64 %320, 48
  %340 = or i64 %339, %338
  %341 = xor i64 %340, %337
  %342 = add i64 %341, %336
  %343 = shl i64 %341, 21
  %344 = lshr i64 %341, 43
  %345 = or i64 %344, %343
  %346 = xor i64 %345, %342
  %347 = add i64 %333, %337
  %348 = shl i64 %333, 17
  %349 = lshr i64 %333, 47
  %350 = or i64 %349, %348
  %351 = xor i64 %350, %347
  %352 = shl i64 %347, 32
  %353 = lshr i64 %347, 32
  %354 = or i64 %353, %352
  %355 = add i64 %351, %342
  %356 = shl i64 %351, 13
  %357 = lshr i64 %351, 51
  %358 = or i64 %357, %356
  %359 = xor i64 %358, %355
  %360 = shl i64 %355, 32
  %361 = lshr i64 %355, 32
  %362 = or i64 %361, %360
  %363 = add i64 %346, %354
  %364 = shl i64 %346, 16
  %365 = lshr i64 %346, 48
  %366 = or i64 %365, %364
  %367 = xor i64 %366, %363
  %368 = add i64 %367, %362
  %369 = shl i64 %367, 21
  %370 = lshr i64 %367, 43
  %371 = or i64 %370, %369
  %372 = xor i64 %371, %368
  %373 = add i64 %359, %363
  %374 = shl i64 %359, 17
  %375 = lshr i64 %359, 47
  %376 = or i64 %375, %374
  %377 = xor i64 %376, %373
  %378 = shl i64 %373, 32
  %379 = lshr i64 %373, 32
  %380 = or i64 %379, %378
  %381 = add i64 %377, %368
  %382 = shl i64 %377, 13
  %383 = lshr i64 %377, 51
  %384 = or i64 %383, %382
  %385 = xor i64 %384, %381
  %386 = add i64 %372, %380
  %387 = shl i64 %372, 16
  %388 = lshr i64 %372, 48
  %389 = or i64 %388, %387
  %390 = xor i64 %389, %386
  %391 = shl i64 %390, 21
  %392 = lshr i64 %390, 43
  %393 = or i64 %392, %391
  %394 = add i64 %385, %386
  %395 = shl i64 %385, 17
  %396 = lshr i64 %385, 47
  %397 = or i64 %396, %395
  %398 = shl i64 %394, 32
  %399 = lshr i64 %394, 32
  %400 = or i64 %399, %398
  %401 = xor i64 %397, %394
  %402 = xor i64 %401, %393
  %403 = xor i64 %402, %400
  %404 = getelementptr i8, i8* %0, i32 8
  %405 = bitcast i8* %404 to i64*
  store i64 %403, i64* %405, align 1
  ret i32 0
}

attributes #0 = { nofree norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %6 = load i64, i64* %5, align 1
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i64, i64* %8, align 1
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = trunc i64 %2 to i32
; Looking for a replacement for:
%0:i64 = var
%1:i32 = trunc %0
infer %1

; *****
; For LLVM instruction:
;  %12 = and i32 %10, 7
; Looking for a replacement for:
%0:i64 = var
%1:i32 = trunc %0 (hasExternalUses)
%2:i32 = and 7:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %13 = sub nsw i32 0, %12
; Looking for a replacement for:
%0:i64 = var
%1:i32 = trunc %0 (hasExternalUses)
%2:i32 = and 7:i32, %1 (hasExternalUses)
%3:i32 = subnsw 0:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %15 = shl i64 %2, 56
; Looking for a replacement for:
%0:i64 = var
%1:i64 = shl %0, 56:i64
infer %1

; *****
; For LLVM instruction:
;  %16 = xor i64 %9, 8387220255154660723
; Looking for a replacement for:
%0:i64 = var
%1:i64 = xor 8387220255154660723:i64, %0
infer %1

; *****
; For LLVM instruction:
;  %17 = xor i64 %6, 7816392313619706465
; Looking for a replacement for:
%0:i64 = var
%1:i64 = xor 7816392313619706465:i64, %0
infer %1

; *****
; For LLVM instruction:
;  %18 = xor i64 %9, 7237128888997146499
; Looking for a replacement for:
%0:i64 = var
%1:i64 = xor 7237128888997146499:i64, %0
infer %1

; *****
; For LLVM instruction:
;  %19 = xor i64 %6, 8317987319222330741
; Looking for a replacement for:
%0:i64 = var
%1:i64 = xor 8317987319222330741:i64, %0
infer %1

; *****
; For LLVM instruction:
;  %20 = icmp eq i8* %14, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %23 = phi i64 [ %82, %21 ], [ %19, %4 ]
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = phi i64 [ %78, %21 ], [ %18, %4 ]
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = phi i64 [ %81, %21 ], [ %17, %4 ]
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = phi i64 [ %73, %21 ], [ %16, %4 ]
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i64, i64* %27, align 1
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %29 = xor i64 %28, %26
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %30 = add i64 %23, %24
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %31 = shl i64 %24, 13
; Looking for a replacement for:
%0:i64 = var
%1:i64 = shl %0, 13:i64
infer %1

; *****
; For LLVM instruction:
;  %32 = lshr i64 %24, 51
; Looking for a replacement for:
%0:i64 = var
%1:i64 = lshr %0, 51:i64
infer %1

; *****
; For LLVM instruction:
;  %33 = or i64 %32, %31
; Looking for a replacement for:
%0:i64 = var
%1:i64 = shl %0, 13:i64
%2:i64 = lshr %0, 51:i64
%3:i64 = or %1, %2
infer %3

; *****
; For LLVM instruction:
;  %34 = xor i64 %33, %30
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1 (hasExternalUses)
%3:i64 = shl %1, 13:i64
%4:i64 = lshr %1, 51:i64
%5:i64 = or %3, %4
%6:i64 = xor %2, %5
infer %6

; *****
; For LLVM instruction:
;  %35 = shl i64 %30, 32
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1 (hasExternalUses)
%3:i64 = shl %2, 32:i64
infer %3

; *****
; For LLVM instruction:
;  %36 = lshr i64 %30, 32
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1 (hasExternalUses)
%3:i64 = lshr %2, 32:i64
infer %3

; *****
; For LLVM instruction:
;  %37 = or i64 %36, %35
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1 (hasExternalUses)
%3:i64 = shl %2, 32:i64
%4:i64 = lshr %2, 32:i64
%5:i64 = or %3, %4
infer %5

; *****
; For LLVM instruction:
;  %38 = add i64 %29, %25
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2 (hasExternalUses)
%4:i64 = add %0, %3
infer %4

; *****
; For LLVM instruction:
;  %39 = shl i64 %29, 16
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = xor %0, %1 (hasExternalUses)
%3:i64 = shl %2, 16:i64
infer %3

; *****
; For LLVM instruction:
;  %40 = lshr i64 %29, 48
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = xor %0, %1 (hasExternalUses)
%3:i64 = lshr %2, 48:i64
infer %3

; *****
; For LLVM instruction:
;  %41 = or i64 %40, %39
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = xor %0, %1 (hasExternalUses)
%3:i64 = shl %2, 16:i64
%4:i64 = lshr %2, 48:i64
%5:i64 = or %3, %4
infer %5

; *****
; For LLVM instruction:
;  %42 = xor i64 %41, %38
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2
%4:i64 = add %0, %3 (hasExternalUses)
%5:i64 = shl %3, 16:i64
%6:i64 = lshr %3, 48:i64
%7:i64 = or %5, %6
%8:i64 = xor %4, %7
infer %8

; *****
; For LLVM instruction:
;  %43 = add i64 %42, %37
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1 (hasExternalUses)
%3:i64 = shl %2, 32:i64
%4:i64 = lshr %2, 32:i64
%5:i64 = or %3, %4
%6:i64 = var
%7:i64 = var
%8:i64 = var
%9:i64 = xor %7, %8
%10:i64 = add %6, %9 (hasExternalUses)
%11:i64 = shl %9, 16:i64
%12:i64 = lshr %9, 48:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13 (hasExternalUses)
%15:i64 = add %5, %14
infer %15

; *****
; For LLVM instruction:
;  %44 = shl i64 %42, 21
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2
%4:i64 = add %0, %3 (hasExternalUses)
%5:i64 = shl %3, 16:i64
%6:i64 = lshr %3, 48:i64
%7:i64 = or %5, %6
%8:i64 = xor %4, %7 (hasExternalUses)
%9:i64 = shl %8, 21:i64
infer %9

; *****
; For LLVM instruction:
;  %45 = lshr i64 %42, 43
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2
%4:i64 = add %0, %3 (hasExternalUses)
%5:i64 = shl %3, 16:i64
%6:i64 = lshr %3, 48:i64
%7:i64 = or %5, %6
%8:i64 = xor %4, %7 (hasExternalUses)
%9:i64 = lshr %8, 43:i64
infer %9

; *****
; For LLVM instruction:
;  %46 = or i64 %45, %44
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2
%4:i64 = add %0, %3 (hasExternalUses)
%5:i64 = shl %3, 16:i64
%6:i64 = lshr %3, 48:i64
%7:i64 = or %5, %6
%8:i64 = xor %4, %7 (hasExternalUses)
%9:i64 = shl %8, 21:i64
%10:i64 = lshr %8, 43:i64
%11:i64 = or %9, %10
infer %11

; *****
; For LLVM instruction:
;  %47 = xor i64 %46, %43
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1 (hasExternalUses)
%3:i64 = shl %2, 32:i64
%4:i64 = lshr %2, 32:i64
%5:i64 = or %3, %4
%6:i64 = var
%7:i64 = var
%8:i64 = var
%9:i64 = xor %7, %8
%10:i64 = add %6, %9 (hasExternalUses)
%11:i64 = shl %9, 16:i64
%12:i64 = lshr %9, 48:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %5, %14 (hasExternalUses)
%16:i64 = shl %14, 21:i64
%17:i64 = lshr %14, 43:i64
%18:i64 = or %16, %17
%19:i64 = xor %15, %18
infer %19

; *****
; For LLVM instruction:
;  %48 = add i64 %38, %34
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2 (hasExternalUses)
%4:i64 = add %0, %3 (hasExternalUses)
%5:i64 = var
%6:i64 = var
%7:i64 = add %5, %6 (hasExternalUses)
%8:i64 = shl %6, 13:i64
%9:i64 = lshr %6, 51:i64
%10:i64 = or %8, %9
%11:i64 = xor %7, %10 (hasExternalUses)
%12:i64 = add %4, %11
infer %12

; *****
; For LLVM instruction:
;  %49 = shl i64 %34, 17
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1 (hasExternalUses)
%3:i64 = shl %1, 13:i64
%4:i64 = lshr %1, 51:i64
%5:i64 = or %3, %4
%6:i64 = xor %2, %5 (hasExternalUses)
%7:i64 = shl %6, 17:i64
infer %7

; *****
; For LLVM instruction:
;  %50 = lshr i64 %34, 47
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1 (hasExternalUses)
%3:i64 = shl %1, 13:i64
%4:i64 = lshr %1, 51:i64
%5:i64 = or %3, %4
%6:i64 = xor %2, %5 (hasExternalUses)
%7:i64 = lshr %6, 47:i64
infer %7

; *****
; For LLVM instruction:
;  %51 = or i64 %50, %49
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1 (hasExternalUses)
%3:i64 = shl %1, 13:i64
%4:i64 = lshr %1, 51:i64
%5:i64 = or %3, %4
%6:i64 = xor %2, %5 (hasExternalUses)
%7:i64 = shl %6, 17:i64
%8:i64 = lshr %6, 47:i64
%9:i64 = or %7, %8
infer %9

; *****
; For LLVM instruction:
;  %52 = xor i64 %48, %51
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2 (hasExternalUses)
%4:i64 = add %0, %3 (hasExternalUses)
%5:i64 = var
%6:i64 = var
%7:i64 = add %5, %6 (hasExternalUses)
%8:i64 = shl %6, 13:i64
%9:i64 = lshr %6, 51:i64
%10:i64 = or %8, %9
%11:i64 = xor %7, %10
%12:i64 = add %4, %11 (hasExternalUses)
%13:i64 = shl %11, 17:i64
%14:i64 = lshr %11, 47:i64
%15:i64 = or %13, %14
%16:i64 = xor %12, %15
infer %16

; *****
; For LLVM instruction:
;  %53 = shl i64 %48, 32
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2 (hasExternalUses)
%4:i64 = add %0, %3 (hasExternalUses)
%5:i64 = var
%6:i64 = var
%7:i64 = add %5, %6 (hasExternalUses)
%8:i64 = shl %6, 13:i64
%9:i64 = lshr %6, 51:i64
%10:i64 = or %8, %9
%11:i64 = xor %7, %10 (hasExternalUses)
%12:i64 = add %4, %11 (hasExternalUses)
%13:i64 = shl %12, 32:i64
infer %13

; *****
; For LLVM instruction:
;  %54 = lshr i64 %48, 32
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2 (hasExternalUses)
%4:i64 = add %0, %3 (hasExternalUses)
%5:i64 = var
%6:i64 = var
%7:i64 = add %5, %6 (hasExternalUses)
%8:i64 = shl %6, 13:i64
%9:i64 = lshr %6, 51:i64
%10:i64 = or %8, %9
%11:i64 = xor %7, %10 (hasExternalUses)
%12:i64 = add %4, %11 (hasExternalUses)
%13:i64 = lshr %12, 32:i64
infer %13

; *****
; For LLVM instruction:
;  %55 = or i64 %54, %53
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2 (hasExternalUses)
%4:i64 = add %0, %3 (hasExternalUses)
%5:i64 = var
%6:i64 = var
%7:i64 = add %5, %6 (hasExternalUses)
%8:i64 = shl %6, 13:i64
%9:i64 = lshr %6, 51:i64
%10:i64 = or %8, %9
%11:i64 = xor %7, %10 (hasExternalUses)
%12:i64 = add %4, %11 (hasExternalUses)
%13:i64 = shl %12, 32:i64
%14:i64 = lshr %12, 32:i64
%15:i64 = or %13, %14
infer %15

; *****
; For LLVM instruction:
;  %56 = add i64 %43, %52
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = shl %2, 32:i64
%4:i64 = lshr %2, 32:i64
%5:i64 = or %3, %4
%6:i64 = var
%7:i64 = var
%8:i64 = var
%9:i64 = xor %7, %8
%10:i64 = add %6, %9
%11:i64 = shl %9, 16:i64
%12:i64 = lshr %9, 48:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13 (hasExternalUses)
%15:i64 = add %5, %14 (hasExternalUses)
%16:i64 = shl %1, 13:i64
%17:i64 = lshr %1, 51:i64
%18:i64 = or %16, %17
%19:i64 = xor %2, %18
%20:i64 = add %10, %19 (hasExternalUses)
%21:i64 = shl %19, 17:i64
%22:i64 = lshr %19, 47:i64
%23:i64 = or %21, %22
%24:i64 = xor %20, %23 (hasExternalUses)
%25:i64 = add %15, %24
infer %25

; *****
; For LLVM instruction:
;  %57 = shl i64 %52, 13
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2 (hasExternalUses)
%4:i64 = add %0, %3 (hasExternalUses)
%5:i64 = var
%6:i64 = var
%7:i64 = add %5, %6 (hasExternalUses)
%8:i64 = shl %6, 13:i64
%9:i64 = lshr %6, 51:i64
%10:i64 = or %8, %9
%11:i64 = xor %7, %10
%12:i64 = add %4, %11 (hasExternalUses)
%13:i64 = shl %11, 17:i64
%14:i64 = lshr %11, 47:i64
%15:i64 = or %13, %14
%16:i64 = xor %12, %15 (hasExternalUses)
%17:i64 = shl %16, 13:i64
infer %17

; *****
; For LLVM instruction:
;  %58 = lshr i64 %52, 51
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2 (hasExternalUses)
%4:i64 = add %0, %3 (hasExternalUses)
%5:i64 = var
%6:i64 = var
%7:i64 = add %5, %6 (hasExternalUses)
%8:i64 = shl %6, 13:i64
%9:i64 = lshr %6, 51:i64
%10:i64 = or %8, %9
%11:i64 = xor %7, %10
%12:i64 = add %4, %11 (hasExternalUses)
%13:i64 = shl %11, 17:i64
%14:i64 = lshr %11, 47:i64
%15:i64 = or %13, %14
%16:i64 = xor %12, %15 (hasExternalUses)
%17:i64 = lshr %16, 51:i64
infer %17

; *****
; For LLVM instruction:
;  %59 = or i64 %58, %57
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2 (hasExternalUses)
%4:i64 = add %0, %3 (hasExternalUses)
%5:i64 = var
%6:i64 = var
%7:i64 = add %5, %6 (hasExternalUses)
%8:i64 = shl %6, 13:i64
%9:i64 = lshr %6, 51:i64
%10:i64 = or %8, %9
%11:i64 = xor %7, %10
%12:i64 = add %4, %11 (hasExternalUses)
%13:i64 = shl %11, 17:i64
%14:i64 = lshr %11, 47:i64
%15:i64 = or %13, %14
%16:i64 = xor %12, %15 (hasExternalUses)
%17:i64 = shl %16, 13:i64
%18:i64 = lshr %16, 51:i64
%19:i64 = or %17, %18
infer %19

; *****
; For LLVM instruction:
;  %60 = xor i64 %59, %56
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = shl %2, 32:i64
%4:i64 = lshr %2, 32:i64
%5:i64 = or %3, %4
%6:i64 = var
%7:i64 = var
%8:i64 = var
%9:i64 = xor %7, %8
%10:i64 = add %6, %9
%11:i64 = shl %9, 16:i64
%12:i64 = lshr %9, 48:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13 (hasExternalUses)
%15:i64 = add %5, %14 (hasExternalUses)
%16:i64 = shl %1, 13:i64
%17:i64 = lshr %1, 51:i64
%18:i64 = or %16, %17
%19:i64 = xor %2, %18
%20:i64 = add %10, %19 (hasExternalUses)
%21:i64 = shl %19, 17:i64
%22:i64 = lshr %19, 47:i64
%23:i64 = or %21, %22
%24:i64 = xor %20, %23
%25:i64 = add %15, %24 (hasExternalUses)
%26:i64 = shl %24, 13:i64
%27:i64 = lshr %24, 51:i64
%28:i64 = or %26, %27
%29:i64 = xor %25, %28
infer %29

; *****
; For LLVM instruction:
;  %61 = shl i64 %56, 32
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = shl %2, 32:i64
%4:i64 = lshr %2, 32:i64
%5:i64 = or %3, %4
%6:i64 = var
%7:i64 = var
%8:i64 = var
%9:i64 = xor %7, %8
%10:i64 = add %6, %9
%11:i64 = shl %9, 16:i64
%12:i64 = lshr %9, 48:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13 (hasExternalUses)
%15:i64 = add %5, %14 (hasExternalUses)
%16:i64 = shl %1, 13:i64
%17:i64 = lshr %1, 51:i64
%18:i64 = or %16, %17
%19:i64 = xor %2, %18
%20:i64 = add %10, %19 (hasExternalUses)
%21:i64 = shl %19, 17:i64
%22:i64 = lshr %19, 47:i64
%23:i64 = or %21, %22
%24:i64 = xor %20, %23 (hasExternalUses)
%25:i64 = add %15, %24 (hasExternalUses)
%26:i64 = shl %25, 32:i64
infer %26

; *****
; For LLVM instruction:
;  %62 = lshr i64 %56, 32
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = shl %2, 32:i64
%4:i64 = lshr %2, 32:i64
%5:i64 = or %3, %4
%6:i64 = var
%7:i64 = var
%8:i64 = var
%9:i64 = xor %7, %8
%10:i64 = add %6, %9
%11:i64 = shl %9, 16:i64
%12:i64 = lshr %9, 48:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13 (hasExternalUses)
%15:i64 = add %5, %14 (hasExternalUses)
%16:i64 = shl %1, 13:i64
%17:i64 = lshr %1, 51:i64
%18:i64 = or %16, %17
%19:i64 = xor %2, %18
%20:i64 = add %10, %19 (hasExternalUses)
%21:i64 = shl %19, 17:i64
%22:i64 = lshr %19, 47:i64
%23:i64 = or %21, %22
%24:i64 = xor %20, %23 (hasExternalUses)
%25:i64 = add %15, %24 (hasExternalUses)
%26:i64 = lshr %25, 32:i64
infer %26

; *****
; For LLVM instruction:
;  %63 = or i64 %62, %61
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = shl %2, 32:i64
%4:i64 = lshr %2, 32:i64
%5:i64 = or %3, %4
%6:i64 = var
%7:i64 = var
%8:i64 = var
%9:i64 = xor %7, %8
%10:i64 = add %6, %9
%11:i64 = shl %9, 16:i64
%12:i64 = lshr %9, 48:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13 (hasExternalUses)
%15:i64 = add %5, %14 (hasExternalUses)
%16:i64 = shl %1, 13:i64
%17:i64 = lshr %1, 51:i64
%18:i64 = or %16, %17
%19:i64 = xor %2, %18
%20:i64 = add %10, %19 (hasExternalUses)
%21:i64 = shl %19, 17:i64
%22:i64 = lshr %19, 47:i64
%23:i64 = or %21, %22
%24:i64 = xor %20, %23 (hasExternalUses)
%25:i64 = add %15, %24 (hasExternalUses)
%26:i64 = shl %25, 32:i64
%27:i64 = lshr %25, 32:i64
%28:i64 = or %26, %27
infer %28

; *****
; For LLVM instruction:
;  %64 = add i64 %47, %55
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2
%4:i64 = add %0, %3
%5:i64 = var
%6:i64 = var
%7:i64 = add %5, %6
%8:i64 = shl %6, 13:i64
%9:i64 = lshr %6, 51:i64
%10:i64 = or %8, %9
%11:i64 = xor %7, %10 (hasExternalUses)
%12:i64 = add %4, %11 (hasExternalUses)
%13:i64 = shl %12, 32:i64
%14:i64 = lshr %12, 32:i64
%15:i64 = or %13, %14
%16:i64 = shl %7, 32:i64
%17:i64 = lshr %7, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %3, 16:i64
%20:i64 = lshr %3, 48:i64
%21:i64 = or %19, %20
%22:i64 = xor %4, %21
%23:i64 = add %18, %22 (hasExternalUses)
%24:i64 = shl %22, 21:i64
%25:i64 = lshr %22, 43:i64
%26:i64 = or %24, %25
%27:i64 = xor %23, %26 (hasExternalUses)
%28:i64 = add %15, %27
infer %28

; *****
; For LLVM instruction:
;  %65 = shl i64 %47, 16
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1 (hasExternalUses)
%3:i64 = shl %2, 32:i64
%4:i64 = lshr %2, 32:i64
%5:i64 = or %3, %4
%6:i64 = var
%7:i64 = var
%8:i64 = var
%9:i64 = xor %7, %8
%10:i64 = add %6, %9 (hasExternalUses)
%11:i64 = shl %9, 16:i64
%12:i64 = lshr %9, 48:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %5, %14 (hasExternalUses)
%16:i64 = shl %14, 21:i64
%17:i64 = lshr %14, 43:i64
%18:i64 = or %16, %17
%19:i64 = xor %15, %18 (hasExternalUses)
%20:i64 = shl %19, 16:i64
infer %20

; *****
; For LLVM instruction:
;  %66 = lshr i64 %47, 48
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1 (hasExternalUses)
%3:i64 = shl %2, 32:i64
%4:i64 = lshr %2, 32:i64
%5:i64 = or %3, %4
%6:i64 = var
%7:i64 = var
%8:i64 = var
%9:i64 = xor %7, %8
%10:i64 = add %6, %9 (hasExternalUses)
%11:i64 = shl %9, 16:i64
%12:i64 = lshr %9, 48:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %5, %14 (hasExternalUses)
%16:i64 = shl %14, 21:i64
%17:i64 = lshr %14, 43:i64
%18:i64 = or %16, %17
%19:i64 = xor %15, %18 (hasExternalUses)
%20:i64 = lshr %19, 48:i64
infer %20

; *****
; For LLVM instruction:
;  %67 = or i64 %66, %65
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1 (hasExternalUses)
%3:i64 = shl %2, 32:i64
%4:i64 = lshr %2, 32:i64
%5:i64 = or %3, %4
%6:i64 = var
%7:i64 = var
%8:i64 = var
%9:i64 = xor %7, %8
%10:i64 = add %6, %9 (hasExternalUses)
%11:i64 = shl %9, 16:i64
%12:i64 = lshr %9, 48:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %5, %14 (hasExternalUses)
%16:i64 = shl %14, 21:i64
%17:i64 = lshr %14, 43:i64
%18:i64 = or %16, %17
%19:i64 = xor %15, %18 (hasExternalUses)
%20:i64 = shl %19, 16:i64
%21:i64 = lshr %19, 48:i64
%22:i64 = or %20, %21
infer %22

; *****
; For LLVM instruction:
;  %68 = xor i64 %67, %64
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2
%4:i64 = add %0, %3
%5:i64 = var
%6:i64 = var
%7:i64 = add %5, %6
%8:i64 = shl %6, 13:i64
%9:i64 = lshr %6, 51:i64
%10:i64 = or %8, %9
%11:i64 = xor %7, %10 (hasExternalUses)
%12:i64 = add %4, %11 (hasExternalUses)
%13:i64 = shl %12, 32:i64
%14:i64 = lshr %12, 32:i64
%15:i64 = or %13, %14
%16:i64 = shl %7, 32:i64
%17:i64 = lshr %7, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %3, 16:i64
%20:i64 = lshr %3, 48:i64
%21:i64 = or %19, %20
%22:i64 = xor %4, %21
%23:i64 = add %18, %22 (hasExternalUses)
%24:i64 = shl %22, 21:i64
%25:i64 = lshr %22, 43:i64
%26:i64 = or %24, %25
%27:i64 = xor %23, %26
%28:i64 = add %15, %27 (hasExternalUses)
%29:i64 = shl %27, 16:i64
%30:i64 = lshr %27, 48:i64
%31:i64 = or %29, %30
%32:i64 = xor %28, %31
infer %32

; *****
; For LLVM instruction:
;  %69 = add i64 %68, %63
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = shl %2, 32:i64
%4:i64 = lshr %2, 32:i64
%5:i64 = or %3, %4
%6:i64 = var
%7:i64 = var
%8:i64 = var
%9:i64 = xor %7, %8
%10:i64 = add %6, %9
%11:i64 = shl %9, 16:i64
%12:i64 = lshr %9, 48:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %5, %14
%16:i64 = shl %1, 13:i64
%17:i64 = lshr %1, 51:i64
%18:i64 = or %16, %17
%19:i64 = xor %2, %18
%20:i64 = add %10, %19
%21:i64 = shl %19, 17:i64
%22:i64 = lshr %19, 47:i64
%23:i64 = or %21, %22
%24:i64 = xor %20, %23 (hasExternalUses)
%25:i64 = add %15, %24 (hasExternalUses)
%26:i64 = shl %25, 32:i64
%27:i64 = lshr %25, 32:i64
%28:i64 = or %26, %27
%29:i64 = shl %20, 32:i64
%30:i64 = lshr %20, 32:i64
%31:i64 = or %29, %30
%32:i64 = shl %14, 21:i64
%33:i64 = lshr %14, 43:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %31, %35 (hasExternalUses)
%37:i64 = shl %35, 16:i64
%38:i64 = lshr %35, 48:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39 (hasExternalUses)
%41:i64 = add %28, %40
infer %41

; *****
; For LLVM instruction:
;  %70 = shl i64 %68, 21
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2
%4:i64 = add %0, %3
%5:i64 = var
%6:i64 = var
%7:i64 = add %5, %6
%8:i64 = shl %6, 13:i64
%9:i64 = lshr %6, 51:i64
%10:i64 = or %8, %9
%11:i64 = xor %7, %10 (hasExternalUses)
%12:i64 = add %4, %11 (hasExternalUses)
%13:i64 = shl %12, 32:i64
%14:i64 = lshr %12, 32:i64
%15:i64 = or %13, %14
%16:i64 = shl %7, 32:i64
%17:i64 = lshr %7, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %3, 16:i64
%20:i64 = lshr %3, 48:i64
%21:i64 = or %19, %20
%22:i64 = xor %4, %21
%23:i64 = add %18, %22 (hasExternalUses)
%24:i64 = shl %22, 21:i64
%25:i64 = lshr %22, 43:i64
%26:i64 = or %24, %25
%27:i64 = xor %23, %26
%28:i64 = add %15, %27 (hasExternalUses)
%29:i64 = shl %27, 16:i64
%30:i64 = lshr %27, 48:i64
%31:i64 = or %29, %30
%32:i64 = xor %28, %31 (hasExternalUses)
%33:i64 = shl %32, 21:i64
infer %33

; *****
; For LLVM instruction:
;  %71 = lshr i64 %68, 43
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2
%4:i64 = add %0, %3
%5:i64 = var
%6:i64 = var
%7:i64 = add %5, %6
%8:i64 = shl %6, 13:i64
%9:i64 = lshr %6, 51:i64
%10:i64 = or %8, %9
%11:i64 = xor %7, %10 (hasExternalUses)
%12:i64 = add %4, %11 (hasExternalUses)
%13:i64 = shl %12, 32:i64
%14:i64 = lshr %12, 32:i64
%15:i64 = or %13, %14
%16:i64 = shl %7, 32:i64
%17:i64 = lshr %7, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %3, 16:i64
%20:i64 = lshr %3, 48:i64
%21:i64 = or %19, %20
%22:i64 = xor %4, %21
%23:i64 = add %18, %22 (hasExternalUses)
%24:i64 = shl %22, 21:i64
%25:i64 = lshr %22, 43:i64
%26:i64 = or %24, %25
%27:i64 = xor %23, %26
%28:i64 = add %15, %27 (hasExternalUses)
%29:i64 = shl %27, 16:i64
%30:i64 = lshr %27, 48:i64
%31:i64 = or %29, %30
%32:i64 = xor %28, %31 (hasExternalUses)
%33:i64 = lshr %32, 43:i64
infer %33

; *****
; For LLVM instruction:
;  %72 = or i64 %71, %70
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2
%4:i64 = add %0, %3
%5:i64 = var
%6:i64 = var
%7:i64 = add %5, %6
%8:i64 = shl %6, 13:i64
%9:i64 = lshr %6, 51:i64
%10:i64 = or %8, %9
%11:i64 = xor %7, %10 (hasExternalUses)
%12:i64 = add %4, %11 (hasExternalUses)
%13:i64 = shl %12, 32:i64
%14:i64 = lshr %12, 32:i64
%15:i64 = or %13, %14
%16:i64 = shl %7, 32:i64
%17:i64 = lshr %7, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %3, 16:i64
%20:i64 = lshr %3, 48:i64
%21:i64 = or %19, %20
%22:i64 = xor %4, %21
%23:i64 = add %18, %22 (hasExternalUses)
%24:i64 = shl %22, 21:i64
%25:i64 = lshr %22, 43:i64
%26:i64 = or %24, %25
%27:i64 = xor %23, %26
%28:i64 = add %15, %27 (hasExternalUses)
%29:i64 = shl %27, 16:i64
%30:i64 = lshr %27, 48:i64
%31:i64 = or %29, %30
%32:i64 = xor %28, %31 (hasExternalUses)
%33:i64 = shl %32, 21:i64
%34:i64 = lshr %32, 43:i64
%35:i64 = or %33, %34
infer %35

; *****
; For LLVM instruction:
;  %73 = xor i64 %72, %69
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = shl %2, 32:i64
%4:i64 = lshr %2, 32:i64
%5:i64 = or %3, %4
%6:i64 = var
%7:i64 = var
%8:i64 = var
%9:i64 = xor %7, %8
%10:i64 = add %6, %9
%11:i64 = shl %9, 16:i64
%12:i64 = lshr %9, 48:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %5, %14
%16:i64 = shl %1, 13:i64
%17:i64 = lshr %1, 51:i64
%18:i64 = or %16, %17
%19:i64 = xor %2, %18
%20:i64 = add %10, %19
%21:i64 = shl %19, 17:i64
%22:i64 = lshr %19, 47:i64
%23:i64 = or %21, %22
%24:i64 = xor %20, %23 (hasExternalUses)
%25:i64 = add %15, %24 (hasExternalUses)
%26:i64 = shl %25, 32:i64
%27:i64 = lshr %25, 32:i64
%28:i64 = or %26, %27
%29:i64 = shl %20, 32:i64
%30:i64 = lshr %20, 32:i64
%31:i64 = or %29, %30
%32:i64 = shl %14, 21:i64
%33:i64 = lshr %14, 43:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %31, %35 (hasExternalUses)
%37:i64 = shl %35, 16:i64
%38:i64 = lshr %35, 48:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %28, %40 (hasExternalUses)
%42:i64 = shl %40, 21:i64
%43:i64 = lshr %40, 43:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
infer %45

; *****
; For LLVM instruction:
;  %74 = add i64 %64, %60
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2
%4:i64 = add %0, %3
%5:i64 = var
%6:i64 = var
%7:i64 = add %5, %6
%8:i64 = shl %6, 13:i64
%9:i64 = lshr %6, 51:i64
%10:i64 = or %8, %9
%11:i64 = xor %7, %10
%12:i64 = add %4, %11
%13:i64 = shl %12, 32:i64
%14:i64 = lshr %12, 32:i64
%15:i64 = or %13, %14
%16:i64 = shl %7, 32:i64
%17:i64 = lshr %7, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %3, 16:i64
%20:i64 = lshr %3, 48:i64
%21:i64 = or %19, %20
%22:i64 = xor %4, %21
%23:i64 = add %18, %22
%24:i64 = shl %22, 21:i64
%25:i64 = lshr %22, 43:i64
%26:i64 = or %24, %25
%27:i64 = xor %23, %26 (hasExternalUses)
%28:i64 = add %15, %27 (hasExternalUses)
%29:i64 = shl %11, 17:i64
%30:i64 = lshr %11, 47:i64
%31:i64 = or %29, %30
%32:i64 = xor %12, %31
%33:i64 = add %23, %32 (hasExternalUses)
%34:i64 = shl %32, 13:i64
%35:i64 = lshr %32, 51:i64
%36:i64 = or %34, %35
%37:i64 = xor %33, %36 (hasExternalUses)
%38:i64 = add %28, %37
infer %38

; *****
; For LLVM instruction:
;  %75 = shl i64 %60, 17
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = shl %2, 32:i64
%4:i64 = lshr %2, 32:i64
%5:i64 = or %3, %4
%6:i64 = var
%7:i64 = var
%8:i64 = var
%9:i64 = xor %7, %8
%10:i64 = add %6, %9
%11:i64 = shl %9, 16:i64
%12:i64 = lshr %9, 48:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13 (hasExternalUses)
%15:i64 = add %5, %14 (hasExternalUses)
%16:i64 = shl %1, 13:i64
%17:i64 = lshr %1, 51:i64
%18:i64 = or %16, %17
%19:i64 = xor %2, %18
%20:i64 = add %10, %19 (hasExternalUses)
%21:i64 = shl %19, 17:i64
%22:i64 = lshr %19, 47:i64
%23:i64 = or %21, %22
%24:i64 = xor %20, %23
%25:i64 = add %15, %24 (hasExternalUses)
%26:i64 = shl %24, 13:i64
%27:i64 = lshr %24, 51:i64
%28:i64 = or %26, %27
%29:i64 = xor %25, %28 (hasExternalUses)
%30:i64 = shl %29, 17:i64
infer %30

; *****
; For LLVM instruction:
;  %76 = lshr i64 %60, 47
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = shl %2, 32:i64
%4:i64 = lshr %2, 32:i64
%5:i64 = or %3, %4
%6:i64 = var
%7:i64 = var
%8:i64 = var
%9:i64 = xor %7, %8
%10:i64 = add %6, %9
%11:i64 = shl %9, 16:i64
%12:i64 = lshr %9, 48:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13 (hasExternalUses)
%15:i64 = add %5, %14 (hasExternalUses)
%16:i64 = shl %1, 13:i64
%17:i64 = lshr %1, 51:i64
%18:i64 = or %16, %17
%19:i64 = xor %2, %18
%20:i64 = add %10, %19 (hasExternalUses)
%21:i64 = shl %19, 17:i64
%22:i64 = lshr %19, 47:i64
%23:i64 = or %21, %22
%24:i64 = xor %20, %23
%25:i64 = add %15, %24 (hasExternalUses)
%26:i64 = shl %24, 13:i64
%27:i64 = lshr %24, 51:i64
%28:i64 = or %26, %27
%29:i64 = xor %25, %28 (hasExternalUses)
%30:i64 = lshr %29, 47:i64
infer %30

; *****
; For LLVM instruction:
;  %77 = or i64 %76, %75
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = shl %2, 32:i64
%4:i64 = lshr %2, 32:i64
%5:i64 = or %3, %4
%6:i64 = var
%7:i64 = var
%8:i64 = var
%9:i64 = xor %7, %8
%10:i64 = add %6, %9
%11:i64 = shl %9, 16:i64
%12:i64 = lshr %9, 48:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13 (hasExternalUses)
%15:i64 = add %5, %14 (hasExternalUses)
%16:i64 = shl %1, 13:i64
%17:i64 = lshr %1, 51:i64
%18:i64 = or %16, %17
%19:i64 = xor %2, %18
%20:i64 = add %10, %19 (hasExternalUses)
%21:i64 = shl %19, 17:i64
%22:i64 = lshr %19, 47:i64
%23:i64 = or %21, %22
%24:i64 = xor %20, %23
%25:i64 = add %15, %24 (hasExternalUses)
%26:i64 = shl %24, 13:i64
%27:i64 = lshr %24, 51:i64
%28:i64 = or %26, %27
%29:i64 = xor %25, %28 (hasExternalUses)
%30:i64 = shl %29, 17:i64
%31:i64 = lshr %29, 47:i64
%32:i64 = or %30, %31
infer %32

; *****
; For LLVM instruction:
;  %78 = xor i64 %77, %74
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2
%4:i64 = add %0, %3
%5:i64 = var
%6:i64 = var
%7:i64 = add %5, %6
%8:i64 = shl %6, 13:i64
%9:i64 = lshr %6, 51:i64
%10:i64 = or %8, %9
%11:i64 = xor %7, %10
%12:i64 = add %4, %11
%13:i64 = shl %12, 32:i64
%14:i64 = lshr %12, 32:i64
%15:i64 = or %13, %14
%16:i64 = shl %7, 32:i64
%17:i64 = lshr %7, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %3, 16:i64
%20:i64 = lshr %3, 48:i64
%21:i64 = or %19, %20
%22:i64 = xor %4, %21
%23:i64 = add %18, %22
%24:i64 = shl %22, 21:i64
%25:i64 = lshr %22, 43:i64
%26:i64 = or %24, %25
%27:i64 = xor %23, %26 (hasExternalUses)
%28:i64 = add %15, %27 (hasExternalUses)
%29:i64 = shl %11, 17:i64
%30:i64 = lshr %11, 47:i64
%31:i64 = or %29, %30
%32:i64 = xor %12, %31
%33:i64 = add %23, %32 (hasExternalUses)
%34:i64 = shl %32, 13:i64
%35:i64 = lshr %32, 51:i64
%36:i64 = or %34, %35
%37:i64 = xor %33, %36
%38:i64 = add %28, %37 (hasExternalUses)
%39:i64 = shl %37, 17:i64
%40:i64 = lshr %37, 47:i64
%41:i64 = or %39, %40
%42:i64 = xor %38, %41
infer %42

; *****
; For LLVM instruction:
;  %79 = shl i64 %74, 32
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2
%4:i64 = add %0, %3
%5:i64 = var
%6:i64 = var
%7:i64 = add %5, %6
%8:i64 = shl %6, 13:i64
%9:i64 = lshr %6, 51:i64
%10:i64 = or %8, %9
%11:i64 = xor %7, %10
%12:i64 = add %4, %11
%13:i64 = shl %12, 32:i64
%14:i64 = lshr %12, 32:i64
%15:i64 = or %13, %14
%16:i64 = shl %7, 32:i64
%17:i64 = lshr %7, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %3, 16:i64
%20:i64 = lshr %3, 48:i64
%21:i64 = or %19, %20
%22:i64 = xor %4, %21
%23:i64 = add %18, %22
%24:i64 = shl %22, 21:i64
%25:i64 = lshr %22, 43:i64
%26:i64 = or %24, %25
%27:i64 = xor %23, %26 (hasExternalUses)
%28:i64 = add %15, %27 (hasExternalUses)
%29:i64 = shl %11, 17:i64
%30:i64 = lshr %11, 47:i64
%31:i64 = or %29, %30
%32:i64 = xor %12, %31
%33:i64 = add %23, %32 (hasExternalUses)
%34:i64 = shl %32, 13:i64
%35:i64 = lshr %32, 51:i64
%36:i64 = or %34, %35
%37:i64 = xor %33, %36 (hasExternalUses)
%38:i64 = add %28, %37 (hasExternalUses)
%39:i64 = shl %38, 32:i64
infer %39

; *****
; For LLVM instruction:
;  %80 = lshr i64 %74, 32
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2
%4:i64 = add %0, %3
%5:i64 = var
%6:i64 = var
%7:i64 = add %5, %6
%8:i64 = shl %6, 13:i64
%9:i64 = lshr %6, 51:i64
%10:i64 = or %8, %9
%11:i64 = xor %7, %10
%12:i64 = add %4, %11
%13:i64 = shl %12, 32:i64
%14:i64 = lshr %12, 32:i64
%15:i64 = or %13, %14
%16:i64 = shl %7, 32:i64
%17:i64 = lshr %7, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %3, 16:i64
%20:i64 = lshr %3, 48:i64
%21:i64 = or %19, %20
%22:i64 = xor %4, %21
%23:i64 = add %18, %22
%24:i64 = shl %22, 21:i64
%25:i64 = lshr %22, 43:i64
%26:i64 = or %24, %25
%27:i64 = xor %23, %26 (hasExternalUses)
%28:i64 = add %15, %27 (hasExternalUses)
%29:i64 = shl %11, 17:i64
%30:i64 = lshr %11, 47:i64
%31:i64 = or %29, %30
%32:i64 = xor %12, %31
%33:i64 = add %23, %32 (hasExternalUses)
%34:i64 = shl %32, 13:i64
%35:i64 = lshr %32, 51:i64
%36:i64 = or %34, %35
%37:i64 = xor %33, %36 (hasExternalUses)
%38:i64 = add %28, %37 (hasExternalUses)
%39:i64 = lshr %38, 32:i64
infer %39

; *****
; For LLVM instruction:
;  %81 = or i64 %80, %79
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2
%4:i64 = add %0, %3
%5:i64 = var
%6:i64 = var
%7:i64 = add %5, %6
%8:i64 = shl %6, 13:i64
%9:i64 = lshr %6, 51:i64
%10:i64 = or %8, %9
%11:i64 = xor %7, %10
%12:i64 = add %4, %11
%13:i64 = shl %12, 32:i64
%14:i64 = lshr %12, 32:i64
%15:i64 = or %13, %14
%16:i64 = shl %7, 32:i64
%17:i64 = lshr %7, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %3, 16:i64
%20:i64 = lshr %3, 48:i64
%21:i64 = or %19, %20
%22:i64 = xor %4, %21
%23:i64 = add %18, %22
%24:i64 = shl %22, 21:i64
%25:i64 = lshr %22, 43:i64
%26:i64 = or %24, %25
%27:i64 = xor %23, %26 (hasExternalUses)
%28:i64 = add %15, %27 (hasExternalUses)
%29:i64 = shl %11, 17:i64
%30:i64 = lshr %11, 47:i64
%31:i64 = or %29, %30
%32:i64 = xor %12, %31
%33:i64 = add %23, %32 (hasExternalUses)
%34:i64 = shl %32, 13:i64
%35:i64 = lshr %32, 51:i64
%36:i64 = or %34, %35
%37:i64 = xor %33, %36 (hasExternalUses)
%38:i64 = add %28, %37 (hasExternalUses)
%39:i64 = shl %38, 32:i64
%40:i64 = lshr %38, 32:i64
%41:i64 = or %39, %40
infer %41

; *****
; For LLVM instruction:
;  %82 = xor i64 %69, %28
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = add %1, %2
%4:i64 = shl %3, 32:i64
%5:i64 = lshr %3, 32:i64
%6:i64 = or %4, %5
%7:i64 = var
%8:i64 = var
%9:i64 = xor %8, %0
%10:i64 = add %7, %9
%11:i64 = shl %9, 16:i64
%12:i64 = lshr %9, 48:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %6, %14
%16:i64 = shl %2, 13:i64
%17:i64 = lshr %2, 51:i64
%18:i64 = or %16, %17
%19:i64 = xor %3, %18
%20:i64 = add %10, %19
%21:i64 = shl %19, 17:i64
%22:i64 = lshr %19, 47:i64
%23:i64 = or %21, %22
%24:i64 = xor %20, %23 (hasExternalUses)
%25:i64 = add %15, %24 (hasExternalUses)
%26:i64 = shl %25, 32:i64
%27:i64 = lshr %25, 32:i64
%28:i64 = or %26, %27
%29:i64 = shl %20, 32:i64
%30:i64 = lshr %20, 32:i64
%31:i64 = or %29, %30
%32:i64 = shl %14, 21:i64
%33:i64 = lshr %14, 43:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %31, %35 (hasExternalUses)
%37:i64 = shl %35, 16:i64
%38:i64 = lshr %35, 48:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39 (hasExternalUses)
%41:i64 = add %28, %40 (hasExternalUses)
%42:i64 = xor %0, %41
infer %42

; *****
; For LLVM instruction:
;  %84 = icmp eq i8* %83, %14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %86 = phi i64 [ %16, %4 ], [ %73, %21 ]
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 8387220255154660723:i64, %1 (hasExternalUses)
%3:i64 = var
%4:i64 = var
%5:i64 = add %3, %4
%6:i64 = shl %5, 32:i64
%7:i64 = lshr %5, 32:i64
%8:i64 = or %6, %7
%9:i64 = var
%10:i64 = var
%11:i64 = var
%12:i64 = xor %10, %11
%13:i64 = add %9, %12
%14:i64 = shl %12, 16:i64
%15:i64 = lshr %12, 48:i64
%16:i64 = or %14, %15
%17:i64 = xor %13, %16
%18:i64 = add %8, %17
%19:i64 = shl %4, 13:i64
%20:i64 = lshr %4, 51:i64
%21:i64 = or %19, %20
%22:i64 = xor %5, %21
%23:i64 = add %13, %22
%24:i64 = shl %22, 17:i64
%25:i64 = lshr %22, 47:i64
%26:i64 = or %24, %25
%27:i64 = xor %23, %26 (hasExternalUses)
%28:i64 = add %18, %27 (hasExternalUses)
%29:i64 = shl %28, 32:i64
%30:i64 = lshr %28, 32:i64
%31:i64 = or %29, %30
%32:i64 = shl %23, 32:i64
%33:i64 = lshr %23, 32:i64
%34:i64 = or %32, %33
%35:i64 = shl %17, 21:i64
%36:i64 = lshr %17, 43:i64
%37:i64 = or %35, %36
%38:i64 = xor %18, %37
%39:i64 = add %34, %38 (hasExternalUses)
%40:i64 = shl %38, 16:i64
%41:i64 = lshr %38, 48:i64
%42:i64 = or %40, %41
%43:i64 = xor %39, %42
%44:i64 = add %31, %43 (hasExternalUses)
%45:i64 = shl %43, 21:i64
%46:i64 = lshr %43, 43:i64
%47:i64 = or %45, %46
%48:i64 = xor %44, %47 (hasExternalUses)
%49:i64 = phi %0, %2, %48
infer %49

; *****
; For LLVM instruction:
;  %87 = phi i64 [ %17, %4 ], [ %81, %21 ]
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1 (hasExternalUses)
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29 (hasExternalUses)
%31:i64 = add %18, %30 (hasExternalUses)
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35 (hasExternalUses)
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39 (hasExternalUses)
%41:i64 = add %31, %40 (hasExternalUses)
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43 (hasExternalUses)
%45:i64 = phi %0, %2, %44
infer %45

; *****
; For LLVM instruction:
;  %88 = phi i64 [ %18, %4 ], [ %78, %21 ]
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1 (hasExternalUses)
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29 (hasExternalUses)
%31:i64 = add %18, %30 (hasExternalUses)
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35 (hasExternalUses)
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40 (hasExternalUses)
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44 (hasExternalUses)
%46:i64 = phi %0, %2, %45
infer %46

; *****
; For LLVM instruction:
;  %89 = phi i64 [ %19, %4 ], [ %82, %21 ]
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 8317987319222330741:i64, %1 (hasExternalUses)
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = add %4, %5
%7:i64 = shl %6, 32:i64
%8:i64 = lshr %6, 32:i64
%9:i64 = or %7, %8
%10:i64 = var
%11:i64 = var
%12:i64 = xor %11, %3
%13:i64 = add %10, %12
%14:i64 = shl %12, 16:i64
%15:i64 = lshr %12, 48:i64
%16:i64 = or %14, %15
%17:i64 = xor %13, %16
%18:i64 = add %9, %17
%19:i64 = shl %5, 13:i64
%20:i64 = lshr %5, 51:i64
%21:i64 = or %19, %20
%22:i64 = xor %6, %21
%23:i64 = add %13, %22
%24:i64 = shl %22, 17:i64
%25:i64 = lshr %22, 47:i64
%26:i64 = or %24, %25
%27:i64 = xor %23, %26 (hasExternalUses)
%28:i64 = add %18, %27 (hasExternalUses)
%29:i64 = shl %28, 32:i64
%30:i64 = lshr %28, 32:i64
%31:i64 = or %29, %30
%32:i64 = shl %23, 32:i64
%33:i64 = lshr %23, 32:i64
%34:i64 = or %32, %33
%35:i64 = shl %17, 21:i64
%36:i64 = lshr %17, 43:i64
%37:i64 = or %35, %36
%38:i64 = xor %18, %37
%39:i64 = add %34, %38 (hasExternalUses)
%40:i64 = shl %38, 16:i64
%41:i64 = lshr %38, 48:i64
%42:i64 = or %40, %41
%43:i64 = xor %39, %42 (hasExternalUses)
%44:i64 = add %31, %43 (hasExternalUses)
%45:i64 = xor %3, %44 (hasExternalUses)
%46:i64 = phi %0, %2, %45
infer %46

; *****
; For LLVM instruction:
;  %93 = load i8, i8* %92, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %94 = zext i8 %93 to i64
; Looking for a replacement for:
%0:i8 = var
%1:i64 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %95 = shl nuw nsw i64 %94, 48
; Looking for a replacement for:
%0:i8 = var
%1:i64 = zext %0
%2:i64 = shlnw %1, 48:i64
infer %2

; *****
; For LLVM instruction:
;  %96 = or i64 %95, %15
; Looking for a replacement for:
%0:i64 = var
%1:i32 = trunc %0 (hasExternalUses)
%2:i32 = and 7:i32, %1
pc %2 7:i32
%3:i64 = shl %0, 56:i64 (hasExternalUses)
%4:i8 = var
%5:i64 = zext %4
%6:i64 = shlnw %5, 48:i64
%7:i64 = or %3, %6
infer %7

; *****
; For LLVM instruction:
;  %98 = phi i64 [ %15, %85 ], [ %96, %91 ]
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64 (hasExternalUses)
%3:i8 = var
%4:i64 = zext %3
%5:i64 = shlnw %4, 48:i64
%6:i64 = or %2, %5
%7:i64 = phi %0, %2, %6
infer %7

; *****
; For LLVM instruction:
;  %100 = load i8, i8* %99, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %101 = zext i8 %100 to i64
; Looking for a replacement for:
%0:i8 = var
%1:i64 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %102 = shl nuw nsw i64 %101, 40
; Looking for a replacement for:
%0:i8 = var
%1:i64 = zext %0
%2:i64 = shlnw %1, 40:i64
infer %2

; *****
; For LLVM instruction:
;  %103 = or i64 %102, %98
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3:i8 = var
%4:i64 = zext %3
%5:i64 = shlnw %4, 48:i64
%6:i64 = or %2, %5
%7:i64 = phi %0, %2, %6
%8:i8 = var
%9:i64 = zext %8
%10:i64 = shlnw %9, 40:i64
%11:i64 = or %7, %10
infer %11

; *****
; For LLVM instruction:
;  %105 = phi i64 [ %15, %85 ], [ %103, %97 ]
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64 (hasExternalUses)
%3 = block 2
%4:i8 = var
%5:i64 = zext %4
%6:i64 = shlnw %5, 48:i64
%7:i64 = or %2, %6
%8:i64 = phi %3, %2, %7
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 40:i64
%12:i64 = or %8, %11
%13:i64 = phi %0, %2, %12
infer %13

; *****
; For LLVM instruction:
;  %107 = load i8, i8* %106, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %108 = zext i8 %107 to i64
; Looking for a replacement for:
%0:i8 = var
%1:i64 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %109 = shl nuw nsw i64 %108, 32
; Looking for a replacement for:
%0:i8 = var
%1:i64 = zext %0
%2:i64 = shlnw %1, 32:i64
infer %2

; *****
; For LLVM instruction:
;  %110 = or i64 %109, %105
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4:i8 = var
%5:i64 = zext %4
%6:i64 = shlnw %5, 48:i64
%7:i64 = or %2, %6
%8:i64 = phi %3, %2, %7
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 40:i64
%12:i64 = or %8, %11
%13:i64 = phi %0, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 32:i64
%17:i64 = or %13, %16
infer %17

; *****
; For LLVM instruction:
;  %112 = phi i64 [ %15, %85 ], [ %110, %104 ]
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64 (hasExternalUses)
%3 = block 2
%4 = block 2
%5:i8 = var
%6:i64 = zext %5
%7:i64 = shlnw %6, 48:i64
%8:i64 = or %2, %7
%9:i64 = phi %4, %2, %8
%10:i8 = var
%11:i64 = zext %10
%12:i64 = shlnw %11, 40:i64
%13:i64 = or %9, %12
%14:i64 = phi %3, %2, %13
%15:i8 = var
%16:i64 = zext %15
%17:i64 = shlnw %16, 32:i64
%18:i64 = or %14, %17
%19:i64 = phi %0, %2, %18
infer %19

; *****
; For LLVM instruction:
;  %114 = load i8, i8* %113, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %115 = zext i8 %114 to i64
; Looking for a replacement for:
%0:i8 = var
%1:i64 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %116 = shl nuw nsw i64 %115, 24
; Looking for a replacement for:
%0:i8 = var
%1:i64 = zext %0
%2:i64 = shlnw %1, 24:i64
infer %2

; *****
; For LLVM instruction:
;  %117 = or i64 %116, %112
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5:i8 = var
%6:i64 = zext %5
%7:i64 = shlnw %6, 48:i64
%8:i64 = or %2, %7
%9:i64 = phi %4, %2, %8
%10:i8 = var
%11:i64 = zext %10
%12:i64 = shlnw %11, 40:i64
%13:i64 = or %9, %12
%14:i64 = phi %3, %2, %13
%15:i8 = var
%16:i64 = zext %15
%17:i64 = shlnw %16, 32:i64
%18:i64 = or %14, %17
%19:i64 = phi %0, %2, %18
%20:i8 = var
%21:i64 = zext %20
%22:i64 = shlnw %21, 24:i64
%23:i64 = or %19, %22
infer %23

; *****
; For LLVM instruction:
;  %119 = phi i64 [ %15, %85 ], [ %117, %111 ]
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64 (hasExternalUses)
%3 = block 2
%4 = block 2
%5 = block 2
%6:i8 = var
%7:i64 = zext %6
%8:i64 = shlnw %7, 48:i64
%9:i64 = or %2, %8
%10:i64 = phi %5, %2, %9
%11:i8 = var
%12:i64 = zext %11
%13:i64 = shlnw %12, 40:i64
%14:i64 = or %10, %13
%15:i64 = phi %4, %2, %14
%16:i8 = var
%17:i64 = zext %16
%18:i64 = shlnw %17, 32:i64
%19:i64 = or %15, %18
%20:i64 = phi %3, %2, %19
%21:i8 = var
%22:i64 = zext %21
%23:i64 = shlnw %22, 24:i64
%24:i64 = or %20, %23
%25:i64 = phi %0, %2, %24
infer %25

; *****
; For LLVM instruction:
;  %121 = load i8, i8* %120, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %122 = zext i8 %121 to i64
; Looking for a replacement for:
%0:i8 = var
%1:i64 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %123 = shl nuw nsw i64 %122, 16
; Looking for a replacement for:
%0:i8 = var
%1:i64 = zext %0
%2:i64 = shlnw %1, 16:i64
infer %2

; *****
; For LLVM instruction:
;  %124 = or i64 %123, %119
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6:i8 = var
%7:i64 = zext %6
%8:i64 = shlnw %7, 48:i64
%9:i64 = or %2, %8
%10:i64 = phi %5, %2, %9
%11:i8 = var
%12:i64 = zext %11
%13:i64 = shlnw %12, 40:i64
%14:i64 = or %10, %13
%15:i64 = phi %4, %2, %14
%16:i8 = var
%17:i64 = zext %16
%18:i64 = shlnw %17, 32:i64
%19:i64 = or %15, %18
%20:i64 = phi %3, %2, %19
%21:i8 = var
%22:i64 = zext %21
%23:i64 = shlnw %22, 24:i64
%24:i64 = or %20, %23
%25:i64 = phi %0, %2, %24
%26:i8 = var
%27:i64 = zext %26
%28:i64 = shlnw %27, 16:i64
%29:i64 = or %25, %28
infer %29

; *****
; For LLVM instruction:
;  %126 = phi i64 [ %15, %85 ], [ %124, %118 ]
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64 (hasExternalUses)
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7:i8 = var
%8:i64 = zext %7
%9:i64 = shlnw %8, 48:i64
%10:i64 = or %2, %9
%11:i64 = phi %6, %2, %10
%12:i8 = var
%13:i64 = zext %12
%14:i64 = shlnw %13, 40:i64
%15:i64 = or %11, %14
%16:i64 = phi %5, %2, %15
%17:i8 = var
%18:i64 = zext %17
%19:i64 = shlnw %18, 32:i64
%20:i64 = or %16, %19
%21:i64 = phi %4, %2, %20
%22:i8 = var
%23:i64 = zext %22
%24:i64 = shlnw %23, 24:i64
%25:i64 = or %21, %24
%26:i64 = phi %3, %2, %25
%27:i8 = var
%28:i64 = zext %27
%29:i64 = shlnw %28, 16:i64
%30:i64 = or %26, %29
%31:i64 = phi %0, %2, %30
infer %31

; *****
; For LLVM instruction:
;  %128 = load i8, i8* %127, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %129 = zext i8 %128 to i64
; Looking for a replacement for:
%0:i8 = var
%1:i64 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %130 = shl nuw nsw i64 %129, 8
; Looking for a replacement for:
%0:i8 = var
%1:i64 = zext %0
%2:i64 = shlnw %1, 8:i64
infer %2

; *****
; For LLVM instruction:
;  %131 = or i64 %130, %126
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7:i8 = var
%8:i64 = zext %7
%9:i64 = shlnw %8, 48:i64
%10:i64 = or %2, %9
%11:i64 = phi %6, %2, %10
%12:i8 = var
%13:i64 = zext %12
%14:i64 = shlnw %13, 40:i64
%15:i64 = or %11, %14
%16:i64 = phi %5, %2, %15
%17:i8 = var
%18:i64 = zext %17
%19:i64 = shlnw %18, 32:i64
%20:i64 = or %16, %19
%21:i64 = phi %4, %2, %20
%22:i8 = var
%23:i64 = zext %22
%24:i64 = shlnw %23, 24:i64
%25:i64 = or %21, %24
%26:i64 = phi %3, %2, %25
%27:i8 = var
%28:i64 = zext %27
%29:i64 = shlnw %28, 16:i64
%30:i64 = or %26, %29
%31:i64 = phi %0, %2, %30
%32:i8 = var
%33:i64 = zext %32
%34:i64 = shlnw %33, 8:i64
%35:i64 = or %31, %34
infer %35

; *****
; For LLVM instruction:
;  %133 = phi i64 [ %15, %85 ], [ %131, %125 ]
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64 (hasExternalUses)
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8:i8 = var
%9:i64 = zext %8
%10:i64 = shlnw %9, 48:i64
%11:i64 = or %2, %10
%12:i64 = phi %7, %2, %11
%13:i8 = var
%14:i64 = zext %13
%15:i64 = shlnw %14, 40:i64
%16:i64 = or %12, %15
%17:i64 = phi %6, %2, %16
%18:i8 = var
%19:i64 = zext %18
%20:i64 = shlnw %19, 32:i64
%21:i64 = or %17, %20
%22:i64 = phi %5, %2, %21
%23:i8 = var
%24:i64 = zext %23
%25:i64 = shlnw %24, 24:i64
%26:i64 = or %22, %25
%27:i64 = phi %4, %2, %26
%28:i8 = var
%29:i64 = zext %28
%30:i64 = shlnw %29, 16:i64
%31:i64 = or %27, %30
%32:i64 = phi %3, %2, %31
%33:i8 = var
%34:i64 = zext %33
%35:i64 = shlnw %34, 8:i64
%36:i64 = or %32, %35
%37:i64 = phi %0, %2, %36
infer %37

; *****
; For LLVM instruction:
;  %134 = load i8, i8* %90, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %135 = zext i8 %134 to i64
; Looking for a replacement for:
%0:i8 = var
%1:i64 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %136 = or i64 %133, %135
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8:i8 = var
%9:i64 = zext %8
%10:i64 = shlnw %9, 48:i64
%11:i64 = or %2, %10
%12:i64 = phi %7, %2, %11
%13:i8 = var
%14:i64 = zext %13
%15:i64 = shlnw %14, 40:i64
%16:i64 = or %12, %15
%17:i64 = phi %6, %2, %16
%18:i8 = var
%19:i64 = zext %18
%20:i64 = shlnw %19, 32:i64
%21:i64 = or %17, %20
%22:i64 = phi %5, %2, %21
%23:i8 = var
%24:i64 = zext %23
%25:i64 = shlnw %24, 24:i64
%26:i64 = or %22, %25
%27:i64 = phi %4, %2, %26
%28:i8 = var
%29:i64 = zext %28
%30:i64 = shlnw %29, 16:i64
%31:i64 = or %27, %30
%32:i64 = phi %3, %2, %31
%33:i8 = var
%34:i64 = zext %33
%35:i64 = shlnw %34, 8:i64
%36:i64 = or %32, %35
%37:i64 = phi %0, %2, %36
%38:i8 = var
%39:i64 = zext %38
%40:i64 = or %37, %39
infer %40

; *****
; For LLVM instruction:
;  %138 = phi i64 [ %15, %85 ], [ %136, %132 ]
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64 (hasExternalUses)
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
infer %42

; *****
; For LLVM instruction:
;  %139 = xor i64 %138, %86
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 8387220255154660723:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = add %3, %4
%6:i64 = shl %5, 32:i64
%7:i64 = lshr %5, 32:i64
%8:i64 = or %6, %7
%9:i64 = var
%10:i64 = var
%11:i64 = var
%12:i64 = xor %10, %11
%13:i64 = add %9, %12
%14:i64 = shl %12, 16:i64
%15:i64 = lshr %12, 48:i64
%16:i64 = or %14, %15
%17:i64 = xor %13, %16
%18:i64 = add %8, %17
%19:i64 = shl %4, 13:i64
%20:i64 = lshr %4, 51:i64
%21:i64 = or %19, %20
%22:i64 = xor %5, %21
%23:i64 = add %13, %22
%24:i64 = shl %22, 17:i64
%25:i64 = lshr %22, 47:i64
%26:i64 = or %24, %25
%27:i64 = xor %23, %26
%28:i64 = add %18, %27
%29:i64 = shl %28, 32:i64
%30:i64 = lshr %28, 32:i64
%31:i64 = or %29, %30
%32:i64 = shl %23, 32:i64
%33:i64 = lshr %23, 32:i64
%34:i64 = or %32, %33
%35:i64 = shl %17, 21:i64
%36:i64 = lshr %17, 43:i64
%37:i64 = or %35, %36
%38:i64 = xor %18, %37
%39:i64 = add %34, %38
%40:i64 = shl %38, 16:i64
%41:i64 = lshr %38, 48:i64
%42:i64 = or %40, %41
%43:i64 = xor %39, %42
%44:i64 = add %31, %43
%45:i64 = shl %43, 21:i64
%46:i64 = lshr %43, 43:i64
%47:i64 = or %45, %46
%48:i64 = xor %44, %47
%49:i64 = phi %0, %2, %48
%50 = block 2
%51:i64 = var
%52:i64 = shl %51, 56:i64
%53 = block 2
%54 = block 2
%55 = block 2
%56 = block 2
%57 = block 2
%58 = block 2
%59:i8 = var
%60:i64 = zext %59
%61:i64 = shlnw %60, 48:i64
%62:i64 = or %52, %61
%63:i64 = phi %58, %52, %62
%64:i8 = var
%65:i64 = zext %64
%66:i64 = shlnw %65, 40:i64
%67:i64 = or %63, %66
%68:i64 = phi %57, %52, %67
%69:i8 = var
%70:i64 = zext %69
%71:i64 = shlnw %70, 32:i64
%72:i64 = or %68, %71
%73:i64 = phi %56, %52, %72
%74:i8 = var
%75:i64 = zext %74
%76:i64 = shlnw %75, 24:i64
%77:i64 = or %73, %76
%78:i64 = phi %55, %52, %77
%79:i8 = var
%80:i64 = zext %79
%81:i64 = shlnw %80, 16:i64
%82:i64 = or %78, %81
%83:i64 = phi %54, %52, %82
%84:i8 = var
%85:i64 = zext %84
%86:i64 = shlnw %85, 8:i64
%87:i64 = or %83, %86
%88:i64 = phi %53, %52, %87
%89:i8 = var
%90:i64 = zext %89
%91:i64 = or %88, %90
%92:i64 = phi %50, %52, %91
%93:i64 = xor %49, %92
infer %93

; *****
; For LLVM instruction:
;  %140 = add i64 %89, %88
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58
infer %59

; *****
; For LLVM instruction:
;  %141 = shl i64 %88, 13
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = shl %46, 13:i64
infer %47

; *****
; For LLVM instruction:
;  %142 = lshr i64 %88, 51
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = lshr %46, 51:i64
infer %47

; *****
; For LLVM instruction:
;  %143 = or i64 %142, %141
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = shl %46, 13:i64
%48:i64 = lshr %46, 51:i64
%49:i64 = or %47, %48
infer %49

; *****
; For LLVM instruction:
;  %144 = xor i64 %143, %140
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58 (hasExternalUses)
%60:i64 = shl %46, 13:i64
%61:i64 = lshr %46, 51:i64
%62:i64 = or %60, %61
%63:i64 = xor %59, %62
infer %63

; *****
; For LLVM instruction:
;  %145 = shl i64 %140, 32
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58 (hasExternalUses)
%60:i64 = shl %59, 32:i64
infer %60

; *****
; For LLVM instruction:
;  %146 = lshr i64 %140, 32
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58 (hasExternalUses)
%60:i64 = lshr %59, 32:i64
infer %60

; *****
; For LLVM instruction:
;  %147 = or i64 %146, %145
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58 (hasExternalUses)
%60:i64 = shl %59, 32:i64
%61:i64 = lshr %59, 32:i64
%62:i64 = or %60, %61
infer %62

; *****
; For LLVM instruction:
;  %148 = add i64 %139, %87
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103 (hasExternalUses)
%105:i64 = add %45, %104
infer %105

; *****
; For LLVM instruction:
;  %149 = shl i64 %139, 16
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 8387220255154660723:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = add %3, %4
%6:i64 = shl %5, 32:i64
%7:i64 = lshr %5, 32:i64
%8:i64 = or %6, %7
%9:i64 = var
%10:i64 = var
%11:i64 = var
%12:i64 = xor %10, %11
%13:i64 = add %9, %12
%14:i64 = shl %12, 16:i64
%15:i64 = lshr %12, 48:i64
%16:i64 = or %14, %15
%17:i64 = xor %13, %16
%18:i64 = add %8, %17
%19:i64 = shl %4, 13:i64
%20:i64 = lshr %4, 51:i64
%21:i64 = or %19, %20
%22:i64 = xor %5, %21
%23:i64 = add %13, %22
%24:i64 = shl %22, 17:i64
%25:i64 = lshr %22, 47:i64
%26:i64 = or %24, %25
%27:i64 = xor %23, %26
%28:i64 = add %18, %27
%29:i64 = shl %28, 32:i64
%30:i64 = lshr %28, 32:i64
%31:i64 = or %29, %30
%32:i64 = shl %23, 32:i64
%33:i64 = lshr %23, 32:i64
%34:i64 = or %32, %33
%35:i64 = shl %17, 21:i64
%36:i64 = lshr %17, 43:i64
%37:i64 = or %35, %36
%38:i64 = xor %18, %37
%39:i64 = add %34, %38
%40:i64 = shl %38, 16:i64
%41:i64 = lshr %38, 48:i64
%42:i64 = or %40, %41
%43:i64 = xor %39, %42
%44:i64 = add %31, %43
%45:i64 = shl %43, 21:i64
%46:i64 = lshr %43, 43:i64
%47:i64 = or %45, %46
%48:i64 = xor %44, %47
%49:i64 = phi %0, %2, %48
%50 = block 2
%51:i64 = var
%52:i64 = shl %51, 56:i64
%53 = block 2
%54 = block 2
%55 = block 2
%56 = block 2
%57 = block 2
%58 = block 2
%59:i8 = var
%60:i64 = zext %59
%61:i64 = shlnw %60, 48:i64
%62:i64 = or %52, %61
%63:i64 = phi %58, %52, %62
%64:i8 = var
%65:i64 = zext %64
%66:i64 = shlnw %65, 40:i64
%67:i64 = or %63, %66
%68:i64 = phi %57, %52, %67
%69:i8 = var
%70:i64 = zext %69
%71:i64 = shlnw %70, 32:i64
%72:i64 = or %68, %71
%73:i64 = phi %56, %52, %72
%74:i8 = var
%75:i64 = zext %74
%76:i64 = shlnw %75, 24:i64
%77:i64 = or %73, %76
%78:i64 = phi %55, %52, %77
%79:i8 = var
%80:i64 = zext %79
%81:i64 = shlnw %80, 16:i64
%82:i64 = or %78, %81
%83:i64 = phi %54, %52, %82
%84:i8 = var
%85:i64 = zext %84
%86:i64 = shlnw %85, 8:i64
%87:i64 = or %83, %86
%88:i64 = phi %53, %52, %87
%89:i8 = var
%90:i64 = zext %89
%91:i64 = or %88, %90
%92:i64 = phi %50, %52, %91
%93:i64 = xor %49, %92 (hasExternalUses)
%94:i64 = shl %93, 16:i64
infer %94

; *****
; For LLVM instruction:
;  %150 = lshr i64 %139, 48
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 8387220255154660723:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = add %3, %4
%6:i64 = shl %5, 32:i64
%7:i64 = lshr %5, 32:i64
%8:i64 = or %6, %7
%9:i64 = var
%10:i64 = var
%11:i64 = var
%12:i64 = xor %10, %11
%13:i64 = add %9, %12
%14:i64 = shl %12, 16:i64
%15:i64 = lshr %12, 48:i64
%16:i64 = or %14, %15
%17:i64 = xor %13, %16
%18:i64 = add %8, %17
%19:i64 = shl %4, 13:i64
%20:i64 = lshr %4, 51:i64
%21:i64 = or %19, %20
%22:i64 = xor %5, %21
%23:i64 = add %13, %22
%24:i64 = shl %22, 17:i64
%25:i64 = lshr %22, 47:i64
%26:i64 = or %24, %25
%27:i64 = xor %23, %26
%28:i64 = add %18, %27
%29:i64 = shl %28, 32:i64
%30:i64 = lshr %28, 32:i64
%31:i64 = or %29, %30
%32:i64 = shl %23, 32:i64
%33:i64 = lshr %23, 32:i64
%34:i64 = or %32, %33
%35:i64 = shl %17, 21:i64
%36:i64 = lshr %17, 43:i64
%37:i64 = or %35, %36
%38:i64 = xor %18, %37
%39:i64 = add %34, %38
%40:i64 = shl %38, 16:i64
%41:i64 = lshr %38, 48:i64
%42:i64 = or %40, %41
%43:i64 = xor %39, %42
%44:i64 = add %31, %43
%45:i64 = shl %43, 21:i64
%46:i64 = lshr %43, 43:i64
%47:i64 = or %45, %46
%48:i64 = xor %44, %47
%49:i64 = phi %0, %2, %48
%50 = block 2
%51:i64 = var
%52:i64 = shl %51, 56:i64
%53 = block 2
%54 = block 2
%55 = block 2
%56 = block 2
%57 = block 2
%58 = block 2
%59:i8 = var
%60:i64 = zext %59
%61:i64 = shlnw %60, 48:i64
%62:i64 = or %52, %61
%63:i64 = phi %58, %52, %62
%64:i8 = var
%65:i64 = zext %64
%66:i64 = shlnw %65, 40:i64
%67:i64 = or %63, %66
%68:i64 = phi %57, %52, %67
%69:i8 = var
%70:i64 = zext %69
%71:i64 = shlnw %70, 32:i64
%72:i64 = or %68, %71
%73:i64 = phi %56, %52, %72
%74:i8 = var
%75:i64 = zext %74
%76:i64 = shlnw %75, 24:i64
%77:i64 = or %73, %76
%78:i64 = phi %55, %52, %77
%79:i8 = var
%80:i64 = zext %79
%81:i64 = shlnw %80, 16:i64
%82:i64 = or %78, %81
%83:i64 = phi %54, %52, %82
%84:i8 = var
%85:i64 = zext %84
%86:i64 = shlnw %85, 8:i64
%87:i64 = or %83, %86
%88:i64 = phi %53, %52, %87
%89:i8 = var
%90:i64 = zext %89
%91:i64 = or %88, %90
%92:i64 = phi %50, %52, %91
%93:i64 = xor %49, %92 (hasExternalUses)
%94:i64 = lshr %93, 48:i64
infer %94

; *****
; For LLVM instruction:
;  %151 = or i64 %150, %149
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 8387220255154660723:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = add %3, %4
%6:i64 = shl %5, 32:i64
%7:i64 = lshr %5, 32:i64
%8:i64 = or %6, %7
%9:i64 = var
%10:i64 = var
%11:i64 = var
%12:i64 = xor %10, %11
%13:i64 = add %9, %12
%14:i64 = shl %12, 16:i64
%15:i64 = lshr %12, 48:i64
%16:i64 = or %14, %15
%17:i64 = xor %13, %16
%18:i64 = add %8, %17
%19:i64 = shl %4, 13:i64
%20:i64 = lshr %4, 51:i64
%21:i64 = or %19, %20
%22:i64 = xor %5, %21
%23:i64 = add %13, %22
%24:i64 = shl %22, 17:i64
%25:i64 = lshr %22, 47:i64
%26:i64 = or %24, %25
%27:i64 = xor %23, %26
%28:i64 = add %18, %27
%29:i64 = shl %28, 32:i64
%30:i64 = lshr %28, 32:i64
%31:i64 = or %29, %30
%32:i64 = shl %23, 32:i64
%33:i64 = lshr %23, 32:i64
%34:i64 = or %32, %33
%35:i64 = shl %17, 21:i64
%36:i64 = lshr %17, 43:i64
%37:i64 = or %35, %36
%38:i64 = xor %18, %37
%39:i64 = add %34, %38
%40:i64 = shl %38, 16:i64
%41:i64 = lshr %38, 48:i64
%42:i64 = or %40, %41
%43:i64 = xor %39, %42
%44:i64 = add %31, %43
%45:i64 = shl %43, 21:i64
%46:i64 = lshr %43, 43:i64
%47:i64 = or %45, %46
%48:i64 = xor %44, %47
%49:i64 = phi %0, %2, %48
%50 = block 2
%51:i64 = var
%52:i64 = shl %51, 56:i64
%53 = block 2
%54 = block 2
%55 = block 2
%56 = block 2
%57 = block 2
%58 = block 2
%59:i8 = var
%60:i64 = zext %59
%61:i64 = shlnw %60, 48:i64
%62:i64 = or %52, %61
%63:i64 = phi %58, %52, %62
%64:i8 = var
%65:i64 = zext %64
%66:i64 = shlnw %65, 40:i64
%67:i64 = or %63, %66
%68:i64 = phi %57, %52, %67
%69:i8 = var
%70:i64 = zext %69
%71:i64 = shlnw %70, 32:i64
%72:i64 = or %68, %71
%73:i64 = phi %56, %52, %72
%74:i8 = var
%75:i64 = zext %74
%76:i64 = shlnw %75, 24:i64
%77:i64 = or %73, %76
%78:i64 = phi %55, %52, %77
%79:i8 = var
%80:i64 = zext %79
%81:i64 = shlnw %80, 16:i64
%82:i64 = or %78, %81
%83:i64 = phi %54, %52, %82
%84:i8 = var
%85:i64 = zext %84
%86:i64 = shlnw %85, 8:i64
%87:i64 = or %83, %86
%88:i64 = phi %53, %52, %87
%89:i8 = var
%90:i64 = zext %89
%91:i64 = or %88, %90
%92:i64 = phi %50, %52, %91
%93:i64 = xor %49, %92 (hasExternalUses)
%94:i64 = shl %93, 16:i64
%95:i64 = lshr %93, 48:i64
%96:i64 = or %94, %95
infer %96

; *****
; For LLVM instruction:
;  %152 = xor i64 %151, %148
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104 (hasExternalUses)
%106:i64 = shl %104, 16:i64
%107:i64 = lshr %104, 48:i64
%108:i64 = or %106, %107
%109:i64 = xor %105, %108
infer %109

; *****
; For LLVM instruction:
;  %153 = add i64 %152, %147
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58 (hasExternalUses)
%60:i64 = shl %59, 32:i64
%61:i64 = lshr %59, 32:i64
%62:i64 = or %60, %61
%63:i64 = xor 7816392313619706465:i64, %47
%64:i64 = shl %41, 32:i64
%65:i64 = lshr %41, 32:i64
%66:i64 = or %64, %65
%67:i64 = phi %0, %63, %66
%68:i64 = xor 8387220255154660723:i64, %1
%69:i64 = shl %55, 21:i64
%70:i64 = lshr %55, 43:i64
%71:i64 = or %69, %70
%72:i64 = xor %56, %71
%73:i64 = phi %0, %68, %72
%74 = block 2
%75:i64 = var
%76:i64 = shl %75, 56:i64
%77 = block 2
%78 = block 2
%79 = block 2
%80 = block 2
%81 = block 2
%82 = block 2
%83:i8 = var
%84:i64 = zext %83
%85:i64 = shlnw %84, 48:i64
%86:i64 = or %76, %85
%87:i64 = phi %82, %76, %86
%88:i8 = var
%89:i64 = zext %88
%90:i64 = shlnw %89, 40:i64
%91:i64 = or %87, %90
%92:i64 = phi %81, %76, %91
%93:i8 = var
%94:i64 = zext %93
%95:i64 = shlnw %94, 32:i64
%96:i64 = or %92, %95
%97:i64 = phi %80, %76, %96
%98:i8 = var
%99:i64 = zext %98
%100:i64 = shlnw %99, 24:i64
%101:i64 = or %97, %100
%102:i64 = phi %79, %76, %101
%103:i8 = var
%104:i64 = zext %103
%105:i64 = shlnw %104, 16:i64
%106:i64 = or %102, %105
%107:i64 = phi %78, %76, %106
%108:i8 = var
%109:i64 = zext %108
%110:i64 = shlnw %109, 8:i64
%111:i64 = or %107, %110
%112:i64 = phi %77, %76, %111
%113:i8 = var
%114:i64 = zext %113
%115:i64 = or %112, %114
%116:i64 = phi %74, %76, %115
%117:i64 = xor %73, %116
%118:i64 = add %67, %117 (hasExternalUses)
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121 (hasExternalUses)
%123:i64 = add %62, %122
infer %123

; *****
; For LLVM instruction:
;  %154 = shl i64 %152, 21
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104 (hasExternalUses)
%106:i64 = shl %104, 16:i64
%107:i64 = lshr %104, 48:i64
%108:i64 = or %106, %107
%109:i64 = xor %105, %108 (hasExternalUses)
%110:i64 = shl %109, 21:i64
infer %110

; *****
; For LLVM instruction:
;  %155 = lshr i64 %152, 43
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104 (hasExternalUses)
%106:i64 = shl %104, 16:i64
%107:i64 = lshr %104, 48:i64
%108:i64 = or %106, %107
%109:i64 = xor %105, %108 (hasExternalUses)
%110:i64 = lshr %109, 43:i64
infer %110

; *****
; For LLVM instruction:
;  %156 = or i64 %155, %154
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104 (hasExternalUses)
%106:i64 = shl %104, 16:i64
%107:i64 = lshr %104, 48:i64
%108:i64 = or %106, %107
%109:i64 = xor %105, %108 (hasExternalUses)
%110:i64 = shl %109, 21:i64
%111:i64 = lshr %109, 43:i64
%112:i64 = or %110, %111
infer %112

; *****
; For LLVM instruction:
;  %157 = xor i64 %156, %153
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58 (hasExternalUses)
%60:i64 = shl %59, 32:i64
%61:i64 = lshr %59, 32:i64
%62:i64 = or %60, %61
%63:i64 = xor 7816392313619706465:i64, %47
%64:i64 = shl %41, 32:i64
%65:i64 = lshr %41, 32:i64
%66:i64 = or %64, %65
%67:i64 = phi %0, %63, %66
%68:i64 = xor 8387220255154660723:i64, %1
%69:i64 = shl %55, 21:i64
%70:i64 = lshr %55, 43:i64
%71:i64 = or %69, %70
%72:i64 = xor %56, %71
%73:i64 = phi %0, %68, %72
%74 = block 2
%75:i64 = var
%76:i64 = shl %75, 56:i64
%77 = block 2
%78 = block 2
%79 = block 2
%80 = block 2
%81 = block 2
%82 = block 2
%83:i8 = var
%84:i64 = zext %83
%85:i64 = shlnw %84, 48:i64
%86:i64 = or %76, %85
%87:i64 = phi %82, %76, %86
%88:i8 = var
%89:i64 = zext %88
%90:i64 = shlnw %89, 40:i64
%91:i64 = or %87, %90
%92:i64 = phi %81, %76, %91
%93:i8 = var
%94:i64 = zext %93
%95:i64 = shlnw %94, 32:i64
%96:i64 = or %92, %95
%97:i64 = phi %80, %76, %96
%98:i8 = var
%99:i64 = zext %98
%100:i64 = shlnw %99, 24:i64
%101:i64 = or %97, %100
%102:i64 = phi %79, %76, %101
%103:i8 = var
%104:i64 = zext %103
%105:i64 = shlnw %104, 16:i64
%106:i64 = or %102, %105
%107:i64 = phi %78, %76, %106
%108:i8 = var
%109:i64 = zext %108
%110:i64 = shlnw %109, 8:i64
%111:i64 = or %107, %110
%112:i64 = phi %77, %76, %111
%113:i8 = var
%114:i64 = zext %113
%115:i64 = or %112, %114
%116:i64 = phi %74, %76, %115
%117:i64 = xor %73, %116
%118:i64 = add %67, %117 (hasExternalUses)
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %62, %122 (hasExternalUses)
%124:i64 = shl %122, 21:i64
%125:i64 = lshr %122, 43:i64
%126:i64 = or %124, %125
%127:i64 = xor %123, %126
infer %127

; *****
; For LLVM instruction:
;  %158 = add i64 %148, %144
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103 (hasExternalUses)
%105:i64 = add %45, %104 (hasExternalUses)
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114 (hasExternalUses)
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118 (hasExternalUses)
%120:i64 = add %105, %119
infer %120

; *****
; For LLVM instruction:
;  %159 = shl i64 %144, 17
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58 (hasExternalUses)
%60:i64 = shl %46, 13:i64
%61:i64 = lshr %46, 51:i64
%62:i64 = or %60, %61
%63:i64 = xor %59, %62 (hasExternalUses)
%64:i64 = shl %63, 17:i64
infer %64

; *****
; For LLVM instruction:
;  %160 = lshr i64 %144, 47
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58 (hasExternalUses)
%60:i64 = shl %46, 13:i64
%61:i64 = lshr %46, 51:i64
%62:i64 = or %60, %61
%63:i64 = xor %59, %62 (hasExternalUses)
%64:i64 = lshr %63, 47:i64
infer %64

; *****
; For LLVM instruction:
;  %161 = or i64 %160, %159
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58 (hasExternalUses)
%60:i64 = shl %46, 13:i64
%61:i64 = lshr %46, 51:i64
%62:i64 = or %60, %61
%63:i64 = xor %59, %62 (hasExternalUses)
%64:i64 = shl %63, 17:i64
%65:i64 = lshr %63, 47:i64
%66:i64 = or %64, %65
infer %66

; *****
; For LLVM instruction:
;  %162 = xor i64 %158, %161
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103 (hasExternalUses)
%105:i64 = add %45, %104 (hasExternalUses)
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114 (hasExternalUses)
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119 (hasExternalUses)
%121:i64 = shl %119, 17:i64
%122:i64 = lshr %119, 47:i64
%123:i64 = or %121, %122
%124:i64 = xor %120, %123
infer %124

; *****
; For LLVM instruction:
;  %163 = shl i64 %158, 32
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103 (hasExternalUses)
%105:i64 = add %45, %104 (hasExternalUses)
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114 (hasExternalUses)
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118 (hasExternalUses)
%120:i64 = add %105, %119 (hasExternalUses)
%121:i64 = shl %120, 32:i64
infer %121

; *****
; For LLVM instruction:
;  %164 = lshr i64 %158, 32
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103 (hasExternalUses)
%105:i64 = add %45, %104 (hasExternalUses)
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114 (hasExternalUses)
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118 (hasExternalUses)
%120:i64 = add %105, %119 (hasExternalUses)
%121:i64 = lshr %120, 32:i64
infer %121

; *****
; For LLVM instruction:
;  %165 = or i64 %164, %163
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103 (hasExternalUses)
%105:i64 = add %45, %104 (hasExternalUses)
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114 (hasExternalUses)
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118 (hasExternalUses)
%120:i64 = add %105, %119 (hasExternalUses)
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
infer %123

; *****
; For LLVM instruction:
;  %166 = add i64 %153, %162
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58
%60:i64 = shl %59, 32:i64
%61:i64 = lshr %59, 32:i64
%62:i64 = or %60, %61
%63:i64 = xor 7816392313619706465:i64, %47
%64:i64 = shl %41, 32:i64
%65:i64 = lshr %41, 32:i64
%66:i64 = or %64, %65
%67:i64 = phi %0, %63, %66
%68:i64 = xor 8387220255154660723:i64, %1
%69:i64 = shl %55, 21:i64
%70:i64 = lshr %55, 43:i64
%71:i64 = or %69, %70
%72:i64 = xor %56, %71
%73:i64 = phi %0, %68, %72
%74 = block 2
%75:i64 = var
%76:i64 = shl %75, 56:i64
%77 = block 2
%78 = block 2
%79 = block 2
%80 = block 2
%81 = block 2
%82 = block 2
%83:i8 = var
%84:i64 = zext %83
%85:i64 = shlnw %84, 48:i64
%86:i64 = or %76, %85
%87:i64 = phi %82, %76, %86
%88:i8 = var
%89:i64 = zext %88
%90:i64 = shlnw %89, 40:i64
%91:i64 = or %87, %90
%92:i64 = phi %81, %76, %91
%93:i8 = var
%94:i64 = zext %93
%95:i64 = shlnw %94, 32:i64
%96:i64 = or %92, %95
%97:i64 = phi %80, %76, %96
%98:i8 = var
%99:i64 = zext %98
%100:i64 = shlnw %99, 24:i64
%101:i64 = or %97, %100
%102:i64 = phi %79, %76, %101
%103:i8 = var
%104:i64 = zext %103
%105:i64 = shlnw %104, 16:i64
%106:i64 = or %102, %105
%107:i64 = phi %78, %76, %106
%108:i8 = var
%109:i64 = zext %108
%110:i64 = shlnw %109, 8:i64
%111:i64 = or %107, %110
%112:i64 = phi %77, %76, %111
%113:i8 = var
%114:i64 = zext %113
%115:i64 = or %112, %114
%116:i64 = phi %74, %76, %115
%117:i64 = xor %73, %116
%118:i64 = add %67, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121 (hasExternalUses)
%123:i64 = add %62, %122 (hasExternalUses)
%124:i64 = shl %46, 13:i64
%125:i64 = lshr %46, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %59, %126
%128:i64 = add %118, %127 (hasExternalUses)
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131 (hasExternalUses)
%133:i64 = add %123, %132
infer %133

; *****
; For LLVM instruction:
;  %167 = shl i64 %162, 13
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103 (hasExternalUses)
%105:i64 = add %45, %104 (hasExternalUses)
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114 (hasExternalUses)
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119 (hasExternalUses)
%121:i64 = shl %119, 17:i64
%122:i64 = lshr %119, 47:i64
%123:i64 = or %121, %122
%124:i64 = xor %120, %123 (hasExternalUses)
%125:i64 = shl %124, 13:i64
infer %125

; *****
; For LLVM instruction:
;  %168 = lshr i64 %162, 51
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103 (hasExternalUses)
%105:i64 = add %45, %104 (hasExternalUses)
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114 (hasExternalUses)
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119 (hasExternalUses)
%121:i64 = shl %119, 17:i64
%122:i64 = lshr %119, 47:i64
%123:i64 = or %121, %122
%124:i64 = xor %120, %123 (hasExternalUses)
%125:i64 = lshr %124, 51:i64
infer %125

; *****
; For LLVM instruction:
;  %169 = or i64 %168, %167
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103 (hasExternalUses)
%105:i64 = add %45, %104 (hasExternalUses)
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114 (hasExternalUses)
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119 (hasExternalUses)
%121:i64 = shl %119, 17:i64
%122:i64 = lshr %119, 47:i64
%123:i64 = or %121, %122
%124:i64 = xor %120, %123 (hasExternalUses)
%125:i64 = shl %124, 13:i64
%126:i64 = lshr %124, 51:i64
%127:i64 = or %125, %126
infer %127

; *****
; For LLVM instruction:
;  %170 = xor i64 %169, %166
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58
%60:i64 = shl %59, 32:i64
%61:i64 = lshr %59, 32:i64
%62:i64 = or %60, %61
%63:i64 = xor 7816392313619706465:i64, %47
%64:i64 = shl %41, 32:i64
%65:i64 = lshr %41, 32:i64
%66:i64 = or %64, %65
%67:i64 = phi %0, %63, %66
%68:i64 = xor 8387220255154660723:i64, %1
%69:i64 = shl %55, 21:i64
%70:i64 = lshr %55, 43:i64
%71:i64 = or %69, %70
%72:i64 = xor %56, %71
%73:i64 = phi %0, %68, %72
%74 = block 2
%75:i64 = var
%76:i64 = shl %75, 56:i64
%77 = block 2
%78 = block 2
%79 = block 2
%80 = block 2
%81 = block 2
%82 = block 2
%83:i8 = var
%84:i64 = zext %83
%85:i64 = shlnw %84, 48:i64
%86:i64 = or %76, %85
%87:i64 = phi %82, %76, %86
%88:i8 = var
%89:i64 = zext %88
%90:i64 = shlnw %89, 40:i64
%91:i64 = or %87, %90
%92:i64 = phi %81, %76, %91
%93:i8 = var
%94:i64 = zext %93
%95:i64 = shlnw %94, 32:i64
%96:i64 = or %92, %95
%97:i64 = phi %80, %76, %96
%98:i8 = var
%99:i64 = zext %98
%100:i64 = shlnw %99, 24:i64
%101:i64 = or %97, %100
%102:i64 = phi %79, %76, %101
%103:i8 = var
%104:i64 = zext %103
%105:i64 = shlnw %104, 16:i64
%106:i64 = or %102, %105
%107:i64 = phi %78, %76, %106
%108:i8 = var
%109:i64 = zext %108
%110:i64 = shlnw %109, 8:i64
%111:i64 = or %107, %110
%112:i64 = phi %77, %76, %111
%113:i8 = var
%114:i64 = zext %113
%115:i64 = or %112, %114
%116:i64 = phi %74, %76, %115
%117:i64 = xor %73, %116
%118:i64 = add %67, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121 (hasExternalUses)
%123:i64 = add %62, %122 (hasExternalUses)
%124:i64 = shl %46, 13:i64
%125:i64 = lshr %46, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %59, %126
%128:i64 = add %118, %127 (hasExternalUses)
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132 (hasExternalUses)
%134:i64 = shl %132, 13:i64
%135:i64 = lshr %132, 51:i64
%136:i64 = or %134, %135
%137:i64 = xor %133, %136
infer %137

; *****
; For LLVM instruction:
;  %171 = shl i64 %166, 32
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58
%60:i64 = shl %59, 32:i64
%61:i64 = lshr %59, 32:i64
%62:i64 = or %60, %61
%63:i64 = xor 7816392313619706465:i64, %47
%64:i64 = shl %41, 32:i64
%65:i64 = lshr %41, 32:i64
%66:i64 = or %64, %65
%67:i64 = phi %0, %63, %66
%68:i64 = xor 8387220255154660723:i64, %1
%69:i64 = shl %55, 21:i64
%70:i64 = lshr %55, 43:i64
%71:i64 = or %69, %70
%72:i64 = xor %56, %71
%73:i64 = phi %0, %68, %72
%74 = block 2
%75:i64 = var
%76:i64 = shl %75, 56:i64
%77 = block 2
%78 = block 2
%79 = block 2
%80 = block 2
%81 = block 2
%82 = block 2
%83:i8 = var
%84:i64 = zext %83
%85:i64 = shlnw %84, 48:i64
%86:i64 = or %76, %85
%87:i64 = phi %82, %76, %86
%88:i8 = var
%89:i64 = zext %88
%90:i64 = shlnw %89, 40:i64
%91:i64 = or %87, %90
%92:i64 = phi %81, %76, %91
%93:i8 = var
%94:i64 = zext %93
%95:i64 = shlnw %94, 32:i64
%96:i64 = or %92, %95
%97:i64 = phi %80, %76, %96
%98:i8 = var
%99:i64 = zext %98
%100:i64 = shlnw %99, 24:i64
%101:i64 = or %97, %100
%102:i64 = phi %79, %76, %101
%103:i8 = var
%104:i64 = zext %103
%105:i64 = shlnw %104, 16:i64
%106:i64 = or %102, %105
%107:i64 = phi %78, %76, %106
%108:i8 = var
%109:i64 = zext %108
%110:i64 = shlnw %109, 8:i64
%111:i64 = or %107, %110
%112:i64 = phi %77, %76, %111
%113:i8 = var
%114:i64 = zext %113
%115:i64 = or %112, %114
%116:i64 = phi %74, %76, %115
%117:i64 = xor %73, %116
%118:i64 = add %67, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121 (hasExternalUses)
%123:i64 = add %62, %122 (hasExternalUses)
%124:i64 = shl %46, 13:i64
%125:i64 = lshr %46, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %59, %126
%128:i64 = add %118, %127 (hasExternalUses)
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131 (hasExternalUses)
%133:i64 = add %123, %132 (hasExternalUses)
%134:i64 = shl %133, 32:i64
infer %134

; *****
; For LLVM instruction:
;  %172 = lshr i64 %166, 32
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58
%60:i64 = shl %59, 32:i64
%61:i64 = lshr %59, 32:i64
%62:i64 = or %60, %61
%63:i64 = xor 7816392313619706465:i64, %47
%64:i64 = shl %41, 32:i64
%65:i64 = lshr %41, 32:i64
%66:i64 = or %64, %65
%67:i64 = phi %0, %63, %66
%68:i64 = xor 8387220255154660723:i64, %1
%69:i64 = shl %55, 21:i64
%70:i64 = lshr %55, 43:i64
%71:i64 = or %69, %70
%72:i64 = xor %56, %71
%73:i64 = phi %0, %68, %72
%74 = block 2
%75:i64 = var
%76:i64 = shl %75, 56:i64
%77 = block 2
%78 = block 2
%79 = block 2
%80 = block 2
%81 = block 2
%82 = block 2
%83:i8 = var
%84:i64 = zext %83
%85:i64 = shlnw %84, 48:i64
%86:i64 = or %76, %85
%87:i64 = phi %82, %76, %86
%88:i8 = var
%89:i64 = zext %88
%90:i64 = shlnw %89, 40:i64
%91:i64 = or %87, %90
%92:i64 = phi %81, %76, %91
%93:i8 = var
%94:i64 = zext %93
%95:i64 = shlnw %94, 32:i64
%96:i64 = or %92, %95
%97:i64 = phi %80, %76, %96
%98:i8 = var
%99:i64 = zext %98
%100:i64 = shlnw %99, 24:i64
%101:i64 = or %97, %100
%102:i64 = phi %79, %76, %101
%103:i8 = var
%104:i64 = zext %103
%105:i64 = shlnw %104, 16:i64
%106:i64 = or %102, %105
%107:i64 = phi %78, %76, %106
%108:i8 = var
%109:i64 = zext %108
%110:i64 = shlnw %109, 8:i64
%111:i64 = or %107, %110
%112:i64 = phi %77, %76, %111
%113:i8 = var
%114:i64 = zext %113
%115:i64 = or %112, %114
%116:i64 = phi %74, %76, %115
%117:i64 = xor %73, %116
%118:i64 = add %67, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121 (hasExternalUses)
%123:i64 = add %62, %122 (hasExternalUses)
%124:i64 = shl %46, 13:i64
%125:i64 = lshr %46, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %59, %126
%128:i64 = add %118, %127 (hasExternalUses)
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131 (hasExternalUses)
%133:i64 = add %123, %132 (hasExternalUses)
%134:i64 = lshr %133, 32:i64
infer %134

; *****
; For LLVM instruction:
;  %173 = or i64 %172, %171
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58
%60:i64 = shl %59, 32:i64
%61:i64 = lshr %59, 32:i64
%62:i64 = or %60, %61
%63:i64 = xor 7816392313619706465:i64, %47
%64:i64 = shl %41, 32:i64
%65:i64 = lshr %41, 32:i64
%66:i64 = or %64, %65
%67:i64 = phi %0, %63, %66
%68:i64 = xor 8387220255154660723:i64, %1
%69:i64 = shl %55, 21:i64
%70:i64 = lshr %55, 43:i64
%71:i64 = or %69, %70
%72:i64 = xor %56, %71
%73:i64 = phi %0, %68, %72
%74 = block 2
%75:i64 = var
%76:i64 = shl %75, 56:i64
%77 = block 2
%78 = block 2
%79 = block 2
%80 = block 2
%81 = block 2
%82 = block 2
%83:i8 = var
%84:i64 = zext %83
%85:i64 = shlnw %84, 48:i64
%86:i64 = or %76, %85
%87:i64 = phi %82, %76, %86
%88:i8 = var
%89:i64 = zext %88
%90:i64 = shlnw %89, 40:i64
%91:i64 = or %87, %90
%92:i64 = phi %81, %76, %91
%93:i8 = var
%94:i64 = zext %93
%95:i64 = shlnw %94, 32:i64
%96:i64 = or %92, %95
%97:i64 = phi %80, %76, %96
%98:i8 = var
%99:i64 = zext %98
%100:i64 = shlnw %99, 24:i64
%101:i64 = or %97, %100
%102:i64 = phi %79, %76, %101
%103:i8 = var
%104:i64 = zext %103
%105:i64 = shlnw %104, 16:i64
%106:i64 = or %102, %105
%107:i64 = phi %78, %76, %106
%108:i8 = var
%109:i64 = zext %108
%110:i64 = shlnw %109, 8:i64
%111:i64 = or %107, %110
%112:i64 = phi %77, %76, %111
%113:i8 = var
%114:i64 = zext %113
%115:i64 = or %112, %114
%116:i64 = phi %74, %76, %115
%117:i64 = xor %73, %116
%118:i64 = add %67, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121 (hasExternalUses)
%123:i64 = add %62, %122 (hasExternalUses)
%124:i64 = shl %46, 13:i64
%125:i64 = lshr %46, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %59, %126
%128:i64 = add %118, %127 (hasExternalUses)
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131 (hasExternalUses)
%133:i64 = add %123, %132 (hasExternalUses)
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
infer %136

; *****
; For LLVM instruction:
;  %174 = add i64 %157, %165
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118 (hasExternalUses)
%120:i64 = add %105, %119 (hasExternalUses)
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130 (hasExternalUses)
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134 (hasExternalUses)
%136:i64 = add %123, %135
infer %136

; *****
; For LLVM instruction:
;  %175 = shl i64 %157, 16
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58 (hasExternalUses)
%60:i64 = shl %59, 32:i64
%61:i64 = lshr %59, 32:i64
%62:i64 = or %60, %61
%63:i64 = xor 7816392313619706465:i64, %47
%64:i64 = shl %41, 32:i64
%65:i64 = lshr %41, 32:i64
%66:i64 = or %64, %65
%67:i64 = phi %0, %63, %66
%68:i64 = xor 8387220255154660723:i64, %1
%69:i64 = shl %55, 21:i64
%70:i64 = lshr %55, 43:i64
%71:i64 = or %69, %70
%72:i64 = xor %56, %71
%73:i64 = phi %0, %68, %72
%74 = block 2
%75:i64 = var
%76:i64 = shl %75, 56:i64
%77 = block 2
%78 = block 2
%79 = block 2
%80 = block 2
%81 = block 2
%82 = block 2
%83:i8 = var
%84:i64 = zext %83
%85:i64 = shlnw %84, 48:i64
%86:i64 = or %76, %85
%87:i64 = phi %82, %76, %86
%88:i8 = var
%89:i64 = zext %88
%90:i64 = shlnw %89, 40:i64
%91:i64 = or %87, %90
%92:i64 = phi %81, %76, %91
%93:i8 = var
%94:i64 = zext %93
%95:i64 = shlnw %94, 32:i64
%96:i64 = or %92, %95
%97:i64 = phi %80, %76, %96
%98:i8 = var
%99:i64 = zext %98
%100:i64 = shlnw %99, 24:i64
%101:i64 = or %97, %100
%102:i64 = phi %79, %76, %101
%103:i8 = var
%104:i64 = zext %103
%105:i64 = shlnw %104, 16:i64
%106:i64 = or %102, %105
%107:i64 = phi %78, %76, %106
%108:i8 = var
%109:i64 = zext %108
%110:i64 = shlnw %109, 8:i64
%111:i64 = or %107, %110
%112:i64 = phi %77, %76, %111
%113:i8 = var
%114:i64 = zext %113
%115:i64 = or %112, %114
%116:i64 = phi %74, %76, %115
%117:i64 = xor %73, %116
%118:i64 = add %67, %117 (hasExternalUses)
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %62, %122 (hasExternalUses)
%124:i64 = shl %122, 21:i64
%125:i64 = lshr %122, 43:i64
%126:i64 = or %124, %125
%127:i64 = xor %123, %126 (hasExternalUses)
%128:i64 = shl %127, 16:i64
infer %128

; *****
; For LLVM instruction:
;  %176 = lshr i64 %157, 48
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58 (hasExternalUses)
%60:i64 = shl %59, 32:i64
%61:i64 = lshr %59, 32:i64
%62:i64 = or %60, %61
%63:i64 = xor 7816392313619706465:i64, %47
%64:i64 = shl %41, 32:i64
%65:i64 = lshr %41, 32:i64
%66:i64 = or %64, %65
%67:i64 = phi %0, %63, %66
%68:i64 = xor 8387220255154660723:i64, %1
%69:i64 = shl %55, 21:i64
%70:i64 = lshr %55, 43:i64
%71:i64 = or %69, %70
%72:i64 = xor %56, %71
%73:i64 = phi %0, %68, %72
%74 = block 2
%75:i64 = var
%76:i64 = shl %75, 56:i64
%77 = block 2
%78 = block 2
%79 = block 2
%80 = block 2
%81 = block 2
%82 = block 2
%83:i8 = var
%84:i64 = zext %83
%85:i64 = shlnw %84, 48:i64
%86:i64 = or %76, %85
%87:i64 = phi %82, %76, %86
%88:i8 = var
%89:i64 = zext %88
%90:i64 = shlnw %89, 40:i64
%91:i64 = or %87, %90
%92:i64 = phi %81, %76, %91
%93:i8 = var
%94:i64 = zext %93
%95:i64 = shlnw %94, 32:i64
%96:i64 = or %92, %95
%97:i64 = phi %80, %76, %96
%98:i8 = var
%99:i64 = zext %98
%100:i64 = shlnw %99, 24:i64
%101:i64 = or %97, %100
%102:i64 = phi %79, %76, %101
%103:i8 = var
%104:i64 = zext %103
%105:i64 = shlnw %104, 16:i64
%106:i64 = or %102, %105
%107:i64 = phi %78, %76, %106
%108:i8 = var
%109:i64 = zext %108
%110:i64 = shlnw %109, 8:i64
%111:i64 = or %107, %110
%112:i64 = phi %77, %76, %111
%113:i8 = var
%114:i64 = zext %113
%115:i64 = or %112, %114
%116:i64 = phi %74, %76, %115
%117:i64 = xor %73, %116
%118:i64 = add %67, %117 (hasExternalUses)
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %62, %122 (hasExternalUses)
%124:i64 = shl %122, 21:i64
%125:i64 = lshr %122, 43:i64
%126:i64 = or %124, %125
%127:i64 = xor %123, %126 (hasExternalUses)
%128:i64 = lshr %127, 48:i64
infer %128

; *****
; For LLVM instruction:
;  %177 = or i64 %176, %175
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58 (hasExternalUses)
%60:i64 = shl %59, 32:i64
%61:i64 = lshr %59, 32:i64
%62:i64 = or %60, %61
%63:i64 = xor 7816392313619706465:i64, %47
%64:i64 = shl %41, 32:i64
%65:i64 = lshr %41, 32:i64
%66:i64 = or %64, %65
%67:i64 = phi %0, %63, %66
%68:i64 = xor 8387220255154660723:i64, %1
%69:i64 = shl %55, 21:i64
%70:i64 = lshr %55, 43:i64
%71:i64 = or %69, %70
%72:i64 = xor %56, %71
%73:i64 = phi %0, %68, %72
%74 = block 2
%75:i64 = var
%76:i64 = shl %75, 56:i64
%77 = block 2
%78 = block 2
%79 = block 2
%80 = block 2
%81 = block 2
%82 = block 2
%83:i8 = var
%84:i64 = zext %83
%85:i64 = shlnw %84, 48:i64
%86:i64 = or %76, %85
%87:i64 = phi %82, %76, %86
%88:i8 = var
%89:i64 = zext %88
%90:i64 = shlnw %89, 40:i64
%91:i64 = or %87, %90
%92:i64 = phi %81, %76, %91
%93:i8 = var
%94:i64 = zext %93
%95:i64 = shlnw %94, 32:i64
%96:i64 = or %92, %95
%97:i64 = phi %80, %76, %96
%98:i8 = var
%99:i64 = zext %98
%100:i64 = shlnw %99, 24:i64
%101:i64 = or %97, %100
%102:i64 = phi %79, %76, %101
%103:i8 = var
%104:i64 = zext %103
%105:i64 = shlnw %104, 16:i64
%106:i64 = or %102, %105
%107:i64 = phi %78, %76, %106
%108:i8 = var
%109:i64 = zext %108
%110:i64 = shlnw %109, 8:i64
%111:i64 = or %107, %110
%112:i64 = phi %77, %76, %111
%113:i8 = var
%114:i64 = zext %113
%115:i64 = or %112, %114
%116:i64 = phi %74, %76, %115
%117:i64 = xor %73, %116
%118:i64 = add %67, %117 (hasExternalUses)
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %62, %122 (hasExternalUses)
%124:i64 = shl %122, 21:i64
%125:i64 = lshr %122, 43:i64
%126:i64 = or %124, %125
%127:i64 = xor %123, %126 (hasExternalUses)
%128:i64 = shl %127, 16:i64
%129:i64 = lshr %127, 48:i64
%130:i64 = or %128, %129
infer %130

; *****
; For LLVM instruction:
;  %178 = xor i64 %177, %174
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118 (hasExternalUses)
%120:i64 = add %105, %119 (hasExternalUses)
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130 (hasExternalUses)
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135 (hasExternalUses)
%137:i64 = shl %135, 16:i64
%138:i64 = lshr %135, 48:i64
%139:i64 = or %137, %138
%140:i64 = xor %136, %139
infer %140

; *****
; For LLVM instruction:
;  %179 = add i64 %178, %173
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58
%60:i64 = shl %59, 32:i64
%61:i64 = lshr %59, 32:i64
%62:i64 = or %60, %61
%63:i64 = xor 7816392313619706465:i64, %47
%64:i64 = shl %41, 32:i64
%65:i64 = lshr %41, 32:i64
%66:i64 = or %64, %65
%67:i64 = phi %0, %63, %66
%68:i64 = xor 8387220255154660723:i64, %1
%69:i64 = shl %55, 21:i64
%70:i64 = lshr %55, 43:i64
%71:i64 = or %69, %70
%72:i64 = xor %56, %71
%73:i64 = phi %0, %68, %72
%74 = block 2
%75:i64 = var
%76:i64 = shl %75, 56:i64
%77 = block 2
%78 = block 2
%79 = block 2
%80 = block 2
%81 = block 2
%82 = block 2
%83:i8 = var
%84:i64 = zext %83
%85:i64 = shlnw %84, 48:i64
%86:i64 = or %76, %85
%87:i64 = phi %82, %76, %86
%88:i8 = var
%89:i64 = zext %88
%90:i64 = shlnw %89, 40:i64
%91:i64 = or %87, %90
%92:i64 = phi %81, %76, %91
%93:i8 = var
%94:i64 = zext %93
%95:i64 = shlnw %94, 32:i64
%96:i64 = or %92, %95
%97:i64 = phi %80, %76, %96
%98:i8 = var
%99:i64 = zext %98
%100:i64 = shlnw %99, 24:i64
%101:i64 = or %97, %100
%102:i64 = phi %79, %76, %101
%103:i8 = var
%104:i64 = zext %103
%105:i64 = shlnw %104, 16:i64
%106:i64 = or %102, %105
%107:i64 = phi %78, %76, %106
%108:i8 = var
%109:i64 = zext %108
%110:i64 = shlnw %109, 8:i64
%111:i64 = or %107, %110
%112:i64 = phi %77, %76, %111
%113:i8 = var
%114:i64 = zext %113
%115:i64 = or %112, %114
%116:i64 = phi %74, %76, %115
%117:i64 = xor %73, %116
%118:i64 = add %67, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %62, %122
%124:i64 = shl %46, 13:i64
%125:i64 = lshr %46, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %59, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131 (hasExternalUses)
%133:i64 = add %123, %132 (hasExternalUses)
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143 (hasExternalUses)
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147 (hasExternalUses)
%149:i64 = add %136, %148
infer %149

; *****
; For LLVM instruction:
;  %180 = shl i64 %178, 21
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118 (hasExternalUses)
%120:i64 = add %105, %119 (hasExternalUses)
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130 (hasExternalUses)
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135 (hasExternalUses)
%137:i64 = shl %135, 16:i64
%138:i64 = lshr %135, 48:i64
%139:i64 = or %137, %138
%140:i64 = xor %136, %139 (hasExternalUses)
%141:i64 = shl %140, 21:i64
infer %141

; *****
; For LLVM instruction:
;  %181 = lshr i64 %178, 43
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118 (hasExternalUses)
%120:i64 = add %105, %119 (hasExternalUses)
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130 (hasExternalUses)
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135 (hasExternalUses)
%137:i64 = shl %135, 16:i64
%138:i64 = lshr %135, 48:i64
%139:i64 = or %137, %138
%140:i64 = xor %136, %139 (hasExternalUses)
%141:i64 = lshr %140, 43:i64
infer %141

; *****
; For LLVM instruction:
;  %182 = or i64 %181, %180
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118 (hasExternalUses)
%120:i64 = add %105, %119 (hasExternalUses)
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130 (hasExternalUses)
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135 (hasExternalUses)
%137:i64 = shl %135, 16:i64
%138:i64 = lshr %135, 48:i64
%139:i64 = or %137, %138
%140:i64 = xor %136, %139 (hasExternalUses)
%141:i64 = shl %140, 21:i64
%142:i64 = lshr %140, 43:i64
%143:i64 = or %141, %142
infer %143

; *****
; For LLVM instruction:
;  %183 = xor i64 %182, %179
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58
%60:i64 = shl %59, 32:i64
%61:i64 = lshr %59, 32:i64
%62:i64 = or %60, %61
%63:i64 = xor 7816392313619706465:i64, %47
%64:i64 = shl %41, 32:i64
%65:i64 = lshr %41, 32:i64
%66:i64 = or %64, %65
%67:i64 = phi %0, %63, %66
%68:i64 = xor 8387220255154660723:i64, %1
%69:i64 = shl %55, 21:i64
%70:i64 = lshr %55, 43:i64
%71:i64 = or %69, %70
%72:i64 = xor %56, %71
%73:i64 = phi %0, %68, %72
%74 = block 2
%75:i64 = var
%76:i64 = shl %75, 56:i64
%77 = block 2
%78 = block 2
%79 = block 2
%80 = block 2
%81 = block 2
%82 = block 2
%83:i8 = var
%84:i64 = zext %83
%85:i64 = shlnw %84, 48:i64
%86:i64 = or %76, %85
%87:i64 = phi %82, %76, %86
%88:i8 = var
%89:i64 = zext %88
%90:i64 = shlnw %89, 40:i64
%91:i64 = or %87, %90
%92:i64 = phi %81, %76, %91
%93:i8 = var
%94:i64 = zext %93
%95:i64 = shlnw %94, 32:i64
%96:i64 = or %92, %95
%97:i64 = phi %80, %76, %96
%98:i8 = var
%99:i64 = zext %98
%100:i64 = shlnw %99, 24:i64
%101:i64 = or %97, %100
%102:i64 = phi %79, %76, %101
%103:i8 = var
%104:i64 = zext %103
%105:i64 = shlnw %104, 16:i64
%106:i64 = or %102, %105
%107:i64 = phi %78, %76, %106
%108:i8 = var
%109:i64 = zext %108
%110:i64 = shlnw %109, 8:i64
%111:i64 = or %107, %110
%112:i64 = phi %77, %76, %111
%113:i8 = var
%114:i64 = zext %113
%115:i64 = or %112, %114
%116:i64 = phi %74, %76, %115
%117:i64 = xor %73, %116
%118:i64 = add %67, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %62, %122
%124:i64 = shl %46, 13:i64
%125:i64 = lshr %46, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %59, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131 (hasExternalUses)
%133:i64 = add %123, %132 (hasExternalUses)
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143 (hasExternalUses)
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148 (hasExternalUses)
%150:i64 = shl %148, 21:i64
%151:i64 = lshr %148, 43:i64
%152:i64 = or %150, %151
%153:i64 = xor %149, %152
infer %153

; *****
; For LLVM instruction:
;  %184 = add i64 %174, %170
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134 (hasExternalUses)
%136:i64 = add %123, %135 (hasExternalUses)
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140 (hasExternalUses)
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144 (hasExternalUses)
%146:i64 = add %136, %145
infer %146

; *****
; For LLVM instruction:
;  %185 = shl i64 %170, 17
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58
%60:i64 = shl %59, 32:i64
%61:i64 = lshr %59, 32:i64
%62:i64 = or %60, %61
%63:i64 = xor 7816392313619706465:i64, %47
%64:i64 = shl %41, 32:i64
%65:i64 = lshr %41, 32:i64
%66:i64 = or %64, %65
%67:i64 = phi %0, %63, %66
%68:i64 = xor 8387220255154660723:i64, %1
%69:i64 = shl %55, 21:i64
%70:i64 = lshr %55, 43:i64
%71:i64 = or %69, %70
%72:i64 = xor %56, %71
%73:i64 = phi %0, %68, %72
%74 = block 2
%75:i64 = var
%76:i64 = shl %75, 56:i64
%77 = block 2
%78 = block 2
%79 = block 2
%80 = block 2
%81 = block 2
%82 = block 2
%83:i8 = var
%84:i64 = zext %83
%85:i64 = shlnw %84, 48:i64
%86:i64 = or %76, %85
%87:i64 = phi %82, %76, %86
%88:i8 = var
%89:i64 = zext %88
%90:i64 = shlnw %89, 40:i64
%91:i64 = or %87, %90
%92:i64 = phi %81, %76, %91
%93:i8 = var
%94:i64 = zext %93
%95:i64 = shlnw %94, 32:i64
%96:i64 = or %92, %95
%97:i64 = phi %80, %76, %96
%98:i8 = var
%99:i64 = zext %98
%100:i64 = shlnw %99, 24:i64
%101:i64 = or %97, %100
%102:i64 = phi %79, %76, %101
%103:i8 = var
%104:i64 = zext %103
%105:i64 = shlnw %104, 16:i64
%106:i64 = or %102, %105
%107:i64 = phi %78, %76, %106
%108:i8 = var
%109:i64 = zext %108
%110:i64 = shlnw %109, 8:i64
%111:i64 = or %107, %110
%112:i64 = phi %77, %76, %111
%113:i8 = var
%114:i64 = zext %113
%115:i64 = or %112, %114
%116:i64 = phi %74, %76, %115
%117:i64 = xor %73, %116
%118:i64 = add %67, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121 (hasExternalUses)
%123:i64 = add %62, %122 (hasExternalUses)
%124:i64 = shl %46, 13:i64
%125:i64 = lshr %46, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %59, %126
%128:i64 = add %118, %127 (hasExternalUses)
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132 (hasExternalUses)
%134:i64 = shl %132, 13:i64
%135:i64 = lshr %132, 51:i64
%136:i64 = or %134, %135
%137:i64 = xor %133, %136 (hasExternalUses)
%138:i64 = shl %137, 17:i64
infer %138

; *****
; For LLVM instruction:
;  %186 = lshr i64 %170, 47
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58
%60:i64 = shl %59, 32:i64
%61:i64 = lshr %59, 32:i64
%62:i64 = or %60, %61
%63:i64 = xor 7816392313619706465:i64, %47
%64:i64 = shl %41, 32:i64
%65:i64 = lshr %41, 32:i64
%66:i64 = or %64, %65
%67:i64 = phi %0, %63, %66
%68:i64 = xor 8387220255154660723:i64, %1
%69:i64 = shl %55, 21:i64
%70:i64 = lshr %55, 43:i64
%71:i64 = or %69, %70
%72:i64 = xor %56, %71
%73:i64 = phi %0, %68, %72
%74 = block 2
%75:i64 = var
%76:i64 = shl %75, 56:i64
%77 = block 2
%78 = block 2
%79 = block 2
%80 = block 2
%81 = block 2
%82 = block 2
%83:i8 = var
%84:i64 = zext %83
%85:i64 = shlnw %84, 48:i64
%86:i64 = or %76, %85
%87:i64 = phi %82, %76, %86
%88:i8 = var
%89:i64 = zext %88
%90:i64 = shlnw %89, 40:i64
%91:i64 = or %87, %90
%92:i64 = phi %81, %76, %91
%93:i8 = var
%94:i64 = zext %93
%95:i64 = shlnw %94, 32:i64
%96:i64 = or %92, %95
%97:i64 = phi %80, %76, %96
%98:i8 = var
%99:i64 = zext %98
%100:i64 = shlnw %99, 24:i64
%101:i64 = or %97, %100
%102:i64 = phi %79, %76, %101
%103:i8 = var
%104:i64 = zext %103
%105:i64 = shlnw %104, 16:i64
%106:i64 = or %102, %105
%107:i64 = phi %78, %76, %106
%108:i8 = var
%109:i64 = zext %108
%110:i64 = shlnw %109, 8:i64
%111:i64 = or %107, %110
%112:i64 = phi %77, %76, %111
%113:i8 = var
%114:i64 = zext %113
%115:i64 = or %112, %114
%116:i64 = phi %74, %76, %115
%117:i64 = xor %73, %116
%118:i64 = add %67, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121 (hasExternalUses)
%123:i64 = add %62, %122 (hasExternalUses)
%124:i64 = shl %46, 13:i64
%125:i64 = lshr %46, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %59, %126
%128:i64 = add %118, %127 (hasExternalUses)
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132 (hasExternalUses)
%134:i64 = shl %132, 13:i64
%135:i64 = lshr %132, 51:i64
%136:i64 = or %134, %135
%137:i64 = xor %133, %136 (hasExternalUses)
%138:i64 = lshr %137, 47:i64
infer %138

; *****
; For LLVM instruction:
;  %187 = or i64 %186, %185
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58
%60:i64 = shl %59, 32:i64
%61:i64 = lshr %59, 32:i64
%62:i64 = or %60, %61
%63:i64 = xor 7816392313619706465:i64, %47
%64:i64 = shl %41, 32:i64
%65:i64 = lshr %41, 32:i64
%66:i64 = or %64, %65
%67:i64 = phi %0, %63, %66
%68:i64 = xor 8387220255154660723:i64, %1
%69:i64 = shl %55, 21:i64
%70:i64 = lshr %55, 43:i64
%71:i64 = or %69, %70
%72:i64 = xor %56, %71
%73:i64 = phi %0, %68, %72
%74 = block 2
%75:i64 = var
%76:i64 = shl %75, 56:i64
%77 = block 2
%78 = block 2
%79 = block 2
%80 = block 2
%81 = block 2
%82 = block 2
%83:i8 = var
%84:i64 = zext %83
%85:i64 = shlnw %84, 48:i64
%86:i64 = or %76, %85
%87:i64 = phi %82, %76, %86
%88:i8 = var
%89:i64 = zext %88
%90:i64 = shlnw %89, 40:i64
%91:i64 = or %87, %90
%92:i64 = phi %81, %76, %91
%93:i8 = var
%94:i64 = zext %93
%95:i64 = shlnw %94, 32:i64
%96:i64 = or %92, %95
%97:i64 = phi %80, %76, %96
%98:i8 = var
%99:i64 = zext %98
%100:i64 = shlnw %99, 24:i64
%101:i64 = or %97, %100
%102:i64 = phi %79, %76, %101
%103:i8 = var
%104:i64 = zext %103
%105:i64 = shlnw %104, 16:i64
%106:i64 = or %102, %105
%107:i64 = phi %78, %76, %106
%108:i8 = var
%109:i64 = zext %108
%110:i64 = shlnw %109, 8:i64
%111:i64 = or %107, %110
%112:i64 = phi %77, %76, %111
%113:i8 = var
%114:i64 = zext %113
%115:i64 = or %112, %114
%116:i64 = phi %74, %76, %115
%117:i64 = xor %73, %116
%118:i64 = add %67, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121 (hasExternalUses)
%123:i64 = add %62, %122 (hasExternalUses)
%124:i64 = shl %46, 13:i64
%125:i64 = lshr %46, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %59, %126
%128:i64 = add %118, %127 (hasExternalUses)
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132 (hasExternalUses)
%134:i64 = shl %132, 13:i64
%135:i64 = lshr %132, 51:i64
%136:i64 = or %134, %135
%137:i64 = xor %133, %136 (hasExternalUses)
%138:i64 = shl %137, 17:i64
%139:i64 = lshr %137, 47:i64
%140:i64 = or %138, %139
infer %140

; *****
; For LLVM instruction:
;  %188 = xor i64 %187, %184
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134 (hasExternalUses)
%136:i64 = add %123, %135 (hasExternalUses)
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140 (hasExternalUses)
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145 (hasExternalUses)
%147:i64 = shl %145, 17:i64
%148:i64 = lshr %145, 47:i64
%149:i64 = or %147, %148
%150:i64 = xor %146, %149
infer %150

; *****
; For LLVM instruction:
;  %189 = shl i64 %184, 32
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134 (hasExternalUses)
%136:i64 = add %123, %135 (hasExternalUses)
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140 (hasExternalUses)
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144 (hasExternalUses)
%146:i64 = add %136, %145 (hasExternalUses)
%147:i64 = shl %146, 32:i64
infer %147

; *****
; For LLVM instruction:
;  %190 = lshr i64 %184, 32
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134 (hasExternalUses)
%136:i64 = add %123, %135 (hasExternalUses)
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140 (hasExternalUses)
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144 (hasExternalUses)
%146:i64 = add %136, %145 (hasExternalUses)
%147:i64 = lshr %146, 32:i64
infer %147

; *****
; For LLVM instruction:
;  %191 = or i64 %190, %189
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134 (hasExternalUses)
%136:i64 = add %123, %135 (hasExternalUses)
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140 (hasExternalUses)
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144 (hasExternalUses)
%146:i64 = add %136, %145 (hasExternalUses)
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
infer %149

; *****
; For LLVM instruction:
;  %192 = xor i64 %179, %138
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131 (hasExternalUses)
%133:i64 = add %123, %132 (hasExternalUses)
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143 (hasExternalUses)
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147 (hasExternalUses)
%149:i64 = add %136, %148 (hasExternalUses)
%150:i64 = xor %42, %149
infer %150

; *****
; For LLVM instruction:
;  %193 = xor i64 %191, 238
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134 (hasExternalUses)
%136:i64 = add %123, %135 (hasExternalUses)
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140 (hasExternalUses)
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144 (hasExternalUses)
%146:i64 = add %136, %145 (hasExternalUses)
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
infer %150

; *****
; For LLVM instruction:
;  %194 = add i64 %192, %188
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147 (hasExternalUses)
%149:i64 = add %136, %148 (hasExternalUses)
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154 (hasExternalUses)
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158 (hasExternalUses)
%160:i64 = add %150, %159
infer %160

; *****
; For LLVM instruction:
;  %195 = shl i64 %188, 13
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134 (hasExternalUses)
%136:i64 = add %123, %135 (hasExternalUses)
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140 (hasExternalUses)
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145 (hasExternalUses)
%147:i64 = shl %145, 17:i64
%148:i64 = lshr %145, 47:i64
%149:i64 = or %147, %148
%150:i64 = xor %146, %149 (hasExternalUses)
%151:i64 = shl %150, 13:i64
infer %151

; *****
; For LLVM instruction:
;  %196 = lshr i64 %188, 51
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134 (hasExternalUses)
%136:i64 = add %123, %135 (hasExternalUses)
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140 (hasExternalUses)
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145 (hasExternalUses)
%147:i64 = shl %145, 17:i64
%148:i64 = lshr %145, 47:i64
%149:i64 = or %147, %148
%150:i64 = xor %146, %149 (hasExternalUses)
%151:i64 = lshr %150, 51:i64
infer %151

; *****
; For LLVM instruction:
;  %197 = or i64 %196, %195
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134 (hasExternalUses)
%136:i64 = add %123, %135 (hasExternalUses)
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140 (hasExternalUses)
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145 (hasExternalUses)
%147:i64 = shl %145, 17:i64
%148:i64 = lshr %145, 47:i64
%149:i64 = or %147, %148
%150:i64 = xor %146, %149 (hasExternalUses)
%151:i64 = shl %150, 13:i64
%152:i64 = lshr %150, 51:i64
%153:i64 = or %151, %152
infer %153

; *****
; For LLVM instruction:
;  %198 = xor i64 %194, %197
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147 (hasExternalUses)
%149:i64 = add %136, %148 (hasExternalUses)
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154 (hasExternalUses)
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159 (hasExternalUses)
%161:i64 = shl %159, 13:i64
%162:i64 = lshr %159, 51:i64
%163:i64 = or %161, %162
%164:i64 = xor %160, %163
infer %164

; *****
; For LLVM instruction:
;  %199 = shl i64 %194, 32
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147 (hasExternalUses)
%149:i64 = add %136, %148 (hasExternalUses)
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154 (hasExternalUses)
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158 (hasExternalUses)
%160:i64 = add %150, %159 (hasExternalUses)
%161:i64 = shl %160, 32:i64
infer %161

; *****
; For LLVM instruction:
;  %200 = lshr i64 %194, 32
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147 (hasExternalUses)
%149:i64 = add %136, %148 (hasExternalUses)
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154 (hasExternalUses)
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158 (hasExternalUses)
%160:i64 = add %150, %159 (hasExternalUses)
%161:i64 = lshr %160, 32:i64
infer %161

; *****
; For LLVM instruction:
;  %201 = or i64 %200, %199
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147 (hasExternalUses)
%149:i64 = add %136, %148 (hasExternalUses)
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154 (hasExternalUses)
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158 (hasExternalUses)
%160:i64 = add %150, %159 (hasExternalUses)
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
infer %163

; *****
; For LLVM instruction:
;  %202 = add i64 %183, %193
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144 (hasExternalUses)
%146:i64 = add %136, %145 (hasExternalUses)
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157 (hasExternalUses)
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161 (hasExternalUses)
%163:i64 = add %150, %162
infer %163

; *****
; For LLVM instruction:
;  %203 = shl i64 %183, 16
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58
%60:i64 = shl %59, 32:i64
%61:i64 = lshr %59, 32:i64
%62:i64 = or %60, %61
%63:i64 = xor 7816392313619706465:i64, %47
%64:i64 = shl %41, 32:i64
%65:i64 = lshr %41, 32:i64
%66:i64 = or %64, %65
%67:i64 = phi %0, %63, %66
%68:i64 = xor 8387220255154660723:i64, %1
%69:i64 = shl %55, 21:i64
%70:i64 = lshr %55, 43:i64
%71:i64 = or %69, %70
%72:i64 = xor %56, %71
%73:i64 = phi %0, %68, %72
%74 = block 2
%75:i64 = var
%76:i64 = shl %75, 56:i64
%77 = block 2
%78 = block 2
%79 = block 2
%80 = block 2
%81 = block 2
%82 = block 2
%83:i8 = var
%84:i64 = zext %83
%85:i64 = shlnw %84, 48:i64
%86:i64 = or %76, %85
%87:i64 = phi %82, %76, %86
%88:i8 = var
%89:i64 = zext %88
%90:i64 = shlnw %89, 40:i64
%91:i64 = or %87, %90
%92:i64 = phi %81, %76, %91
%93:i8 = var
%94:i64 = zext %93
%95:i64 = shlnw %94, 32:i64
%96:i64 = or %92, %95
%97:i64 = phi %80, %76, %96
%98:i8 = var
%99:i64 = zext %98
%100:i64 = shlnw %99, 24:i64
%101:i64 = or %97, %100
%102:i64 = phi %79, %76, %101
%103:i8 = var
%104:i64 = zext %103
%105:i64 = shlnw %104, 16:i64
%106:i64 = or %102, %105
%107:i64 = phi %78, %76, %106
%108:i8 = var
%109:i64 = zext %108
%110:i64 = shlnw %109, 8:i64
%111:i64 = or %107, %110
%112:i64 = phi %77, %76, %111
%113:i8 = var
%114:i64 = zext %113
%115:i64 = or %112, %114
%116:i64 = phi %74, %76, %115
%117:i64 = xor %73, %116
%118:i64 = add %67, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %62, %122
%124:i64 = shl %46, 13:i64
%125:i64 = lshr %46, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %59, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131 (hasExternalUses)
%133:i64 = add %123, %132 (hasExternalUses)
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143 (hasExternalUses)
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148 (hasExternalUses)
%150:i64 = shl %148, 21:i64
%151:i64 = lshr %148, 43:i64
%152:i64 = or %150, %151
%153:i64 = xor %149, %152 (hasExternalUses)
%154:i64 = shl %153, 16:i64
infer %154

; *****
; For LLVM instruction:
;  %204 = lshr i64 %183, 48
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58
%60:i64 = shl %59, 32:i64
%61:i64 = lshr %59, 32:i64
%62:i64 = or %60, %61
%63:i64 = xor 7816392313619706465:i64, %47
%64:i64 = shl %41, 32:i64
%65:i64 = lshr %41, 32:i64
%66:i64 = or %64, %65
%67:i64 = phi %0, %63, %66
%68:i64 = xor 8387220255154660723:i64, %1
%69:i64 = shl %55, 21:i64
%70:i64 = lshr %55, 43:i64
%71:i64 = or %69, %70
%72:i64 = xor %56, %71
%73:i64 = phi %0, %68, %72
%74 = block 2
%75:i64 = var
%76:i64 = shl %75, 56:i64
%77 = block 2
%78 = block 2
%79 = block 2
%80 = block 2
%81 = block 2
%82 = block 2
%83:i8 = var
%84:i64 = zext %83
%85:i64 = shlnw %84, 48:i64
%86:i64 = or %76, %85
%87:i64 = phi %82, %76, %86
%88:i8 = var
%89:i64 = zext %88
%90:i64 = shlnw %89, 40:i64
%91:i64 = or %87, %90
%92:i64 = phi %81, %76, %91
%93:i8 = var
%94:i64 = zext %93
%95:i64 = shlnw %94, 32:i64
%96:i64 = or %92, %95
%97:i64 = phi %80, %76, %96
%98:i8 = var
%99:i64 = zext %98
%100:i64 = shlnw %99, 24:i64
%101:i64 = or %97, %100
%102:i64 = phi %79, %76, %101
%103:i8 = var
%104:i64 = zext %103
%105:i64 = shlnw %104, 16:i64
%106:i64 = or %102, %105
%107:i64 = phi %78, %76, %106
%108:i8 = var
%109:i64 = zext %108
%110:i64 = shlnw %109, 8:i64
%111:i64 = or %107, %110
%112:i64 = phi %77, %76, %111
%113:i8 = var
%114:i64 = zext %113
%115:i64 = or %112, %114
%116:i64 = phi %74, %76, %115
%117:i64 = xor %73, %116
%118:i64 = add %67, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %62, %122
%124:i64 = shl %46, 13:i64
%125:i64 = lshr %46, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %59, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131 (hasExternalUses)
%133:i64 = add %123, %132 (hasExternalUses)
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143 (hasExternalUses)
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148 (hasExternalUses)
%150:i64 = shl %148, 21:i64
%151:i64 = lshr %148, 43:i64
%152:i64 = or %150, %151
%153:i64 = xor %149, %152 (hasExternalUses)
%154:i64 = lshr %153, 48:i64
infer %154

; *****
; For LLVM instruction:
;  %205 = or i64 %204, %203
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58
%60:i64 = shl %59, 32:i64
%61:i64 = lshr %59, 32:i64
%62:i64 = or %60, %61
%63:i64 = xor 7816392313619706465:i64, %47
%64:i64 = shl %41, 32:i64
%65:i64 = lshr %41, 32:i64
%66:i64 = or %64, %65
%67:i64 = phi %0, %63, %66
%68:i64 = xor 8387220255154660723:i64, %1
%69:i64 = shl %55, 21:i64
%70:i64 = lshr %55, 43:i64
%71:i64 = or %69, %70
%72:i64 = xor %56, %71
%73:i64 = phi %0, %68, %72
%74 = block 2
%75:i64 = var
%76:i64 = shl %75, 56:i64
%77 = block 2
%78 = block 2
%79 = block 2
%80 = block 2
%81 = block 2
%82 = block 2
%83:i8 = var
%84:i64 = zext %83
%85:i64 = shlnw %84, 48:i64
%86:i64 = or %76, %85
%87:i64 = phi %82, %76, %86
%88:i8 = var
%89:i64 = zext %88
%90:i64 = shlnw %89, 40:i64
%91:i64 = or %87, %90
%92:i64 = phi %81, %76, %91
%93:i8 = var
%94:i64 = zext %93
%95:i64 = shlnw %94, 32:i64
%96:i64 = or %92, %95
%97:i64 = phi %80, %76, %96
%98:i8 = var
%99:i64 = zext %98
%100:i64 = shlnw %99, 24:i64
%101:i64 = or %97, %100
%102:i64 = phi %79, %76, %101
%103:i8 = var
%104:i64 = zext %103
%105:i64 = shlnw %104, 16:i64
%106:i64 = or %102, %105
%107:i64 = phi %78, %76, %106
%108:i8 = var
%109:i64 = zext %108
%110:i64 = shlnw %109, 8:i64
%111:i64 = or %107, %110
%112:i64 = phi %77, %76, %111
%113:i8 = var
%114:i64 = zext %113
%115:i64 = or %112, %114
%116:i64 = phi %74, %76, %115
%117:i64 = xor %73, %116
%118:i64 = add %67, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %62, %122
%124:i64 = shl %46, 13:i64
%125:i64 = lshr %46, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %59, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131 (hasExternalUses)
%133:i64 = add %123, %132 (hasExternalUses)
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143 (hasExternalUses)
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148 (hasExternalUses)
%150:i64 = shl %148, 21:i64
%151:i64 = lshr %148, 43:i64
%152:i64 = or %150, %151
%153:i64 = xor %149, %152 (hasExternalUses)
%154:i64 = shl %153, 16:i64
%155:i64 = lshr %153, 48:i64
%156:i64 = or %154, %155
infer %156

; *****
; For LLVM instruction:
;  %206 = xor i64 %205, %202
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144 (hasExternalUses)
%146:i64 = add %136, %145 (hasExternalUses)
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157 (hasExternalUses)
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162 (hasExternalUses)
%164:i64 = shl %162, 16:i64
%165:i64 = lshr %162, 48:i64
%166:i64 = or %164, %165
%167:i64 = xor %163, %166
infer %167

; *****
; For LLVM instruction:
;  %207 = add i64 %206, %201
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158 (hasExternalUses)
%160:i64 = add %150, %159 (hasExternalUses)
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171 (hasExternalUses)
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175 (hasExternalUses)
%177:i64 = add %163, %176
infer %177

; *****
; For LLVM instruction:
;  %208 = shl i64 %206, 21
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144 (hasExternalUses)
%146:i64 = add %136, %145 (hasExternalUses)
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157 (hasExternalUses)
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162 (hasExternalUses)
%164:i64 = shl %162, 16:i64
%165:i64 = lshr %162, 48:i64
%166:i64 = or %164, %165
%167:i64 = xor %163, %166 (hasExternalUses)
%168:i64 = shl %167, 21:i64
infer %168

; *****
; For LLVM instruction:
;  %209 = lshr i64 %206, 43
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144 (hasExternalUses)
%146:i64 = add %136, %145 (hasExternalUses)
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157 (hasExternalUses)
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162 (hasExternalUses)
%164:i64 = shl %162, 16:i64
%165:i64 = lshr %162, 48:i64
%166:i64 = or %164, %165
%167:i64 = xor %163, %166 (hasExternalUses)
%168:i64 = lshr %167, 43:i64
infer %168

; *****
; For LLVM instruction:
;  %210 = or i64 %209, %208
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144 (hasExternalUses)
%146:i64 = add %136, %145 (hasExternalUses)
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157 (hasExternalUses)
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162 (hasExternalUses)
%164:i64 = shl %162, 16:i64
%165:i64 = lshr %162, 48:i64
%166:i64 = or %164, %165
%167:i64 = xor %163, %166 (hasExternalUses)
%168:i64 = shl %167, 21:i64
%169:i64 = lshr %167, 43:i64
%170:i64 = or %168, %169
infer %170

; *****
; For LLVM instruction:
;  %211 = xor i64 %210, %207
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158 (hasExternalUses)
%160:i64 = add %150, %159 (hasExternalUses)
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171 (hasExternalUses)
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176 (hasExternalUses)
%178:i64 = shl %176, 21:i64
%179:i64 = lshr %176, 43:i64
%180:i64 = or %178, %179
%181:i64 = xor %177, %180
infer %181

; *****
; For LLVM instruction:
;  %212 = add i64 %202, %198
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161 (hasExternalUses)
%163:i64 = add %150, %162 (hasExternalUses)
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168 (hasExternalUses)
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172 (hasExternalUses)
%174:i64 = add %163, %173
infer %174

; *****
; For LLVM instruction:
;  %213 = shl i64 %198, 17
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147 (hasExternalUses)
%149:i64 = add %136, %148 (hasExternalUses)
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154 (hasExternalUses)
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159 (hasExternalUses)
%161:i64 = shl %159, 13:i64
%162:i64 = lshr %159, 51:i64
%163:i64 = or %161, %162
%164:i64 = xor %160, %163 (hasExternalUses)
%165:i64 = shl %164, 17:i64
infer %165

; *****
; For LLVM instruction:
;  %214 = lshr i64 %198, 47
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147 (hasExternalUses)
%149:i64 = add %136, %148 (hasExternalUses)
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154 (hasExternalUses)
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159 (hasExternalUses)
%161:i64 = shl %159, 13:i64
%162:i64 = lshr %159, 51:i64
%163:i64 = or %161, %162
%164:i64 = xor %160, %163 (hasExternalUses)
%165:i64 = lshr %164, 47:i64
infer %165

; *****
; For LLVM instruction:
;  %215 = or i64 %214, %213
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147 (hasExternalUses)
%149:i64 = add %136, %148 (hasExternalUses)
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154 (hasExternalUses)
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159 (hasExternalUses)
%161:i64 = shl %159, 13:i64
%162:i64 = lshr %159, 51:i64
%163:i64 = or %161, %162
%164:i64 = xor %160, %163 (hasExternalUses)
%165:i64 = shl %164, 17:i64
%166:i64 = lshr %164, 47:i64
%167:i64 = or %165, %166
infer %167

; *****
; For LLVM instruction:
;  %216 = xor i64 %215, %212
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161 (hasExternalUses)
%163:i64 = add %150, %162 (hasExternalUses)
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168 (hasExternalUses)
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173 (hasExternalUses)
%175:i64 = shl %173, 17:i64
%176:i64 = lshr %173, 47:i64
%177:i64 = or %175, %176
%178:i64 = xor %174, %177
infer %178

; *****
; For LLVM instruction:
;  %217 = shl i64 %212, 32
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161 (hasExternalUses)
%163:i64 = add %150, %162 (hasExternalUses)
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168 (hasExternalUses)
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172 (hasExternalUses)
%174:i64 = add %163, %173 (hasExternalUses)
%175:i64 = shl %174, 32:i64
infer %175

; *****
; For LLVM instruction:
;  %218 = lshr i64 %212, 32
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161 (hasExternalUses)
%163:i64 = add %150, %162 (hasExternalUses)
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168 (hasExternalUses)
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172 (hasExternalUses)
%174:i64 = add %163, %173 (hasExternalUses)
%175:i64 = lshr %174, 32:i64
infer %175

; *****
; For LLVM instruction:
;  %219 = or i64 %218, %217
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161 (hasExternalUses)
%163:i64 = add %150, %162 (hasExternalUses)
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168 (hasExternalUses)
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172 (hasExternalUses)
%174:i64 = add %163, %173 (hasExternalUses)
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
infer %177

; *****
; For LLVM instruction:
;  %220 = add i64 %207, %216
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175 (hasExternalUses)
%177:i64 = add %163, %176 (hasExternalUses)
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181 (hasExternalUses)
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185 (hasExternalUses)
%187:i64 = add %177, %186
infer %187

; *****
; For LLVM instruction:
;  %221 = shl i64 %216, 13
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161 (hasExternalUses)
%163:i64 = add %150, %162 (hasExternalUses)
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168 (hasExternalUses)
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173 (hasExternalUses)
%175:i64 = shl %173, 17:i64
%176:i64 = lshr %173, 47:i64
%177:i64 = or %175, %176
%178:i64 = xor %174, %177 (hasExternalUses)
%179:i64 = shl %178, 13:i64
infer %179

; *****
; For LLVM instruction:
;  %222 = lshr i64 %216, 51
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161 (hasExternalUses)
%163:i64 = add %150, %162 (hasExternalUses)
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168 (hasExternalUses)
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173 (hasExternalUses)
%175:i64 = shl %173, 17:i64
%176:i64 = lshr %173, 47:i64
%177:i64 = or %175, %176
%178:i64 = xor %174, %177 (hasExternalUses)
%179:i64 = lshr %178, 51:i64
infer %179

; *****
; For LLVM instruction:
;  %223 = or i64 %222, %221
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161 (hasExternalUses)
%163:i64 = add %150, %162 (hasExternalUses)
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168 (hasExternalUses)
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173 (hasExternalUses)
%175:i64 = shl %173, 17:i64
%176:i64 = lshr %173, 47:i64
%177:i64 = or %175, %176
%178:i64 = xor %174, %177 (hasExternalUses)
%179:i64 = shl %178, 13:i64
%180:i64 = lshr %178, 51:i64
%181:i64 = or %179, %180
infer %181

; *****
; For LLVM instruction:
;  %224 = xor i64 %223, %220
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175 (hasExternalUses)
%177:i64 = add %163, %176 (hasExternalUses)
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181 (hasExternalUses)
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186 (hasExternalUses)
%188:i64 = shl %186, 13:i64
%189:i64 = lshr %186, 51:i64
%190:i64 = or %188, %189
%191:i64 = xor %187, %190
infer %191

; *****
; For LLVM instruction:
;  %225 = shl i64 %220, 32
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175 (hasExternalUses)
%177:i64 = add %163, %176 (hasExternalUses)
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181 (hasExternalUses)
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185 (hasExternalUses)
%187:i64 = add %177, %186 (hasExternalUses)
%188:i64 = shl %187, 32:i64
infer %188

; *****
; For LLVM instruction:
;  %226 = lshr i64 %220, 32
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175 (hasExternalUses)
%177:i64 = add %163, %176 (hasExternalUses)
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181 (hasExternalUses)
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185 (hasExternalUses)
%187:i64 = add %177, %186 (hasExternalUses)
%188:i64 = lshr %187, 32:i64
infer %188

; *****
; For LLVM instruction:
;  %227 = or i64 %226, %225
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175 (hasExternalUses)
%177:i64 = add %163, %176 (hasExternalUses)
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181 (hasExternalUses)
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185 (hasExternalUses)
%187:i64 = add %177, %186 (hasExternalUses)
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
infer %190

; *****
; For LLVM instruction:
;  %228 = add i64 %211, %219
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172 (hasExternalUses)
%174:i64 = add %163, %173 (hasExternalUses)
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184 (hasExternalUses)
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188 (hasExternalUses)
%190:i64 = add %177, %189
infer %190

; *****
; For LLVM instruction:
;  %229 = shl i64 %211, 16
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158 (hasExternalUses)
%160:i64 = add %150, %159 (hasExternalUses)
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171 (hasExternalUses)
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176 (hasExternalUses)
%178:i64 = shl %176, 21:i64
%179:i64 = lshr %176, 43:i64
%180:i64 = or %178, %179
%181:i64 = xor %177, %180 (hasExternalUses)
%182:i64 = shl %181, 16:i64
infer %182

; *****
; For LLVM instruction:
;  %230 = lshr i64 %211, 48
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158 (hasExternalUses)
%160:i64 = add %150, %159 (hasExternalUses)
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171 (hasExternalUses)
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176 (hasExternalUses)
%178:i64 = shl %176, 21:i64
%179:i64 = lshr %176, 43:i64
%180:i64 = or %178, %179
%181:i64 = xor %177, %180 (hasExternalUses)
%182:i64 = lshr %181, 48:i64
infer %182

; *****
; For LLVM instruction:
;  %231 = or i64 %230, %229
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158 (hasExternalUses)
%160:i64 = add %150, %159 (hasExternalUses)
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171 (hasExternalUses)
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176 (hasExternalUses)
%178:i64 = shl %176, 21:i64
%179:i64 = lshr %176, 43:i64
%180:i64 = or %178, %179
%181:i64 = xor %177, %180 (hasExternalUses)
%182:i64 = shl %181, 16:i64
%183:i64 = lshr %181, 48:i64
%184:i64 = or %182, %183
infer %184

; *****
; For LLVM instruction:
;  %232 = xor i64 %231, %228
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172 (hasExternalUses)
%174:i64 = add %163, %173 (hasExternalUses)
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184 (hasExternalUses)
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189 (hasExternalUses)
%191:i64 = shl %189, 16:i64
%192:i64 = lshr %189, 48:i64
%193:i64 = or %191, %192
%194:i64 = xor %190, %193
infer %194

; *****
; For LLVM instruction:
;  %233 = add i64 %232, %227
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185 (hasExternalUses)
%187:i64 = add %177, %186 (hasExternalUses)
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197 (hasExternalUses)
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201 (hasExternalUses)
%203:i64 = add %190, %202
infer %203

; *****
; For LLVM instruction:
;  %234 = shl i64 %232, 21
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172 (hasExternalUses)
%174:i64 = add %163, %173 (hasExternalUses)
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184 (hasExternalUses)
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189 (hasExternalUses)
%191:i64 = shl %189, 16:i64
%192:i64 = lshr %189, 48:i64
%193:i64 = or %191, %192
%194:i64 = xor %190, %193 (hasExternalUses)
%195:i64 = shl %194, 21:i64
infer %195

; *****
; For LLVM instruction:
;  %235 = lshr i64 %232, 43
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172 (hasExternalUses)
%174:i64 = add %163, %173 (hasExternalUses)
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184 (hasExternalUses)
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189 (hasExternalUses)
%191:i64 = shl %189, 16:i64
%192:i64 = lshr %189, 48:i64
%193:i64 = or %191, %192
%194:i64 = xor %190, %193 (hasExternalUses)
%195:i64 = lshr %194, 43:i64
infer %195

; *****
; For LLVM instruction:
;  %236 = or i64 %235, %234
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172 (hasExternalUses)
%174:i64 = add %163, %173 (hasExternalUses)
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184 (hasExternalUses)
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189 (hasExternalUses)
%191:i64 = shl %189, 16:i64
%192:i64 = lshr %189, 48:i64
%193:i64 = or %191, %192
%194:i64 = xor %190, %193 (hasExternalUses)
%195:i64 = shl %194, 21:i64
%196:i64 = lshr %194, 43:i64
%197:i64 = or %195, %196
infer %197

; *****
; For LLVM instruction:
;  %237 = xor i64 %236, %233
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185 (hasExternalUses)
%187:i64 = add %177, %186 (hasExternalUses)
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197 (hasExternalUses)
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202 (hasExternalUses)
%204:i64 = shl %202, 21:i64
%205:i64 = lshr %202, 43:i64
%206:i64 = or %204, %205
%207:i64 = xor %203, %206
infer %207

; *****
; For LLVM instruction:
;  %238 = add i64 %228, %224
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188 (hasExternalUses)
%190:i64 = add %177, %189 (hasExternalUses)
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194 (hasExternalUses)
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198 (hasExternalUses)
%200:i64 = add %190, %199
infer %200

; *****
; For LLVM instruction:
;  %239 = shl i64 %224, 17
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175 (hasExternalUses)
%177:i64 = add %163, %176 (hasExternalUses)
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181 (hasExternalUses)
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186 (hasExternalUses)
%188:i64 = shl %186, 13:i64
%189:i64 = lshr %186, 51:i64
%190:i64 = or %188, %189
%191:i64 = xor %187, %190 (hasExternalUses)
%192:i64 = shl %191, 17:i64
infer %192

; *****
; For LLVM instruction:
;  %240 = lshr i64 %224, 47
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175 (hasExternalUses)
%177:i64 = add %163, %176 (hasExternalUses)
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181 (hasExternalUses)
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186 (hasExternalUses)
%188:i64 = shl %186, 13:i64
%189:i64 = lshr %186, 51:i64
%190:i64 = or %188, %189
%191:i64 = xor %187, %190 (hasExternalUses)
%192:i64 = lshr %191, 47:i64
infer %192

; *****
; For LLVM instruction:
;  %241 = or i64 %240, %239
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175 (hasExternalUses)
%177:i64 = add %163, %176 (hasExternalUses)
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181 (hasExternalUses)
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186 (hasExternalUses)
%188:i64 = shl %186, 13:i64
%189:i64 = lshr %186, 51:i64
%190:i64 = or %188, %189
%191:i64 = xor %187, %190 (hasExternalUses)
%192:i64 = shl %191, 17:i64
%193:i64 = lshr %191, 47:i64
%194:i64 = or %192, %193
infer %194

; *****
; For LLVM instruction:
;  %242 = xor i64 %241, %238
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188 (hasExternalUses)
%190:i64 = add %177, %189 (hasExternalUses)
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194 (hasExternalUses)
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199 (hasExternalUses)
%201:i64 = shl %199, 17:i64
%202:i64 = lshr %199, 47:i64
%203:i64 = or %201, %202
%204:i64 = xor %200, %203
infer %204

; *****
; For LLVM instruction:
;  %243 = shl i64 %238, 32
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188 (hasExternalUses)
%190:i64 = add %177, %189 (hasExternalUses)
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194 (hasExternalUses)
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198 (hasExternalUses)
%200:i64 = add %190, %199 (hasExternalUses)
%201:i64 = shl %200, 32:i64
infer %201

; *****
; For LLVM instruction:
;  %244 = lshr i64 %238, 32
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188 (hasExternalUses)
%190:i64 = add %177, %189 (hasExternalUses)
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194 (hasExternalUses)
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198 (hasExternalUses)
%200:i64 = add %190, %199 (hasExternalUses)
%201:i64 = lshr %200, 32:i64
infer %201

; *****
; For LLVM instruction:
;  %245 = or i64 %244, %243
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188 (hasExternalUses)
%190:i64 = add %177, %189 (hasExternalUses)
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194 (hasExternalUses)
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198 (hasExternalUses)
%200:i64 = add %190, %199 (hasExternalUses)
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
infer %203

; *****
; For LLVM instruction:
;  %246 = add i64 %233, %242
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201 (hasExternalUses)
%203:i64 = add %190, %202 (hasExternalUses)
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207 (hasExternalUses)
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211 (hasExternalUses)
%213:i64 = add %203, %212
infer %213

; *****
; For LLVM instruction:
;  %247 = shl i64 %242, 13
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188 (hasExternalUses)
%190:i64 = add %177, %189 (hasExternalUses)
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194 (hasExternalUses)
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199 (hasExternalUses)
%201:i64 = shl %199, 17:i64
%202:i64 = lshr %199, 47:i64
%203:i64 = or %201, %202
%204:i64 = xor %200, %203 (hasExternalUses)
%205:i64 = shl %204, 13:i64
infer %205

; *****
; For LLVM instruction:
;  %248 = lshr i64 %242, 51
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188 (hasExternalUses)
%190:i64 = add %177, %189 (hasExternalUses)
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194 (hasExternalUses)
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199 (hasExternalUses)
%201:i64 = shl %199, 17:i64
%202:i64 = lshr %199, 47:i64
%203:i64 = or %201, %202
%204:i64 = xor %200, %203 (hasExternalUses)
%205:i64 = lshr %204, 51:i64
infer %205

; *****
; For LLVM instruction:
;  %249 = or i64 %248, %247
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188 (hasExternalUses)
%190:i64 = add %177, %189 (hasExternalUses)
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194 (hasExternalUses)
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199 (hasExternalUses)
%201:i64 = shl %199, 17:i64
%202:i64 = lshr %199, 47:i64
%203:i64 = or %201, %202
%204:i64 = xor %200, %203 (hasExternalUses)
%205:i64 = shl %204, 13:i64
%206:i64 = lshr %204, 51:i64
%207:i64 = or %205, %206
infer %207

; *****
; For LLVM instruction:
;  %250 = xor i64 %249, %246
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201 (hasExternalUses)
%203:i64 = add %190, %202 (hasExternalUses)
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207 (hasExternalUses)
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212 (hasExternalUses)
%214:i64 = shl %212, 13:i64
%215:i64 = lshr %212, 51:i64
%216:i64 = or %214, %215
%217:i64 = xor %213, %216
infer %217

; *****
; For LLVM instruction:
;  %251 = shl i64 %246, 32
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201 (hasExternalUses)
%203:i64 = add %190, %202 (hasExternalUses)
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207 (hasExternalUses)
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211 (hasExternalUses)
%213:i64 = add %203, %212 (hasExternalUses)
%214:i64 = shl %213, 32:i64
infer %214

; *****
; For LLVM instruction:
;  %252 = lshr i64 %246, 32
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201 (hasExternalUses)
%203:i64 = add %190, %202 (hasExternalUses)
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207 (hasExternalUses)
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211 (hasExternalUses)
%213:i64 = add %203, %212 (hasExternalUses)
%214:i64 = lshr %213, 32:i64
infer %214

; *****
; For LLVM instruction:
;  %253 = or i64 %252, %251
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201 (hasExternalUses)
%203:i64 = add %190, %202 (hasExternalUses)
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207 (hasExternalUses)
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211 (hasExternalUses)
%213:i64 = add %203, %212 (hasExternalUses)
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
infer %216

; *****
; For LLVM instruction:
;  %254 = add i64 %237, %245
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198 (hasExternalUses)
%200:i64 = add %190, %199 (hasExternalUses)
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210 (hasExternalUses)
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214 (hasExternalUses)
%216:i64 = add %203, %215
infer %216

; *****
; For LLVM instruction:
;  %255 = shl i64 %237, 16
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185 (hasExternalUses)
%187:i64 = add %177, %186 (hasExternalUses)
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197 (hasExternalUses)
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202 (hasExternalUses)
%204:i64 = shl %202, 21:i64
%205:i64 = lshr %202, 43:i64
%206:i64 = or %204, %205
%207:i64 = xor %203, %206 (hasExternalUses)
%208:i64 = shl %207, 16:i64
infer %208

; *****
; For LLVM instruction:
;  %256 = lshr i64 %237, 48
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185 (hasExternalUses)
%187:i64 = add %177, %186 (hasExternalUses)
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197 (hasExternalUses)
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202 (hasExternalUses)
%204:i64 = shl %202, 21:i64
%205:i64 = lshr %202, 43:i64
%206:i64 = or %204, %205
%207:i64 = xor %203, %206 (hasExternalUses)
%208:i64 = lshr %207, 48:i64
infer %208

; *****
; For LLVM instruction:
;  %257 = or i64 %256, %255
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185 (hasExternalUses)
%187:i64 = add %177, %186 (hasExternalUses)
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197 (hasExternalUses)
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202 (hasExternalUses)
%204:i64 = shl %202, 21:i64
%205:i64 = lshr %202, 43:i64
%206:i64 = or %204, %205
%207:i64 = xor %203, %206 (hasExternalUses)
%208:i64 = shl %207, 16:i64
%209:i64 = lshr %207, 48:i64
%210:i64 = or %208, %209
infer %210

; *****
; For LLVM instruction:
;  %258 = xor i64 %257, %254
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198 (hasExternalUses)
%200:i64 = add %190, %199 (hasExternalUses)
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210 (hasExternalUses)
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215 (hasExternalUses)
%217:i64 = shl %215, 16:i64
%218:i64 = lshr %215, 48:i64
%219:i64 = or %217, %218
%220:i64 = xor %216, %219
infer %220

; *****
; For LLVM instruction:
;  %259 = add i64 %258, %253
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211 (hasExternalUses)
%213:i64 = add %203, %212 (hasExternalUses)
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223 (hasExternalUses)
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227 (hasExternalUses)
%229:i64 = add %216, %228
infer %229

; *****
; For LLVM instruction:
;  %260 = shl i64 %258, 21
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198 (hasExternalUses)
%200:i64 = add %190, %199 (hasExternalUses)
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210 (hasExternalUses)
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215 (hasExternalUses)
%217:i64 = shl %215, 16:i64
%218:i64 = lshr %215, 48:i64
%219:i64 = or %217, %218
%220:i64 = xor %216, %219 (hasExternalUses)
%221:i64 = shl %220, 21:i64
infer %221

; *****
; For LLVM instruction:
;  %261 = lshr i64 %258, 43
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198 (hasExternalUses)
%200:i64 = add %190, %199 (hasExternalUses)
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210 (hasExternalUses)
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215 (hasExternalUses)
%217:i64 = shl %215, 16:i64
%218:i64 = lshr %215, 48:i64
%219:i64 = or %217, %218
%220:i64 = xor %216, %219 (hasExternalUses)
%221:i64 = lshr %220, 43:i64
infer %221

; *****
; For LLVM instruction:
;  %262 = or i64 %261, %260
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198 (hasExternalUses)
%200:i64 = add %190, %199 (hasExternalUses)
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210 (hasExternalUses)
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215 (hasExternalUses)
%217:i64 = shl %215, 16:i64
%218:i64 = lshr %215, 48:i64
%219:i64 = or %217, %218
%220:i64 = xor %216, %219 (hasExternalUses)
%221:i64 = shl %220, 21:i64
%222:i64 = lshr %220, 43:i64
%223:i64 = or %221, %222
infer %223

; *****
; For LLVM instruction:
;  %263 = xor i64 %262, %259
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211 (hasExternalUses)
%213:i64 = add %203, %212 (hasExternalUses)
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223 (hasExternalUses)
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228 (hasExternalUses)
%230:i64 = shl %228, 21:i64
%231:i64 = lshr %228, 43:i64
%232:i64 = or %230, %231
%233:i64 = xor %229, %232
infer %233

; *****
; For LLVM instruction:
;  %264 = add i64 %254, %250
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214 (hasExternalUses)
%216:i64 = add %203, %215 (hasExternalUses)
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220 (hasExternalUses)
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224 (hasExternalUses)
%226:i64 = add %216, %225
infer %226

; *****
; For LLVM instruction:
;  %265 = shl i64 %250, 17
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201 (hasExternalUses)
%203:i64 = add %190, %202 (hasExternalUses)
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207 (hasExternalUses)
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212 (hasExternalUses)
%214:i64 = shl %212, 13:i64
%215:i64 = lshr %212, 51:i64
%216:i64 = or %214, %215
%217:i64 = xor %213, %216 (hasExternalUses)
%218:i64 = shl %217, 17:i64
infer %218

; *****
; For LLVM instruction:
;  %266 = lshr i64 %250, 47
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201 (hasExternalUses)
%203:i64 = add %190, %202 (hasExternalUses)
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207 (hasExternalUses)
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212 (hasExternalUses)
%214:i64 = shl %212, 13:i64
%215:i64 = lshr %212, 51:i64
%216:i64 = or %214, %215
%217:i64 = xor %213, %216 (hasExternalUses)
%218:i64 = lshr %217, 47:i64
infer %218

; *****
; For LLVM instruction:
;  %267 = or i64 %266, %265
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201 (hasExternalUses)
%203:i64 = add %190, %202 (hasExternalUses)
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207 (hasExternalUses)
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212 (hasExternalUses)
%214:i64 = shl %212, 13:i64
%215:i64 = lshr %212, 51:i64
%216:i64 = or %214, %215
%217:i64 = xor %213, %216 (hasExternalUses)
%218:i64 = shl %217, 17:i64
%219:i64 = lshr %217, 47:i64
%220:i64 = or %218, %219
infer %220

; *****
; For LLVM instruction:
;  %268 = xor i64 %267, %264
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214 (hasExternalUses)
%216:i64 = add %203, %215 (hasExternalUses)
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220 (hasExternalUses)
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225 (hasExternalUses)
%227:i64 = shl %225, 17:i64
%228:i64 = lshr %225, 47:i64
%229:i64 = or %227, %228
%230:i64 = xor %226, %229
infer %230

; *****
; For LLVM instruction:
;  %269 = shl i64 %264, 32
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214 (hasExternalUses)
%216:i64 = add %203, %215 (hasExternalUses)
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220 (hasExternalUses)
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224 (hasExternalUses)
%226:i64 = add %216, %225 (hasExternalUses)
%227:i64 = shl %226, 32:i64
infer %227

; *****
; For LLVM instruction:
;  %270 = lshr i64 %264, 32
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214 (hasExternalUses)
%216:i64 = add %203, %215 (hasExternalUses)
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220 (hasExternalUses)
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224 (hasExternalUses)
%226:i64 = add %216, %225 (hasExternalUses)
%227:i64 = lshr %226, 32:i64
infer %227

; *****
; For LLVM instruction:
;  %271 = or i64 %270, %269
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214 (hasExternalUses)
%216:i64 = add %203, %215 (hasExternalUses)
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220 (hasExternalUses)
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224 (hasExternalUses)
%226:i64 = add %216, %225 (hasExternalUses)
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
infer %229

; *****
; For LLVM instruction:
;  %272 = add i64 %259, %268
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227 (hasExternalUses)
%229:i64 = add %216, %228 (hasExternalUses)
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233 (hasExternalUses)
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237 (hasExternalUses)
%239:i64 = add %229, %238
infer %239

; *****
; For LLVM instruction:
;  %273 = shl i64 %268, 13
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214 (hasExternalUses)
%216:i64 = add %203, %215 (hasExternalUses)
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220 (hasExternalUses)
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225 (hasExternalUses)
%227:i64 = shl %225, 17:i64
%228:i64 = lshr %225, 47:i64
%229:i64 = or %227, %228
%230:i64 = xor %226, %229 (hasExternalUses)
%231:i64 = shl %230, 13:i64
infer %231

; *****
; For LLVM instruction:
;  %274 = lshr i64 %268, 51
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214 (hasExternalUses)
%216:i64 = add %203, %215 (hasExternalUses)
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220 (hasExternalUses)
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225 (hasExternalUses)
%227:i64 = shl %225, 17:i64
%228:i64 = lshr %225, 47:i64
%229:i64 = or %227, %228
%230:i64 = xor %226, %229 (hasExternalUses)
%231:i64 = lshr %230, 51:i64
infer %231

; *****
; For LLVM instruction:
;  %275 = or i64 %274, %273
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214 (hasExternalUses)
%216:i64 = add %203, %215 (hasExternalUses)
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220 (hasExternalUses)
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225 (hasExternalUses)
%227:i64 = shl %225, 17:i64
%228:i64 = lshr %225, 47:i64
%229:i64 = or %227, %228
%230:i64 = xor %226, %229 (hasExternalUses)
%231:i64 = shl %230, 13:i64
%232:i64 = lshr %230, 51:i64
%233:i64 = or %231, %232
infer %233

; *****
; For LLVM instruction:
;  %276 = xor i64 %275, %272
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227 (hasExternalUses)
%229:i64 = add %216, %228 (hasExternalUses)
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233 (hasExternalUses)
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237
%239:i64 = add %229, %238 (hasExternalUses)
%240:i64 = shl %238, 13:i64
%241:i64 = lshr %238, 51:i64
%242:i64 = or %240, %241
%243:i64 = xor %239, %242
infer %243

; *****
; For LLVM instruction:
;  %277 = shl i64 %272, 32
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227 (hasExternalUses)
%229:i64 = add %216, %228 (hasExternalUses)
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233 (hasExternalUses)
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237 (hasExternalUses)
%239:i64 = add %229, %238 (hasExternalUses)
%240:i64 = shl %239, 32:i64
infer %240

; *****
; For LLVM instruction:
;  %278 = lshr i64 %272, 32
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227 (hasExternalUses)
%229:i64 = add %216, %228 (hasExternalUses)
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233 (hasExternalUses)
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237 (hasExternalUses)
%239:i64 = add %229, %238 (hasExternalUses)
%240:i64 = lshr %239, 32:i64
infer %240

; *****
; For LLVM instruction:
;  %279 = or i64 %278, %277
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227 (hasExternalUses)
%229:i64 = add %216, %228 (hasExternalUses)
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233 (hasExternalUses)
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237 (hasExternalUses)
%239:i64 = add %229, %238 (hasExternalUses)
%240:i64 = shl %239, 32:i64
%241:i64 = lshr %239, 32:i64
%242:i64 = or %240, %241
infer %242

; *****
; For LLVM instruction:
;  %280 = add i64 %263, %271
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224 (hasExternalUses)
%226:i64 = add %216, %225 (hasExternalUses)
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236 (hasExternalUses)
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240 (hasExternalUses)
%242:i64 = add %229, %241
infer %242

; *****
; For LLVM instruction:
;  %281 = shl i64 %263, 16
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211 (hasExternalUses)
%213:i64 = add %203, %212 (hasExternalUses)
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223 (hasExternalUses)
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228 (hasExternalUses)
%230:i64 = shl %228, 21:i64
%231:i64 = lshr %228, 43:i64
%232:i64 = or %230, %231
%233:i64 = xor %229, %232 (hasExternalUses)
%234:i64 = shl %233, 16:i64
infer %234

; *****
; For LLVM instruction:
;  %282 = lshr i64 %263, 48
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211 (hasExternalUses)
%213:i64 = add %203, %212 (hasExternalUses)
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223 (hasExternalUses)
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228 (hasExternalUses)
%230:i64 = shl %228, 21:i64
%231:i64 = lshr %228, 43:i64
%232:i64 = or %230, %231
%233:i64 = xor %229, %232 (hasExternalUses)
%234:i64 = lshr %233, 48:i64
infer %234

; *****
; For LLVM instruction:
;  %283 = or i64 %282, %281
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211 (hasExternalUses)
%213:i64 = add %203, %212 (hasExternalUses)
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223 (hasExternalUses)
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228 (hasExternalUses)
%230:i64 = shl %228, 21:i64
%231:i64 = lshr %228, 43:i64
%232:i64 = or %230, %231
%233:i64 = xor %229, %232 (hasExternalUses)
%234:i64 = shl %233, 16:i64
%235:i64 = lshr %233, 48:i64
%236:i64 = or %234, %235
infer %236

; *****
; For LLVM instruction:
;  %284 = xor i64 %283, %280
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224 (hasExternalUses)
%226:i64 = add %216, %225 (hasExternalUses)
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236 (hasExternalUses)
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241 (hasExternalUses)
%243:i64 = shl %241, 16:i64
%244:i64 = lshr %241, 48:i64
%245:i64 = or %243, %244
%246:i64 = xor %242, %245
infer %246

; *****
; For LLVM instruction:
;  %285 = add i64 %284, %279
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237 (hasExternalUses)
%239:i64 = add %229, %238 (hasExternalUses)
%240:i64 = shl %239, 32:i64
%241:i64 = lshr %239, 32:i64
%242:i64 = or %240, %241
%243:i64 = shl %234, 32:i64
%244:i64 = lshr %234, 32:i64
%245:i64 = or %243, %244
%246:i64 = shl %228, 21:i64
%247:i64 = lshr %228, 43:i64
%248:i64 = or %246, %247
%249:i64 = xor %229, %248
%250:i64 = add %245, %249 (hasExternalUses)
%251:i64 = shl %249, 16:i64
%252:i64 = lshr %249, 48:i64
%253:i64 = or %251, %252
%254:i64 = xor %250, %253 (hasExternalUses)
%255:i64 = add %242, %254
infer %255

; *****
; For LLVM instruction:
;  %286 = shl i64 %284, 21
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224 (hasExternalUses)
%226:i64 = add %216, %225 (hasExternalUses)
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236 (hasExternalUses)
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241 (hasExternalUses)
%243:i64 = shl %241, 16:i64
%244:i64 = lshr %241, 48:i64
%245:i64 = or %243, %244
%246:i64 = xor %242, %245 (hasExternalUses)
%247:i64 = shl %246, 21:i64
infer %247

; *****
; For LLVM instruction:
;  %287 = lshr i64 %284, 43
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224 (hasExternalUses)
%226:i64 = add %216, %225 (hasExternalUses)
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236 (hasExternalUses)
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241 (hasExternalUses)
%243:i64 = shl %241, 16:i64
%244:i64 = lshr %241, 48:i64
%245:i64 = or %243, %244
%246:i64 = xor %242, %245 (hasExternalUses)
%247:i64 = lshr %246, 43:i64
infer %247

; *****
; For LLVM instruction:
;  %288 = or i64 %287, %286
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224 (hasExternalUses)
%226:i64 = add %216, %225 (hasExternalUses)
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236 (hasExternalUses)
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241 (hasExternalUses)
%243:i64 = shl %241, 16:i64
%244:i64 = lshr %241, 48:i64
%245:i64 = or %243, %244
%246:i64 = xor %242, %245 (hasExternalUses)
%247:i64 = shl %246, 21:i64
%248:i64 = lshr %246, 43:i64
%249:i64 = or %247, %248
infer %249

; *****
; For LLVM instruction:
;  %289 = xor i64 %288, %285
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237 (hasExternalUses)
%239:i64 = add %229, %238 (hasExternalUses)
%240:i64 = shl %239, 32:i64
%241:i64 = lshr %239, 32:i64
%242:i64 = or %240, %241
%243:i64 = shl %234, 32:i64
%244:i64 = lshr %234, 32:i64
%245:i64 = or %243, %244
%246:i64 = shl %228, 21:i64
%247:i64 = lshr %228, 43:i64
%248:i64 = or %246, %247
%249:i64 = xor %229, %248
%250:i64 = add %245, %249 (hasExternalUses)
%251:i64 = shl %249, 16:i64
%252:i64 = lshr %249, 48:i64
%253:i64 = or %251, %252
%254:i64 = xor %250, %253
%255:i64 = add %242, %254 (hasExternalUses)
%256:i64 = shl %254, 21:i64
%257:i64 = lshr %254, 43:i64
%258:i64 = or %256, %257
%259:i64 = xor %255, %258
infer %259

; *****
; For LLVM instruction:
;  %290 = add i64 %280, %276
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240 (hasExternalUses)
%242:i64 = add %229, %241 (hasExternalUses)
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246 (hasExternalUses)
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250 (hasExternalUses)
%252:i64 = add %242, %251
infer %252

; *****
; For LLVM instruction:
;  %291 = shl i64 %276, 17
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227 (hasExternalUses)
%229:i64 = add %216, %228 (hasExternalUses)
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233 (hasExternalUses)
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237
%239:i64 = add %229, %238 (hasExternalUses)
%240:i64 = shl %238, 13:i64
%241:i64 = lshr %238, 51:i64
%242:i64 = or %240, %241
%243:i64 = xor %239, %242 (hasExternalUses)
%244:i64 = shl %243, 17:i64
infer %244

; *****
; For LLVM instruction:
;  %292 = lshr i64 %276, 47
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227 (hasExternalUses)
%229:i64 = add %216, %228 (hasExternalUses)
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233 (hasExternalUses)
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237
%239:i64 = add %229, %238 (hasExternalUses)
%240:i64 = shl %238, 13:i64
%241:i64 = lshr %238, 51:i64
%242:i64 = or %240, %241
%243:i64 = xor %239, %242 (hasExternalUses)
%244:i64 = lshr %243, 47:i64
infer %244

; *****
; For LLVM instruction:
;  %293 = or i64 %292, %291
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227 (hasExternalUses)
%229:i64 = add %216, %228 (hasExternalUses)
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233 (hasExternalUses)
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237
%239:i64 = add %229, %238 (hasExternalUses)
%240:i64 = shl %238, 13:i64
%241:i64 = lshr %238, 51:i64
%242:i64 = or %240, %241
%243:i64 = xor %239, %242 (hasExternalUses)
%244:i64 = shl %243, 17:i64
%245:i64 = lshr %243, 47:i64
%246:i64 = or %244, %245
infer %246

; *****
; For LLVM instruction:
;  %294 = xor i64 %293, %290
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240 (hasExternalUses)
%242:i64 = add %229, %241 (hasExternalUses)
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246 (hasExternalUses)
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250
%252:i64 = add %242, %251 (hasExternalUses)
%253:i64 = shl %251, 17:i64
%254:i64 = lshr %251, 47:i64
%255:i64 = or %253, %254
%256:i64 = xor %252, %255
infer %256

; *****
; For LLVM instruction:
;  %295 = shl i64 %290, 32
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240 (hasExternalUses)
%242:i64 = add %229, %241 (hasExternalUses)
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246 (hasExternalUses)
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250 (hasExternalUses)
%252:i64 = add %242, %251 (hasExternalUses)
%253:i64 = shl %252, 32:i64
infer %253

; *****
; For LLVM instruction:
;  %296 = lshr i64 %290, 32
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240 (hasExternalUses)
%242:i64 = add %229, %241 (hasExternalUses)
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246 (hasExternalUses)
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250 (hasExternalUses)
%252:i64 = add %242, %251 (hasExternalUses)
%253:i64 = lshr %252, 32:i64
infer %253

; *****
; For LLVM instruction:
;  %297 = or i64 %296, %295
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240 (hasExternalUses)
%242:i64 = add %229, %241 (hasExternalUses)
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246 (hasExternalUses)
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250 (hasExternalUses)
%252:i64 = add %242, %251 (hasExternalUses)
%253:i64 = shl %252, 32:i64
%254:i64 = lshr %252, 32:i64
%255:i64 = or %253, %254
infer %255

; *****
; For LLVM instruction:
;  %298 = xor i64 %285, %294
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237
%239:i64 = add %229, %238
%240:i64 = shl %239, 32:i64
%241:i64 = lshr %239, 32:i64
%242:i64 = or %240, %241
%243:i64 = shl %234, 32:i64
%244:i64 = lshr %234, 32:i64
%245:i64 = or %243, %244
%246:i64 = shl %228, 21:i64
%247:i64 = lshr %228, 43:i64
%248:i64 = or %246, %247
%249:i64 = xor %229, %248
%250:i64 = add %245, %249
%251:i64 = shl %249, 16:i64
%252:i64 = lshr %249, 48:i64
%253:i64 = or %251, %252
%254:i64 = xor %250, %253 (hasExternalUses)
%255:i64 = add %242, %254 (hasExternalUses)
%256:i64 = shl %238, 13:i64
%257:i64 = lshr %238, 51:i64
%258:i64 = or %256, %257
%259:i64 = xor %239, %258
%260:i64 = add %250, %259 (hasExternalUses)
%261:i64 = shl %259, 17:i64
%262:i64 = lshr %259, 47:i64
%263:i64 = or %261, %262
%264:i64 = xor %260, %263 (hasExternalUses)
%265:i64 = xor %255, %264
infer %265

; *****
; For LLVM instruction:
;  %299 = xor i64 %298, %297
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250
%252:i64 = add %242, %251
%253:i64 = shl %252, 32:i64
%254:i64 = lshr %252, 32:i64
%255:i64 = or %253, %254 (hasExternalUses)
%256:i64 = shl %247, 32:i64
%257:i64 = lshr %247, 32:i64
%258:i64 = or %256, %257
%259:i64 = shl %241, 16:i64
%260:i64 = lshr %241, 48:i64
%261:i64 = or %259, %260
%262:i64 = xor %242, %261 (hasExternalUses)
%263:i64 = add %258, %262 (hasExternalUses)
%264:i64 = shl %251, 17:i64
%265:i64 = lshr %251, 47:i64
%266:i64 = or %264, %265
%267:i64 = xor %252, %266 (hasExternalUses)
%268:i64 = xor %263, %267
%269:i64 = xor %255, %268
infer %269

; *****
; For LLVM instruction:
;  %300 = xor i64 %299, %289
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237
%239:i64 = add %229, %238
%240:i64 = shl %239, 32:i64
%241:i64 = lshr %239, 32:i64
%242:i64 = or %240, %241
%243:i64 = shl %234, 32:i64
%244:i64 = lshr %234, 32:i64
%245:i64 = or %243, %244
%246:i64 = shl %228, 21:i64
%247:i64 = lshr %228, 43:i64
%248:i64 = or %246, %247
%249:i64 = xor %229, %248
%250:i64 = add %245, %249
%251:i64 = shl %249, 16:i64
%252:i64 = lshr %249, 48:i64
%253:i64 = or %251, %252
%254:i64 = xor %250, %253
%255:i64 = add %242, %254 (hasExternalUses)
%256:i64 = shl %254, 21:i64
%257:i64 = lshr %254, 43:i64
%258:i64 = or %256, %257
%259:i64 = xor %255, %258 (hasExternalUses)
%260:i64 = shl %238, 13:i64
%261:i64 = lshr %238, 51:i64
%262:i64 = or %260, %261
%263:i64 = xor %239, %262
%264:i64 = add %250, %263
%265:i64 = shl %264, 32:i64
%266:i64 = lshr %264, 32:i64
%267:i64 = or %265, %266 (hasExternalUses)
%268:i64 = shl %263, 17:i64
%269:i64 = lshr %263, 47:i64
%270:i64 = or %268, %269
%271:i64 = xor %264, %270 (hasExternalUses)
%272:i64 = xor %255, %271
%273:i64 = xor %267, %272
%274:i64 = xor %259, %273
infer %274

; *****
; For LLVM instruction:
;  %302 = xor i64 %294, 221
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240 (hasExternalUses)
%242:i64 = add %229, %241 (hasExternalUses)
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246 (hasExternalUses)
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250
%252:i64 = add %242, %251 (hasExternalUses)
%253:i64 = shl %251, 17:i64
%254:i64 = lshr %251, 47:i64
%255:i64 = or %253, %254
%256:i64 = xor %252, %255 (hasExternalUses)
%257:i64 = xor 221:i64, %256
infer %257

; *****
; For LLVM instruction:
;  %303 = add i64 %302, %285
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237
%239:i64 = add %229, %238
%240:i64 = shl %239, 32:i64
%241:i64 = lshr %239, 32:i64
%242:i64 = or %240, %241
%243:i64 = shl %234, 32:i64
%244:i64 = lshr %234, 32:i64
%245:i64 = or %243, %244
%246:i64 = shl %228, 21:i64
%247:i64 = lshr %228, 43:i64
%248:i64 = or %246, %247
%249:i64 = xor %229, %248
%250:i64 = add %245, %249
%251:i64 = shl %249, 16:i64
%252:i64 = lshr %249, 48:i64
%253:i64 = or %251, %252
%254:i64 = xor %250, %253 (hasExternalUses)
%255:i64 = add %242, %254 (hasExternalUses)
%256:i64 = shl %238, 13:i64
%257:i64 = lshr %238, 51:i64
%258:i64 = or %256, %257
%259:i64 = xor %239, %258
%260:i64 = add %250, %259 (hasExternalUses)
%261:i64 = shl %259, 17:i64
%262:i64 = lshr %259, 47:i64
%263:i64 = or %261, %262
%264:i64 = xor %260, %263 (hasExternalUses)
%265:i64 = xor 221:i64, %264 (hasExternalUses)
%266:i64 = add %255, %265
infer %266

; *****
; For LLVM instruction:
;  %304 = shl i64 %302, 13
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240 (hasExternalUses)
%242:i64 = add %229, %241 (hasExternalUses)
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246 (hasExternalUses)
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250
%252:i64 = add %242, %251 (hasExternalUses)
%253:i64 = shl %251, 17:i64
%254:i64 = lshr %251, 47:i64
%255:i64 = or %253, %254
%256:i64 = xor %252, %255 (hasExternalUses)
%257:i64 = xor 221:i64, %256 (hasExternalUses)
%258:i64 = shl %257, 13:i64
infer %258

; *****
; For LLVM instruction:
;  %305 = lshr i64 %294, 51
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240 (hasExternalUses)
%242:i64 = add %229, %241 (hasExternalUses)
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246 (hasExternalUses)
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250
%252:i64 = add %242, %251 (hasExternalUses)
%253:i64 = shl %251, 17:i64
%254:i64 = lshr %251, 47:i64
%255:i64 = or %253, %254
%256:i64 = xor %252, %255 (hasExternalUses)
%257:i64 = lshr %256, 51:i64
infer %257

; *****
; For LLVM instruction:
;  %306 = or i64 %304, %305
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240 (hasExternalUses)
%242:i64 = add %229, %241 (hasExternalUses)
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246 (hasExternalUses)
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250
%252:i64 = add %242, %251 (hasExternalUses)
%253:i64 = shl %251, 17:i64
%254:i64 = lshr %251, 47:i64
%255:i64 = or %253, %254
%256:i64 = xor %252, %255 (hasExternalUses)
%257:i64 = xor 221:i64, %256 (hasExternalUses)
%258:i64 = shl %257, 13:i64
%259:i64 = lshr %256, 51:i64
%260:i64 = or %258, %259
infer %260

; *****
; For LLVM instruction:
;  %307 = xor i64 %306, %303
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237
%239:i64 = add %229, %238
%240:i64 = shl %239, 32:i64
%241:i64 = lshr %239, 32:i64
%242:i64 = or %240, %241
%243:i64 = shl %234, 32:i64
%244:i64 = lshr %234, 32:i64
%245:i64 = or %243, %244
%246:i64 = shl %228, 21:i64
%247:i64 = lshr %228, 43:i64
%248:i64 = or %246, %247
%249:i64 = xor %229, %248
%250:i64 = add %245, %249
%251:i64 = shl %249, 16:i64
%252:i64 = lshr %249, 48:i64
%253:i64 = or %251, %252
%254:i64 = xor %250, %253 (hasExternalUses)
%255:i64 = add %242, %254 (hasExternalUses)
%256:i64 = shl %238, 13:i64
%257:i64 = lshr %238, 51:i64
%258:i64 = or %256, %257
%259:i64 = xor %239, %258
%260:i64 = add %250, %259 (hasExternalUses)
%261:i64 = shl %259, 17:i64
%262:i64 = lshr %259, 47:i64
%263:i64 = or %261, %262
%264:i64 = xor %260, %263 (hasExternalUses)
%265:i64 = xor 221:i64, %264
%266:i64 = add %255, %265 (hasExternalUses)
%267:i64 = shl %265, 13:i64
%268:i64 = lshr %264, 51:i64
%269:i64 = or %267, %268
%270:i64 = xor %266, %269
infer %270

; *****
; For LLVM instruction:
;  %308 = shl i64 %303, 32
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237
%239:i64 = add %229, %238
%240:i64 = shl %239, 32:i64
%241:i64 = lshr %239, 32:i64
%242:i64 = or %240, %241
%243:i64 = shl %234, 32:i64
%244:i64 = lshr %234, 32:i64
%245:i64 = or %243, %244
%246:i64 = shl %228, 21:i64
%247:i64 = lshr %228, 43:i64
%248:i64 = or %246, %247
%249:i64 = xor %229, %248
%250:i64 = add %245, %249
%251:i64 = shl %249, 16:i64
%252:i64 = lshr %249, 48:i64
%253:i64 = or %251, %252
%254:i64 = xor %250, %253 (hasExternalUses)
%255:i64 = add %242, %254 (hasExternalUses)
%256:i64 = shl %238, 13:i64
%257:i64 = lshr %238, 51:i64
%258:i64 = or %256, %257
%259:i64 = xor %239, %258
%260:i64 = add %250, %259 (hasExternalUses)
%261:i64 = shl %259, 17:i64
%262:i64 = lshr %259, 47:i64
%263:i64 = or %261, %262
%264:i64 = xor %260, %263 (hasExternalUses)
%265:i64 = xor 221:i64, %264 (hasExternalUses)
%266:i64 = add %255, %265 (hasExternalUses)
%267:i64 = shl %266, 32:i64
infer %267

; *****
; For LLVM instruction:
;  %309 = lshr i64 %303, 32
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237
%239:i64 = add %229, %238
%240:i64 = shl %239, 32:i64
%241:i64 = lshr %239, 32:i64
%242:i64 = or %240, %241
%243:i64 = shl %234, 32:i64
%244:i64 = lshr %234, 32:i64
%245:i64 = or %243, %244
%246:i64 = shl %228, 21:i64
%247:i64 = lshr %228, 43:i64
%248:i64 = or %246, %247
%249:i64 = xor %229, %248
%250:i64 = add %245, %249
%251:i64 = shl %249, 16:i64
%252:i64 = lshr %249, 48:i64
%253:i64 = or %251, %252
%254:i64 = xor %250, %253 (hasExternalUses)
%255:i64 = add %242, %254 (hasExternalUses)
%256:i64 = shl %238, 13:i64
%257:i64 = lshr %238, 51:i64
%258:i64 = or %256, %257
%259:i64 = xor %239, %258
%260:i64 = add %250, %259 (hasExternalUses)
%261:i64 = shl %259, 17:i64
%262:i64 = lshr %259, 47:i64
%263:i64 = or %261, %262
%264:i64 = xor %260, %263 (hasExternalUses)
%265:i64 = xor 221:i64, %264 (hasExternalUses)
%266:i64 = add %255, %265 (hasExternalUses)
%267:i64 = lshr %266, 32:i64
infer %267

; *****
; For LLVM instruction:
;  %310 = or i64 %309, %308
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237
%239:i64 = add %229, %238
%240:i64 = shl %239, 32:i64
%241:i64 = lshr %239, 32:i64
%242:i64 = or %240, %241
%243:i64 = shl %234, 32:i64
%244:i64 = lshr %234, 32:i64
%245:i64 = or %243, %244
%246:i64 = shl %228, 21:i64
%247:i64 = lshr %228, 43:i64
%248:i64 = or %246, %247
%249:i64 = xor %229, %248
%250:i64 = add %245, %249
%251:i64 = shl %249, 16:i64
%252:i64 = lshr %249, 48:i64
%253:i64 = or %251, %252
%254:i64 = xor %250, %253 (hasExternalUses)
%255:i64 = add %242, %254 (hasExternalUses)
%256:i64 = shl %238, 13:i64
%257:i64 = lshr %238, 51:i64
%258:i64 = or %256, %257
%259:i64 = xor %239, %258
%260:i64 = add %250, %259 (hasExternalUses)
%261:i64 = shl %259, 17:i64
%262:i64 = lshr %259, 47:i64
%263:i64 = or %261, %262
%264:i64 = xor %260, %263 (hasExternalUses)
%265:i64 = xor 221:i64, %264 (hasExternalUses)
%266:i64 = add %255, %265 (hasExternalUses)
%267:i64 = shl %266, 32:i64
%268:i64 = lshr %266, 32:i64
%269:i64 = or %267, %268
infer %269

; *****
; For LLVM instruction:
;  %311 = add i64 %289, %297
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250 (hasExternalUses)
%252:i64 = add %242, %251 (hasExternalUses)
%253:i64 = shl %252, 32:i64
%254:i64 = lshr %252, 32:i64
%255:i64 = or %253, %254 (hasExternalUses)
%256:i64 = shl %247, 32:i64
%257:i64 = lshr %247, 32:i64
%258:i64 = or %256, %257
%259:i64 = shl %241, 16:i64
%260:i64 = lshr %241, 48:i64
%261:i64 = or %259, %260
%262:i64 = xor %242, %261
%263:i64 = add %258, %262 (hasExternalUses)
%264:i64 = shl %262, 21:i64
%265:i64 = lshr %262, 43:i64
%266:i64 = or %264, %265
%267:i64 = xor %263, %266 (hasExternalUses)
%268:i64 = add %255, %267
infer %268

; *****
; For LLVM instruction:
;  %312 = shl i64 %289, 16
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237 (hasExternalUses)
%239:i64 = add %229, %238 (hasExternalUses)
%240:i64 = shl %239, 32:i64
%241:i64 = lshr %239, 32:i64
%242:i64 = or %240, %241
%243:i64 = shl %234, 32:i64
%244:i64 = lshr %234, 32:i64
%245:i64 = or %243, %244
%246:i64 = shl %228, 21:i64
%247:i64 = lshr %228, 43:i64
%248:i64 = or %246, %247
%249:i64 = xor %229, %248
%250:i64 = add %245, %249 (hasExternalUses)
%251:i64 = shl %249, 16:i64
%252:i64 = lshr %249, 48:i64
%253:i64 = or %251, %252
%254:i64 = xor %250, %253
%255:i64 = add %242, %254 (hasExternalUses)
%256:i64 = shl %254, 21:i64
%257:i64 = lshr %254, 43:i64
%258:i64 = or %256, %257
%259:i64 = xor %255, %258 (hasExternalUses)
%260:i64 = shl %259, 16:i64
infer %260

; *****
; For LLVM instruction:
;  %313 = lshr i64 %289, 48
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237 (hasExternalUses)
%239:i64 = add %229, %238 (hasExternalUses)
%240:i64 = shl %239, 32:i64
%241:i64 = lshr %239, 32:i64
%242:i64 = or %240, %241
%243:i64 = shl %234, 32:i64
%244:i64 = lshr %234, 32:i64
%245:i64 = or %243, %244
%246:i64 = shl %228, 21:i64
%247:i64 = lshr %228, 43:i64
%248:i64 = or %246, %247
%249:i64 = xor %229, %248
%250:i64 = add %245, %249 (hasExternalUses)
%251:i64 = shl %249, 16:i64
%252:i64 = lshr %249, 48:i64
%253:i64 = or %251, %252
%254:i64 = xor %250, %253
%255:i64 = add %242, %254 (hasExternalUses)
%256:i64 = shl %254, 21:i64
%257:i64 = lshr %254, 43:i64
%258:i64 = or %256, %257
%259:i64 = xor %255, %258 (hasExternalUses)
%260:i64 = lshr %259, 48:i64
infer %260

; *****
; For LLVM instruction:
;  %314 = or i64 %313, %312
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237 (hasExternalUses)
%239:i64 = add %229, %238 (hasExternalUses)
%240:i64 = shl %239, 32:i64
%241:i64 = lshr %239, 32:i64
%242:i64 = or %240, %241
%243:i64 = shl %234, 32:i64
%244:i64 = lshr %234, 32:i64
%245:i64 = or %243, %244
%246:i64 = shl %228, 21:i64
%247:i64 = lshr %228, 43:i64
%248:i64 = or %246, %247
%249:i64 = xor %229, %248
%250:i64 = add %245, %249 (hasExternalUses)
%251:i64 = shl %249, 16:i64
%252:i64 = lshr %249, 48:i64
%253:i64 = or %251, %252
%254:i64 = xor %250, %253
%255:i64 = add %242, %254 (hasExternalUses)
%256:i64 = shl %254, 21:i64
%257:i64 = lshr %254, 43:i64
%258:i64 = or %256, %257
%259:i64 = xor %255, %258 (hasExternalUses)
%260:i64 = shl %259, 16:i64
%261:i64 = lshr %259, 48:i64
%262:i64 = or %260, %261
infer %262

; *****
; For LLVM instruction:
;  %315 = xor i64 %314, %311
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250 (hasExternalUses)
%252:i64 = add %242, %251 (hasExternalUses)
%253:i64 = shl %252, 32:i64
%254:i64 = lshr %252, 32:i64
%255:i64 = or %253, %254 (hasExternalUses)
%256:i64 = shl %247, 32:i64
%257:i64 = lshr %247, 32:i64
%258:i64 = or %256, %257
%259:i64 = shl %241, 16:i64
%260:i64 = lshr %241, 48:i64
%261:i64 = or %259, %260
%262:i64 = xor %242, %261
%263:i64 = add %258, %262 (hasExternalUses)
%264:i64 = shl %262, 21:i64
%265:i64 = lshr %262, 43:i64
%266:i64 = or %264, %265
%267:i64 = xor %263, %266 (hasExternalUses)
%268:i64 = add %255, %267 (hasExternalUses)
%269:i64 = shl %267, 16:i64
%270:i64 = lshr %267, 48:i64
%271:i64 = or %269, %270
%272:i64 = xor %268, %271
infer %272

; *****
; For LLVM instruction:
;  %316 = add i64 %315, %310
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237
%239:i64 = add %229, %238
%240:i64 = shl %239, 32:i64
%241:i64 = lshr %239, 32:i64
%242:i64 = or %240, %241
%243:i64 = shl %234, 32:i64
%244:i64 = lshr %234, 32:i64
%245:i64 = or %243, %244
%246:i64 = shl %228, 21:i64
%247:i64 = lshr %228, 43:i64
%248:i64 = or %246, %247
%249:i64 = xor %229, %248
%250:i64 = add %245, %249
%251:i64 = shl %249, 16:i64
%252:i64 = lshr %249, 48:i64
%253:i64 = or %251, %252
%254:i64 = xor %250, %253
%255:i64 = add %242, %254 (hasExternalUses)
%256:i64 = shl %238, 13:i64
%257:i64 = lshr %238, 51:i64
%258:i64 = or %256, %257
%259:i64 = xor %239, %258
%260:i64 = add %250, %259
%261:i64 = shl %259, 17:i64
%262:i64 = lshr %259, 47:i64
%263:i64 = or %261, %262
%264:i64 = xor %260, %263 (hasExternalUses)
%265:i64 = xor 221:i64, %264 (hasExternalUses)
%266:i64 = add %255, %265 (hasExternalUses)
%267:i64 = shl %266, 32:i64
%268:i64 = lshr %266, 32:i64
%269:i64 = or %267, %268
%270:i64 = shl %260, 32:i64
%271:i64 = lshr %260, 32:i64
%272:i64 = or %270, %271 (hasExternalUses)
%273:i64 = shl %254, 21:i64
%274:i64 = lshr %254, 43:i64
%275:i64 = or %273, %274
%276:i64 = xor %255, %275 (hasExternalUses)
%277:i64 = add %272, %276 (hasExternalUses)
%278:i64 = shl %276, 16:i64
%279:i64 = lshr %276, 48:i64
%280:i64 = or %278, %279
%281:i64 = xor %277, %280 (hasExternalUses)
%282:i64 = add %269, %281
infer %282

; *****
; For LLVM instruction:
;  %317 = shl i64 %315, 21
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250 (hasExternalUses)
%252:i64 = add %242, %251 (hasExternalUses)
%253:i64 = shl %252, 32:i64
%254:i64 = lshr %252, 32:i64
%255:i64 = or %253, %254 (hasExternalUses)
%256:i64 = shl %247, 32:i64
%257:i64 = lshr %247, 32:i64
%258:i64 = or %256, %257
%259:i64 = shl %241, 16:i64
%260:i64 = lshr %241, 48:i64
%261:i64 = or %259, %260
%262:i64 = xor %242, %261
%263:i64 = add %258, %262 (hasExternalUses)
%264:i64 = shl %262, 21:i64
%265:i64 = lshr %262, 43:i64
%266:i64 = or %264, %265
%267:i64 = xor %263, %266 (hasExternalUses)
%268:i64 = add %255, %267 (hasExternalUses)
%269:i64 = shl %267, 16:i64
%270:i64 = lshr %267, 48:i64
%271:i64 = or %269, %270
%272:i64 = xor %268, %271 (hasExternalUses)
%273:i64 = shl %272, 21:i64
infer %273

; *****
; For LLVM instruction:
;  %318 = lshr i64 %315, 43
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250 (hasExternalUses)
%252:i64 = add %242, %251 (hasExternalUses)
%253:i64 = shl %252, 32:i64
%254:i64 = lshr %252, 32:i64
%255:i64 = or %253, %254 (hasExternalUses)
%256:i64 = shl %247, 32:i64
%257:i64 = lshr %247, 32:i64
%258:i64 = or %256, %257
%259:i64 = shl %241, 16:i64
%260:i64 = lshr %241, 48:i64
%261:i64 = or %259, %260
%262:i64 = xor %242, %261
%263:i64 = add %258, %262 (hasExternalUses)
%264:i64 = shl %262, 21:i64
%265:i64 = lshr %262, 43:i64
%266:i64 = or %264, %265
%267:i64 = xor %263, %266 (hasExternalUses)
%268:i64 = add %255, %267 (hasExternalUses)
%269:i64 = shl %267, 16:i64
%270:i64 = lshr %267, 48:i64
%271:i64 = or %269, %270
%272:i64 = xor %268, %271 (hasExternalUses)
%273:i64 = lshr %272, 43:i64
infer %273

; *****
; For LLVM instruction:
;  %319 = or i64 %318, %317
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250 (hasExternalUses)
%252:i64 = add %242, %251 (hasExternalUses)
%253:i64 = shl %252, 32:i64
%254:i64 = lshr %252, 32:i64
%255:i64 = or %253, %254 (hasExternalUses)
%256:i64 = shl %247, 32:i64
%257:i64 = lshr %247, 32:i64
%258:i64 = or %256, %257
%259:i64 = shl %241, 16:i64
%260:i64 = lshr %241, 48:i64
%261:i64 = or %259, %260
%262:i64 = xor %242, %261
%263:i64 = add %258, %262 (hasExternalUses)
%264:i64 = shl %262, 21:i64
%265:i64 = lshr %262, 43:i64
%266:i64 = or %264, %265
%267:i64 = xor %263, %266 (hasExternalUses)
%268:i64 = add %255, %267 (hasExternalUses)
%269:i64 = shl %267, 16:i64
%270:i64 = lshr %267, 48:i64
%271:i64 = or %269, %270
%272:i64 = xor %268, %271 (hasExternalUses)
%273:i64 = shl %272, 21:i64
%274:i64 = lshr %272, 43:i64
%275:i64 = or %273, %274
infer %275

; *****
; For LLVM instruction:
;  %320 = xor i64 %319, %316
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237
%239:i64 = add %229, %238
%240:i64 = shl %239, 32:i64
%241:i64 = lshr %239, 32:i64
%242:i64 = or %240, %241
%243:i64 = shl %234, 32:i64
%244:i64 = lshr %234, 32:i64
%245:i64 = or %243, %244
%246:i64 = shl %228, 21:i64
%247:i64 = lshr %228, 43:i64
%248:i64 = or %246, %247
%249:i64 = xor %229, %248
%250:i64 = add %245, %249
%251:i64 = shl %249, 16:i64
%252:i64 = lshr %249, 48:i64
%253:i64 = or %251, %252
%254:i64 = xor %250, %253
%255:i64 = add %242, %254 (hasExternalUses)
%256:i64 = shl %238, 13:i64
%257:i64 = lshr %238, 51:i64
%258:i64 = or %256, %257
%259:i64 = xor %239, %258
%260:i64 = add %250, %259
%261:i64 = shl %259, 17:i64
%262:i64 = lshr %259, 47:i64
%263:i64 = or %261, %262
%264:i64 = xor %260, %263 (hasExternalUses)
%265:i64 = xor 221:i64, %264 (hasExternalUses)
%266:i64 = add %255, %265 (hasExternalUses)
%267:i64 = shl %266, 32:i64
%268:i64 = lshr %266, 32:i64
%269:i64 = or %267, %268
%270:i64 = shl %260, 32:i64
%271:i64 = lshr %260, 32:i64
%272:i64 = or %270, %271 (hasExternalUses)
%273:i64 = shl %254, 21:i64
%274:i64 = lshr %254, 43:i64
%275:i64 = or %273, %274
%276:i64 = xor %255, %275 (hasExternalUses)
%277:i64 = add %272, %276 (hasExternalUses)
%278:i64 = shl %276, 16:i64
%279:i64 = lshr %276, 48:i64
%280:i64 = or %278, %279
%281:i64 = xor %277, %280
%282:i64 = add %269, %281 (hasExternalUses)
%283:i64 = shl %281, 21:i64
%284:i64 = lshr %281, 43:i64
%285:i64 = or %283, %284
%286:i64 = xor %282, %285
infer %286

; *****
; For LLVM instruction:
;  %321 = add i64 %307, %311
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250
%252:i64 = add %242, %251
%253:i64 = shl %252, 32:i64
%254:i64 = lshr %252, 32:i64
%255:i64 = or %253, %254 (hasExternalUses)
%256:i64 = shl %247, 32:i64
%257:i64 = lshr %247, 32:i64
%258:i64 = or %256, %257
%259:i64 = shl %241, 16:i64
%260:i64 = lshr %241, 48:i64
%261:i64 = or %259, %260
%262:i64 = xor %242, %261
%263:i64 = add %258, %262 (hasExternalUses)
%264:i64 = shl %262, 21:i64
%265:i64 = lshr %262, 43:i64
%266:i64 = or %264, %265
%267:i64 = xor %263, %266 (hasExternalUses)
%268:i64 = add %255, %267 (hasExternalUses)
%269:i64 = shl %251, 17:i64
%270:i64 = lshr %251, 47:i64
%271:i64 = or %269, %270
%272:i64 = xor %252, %271 (hasExternalUses)
%273:i64 = xor 221:i64, %272
%274:i64 = add %263, %273 (hasExternalUses)
%275:i64 = shl %273, 13:i64
%276:i64 = lshr %272, 51:i64
%277:i64 = or %275, %276
%278:i64 = xor %274, %277 (hasExternalUses)
%279:i64 = add %268, %278
infer %279

; *****
; For LLVM instruction:
;  %322 = shl i64 %307, 17
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237
%239:i64 = add %229, %238
%240:i64 = shl %239, 32:i64
%241:i64 = lshr %239, 32:i64
%242:i64 = or %240, %241
%243:i64 = shl %234, 32:i64
%244:i64 = lshr %234, 32:i64
%245:i64 = or %243, %244
%246:i64 = shl %228, 21:i64
%247:i64 = lshr %228, 43:i64
%248:i64 = or %246, %247
%249:i64 = xor %229, %248
%250:i64 = add %245, %249
%251:i64 = shl %249, 16:i64
%252:i64 = lshr %249, 48:i64
%253:i64 = or %251, %252
%254:i64 = xor %250, %253 (hasExternalUses)
%255:i64 = add %242, %254 (hasExternalUses)
%256:i64 = shl %238, 13:i64
%257:i64 = lshr %238, 51:i64
%258:i64 = or %256, %257
%259:i64 = xor %239, %258
%260:i64 = add %250, %259 (hasExternalUses)
%261:i64 = shl %259, 17:i64
%262:i64 = lshr %259, 47:i64
%263:i64 = or %261, %262
%264:i64 = xor %260, %263 (hasExternalUses)
%265:i64 = xor 221:i64, %264
%266:i64 = add %255, %265 (hasExternalUses)
%267:i64 = shl %265, 13:i64
%268:i64 = lshr %264, 51:i64
%269:i64 = or %267, %268
%270:i64 = xor %266, %269 (hasExternalUses)
%271:i64 = shl %270, 17:i64
infer %271

; *****
; For LLVM instruction:
;  %323 = lshr i64 %307, 47
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237
%239:i64 = add %229, %238
%240:i64 = shl %239, 32:i64
%241:i64 = lshr %239, 32:i64
%242:i64 = or %240, %241
%243:i64 = shl %234, 32:i64
%244:i64 = lshr %234, 32:i64
%245:i64 = or %243, %244
%246:i64 = shl %228, 21:i64
%247:i64 = lshr %228, 43:i64
%248:i64 = or %246, %247
%249:i64 = xor %229, %248
%250:i64 = add %245, %249
%251:i64 = shl %249, 16:i64
%252:i64 = lshr %249, 48:i64
%253:i64 = or %251, %252
%254:i64 = xor %250, %253 (hasExternalUses)
%255:i64 = add %242, %254 (hasExternalUses)
%256:i64 = shl %238, 13:i64
%257:i64 = lshr %238, 51:i64
%258:i64 = or %256, %257
%259:i64 = xor %239, %258
%260:i64 = add %250, %259 (hasExternalUses)
%261:i64 = shl %259, 17:i64
%262:i64 = lshr %259, 47:i64
%263:i64 = or %261, %262
%264:i64 = xor %260, %263 (hasExternalUses)
%265:i64 = xor 221:i64, %264
%266:i64 = add %255, %265 (hasExternalUses)
%267:i64 = shl %265, 13:i64
%268:i64 = lshr %264, 51:i64
%269:i64 = or %267, %268
%270:i64 = xor %266, %269 (hasExternalUses)
%271:i64 = lshr %270, 47:i64
infer %271

; *****
; For LLVM instruction:
;  %324 = or i64 %323, %322
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237
%239:i64 = add %229, %238
%240:i64 = shl %239, 32:i64
%241:i64 = lshr %239, 32:i64
%242:i64 = or %240, %241
%243:i64 = shl %234, 32:i64
%244:i64 = lshr %234, 32:i64
%245:i64 = or %243, %244
%246:i64 = shl %228, 21:i64
%247:i64 = lshr %228, 43:i64
%248:i64 = or %246, %247
%249:i64 = xor %229, %248
%250:i64 = add %245, %249
%251:i64 = shl %249, 16:i64
%252:i64 = lshr %249, 48:i64
%253:i64 = or %251, %252
%254:i64 = xor %250, %253 (hasExternalUses)
%255:i64 = add %242, %254 (hasExternalUses)
%256:i64 = shl %238, 13:i64
%257:i64 = lshr %238, 51:i64
%258:i64 = or %256, %257
%259:i64 = xor %239, %258
%260:i64 = add %250, %259 (hasExternalUses)
%261:i64 = shl %259, 17:i64
%262:i64 = lshr %259, 47:i64
%263:i64 = or %261, %262
%264:i64 = xor %260, %263 (hasExternalUses)
%265:i64 = xor 221:i64, %264
%266:i64 = add %255, %265 (hasExternalUses)
%267:i64 = shl %265, 13:i64
%268:i64 = lshr %264, 51:i64
%269:i64 = or %267, %268
%270:i64 = xor %266, %269 (hasExternalUses)
%271:i64 = shl %270, 17:i64
%272:i64 = lshr %270, 47:i64
%273:i64 = or %271, %272
infer %273

; *****
; For LLVM instruction:
;  %325 = xor i64 %324, %321
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250
%252:i64 = add %242, %251
%253:i64 = shl %252, 32:i64
%254:i64 = lshr %252, 32:i64
%255:i64 = or %253, %254 (hasExternalUses)
%256:i64 = shl %247, 32:i64
%257:i64 = lshr %247, 32:i64
%258:i64 = or %256, %257
%259:i64 = shl %241, 16:i64
%260:i64 = lshr %241, 48:i64
%261:i64 = or %259, %260
%262:i64 = xor %242, %261
%263:i64 = add %258, %262 (hasExternalUses)
%264:i64 = shl %262, 21:i64
%265:i64 = lshr %262, 43:i64
%266:i64 = or %264, %265
%267:i64 = xor %263, %266 (hasExternalUses)
%268:i64 = add %255, %267 (hasExternalUses)
%269:i64 = shl %251, 17:i64
%270:i64 = lshr %251, 47:i64
%271:i64 = or %269, %270
%272:i64 = xor %252, %271 (hasExternalUses)
%273:i64 = xor 221:i64, %272
%274:i64 = add %263, %273 (hasExternalUses)
%275:i64 = shl %273, 13:i64
%276:i64 = lshr %272, 51:i64
%277:i64 = or %275, %276
%278:i64 = xor %274, %277
%279:i64 = add %268, %278 (hasExternalUses)
%280:i64 = shl %278, 17:i64
%281:i64 = lshr %278, 47:i64
%282:i64 = or %280, %281
%283:i64 = xor %279, %282
infer %283

; *****
; For LLVM instruction:
;  %326 = shl i64 %321, 32
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250
%252:i64 = add %242, %251
%253:i64 = shl %252, 32:i64
%254:i64 = lshr %252, 32:i64
%255:i64 = or %253, %254 (hasExternalUses)
%256:i64 = shl %247, 32:i64
%257:i64 = lshr %247, 32:i64
%258:i64 = or %256, %257
%259:i64 = shl %241, 16:i64
%260:i64 = lshr %241, 48:i64
%261:i64 = or %259, %260
%262:i64 = xor %242, %261
%263:i64 = add %258, %262 (hasExternalUses)
%264:i64 = shl %262, 21:i64
%265:i64 = lshr %262, 43:i64
%266:i64 = or %264, %265
%267:i64 = xor %263, %266 (hasExternalUses)
%268:i64 = add %255, %267 (hasExternalUses)
%269:i64 = shl %251, 17:i64
%270:i64 = lshr %251, 47:i64
%271:i64 = or %269, %270
%272:i64 = xor %252, %271 (hasExternalUses)
%273:i64 = xor 221:i64, %272
%274:i64 = add %263, %273 (hasExternalUses)
%275:i64 = shl %273, 13:i64
%276:i64 = lshr %272, 51:i64
%277:i64 = or %275, %276
%278:i64 = xor %274, %277 (hasExternalUses)
%279:i64 = add %268, %278 (hasExternalUses)
%280:i64 = shl %279, 32:i64
infer %280

; *****
; For LLVM instruction:
;  %327 = lshr i64 %321, 32
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250
%252:i64 = add %242, %251
%253:i64 = shl %252, 32:i64
%254:i64 = lshr %252, 32:i64
%255:i64 = or %253, %254 (hasExternalUses)
%256:i64 = shl %247, 32:i64
%257:i64 = lshr %247, 32:i64
%258:i64 = or %256, %257
%259:i64 = shl %241, 16:i64
%260:i64 = lshr %241, 48:i64
%261:i64 = or %259, %260
%262:i64 = xor %242, %261
%263:i64 = add %258, %262 (hasExternalUses)
%264:i64 = shl %262, 21:i64
%265:i64 = lshr %262, 43:i64
%266:i64 = or %264, %265
%267:i64 = xor %263, %266 (hasExternalUses)
%268:i64 = add %255, %267 (hasExternalUses)
%269:i64 = shl %251, 17:i64
%270:i64 = lshr %251, 47:i64
%271:i64 = or %269, %270
%272:i64 = xor %252, %271 (hasExternalUses)
%273:i64 = xor 221:i64, %272
%274:i64 = add %263, %273 (hasExternalUses)
%275:i64 = shl %273, 13:i64
%276:i64 = lshr %272, 51:i64
%277:i64 = or %275, %276
%278:i64 = xor %274, %277 (hasExternalUses)
%279:i64 = add %268, %278 (hasExternalUses)
%280:i64 = lshr %279, 32:i64
infer %280

; *****
; For LLVM instruction:
;  %328 = or i64 %327, %326
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250
%252:i64 = add %242, %251
%253:i64 = shl %252, 32:i64
%254:i64 = lshr %252, 32:i64
%255:i64 = or %253, %254 (hasExternalUses)
%256:i64 = shl %247, 32:i64
%257:i64 = lshr %247, 32:i64
%258:i64 = or %256, %257
%259:i64 = shl %241, 16:i64
%260:i64 = lshr %241, 48:i64
%261:i64 = or %259, %260
%262:i64 = xor %242, %261
%263:i64 = add %258, %262 (hasExternalUses)
%264:i64 = shl %262, 21:i64
%265:i64 = lshr %262, 43:i64
%266:i64 = or %264, %265
%267:i64 = xor %263, %266 (hasExternalUses)
%268:i64 = add %255, %267 (hasExternalUses)
%269:i64 = shl %251, 17:i64
%270:i64 = lshr %251, 47:i64
%271:i64 = or %269, %270
%272:i64 = xor %252, %271 (hasExternalUses)
%273:i64 = xor 221:i64, %272
%274:i64 = add %263, %273 (hasExternalUses)
%275:i64 = shl %273, 13:i64
%276:i64 = lshr %272, 51:i64
%277:i64 = or %275, %276
%278:i64 = xor %274, %277 (hasExternalUses)
%279:i64 = add %268, %278 (hasExternalUses)
%280:i64 = shl %279, 32:i64
%281:i64 = lshr %279, 32:i64
%282:i64 = or %280, %281
infer %282

; *****
; For LLVM instruction:
;  %329 = add i64 %325, %316
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237
%239:i64 = add %229, %238
%240:i64 = shl %239, 32:i64
%241:i64 = lshr %239, 32:i64
%242:i64 = or %240, %241
%243:i64 = shl %234, 32:i64
%244:i64 = lshr %234, 32:i64
%245:i64 = or %243, %244
%246:i64 = shl %228, 21:i64
%247:i64 = lshr %228, 43:i64
%248:i64 = or %246, %247
%249:i64 = xor %229, %248
%250:i64 = add %245, %249
%251:i64 = shl %249, 16:i64
%252:i64 = lshr %249, 48:i64
%253:i64 = or %251, %252
%254:i64 = xor %250, %253
%255:i64 = add %242, %254 (hasExternalUses)
%256:i64 = shl %238, 13:i64
%257:i64 = lshr %238, 51:i64
%258:i64 = or %256, %257
%259:i64 = xor %239, %258
%260:i64 = add %250, %259
%261:i64 = shl %259, 17:i64
%262:i64 = lshr %259, 47:i64
%263:i64 = or %261, %262
%264:i64 = xor %260, %263 (hasExternalUses)
%265:i64 = xor 221:i64, %264
%266:i64 = add %255, %265
%267:i64 = shl %266, 32:i64
%268:i64 = lshr %266, 32:i64
%269:i64 = or %267, %268
%270:i64 = shl %260, 32:i64
%271:i64 = lshr %260, 32:i64
%272:i64 = or %270, %271 (hasExternalUses)
%273:i64 = shl %254, 21:i64
%274:i64 = lshr %254, 43:i64
%275:i64 = or %273, %274
%276:i64 = xor %255, %275 (hasExternalUses)
%277:i64 = add %272, %276
%278:i64 = shl %276, 16:i64
%279:i64 = lshr %276, 48:i64
%280:i64 = or %278, %279
%281:i64 = xor %277, %280 (hasExternalUses)
%282:i64 = add %269, %281 (hasExternalUses)
%283:i64 = shl %265, 13:i64
%284:i64 = lshr %264, 51:i64
%285:i64 = or %283, %284
%286:i64 = xor %266, %285
%287:i64 = add %277, %286 (hasExternalUses)
%288:i64 = shl %286, 17:i64
%289:i64 = lshr %286, 47:i64
%290:i64 = or %288, %289
%291:i64 = xor %287, %290 (hasExternalUses)
%292:i64 = add %282, %291
infer %292

; *****
; For LLVM instruction:
;  %330 = shl i64 %325, 13
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250
%252:i64 = add %242, %251
%253:i64 = shl %252, 32:i64
%254:i64 = lshr %252, 32:i64
%255:i64 = or %253, %254 (hasExternalUses)
%256:i64 = shl %247, 32:i64
%257:i64 = lshr %247, 32:i64
%258:i64 = or %256, %257
%259:i64 = shl %241, 16:i64
%260:i64 = lshr %241, 48:i64
%261:i64 = or %259, %260
%262:i64 = xor %242, %261
%263:i64 = add %258, %262 (hasExternalUses)
%264:i64 = shl %262, 21:i64
%265:i64 = lshr %262, 43:i64
%266:i64 = or %264, %265
%267:i64 = xor %263, %266 (hasExternalUses)
%268:i64 = add %255, %267 (hasExternalUses)
%269:i64 = shl %251, 17:i64
%270:i64 = lshr %251, 47:i64
%271:i64 = or %269, %270
%272:i64 = xor %252, %271 (hasExternalUses)
%273:i64 = xor 221:i64, %272
%274:i64 = add %263, %273 (hasExternalUses)
%275:i64 = shl %273, 13:i64
%276:i64 = lshr %272, 51:i64
%277:i64 = or %275, %276
%278:i64 = xor %274, %277
%279:i64 = add %268, %278 (hasExternalUses)
%280:i64 = shl %278, 17:i64
%281:i64 = lshr %278, 47:i64
%282:i64 = or %280, %281
%283:i64 = xor %279, %282 (hasExternalUses)
%284:i64 = shl %283, 13:i64
infer %284

; *****
; For LLVM instruction:
;  %331 = lshr i64 %325, 51
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250
%252:i64 = add %242, %251
%253:i64 = shl %252, 32:i64
%254:i64 = lshr %252, 32:i64
%255:i64 = or %253, %254 (hasExternalUses)
%256:i64 = shl %247, 32:i64
%257:i64 = lshr %247, 32:i64
%258:i64 = or %256, %257
%259:i64 = shl %241, 16:i64
%260:i64 = lshr %241, 48:i64
%261:i64 = or %259, %260
%262:i64 = xor %242, %261
%263:i64 = add %258, %262 (hasExternalUses)
%264:i64 = shl %262, 21:i64
%265:i64 = lshr %262, 43:i64
%266:i64 = or %264, %265
%267:i64 = xor %263, %266 (hasExternalUses)
%268:i64 = add %255, %267 (hasExternalUses)
%269:i64 = shl %251, 17:i64
%270:i64 = lshr %251, 47:i64
%271:i64 = or %269, %270
%272:i64 = xor %252, %271 (hasExternalUses)
%273:i64 = xor 221:i64, %272
%274:i64 = add %263, %273 (hasExternalUses)
%275:i64 = shl %273, 13:i64
%276:i64 = lshr %272, 51:i64
%277:i64 = or %275, %276
%278:i64 = xor %274, %277
%279:i64 = add %268, %278 (hasExternalUses)
%280:i64 = shl %278, 17:i64
%281:i64 = lshr %278, 47:i64
%282:i64 = or %280, %281
%283:i64 = xor %279, %282 (hasExternalUses)
%284:i64 = lshr %283, 51:i64
infer %284

; *****
; For LLVM instruction:
;  %332 = or i64 %331, %330
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250
%252:i64 = add %242, %251
%253:i64 = shl %252, 32:i64
%254:i64 = lshr %252, 32:i64
%255:i64 = or %253, %254 (hasExternalUses)
%256:i64 = shl %247, 32:i64
%257:i64 = lshr %247, 32:i64
%258:i64 = or %256, %257
%259:i64 = shl %241, 16:i64
%260:i64 = lshr %241, 48:i64
%261:i64 = or %259, %260
%262:i64 = xor %242, %261
%263:i64 = add %258, %262 (hasExternalUses)
%264:i64 = shl %262, 21:i64
%265:i64 = lshr %262, 43:i64
%266:i64 = or %264, %265
%267:i64 = xor %263, %266 (hasExternalUses)
%268:i64 = add %255, %267 (hasExternalUses)
%269:i64 = shl %251, 17:i64
%270:i64 = lshr %251, 47:i64
%271:i64 = or %269, %270
%272:i64 = xor %252, %271 (hasExternalUses)
%273:i64 = xor 221:i64, %272
%274:i64 = add %263, %273 (hasExternalUses)
%275:i64 = shl %273, 13:i64
%276:i64 = lshr %272, 51:i64
%277:i64 = or %275, %276
%278:i64 = xor %274, %277
%279:i64 = add %268, %278 (hasExternalUses)
%280:i64 = shl %278, 17:i64
%281:i64 = lshr %278, 47:i64
%282:i64 = or %280, %281
%283:i64 = xor %279, %282 (hasExternalUses)
%284:i64 = shl %283, 13:i64
%285:i64 = lshr %283, 51:i64
%286:i64 = or %284, %285
infer %286

; *****
; For LLVM instruction:
;  %333 = xor i64 %332, %329
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237
%239:i64 = add %229, %238
%240:i64 = shl %239, 32:i64
%241:i64 = lshr %239, 32:i64
%242:i64 = or %240, %241
%243:i64 = shl %234, 32:i64
%244:i64 = lshr %234, 32:i64
%245:i64 = or %243, %244
%246:i64 = shl %228, 21:i64
%247:i64 = lshr %228, 43:i64
%248:i64 = or %246, %247
%249:i64 = xor %229, %248
%250:i64 = add %245, %249
%251:i64 = shl %249, 16:i64
%252:i64 = lshr %249, 48:i64
%253:i64 = or %251, %252
%254:i64 = xor %250, %253
%255:i64 = add %242, %254 (hasExternalUses)
%256:i64 = shl %238, 13:i64
%257:i64 = lshr %238, 51:i64
%258:i64 = or %256, %257
%259:i64 = xor %239, %258
%260:i64 = add %250, %259
%261:i64 = shl %259, 17:i64
%262:i64 = lshr %259, 47:i64
%263:i64 = or %261, %262
%264:i64 = xor %260, %263 (hasExternalUses)
%265:i64 = xor 221:i64, %264
%266:i64 = add %255, %265
%267:i64 = shl %266, 32:i64
%268:i64 = lshr %266, 32:i64
%269:i64 = or %267, %268
%270:i64 = shl %260, 32:i64
%271:i64 = lshr %260, 32:i64
%272:i64 = or %270, %271 (hasExternalUses)
%273:i64 = shl %254, 21:i64
%274:i64 = lshr %254, 43:i64
%275:i64 = or %273, %274
%276:i64 = xor %255, %275 (hasExternalUses)
%277:i64 = add %272, %276
%278:i64 = shl %276, 16:i64
%279:i64 = lshr %276, 48:i64
%280:i64 = or %278, %279
%281:i64 = xor %277, %280 (hasExternalUses)
%282:i64 = add %269, %281 (hasExternalUses)
%283:i64 = shl %265, 13:i64
%284:i64 = lshr %264, 51:i64
%285:i64 = or %283, %284
%286:i64 = xor %266, %285
%287:i64 = add %277, %286 (hasExternalUses)
%288:i64 = shl %286, 17:i64
%289:i64 = lshr %286, 47:i64
%290:i64 = or %288, %289
%291:i64 = xor %287, %290
%292:i64 = add %282, %291 (hasExternalUses)
%293:i64 = shl %291, 13:i64
%294:i64 = lshr %291, 51:i64
%295:i64 = or %293, %294
%296:i64 = xor %292, %295
infer %296

; *****
; For LLVM instruction:
;  %334 = shl i64 %329, 32
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237
%239:i64 = add %229, %238
%240:i64 = shl %239, 32:i64
%241:i64 = lshr %239, 32:i64
%242:i64 = or %240, %241
%243:i64 = shl %234, 32:i64
%244:i64 = lshr %234, 32:i64
%245:i64 = or %243, %244
%246:i64 = shl %228, 21:i64
%247:i64 = lshr %228, 43:i64
%248:i64 = or %246, %247
%249:i64 = xor %229, %248
%250:i64 = add %245, %249
%251:i64 = shl %249, 16:i64
%252:i64 = lshr %249, 48:i64
%253:i64 = or %251, %252
%254:i64 = xor %250, %253
%255:i64 = add %242, %254 (hasExternalUses)
%256:i64 = shl %238, 13:i64
%257:i64 = lshr %238, 51:i64
%258:i64 = or %256, %257
%259:i64 = xor %239, %258
%260:i64 = add %250, %259
%261:i64 = shl %259, 17:i64
%262:i64 = lshr %259, 47:i64
%263:i64 = or %261, %262
%264:i64 = xor %260, %263 (hasExternalUses)
%265:i64 = xor 221:i64, %264
%266:i64 = add %255, %265
%267:i64 = shl %266, 32:i64
%268:i64 = lshr %266, 32:i64
%269:i64 = or %267, %268
%270:i64 = shl %260, 32:i64
%271:i64 = lshr %260, 32:i64
%272:i64 = or %270, %271 (hasExternalUses)
%273:i64 = shl %254, 21:i64
%274:i64 = lshr %254, 43:i64
%275:i64 = or %273, %274
%276:i64 = xor %255, %275 (hasExternalUses)
%277:i64 = add %272, %276
%278:i64 = shl %276, 16:i64
%279:i64 = lshr %276, 48:i64
%280:i64 = or %278, %279
%281:i64 = xor %277, %280 (hasExternalUses)
%282:i64 = add %269, %281 (hasExternalUses)
%283:i64 = shl %265, 13:i64
%284:i64 = lshr %264, 51:i64
%285:i64 = or %283, %284
%286:i64 = xor %266, %285
%287:i64 = add %277, %286 (hasExternalUses)
%288:i64 = shl %286, 17:i64
%289:i64 = lshr %286, 47:i64
%290:i64 = or %288, %289
%291:i64 = xor %287, %290 (hasExternalUses)
%292:i64 = add %282, %291 (hasExternalUses)
%293:i64 = shl %292, 32:i64
infer %293

; *****
; For LLVM instruction:
;  %335 = lshr i64 %329, 32
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237
%239:i64 = add %229, %238
%240:i64 = shl %239, 32:i64
%241:i64 = lshr %239, 32:i64
%242:i64 = or %240, %241
%243:i64 = shl %234, 32:i64
%244:i64 = lshr %234, 32:i64
%245:i64 = or %243, %244
%246:i64 = shl %228, 21:i64
%247:i64 = lshr %228, 43:i64
%248:i64 = or %246, %247
%249:i64 = xor %229, %248
%250:i64 = add %245, %249
%251:i64 = shl %249, 16:i64
%252:i64 = lshr %249, 48:i64
%253:i64 = or %251, %252
%254:i64 = xor %250, %253
%255:i64 = add %242, %254 (hasExternalUses)
%256:i64 = shl %238, 13:i64
%257:i64 = lshr %238, 51:i64
%258:i64 = or %256, %257
%259:i64 = xor %239, %258
%260:i64 = add %250, %259
%261:i64 = shl %259, 17:i64
%262:i64 = lshr %259, 47:i64
%263:i64 = or %261, %262
%264:i64 = xor %260, %263 (hasExternalUses)
%265:i64 = xor 221:i64, %264
%266:i64 = add %255, %265
%267:i64 = shl %266, 32:i64
%268:i64 = lshr %266, 32:i64
%269:i64 = or %267, %268
%270:i64 = shl %260, 32:i64
%271:i64 = lshr %260, 32:i64
%272:i64 = or %270, %271 (hasExternalUses)
%273:i64 = shl %254, 21:i64
%274:i64 = lshr %254, 43:i64
%275:i64 = or %273, %274
%276:i64 = xor %255, %275 (hasExternalUses)
%277:i64 = add %272, %276
%278:i64 = shl %276, 16:i64
%279:i64 = lshr %276, 48:i64
%280:i64 = or %278, %279
%281:i64 = xor %277, %280 (hasExternalUses)
%282:i64 = add %269, %281 (hasExternalUses)
%283:i64 = shl %265, 13:i64
%284:i64 = lshr %264, 51:i64
%285:i64 = or %283, %284
%286:i64 = xor %266, %285
%287:i64 = add %277, %286 (hasExternalUses)
%288:i64 = shl %286, 17:i64
%289:i64 = lshr %286, 47:i64
%290:i64 = or %288, %289
%291:i64 = xor %287, %290 (hasExternalUses)
%292:i64 = add %282, %291 (hasExternalUses)
%293:i64 = lshr %292, 32:i64
infer %293

; *****
; For LLVM instruction:
;  %336 = or i64 %335, %334
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237
%239:i64 = add %229, %238
%240:i64 = shl %239, 32:i64
%241:i64 = lshr %239, 32:i64
%242:i64 = or %240, %241
%243:i64 = shl %234, 32:i64
%244:i64 = lshr %234, 32:i64
%245:i64 = or %243, %244
%246:i64 = shl %228, 21:i64
%247:i64 = lshr %228, 43:i64
%248:i64 = or %246, %247
%249:i64 = xor %229, %248
%250:i64 = add %245, %249
%251:i64 = shl %249, 16:i64
%252:i64 = lshr %249, 48:i64
%253:i64 = or %251, %252
%254:i64 = xor %250, %253
%255:i64 = add %242, %254 (hasExternalUses)
%256:i64 = shl %238, 13:i64
%257:i64 = lshr %238, 51:i64
%258:i64 = or %256, %257
%259:i64 = xor %239, %258
%260:i64 = add %250, %259
%261:i64 = shl %259, 17:i64
%262:i64 = lshr %259, 47:i64
%263:i64 = or %261, %262
%264:i64 = xor %260, %263 (hasExternalUses)
%265:i64 = xor 221:i64, %264
%266:i64 = add %255, %265
%267:i64 = shl %266, 32:i64
%268:i64 = lshr %266, 32:i64
%269:i64 = or %267, %268
%270:i64 = shl %260, 32:i64
%271:i64 = lshr %260, 32:i64
%272:i64 = or %270, %271 (hasExternalUses)
%273:i64 = shl %254, 21:i64
%274:i64 = lshr %254, 43:i64
%275:i64 = or %273, %274
%276:i64 = xor %255, %275 (hasExternalUses)
%277:i64 = add %272, %276
%278:i64 = shl %276, 16:i64
%279:i64 = lshr %276, 48:i64
%280:i64 = or %278, %279
%281:i64 = xor %277, %280 (hasExternalUses)
%282:i64 = add %269, %281 (hasExternalUses)
%283:i64 = shl %265, 13:i64
%284:i64 = lshr %264, 51:i64
%285:i64 = or %283, %284
%286:i64 = xor %266, %285
%287:i64 = add %277, %286 (hasExternalUses)
%288:i64 = shl %286, 17:i64
%289:i64 = lshr %286, 47:i64
%290:i64 = or %288, %289
%291:i64 = xor %287, %290 (hasExternalUses)
%292:i64 = add %282, %291 (hasExternalUses)
%293:i64 = shl %292, 32:i64
%294:i64 = lshr %292, 32:i64
%295:i64 = or %293, %294
infer %295

; *****
; For LLVM instruction:
;  %337 = add i64 %320, %328
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250
%252:i64 = add %242, %251
%253:i64 = shl %252, 32:i64
%254:i64 = lshr %252, 32:i64
%255:i64 = or %253, %254 (hasExternalUses)
%256:i64 = shl %247, 32:i64
%257:i64 = lshr %247, 32:i64
%258:i64 = or %256, %257
%259:i64 = shl %241, 16:i64
%260:i64 = lshr %241, 48:i64
%261:i64 = or %259, %260
%262:i64 = xor %242, %261
%263:i64 = add %258, %262 (hasExternalUses)
%264:i64 = shl %262, 21:i64
%265:i64 = lshr %262, 43:i64
%266:i64 = or %264, %265
%267:i64 = xor %263, %266 (hasExternalUses)
%268:i64 = add %255, %267
%269:i64 = shl %251, 17:i64
%270:i64 = lshr %251, 47:i64
%271:i64 = or %269, %270
%272:i64 = xor %252, %271 (hasExternalUses)
%273:i64 = xor 221:i64, %272
%274:i64 = add %263, %273
%275:i64 = shl %273, 13:i64
%276:i64 = lshr %272, 51:i64
%277:i64 = or %275, %276
%278:i64 = xor %274, %277 (hasExternalUses)
%279:i64 = add %268, %278 (hasExternalUses)
%280:i64 = shl %279, 32:i64
%281:i64 = lshr %279, 32:i64
%282:i64 = or %280, %281
%283:i64 = shl %274, 32:i64
%284:i64 = lshr %274, 32:i64
%285:i64 = or %283, %284
%286:i64 = shl %267, 16:i64
%287:i64 = lshr %267, 48:i64
%288:i64 = or %286, %287
%289:i64 = xor %268, %288
%290:i64 = add %285, %289 (hasExternalUses)
%291:i64 = shl %289, 21:i64
%292:i64 = lshr %289, 43:i64
%293:i64 = or %291, %292
%294:i64 = xor %290, %293 (hasExternalUses)
%295:i64 = add %282, %294
infer %295

; *****
; For LLVM instruction:
;  %338 = shl i64 %320, 16
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237
%239:i64 = add %229, %238
%240:i64 = shl %239, 32:i64
%241:i64 = lshr %239, 32:i64
%242:i64 = or %240, %241
%243:i64 = shl %234, 32:i64
%244:i64 = lshr %234, 32:i64
%245:i64 = or %243, %244
%246:i64 = shl %228, 21:i64
%247:i64 = lshr %228, 43:i64
%248:i64 = or %246, %247
%249:i64 = xor %229, %248
%250:i64 = add %245, %249
%251:i64 = shl %249, 16:i64
%252:i64 = lshr %249, 48:i64
%253:i64 = or %251, %252
%254:i64 = xor %250, %253
%255:i64 = add %242, %254 (hasExternalUses)
%256:i64 = shl %238, 13:i64
%257:i64 = lshr %238, 51:i64
%258:i64 = or %256, %257
%259:i64 = xor %239, %258
%260:i64 = add %250, %259
%261:i64 = shl %259, 17:i64
%262:i64 = lshr %259, 47:i64
%263:i64 = or %261, %262
%264:i64 = xor %260, %263 (hasExternalUses)
%265:i64 = xor 221:i64, %264 (hasExternalUses)
%266:i64 = add %255, %265 (hasExternalUses)
%267:i64 = shl %266, 32:i64
%268:i64 = lshr %266, 32:i64
%269:i64 = or %267, %268
%270:i64 = shl %260, 32:i64
%271:i64 = lshr %260, 32:i64
%272:i64 = or %270, %271 (hasExternalUses)
%273:i64 = shl %254, 21:i64
%274:i64 = lshr %254, 43:i64
%275:i64 = or %273, %274
%276:i64 = xor %255, %275 (hasExternalUses)
%277:i64 = add %272, %276 (hasExternalUses)
%278:i64 = shl %276, 16:i64
%279:i64 = lshr %276, 48:i64
%280:i64 = or %278, %279
%281:i64 = xor %277, %280
%282:i64 = add %269, %281 (hasExternalUses)
%283:i64 = shl %281, 21:i64
%284:i64 = lshr %281, 43:i64
%285:i64 = or %283, %284
%286:i64 = xor %282, %285 (hasExternalUses)
%287:i64 = shl %286, 16:i64
infer %287

; *****
; For LLVM instruction:
;  %339 = lshr i64 %320, 48
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237
%239:i64 = add %229, %238
%240:i64 = shl %239, 32:i64
%241:i64 = lshr %239, 32:i64
%242:i64 = or %240, %241
%243:i64 = shl %234, 32:i64
%244:i64 = lshr %234, 32:i64
%245:i64 = or %243, %244
%246:i64 = shl %228, 21:i64
%247:i64 = lshr %228, 43:i64
%248:i64 = or %246, %247
%249:i64 = xor %229, %248
%250:i64 = add %245, %249
%251:i64 = shl %249, 16:i64
%252:i64 = lshr %249, 48:i64
%253:i64 = or %251, %252
%254:i64 = xor %250, %253
%255:i64 = add %242, %254 (hasExternalUses)
%256:i64 = shl %238, 13:i64
%257:i64 = lshr %238, 51:i64
%258:i64 = or %256, %257
%259:i64 = xor %239, %258
%260:i64 = add %250, %259
%261:i64 = shl %259, 17:i64
%262:i64 = lshr %259, 47:i64
%263:i64 = or %261, %262
%264:i64 = xor %260, %263 (hasExternalUses)
%265:i64 = xor 221:i64, %264 (hasExternalUses)
%266:i64 = add %255, %265 (hasExternalUses)
%267:i64 = shl %266, 32:i64
%268:i64 = lshr %266, 32:i64
%269:i64 = or %267, %268
%270:i64 = shl %260, 32:i64
%271:i64 = lshr %260, 32:i64
%272:i64 = or %270, %271 (hasExternalUses)
%273:i64 = shl %254, 21:i64
%274:i64 = lshr %254, 43:i64
%275:i64 = or %273, %274
%276:i64 = xor %255, %275 (hasExternalUses)
%277:i64 = add %272, %276 (hasExternalUses)
%278:i64 = shl %276, 16:i64
%279:i64 = lshr %276, 48:i64
%280:i64 = or %278, %279
%281:i64 = xor %277, %280
%282:i64 = add %269, %281 (hasExternalUses)
%283:i64 = shl %281, 21:i64
%284:i64 = lshr %281, 43:i64
%285:i64 = or %283, %284
%286:i64 = xor %282, %285 (hasExternalUses)
%287:i64 = lshr %286, 48:i64
infer %287

; *****
; For LLVM instruction:
;  %340 = or i64 %339, %338
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237
%239:i64 = add %229, %238
%240:i64 = shl %239, 32:i64
%241:i64 = lshr %239, 32:i64
%242:i64 = or %240, %241
%243:i64 = shl %234, 32:i64
%244:i64 = lshr %234, 32:i64
%245:i64 = or %243, %244
%246:i64 = shl %228, 21:i64
%247:i64 = lshr %228, 43:i64
%248:i64 = or %246, %247
%249:i64 = xor %229, %248
%250:i64 = add %245, %249
%251:i64 = shl %249, 16:i64
%252:i64 = lshr %249, 48:i64
%253:i64 = or %251, %252
%254:i64 = xor %250, %253
%255:i64 = add %242, %254 (hasExternalUses)
%256:i64 = shl %238, 13:i64
%257:i64 = lshr %238, 51:i64
%258:i64 = or %256, %257
%259:i64 = xor %239, %258
%260:i64 = add %250, %259
%261:i64 = shl %259, 17:i64
%262:i64 = lshr %259, 47:i64
%263:i64 = or %261, %262
%264:i64 = xor %260, %263 (hasExternalUses)
%265:i64 = xor 221:i64, %264 (hasExternalUses)
%266:i64 = add %255, %265 (hasExternalUses)
%267:i64 = shl %266, 32:i64
%268:i64 = lshr %266, 32:i64
%269:i64 = or %267, %268
%270:i64 = shl %260, 32:i64
%271:i64 = lshr %260, 32:i64
%272:i64 = or %270, %271 (hasExternalUses)
%273:i64 = shl %254, 21:i64
%274:i64 = lshr %254, 43:i64
%275:i64 = or %273, %274
%276:i64 = xor %255, %275 (hasExternalUses)
%277:i64 = add %272, %276 (hasExternalUses)
%278:i64 = shl %276, 16:i64
%279:i64 = lshr %276, 48:i64
%280:i64 = or %278, %279
%281:i64 = xor %277, %280
%282:i64 = add %269, %281 (hasExternalUses)
%283:i64 = shl %281, 21:i64
%284:i64 = lshr %281, 43:i64
%285:i64 = or %283, %284
%286:i64 = xor %282, %285 (hasExternalUses)
%287:i64 = shl %286, 16:i64
%288:i64 = lshr %286, 48:i64
%289:i64 = or %287, %288
infer %289

; *****
; For LLVM instruction:
;  %341 = xor i64 %340, %337
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250
%252:i64 = add %242, %251
%253:i64 = shl %252, 32:i64
%254:i64 = lshr %252, 32:i64
%255:i64 = or %253, %254 (hasExternalUses)
%256:i64 = shl %247, 32:i64
%257:i64 = lshr %247, 32:i64
%258:i64 = or %256, %257
%259:i64 = shl %241, 16:i64
%260:i64 = lshr %241, 48:i64
%261:i64 = or %259, %260
%262:i64 = xor %242, %261
%263:i64 = add %258, %262 (hasExternalUses)
%264:i64 = shl %262, 21:i64
%265:i64 = lshr %262, 43:i64
%266:i64 = or %264, %265
%267:i64 = xor %263, %266 (hasExternalUses)
%268:i64 = add %255, %267
%269:i64 = shl %251, 17:i64
%270:i64 = lshr %251, 47:i64
%271:i64 = or %269, %270
%272:i64 = xor %252, %271 (hasExternalUses)
%273:i64 = xor 221:i64, %272
%274:i64 = add %263, %273
%275:i64 = shl %273, 13:i64
%276:i64 = lshr %272, 51:i64
%277:i64 = or %275, %276
%278:i64 = xor %274, %277 (hasExternalUses)
%279:i64 = add %268, %278 (hasExternalUses)
%280:i64 = shl %279, 32:i64
%281:i64 = lshr %279, 32:i64
%282:i64 = or %280, %281
%283:i64 = shl %274, 32:i64
%284:i64 = lshr %274, 32:i64
%285:i64 = or %283, %284
%286:i64 = shl %267, 16:i64
%287:i64 = lshr %267, 48:i64
%288:i64 = or %286, %287
%289:i64 = xor %268, %288
%290:i64 = add %285, %289 (hasExternalUses)
%291:i64 = shl %289, 21:i64
%292:i64 = lshr %289, 43:i64
%293:i64 = or %291, %292
%294:i64 = xor %290, %293
%295:i64 = add %282, %294 (hasExternalUses)
%296:i64 = shl %294, 16:i64
%297:i64 = lshr %294, 48:i64
%298:i64 = or %296, %297
%299:i64 = xor %295, %298
infer %299

; *****
; For LLVM instruction:
;  %342 = add i64 %341, %336
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237
%239:i64 = add %229, %238
%240:i64 = shl %239, 32:i64
%241:i64 = lshr %239, 32:i64
%242:i64 = or %240, %241
%243:i64 = shl %234, 32:i64
%244:i64 = lshr %234, 32:i64
%245:i64 = or %243, %244
%246:i64 = shl %228, 21:i64
%247:i64 = lshr %228, 43:i64
%248:i64 = or %246, %247
%249:i64 = xor %229, %248
%250:i64 = add %245, %249
%251:i64 = shl %249, 16:i64
%252:i64 = lshr %249, 48:i64
%253:i64 = or %251, %252
%254:i64 = xor %250, %253
%255:i64 = add %242, %254 (hasExternalUses)
%256:i64 = shl %238, 13:i64
%257:i64 = lshr %238, 51:i64
%258:i64 = or %256, %257
%259:i64 = xor %239, %258
%260:i64 = add %250, %259
%261:i64 = shl %259, 17:i64
%262:i64 = lshr %259, 47:i64
%263:i64 = or %261, %262
%264:i64 = xor %260, %263 (hasExternalUses)
%265:i64 = xor 221:i64, %264
%266:i64 = add %255, %265
%267:i64 = shl %266, 32:i64
%268:i64 = lshr %266, 32:i64
%269:i64 = or %267, %268
%270:i64 = shl %260, 32:i64
%271:i64 = lshr %260, 32:i64
%272:i64 = or %270, %271 (hasExternalUses)
%273:i64 = shl %254, 21:i64
%274:i64 = lshr %254, 43:i64
%275:i64 = or %273, %274
%276:i64 = xor %255, %275 (hasExternalUses)
%277:i64 = add %272, %276
%278:i64 = shl %276, 16:i64
%279:i64 = lshr %276, 48:i64
%280:i64 = or %278, %279
%281:i64 = xor %277, %280
%282:i64 = add %269, %281
%283:i64 = shl %265, 13:i64
%284:i64 = lshr %264, 51:i64
%285:i64 = or %283, %284
%286:i64 = xor %266, %285
%287:i64 = add %277, %286
%288:i64 = shl %286, 17:i64
%289:i64 = lshr %286, 47:i64
%290:i64 = or %288, %289
%291:i64 = xor %287, %290 (hasExternalUses)
%292:i64 = add %282, %291 (hasExternalUses)
%293:i64 = shl %292, 32:i64
%294:i64 = lshr %292, 32:i64
%295:i64 = or %293, %294
%296:i64 = shl %287, 32:i64
%297:i64 = lshr %287, 32:i64
%298:i64 = or %296, %297
%299:i64 = shl %281, 21:i64
%300:i64 = lshr %281, 43:i64
%301:i64 = or %299, %300
%302:i64 = xor %282, %301
%303:i64 = add %298, %302 (hasExternalUses)
%304:i64 = shl %302, 16:i64
%305:i64 = lshr %302, 48:i64
%306:i64 = or %304, %305
%307:i64 = xor %303, %306 (hasExternalUses)
%308:i64 = add %295, %307
infer %308

; *****
; For LLVM instruction:
;  %343 = shl i64 %341, 21
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250
%252:i64 = add %242, %251
%253:i64 = shl %252, 32:i64
%254:i64 = lshr %252, 32:i64
%255:i64 = or %253, %254 (hasExternalUses)
%256:i64 = shl %247, 32:i64
%257:i64 = lshr %247, 32:i64
%258:i64 = or %256, %257
%259:i64 = shl %241, 16:i64
%260:i64 = lshr %241, 48:i64
%261:i64 = or %259, %260
%262:i64 = xor %242, %261
%263:i64 = add %258, %262 (hasExternalUses)
%264:i64 = shl %262, 21:i64
%265:i64 = lshr %262, 43:i64
%266:i64 = or %264, %265
%267:i64 = xor %263, %266 (hasExternalUses)
%268:i64 = add %255, %267
%269:i64 = shl %251, 17:i64
%270:i64 = lshr %251, 47:i64
%271:i64 = or %269, %270
%272:i64 = xor %252, %271 (hasExternalUses)
%273:i64 = xor 221:i64, %272
%274:i64 = add %263, %273
%275:i64 = shl %273, 13:i64
%276:i64 = lshr %272, 51:i64
%277:i64 = or %275, %276
%278:i64 = xor %274, %277 (hasExternalUses)
%279:i64 = add %268, %278 (hasExternalUses)
%280:i64 = shl %279, 32:i64
%281:i64 = lshr %279, 32:i64
%282:i64 = or %280, %281
%283:i64 = shl %274, 32:i64
%284:i64 = lshr %274, 32:i64
%285:i64 = or %283, %284
%286:i64 = shl %267, 16:i64
%287:i64 = lshr %267, 48:i64
%288:i64 = or %286, %287
%289:i64 = xor %268, %288
%290:i64 = add %285, %289 (hasExternalUses)
%291:i64 = shl %289, 21:i64
%292:i64 = lshr %289, 43:i64
%293:i64 = or %291, %292
%294:i64 = xor %290, %293
%295:i64 = add %282, %294 (hasExternalUses)
%296:i64 = shl %294, 16:i64
%297:i64 = lshr %294, 48:i64
%298:i64 = or %296, %297
%299:i64 = xor %295, %298 (hasExternalUses)
%300:i64 = shl %299, 21:i64
infer %300

; *****
; For LLVM instruction:
;  %344 = lshr i64 %341, 43
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250
%252:i64 = add %242, %251
%253:i64 = shl %252, 32:i64
%254:i64 = lshr %252, 32:i64
%255:i64 = or %253, %254 (hasExternalUses)
%256:i64 = shl %247, 32:i64
%257:i64 = lshr %247, 32:i64
%258:i64 = or %256, %257
%259:i64 = shl %241, 16:i64
%260:i64 = lshr %241, 48:i64
%261:i64 = or %259, %260
%262:i64 = xor %242, %261
%263:i64 = add %258, %262 (hasExternalUses)
%264:i64 = shl %262, 21:i64
%265:i64 = lshr %262, 43:i64
%266:i64 = or %264, %265
%267:i64 = xor %263, %266 (hasExternalUses)
%268:i64 = add %255, %267
%269:i64 = shl %251, 17:i64
%270:i64 = lshr %251, 47:i64
%271:i64 = or %269, %270
%272:i64 = xor %252, %271 (hasExternalUses)
%273:i64 = xor 221:i64, %272
%274:i64 = add %263, %273
%275:i64 = shl %273, 13:i64
%276:i64 = lshr %272, 51:i64
%277:i64 = or %275, %276
%278:i64 = xor %274, %277 (hasExternalUses)
%279:i64 = add %268, %278 (hasExternalUses)
%280:i64 = shl %279, 32:i64
%281:i64 = lshr %279, 32:i64
%282:i64 = or %280, %281
%283:i64 = shl %274, 32:i64
%284:i64 = lshr %274, 32:i64
%285:i64 = or %283, %284
%286:i64 = shl %267, 16:i64
%287:i64 = lshr %267, 48:i64
%288:i64 = or %286, %287
%289:i64 = xor %268, %288
%290:i64 = add %285, %289 (hasExternalUses)
%291:i64 = shl %289, 21:i64
%292:i64 = lshr %289, 43:i64
%293:i64 = or %291, %292
%294:i64 = xor %290, %293
%295:i64 = add %282, %294 (hasExternalUses)
%296:i64 = shl %294, 16:i64
%297:i64 = lshr %294, 48:i64
%298:i64 = or %296, %297
%299:i64 = xor %295, %298 (hasExternalUses)
%300:i64 = lshr %299, 43:i64
infer %300

; *****
; For LLVM instruction:
;  %345 = or i64 %344, %343
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250
%252:i64 = add %242, %251
%253:i64 = shl %252, 32:i64
%254:i64 = lshr %252, 32:i64
%255:i64 = or %253, %254 (hasExternalUses)
%256:i64 = shl %247, 32:i64
%257:i64 = lshr %247, 32:i64
%258:i64 = or %256, %257
%259:i64 = shl %241, 16:i64
%260:i64 = lshr %241, 48:i64
%261:i64 = or %259, %260
%262:i64 = xor %242, %261
%263:i64 = add %258, %262 (hasExternalUses)
%264:i64 = shl %262, 21:i64
%265:i64 = lshr %262, 43:i64
%266:i64 = or %264, %265
%267:i64 = xor %263, %266 (hasExternalUses)
%268:i64 = add %255, %267
%269:i64 = shl %251, 17:i64
%270:i64 = lshr %251, 47:i64
%271:i64 = or %269, %270
%272:i64 = xor %252, %271 (hasExternalUses)
%273:i64 = xor 221:i64, %272
%274:i64 = add %263, %273
%275:i64 = shl %273, 13:i64
%276:i64 = lshr %272, 51:i64
%277:i64 = or %275, %276
%278:i64 = xor %274, %277 (hasExternalUses)
%279:i64 = add %268, %278 (hasExternalUses)
%280:i64 = shl %279, 32:i64
%281:i64 = lshr %279, 32:i64
%282:i64 = or %280, %281
%283:i64 = shl %274, 32:i64
%284:i64 = lshr %274, 32:i64
%285:i64 = or %283, %284
%286:i64 = shl %267, 16:i64
%287:i64 = lshr %267, 48:i64
%288:i64 = or %286, %287
%289:i64 = xor %268, %288
%290:i64 = add %285, %289 (hasExternalUses)
%291:i64 = shl %289, 21:i64
%292:i64 = lshr %289, 43:i64
%293:i64 = or %291, %292
%294:i64 = xor %290, %293
%295:i64 = add %282, %294 (hasExternalUses)
%296:i64 = shl %294, 16:i64
%297:i64 = lshr %294, 48:i64
%298:i64 = or %296, %297
%299:i64 = xor %295, %298 (hasExternalUses)
%300:i64 = shl %299, 21:i64
%301:i64 = lshr %299, 43:i64
%302:i64 = or %300, %301
infer %302

; *****
; For LLVM instruction:
;  %346 = xor i64 %345, %342
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237
%239:i64 = add %229, %238
%240:i64 = shl %239, 32:i64
%241:i64 = lshr %239, 32:i64
%242:i64 = or %240, %241
%243:i64 = shl %234, 32:i64
%244:i64 = lshr %234, 32:i64
%245:i64 = or %243, %244
%246:i64 = shl %228, 21:i64
%247:i64 = lshr %228, 43:i64
%248:i64 = or %246, %247
%249:i64 = xor %229, %248
%250:i64 = add %245, %249
%251:i64 = shl %249, 16:i64
%252:i64 = lshr %249, 48:i64
%253:i64 = or %251, %252
%254:i64 = xor %250, %253
%255:i64 = add %242, %254 (hasExternalUses)
%256:i64 = shl %238, 13:i64
%257:i64 = lshr %238, 51:i64
%258:i64 = or %256, %257
%259:i64 = xor %239, %258
%260:i64 = add %250, %259
%261:i64 = shl %259, 17:i64
%262:i64 = lshr %259, 47:i64
%263:i64 = or %261, %262
%264:i64 = xor %260, %263 (hasExternalUses)
%265:i64 = xor 221:i64, %264
%266:i64 = add %255, %265
%267:i64 = shl %266, 32:i64
%268:i64 = lshr %266, 32:i64
%269:i64 = or %267, %268
%270:i64 = shl %260, 32:i64
%271:i64 = lshr %260, 32:i64
%272:i64 = or %270, %271 (hasExternalUses)
%273:i64 = shl %254, 21:i64
%274:i64 = lshr %254, 43:i64
%275:i64 = or %273, %274
%276:i64 = xor %255, %275 (hasExternalUses)
%277:i64 = add %272, %276
%278:i64 = shl %276, 16:i64
%279:i64 = lshr %276, 48:i64
%280:i64 = or %278, %279
%281:i64 = xor %277, %280
%282:i64 = add %269, %281
%283:i64 = shl %265, 13:i64
%284:i64 = lshr %264, 51:i64
%285:i64 = or %283, %284
%286:i64 = xor %266, %285
%287:i64 = add %277, %286
%288:i64 = shl %286, 17:i64
%289:i64 = lshr %286, 47:i64
%290:i64 = or %288, %289
%291:i64 = xor %287, %290 (hasExternalUses)
%292:i64 = add %282, %291 (hasExternalUses)
%293:i64 = shl %292, 32:i64
%294:i64 = lshr %292, 32:i64
%295:i64 = or %293, %294
%296:i64 = shl %287, 32:i64
%297:i64 = lshr %287, 32:i64
%298:i64 = or %296, %297
%299:i64 = shl %281, 21:i64
%300:i64 = lshr %281, 43:i64
%301:i64 = or %299, %300
%302:i64 = xor %282, %301
%303:i64 = add %298, %302 (hasExternalUses)
%304:i64 = shl %302, 16:i64
%305:i64 = lshr %302, 48:i64
%306:i64 = or %304, %305
%307:i64 = xor %303, %306
%308:i64 = add %295, %307 (hasExternalUses)
%309:i64 = shl %307, 21:i64
%310:i64 = lshr %307, 43:i64
%311:i64 = or %309, %310
%312:i64 = xor %308, %311
infer %312

; *****
; For LLVM instruction:
;  %347 = add i64 %333, %337
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250
%252:i64 = add %242, %251
%253:i64 = shl %252, 32:i64
%254:i64 = lshr %252, 32:i64
%255:i64 = or %253, %254 (hasExternalUses)
%256:i64 = shl %247, 32:i64
%257:i64 = lshr %247, 32:i64
%258:i64 = or %256, %257
%259:i64 = shl %241, 16:i64
%260:i64 = lshr %241, 48:i64
%261:i64 = or %259, %260
%262:i64 = xor %242, %261
%263:i64 = add %258, %262 (hasExternalUses)
%264:i64 = shl %262, 21:i64
%265:i64 = lshr %262, 43:i64
%266:i64 = or %264, %265
%267:i64 = xor %263, %266 (hasExternalUses)
%268:i64 = add %255, %267
%269:i64 = shl %251, 17:i64
%270:i64 = lshr %251, 47:i64
%271:i64 = or %269, %270
%272:i64 = xor %252, %271 (hasExternalUses)
%273:i64 = xor 221:i64, %272
%274:i64 = add %263, %273
%275:i64 = shl %273, 13:i64
%276:i64 = lshr %272, 51:i64
%277:i64 = or %275, %276
%278:i64 = xor %274, %277
%279:i64 = add %268, %278
%280:i64 = shl %279, 32:i64
%281:i64 = lshr %279, 32:i64
%282:i64 = or %280, %281
%283:i64 = shl %274, 32:i64
%284:i64 = lshr %274, 32:i64
%285:i64 = or %283, %284
%286:i64 = shl %267, 16:i64
%287:i64 = lshr %267, 48:i64
%288:i64 = or %286, %287
%289:i64 = xor %268, %288
%290:i64 = add %285, %289
%291:i64 = shl %289, 21:i64
%292:i64 = lshr %289, 43:i64
%293:i64 = or %291, %292
%294:i64 = xor %290, %293 (hasExternalUses)
%295:i64 = add %282, %294 (hasExternalUses)
%296:i64 = shl %278, 17:i64
%297:i64 = lshr %278, 47:i64
%298:i64 = or %296, %297
%299:i64 = xor %279, %298
%300:i64 = add %290, %299 (hasExternalUses)
%301:i64 = shl %299, 13:i64
%302:i64 = lshr %299, 51:i64
%303:i64 = or %301, %302
%304:i64 = xor %300, %303 (hasExternalUses)
%305:i64 = add %295, %304
infer %305

; *****
; For LLVM instruction:
;  %348 = shl i64 %333, 17
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237
%239:i64 = add %229, %238
%240:i64 = shl %239, 32:i64
%241:i64 = lshr %239, 32:i64
%242:i64 = or %240, %241
%243:i64 = shl %234, 32:i64
%244:i64 = lshr %234, 32:i64
%245:i64 = or %243, %244
%246:i64 = shl %228, 21:i64
%247:i64 = lshr %228, 43:i64
%248:i64 = or %246, %247
%249:i64 = xor %229, %248
%250:i64 = add %245, %249
%251:i64 = shl %249, 16:i64
%252:i64 = lshr %249, 48:i64
%253:i64 = or %251, %252
%254:i64 = xor %250, %253
%255:i64 = add %242, %254 (hasExternalUses)
%256:i64 = shl %238, 13:i64
%257:i64 = lshr %238, 51:i64
%258:i64 = or %256, %257
%259:i64 = xor %239, %258
%260:i64 = add %250, %259
%261:i64 = shl %259, 17:i64
%262:i64 = lshr %259, 47:i64
%263:i64 = or %261, %262
%264:i64 = xor %260, %263 (hasExternalUses)
%265:i64 = xor 221:i64, %264
%266:i64 = add %255, %265
%267:i64 = shl %266, 32:i64
%268:i64 = lshr %266, 32:i64
%269:i64 = or %267, %268
%270:i64 = shl %260, 32:i64
%271:i64 = lshr %260, 32:i64
%272:i64 = or %270, %271 (hasExternalUses)
%273:i64 = shl %254, 21:i64
%274:i64 = lshr %254, 43:i64
%275:i64 = or %273, %274
%276:i64 = xor %255, %275 (hasExternalUses)
%277:i64 = add %272, %276
%278:i64 = shl %276, 16:i64
%279:i64 = lshr %276, 48:i64
%280:i64 = or %278, %279
%281:i64 = xor %277, %280 (hasExternalUses)
%282:i64 = add %269, %281 (hasExternalUses)
%283:i64 = shl %265, 13:i64
%284:i64 = lshr %264, 51:i64
%285:i64 = or %283, %284
%286:i64 = xor %266, %285
%287:i64 = add %277, %286 (hasExternalUses)
%288:i64 = shl %286, 17:i64
%289:i64 = lshr %286, 47:i64
%290:i64 = or %288, %289
%291:i64 = xor %287, %290
%292:i64 = add %282, %291 (hasExternalUses)
%293:i64 = shl %291, 13:i64
%294:i64 = lshr %291, 51:i64
%295:i64 = or %293, %294
%296:i64 = xor %292, %295 (hasExternalUses)
%297:i64 = shl %296, 17:i64
infer %297

; *****
; For LLVM instruction:
;  %349 = lshr i64 %333, 47
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237
%239:i64 = add %229, %238
%240:i64 = shl %239, 32:i64
%241:i64 = lshr %239, 32:i64
%242:i64 = or %240, %241
%243:i64 = shl %234, 32:i64
%244:i64 = lshr %234, 32:i64
%245:i64 = or %243, %244
%246:i64 = shl %228, 21:i64
%247:i64 = lshr %228, 43:i64
%248:i64 = or %246, %247
%249:i64 = xor %229, %248
%250:i64 = add %245, %249
%251:i64 = shl %249, 16:i64
%252:i64 = lshr %249, 48:i64
%253:i64 = or %251, %252
%254:i64 = xor %250, %253
%255:i64 = add %242, %254 (hasExternalUses)
%256:i64 = shl %238, 13:i64
%257:i64 = lshr %238, 51:i64
%258:i64 = or %256, %257
%259:i64 = xor %239, %258
%260:i64 = add %250, %259
%261:i64 = shl %259, 17:i64
%262:i64 = lshr %259, 47:i64
%263:i64 = or %261, %262
%264:i64 = xor %260, %263 (hasExternalUses)
%265:i64 = xor 221:i64, %264
%266:i64 = add %255, %265
%267:i64 = shl %266, 32:i64
%268:i64 = lshr %266, 32:i64
%269:i64 = or %267, %268
%270:i64 = shl %260, 32:i64
%271:i64 = lshr %260, 32:i64
%272:i64 = or %270, %271 (hasExternalUses)
%273:i64 = shl %254, 21:i64
%274:i64 = lshr %254, 43:i64
%275:i64 = or %273, %274
%276:i64 = xor %255, %275 (hasExternalUses)
%277:i64 = add %272, %276
%278:i64 = shl %276, 16:i64
%279:i64 = lshr %276, 48:i64
%280:i64 = or %278, %279
%281:i64 = xor %277, %280 (hasExternalUses)
%282:i64 = add %269, %281 (hasExternalUses)
%283:i64 = shl %265, 13:i64
%284:i64 = lshr %264, 51:i64
%285:i64 = or %283, %284
%286:i64 = xor %266, %285
%287:i64 = add %277, %286 (hasExternalUses)
%288:i64 = shl %286, 17:i64
%289:i64 = lshr %286, 47:i64
%290:i64 = or %288, %289
%291:i64 = xor %287, %290
%292:i64 = add %282, %291 (hasExternalUses)
%293:i64 = shl %291, 13:i64
%294:i64 = lshr %291, 51:i64
%295:i64 = or %293, %294
%296:i64 = xor %292, %295 (hasExternalUses)
%297:i64 = lshr %296, 47:i64
infer %297

; *****
; For LLVM instruction:
;  %350 = or i64 %349, %348
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237
%239:i64 = add %229, %238
%240:i64 = shl %239, 32:i64
%241:i64 = lshr %239, 32:i64
%242:i64 = or %240, %241
%243:i64 = shl %234, 32:i64
%244:i64 = lshr %234, 32:i64
%245:i64 = or %243, %244
%246:i64 = shl %228, 21:i64
%247:i64 = lshr %228, 43:i64
%248:i64 = or %246, %247
%249:i64 = xor %229, %248
%250:i64 = add %245, %249
%251:i64 = shl %249, 16:i64
%252:i64 = lshr %249, 48:i64
%253:i64 = or %251, %252
%254:i64 = xor %250, %253
%255:i64 = add %242, %254 (hasExternalUses)
%256:i64 = shl %238, 13:i64
%257:i64 = lshr %238, 51:i64
%258:i64 = or %256, %257
%259:i64 = xor %239, %258
%260:i64 = add %250, %259
%261:i64 = shl %259, 17:i64
%262:i64 = lshr %259, 47:i64
%263:i64 = or %261, %262
%264:i64 = xor %260, %263 (hasExternalUses)
%265:i64 = xor 221:i64, %264
%266:i64 = add %255, %265
%267:i64 = shl %266, 32:i64
%268:i64 = lshr %266, 32:i64
%269:i64 = or %267, %268
%270:i64 = shl %260, 32:i64
%271:i64 = lshr %260, 32:i64
%272:i64 = or %270, %271 (hasExternalUses)
%273:i64 = shl %254, 21:i64
%274:i64 = lshr %254, 43:i64
%275:i64 = or %273, %274
%276:i64 = xor %255, %275 (hasExternalUses)
%277:i64 = add %272, %276
%278:i64 = shl %276, 16:i64
%279:i64 = lshr %276, 48:i64
%280:i64 = or %278, %279
%281:i64 = xor %277, %280 (hasExternalUses)
%282:i64 = add %269, %281 (hasExternalUses)
%283:i64 = shl %265, 13:i64
%284:i64 = lshr %264, 51:i64
%285:i64 = or %283, %284
%286:i64 = xor %266, %285
%287:i64 = add %277, %286 (hasExternalUses)
%288:i64 = shl %286, 17:i64
%289:i64 = lshr %286, 47:i64
%290:i64 = or %288, %289
%291:i64 = xor %287, %290
%292:i64 = add %282, %291 (hasExternalUses)
%293:i64 = shl %291, 13:i64
%294:i64 = lshr %291, 51:i64
%295:i64 = or %293, %294
%296:i64 = xor %292, %295 (hasExternalUses)
%297:i64 = shl %296, 17:i64
%298:i64 = lshr %296, 47:i64
%299:i64 = or %297, %298
infer %299

; *****
; For LLVM instruction:
;  %351 = xor i64 %350, %347
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250
%252:i64 = add %242, %251
%253:i64 = shl %252, 32:i64
%254:i64 = lshr %252, 32:i64
%255:i64 = or %253, %254 (hasExternalUses)
%256:i64 = shl %247, 32:i64
%257:i64 = lshr %247, 32:i64
%258:i64 = or %256, %257
%259:i64 = shl %241, 16:i64
%260:i64 = lshr %241, 48:i64
%261:i64 = or %259, %260
%262:i64 = xor %242, %261
%263:i64 = add %258, %262 (hasExternalUses)
%264:i64 = shl %262, 21:i64
%265:i64 = lshr %262, 43:i64
%266:i64 = or %264, %265
%267:i64 = xor %263, %266 (hasExternalUses)
%268:i64 = add %255, %267
%269:i64 = shl %251, 17:i64
%270:i64 = lshr %251, 47:i64
%271:i64 = or %269, %270
%272:i64 = xor %252, %271 (hasExternalUses)
%273:i64 = xor 221:i64, %272
%274:i64 = add %263, %273
%275:i64 = shl %273, 13:i64
%276:i64 = lshr %272, 51:i64
%277:i64 = or %275, %276
%278:i64 = xor %274, %277
%279:i64 = add %268, %278
%280:i64 = shl %279, 32:i64
%281:i64 = lshr %279, 32:i64
%282:i64 = or %280, %281
%283:i64 = shl %274, 32:i64
%284:i64 = lshr %274, 32:i64
%285:i64 = or %283, %284
%286:i64 = shl %267, 16:i64
%287:i64 = lshr %267, 48:i64
%288:i64 = or %286, %287
%289:i64 = xor %268, %288
%290:i64 = add %285, %289
%291:i64 = shl %289, 21:i64
%292:i64 = lshr %289, 43:i64
%293:i64 = or %291, %292
%294:i64 = xor %290, %293 (hasExternalUses)
%295:i64 = add %282, %294 (hasExternalUses)
%296:i64 = shl %278, 17:i64
%297:i64 = lshr %278, 47:i64
%298:i64 = or %296, %297
%299:i64 = xor %279, %298
%300:i64 = add %290, %299 (hasExternalUses)
%301:i64 = shl %299, 13:i64
%302:i64 = lshr %299, 51:i64
%303:i64 = or %301, %302
%304:i64 = xor %300, %303
%305:i64 = add %295, %304 (hasExternalUses)
%306:i64 = shl %304, 17:i64
%307:i64 = lshr %304, 47:i64
%308:i64 = or %306, %307
%309:i64 = xor %305, %308
infer %309

; *****
; For LLVM instruction:
;  %352 = shl i64 %347, 32
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250
%252:i64 = add %242, %251
%253:i64 = shl %252, 32:i64
%254:i64 = lshr %252, 32:i64
%255:i64 = or %253, %254 (hasExternalUses)
%256:i64 = shl %247, 32:i64
%257:i64 = lshr %247, 32:i64
%258:i64 = or %256, %257
%259:i64 = shl %241, 16:i64
%260:i64 = lshr %241, 48:i64
%261:i64 = or %259, %260
%262:i64 = xor %242, %261
%263:i64 = add %258, %262 (hasExternalUses)
%264:i64 = shl %262, 21:i64
%265:i64 = lshr %262, 43:i64
%266:i64 = or %264, %265
%267:i64 = xor %263, %266 (hasExternalUses)
%268:i64 = add %255, %267
%269:i64 = shl %251, 17:i64
%270:i64 = lshr %251, 47:i64
%271:i64 = or %269, %270
%272:i64 = xor %252, %271 (hasExternalUses)
%273:i64 = xor 221:i64, %272
%274:i64 = add %263, %273
%275:i64 = shl %273, 13:i64
%276:i64 = lshr %272, 51:i64
%277:i64 = or %275, %276
%278:i64 = xor %274, %277
%279:i64 = add %268, %278
%280:i64 = shl %279, 32:i64
%281:i64 = lshr %279, 32:i64
%282:i64 = or %280, %281
%283:i64 = shl %274, 32:i64
%284:i64 = lshr %274, 32:i64
%285:i64 = or %283, %284
%286:i64 = shl %267, 16:i64
%287:i64 = lshr %267, 48:i64
%288:i64 = or %286, %287
%289:i64 = xor %268, %288
%290:i64 = add %285, %289
%291:i64 = shl %289, 21:i64
%292:i64 = lshr %289, 43:i64
%293:i64 = or %291, %292
%294:i64 = xor %290, %293 (hasExternalUses)
%295:i64 = add %282, %294 (hasExternalUses)
%296:i64 = shl %278, 17:i64
%297:i64 = lshr %278, 47:i64
%298:i64 = or %296, %297
%299:i64 = xor %279, %298
%300:i64 = add %290, %299 (hasExternalUses)
%301:i64 = shl %299, 13:i64
%302:i64 = lshr %299, 51:i64
%303:i64 = or %301, %302
%304:i64 = xor %300, %303 (hasExternalUses)
%305:i64 = add %295, %304 (hasExternalUses)
%306:i64 = shl %305, 32:i64
infer %306

; *****
; For LLVM instruction:
;  %353 = lshr i64 %347, 32
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250
%252:i64 = add %242, %251
%253:i64 = shl %252, 32:i64
%254:i64 = lshr %252, 32:i64
%255:i64 = or %253, %254 (hasExternalUses)
%256:i64 = shl %247, 32:i64
%257:i64 = lshr %247, 32:i64
%258:i64 = or %256, %257
%259:i64 = shl %241, 16:i64
%260:i64 = lshr %241, 48:i64
%261:i64 = or %259, %260
%262:i64 = xor %242, %261
%263:i64 = add %258, %262 (hasExternalUses)
%264:i64 = shl %262, 21:i64
%265:i64 = lshr %262, 43:i64
%266:i64 = or %264, %265
%267:i64 = xor %263, %266 (hasExternalUses)
%268:i64 = add %255, %267
%269:i64 = shl %251, 17:i64
%270:i64 = lshr %251, 47:i64
%271:i64 = or %269, %270
%272:i64 = xor %252, %271 (hasExternalUses)
%273:i64 = xor 221:i64, %272
%274:i64 = add %263, %273
%275:i64 = shl %273, 13:i64
%276:i64 = lshr %272, 51:i64
%277:i64 = or %275, %276
%278:i64 = xor %274, %277
%279:i64 = add %268, %278
%280:i64 = shl %279, 32:i64
%281:i64 = lshr %279, 32:i64
%282:i64 = or %280, %281
%283:i64 = shl %274, 32:i64
%284:i64 = lshr %274, 32:i64
%285:i64 = or %283, %284
%286:i64 = shl %267, 16:i64
%287:i64 = lshr %267, 48:i64
%288:i64 = or %286, %287
%289:i64 = xor %268, %288
%290:i64 = add %285, %289
%291:i64 = shl %289, 21:i64
%292:i64 = lshr %289, 43:i64
%293:i64 = or %291, %292
%294:i64 = xor %290, %293 (hasExternalUses)
%295:i64 = add %282, %294 (hasExternalUses)
%296:i64 = shl %278, 17:i64
%297:i64 = lshr %278, 47:i64
%298:i64 = or %296, %297
%299:i64 = xor %279, %298
%300:i64 = add %290, %299 (hasExternalUses)
%301:i64 = shl %299, 13:i64
%302:i64 = lshr %299, 51:i64
%303:i64 = or %301, %302
%304:i64 = xor %300, %303 (hasExternalUses)
%305:i64 = add %295, %304 (hasExternalUses)
%306:i64 = lshr %305, 32:i64
infer %306

; *****
; For LLVM instruction:
;  %354 = or i64 %353, %352
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250
%252:i64 = add %242, %251
%253:i64 = shl %252, 32:i64
%254:i64 = lshr %252, 32:i64
%255:i64 = or %253, %254 (hasExternalUses)
%256:i64 = shl %247, 32:i64
%257:i64 = lshr %247, 32:i64
%258:i64 = or %256, %257
%259:i64 = shl %241, 16:i64
%260:i64 = lshr %241, 48:i64
%261:i64 = or %259, %260
%262:i64 = xor %242, %261
%263:i64 = add %258, %262 (hasExternalUses)
%264:i64 = shl %262, 21:i64
%265:i64 = lshr %262, 43:i64
%266:i64 = or %264, %265
%267:i64 = xor %263, %266 (hasExternalUses)
%268:i64 = add %255, %267
%269:i64 = shl %251, 17:i64
%270:i64 = lshr %251, 47:i64
%271:i64 = or %269, %270
%272:i64 = xor %252, %271 (hasExternalUses)
%273:i64 = xor 221:i64, %272
%274:i64 = add %263, %273
%275:i64 = shl %273, 13:i64
%276:i64 = lshr %272, 51:i64
%277:i64 = or %275, %276
%278:i64 = xor %274, %277
%279:i64 = add %268, %278
%280:i64 = shl %279, 32:i64
%281:i64 = lshr %279, 32:i64
%282:i64 = or %280, %281
%283:i64 = shl %274, 32:i64
%284:i64 = lshr %274, 32:i64
%285:i64 = or %283, %284
%286:i64 = shl %267, 16:i64
%287:i64 = lshr %267, 48:i64
%288:i64 = or %286, %287
%289:i64 = xor %268, %288
%290:i64 = add %285, %289
%291:i64 = shl %289, 21:i64
%292:i64 = lshr %289, 43:i64
%293:i64 = or %291, %292
%294:i64 = xor %290, %293 (hasExternalUses)
%295:i64 = add %282, %294 (hasExternalUses)
%296:i64 = shl %278, 17:i64
%297:i64 = lshr %278, 47:i64
%298:i64 = or %296, %297
%299:i64 = xor %279, %298
%300:i64 = add %290, %299 (hasExternalUses)
%301:i64 = shl %299, 13:i64
%302:i64 = lshr %299, 51:i64
%303:i64 = or %301, %302
%304:i64 = xor %300, %303 (hasExternalUses)
%305:i64 = add %295, %304 (hasExternalUses)
%306:i64 = shl %305, 32:i64
%307:i64 = lshr %305, 32:i64
%308:i64 = or %306, %307
infer %308

; *****
; For LLVM instruction:
;  %355 = add i64 %351, %342
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237
%239:i64 = add %229, %238
%240:i64 = shl %239, 32:i64
%241:i64 = lshr %239, 32:i64
%242:i64 = or %240, %241
%243:i64 = shl %234, 32:i64
%244:i64 = lshr %234, 32:i64
%245:i64 = or %243, %244
%246:i64 = shl %228, 21:i64
%247:i64 = lshr %228, 43:i64
%248:i64 = or %246, %247
%249:i64 = xor %229, %248
%250:i64 = add %245, %249
%251:i64 = shl %249, 16:i64
%252:i64 = lshr %249, 48:i64
%253:i64 = or %251, %252
%254:i64 = xor %250, %253
%255:i64 = add %242, %254 (hasExternalUses)
%256:i64 = shl %238, 13:i64
%257:i64 = lshr %238, 51:i64
%258:i64 = or %256, %257
%259:i64 = xor %239, %258
%260:i64 = add %250, %259
%261:i64 = shl %259, 17:i64
%262:i64 = lshr %259, 47:i64
%263:i64 = or %261, %262
%264:i64 = xor %260, %263 (hasExternalUses)
%265:i64 = xor 221:i64, %264
%266:i64 = add %255, %265
%267:i64 = shl %266, 32:i64
%268:i64 = lshr %266, 32:i64
%269:i64 = or %267, %268
%270:i64 = shl %260, 32:i64
%271:i64 = lshr %260, 32:i64
%272:i64 = or %270, %271 (hasExternalUses)
%273:i64 = shl %254, 21:i64
%274:i64 = lshr %254, 43:i64
%275:i64 = or %273, %274
%276:i64 = xor %255, %275 (hasExternalUses)
%277:i64 = add %272, %276
%278:i64 = shl %276, 16:i64
%279:i64 = lshr %276, 48:i64
%280:i64 = or %278, %279
%281:i64 = xor %277, %280
%282:i64 = add %269, %281
%283:i64 = shl %265, 13:i64
%284:i64 = lshr %264, 51:i64
%285:i64 = or %283, %284
%286:i64 = xor %266, %285
%287:i64 = add %277, %286
%288:i64 = shl %286, 17:i64
%289:i64 = lshr %286, 47:i64
%290:i64 = or %288, %289
%291:i64 = xor %287, %290
%292:i64 = add %282, %291
%293:i64 = shl %292, 32:i64
%294:i64 = lshr %292, 32:i64
%295:i64 = or %293, %294
%296:i64 = shl %287, 32:i64
%297:i64 = lshr %287, 32:i64
%298:i64 = or %296, %297
%299:i64 = shl %281, 21:i64
%300:i64 = lshr %281, 43:i64
%301:i64 = or %299, %300
%302:i64 = xor %282, %301
%303:i64 = add %298, %302
%304:i64 = shl %302, 16:i64
%305:i64 = lshr %302, 48:i64
%306:i64 = or %304, %305
%307:i64 = xor %303, %306 (hasExternalUses)
%308:i64 = add %295, %307 (hasExternalUses)
%309:i64 = shl %291, 13:i64
%310:i64 = lshr %291, 51:i64
%311:i64 = or %309, %310
%312:i64 = xor %292, %311
%313:i64 = add %303, %312 (hasExternalUses)
%314:i64 = shl %312, 17:i64
%315:i64 = lshr %312, 47:i64
%316:i64 = or %314, %315
%317:i64 = xor %313, %316 (hasExternalUses)
%318:i64 = add %308, %317
infer %318

; *****
; For LLVM instruction:
;  %356 = shl i64 %351, 13
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250
%252:i64 = add %242, %251
%253:i64 = shl %252, 32:i64
%254:i64 = lshr %252, 32:i64
%255:i64 = or %253, %254 (hasExternalUses)
%256:i64 = shl %247, 32:i64
%257:i64 = lshr %247, 32:i64
%258:i64 = or %256, %257
%259:i64 = shl %241, 16:i64
%260:i64 = lshr %241, 48:i64
%261:i64 = or %259, %260
%262:i64 = xor %242, %261
%263:i64 = add %258, %262 (hasExternalUses)
%264:i64 = shl %262, 21:i64
%265:i64 = lshr %262, 43:i64
%266:i64 = or %264, %265
%267:i64 = xor %263, %266 (hasExternalUses)
%268:i64 = add %255, %267
%269:i64 = shl %251, 17:i64
%270:i64 = lshr %251, 47:i64
%271:i64 = or %269, %270
%272:i64 = xor %252, %271 (hasExternalUses)
%273:i64 = xor 221:i64, %272
%274:i64 = add %263, %273
%275:i64 = shl %273, 13:i64
%276:i64 = lshr %272, 51:i64
%277:i64 = or %275, %276
%278:i64 = xor %274, %277
%279:i64 = add %268, %278
%280:i64 = shl %279, 32:i64
%281:i64 = lshr %279, 32:i64
%282:i64 = or %280, %281
%283:i64 = shl %274, 32:i64
%284:i64 = lshr %274, 32:i64
%285:i64 = or %283, %284
%286:i64 = shl %267, 16:i64
%287:i64 = lshr %267, 48:i64
%288:i64 = or %286, %287
%289:i64 = xor %268, %288
%290:i64 = add %285, %289
%291:i64 = shl %289, 21:i64
%292:i64 = lshr %289, 43:i64
%293:i64 = or %291, %292
%294:i64 = xor %290, %293 (hasExternalUses)
%295:i64 = add %282, %294 (hasExternalUses)
%296:i64 = shl %278, 17:i64
%297:i64 = lshr %278, 47:i64
%298:i64 = or %296, %297
%299:i64 = xor %279, %298
%300:i64 = add %290, %299 (hasExternalUses)
%301:i64 = shl %299, 13:i64
%302:i64 = lshr %299, 51:i64
%303:i64 = or %301, %302
%304:i64 = xor %300, %303
%305:i64 = add %295, %304 (hasExternalUses)
%306:i64 = shl %304, 17:i64
%307:i64 = lshr %304, 47:i64
%308:i64 = or %306, %307
%309:i64 = xor %305, %308 (hasExternalUses)
%310:i64 = shl %309, 13:i64
infer %310

; *****
; For LLVM instruction:
;  %357 = lshr i64 %351, 51
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250
%252:i64 = add %242, %251
%253:i64 = shl %252, 32:i64
%254:i64 = lshr %252, 32:i64
%255:i64 = or %253, %254 (hasExternalUses)
%256:i64 = shl %247, 32:i64
%257:i64 = lshr %247, 32:i64
%258:i64 = or %256, %257
%259:i64 = shl %241, 16:i64
%260:i64 = lshr %241, 48:i64
%261:i64 = or %259, %260
%262:i64 = xor %242, %261
%263:i64 = add %258, %262 (hasExternalUses)
%264:i64 = shl %262, 21:i64
%265:i64 = lshr %262, 43:i64
%266:i64 = or %264, %265
%267:i64 = xor %263, %266 (hasExternalUses)
%268:i64 = add %255, %267
%269:i64 = shl %251, 17:i64
%270:i64 = lshr %251, 47:i64
%271:i64 = or %269, %270
%272:i64 = xor %252, %271 (hasExternalUses)
%273:i64 = xor 221:i64, %272
%274:i64 = add %263, %273
%275:i64 = shl %273, 13:i64
%276:i64 = lshr %272, 51:i64
%277:i64 = or %275, %276
%278:i64 = xor %274, %277
%279:i64 = add %268, %278
%280:i64 = shl %279, 32:i64
%281:i64 = lshr %279, 32:i64
%282:i64 = or %280, %281
%283:i64 = shl %274, 32:i64
%284:i64 = lshr %274, 32:i64
%285:i64 = or %283, %284
%286:i64 = shl %267, 16:i64
%287:i64 = lshr %267, 48:i64
%288:i64 = or %286, %287
%289:i64 = xor %268, %288
%290:i64 = add %285, %289
%291:i64 = shl %289, 21:i64
%292:i64 = lshr %289, 43:i64
%293:i64 = or %291, %292
%294:i64 = xor %290, %293 (hasExternalUses)
%295:i64 = add %282, %294 (hasExternalUses)
%296:i64 = shl %278, 17:i64
%297:i64 = lshr %278, 47:i64
%298:i64 = or %296, %297
%299:i64 = xor %279, %298
%300:i64 = add %290, %299 (hasExternalUses)
%301:i64 = shl %299, 13:i64
%302:i64 = lshr %299, 51:i64
%303:i64 = or %301, %302
%304:i64 = xor %300, %303
%305:i64 = add %295, %304 (hasExternalUses)
%306:i64 = shl %304, 17:i64
%307:i64 = lshr %304, 47:i64
%308:i64 = or %306, %307
%309:i64 = xor %305, %308 (hasExternalUses)
%310:i64 = lshr %309, 51:i64
infer %310

; *****
; For LLVM instruction:
;  %358 = or i64 %357, %356
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250
%252:i64 = add %242, %251
%253:i64 = shl %252, 32:i64
%254:i64 = lshr %252, 32:i64
%255:i64 = or %253, %254 (hasExternalUses)
%256:i64 = shl %247, 32:i64
%257:i64 = lshr %247, 32:i64
%258:i64 = or %256, %257
%259:i64 = shl %241, 16:i64
%260:i64 = lshr %241, 48:i64
%261:i64 = or %259, %260
%262:i64 = xor %242, %261
%263:i64 = add %258, %262 (hasExternalUses)
%264:i64 = shl %262, 21:i64
%265:i64 = lshr %262, 43:i64
%266:i64 = or %264, %265
%267:i64 = xor %263, %266 (hasExternalUses)
%268:i64 = add %255, %267
%269:i64 = shl %251, 17:i64
%270:i64 = lshr %251, 47:i64
%271:i64 = or %269, %270
%272:i64 = xor %252, %271 (hasExternalUses)
%273:i64 = xor 221:i64, %272
%274:i64 = add %263, %273
%275:i64 = shl %273, 13:i64
%276:i64 = lshr %272, 51:i64
%277:i64 = or %275, %276
%278:i64 = xor %274, %277
%279:i64 = add %268, %278
%280:i64 = shl %279, 32:i64
%281:i64 = lshr %279, 32:i64
%282:i64 = or %280, %281
%283:i64 = shl %274, 32:i64
%284:i64 = lshr %274, 32:i64
%285:i64 = or %283, %284
%286:i64 = shl %267, 16:i64
%287:i64 = lshr %267, 48:i64
%288:i64 = or %286, %287
%289:i64 = xor %268, %288
%290:i64 = add %285, %289
%291:i64 = shl %289, 21:i64
%292:i64 = lshr %289, 43:i64
%293:i64 = or %291, %292
%294:i64 = xor %290, %293 (hasExternalUses)
%295:i64 = add %282, %294 (hasExternalUses)
%296:i64 = shl %278, 17:i64
%297:i64 = lshr %278, 47:i64
%298:i64 = or %296, %297
%299:i64 = xor %279, %298
%300:i64 = add %290, %299 (hasExternalUses)
%301:i64 = shl %299, 13:i64
%302:i64 = lshr %299, 51:i64
%303:i64 = or %301, %302
%304:i64 = xor %300, %303
%305:i64 = add %295, %304 (hasExternalUses)
%306:i64 = shl %304, 17:i64
%307:i64 = lshr %304, 47:i64
%308:i64 = or %306, %307
%309:i64 = xor %305, %308 (hasExternalUses)
%310:i64 = shl %309, 13:i64
%311:i64 = lshr %309, 51:i64
%312:i64 = or %310, %311
infer %312

; *****
; For LLVM instruction:
;  %359 = xor i64 %358, %355
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237
%239:i64 = add %229, %238
%240:i64 = shl %239, 32:i64
%241:i64 = lshr %239, 32:i64
%242:i64 = or %240, %241
%243:i64 = shl %234, 32:i64
%244:i64 = lshr %234, 32:i64
%245:i64 = or %243, %244
%246:i64 = shl %228, 21:i64
%247:i64 = lshr %228, 43:i64
%248:i64 = or %246, %247
%249:i64 = xor %229, %248
%250:i64 = add %245, %249
%251:i64 = shl %249, 16:i64
%252:i64 = lshr %249, 48:i64
%253:i64 = or %251, %252
%254:i64 = xor %250, %253
%255:i64 = add %242, %254 (hasExternalUses)
%256:i64 = shl %238, 13:i64
%257:i64 = lshr %238, 51:i64
%258:i64 = or %256, %257
%259:i64 = xor %239, %258
%260:i64 = add %250, %259
%261:i64 = shl %259, 17:i64
%262:i64 = lshr %259, 47:i64
%263:i64 = or %261, %262
%264:i64 = xor %260, %263 (hasExternalUses)
%265:i64 = xor 221:i64, %264
%266:i64 = add %255, %265
%267:i64 = shl %266, 32:i64
%268:i64 = lshr %266, 32:i64
%269:i64 = or %267, %268
%270:i64 = shl %260, 32:i64
%271:i64 = lshr %260, 32:i64
%272:i64 = or %270, %271 (hasExternalUses)
%273:i64 = shl %254, 21:i64
%274:i64 = lshr %254, 43:i64
%275:i64 = or %273, %274
%276:i64 = xor %255, %275 (hasExternalUses)
%277:i64 = add %272, %276
%278:i64 = shl %276, 16:i64
%279:i64 = lshr %276, 48:i64
%280:i64 = or %278, %279
%281:i64 = xor %277, %280
%282:i64 = add %269, %281
%283:i64 = shl %265, 13:i64
%284:i64 = lshr %264, 51:i64
%285:i64 = or %283, %284
%286:i64 = xor %266, %285
%287:i64 = add %277, %286
%288:i64 = shl %286, 17:i64
%289:i64 = lshr %286, 47:i64
%290:i64 = or %288, %289
%291:i64 = xor %287, %290
%292:i64 = add %282, %291
%293:i64 = shl %292, 32:i64
%294:i64 = lshr %292, 32:i64
%295:i64 = or %293, %294
%296:i64 = shl %287, 32:i64
%297:i64 = lshr %287, 32:i64
%298:i64 = or %296, %297
%299:i64 = shl %281, 21:i64
%300:i64 = lshr %281, 43:i64
%301:i64 = or %299, %300
%302:i64 = xor %282, %301
%303:i64 = add %298, %302
%304:i64 = shl %302, 16:i64
%305:i64 = lshr %302, 48:i64
%306:i64 = or %304, %305
%307:i64 = xor %303, %306 (hasExternalUses)
%308:i64 = add %295, %307 (hasExternalUses)
%309:i64 = shl %291, 13:i64
%310:i64 = lshr %291, 51:i64
%311:i64 = or %309, %310
%312:i64 = xor %292, %311
%313:i64 = add %303, %312 (hasExternalUses)
%314:i64 = shl %312, 17:i64
%315:i64 = lshr %312, 47:i64
%316:i64 = or %314, %315
%317:i64 = xor %313, %316
%318:i64 = add %308, %317 (hasExternalUses)
%319:i64 = shl %317, 13:i64
%320:i64 = lshr %317, 51:i64
%321:i64 = or %319, %320
%322:i64 = xor %318, %321
infer %322

; *****
; For LLVM instruction:
;  %360 = shl i64 %355, 32
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237
%239:i64 = add %229, %238
%240:i64 = shl %239, 32:i64
%241:i64 = lshr %239, 32:i64
%242:i64 = or %240, %241
%243:i64 = shl %234, 32:i64
%244:i64 = lshr %234, 32:i64
%245:i64 = or %243, %244
%246:i64 = shl %228, 21:i64
%247:i64 = lshr %228, 43:i64
%248:i64 = or %246, %247
%249:i64 = xor %229, %248
%250:i64 = add %245, %249
%251:i64 = shl %249, 16:i64
%252:i64 = lshr %249, 48:i64
%253:i64 = or %251, %252
%254:i64 = xor %250, %253
%255:i64 = add %242, %254 (hasExternalUses)
%256:i64 = shl %238, 13:i64
%257:i64 = lshr %238, 51:i64
%258:i64 = or %256, %257
%259:i64 = xor %239, %258
%260:i64 = add %250, %259
%261:i64 = shl %259, 17:i64
%262:i64 = lshr %259, 47:i64
%263:i64 = or %261, %262
%264:i64 = xor %260, %263 (hasExternalUses)
%265:i64 = xor 221:i64, %264
%266:i64 = add %255, %265
%267:i64 = shl %266, 32:i64
%268:i64 = lshr %266, 32:i64
%269:i64 = or %267, %268
%270:i64 = shl %260, 32:i64
%271:i64 = lshr %260, 32:i64
%272:i64 = or %270, %271 (hasExternalUses)
%273:i64 = shl %254, 21:i64
%274:i64 = lshr %254, 43:i64
%275:i64 = or %273, %274
%276:i64 = xor %255, %275 (hasExternalUses)
%277:i64 = add %272, %276
%278:i64 = shl %276, 16:i64
%279:i64 = lshr %276, 48:i64
%280:i64 = or %278, %279
%281:i64 = xor %277, %280
%282:i64 = add %269, %281
%283:i64 = shl %265, 13:i64
%284:i64 = lshr %264, 51:i64
%285:i64 = or %283, %284
%286:i64 = xor %266, %285
%287:i64 = add %277, %286
%288:i64 = shl %286, 17:i64
%289:i64 = lshr %286, 47:i64
%290:i64 = or %288, %289
%291:i64 = xor %287, %290
%292:i64 = add %282, %291
%293:i64 = shl %292, 32:i64
%294:i64 = lshr %292, 32:i64
%295:i64 = or %293, %294
%296:i64 = shl %287, 32:i64
%297:i64 = lshr %287, 32:i64
%298:i64 = or %296, %297
%299:i64 = shl %281, 21:i64
%300:i64 = lshr %281, 43:i64
%301:i64 = or %299, %300
%302:i64 = xor %282, %301
%303:i64 = add %298, %302
%304:i64 = shl %302, 16:i64
%305:i64 = lshr %302, 48:i64
%306:i64 = or %304, %305
%307:i64 = xor %303, %306 (hasExternalUses)
%308:i64 = add %295, %307 (hasExternalUses)
%309:i64 = shl %291, 13:i64
%310:i64 = lshr %291, 51:i64
%311:i64 = or %309, %310
%312:i64 = xor %292, %311
%313:i64 = add %303, %312 (hasExternalUses)
%314:i64 = shl %312, 17:i64
%315:i64 = lshr %312, 47:i64
%316:i64 = or %314, %315
%317:i64 = xor %313, %316 (hasExternalUses)
%318:i64 = add %308, %317 (hasExternalUses)
%319:i64 = shl %318, 32:i64
infer %319

; *****
; For LLVM instruction:
;  %361 = lshr i64 %355, 32
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237
%239:i64 = add %229, %238
%240:i64 = shl %239, 32:i64
%241:i64 = lshr %239, 32:i64
%242:i64 = or %240, %241
%243:i64 = shl %234, 32:i64
%244:i64 = lshr %234, 32:i64
%245:i64 = or %243, %244
%246:i64 = shl %228, 21:i64
%247:i64 = lshr %228, 43:i64
%248:i64 = or %246, %247
%249:i64 = xor %229, %248
%250:i64 = add %245, %249
%251:i64 = shl %249, 16:i64
%252:i64 = lshr %249, 48:i64
%253:i64 = or %251, %252
%254:i64 = xor %250, %253
%255:i64 = add %242, %254 (hasExternalUses)
%256:i64 = shl %238, 13:i64
%257:i64 = lshr %238, 51:i64
%258:i64 = or %256, %257
%259:i64 = xor %239, %258
%260:i64 = add %250, %259
%261:i64 = shl %259, 17:i64
%262:i64 = lshr %259, 47:i64
%263:i64 = or %261, %262
%264:i64 = xor %260, %263 (hasExternalUses)
%265:i64 = xor 221:i64, %264
%266:i64 = add %255, %265
%267:i64 = shl %266, 32:i64
%268:i64 = lshr %266, 32:i64
%269:i64 = or %267, %268
%270:i64 = shl %260, 32:i64
%271:i64 = lshr %260, 32:i64
%272:i64 = or %270, %271 (hasExternalUses)
%273:i64 = shl %254, 21:i64
%274:i64 = lshr %254, 43:i64
%275:i64 = or %273, %274
%276:i64 = xor %255, %275 (hasExternalUses)
%277:i64 = add %272, %276
%278:i64 = shl %276, 16:i64
%279:i64 = lshr %276, 48:i64
%280:i64 = or %278, %279
%281:i64 = xor %277, %280
%282:i64 = add %269, %281
%283:i64 = shl %265, 13:i64
%284:i64 = lshr %264, 51:i64
%285:i64 = or %283, %284
%286:i64 = xor %266, %285
%287:i64 = add %277, %286
%288:i64 = shl %286, 17:i64
%289:i64 = lshr %286, 47:i64
%290:i64 = or %288, %289
%291:i64 = xor %287, %290
%292:i64 = add %282, %291
%293:i64 = shl %292, 32:i64
%294:i64 = lshr %292, 32:i64
%295:i64 = or %293, %294
%296:i64 = shl %287, 32:i64
%297:i64 = lshr %287, 32:i64
%298:i64 = or %296, %297
%299:i64 = shl %281, 21:i64
%300:i64 = lshr %281, 43:i64
%301:i64 = or %299, %300
%302:i64 = xor %282, %301
%303:i64 = add %298, %302
%304:i64 = shl %302, 16:i64
%305:i64 = lshr %302, 48:i64
%306:i64 = or %304, %305
%307:i64 = xor %303, %306 (hasExternalUses)
%308:i64 = add %295, %307 (hasExternalUses)
%309:i64 = shl %291, 13:i64
%310:i64 = lshr %291, 51:i64
%311:i64 = or %309, %310
%312:i64 = xor %292, %311
%313:i64 = add %303, %312 (hasExternalUses)
%314:i64 = shl %312, 17:i64
%315:i64 = lshr %312, 47:i64
%316:i64 = or %314, %315
%317:i64 = xor %313, %316 (hasExternalUses)
%318:i64 = add %308, %317 (hasExternalUses)
%319:i64 = lshr %318, 32:i64
infer %319

; *****
; For LLVM instruction:
;  %362 = or i64 %361, %360
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237
%239:i64 = add %229, %238
%240:i64 = shl %239, 32:i64
%241:i64 = lshr %239, 32:i64
%242:i64 = or %240, %241
%243:i64 = shl %234, 32:i64
%244:i64 = lshr %234, 32:i64
%245:i64 = or %243, %244
%246:i64 = shl %228, 21:i64
%247:i64 = lshr %228, 43:i64
%248:i64 = or %246, %247
%249:i64 = xor %229, %248
%250:i64 = add %245, %249
%251:i64 = shl %249, 16:i64
%252:i64 = lshr %249, 48:i64
%253:i64 = or %251, %252
%254:i64 = xor %250, %253
%255:i64 = add %242, %254 (hasExternalUses)
%256:i64 = shl %238, 13:i64
%257:i64 = lshr %238, 51:i64
%258:i64 = or %256, %257
%259:i64 = xor %239, %258
%260:i64 = add %250, %259
%261:i64 = shl %259, 17:i64
%262:i64 = lshr %259, 47:i64
%263:i64 = or %261, %262
%264:i64 = xor %260, %263 (hasExternalUses)
%265:i64 = xor 221:i64, %264
%266:i64 = add %255, %265
%267:i64 = shl %266, 32:i64
%268:i64 = lshr %266, 32:i64
%269:i64 = or %267, %268
%270:i64 = shl %260, 32:i64
%271:i64 = lshr %260, 32:i64
%272:i64 = or %270, %271 (hasExternalUses)
%273:i64 = shl %254, 21:i64
%274:i64 = lshr %254, 43:i64
%275:i64 = or %273, %274
%276:i64 = xor %255, %275 (hasExternalUses)
%277:i64 = add %272, %276
%278:i64 = shl %276, 16:i64
%279:i64 = lshr %276, 48:i64
%280:i64 = or %278, %279
%281:i64 = xor %277, %280
%282:i64 = add %269, %281
%283:i64 = shl %265, 13:i64
%284:i64 = lshr %264, 51:i64
%285:i64 = or %283, %284
%286:i64 = xor %266, %285
%287:i64 = add %277, %286
%288:i64 = shl %286, 17:i64
%289:i64 = lshr %286, 47:i64
%290:i64 = or %288, %289
%291:i64 = xor %287, %290
%292:i64 = add %282, %291
%293:i64 = shl %292, 32:i64
%294:i64 = lshr %292, 32:i64
%295:i64 = or %293, %294
%296:i64 = shl %287, 32:i64
%297:i64 = lshr %287, 32:i64
%298:i64 = or %296, %297
%299:i64 = shl %281, 21:i64
%300:i64 = lshr %281, 43:i64
%301:i64 = or %299, %300
%302:i64 = xor %282, %301
%303:i64 = add %298, %302
%304:i64 = shl %302, 16:i64
%305:i64 = lshr %302, 48:i64
%306:i64 = or %304, %305
%307:i64 = xor %303, %306 (hasExternalUses)
%308:i64 = add %295, %307 (hasExternalUses)
%309:i64 = shl %291, 13:i64
%310:i64 = lshr %291, 51:i64
%311:i64 = or %309, %310
%312:i64 = xor %292, %311
%313:i64 = add %303, %312 (hasExternalUses)
%314:i64 = shl %312, 17:i64
%315:i64 = lshr %312, 47:i64
%316:i64 = or %314, %315
%317:i64 = xor %313, %316 (hasExternalUses)
%318:i64 = add %308, %317 (hasExternalUses)
%319:i64 = shl %318, 32:i64
%320:i64 = lshr %318, 32:i64
%321:i64 = or %319, %320
infer %321

; *****
; For LLVM instruction:
;  %363 = add i64 %346, %354
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250
%252:i64 = add %242, %251
%253:i64 = shl %252, 32:i64
%254:i64 = lshr %252, 32:i64
%255:i64 = or %253, %254 (hasExternalUses)
%256:i64 = shl %247, 32:i64
%257:i64 = lshr %247, 32:i64
%258:i64 = or %256, %257
%259:i64 = shl %241, 16:i64
%260:i64 = lshr %241, 48:i64
%261:i64 = or %259, %260
%262:i64 = xor %242, %261
%263:i64 = add %258, %262 (hasExternalUses)
%264:i64 = shl %262, 21:i64
%265:i64 = lshr %262, 43:i64
%266:i64 = or %264, %265
%267:i64 = xor %263, %266 (hasExternalUses)
%268:i64 = add %255, %267
%269:i64 = shl %251, 17:i64
%270:i64 = lshr %251, 47:i64
%271:i64 = or %269, %270
%272:i64 = xor %252, %271 (hasExternalUses)
%273:i64 = xor 221:i64, %272
%274:i64 = add %263, %273
%275:i64 = shl %273, 13:i64
%276:i64 = lshr %272, 51:i64
%277:i64 = or %275, %276
%278:i64 = xor %274, %277
%279:i64 = add %268, %278
%280:i64 = shl %279, 32:i64
%281:i64 = lshr %279, 32:i64
%282:i64 = or %280, %281
%283:i64 = shl %274, 32:i64
%284:i64 = lshr %274, 32:i64
%285:i64 = or %283, %284
%286:i64 = shl %267, 16:i64
%287:i64 = lshr %267, 48:i64
%288:i64 = or %286, %287
%289:i64 = xor %268, %288
%290:i64 = add %285, %289
%291:i64 = shl %289, 21:i64
%292:i64 = lshr %289, 43:i64
%293:i64 = or %291, %292
%294:i64 = xor %290, %293
%295:i64 = add %282, %294
%296:i64 = shl %278, 17:i64
%297:i64 = lshr %278, 47:i64
%298:i64 = or %296, %297
%299:i64 = xor %279, %298
%300:i64 = add %290, %299
%301:i64 = shl %299, 13:i64
%302:i64 = lshr %299, 51:i64
%303:i64 = or %301, %302
%304:i64 = xor %300, %303 (hasExternalUses)
%305:i64 = add %295, %304 (hasExternalUses)
%306:i64 = shl %305, 32:i64
%307:i64 = lshr %305, 32:i64
%308:i64 = or %306, %307
%309:i64 = shl %300, 32:i64
%310:i64 = lshr %300, 32:i64
%311:i64 = or %309, %310
%312:i64 = shl %294, 16:i64
%313:i64 = lshr %294, 48:i64
%314:i64 = or %312, %313
%315:i64 = xor %295, %314
%316:i64 = add %311, %315 (hasExternalUses)
%317:i64 = shl %315, 21:i64
%318:i64 = lshr %315, 43:i64
%319:i64 = or %317, %318
%320:i64 = xor %316, %319 (hasExternalUses)
%321:i64 = add %308, %320
infer %321

; *****
; For LLVM instruction:
;  %364 = shl i64 %346, 16
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237
%239:i64 = add %229, %238
%240:i64 = shl %239, 32:i64
%241:i64 = lshr %239, 32:i64
%242:i64 = or %240, %241
%243:i64 = shl %234, 32:i64
%244:i64 = lshr %234, 32:i64
%245:i64 = or %243, %244
%246:i64 = shl %228, 21:i64
%247:i64 = lshr %228, 43:i64
%248:i64 = or %246, %247
%249:i64 = xor %229, %248
%250:i64 = add %245, %249
%251:i64 = shl %249, 16:i64
%252:i64 = lshr %249, 48:i64
%253:i64 = or %251, %252
%254:i64 = xor %250, %253
%255:i64 = add %242, %254 (hasExternalUses)
%256:i64 = shl %238, 13:i64
%257:i64 = lshr %238, 51:i64
%258:i64 = or %256, %257
%259:i64 = xor %239, %258
%260:i64 = add %250, %259
%261:i64 = shl %259, 17:i64
%262:i64 = lshr %259, 47:i64
%263:i64 = or %261, %262
%264:i64 = xor %260, %263 (hasExternalUses)
%265:i64 = xor 221:i64, %264
%266:i64 = add %255, %265
%267:i64 = shl %266, 32:i64
%268:i64 = lshr %266, 32:i64
%269:i64 = or %267, %268
%270:i64 = shl %260, 32:i64
%271:i64 = lshr %260, 32:i64
%272:i64 = or %270, %271 (hasExternalUses)
%273:i64 = shl %254, 21:i64
%274:i64 = lshr %254, 43:i64
%275:i64 = or %273, %274
%276:i64 = xor %255, %275 (hasExternalUses)
%277:i64 = add %272, %276
%278:i64 = shl %276, 16:i64
%279:i64 = lshr %276, 48:i64
%280:i64 = or %278, %279
%281:i64 = xor %277, %280
%282:i64 = add %269, %281
%283:i64 = shl %265, 13:i64
%284:i64 = lshr %264, 51:i64
%285:i64 = or %283, %284
%286:i64 = xor %266, %285
%287:i64 = add %277, %286
%288:i64 = shl %286, 17:i64
%289:i64 = lshr %286, 47:i64
%290:i64 = or %288, %289
%291:i64 = xor %287, %290 (hasExternalUses)
%292:i64 = add %282, %291 (hasExternalUses)
%293:i64 = shl %292, 32:i64
%294:i64 = lshr %292, 32:i64
%295:i64 = or %293, %294
%296:i64 = shl %287, 32:i64
%297:i64 = lshr %287, 32:i64
%298:i64 = or %296, %297
%299:i64 = shl %281, 21:i64
%300:i64 = lshr %281, 43:i64
%301:i64 = or %299, %300
%302:i64 = xor %282, %301
%303:i64 = add %298, %302 (hasExternalUses)
%304:i64 = shl %302, 16:i64
%305:i64 = lshr %302, 48:i64
%306:i64 = or %304, %305
%307:i64 = xor %303, %306
%308:i64 = add %295, %307 (hasExternalUses)
%309:i64 = shl %307, 21:i64
%310:i64 = lshr %307, 43:i64
%311:i64 = or %309, %310
%312:i64 = xor %308, %311 (hasExternalUses)
%313:i64 = shl %312, 16:i64
infer %313

; *****
; For LLVM instruction:
;  %365 = lshr i64 %346, 48
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237
%239:i64 = add %229, %238
%240:i64 = shl %239, 32:i64
%241:i64 = lshr %239, 32:i64
%242:i64 = or %240, %241
%243:i64 = shl %234, 32:i64
%244:i64 = lshr %234, 32:i64
%245:i64 = or %243, %244
%246:i64 = shl %228, 21:i64
%247:i64 = lshr %228, 43:i64
%248:i64 = or %246, %247
%249:i64 = xor %229, %248
%250:i64 = add %245, %249
%251:i64 = shl %249, 16:i64
%252:i64 = lshr %249, 48:i64
%253:i64 = or %251, %252
%254:i64 = xor %250, %253
%255:i64 = add %242, %254 (hasExternalUses)
%256:i64 = shl %238, 13:i64
%257:i64 = lshr %238, 51:i64
%258:i64 = or %256, %257
%259:i64 = xor %239, %258
%260:i64 = add %250, %259
%261:i64 = shl %259, 17:i64
%262:i64 = lshr %259, 47:i64
%263:i64 = or %261, %262
%264:i64 = xor %260, %263 (hasExternalUses)
%265:i64 = xor 221:i64, %264
%266:i64 = add %255, %265
%267:i64 = shl %266, 32:i64
%268:i64 = lshr %266, 32:i64
%269:i64 = or %267, %268
%270:i64 = shl %260, 32:i64
%271:i64 = lshr %260, 32:i64
%272:i64 = or %270, %271 (hasExternalUses)
%273:i64 = shl %254, 21:i64
%274:i64 = lshr %254, 43:i64
%275:i64 = or %273, %274
%276:i64 = xor %255, %275 (hasExternalUses)
%277:i64 = add %272, %276
%278:i64 = shl %276, 16:i64
%279:i64 = lshr %276, 48:i64
%280:i64 = or %278, %279
%281:i64 = xor %277, %280
%282:i64 = add %269, %281
%283:i64 = shl %265, 13:i64
%284:i64 = lshr %264, 51:i64
%285:i64 = or %283, %284
%286:i64 = xor %266, %285
%287:i64 = add %277, %286
%288:i64 = shl %286, 17:i64
%289:i64 = lshr %286, 47:i64
%290:i64 = or %288, %289
%291:i64 = xor %287, %290 (hasExternalUses)
%292:i64 = add %282, %291 (hasExternalUses)
%293:i64 = shl %292, 32:i64
%294:i64 = lshr %292, 32:i64
%295:i64 = or %293, %294
%296:i64 = shl %287, 32:i64
%297:i64 = lshr %287, 32:i64
%298:i64 = or %296, %297
%299:i64 = shl %281, 21:i64
%300:i64 = lshr %281, 43:i64
%301:i64 = or %299, %300
%302:i64 = xor %282, %301
%303:i64 = add %298, %302 (hasExternalUses)
%304:i64 = shl %302, 16:i64
%305:i64 = lshr %302, 48:i64
%306:i64 = or %304, %305
%307:i64 = xor %303, %306
%308:i64 = add %295, %307 (hasExternalUses)
%309:i64 = shl %307, 21:i64
%310:i64 = lshr %307, 43:i64
%311:i64 = or %309, %310
%312:i64 = xor %308, %311 (hasExternalUses)
%313:i64 = lshr %312, 48:i64
infer %313

; *****
; For LLVM instruction:
;  %366 = or i64 %365, %364
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237
%239:i64 = add %229, %238
%240:i64 = shl %239, 32:i64
%241:i64 = lshr %239, 32:i64
%242:i64 = or %240, %241
%243:i64 = shl %234, 32:i64
%244:i64 = lshr %234, 32:i64
%245:i64 = or %243, %244
%246:i64 = shl %228, 21:i64
%247:i64 = lshr %228, 43:i64
%248:i64 = or %246, %247
%249:i64 = xor %229, %248
%250:i64 = add %245, %249
%251:i64 = shl %249, 16:i64
%252:i64 = lshr %249, 48:i64
%253:i64 = or %251, %252
%254:i64 = xor %250, %253
%255:i64 = add %242, %254 (hasExternalUses)
%256:i64 = shl %238, 13:i64
%257:i64 = lshr %238, 51:i64
%258:i64 = or %256, %257
%259:i64 = xor %239, %258
%260:i64 = add %250, %259
%261:i64 = shl %259, 17:i64
%262:i64 = lshr %259, 47:i64
%263:i64 = or %261, %262
%264:i64 = xor %260, %263 (hasExternalUses)
%265:i64 = xor 221:i64, %264
%266:i64 = add %255, %265
%267:i64 = shl %266, 32:i64
%268:i64 = lshr %266, 32:i64
%269:i64 = or %267, %268
%270:i64 = shl %260, 32:i64
%271:i64 = lshr %260, 32:i64
%272:i64 = or %270, %271 (hasExternalUses)
%273:i64 = shl %254, 21:i64
%274:i64 = lshr %254, 43:i64
%275:i64 = or %273, %274
%276:i64 = xor %255, %275 (hasExternalUses)
%277:i64 = add %272, %276
%278:i64 = shl %276, 16:i64
%279:i64 = lshr %276, 48:i64
%280:i64 = or %278, %279
%281:i64 = xor %277, %280
%282:i64 = add %269, %281
%283:i64 = shl %265, 13:i64
%284:i64 = lshr %264, 51:i64
%285:i64 = or %283, %284
%286:i64 = xor %266, %285
%287:i64 = add %277, %286
%288:i64 = shl %286, 17:i64
%289:i64 = lshr %286, 47:i64
%290:i64 = or %288, %289
%291:i64 = xor %287, %290 (hasExternalUses)
%292:i64 = add %282, %291 (hasExternalUses)
%293:i64 = shl %292, 32:i64
%294:i64 = lshr %292, 32:i64
%295:i64 = or %293, %294
%296:i64 = shl %287, 32:i64
%297:i64 = lshr %287, 32:i64
%298:i64 = or %296, %297
%299:i64 = shl %281, 21:i64
%300:i64 = lshr %281, 43:i64
%301:i64 = or %299, %300
%302:i64 = xor %282, %301
%303:i64 = add %298, %302 (hasExternalUses)
%304:i64 = shl %302, 16:i64
%305:i64 = lshr %302, 48:i64
%306:i64 = or %304, %305
%307:i64 = xor %303, %306
%308:i64 = add %295, %307 (hasExternalUses)
%309:i64 = shl %307, 21:i64
%310:i64 = lshr %307, 43:i64
%311:i64 = or %309, %310
%312:i64 = xor %308, %311 (hasExternalUses)
%313:i64 = shl %312, 16:i64
%314:i64 = lshr %312, 48:i64
%315:i64 = or %313, %314
infer %315

; *****
; For LLVM instruction:
;  %367 = xor i64 %366, %363
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250
%252:i64 = add %242, %251
%253:i64 = shl %252, 32:i64
%254:i64 = lshr %252, 32:i64
%255:i64 = or %253, %254 (hasExternalUses)
%256:i64 = shl %247, 32:i64
%257:i64 = lshr %247, 32:i64
%258:i64 = or %256, %257
%259:i64 = shl %241, 16:i64
%260:i64 = lshr %241, 48:i64
%261:i64 = or %259, %260
%262:i64 = xor %242, %261
%263:i64 = add %258, %262 (hasExternalUses)
%264:i64 = shl %262, 21:i64
%265:i64 = lshr %262, 43:i64
%266:i64 = or %264, %265
%267:i64 = xor %263, %266 (hasExternalUses)
%268:i64 = add %255, %267
%269:i64 = shl %251, 17:i64
%270:i64 = lshr %251, 47:i64
%271:i64 = or %269, %270
%272:i64 = xor %252, %271 (hasExternalUses)
%273:i64 = xor 221:i64, %272
%274:i64 = add %263, %273
%275:i64 = shl %273, 13:i64
%276:i64 = lshr %272, 51:i64
%277:i64 = or %275, %276
%278:i64 = xor %274, %277
%279:i64 = add %268, %278
%280:i64 = shl %279, 32:i64
%281:i64 = lshr %279, 32:i64
%282:i64 = or %280, %281
%283:i64 = shl %274, 32:i64
%284:i64 = lshr %274, 32:i64
%285:i64 = or %283, %284
%286:i64 = shl %267, 16:i64
%287:i64 = lshr %267, 48:i64
%288:i64 = or %286, %287
%289:i64 = xor %268, %288
%290:i64 = add %285, %289
%291:i64 = shl %289, 21:i64
%292:i64 = lshr %289, 43:i64
%293:i64 = or %291, %292
%294:i64 = xor %290, %293
%295:i64 = add %282, %294
%296:i64 = shl %278, 17:i64
%297:i64 = lshr %278, 47:i64
%298:i64 = or %296, %297
%299:i64 = xor %279, %298
%300:i64 = add %290, %299
%301:i64 = shl %299, 13:i64
%302:i64 = lshr %299, 51:i64
%303:i64 = or %301, %302
%304:i64 = xor %300, %303 (hasExternalUses)
%305:i64 = add %295, %304 (hasExternalUses)
%306:i64 = shl %305, 32:i64
%307:i64 = lshr %305, 32:i64
%308:i64 = or %306, %307
%309:i64 = shl %300, 32:i64
%310:i64 = lshr %300, 32:i64
%311:i64 = or %309, %310
%312:i64 = shl %294, 16:i64
%313:i64 = lshr %294, 48:i64
%314:i64 = or %312, %313
%315:i64 = xor %295, %314
%316:i64 = add %311, %315 (hasExternalUses)
%317:i64 = shl %315, 21:i64
%318:i64 = lshr %315, 43:i64
%319:i64 = or %317, %318
%320:i64 = xor %316, %319
%321:i64 = add %308, %320 (hasExternalUses)
%322:i64 = shl %320, 16:i64
%323:i64 = lshr %320, 48:i64
%324:i64 = or %322, %323
%325:i64 = xor %321, %324
infer %325

; *****
; For LLVM instruction:
;  %368 = add i64 %367, %362
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237
%239:i64 = add %229, %238
%240:i64 = shl %239, 32:i64
%241:i64 = lshr %239, 32:i64
%242:i64 = or %240, %241
%243:i64 = shl %234, 32:i64
%244:i64 = lshr %234, 32:i64
%245:i64 = or %243, %244
%246:i64 = shl %228, 21:i64
%247:i64 = lshr %228, 43:i64
%248:i64 = or %246, %247
%249:i64 = xor %229, %248
%250:i64 = add %245, %249
%251:i64 = shl %249, 16:i64
%252:i64 = lshr %249, 48:i64
%253:i64 = or %251, %252
%254:i64 = xor %250, %253
%255:i64 = add %242, %254 (hasExternalUses)
%256:i64 = shl %238, 13:i64
%257:i64 = lshr %238, 51:i64
%258:i64 = or %256, %257
%259:i64 = xor %239, %258
%260:i64 = add %250, %259
%261:i64 = shl %259, 17:i64
%262:i64 = lshr %259, 47:i64
%263:i64 = or %261, %262
%264:i64 = xor %260, %263 (hasExternalUses)
%265:i64 = xor 221:i64, %264
%266:i64 = add %255, %265
%267:i64 = shl %266, 32:i64
%268:i64 = lshr %266, 32:i64
%269:i64 = or %267, %268
%270:i64 = shl %260, 32:i64
%271:i64 = lshr %260, 32:i64
%272:i64 = or %270, %271 (hasExternalUses)
%273:i64 = shl %254, 21:i64
%274:i64 = lshr %254, 43:i64
%275:i64 = or %273, %274
%276:i64 = xor %255, %275 (hasExternalUses)
%277:i64 = add %272, %276
%278:i64 = shl %276, 16:i64
%279:i64 = lshr %276, 48:i64
%280:i64 = or %278, %279
%281:i64 = xor %277, %280
%282:i64 = add %269, %281
%283:i64 = shl %265, 13:i64
%284:i64 = lshr %264, 51:i64
%285:i64 = or %283, %284
%286:i64 = xor %266, %285
%287:i64 = add %277, %286
%288:i64 = shl %286, 17:i64
%289:i64 = lshr %286, 47:i64
%290:i64 = or %288, %289
%291:i64 = xor %287, %290
%292:i64 = add %282, %291
%293:i64 = shl %292, 32:i64
%294:i64 = lshr %292, 32:i64
%295:i64 = or %293, %294
%296:i64 = shl %287, 32:i64
%297:i64 = lshr %287, 32:i64
%298:i64 = or %296, %297
%299:i64 = shl %281, 21:i64
%300:i64 = lshr %281, 43:i64
%301:i64 = or %299, %300
%302:i64 = xor %282, %301
%303:i64 = add %298, %302
%304:i64 = shl %302, 16:i64
%305:i64 = lshr %302, 48:i64
%306:i64 = or %304, %305
%307:i64 = xor %303, %306
%308:i64 = add %295, %307
%309:i64 = shl %291, 13:i64
%310:i64 = lshr %291, 51:i64
%311:i64 = or %309, %310
%312:i64 = xor %292, %311
%313:i64 = add %303, %312
%314:i64 = shl %312, 17:i64
%315:i64 = lshr %312, 47:i64
%316:i64 = or %314, %315
%317:i64 = xor %313, %316 (hasExternalUses)
%318:i64 = add %308, %317 (hasExternalUses)
%319:i64 = shl %318, 32:i64
%320:i64 = lshr %318, 32:i64
%321:i64 = or %319, %320
%322:i64 = shl %313, 32:i64
%323:i64 = lshr %313, 32:i64
%324:i64 = or %322, %323
%325:i64 = shl %307, 21:i64
%326:i64 = lshr %307, 43:i64
%327:i64 = or %325, %326
%328:i64 = xor %308, %327
%329:i64 = add %324, %328 (hasExternalUses)
%330:i64 = shl %328, 16:i64
%331:i64 = lshr %328, 48:i64
%332:i64 = or %330, %331
%333:i64 = xor %329, %332 (hasExternalUses)
%334:i64 = add %321, %333
infer %334

; *****
; For LLVM instruction:
;  %369 = shl i64 %367, 21
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250
%252:i64 = add %242, %251
%253:i64 = shl %252, 32:i64
%254:i64 = lshr %252, 32:i64
%255:i64 = or %253, %254 (hasExternalUses)
%256:i64 = shl %247, 32:i64
%257:i64 = lshr %247, 32:i64
%258:i64 = or %256, %257
%259:i64 = shl %241, 16:i64
%260:i64 = lshr %241, 48:i64
%261:i64 = or %259, %260
%262:i64 = xor %242, %261
%263:i64 = add %258, %262 (hasExternalUses)
%264:i64 = shl %262, 21:i64
%265:i64 = lshr %262, 43:i64
%266:i64 = or %264, %265
%267:i64 = xor %263, %266 (hasExternalUses)
%268:i64 = add %255, %267
%269:i64 = shl %251, 17:i64
%270:i64 = lshr %251, 47:i64
%271:i64 = or %269, %270
%272:i64 = xor %252, %271 (hasExternalUses)
%273:i64 = xor 221:i64, %272
%274:i64 = add %263, %273
%275:i64 = shl %273, 13:i64
%276:i64 = lshr %272, 51:i64
%277:i64 = or %275, %276
%278:i64 = xor %274, %277
%279:i64 = add %268, %278
%280:i64 = shl %279, 32:i64
%281:i64 = lshr %279, 32:i64
%282:i64 = or %280, %281
%283:i64 = shl %274, 32:i64
%284:i64 = lshr %274, 32:i64
%285:i64 = or %283, %284
%286:i64 = shl %267, 16:i64
%287:i64 = lshr %267, 48:i64
%288:i64 = or %286, %287
%289:i64 = xor %268, %288
%290:i64 = add %285, %289
%291:i64 = shl %289, 21:i64
%292:i64 = lshr %289, 43:i64
%293:i64 = or %291, %292
%294:i64 = xor %290, %293
%295:i64 = add %282, %294
%296:i64 = shl %278, 17:i64
%297:i64 = lshr %278, 47:i64
%298:i64 = or %296, %297
%299:i64 = xor %279, %298
%300:i64 = add %290, %299
%301:i64 = shl %299, 13:i64
%302:i64 = lshr %299, 51:i64
%303:i64 = or %301, %302
%304:i64 = xor %300, %303 (hasExternalUses)
%305:i64 = add %295, %304 (hasExternalUses)
%306:i64 = shl %305, 32:i64
%307:i64 = lshr %305, 32:i64
%308:i64 = or %306, %307
%309:i64 = shl %300, 32:i64
%310:i64 = lshr %300, 32:i64
%311:i64 = or %309, %310
%312:i64 = shl %294, 16:i64
%313:i64 = lshr %294, 48:i64
%314:i64 = or %312, %313
%315:i64 = xor %295, %314
%316:i64 = add %311, %315 (hasExternalUses)
%317:i64 = shl %315, 21:i64
%318:i64 = lshr %315, 43:i64
%319:i64 = or %317, %318
%320:i64 = xor %316, %319
%321:i64 = add %308, %320 (hasExternalUses)
%322:i64 = shl %320, 16:i64
%323:i64 = lshr %320, 48:i64
%324:i64 = or %322, %323
%325:i64 = xor %321, %324 (hasExternalUses)
%326:i64 = shl %325, 21:i64
infer %326

; *****
; For LLVM instruction:
;  %370 = lshr i64 %367, 43
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250
%252:i64 = add %242, %251
%253:i64 = shl %252, 32:i64
%254:i64 = lshr %252, 32:i64
%255:i64 = or %253, %254 (hasExternalUses)
%256:i64 = shl %247, 32:i64
%257:i64 = lshr %247, 32:i64
%258:i64 = or %256, %257
%259:i64 = shl %241, 16:i64
%260:i64 = lshr %241, 48:i64
%261:i64 = or %259, %260
%262:i64 = xor %242, %261
%263:i64 = add %258, %262 (hasExternalUses)
%264:i64 = shl %262, 21:i64
%265:i64 = lshr %262, 43:i64
%266:i64 = or %264, %265
%267:i64 = xor %263, %266 (hasExternalUses)
%268:i64 = add %255, %267
%269:i64 = shl %251, 17:i64
%270:i64 = lshr %251, 47:i64
%271:i64 = or %269, %270
%272:i64 = xor %252, %271 (hasExternalUses)
%273:i64 = xor 221:i64, %272
%274:i64 = add %263, %273
%275:i64 = shl %273, 13:i64
%276:i64 = lshr %272, 51:i64
%277:i64 = or %275, %276
%278:i64 = xor %274, %277
%279:i64 = add %268, %278
%280:i64 = shl %279, 32:i64
%281:i64 = lshr %279, 32:i64
%282:i64 = or %280, %281
%283:i64 = shl %274, 32:i64
%284:i64 = lshr %274, 32:i64
%285:i64 = or %283, %284
%286:i64 = shl %267, 16:i64
%287:i64 = lshr %267, 48:i64
%288:i64 = or %286, %287
%289:i64 = xor %268, %288
%290:i64 = add %285, %289
%291:i64 = shl %289, 21:i64
%292:i64 = lshr %289, 43:i64
%293:i64 = or %291, %292
%294:i64 = xor %290, %293
%295:i64 = add %282, %294
%296:i64 = shl %278, 17:i64
%297:i64 = lshr %278, 47:i64
%298:i64 = or %296, %297
%299:i64 = xor %279, %298
%300:i64 = add %290, %299
%301:i64 = shl %299, 13:i64
%302:i64 = lshr %299, 51:i64
%303:i64 = or %301, %302
%304:i64 = xor %300, %303 (hasExternalUses)
%305:i64 = add %295, %304 (hasExternalUses)
%306:i64 = shl %305, 32:i64
%307:i64 = lshr %305, 32:i64
%308:i64 = or %306, %307
%309:i64 = shl %300, 32:i64
%310:i64 = lshr %300, 32:i64
%311:i64 = or %309, %310
%312:i64 = shl %294, 16:i64
%313:i64 = lshr %294, 48:i64
%314:i64 = or %312, %313
%315:i64 = xor %295, %314
%316:i64 = add %311, %315 (hasExternalUses)
%317:i64 = shl %315, 21:i64
%318:i64 = lshr %315, 43:i64
%319:i64 = or %317, %318
%320:i64 = xor %316, %319
%321:i64 = add %308, %320 (hasExternalUses)
%322:i64 = shl %320, 16:i64
%323:i64 = lshr %320, 48:i64
%324:i64 = or %322, %323
%325:i64 = xor %321, %324 (hasExternalUses)
%326:i64 = lshr %325, 43:i64
infer %326

; *****
; For LLVM instruction:
;  %371 = or i64 %370, %369
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250
%252:i64 = add %242, %251
%253:i64 = shl %252, 32:i64
%254:i64 = lshr %252, 32:i64
%255:i64 = or %253, %254 (hasExternalUses)
%256:i64 = shl %247, 32:i64
%257:i64 = lshr %247, 32:i64
%258:i64 = or %256, %257
%259:i64 = shl %241, 16:i64
%260:i64 = lshr %241, 48:i64
%261:i64 = or %259, %260
%262:i64 = xor %242, %261
%263:i64 = add %258, %262 (hasExternalUses)
%264:i64 = shl %262, 21:i64
%265:i64 = lshr %262, 43:i64
%266:i64 = or %264, %265
%267:i64 = xor %263, %266 (hasExternalUses)
%268:i64 = add %255, %267
%269:i64 = shl %251, 17:i64
%270:i64 = lshr %251, 47:i64
%271:i64 = or %269, %270
%272:i64 = xor %252, %271 (hasExternalUses)
%273:i64 = xor 221:i64, %272
%274:i64 = add %263, %273
%275:i64 = shl %273, 13:i64
%276:i64 = lshr %272, 51:i64
%277:i64 = or %275, %276
%278:i64 = xor %274, %277
%279:i64 = add %268, %278
%280:i64 = shl %279, 32:i64
%281:i64 = lshr %279, 32:i64
%282:i64 = or %280, %281
%283:i64 = shl %274, 32:i64
%284:i64 = lshr %274, 32:i64
%285:i64 = or %283, %284
%286:i64 = shl %267, 16:i64
%287:i64 = lshr %267, 48:i64
%288:i64 = or %286, %287
%289:i64 = xor %268, %288
%290:i64 = add %285, %289
%291:i64 = shl %289, 21:i64
%292:i64 = lshr %289, 43:i64
%293:i64 = or %291, %292
%294:i64 = xor %290, %293
%295:i64 = add %282, %294
%296:i64 = shl %278, 17:i64
%297:i64 = lshr %278, 47:i64
%298:i64 = or %296, %297
%299:i64 = xor %279, %298
%300:i64 = add %290, %299
%301:i64 = shl %299, 13:i64
%302:i64 = lshr %299, 51:i64
%303:i64 = or %301, %302
%304:i64 = xor %300, %303 (hasExternalUses)
%305:i64 = add %295, %304 (hasExternalUses)
%306:i64 = shl %305, 32:i64
%307:i64 = lshr %305, 32:i64
%308:i64 = or %306, %307
%309:i64 = shl %300, 32:i64
%310:i64 = lshr %300, 32:i64
%311:i64 = or %309, %310
%312:i64 = shl %294, 16:i64
%313:i64 = lshr %294, 48:i64
%314:i64 = or %312, %313
%315:i64 = xor %295, %314
%316:i64 = add %311, %315 (hasExternalUses)
%317:i64 = shl %315, 21:i64
%318:i64 = lshr %315, 43:i64
%319:i64 = or %317, %318
%320:i64 = xor %316, %319
%321:i64 = add %308, %320 (hasExternalUses)
%322:i64 = shl %320, 16:i64
%323:i64 = lshr %320, 48:i64
%324:i64 = or %322, %323
%325:i64 = xor %321, %324 (hasExternalUses)
%326:i64 = shl %325, 21:i64
%327:i64 = lshr %325, 43:i64
%328:i64 = or %326, %327
infer %328

; *****
; For LLVM instruction:
;  %372 = xor i64 %371, %368
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237
%239:i64 = add %229, %238
%240:i64 = shl %239, 32:i64
%241:i64 = lshr %239, 32:i64
%242:i64 = or %240, %241
%243:i64 = shl %234, 32:i64
%244:i64 = lshr %234, 32:i64
%245:i64 = or %243, %244
%246:i64 = shl %228, 21:i64
%247:i64 = lshr %228, 43:i64
%248:i64 = or %246, %247
%249:i64 = xor %229, %248
%250:i64 = add %245, %249
%251:i64 = shl %249, 16:i64
%252:i64 = lshr %249, 48:i64
%253:i64 = or %251, %252
%254:i64 = xor %250, %253
%255:i64 = add %242, %254 (hasExternalUses)
%256:i64 = shl %238, 13:i64
%257:i64 = lshr %238, 51:i64
%258:i64 = or %256, %257
%259:i64 = xor %239, %258
%260:i64 = add %250, %259
%261:i64 = shl %259, 17:i64
%262:i64 = lshr %259, 47:i64
%263:i64 = or %261, %262
%264:i64 = xor %260, %263 (hasExternalUses)
%265:i64 = xor 221:i64, %264
%266:i64 = add %255, %265
%267:i64 = shl %266, 32:i64
%268:i64 = lshr %266, 32:i64
%269:i64 = or %267, %268
%270:i64 = shl %260, 32:i64
%271:i64 = lshr %260, 32:i64
%272:i64 = or %270, %271 (hasExternalUses)
%273:i64 = shl %254, 21:i64
%274:i64 = lshr %254, 43:i64
%275:i64 = or %273, %274
%276:i64 = xor %255, %275 (hasExternalUses)
%277:i64 = add %272, %276
%278:i64 = shl %276, 16:i64
%279:i64 = lshr %276, 48:i64
%280:i64 = or %278, %279
%281:i64 = xor %277, %280
%282:i64 = add %269, %281
%283:i64 = shl %265, 13:i64
%284:i64 = lshr %264, 51:i64
%285:i64 = or %283, %284
%286:i64 = xor %266, %285
%287:i64 = add %277, %286
%288:i64 = shl %286, 17:i64
%289:i64 = lshr %286, 47:i64
%290:i64 = or %288, %289
%291:i64 = xor %287, %290
%292:i64 = add %282, %291
%293:i64 = shl %292, 32:i64
%294:i64 = lshr %292, 32:i64
%295:i64 = or %293, %294
%296:i64 = shl %287, 32:i64
%297:i64 = lshr %287, 32:i64
%298:i64 = or %296, %297
%299:i64 = shl %281, 21:i64
%300:i64 = lshr %281, 43:i64
%301:i64 = or %299, %300
%302:i64 = xor %282, %301
%303:i64 = add %298, %302
%304:i64 = shl %302, 16:i64
%305:i64 = lshr %302, 48:i64
%306:i64 = or %304, %305
%307:i64 = xor %303, %306
%308:i64 = add %295, %307
%309:i64 = shl %291, 13:i64
%310:i64 = lshr %291, 51:i64
%311:i64 = or %309, %310
%312:i64 = xor %292, %311
%313:i64 = add %303, %312
%314:i64 = shl %312, 17:i64
%315:i64 = lshr %312, 47:i64
%316:i64 = or %314, %315
%317:i64 = xor %313, %316 (hasExternalUses)
%318:i64 = add %308, %317 (hasExternalUses)
%319:i64 = shl %318, 32:i64
%320:i64 = lshr %318, 32:i64
%321:i64 = or %319, %320
%322:i64 = shl %313, 32:i64
%323:i64 = lshr %313, 32:i64
%324:i64 = or %322, %323
%325:i64 = shl %307, 21:i64
%326:i64 = lshr %307, 43:i64
%327:i64 = or %325, %326
%328:i64 = xor %308, %327
%329:i64 = add %324, %328 (hasExternalUses)
%330:i64 = shl %328, 16:i64
%331:i64 = lshr %328, 48:i64
%332:i64 = or %330, %331
%333:i64 = xor %329, %332
%334:i64 = add %321, %333 (hasExternalUses)
%335:i64 = shl %333, 21:i64
%336:i64 = lshr %333, 43:i64
%337:i64 = or %335, %336
%338:i64 = xor %334, %337
infer %338

; *****
; For LLVM instruction:
;  %373 = add i64 %359, %363
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250
%252:i64 = add %242, %251
%253:i64 = shl %252, 32:i64
%254:i64 = lshr %252, 32:i64
%255:i64 = or %253, %254 (hasExternalUses)
%256:i64 = shl %247, 32:i64
%257:i64 = lshr %247, 32:i64
%258:i64 = or %256, %257
%259:i64 = shl %241, 16:i64
%260:i64 = lshr %241, 48:i64
%261:i64 = or %259, %260
%262:i64 = xor %242, %261
%263:i64 = add %258, %262 (hasExternalUses)
%264:i64 = shl %262, 21:i64
%265:i64 = lshr %262, 43:i64
%266:i64 = or %264, %265
%267:i64 = xor %263, %266 (hasExternalUses)
%268:i64 = add %255, %267
%269:i64 = shl %251, 17:i64
%270:i64 = lshr %251, 47:i64
%271:i64 = or %269, %270
%272:i64 = xor %252, %271 (hasExternalUses)
%273:i64 = xor 221:i64, %272
%274:i64 = add %263, %273
%275:i64 = shl %273, 13:i64
%276:i64 = lshr %272, 51:i64
%277:i64 = or %275, %276
%278:i64 = xor %274, %277
%279:i64 = add %268, %278
%280:i64 = shl %279, 32:i64
%281:i64 = lshr %279, 32:i64
%282:i64 = or %280, %281
%283:i64 = shl %274, 32:i64
%284:i64 = lshr %274, 32:i64
%285:i64 = or %283, %284
%286:i64 = shl %267, 16:i64
%287:i64 = lshr %267, 48:i64
%288:i64 = or %286, %287
%289:i64 = xor %268, %288
%290:i64 = add %285, %289
%291:i64 = shl %289, 21:i64
%292:i64 = lshr %289, 43:i64
%293:i64 = or %291, %292
%294:i64 = xor %290, %293
%295:i64 = add %282, %294
%296:i64 = shl %278, 17:i64
%297:i64 = lshr %278, 47:i64
%298:i64 = or %296, %297
%299:i64 = xor %279, %298
%300:i64 = add %290, %299
%301:i64 = shl %299, 13:i64
%302:i64 = lshr %299, 51:i64
%303:i64 = or %301, %302
%304:i64 = xor %300, %303
%305:i64 = add %295, %304
%306:i64 = shl %305, 32:i64
%307:i64 = lshr %305, 32:i64
%308:i64 = or %306, %307
%309:i64 = shl %300, 32:i64
%310:i64 = lshr %300, 32:i64
%311:i64 = or %309, %310
%312:i64 = shl %294, 16:i64
%313:i64 = lshr %294, 48:i64
%314:i64 = or %312, %313
%315:i64 = xor %295, %314
%316:i64 = add %311, %315
%317:i64 = shl %315, 21:i64
%318:i64 = lshr %315, 43:i64
%319:i64 = or %317, %318
%320:i64 = xor %316, %319 (hasExternalUses)
%321:i64 = add %308, %320 (hasExternalUses)
%322:i64 = shl %304, 17:i64
%323:i64 = lshr %304, 47:i64
%324:i64 = or %322, %323
%325:i64 = xor %305, %324
%326:i64 = add %316, %325 (hasExternalUses)
%327:i64 = shl %325, 13:i64
%328:i64 = lshr %325, 51:i64
%329:i64 = or %327, %328
%330:i64 = xor %326, %329 (hasExternalUses)
%331:i64 = add %321, %330
infer %331

; *****
; For LLVM instruction:
;  %374 = shl i64 %359, 17
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237
%239:i64 = add %229, %238
%240:i64 = shl %239, 32:i64
%241:i64 = lshr %239, 32:i64
%242:i64 = or %240, %241
%243:i64 = shl %234, 32:i64
%244:i64 = lshr %234, 32:i64
%245:i64 = or %243, %244
%246:i64 = shl %228, 21:i64
%247:i64 = lshr %228, 43:i64
%248:i64 = or %246, %247
%249:i64 = xor %229, %248
%250:i64 = add %245, %249
%251:i64 = shl %249, 16:i64
%252:i64 = lshr %249, 48:i64
%253:i64 = or %251, %252
%254:i64 = xor %250, %253
%255:i64 = add %242, %254 (hasExternalUses)
%256:i64 = shl %238, 13:i64
%257:i64 = lshr %238, 51:i64
%258:i64 = or %256, %257
%259:i64 = xor %239, %258
%260:i64 = add %250, %259
%261:i64 = shl %259, 17:i64
%262:i64 = lshr %259, 47:i64
%263:i64 = or %261, %262
%264:i64 = xor %260, %263 (hasExternalUses)
%265:i64 = xor 221:i64, %264
%266:i64 = add %255, %265
%267:i64 = shl %266, 32:i64
%268:i64 = lshr %266, 32:i64
%269:i64 = or %267, %268
%270:i64 = shl %260, 32:i64
%271:i64 = lshr %260, 32:i64
%272:i64 = or %270, %271 (hasExternalUses)
%273:i64 = shl %254, 21:i64
%274:i64 = lshr %254, 43:i64
%275:i64 = or %273, %274
%276:i64 = xor %255, %275 (hasExternalUses)
%277:i64 = add %272, %276
%278:i64 = shl %276, 16:i64
%279:i64 = lshr %276, 48:i64
%280:i64 = or %278, %279
%281:i64 = xor %277, %280
%282:i64 = add %269, %281
%283:i64 = shl %265, 13:i64
%284:i64 = lshr %264, 51:i64
%285:i64 = or %283, %284
%286:i64 = xor %266, %285
%287:i64 = add %277, %286
%288:i64 = shl %286, 17:i64
%289:i64 = lshr %286, 47:i64
%290:i64 = or %288, %289
%291:i64 = xor %287, %290
%292:i64 = add %282, %291
%293:i64 = shl %292, 32:i64
%294:i64 = lshr %292, 32:i64
%295:i64 = or %293, %294
%296:i64 = shl %287, 32:i64
%297:i64 = lshr %287, 32:i64
%298:i64 = or %296, %297
%299:i64 = shl %281, 21:i64
%300:i64 = lshr %281, 43:i64
%301:i64 = or %299, %300
%302:i64 = xor %282, %301
%303:i64 = add %298, %302
%304:i64 = shl %302, 16:i64
%305:i64 = lshr %302, 48:i64
%306:i64 = or %304, %305
%307:i64 = xor %303, %306 (hasExternalUses)
%308:i64 = add %295, %307 (hasExternalUses)
%309:i64 = shl %291, 13:i64
%310:i64 = lshr %291, 51:i64
%311:i64 = or %309, %310
%312:i64 = xor %292, %311
%313:i64 = add %303, %312 (hasExternalUses)
%314:i64 = shl %312, 17:i64
%315:i64 = lshr %312, 47:i64
%316:i64 = or %314, %315
%317:i64 = xor %313, %316
%318:i64 = add %308, %317 (hasExternalUses)
%319:i64 = shl %317, 13:i64
%320:i64 = lshr %317, 51:i64
%321:i64 = or %319, %320
%322:i64 = xor %318, %321 (hasExternalUses)
%323:i64 = shl %322, 17:i64
infer %323

; *****
; For LLVM instruction:
;  %375 = lshr i64 %359, 47
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237
%239:i64 = add %229, %238
%240:i64 = shl %239, 32:i64
%241:i64 = lshr %239, 32:i64
%242:i64 = or %240, %241
%243:i64 = shl %234, 32:i64
%244:i64 = lshr %234, 32:i64
%245:i64 = or %243, %244
%246:i64 = shl %228, 21:i64
%247:i64 = lshr %228, 43:i64
%248:i64 = or %246, %247
%249:i64 = xor %229, %248
%250:i64 = add %245, %249
%251:i64 = shl %249, 16:i64
%252:i64 = lshr %249, 48:i64
%253:i64 = or %251, %252
%254:i64 = xor %250, %253
%255:i64 = add %242, %254 (hasExternalUses)
%256:i64 = shl %238, 13:i64
%257:i64 = lshr %238, 51:i64
%258:i64 = or %256, %257
%259:i64 = xor %239, %258
%260:i64 = add %250, %259
%261:i64 = shl %259, 17:i64
%262:i64 = lshr %259, 47:i64
%263:i64 = or %261, %262
%264:i64 = xor %260, %263 (hasExternalUses)
%265:i64 = xor 221:i64, %264
%266:i64 = add %255, %265
%267:i64 = shl %266, 32:i64
%268:i64 = lshr %266, 32:i64
%269:i64 = or %267, %268
%270:i64 = shl %260, 32:i64
%271:i64 = lshr %260, 32:i64
%272:i64 = or %270, %271 (hasExternalUses)
%273:i64 = shl %254, 21:i64
%274:i64 = lshr %254, 43:i64
%275:i64 = or %273, %274
%276:i64 = xor %255, %275 (hasExternalUses)
%277:i64 = add %272, %276
%278:i64 = shl %276, 16:i64
%279:i64 = lshr %276, 48:i64
%280:i64 = or %278, %279
%281:i64 = xor %277, %280
%282:i64 = add %269, %281
%283:i64 = shl %265, 13:i64
%284:i64 = lshr %264, 51:i64
%285:i64 = or %283, %284
%286:i64 = xor %266, %285
%287:i64 = add %277, %286
%288:i64 = shl %286, 17:i64
%289:i64 = lshr %286, 47:i64
%290:i64 = or %288, %289
%291:i64 = xor %287, %290
%292:i64 = add %282, %291
%293:i64 = shl %292, 32:i64
%294:i64 = lshr %292, 32:i64
%295:i64 = or %293, %294
%296:i64 = shl %287, 32:i64
%297:i64 = lshr %287, 32:i64
%298:i64 = or %296, %297
%299:i64 = shl %281, 21:i64
%300:i64 = lshr %281, 43:i64
%301:i64 = or %299, %300
%302:i64 = xor %282, %301
%303:i64 = add %298, %302
%304:i64 = shl %302, 16:i64
%305:i64 = lshr %302, 48:i64
%306:i64 = or %304, %305
%307:i64 = xor %303, %306 (hasExternalUses)
%308:i64 = add %295, %307 (hasExternalUses)
%309:i64 = shl %291, 13:i64
%310:i64 = lshr %291, 51:i64
%311:i64 = or %309, %310
%312:i64 = xor %292, %311
%313:i64 = add %303, %312 (hasExternalUses)
%314:i64 = shl %312, 17:i64
%315:i64 = lshr %312, 47:i64
%316:i64 = or %314, %315
%317:i64 = xor %313, %316
%318:i64 = add %308, %317 (hasExternalUses)
%319:i64 = shl %317, 13:i64
%320:i64 = lshr %317, 51:i64
%321:i64 = or %319, %320
%322:i64 = xor %318, %321 (hasExternalUses)
%323:i64 = lshr %322, 47:i64
infer %323

; *****
; For LLVM instruction:
;  %376 = or i64 %375, %374
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237
%239:i64 = add %229, %238
%240:i64 = shl %239, 32:i64
%241:i64 = lshr %239, 32:i64
%242:i64 = or %240, %241
%243:i64 = shl %234, 32:i64
%244:i64 = lshr %234, 32:i64
%245:i64 = or %243, %244
%246:i64 = shl %228, 21:i64
%247:i64 = lshr %228, 43:i64
%248:i64 = or %246, %247
%249:i64 = xor %229, %248
%250:i64 = add %245, %249
%251:i64 = shl %249, 16:i64
%252:i64 = lshr %249, 48:i64
%253:i64 = or %251, %252
%254:i64 = xor %250, %253
%255:i64 = add %242, %254 (hasExternalUses)
%256:i64 = shl %238, 13:i64
%257:i64 = lshr %238, 51:i64
%258:i64 = or %256, %257
%259:i64 = xor %239, %258
%260:i64 = add %250, %259
%261:i64 = shl %259, 17:i64
%262:i64 = lshr %259, 47:i64
%263:i64 = or %261, %262
%264:i64 = xor %260, %263 (hasExternalUses)
%265:i64 = xor 221:i64, %264
%266:i64 = add %255, %265
%267:i64 = shl %266, 32:i64
%268:i64 = lshr %266, 32:i64
%269:i64 = or %267, %268
%270:i64 = shl %260, 32:i64
%271:i64 = lshr %260, 32:i64
%272:i64 = or %270, %271 (hasExternalUses)
%273:i64 = shl %254, 21:i64
%274:i64 = lshr %254, 43:i64
%275:i64 = or %273, %274
%276:i64 = xor %255, %275 (hasExternalUses)
%277:i64 = add %272, %276
%278:i64 = shl %276, 16:i64
%279:i64 = lshr %276, 48:i64
%280:i64 = or %278, %279
%281:i64 = xor %277, %280
%282:i64 = add %269, %281
%283:i64 = shl %265, 13:i64
%284:i64 = lshr %264, 51:i64
%285:i64 = or %283, %284
%286:i64 = xor %266, %285
%287:i64 = add %277, %286
%288:i64 = shl %286, 17:i64
%289:i64 = lshr %286, 47:i64
%290:i64 = or %288, %289
%291:i64 = xor %287, %290
%292:i64 = add %282, %291
%293:i64 = shl %292, 32:i64
%294:i64 = lshr %292, 32:i64
%295:i64 = or %293, %294
%296:i64 = shl %287, 32:i64
%297:i64 = lshr %287, 32:i64
%298:i64 = or %296, %297
%299:i64 = shl %281, 21:i64
%300:i64 = lshr %281, 43:i64
%301:i64 = or %299, %300
%302:i64 = xor %282, %301
%303:i64 = add %298, %302
%304:i64 = shl %302, 16:i64
%305:i64 = lshr %302, 48:i64
%306:i64 = or %304, %305
%307:i64 = xor %303, %306 (hasExternalUses)
%308:i64 = add %295, %307 (hasExternalUses)
%309:i64 = shl %291, 13:i64
%310:i64 = lshr %291, 51:i64
%311:i64 = or %309, %310
%312:i64 = xor %292, %311
%313:i64 = add %303, %312 (hasExternalUses)
%314:i64 = shl %312, 17:i64
%315:i64 = lshr %312, 47:i64
%316:i64 = or %314, %315
%317:i64 = xor %313, %316
%318:i64 = add %308, %317 (hasExternalUses)
%319:i64 = shl %317, 13:i64
%320:i64 = lshr %317, 51:i64
%321:i64 = or %319, %320
%322:i64 = xor %318, %321 (hasExternalUses)
%323:i64 = shl %322, 17:i64
%324:i64 = lshr %322, 47:i64
%325:i64 = or %323, %324
infer %325

; *****
; For LLVM instruction:
;  %377 = xor i64 %376, %373
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250
%252:i64 = add %242, %251
%253:i64 = shl %252, 32:i64
%254:i64 = lshr %252, 32:i64
%255:i64 = or %253, %254 (hasExternalUses)
%256:i64 = shl %247, 32:i64
%257:i64 = lshr %247, 32:i64
%258:i64 = or %256, %257
%259:i64 = shl %241, 16:i64
%260:i64 = lshr %241, 48:i64
%261:i64 = or %259, %260
%262:i64 = xor %242, %261
%263:i64 = add %258, %262 (hasExternalUses)
%264:i64 = shl %262, 21:i64
%265:i64 = lshr %262, 43:i64
%266:i64 = or %264, %265
%267:i64 = xor %263, %266 (hasExternalUses)
%268:i64 = add %255, %267
%269:i64 = shl %251, 17:i64
%270:i64 = lshr %251, 47:i64
%271:i64 = or %269, %270
%272:i64 = xor %252, %271 (hasExternalUses)
%273:i64 = xor 221:i64, %272
%274:i64 = add %263, %273
%275:i64 = shl %273, 13:i64
%276:i64 = lshr %272, 51:i64
%277:i64 = or %275, %276
%278:i64 = xor %274, %277
%279:i64 = add %268, %278
%280:i64 = shl %279, 32:i64
%281:i64 = lshr %279, 32:i64
%282:i64 = or %280, %281
%283:i64 = shl %274, 32:i64
%284:i64 = lshr %274, 32:i64
%285:i64 = or %283, %284
%286:i64 = shl %267, 16:i64
%287:i64 = lshr %267, 48:i64
%288:i64 = or %286, %287
%289:i64 = xor %268, %288
%290:i64 = add %285, %289
%291:i64 = shl %289, 21:i64
%292:i64 = lshr %289, 43:i64
%293:i64 = or %291, %292
%294:i64 = xor %290, %293
%295:i64 = add %282, %294
%296:i64 = shl %278, 17:i64
%297:i64 = lshr %278, 47:i64
%298:i64 = or %296, %297
%299:i64 = xor %279, %298
%300:i64 = add %290, %299
%301:i64 = shl %299, 13:i64
%302:i64 = lshr %299, 51:i64
%303:i64 = or %301, %302
%304:i64 = xor %300, %303
%305:i64 = add %295, %304
%306:i64 = shl %305, 32:i64
%307:i64 = lshr %305, 32:i64
%308:i64 = or %306, %307
%309:i64 = shl %300, 32:i64
%310:i64 = lshr %300, 32:i64
%311:i64 = or %309, %310
%312:i64 = shl %294, 16:i64
%313:i64 = lshr %294, 48:i64
%314:i64 = or %312, %313
%315:i64 = xor %295, %314
%316:i64 = add %311, %315
%317:i64 = shl %315, 21:i64
%318:i64 = lshr %315, 43:i64
%319:i64 = or %317, %318
%320:i64 = xor %316, %319 (hasExternalUses)
%321:i64 = add %308, %320 (hasExternalUses)
%322:i64 = shl %304, 17:i64
%323:i64 = lshr %304, 47:i64
%324:i64 = or %322, %323
%325:i64 = xor %305, %324
%326:i64 = add %316, %325 (hasExternalUses)
%327:i64 = shl %325, 13:i64
%328:i64 = lshr %325, 51:i64
%329:i64 = or %327, %328
%330:i64 = xor %326, %329
%331:i64 = add %321, %330 (hasExternalUses)
%332:i64 = shl %330, 17:i64
%333:i64 = lshr %330, 47:i64
%334:i64 = or %332, %333
%335:i64 = xor %331, %334
infer %335

; *****
; For LLVM instruction:
;  %378 = shl i64 %373, 32
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250
%252:i64 = add %242, %251
%253:i64 = shl %252, 32:i64
%254:i64 = lshr %252, 32:i64
%255:i64 = or %253, %254 (hasExternalUses)
%256:i64 = shl %247, 32:i64
%257:i64 = lshr %247, 32:i64
%258:i64 = or %256, %257
%259:i64 = shl %241, 16:i64
%260:i64 = lshr %241, 48:i64
%261:i64 = or %259, %260
%262:i64 = xor %242, %261
%263:i64 = add %258, %262 (hasExternalUses)
%264:i64 = shl %262, 21:i64
%265:i64 = lshr %262, 43:i64
%266:i64 = or %264, %265
%267:i64 = xor %263, %266 (hasExternalUses)
%268:i64 = add %255, %267
%269:i64 = shl %251, 17:i64
%270:i64 = lshr %251, 47:i64
%271:i64 = or %269, %270
%272:i64 = xor %252, %271 (hasExternalUses)
%273:i64 = xor 221:i64, %272
%274:i64 = add %263, %273
%275:i64 = shl %273, 13:i64
%276:i64 = lshr %272, 51:i64
%277:i64 = or %275, %276
%278:i64 = xor %274, %277
%279:i64 = add %268, %278
%280:i64 = shl %279, 32:i64
%281:i64 = lshr %279, 32:i64
%282:i64 = or %280, %281
%283:i64 = shl %274, 32:i64
%284:i64 = lshr %274, 32:i64
%285:i64 = or %283, %284
%286:i64 = shl %267, 16:i64
%287:i64 = lshr %267, 48:i64
%288:i64 = or %286, %287
%289:i64 = xor %268, %288
%290:i64 = add %285, %289
%291:i64 = shl %289, 21:i64
%292:i64 = lshr %289, 43:i64
%293:i64 = or %291, %292
%294:i64 = xor %290, %293
%295:i64 = add %282, %294
%296:i64 = shl %278, 17:i64
%297:i64 = lshr %278, 47:i64
%298:i64 = or %296, %297
%299:i64 = xor %279, %298
%300:i64 = add %290, %299
%301:i64 = shl %299, 13:i64
%302:i64 = lshr %299, 51:i64
%303:i64 = or %301, %302
%304:i64 = xor %300, %303
%305:i64 = add %295, %304
%306:i64 = shl %305, 32:i64
%307:i64 = lshr %305, 32:i64
%308:i64 = or %306, %307
%309:i64 = shl %300, 32:i64
%310:i64 = lshr %300, 32:i64
%311:i64 = or %309, %310
%312:i64 = shl %294, 16:i64
%313:i64 = lshr %294, 48:i64
%314:i64 = or %312, %313
%315:i64 = xor %295, %314
%316:i64 = add %311, %315
%317:i64 = shl %315, 21:i64
%318:i64 = lshr %315, 43:i64
%319:i64 = or %317, %318
%320:i64 = xor %316, %319 (hasExternalUses)
%321:i64 = add %308, %320 (hasExternalUses)
%322:i64 = shl %304, 17:i64
%323:i64 = lshr %304, 47:i64
%324:i64 = or %322, %323
%325:i64 = xor %305, %324
%326:i64 = add %316, %325 (hasExternalUses)
%327:i64 = shl %325, 13:i64
%328:i64 = lshr %325, 51:i64
%329:i64 = or %327, %328
%330:i64 = xor %326, %329 (hasExternalUses)
%331:i64 = add %321, %330 (hasExternalUses)
%332:i64 = shl %331, 32:i64
infer %332

; *****
; For LLVM instruction:
;  %379 = lshr i64 %373, 32
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250
%252:i64 = add %242, %251
%253:i64 = shl %252, 32:i64
%254:i64 = lshr %252, 32:i64
%255:i64 = or %253, %254 (hasExternalUses)
%256:i64 = shl %247, 32:i64
%257:i64 = lshr %247, 32:i64
%258:i64 = or %256, %257
%259:i64 = shl %241, 16:i64
%260:i64 = lshr %241, 48:i64
%261:i64 = or %259, %260
%262:i64 = xor %242, %261
%263:i64 = add %258, %262 (hasExternalUses)
%264:i64 = shl %262, 21:i64
%265:i64 = lshr %262, 43:i64
%266:i64 = or %264, %265
%267:i64 = xor %263, %266 (hasExternalUses)
%268:i64 = add %255, %267
%269:i64 = shl %251, 17:i64
%270:i64 = lshr %251, 47:i64
%271:i64 = or %269, %270
%272:i64 = xor %252, %271 (hasExternalUses)
%273:i64 = xor 221:i64, %272
%274:i64 = add %263, %273
%275:i64 = shl %273, 13:i64
%276:i64 = lshr %272, 51:i64
%277:i64 = or %275, %276
%278:i64 = xor %274, %277
%279:i64 = add %268, %278
%280:i64 = shl %279, 32:i64
%281:i64 = lshr %279, 32:i64
%282:i64 = or %280, %281
%283:i64 = shl %274, 32:i64
%284:i64 = lshr %274, 32:i64
%285:i64 = or %283, %284
%286:i64 = shl %267, 16:i64
%287:i64 = lshr %267, 48:i64
%288:i64 = or %286, %287
%289:i64 = xor %268, %288
%290:i64 = add %285, %289
%291:i64 = shl %289, 21:i64
%292:i64 = lshr %289, 43:i64
%293:i64 = or %291, %292
%294:i64 = xor %290, %293
%295:i64 = add %282, %294
%296:i64 = shl %278, 17:i64
%297:i64 = lshr %278, 47:i64
%298:i64 = or %296, %297
%299:i64 = xor %279, %298
%300:i64 = add %290, %299
%301:i64 = shl %299, 13:i64
%302:i64 = lshr %299, 51:i64
%303:i64 = or %301, %302
%304:i64 = xor %300, %303
%305:i64 = add %295, %304
%306:i64 = shl %305, 32:i64
%307:i64 = lshr %305, 32:i64
%308:i64 = or %306, %307
%309:i64 = shl %300, 32:i64
%310:i64 = lshr %300, 32:i64
%311:i64 = or %309, %310
%312:i64 = shl %294, 16:i64
%313:i64 = lshr %294, 48:i64
%314:i64 = or %312, %313
%315:i64 = xor %295, %314
%316:i64 = add %311, %315
%317:i64 = shl %315, 21:i64
%318:i64 = lshr %315, 43:i64
%319:i64 = or %317, %318
%320:i64 = xor %316, %319 (hasExternalUses)
%321:i64 = add %308, %320 (hasExternalUses)
%322:i64 = shl %304, 17:i64
%323:i64 = lshr %304, 47:i64
%324:i64 = or %322, %323
%325:i64 = xor %305, %324
%326:i64 = add %316, %325 (hasExternalUses)
%327:i64 = shl %325, 13:i64
%328:i64 = lshr %325, 51:i64
%329:i64 = or %327, %328
%330:i64 = xor %326, %329 (hasExternalUses)
%331:i64 = add %321, %330 (hasExternalUses)
%332:i64 = lshr %331, 32:i64
infer %332

; *****
; For LLVM instruction:
;  %380 = or i64 %379, %378
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250
%252:i64 = add %242, %251
%253:i64 = shl %252, 32:i64
%254:i64 = lshr %252, 32:i64
%255:i64 = or %253, %254 (hasExternalUses)
%256:i64 = shl %247, 32:i64
%257:i64 = lshr %247, 32:i64
%258:i64 = or %256, %257
%259:i64 = shl %241, 16:i64
%260:i64 = lshr %241, 48:i64
%261:i64 = or %259, %260
%262:i64 = xor %242, %261
%263:i64 = add %258, %262 (hasExternalUses)
%264:i64 = shl %262, 21:i64
%265:i64 = lshr %262, 43:i64
%266:i64 = or %264, %265
%267:i64 = xor %263, %266 (hasExternalUses)
%268:i64 = add %255, %267
%269:i64 = shl %251, 17:i64
%270:i64 = lshr %251, 47:i64
%271:i64 = or %269, %270
%272:i64 = xor %252, %271 (hasExternalUses)
%273:i64 = xor 221:i64, %272
%274:i64 = add %263, %273
%275:i64 = shl %273, 13:i64
%276:i64 = lshr %272, 51:i64
%277:i64 = or %275, %276
%278:i64 = xor %274, %277
%279:i64 = add %268, %278
%280:i64 = shl %279, 32:i64
%281:i64 = lshr %279, 32:i64
%282:i64 = or %280, %281
%283:i64 = shl %274, 32:i64
%284:i64 = lshr %274, 32:i64
%285:i64 = or %283, %284
%286:i64 = shl %267, 16:i64
%287:i64 = lshr %267, 48:i64
%288:i64 = or %286, %287
%289:i64 = xor %268, %288
%290:i64 = add %285, %289
%291:i64 = shl %289, 21:i64
%292:i64 = lshr %289, 43:i64
%293:i64 = or %291, %292
%294:i64 = xor %290, %293
%295:i64 = add %282, %294
%296:i64 = shl %278, 17:i64
%297:i64 = lshr %278, 47:i64
%298:i64 = or %296, %297
%299:i64 = xor %279, %298
%300:i64 = add %290, %299
%301:i64 = shl %299, 13:i64
%302:i64 = lshr %299, 51:i64
%303:i64 = or %301, %302
%304:i64 = xor %300, %303
%305:i64 = add %295, %304
%306:i64 = shl %305, 32:i64
%307:i64 = lshr %305, 32:i64
%308:i64 = or %306, %307
%309:i64 = shl %300, 32:i64
%310:i64 = lshr %300, 32:i64
%311:i64 = or %309, %310
%312:i64 = shl %294, 16:i64
%313:i64 = lshr %294, 48:i64
%314:i64 = or %312, %313
%315:i64 = xor %295, %314
%316:i64 = add %311, %315
%317:i64 = shl %315, 21:i64
%318:i64 = lshr %315, 43:i64
%319:i64 = or %317, %318
%320:i64 = xor %316, %319 (hasExternalUses)
%321:i64 = add %308, %320 (hasExternalUses)
%322:i64 = shl %304, 17:i64
%323:i64 = lshr %304, 47:i64
%324:i64 = or %322, %323
%325:i64 = xor %305, %324
%326:i64 = add %316, %325 (hasExternalUses)
%327:i64 = shl %325, 13:i64
%328:i64 = lshr %325, 51:i64
%329:i64 = or %327, %328
%330:i64 = xor %326, %329 (hasExternalUses)
%331:i64 = add %321, %330 (hasExternalUses)
%332:i64 = shl %331, 32:i64
%333:i64 = lshr %331, 32:i64
%334:i64 = or %332, %333
infer %334

; *****
; For LLVM instruction:
;  %381 = add i64 %377, %368
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237
%239:i64 = add %229, %238
%240:i64 = shl %239, 32:i64
%241:i64 = lshr %239, 32:i64
%242:i64 = or %240, %241
%243:i64 = shl %234, 32:i64
%244:i64 = lshr %234, 32:i64
%245:i64 = or %243, %244
%246:i64 = shl %228, 21:i64
%247:i64 = lshr %228, 43:i64
%248:i64 = or %246, %247
%249:i64 = xor %229, %248
%250:i64 = add %245, %249
%251:i64 = shl %249, 16:i64
%252:i64 = lshr %249, 48:i64
%253:i64 = or %251, %252
%254:i64 = xor %250, %253
%255:i64 = add %242, %254 (hasExternalUses)
%256:i64 = shl %238, 13:i64
%257:i64 = lshr %238, 51:i64
%258:i64 = or %256, %257
%259:i64 = xor %239, %258
%260:i64 = add %250, %259
%261:i64 = shl %259, 17:i64
%262:i64 = lshr %259, 47:i64
%263:i64 = or %261, %262
%264:i64 = xor %260, %263 (hasExternalUses)
%265:i64 = xor 221:i64, %264
%266:i64 = add %255, %265
%267:i64 = shl %266, 32:i64
%268:i64 = lshr %266, 32:i64
%269:i64 = or %267, %268
%270:i64 = shl %260, 32:i64
%271:i64 = lshr %260, 32:i64
%272:i64 = or %270, %271 (hasExternalUses)
%273:i64 = shl %254, 21:i64
%274:i64 = lshr %254, 43:i64
%275:i64 = or %273, %274
%276:i64 = xor %255, %275 (hasExternalUses)
%277:i64 = add %272, %276
%278:i64 = shl %276, 16:i64
%279:i64 = lshr %276, 48:i64
%280:i64 = or %278, %279
%281:i64 = xor %277, %280
%282:i64 = add %269, %281
%283:i64 = shl %265, 13:i64
%284:i64 = lshr %264, 51:i64
%285:i64 = or %283, %284
%286:i64 = xor %266, %285
%287:i64 = add %277, %286
%288:i64 = shl %286, 17:i64
%289:i64 = lshr %286, 47:i64
%290:i64 = or %288, %289
%291:i64 = xor %287, %290
%292:i64 = add %282, %291
%293:i64 = shl %292, 32:i64
%294:i64 = lshr %292, 32:i64
%295:i64 = or %293, %294
%296:i64 = shl %287, 32:i64
%297:i64 = lshr %287, 32:i64
%298:i64 = or %296, %297
%299:i64 = shl %281, 21:i64
%300:i64 = lshr %281, 43:i64
%301:i64 = or %299, %300
%302:i64 = xor %282, %301
%303:i64 = add %298, %302
%304:i64 = shl %302, 16:i64
%305:i64 = lshr %302, 48:i64
%306:i64 = or %304, %305
%307:i64 = xor %303, %306
%308:i64 = add %295, %307
%309:i64 = shl %291, 13:i64
%310:i64 = lshr %291, 51:i64
%311:i64 = or %309, %310
%312:i64 = xor %292, %311
%313:i64 = add %303, %312
%314:i64 = shl %312, 17:i64
%315:i64 = lshr %312, 47:i64
%316:i64 = or %314, %315
%317:i64 = xor %313, %316
%318:i64 = add %308, %317
%319:i64 = shl %318, 32:i64
%320:i64 = lshr %318, 32:i64
%321:i64 = or %319, %320
%322:i64 = shl %313, 32:i64
%323:i64 = lshr %313, 32:i64
%324:i64 = or %322, %323
%325:i64 = shl %307, 21:i64
%326:i64 = lshr %307, 43:i64
%327:i64 = or %325, %326
%328:i64 = xor %308, %327
%329:i64 = add %324, %328
%330:i64 = shl %328, 16:i64
%331:i64 = lshr %328, 48:i64
%332:i64 = or %330, %331
%333:i64 = xor %329, %332 (hasExternalUses)
%334:i64 = add %321, %333 (hasExternalUses)
%335:i64 = shl %317, 13:i64
%336:i64 = lshr %317, 51:i64
%337:i64 = or %335, %336
%338:i64 = xor %318, %337
%339:i64 = add %329, %338 (hasExternalUses)
%340:i64 = shl %338, 17:i64
%341:i64 = lshr %338, 47:i64
%342:i64 = or %340, %341
%343:i64 = xor %339, %342 (hasExternalUses)
%344:i64 = add %334, %343
infer %344

; *****
; For LLVM instruction:
;  %382 = shl i64 %377, 13
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250
%252:i64 = add %242, %251
%253:i64 = shl %252, 32:i64
%254:i64 = lshr %252, 32:i64
%255:i64 = or %253, %254 (hasExternalUses)
%256:i64 = shl %247, 32:i64
%257:i64 = lshr %247, 32:i64
%258:i64 = or %256, %257
%259:i64 = shl %241, 16:i64
%260:i64 = lshr %241, 48:i64
%261:i64 = or %259, %260
%262:i64 = xor %242, %261
%263:i64 = add %258, %262 (hasExternalUses)
%264:i64 = shl %262, 21:i64
%265:i64 = lshr %262, 43:i64
%266:i64 = or %264, %265
%267:i64 = xor %263, %266 (hasExternalUses)
%268:i64 = add %255, %267
%269:i64 = shl %251, 17:i64
%270:i64 = lshr %251, 47:i64
%271:i64 = or %269, %270
%272:i64 = xor %252, %271 (hasExternalUses)
%273:i64 = xor 221:i64, %272
%274:i64 = add %263, %273
%275:i64 = shl %273, 13:i64
%276:i64 = lshr %272, 51:i64
%277:i64 = or %275, %276
%278:i64 = xor %274, %277
%279:i64 = add %268, %278
%280:i64 = shl %279, 32:i64
%281:i64 = lshr %279, 32:i64
%282:i64 = or %280, %281
%283:i64 = shl %274, 32:i64
%284:i64 = lshr %274, 32:i64
%285:i64 = or %283, %284
%286:i64 = shl %267, 16:i64
%287:i64 = lshr %267, 48:i64
%288:i64 = or %286, %287
%289:i64 = xor %268, %288
%290:i64 = add %285, %289
%291:i64 = shl %289, 21:i64
%292:i64 = lshr %289, 43:i64
%293:i64 = or %291, %292
%294:i64 = xor %290, %293
%295:i64 = add %282, %294
%296:i64 = shl %278, 17:i64
%297:i64 = lshr %278, 47:i64
%298:i64 = or %296, %297
%299:i64 = xor %279, %298
%300:i64 = add %290, %299
%301:i64 = shl %299, 13:i64
%302:i64 = lshr %299, 51:i64
%303:i64 = or %301, %302
%304:i64 = xor %300, %303
%305:i64 = add %295, %304
%306:i64 = shl %305, 32:i64
%307:i64 = lshr %305, 32:i64
%308:i64 = or %306, %307
%309:i64 = shl %300, 32:i64
%310:i64 = lshr %300, 32:i64
%311:i64 = or %309, %310
%312:i64 = shl %294, 16:i64
%313:i64 = lshr %294, 48:i64
%314:i64 = or %312, %313
%315:i64 = xor %295, %314
%316:i64 = add %311, %315
%317:i64 = shl %315, 21:i64
%318:i64 = lshr %315, 43:i64
%319:i64 = or %317, %318
%320:i64 = xor %316, %319 (hasExternalUses)
%321:i64 = add %308, %320 (hasExternalUses)
%322:i64 = shl %304, 17:i64
%323:i64 = lshr %304, 47:i64
%324:i64 = or %322, %323
%325:i64 = xor %305, %324
%326:i64 = add %316, %325 (hasExternalUses)
%327:i64 = shl %325, 13:i64
%328:i64 = lshr %325, 51:i64
%329:i64 = or %327, %328
%330:i64 = xor %326, %329
%331:i64 = add %321, %330 (hasExternalUses)
%332:i64 = shl %330, 17:i64
%333:i64 = lshr %330, 47:i64
%334:i64 = or %332, %333
%335:i64 = xor %331, %334 (hasExternalUses)
%336:i64 = shl %335, 13:i64
infer %336

; *****
; For LLVM instruction:
;  %383 = lshr i64 %377, 51
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250
%252:i64 = add %242, %251
%253:i64 = shl %252, 32:i64
%254:i64 = lshr %252, 32:i64
%255:i64 = or %253, %254 (hasExternalUses)
%256:i64 = shl %247, 32:i64
%257:i64 = lshr %247, 32:i64
%258:i64 = or %256, %257
%259:i64 = shl %241, 16:i64
%260:i64 = lshr %241, 48:i64
%261:i64 = or %259, %260
%262:i64 = xor %242, %261
%263:i64 = add %258, %262 (hasExternalUses)
%264:i64 = shl %262, 21:i64
%265:i64 = lshr %262, 43:i64
%266:i64 = or %264, %265
%267:i64 = xor %263, %266 (hasExternalUses)
%268:i64 = add %255, %267
%269:i64 = shl %251, 17:i64
%270:i64 = lshr %251, 47:i64
%271:i64 = or %269, %270
%272:i64 = xor %252, %271 (hasExternalUses)
%273:i64 = xor 221:i64, %272
%274:i64 = add %263, %273
%275:i64 = shl %273, 13:i64
%276:i64 = lshr %272, 51:i64
%277:i64 = or %275, %276
%278:i64 = xor %274, %277
%279:i64 = add %268, %278
%280:i64 = shl %279, 32:i64
%281:i64 = lshr %279, 32:i64
%282:i64 = or %280, %281
%283:i64 = shl %274, 32:i64
%284:i64 = lshr %274, 32:i64
%285:i64 = or %283, %284
%286:i64 = shl %267, 16:i64
%287:i64 = lshr %267, 48:i64
%288:i64 = or %286, %287
%289:i64 = xor %268, %288
%290:i64 = add %285, %289
%291:i64 = shl %289, 21:i64
%292:i64 = lshr %289, 43:i64
%293:i64 = or %291, %292
%294:i64 = xor %290, %293
%295:i64 = add %282, %294
%296:i64 = shl %278, 17:i64
%297:i64 = lshr %278, 47:i64
%298:i64 = or %296, %297
%299:i64 = xor %279, %298
%300:i64 = add %290, %299
%301:i64 = shl %299, 13:i64
%302:i64 = lshr %299, 51:i64
%303:i64 = or %301, %302
%304:i64 = xor %300, %303
%305:i64 = add %295, %304
%306:i64 = shl %305, 32:i64
%307:i64 = lshr %305, 32:i64
%308:i64 = or %306, %307
%309:i64 = shl %300, 32:i64
%310:i64 = lshr %300, 32:i64
%311:i64 = or %309, %310
%312:i64 = shl %294, 16:i64
%313:i64 = lshr %294, 48:i64
%314:i64 = or %312, %313
%315:i64 = xor %295, %314
%316:i64 = add %311, %315
%317:i64 = shl %315, 21:i64
%318:i64 = lshr %315, 43:i64
%319:i64 = or %317, %318
%320:i64 = xor %316, %319 (hasExternalUses)
%321:i64 = add %308, %320 (hasExternalUses)
%322:i64 = shl %304, 17:i64
%323:i64 = lshr %304, 47:i64
%324:i64 = or %322, %323
%325:i64 = xor %305, %324
%326:i64 = add %316, %325 (hasExternalUses)
%327:i64 = shl %325, 13:i64
%328:i64 = lshr %325, 51:i64
%329:i64 = or %327, %328
%330:i64 = xor %326, %329
%331:i64 = add %321, %330 (hasExternalUses)
%332:i64 = shl %330, 17:i64
%333:i64 = lshr %330, 47:i64
%334:i64 = or %332, %333
%335:i64 = xor %331, %334 (hasExternalUses)
%336:i64 = lshr %335, 51:i64
infer %336

; *****
; For LLVM instruction:
;  %384 = or i64 %383, %382
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250
%252:i64 = add %242, %251
%253:i64 = shl %252, 32:i64
%254:i64 = lshr %252, 32:i64
%255:i64 = or %253, %254 (hasExternalUses)
%256:i64 = shl %247, 32:i64
%257:i64 = lshr %247, 32:i64
%258:i64 = or %256, %257
%259:i64 = shl %241, 16:i64
%260:i64 = lshr %241, 48:i64
%261:i64 = or %259, %260
%262:i64 = xor %242, %261
%263:i64 = add %258, %262 (hasExternalUses)
%264:i64 = shl %262, 21:i64
%265:i64 = lshr %262, 43:i64
%266:i64 = or %264, %265
%267:i64 = xor %263, %266 (hasExternalUses)
%268:i64 = add %255, %267
%269:i64 = shl %251, 17:i64
%270:i64 = lshr %251, 47:i64
%271:i64 = or %269, %270
%272:i64 = xor %252, %271 (hasExternalUses)
%273:i64 = xor 221:i64, %272
%274:i64 = add %263, %273
%275:i64 = shl %273, 13:i64
%276:i64 = lshr %272, 51:i64
%277:i64 = or %275, %276
%278:i64 = xor %274, %277
%279:i64 = add %268, %278
%280:i64 = shl %279, 32:i64
%281:i64 = lshr %279, 32:i64
%282:i64 = or %280, %281
%283:i64 = shl %274, 32:i64
%284:i64 = lshr %274, 32:i64
%285:i64 = or %283, %284
%286:i64 = shl %267, 16:i64
%287:i64 = lshr %267, 48:i64
%288:i64 = or %286, %287
%289:i64 = xor %268, %288
%290:i64 = add %285, %289
%291:i64 = shl %289, 21:i64
%292:i64 = lshr %289, 43:i64
%293:i64 = or %291, %292
%294:i64 = xor %290, %293
%295:i64 = add %282, %294
%296:i64 = shl %278, 17:i64
%297:i64 = lshr %278, 47:i64
%298:i64 = or %296, %297
%299:i64 = xor %279, %298
%300:i64 = add %290, %299
%301:i64 = shl %299, 13:i64
%302:i64 = lshr %299, 51:i64
%303:i64 = or %301, %302
%304:i64 = xor %300, %303
%305:i64 = add %295, %304
%306:i64 = shl %305, 32:i64
%307:i64 = lshr %305, 32:i64
%308:i64 = or %306, %307
%309:i64 = shl %300, 32:i64
%310:i64 = lshr %300, 32:i64
%311:i64 = or %309, %310
%312:i64 = shl %294, 16:i64
%313:i64 = lshr %294, 48:i64
%314:i64 = or %312, %313
%315:i64 = xor %295, %314
%316:i64 = add %311, %315
%317:i64 = shl %315, 21:i64
%318:i64 = lshr %315, 43:i64
%319:i64 = or %317, %318
%320:i64 = xor %316, %319 (hasExternalUses)
%321:i64 = add %308, %320 (hasExternalUses)
%322:i64 = shl %304, 17:i64
%323:i64 = lshr %304, 47:i64
%324:i64 = or %322, %323
%325:i64 = xor %305, %324
%326:i64 = add %316, %325 (hasExternalUses)
%327:i64 = shl %325, 13:i64
%328:i64 = lshr %325, 51:i64
%329:i64 = or %327, %328
%330:i64 = xor %326, %329
%331:i64 = add %321, %330 (hasExternalUses)
%332:i64 = shl %330, 17:i64
%333:i64 = lshr %330, 47:i64
%334:i64 = or %332, %333
%335:i64 = xor %331, %334 (hasExternalUses)
%336:i64 = shl %335, 13:i64
%337:i64 = lshr %335, 51:i64
%338:i64 = or %336, %337
infer %338

; *****
; For LLVM instruction:
;  %385 = xor i64 %384, %381
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237
%239:i64 = add %229, %238
%240:i64 = shl %239, 32:i64
%241:i64 = lshr %239, 32:i64
%242:i64 = or %240, %241
%243:i64 = shl %234, 32:i64
%244:i64 = lshr %234, 32:i64
%245:i64 = or %243, %244
%246:i64 = shl %228, 21:i64
%247:i64 = lshr %228, 43:i64
%248:i64 = or %246, %247
%249:i64 = xor %229, %248
%250:i64 = add %245, %249
%251:i64 = shl %249, 16:i64
%252:i64 = lshr %249, 48:i64
%253:i64 = or %251, %252
%254:i64 = xor %250, %253
%255:i64 = add %242, %254 (hasExternalUses)
%256:i64 = shl %238, 13:i64
%257:i64 = lshr %238, 51:i64
%258:i64 = or %256, %257
%259:i64 = xor %239, %258
%260:i64 = add %250, %259
%261:i64 = shl %259, 17:i64
%262:i64 = lshr %259, 47:i64
%263:i64 = or %261, %262
%264:i64 = xor %260, %263 (hasExternalUses)
%265:i64 = xor 221:i64, %264
%266:i64 = add %255, %265
%267:i64 = shl %266, 32:i64
%268:i64 = lshr %266, 32:i64
%269:i64 = or %267, %268
%270:i64 = shl %260, 32:i64
%271:i64 = lshr %260, 32:i64
%272:i64 = or %270, %271 (hasExternalUses)
%273:i64 = shl %254, 21:i64
%274:i64 = lshr %254, 43:i64
%275:i64 = or %273, %274
%276:i64 = xor %255, %275 (hasExternalUses)
%277:i64 = add %272, %276
%278:i64 = shl %276, 16:i64
%279:i64 = lshr %276, 48:i64
%280:i64 = or %278, %279
%281:i64 = xor %277, %280
%282:i64 = add %269, %281
%283:i64 = shl %265, 13:i64
%284:i64 = lshr %264, 51:i64
%285:i64 = or %283, %284
%286:i64 = xor %266, %285
%287:i64 = add %277, %286
%288:i64 = shl %286, 17:i64
%289:i64 = lshr %286, 47:i64
%290:i64 = or %288, %289
%291:i64 = xor %287, %290
%292:i64 = add %282, %291
%293:i64 = shl %292, 32:i64
%294:i64 = lshr %292, 32:i64
%295:i64 = or %293, %294
%296:i64 = shl %287, 32:i64
%297:i64 = lshr %287, 32:i64
%298:i64 = or %296, %297
%299:i64 = shl %281, 21:i64
%300:i64 = lshr %281, 43:i64
%301:i64 = or %299, %300
%302:i64 = xor %282, %301
%303:i64 = add %298, %302
%304:i64 = shl %302, 16:i64
%305:i64 = lshr %302, 48:i64
%306:i64 = or %304, %305
%307:i64 = xor %303, %306
%308:i64 = add %295, %307
%309:i64 = shl %291, 13:i64
%310:i64 = lshr %291, 51:i64
%311:i64 = or %309, %310
%312:i64 = xor %292, %311
%313:i64 = add %303, %312
%314:i64 = shl %312, 17:i64
%315:i64 = lshr %312, 47:i64
%316:i64 = or %314, %315
%317:i64 = xor %313, %316
%318:i64 = add %308, %317
%319:i64 = shl %318, 32:i64
%320:i64 = lshr %318, 32:i64
%321:i64 = or %319, %320
%322:i64 = shl %313, 32:i64
%323:i64 = lshr %313, 32:i64
%324:i64 = or %322, %323
%325:i64 = shl %307, 21:i64
%326:i64 = lshr %307, 43:i64
%327:i64 = or %325, %326
%328:i64 = xor %308, %327
%329:i64 = add %324, %328
%330:i64 = shl %328, 16:i64
%331:i64 = lshr %328, 48:i64
%332:i64 = or %330, %331
%333:i64 = xor %329, %332 (hasExternalUses)
%334:i64 = add %321, %333 (hasExternalUses)
%335:i64 = shl %317, 13:i64
%336:i64 = lshr %317, 51:i64
%337:i64 = or %335, %336
%338:i64 = xor %318, %337
%339:i64 = add %329, %338 (hasExternalUses)
%340:i64 = shl %338, 17:i64
%341:i64 = lshr %338, 47:i64
%342:i64 = or %340, %341
%343:i64 = xor %339, %342
%344:i64 = add %334, %343
%345:i64 = shl %343, 13:i64
%346:i64 = lshr %343, 51:i64
%347:i64 = or %345, %346
%348:i64 = xor %344, %347
infer %348

; *****
; For LLVM instruction:
;  %386 = add i64 %372, %380
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250
%252:i64 = add %242, %251
%253:i64 = shl %252, 32:i64
%254:i64 = lshr %252, 32:i64
%255:i64 = or %253, %254 (hasExternalUses)
%256:i64 = shl %247, 32:i64
%257:i64 = lshr %247, 32:i64
%258:i64 = or %256, %257
%259:i64 = shl %241, 16:i64
%260:i64 = lshr %241, 48:i64
%261:i64 = or %259, %260
%262:i64 = xor %242, %261
%263:i64 = add %258, %262 (hasExternalUses)
%264:i64 = shl %262, 21:i64
%265:i64 = lshr %262, 43:i64
%266:i64 = or %264, %265
%267:i64 = xor %263, %266 (hasExternalUses)
%268:i64 = add %255, %267
%269:i64 = shl %251, 17:i64
%270:i64 = lshr %251, 47:i64
%271:i64 = or %269, %270
%272:i64 = xor %252, %271 (hasExternalUses)
%273:i64 = xor 221:i64, %272
%274:i64 = add %263, %273
%275:i64 = shl %273, 13:i64
%276:i64 = lshr %272, 51:i64
%277:i64 = or %275, %276
%278:i64 = xor %274, %277
%279:i64 = add %268, %278
%280:i64 = shl %279, 32:i64
%281:i64 = lshr %279, 32:i64
%282:i64 = or %280, %281
%283:i64 = shl %274, 32:i64
%284:i64 = lshr %274, 32:i64
%285:i64 = or %283, %284
%286:i64 = shl %267, 16:i64
%287:i64 = lshr %267, 48:i64
%288:i64 = or %286, %287
%289:i64 = xor %268, %288
%290:i64 = add %285, %289
%291:i64 = shl %289, 21:i64
%292:i64 = lshr %289, 43:i64
%293:i64 = or %291, %292
%294:i64 = xor %290, %293
%295:i64 = add %282, %294
%296:i64 = shl %278, 17:i64
%297:i64 = lshr %278, 47:i64
%298:i64 = or %296, %297
%299:i64 = xor %279, %298
%300:i64 = add %290, %299
%301:i64 = shl %299, 13:i64
%302:i64 = lshr %299, 51:i64
%303:i64 = or %301, %302
%304:i64 = xor %300, %303
%305:i64 = add %295, %304
%306:i64 = shl %305, 32:i64
%307:i64 = lshr %305, 32:i64
%308:i64 = or %306, %307
%309:i64 = shl %300, 32:i64
%310:i64 = lshr %300, 32:i64
%311:i64 = or %309, %310
%312:i64 = shl %294, 16:i64
%313:i64 = lshr %294, 48:i64
%314:i64 = or %312, %313
%315:i64 = xor %295, %314
%316:i64 = add %311, %315
%317:i64 = shl %315, 21:i64
%318:i64 = lshr %315, 43:i64
%319:i64 = or %317, %318
%320:i64 = xor %316, %319
%321:i64 = add %308, %320
%322:i64 = shl %304, 17:i64
%323:i64 = lshr %304, 47:i64
%324:i64 = or %322, %323
%325:i64 = xor %305, %324
%326:i64 = add %316, %325
%327:i64 = shl %325, 13:i64
%328:i64 = lshr %325, 51:i64
%329:i64 = or %327, %328
%330:i64 = xor %326, %329 (hasExternalUses)
%331:i64 = add %321, %330 (hasExternalUses)
%332:i64 = shl %331, 32:i64
%333:i64 = lshr %331, 32:i64
%334:i64 = or %332, %333
%335:i64 = shl %326, 32:i64
%336:i64 = lshr %326, 32:i64
%337:i64 = or %335, %336
%338:i64 = shl %320, 16:i64
%339:i64 = lshr %320, 48:i64
%340:i64 = or %338, %339
%341:i64 = xor %321, %340
%342:i64 = add %337, %341 (hasExternalUses)
%343:i64 = shl %341, 21:i64
%344:i64 = lshr %341, 43:i64
%345:i64 = or %343, %344
%346:i64 = xor %342, %345 (hasExternalUses)
%347:i64 = add %334, %346
infer %347

; *****
; For LLVM instruction:
;  %387 = shl i64 %372, 16
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237
%239:i64 = add %229, %238
%240:i64 = shl %239, 32:i64
%241:i64 = lshr %239, 32:i64
%242:i64 = or %240, %241
%243:i64 = shl %234, 32:i64
%244:i64 = lshr %234, 32:i64
%245:i64 = or %243, %244
%246:i64 = shl %228, 21:i64
%247:i64 = lshr %228, 43:i64
%248:i64 = or %246, %247
%249:i64 = xor %229, %248
%250:i64 = add %245, %249
%251:i64 = shl %249, 16:i64
%252:i64 = lshr %249, 48:i64
%253:i64 = or %251, %252
%254:i64 = xor %250, %253
%255:i64 = add %242, %254 (hasExternalUses)
%256:i64 = shl %238, 13:i64
%257:i64 = lshr %238, 51:i64
%258:i64 = or %256, %257
%259:i64 = xor %239, %258
%260:i64 = add %250, %259
%261:i64 = shl %259, 17:i64
%262:i64 = lshr %259, 47:i64
%263:i64 = or %261, %262
%264:i64 = xor %260, %263 (hasExternalUses)
%265:i64 = xor 221:i64, %264
%266:i64 = add %255, %265
%267:i64 = shl %266, 32:i64
%268:i64 = lshr %266, 32:i64
%269:i64 = or %267, %268
%270:i64 = shl %260, 32:i64
%271:i64 = lshr %260, 32:i64
%272:i64 = or %270, %271 (hasExternalUses)
%273:i64 = shl %254, 21:i64
%274:i64 = lshr %254, 43:i64
%275:i64 = or %273, %274
%276:i64 = xor %255, %275 (hasExternalUses)
%277:i64 = add %272, %276
%278:i64 = shl %276, 16:i64
%279:i64 = lshr %276, 48:i64
%280:i64 = or %278, %279
%281:i64 = xor %277, %280
%282:i64 = add %269, %281
%283:i64 = shl %265, 13:i64
%284:i64 = lshr %264, 51:i64
%285:i64 = or %283, %284
%286:i64 = xor %266, %285
%287:i64 = add %277, %286
%288:i64 = shl %286, 17:i64
%289:i64 = lshr %286, 47:i64
%290:i64 = or %288, %289
%291:i64 = xor %287, %290
%292:i64 = add %282, %291
%293:i64 = shl %292, 32:i64
%294:i64 = lshr %292, 32:i64
%295:i64 = or %293, %294
%296:i64 = shl %287, 32:i64
%297:i64 = lshr %287, 32:i64
%298:i64 = or %296, %297
%299:i64 = shl %281, 21:i64
%300:i64 = lshr %281, 43:i64
%301:i64 = or %299, %300
%302:i64 = xor %282, %301
%303:i64 = add %298, %302
%304:i64 = shl %302, 16:i64
%305:i64 = lshr %302, 48:i64
%306:i64 = or %304, %305
%307:i64 = xor %303, %306
%308:i64 = add %295, %307
%309:i64 = shl %291, 13:i64
%310:i64 = lshr %291, 51:i64
%311:i64 = or %309, %310
%312:i64 = xor %292, %311
%313:i64 = add %303, %312
%314:i64 = shl %312, 17:i64
%315:i64 = lshr %312, 47:i64
%316:i64 = or %314, %315
%317:i64 = xor %313, %316 (hasExternalUses)
%318:i64 = add %308, %317 (hasExternalUses)
%319:i64 = shl %318, 32:i64
%320:i64 = lshr %318, 32:i64
%321:i64 = or %319, %320
%322:i64 = shl %313, 32:i64
%323:i64 = lshr %313, 32:i64
%324:i64 = or %322, %323
%325:i64 = shl %307, 21:i64
%326:i64 = lshr %307, 43:i64
%327:i64 = or %325, %326
%328:i64 = xor %308, %327
%329:i64 = add %324, %328 (hasExternalUses)
%330:i64 = shl %328, 16:i64
%331:i64 = lshr %328, 48:i64
%332:i64 = or %330, %331
%333:i64 = xor %329, %332
%334:i64 = add %321, %333 (hasExternalUses)
%335:i64 = shl %333, 21:i64
%336:i64 = lshr %333, 43:i64
%337:i64 = or %335, %336
%338:i64 = xor %334, %337 (hasExternalUses)
%339:i64 = shl %338, 16:i64
infer %339

; *****
; For LLVM instruction:
;  %388 = lshr i64 %372, 48
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237
%239:i64 = add %229, %238
%240:i64 = shl %239, 32:i64
%241:i64 = lshr %239, 32:i64
%242:i64 = or %240, %241
%243:i64 = shl %234, 32:i64
%244:i64 = lshr %234, 32:i64
%245:i64 = or %243, %244
%246:i64 = shl %228, 21:i64
%247:i64 = lshr %228, 43:i64
%248:i64 = or %246, %247
%249:i64 = xor %229, %248
%250:i64 = add %245, %249
%251:i64 = shl %249, 16:i64
%252:i64 = lshr %249, 48:i64
%253:i64 = or %251, %252
%254:i64 = xor %250, %253
%255:i64 = add %242, %254 (hasExternalUses)
%256:i64 = shl %238, 13:i64
%257:i64 = lshr %238, 51:i64
%258:i64 = or %256, %257
%259:i64 = xor %239, %258
%260:i64 = add %250, %259
%261:i64 = shl %259, 17:i64
%262:i64 = lshr %259, 47:i64
%263:i64 = or %261, %262
%264:i64 = xor %260, %263 (hasExternalUses)
%265:i64 = xor 221:i64, %264
%266:i64 = add %255, %265
%267:i64 = shl %266, 32:i64
%268:i64 = lshr %266, 32:i64
%269:i64 = or %267, %268
%270:i64 = shl %260, 32:i64
%271:i64 = lshr %260, 32:i64
%272:i64 = or %270, %271 (hasExternalUses)
%273:i64 = shl %254, 21:i64
%274:i64 = lshr %254, 43:i64
%275:i64 = or %273, %274
%276:i64 = xor %255, %275 (hasExternalUses)
%277:i64 = add %272, %276
%278:i64 = shl %276, 16:i64
%279:i64 = lshr %276, 48:i64
%280:i64 = or %278, %279
%281:i64 = xor %277, %280
%282:i64 = add %269, %281
%283:i64 = shl %265, 13:i64
%284:i64 = lshr %264, 51:i64
%285:i64 = or %283, %284
%286:i64 = xor %266, %285
%287:i64 = add %277, %286
%288:i64 = shl %286, 17:i64
%289:i64 = lshr %286, 47:i64
%290:i64 = or %288, %289
%291:i64 = xor %287, %290
%292:i64 = add %282, %291
%293:i64 = shl %292, 32:i64
%294:i64 = lshr %292, 32:i64
%295:i64 = or %293, %294
%296:i64 = shl %287, 32:i64
%297:i64 = lshr %287, 32:i64
%298:i64 = or %296, %297
%299:i64 = shl %281, 21:i64
%300:i64 = lshr %281, 43:i64
%301:i64 = or %299, %300
%302:i64 = xor %282, %301
%303:i64 = add %298, %302
%304:i64 = shl %302, 16:i64
%305:i64 = lshr %302, 48:i64
%306:i64 = or %304, %305
%307:i64 = xor %303, %306
%308:i64 = add %295, %307
%309:i64 = shl %291, 13:i64
%310:i64 = lshr %291, 51:i64
%311:i64 = or %309, %310
%312:i64 = xor %292, %311
%313:i64 = add %303, %312
%314:i64 = shl %312, 17:i64
%315:i64 = lshr %312, 47:i64
%316:i64 = or %314, %315
%317:i64 = xor %313, %316 (hasExternalUses)
%318:i64 = add %308, %317 (hasExternalUses)
%319:i64 = shl %318, 32:i64
%320:i64 = lshr %318, 32:i64
%321:i64 = or %319, %320
%322:i64 = shl %313, 32:i64
%323:i64 = lshr %313, 32:i64
%324:i64 = or %322, %323
%325:i64 = shl %307, 21:i64
%326:i64 = lshr %307, 43:i64
%327:i64 = or %325, %326
%328:i64 = xor %308, %327
%329:i64 = add %324, %328 (hasExternalUses)
%330:i64 = shl %328, 16:i64
%331:i64 = lshr %328, 48:i64
%332:i64 = or %330, %331
%333:i64 = xor %329, %332
%334:i64 = add %321, %333 (hasExternalUses)
%335:i64 = shl %333, 21:i64
%336:i64 = lshr %333, 43:i64
%337:i64 = or %335, %336
%338:i64 = xor %334, %337 (hasExternalUses)
%339:i64 = lshr %338, 48:i64
infer %339

; *****
; For LLVM instruction:
;  %389 = or i64 %388, %387
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237
%239:i64 = add %229, %238
%240:i64 = shl %239, 32:i64
%241:i64 = lshr %239, 32:i64
%242:i64 = or %240, %241
%243:i64 = shl %234, 32:i64
%244:i64 = lshr %234, 32:i64
%245:i64 = or %243, %244
%246:i64 = shl %228, 21:i64
%247:i64 = lshr %228, 43:i64
%248:i64 = or %246, %247
%249:i64 = xor %229, %248
%250:i64 = add %245, %249
%251:i64 = shl %249, 16:i64
%252:i64 = lshr %249, 48:i64
%253:i64 = or %251, %252
%254:i64 = xor %250, %253
%255:i64 = add %242, %254 (hasExternalUses)
%256:i64 = shl %238, 13:i64
%257:i64 = lshr %238, 51:i64
%258:i64 = or %256, %257
%259:i64 = xor %239, %258
%260:i64 = add %250, %259
%261:i64 = shl %259, 17:i64
%262:i64 = lshr %259, 47:i64
%263:i64 = or %261, %262
%264:i64 = xor %260, %263 (hasExternalUses)
%265:i64 = xor 221:i64, %264
%266:i64 = add %255, %265
%267:i64 = shl %266, 32:i64
%268:i64 = lshr %266, 32:i64
%269:i64 = or %267, %268
%270:i64 = shl %260, 32:i64
%271:i64 = lshr %260, 32:i64
%272:i64 = or %270, %271 (hasExternalUses)
%273:i64 = shl %254, 21:i64
%274:i64 = lshr %254, 43:i64
%275:i64 = or %273, %274
%276:i64 = xor %255, %275 (hasExternalUses)
%277:i64 = add %272, %276
%278:i64 = shl %276, 16:i64
%279:i64 = lshr %276, 48:i64
%280:i64 = or %278, %279
%281:i64 = xor %277, %280
%282:i64 = add %269, %281
%283:i64 = shl %265, 13:i64
%284:i64 = lshr %264, 51:i64
%285:i64 = or %283, %284
%286:i64 = xor %266, %285
%287:i64 = add %277, %286
%288:i64 = shl %286, 17:i64
%289:i64 = lshr %286, 47:i64
%290:i64 = or %288, %289
%291:i64 = xor %287, %290
%292:i64 = add %282, %291
%293:i64 = shl %292, 32:i64
%294:i64 = lshr %292, 32:i64
%295:i64 = or %293, %294
%296:i64 = shl %287, 32:i64
%297:i64 = lshr %287, 32:i64
%298:i64 = or %296, %297
%299:i64 = shl %281, 21:i64
%300:i64 = lshr %281, 43:i64
%301:i64 = or %299, %300
%302:i64 = xor %282, %301
%303:i64 = add %298, %302
%304:i64 = shl %302, 16:i64
%305:i64 = lshr %302, 48:i64
%306:i64 = or %304, %305
%307:i64 = xor %303, %306
%308:i64 = add %295, %307
%309:i64 = shl %291, 13:i64
%310:i64 = lshr %291, 51:i64
%311:i64 = or %309, %310
%312:i64 = xor %292, %311
%313:i64 = add %303, %312
%314:i64 = shl %312, 17:i64
%315:i64 = lshr %312, 47:i64
%316:i64 = or %314, %315
%317:i64 = xor %313, %316 (hasExternalUses)
%318:i64 = add %308, %317 (hasExternalUses)
%319:i64 = shl %318, 32:i64
%320:i64 = lshr %318, 32:i64
%321:i64 = or %319, %320
%322:i64 = shl %313, 32:i64
%323:i64 = lshr %313, 32:i64
%324:i64 = or %322, %323
%325:i64 = shl %307, 21:i64
%326:i64 = lshr %307, 43:i64
%327:i64 = or %325, %326
%328:i64 = xor %308, %327
%329:i64 = add %324, %328 (hasExternalUses)
%330:i64 = shl %328, 16:i64
%331:i64 = lshr %328, 48:i64
%332:i64 = or %330, %331
%333:i64 = xor %329, %332
%334:i64 = add %321, %333 (hasExternalUses)
%335:i64 = shl %333, 21:i64
%336:i64 = lshr %333, 43:i64
%337:i64 = or %335, %336
%338:i64 = xor %334, %337 (hasExternalUses)
%339:i64 = shl %338, 16:i64
%340:i64 = lshr %338, 48:i64
%341:i64 = or %339, %340
infer %341

; *****
; For LLVM instruction:
;  %390 = xor i64 %389, %386
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250
%252:i64 = add %242, %251
%253:i64 = shl %252, 32:i64
%254:i64 = lshr %252, 32:i64
%255:i64 = or %253, %254 (hasExternalUses)
%256:i64 = shl %247, 32:i64
%257:i64 = lshr %247, 32:i64
%258:i64 = or %256, %257
%259:i64 = shl %241, 16:i64
%260:i64 = lshr %241, 48:i64
%261:i64 = or %259, %260
%262:i64 = xor %242, %261
%263:i64 = add %258, %262 (hasExternalUses)
%264:i64 = shl %262, 21:i64
%265:i64 = lshr %262, 43:i64
%266:i64 = or %264, %265
%267:i64 = xor %263, %266 (hasExternalUses)
%268:i64 = add %255, %267
%269:i64 = shl %251, 17:i64
%270:i64 = lshr %251, 47:i64
%271:i64 = or %269, %270
%272:i64 = xor %252, %271 (hasExternalUses)
%273:i64 = xor 221:i64, %272
%274:i64 = add %263, %273
%275:i64 = shl %273, 13:i64
%276:i64 = lshr %272, 51:i64
%277:i64 = or %275, %276
%278:i64 = xor %274, %277
%279:i64 = add %268, %278
%280:i64 = shl %279, 32:i64
%281:i64 = lshr %279, 32:i64
%282:i64 = or %280, %281
%283:i64 = shl %274, 32:i64
%284:i64 = lshr %274, 32:i64
%285:i64 = or %283, %284
%286:i64 = shl %267, 16:i64
%287:i64 = lshr %267, 48:i64
%288:i64 = or %286, %287
%289:i64 = xor %268, %288
%290:i64 = add %285, %289
%291:i64 = shl %289, 21:i64
%292:i64 = lshr %289, 43:i64
%293:i64 = or %291, %292
%294:i64 = xor %290, %293
%295:i64 = add %282, %294
%296:i64 = shl %278, 17:i64
%297:i64 = lshr %278, 47:i64
%298:i64 = or %296, %297
%299:i64 = xor %279, %298
%300:i64 = add %290, %299
%301:i64 = shl %299, 13:i64
%302:i64 = lshr %299, 51:i64
%303:i64 = or %301, %302
%304:i64 = xor %300, %303
%305:i64 = add %295, %304
%306:i64 = shl %305, 32:i64
%307:i64 = lshr %305, 32:i64
%308:i64 = or %306, %307
%309:i64 = shl %300, 32:i64
%310:i64 = lshr %300, 32:i64
%311:i64 = or %309, %310
%312:i64 = shl %294, 16:i64
%313:i64 = lshr %294, 48:i64
%314:i64 = or %312, %313
%315:i64 = xor %295, %314
%316:i64 = add %311, %315
%317:i64 = shl %315, 21:i64
%318:i64 = lshr %315, 43:i64
%319:i64 = or %317, %318
%320:i64 = xor %316, %319
%321:i64 = add %308, %320
%322:i64 = shl %304, 17:i64
%323:i64 = lshr %304, 47:i64
%324:i64 = or %322, %323
%325:i64 = xor %305, %324
%326:i64 = add %316, %325
%327:i64 = shl %325, 13:i64
%328:i64 = lshr %325, 51:i64
%329:i64 = or %327, %328
%330:i64 = xor %326, %329 (hasExternalUses)
%331:i64 = add %321, %330 (hasExternalUses)
%332:i64 = shl %331, 32:i64
%333:i64 = lshr %331, 32:i64
%334:i64 = or %332, %333
%335:i64 = shl %326, 32:i64
%336:i64 = lshr %326, 32:i64
%337:i64 = or %335, %336
%338:i64 = shl %320, 16:i64
%339:i64 = lshr %320, 48:i64
%340:i64 = or %338, %339
%341:i64 = xor %321, %340
%342:i64 = add %337, %341 (hasExternalUses)
%343:i64 = shl %341, 21:i64
%344:i64 = lshr %341, 43:i64
%345:i64 = or %343, %344
%346:i64 = xor %342, %345
%347:i64 = add %334, %346 (hasExternalUses)
%348:i64 = shl %346, 16:i64
%349:i64 = lshr %346, 48:i64
%350:i64 = or %348, %349
%351:i64 = xor %347, %350
infer %351

; *****
; For LLVM instruction:
;  %391 = shl i64 %390, 21
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250
%252:i64 = add %242, %251
%253:i64 = shl %252, 32:i64
%254:i64 = lshr %252, 32:i64
%255:i64 = or %253, %254 (hasExternalUses)
%256:i64 = shl %247, 32:i64
%257:i64 = lshr %247, 32:i64
%258:i64 = or %256, %257
%259:i64 = shl %241, 16:i64
%260:i64 = lshr %241, 48:i64
%261:i64 = or %259, %260
%262:i64 = xor %242, %261
%263:i64 = add %258, %262 (hasExternalUses)
%264:i64 = shl %262, 21:i64
%265:i64 = lshr %262, 43:i64
%266:i64 = or %264, %265
%267:i64 = xor %263, %266 (hasExternalUses)
%268:i64 = add %255, %267
%269:i64 = shl %251, 17:i64
%270:i64 = lshr %251, 47:i64
%271:i64 = or %269, %270
%272:i64 = xor %252, %271 (hasExternalUses)
%273:i64 = xor 221:i64, %272
%274:i64 = add %263, %273
%275:i64 = shl %273, 13:i64
%276:i64 = lshr %272, 51:i64
%277:i64 = or %275, %276
%278:i64 = xor %274, %277
%279:i64 = add %268, %278
%280:i64 = shl %279, 32:i64
%281:i64 = lshr %279, 32:i64
%282:i64 = or %280, %281
%283:i64 = shl %274, 32:i64
%284:i64 = lshr %274, 32:i64
%285:i64 = or %283, %284
%286:i64 = shl %267, 16:i64
%287:i64 = lshr %267, 48:i64
%288:i64 = or %286, %287
%289:i64 = xor %268, %288
%290:i64 = add %285, %289
%291:i64 = shl %289, 21:i64
%292:i64 = lshr %289, 43:i64
%293:i64 = or %291, %292
%294:i64 = xor %290, %293
%295:i64 = add %282, %294
%296:i64 = shl %278, 17:i64
%297:i64 = lshr %278, 47:i64
%298:i64 = or %296, %297
%299:i64 = xor %279, %298
%300:i64 = add %290, %299
%301:i64 = shl %299, 13:i64
%302:i64 = lshr %299, 51:i64
%303:i64 = or %301, %302
%304:i64 = xor %300, %303
%305:i64 = add %295, %304
%306:i64 = shl %305, 32:i64
%307:i64 = lshr %305, 32:i64
%308:i64 = or %306, %307
%309:i64 = shl %300, 32:i64
%310:i64 = lshr %300, 32:i64
%311:i64 = or %309, %310
%312:i64 = shl %294, 16:i64
%313:i64 = lshr %294, 48:i64
%314:i64 = or %312, %313
%315:i64 = xor %295, %314
%316:i64 = add %311, %315
%317:i64 = shl %315, 21:i64
%318:i64 = lshr %315, 43:i64
%319:i64 = or %317, %318
%320:i64 = xor %316, %319
%321:i64 = add %308, %320
%322:i64 = shl %304, 17:i64
%323:i64 = lshr %304, 47:i64
%324:i64 = or %322, %323
%325:i64 = xor %305, %324
%326:i64 = add %316, %325
%327:i64 = shl %325, 13:i64
%328:i64 = lshr %325, 51:i64
%329:i64 = or %327, %328
%330:i64 = xor %326, %329 (hasExternalUses)
%331:i64 = add %321, %330 (hasExternalUses)
%332:i64 = shl %331, 32:i64
%333:i64 = lshr %331, 32:i64
%334:i64 = or %332, %333
%335:i64 = shl %326, 32:i64
%336:i64 = lshr %326, 32:i64
%337:i64 = or %335, %336
%338:i64 = shl %320, 16:i64
%339:i64 = lshr %320, 48:i64
%340:i64 = or %338, %339
%341:i64 = xor %321, %340
%342:i64 = add %337, %341 (hasExternalUses)
%343:i64 = shl %341, 21:i64
%344:i64 = lshr %341, 43:i64
%345:i64 = or %343, %344
%346:i64 = xor %342, %345
%347:i64 = add %334, %346 (hasExternalUses)
%348:i64 = shl %346, 16:i64
%349:i64 = lshr %346, 48:i64
%350:i64 = or %348, %349
%351:i64 = xor %347, %350 (hasExternalUses)
%352:i64 = shl %351, 21:i64
infer %352

; *****
; For LLVM instruction:
;  %392 = lshr i64 %390, 43
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250
%252:i64 = add %242, %251
%253:i64 = shl %252, 32:i64
%254:i64 = lshr %252, 32:i64
%255:i64 = or %253, %254 (hasExternalUses)
%256:i64 = shl %247, 32:i64
%257:i64 = lshr %247, 32:i64
%258:i64 = or %256, %257
%259:i64 = shl %241, 16:i64
%260:i64 = lshr %241, 48:i64
%261:i64 = or %259, %260
%262:i64 = xor %242, %261
%263:i64 = add %258, %262 (hasExternalUses)
%264:i64 = shl %262, 21:i64
%265:i64 = lshr %262, 43:i64
%266:i64 = or %264, %265
%267:i64 = xor %263, %266 (hasExternalUses)
%268:i64 = add %255, %267
%269:i64 = shl %251, 17:i64
%270:i64 = lshr %251, 47:i64
%271:i64 = or %269, %270
%272:i64 = xor %252, %271 (hasExternalUses)
%273:i64 = xor 221:i64, %272
%274:i64 = add %263, %273
%275:i64 = shl %273, 13:i64
%276:i64 = lshr %272, 51:i64
%277:i64 = or %275, %276
%278:i64 = xor %274, %277
%279:i64 = add %268, %278
%280:i64 = shl %279, 32:i64
%281:i64 = lshr %279, 32:i64
%282:i64 = or %280, %281
%283:i64 = shl %274, 32:i64
%284:i64 = lshr %274, 32:i64
%285:i64 = or %283, %284
%286:i64 = shl %267, 16:i64
%287:i64 = lshr %267, 48:i64
%288:i64 = or %286, %287
%289:i64 = xor %268, %288
%290:i64 = add %285, %289
%291:i64 = shl %289, 21:i64
%292:i64 = lshr %289, 43:i64
%293:i64 = or %291, %292
%294:i64 = xor %290, %293
%295:i64 = add %282, %294
%296:i64 = shl %278, 17:i64
%297:i64 = lshr %278, 47:i64
%298:i64 = or %296, %297
%299:i64 = xor %279, %298
%300:i64 = add %290, %299
%301:i64 = shl %299, 13:i64
%302:i64 = lshr %299, 51:i64
%303:i64 = or %301, %302
%304:i64 = xor %300, %303
%305:i64 = add %295, %304
%306:i64 = shl %305, 32:i64
%307:i64 = lshr %305, 32:i64
%308:i64 = or %306, %307
%309:i64 = shl %300, 32:i64
%310:i64 = lshr %300, 32:i64
%311:i64 = or %309, %310
%312:i64 = shl %294, 16:i64
%313:i64 = lshr %294, 48:i64
%314:i64 = or %312, %313
%315:i64 = xor %295, %314
%316:i64 = add %311, %315
%317:i64 = shl %315, 21:i64
%318:i64 = lshr %315, 43:i64
%319:i64 = or %317, %318
%320:i64 = xor %316, %319
%321:i64 = add %308, %320
%322:i64 = shl %304, 17:i64
%323:i64 = lshr %304, 47:i64
%324:i64 = or %322, %323
%325:i64 = xor %305, %324
%326:i64 = add %316, %325
%327:i64 = shl %325, 13:i64
%328:i64 = lshr %325, 51:i64
%329:i64 = or %327, %328
%330:i64 = xor %326, %329 (hasExternalUses)
%331:i64 = add %321, %330 (hasExternalUses)
%332:i64 = shl %331, 32:i64
%333:i64 = lshr %331, 32:i64
%334:i64 = or %332, %333
%335:i64 = shl %326, 32:i64
%336:i64 = lshr %326, 32:i64
%337:i64 = or %335, %336
%338:i64 = shl %320, 16:i64
%339:i64 = lshr %320, 48:i64
%340:i64 = or %338, %339
%341:i64 = xor %321, %340
%342:i64 = add %337, %341 (hasExternalUses)
%343:i64 = shl %341, 21:i64
%344:i64 = lshr %341, 43:i64
%345:i64 = or %343, %344
%346:i64 = xor %342, %345
%347:i64 = add %334, %346 (hasExternalUses)
%348:i64 = shl %346, 16:i64
%349:i64 = lshr %346, 48:i64
%350:i64 = or %348, %349
%351:i64 = xor %347, %350 (hasExternalUses)
%352:i64 = lshr %351, 43:i64
infer %352

; *****
; For LLVM instruction:
;  %393 = or i64 %392, %391
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250
%252:i64 = add %242, %251
%253:i64 = shl %252, 32:i64
%254:i64 = lshr %252, 32:i64
%255:i64 = or %253, %254 (hasExternalUses)
%256:i64 = shl %247, 32:i64
%257:i64 = lshr %247, 32:i64
%258:i64 = or %256, %257
%259:i64 = shl %241, 16:i64
%260:i64 = lshr %241, 48:i64
%261:i64 = or %259, %260
%262:i64 = xor %242, %261
%263:i64 = add %258, %262 (hasExternalUses)
%264:i64 = shl %262, 21:i64
%265:i64 = lshr %262, 43:i64
%266:i64 = or %264, %265
%267:i64 = xor %263, %266 (hasExternalUses)
%268:i64 = add %255, %267
%269:i64 = shl %251, 17:i64
%270:i64 = lshr %251, 47:i64
%271:i64 = or %269, %270
%272:i64 = xor %252, %271 (hasExternalUses)
%273:i64 = xor 221:i64, %272
%274:i64 = add %263, %273
%275:i64 = shl %273, 13:i64
%276:i64 = lshr %272, 51:i64
%277:i64 = or %275, %276
%278:i64 = xor %274, %277
%279:i64 = add %268, %278
%280:i64 = shl %279, 32:i64
%281:i64 = lshr %279, 32:i64
%282:i64 = or %280, %281
%283:i64 = shl %274, 32:i64
%284:i64 = lshr %274, 32:i64
%285:i64 = or %283, %284
%286:i64 = shl %267, 16:i64
%287:i64 = lshr %267, 48:i64
%288:i64 = or %286, %287
%289:i64 = xor %268, %288
%290:i64 = add %285, %289
%291:i64 = shl %289, 21:i64
%292:i64 = lshr %289, 43:i64
%293:i64 = or %291, %292
%294:i64 = xor %290, %293
%295:i64 = add %282, %294
%296:i64 = shl %278, 17:i64
%297:i64 = lshr %278, 47:i64
%298:i64 = or %296, %297
%299:i64 = xor %279, %298
%300:i64 = add %290, %299
%301:i64 = shl %299, 13:i64
%302:i64 = lshr %299, 51:i64
%303:i64 = or %301, %302
%304:i64 = xor %300, %303
%305:i64 = add %295, %304
%306:i64 = shl %305, 32:i64
%307:i64 = lshr %305, 32:i64
%308:i64 = or %306, %307
%309:i64 = shl %300, 32:i64
%310:i64 = lshr %300, 32:i64
%311:i64 = or %309, %310
%312:i64 = shl %294, 16:i64
%313:i64 = lshr %294, 48:i64
%314:i64 = or %312, %313
%315:i64 = xor %295, %314
%316:i64 = add %311, %315
%317:i64 = shl %315, 21:i64
%318:i64 = lshr %315, 43:i64
%319:i64 = or %317, %318
%320:i64 = xor %316, %319
%321:i64 = add %308, %320
%322:i64 = shl %304, 17:i64
%323:i64 = lshr %304, 47:i64
%324:i64 = or %322, %323
%325:i64 = xor %305, %324
%326:i64 = add %316, %325
%327:i64 = shl %325, 13:i64
%328:i64 = lshr %325, 51:i64
%329:i64 = or %327, %328
%330:i64 = xor %326, %329 (hasExternalUses)
%331:i64 = add %321, %330 (hasExternalUses)
%332:i64 = shl %331, 32:i64
%333:i64 = lshr %331, 32:i64
%334:i64 = or %332, %333
%335:i64 = shl %326, 32:i64
%336:i64 = lshr %326, 32:i64
%337:i64 = or %335, %336
%338:i64 = shl %320, 16:i64
%339:i64 = lshr %320, 48:i64
%340:i64 = or %338, %339
%341:i64 = xor %321, %340
%342:i64 = add %337, %341 (hasExternalUses)
%343:i64 = shl %341, 21:i64
%344:i64 = lshr %341, 43:i64
%345:i64 = or %343, %344
%346:i64 = xor %342, %345
%347:i64 = add %334, %346 (hasExternalUses)
%348:i64 = shl %346, 16:i64
%349:i64 = lshr %346, 48:i64
%350:i64 = or %348, %349
%351:i64 = xor %347, %350
%352:i64 = shl %351, 21:i64
%353:i64 = lshr %351, 43:i64
%354:i64 = or %352, %353
infer %354

; *****
; For LLVM instruction:
;  %394 = add i64 %385, %386
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250
%252:i64 = add %242, %251
%253:i64 = shl %252, 32:i64
%254:i64 = lshr %252, 32:i64
%255:i64 = or %253, %254 (hasExternalUses)
%256:i64 = shl %247, 32:i64
%257:i64 = lshr %247, 32:i64
%258:i64 = or %256, %257
%259:i64 = shl %241, 16:i64
%260:i64 = lshr %241, 48:i64
%261:i64 = or %259, %260
%262:i64 = xor %242, %261
%263:i64 = add %258, %262 (hasExternalUses)
%264:i64 = shl %262, 21:i64
%265:i64 = lshr %262, 43:i64
%266:i64 = or %264, %265
%267:i64 = xor %263, %266 (hasExternalUses)
%268:i64 = add %255, %267
%269:i64 = shl %251, 17:i64
%270:i64 = lshr %251, 47:i64
%271:i64 = or %269, %270
%272:i64 = xor %252, %271 (hasExternalUses)
%273:i64 = xor 221:i64, %272
%274:i64 = add %263, %273
%275:i64 = shl %273, 13:i64
%276:i64 = lshr %272, 51:i64
%277:i64 = or %275, %276
%278:i64 = xor %274, %277
%279:i64 = add %268, %278
%280:i64 = shl %279, 32:i64
%281:i64 = lshr %279, 32:i64
%282:i64 = or %280, %281
%283:i64 = shl %274, 32:i64
%284:i64 = lshr %274, 32:i64
%285:i64 = or %283, %284
%286:i64 = shl %267, 16:i64
%287:i64 = lshr %267, 48:i64
%288:i64 = or %286, %287
%289:i64 = xor %268, %288
%290:i64 = add %285, %289
%291:i64 = shl %289, 21:i64
%292:i64 = lshr %289, 43:i64
%293:i64 = or %291, %292
%294:i64 = xor %290, %293
%295:i64 = add %282, %294
%296:i64 = shl %278, 17:i64
%297:i64 = lshr %278, 47:i64
%298:i64 = or %296, %297
%299:i64 = xor %279, %298
%300:i64 = add %290, %299
%301:i64 = shl %299, 13:i64
%302:i64 = lshr %299, 51:i64
%303:i64 = or %301, %302
%304:i64 = xor %300, %303
%305:i64 = add %295, %304
%306:i64 = shl %305, 32:i64
%307:i64 = lshr %305, 32:i64
%308:i64 = or %306, %307
%309:i64 = shl %300, 32:i64
%310:i64 = lshr %300, 32:i64
%311:i64 = or %309, %310
%312:i64 = shl %294, 16:i64
%313:i64 = lshr %294, 48:i64
%314:i64 = or %312, %313
%315:i64 = xor %295, %314
%316:i64 = add %311, %315
%317:i64 = shl %315, 21:i64
%318:i64 = lshr %315, 43:i64
%319:i64 = or %317, %318
%320:i64 = xor %316, %319
%321:i64 = add %308, %320
%322:i64 = shl %304, 17:i64
%323:i64 = lshr %304, 47:i64
%324:i64 = or %322, %323
%325:i64 = xor %305, %324
%326:i64 = add %316, %325
%327:i64 = shl %325, 13:i64
%328:i64 = lshr %325, 51:i64
%329:i64 = or %327, %328
%330:i64 = xor %326, %329
%331:i64 = add %321, %330
%332:i64 = shl %331, 32:i64
%333:i64 = lshr %331, 32:i64
%334:i64 = or %332, %333
%335:i64 = shl %326, 32:i64
%336:i64 = lshr %326, 32:i64
%337:i64 = or %335, %336
%338:i64 = shl %320, 16:i64
%339:i64 = lshr %320, 48:i64
%340:i64 = or %338, %339
%341:i64 = xor %321, %340
%342:i64 = add %337, %341
%343:i64 = shl %341, 21:i64
%344:i64 = lshr %341, 43:i64
%345:i64 = or %343, %344
%346:i64 = xor %342, %345 (hasExternalUses)
%347:i64 = add %334, %346 (hasExternalUses)
%348:i64 = shl %330, 17:i64
%349:i64 = lshr %330, 47:i64
%350:i64 = or %348, %349
%351:i64 = xor %331, %350
%352:i64 = add %342, %351
%353:i64 = shl %351, 13:i64
%354:i64 = lshr %351, 51:i64
%355:i64 = or %353, %354
%356:i64 = xor %352, %355 (hasExternalUses)
%357:i64 = add %347, %356
infer %357

; *****
; For LLVM instruction:
;  %395 = shl i64 %385, 17
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237
%239:i64 = add %229, %238
%240:i64 = shl %239, 32:i64
%241:i64 = lshr %239, 32:i64
%242:i64 = or %240, %241
%243:i64 = shl %234, 32:i64
%244:i64 = lshr %234, 32:i64
%245:i64 = or %243, %244
%246:i64 = shl %228, 21:i64
%247:i64 = lshr %228, 43:i64
%248:i64 = or %246, %247
%249:i64 = xor %229, %248
%250:i64 = add %245, %249
%251:i64 = shl %249, 16:i64
%252:i64 = lshr %249, 48:i64
%253:i64 = or %251, %252
%254:i64 = xor %250, %253
%255:i64 = add %242, %254 (hasExternalUses)
%256:i64 = shl %238, 13:i64
%257:i64 = lshr %238, 51:i64
%258:i64 = or %256, %257
%259:i64 = xor %239, %258
%260:i64 = add %250, %259
%261:i64 = shl %259, 17:i64
%262:i64 = lshr %259, 47:i64
%263:i64 = or %261, %262
%264:i64 = xor %260, %263 (hasExternalUses)
%265:i64 = xor 221:i64, %264
%266:i64 = add %255, %265
%267:i64 = shl %266, 32:i64
%268:i64 = lshr %266, 32:i64
%269:i64 = or %267, %268
%270:i64 = shl %260, 32:i64
%271:i64 = lshr %260, 32:i64
%272:i64 = or %270, %271 (hasExternalUses)
%273:i64 = shl %254, 21:i64
%274:i64 = lshr %254, 43:i64
%275:i64 = or %273, %274
%276:i64 = xor %255, %275 (hasExternalUses)
%277:i64 = add %272, %276
%278:i64 = shl %276, 16:i64
%279:i64 = lshr %276, 48:i64
%280:i64 = or %278, %279
%281:i64 = xor %277, %280
%282:i64 = add %269, %281
%283:i64 = shl %265, 13:i64
%284:i64 = lshr %264, 51:i64
%285:i64 = or %283, %284
%286:i64 = xor %266, %285
%287:i64 = add %277, %286
%288:i64 = shl %286, 17:i64
%289:i64 = lshr %286, 47:i64
%290:i64 = or %288, %289
%291:i64 = xor %287, %290
%292:i64 = add %282, %291
%293:i64 = shl %292, 32:i64
%294:i64 = lshr %292, 32:i64
%295:i64 = or %293, %294
%296:i64 = shl %287, 32:i64
%297:i64 = lshr %287, 32:i64
%298:i64 = or %296, %297
%299:i64 = shl %281, 21:i64
%300:i64 = lshr %281, 43:i64
%301:i64 = or %299, %300
%302:i64 = xor %282, %301
%303:i64 = add %298, %302
%304:i64 = shl %302, 16:i64
%305:i64 = lshr %302, 48:i64
%306:i64 = or %304, %305
%307:i64 = xor %303, %306
%308:i64 = add %295, %307
%309:i64 = shl %291, 13:i64
%310:i64 = lshr %291, 51:i64
%311:i64 = or %309, %310
%312:i64 = xor %292, %311
%313:i64 = add %303, %312
%314:i64 = shl %312, 17:i64
%315:i64 = lshr %312, 47:i64
%316:i64 = or %314, %315
%317:i64 = xor %313, %316
%318:i64 = add %308, %317
%319:i64 = shl %318, 32:i64
%320:i64 = lshr %318, 32:i64
%321:i64 = or %319, %320
%322:i64 = shl %313, 32:i64
%323:i64 = lshr %313, 32:i64
%324:i64 = or %322, %323
%325:i64 = shl %307, 21:i64
%326:i64 = lshr %307, 43:i64
%327:i64 = or %325, %326
%328:i64 = xor %308, %327
%329:i64 = add %324, %328
%330:i64 = shl %328, 16:i64
%331:i64 = lshr %328, 48:i64
%332:i64 = or %330, %331
%333:i64 = xor %329, %332 (hasExternalUses)
%334:i64 = add %321, %333 (hasExternalUses)
%335:i64 = shl %317, 13:i64
%336:i64 = lshr %317, 51:i64
%337:i64 = or %335, %336
%338:i64 = xor %318, %337
%339:i64 = add %329, %338 (hasExternalUses)
%340:i64 = shl %338, 17:i64
%341:i64 = lshr %338, 47:i64
%342:i64 = or %340, %341
%343:i64 = xor %339, %342
%344:i64 = add %334, %343
%345:i64 = shl %343, 13:i64
%346:i64 = lshr %343, 51:i64
%347:i64 = or %345, %346
%348:i64 = xor %344, %347 (hasExternalUses)
%349:i64 = shl %348, 17:i64
infer %349

; *****
; For LLVM instruction:
;  %396 = lshr i64 %385, 47
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237
%239:i64 = add %229, %238
%240:i64 = shl %239, 32:i64
%241:i64 = lshr %239, 32:i64
%242:i64 = or %240, %241
%243:i64 = shl %234, 32:i64
%244:i64 = lshr %234, 32:i64
%245:i64 = or %243, %244
%246:i64 = shl %228, 21:i64
%247:i64 = lshr %228, 43:i64
%248:i64 = or %246, %247
%249:i64 = xor %229, %248
%250:i64 = add %245, %249
%251:i64 = shl %249, 16:i64
%252:i64 = lshr %249, 48:i64
%253:i64 = or %251, %252
%254:i64 = xor %250, %253
%255:i64 = add %242, %254 (hasExternalUses)
%256:i64 = shl %238, 13:i64
%257:i64 = lshr %238, 51:i64
%258:i64 = or %256, %257
%259:i64 = xor %239, %258
%260:i64 = add %250, %259
%261:i64 = shl %259, 17:i64
%262:i64 = lshr %259, 47:i64
%263:i64 = or %261, %262
%264:i64 = xor %260, %263 (hasExternalUses)
%265:i64 = xor 221:i64, %264
%266:i64 = add %255, %265
%267:i64 = shl %266, 32:i64
%268:i64 = lshr %266, 32:i64
%269:i64 = or %267, %268
%270:i64 = shl %260, 32:i64
%271:i64 = lshr %260, 32:i64
%272:i64 = or %270, %271 (hasExternalUses)
%273:i64 = shl %254, 21:i64
%274:i64 = lshr %254, 43:i64
%275:i64 = or %273, %274
%276:i64 = xor %255, %275 (hasExternalUses)
%277:i64 = add %272, %276
%278:i64 = shl %276, 16:i64
%279:i64 = lshr %276, 48:i64
%280:i64 = or %278, %279
%281:i64 = xor %277, %280
%282:i64 = add %269, %281
%283:i64 = shl %265, 13:i64
%284:i64 = lshr %264, 51:i64
%285:i64 = or %283, %284
%286:i64 = xor %266, %285
%287:i64 = add %277, %286
%288:i64 = shl %286, 17:i64
%289:i64 = lshr %286, 47:i64
%290:i64 = or %288, %289
%291:i64 = xor %287, %290
%292:i64 = add %282, %291
%293:i64 = shl %292, 32:i64
%294:i64 = lshr %292, 32:i64
%295:i64 = or %293, %294
%296:i64 = shl %287, 32:i64
%297:i64 = lshr %287, 32:i64
%298:i64 = or %296, %297
%299:i64 = shl %281, 21:i64
%300:i64 = lshr %281, 43:i64
%301:i64 = or %299, %300
%302:i64 = xor %282, %301
%303:i64 = add %298, %302
%304:i64 = shl %302, 16:i64
%305:i64 = lshr %302, 48:i64
%306:i64 = or %304, %305
%307:i64 = xor %303, %306
%308:i64 = add %295, %307
%309:i64 = shl %291, 13:i64
%310:i64 = lshr %291, 51:i64
%311:i64 = or %309, %310
%312:i64 = xor %292, %311
%313:i64 = add %303, %312
%314:i64 = shl %312, 17:i64
%315:i64 = lshr %312, 47:i64
%316:i64 = or %314, %315
%317:i64 = xor %313, %316
%318:i64 = add %308, %317
%319:i64 = shl %318, 32:i64
%320:i64 = lshr %318, 32:i64
%321:i64 = or %319, %320
%322:i64 = shl %313, 32:i64
%323:i64 = lshr %313, 32:i64
%324:i64 = or %322, %323
%325:i64 = shl %307, 21:i64
%326:i64 = lshr %307, 43:i64
%327:i64 = or %325, %326
%328:i64 = xor %308, %327
%329:i64 = add %324, %328
%330:i64 = shl %328, 16:i64
%331:i64 = lshr %328, 48:i64
%332:i64 = or %330, %331
%333:i64 = xor %329, %332 (hasExternalUses)
%334:i64 = add %321, %333 (hasExternalUses)
%335:i64 = shl %317, 13:i64
%336:i64 = lshr %317, 51:i64
%337:i64 = or %335, %336
%338:i64 = xor %318, %337
%339:i64 = add %329, %338 (hasExternalUses)
%340:i64 = shl %338, 17:i64
%341:i64 = lshr %338, 47:i64
%342:i64 = or %340, %341
%343:i64 = xor %339, %342
%344:i64 = add %334, %343
%345:i64 = shl %343, 13:i64
%346:i64 = lshr %343, 51:i64
%347:i64 = or %345, %346
%348:i64 = xor %344, %347 (hasExternalUses)
%349:i64 = lshr %348, 47:i64
infer %349

; *****
; For LLVM instruction:
;  %397 = or i64 %396, %395
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237
%239:i64 = add %229, %238
%240:i64 = shl %239, 32:i64
%241:i64 = lshr %239, 32:i64
%242:i64 = or %240, %241
%243:i64 = shl %234, 32:i64
%244:i64 = lshr %234, 32:i64
%245:i64 = or %243, %244
%246:i64 = shl %228, 21:i64
%247:i64 = lshr %228, 43:i64
%248:i64 = or %246, %247
%249:i64 = xor %229, %248
%250:i64 = add %245, %249
%251:i64 = shl %249, 16:i64
%252:i64 = lshr %249, 48:i64
%253:i64 = or %251, %252
%254:i64 = xor %250, %253
%255:i64 = add %242, %254 (hasExternalUses)
%256:i64 = shl %238, 13:i64
%257:i64 = lshr %238, 51:i64
%258:i64 = or %256, %257
%259:i64 = xor %239, %258
%260:i64 = add %250, %259
%261:i64 = shl %259, 17:i64
%262:i64 = lshr %259, 47:i64
%263:i64 = or %261, %262
%264:i64 = xor %260, %263 (hasExternalUses)
%265:i64 = xor 221:i64, %264
%266:i64 = add %255, %265
%267:i64 = shl %266, 32:i64
%268:i64 = lshr %266, 32:i64
%269:i64 = or %267, %268
%270:i64 = shl %260, 32:i64
%271:i64 = lshr %260, 32:i64
%272:i64 = or %270, %271 (hasExternalUses)
%273:i64 = shl %254, 21:i64
%274:i64 = lshr %254, 43:i64
%275:i64 = or %273, %274
%276:i64 = xor %255, %275 (hasExternalUses)
%277:i64 = add %272, %276
%278:i64 = shl %276, 16:i64
%279:i64 = lshr %276, 48:i64
%280:i64 = or %278, %279
%281:i64 = xor %277, %280
%282:i64 = add %269, %281
%283:i64 = shl %265, 13:i64
%284:i64 = lshr %264, 51:i64
%285:i64 = or %283, %284
%286:i64 = xor %266, %285
%287:i64 = add %277, %286
%288:i64 = shl %286, 17:i64
%289:i64 = lshr %286, 47:i64
%290:i64 = or %288, %289
%291:i64 = xor %287, %290
%292:i64 = add %282, %291
%293:i64 = shl %292, 32:i64
%294:i64 = lshr %292, 32:i64
%295:i64 = or %293, %294
%296:i64 = shl %287, 32:i64
%297:i64 = lshr %287, 32:i64
%298:i64 = or %296, %297
%299:i64 = shl %281, 21:i64
%300:i64 = lshr %281, 43:i64
%301:i64 = or %299, %300
%302:i64 = xor %282, %301
%303:i64 = add %298, %302
%304:i64 = shl %302, 16:i64
%305:i64 = lshr %302, 48:i64
%306:i64 = or %304, %305
%307:i64 = xor %303, %306
%308:i64 = add %295, %307
%309:i64 = shl %291, 13:i64
%310:i64 = lshr %291, 51:i64
%311:i64 = or %309, %310
%312:i64 = xor %292, %311
%313:i64 = add %303, %312
%314:i64 = shl %312, 17:i64
%315:i64 = lshr %312, 47:i64
%316:i64 = or %314, %315
%317:i64 = xor %313, %316
%318:i64 = add %308, %317
%319:i64 = shl %318, 32:i64
%320:i64 = lshr %318, 32:i64
%321:i64 = or %319, %320
%322:i64 = shl %313, 32:i64
%323:i64 = lshr %313, 32:i64
%324:i64 = or %322, %323
%325:i64 = shl %307, 21:i64
%326:i64 = lshr %307, 43:i64
%327:i64 = or %325, %326
%328:i64 = xor %308, %327
%329:i64 = add %324, %328
%330:i64 = shl %328, 16:i64
%331:i64 = lshr %328, 48:i64
%332:i64 = or %330, %331
%333:i64 = xor %329, %332 (hasExternalUses)
%334:i64 = add %321, %333 (hasExternalUses)
%335:i64 = shl %317, 13:i64
%336:i64 = lshr %317, 51:i64
%337:i64 = or %335, %336
%338:i64 = xor %318, %337
%339:i64 = add %329, %338 (hasExternalUses)
%340:i64 = shl %338, 17:i64
%341:i64 = lshr %338, 47:i64
%342:i64 = or %340, %341
%343:i64 = xor %339, %342
%344:i64 = add %334, %343
%345:i64 = shl %343, 13:i64
%346:i64 = lshr %343, 51:i64
%347:i64 = or %345, %346
%348:i64 = xor %344, %347 (hasExternalUses)
%349:i64 = shl %348, 17:i64
%350:i64 = lshr %348, 47:i64
%351:i64 = or %349, %350
infer %351

; *****
; For LLVM instruction:
;  %398 = shl i64 %394, 32
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250
%252:i64 = add %242, %251
%253:i64 = shl %252, 32:i64
%254:i64 = lshr %252, 32:i64
%255:i64 = or %253, %254 (hasExternalUses)
%256:i64 = shl %247, 32:i64
%257:i64 = lshr %247, 32:i64
%258:i64 = or %256, %257
%259:i64 = shl %241, 16:i64
%260:i64 = lshr %241, 48:i64
%261:i64 = or %259, %260
%262:i64 = xor %242, %261
%263:i64 = add %258, %262 (hasExternalUses)
%264:i64 = shl %262, 21:i64
%265:i64 = lshr %262, 43:i64
%266:i64 = or %264, %265
%267:i64 = xor %263, %266 (hasExternalUses)
%268:i64 = add %255, %267
%269:i64 = shl %251, 17:i64
%270:i64 = lshr %251, 47:i64
%271:i64 = or %269, %270
%272:i64 = xor %252, %271 (hasExternalUses)
%273:i64 = xor 221:i64, %272
%274:i64 = add %263, %273
%275:i64 = shl %273, 13:i64
%276:i64 = lshr %272, 51:i64
%277:i64 = or %275, %276
%278:i64 = xor %274, %277
%279:i64 = add %268, %278
%280:i64 = shl %279, 32:i64
%281:i64 = lshr %279, 32:i64
%282:i64 = or %280, %281
%283:i64 = shl %274, 32:i64
%284:i64 = lshr %274, 32:i64
%285:i64 = or %283, %284
%286:i64 = shl %267, 16:i64
%287:i64 = lshr %267, 48:i64
%288:i64 = or %286, %287
%289:i64 = xor %268, %288
%290:i64 = add %285, %289
%291:i64 = shl %289, 21:i64
%292:i64 = lshr %289, 43:i64
%293:i64 = or %291, %292
%294:i64 = xor %290, %293
%295:i64 = add %282, %294
%296:i64 = shl %278, 17:i64
%297:i64 = lshr %278, 47:i64
%298:i64 = or %296, %297
%299:i64 = xor %279, %298
%300:i64 = add %290, %299
%301:i64 = shl %299, 13:i64
%302:i64 = lshr %299, 51:i64
%303:i64 = or %301, %302
%304:i64 = xor %300, %303
%305:i64 = add %295, %304
%306:i64 = shl %305, 32:i64
%307:i64 = lshr %305, 32:i64
%308:i64 = or %306, %307
%309:i64 = shl %300, 32:i64
%310:i64 = lshr %300, 32:i64
%311:i64 = or %309, %310
%312:i64 = shl %294, 16:i64
%313:i64 = lshr %294, 48:i64
%314:i64 = or %312, %313
%315:i64 = xor %295, %314
%316:i64 = add %311, %315
%317:i64 = shl %315, 21:i64
%318:i64 = lshr %315, 43:i64
%319:i64 = or %317, %318
%320:i64 = xor %316, %319
%321:i64 = add %308, %320
%322:i64 = shl %304, 17:i64
%323:i64 = lshr %304, 47:i64
%324:i64 = or %322, %323
%325:i64 = xor %305, %324
%326:i64 = add %316, %325
%327:i64 = shl %325, 13:i64
%328:i64 = lshr %325, 51:i64
%329:i64 = or %327, %328
%330:i64 = xor %326, %329
%331:i64 = add %321, %330
%332:i64 = shl %331, 32:i64
%333:i64 = lshr %331, 32:i64
%334:i64 = or %332, %333
%335:i64 = shl %326, 32:i64
%336:i64 = lshr %326, 32:i64
%337:i64 = or %335, %336
%338:i64 = shl %320, 16:i64
%339:i64 = lshr %320, 48:i64
%340:i64 = or %338, %339
%341:i64 = xor %321, %340
%342:i64 = add %337, %341
%343:i64 = shl %341, 21:i64
%344:i64 = lshr %341, 43:i64
%345:i64 = or %343, %344
%346:i64 = xor %342, %345 (hasExternalUses)
%347:i64 = add %334, %346 (hasExternalUses)
%348:i64 = shl %330, 17:i64
%349:i64 = lshr %330, 47:i64
%350:i64 = or %348, %349
%351:i64 = xor %331, %350
%352:i64 = add %342, %351
%353:i64 = shl %351, 13:i64
%354:i64 = lshr %351, 51:i64
%355:i64 = or %353, %354
%356:i64 = xor %352, %355 (hasExternalUses)
%357:i64 = add %347, %356 (hasExternalUses)
%358:i64 = shl %357, 32:i64
infer %358

; *****
; For LLVM instruction:
;  %399 = lshr i64 %394, 32
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250
%252:i64 = add %242, %251
%253:i64 = shl %252, 32:i64
%254:i64 = lshr %252, 32:i64
%255:i64 = or %253, %254 (hasExternalUses)
%256:i64 = shl %247, 32:i64
%257:i64 = lshr %247, 32:i64
%258:i64 = or %256, %257
%259:i64 = shl %241, 16:i64
%260:i64 = lshr %241, 48:i64
%261:i64 = or %259, %260
%262:i64 = xor %242, %261
%263:i64 = add %258, %262 (hasExternalUses)
%264:i64 = shl %262, 21:i64
%265:i64 = lshr %262, 43:i64
%266:i64 = or %264, %265
%267:i64 = xor %263, %266 (hasExternalUses)
%268:i64 = add %255, %267
%269:i64 = shl %251, 17:i64
%270:i64 = lshr %251, 47:i64
%271:i64 = or %269, %270
%272:i64 = xor %252, %271 (hasExternalUses)
%273:i64 = xor 221:i64, %272
%274:i64 = add %263, %273
%275:i64 = shl %273, 13:i64
%276:i64 = lshr %272, 51:i64
%277:i64 = or %275, %276
%278:i64 = xor %274, %277
%279:i64 = add %268, %278
%280:i64 = shl %279, 32:i64
%281:i64 = lshr %279, 32:i64
%282:i64 = or %280, %281
%283:i64 = shl %274, 32:i64
%284:i64 = lshr %274, 32:i64
%285:i64 = or %283, %284
%286:i64 = shl %267, 16:i64
%287:i64 = lshr %267, 48:i64
%288:i64 = or %286, %287
%289:i64 = xor %268, %288
%290:i64 = add %285, %289
%291:i64 = shl %289, 21:i64
%292:i64 = lshr %289, 43:i64
%293:i64 = or %291, %292
%294:i64 = xor %290, %293
%295:i64 = add %282, %294
%296:i64 = shl %278, 17:i64
%297:i64 = lshr %278, 47:i64
%298:i64 = or %296, %297
%299:i64 = xor %279, %298
%300:i64 = add %290, %299
%301:i64 = shl %299, 13:i64
%302:i64 = lshr %299, 51:i64
%303:i64 = or %301, %302
%304:i64 = xor %300, %303
%305:i64 = add %295, %304
%306:i64 = shl %305, 32:i64
%307:i64 = lshr %305, 32:i64
%308:i64 = or %306, %307
%309:i64 = shl %300, 32:i64
%310:i64 = lshr %300, 32:i64
%311:i64 = or %309, %310
%312:i64 = shl %294, 16:i64
%313:i64 = lshr %294, 48:i64
%314:i64 = or %312, %313
%315:i64 = xor %295, %314
%316:i64 = add %311, %315
%317:i64 = shl %315, 21:i64
%318:i64 = lshr %315, 43:i64
%319:i64 = or %317, %318
%320:i64 = xor %316, %319
%321:i64 = add %308, %320
%322:i64 = shl %304, 17:i64
%323:i64 = lshr %304, 47:i64
%324:i64 = or %322, %323
%325:i64 = xor %305, %324
%326:i64 = add %316, %325
%327:i64 = shl %325, 13:i64
%328:i64 = lshr %325, 51:i64
%329:i64 = or %327, %328
%330:i64 = xor %326, %329
%331:i64 = add %321, %330
%332:i64 = shl %331, 32:i64
%333:i64 = lshr %331, 32:i64
%334:i64 = or %332, %333
%335:i64 = shl %326, 32:i64
%336:i64 = lshr %326, 32:i64
%337:i64 = or %335, %336
%338:i64 = shl %320, 16:i64
%339:i64 = lshr %320, 48:i64
%340:i64 = or %338, %339
%341:i64 = xor %321, %340
%342:i64 = add %337, %341
%343:i64 = shl %341, 21:i64
%344:i64 = lshr %341, 43:i64
%345:i64 = or %343, %344
%346:i64 = xor %342, %345 (hasExternalUses)
%347:i64 = add %334, %346 (hasExternalUses)
%348:i64 = shl %330, 17:i64
%349:i64 = lshr %330, 47:i64
%350:i64 = or %348, %349
%351:i64 = xor %331, %350
%352:i64 = add %342, %351
%353:i64 = shl %351, 13:i64
%354:i64 = lshr %351, 51:i64
%355:i64 = or %353, %354
%356:i64 = xor %352, %355 (hasExternalUses)
%357:i64 = add %347, %356 (hasExternalUses)
%358:i64 = lshr %357, 32:i64
infer %358

; *****
; For LLVM instruction:
;  %400 = or i64 %399, %398
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250
%252:i64 = add %242, %251
%253:i64 = shl %252, 32:i64
%254:i64 = lshr %252, 32:i64
%255:i64 = or %253, %254 (hasExternalUses)
%256:i64 = shl %247, 32:i64
%257:i64 = lshr %247, 32:i64
%258:i64 = or %256, %257
%259:i64 = shl %241, 16:i64
%260:i64 = lshr %241, 48:i64
%261:i64 = or %259, %260
%262:i64 = xor %242, %261
%263:i64 = add %258, %262 (hasExternalUses)
%264:i64 = shl %262, 21:i64
%265:i64 = lshr %262, 43:i64
%266:i64 = or %264, %265
%267:i64 = xor %263, %266 (hasExternalUses)
%268:i64 = add %255, %267
%269:i64 = shl %251, 17:i64
%270:i64 = lshr %251, 47:i64
%271:i64 = or %269, %270
%272:i64 = xor %252, %271 (hasExternalUses)
%273:i64 = xor 221:i64, %272
%274:i64 = add %263, %273
%275:i64 = shl %273, 13:i64
%276:i64 = lshr %272, 51:i64
%277:i64 = or %275, %276
%278:i64 = xor %274, %277
%279:i64 = add %268, %278
%280:i64 = shl %279, 32:i64
%281:i64 = lshr %279, 32:i64
%282:i64 = or %280, %281
%283:i64 = shl %274, 32:i64
%284:i64 = lshr %274, 32:i64
%285:i64 = or %283, %284
%286:i64 = shl %267, 16:i64
%287:i64 = lshr %267, 48:i64
%288:i64 = or %286, %287
%289:i64 = xor %268, %288
%290:i64 = add %285, %289
%291:i64 = shl %289, 21:i64
%292:i64 = lshr %289, 43:i64
%293:i64 = or %291, %292
%294:i64 = xor %290, %293
%295:i64 = add %282, %294
%296:i64 = shl %278, 17:i64
%297:i64 = lshr %278, 47:i64
%298:i64 = or %296, %297
%299:i64 = xor %279, %298
%300:i64 = add %290, %299
%301:i64 = shl %299, 13:i64
%302:i64 = lshr %299, 51:i64
%303:i64 = or %301, %302
%304:i64 = xor %300, %303
%305:i64 = add %295, %304
%306:i64 = shl %305, 32:i64
%307:i64 = lshr %305, 32:i64
%308:i64 = or %306, %307
%309:i64 = shl %300, 32:i64
%310:i64 = lshr %300, 32:i64
%311:i64 = or %309, %310
%312:i64 = shl %294, 16:i64
%313:i64 = lshr %294, 48:i64
%314:i64 = or %312, %313
%315:i64 = xor %295, %314
%316:i64 = add %311, %315
%317:i64 = shl %315, 21:i64
%318:i64 = lshr %315, 43:i64
%319:i64 = or %317, %318
%320:i64 = xor %316, %319
%321:i64 = add %308, %320
%322:i64 = shl %304, 17:i64
%323:i64 = lshr %304, 47:i64
%324:i64 = or %322, %323
%325:i64 = xor %305, %324
%326:i64 = add %316, %325
%327:i64 = shl %325, 13:i64
%328:i64 = lshr %325, 51:i64
%329:i64 = or %327, %328
%330:i64 = xor %326, %329
%331:i64 = add %321, %330
%332:i64 = shl %331, 32:i64
%333:i64 = lshr %331, 32:i64
%334:i64 = or %332, %333
%335:i64 = shl %326, 32:i64
%336:i64 = lshr %326, 32:i64
%337:i64 = or %335, %336
%338:i64 = shl %320, 16:i64
%339:i64 = lshr %320, 48:i64
%340:i64 = or %338, %339
%341:i64 = xor %321, %340
%342:i64 = add %337, %341
%343:i64 = shl %341, 21:i64
%344:i64 = lshr %341, 43:i64
%345:i64 = or %343, %344
%346:i64 = xor %342, %345 (hasExternalUses)
%347:i64 = add %334, %346 (hasExternalUses)
%348:i64 = shl %330, 17:i64
%349:i64 = lshr %330, 47:i64
%350:i64 = or %348, %349
%351:i64 = xor %331, %350
%352:i64 = add %342, %351
%353:i64 = shl %351, 13:i64
%354:i64 = lshr %351, 51:i64
%355:i64 = or %353, %354
%356:i64 = xor %352, %355 (hasExternalUses)
%357:i64 = add %347, %356 (hasExternalUses)
%358:i64 = shl %357, 32:i64
%359:i64 = lshr %357, 32:i64
%360:i64 = or %358, %359
infer %360

; *****
; For LLVM instruction:
;  %401 = xor i64 %397, %394
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250
%252:i64 = add %242, %251
%253:i64 = shl %252, 32:i64
%254:i64 = lshr %252, 32:i64
%255:i64 = or %253, %254 (hasExternalUses)
%256:i64 = shl %247, 32:i64
%257:i64 = lshr %247, 32:i64
%258:i64 = or %256, %257
%259:i64 = shl %241, 16:i64
%260:i64 = lshr %241, 48:i64
%261:i64 = or %259, %260
%262:i64 = xor %242, %261
%263:i64 = add %258, %262 (hasExternalUses)
%264:i64 = shl %262, 21:i64
%265:i64 = lshr %262, 43:i64
%266:i64 = or %264, %265
%267:i64 = xor %263, %266 (hasExternalUses)
%268:i64 = add %255, %267
%269:i64 = shl %251, 17:i64
%270:i64 = lshr %251, 47:i64
%271:i64 = or %269, %270
%272:i64 = xor %252, %271 (hasExternalUses)
%273:i64 = xor 221:i64, %272
%274:i64 = add %263, %273
%275:i64 = shl %273, 13:i64
%276:i64 = lshr %272, 51:i64
%277:i64 = or %275, %276
%278:i64 = xor %274, %277
%279:i64 = add %268, %278
%280:i64 = shl %279, 32:i64
%281:i64 = lshr %279, 32:i64
%282:i64 = or %280, %281
%283:i64 = shl %274, 32:i64
%284:i64 = lshr %274, 32:i64
%285:i64 = or %283, %284
%286:i64 = shl %267, 16:i64
%287:i64 = lshr %267, 48:i64
%288:i64 = or %286, %287
%289:i64 = xor %268, %288
%290:i64 = add %285, %289
%291:i64 = shl %289, 21:i64
%292:i64 = lshr %289, 43:i64
%293:i64 = or %291, %292
%294:i64 = xor %290, %293
%295:i64 = add %282, %294
%296:i64 = shl %278, 17:i64
%297:i64 = lshr %278, 47:i64
%298:i64 = or %296, %297
%299:i64 = xor %279, %298
%300:i64 = add %290, %299
%301:i64 = shl %299, 13:i64
%302:i64 = lshr %299, 51:i64
%303:i64 = or %301, %302
%304:i64 = xor %300, %303
%305:i64 = add %295, %304
%306:i64 = shl %305, 32:i64
%307:i64 = lshr %305, 32:i64
%308:i64 = or %306, %307
%309:i64 = shl %300, 32:i64
%310:i64 = lshr %300, 32:i64
%311:i64 = or %309, %310
%312:i64 = shl %294, 16:i64
%313:i64 = lshr %294, 48:i64
%314:i64 = or %312, %313
%315:i64 = xor %295, %314
%316:i64 = add %311, %315
%317:i64 = shl %315, 21:i64
%318:i64 = lshr %315, 43:i64
%319:i64 = or %317, %318
%320:i64 = xor %316, %319
%321:i64 = add %308, %320
%322:i64 = shl %304, 17:i64
%323:i64 = lshr %304, 47:i64
%324:i64 = or %322, %323
%325:i64 = xor %305, %324
%326:i64 = add %316, %325
%327:i64 = shl %325, 13:i64
%328:i64 = lshr %325, 51:i64
%329:i64 = or %327, %328
%330:i64 = xor %326, %329
%331:i64 = add %321, %330
%332:i64 = shl %331, 32:i64
%333:i64 = lshr %331, 32:i64
%334:i64 = or %332, %333
%335:i64 = shl %326, 32:i64
%336:i64 = lshr %326, 32:i64
%337:i64 = or %335, %336
%338:i64 = shl %320, 16:i64
%339:i64 = lshr %320, 48:i64
%340:i64 = or %338, %339
%341:i64 = xor %321, %340
%342:i64 = add %337, %341
%343:i64 = shl %341, 21:i64
%344:i64 = lshr %341, 43:i64
%345:i64 = or %343, %344
%346:i64 = xor %342, %345 (hasExternalUses)
%347:i64 = add %334, %346 (hasExternalUses)
%348:i64 = shl %330, 17:i64
%349:i64 = lshr %330, 47:i64
%350:i64 = or %348, %349
%351:i64 = xor %331, %350
%352:i64 = add %342, %351
%353:i64 = shl %351, 13:i64
%354:i64 = lshr %351, 51:i64
%355:i64 = or %353, %354
%356:i64 = xor %352, %355
%357:i64 = add %347, %356 (hasExternalUses)
%358:i64 = shl %356, 17:i64
%359:i64 = lshr %356, 47:i64
%360:i64 = or %358, %359
%361:i64 = xor %357, %360
infer %361

; *****
; For LLVM instruction:
;  %402 = xor i64 %401, %393
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250
%252:i64 = add %242, %251
%253:i64 = shl %252, 32:i64
%254:i64 = lshr %252, 32:i64
%255:i64 = or %253, %254 (hasExternalUses)
%256:i64 = shl %247, 32:i64
%257:i64 = lshr %247, 32:i64
%258:i64 = or %256, %257
%259:i64 = shl %241, 16:i64
%260:i64 = lshr %241, 48:i64
%261:i64 = or %259, %260
%262:i64 = xor %242, %261
%263:i64 = add %258, %262 (hasExternalUses)
%264:i64 = shl %262, 21:i64
%265:i64 = lshr %262, 43:i64
%266:i64 = or %264, %265
%267:i64 = xor %263, %266 (hasExternalUses)
%268:i64 = add %255, %267
%269:i64 = shl %251, 17:i64
%270:i64 = lshr %251, 47:i64
%271:i64 = or %269, %270
%272:i64 = xor %252, %271 (hasExternalUses)
%273:i64 = xor 221:i64, %272
%274:i64 = add %263, %273
%275:i64 = shl %273, 13:i64
%276:i64 = lshr %272, 51:i64
%277:i64 = or %275, %276
%278:i64 = xor %274, %277
%279:i64 = add %268, %278
%280:i64 = shl %279, 32:i64
%281:i64 = lshr %279, 32:i64
%282:i64 = or %280, %281
%283:i64 = shl %274, 32:i64
%284:i64 = lshr %274, 32:i64
%285:i64 = or %283, %284
%286:i64 = shl %267, 16:i64
%287:i64 = lshr %267, 48:i64
%288:i64 = or %286, %287
%289:i64 = xor %268, %288
%290:i64 = add %285, %289
%291:i64 = shl %289, 21:i64
%292:i64 = lshr %289, 43:i64
%293:i64 = or %291, %292
%294:i64 = xor %290, %293
%295:i64 = add %282, %294
%296:i64 = shl %278, 17:i64
%297:i64 = lshr %278, 47:i64
%298:i64 = or %296, %297
%299:i64 = xor %279, %298
%300:i64 = add %290, %299
%301:i64 = shl %299, 13:i64
%302:i64 = lshr %299, 51:i64
%303:i64 = or %301, %302
%304:i64 = xor %300, %303
%305:i64 = add %295, %304
%306:i64 = shl %305, 32:i64
%307:i64 = lshr %305, 32:i64
%308:i64 = or %306, %307
%309:i64 = shl %300, 32:i64
%310:i64 = lshr %300, 32:i64
%311:i64 = or %309, %310
%312:i64 = shl %294, 16:i64
%313:i64 = lshr %294, 48:i64
%314:i64 = or %312, %313
%315:i64 = xor %295, %314
%316:i64 = add %311, %315
%317:i64 = shl %315, 21:i64
%318:i64 = lshr %315, 43:i64
%319:i64 = or %317, %318
%320:i64 = xor %316, %319
%321:i64 = add %308, %320
%322:i64 = shl %304, 17:i64
%323:i64 = lshr %304, 47:i64
%324:i64 = or %322, %323
%325:i64 = xor %305, %324
%326:i64 = add %316, %325
%327:i64 = shl %325, 13:i64
%328:i64 = lshr %325, 51:i64
%329:i64 = or %327, %328
%330:i64 = xor %326, %329
%331:i64 = add %321, %330
%332:i64 = shl %331, 32:i64
%333:i64 = lshr %331, 32:i64
%334:i64 = or %332, %333
%335:i64 = shl %326, 32:i64
%336:i64 = lshr %326, 32:i64
%337:i64 = or %335, %336
%338:i64 = shl %320, 16:i64
%339:i64 = lshr %320, 48:i64
%340:i64 = or %338, %339
%341:i64 = xor %321, %340
%342:i64 = add %337, %341
%343:i64 = shl %341, 21:i64
%344:i64 = lshr %341, 43:i64
%345:i64 = or %343, %344
%346:i64 = xor %342, %345
%347:i64 = add %334, %346
%348:i64 = shl %346, 16:i64
%349:i64 = lshr %346, 48:i64
%350:i64 = or %348, %349
%351:i64 = xor %347, %350
%352:i64 = shl %351, 21:i64
%353:i64 = lshr %351, 43:i64
%354:i64 = or %352, %353
%355:i64 = shl %330, 17:i64
%356:i64 = lshr %330, 47:i64
%357:i64 = or %355, %356
%358:i64 = xor %331, %357
%359:i64 = add %342, %358
%360:i64 = shl %358, 13:i64
%361:i64 = lshr %358, 51:i64
%362:i64 = or %360, %361
%363:i64 = xor %359, %362
%364:i64 = add %347, %363 (hasExternalUses)
%365:i64 = shl %363, 17:i64
%366:i64 = lshr %363, 47:i64
%367:i64 = or %365, %366
%368:i64 = xor %364, %367
%369:i64 = xor %354, %368
infer %369

; *****
; For LLVM instruction:
;  %403 = xor i64 %402, %400
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
%230:i64 = shl %221, 32:i64
%231:i64 = lshr %221, 32:i64
%232:i64 = or %230, %231
%233:i64 = shl %215, 16:i64
%234:i64 = lshr %215, 48:i64
%235:i64 = or %233, %234
%236:i64 = xor %216, %235
%237:i64 = add %232, %236
%238:i64 = shl %236, 21:i64
%239:i64 = lshr %236, 43:i64
%240:i64 = or %238, %239
%241:i64 = xor %237, %240
%242:i64 = add %229, %241
%243:i64 = shl %225, 17:i64
%244:i64 = lshr %225, 47:i64
%245:i64 = or %243, %244
%246:i64 = xor %226, %245
%247:i64 = add %237, %246
%248:i64 = shl %246, 13:i64
%249:i64 = lshr %246, 51:i64
%250:i64 = or %248, %249
%251:i64 = xor %247, %250
%252:i64 = add %242, %251
%253:i64 = shl %252, 32:i64
%254:i64 = lshr %252, 32:i64
%255:i64 = or %253, %254 (hasExternalUses)
%256:i64 = shl %247, 32:i64
%257:i64 = lshr %247, 32:i64
%258:i64 = or %256, %257
%259:i64 = shl %241, 16:i64
%260:i64 = lshr %241, 48:i64
%261:i64 = or %259, %260
%262:i64 = xor %242, %261
%263:i64 = add %258, %262 (hasExternalUses)
%264:i64 = shl %262, 21:i64
%265:i64 = lshr %262, 43:i64
%266:i64 = or %264, %265
%267:i64 = xor %263, %266 (hasExternalUses)
%268:i64 = add %255, %267
%269:i64 = shl %251, 17:i64
%270:i64 = lshr %251, 47:i64
%271:i64 = or %269, %270
%272:i64 = xor %252, %271 (hasExternalUses)
%273:i64 = xor 221:i64, %272
%274:i64 = add %263, %273
%275:i64 = shl %273, 13:i64
%276:i64 = lshr %272, 51:i64
%277:i64 = or %275, %276
%278:i64 = xor %274, %277
%279:i64 = add %268, %278
%280:i64 = shl %279, 32:i64
%281:i64 = lshr %279, 32:i64
%282:i64 = or %280, %281
%283:i64 = shl %274, 32:i64
%284:i64 = lshr %274, 32:i64
%285:i64 = or %283, %284
%286:i64 = shl %267, 16:i64
%287:i64 = lshr %267, 48:i64
%288:i64 = or %286, %287
%289:i64 = xor %268, %288
%290:i64 = add %285, %289
%291:i64 = shl %289, 21:i64
%292:i64 = lshr %289, 43:i64
%293:i64 = or %291, %292
%294:i64 = xor %290, %293
%295:i64 = add %282, %294
%296:i64 = shl %278, 17:i64
%297:i64 = lshr %278, 47:i64
%298:i64 = or %296, %297
%299:i64 = xor %279, %298
%300:i64 = add %290, %299
%301:i64 = shl %299, 13:i64
%302:i64 = lshr %299, 51:i64
%303:i64 = or %301, %302
%304:i64 = xor %300, %303
%305:i64 = add %295, %304
%306:i64 = shl %305, 32:i64
%307:i64 = lshr %305, 32:i64
%308:i64 = or %306, %307
%309:i64 = shl %300, 32:i64
%310:i64 = lshr %300, 32:i64
%311:i64 = or %309, %310
%312:i64 = shl %294, 16:i64
%313:i64 = lshr %294, 48:i64
%314:i64 = or %312, %313
%315:i64 = xor %295, %314
%316:i64 = add %311, %315
%317:i64 = shl %315, 21:i64
%318:i64 = lshr %315, 43:i64
%319:i64 = or %317, %318
%320:i64 = xor %316, %319
%321:i64 = add %308, %320
%322:i64 = shl %304, 17:i64
%323:i64 = lshr %304, 47:i64
%324:i64 = or %322, %323
%325:i64 = xor %305, %324
%326:i64 = add %316, %325
%327:i64 = shl %325, 13:i64
%328:i64 = lshr %325, 51:i64
%329:i64 = or %327, %328
%330:i64 = xor %326, %329
%331:i64 = add %321, %330
%332:i64 = shl %331, 32:i64
%333:i64 = lshr %331, 32:i64
%334:i64 = or %332, %333
%335:i64 = shl %326, 32:i64
%336:i64 = lshr %326, 32:i64
%337:i64 = or %335, %336
%338:i64 = shl %320, 16:i64
%339:i64 = lshr %320, 48:i64
%340:i64 = or %338, %339
%341:i64 = xor %321, %340
%342:i64 = add %337, %341
%343:i64 = shl %341, 21:i64
%344:i64 = lshr %341, 43:i64
%345:i64 = or %343, %344
%346:i64 = xor %342, %345
%347:i64 = add %334, %346
%348:i64 = shl %330, 17:i64
%349:i64 = lshr %330, 47:i64
%350:i64 = or %348, %349
%351:i64 = xor %331, %350
%352:i64 = add %342, %351
%353:i64 = shl %351, 13:i64
%354:i64 = lshr %351, 51:i64
%355:i64 = or %353, %354
%356:i64 = xor %352, %355
%357:i64 = add %347, %356
%358:i64 = shl %357, 32:i64
%359:i64 = lshr %357, 32:i64
%360:i64 = or %358, %359
%361:i64 = shl %346, 16:i64
%362:i64 = lshr %346, 48:i64
%363:i64 = or %361, %362
%364:i64 = xor %347, %363
%365:i64 = shl %364, 21:i64
%366:i64 = lshr %364, 43:i64
%367:i64 = or %365, %366
%368:i64 = shl %356, 17:i64
%369:i64 = lshr %356, 47:i64
%370:i64 = or %368, %369
%371:i64 = xor %357, %370
%372:i64 = xor %367, %371
%373:i64 = xor %360, %372
infer %373
got 1 candidates from LHS

-------------------------------------------------
%0:i64 = var
infer %0


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i32 = trunc %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i32 = trunc %0 (hasExternalUses)
%2:i32 = and 7:i32, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 7
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i32 = trunc %0 (hasExternalUses)
%2:i32 = and 7:i32, %1 (hasExternalUses)
%3:i32 = subnsw 0:i32, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = shl %0, 56:i64
infer %1


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -72057594037927936
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = xor 8387220255154660723:i64, %0
infer %1


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 8387220255154660723
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -836151781700115085
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = xor 7816392313619706465:i64, %0
infer %1


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 7816392313619706465
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1406979723235069343
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = xor 7237128888997146499:i64, %0
infer %1


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 7237128888997146499
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1986243147857629309
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = xor 8317987319222330741:i64, %0
infer %1


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 8317987319222330741
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -905384717632445067
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = xor %0, %1
infer %2


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -9223372036854775808
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
infer %2


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = shl %0, 13:i64
infer %1


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -8192
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = lshr %0, 51:i64
infer %1


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 8191
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = shl %0, 13:i64
%2:i64 = lshr %0, 51:i64
%3:i64 = or %1, %2
infer %3


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -257
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var
%1:i64 = shl %0, 13:i64

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i64 = var
%1:i64 = lshr %0, 51:i64

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 7 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1 (hasExternalUses)
%3:i64 = shl %1, 13:i64
%4:i64 = lshr %1, 51:i64
%5:i64 = or %3, %4
%6:i64 = xor %2, %5
infer %6


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 18014398509481984
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i64 = var
%1:i64 = shl %0, 13:i64

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i64 = var
%1:i64 = lshr %0, 51:i64

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i64 = var
%1:i64 = shl %0, 13:i64
%2:i64 = lshr %0, 51:i64
%3:i64 = or %1, %2

Cost = 3
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 7 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1 (hasExternalUses)
%3:i64 = shl %2, 32:i64
infer %3


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -4294967296
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1 (hasExternalUses)
%3:i64 = lshr %2, 32:i64
infer %3


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4294967295
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1 (hasExternalUses)
%3:i64 = shl %2, 32:i64
%4:i64 = lshr %2, 32:i64
%5:i64 = or %3, %4
infer %5


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -34359738368
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1 (hasExternalUses)
%3:i64 = shl %2, 32:i64

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1 (hasExternalUses)
%3:i64 = lshr %2, 32:i64

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 6 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2 (hasExternalUses)
%4:i64 = add %0, %3
infer %4


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = xor %0, %1 (hasExternalUses)
%3:i64 = shl %2, 16:i64
infer %3


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -9223372036854775808
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = xor %0, %1 (hasExternalUses)
%3:i64 = lshr %2, 48:i64
infer %3


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 32768
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = xor %0, %1 (hasExternalUses)
%3:i64 = shl %2, 16:i64
%4:i64 = lshr %2, 48:i64
%5:i64 = or %3, %4
infer %5


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -9223372036854775808
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i64 = var
%1:i64 = var
%2:i64 = xor %0, %1

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i64 = var
%1:i64 = var
%2:i64 = xor %0, %1 (hasExternalUses)
%3:i64 = shl %2, 16:i64

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i64 = var
%1:i64 = var
%2:i64 = xor %0, %1 (hasExternalUses)
%3:i64 = lshr %2, 48:i64

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 6 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2
%4:i64 = add %0, %3 (hasExternalUses)
%5:i64 = shl %3, 16:i64
%6:i64 = lshr %3, 48:i64
%7:i64 = or %5, %6
%8:i64 = xor %4, %7
infer %8


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -9223372036854775808
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i64 = var
%1:i64 = var
%2:i64 = xor %0, %1

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2 (hasExternalUses)
%4:i64 = add %0, %3

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i64 = var
%1:i64 = var
%2:i64 = xor %0, %1 (hasExternalUses)
%3:i64 = shl %2, 16:i64

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i64 = var
%1:i64 = var
%2:i64 = xor %0, %1 (hasExternalUses)
%3:i64 = lshr %2, 48:i64

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0:i64 = var
%1:i64 = var
%2:i64 = xor %0, %1 (hasExternalUses)
%3:i64 = shl %2, 16:i64
%4:i64 = lshr %2, 48:i64
%5:i64 = or %3, %4

Cost = 3
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1 (hasExternalUses)
%3:i64 = shl %2, 32:i64
%4:i64 = lshr %2, 32:i64
%5:i64 = or %3, %4
%6:i64 = var
%7:i64 = var
%8:i64 = var
%9:i64 = xor %7, %8
%10:i64 = add %6, %9 (hasExternalUses)
%11:i64 = shl %9, 16:i64
%12:i64 = lshr %9, 48:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13 (hasExternalUses)
%15:i64 = add %5, %14
infer %15


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -9223372036854775804
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1 (hasExternalUses)
%3:i64 = shl %2, 32:i64

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1 (hasExternalUses)
%3:i64 = lshr %2, 32:i64

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2 (hasExternalUses)
%4:i64 = add %0, %3

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2
%4:i64 = add %0, %3 (hasExternalUses)
%5:i64 = shl %3, 16:i64
%6:i64 = lshr %3, 48:i64
%7:i64 = or %5, %6
%8:i64 = xor %4, %7 (hasExternalUses)
%9:i64 = shl %8, 21:i64
infer %9


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2305843009213693952
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2
%4:i64 = add %0, %3 (hasExternalUses)
%5:i64 = shl %3, 16:i64
%6:i64 = lshr %3, 48:i64
%7:i64 = or %5, %6
%8:i64 = xor %4, %7 (hasExternalUses)
%9:i64 = lshr %8, 43:i64
infer %9


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1048576
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2
%4:i64 = add %0, %3 (hasExternalUses)
%5:i64 = shl %3, 16:i64
%6:i64 = lshr %3, 48:i64
%7:i64 = or %5, %6
%8:i64 = xor %4, %7 (hasExternalUses)
%9:i64 = shl %8, 21:i64
%10:i64 = lshr %8, 43:i64
%11:i64 = or %9, %10
infer %11


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -9223372036854775808
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2 (hasExternalUses)
%4:i64 = add %0, %3

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var
%1:i64 = var
%2:i64 = xor %0, %1 (hasExternalUses)
%3:i64 = shl %2, 16:i64

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i64 = var
%1:i64 = var
%2:i64 = xor %0, %1 (hasExternalUses)
%3:i64 = lshr %2, 48:i64

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1 (hasExternalUses)
%3:i64 = shl %2, 32:i64
%4:i64 = lshr %2, 32:i64
%5:i64 = or %3, %4
%6:i64 = var
%7:i64 = var
%8:i64 = var
%9:i64 = xor %7, %8
%10:i64 = add %6, %9 (hasExternalUses)
%11:i64 = shl %9, 16:i64
%12:i64 = lshr %9, 48:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %5, %14 (hasExternalUses)
%16:i64 = shl %14, 21:i64
%17:i64 = lshr %14, 43:i64
%18:i64 = or %16, %17
%19:i64 = xor %15, %18
infer %19


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
ConstantSynthesis: solver returns error on first query

--------------------------------
guess 1

%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1 (hasExternalUses)
%3:i64 = shl %2, 32:i64

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 6 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2 (hasExternalUses)
%4:i64 = add %0, %3 (hasExternalUses)
%5:i64 = var
%6:i64 = var
%7:i64 = add %5, %6 (hasExternalUses)
%8:i64 = shl %6, 13:i64
%9:i64 = lshr %6, 51:i64
%10:i64 = or %8, %9
%11:i64 = xor %7, %10 (hasExternalUses)
%12:i64 = add %4, %11
infer %12


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1 (hasExternalUses)
%3:i64 = shl %1, 13:i64
%4:i64 = lshr %1, 51:i64
%5:i64 = or %3, %4
%6:i64 = xor %2, %5 (hasExternalUses)
%7:i64 = shl %6, 17:i64
infer %7


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -9223372036854775808
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1 (hasExternalUses)
%3:i64 = shl %1, 13:i64
%4:i64 = lshr %1, 51:i64
%5:i64 = or %3, %4
%6:i64 = xor %2, %5 (hasExternalUses)
%7:i64 = lshr %6, 47:i64
infer %7


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 65536
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1 (hasExternalUses)
%3:i64 = shl %1, 13:i64
%4:i64 = lshr %1, 51:i64
%5:i64 = or %3, %4
%6:i64 = xor %2, %5 (hasExternalUses)
%7:i64 = shl %6, 17:i64
%8:i64 = lshr %6, 47:i64
%9:i64 = or %7, %8
infer %9


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -9223372036854775808
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2 (hasExternalUses)
%4:i64 = add %0, %3 (hasExternalUses)
%5:i64 = var
%6:i64 = var
%7:i64 = add %5, %6 (hasExternalUses)
%8:i64 = shl %6, 13:i64
%9:i64 = lshr %6, 51:i64
%10:i64 = or %8, %9
%11:i64 = xor %7, %10
%12:i64 = add %4, %11 (hasExternalUses)
%13:i64 = shl %11, 17:i64
%14:i64 = lshr %11, 47:i64
%15:i64 = or %13, %14
%16:i64 = xor %12, %15
infer %16


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 3307708934258688
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2 (hasExternalUses)
%4:i64 = add %0, %3

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1 (hasExternalUses)
%3:i64 = shl %1, 13:i64
%4:i64 = lshr %1, 51:i64
%5:i64 = or %3, %4
%6:i64 = xor %2, %5

Cost = 4
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1 (hasExternalUses)
%3:i64 = shl %1, 13:i64
%4:i64 = lshr %1, 51:i64
%5:i64 = or %3, %4
%6:i64 = xor %2, %5 (hasExternalUses)
%7:i64 = shl %6, 17:i64

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1 (hasExternalUses)
%3:i64 = shl %1, 13:i64
%4:i64 = lshr %1, 51:i64
%5:i64 = or %3, %4
%6:i64 = xor %2, %5 (hasExternalUses)
%7:i64 = lshr %6, 47:i64

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 6 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2 (hasExternalUses)
%4:i64 = add %0, %3 (hasExternalUses)
%5:i64 = var
%6:i64 = var
%7:i64 = add %5, %6 (hasExternalUses)
%8:i64 = shl %6, 13:i64
%9:i64 = lshr %6, 51:i64
%10:i64 = or %8, %9
%11:i64 = xor %7, %10 (hasExternalUses)
%12:i64 = add %4, %11 (hasExternalUses)
%13:i64 = shl %12, 32:i64
infer %13


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -4294967296
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2 (hasExternalUses)
%4:i64 = add %0, %3 (hasExternalUses)
%5:i64 = var
%6:i64 = var
%7:i64 = add %5, %6 (hasExternalUses)
%8:i64 = shl %6, 13:i64
%9:i64 = lshr %6, 51:i64
%10:i64 = or %8, %9
%11:i64 = xor %7, %10 (hasExternalUses)
%12:i64 = add %4, %11 (hasExternalUses)
%13:i64 = lshr %12, 32:i64
infer %13


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4294967295
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2 (hasExternalUses)
%4:i64 = add %0, %3 (hasExternalUses)
%5:i64 = var
%6:i64 = var
%7:i64 = add %5, %6 (hasExternalUses)
%8:i64 = shl %6, 13:i64
%9:i64 = lshr %6, 51:i64
%10:i64 = or %8, %9
%11:i64 = xor %7, %10 (hasExternalUses)
%12:i64 = add %4, %11 (hasExternalUses)
%13:i64 = shl %12, 32:i64
%14:i64 = lshr %12, 32:i64
%15:i64 = or %13, %14
infer %15


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483777
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2 (hasExternalUses)
%4:i64 = add %0, %3

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = shl %2, 32:i64
%4:i64 = lshr %2, 32:i64
%5:i64 = or %3, %4
%6:i64 = var
%7:i64 = var
%8:i64 = var
%9:i64 = xor %7, %8
%10:i64 = add %6, %9
%11:i64 = shl %9, 16:i64
%12:i64 = lshr %9, 48:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13 (hasExternalUses)
%15:i64 = add %5, %14 (hasExternalUses)
%16:i64 = shl %1, 13:i64
%17:i64 = lshr %1, 51:i64
%18:i64 = or %16, %17
%19:i64 = xor %2, %18
%20:i64 = add %10, %19 (hasExternalUses)
%21:i64 = shl %19, 17:i64
%22:i64 = lshr %19, 47:i64
%23:i64 = or %21, %22
%24:i64 = xor %20, %23 (hasExternalUses)
%25:i64 = add %15, %24
infer %25


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 5123530407889820684
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2 (hasExternalUses)
%4:i64 = add %0, %3 (hasExternalUses)
%5:i64 = var
%6:i64 = var
%7:i64 = add %5, %6 (hasExternalUses)
%8:i64 = shl %6, 13:i64
%9:i64 = lshr %6, 51:i64
%10:i64 = or %8, %9
%11:i64 = xor %7, %10
%12:i64 = add %4, %11 (hasExternalUses)
%13:i64 = shl %11, 17:i64
%14:i64 = lshr %11, 47:i64
%15:i64 = or %13, %14
%16:i64 = xor %12, %15 (hasExternalUses)
%17:i64 = shl %16, 13:i64
infer %17


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 3458777707960074240
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2 (hasExternalUses)
%4:i64 = add %0, %3 (hasExternalUses)
%5:i64 = var
%6:i64 = var
%7:i64 = add %5, %6 (hasExternalUses)
%8:i64 = shl %6, 13:i64
%9:i64 = lshr %6, 51:i64
%10:i64 = or %8, %9
%11:i64 = xor %7, %10
%12:i64 = add %4, %11 (hasExternalUses)
%13:i64 = shl %11, 17:i64
%14:i64 = lshr %11, 47:i64
%15:i64 = or %13, %14
%16:i64 = xor %12, %15 (hasExternalUses)
%17:i64 = lshr %16, 51:i64
infer %17


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4096
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2 (hasExternalUses)
%4:i64 = add %0, %3 (hasExternalUses)
%5:i64 = var
%6:i64 = var
%7:i64 = add %5, %6 (hasExternalUses)
%8:i64 = shl %6, 13:i64
%9:i64 = lshr %6, 51:i64
%10:i64 = or %8, %9
%11:i64 = xor %7, %10
%12:i64 = add %4, %11 (hasExternalUses)
%13:i64 = shl %11, 17:i64
%14:i64 = lshr %11, 47:i64
%15:i64 = or %13, %14
%16:i64 = xor %12, %15 (hasExternalUses)
%17:i64 = shl %16, 13:i64
%18:i64 = lshr %16, 51:i64
%19:i64 = or %17, %18
infer %19


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 725387403262427136
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2 (hasExternalUses)
%4:i64 = add %0, %3

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = shl %2, 32:i64
%4:i64 = lshr %2, 32:i64
%5:i64 = or %3, %4
%6:i64 = var
%7:i64 = var
%8:i64 = var
%9:i64 = xor %7, %8
%10:i64 = add %6, %9
%11:i64 = shl %9, 16:i64
%12:i64 = lshr %9, 48:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13 (hasExternalUses)
%15:i64 = add %5, %14 (hasExternalUses)
%16:i64 = shl %1, 13:i64
%17:i64 = lshr %1, 51:i64
%18:i64 = or %16, %17
%19:i64 = xor %2, %18
%20:i64 = add %10, %19 (hasExternalUses)
%21:i64 = shl %19, 17:i64
%22:i64 = lshr %19, 47:i64
%23:i64 = or %21, %22
%24:i64 = xor %20, %23
%25:i64 = add %15, %24 (hasExternalUses)
%26:i64 = shl %24, 13:i64
%27:i64 = lshr %24, 51:i64
%28:i64 = or %26, %27
%29:i64 = xor %25, %28
infer %29


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 3242258540524860679
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1 (hasExternalUses)
%3:i64 = shl %2, 32:i64
%4:i64 = lshr %2, 32:i64
%5:i64 = or %3, %4

Cost = 3
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1 (hasExternalUses)
%3:i64 = shl %2, 32:i64
%4:i64 = lshr %2, 32:i64
%5:i64 = or %3, %4
%6:i64 = var
%7:i64 = var
%8:i64 = var
%9:i64 = xor %7, %8
%10:i64 = add %6, %9 (hasExternalUses)
%11:i64 = shl %9, 16:i64
%12:i64 = lshr %9, 48:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13 (hasExternalUses)
%15:i64 = add %5, %14

Cost = 4
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2 (hasExternalUses)
%4:i64 = add %0, %3 (hasExternalUses)
%5:i64 = var
%6:i64 = var
%7:i64 = add %5, %6 (hasExternalUses)
%8:i64 = shl %6, 13:i64
%9:i64 = lshr %6, 51:i64
%10:i64 = or %8, %9
%11:i64 = xor %7, %10
%12:i64 = add %4, %11 (hasExternalUses)
%13:i64 = shl %11, 17:i64
%14:i64 = lshr %11, 47:i64
%15:i64 = or %13, %14
%16:i64 = xor %12, %15

Cost = 8
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = shl %2, 32:i64
%4:i64 = lshr %2, 32:i64
%5:i64 = or %3, %4
%6:i64 = var
%7:i64 = var
%8:i64 = var
%9:i64 = xor %7, %8
%10:i64 = add %6, %9
%11:i64 = shl %9, 16:i64
%12:i64 = lshr %9, 48:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13 (hasExternalUses)
%15:i64 = add %5, %14 (hasExternalUses)
%16:i64 = shl %1, 13:i64
%17:i64 = lshr %1, 51:i64
%18:i64 = or %16, %17
%19:i64 = xor %2, %18
%20:i64 = add %10, %19 (hasExternalUses)
%21:i64 = shl %19, 17:i64
%22:i64 = lshr %19, 47:i64
%23:i64 = or %21, %22
%24:i64 = xor %20, %23 (hasExternalUses)
%25:i64 = add %15, %24 (hasExternalUses)
%26:i64 = shl %25, 32:i64
infer %26


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -935505376705511424
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = shl %2, 32:i64
%4:i64 = lshr %2, 32:i64
%5:i64 = or %3, %4
%6:i64 = var
%7:i64 = var
%8:i64 = var
%9:i64 = xor %7, %8
%10:i64 = add %6, %9
%11:i64 = shl %9, 16:i64
%12:i64 = lshr %9, 48:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13 (hasExternalUses)
%15:i64 = add %5, %14 (hasExternalUses)
%16:i64 = shl %1, 13:i64
%17:i64 = lshr %1, 51:i64
%18:i64 = or %16, %17
%19:i64 = xor %2, %18
%20:i64 = add %10, %19 (hasExternalUses)
%21:i64 = shl %19, 17:i64
%22:i64 = lshr %19, 47:i64
%23:i64 = or %21, %22
%24:i64 = xor %20, %23 (hasExternalUses)
%25:i64 = add %15, %24 (hasExternalUses)
%26:i64 = lshr %25, 32:i64
infer %26


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1977557721
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = shl %2, 32:i64
%4:i64 = lshr %2, 32:i64
%5:i64 = or %3, %4
%6:i64 = var
%7:i64 = var
%8:i64 = var
%9:i64 = xor %7, %8
%10:i64 = add %6, %9
%11:i64 = shl %9, 16:i64
%12:i64 = lshr %9, 48:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13 (hasExternalUses)
%15:i64 = add %5, %14 (hasExternalUses)
%16:i64 = shl %1, 13:i64
%17:i64 = lshr %1, 51:i64
%18:i64 = or %16, %17
%19:i64 = xor %2, %18
%20:i64 = add %10, %19 (hasExternalUses)
%21:i64 = shl %19, 17:i64
%22:i64 = lshr %19, 47:i64
%23:i64 = or %21, %22
%24:i64 = xor %20, %23 (hasExternalUses)
%25:i64 = add %15, %24 (hasExternalUses)
%26:i64 = shl %25, 32:i64
%27:i64 = lshr %25, 32:i64
%28:i64 = or %26, %27
infer %28


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
ConstantSynthesis: solver returns error on first query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2
%4:i64 = add %0, %3
%5:i64 = var
%6:i64 = var
%7:i64 = add %5, %6
%8:i64 = shl %6, 13:i64
%9:i64 = lshr %6, 51:i64
%10:i64 = or %8, %9
%11:i64 = xor %7, %10 (hasExternalUses)
%12:i64 = add %4, %11 (hasExternalUses)
%13:i64 = shl %12, 32:i64
%14:i64 = lshr %12, 32:i64
%15:i64 = or %13, %14
%16:i64 = shl %7, 32:i64
%17:i64 = lshr %7, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %3, 16:i64
%20:i64 = lshr %3, 48:i64
%21:i64 = or %19, %20
%22:i64 = xor %4, %21
%23:i64 = add %18, %22 (hasExternalUses)
%24:i64 = shl %22, 21:i64
%25:i64 = lshr %22, 43:i64
%26:i64 = or %24, %25
%27:i64 = xor %23, %26 (hasExternalUses)
%28:i64 = add %15, %27
infer %28


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
ConstantSynthesis: solver returns error on first query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1 (hasExternalUses)
%3:i64 = shl %2, 32:i64
%4:i64 = lshr %2, 32:i64
%5:i64 = or %3, %4
%6:i64 = var
%7:i64 = var
%8:i64 = var
%9:i64 = xor %7, %8
%10:i64 = add %6, %9 (hasExternalUses)
%11:i64 = shl %9, 16:i64
%12:i64 = lshr %9, 48:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %5, %14 (hasExternalUses)
%16:i64 = shl %14, 21:i64
%17:i64 = lshr %14, 43:i64
%18:i64 = or %16, %17
%19:i64 = xor %15, %18 (hasExternalUses)
%20:i64 = shl %19, 16:i64
infer %20


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
ConstantSynthesis: solver returns error on first query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1 (hasExternalUses)
%3:i64 = shl %2, 32:i64
%4:i64 = lshr %2, 32:i64
%5:i64 = or %3, %4
%6:i64 = var
%7:i64 = var
%8:i64 = var
%9:i64 = xor %7, %8
%10:i64 = add %6, %9 (hasExternalUses)
%11:i64 = shl %9, 16:i64
%12:i64 = lshr %9, 48:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %5, %14 (hasExternalUses)
%16:i64 = shl %14, 21:i64
%17:i64 = lshr %14, 43:i64
%18:i64 = or %16, %17
%19:i64 = xor %15, %18 (hasExternalUses)
%20:i64 = lshr %19, 48:i64
infer %20


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
ConstantSynthesis: solver returns error on first query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1 (hasExternalUses)
%3:i64 = shl %2, 32:i64
%4:i64 = lshr %2, 32:i64
%5:i64 = or %3, %4
%6:i64 = var
%7:i64 = var
%8:i64 = var
%9:i64 = xor %7, %8
%10:i64 = add %6, %9 (hasExternalUses)
%11:i64 = shl %9, 16:i64
%12:i64 = lshr %9, 48:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %5, %14 (hasExternalUses)
%16:i64 = shl %14, 21:i64
%17:i64 = lshr %14, 43:i64
%18:i64 = or %16, %17
%19:i64 = xor %15, %18 (hasExternalUses)
%20:i64 = shl %19, 16:i64
%21:i64 = lshr %19, 48:i64
%22:i64 = or %20, %21
infer %22


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 229377299574642688
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2
%4:i64 = add %0, %3
%5:i64 = var
%6:i64 = var
%7:i64 = add %5, %6
%8:i64 = shl %6, 13:i64
%9:i64 = lshr %6, 51:i64
%10:i64 = or %8, %9
%11:i64 = xor %7, %10 (hasExternalUses)
%12:i64 = add %4, %11 (hasExternalUses)
%13:i64 = shl %12, 32:i64
%14:i64 = lshr %12, 32:i64
%15:i64 = or %13, %14
%16:i64 = shl %7, 32:i64
%17:i64 = lshr %7, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %3, 16:i64
%20:i64 = lshr %3, 48:i64
%21:i64 = or %19, %20
%22:i64 = xor %4, %21
%23:i64 = add %18, %22 (hasExternalUses)
%24:i64 = shl %22, 21:i64
%25:i64 = lshr %22, 43:i64
%26:i64 = or %24, %25
%27:i64 = xor %23, %26
%28:i64 = add %15, %27 (hasExternalUses)
%29:i64 = shl %27, 16:i64
%30:i64 = lshr %27, 48:i64
%31:i64 = or %29, %30
%32:i64 = xor %28, %31
infer %32


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
ConstantSynthesis: solver returns error on first query

--------------------------------
guess 1

%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2 (hasExternalUses)
%4:i64 = add %0, %3 (hasExternalUses)
%5:i64 = var
%6:i64 = var
%7:i64 = add %5, %6 (hasExternalUses)
%8:i64 = shl %6, 13:i64
%9:i64 = lshr %6, 51:i64
%10:i64 = or %8, %9
%11:i64 = xor %7, %10 (hasExternalUses)
%12:i64 = add %4, %11 (hasExternalUses)
%13:i64 = shl %12, 32:i64
%14:i64 = lshr %12, 32:i64
%15:i64 = or %13, %14

Cost = 3
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1 (hasExternalUses)
%3:i64 = shl %2, 32:i64
%4:i64 = lshr %2, 32:i64
%5:i64 = or %3, %4
%6:i64 = var
%7:i64 = var
%8:i64 = var
%9:i64 = xor %7, %8
%10:i64 = add %6, %9 (hasExternalUses)
%11:i64 = shl %9, 16:i64
%12:i64 = lshr %9, 48:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13 (hasExternalUses)
%15:i64 = add %5, %14

Cost = 4
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = shl %2, 32:i64
%4:i64 = lshr %2, 32:i64
%5:i64 = or %3, %4
%6:i64 = var
%7:i64 = var
%8:i64 = var
%9:i64 = xor %7, %8
%10:i64 = add %6, %9
%11:i64 = shl %9, 16:i64
%12:i64 = lshr %9, 48:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %5, %14
%16:i64 = shl %1, 13:i64
%17:i64 = lshr %1, 51:i64
%18:i64 = or %16, %17
%19:i64 = xor %2, %18
%20:i64 = add %10, %19
%21:i64 = shl %19, 17:i64
%22:i64 = lshr %19, 47:i64
%23:i64 = or %21, %22
%24:i64 = xor %20, %23 (hasExternalUses)
%25:i64 = add %15, %24 (hasExternalUses)
%26:i64 = shl %25, 32:i64
%27:i64 = lshr %25, 32:i64
%28:i64 = or %26, %27
%29:i64 = shl %20, 32:i64
%30:i64 = lshr %20, 32:i64
%31:i64 = or %29, %30
%32:i64 = shl %14, 21:i64
%33:i64 = lshr %14, 43:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %31, %35 (hasExternalUses)
%37:i64 = shl %35, 16:i64
%38:i64 = lshr %35, 48:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39 (hasExternalUses)
%41:i64 = add %28, %40
infer %41


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
ConstantSynthesis: solver returns error on first query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2
%4:i64 = add %0, %3
%5:i64 = var
%6:i64 = var
%7:i64 = add %5, %6
%8:i64 = shl %6, 13:i64
%9:i64 = lshr %6, 51:i64
%10:i64 = or %8, %9
%11:i64 = xor %7, %10 (hasExternalUses)
%12:i64 = add %4, %11 (hasExternalUses)
%13:i64 = shl %12, 32:i64
%14:i64 = lshr %12, 32:i64
%15:i64 = or %13, %14
%16:i64 = shl %7, 32:i64
%17:i64 = lshr %7, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %3, 16:i64
%20:i64 = lshr %3, 48:i64
%21:i64 = or %19, %20
%22:i64 = xor %4, %21
%23:i64 = add %18, %22 (hasExternalUses)
%24:i64 = shl %22, 21:i64
%25:i64 = lshr %22, 43:i64
%26:i64 = or %24, %25
%27:i64 = xor %23, %26
%28:i64 = add %15, %27 (hasExternalUses)
%29:i64 = shl %27, 16:i64
%30:i64 = lshr %27, 48:i64
%31:i64 = or %29, %30
%32:i64 = xor %28, %31 (hasExternalUses)
%33:i64 = shl %32, 21:i64
infer %33


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -8163354413170163712
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2
%4:i64 = add %0, %3
%5:i64 = var
%6:i64 = var
%7:i64 = add %5, %6
%8:i64 = shl %6, 13:i64
%9:i64 = lshr %6, 51:i64
%10:i64 = or %8, %9
%11:i64 = xor %7, %10 (hasExternalUses)
%12:i64 = add %4, %11 (hasExternalUses)
%13:i64 = shl %12, 32:i64
%14:i64 = lshr %12, 32:i64
%15:i64 = or %13, %14
%16:i64 = shl %7, 32:i64
%17:i64 = lshr %7, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %3, 16:i64
%20:i64 = lshr %3, 48:i64
%21:i64 = or %19, %20
%22:i64 = xor %4, %21
%23:i64 = add %18, %22 (hasExternalUses)
%24:i64 = shl %22, 21:i64
%25:i64 = lshr %22, 43:i64
%26:i64 = or %24, %25
%27:i64 = xor %23, %26
%28:i64 = add %15, %27 (hasExternalUses)
%29:i64 = shl %27, 16:i64
%30:i64 = lshr %27, 48:i64
%31:i64 = or %29, %30
%32:i64 = xor %28, %31 (hasExternalUses)
%33:i64 = lshr %32, 43:i64
infer %33


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 418442
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2
%4:i64 = add %0, %3
%5:i64 = var
%6:i64 = var
%7:i64 = add %5, %6
%8:i64 = shl %6, 13:i64
%9:i64 = lshr %6, 51:i64
%10:i64 = or %8, %9
%11:i64 = xor %7, %10 (hasExternalUses)
%12:i64 = add %4, %11 (hasExternalUses)
%13:i64 = shl %12, 32:i64
%14:i64 = lshr %12, 32:i64
%15:i64 = or %13, %14
%16:i64 = shl %7, 32:i64
%17:i64 = lshr %7, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %3, 16:i64
%20:i64 = lshr %3, 48:i64
%21:i64 = or %19, %20
%22:i64 = xor %4, %21
%23:i64 = add %18, %22 (hasExternalUses)
%24:i64 = shl %22, 21:i64
%25:i64 = lshr %22, 43:i64
%26:i64 = or %24, %25
%27:i64 = xor %23, %26
%28:i64 = add %15, %27 (hasExternalUses)
%29:i64 = shl %27, 16:i64
%30:i64 = lshr %27, 48:i64
%31:i64 = or %29, %30
%32:i64 = xor %28, %31 (hasExternalUses)
%33:i64 = shl %32, 21:i64
%34:i64 = lshr %32, 43:i64
%35:i64 = or %33, %34
infer %35


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
ConstantSynthesis: solver returns error on first query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = shl %2, 32:i64
%4:i64 = lshr %2, 32:i64
%5:i64 = or %3, %4
%6:i64 = var
%7:i64 = var
%8:i64 = var
%9:i64 = xor %7, %8
%10:i64 = add %6, %9
%11:i64 = shl %9, 16:i64
%12:i64 = lshr %9, 48:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %5, %14
%16:i64 = shl %1, 13:i64
%17:i64 = lshr %1, 51:i64
%18:i64 = or %16, %17
%19:i64 = xor %2, %18
%20:i64 = add %10, %19
%21:i64 = shl %19, 17:i64
%22:i64 = lshr %19, 47:i64
%23:i64 = or %21, %22
%24:i64 = xor %20, %23 (hasExternalUses)
%25:i64 = add %15, %24 (hasExternalUses)
%26:i64 = shl %25, 32:i64
%27:i64 = lshr %25, 32:i64
%28:i64 = or %26, %27
%29:i64 = shl %20, 32:i64
%30:i64 = lshr %20, 32:i64
%31:i64 = or %29, %30
%32:i64 = shl %14, 21:i64
%33:i64 = lshr %14, 43:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %31, %35 (hasExternalUses)
%37:i64 = shl %35, 16:i64
%38:i64 = lshr %35, 48:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %28, %40 (hasExternalUses)
%42:i64 = shl %40, 21:i64
%43:i64 = lshr %40, 43:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
infer %45


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = shl %2, 32:i64
%4:i64 = lshr %2, 32:i64
%5:i64 = or %3, %4
%6:i64 = var
%7:i64 = var
%8:i64 = var
%9:i64 = xor %7, %8
%10:i64 = add %6, %9
%11:i64 = shl %9, 16:i64
%12:i64 = lshr %9, 48:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13 (hasExternalUses)
%15:i64 = add %5, %14 (hasExternalUses)
%16:i64 = shl %1, 13:i64
%17:i64 = lshr %1, 51:i64
%18:i64 = or %16, %17
%19:i64 = xor %2, %18
%20:i64 = add %10, %19 (hasExternalUses)
%21:i64 = shl %19, 17:i64
%22:i64 = lshr %19, 47:i64
%23:i64 = or %21, %22
%24:i64 = xor %20, %23 (hasExternalUses)
%25:i64 = add %15, %24 (hasExternalUses)
%26:i64 = shl %25, 32:i64

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2
%4:i64 = add %0, %3
%5:i64 = var
%6:i64 = var
%7:i64 = add %5, %6
%8:i64 = shl %6, 13:i64
%9:i64 = lshr %6, 51:i64
%10:i64 = or %8, %9
%11:i64 = xor %7, %10
%12:i64 = add %4, %11
%13:i64 = shl %12, 32:i64
%14:i64 = lshr %12, 32:i64
%15:i64 = or %13, %14
%16:i64 = shl %7, 32:i64
%17:i64 = lshr %7, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %3, 16:i64
%20:i64 = lshr %3, 48:i64
%21:i64 = or %19, %20
%22:i64 = xor %4, %21
%23:i64 = add %18, %22
%24:i64 = shl %22, 21:i64
%25:i64 = lshr %22, 43:i64
%26:i64 = or %24, %25
%27:i64 = xor %23, %26 (hasExternalUses)
%28:i64 = add %15, %27 (hasExternalUses)
%29:i64 = shl %11, 17:i64
%30:i64 = lshr %11, 47:i64
%31:i64 = or %29, %30
%32:i64 = xor %12, %31
%33:i64 = add %23, %32 (hasExternalUses)
%34:i64 = shl %32, 13:i64
%35:i64 = lshr %32, 51:i64
%36:i64 = or %34, %35
%37:i64 = xor %33, %36 (hasExternalUses)
%38:i64 = add %28, %37
infer %38


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = shl %2, 32:i64
%4:i64 = lshr %2, 32:i64
%5:i64 = or %3, %4
%6:i64 = var
%7:i64 = var
%8:i64 = var
%9:i64 = xor %7, %8
%10:i64 = add %6, %9
%11:i64 = shl %9, 16:i64
%12:i64 = lshr %9, 48:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13 (hasExternalUses)
%15:i64 = add %5, %14 (hasExternalUses)
%16:i64 = shl %1, 13:i64
%17:i64 = lshr %1, 51:i64
%18:i64 = or %16, %17
%19:i64 = xor %2, %18
%20:i64 = add %10, %19 (hasExternalUses)
%21:i64 = shl %19, 17:i64
%22:i64 = lshr %19, 47:i64
%23:i64 = or %21, %22
%24:i64 = xor %20, %23
%25:i64 = add %15, %24 (hasExternalUses)
%26:i64 = shl %24, 13:i64
%27:i64 = lshr %24, 51:i64
%28:i64 = or %26, %27
%29:i64 = xor %25, %28 (hasExternalUses)
%30:i64 = shl %29, 17:i64
infer %30


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
ConstantSynthesis: solver returns error on first query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = shl %2, 32:i64
%4:i64 = lshr %2, 32:i64
%5:i64 = or %3, %4
%6:i64 = var
%7:i64 = var
%8:i64 = var
%9:i64 = xor %7, %8
%10:i64 = add %6, %9
%11:i64 = shl %9, 16:i64
%12:i64 = lshr %9, 48:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13 (hasExternalUses)
%15:i64 = add %5, %14 (hasExternalUses)
%16:i64 = shl %1, 13:i64
%17:i64 = lshr %1, 51:i64
%18:i64 = or %16, %17
%19:i64 = xor %2, %18
%20:i64 = add %10, %19 (hasExternalUses)
%21:i64 = shl %19, 17:i64
%22:i64 = lshr %19, 47:i64
%23:i64 = or %21, %22
%24:i64 = xor %20, %23
%25:i64 = add %15, %24 (hasExternalUses)
%26:i64 = shl %24, 13:i64
%27:i64 = lshr %24, 51:i64
%28:i64 = or %26, %27
%29:i64 = xor %25, %28 (hasExternalUses)
%30:i64 = lshr %29, 47:i64
infer %30


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = shl %2, 32:i64
%4:i64 = lshr %2, 32:i64
%5:i64 = or %3, %4
%6:i64 = var
%7:i64 = var
%8:i64 = var
%9:i64 = xor %7, %8
%10:i64 = add %6, %9
%11:i64 = shl %9, 16:i64
%12:i64 = lshr %9, 48:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13 (hasExternalUses)
%15:i64 = add %5, %14 (hasExternalUses)
%16:i64 = shl %1, 13:i64
%17:i64 = lshr %1, 51:i64
%18:i64 = or %16, %17
%19:i64 = xor %2, %18
%20:i64 = add %10, %19 (hasExternalUses)
%21:i64 = shl %19, 17:i64
%22:i64 = lshr %19, 47:i64
%23:i64 = or %21, %22
%24:i64 = xor %20, %23
%25:i64 = add %15, %24 (hasExternalUses)
%26:i64 = shl %24, 13:i64
%27:i64 = lshr %24, 51:i64
%28:i64 = or %26, %27
%29:i64 = xor %25, %28 (hasExternalUses)
%30:i64 = shl %29, 17:i64
%31:i64 = lshr %29, 47:i64
%32:i64 = or %30, %31
infer %32


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1509680172584769487
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2
%4:i64 = add %0, %3
%5:i64 = var
%6:i64 = var
%7:i64 = add %5, %6
%8:i64 = shl %6, 13:i64
%9:i64 = lshr %6, 51:i64
%10:i64 = or %8, %9
%11:i64 = xor %7, %10
%12:i64 = add %4, %11
%13:i64 = shl %12, 32:i64
%14:i64 = lshr %12, 32:i64
%15:i64 = or %13, %14
%16:i64 = shl %7, 32:i64
%17:i64 = lshr %7, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %3, 16:i64
%20:i64 = lshr %3, 48:i64
%21:i64 = or %19, %20
%22:i64 = xor %4, %21
%23:i64 = add %18, %22
%24:i64 = shl %22, 21:i64
%25:i64 = lshr %22, 43:i64
%26:i64 = or %24, %25
%27:i64 = xor %23, %26 (hasExternalUses)
%28:i64 = add %15, %27 (hasExternalUses)
%29:i64 = shl %11, 17:i64
%30:i64 = lshr %11, 47:i64
%31:i64 = or %29, %30
%32:i64 = xor %12, %31
%33:i64 = add %23, %32 (hasExternalUses)
%34:i64 = shl %32, 13:i64
%35:i64 = lshr %32, 51:i64
%36:i64 = or %34, %35
%37:i64 = xor %33, %36
%38:i64 = add %28, %37 (hasExternalUses)
%39:i64 = shl %37, 17:i64
%40:i64 = lshr %37, 47:i64
%41:i64 = or %39, %40
%42:i64 = xor %38, %41
infer %42


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2 (hasExternalUses)
%4:i64 = add %0, %3 (hasExternalUses)
%5:i64 = var
%6:i64 = var
%7:i64 = add %5, %6 (hasExternalUses)
%8:i64 = shl %6, 13:i64
%9:i64 = lshr %6, 51:i64
%10:i64 = or %8, %9
%11:i64 = xor %7, %10
%12:i64 = add %4, %11 (hasExternalUses)
%13:i64 = shl %11, 17:i64
%14:i64 = lshr %11, 47:i64
%15:i64 = or %13, %14
%16:i64 = xor %12, %15 (hasExternalUses)
%17:i64 = shl %16, 13:i64
%18:i64 = lshr %16, 51:i64
%19:i64 = or %17, %18

Cost = 3
verification query failed!
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2
%4:i64 = add %0, %3
%5:i64 = var
%6:i64 = var
%7:i64 = add %5, %6
%8:i64 = shl %6, 13:i64
%9:i64 = lshr %6, 51:i64
%10:i64 = or %8, %9
%11:i64 = xor %7, %10
%12:i64 = add %4, %11
%13:i64 = shl %12, 32:i64
%14:i64 = lshr %12, 32:i64
%15:i64 = or %13, %14
%16:i64 = shl %7, 32:i64
%17:i64 = lshr %7, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %3, 16:i64
%20:i64 = lshr %3, 48:i64
%21:i64 = or %19, %20
%22:i64 = xor %4, %21
%23:i64 = add %18, %22
%24:i64 = shl %22, 21:i64
%25:i64 = lshr %22, 43:i64
%26:i64 = or %24, %25
%27:i64 = xor %23, %26 (hasExternalUses)
%28:i64 = add %15, %27 (hasExternalUses)
%29:i64 = shl %11, 17:i64
%30:i64 = lshr %11, 47:i64
%31:i64 = or %29, %30
%32:i64 = xor %12, %31
%33:i64 = add %23, %32 (hasExternalUses)
%34:i64 = shl %32, 13:i64
%35:i64 = lshr %32, 51:i64
%36:i64 = or %34, %35
%37:i64 = xor %33, %36 (hasExternalUses)
%38:i64 = add %28, %37 (hasExternalUses)
%39:i64 = shl %38, 32:i64
infer %39


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4789104838182961152
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2
%4:i64 = add %0, %3
%5:i64 = var
%6:i64 = var
%7:i64 = add %5, %6
%8:i64 = shl %6, 13:i64
%9:i64 = lshr %6, 51:i64
%10:i64 = or %8, %9
%11:i64 = xor %7, %10
%12:i64 = add %4, %11
%13:i64 = shl %12, 32:i64
%14:i64 = lshr %12, 32:i64
%15:i64 = or %13, %14
%16:i64 = shl %7, 32:i64
%17:i64 = lshr %7, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %3, 16:i64
%20:i64 = lshr %3, 48:i64
%21:i64 = or %19, %20
%22:i64 = xor %4, %21
%23:i64 = add %18, %22
%24:i64 = shl %22, 21:i64
%25:i64 = lshr %22, 43:i64
%26:i64 = or %24, %25
%27:i64 = xor %23, %26 (hasExternalUses)
%28:i64 = add %15, %27 (hasExternalUses)
%29:i64 = shl %11, 17:i64
%30:i64 = lshr %11, 47:i64
%31:i64 = or %29, %30
%32:i64 = xor %12, %31
%33:i64 = add %23, %32 (hasExternalUses)
%34:i64 = shl %32, 13:i64
%35:i64 = lshr %32, 51:i64
%36:i64 = or %34, %35
%37:i64 = xor %33, %36 (hasExternalUses)
%38:i64 = add %28, %37 (hasExternalUses)
%39:i64 = lshr %38, 32:i64
infer %39


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = xor %1, %2
%4:i64 = add %0, %3
%5:i64 = var
%6:i64 = var
%7:i64 = add %5, %6
%8:i64 = shl %6, 13:i64
%9:i64 = lshr %6, 51:i64
%10:i64 = or %8, %9
%11:i64 = xor %7, %10
%12:i64 = add %4, %11
%13:i64 = shl %12, 32:i64
%14:i64 = lshr %12, 32:i64
%15:i64 = or %13, %14
%16:i64 = shl %7, 32:i64
%17:i64 = lshr %7, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %3, 16:i64
%20:i64 = lshr %3, 48:i64
%21:i64 = or %19, %20
%22:i64 = xor %4, %21
%23:i64 = add %18, %22
%24:i64 = shl %22, 21:i64
%25:i64 = lshr %22, 43:i64
%26:i64 = or %24, %25
%27:i64 = xor %23, %26 (hasExternalUses)
%28:i64 = add %15, %27 (hasExternalUses)
%29:i64 = shl %11, 17:i64
%30:i64 = lshr %11, 47:i64
%31:i64 = or %29, %30
%32:i64 = xor %12, %31
%33:i64 = add %23, %32 (hasExternalUses)
%34:i64 = shl %32, 13:i64
%35:i64 = lshr %32, 51:i64
%36:i64 = or %34, %35
%37:i64 = xor %33, %36 (hasExternalUses)
%38:i64 = add %28, %37 (hasExternalUses)
%39:i64 = shl %38, 32:i64
%40:i64 = lshr %38, 32:i64
%41:i64 = or %39, %40
infer %41


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = add %1, %2
%4:i64 = shl %3, 32:i64
%5:i64 = lshr %3, 32:i64
%6:i64 = or %4, %5
%7:i64 = var
%8:i64 = var
%9:i64 = xor %8, %0
%10:i64 = add %7, %9
%11:i64 = shl %9, 16:i64
%12:i64 = lshr %9, 48:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %6, %14
%16:i64 = shl %2, 13:i64
%17:i64 = lshr %2, 51:i64
%18:i64 = or %16, %17
%19:i64 = xor %3, %18
%20:i64 = add %10, %19
%21:i64 = shl %19, 17:i64
%22:i64 = lshr %19, 47:i64
%23:i64 = or %21, %22
%24:i64 = xor %20, %23 (hasExternalUses)
%25:i64 = add %15, %24 (hasExternalUses)
%26:i64 = shl %25, 32:i64
%27:i64 = lshr %25, 32:i64
%28:i64 = or %26, %27
%29:i64 = shl %20, 32:i64
%30:i64 = lshr %20, 32:i64
%31:i64 = or %29, %30
%32:i64 = shl %14, 21:i64
%33:i64 = lshr %14, 43:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %31, %35 (hasExternalUses)
%37:i64 = shl %35, 16:i64
%38:i64 = lshr %35, 48:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39 (hasExternalUses)
%41:i64 = add %28, %40 (hasExternalUses)
%42:i64 = xor %0, %41
infer %42


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1541762110509484127
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 8387220255154660723:i64, %1 (hasExternalUses)
%3:i64 = var
%4:i64 = var
%5:i64 = add %3, %4
%6:i64 = shl %5, 32:i64
%7:i64 = lshr %5, 32:i64
%8:i64 = or %6, %7
%9:i64 = var
%10:i64 = var
%11:i64 = var
%12:i64 = xor %10, %11
%13:i64 = add %9, %12
%14:i64 = shl %12, 16:i64
%15:i64 = lshr %12, 48:i64
%16:i64 = or %14, %15
%17:i64 = xor %13, %16
%18:i64 = add %8, %17
%19:i64 = shl %4, 13:i64
%20:i64 = lshr %4, 51:i64
%21:i64 = or %19, %20
%22:i64 = xor %5, %21
%23:i64 = add %13, %22
%24:i64 = shl %22, 17:i64
%25:i64 = lshr %22, 47:i64
%26:i64 = or %24, %25
%27:i64 = xor %23, %26 (hasExternalUses)
%28:i64 = add %18, %27 (hasExternalUses)
%29:i64 = shl %28, 32:i64
%30:i64 = lshr %28, 32:i64
%31:i64 = or %29, %30
%32:i64 = shl %23, 32:i64
%33:i64 = lshr %23, 32:i64
%34:i64 = or %32, %33
%35:i64 = shl %17, 21:i64
%36:i64 = lshr %17, 43:i64
%37:i64 = or %35, %36
%38:i64 = xor %18, %37
%39:i64 = add %34, %38 (hasExternalUses)
%40:i64 = shl %38, 16:i64
%41:i64 = lshr %38, 48:i64
%42:i64 = or %40, %41
%43:i64 = xor %39, %42
%44:i64 = add %31, %43 (hasExternalUses)
%45:i64 = shl %43, 21:i64
%46:i64 = lshr %43, 43:i64
%47:i64 = or %45, %46
%48:i64 = xor %44, %47 (hasExternalUses)
%49:i64 = phi %0, %2, %48
infer %49


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -5189062626892031143
1 th attempt: second query is SAT-- constant doesn't work
ConstantSynthesis: solver returns error on first query

--------------------------------
guess 1

%0:i64 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1 (hasExternalUses)
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29 (hasExternalUses)
%31:i64 = add %18, %30 (hasExternalUses)
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35 (hasExternalUses)
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39 (hasExternalUses)
%41:i64 = add %31, %40 (hasExternalUses)
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43 (hasExternalUses)
%45:i64 = phi %0, %2, %44
infer %45


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i64 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1 (hasExternalUses)
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29 (hasExternalUses)
%31:i64 = add %18, %30 (hasExternalUses)
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35 (hasExternalUses)
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40 (hasExternalUses)
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44 (hasExternalUses)
%46:i64 = phi %0, %2, %45
infer %46


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i64 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 8317987319222330741:i64, %1 (hasExternalUses)
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = add %4, %5
%7:i64 = shl %6, 32:i64
%8:i64 = lshr %6, 32:i64
%9:i64 = or %7, %8
%10:i64 = var
%11:i64 = var
%12:i64 = xor %11, %3
%13:i64 = add %10, %12
%14:i64 = shl %12, 16:i64
%15:i64 = lshr %12, 48:i64
%16:i64 = or %14, %15
%17:i64 = xor %13, %16
%18:i64 = add %9, %17
%19:i64 = shl %5, 13:i64
%20:i64 = lshr %5, 51:i64
%21:i64 = or %19, %20
%22:i64 = xor %6, %21
%23:i64 = add %13, %22
%24:i64 = shl %22, 17:i64
%25:i64 = lshr %22, 47:i64
%26:i64 = or %24, %25
%27:i64 = xor %23, %26 (hasExternalUses)
%28:i64 = add %18, %27 (hasExternalUses)
%29:i64 = shl %28, 32:i64
%30:i64 = lshr %28, 32:i64
%31:i64 = or %29, %30
%32:i64 = shl %23, 32:i64
%33:i64 = lshr %23, 32:i64
%34:i64 = or %32, %33
%35:i64 = shl %17, 21:i64
%36:i64 = lshr %17, 43:i64
%37:i64 = or %35, %36
%38:i64 = xor %18, %37
%39:i64 = add %34, %38 (hasExternalUses)
%40:i64 = shl %38, 16:i64
%41:i64 = lshr %38, 48:i64
%42:i64 = or %40, %41
%43:i64 = xor %39, %42 (hasExternalUses)
%44:i64 = add %31, %43 (hasExternalUses)
%45:i64 = xor %3, %44 (hasExternalUses)
%46:i64 = phi %0, %2, %45
infer %46


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
ConstantSynthesis: solver returns error on first query

--------------------------------
guess 1

%0:i64 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i64 = zext %0
infer %1


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 255
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i64 = zext %0
%2:i64 = shlnw %1, 48:i64
infer %2


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 18014398509481984
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i64 = zext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i32 = trunc %0 (hasExternalUses)
%2:i32 = and 7:i32, %1
pc %2 7:i32
%3:i64 = shl %0, 56:i64 (hasExternalUses)
%4:i8 = var
%5:i64 = zext %4
%6:i64 = shlnw %5, 48:i64
%7:i64 = or %3, %6
infer %7


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 504403158265495552
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 522417556774977536
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var
%1:i64 = shl %0, 56:i64

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var
%1:i64 = zext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i64 = zext %0
%2:i64 = shlnw %1, 48:i64

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 7 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64 (hasExternalUses)
%3:i8 = var
%4:i64 = zext %3
%5:i64 = shlnw %4, 48:i64
%6:i64 = or %2, %5
%7:i64 = phi %0, %2, %6
infer %7


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 9007199254740992
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var
%1:i64 = shl %0, 56:i64

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var
%1:i64 = zext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i64 = zext %0
%2:i64 = shlnw %1, 48:i64

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i64 = zext %0
%2:i64 = shlnw %1, 40:i64
infer %2


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 70368744177664
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i64 = zext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3:i8 = var
%4:i64 = zext %3
%5:i64 = shlnw %4, 48:i64
%6:i64 = or %2, %5
%7:i64 = phi %0, %2, %6
%8:i8 = var
%9:i64 = zext %8
%10:i64 = shlnw %9, 40:i64
%11:i64 = or %7, %10
infer %11


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -9223372036854775808
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var
%1:i64 = shl %0, 56:i64

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var
%1:i64 = zext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i64 = zext %0
%2:i64 = shlnw %1, 40:i64

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i8 = var
%1:i64 = zext %0
%2:i64 = shlnw %1, 48:i64

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i64 = var
%1:i64 = shl %0, 56:i64 (hasExternalUses)
%2:i8 = var
%3:i64 = zext %2
%4:i64 = shlnw %3, 48:i64
%5:i64 = or %1, %4

Cost = 3
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64 (hasExternalUses)
%3:i8 = var
%4:i64 = zext %3
%5:i64 = shlnw %4, 48:i64
%6:i64 = or %2, %5
%7:i64 = phi %0, %2, %6

Cost = 4
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64 (hasExternalUses)
%3 = block 2
%4:i8 = var
%5:i64 = zext %4
%6:i64 = shlnw %5, 48:i64
%7:i64 = or %2, %6
%8:i64 = phi %3, %2, %7
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 40:i64
%12:i64 = or %8, %11
%13:i64 = phi %0, %2, %12
infer %13


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -9151595917793558528
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var
%1:i64 = shl %0, 56:i64

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var
%1:i64 = zext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i64 = zext %0
%2:i64 = shlnw %1, 40:i64

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i64 = var
%1:i64 = shl %0, 56:i64 (hasExternalUses)
%2:i8 = var
%3:i64 = zext %2
%4:i64 = shlnw %3, 48:i64
%5:i64 = or %1, %4

Cost = 3
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64 (hasExternalUses)
%3:i8 = var
%4:i64 = zext %3
%5:i64 = shlnw %4, 48:i64
%6:i64 = or %2, %5
%7:i64 = phi %0, %2, %6

Cost = 4
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 7 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i64 = zext %0
%2:i64 = shlnw %1, 32:i64
infer %2


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 274877906944
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i64 = zext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4:i8 = var
%5:i64 = zext %4
%6:i64 = shlnw %5, 48:i64
%7:i64 = or %2, %6
%8:i64 = phi %3, %2, %7
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 40:i64
%12:i64 = or %8, %11
%13:i64 = phi %0, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 32:i64
%17:i64 = or %13, %16
infer %17


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 280375465082880
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var
%1:i64 = shl %0, 56:i64

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var
%1:i64 = zext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i64 = zext %0
%2:i64 = shlnw %1, 32:i64

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64 (hasExternalUses)
%3:i8 = var
%4:i64 = zext %3
%5:i64 = shlnw %4, 48:i64
%6:i64 = or %2, %5
%7:i64 = phi %0, %2, %6

Cost = 4
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3:i8 = var
%4:i64 = zext %3
%5:i64 = shlnw %4, 48:i64
%6:i64 = or %2, %5
%7:i64 = phi %0, %2, %6
%8:i8 = var
%9:i64 = zext %8
%10:i64 = shlnw %9, 40:i64
%11:i64 = or %7, %10

Cost = 8
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64 (hasExternalUses)
%3 = block 2
%4:i8 = var
%5:i64 = zext %4
%6:i64 = shlnw %5, 48:i64
%7:i64 = or %2, %6
%8:i64 = phi %3, %2, %7
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 40:i64
%12:i64 = or %8, %11
%13:i64 = phi %0, %2, %12

Cost = 8
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64 (hasExternalUses)
%3 = block 2
%4 = block 2
%5:i8 = var
%6:i64 = zext %5
%7:i64 = shlnw %6, 48:i64
%8:i64 = or %2, %7
%9:i64 = phi %4, %2, %8
%10:i8 = var
%11:i64 = zext %10
%12:i64 = shlnw %11, 40:i64
%13:i64 = or %9, %12
%14:i64 = phi %3, %2, %13
%15:i8 = var
%16:i64 = zext %15
%17:i64 = shlnw %16, 32:i64
%18:i64 = or %14, %17
%19:i64 = phi %0, %2, %18
infer %19


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -9223372036854775808
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var
%1:i64 = shl %0, 56:i64

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var
%1:i64 = zext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i64 = zext %0
%2:i64 = shlnw %1, 32:i64

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3:i8 = var
%4:i64 = zext %3
%5:i64 = shlnw %4, 48:i64
%6:i64 = or %2, %5
%7:i64 = phi %0, %2, %6
%8:i8 = var
%9:i64 = zext %8
%10:i64 = shlnw %9, 40:i64
%11:i64 = or %7, %10

Cost = 8
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64 (hasExternalUses)
%3 = block 2
%4:i8 = var
%5:i64 = zext %4
%6:i64 = shlnw %5, 48:i64
%7:i64 = or %2, %6
%8:i64 = phi %3, %2, %7
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 40:i64
%12:i64 = or %8, %11
%13:i64 = phi %0, %2, %12

Cost = 8
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 7 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i64 = zext %0
%2:i64 = shlnw %1, 24:i64
infer %2


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i64 = zext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5:i8 = var
%6:i64 = zext %5
%7:i64 = shlnw %6, 48:i64
%8:i64 = or %2, %7
%9:i64 = phi %4, %2, %8
%10:i8 = var
%11:i64 = zext %10
%12:i64 = shlnw %11, 40:i64
%13:i64 = or %9, %12
%14:i64 = phi %3, %2, %13
%15:i8 = var
%16:i64 = zext %15
%17:i64 = shlnw %16, 32:i64
%18:i64 = or %14, %17
%19:i64 = phi %0, %2, %18
%20:i8 = var
%21:i64 = zext %20
%22:i64 = shlnw %21, 24:i64
%23:i64 = or %19, %22
infer %23


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 281470681743360
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var
%1:i64 = shl %0, 56:i64

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var
%1:i64 = zext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i64 = zext %0
%2:i64 = shlnw %1, 24:i64

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64 (hasExternalUses)
%3 = block 2
%4:i8 = var
%5:i64 = zext %4
%6:i64 = shlnw %5, 48:i64
%7:i64 = or %2, %6
%8:i64 = phi %3, %2, %7
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 40:i64
%12:i64 = or %8, %11
%13:i64 = phi %0, %2, %12

Cost = 8
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4:i8 = var
%5:i64 = zext %4
%6:i64 = shlnw %5, 48:i64
%7:i64 = or %2, %6
%8:i64 = phi %3, %2, %7
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 40:i64
%12:i64 = or %8, %11
%13:i64 = phi %0, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 32:i64
%17:i64 = or %13, %16

Cost = 12
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64 (hasExternalUses)
%3 = block 2
%4 = block 2
%5:i8 = var
%6:i64 = zext %5
%7:i64 = shlnw %6, 48:i64
%8:i64 = or %2, %7
%9:i64 = phi %4, %2, %8
%10:i8 = var
%11:i64 = zext %10
%12:i64 = shlnw %11, 40:i64
%13:i64 = or %9, %12
%14:i64 = phi %3, %2, %13
%15:i8 = var
%16:i64 = zext %15
%17:i64 = shlnw %16, 32:i64
%18:i64 = or %14, %17
%19:i64 = phi %0, %2, %18

Cost = 12
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64 (hasExternalUses)
%3 = block 2
%4 = block 2
%5 = block 2
%6:i8 = var
%7:i64 = zext %6
%8:i64 = shlnw %7, 48:i64
%9:i64 = or %2, %8
%10:i64 = phi %5, %2, %9
%11:i8 = var
%12:i64 = zext %11
%13:i64 = shlnw %12, 40:i64
%14:i64 = or %10, %13
%15:i64 = phi %4, %2, %14
%16:i8 = var
%17:i64 = zext %16
%18:i64 = shlnw %17, 32:i64
%19:i64 = or %15, %18
%20:i64 = phi %3, %2, %19
%21:i8 = var
%22:i64 = zext %21
%23:i64 = shlnw %22, 24:i64
%24:i64 = or %20, %23
%25:i64 = phi %0, %2, %24
infer %25


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -9223090566173032448
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var
%1:i64 = shl %0, 56:i64

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var
%1:i64 = zext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i64 = zext %0
%2:i64 = shlnw %1, 24:i64

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4:i8 = var
%5:i64 = zext %4
%6:i64 = shlnw %5, 48:i64
%7:i64 = or %2, %6
%8:i64 = phi %3, %2, %7
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 40:i64
%12:i64 = or %8, %11
%13:i64 = phi %0, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 32:i64
%17:i64 = or %13, %16

Cost = 12
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64 (hasExternalUses)
%3 = block 2
%4 = block 2
%5:i8 = var
%6:i64 = zext %5
%7:i64 = shlnw %6, 48:i64
%8:i64 = or %2, %7
%9:i64 = phi %4, %2, %8
%10:i8 = var
%11:i64 = zext %10
%12:i64 = shlnw %11, 40:i64
%13:i64 = or %9, %12
%14:i64 = phi %3, %2, %13
%15:i8 = var
%16:i64 = zext %15
%17:i64 = shlnw %16, 32:i64
%18:i64 = or %14, %17
%19:i64 = phi %0, %2, %18

Cost = 12
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 7 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i64 = zext %0
%2:i64 = shlnw %1, 16:i64
infer %2


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4194304
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i64 = zext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6:i8 = var
%7:i64 = zext %6
%8:i64 = shlnw %7, 48:i64
%9:i64 = or %2, %8
%10:i64 = phi %5, %2, %9
%11:i8 = var
%12:i64 = zext %11
%13:i64 = shlnw %12, 40:i64
%14:i64 = or %10, %13
%15:i64 = phi %4, %2, %14
%16:i8 = var
%17:i64 = zext %16
%18:i64 = shlnw %17, 32:i64
%19:i64 = or %15, %18
%20:i64 = phi %3, %2, %19
%21:i8 = var
%22:i64 = zext %21
%23:i64 = shlnw %22, 24:i64
%24:i64 = or %20, %23
%25:i64 = phi %0, %2, %24
%26:i8 = var
%27:i64 = zext %26
%28:i64 = shlnw %27, 16:i64
%29:i64 = or %25, %28
infer %29


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4278190080
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var
%1:i64 = shl %0, 56:i64

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var
%1:i64 = zext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i64 = zext %0
%2:i64 = shlnw %1, 16:i64

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64 (hasExternalUses)
%3 = block 2
%4 = block 2
%5:i8 = var
%6:i64 = zext %5
%7:i64 = shlnw %6, 48:i64
%8:i64 = or %2, %7
%9:i64 = phi %4, %2, %8
%10:i8 = var
%11:i64 = zext %10
%12:i64 = shlnw %11, 40:i64
%13:i64 = or %9, %12
%14:i64 = phi %3, %2, %13
%15:i8 = var
%16:i64 = zext %15
%17:i64 = shlnw %16, 32:i64
%18:i64 = or %14, %17
%19:i64 = phi %0, %2, %18

Cost = 12
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5:i8 = var
%6:i64 = zext %5
%7:i64 = shlnw %6, 48:i64
%8:i64 = or %2, %7
%9:i64 = phi %4, %2, %8
%10:i8 = var
%11:i64 = zext %10
%12:i64 = shlnw %11, 40:i64
%13:i64 = or %9, %12
%14:i64 = phi %3, %2, %13
%15:i8 = var
%16:i64 = zext %15
%17:i64 = shlnw %16, 32:i64
%18:i64 = or %14, %17
%19:i64 = phi %0, %2, %18
%20:i8 = var
%21:i64 = zext %20
%22:i64 = shlnw %21, 24:i64
%23:i64 = or %19, %22

Cost = 16
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64 (hasExternalUses)
%3 = block 2
%4 = block 2
%5 = block 2
%6:i8 = var
%7:i64 = zext %6
%8:i64 = shlnw %7, 48:i64
%9:i64 = or %2, %8
%10:i64 = phi %5, %2, %9
%11:i8 = var
%12:i64 = zext %11
%13:i64 = shlnw %12, 40:i64
%14:i64 = or %10, %13
%15:i64 = phi %4, %2, %14
%16:i8 = var
%17:i64 = zext %16
%18:i64 = shlnw %17, 32:i64
%19:i64 = or %15, %18
%20:i64 = phi %3, %2, %19
%21:i8 = var
%22:i64 = zext %21
%23:i64 = shlnw %22, 24:i64
%24:i64 = or %20, %23
%25:i64 = phi %0, %2, %24

Cost = 16
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64 (hasExternalUses)
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7:i8 = var
%8:i64 = zext %7
%9:i64 = shlnw %8, 48:i64
%10:i64 = or %2, %9
%11:i64 = phi %6, %2, %10
%12:i8 = var
%13:i64 = zext %12
%14:i64 = shlnw %13, 40:i64
%15:i64 = or %11, %14
%16:i64 = phi %5, %2, %15
%17:i8 = var
%18:i64 = zext %17
%19:i64 = shlnw %18, 32:i64
%20:i64 = or %16, %19
%21:i64 = phi %4, %2, %20
%22:i8 = var
%23:i64 = zext %22
%24:i64 = shlnw %23, 24:i64
%25:i64 = or %21, %24
%26:i64 = phi %3, %2, %25
%27:i8 = var
%28:i64 = zext %27
%29:i64 = shlnw %28, 16:i64
%30:i64 = or %26, %29
%31:i64 = phi %0, %2, %30
infer %31


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -9223370937359925248
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var
%1:i64 = shl %0, 56:i64

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var
%1:i64 = zext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i64 = zext %0
%2:i64 = shlnw %1, 16:i64

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5:i8 = var
%6:i64 = zext %5
%7:i64 = shlnw %6, 48:i64
%8:i64 = or %2, %7
%9:i64 = phi %4, %2, %8
%10:i8 = var
%11:i64 = zext %10
%12:i64 = shlnw %11, 40:i64
%13:i64 = or %9, %12
%14:i64 = phi %3, %2, %13
%15:i8 = var
%16:i64 = zext %15
%17:i64 = shlnw %16, 32:i64
%18:i64 = or %14, %17
%19:i64 = phi %0, %2, %18
%20:i8 = var
%21:i64 = zext %20
%22:i64 = shlnw %21, 24:i64
%23:i64 = or %19, %22

Cost = 16
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64 (hasExternalUses)
%3 = block 2
%4 = block 2
%5 = block 2
%6:i8 = var
%7:i64 = zext %6
%8:i64 = shlnw %7, 48:i64
%9:i64 = or %2, %8
%10:i64 = phi %5, %2, %9
%11:i8 = var
%12:i64 = zext %11
%13:i64 = shlnw %12, 40:i64
%14:i64 = or %10, %13
%15:i64 = phi %4, %2, %14
%16:i8 = var
%17:i64 = zext %16
%18:i64 = shlnw %17, 32:i64
%19:i64 = or %15, %18
%20:i64 = phi %3, %2, %19
%21:i8 = var
%22:i64 = zext %21
%23:i64 = shlnw %22, 24:i64
%24:i64 = or %20, %23
%25:i64 = phi %0, %2, %24

Cost = 16
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 7 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i64 = zext %0
%2:i64 = shlnw %1, 8:i64
infer %2


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 16384
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i64 = zext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7:i8 = var
%8:i64 = zext %7
%9:i64 = shlnw %8, 48:i64
%10:i64 = or %2, %9
%11:i64 = phi %6, %2, %10
%12:i8 = var
%13:i64 = zext %12
%14:i64 = shlnw %13, 40:i64
%15:i64 = or %11, %14
%16:i64 = phi %5, %2, %15
%17:i8 = var
%18:i64 = zext %17
%19:i64 = shlnw %18, 32:i64
%20:i64 = or %16, %19
%21:i64 = phi %4, %2, %20
%22:i8 = var
%23:i64 = zext %22
%24:i64 = shlnw %23, 24:i64
%25:i64 = or %21, %24
%26:i64 = phi %3, %2, %25
%27:i8 = var
%28:i64 = zext %27
%29:i64 = shlnw %28, 16:i64
%30:i64 = or %26, %29
%31:i64 = phi %0, %2, %30
%32:i8 = var
%33:i64 = zext %32
%34:i64 = shlnw %33, 8:i64
%35:i64 = or %31, %34
infer %35


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1099511562240
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var
%1:i64 = shl %0, 56:i64

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var
%1:i64 = zext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i64 = zext %0
%2:i64 = shlnw %1, 8:i64

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64 (hasExternalUses)
%3 = block 2
%4 = block 2
%5 = block 2
%6:i8 = var
%7:i64 = zext %6
%8:i64 = shlnw %7, 48:i64
%9:i64 = or %2, %8
%10:i64 = phi %5, %2, %9
%11:i8 = var
%12:i64 = zext %11
%13:i64 = shlnw %12, 40:i64
%14:i64 = or %10, %13
%15:i64 = phi %4, %2, %14
%16:i8 = var
%17:i64 = zext %16
%18:i64 = shlnw %17, 32:i64
%19:i64 = or %15, %18
%20:i64 = phi %3, %2, %19
%21:i8 = var
%22:i64 = zext %21
%23:i64 = shlnw %22, 24:i64
%24:i64 = or %20, %23
%25:i64 = phi %0, %2, %24

Cost = 16
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6:i8 = var
%7:i64 = zext %6
%8:i64 = shlnw %7, 48:i64
%9:i64 = or %2, %8
%10:i64 = phi %5, %2, %9
%11:i8 = var
%12:i64 = zext %11
%13:i64 = shlnw %12, 40:i64
%14:i64 = or %10, %13
%15:i64 = phi %4, %2, %14
%16:i8 = var
%17:i64 = zext %16
%18:i64 = shlnw %17, 32:i64
%19:i64 = or %15, %18
%20:i64 = phi %3, %2, %19
%21:i8 = var
%22:i64 = zext %21
%23:i64 = shlnw %22, 24:i64
%24:i64 = or %20, %23
%25:i64 = phi %0, %2, %24
%26:i8 = var
%27:i64 = zext %26
%28:i64 = shlnw %27, 16:i64
%29:i64 = or %25, %28

Cost = 20
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64 (hasExternalUses)
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7:i8 = var
%8:i64 = zext %7
%9:i64 = shlnw %8, 48:i64
%10:i64 = or %2, %9
%11:i64 = phi %6, %2, %10
%12:i8 = var
%13:i64 = zext %12
%14:i64 = shlnw %13, 40:i64
%15:i64 = or %11, %14
%16:i64 = phi %5, %2, %15
%17:i8 = var
%18:i64 = zext %17
%19:i64 = shlnw %18, 32:i64
%20:i64 = or %16, %19
%21:i64 = phi %4, %2, %20
%22:i8 = var
%23:i64 = zext %22
%24:i64 = shlnw %23, 24:i64
%25:i64 = or %21, %24
%26:i64 = phi %3, %2, %25
%27:i8 = var
%28:i64 = zext %27
%29:i64 = shlnw %28, 16:i64
%30:i64 = or %26, %29
%31:i64 = phi %0, %2, %30

Cost = 20
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64 (hasExternalUses)
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8:i8 = var
%9:i64 = zext %8
%10:i64 = shlnw %9, 48:i64
%11:i64 = or %2, %10
%12:i64 = phi %7, %2, %11
%13:i8 = var
%14:i64 = zext %13
%15:i64 = shlnw %14, 40:i64
%16:i64 = or %12, %15
%17:i64 = phi %6, %2, %16
%18:i8 = var
%19:i64 = zext %18
%20:i64 = shlnw %19, 32:i64
%21:i64 = or %17, %20
%22:i64 = phi %5, %2, %21
%23:i8 = var
%24:i64 = zext %23
%25:i64 = shlnw %24, 24:i64
%26:i64 = or %22, %25
%27:i64 = phi %4, %2, %26
%28:i8 = var
%29:i64 = zext %28
%30:i64 = shlnw %29, 16:i64
%31:i64 = or %27, %30
%32:i64 = phi %3, %2, %31
%33:i8 = var
%34:i64 = zext %33
%35:i64 = shlnw %34, 8:i64
%36:i64 = or %32, %35
%37:i64 = phi %0, %2, %36
infer %37


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
ConstantSynthesis: solver returns error on first query

--------------------------------
guess 1

%0:i64 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 7 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8:i8 = var
%9:i64 = zext %8
%10:i64 = shlnw %9, 48:i64
%11:i64 = or %2, %10
%12:i64 = phi %7, %2, %11
%13:i8 = var
%14:i64 = zext %13
%15:i64 = shlnw %14, 40:i64
%16:i64 = or %12, %15
%17:i64 = phi %6, %2, %16
%18:i8 = var
%19:i64 = zext %18
%20:i64 = shlnw %19, 32:i64
%21:i64 = or %17, %20
%22:i64 = phi %5, %2, %21
%23:i8 = var
%24:i64 = zext %23
%25:i64 = shlnw %24, 24:i64
%26:i64 = or %22, %25
%27:i64 = phi %4, %2, %26
%28:i8 = var
%29:i64 = zext %28
%30:i64 = shlnw %29, 16:i64
%31:i64 = or %27, %30
%32:i64 = phi %3, %2, %31
%33:i8 = var
%34:i64 = zext %33
%35:i64 = shlnw %34, 8:i64
%36:i64 = or %32, %35
%37:i64 = phi %0, %2, %36
%38:i8 = var
%39:i64 = zext %38
%40:i64 = or %37, %39
infer %40


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 36028659580010240
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i64 = zext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i64 = var
%1:i64 = shl %0, 56:i64

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64 (hasExternalUses)
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7:i8 = var
%8:i64 = zext %7
%9:i64 = shlnw %8, 48:i64
%10:i64 = or %2, %9
%11:i64 = phi %6, %2, %10
%12:i8 = var
%13:i64 = zext %12
%14:i64 = shlnw %13, 40:i64
%15:i64 = or %11, %14
%16:i64 = phi %5, %2, %15
%17:i8 = var
%18:i64 = zext %17
%19:i64 = shlnw %18, 32:i64
%20:i64 = or %16, %19
%21:i64 = phi %4, %2, %20
%22:i8 = var
%23:i64 = zext %22
%24:i64 = shlnw %23, 24:i64
%25:i64 = or %21, %24
%26:i64 = phi %3, %2, %25
%27:i8 = var
%28:i64 = zext %27
%29:i64 = shlnw %28, 16:i64
%30:i64 = or %26, %29
%31:i64 = phi %0, %2, %30

Cost = 20
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7:i8 = var
%8:i64 = zext %7
%9:i64 = shlnw %8, 48:i64
%10:i64 = or %2, %9
%11:i64 = phi %6, %2, %10
%12:i8 = var
%13:i64 = zext %12
%14:i64 = shlnw %13, 40:i64
%15:i64 = or %11, %14
%16:i64 = phi %5, %2, %15
%17:i8 = var
%18:i64 = zext %17
%19:i64 = shlnw %18, 32:i64
%20:i64 = or %16, %19
%21:i64 = phi %4, %2, %20
%22:i8 = var
%23:i64 = zext %22
%24:i64 = shlnw %23, 24:i64
%25:i64 = or %21, %24
%26:i64 = phi %3, %2, %25
%27:i8 = var
%28:i64 = zext %27
%29:i64 = shlnw %28, 16:i64
%30:i64 = or %26, %29
%31:i64 = phi %0, %2, %30
%32:i8 = var
%33:i64 = zext %32
%34:i64 = shlnw %33, 8:i64
%35:i64 = or %31, %34

Cost = 24
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64 (hasExternalUses)
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8:i8 = var
%9:i64 = zext %8
%10:i64 = shlnw %9, 48:i64
%11:i64 = or %2, %10
%12:i64 = phi %7, %2, %11
%13:i8 = var
%14:i64 = zext %13
%15:i64 = shlnw %14, 40:i64
%16:i64 = or %12, %15
%17:i64 = phi %6, %2, %16
%18:i8 = var
%19:i64 = zext %18
%20:i64 = shlnw %19, 32:i64
%21:i64 = or %17, %20
%22:i64 = phi %5, %2, %21
%23:i8 = var
%24:i64 = zext %23
%25:i64 = shlnw %24, 24:i64
%26:i64 = or %22, %25
%27:i64 = phi %4, %2, %26
%28:i8 = var
%29:i64 = zext %28
%30:i64 = shlnw %29, 16:i64
%31:i64 = or %27, %30
%32:i64 = phi %3, %2, %31
%33:i8 = var
%34:i64 = zext %33
%35:i64 = shlnw %34, 8:i64
%36:i64 = or %32, %35
%37:i64 = phi %0, %2, %36

Cost = 24
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 7 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64 (hasExternalUses)
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
infer %42


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -9223372032559808768
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var
%1:i64 = shl %0, 56:i64

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var
%1:i64 = zext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7:i8 = var
%8:i64 = zext %7
%9:i64 = shlnw %8, 48:i64
%10:i64 = or %2, %9
%11:i64 = phi %6, %2, %10
%12:i8 = var
%13:i64 = zext %12
%14:i64 = shlnw %13, 40:i64
%15:i64 = or %11, %14
%16:i64 = phi %5, %2, %15
%17:i8 = var
%18:i64 = zext %17
%19:i64 = shlnw %18, 32:i64
%20:i64 = or %16, %19
%21:i64 = phi %4, %2, %20
%22:i8 = var
%23:i64 = zext %22
%24:i64 = shlnw %23, 24:i64
%25:i64 = or %21, %24
%26:i64 = phi %3, %2, %25
%27:i8 = var
%28:i64 = zext %27
%29:i64 = shlnw %28, 16:i64
%30:i64 = or %26, %29
%31:i64 = phi %0, %2, %30
%32:i8 = var
%33:i64 = zext %32
%34:i64 = shlnw %33, 8:i64
%35:i64 = or %31, %34

Cost = 24
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64 (hasExternalUses)
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8:i8 = var
%9:i64 = zext %8
%10:i64 = shlnw %9, 48:i64
%11:i64 = or %2, %10
%12:i64 = phi %7, %2, %11
%13:i8 = var
%14:i64 = zext %13
%15:i64 = shlnw %14, 40:i64
%16:i64 = or %12, %15
%17:i64 = phi %6, %2, %16
%18:i8 = var
%19:i64 = zext %18
%20:i64 = shlnw %19, 32:i64
%21:i64 = or %17, %20
%22:i64 = phi %5, %2, %21
%23:i8 = var
%24:i64 = zext %23
%25:i64 = shlnw %24, 24:i64
%26:i64 = or %22, %25
%27:i64 = phi %4, %2, %26
%28:i8 = var
%29:i64 = zext %28
%30:i64 = shlnw %29, 16:i64
%31:i64 = or %27, %30
%32:i64 = phi %3, %2, %31
%33:i8 = var
%34:i64 = zext %33
%35:i64 = shlnw %34, 8:i64
%36:i64 = or %32, %35
%37:i64 = phi %0, %2, %36

Cost = 24
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 6 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 8387220255154660723:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = add %3, %4
%6:i64 = shl %5, 32:i64
%7:i64 = lshr %5, 32:i64
%8:i64 = or %6, %7
%9:i64 = var
%10:i64 = var
%11:i64 = var
%12:i64 = xor %10, %11
%13:i64 = add %9, %12
%14:i64 = shl %12, 16:i64
%15:i64 = lshr %12, 48:i64
%16:i64 = or %14, %15
%17:i64 = xor %13, %16
%18:i64 = add %8, %17
%19:i64 = shl %4, 13:i64
%20:i64 = lshr %4, 51:i64
%21:i64 = or %19, %20
%22:i64 = xor %5, %21
%23:i64 = add %13, %22
%24:i64 = shl %22, 17:i64
%25:i64 = lshr %22, 47:i64
%26:i64 = or %24, %25
%27:i64 = xor %23, %26
%28:i64 = add %18, %27
%29:i64 = shl %28, 32:i64
%30:i64 = lshr %28, 32:i64
%31:i64 = or %29, %30
%32:i64 = shl %23, 32:i64
%33:i64 = lshr %23, 32:i64
%34:i64 = or %32, %33
%35:i64 = shl %17, 21:i64
%36:i64 = lshr %17, 43:i64
%37:i64 = or %35, %36
%38:i64 = xor %18, %37
%39:i64 = add %34, %38
%40:i64 = shl %38, 16:i64
%41:i64 = lshr %38, 48:i64
%42:i64 = or %40, %41
%43:i64 = xor %39, %42
%44:i64 = add %31, %43
%45:i64 = shl %43, 21:i64
%46:i64 = lshr %43, 43:i64
%47:i64 = or %45, %46
%48:i64 = xor %44, %47
%49:i64 = phi %0, %2, %48
%50 = block 2
%51:i64 = var
%52:i64 = shl %51, 56:i64
%53 = block 2
%54 = block 2
%55 = block 2
%56 = block 2
%57 = block 2
%58 = block 2
%59:i8 = var
%60:i64 = zext %59
%61:i64 = shlnw %60, 48:i64
%62:i64 = or %52, %61
%63:i64 = phi %58, %52, %62
%64:i8 = var
%65:i64 = zext %64
%66:i64 = shlnw %65, 40:i64
%67:i64 = or %63, %66
%68:i64 = phi %57, %52, %67
%69:i8 = var
%70:i64 = zext %69
%71:i64 = shlnw %70, 32:i64
%72:i64 = or %68, %71
%73:i64 = phi %56, %52, %72
%74:i8 = var
%75:i64 = zext %74
%76:i64 = shlnw %75, 24:i64
%77:i64 = or %73, %76
%78:i64 = phi %55, %52, %77
%79:i8 = var
%80:i64 = zext %79
%81:i64 = shlnw %80, 16:i64
%82:i64 = or %78, %81
%83:i64 = phi %54, %52, %82
%84:i8 = var
%85:i64 = zext %84
%86:i64 = shlnw %85, 8:i64
%87:i64 = or %83, %86
%88:i64 = phi %53, %52, %87
%89:i8 = var
%90:i64 = zext %89
%91:i64 = or %88, %90
%92:i64 = phi %50, %52, %91
%93:i64 = xor %49, %92
infer %93


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
ConstantSynthesis: solver returns error on first query

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var
%1:i64 = xor 8387220255154660723:i64, %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58
infer %59


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i64 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = shl %46, 13:i64
infer %47


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
ConstantSynthesis: solver returns error on first query

--------------------------------
guess 1

%0:i64 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = lshr %46, 51:i64
infer %47


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i64 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = shl %46, 13:i64
%48:i64 = lshr %46, 51:i64
%49:i64 = or %47, %48
infer %49


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i64 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58 (hasExternalUses)
%60:i64 = shl %46, 13:i64
%61:i64 = lshr %46, 51:i64
%62:i64 = or %60, %61
%63:i64 = xor %59, %62
infer %63


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i64 = var
%1:i64 = xor 7237128888997146499:i64, %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 7 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58 (hasExternalUses)
%60:i64 = shl %59, 32:i64
infer %60


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58 (hasExternalUses)
%60:i64 = lshr %59, 32:i64
infer %60


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58 (hasExternalUses)
%60:i64 = shl %59, 32:i64
%61:i64 = lshr %59, 32:i64
%62:i64 = or %60, %61
infer %62


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i64 = var
%1:i64 = xor 7237128888997146499:i64, %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103 (hasExternalUses)
%105:i64 = add %45, %104
infer %105


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i64 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 6 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 8387220255154660723:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = add %3, %4
%6:i64 = shl %5, 32:i64
%7:i64 = lshr %5, 32:i64
%8:i64 = or %6, %7
%9:i64 = var
%10:i64 = var
%11:i64 = var
%12:i64 = xor %10, %11
%13:i64 = add %9, %12
%14:i64 = shl %12, 16:i64
%15:i64 = lshr %12, 48:i64
%16:i64 = or %14, %15
%17:i64 = xor %13, %16
%18:i64 = add %8, %17
%19:i64 = shl %4, 13:i64
%20:i64 = lshr %4, 51:i64
%21:i64 = or %19, %20
%22:i64 = xor %5, %21
%23:i64 = add %13, %22
%24:i64 = shl %22, 17:i64
%25:i64 = lshr %22, 47:i64
%26:i64 = or %24, %25
%27:i64 = xor %23, %26
%28:i64 = add %18, %27
%29:i64 = shl %28, 32:i64
%30:i64 = lshr %28, 32:i64
%31:i64 = or %29, %30
%32:i64 = shl %23, 32:i64
%33:i64 = lshr %23, 32:i64
%34:i64 = or %32, %33
%35:i64 = shl %17, 21:i64
%36:i64 = lshr %17, 43:i64
%37:i64 = or %35, %36
%38:i64 = xor %18, %37
%39:i64 = add %34, %38
%40:i64 = shl %38, 16:i64
%41:i64 = lshr %38, 48:i64
%42:i64 = or %40, %41
%43:i64 = xor %39, %42
%44:i64 = add %31, %43
%45:i64 = shl %43, 21:i64
%46:i64 = lshr %43, 43:i64
%47:i64 = or %45, %46
%48:i64 = xor %44, %47
%49:i64 = phi %0, %2, %48
%50 = block 2
%51:i64 = var
%52:i64 = shl %51, 56:i64
%53 = block 2
%54 = block 2
%55 = block 2
%56 = block 2
%57 = block 2
%58 = block 2
%59:i8 = var
%60:i64 = zext %59
%61:i64 = shlnw %60, 48:i64
%62:i64 = or %52, %61
%63:i64 = phi %58, %52, %62
%64:i8 = var
%65:i64 = zext %64
%66:i64 = shlnw %65, 40:i64
%67:i64 = or %63, %66
%68:i64 = phi %57, %52, %67
%69:i8 = var
%70:i64 = zext %69
%71:i64 = shlnw %70, 32:i64
%72:i64 = or %68, %71
%73:i64 = phi %56, %52, %72
%74:i8 = var
%75:i64 = zext %74
%76:i64 = shlnw %75, 24:i64
%77:i64 = or %73, %76
%78:i64 = phi %55, %52, %77
%79:i8 = var
%80:i64 = zext %79
%81:i64 = shlnw %80, 16:i64
%82:i64 = or %78, %81
%83:i64 = phi %54, %52, %82
%84:i8 = var
%85:i64 = zext %84
%86:i64 = shlnw %85, 8:i64
%87:i64 = or %83, %86
%88:i64 = phi %53, %52, %87
%89:i8 = var
%90:i64 = zext %89
%91:i64 = or %88, %90
%92:i64 = phi %50, %52, %91
%93:i64 = xor %49, %92 (hasExternalUses)
%94:i64 = shl %93, 16:i64
infer %94


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2305843009180139520
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 8387220255154660723:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = add %3, %4
%6:i64 = shl %5, 32:i64
%7:i64 = lshr %5, 32:i64
%8:i64 = or %6, %7
%9:i64 = var
%10:i64 = var
%11:i64 = var
%12:i64 = xor %10, %11
%13:i64 = add %9, %12
%14:i64 = shl %12, 16:i64
%15:i64 = lshr %12, 48:i64
%16:i64 = or %14, %15
%17:i64 = xor %13, %16
%18:i64 = add %8, %17
%19:i64 = shl %4, 13:i64
%20:i64 = lshr %4, 51:i64
%21:i64 = or %19, %20
%22:i64 = xor %5, %21
%23:i64 = add %13, %22
%24:i64 = shl %22, 17:i64
%25:i64 = lshr %22, 47:i64
%26:i64 = or %24, %25
%27:i64 = xor %23, %26
%28:i64 = add %18, %27
%29:i64 = shl %28, 32:i64
%30:i64 = lshr %28, 32:i64
%31:i64 = or %29, %30
%32:i64 = shl %23, 32:i64
%33:i64 = lshr %23, 32:i64
%34:i64 = or %32, %33
%35:i64 = shl %17, 21:i64
%36:i64 = lshr %17, 43:i64
%37:i64 = or %35, %36
%38:i64 = xor %18, %37
%39:i64 = add %34, %38
%40:i64 = shl %38, 16:i64
%41:i64 = lshr %38, 48:i64
%42:i64 = or %40, %41
%43:i64 = xor %39, %42
%44:i64 = add %31, %43
%45:i64 = shl %43, 21:i64
%46:i64 = lshr %43, 43:i64
%47:i64 = or %45, %46
%48:i64 = xor %44, %47
%49:i64 = phi %0, %2, %48
%50 = block 2
%51:i64 = var
%52:i64 = shl %51, 56:i64
%53 = block 2
%54 = block 2
%55 = block 2
%56 = block 2
%57 = block 2
%58 = block 2
%59:i8 = var
%60:i64 = zext %59
%61:i64 = shlnw %60, 48:i64
%62:i64 = or %52, %61
%63:i64 = phi %58, %52, %62
%64:i8 = var
%65:i64 = zext %64
%66:i64 = shlnw %65, 40:i64
%67:i64 = or %63, %66
%68:i64 = phi %57, %52, %67
%69:i8 = var
%70:i64 = zext %69
%71:i64 = shlnw %70, 32:i64
%72:i64 = or %68, %71
%73:i64 = phi %56, %52, %72
%74:i8 = var
%75:i64 = zext %74
%76:i64 = shlnw %75, 24:i64
%77:i64 = or %73, %76
%78:i64 = phi %55, %52, %77
%79:i8 = var
%80:i64 = zext %79
%81:i64 = shlnw %80, 16:i64
%82:i64 = or %78, %81
%83:i64 = phi %54, %52, %82
%84:i8 = var
%85:i64 = zext %84
%86:i64 = shlnw %85, 8:i64
%87:i64 = or %83, %86
%88:i64 = phi %53, %52, %87
%89:i8 = var
%90:i64 = zext %89
%91:i64 = or %88, %90
%92:i64 = phi %50, %52, %91
%93:i64 = xor %49, %92 (hasExternalUses)
%94:i64 = lshr %93, 48:i64
infer %94


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 37467
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 8387220255154660723:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = add %3, %4
%6:i64 = shl %5, 32:i64
%7:i64 = lshr %5, 32:i64
%8:i64 = or %6, %7
%9:i64 = var
%10:i64 = var
%11:i64 = var
%12:i64 = xor %10, %11
%13:i64 = add %9, %12
%14:i64 = shl %12, 16:i64
%15:i64 = lshr %12, 48:i64
%16:i64 = or %14, %15
%17:i64 = xor %13, %16
%18:i64 = add %8, %17
%19:i64 = shl %4, 13:i64
%20:i64 = lshr %4, 51:i64
%21:i64 = or %19, %20
%22:i64 = xor %5, %21
%23:i64 = add %13, %22
%24:i64 = shl %22, 17:i64
%25:i64 = lshr %22, 47:i64
%26:i64 = or %24, %25
%27:i64 = xor %23, %26
%28:i64 = add %18, %27
%29:i64 = shl %28, 32:i64
%30:i64 = lshr %28, 32:i64
%31:i64 = or %29, %30
%32:i64 = shl %23, 32:i64
%33:i64 = lshr %23, 32:i64
%34:i64 = or %32, %33
%35:i64 = shl %17, 21:i64
%36:i64 = lshr %17, 43:i64
%37:i64 = or %35, %36
%38:i64 = xor %18, %37
%39:i64 = add %34, %38
%40:i64 = shl %38, 16:i64
%41:i64 = lshr %38, 48:i64
%42:i64 = or %40, %41
%43:i64 = xor %39, %42
%44:i64 = add %31, %43
%45:i64 = shl %43, 21:i64
%46:i64 = lshr %43, 43:i64
%47:i64 = or %45, %46
%48:i64 = xor %44, %47
%49:i64 = phi %0, %2, %48
%50 = block 2
%51:i64 = var
%52:i64 = shl %51, 56:i64
%53 = block 2
%54 = block 2
%55 = block 2
%56 = block 2
%57 = block 2
%58 = block 2
%59:i8 = var
%60:i64 = zext %59
%61:i64 = shlnw %60, 48:i64
%62:i64 = or %52, %61
%63:i64 = phi %58, %52, %62
%64:i8 = var
%65:i64 = zext %64
%66:i64 = shlnw %65, 40:i64
%67:i64 = or %63, %66
%68:i64 = phi %57, %52, %67
%69:i8 = var
%70:i64 = zext %69
%71:i64 = shlnw %70, 32:i64
%72:i64 = or %68, %71
%73:i64 = phi %56, %52, %72
%74:i8 = var
%75:i64 = zext %74
%76:i64 = shlnw %75, 24:i64
%77:i64 = or %73, %76
%78:i64 = phi %55, %52, %77
%79:i8 = var
%80:i64 = zext %79
%81:i64 = shlnw %80, 16:i64
%82:i64 = or %78, %81
%83:i64 = phi %54, %52, %82
%84:i8 = var
%85:i64 = zext %84
%86:i64 = shlnw %85, 8:i64
%87:i64 = or %83, %86
%88:i64 = phi %53, %52, %87
%89:i8 = var
%90:i64 = zext %89
%91:i64 = or %88, %90
%92:i64 = phi %50, %52, %91
%93:i64 = xor %49, %92 (hasExternalUses)
%94:i64 = shl %93, 16:i64
%95:i64 = lshr %93, 48:i64
%96:i64 = or %94, %95
infer %96


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i64 = var
%1:i64 = xor 8387220255154660723:i64, %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104 (hasExternalUses)
%106:i64 = shl %104, 16:i64
%107:i64 = lshr %104, 48:i64
%108:i64 = or %106, %107
%109:i64 = xor %105, %108
infer %109


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i64 = var
%1:i64 = xor 7816392313619706465:i64, %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 7 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58 (hasExternalUses)
%60:i64 = shl %59, 32:i64
%61:i64 = lshr %59, 32:i64
%62:i64 = or %60, %61
%63:i64 = xor 7816392313619706465:i64, %47
%64:i64 = shl %41, 32:i64
%65:i64 = lshr %41, 32:i64
%66:i64 = or %64, %65
%67:i64 = phi %0, %63, %66
%68:i64 = xor 8387220255154660723:i64, %1
%69:i64 = shl %55, 21:i64
%70:i64 = lshr %55, 43:i64
%71:i64 = or %69, %70
%72:i64 = xor %56, %71
%73:i64 = phi %0, %68, %72
%74 = block 2
%75:i64 = var
%76:i64 = shl %75, 56:i64
%77 = block 2
%78 = block 2
%79 = block 2
%80 = block 2
%81 = block 2
%82 = block 2
%83:i8 = var
%84:i64 = zext %83
%85:i64 = shlnw %84, 48:i64
%86:i64 = or %76, %85
%87:i64 = phi %82, %76, %86
%88:i8 = var
%89:i64 = zext %88
%90:i64 = shlnw %89, 40:i64
%91:i64 = or %87, %90
%92:i64 = phi %81, %76, %91
%93:i8 = var
%94:i64 = zext %93
%95:i64 = shlnw %94, 32:i64
%96:i64 = or %92, %95
%97:i64 = phi %80, %76, %96
%98:i8 = var
%99:i64 = zext %98
%100:i64 = shlnw %99, 24:i64
%101:i64 = or %97, %100
%102:i64 = phi %79, %76, %101
%103:i8 = var
%104:i64 = zext %103
%105:i64 = shlnw %104, 16:i64
%106:i64 = or %102, %105
%107:i64 = phi %78, %76, %106
%108:i8 = var
%109:i64 = zext %108
%110:i64 = shlnw %109, 8:i64
%111:i64 = or %107, %110
%112:i64 = phi %77, %76, %111
%113:i8 = var
%114:i64 = zext %113
%115:i64 = or %112, %114
%116:i64 = phi %74, %76, %115
%117:i64 = xor %73, %116
%118:i64 = add %67, %117 (hasExternalUses)
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121 (hasExternalUses)
%123:i64 = add %62, %122
infer %123


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104 (hasExternalUses)
%106:i64 = shl %104, 16:i64
%107:i64 = lshr %104, 48:i64
%108:i64 = or %106, %107
%109:i64 = xor %105, %108 (hasExternalUses)
%110:i64 = shl %109, 21:i64
infer %110


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104 (hasExternalUses)
%106:i64 = shl %104, 16:i64
%107:i64 = lshr %104, 48:i64
%108:i64 = or %106, %107
%109:i64 = xor %105, %108 (hasExternalUses)
%110:i64 = lshr %109, 43:i64
infer %110


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104 (hasExternalUses)
%106:i64 = shl %104, 16:i64
%107:i64 = lshr %104, 48:i64
%108:i64 = or %106, %107
%109:i64 = xor %105, %108 (hasExternalUses)
%110:i64 = shl %109, 21:i64
%111:i64 = lshr %109, 43:i64
%112:i64 = or %110, %111
infer %112


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58 (hasExternalUses)
%60:i64 = shl %59, 32:i64
%61:i64 = lshr %59, 32:i64
%62:i64 = or %60, %61
%63:i64 = xor 7816392313619706465:i64, %47
%64:i64 = shl %41, 32:i64
%65:i64 = lshr %41, 32:i64
%66:i64 = or %64, %65
%67:i64 = phi %0, %63, %66
%68:i64 = xor 8387220255154660723:i64, %1
%69:i64 = shl %55, 21:i64
%70:i64 = lshr %55, 43:i64
%71:i64 = or %69, %70
%72:i64 = xor %56, %71
%73:i64 = phi %0, %68, %72
%74 = block 2
%75:i64 = var
%76:i64 = shl %75, 56:i64
%77 = block 2
%78 = block 2
%79 = block 2
%80 = block 2
%81 = block 2
%82 = block 2
%83:i8 = var
%84:i64 = zext %83
%85:i64 = shlnw %84, 48:i64
%86:i64 = or %76, %85
%87:i64 = phi %82, %76, %86
%88:i8 = var
%89:i64 = zext %88
%90:i64 = shlnw %89, 40:i64
%91:i64 = or %87, %90
%92:i64 = phi %81, %76, %91
%93:i8 = var
%94:i64 = zext %93
%95:i64 = shlnw %94, 32:i64
%96:i64 = or %92, %95
%97:i64 = phi %80, %76, %96
%98:i8 = var
%99:i64 = zext %98
%100:i64 = shlnw %99, 24:i64
%101:i64 = or %97, %100
%102:i64 = phi %79, %76, %101
%103:i8 = var
%104:i64 = zext %103
%105:i64 = shlnw %104, 16:i64
%106:i64 = or %102, %105
%107:i64 = phi %78, %76, %106
%108:i8 = var
%109:i64 = zext %108
%110:i64 = shlnw %109, 8:i64
%111:i64 = or %107, %110
%112:i64 = phi %77, %76, %111
%113:i8 = var
%114:i64 = zext %113
%115:i64 = or %112, %114
%116:i64 = phi %74, %76, %115
%117:i64 = xor %73, %116
%118:i64 = add %67, %117 (hasExternalUses)
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %62, %122 (hasExternalUses)
%124:i64 = shl %122, 21:i64
%125:i64 = lshr %122, 43:i64
%126:i64 = or %124, %125
%127:i64 = xor %123, %126
infer %127


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58 (hasExternalUses)
%60:i64 = shl %59, 32:i64

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103 (hasExternalUses)
%105:i64 = add %45, %104 (hasExternalUses)
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114 (hasExternalUses)
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118 (hasExternalUses)
%120:i64 = add %105, %119
infer %120


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58 (hasExternalUses)
%60:i64 = shl %46, 13:i64
%61:i64 = lshr %46, 51:i64
%62:i64 = or %60, %61
%63:i64 = xor %59, %62 (hasExternalUses)
%64:i64 = shl %63, 17:i64
infer %64


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58 (hasExternalUses)
%60:i64 = shl %46, 13:i64
%61:i64 = lshr %46, 51:i64
%62:i64 = or %60, %61
%63:i64 = xor %59, %62 (hasExternalUses)
%64:i64 = lshr %63, 47:i64
infer %64


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58 (hasExternalUses)
%60:i64 = shl %46, 13:i64
%61:i64 = lshr %46, 51:i64
%62:i64 = or %60, %61
%63:i64 = xor %59, %62 (hasExternalUses)
%64:i64 = shl %63, 17:i64
%65:i64 = lshr %63, 47:i64
%66:i64 = or %64, %65
infer %66


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103 (hasExternalUses)
%105:i64 = add %45, %104 (hasExternalUses)
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114 (hasExternalUses)
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119 (hasExternalUses)
%121:i64 = shl %119, 17:i64
%122:i64 = lshr %119, 47:i64
%123:i64 = or %121, %122
%124:i64 = xor %120, %123
infer %124


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103 (hasExternalUses)
%105:i64 = add %45, %104 (hasExternalUses)
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114 (hasExternalUses)
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118 (hasExternalUses)
%120:i64 = add %105, %119 (hasExternalUses)
%121:i64 = shl %120, 32:i64
infer %121


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103 (hasExternalUses)
%105:i64 = add %45, %104 (hasExternalUses)
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114 (hasExternalUses)
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118 (hasExternalUses)
%120:i64 = add %105, %119 (hasExternalUses)
%121:i64 = lshr %120, 32:i64
infer %121


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103 (hasExternalUses)
%105:i64 = add %45, %104 (hasExternalUses)
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114 (hasExternalUses)
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118 (hasExternalUses)
%120:i64 = add %105, %119 (hasExternalUses)
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
infer %123


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58
%60:i64 = shl %59, 32:i64
%61:i64 = lshr %59, 32:i64
%62:i64 = or %60, %61
%63:i64 = xor 7816392313619706465:i64, %47
%64:i64 = shl %41, 32:i64
%65:i64 = lshr %41, 32:i64
%66:i64 = or %64, %65
%67:i64 = phi %0, %63, %66
%68:i64 = xor 8387220255154660723:i64, %1
%69:i64 = shl %55, 21:i64
%70:i64 = lshr %55, 43:i64
%71:i64 = or %69, %70
%72:i64 = xor %56, %71
%73:i64 = phi %0, %68, %72
%74 = block 2
%75:i64 = var
%76:i64 = shl %75, 56:i64
%77 = block 2
%78 = block 2
%79 = block 2
%80 = block 2
%81 = block 2
%82 = block 2
%83:i8 = var
%84:i64 = zext %83
%85:i64 = shlnw %84, 48:i64
%86:i64 = or %76, %85
%87:i64 = phi %82, %76, %86
%88:i8 = var
%89:i64 = zext %88
%90:i64 = shlnw %89, 40:i64
%91:i64 = or %87, %90
%92:i64 = phi %81, %76, %91
%93:i8 = var
%94:i64 = zext %93
%95:i64 = shlnw %94, 32:i64
%96:i64 = or %92, %95
%97:i64 = phi %80, %76, %96
%98:i8 = var
%99:i64 = zext %98
%100:i64 = shlnw %99, 24:i64
%101:i64 = or %97, %100
%102:i64 = phi %79, %76, %101
%103:i8 = var
%104:i64 = zext %103
%105:i64 = shlnw %104, 16:i64
%106:i64 = or %102, %105
%107:i64 = phi %78, %76, %106
%108:i8 = var
%109:i64 = zext %108
%110:i64 = shlnw %109, 8:i64
%111:i64 = or %107, %110
%112:i64 = phi %77, %76, %111
%113:i8 = var
%114:i64 = zext %113
%115:i64 = or %112, %114
%116:i64 = phi %74, %76, %115
%117:i64 = xor %73, %116
%118:i64 = add %67, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121 (hasExternalUses)
%123:i64 = add %62, %122 (hasExternalUses)
%124:i64 = shl %46, 13:i64
%125:i64 = lshr %46, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %59, %126
%128:i64 = add %118, %127 (hasExternalUses)
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131 (hasExternalUses)
%133:i64 = add %123, %132
infer %133


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103 (hasExternalUses)
%105:i64 = add %45, %104 (hasExternalUses)
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114 (hasExternalUses)
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119 (hasExternalUses)
%121:i64 = shl %119, 17:i64
%122:i64 = lshr %119, 47:i64
%123:i64 = or %121, %122
%124:i64 = xor %120, %123 (hasExternalUses)
%125:i64 = shl %124, 13:i64
infer %125


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103 (hasExternalUses)
%105:i64 = add %45, %104 (hasExternalUses)
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114 (hasExternalUses)
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119 (hasExternalUses)
%121:i64 = shl %119, 17:i64
%122:i64 = lshr %119, 47:i64
%123:i64 = or %121, %122
%124:i64 = xor %120, %123 (hasExternalUses)
%125:i64 = lshr %124, 51:i64
infer %125


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103 (hasExternalUses)
%105:i64 = add %45, %104 (hasExternalUses)
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114 (hasExternalUses)
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119 (hasExternalUses)
%121:i64 = shl %119, 17:i64
%122:i64 = lshr %119, 47:i64
%123:i64 = or %121, %122
%124:i64 = xor %120, %123 (hasExternalUses)
%125:i64 = shl %124, 13:i64
%126:i64 = lshr %124, 51:i64
%127:i64 = or %125, %126
infer %127


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58
%60:i64 = shl %59, 32:i64
%61:i64 = lshr %59, 32:i64
%62:i64 = or %60, %61
%63:i64 = xor 7816392313619706465:i64, %47
%64:i64 = shl %41, 32:i64
%65:i64 = lshr %41, 32:i64
%66:i64 = or %64, %65
%67:i64 = phi %0, %63, %66
%68:i64 = xor 8387220255154660723:i64, %1
%69:i64 = shl %55, 21:i64
%70:i64 = lshr %55, 43:i64
%71:i64 = or %69, %70
%72:i64 = xor %56, %71
%73:i64 = phi %0, %68, %72
%74 = block 2
%75:i64 = var
%76:i64 = shl %75, 56:i64
%77 = block 2
%78 = block 2
%79 = block 2
%80 = block 2
%81 = block 2
%82 = block 2
%83:i8 = var
%84:i64 = zext %83
%85:i64 = shlnw %84, 48:i64
%86:i64 = or %76, %85
%87:i64 = phi %82, %76, %86
%88:i8 = var
%89:i64 = zext %88
%90:i64 = shlnw %89, 40:i64
%91:i64 = or %87, %90
%92:i64 = phi %81, %76, %91
%93:i8 = var
%94:i64 = zext %93
%95:i64 = shlnw %94, 32:i64
%96:i64 = or %92, %95
%97:i64 = phi %80, %76, %96
%98:i8 = var
%99:i64 = zext %98
%100:i64 = shlnw %99, 24:i64
%101:i64 = or %97, %100
%102:i64 = phi %79, %76, %101
%103:i8 = var
%104:i64 = zext %103
%105:i64 = shlnw %104, 16:i64
%106:i64 = or %102, %105
%107:i64 = phi %78, %76, %106
%108:i8 = var
%109:i64 = zext %108
%110:i64 = shlnw %109, 8:i64
%111:i64 = or %107, %110
%112:i64 = phi %77, %76, %111
%113:i8 = var
%114:i64 = zext %113
%115:i64 = or %112, %114
%116:i64 = phi %74, %76, %115
%117:i64 = xor %73, %116
%118:i64 = add %67, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121 (hasExternalUses)
%123:i64 = add %62, %122 (hasExternalUses)
%124:i64 = shl %46, 13:i64
%125:i64 = lshr %46, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %59, %126
%128:i64 = add %118, %127 (hasExternalUses)
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132 (hasExternalUses)
%134:i64 = shl %132, 13:i64
%135:i64 = lshr %132, 51:i64
%136:i64 = or %134, %135
%137:i64 = xor %133, %136
infer %137


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58 (hasExternalUses)
%60:i64 = shl %59, 32:i64
%61:i64 = lshr %59, 32:i64
%62:i64 = or %60, %61

Cost = 3
verification query failed!
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58
%60:i64 = shl %59, 32:i64
%61:i64 = lshr %59, 32:i64
%62:i64 = or %60, %61
%63:i64 = xor 7816392313619706465:i64, %47
%64:i64 = shl %41, 32:i64
%65:i64 = lshr %41, 32:i64
%66:i64 = or %64, %65
%67:i64 = phi %0, %63, %66
%68:i64 = xor 8387220255154660723:i64, %1
%69:i64 = shl %55, 21:i64
%70:i64 = lshr %55, 43:i64
%71:i64 = or %69, %70
%72:i64 = xor %56, %71
%73:i64 = phi %0, %68, %72
%74 = block 2
%75:i64 = var
%76:i64 = shl %75, 56:i64
%77 = block 2
%78 = block 2
%79 = block 2
%80 = block 2
%81 = block 2
%82 = block 2
%83:i8 = var
%84:i64 = zext %83
%85:i64 = shlnw %84, 48:i64
%86:i64 = or %76, %85
%87:i64 = phi %82, %76, %86
%88:i8 = var
%89:i64 = zext %88
%90:i64 = shlnw %89, 40:i64
%91:i64 = or %87, %90
%92:i64 = phi %81, %76, %91
%93:i8 = var
%94:i64 = zext %93
%95:i64 = shlnw %94, 32:i64
%96:i64 = or %92, %95
%97:i64 = phi %80, %76, %96
%98:i8 = var
%99:i64 = zext %98
%100:i64 = shlnw %99, 24:i64
%101:i64 = or %97, %100
%102:i64 = phi %79, %76, %101
%103:i8 = var
%104:i64 = zext %103
%105:i64 = shlnw %104, 16:i64
%106:i64 = or %102, %105
%107:i64 = phi %78, %76, %106
%108:i8 = var
%109:i64 = zext %108
%110:i64 = shlnw %109, 8:i64
%111:i64 = or %107, %110
%112:i64 = phi %77, %76, %111
%113:i8 = var
%114:i64 = zext %113
%115:i64 = or %112, %114
%116:i64 = phi %74, %76, %115
%117:i64 = xor %73, %116
%118:i64 = add %67, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121 (hasExternalUses)
%123:i64 = add %62, %122 (hasExternalUses)
%124:i64 = shl %46, 13:i64
%125:i64 = lshr %46, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %59, %126
%128:i64 = add %118, %127 (hasExternalUses)
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131 (hasExternalUses)
%133:i64 = add %123, %132 (hasExternalUses)
%134:i64 = shl %133, 32:i64
infer %134


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58
%60:i64 = shl %59, 32:i64
%61:i64 = lshr %59, 32:i64
%62:i64 = or %60, %61
%63:i64 = xor 7816392313619706465:i64, %47
%64:i64 = shl %41, 32:i64
%65:i64 = lshr %41, 32:i64
%66:i64 = or %64, %65
%67:i64 = phi %0, %63, %66
%68:i64 = xor 8387220255154660723:i64, %1
%69:i64 = shl %55, 21:i64
%70:i64 = lshr %55, 43:i64
%71:i64 = or %69, %70
%72:i64 = xor %56, %71
%73:i64 = phi %0, %68, %72
%74 = block 2
%75:i64 = var
%76:i64 = shl %75, 56:i64
%77 = block 2
%78 = block 2
%79 = block 2
%80 = block 2
%81 = block 2
%82 = block 2
%83:i8 = var
%84:i64 = zext %83
%85:i64 = shlnw %84, 48:i64
%86:i64 = or %76, %85
%87:i64 = phi %82, %76, %86
%88:i8 = var
%89:i64 = zext %88
%90:i64 = shlnw %89, 40:i64
%91:i64 = or %87, %90
%92:i64 = phi %81, %76, %91
%93:i8 = var
%94:i64 = zext %93
%95:i64 = shlnw %94, 32:i64
%96:i64 = or %92, %95
%97:i64 = phi %80, %76, %96
%98:i8 = var
%99:i64 = zext %98
%100:i64 = shlnw %99, 24:i64
%101:i64 = or %97, %100
%102:i64 = phi %79, %76, %101
%103:i8 = var
%104:i64 = zext %103
%105:i64 = shlnw %104, 16:i64
%106:i64 = or %102, %105
%107:i64 = phi %78, %76, %106
%108:i8 = var
%109:i64 = zext %108
%110:i64 = shlnw %109, 8:i64
%111:i64 = or %107, %110
%112:i64 = phi %77, %76, %111
%113:i8 = var
%114:i64 = zext %113
%115:i64 = or %112, %114
%116:i64 = phi %74, %76, %115
%117:i64 = xor %73, %116
%118:i64 = add %67, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121 (hasExternalUses)
%123:i64 = add %62, %122 (hasExternalUses)
%124:i64 = shl %46, 13:i64
%125:i64 = lshr %46, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %59, %126
%128:i64 = add %118, %127 (hasExternalUses)
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131 (hasExternalUses)
%133:i64 = add %123, %132 (hasExternalUses)
%134:i64 = lshr %133, 32:i64
infer %134


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58
%60:i64 = shl %59, 32:i64
%61:i64 = lshr %59, 32:i64
%62:i64 = or %60, %61
%63:i64 = xor 7816392313619706465:i64, %47
%64:i64 = shl %41, 32:i64
%65:i64 = lshr %41, 32:i64
%66:i64 = or %64, %65
%67:i64 = phi %0, %63, %66
%68:i64 = xor 8387220255154660723:i64, %1
%69:i64 = shl %55, 21:i64
%70:i64 = lshr %55, 43:i64
%71:i64 = or %69, %70
%72:i64 = xor %56, %71
%73:i64 = phi %0, %68, %72
%74 = block 2
%75:i64 = var
%76:i64 = shl %75, 56:i64
%77 = block 2
%78 = block 2
%79 = block 2
%80 = block 2
%81 = block 2
%82 = block 2
%83:i8 = var
%84:i64 = zext %83
%85:i64 = shlnw %84, 48:i64
%86:i64 = or %76, %85
%87:i64 = phi %82, %76, %86
%88:i8 = var
%89:i64 = zext %88
%90:i64 = shlnw %89, 40:i64
%91:i64 = or %87, %90
%92:i64 = phi %81, %76, %91
%93:i8 = var
%94:i64 = zext %93
%95:i64 = shlnw %94, 32:i64
%96:i64 = or %92, %95
%97:i64 = phi %80, %76, %96
%98:i8 = var
%99:i64 = zext %98
%100:i64 = shlnw %99, 24:i64
%101:i64 = or %97, %100
%102:i64 = phi %79, %76, %101
%103:i8 = var
%104:i64 = zext %103
%105:i64 = shlnw %104, 16:i64
%106:i64 = or %102, %105
%107:i64 = phi %78, %76, %106
%108:i8 = var
%109:i64 = zext %108
%110:i64 = shlnw %109, 8:i64
%111:i64 = or %107, %110
%112:i64 = phi %77, %76, %111
%113:i8 = var
%114:i64 = zext %113
%115:i64 = or %112, %114
%116:i64 = phi %74, %76, %115
%117:i64 = xor %73, %116
%118:i64 = add %67, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121 (hasExternalUses)
%123:i64 = add %62, %122 (hasExternalUses)
%124:i64 = shl %46, 13:i64
%125:i64 = lshr %46, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %59, %126
%128:i64 = add %118, %127 (hasExternalUses)
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131 (hasExternalUses)
%133:i64 = add %123, %132 (hasExternalUses)
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
infer %136


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118 (hasExternalUses)
%120:i64 = add %105, %119 (hasExternalUses)
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130 (hasExternalUses)
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134 (hasExternalUses)
%136:i64 = add %123, %135
infer %136


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58 (hasExternalUses)
%60:i64 = shl %59, 32:i64
%61:i64 = lshr %59, 32:i64
%62:i64 = or %60, %61
%63:i64 = xor 7816392313619706465:i64, %47
%64:i64 = shl %41, 32:i64
%65:i64 = lshr %41, 32:i64
%66:i64 = or %64, %65
%67:i64 = phi %0, %63, %66
%68:i64 = xor 8387220255154660723:i64, %1
%69:i64 = shl %55, 21:i64
%70:i64 = lshr %55, 43:i64
%71:i64 = or %69, %70
%72:i64 = xor %56, %71
%73:i64 = phi %0, %68, %72
%74 = block 2
%75:i64 = var
%76:i64 = shl %75, 56:i64
%77 = block 2
%78 = block 2
%79 = block 2
%80 = block 2
%81 = block 2
%82 = block 2
%83:i8 = var
%84:i64 = zext %83
%85:i64 = shlnw %84, 48:i64
%86:i64 = or %76, %85
%87:i64 = phi %82, %76, %86
%88:i8 = var
%89:i64 = zext %88
%90:i64 = shlnw %89, 40:i64
%91:i64 = or %87, %90
%92:i64 = phi %81, %76, %91
%93:i8 = var
%94:i64 = zext %93
%95:i64 = shlnw %94, 32:i64
%96:i64 = or %92, %95
%97:i64 = phi %80, %76, %96
%98:i8 = var
%99:i64 = zext %98
%100:i64 = shlnw %99, 24:i64
%101:i64 = or %97, %100
%102:i64 = phi %79, %76, %101
%103:i8 = var
%104:i64 = zext %103
%105:i64 = shlnw %104, 16:i64
%106:i64 = or %102, %105
%107:i64 = phi %78, %76, %106
%108:i8 = var
%109:i64 = zext %108
%110:i64 = shlnw %109, 8:i64
%111:i64 = or %107, %110
%112:i64 = phi %77, %76, %111
%113:i8 = var
%114:i64 = zext %113
%115:i64 = or %112, %114
%116:i64 = phi %74, %76, %115
%117:i64 = xor %73, %116
%118:i64 = add %67, %117 (hasExternalUses)
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %62, %122 (hasExternalUses)
%124:i64 = shl %122, 21:i64
%125:i64 = lshr %122, 43:i64
%126:i64 = or %124, %125
%127:i64 = xor %123, %126 (hasExternalUses)
%128:i64 = shl %127, 16:i64
infer %128


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58 (hasExternalUses)
%60:i64 = shl %59, 32:i64
%61:i64 = lshr %59, 32:i64
%62:i64 = or %60, %61
%63:i64 = xor 7816392313619706465:i64, %47
%64:i64 = shl %41, 32:i64
%65:i64 = lshr %41, 32:i64
%66:i64 = or %64, %65
%67:i64 = phi %0, %63, %66
%68:i64 = xor 8387220255154660723:i64, %1
%69:i64 = shl %55, 21:i64
%70:i64 = lshr %55, 43:i64
%71:i64 = or %69, %70
%72:i64 = xor %56, %71
%73:i64 = phi %0, %68, %72
%74 = block 2
%75:i64 = var
%76:i64 = shl %75, 56:i64
%77 = block 2
%78 = block 2
%79 = block 2
%80 = block 2
%81 = block 2
%82 = block 2
%83:i8 = var
%84:i64 = zext %83
%85:i64 = shlnw %84, 48:i64
%86:i64 = or %76, %85
%87:i64 = phi %82, %76, %86
%88:i8 = var
%89:i64 = zext %88
%90:i64 = shlnw %89, 40:i64
%91:i64 = or %87, %90
%92:i64 = phi %81, %76, %91
%93:i8 = var
%94:i64 = zext %93
%95:i64 = shlnw %94, 32:i64
%96:i64 = or %92, %95
%97:i64 = phi %80, %76, %96
%98:i8 = var
%99:i64 = zext %98
%100:i64 = shlnw %99, 24:i64
%101:i64 = or %97, %100
%102:i64 = phi %79, %76, %101
%103:i8 = var
%104:i64 = zext %103
%105:i64 = shlnw %104, 16:i64
%106:i64 = or %102, %105
%107:i64 = phi %78, %76, %106
%108:i8 = var
%109:i64 = zext %108
%110:i64 = shlnw %109, 8:i64
%111:i64 = or %107, %110
%112:i64 = phi %77, %76, %111
%113:i8 = var
%114:i64 = zext %113
%115:i64 = or %112, %114
%116:i64 = phi %74, %76, %115
%117:i64 = xor %73, %116
%118:i64 = add %67, %117 (hasExternalUses)
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %62, %122 (hasExternalUses)
%124:i64 = shl %122, 21:i64
%125:i64 = lshr %122, 43:i64
%126:i64 = or %124, %125
%127:i64 = xor %123, %126 (hasExternalUses)
%128:i64 = lshr %127, 48:i64
infer %128


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58 (hasExternalUses)
%60:i64 = shl %59, 32:i64
%61:i64 = lshr %59, 32:i64
%62:i64 = or %60, %61
%63:i64 = xor 7816392313619706465:i64, %47
%64:i64 = shl %41, 32:i64
%65:i64 = lshr %41, 32:i64
%66:i64 = or %64, %65
%67:i64 = phi %0, %63, %66
%68:i64 = xor 8387220255154660723:i64, %1
%69:i64 = shl %55, 21:i64
%70:i64 = lshr %55, 43:i64
%71:i64 = or %69, %70
%72:i64 = xor %56, %71
%73:i64 = phi %0, %68, %72
%74 = block 2
%75:i64 = var
%76:i64 = shl %75, 56:i64
%77 = block 2
%78 = block 2
%79 = block 2
%80 = block 2
%81 = block 2
%82 = block 2
%83:i8 = var
%84:i64 = zext %83
%85:i64 = shlnw %84, 48:i64
%86:i64 = or %76, %85
%87:i64 = phi %82, %76, %86
%88:i8 = var
%89:i64 = zext %88
%90:i64 = shlnw %89, 40:i64
%91:i64 = or %87, %90
%92:i64 = phi %81, %76, %91
%93:i8 = var
%94:i64 = zext %93
%95:i64 = shlnw %94, 32:i64
%96:i64 = or %92, %95
%97:i64 = phi %80, %76, %96
%98:i8 = var
%99:i64 = zext %98
%100:i64 = shlnw %99, 24:i64
%101:i64 = or %97, %100
%102:i64 = phi %79, %76, %101
%103:i8 = var
%104:i64 = zext %103
%105:i64 = shlnw %104, 16:i64
%106:i64 = or %102, %105
%107:i64 = phi %78, %76, %106
%108:i8 = var
%109:i64 = zext %108
%110:i64 = shlnw %109, 8:i64
%111:i64 = or %107, %110
%112:i64 = phi %77, %76, %111
%113:i8 = var
%114:i64 = zext %113
%115:i64 = or %112, %114
%116:i64 = phi %74, %76, %115
%117:i64 = xor %73, %116
%118:i64 = add %67, %117 (hasExternalUses)
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %62, %122 (hasExternalUses)
%124:i64 = shl %122, 21:i64
%125:i64 = lshr %122, 43:i64
%126:i64 = or %124, %125
%127:i64 = xor %123, %126 (hasExternalUses)
%128:i64 = shl %127, 16:i64
%129:i64 = lshr %127, 48:i64
%130:i64 = or %128, %129
infer %130


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118 (hasExternalUses)
%120:i64 = add %105, %119 (hasExternalUses)
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130 (hasExternalUses)
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135 (hasExternalUses)
%137:i64 = shl %135, 16:i64
%138:i64 = lshr %135, 48:i64
%139:i64 = or %137, %138
%140:i64 = xor %136, %139
infer %140


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104 (hasExternalUses)
%106:i64 = shl %104, 16:i64
%107:i64 = lshr %104, 48:i64
%108:i64 = or %106, %107
%109:i64 = xor %105, %108 (hasExternalUses)
%110:i64 = shl %109, 21:i64
%111:i64 = lshr %109, 43:i64
%112:i64 = or %110, %111

Cost = 3
verification query failed!
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58
%60:i64 = shl %59, 32:i64
%61:i64 = lshr %59, 32:i64
%62:i64 = or %60, %61
%63:i64 = xor 7816392313619706465:i64, %47
%64:i64 = shl %41, 32:i64
%65:i64 = lshr %41, 32:i64
%66:i64 = or %64, %65
%67:i64 = phi %0, %63, %66
%68:i64 = xor 8387220255154660723:i64, %1
%69:i64 = shl %55, 21:i64
%70:i64 = lshr %55, 43:i64
%71:i64 = or %69, %70
%72:i64 = xor %56, %71
%73:i64 = phi %0, %68, %72
%74 = block 2
%75:i64 = var
%76:i64 = shl %75, 56:i64
%77 = block 2
%78 = block 2
%79 = block 2
%80 = block 2
%81 = block 2
%82 = block 2
%83:i8 = var
%84:i64 = zext %83
%85:i64 = shlnw %84, 48:i64
%86:i64 = or %76, %85
%87:i64 = phi %82, %76, %86
%88:i8 = var
%89:i64 = zext %88
%90:i64 = shlnw %89, 40:i64
%91:i64 = or %87, %90
%92:i64 = phi %81, %76, %91
%93:i8 = var
%94:i64 = zext %93
%95:i64 = shlnw %94, 32:i64
%96:i64 = or %92, %95
%97:i64 = phi %80, %76, %96
%98:i8 = var
%99:i64 = zext %98
%100:i64 = shlnw %99, 24:i64
%101:i64 = or %97, %100
%102:i64 = phi %79, %76, %101
%103:i8 = var
%104:i64 = zext %103
%105:i64 = shlnw %104, 16:i64
%106:i64 = or %102, %105
%107:i64 = phi %78, %76, %106
%108:i8 = var
%109:i64 = zext %108
%110:i64 = shlnw %109, 8:i64
%111:i64 = or %107, %110
%112:i64 = phi %77, %76, %111
%113:i8 = var
%114:i64 = zext %113
%115:i64 = or %112, %114
%116:i64 = phi %74, %76, %115
%117:i64 = xor %73, %116
%118:i64 = add %67, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %62, %122
%124:i64 = shl %46, 13:i64
%125:i64 = lshr %46, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %59, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131 (hasExternalUses)
%133:i64 = add %123, %132 (hasExternalUses)
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143 (hasExternalUses)
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147 (hasExternalUses)
%149:i64 = add %136, %148
infer %149


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118 (hasExternalUses)
%120:i64 = add %105, %119 (hasExternalUses)
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130 (hasExternalUses)
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135 (hasExternalUses)
%137:i64 = shl %135, 16:i64
%138:i64 = lshr %135, 48:i64
%139:i64 = or %137, %138
%140:i64 = xor %136, %139 (hasExternalUses)
%141:i64 = shl %140, 21:i64
infer %141


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118 (hasExternalUses)
%120:i64 = add %105, %119 (hasExternalUses)
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130 (hasExternalUses)
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135 (hasExternalUses)
%137:i64 = shl %135, 16:i64
%138:i64 = lshr %135, 48:i64
%139:i64 = or %137, %138
%140:i64 = xor %136, %139 (hasExternalUses)
%141:i64 = lshr %140, 43:i64
infer %141


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118 (hasExternalUses)
%120:i64 = add %105, %119 (hasExternalUses)
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130 (hasExternalUses)
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135 (hasExternalUses)
%137:i64 = shl %135, 16:i64
%138:i64 = lshr %135, 48:i64
%139:i64 = or %137, %138
%140:i64 = xor %136, %139 (hasExternalUses)
%141:i64 = shl %140, 21:i64
%142:i64 = lshr %140, 43:i64
%143:i64 = or %141, %142
infer %143


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58
%60:i64 = shl %59, 32:i64
%61:i64 = lshr %59, 32:i64
%62:i64 = or %60, %61
%63:i64 = xor 7816392313619706465:i64, %47
%64:i64 = shl %41, 32:i64
%65:i64 = lshr %41, 32:i64
%66:i64 = or %64, %65
%67:i64 = phi %0, %63, %66
%68:i64 = xor 8387220255154660723:i64, %1
%69:i64 = shl %55, 21:i64
%70:i64 = lshr %55, 43:i64
%71:i64 = or %69, %70
%72:i64 = xor %56, %71
%73:i64 = phi %0, %68, %72
%74 = block 2
%75:i64 = var
%76:i64 = shl %75, 56:i64
%77 = block 2
%78 = block 2
%79 = block 2
%80 = block 2
%81 = block 2
%82 = block 2
%83:i8 = var
%84:i64 = zext %83
%85:i64 = shlnw %84, 48:i64
%86:i64 = or %76, %85
%87:i64 = phi %82, %76, %86
%88:i8 = var
%89:i64 = zext %88
%90:i64 = shlnw %89, 40:i64
%91:i64 = or %87, %90
%92:i64 = phi %81, %76, %91
%93:i8 = var
%94:i64 = zext %93
%95:i64 = shlnw %94, 32:i64
%96:i64 = or %92, %95
%97:i64 = phi %80, %76, %96
%98:i8 = var
%99:i64 = zext %98
%100:i64 = shlnw %99, 24:i64
%101:i64 = or %97, %100
%102:i64 = phi %79, %76, %101
%103:i8 = var
%104:i64 = zext %103
%105:i64 = shlnw %104, 16:i64
%106:i64 = or %102, %105
%107:i64 = phi %78, %76, %106
%108:i8 = var
%109:i64 = zext %108
%110:i64 = shlnw %109, 8:i64
%111:i64 = or %107, %110
%112:i64 = phi %77, %76, %111
%113:i8 = var
%114:i64 = zext %113
%115:i64 = or %112, %114
%116:i64 = phi %74, %76, %115
%117:i64 = xor %73, %116
%118:i64 = add %67, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %62, %122
%124:i64 = shl %46, 13:i64
%125:i64 = lshr %46, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %59, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131 (hasExternalUses)
%133:i64 = add %123, %132 (hasExternalUses)
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143 (hasExternalUses)
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148 (hasExternalUses)
%150:i64 = shl %148, 21:i64
%151:i64 = lshr %148, 43:i64
%152:i64 = or %150, %151
%153:i64 = xor %149, %152
infer %153


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58
%60:i64 = shl %59, 32:i64
%61:i64 = lshr %59, 32:i64
%62:i64 = or %60, %61
%63:i64 = xor 7816392313619706465:i64, %47
%64:i64 = shl %41, 32:i64
%65:i64 = lshr %41, 32:i64
%66:i64 = or %64, %65
%67:i64 = phi %0, %63, %66
%68:i64 = xor 8387220255154660723:i64, %1
%69:i64 = shl %55, 21:i64
%70:i64 = lshr %55, 43:i64
%71:i64 = or %69, %70
%72:i64 = xor %56, %71
%73:i64 = phi %0, %68, %72
%74 = block 2
%75:i64 = var
%76:i64 = shl %75, 56:i64
%77 = block 2
%78 = block 2
%79 = block 2
%80 = block 2
%81 = block 2
%82 = block 2
%83:i8 = var
%84:i64 = zext %83
%85:i64 = shlnw %84, 48:i64
%86:i64 = or %76, %85
%87:i64 = phi %82, %76, %86
%88:i8 = var
%89:i64 = zext %88
%90:i64 = shlnw %89, 40:i64
%91:i64 = or %87, %90
%92:i64 = phi %81, %76, %91
%93:i8 = var
%94:i64 = zext %93
%95:i64 = shlnw %94, 32:i64
%96:i64 = or %92, %95
%97:i64 = phi %80, %76, %96
%98:i8 = var
%99:i64 = zext %98
%100:i64 = shlnw %99, 24:i64
%101:i64 = or %97, %100
%102:i64 = phi %79, %76, %101
%103:i8 = var
%104:i64 = zext %103
%105:i64 = shlnw %104, 16:i64
%106:i64 = or %102, %105
%107:i64 = phi %78, %76, %106
%108:i8 = var
%109:i64 = zext %108
%110:i64 = shlnw %109, 8:i64
%111:i64 = or %107, %110
%112:i64 = phi %77, %76, %111
%113:i8 = var
%114:i64 = zext %113
%115:i64 = or %112, %114
%116:i64 = phi %74, %76, %115
%117:i64 = xor %73, %116
%118:i64 = add %67, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121 (hasExternalUses)
%123:i64 = add %62, %122 (hasExternalUses)
%124:i64 = shl %46, 13:i64
%125:i64 = lshr %46, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %59, %126
%128:i64 = add %118, %127 (hasExternalUses)
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131 (hasExternalUses)
%133:i64 = add %123, %132 (hasExternalUses)
%134:i64 = shl %133, 32:i64

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134 (hasExternalUses)
%136:i64 = add %123, %135 (hasExternalUses)
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140 (hasExternalUses)
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144 (hasExternalUses)
%146:i64 = add %136, %145
infer %146


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58
%60:i64 = shl %59, 32:i64
%61:i64 = lshr %59, 32:i64
%62:i64 = or %60, %61
%63:i64 = xor 7816392313619706465:i64, %47
%64:i64 = shl %41, 32:i64
%65:i64 = lshr %41, 32:i64
%66:i64 = or %64, %65
%67:i64 = phi %0, %63, %66
%68:i64 = xor 8387220255154660723:i64, %1
%69:i64 = shl %55, 21:i64
%70:i64 = lshr %55, 43:i64
%71:i64 = or %69, %70
%72:i64 = xor %56, %71
%73:i64 = phi %0, %68, %72
%74 = block 2
%75:i64 = var
%76:i64 = shl %75, 56:i64
%77 = block 2
%78 = block 2
%79 = block 2
%80 = block 2
%81 = block 2
%82 = block 2
%83:i8 = var
%84:i64 = zext %83
%85:i64 = shlnw %84, 48:i64
%86:i64 = or %76, %85
%87:i64 = phi %82, %76, %86
%88:i8 = var
%89:i64 = zext %88
%90:i64 = shlnw %89, 40:i64
%91:i64 = or %87, %90
%92:i64 = phi %81, %76, %91
%93:i8 = var
%94:i64 = zext %93
%95:i64 = shlnw %94, 32:i64
%96:i64 = or %92, %95
%97:i64 = phi %80, %76, %96
%98:i8 = var
%99:i64 = zext %98
%100:i64 = shlnw %99, 24:i64
%101:i64 = or %97, %100
%102:i64 = phi %79, %76, %101
%103:i8 = var
%104:i64 = zext %103
%105:i64 = shlnw %104, 16:i64
%106:i64 = or %102, %105
%107:i64 = phi %78, %76, %106
%108:i8 = var
%109:i64 = zext %108
%110:i64 = shlnw %109, 8:i64
%111:i64 = or %107, %110
%112:i64 = phi %77, %76, %111
%113:i8 = var
%114:i64 = zext %113
%115:i64 = or %112, %114
%116:i64 = phi %74, %76, %115
%117:i64 = xor %73, %116
%118:i64 = add %67, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121 (hasExternalUses)
%123:i64 = add %62, %122 (hasExternalUses)
%124:i64 = shl %46, 13:i64
%125:i64 = lshr %46, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %59, %126
%128:i64 = add %118, %127 (hasExternalUses)
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132 (hasExternalUses)
%134:i64 = shl %132, 13:i64
%135:i64 = lshr %132, 51:i64
%136:i64 = or %134, %135
%137:i64 = xor %133, %136 (hasExternalUses)
%138:i64 = shl %137, 17:i64
infer %138


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58
%60:i64 = shl %59, 32:i64
%61:i64 = lshr %59, 32:i64
%62:i64 = or %60, %61
%63:i64 = xor 7816392313619706465:i64, %47
%64:i64 = shl %41, 32:i64
%65:i64 = lshr %41, 32:i64
%66:i64 = or %64, %65
%67:i64 = phi %0, %63, %66
%68:i64 = xor 8387220255154660723:i64, %1
%69:i64 = shl %55, 21:i64
%70:i64 = lshr %55, 43:i64
%71:i64 = or %69, %70
%72:i64 = xor %56, %71
%73:i64 = phi %0, %68, %72
%74 = block 2
%75:i64 = var
%76:i64 = shl %75, 56:i64
%77 = block 2
%78 = block 2
%79 = block 2
%80 = block 2
%81 = block 2
%82 = block 2
%83:i8 = var
%84:i64 = zext %83
%85:i64 = shlnw %84, 48:i64
%86:i64 = or %76, %85
%87:i64 = phi %82, %76, %86
%88:i8 = var
%89:i64 = zext %88
%90:i64 = shlnw %89, 40:i64
%91:i64 = or %87, %90
%92:i64 = phi %81, %76, %91
%93:i8 = var
%94:i64 = zext %93
%95:i64 = shlnw %94, 32:i64
%96:i64 = or %92, %95
%97:i64 = phi %80, %76, %96
%98:i8 = var
%99:i64 = zext %98
%100:i64 = shlnw %99, 24:i64
%101:i64 = or %97, %100
%102:i64 = phi %79, %76, %101
%103:i8 = var
%104:i64 = zext %103
%105:i64 = shlnw %104, 16:i64
%106:i64 = or %102, %105
%107:i64 = phi %78, %76, %106
%108:i8 = var
%109:i64 = zext %108
%110:i64 = shlnw %109, 8:i64
%111:i64 = or %107, %110
%112:i64 = phi %77, %76, %111
%113:i8 = var
%114:i64 = zext %113
%115:i64 = or %112, %114
%116:i64 = phi %74, %76, %115
%117:i64 = xor %73, %116
%118:i64 = add %67, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121 (hasExternalUses)
%123:i64 = add %62, %122 (hasExternalUses)
%124:i64 = shl %46, 13:i64
%125:i64 = lshr %46, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %59, %126
%128:i64 = add %118, %127 (hasExternalUses)
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132 (hasExternalUses)
%134:i64 = shl %132, 13:i64
%135:i64 = lshr %132, 51:i64
%136:i64 = or %134, %135
%137:i64 = xor %133, %136 (hasExternalUses)
%138:i64 = lshr %137, 47:i64
infer %138


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58
%60:i64 = shl %59, 32:i64
%61:i64 = lshr %59, 32:i64
%62:i64 = or %60, %61
%63:i64 = xor 7816392313619706465:i64, %47
%64:i64 = shl %41, 32:i64
%65:i64 = lshr %41, 32:i64
%66:i64 = or %64, %65
%67:i64 = phi %0, %63, %66
%68:i64 = xor 8387220255154660723:i64, %1
%69:i64 = shl %55, 21:i64
%70:i64 = lshr %55, 43:i64
%71:i64 = or %69, %70
%72:i64 = xor %56, %71
%73:i64 = phi %0, %68, %72
%74 = block 2
%75:i64 = var
%76:i64 = shl %75, 56:i64
%77 = block 2
%78 = block 2
%79 = block 2
%80 = block 2
%81 = block 2
%82 = block 2
%83:i8 = var
%84:i64 = zext %83
%85:i64 = shlnw %84, 48:i64
%86:i64 = or %76, %85
%87:i64 = phi %82, %76, %86
%88:i8 = var
%89:i64 = zext %88
%90:i64 = shlnw %89, 40:i64
%91:i64 = or %87, %90
%92:i64 = phi %81, %76, %91
%93:i8 = var
%94:i64 = zext %93
%95:i64 = shlnw %94, 32:i64
%96:i64 = or %92, %95
%97:i64 = phi %80, %76, %96
%98:i8 = var
%99:i64 = zext %98
%100:i64 = shlnw %99, 24:i64
%101:i64 = or %97, %100
%102:i64 = phi %79, %76, %101
%103:i8 = var
%104:i64 = zext %103
%105:i64 = shlnw %104, 16:i64
%106:i64 = or %102, %105
%107:i64 = phi %78, %76, %106
%108:i8 = var
%109:i64 = zext %108
%110:i64 = shlnw %109, 8:i64
%111:i64 = or %107, %110
%112:i64 = phi %77, %76, %111
%113:i8 = var
%114:i64 = zext %113
%115:i64 = or %112, %114
%116:i64 = phi %74, %76, %115
%117:i64 = xor %73, %116
%118:i64 = add %67, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121 (hasExternalUses)
%123:i64 = add %62, %122 (hasExternalUses)
%124:i64 = shl %46, 13:i64
%125:i64 = lshr %46, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %59, %126
%128:i64 = add %118, %127 (hasExternalUses)
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132 (hasExternalUses)
%134:i64 = shl %132, 13:i64
%135:i64 = lshr %132, 51:i64
%136:i64 = or %134, %135
%137:i64 = xor %133, %136 (hasExternalUses)
%138:i64 = shl %137, 17:i64
%139:i64 = lshr %137, 47:i64
%140:i64 = or %138, %139
infer %140


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134 (hasExternalUses)
%136:i64 = add %123, %135 (hasExternalUses)
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140 (hasExternalUses)
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145 (hasExternalUses)
%147:i64 = shl %145, 17:i64
%148:i64 = lshr %145, 47:i64
%149:i64 = or %147, %148
%150:i64 = xor %146, %149
infer %150


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134 (hasExternalUses)
%136:i64 = add %123, %135 (hasExternalUses)
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140 (hasExternalUses)
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144 (hasExternalUses)
%146:i64 = add %136, %145 (hasExternalUses)
%147:i64 = shl %146, 32:i64
infer %147


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134 (hasExternalUses)
%136:i64 = add %123, %135 (hasExternalUses)
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140 (hasExternalUses)
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144 (hasExternalUses)
%146:i64 = add %136, %145 (hasExternalUses)
%147:i64 = lshr %146, 32:i64
infer %147


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134 (hasExternalUses)
%136:i64 = add %123, %135 (hasExternalUses)
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140 (hasExternalUses)
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144 (hasExternalUses)
%146:i64 = add %136, %145 (hasExternalUses)
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
infer %149


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
ConstantSynthesis: solver returns error on first query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131 (hasExternalUses)
%133:i64 = add %123, %132 (hasExternalUses)
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143 (hasExternalUses)
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147 (hasExternalUses)
%149:i64 = add %136, %148 (hasExternalUses)
%150:i64 = xor %42, %149
infer %150


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i64 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134 (hasExternalUses)
%136:i64 = add %123, %135 (hasExternalUses)
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140 (hasExternalUses)
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144 (hasExternalUses)
%146:i64 = add %136, %145 (hasExternalUses)
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
infer %150


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 238
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147 (hasExternalUses)
%149:i64 = add %136, %148 (hasExternalUses)
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154 (hasExternalUses)
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158 (hasExternalUses)
%160:i64 = add %150, %159
infer %160


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64 (hasExternalUses)
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41

Cost = 27
verification query failed!
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134 (hasExternalUses)
%136:i64 = add %123, %135 (hasExternalUses)
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140 (hasExternalUses)
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145 (hasExternalUses)
%147:i64 = shl %145, 17:i64
%148:i64 = lshr %145, 47:i64
%149:i64 = or %147, %148
%150:i64 = xor %146, %149 (hasExternalUses)
%151:i64 = shl %150, 13:i64
infer %151


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134 (hasExternalUses)
%136:i64 = add %123, %135 (hasExternalUses)
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140 (hasExternalUses)
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145 (hasExternalUses)
%147:i64 = shl %145, 17:i64
%148:i64 = lshr %145, 47:i64
%149:i64 = or %147, %148
%150:i64 = xor %146, %149 (hasExternalUses)
%151:i64 = lshr %150, 51:i64
infer %151


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134 (hasExternalUses)
%136:i64 = add %123, %135 (hasExternalUses)
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140 (hasExternalUses)
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145 (hasExternalUses)
%147:i64 = shl %145, 17:i64
%148:i64 = lshr %145, 47:i64
%149:i64 = or %147, %148
%150:i64 = xor %146, %149 (hasExternalUses)
%151:i64 = shl %150, 13:i64
%152:i64 = lshr %150, 51:i64
%153:i64 = or %151, %152
infer %153


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147 (hasExternalUses)
%149:i64 = add %136, %148 (hasExternalUses)
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154 (hasExternalUses)
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159 (hasExternalUses)
%161:i64 = shl %159, 13:i64
%162:i64 = lshr %159, 51:i64
%163:i64 = or %161, %162
%164:i64 = xor %160, %163
infer %164


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147 (hasExternalUses)
%149:i64 = add %136, %148 (hasExternalUses)
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154 (hasExternalUses)
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158 (hasExternalUses)
%160:i64 = add %150, %159 (hasExternalUses)
%161:i64 = shl %160, 32:i64
infer %161


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147 (hasExternalUses)
%149:i64 = add %136, %148 (hasExternalUses)
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154 (hasExternalUses)
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158 (hasExternalUses)
%160:i64 = add %150, %159 (hasExternalUses)
%161:i64 = lshr %160, 32:i64
infer %161


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147 (hasExternalUses)
%149:i64 = add %136, %148 (hasExternalUses)
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154 (hasExternalUses)
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158 (hasExternalUses)
%160:i64 = add %150, %159 (hasExternalUses)
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
infer %163


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144 (hasExternalUses)
%146:i64 = add %136, %145 (hasExternalUses)
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157 (hasExternalUses)
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161 (hasExternalUses)
%163:i64 = add %150, %162
infer %163


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 238
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58
%60:i64 = shl %59, 32:i64
%61:i64 = lshr %59, 32:i64
%62:i64 = or %60, %61
%63:i64 = xor 7816392313619706465:i64, %47
%64:i64 = shl %41, 32:i64
%65:i64 = lshr %41, 32:i64
%66:i64 = or %64, %65
%67:i64 = phi %0, %63, %66
%68:i64 = xor 8387220255154660723:i64, %1
%69:i64 = shl %55, 21:i64
%70:i64 = lshr %55, 43:i64
%71:i64 = or %69, %70
%72:i64 = xor %56, %71
%73:i64 = phi %0, %68, %72
%74 = block 2
%75:i64 = var
%76:i64 = shl %75, 56:i64
%77 = block 2
%78 = block 2
%79 = block 2
%80 = block 2
%81 = block 2
%82 = block 2
%83:i8 = var
%84:i64 = zext %83
%85:i64 = shlnw %84, 48:i64
%86:i64 = or %76, %85
%87:i64 = phi %82, %76, %86
%88:i8 = var
%89:i64 = zext %88
%90:i64 = shlnw %89, 40:i64
%91:i64 = or %87, %90
%92:i64 = phi %81, %76, %91
%93:i8 = var
%94:i64 = zext %93
%95:i64 = shlnw %94, 32:i64
%96:i64 = or %92, %95
%97:i64 = phi %80, %76, %96
%98:i8 = var
%99:i64 = zext %98
%100:i64 = shlnw %99, 24:i64
%101:i64 = or %97, %100
%102:i64 = phi %79, %76, %101
%103:i8 = var
%104:i64 = zext %103
%105:i64 = shlnw %104, 16:i64
%106:i64 = or %102, %105
%107:i64 = phi %78, %76, %106
%108:i8 = var
%109:i64 = zext %108
%110:i64 = shlnw %109, 8:i64
%111:i64 = or %107, %110
%112:i64 = phi %77, %76, %111
%113:i8 = var
%114:i64 = zext %113
%115:i64 = or %112, %114
%116:i64 = phi %74, %76, %115
%117:i64 = xor %73, %116
%118:i64 = add %67, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %62, %122
%124:i64 = shl %46, 13:i64
%125:i64 = lshr %46, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %59, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131 (hasExternalUses)
%133:i64 = add %123, %132 (hasExternalUses)
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143 (hasExternalUses)
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148 (hasExternalUses)
%150:i64 = shl %148, 21:i64
%151:i64 = lshr %148, 43:i64
%152:i64 = or %150, %151
%153:i64 = xor %149, %152 (hasExternalUses)
%154:i64 = shl %153, 16:i64
infer %154


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58
%60:i64 = shl %59, 32:i64
%61:i64 = lshr %59, 32:i64
%62:i64 = or %60, %61
%63:i64 = xor 7816392313619706465:i64, %47
%64:i64 = shl %41, 32:i64
%65:i64 = lshr %41, 32:i64
%66:i64 = or %64, %65
%67:i64 = phi %0, %63, %66
%68:i64 = xor 8387220255154660723:i64, %1
%69:i64 = shl %55, 21:i64
%70:i64 = lshr %55, 43:i64
%71:i64 = or %69, %70
%72:i64 = xor %56, %71
%73:i64 = phi %0, %68, %72
%74 = block 2
%75:i64 = var
%76:i64 = shl %75, 56:i64
%77 = block 2
%78 = block 2
%79 = block 2
%80 = block 2
%81 = block 2
%82 = block 2
%83:i8 = var
%84:i64 = zext %83
%85:i64 = shlnw %84, 48:i64
%86:i64 = or %76, %85
%87:i64 = phi %82, %76, %86
%88:i8 = var
%89:i64 = zext %88
%90:i64 = shlnw %89, 40:i64
%91:i64 = or %87, %90
%92:i64 = phi %81, %76, %91
%93:i8 = var
%94:i64 = zext %93
%95:i64 = shlnw %94, 32:i64
%96:i64 = or %92, %95
%97:i64 = phi %80, %76, %96
%98:i8 = var
%99:i64 = zext %98
%100:i64 = shlnw %99, 24:i64
%101:i64 = or %97, %100
%102:i64 = phi %79, %76, %101
%103:i8 = var
%104:i64 = zext %103
%105:i64 = shlnw %104, 16:i64
%106:i64 = or %102, %105
%107:i64 = phi %78, %76, %106
%108:i8 = var
%109:i64 = zext %108
%110:i64 = shlnw %109, 8:i64
%111:i64 = or %107, %110
%112:i64 = phi %77, %76, %111
%113:i8 = var
%114:i64 = zext %113
%115:i64 = or %112, %114
%116:i64 = phi %74, %76, %115
%117:i64 = xor %73, %116
%118:i64 = add %67, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %62, %122
%124:i64 = shl %46, 13:i64
%125:i64 = lshr %46, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %59, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131 (hasExternalUses)
%133:i64 = add %123, %132 (hasExternalUses)
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143 (hasExternalUses)
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148 (hasExternalUses)
%150:i64 = shl %148, 21:i64
%151:i64 = lshr %148, 43:i64
%152:i64 = or %150, %151
%153:i64 = xor %149, %152 (hasExternalUses)
%154:i64 = lshr %153, 48:i64
infer %154


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58
%60:i64 = shl %59, 32:i64
%61:i64 = lshr %59, 32:i64
%62:i64 = or %60, %61
%63:i64 = xor 7816392313619706465:i64, %47
%64:i64 = shl %41, 32:i64
%65:i64 = lshr %41, 32:i64
%66:i64 = or %64, %65
%67:i64 = phi %0, %63, %66
%68:i64 = xor 8387220255154660723:i64, %1
%69:i64 = shl %55, 21:i64
%70:i64 = lshr %55, 43:i64
%71:i64 = or %69, %70
%72:i64 = xor %56, %71
%73:i64 = phi %0, %68, %72
%74 = block 2
%75:i64 = var
%76:i64 = shl %75, 56:i64
%77 = block 2
%78 = block 2
%79 = block 2
%80 = block 2
%81 = block 2
%82 = block 2
%83:i8 = var
%84:i64 = zext %83
%85:i64 = shlnw %84, 48:i64
%86:i64 = or %76, %85
%87:i64 = phi %82, %76, %86
%88:i8 = var
%89:i64 = zext %88
%90:i64 = shlnw %89, 40:i64
%91:i64 = or %87, %90
%92:i64 = phi %81, %76, %91
%93:i8 = var
%94:i64 = zext %93
%95:i64 = shlnw %94, 32:i64
%96:i64 = or %92, %95
%97:i64 = phi %80, %76, %96
%98:i8 = var
%99:i64 = zext %98
%100:i64 = shlnw %99, 24:i64
%101:i64 = or %97, %100
%102:i64 = phi %79, %76, %101
%103:i8 = var
%104:i64 = zext %103
%105:i64 = shlnw %104, 16:i64
%106:i64 = or %102, %105
%107:i64 = phi %78, %76, %106
%108:i8 = var
%109:i64 = zext %108
%110:i64 = shlnw %109, 8:i64
%111:i64 = or %107, %110
%112:i64 = phi %77, %76, %111
%113:i8 = var
%114:i64 = zext %113
%115:i64 = or %112, %114
%116:i64 = phi %74, %76, %115
%117:i64 = xor %73, %116
%118:i64 = add %67, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %62, %122
%124:i64 = shl %46, 13:i64
%125:i64 = lshr %46, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %59, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131 (hasExternalUses)
%133:i64 = add %123, %132 (hasExternalUses)
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143 (hasExternalUses)
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148 (hasExternalUses)
%150:i64 = shl %148, 21:i64
%151:i64 = lshr %148, 43:i64
%152:i64 = or %150, %151
%153:i64 = xor %149, %152 (hasExternalUses)
%154:i64 = shl %153, 16:i64
%155:i64 = lshr %153, 48:i64
%156:i64 = or %154, %155
infer %156


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144 (hasExternalUses)
%146:i64 = add %136, %145 (hasExternalUses)
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157 (hasExternalUses)
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162 (hasExternalUses)
%164:i64 = shl %162, 16:i64
%165:i64 = lshr %162, 48:i64
%166:i64 = or %164, %165
%167:i64 = xor %163, %166
infer %167


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 238
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158 (hasExternalUses)
%160:i64 = add %150, %159 (hasExternalUses)
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171 (hasExternalUses)
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175 (hasExternalUses)
%177:i64 = add %163, %176
infer %177


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 238
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144 (hasExternalUses)
%146:i64 = add %136, %145 (hasExternalUses)
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157 (hasExternalUses)
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162 (hasExternalUses)
%164:i64 = shl %162, 16:i64
%165:i64 = lshr %162, 48:i64
%166:i64 = or %164, %165
%167:i64 = xor %163, %166 (hasExternalUses)
%168:i64 = shl %167, 21:i64
infer %168


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 499122176
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144 (hasExternalUses)
%146:i64 = add %136, %145 (hasExternalUses)
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157 (hasExternalUses)
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162 (hasExternalUses)
%164:i64 = shl %162, 16:i64
%165:i64 = lshr %162, 48:i64
%166:i64 = or %164, %165
%167:i64 = xor %163, %166 (hasExternalUses)
%168:i64 = lshr %167, 43:i64
infer %168


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144 (hasExternalUses)
%146:i64 = add %136, %145 (hasExternalUses)
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157 (hasExternalUses)
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162 (hasExternalUses)
%164:i64 = shl %162, 16:i64
%165:i64 = lshr %162, 48:i64
%166:i64 = or %164, %165
%167:i64 = xor %163, %166 (hasExternalUses)
%168:i64 = shl %167, 21:i64
%169:i64 = lshr %167, 43:i64
%170:i64 = or %168, %169
infer %170


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 499122176
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158 (hasExternalUses)
%160:i64 = add %150, %159 (hasExternalUses)
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171 (hasExternalUses)
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176 (hasExternalUses)
%178:i64 = shl %176, 21:i64
%179:i64 = lshr %176, 43:i64
%180:i64 = or %178, %179
%181:i64 = xor %177, %180
infer %181


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 499122414
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0 = block 2
%1:i64 = var
%2:i64 = xor 7237128888997146499:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %40, 17:i64
%43:i64 = lshr %40, 47:i64
%44:i64 = or %42, %43
%45:i64 = xor %41, %44
%46:i64 = phi %0, %2, %45
%47:i64 = var
%48:i64 = xor 8317987319222330741:i64, %47
%49:i64 = shl %36, 32:i64
%50:i64 = lshr %36, 32:i64
%51:i64 = or %49, %50
%52:i64 = shl %30, 16:i64
%53:i64 = lshr %30, 48:i64
%54:i64 = or %52, %53
%55:i64 = xor %31, %54
%56:i64 = add %51, %55
%57:i64 = xor %5, %56
%58:i64 = phi %0, %48, %57
%59:i64 = add %46, %58
%60:i64 = shl %59, 32:i64
%61:i64 = lshr %59, 32:i64
%62:i64 = or %60, %61
%63:i64 = xor 7816392313619706465:i64, %47
%64:i64 = shl %41, 32:i64
%65:i64 = lshr %41, 32:i64
%66:i64 = or %64, %65
%67:i64 = phi %0, %63, %66
%68:i64 = xor 8387220255154660723:i64, %1
%69:i64 = shl %55, 21:i64
%70:i64 = lshr %55, 43:i64
%71:i64 = or %69, %70
%72:i64 = xor %56, %71
%73:i64 = phi %0, %68, %72
%74 = block 2
%75:i64 = var
%76:i64 = shl %75, 56:i64
%77 = block 2
%78 = block 2
%79 = block 2
%80 = block 2
%81 = block 2
%82 = block 2
%83:i8 = var
%84:i64 = zext %83
%85:i64 = shlnw %84, 48:i64
%86:i64 = or %76, %85
%87:i64 = phi %82, %76, %86
%88:i8 = var
%89:i64 = zext %88
%90:i64 = shlnw %89, 40:i64
%91:i64 = or %87, %90
%92:i64 = phi %81, %76, %91
%93:i8 = var
%94:i64 = zext %93
%95:i64 = shlnw %94, 32:i64
%96:i64 = or %92, %95
%97:i64 = phi %80, %76, %96
%98:i8 = var
%99:i64 = zext %98
%100:i64 = shlnw %99, 24:i64
%101:i64 = or %97, %100
%102:i64 = phi %79, %76, %101
%103:i8 = var
%104:i64 = zext %103
%105:i64 = shlnw %104, 16:i64
%106:i64 = or %102, %105
%107:i64 = phi %78, %76, %106
%108:i8 = var
%109:i64 = zext %108
%110:i64 = shlnw %109, 8:i64
%111:i64 = or %107, %110
%112:i64 = phi %77, %76, %111
%113:i8 = var
%114:i64 = zext %113
%115:i64 = or %112, %114
%116:i64 = phi %74, %76, %115
%117:i64 = xor %73, %116
%118:i64 = add %67, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %62, %122
%124:i64 = shl %46, 13:i64
%125:i64 = lshr %46, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %59, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131 (hasExternalUses)
%133:i64 = add %123, %132 (hasExternalUses)
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143 (hasExternalUses)
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148 (hasExternalUses)
%150:i64 = shl %148, 21:i64
%151:i64 = lshr %148, 43:i64
%152:i64 = or %150, %151
%153:i64 = xor %149, %152 (hasExternalUses)
%154:i64 = shl %153, 16:i64
%155:i64 = lshr %153, 48:i64
%156:i64 = or %154, %155

Cost = 3
verification query failed!
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161 (hasExternalUses)
%163:i64 = add %150, %162 (hasExternalUses)
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168 (hasExternalUses)
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172 (hasExternalUses)
%174:i64 = add %163, %173
infer %174


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 238
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147 (hasExternalUses)
%149:i64 = add %136, %148 (hasExternalUses)
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154 (hasExternalUses)
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159 (hasExternalUses)
%161:i64 = shl %159, 13:i64
%162:i64 = lshr %159, 51:i64
%163:i64 = or %161, %162
%164:i64 = xor %160, %163 (hasExternalUses)
%165:i64 = shl %164, 17:i64
infer %165


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147 (hasExternalUses)
%149:i64 = add %136, %148 (hasExternalUses)
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154 (hasExternalUses)
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159 (hasExternalUses)
%161:i64 = shl %159, 13:i64
%162:i64 = lshr %159, 51:i64
%163:i64 = or %161, %162
%164:i64 = xor %160, %163 (hasExternalUses)
%165:i64 = lshr %164, 47:i64
infer %165


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147 (hasExternalUses)
%149:i64 = add %136, %148 (hasExternalUses)
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154 (hasExternalUses)
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159 (hasExternalUses)
%161:i64 = shl %159, 13:i64
%162:i64 = lshr %159, 51:i64
%163:i64 = or %161, %162
%164:i64 = xor %160, %163 (hasExternalUses)
%165:i64 = shl %164, 17:i64
%166:i64 = lshr %164, 47:i64
%167:i64 = or %165, %166
infer %167


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161 (hasExternalUses)
%163:i64 = add %150, %162 (hasExternalUses)
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168 (hasExternalUses)
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173 (hasExternalUses)
%175:i64 = shl %173, 17:i64
%176:i64 = lshr %173, 47:i64
%177:i64 = or %175, %176
%178:i64 = xor %174, %177
infer %178


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 238
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161 (hasExternalUses)
%163:i64 = add %150, %162 (hasExternalUses)
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168 (hasExternalUses)
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172 (hasExternalUses)
%174:i64 = add %163, %173 (hasExternalUses)
%175:i64 = shl %174, 32:i64
infer %175


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1022202216448
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161 (hasExternalUses)
%163:i64 = add %150, %162 (hasExternalUses)
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168 (hasExternalUses)
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172 (hasExternalUses)
%174:i64 = add %163, %173 (hasExternalUses)
%175:i64 = lshr %174, 32:i64
infer %175


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161 (hasExternalUses)
%163:i64 = add %150, %162 (hasExternalUses)
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168 (hasExternalUses)
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172 (hasExternalUses)
%174:i64 = add %163, %173 (hasExternalUses)
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
infer %177


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1022202216448
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175 (hasExternalUses)
%177:i64 = add %163, %176 (hasExternalUses)
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181 (hasExternalUses)
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185 (hasExternalUses)
%187:i64 = add %177, %186
infer %187


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 476
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161 (hasExternalUses)
%163:i64 = add %150, %162 (hasExternalUses)
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168 (hasExternalUses)
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173 (hasExternalUses)
%175:i64 = shl %173, 17:i64
%176:i64 = lshr %173, 47:i64
%177:i64 = or %175, %176
%178:i64 = xor %174, %177 (hasExternalUses)
%179:i64 = shl %178, 13:i64
infer %179


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1949696
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161 (hasExternalUses)
%163:i64 = add %150, %162 (hasExternalUses)
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168 (hasExternalUses)
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173 (hasExternalUses)
%175:i64 = shl %173, 17:i64
%176:i64 = lshr %173, 47:i64
%177:i64 = or %175, %176
%178:i64 = xor %174, %177 (hasExternalUses)
%179:i64 = lshr %178, 51:i64
infer %179


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161 (hasExternalUses)
%163:i64 = add %150, %162 (hasExternalUses)
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168 (hasExternalUses)
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173 (hasExternalUses)
%175:i64 = shl %173, 17:i64
%176:i64 = lshr %173, 47:i64
%177:i64 = or %175, %176
%178:i64 = xor %174, %177 (hasExternalUses)
%179:i64 = shl %178, 13:i64
%180:i64 = lshr %178, 51:i64
%181:i64 = or %179, %180
infer %181


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1949696
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175 (hasExternalUses)
%177:i64 = add %163, %176 (hasExternalUses)
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181 (hasExternalUses)
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186 (hasExternalUses)
%188:i64 = shl %186, 13:i64
%189:i64 = lshr %186, 51:i64
%190:i64 = or %188, %189
%191:i64 = xor %187, %190
infer %191


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1950172
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144 (hasExternalUses)
%146:i64 = add %136, %145 (hasExternalUses)
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157 (hasExternalUses)
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162 (hasExternalUses)
%164:i64 = shl %162, 16:i64
%165:i64 = lshr %162, 48:i64
%166:i64 = or %164, %165
%167:i64 = xor %163, %166

Cost = 126
verification query failed!
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175 (hasExternalUses)
%177:i64 = add %163, %176 (hasExternalUses)
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181 (hasExternalUses)
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185 (hasExternalUses)
%187:i64 = add %177, %186 (hasExternalUses)
%188:i64 = shl %187, 32:i64
infer %188


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 2044404432896
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175 (hasExternalUses)
%177:i64 = add %163, %176 (hasExternalUses)
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181 (hasExternalUses)
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185 (hasExternalUses)
%187:i64 = add %177, %186 (hasExternalUses)
%188:i64 = lshr %187, 32:i64
infer %188


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175 (hasExternalUses)
%177:i64 = add %163, %176 (hasExternalUses)
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181 (hasExternalUses)
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185 (hasExternalUses)
%187:i64 = add %177, %186 (hasExternalUses)
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
infer %190


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 2044404432896
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172 (hasExternalUses)
%174:i64 = add %163, %173 (hasExternalUses)
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184 (hasExternalUses)
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188 (hasExternalUses)
%190:i64 = add %177, %189
infer %190


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1022701338862
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158 (hasExternalUses)
%160:i64 = add %150, %159 (hasExternalUses)
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171 (hasExternalUses)
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176 (hasExternalUses)
%178:i64 = shl %176, 21:i64
%179:i64 = lshr %176, 43:i64
%180:i64 = or %178, %179
%181:i64 = xor %177, %180 (hasExternalUses)
%182:i64 = shl %181, 16:i64
infer %182


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 32710486523904
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158 (hasExternalUses)
%160:i64 = add %150, %159 (hasExternalUses)
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171 (hasExternalUses)
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176 (hasExternalUses)
%178:i64 = shl %176, 21:i64
%179:i64 = lshr %176, 43:i64
%180:i64 = or %178, %179
%181:i64 = xor %177, %180 (hasExternalUses)
%182:i64 = lshr %181, 48:i64
infer %182


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158 (hasExternalUses)
%160:i64 = add %150, %159 (hasExternalUses)
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171 (hasExternalUses)
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176 (hasExternalUses)
%178:i64 = shl %176, 21:i64
%179:i64 = lshr %176, 43:i64
%180:i64 = or %178, %179
%181:i64 = xor %177, %180 (hasExternalUses)
%182:i64 = shl %181, 16:i64
%183:i64 = lshr %181, 48:i64
%184:i64 = or %182, %183
infer %184


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 32710486523904
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172 (hasExternalUses)
%174:i64 = add %163, %173 (hasExternalUses)
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184 (hasExternalUses)
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189 (hasExternalUses)
%191:i64 = shl %189, 16:i64
%192:i64 = lshr %189, 48:i64
%193:i64 = or %191, %192
%194:i64 = xor %190, %193
infer %194


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 32083895255278
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185 (hasExternalUses)
%187:i64 = add %177, %186 (hasExternalUses)
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197 (hasExternalUses)
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201 (hasExternalUses)
%203:i64 = add %190, %202
infer %203


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 34128299688174
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172 (hasExternalUses)
%174:i64 = add %163, %173 (hasExternalUses)
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184 (hasExternalUses)
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189 (hasExternalUses)
%191:i64 = shl %189, 16:i64
%192:i64 = lshr %189, 48:i64
%193:i64 = or %191, %192
%194:i64 = xor %190, %193 (hasExternalUses)
%195:i64 = shl %194, 21:i64
infer %195


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -6502171192441438208
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172 (hasExternalUses)
%174:i64 = add %163, %173 (hasExternalUses)
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184 (hasExternalUses)
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189 (hasExternalUses)
%191:i64 = shl %189, 16:i64
%192:i64 = lshr %189, 48:i64
%193:i64 = or %191, %192
%194:i64 = xor %190, %193 (hasExternalUses)
%195:i64 = lshr %194, 43:i64
infer %195


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 3
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172 (hasExternalUses)
%174:i64 = add %163, %173 (hasExternalUses)
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184 (hasExternalUses)
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189 (hasExternalUses)
%191:i64 = shl %189, 16:i64
%192:i64 = lshr %189, 48:i64
%193:i64 = or %191, %192
%194:i64 = xor %190, %193 (hasExternalUses)
%195:i64 = shl %194, 21:i64
%196:i64 = lshr %194, 43:i64
%197:i64 = or %195, %196
infer %197


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -6502171192441438205
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185 (hasExternalUses)
%187:i64 = add %177, %186 (hasExternalUses)
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197 (hasExternalUses)
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202 (hasExternalUses)
%204:i64 = shl %202, 21:i64
%205:i64 = lshr %202, 43:i64
%206:i64 = or %204, %205
%207:i64 = xor %203, %206
infer %207


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -6502148060231106323
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175 (hasExternalUses)
%177:i64 = add %163, %176 (hasExternalUses)
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181 (hasExternalUses)
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185 (hasExternalUses)
%187:i64 = add %177, %186 (hasExternalUses)
%188:i64 = shl %187, 32:i64

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188 (hasExternalUses)
%190:i64 = add %177, %189 (hasExternalUses)
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194 (hasExternalUses)
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198 (hasExternalUses)
%200:i64 = add %190, %199
infer %200


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1022703289034
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175 (hasExternalUses)
%177:i64 = add %163, %176 (hasExternalUses)
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181 (hasExternalUses)
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186 (hasExternalUses)
%188:i64 = shl %186, 13:i64
%189:i64 = lshr %186, 51:i64
%190:i64 = or %188, %189
%191:i64 = xor %187, %190 (hasExternalUses)
%192:i64 = shl %191, 17:i64
infer %192


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 255612944384
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175 (hasExternalUses)
%177:i64 = add %163, %176 (hasExternalUses)
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181 (hasExternalUses)
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186 (hasExternalUses)
%188:i64 = shl %186, 13:i64
%189:i64 = lshr %186, 51:i64
%190:i64 = or %188, %189
%191:i64 = xor %187, %190 (hasExternalUses)
%192:i64 = lshr %191, 47:i64
infer %192


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175 (hasExternalUses)
%177:i64 = add %163, %176 (hasExternalUses)
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181 (hasExternalUses)
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186 (hasExternalUses)
%188:i64 = shl %186, 13:i64
%189:i64 = lshr %186, 51:i64
%190:i64 = or %188, %189
%191:i64 = xor %187, %190 (hasExternalUses)
%192:i64 = shl %191, 17:i64
%193:i64 = lshr %191, 47:i64
%194:i64 = or %192, %193
infer %194


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 255612944384
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188 (hasExternalUses)
%190:i64 = add %177, %189 (hasExternalUses)
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194 (hasExternalUses)
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199 (hasExternalUses)
%201:i64 = shl %199, 17:i64
%202:i64 = lshr %199, 47:i64
%203:i64 = or %201, %202
%204:i64 = xor %200, %203
infer %204


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 917485503178
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188 (hasExternalUses)
%190:i64 = add %177, %189 (hasExternalUses)
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194 (hasExternalUses)
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198 (hasExternalUses)
%200:i64 = add %190, %199 (hasExternalUses)
%201:i64 = shl %200, 32:i64
infer %201


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
ConstantSynthesis: solver returns error on first query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188 (hasExternalUses)
%190:i64 = add %177, %189 (hasExternalUses)
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194 (hasExternalUses)
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198 (hasExternalUses)
%200:i64 = add %190, %199 (hasExternalUses)
%201:i64 = lshr %200, 32:i64
infer %201


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 238
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188 (hasExternalUses)
%190:i64 = add %177, %189 (hasExternalUses)
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194 (hasExternalUses)
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198 (hasExternalUses)
%200:i64 = add %190, %199 (hasExternalUses)
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
infer %203


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 2152090369792147694
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201 (hasExternalUses)
%203:i64 = add %190, %202 (hasExternalUses)
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207 (hasExternalUses)
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211 (hasExternalUses)
%213:i64 = add %203, %212
infer %213


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 35045785191352
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188 (hasExternalUses)
%190:i64 = add %177, %189 (hasExternalUses)
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194 (hasExternalUses)
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199 (hasExternalUses)
%201:i64 = shl %199, 17:i64
%202:i64 = lshr %199, 47:i64
%203:i64 = or %201, %202
%204:i64 = xor %200, %203 (hasExternalUses)
%205:i64 = shl %204, 13:i64
infer %205


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 7516041242034176
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188 (hasExternalUses)
%190:i64 = add %177, %189 (hasExternalUses)
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194 (hasExternalUses)
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199 (hasExternalUses)
%201:i64 = shl %199, 17:i64
%202:i64 = lshr %199, 47:i64
%203:i64 = or %201, %202
%204:i64 = xor %200, %203 (hasExternalUses)
%205:i64 = lshr %204, 51:i64
infer %205


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188 (hasExternalUses)
%190:i64 = add %177, %189 (hasExternalUses)
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194 (hasExternalUses)
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199 (hasExternalUses)
%201:i64 = shl %199, 17:i64
%202:i64 = lshr %199, 47:i64
%203:i64 = or %201, %202
%204:i64 = xor %200, %203 (hasExternalUses)
%205:i64 = shl %204, 13:i64
%206:i64 = lshr %204, 51:i64
%207:i64 = or %205, %206
infer %207


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 7516041242034176
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201 (hasExternalUses)
%203:i64 = add %190, %202 (hasExternalUses)
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207 (hasExternalUses)
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212 (hasExternalUses)
%214:i64 = shl %212, 13:i64
%215:i64 = lshr %212, 51:i64
%216:i64 = or %214, %215
%217:i64 = xor %213, %216
infer %217


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 7507547062436792
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175 (hasExternalUses)
%177:i64 = add %163, %176 (hasExternalUses)
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181 (hasExternalUses)
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185 (hasExternalUses)
%187:i64 = add %177, %186 (hasExternalUses)
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189

Cost = 3
verification query failed!
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201 (hasExternalUses)
%203:i64 = add %190, %202 (hasExternalUses)
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207 (hasExternalUses)
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211 (hasExternalUses)
%213:i64 = add %203, %212 (hasExternalUses)
%214:i64 = shl %213, 32:i64
infer %214


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -4930381971999162368
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201 (hasExternalUses)
%203:i64 = add %190, %202 (hasExternalUses)
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207 (hasExternalUses)
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211 (hasExternalUses)
%213:i64 = add %203, %212 (hasExternalUses)
%214:i64 = lshr %213, 32:i64
infer %214


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 8159
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201 (hasExternalUses)
%203:i64 = add %190, %202 (hasExternalUses)
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207 (hasExternalUses)
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211 (hasExternalUses)
%213:i64 = add %203, %212 (hasExternalUses)
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
infer %216


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -4930381971999154209
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198 (hasExternalUses)
%200:i64 = add %190, %199 (hasExternalUses)
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210 (hasExternalUses)
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214 (hasExternalUses)
%216:i64 = add %203, %215
infer %216


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -4350057690438958629
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185 (hasExternalUses)
%187:i64 = add %177, %186 (hasExternalUses)
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197 (hasExternalUses)
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202 (hasExternalUses)
%204:i64 = shl %202, 21:i64
%205:i64 = lshr %202, 43:i64
%206:i64 = or %204, %205
%207:i64 = xor %203, %206 (hasExternalUses)
%208:i64 = shl %207, 16:i64
infer %208


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -4987172615141654528
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185 (hasExternalUses)
%187:i64 = add %177, %186 (hasExternalUses)
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197 (hasExternalUses)
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202 (hasExternalUses)
%204:i64 = shl %202, 21:i64
%205:i64 = lshr %202, 43:i64
%206:i64 = or %204, %205
%207:i64 = xor %203, %206 (hasExternalUses)
%208:i64 = lshr %207, 48:i64
infer %208


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 42435
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185 (hasExternalUses)
%187:i64 = add %177, %186 (hasExternalUses)
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197 (hasExternalUses)
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202 (hasExternalUses)
%204:i64 = shl %202, 21:i64
%205:i64 = lshr %202, 43:i64
%206:i64 = or %204, %205
%207:i64 = xor %203, %206 (hasExternalUses)
%208:i64 = shl %207, 16:i64
%209:i64 = lshr %207, 48:i64
%210:i64 = or %208, %209
infer %210


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -4987172615141612093
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198 (hasExternalUses)
%200:i64 = add %190, %199 (hasExternalUses)
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210 (hasExternalUses)
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215 (hasExternalUses)
%217:i64 = shl %215, 16:i64
%218:i64 = lshr %215, 48:i64
%219:i64 = or %217, %218
%220:i64 = xor %216, %219
infer %220


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 8749224664037041176
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211 (hasExternalUses)
%213:i64 = add %203, %212 (hasExternalUses)
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223 (hasExternalUses)
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227 (hasExternalUses)
%229:i64 = add %216, %228
infer %229


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 3818842692037886967
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198 (hasExternalUses)
%200:i64 = add %190, %199 (hasExternalUses)
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210 (hasExternalUses)
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215 (hasExternalUses)
%217:i64 = shl %215, 16:i64
%218:i64 = lshr %215, 48:i64
%219:i64 = or %217, %218
%220:i64 = xor %216, %219 (hasExternalUses)
%221:i64 = shl %220, 21:i64
infer %221


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -5818650218148659200
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198 (hasExternalUses)
%200:i64 = add %190, %199 (hasExternalUses)
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210 (hasExternalUses)
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215 (hasExternalUses)
%217:i64 = shl %215, 16:i64
%218:i64 = lshr %215, 48:i64
%219:i64 = or %217, %218
%220:i64 = xor %216, %219 (hasExternalUses)
%221:i64 = lshr %220, 43:i64
infer %221


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 994671
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198 (hasExternalUses)
%200:i64 = add %190, %199 (hasExternalUses)
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210 (hasExternalUses)
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214
%216:i64 = add %203, %215 (hasExternalUses)
%217:i64 = shl %215, 16:i64
%218:i64 = lshr %215, 48:i64
%219:i64 = or %217, %218
%220:i64 = xor %216, %219 (hasExternalUses)
%221:i64 = shl %220, 21:i64
%222:i64 = lshr %220, 43:i64
%223:i64 = or %221, %222
infer %223


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -5818650218147664529
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211 (hasExternalUses)
%213:i64 = add %203, %212 (hasExternalUses)
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223 (hasExternalUses)
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227
%229:i64 = add %216, %228 (hasExternalUses)
%230:i64 = shl %228, 21:i64
%231:i64 = lshr %228, 43:i64
%232:i64 = or %230, %231
%233:i64 = xor %229, %232
infer %233


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -7223983506176807272
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201 (hasExternalUses)
%203:i64 = add %190, %202 (hasExternalUses)
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207 (hasExternalUses)
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211 (hasExternalUses)
%213:i64 = add %203, %212 (hasExternalUses)
%214:i64 = shl %213, 32:i64

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214 (hasExternalUses)
%216:i64 = add %203, %215 (hasExternalUses)
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220 (hasExternalUses)
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224 (hasExternalUses)
%226:i64 = add %216, %225
infer %226


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -4342550143376521837
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201 (hasExternalUses)
%203:i64 = add %190, %202 (hasExternalUses)
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207 (hasExternalUses)
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212 (hasExternalUses)
%214:i64 = shl %212, 13:i64
%215:i64 = lshr %212, 51:i64
%216:i64 = or %214, %215
%217:i64 = xor %213, %216 (hasExternalUses)
%218:i64 = shl %217, 17:i64
infer %218


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 6351772661108965376
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201 (hasExternalUses)
%203:i64 = add %190, %202 (hasExternalUses)
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207 (hasExternalUses)
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212 (hasExternalUses)
%214:i64 = shl %212, 13:i64
%215:i64 = lshr %212, 51:i64
%216:i64 = or %214, %215
%217:i64 = xor %213, %216 (hasExternalUses)
%218:i64 = lshr %217, 47:i64
infer %218


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 53
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201 (hasExternalUses)
%203:i64 = add %190, %202 (hasExternalUses)
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207 (hasExternalUses)
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212 (hasExternalUses)
%214:i64 = shl %212, 13:i64
%215:i64 = lshr %212, 51:i64
%216:i64 = or %214, %215
%217:i64 = xor %213, %216 (hasExternalUses)
%218:i64 = shl %217, 17:i64
%219:i64 = lshr %217, 47:i64
%220:i64 = or %218, %219
infer %220


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 6351772661108965429
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214 (hasExternalUses)
%216:i64 = add %203, %215 (hasExternalUses)
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220 (hasExternalUses)
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225 (hasExternalUses)
%227:i64 = shl %225, 17:i64
%228:i64 = lshr %225, 47:i64
%229:i64 = or %227, %228
%230:i64 = xor %226, %229
infer %230


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -7234419059070564954
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214 (hasExternalUses)
%216:i64 = add %203, %215 (hasExternalUses)
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220 (hasExternalUses)
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224 (hasExternalUses)
%226:i64 = add %216, %225 (hasExternalUses)
%227:i64 = shl %226, 32:i64
infer %227


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 340168638273159168
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214 (hasExternalUses)
%216:i64 = add %203, %215 (hasExternalUses)
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220 (hasExternalUses)
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224 (hasExternalUses)
%226:i64 = add %216, %225 (hasExternalUses)
%227:i64 = lshr %226, 32:i64
infer %227


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 3283888551
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214 (hasExternalUses)
%216:i64 = add %203, %215 (hasExternalUses)
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220 (hasExternalUses)
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224 (hasExternalUses)
%226:i64 = add %216, %225 (hasExternalUses)
%227:i64 = shl %226, 32:i64
%228:i64 = lshr %226, 32:i64
%229:i64 = or %227, %228
infer %229


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 340168641557047719
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227 (hasExternalUses)
%229:i64 = add %216, %228 (hasExternalUses)
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233 (hasExternalUses)
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237 (hasExternalUses)
%239:i64 = add %229, %238
infer %239


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -3415576367032677987
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214 (hasExternalUses)
%216:i64 = add %203, %215 (hasExternalUses)
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220 (hasExternalUses)
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225 (hasExternalUses)
%227:i64 = shl %225, 17:i64
%228:i64 = lshr %225, 47:i64
%229:i64 = or %227, %228
%230:i64 = xor %226, %229 (hasExternalUses)
%231:i64 = shl %230, 13:i64
infer %231


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 5027776922721239040
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214 (hasExternalUses)
%216:i64 = add %203, %215 (hasExternalUses)
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220 (hasExternalUses)
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225 (hasExternalUses)
%227:i64 = shl %225, 17:i64
%228:i64 = lshr %225, 47:i64
%229:i64 = or %227, %228
%230:i64 = xor %226, %229 (hasExternalUses)
%231:i64 = lshr %230, 51:i64
infer %231


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 4979
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 7816392313619706465:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = xor %4, %5
%7:i64 = add %3, %6
%8:i64 = var
%9:i64 = var
%10:i64 = add %8, %9
%11:i64 = shl %9, 13:i64
%12:i64 = lshr %9, 51:i64
%13:i64 = or %11, %12
%14:i64 = xor %10, %13
%15:i64 = add %7, %14
%16:i64 = shl %15, 32:i64
%17:i64 = lshr %15, 32:i64
%18:i64 = or %16, %17
%19:i64 = shl %10, 32:i64
%20:i64 = lshr %10, 32:i64
%21:i64 = or %19, %20
%22:i64 = shl %6, 16:i64
%23:i64 = lshr %6, 48:i64
%24:i64 = or %22, %23
%25:i64 = xor %7, %24
%26:i64 = add %21, %25
%27:i64 = shl %25, 21:i64
%28:i64 = lshr %25, 43:i64
%29:i64 = or %27, %28
%30:i64 = xor %26, %29
%31:i64 = add %18, %30
%32:i64 = shl %14, 17:i64
%33:i64 = lshr %14, 47:i64
%34:i64 = or %32, %33
%35:i64 = xor %15, %34
%36:i64 = add %26, %35
%37:i64 = shl %35, 13:i64
%38:i64 = lshr %35, 51:i64
%39:i64 = or %37, %38
%40:i64 = xor %36, %39
%41:i64 = add %31, %40
%42:i64 = shl %41, 32:i64
%43:i64 = lshr %41, 32:i64
%44:i64 = or %42, %43
%45:i64 = phi %0, %2, %44
%46:i64 = var
%47:i64 = xor 8387220255154660723:i64, %46
%48:i64 = shl %36, 32:i64
%49:i64 = lshr %36, 32:i64
%50:i64 = or %48, %49
%51:i64 = shl %30, 16:i64
%52:i64 = lshr %30, 48:i64
%53:i64 = or %51, %52
%54:i64 = xor %31, %53
%55:i64 = add %50, %54
%56:i64 = shl %54, 21:i64
%57:i64 = lshr %54, 43:i64
%58:i64 = or %56, %57
%59:i64 = xor %55, %58
%60:i64 = phi %0, %47, %59
%61 = block 2
%62:i64 = var
%63:i64 = shl %62, 56:i64
%64 = block 2
%65 = block 2
%66 = block 2
%67 = block 2
%68 = block 2
%69 = block 2
%70:i8 = var
%71:i64 = zext %70
%72:i64 = shlnw %71, 48:i64
%73:i64 = or %63, %72
%74:i64 = phi %69, %63, %73
%75:i8 = var
%76:i64 = zext %75
%77:i64 = shlnw %76, 40:i64
%78:i64 = or %74, %77
%79:i64 = phi %68, %63, %78
%80:i8 = var
%81:i64 = zext %80
%82:i64 = shlnw %81, 32:i64
%83:i64 = or %79, %82
%84:i64 = phi %67, %63, %83
%85:i8 = var
%86:i64 = zext %85
%87:i64 = shlnw %86, 24:i64
%88:i64 = or %84, %87
%89:i64 = phi %66, %63, %88
%90:i8 = var
%91:i64 = zext %90
%92:i64 = shlnw %91, 16:i64
%93:i64 = or %89, %92
%94:i64 = phi %65, %63, %93
%95:i8 = var
%96:i64 = zext %95
%97:i64 = shlnw %96, 8:i64
%98:i64 = or %94, %97
%99:i64 = phi %64, %63, %98
%100:i8 = var
%101:i64 = zext %100
%102:i64 = or %99, %101
%103:i64 = phi %61, %63, %102
%104:i64 = xor %60, %103
%105:i64 = add %45, %104
%106:i64 = xor 7237128888997146499:i64, %46
%107:i64 = shl %40, 17:i64
%108:i64 = lshr %40, 47:i64
%109:i64 = or %107, %108
%110:i64 = xor %41, %109
%111:i64 = phi %0, %106, %110
%112:i64 = xor 8317987319222330741:i64, %1
%113:i64 = xor %5, %55
%114:i64 = phi %0, %112, %113
%115:i64 = add %111, %114
%116:i64 = shl %111, 13:i64
%117:i64 = lshr %111, 51:i64
%118:i64 = or %116, %117
%119:i64 = xor %115, %118
%120:i64 = add %105, %119
%121:i64 = shl %120, 32:i64
%122:i64 = lshr %120, 32:i64
%123:i64 = or %121, %122
%124:i64 = shl %115, 32:i64
%125:i64 = lshr %115, 32:i64
%126:i64 = or %124, %125
%127:i64 = shl %104, 16:i64
%128:i64 = lshr %104, 48:i64
%129:i64 = or %127, %128
%130:i64 = xor %105, %129
%131:i64 = add %126, %130
%132:i64 = shl %130, 21:i64
%133:i64 = lshr %130, 43:i64
%134:i64 = or %132, %133
%135:i64 = xor %131, %134
%136:i64 = add %123, %135
%137:i64 = shl %119, 17:i64
%138:i64 = lshr %119, 47:i64
%139:i64 = or %137, %138
%140:i64 = xor %120, %139
%141:i64 = add %131, %140
%142:i64 = shl %140, 13:i64
%143:i64 = lshr %140, 51:i64
%144:i64 = or %142, %143
%145:i64 = xor %141, %144
%146:i64 = add %136, %145
%147:i64 = shl %146, 32:i64
%148:i64 = lshr %146, 32:i64
%149:i64 = or %147, %148
%150:i64 = xor 238:i64, %149
%151:i64 = shl %141, 32:i64
%152:i64 = lshr %141, 32:i64
%153:i64 = or %151, %152
%154:i64 = shl %135, 16:i64
%155:i64 = lshr %135, 48:i64
%156:i64 = or %154, %155
%157:i64 = xor %136, %156
%158:i64 = add %153, %157
%159:i64 = shl %157, 21:i64
%160:i64 = lshr %157, 43:i64
%161:i64 = or %159, %160
%162:i64 = xor %158, %161
%163:i64 = add %150, %162
%164:i64 = xor %103, %158
%165:i64 = shl %145, 17:i64
%166:i64 = lshr %145, 47:i64
%167:i64 = or %165, %166
%168:i64 = xor %146, %167
%169:i64 = add %164, %168
%170:i64 = shl %168, 13:i64
%171:i64 = lshr %168, 51:i64
%172:i64 = or %170, %171
%173:i64 = xor %169, %172
%174:i64 = add %163, %173
%175:i64 = shl %174, 32:i64
%176:i64 = lshr %174, 32:i64
%177:i64 = or %175, %176
%178:i64 = shl %169, 32:i64
%179:i64 = lshr %169, 32:i64
%180:i64 = or %178, %179
%181:i64 = shl %162, 16:i64
%182:i64 = lshr %162, 48:i64
%183:i64 = or %181, %182
%184:i64 = xor %163, %183
%185:i64 = add %180, %184
%186:i64 = shl %184, 21:i64
%187:i64 = lshr %184, 43:i64
%188:i64 = or %186, %187
%189:i64 = xor %185, %188
%190:i64 = add %177, %189
%191:i64 = shl %173, 17:i64
%192:i64 = lshr %173, 47:i64
%193:i64 = or %191, %192
%194:i64 = xor %174, %193
%195:i64 = add %185, %194
%196:i64 = shl %194, 13:i64
%197:i64 = lshr %194, 51:i64
%198:i64 = or %196, %197
%199:i64 = xor %195, %198
%200:i64 = add %190, %199
%201:i64 = shl %200, 32:i64
%202:i64 = lshr %200, 32:i64
%203:i64 = or %201, %202
%204:i64 = shl %195, 32:i64
%205:i64 = lshr %195, 32:i64
%206:i64 = or %204, %205
%207:i64 = shl %189, 16:i64
%208:i64 = lshr %189, 48:i64
%209:i64 = or %207, %208
%210:i64 = xor %190, %209
%211:i64 = add %206, %210
%212:i64 = shl %210, 21:i64
%213:i64 = lshr %210, 43:i64
%214:i64 = or %212, %213
%215:i64 = xor %211, %214 (hasExternalUses)
%216:i64 = add %203, %215 (hasExternalUses)
%217:i64 = shl %199, 17:i64
%218:i64 = lshr %199, 47:i64
%219:i64 = or %217, %218
%220:i64 = xor %200, %219
%221:i64 = add %211, %220 (hasExternalUses)
%222:i64 = shl %220, 13:i64
%223:i64 = lshr %220, 51:i64
%224:i64 = or %222, %223
%225:i64 = xor %221, %224
%226:i64 = add %216, %225 (hasExternalUses)
%227:i64 = shl %225, 17:i64
%228:i64 = lshr %225, 47:i64
%229:i64 = or %227, %228
%230:i64 = xor %226, %229 (hasExternalUses)
%231:i64 = shl %230, 13:i64
%232:i64 = lshr %230, 51:i64
%233:i64 = or %231, %232
infer %233


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 5027776922721244019
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = shl %1, 56:i64
%3 = block 2
%4 = block 2
%5 = block 2
%6 = block 2
%7 = block 2
%8 = block 2
%9:i8 = var
%10:i64 = zext %9
%11:i64 = shlnw %10, 48:i64
%12:i64 = or %2, %11
%13:i64 = phi %8, %2, %12
%14:i8 = var
%15:i64 = zext %14
%16:i64 = shlnw %15, 40:i64
%17:i64 = or %13, %16
%18:i64 = phi %7, %2, %17
%19:i8 = var
%20:i64 = zext %19
%21:i64 = shlnw %20, 32:i64
%22:i64 = or %18, %21
%23:i64 = phi %6, %2, %22
%24:i8 = var
%25:i64 = zext %24
%26:i64 = shlnw %25, 24:i64
%27:i64 = or %23, %26
%28:i64 = phi %5, %2, %27
%29:i8 = var
%30:i64 = zext %29
%31:i64 = shlnw %30, 16:i64
%32:i64 = or %28, %31
%33:i64 = phi %4, %2, %32
%34:i8 = var
%35:i64 = zext %34
%36:i64 = shlnw %35, 8:i64
%37:i64 = or %33, %36
%38:i64 = phi %3, %2, %37
%39:i8 = var
%40:i64 = zext %39
%41:i64 = or %38, %40
%42:i64 = phi %0, %2, %41
%43 = block 2
%44:i64 = var
%45:i64 = xor 7237128888997146499:i64, %44
%46:i64 = var
%47:i64 = var
%48:i64 = var
%49:i64 = xor %47, %48
%50:i64 = add %46, %49
%51:i64 = var
%52:i64 = var
%53:i64 = add %51, %52
%54:i64 = shl %52, 13:i64
%55:i64 = lshr %52, 51:i64
%56:i64 = or %54, %55
%57:i64 = xor %53, %56
%58:i64 = add %50, %57
%59:i64 = shl %58, 32:i64
%60:i64 = lshr %58, 32:i64
%61:i64 = or %59, %60
%62:i64 = shl %53, 32:i64
%63:i64 = lshr %53, 32:i64
%64:i64 = or %62, %63
%65:i64 = shl %49, 16:i64
%66:i64 = lshr %49, 48:i64
%67:i64 = or %65, %66
%68:i64 = xor %50, %67
%69:i64 = add %64, %68
%70:i64 = shl %68, 21:i64
%71:i64 = lshr %68, 43:i64
%72:i64 = or %70, %71
%73:i64 = xor %69, %72
%74:i64 = add %61, %73
%75:i64 = shl %57, 17:i64
%76:i64 = lshr %57, 47:i64
%77:i64 = or %75, %76
%78:i64 = xor %58, %77
%79:i64 = add %69, %78
%80:i64 = shl %78, 13:i64
%81:i64 = lshr %78, 51:i64
%82:i64 = or %80, %81
%83:i64 = xor %79, %82
%84:i64 = add %74, %83
%85:i64 = shl %83, 17:i64
%86:i64 = lshr %83, 47:i64
%87:i64 = or %85, %86
%88:i64 = xor %84, %87
%89:i64 = phi %43, %45, %88
%90:i64 = var
%91:i64 = xor 8317987319222330741:i64, %90
%92:i64 = shl %79, 32:i64
%93:i64 = lshr %79, 32:i64
%94:i64 = or %92, %93
%95:i64 = shl %73, 16:i64
%96:i64 = lshr %73, 48:i64
%97:i64 = or %95, %96
%98:i64 = xor %74, %97
%99:i64 = add %94, %98
%100:i64 = xor %48, %99
%101:i64 = phi %43, %91, %100
%102:i64 = add %89, %101
%103:i64 = shl %102, 32:i64
%104:i64 = lshr %102, 32:i64
%105:i64 = or %103, %104
%106:i64 = xor 7816392313619706465:i64, %90
%107:i64 = shl %84, 32:i64
%108:i64 = lshr %84, 32:i64
%109:i64 = or %107, %108
%110:i64 = phi %43, %106, %109
%111:i64 = xor 8387220255154660723:i64, %44
%112:i64 = shl %98, 21:i64
%113:i64 = lshr %98, 43:i64
%114:i64 = or %112, %113
%115:i64 = xor %99, %114
%116:i64 = phi %43, %111, %115
%117:i64 = xor %116, %42
%118:i64 = add %110, %117
%119:i64 = shl %117, 16:i64
%120:i64 = lshr %117, 48:i64
%121:i64 = or %119, %120
%122:i64 = xor %118, %121
%123:i64 = add %105, %122
%124:i64 = shl %89, 13:i64
%125:i64 = lshr %89, 51:i64
%126:i64 = or %124, %125
%127:i64 = xor %102, %126
%128:i64 = add %118, %127
%129:i64 = shl %127, 17:i64
%130:i64 = lshr %127, 47:i64
%131:i64 = or %129, %130
%132:i64 = xor %128, %131
%133:i64 = add %123, %132
%134:i64 = shl %133, 32:i64
%135:i64 = lshr %133, 32:i64
%136:i64 = or %134, %135
%137:i64 = shl %128, 32:i64
%138:i64 = lshr %128, 32:i64
%139:i64 = or %137, %138
%140:i64 = shl %122, 21:i64
%141:i64 = lshr %122, 43:i64
%142:i64 = or %140, %141
%143:i64 = xor %123, %142
%144:i64 = add %139, %143
%145:i64 = shl %143, 16:i64
%146:i64 = lshr %143, 48:i64
%147:i64 = or %145, %146
%148:i64 = xor %144, %147
%149:i64 = add %136, %148
%150:i64 = xor %42, %149
%151:i64 = shl %132, 13:i64
%152:i64 = lshr %132, 51:i64
%153:i64 = or %151, %152
%154:i64 = xor %133, %153
%155:i64 = add %144, %154
%156:i64 = shl %154, 17:i64
%157:i64 = lshr %154, 47:i64
%158:i64 = or %156, %157
%159:i64 = xor %155, %158
%160:i64 = add %150, %159
%161:i64 = shl %160, 32:i64
%162:i64 = lshr %160, 32:i64
%163:i64 = or %161, %162
%164:i64 = shl %155, 32:i64
%165:i64 = lshr %155, 32:i64
%166:i64 = or %164, %165
%167:i64 = xor 238:i64, %166
%168:i64 = shl %148, 21:i64
%169:i64 = lshr %148, 43:i64
%170:i64 = or %168, %169
%171:i64 = xor %149, %170
%172:i64 = add %167, %171
%173:i64 = shl %171, 16:i64
%174:i64 = lshr %171, 48:i64
%175:i64 = or %173, %174
%176:i64 = xor %172, %175
%177:i64 = add %163, %176
%178:i64 = shl %159, 13:i64
%179:i64 = lshr %159, 51:i64
%180:i64 = or %178, %179
%181:i64 = xor %160, %180
%182:i64 = add %172, %181
%183:i64 = shl %181, 17:i64
%184:i64 = lshr %181, 47:i64
%185:i64 = or %183, %184
%186:i64 = xor %182, %185
%187:i64 = add %177, %186
%188:i64 = shl %187, 32:i64
%189:i64 = lshr %187, 32:i64
%190:i64 = or %188, %189
%191:i64 = shl %182, 32:i64
%192:i64 = lshr %182, 32:i64
%193:i64 = or %191, %192
%194:i64 = shl %176, 21:i64
%195:i64 = lshr %176, 43:i64
%196:i64 = or %194, %195
%197:i64 = xor %177, %196
%198:i64 = add %193, %197
%199:i64 = shl %197, 16:i64
%200:i64 = lshr %197, 48:i64
%201:i64 = or %199, %200
%202:i64 = xor %198, %201
%203:i64 = add %190, %202
%204:i64 = shl %186, 13:i64
%205:i64 = lshr %186, 51:i64
%206:i64 = or %204, %205
%207:i64 = xor %187, %206
%208:i64 = add %198, %207
%209:i64 = shl %207, 17:i64
%210:i64 = lshr %207, 47:i64
%211:i64 = or %209, %210
%212:i64 = xor %208, %211
%213:i64 = add %203, %212
%214:i64 = shl %213, 32:i64
%215:i64 = lshr %213, 32:i64
%216:i64 = or %214, %215
%217:i64 = shl %208, 32:i64
%218:i64 = lshr %208, 32:i64
%219:i64 = or %217, %218
%220:i64 = shl %202, 21:i64
%221:i64 = lshr %202, 43:i64
%222:i64 = or %220, %221
%223:i64 = xor %203, %222
%224:i64 = add %219, %223
%225:i64 = shl %223, 16:i64
%226:i64 = lshr %223, 48:i64
%227:i64 = or %225, %226
%228:i64 = xor %224, %227 (hasExternalUses)
%229:i64 = add %216, %228 (hasExternalUses)
%230:i64 = shl %212, 13:i64
%231:i64 = lshr %212, 51:i64
%232:i64 = or %230, %231
%233:i64 = xor %213, %232
%234:i64 = add %224, %233 (hasExternalUses)
%235:i64 = shl %233, 17:i64
%236:i64 = lshr %233, 47:i64
%237:i64 = or %235, %236
%238:i64 = xor %234, %237
%239:i64 = add %229, %238 (hasExternalUses)
%240:i64 = shl %238, 13:i64
%241:i64 = lshr %238, 51:i64
%242:i64 = or %240, %241
%243:i64 = xor %239, %242
infer %243


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
