; entering Souper's runOnFunction() for argon2_initialize()

; ModuleID = './argon2-core.c.bc'
source_filename = "crypto_pwhash/argon2/argon2-core.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.Argon2_Context = type { i8*, i32, i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32, i32, i32, i32 }
%struct.Argon2_instance_t = type { %struct.block_region_*, i64*, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.block_region_ = type { i8*, %struct.block_*, i32 }
%struct.block_ = type { [128 x i64] }
%struct.Argon2_position_t = type { i32, i32, i8, i32 }
%struct.crypto_generichash_blake2b_state = type { [384 x i8] }

@errno = external thread_local local_unnamed_addr global i32, align 4

; Function Attrs: nounwind
define hidden void @argon2_finalize(%struct.Argon2_Context* readonly %0, %struct.Argon2_instance_t* %1) local_unnamed_addr #0 {
  %3 = alloca %struct.block_, align 8
  %4 = bitcast %struct.block_* %3 to i8*
  %5 = alloca [1024 x i8], align 16
  %6 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i32 0, i32 0
  %7 = icmp ne %struct.Argon2_Context* %0, null
  %8 = icmp ne %struct.Argon2_instance_t* %1, null
  %9 = and i1 %7, %8
  br i1 %9, label %10, label %51

10:                                               ; preds = %2
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %4) #8
  %11 = getelementptr inbounds %struct.Argon2_instance_t, %struct.Argon2_instance_t* %1, i32 0, i32 0
  %12 = load %struct.block_region_*, %struct.block_region_** %11, align 4
  %13 = getelementptr inbounds %struct.block_region_, %struct.block_region_* %12, i32 0, i32 1
  %14 = load %struct.block_*, %struct.block_** %13, align 4
  %15 = getelementptr inbounds %struct.Argon2_instance_t, %struct.Argon2_instance_t* %1, i32 0, i32 6
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr %struct.block_, %struct.block_* %14, i32 %16
  %18 = getelementptr %struct.block_, %struct.block_* %17, i32 -1
  %19 = bitcast %struct.block_* %18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 8 dereferenceable(1024) %4, i8* nonnull align 8 dereferenceable(1024) %19, i32 1024, i1 false) #8
  %20 = getelementptr inbounds %struct.Argon2_instance_t, %struct.Argon2_instance_t* %1, i32 0, i32 7
  %21 = load i32, i32* %20, align 4
  %22 = icmp ugt i32 %21, 1
  br i1 %22, label %23, label %42

23:                                               ; preds = %10
  %24 = add i32 %16, -1
  br label %25

25:                                               ; preds = %23, %39
  %26 = phi i32 [ 1, %23 ], [ %40, %39 ]
  %27 = mul i32 %26, %16
  %28 = add i32 %24, %27
  %29 = load %struct.block_*, %struct.block_** %13, align 4
  br label %30

30:                                               ; preds = %30, %25
  %31 = phi i32 [ 0, %25 ], [ %37, %30 ]
  %32 = getelementptr %struct.block_, %struct.block_* %29, i32 %28, i32 0, i32 %31
  %33 = load i64, i64* %32, align 8
  %34 = getelementptr %struct.block_, %struct.block_* %3, i32 0, i32 0, i32 %31
  %35 = load i64, i64* %34, align 8
  %36 = xor i64 %35, %33
  store i64 %36, i64* %34, align 8
  %37 = add nuw nsw i32 %31, 1
  %38 = icmp eq i32 %37, 128
  br i1 %38, label %39, label %30

39:                                               ; preds = %30
  %40 = add nuw i32 %26, 1
  %41 = icmp ult i32 %40, %21
  br i1 %41, label %25, label %42

42:                                               ; preds = %39, %10
  %43 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %43) #8
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 16 dereferenceable(1024) %6, i8* nonnull align 8 dereferenceable(1024) %4, i32 1024, i1 false)
  %44 = getelementptr inbounds %struct.Argon2_Context, %struct.Argon2_Context* %0, i32 0, i32 0
  %45 = load i8*, i8** %44, align 4
  %46 = getelementptr inbounds %struct.Argon2_Context, %struct.Argon2_Context* %0, i32 0, i32 1
  %47 = load i32, i32* %46, align 4
  %48 = call i32 @blake2b_long(i8* %45, i32 %47, i8* nonnull %43, i32 1024) #8
  call void @sodium_memzero(i8* nonnull %4, i32 1024) #8
  call void @sodium_memzero(i8* nonnull %43, i32 1024) #8
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %43) #8
  %49 = getelementptr inbounds %struct.Argon2_Context, %struct.Argon2_Context* %0, i32 0, i32 14
  %50 = load i32, i32* %49, align 4
  call fastcc void @argon2_free_instance(%struct.Argon2_instance_t* nonnull %1, i32 %50)
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %4) #8
  br label %51

51:                                               ; preds = %42, %2
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #1

declare i32 @blake2b_long(i8* %0, i32 %1, i8* %2, i32 %3) local_unnamed_addr #2

declare void @sodium_memzero(i8* %0, i32 %1) local_unnamed_addr #2

; Function Attrs: nounwind
define internal fastcc void @argon2_free_instance(%struct.Argon2_instance_t* nocapture %0, i32 %1) unnamed_addr #0 {
  %3 = and i32 %1, 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %25, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.Argon2_instance_t, %struct.Argon2_instance_t* %0, i32 0, i32 0
  %7 = load %struct.block_region_*, %struct.block_region_** %6, align 4
  %8 = icmp eq %struct.block_region_* %7, null
  br i1 %8, label %16, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.block_region_, %struct.block_region_* %7, i32 0, i32 1
  %11 = bitcast %struct.block_** %10 to i8**
  %12 = load i8*, i8** %11, align 4
  %13 = getelementptr inbounds %struct.Argon2_instance_t, %struct.Argon2_instance_t* %0, i32 0, i32 4
  %14 = load i32, i32* %13, align 4
  %15 = shl i32 %14, 10
  tail call void @sodium_memzero(i8* %12, i32 %15) #8
  br label %16

16:                                               ; preds = %9, %5
  %17 = getelementptr inbounds %struct.Argon2_instance_t, %struct.Argon2_instance_t* %0, i32 0, i32 1
  %18 = load i64*, i64** %17, align 4
  %19 = icmp eq i64* %18, null
  br i1 %19, label %25, label %20

20:                                               ; preds = %16
  %21 = bitcast i64* %18 to i8*
  %22 = getelementptr inbounds %struct.Argon2_instance_t, %struct.Argon2_instance_t* %0, i32 0, i32 5
  %23 = load i32, i32* %22, align 4
  %24 = shl i32 %23, 3
  tail call void @sodium_memzero(i8* nonnull %21, i32 %24) #8
  br label %25

25:                                               ; preds = %2, %16, %20
  %26 = getelementptr inbounds %struct.Argon2_instance_t, %struct.Argon2_instance_t* %0, i32 0, i32 1
  %27 = bitcast i64** %26 to i8**
  %28 = load i8*, i8** %27, align 4
  tail call void @free(i8* %28)
  store i64* null, i64** %26, align 4
  %29 = getelementptr inbounds %struct.Argon2_instance_t, %struct.Argon2_instance_t* %0, i32 0, i32 0
  %30 = load %struct.block_region_*, %struct.block_region_** %29, align 4
  %31 = icmp eq %struct.block_region_* %30, null
  br i1 %31, label %37, label %32

32:                                               ; preds = %25
  %33 = getelementptr inbounds %struct.block_region_, %struct.block_region_* %30, i32 0, i32 0
  %34 = load i8*, i8** %33, align 4
  %35 = icmp eq i8* %34, null
  br i1 %35, label %37, label %36

36:                                               ; preds = %32
  tail call void @free(i8* nonnull %34) #8
  br label %37

37:                                               ; preds = %25, %32, %36
  %38 = bitcast %struct.block_region_* %30 to i8*
  tail call void @free(i8* %38) #8
  store %struct.block_region_* null, %struct.block_region_** %29, align 4
  ret void
}

; Function Attrs: nounwind
define hidden void @argon2_fill_memory_blocks(%struct.Argon2_instance_t* %0, i32 %1) local_unnamed_addr #0 {
  %3 = alloca %struct.Argon2_position_t, align 4
  %4 = bitcast %struct.Argon2_position_t* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #8
  %5 = icmp eq %struct.Argon2_instance_t* %0, null
  br i1 %5, label %23, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.Argon2_instance_t, %struct.Argon2_instance_t* %0, i32 0, i32 7
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %23, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.Argon2_position_t, %struct.Argon2_position_t* %3, i32 0, i32 0
  store i32 %1, i32* %11, align 4
  %12 = getelementptr inbounds %struct.Argon2_position_t, %struct.Argon2_position_t* %3, i32 0, i32 2
  %13 = getelementptr inbounds %struct.Argon2_position_t, %struct.Argon2_position_t* %3, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Argon2_position_t, %struct.Argon2_position_t* %3, i32 0, i32 3
  store i8 0, i8* %12, align 4
  br label %15

15:                                               ; preds = %10, %15
  %16 = phi i32 [ %17, %15 ], [ 0, %10 ]
  store i32 %16, i32* %13, align 4
  store i32 0, i32* %14, align 4
  tail call void @argon2_fill_segment_ref(%struct.Argon2_instance_t* nonnull %0, %struct.Argon2_position_t* nonnull byval(%struct.Argon2_position_t) align 4 %3) #8
  %17 = add nuw i32 %16, 1
  %18 = load i32, i32* %7, align 4
  %19 = icmp ult i32 %17, %18
  br i1 %19, label %15, label %20

20:                                               ; preds = %15
  %21 = icmp eq i32 %18, 0
  store i8 1, i8* %12, align 4
  br i1 %21, label %22, label %24

22:                                               ; preds = %20
  store i8 2, i8* %12, align 4
  br label %36

23:                                               ; preds = %39, %37, %36, %2, %6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #8
  ret void

24:                                               ; preds = %20, %24
  %25 = phi i32 [ %26, %24 ], [ 0, %20 ]
  store i32 %25, i32* %13, align 4
  store i32 0, i32* %14, align 4
  tail call void @argon2_fill_segment_ref(%struct.Argon2_instance_t* nonnull %0, %struct.Argon2_position_t* nonnull byval(%struct.Argon2_position_t) align 4 %3) #8
  %26 = add nuw i32 %25, 1
  %27 = load i32, i32* %7, align 4
  %28 = icmp ult i32 %26, %27
  br i1 %28, label %24, label %29

29:                                               ; preds = %24
  %30 = icmp eq i32 %27, 0
  store i8 2, i8* %12, align 4
  br i1 %30, label %36, label %31

31:                                               ; preds = %29, %31
  %32 = phi i32 [ %33, %31 ], [ 0, %29 ]
  store i32 %32, i32* %13, align 4
  store i32 0, i32* %14, align 4
  tail call void @argon2_fill_segment_ref(%struct.Argon2_instance_t* nonnull %0, %struct.Argon2_position_t* nonnull byval(%struct.Argon2_position_t) align 4 %3) #8
  %33 = add nuw i32 %32, 1
  %34 = load i32, i32* %7, align 4
  %35 = icmp ult i32 %33, %34
  br i1 %35, label %31, label %37

36:                                               ; preds = %29, %22
  store i8 3, i8* %12, align 4
  br label %23

37:                                               ; preds = %31
  %38 = icmp eq i32 %34, 0
  store i8 3, i8* %12, align 4
  br i1 %38, label %23, label %39

39:                                               ; preds = %37, %39
  %40 = phi i32 [ %41, %39 ], [ 0, %37 ]
  store i32 %40, i32* %13, align 4
  store i32 0, i32* %14, align 4
  tail call void @argon2_fill_segment_ref(%struct.Argon2_instance_t* nonnull %0, %struct.Argon2_position_t* nonnull byval(%struct.Argon2_position_t) align 4 %3) #8
  %41 = add nuw i32 %40, 1
  %42 = load i32, i32* %7, align 4
  %43 = icmp ult i32 %41, %42
  br i1 %43, label %39, label %23
}

; Function Attrs: norecurse nounwind readonly
define hidden i32 @argon2_validate_inputs(%struct.Argon2_Context* readonly %0) local_unnamed_addr #3 {
  %2 = icmp eq %struct.Argon2_Context* %0, null
  br i1 %2, label %72, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.Argon2_Context, %struct.Argon2_Context* %0, i32 0, i32 0
  %5 = load i8*, i8** %4, align 4
  %6 = icmp eq i8* %5, null
  br i1 %6, label %72, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.Argon2_Context, %struct.Argon2_Context* %0, i32 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = icmp ult i32 %9, 16
  br i1 %10, label %72, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.Argon2_Context, %struct.Argon2_Context* %0, i32 0, i32 2
  %13 = load i8*, i8** %12, align 4
  %14 = icmp eq i8* %13, null
  br i1 %14, label %15, label %19

15:                                               ; preds = %11
  %16 = getelementptr inbounds %struct.Argon2_Context, %struct.Argon2_Context* %0, i32 0, i32 3
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %72

19:                                               ; preds = %15, %11
  %20 = getelementptr inbounds %struct.Argon2_Context, %struct.Argon2_Context* %0, i32 0, i32 4
  %21 = load i8*, i8** %20, align 4
  %22 = icmp eq i8* %21, null
  %23 = getelementptr inbounds %struct.Argon2_Context, %struct.Argon2_Context* %0, i32 0, i32 5
  %24 = load i32, i32* %23, align 4
  br i1 %22, label %25, label %28

25:                                               ; preds = %19
  %26 = icmp eq i32 %24, 0
  %27 = select i1 %26, i32 -6, i32 -19
  ret i32 %27

28:                                               ; preds = %19
  %29 = icmp ult i32 %24, 8
  br i1 %29, label %72, label %30

30:                                               ; preds = %28
  %31 = getelementptr inbounds %struct.Argon2_Context, %struct.Argon2_Context* %0, i32 0, i32 6
  %32 = load i8*, i8** %31, align 4
  %33 = icmp eq i8* %32, null
  br i1 %33, label %34, label %38

34:                                               ; preds = %30
  %35 = getelementptr inbounds %struct.Argon2_Context, %struct.Argon2_Context* %0, i32 0, i32 7
  %36 = load i32, i32* %35, align 4
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %72

38:                                               ; preds = %30, %34
  %39 = getelementptr inbounds %struct.Argon2_Context, %struct.Argon2_Context* %0, i32 0, i32 8
  %40 = load i8*, i8** %39, align 4
  %41 = icmp eq i8* %40, null
  br i1 %41, label %42, label %46

42:                                               ; preds = %38
  %43 = getelementptr inbounds %struct.Argon2_Context, %struct.Argon2_Context* %0, i32 0, i32 9
  %44 = load i32, i32* %43, align 4
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %72

46:                                               ; preds = %38, %42
  %47 = getelementptr inbounds %struct.Argon2_Context, %struct.Argon2_Context* %0, i32 0, i32 11
  %48 = load i32, i32* %47, align 4
  %49 = icmp ult i32 %48, 8
  br i1 %49, label %72, label %50

50:                                               ; preds = %46
  %51 = icmp ugt i32 %48, 2097152
  br i1 %51, label %72, label %52

52:                                               ; preds = %50
  %53 = getelementptr inbounds %struct.Argon2_Context, %struct.Argon2_Context* %0, i32 0, i32 12
  %54 = load i32, i32* %53, align 4
  %55 = shl i32 %54, 3
  %56 = icmp ult i32 %48, %55
  br i1 %56, label %72, label %57

57:                                               ; preds = %52
  %58 = getelementptr inbounds %struct.Argon2_Context, %struct.Argon2_Context* %0, i32 0, i32 10
  %59 = load i32, i32* %58, align 4
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %72, label %61

61:                                               ; preds = %57
  %62 = icmp eq i32 %54, 0
  br i1 %62, label %72, label %63

63:                                               ; preds = %61
  %64 = icmp ugt i32 %54, 16777215
  br i1 %64, label %72, label %65

65:                                               ; preds = %63
  %66 = getelementptr inbounds %struct.Argon2_Context, %struct.Argon2_Context* %0, i32 0, i32 13
  %67 = load i32, i32* %66, align 4
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %72, label %69

69:                                               ; preds = %65
  %70 = icmp ugt i32 %67, 16777215
  %71 = select i1 %70, i32 -29, i32 0
  br label %72

72:                                               ; preds = %69, %65, %63, %61, %57, %52, %50, %46, %42, %34, %28, %15, %7, %3, %1
  %73 = phi i32 [ -25, %1 ], [ -1, %3 ], [ -2, %7 ], [ -18, %15 ], [ -6, %28 ], [ -20, %34 ], [ -21, %42 ], [ -14, %46 ], [ -15, %50 ], [ -14, %52 ], [ -12, %57 ], [ -16, %61 ], [ -17, %63 ], [ -28, %65 ], [ %71, %69 ]
  ret i32 %73
}

; Function Attrs: nounwind
define hidden i32 @argon2_initialize(%struct.Argon2_instance_t* %0, %struct.Argon2_Context* %1) local_unnamed_addr #0 {
  %3 = alloca [1024 x i8], align 16
  %4 = alloca %struct.crypto_generichash_blake2b_state, align 64
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 4
  %7 = alloca [72 x i8], align 16
  %8 = getelementptr inbounds [72 x i8], [72 x i8]* %7, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %8) #8
  %9 = icmp eq %struct.Argon2_instance_t* %0, null
  %10 = icmp eq %struct.Argon2_Context* %1, null
  %11 = or i1 %9, %10
  br i1 %11, label %185, label %12

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.Argon2_instance_t, %struct.Argon2_instance_t* %0, i32 0, i32 5
  %14 = load i32, i32* %13, align 4
  %15 = shl i32 %14, 3
  %16 = tail call noalias i8* @malloc(i32 %15)
  %17 = getelementptr inbounds %struct.Argon2_instance_t, %struct.Argon2_instance_t* %0, i32 0, i32 1
  %18 = bitcast i64** %17 to i8**
  store i8* %16, i8** %18, align 4
  %19 = icmp eq i8* %16, null
  br i1 %19, label %185, label %20

20:                                               ; preds = %12
  %21 = getelementptr inbounds %struct.Argon2_instance_t, %struct.Argon2_instance_t* %0, i32 0, i32 0
  %22 = getelementptr inbounds %struct.Argon2_instance_t, %struct.Argon2_instance_t* %0, i32 0, i32 4
  %23 = load i32, i32* %22, align 4
  %24 = bitcast i8** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %24) #8
  %25 = shl i32 %23, 10
  %26 = icmp eq i32 %23, 0
  br i1 %26, label %46, label %27

27:                                               ; preds = %20
  %28 = udiv i32 %25, %23
  %29 = icmp eq i32 %28, 1024
  br i1 %29, label %30, label %46

30:                                               ; preds = %27
  %31 = tail call noalias dereferenceable_or_null(12) i8* @malloc(i32 12) #8
  %32 = bitcast %struct.Argon2_instance_t* %0 to i8**
  store i8* %31, i8** %32, align 4
  %33 = icmp eq i8* %31, null
  br i1 %33, label %46, label %34

34:                                               ; preds = %30
  %35 = getelementptr inbounds i8, i8* %31, i32 4
  %36 = bitcast i8* %35 to %struct.block_**
  store %struct.block_* null, %struct.block_** %36, align 4
  %37 = bitcast i8* %31 to i8**
  store i8* null, i8** %37, align 4
  %38 = call i32 @posix_memalign(i8** nonnull %6, i32 64, i32 %25) #8
  store i32 %38, i32* @errno, align 4
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %41, label %40

40:                                               ; preds = %34
  store i8* null, i8** %6, align 4
  br label %44

41:                                               ; preds = %34
  %42 = load i8*, i8** %6, align 4
  %43 = icmp eq i8* %42, null
  br i1 %43, label %44, label %49

44:                                               ; preds = %41, %40
  %45 = load i8*, i8** %32, align 4
  call void @free(i8* %45) #8
  store %struct.block_region_* null, %struct.block_region_** %21, align 4
  br label %46

46:                                               ; preds = %44, %27, %20, %30
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %24) #8
  %47 = getelementptr inbounds %struct.Argon2_Context, %struct.Argon2_Context* %1, i32 0, i32 14
  %48 = load i32, i32* %47, align 4
  call fastcc void @argon2_free_instance(%struct.Argon2_instance_t* nonnull %0, i32 %48)
  br label %185

49:                                               ; preds = %41
  %50 = ptrtoint i8* %42 to i32
  %51 = load %struct.block_region_*, %struct.block_region_** %21, align 4
  %52 = getelementptr inbounds %struct.block_region_, %struct.block_region_* %51, i32 0, i32 0
  store i8* %42, i8** %52, align 4
  %53 = load %struct.block_region_*, %struct.block_region_** %21, align 4
  %54 = getelementptr inbounds %struct.block_region_, %struct.block_region_* %53, i32 0, i32 1
  %55 = bitcast %struct.block_** %54 to i32*
  store i32 %50, i32* %55, align 4
  %56 = load %struct.block_region_*, %struct.block_region_** %21, align 4
  %57 = getelementptr inbounds %struct.block_region_, %struct.block_region_* %56, i32 0, i32 2
  store i32 %25, i32* %57, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %24) #8
  %58 = getelementptr inbounds %struct.Argon2_instance_t, %struct.Argon2_instance_t* %0, i32 0, i32 9
  %59 = load i32, i32* %58, align 4
  %60 = getelementptr inbounds %struct.crypto_generichash_blake2b_state, %struct.crypto_generichash_blake2b_state* %4, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 384, i8* nonnull %60) #8
  %61 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %61) #8
  %62 = call i32 @crypto_generichash_blake2b_init(%struct.crypto_generichash_blake2b_state* nonnull %4, i8* null, i32 0, i32 64) #8
  %63 = getelementptr inbounds %struct.Argon2_Context, %struct.Argon2_Context* %1, i32 0, i32 12
  %64 = load i32, i32* %63, align 4
  store i32 %64, i32* %5, align 4
  %65 = call i32 @crypto_generichash_blake2b_update(%struct.crypto_generichash_blake2b_state* nonnull %4, i8* nonnull %61, i64 4) #8
  %66 = getelementptr inbounds %struct.Argon2_Context, %struct.Argon2_Context* %1, i32 0, i32 1
  %67 = load i32, i32* %66, align 4
  store i32 %67, i32* %5, align 4
  %68 = call i32 @crypto_generichash_blake2b_update(%struct.crypto_generichash_blake2b_state* nonnull %4, i8* nonnull %61, i64 4) #8
  %69 = getelementptr inbounds %struct.Argon2_Context, %struct.Argon2_Context* %1, i32 0, i32 11
  %70 = load i32, i32* %69, align 4
  store i32 %70, i32* %5, align 4
  %71 = call i32 @crypto_generichash_blake2b_update(%struct.crypto_generichash_blake2b_state* nonnull %4, i8* nonnull %61, i64 4) #8
  %72 = getelementptr inbounds %struct.Argon2_Context, %struct.Argon2_Context* %1, i32 0, i32 10
  %73 = load i32, i32* %72, align 4
  store i32 %73, i32* %5, align 4
  %74 = call i32 @crypto_generichash_blake2b_update(%struct.crypto_generichash_blake2b_state* nonnull %4, i8* nonnull %61, i64 4) #8
  store i32 19, i32* %5, align 4
  %75 = call i32 @crypto_generichash_blake2b_update(%struct.crypto_generichash_blake2b_state* nonnull %4, i8* nonnull %61, i64 4) #8
  store i32 %59, i32* %5, align 4
  %76 = call i32 @crypto_generichash_blake2b_update(%struct.crypto_generichash_blake2b_state* nonnull %4, i8* nonnull %61, i64 4) #8
  %77 = getelementptr inbounds %struct.Argon2_Context, %struct.Argon2_Context* %1, i32 0, i32 3
  %78 = load i32, i32* %77, align 4
  store i32 %78, i32* %5, align 4
  %79 = call i32 @crypto_generichash_blake2b_update(%struct.crypto_generichash_blake2b_state* nonnull %4, i8* nonnull %61, i64 4) #8
  %80 = getelementptr inbounds %struct.Argon2_Context, %struct.Argon2_Context* %1, i32 0, i32 2
  %81 = load i8*, i8** %80, align 4
  %82 = icmp eq i8* %81, null
  br i1 %82, label %94, label %83

83:                                               ; preds = %49
  %84 = load i32, i32* %77, align 4
  %85 = zext i32 %84 to i64
  %86 = call i32 @crypto_generichash_blake2b_update(%struct.crypto_generichash_blake2b_state* nonnull %4, i8* nonnull %81, i64 %85) #8
  %87 = getelementptr inbounds %struct.Argon2_Context, %struct.Argon2_Context* %1, i32 0, i32 14
  %88 = load i32, i32* %87, align 4
  %89 = and i32 %88, 1
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %94, label %91

91:                                               ; preds = %83
  %92 = load i8*, i8** %80, align 4
  %93 = load i32, i32* %77, align 4
  call void @sodium_memzero(i8* %92, i32 %93) #8
  store i32 0, i32* %77, align 4
  br label %94

94:                                               ; preds = %91, %83, %49
  %95 = getelementptr inbounds %struct.Argon2_Context, %struct.Argon2_Context* %1, i32 0, i32 5
  %96 = load i32, i32* %95, align 4
  store i32 %96, i32* %5, align 4
  %97 = call i32 @crypto_generichash_blake2b_update(%struct.crypto_generichash_blake2b_state* nonnull %4, i8* nonnull %61, i64 4) #8
  %98 = getelementptr inbounds %struct.Argon2_Context, %struct.Argon2_Context* %1, i32 0, i32 4
  %99 = load i8*, i8** %98, align 4
  %100 = icmp eq i8* %99, null
  br i1 %100, label %105, label %101

101:                                              ; preds = %94
  %102 = load i32, i32* %95, align 4
  %103 = zext i32 %102 to i64
  %104 = call i32 @crypto_generichash_blake2b_update(%struct.crypto_generichash_blake2b_state* nonnull %4, i8* nonnull %99, i64 %103) #8
  br label %105

105:                                              ; preds = %101, %94
  %106 = getelementptr inbounds %struct.Argon2_Context, %struct.Argon2_Context* %1, i32 0, i32 7
  %107 = load i32, i32* %106, align 4
  store i32 %107, i32* %5, align 4
  %108 = call i32 @crypto_generichash_blake2b_update(%struct.crypto_generichash_blake2b_state* nonnull %4, i8* nonnull %61, i64 4) #8
  %109 = getelementptr inbounds %struct.Argon2_Context, %struct.Argon2_Context* %1, i32 0, i32 6
  %110 = load i8*, i8** %109, align 4
  %111 = icmp eq i8* %110, null
  br i1 %111, label %123, label %112

112:                                              ; preds = %105
  %113 = load i32, i32* %106, align 4
  %114 = zext i32 %113 to i64
  %115 = call i32 @crypto_generichash_blake2b_update(%struct.crypto_generichash_blake2b_state* nonnull %4, i8* nonnull %110, i64 %114) #8
  %116 = getelementptr inbounds %struct.Argon2_Context, %struct.Argon2_Context* %1, i32 0, i32 14
  %117 = load i32, i32* %116, align 4
  %118 = and i32 %117, 2
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %123, label %120

120:                                              ; preds = %112
  %121 = load i8*, i8** %109, align 4
  %122 = load i32, i32* %106, align 4
  call void @sodium_memzero(i8* %121, i32 %122) #8
  store i32 0, i32* %106, align 4
  br label %123

123:                                              ; preds = %120, %112, %105
  %124 = getelementptr inbounds %struct.Argon2_Context, %struct.Argon2_Context* %1, i32 0, i32 9
  %125 = load i32, i32* %124, align 4
  store i32 %125, i32* %5, align 4
  %126 = call i32 @crypto_generichash_blake2b_update(%struct.crypto_generichash_blake2b_state* nonnull %4, i8* nonnull %61, i64 4) #8
  %127 = getelementptr inbounds %struct.Argon2_Context, %struct.Argon2_Context* %1, i32 0, i32 8
  %128 = load i8*, i8** %127, align 4
  %129 = icmp eq i8* %128, null
  br i1 %129, label %134, label %130

130:                                              ; preds = %123
  %131 = load i32, i32* %124, align 4
  %132 = zext i32 %131 to i64
  %133 = call i32 @crypto_generichash_blake2b_update(%struct.crypto_generichash_blake2b_state* nonnull %4, i8* nonnull %128, i64 %132) #8
  br label %134

134:                                              ; preds = %123, %130
  %135 = call i32 @crypto_generichash_blake2b_final(%struct.crypto_generichash_blake2b_state* nonnull %4, i8* nonnull %8, i32 64) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %61) #8
  call void @llvm.lifetime.end.p0i8(i64 384, i8* nonnull %60) #8
  %136 = getelementptr inbounds [72 x i8], [72 x i8]* %7, i32 0, i32 64
  call void @sodium_memzero(i8* nonnull %136, i32 8) #8
  %137 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %137) #8
  %138 = getelementptr inbounds %struct.Argon2_instance_t, %struct.Argon2_instance_t* %0, i32 0, i32 7
  %139 = load i32, i32* %138, align 4
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %184, label %141

141:                                              ; preds = %134
  %142 = bitcast i8* %136 to i32*
  %143 = getelementptr inbounds [72 x i8], [72 x i8]* %7, i32 0, i32 68
  %144 = bitcast i8* %143 to i32*
  %145 = getelementptr inbounds %struct.Argon2_instance_t, %struct.Argon2_instance_t* %0, i32 0, i32 6
  br label %146

146:                                              ; preds = %180, %141
  %147 = phi i32 [ 0, %141 ], [ %181, %180 ]
  store i32 0, i32* %142, align 16
  store i32 %147, i32* %144, align 4
  %148 = call i32 @blake2b_long(i8* nonnull %137, i32 1024, i8* nonnull %8, i32 72) #8
  %149 = load %struct.block_region_*, %struct.block_region_** %21, align 4
  %150 = getelementptr inbounds %struct.block_region_, %struct.block_region_* %149, i32 0, i32 1
  %151 = load %struct.block_*, %struct.block_** %150, align 4
  %152 = load i32, i32* %145, align 4
  %153 = mul i32 %152, %147
  br label %154

154:                                              ; preds = %154, %146
  %155 = phi i32 [ 0, %146 ], [ %161, %154 ]
  %156 = shl nuw nsw i32 %155, 3
  %157 = getelementptr [1024 x i8], [1024 x i8]* %3, i32 0, i32 %156
  %158 = bitcast i8* %157 to i64*
  %159 = load i64, i64* %158, align 8
  %160 = getelementptr %struct.block_, %struct.block_* %151, i32 %153, i32 0, i32 %155
  store i64 %159, i64* %160, align 8
  %161 = add nuw nsw i32 %155, 1
  %162 = icmp eq i32 %161, 128
  br i1 %162, label %163, label %154

163:                                              ; preds = %154
  store i32 1, i32* %142, align 16
  %164 = call i32 @blake2b_long(i8* nonnull %137, i32 1024, i8* nonnull %8, i32 72) #8
  %165 = load %struct.block_region_*, %struct.block_region_** %21, align 4
  %166 = getelementptr inbounds %struct.block_region_, %struct.block_region_* %165, i32 0, i32 1
  %167 = load %struct.block_*, %struct.block_** %166, align 4
  %168 = load i32, i32* %145, align 4
  %169 = mul i32 %168, %147
  %170 = add i32 %169, 1
  br label %171

171:                                              ; preds = %171, %163
  %172 = phi i32 [ 0, %163 ], [ %178, %171 ]
  %173 = shl nuw nsw i32 %172, 3
  %174 = getelementptr [1024 x i8], [1024 x i8]* %3, i32 0, i32 %173
  %175 = bitcast i8* %174 to i64*
  %176 = load i64, i64* %175, align 8
  %177 = getelementptr %struct.block_, %struct.block_* %167, i32 %170, i32 0, i32 %172
  store i64 %176, i64* %177, align 8
  %178 = add nuw nsw i32 %172, 1
  %179 = icmp eq i32 %178, 128
  br i1 %179, label %180, label %171

180:                                              ; preds = %171
  %181 = add nuw i32 %147, 1
  %182 = load i32, i32* %138, align 4
  %183 = icmp ult i32 %181, %182
  br i1 %183, label %146, label %184

184:                                              ; preds = %180, %134
  call void @sodium_memzero(i8* nonnull %137, i32 1024) #8
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %137) #8
  call void @sodium_memzero(i8* nonnull %8, i32 72) #8
  br label %185

185:                                              ; preds = %12, %2, %184, %46
  %186 = phi i32 [ -22, %46 ], [ 0, %184 ], [ -25, %2 ], [ -22, %12 ]
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %8) #8
  ret i32 %186
}

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i32 %0) local_unnamed_addr #4

; Function Attrs: norecurse nounwind readnone
define hidden i32 @_crypto_pwhash_argon2_pick_best_implementation() local_unnamed_addr #5 {
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: nounwind
declare void @free(i8* nocapture %0) local_unnamed_addr #6

declare void @argon2_fill_segment_ref(%struct.Argon2_instance_t* %0, %struct.Argon2_position_t* byval(%struct.Argon2_position_t) align 4 %1) local_unnamed_addr #2

; Function Attrs: nofree
declare i32 @posix_memalign(i8** %0, i32 %1, i32 %2) local_unnamed_addr #7

declare i32 @crypto_generichash_blake2b_init(%struct.crypto_generichash_blake2b_state* %0, i8* %1, i32 %2, i32 %3) local_unnamed_addr #2

declare i32 @crypto_generichash_blake2b_update(%struct.crypto_generichash_blake2b_state* %0, i8* %1, i64 %2) local_unnamed_addr #2

declare i32 @crypto_generichash_blake2b_final(%struct.crypto_generichash_blake2b_state* %0, i8* %1, i32 %2) local_unnamed_addr #2

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %9 = icmp eq %struct.Argon2_instance_t* %0, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %10 = icmp eq %struct.Argon2_Context* %1, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = or i1 %9, %10
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
%2:i32 = var
%3:i1 = eq 0:i32, %2
%4:i1 = or %1, %3
infer %4

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %13, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00011111111111111111111111111111)

; *****
; For LLVM instruction:
;  %15 = shl i32 %14, 3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl %0, 3:i32
infer %1

; *****
; For LLVM instruction:
;  %19 = icmp eq i8* %16, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %22, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = shl i32 %23, 10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl %0, 10:i32
infer %1

; *****
; For LLVM instruction:
;  %26 = icmp eq i32 %23, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %28 = udiv i32 %25, %23
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
pc %1 0:i1
%2:i32 = shl %0, 10:i32 (hasExternalUses)
%3:i32 = udiv %2, %0
infer %3

; *****
; For LLVM instruction:
;  %29 = icmp eq i32 %28, 1024
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
pc %1 0:i1
%2:i32 = shl %0, 10:i32 (hasExternalUses)
%3:i32 = udiv %2, %0
%4:i1 = eq 1024:i32, %3
infer %4

; *****
; For LLVM instruction:
;  %33 = icmp eq i8* %31, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %38 = call i32 @posix_memalign(i8** nonnull %6, i32 64, i32 %25) #8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %39 = icmp eq i32 %38, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %43 = icmp eq i8* %42, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %48 = load i32, i32* %47, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %50 = ptrtoint i8* %42 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
pc %1 0:i1
infer %0

; *****
; For LLVM instruction:
;  %59 = load i32, i32* %58, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %64 = load i32, i32* %63, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %67 = load i32, i32* %66, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %70 = load i32, i32* %69, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %73 = load i32, i32* %72, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %78 = load i32, i32* %77, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %82 = icmp eq i8* %81, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %84 = load i32, i32* %77, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %85 = zext i32 %84 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %88 = load i32, i32* %87, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000000000001)

; *****
; For LLVM instruction:
;  %89 = and i32 %88, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %90 = icmp eq i32 %89, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 1:i32, %0
%2:i1 = eq 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %93 = load i32, i32* %77, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %96 = load i32, i32* %95, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %100 = icmp eq i8* %99, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %102 = load i32, i32* %95, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %103 = zext i32 %102 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %107 = load i32, i32* %106, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %111 = icmp eq i8* %110, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %113 = load i32, i32* %106, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %114 = zext i32 %113 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %117 = load i32, i32* %116, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000000000010)

; *****
; For LLVM instruction:
;  %118 = and i32 %117, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %119 = icmp eq i32 %118, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 2:i32, %0
%2:i1 = eq 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %122 = load i32, i32* %106, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %125 = load i32, i32* %124, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %129 = icmp eq i8* %128, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %131 = load i32, i32* %124, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %132 = zext i32 %131 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %139 = load i32, i32* %138, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %140 = icmp eq i32 %139, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %147 = phi i32 [ 0, %141 ], [ %181, %180 ]
; Looking for a replacement for:
%0:i32 = var (range=[0,-1))
infer %0

; *****
; For LLVM instruction:
;  %152 = load i32, i32* %145, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %153 = mul i32 %152, %147
; Looking for a replacement for:
%0:i32 = var (range=[0,-1))
%1:i32 = var
%2:i32 = mul %0, %1
infer %2

; *****
; For LLVM instruction:
;  %155 = phi i32 [ 0, %146 ], [ %161, %154 ]
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,128))
infer %0

; *****
; For LLVM instruction:
;  %156 = shl nuw nsw i32 %155, 3
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,128))
%1:i32 = shlnw %0, 3:i32
infer %1

; *****
; For LLVM instruction:
;  %159 = load i64, i64* %158, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %161 = add nuw nsw i32 %155, 1
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,128))
%1:i32 = addnw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %162 = icmp eq i32 %161, 128
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,128))
%1:i32 = addnw 1:i32, %0 (hasExternalUses)
%2:i1 = eq 128:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %168 = load i32, i32* %145, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %169 = mul i32 %168, %147
; Looking for a replacement for:
%0:i32 = var (range=[0,-1))
%1:i32 = var
%2:i32 = mul %0, %1
infer %2

; *****
; For LLVM instruction:
;  %170 = add i32 %169, 1
; Looking for a replacement for:
%0:i32 = var (range=[0,-1))
%1:i32 = var
%2:i32 = mul %0, %1
%3:i32 = add 1:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %172 = phi i32 [ 0, %163 ], [ %178, %171 ]
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,128))
infer %0

; *****
; For LLVM instruction:
;  %173 = shl nuw nsw i32 %172, 3
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,128))
%1:i32 = shlnw %0, 3:i32
infer %1

; *****
; For LLVM instruction:
;  %176 = load i64, i64* %175, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %178 = add nuw nsw i32 %172, 1
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,128))
%1:i32 = addnw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %179 = icmp eq i32 %178, 128
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,128))
%1:i32 = addnw 1:i32, %0 (hasExternalUses)
%2:i1 = eq 128:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %181 = add nuw i32 %147, 1
; Looking for a replacement for:
%0:i32 = var (range=[0,-1))
%1:i32 = addnuw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %182 = load i32, i32* %138, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %183 = icmp ult i32 %181, %182
; Looking for a replacement for:
%0:i32 = var (range=[0,-1))
%1:i32 = addnuw 1:i32, %0 (hasExternalUses)
%2:i32 = var
%3:i1 = ult %1, %2
infer %3

; *****
; For LLVM instruction:
;  %186 = phi i32 [ -22, %46 ], [ 0, %184 ], [ -25, %2 ], [ -22, %12 ]
; Looking for a replacement for:
%0 = block 4
%1:i32 = phi %0, 4294967274:i32, 0:i32, 4294967271:i32, 4294967274:i32
infer %1
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
%2:i32 = var
%3:i1 = eq 0:i32, %2
%4:i1 = or %1, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i1 = eq 0:i32, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i1 = eq 0:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
pc %1 0:i1
%2:i32 = shl %0, 10:i32 (hasExternalUses)
%3:i32 = udiv %2, %0
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = shl %0, 10:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
pc %1 0:i1
%2:i32 = shl %0, 10:i32 (hasExternalUses)
%3:i32 = udiv %2, %0
%4:i1 = eq 1024:i32, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
pc %1 0:i1
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 134742016
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0
infer %1


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4294967295
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000000000001)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = and 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = and 1:i32, %0
%2:i1 = eq 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000000000010)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = and 2:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = and 2:i32, %0
%2:i1 = eq 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var (range=[0,-1))
%1:i32 = var
%2:i32 = mul %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var (range=[0,-1))

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,128))
%1:i32 = shlnw %0, 3:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 256
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,128))

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var (range=[0,-1))
%1:i32 = var
%2:i32 = mul %0, %1
%3:i32 = add 1:i32, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var (range=[0,-1))

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var (range=[0,-1))
%1:i32 = var
%2:i32 = mul %0, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0 = block 4
%1:i32 = phi %0, 4294967274:i32, 0:i32, 4294967271:i32, 4294967274:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -22
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -25
2 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for argon2_initialize()

; entering Souper's runOnFunction() for _crypto_pwhash_argon2_pick_best_implementation()
