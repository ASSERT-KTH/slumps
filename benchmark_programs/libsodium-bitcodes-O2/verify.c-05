; entering Souper's runOnFunction() for crypto_verify_32()

; ModuleID = './verify.c.bc'
source_filename = "crypto_verify/sodium/verify.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_verify_16_bytes() local_unnamed_addr #0 {
  ret i32 16
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_verify_32_bytes() local_unnamed_addr #0 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_verify_64_bytes() local_unnamed_addr #0 {
  ret i32 64
}

; Function Attrs: nounwind
define i32 @crypto_verify_16(i8* nonnull %0, i8* nonnull %1) local_unnamed_addr #1 {
  %3 = alloca i8*, align 4
  %4 = alloca i8*, align 4
  %5 = alloca i16, align 2
  %6 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6)
  store volatile i8* %0, i8** %3, align 4
  %7 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7)
  store volatile i8* %1, i8** %4, align 4
  %8 = bitcast i16* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %8)
  store volatile i16 0, i16* %5, align 2
  br label %9

9:                                                ; preds = %9, %2
  %10 = phi i32 [ %21, %9 ], [ 0, %2 ]
  %11 = load volatile i8*, i8** %3, align 4
  %12 = getelementptr i8, i8* %11, i32 %10
  %13 = load volatile i8, i8* %12, align 1
  %14 = load volatile i8*, i8** %4, align 4
  %15 = getelementptr i8, i8* %14, i32 %10
  %16 = load volatile i8, i8* %15, align 1
  %17 = xor i8 %16, %13
  %18 = zext i8 %17 to i16
  %19 = load volatile i16, i16* %5, align 2
  %20 = or i16 %19, %18
  store volatile i16 %20, i16* %5, align 2
  %21 = add nuw nsw i32 %10, 1
  %22 = icmp eq i32 %21, 16
  br i1 %22, label %23, label %9

23:                                               ; preds = %9
  %24 = load volatile i16, i16* %5, align 2
  %25 = zext i16 %24 to i32
  %26 = add nuw nsw i32 %25, 511
  %27 = lshr i32 %26, 8
  %28 = and i32 %27, 1
  %29 = add nsw i32 %28, -1
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %8)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6)
  ret i32 %29
}

; Function Attrs: nounwind
define i32 @crypto_verify_32(i8* nonnull %0, i8* nonnull %1) local_unnamed_addr #1 {
  %3 = alloca i8*, align 4
  %4 = alloca i8*, align 4
  %5 = alloca i16, align 2
  %6 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6)
  store volatile i8* %0, i8** %3, align 4
  %7 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7)
  store volatile i8* %1, i8** %4, align 4
  %8 = bitcast i16* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %8)
  store volatile i16 0, i16* %5, align 2
  br label %9

9:                                                ; preds = %9, %2
  %10 = phi i32 [ %21, %9 ], [ 0, %2 ]
  %11 = load volatile i8*, i8** %3, align 4
  %12 = getelementptr i8, i8* %11, i32 %10
  %13 = load volatile i8, i8* %12, align 1
  %14 = load volatile i8*, i8** %4, align 4
  %15 = getelementptr i8, i8* %14, i32 %10
  %16 = load volatile i8, i8* %15, align 1
  %17 = xor i8 %16, %13
  %18 = zext i8 %17 to i16
  %19 = load volatile i16, i16* %5, align 2
  %20 = or i16 %19, %18
  store volatile i16 %20, i16* %5, align 2
  %21 = add nuw nsw i32 %10, 1
  %22 = icmp eq i32 %21, 32
  br i1 %22, label %23, label %9

23:                                               ; preds = %9
  %24 = load volatile i16, i16* %5, align 2
  %25 = zext i16 %24 to i32
  %26 = add nuw nsw i32 %25, 511
  %27 = lshr i32 %26, 8
  %28 = and i32 %27, 1
  %29 = add nsw i32 %28, -1
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %8)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6)
  ret i32 %29
}

; Function Attrs: nounwind
define i32 @crypto_verify_64(i8* nonnull %0, i8* nonnull %1) local_unnamed_addr #1 {
  %3 = alloca i8*, align 4
  %4 = alloca i8*, align 4
  %5 = alloca i16, align 2
  %6 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6)
  store volatile i8* %0, i8** %3, align 4
  %7 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7)
  store volatile i8* %1, i8** %4, align 4
  %8 = bitcast i16* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %8)
  store volatile i16 0, i16* %5, align 2
  br label %9

9:                                                ; preds = %9, %2
  %10 = phi i32 [ %21, %9 ], [ 0, %2 ]
  %11 = load volatile i8*, i8** %3, align 4
  %12 = getelementptr i8, i8* %11, i32 %10
  %13 = load volatile i8, i8* %12, align 1
  %14 = load volatile i8*, i8** %4, align 4
  %15 = getelementptr i8, i8* %14, i32 %10
  %16 = load volatile i8, i8* %15, align 1
  %17 = xor i8 %16, %13
  %18 = zext i8 %17 to i16
  %19 = load volatile i16, i16* %5, align 2
  %20 = or i16 %19, %18
  store volatile i16 %20, i16* %5, align 2
  %21 = add nuw nsw i32 %10, 1
  %22 = icmp eq i32 %21, 64
  br i1 %22, label %23, label %9

23:                                               ; preds = %9
  %24 = load volatile i16, i16* %5, align 2
  %25 = zext i16 %24 to i32
  %26 = add nuw nsw i32 %25, 511
  %27 = lshr i32 %26, 8
  %28 = and i32 %27, 1
  %29 = add nsw i32 %28, -1
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %8)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6)
  ret i32 %29
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #2

attributes #0 = { norecurse nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %10 = phi i32 [ %21, %9 ], [ 0, %2 ]
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,32))
infer %0

; *****
; For LLVM instruction:
;  %13 = load volatile i8, i8* %12, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load volatile i8, i8* %15, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = xor i8 %16, %13
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %18 = zext i8 %17 to i16
; Looking for a replacement for:
%0:i8 = var
%1:i8 = var
%2:i8 = xor %0, %1
%3:i16 = zext %2
infer %3

; *****
; For LLVM instruction:
;  %19 = load volatile i16, i16* %5, align 2
; Looking for a replacement for:
%0:i16 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = or i16 %19, %18
; Looking for a replacement for:
%0:i16 = var
%1:i8 = var
%2:i8 = var
%3:i8 = xor %1, %2
%4:i16 = zext %3
%5:i16 = or %0, %4
infer %5

; *****
; For LLVM instruction:
;  %21 = add nuw nsw i32 %10, 1
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,32))
%1:i32 = addnw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %22 = icmp eq i32 %21, 32
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,32))
%1:i32 = addnw 1:i32, %0 (hasExternalUses)
%2:i1 = eq 32:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %24 = load volatile i16, i16* %5, align 2
; Looking for a replacement for:
%0:i16 = var
infer %0 (demandedBits=0000000111111111)

; *****
; For LLVM instruction:
;  %25 = zext i16 %24 to i32
; Looking for a replacement for:
%0:i16 = var
%1:i32 = zext %0
infer %1 (demandedBits=00000000000000000000000111111111)

; *****
; For LLVM instruction:
;  %26 = add nuw nsw i32 %25, 511
; Looking for a replacement for:
%0:i16 = var
%1:i32 = zext %0
%2:i32 = addnw 511:i32, %1
infer %2 (demandedBits=00000000000000000000000100000000)

; *****
; For LLVM instruction:
;  %27 = lshr i32 %26, 8
; Looking for a replacement for:
%0:i16 = var
%1:i32 = zext %0
%2:i32 = addnw 511:i32, %1
%3:i32 = lshr %2, 8:i32
infer %3 (demandedBits=00000000000000000000000000000001)

; *****
; For LLVM instruction:
;  %28 = and i32 %27, 1
; Looking for a replacement for:
%0:i16 = var
%1:i32 = zext %0
%2:i32 = addnw 511:i32, %1
%3:i32 = lshr %2, 8:i32
%4:i32 = and 1:i32, %3
infer %4

; *****
; For LLVM instruction:
;  %29 = add nsw i32 %28, -1
; Looking for a replacement for:
%0:i16 = var
%1:i32 = zext %0
%2:i32 = addnw 511:i32, %1
%3:i32 = lshr %2, 8:i32
%4:i32 = and 1:i32, %3
%5:i32 = addnsw 4294967295:i32, %4
infer %5
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,32))
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 8
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,32))
%1:i32 = addnw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 9
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,32))

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,32))
%1:i32 = addnw 1:i32, %0 (hasExternalUses)
%2:i1 = eq 32:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for crypto_verify_32()

; entering Souper's runOnFunction() for crypto_verify_64()
