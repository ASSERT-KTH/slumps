
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for crypto_secretbox_xsalsa20poly1305()

; ModuleID = './secretbox_xsalsa20poly1305.c.bc'
source_filename = "crypto_secretbox/xsalsa20poly1305/secretbox_xsalsa20poly1305.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

; Function Attrs: nounwind
define i32 @crypto_secretbox_xsalsa20poly1305(i8* nonnull %0, i8* %1, i64 %2, i8* nonnull %3, i8* nonnull %4) local_unnamed_addr #0 {
  %6 = icmp ult i64 %2, 32
  br i1 %6, label %13, label %7

7:                                                ; preds = %5
  %8 = tail call i32 @crypto_stream_xsalsa20_xor(i8* nonnull %0, i8* %1, i64 %2, i8* nonnull %3, i8* nonnull %4) #5
  %9 = getelementptr i8, i8* %0, i32 16
  %10 = getelementptr i8, i8* %0, i32 32
  %11 = add i64 %2, -32
  %12 = tail call i32 @crypto_onetimeauth_poly1305(i8* %9, i8* %10, i64 %11, i8* nonnull %0) #5
  call void @llvm.memset.p0i8.i32(i8* nonnull align 1 dereferenceable(16) %0, i8 0, i32 16, i1 false)
  br label %13

13:                                               ; preds = %7, %5
  %14 = phi i32 [ -1, %5 ], [ 0, %7 ]
  ret i32 %14
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #1

declare i32 @crypto_stream_xsalsa20_xor(i8* %0, i8* %1, i64 %2, i8* %3, i8* %4) local_unnamed_addr #2

declare i32 @crypto_onetimeauth_poly1305(i8* %0, i8* %1, i64 %2, i8* %3) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #1

; Function Attrs: nounwind
define i32 @crypto_secretbox_xsalsa20poly1305_open(i8* %0, i8* nonnull %1, i64 %2, i8* nonnull %3, i8* nonnull %4) local_unnamed_addr #0 {
  %6 = alloca [32 x i8], align 16
  %7 = getelementptr inbounds [32 x i8], [32 x i8]* %6, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #5
  %8 = icmp ult i64 %2, 32
  br i1 %8, label %18, label %9

9:                                                ; preds = %5
  %10 = call i32 @crypto_stream_xsalsa20(i8* nonnull %7, i64 32, i8* nonnull %3, i8* nonnull %4) #5
  %11 = getelementptr i8, i8* %1, i32 16
  %12 = getelementptr i8, i8* %1, i32 32
  %13 = add i64 %2, -32
  %14 = call i32 @crypto_onetimeauth_poly1305_verify(i8* %11, i8* %12, i64 %13, i8* nonnull %7) #5
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %18

16:                                               ; preds = %9
  %17 = call i32 @crypto_stream_xsalsa20_xor(i8* %0, i8* nonnull %1, i64 %2, i8* nonnull %3, i8* nonnull %4) #5
  call void @llvm.memset.p0i8.i32(i8* nonnull align 1 dereferenceable(32) %0, i8 0, i32 32, i1 false)
  br label %18

18:                                               ; preds = %16, %9, %5
  %19 = phi i32 [ -1, %5 ], [ -1, %9 ], [ 0, %16 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #5
  ret i32 %19
}

declare i32 @crypto_stream_xsalsa20(i8* %0, i64 %1, i8* %2, i8* %3) local_unnamed_addr #2

declare i32 @crypto_onetimeauth_poly1305_verify(i8* %0, i8* %1, i64 %2, i8* %3) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xsalsa20poly1305_keybytes() local_unnamed_addr #3 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xsalsa20poly1305_noncebytes() local_unnamed_addr #3 {
  ret i32 24
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xsalsa20poly1305_zerobytes() local_unnamed_addr #3 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xsalsa20poly1305_boxzerobytes() local_unnamed_addr #3 {
  ret i32 16
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xsalsa20poly1305_macbytes() local_unnamed_addr #3 {
  ret i32 16
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xsalsa20poly1305_messagebytes_max() local_unnamed_addr #3 {
  ret i32 -17
}

; Function Attrs: nounwind
define void @crypto_secretbox_xsalsa20poly1305_keygen(i8* nonnull %0) local_unnamed_addr #0 {
  tail call void @randombytes_buf(i8* nonnull %0, i32 32) #5
  ret void
}

declare void @randombytes_buf(i8* %0, i32 %1) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #4

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind willreturn writeonly }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %6 = icmp ult i64 %2, 32
; Looking for a replacement for:
%0:i64 = var
%1:i1 = ult %0, 32:i64
infer %1

; *****
; For LLVM instruction:
;  %11 = add i64 %2, -32
; Looking for a replacement for:
%0:i64 = var
%1:i1 = ult %0, 32:i64
pc %1 0:i1
%2:i64 = add 18446744073709551584:i64, %0
infer %2

; *****
; For LLVM instruction:
;  %14 = phi i32 [ -1, %5 ], [ 0, %7 ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = phi %0, 4294967295:i32, 0:i32
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i1 = ult %0, 32:i64
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i1 = ult %0, 32:i64
pc %1 0:i1
%2:i64 = add 18446744073709551584:i64, %0
infer %2


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 9223372036854775776
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = phi %0, 4294967295:i32, 0:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for crypto_secretbox_xsalsa20poly1305()

; entering Souper's runOnFunction() for crypto_secretbox_xsalsa20poly1305_open()

; ModuleID = './secretbox_xsalsa20poly1305.c.bc'
source_filename = "crypto_secretbox/xsalsa20poly1305/secretbox_xsalsa20poly1305.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

; Function Attrs: nounwind
define i32 @crypto_secretbox_xsalsa20poly1305(i8* nonnull %0, i8* %1, i64 %2, i8* nonnull %3, i8* nonnull %4) local_unnamed_addr #0 {
  %6 = icmp ult i64 %2, 32
  br i1 %6, label %13, label %7

7:                                                ; preds = %5
  %8 = tail call i32 @crypto_stream_xsalsa20_xor(i8* nonnull %0, i8* %1, i64 %2, i8* nonnull %3, i8* nonnull %4) #5
  %9 = getelementptr i8, i8* %0, i32 16
  %10 = getelementptr i8, i8* %0, i32 32
  %11 = add i64 %2, -32
  %12 = tail call i32 @crypto_onetimeauth_poly1305(i8* %9, i8* %10, i64 %11, i8* nonnull %0) #5
  call void @llvm.memset.p0i8.i32(i8* nonnull align 1 dereferenceable(16) %0, i8 0, i32 16, i1 false)
  br label %13

13:                                               ; preds = %7, %5
  %14 = phi i32 [ -1, %5 ], [ 0, %7 ]
  ret i32 %14
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #1

declare i32 @crypto_stream_xsalsa20_xor(i8* %0, i8* %1, i64 %2, i8* %3, i8* %4) local_unnamed_addr #2

declare i32 @crypto_onetimeauth_poly1305(i8* %0, i8* %1, i64 %2, i8* %3) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #1

; Function Attrs: nounwind
define i32 @crypto_secretbox_xsalsa20poly1305_open(i8* %0, i8* nonnull %1, i64 %2, i8* nonnull %3, i8* nonnull %4) local_unnamed_addr #0 {
  %6 = alloca [32 x i8], align 16
  %7 = getelementptr inbounds [32 x i8], [32 x i8]* %6, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #5
  %8 = icmp ult i64 %2, 32
  br i1 %8, label %18, label %9

9:                                                ; preds = %5
  %10 = call i32 @crypto_stream_xsalsa20(i8* nonnull %7, i64 32, i8* nonnull %3, i8* nonnull %4) #5
  %11 = getelementptr i8, i8* %1, i32 16
  %12 = getelementptr i8, i8* %1, i32 32
  %13 = add i64 %2, -32
  %14 = call i32 @crypto_onetimeauth_poly1305_verify(i8* %11, i8* %12, i64 %13, i8* nonnull %7) #5
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %18

16:                                               ; preds = %9
  %17 = call i32 @crypto_stream_xsalsa20_xor(i8* %0, i8* nonnull %1, i64 %2, i8* nonnull %3, i8* nonnull %4) #5
  call void @llvm.memset.p0i8.i32(i8* nonnull align 1 dereferenceable(32) %0, i8 0, i32 32, i1 false)
  br label %18

18:                                               ; preds = %16, %9, %5
  %19 = phi i32 [ -1, %5 ], [ -1, %9 ], [ 0, %16 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #5
  ret i32 %19
}

declare i32 @crypto_stream_xsalsa20(i8* %0, i64 %1, i8* %2, i8* %3) local_unnamed_addr #2

declare i32 @crypto_onetimeauth_poly1305_verify(i8* %0, i8* %1, i64 %2, i8* %3) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xsalsa20poly1305_keybytes() local_unnamed_addr #3 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xsalsa20poly1305_noncebytes() local_unnamed_addr #3 {
  ret i32 24
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xsalsa20poly1305_zerobytes() local_unnamed_addr #3 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xsalsa20poly1305_boxzerobytes() local_unnamed_addr #3 {
  ret i32 16
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xsalsa20poly1305_macbytes() local_unnamed_addr #3 {
  ret i32 16
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xsalsa20poly1305_messagebytes_max() local_unnamed_addr #3 {
  ret i32 -17
}

; Function Attrs: nounwind
define void @crypto_secretbox_xsalsa20poly1305_keygen(i8* nonnull %0) local_unnamed_addr #0 {
  tail call void @randombytes_buf(i8* nonnull %0, i32 32) #5
  ret void
}

declare void @randombytes_buf(i8* %0, i32 %1) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #4

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind willreturn writeonly }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %8 = icmp ult i64 %2, 32
; Looking for a replacement for:
%0:i64 = var
%1:i1 = ult %0, 32:i64
infer %1

; *****
; For LLVM instruction:
;  %13 = add i64 %2, -32
; Looking for a replacement for:
%0:i64 = var
%1:i1 = ult %0, 32:i64
pc %1 0:i1
%2:i64 = add 18446744073709551584:i64, %0
infer %2

; *****
; For LLVM instruction:
;  %14 = call i32 @crypto_onetimeauth_poly1305_verify(i8* %11, i8* %12, i64 %13, i8* nonnull %7) #5
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = icmp eq i32 %14, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %19 = phi i32 [ -1, %5 ], [ -1, %9 ], [ 0, %16 ]
; Looking for a replacement for:
%0 = block 3
%1:i32 = phi %0, 4294967295:i32, 4294967295:i32, 0:i32
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0 = block 3
%1:i32 = phi %0, 4294967295:i32, 4294967295:i32, 0:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for crypto_secretbox_xsalsa20poly1305_open()

; entering Souper's runOnFunction() for crypto_secretbox_xsalsa20poly1305_keybytes()

; ModuleID = './secretbox_xsalsa20poly1305.c.bc'
source_filename = "crypto_secretbox/xsalsa20poly1305/secretbox_xsalsa20poly1305.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

; Function Attrs: nounwind
define i32 @crypto_secretbox_xsalsa20poly1305(i8* nonnull %0, i8* %1, i64 %2, i8* nonnull %3, i8* nonnull %4) local_unnamed_addr #0 {
  %6 = icmp ult i64 %2, 32
  br i1 %6, label %13, label %7

7:                                                ; preds = %5
  %8 = tail call i32 @crypto_stream_xsalsa20_xor(i8* nonnull %0, i8* %1, i64 %2, i8* nonnull %3, i8* nonnull %4) #5
  %9 = getelementptr i8, i8* %0, i32 16
  %10 = getelementptr i8, i8* %0, i32 32
  %11 = add i64 %2, -32
  %12 = tail call i32 @crypto_onetimeauth_poly1305(i8* %9, i8* %10, i64 %11, i8* nonnull %0) #5
  call void @llvm.memset.p0i8.i32(i8* nonnull align 1 dereferenceable(16) %0, i8 0, i32 16, i1 false)
  br label %13

13:                                               ; preds = %7, %5
  %14 = phi i32 [ -1, %5 ], [ 0, %7 ]
  ret i32 %14
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #1

declare i32 @crypto_stream_xsalsa20_xor(i8* %0, i8* %1, i64 %2, i8* %3, i8* %4) local_unnamed_addr #2

declare i32 @crypto_onetimeauth_poly1305(i8* %0, i8* %1, i64 %2, i8* %3) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #1

; Function Attrs: nounwind
define i32 @crypto_secretbox_xsalsa20poly1305_open(i8* %0, i8* nonnull %1, i64 %2, i8* nonnull %3, i8* nonnull %4) local_unnamed_addr #0 {
  %6 = alloca [32 x i8], align 16
  %7 = getelementptr inbounds [32 x i8], [32 x i8]* %6, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #5
  %8 = icmp ult i64 %2, 32
  br i1 %8, label %18, label %9

9:                                                ; preds = %5
  %10 = call i32 @crypto_stream_xsalsa20(i8* nonnull %7, i64 32, i8* nonnull %3, i8* nonnull %4) #5
  %11 = getelementptr i8, i8* %1, i32 16
  %12 = getelementptr i8, i8* %1, i32 32
  %13 = add i64 %2, -32
  %14 = call i32 @crypto_onetimeauth_poly1305_verify(i8* %11, i8* %12, i64 %13, i8* nonnull %7) #5
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %18

16:                                               ; preds = %9
  %17 = call i32 @crypto_stream_xsalsa20_xor(i8* %0, i8* nonnull %1, i64 %2, i8* nonnull %3, i8* nonnull %4) #5
  call void @llvm.memset.p0i8.i32(i8* nonnull align 1 dereferenceable(32) %0, i8 0, i32 32, i1 false)
  br label %18

18:                                               ; preds = %16, %9, %5
  %19 = phi i32 [ -1, %5 ], [ -1, %9 ], [ 0, %16 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #5
  ret i32 %19
}

declare i32 @crypto_stream_xsalsa20(i8* %0, i64 %1, i8* %2, i8* %3) local_unnamed_addr #2

declare i32 @crypto_onetimeauth_poly1305_verify(i8* %0, i8* %1, i64 %2, i8* %3) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xsalsa20poly1305_keybytes() local_unnamed_addr #3 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xsalsa20poly1305_noncebytes() local_unnamed_addr #3 {
  ret i32 24
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xsalsa20poly1305_zerobytes() local_unnamed_addr #3 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xsalsa20poly1305_boxzerobytes() local_unnamed_addr #3 {
  ret i32 16
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xsalsa20poly1305_macbytes() local_unnamed_addr #3 {
  ret i32 16
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xsalsa20poly1305_messagebytes_max() local_unnamed_addr #3 {
  ret i32 -17
}

; Function Attrs: nounwind
define void @crypto_secretbox_xsalsa20poly1305_keygen(i8* nonnull %0) local_unnamed_addr #0 {
  tail call void @randombytes_buf(i8* nonnull %0, i32 32) #5
  ret void
}

declare void @randombytes_buf(i8* %0, i32 %1) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #4

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind willreturn writeonly }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for crypto_secretbox_xsalsa20poly1305_keybytes()

; entering Souper's runOnFunction() for crypto_secretbox_xsalsa20poly1305_noncebytes()

; ModuleID = './secretbox_xsalsa20poly1305.c.bc'
source_filename = "crypto_secretbox/xsalsa20poly1305/secretbox_xsalsa20poly1305.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

; Function Attrs: nounwind
define i32 @crypto_secretbox_xsalsa20poly1305(i8* nonnull %0, i8* %1, i64 %2, i8* nonnull %3, i8* nonnull %4) local_unnamed_addr #0 {
  %6 = icmp ult i64 %2, 32
  br i1 %6, label %13, label %7

7:                                                ; preds = %5
  %8 = tail call i32 @crypto_stream_xsalsa20_xor(i8* nonnull %0, i8* %1, i64 %2, i8* nonnull %3, i8* nonnull %4) #5
  %9 = getelementptr i8, i8* %0, i32 16
  %10 = getelementptr i8, i8* %0, i32 32
  %11 = add i64 %2, -32
  %12 = tail call i32 @crypto_onetimeauth_poly1305(i8* %9, i8* %10, i64 %11, i8* nonnull %0) #5
  call void @llvm.memset.p0i8.i32(i8* nonnull align 1 dereferenceable(16) %0, i8 0, i32 16, i1 false)
  br label %13

13:                                               ; preds = %7, %5
  %14 = phi i32 [ -1, %5 ], [ 0, %7 ]
  ret i32 %14
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #1

declare i32 @crypto_stream_xsalsa20_xor(i8* %0, i8* %1, i64 %2, i8* %3, i8* %4) local_unnamed_addr #2

declare i32 @crypto_onetimeauth_poly1305(i8* %0, i8* %1, i64 %2, i8* %3) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #1

; Function Attrs: nounwind
define i32 @crypto_secretbox_xsalsa20poly1305_open(i8* %0, i8* nonnull %1, i64 %2, i8* nonnull %3, i8* nonnull %4) local_unnamed_addr #0 {
  %6 = alloca [32 x i8], align 16
  %7 = getelementptr inbounds [32 x i8], [32 x i8]* %6, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #5
  %8 = icmp ult i64 %2, 32
  br i1 %8, label %18, label %9

9:                                                ; preds = %5
  %10 = call i32 @crypto_stream_xsalsa20(i8* nonnull %7, i64 32, i8* nonnull %3, i8* nonnull %4) #5
  %11 = getelementptr i8, i8* %1, i32 16
  %12 = getelementptr i8, i8* %1, i32 32
  %13 = add i64 %2, -32
  %14 = call i32 @crypto_onetimeauth_poly1305_verify(i8* %11, i8* %12, i64 %13, i8* nonnull %7) #5
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %18

16:                                               ; preds = %9
  %17 = call i32 @crypto_stream_xsalsa20_xor(i8* %0, i8* nonnull %1, i64 %2, i8* nonnull %3, i8* nonnull %4) #5
  call void @llvm.memset.p0i8.i32(i8* nonnull align 1 dereferenceable(32) %0, i8 0, i32 32, i1 false)
  br label %18

18:                                               ; preds = %16, %9, %5
  %19 = phi i32 [ -1, %5 ], [ -1, %9 ], [ 0, %16 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #5
  ret i32 %19
}

declare i32 @crypto_stream_xsalsa20(i8* %0, i64 %1, i8* %2, i8* %3) local_unnamed_addr #2

declare i32 @crypto_onetimeauth_poly1305_verify(i8* %0, i8* %1, i64 %2, i8* %3) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xsalsa20poly1305_keybytes() local_unnamed_addr #3 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xsalsa20poly1305_noncebytes() local_unnamed_addr #3 {
  ret i32 24
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xsalsa20poly1305_zerobytes() local_unnamed_addr #3 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xsalsa20poly1305_boxzerobytes() local_unnamed_addr #3 {
  ret i32 16
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xsalsa20poly1305_macbytes() local_unnamed_addr #3 {
  ret i32 16
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xsalsa20poly1305_messagebytes_max() local_unnamed_addr #3 {
  ret i32 -17
}

; Function Attrs: nounwind
define void @crypto_secretbox_xsalsa20poly1305_keygen(i8* nonnull %0) local_unnamed_addr #0 {
  tail call void @randombytes_buf(i8* nonnull %0, i32 32) #5
  ret void
}

declare void @randombytes_buf(i8* %0, i32 %1) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #4

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind willreturn writeonly }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for crypto_secretbox_xsalsa20poly1305_noncebytes()

; entering Souper's runOnFunction() for crypto_secretbox_xsalsa20poly1305_zerobytes()

; ModuleID = './secretbox_xsalsa20poly1305.c.bc'
source_filename = "crypto_secretbox/xsalsa20poly1305/secretbox_xsalsa20poly1305.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

; Function Attrs: nounwind
define i32 @crypto_secretbox_xsalsa20poly1305(i8* nonnull %0, i8* %1, i64 %2, i8* nonnull %3, i8* nonnull %4) local_unnamed_addr #0 {
  %6 = icmp ult i64 %2, 32
  br i1 %6, label %13, label %7

7:                                                ; preds = %5
  %8 = tail call i32 @crypto_stream_xsalsa20_xor(i8* nonnull %0, i8* %1, i64 %2, i8* nonnull %3, i8* nonnull %4) #5
  %9 = getelementptr i8, i8* %0, i32 16
  %10 = getelementptr i8, i8* %0, i32 32
  %11 = add i64 %2, -32
  %12 = tail call i32 @crypto_onetimeauth_poly1305(i8* %9, i8* %10, i64 %11, i8* nonnull %0) #5
  call void @llvm.memset.p0i8.i32(i8* nonnull align 1 dereferenceable(16) %0, i8 0, i32 16, i1 false)
  br label %13

13:                                               ; preds = %7, %5
  %14 = phi i32 [ -1, %5 ], [ 0, %7 ]
  ret i32 %14
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #1

declare i32 @crypto_stream_xsalsa20_xor(i8* %0, i8* %1, i64 %2, i8* %3, i8* %4) local_unnamed_addr #2

declare i32 @crypto_onetimeauth_poly1305(i8* %0, i8* %1, i64 %2, i8* %3) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #1

; Function Attrs: nounwind
define i32 @crypto_secretbox_xsalsa20poly1305_open(i8* %0, i8* nonnull %1, i64 %2, i8* nonnull %3, i8* nonnull %4) local_unnamed_addr #0 {
  %6 = alloca [32 x i8], align 16
  %7 = getelementptr inbounds [32 x i8], [32 x i8]* %6, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #5
  %8 = icmp ult i64 %2, 32
  br i1 %8, label %18, label %9

9:                                                ; preds = %5
  %10 = call i32 @crypto_stream_xsalsa20(i8* nonnull %7, i64 32, i8* nonnull %3, i8* nonnull %4) #5
  %11 = getelementptr i8, i8* %1, i32 16
  %12 = getelementptr i8, i8* %1, i32 32
  %13 = add i64 %2, -32
  %14 = call i32 @crypto_onetimeauth_poly1305_verify(i8* %11, i8* %12, i64 %13, i8* nonnull %7) #5
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %18

16:                                               ; preds = %9
  %17 = call i32 @crypto_stream_xsalsa20_xor(i8* %0, i8* nonnull %1, i64 %2, i8* nonnull %3, i8* nonnull %4) #5
  call void @llvm.memset.p0i8.i32(i8* nonnull align 1 dereferenceable(32) %0, i8 0, i32 32, i1 false)
  br label %18

18:                                               ; preds = %16, %9, %5
  %19 = phi i32 [ -1, %5 ], [ -1, %9 ], [ 0, %16 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #5
  ret i32 %19
}

declare i32 @crypto_stream_xsalsa20(i8* %0, i64 %1, i8* %2, i8* %3) local_unnamed_addr #2

declare i32 @crypto_onetimeauth_poly1305_verify(i8* %0, i8* %1, i64 %2, i8* %3) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xsalsa20poly1305_keybytes() local_unnamed_addr #3 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xsalsa20poly1305_noncebytes() local_unnamed_addr #3 {
  ret i32 24
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xsalsa20poly1305_zerobytes() local_unnamed_addr #3 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xsalsa20poly1305_boxzerobytes() local_unnamed_addr #3 {
  ret i32 16
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xsalsa20poly1305_macbytes() local_unnamed_addr #3 {
  ret i32 16
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xsalsa20poly1305_messagebytes_max() local_unnamed_addr #3 {
  ret i32 -17
}

; Function Attrs: nounwind
define void @crypto_secretbox_xsalsa20poly1305_keygen(i8* nonnull %0) local_unnamed_addr #0 {
  tail call void @randombytes_buf(i8* nonnull %0, i32 32) #5
  ret void
}

declare void @randombytes_buf(i8* %0, i32 %1) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #4

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind willreturn writeonly }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for crypto_secretbox_xsalsa20poly1305_zerobytes()

; entering Souper's runOnFunction() for crypto_secretbox_xsalsa20poly1305_boxzerobytes()

; ModuleID = './secretbox_xsalsa20poly1305.c.bc'
source_filename = "crypto_secretbox/xsalsa20poly1305/secretbox_xsalsa20poly1305.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

; Function Attrs: nounwind
define i32 @crypto_secretbox_xsalsa20poly1305(i8* nonnull %0, i8* %1, i64 %2, i8* nonnull %3, i8* nonnull %4) local_unnamed_addr #0 {
  %6 = icmp ult i64 %2, 32
  br i1 %6, label %13, label %7

7:                                                ; preds = %5
  %8 = tail call i32 @crypto_stream_xsalsa20_xor(i8* nonnull %0, i8* %1, i64 %2, i8* nonnull %3, i8* nonnull %4) #5
  %9 = getelementptr i8, i8* %0, i32 16
  %10 = getelementptr i8, i8* %0, i32 32
  %11 = add i64 %2, -32
  %12 = tail call i32 @crypto_onetimeauth_poly1305(i8* %9, i8* %10, i64 %11, i8* nonnull %0) #5
  call void @llvm.memset.p0i8.i32(i8* nonnull align 1 dereferenceable(16) %0, i8 0, i32 16, i1 false)
  br label %13

13:                                               ; preds = %7, %5
  %14 = phi i32 [ -1, %5 ], [ 0, %7 ]
  ret i32 %14
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #1

declare i32 @crypto_stream_xsalsa20_xor(i8* %0, i8* %1, i64 %2, i8* %3, i8* %4) local_unnamed_addr #2

declare i32 @crypto_onetimeauth_poly1305(i8* %0, i8* %1, i64 %2, i8* %3) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #1

; Function Attrs: nounwind
define i32 @crypto_secretbox_xsalsa20poly1305_open(i8* %0, i8* nonnull %1, i64 %2, i8* nonnull %3, i8* nonnull %4) local_unnamed_addr #0 {
  %6 = alloca [32 x i8], align 16
  %7 = getelementptr inbounds [32 x i8], [32 x i8]* %6, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #5
  %8 = icmp ult i64 %2, 32
  br i1 %8, label %18, label %9

9:                                                ; preds = %5
  %10 = call i32 @crypto_stream_xsalsa20(i8* nonnull %7, i64 32, i8* nonnull %3, i8* nonnull %4) #5
  %11 = getelementptr i8, i8* %1, i32 16
  %12 = getelementptr i8, i8* %1, i32 32
  %13 = add i64 %2, -32
  %14 = call i32 @crypto_onetimeauth_poly1305_verify(i8* %11, i8* %12, i64 %13, i8* nonnull %7) #5
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %18

16:                                               ; preds = %9
  %17 = call i32 @crypto_stream_xsalsa20_xor(i8* %0, i8* nonnull %1, i64 %2, i8* nonnull %3, i8* nonnull %4) #5
  call void @llvm.memset.p0i8.i32(i8* nonnull align 1 dereferenceable(32) %0, i8 0, i32 32, i1 false)
  br label %18

18:                                               ; preds = %16, %9, %5
  %19 = phi i32 [ -1, %5 ], [ -1, %9 ], [ 0, %16 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #5
  ret i32 %19
}

declare i32 @crypto_stream_xsalsa20(i8* %0, i64 %1, i8* %2, i8* %3) local_unnamed_addr #2

declare i32 @crypto_onetimeauth_poly1305_verify(i8* %0, i8* %1, i64 %2, i8* %3) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xsalsa20poly1305_keybytes() local_unnamed_addr #3 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xsalsa20poly1305_noncebytes() local_unnamed_addr #3 {
  ret i32 24
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xsalsa20poly1305_zerobytes() local_unnamed_addr #3 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xsalsa20poly1305_boxzerobytes() local_unnamed_addr #3 {
  ret i32 16
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xsalsa20poly1305_macbytes() local_unnamed_addr #3 {
  ret i32 16
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xsalsa20poly1305_messagebytes_max() local_unnamed_addr #3 {
  ret i32 -17
}

; Function Attrs: nounwind
define void @crypto_secretbox_xsalsa20poly1305_keygen(i8* nonnull %0) local_unnamed_addr #0 {
  tail call void @randombytes_buf(i8* nonnull %0, i32 32) #5
  ret void
}

declare void @randombytes_buf(i8* %0, i32 %1) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #4

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind willreturn writeonly }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for crypto_secretbox_xsalsa20poly1305_boxzerobytes()

; entering Souper's runOnFunction() for crypto_secretbox_xsalsa20poly1305_macbytes()

; ModuleID = './secretbox_xsalsa20poly1305.c.bc'
source_filename = "crypto_secretbox/xsalsa20poly1305/secretbox_xsalsa20poly1305.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

; Function Attrs: nounwind
define i32 @crypto_secretbox_xsalsa20poly1305(i8* nonnull %0, i8* %1, i64 %2, i8* nonnull %3, i8* nonnull %4) local_unnamed_addr #0 {
  %6 = icmp ult i64 %2, 32
  br i1 %6, label %13, label %7

7:                                                ; preds = %5
  %8 = tail call i32 @crypto_stream_xsalsa20_xor(i8* nonnull %0, i8* %1, i64 %2, i8* nonnull %3, i8* nonnull %4) #5
  %9 = getelementptr i8, i8* %0, i32 16
  %10 = getelementptr i8, i8* %0, i32 32
  %11 = add i64 %2, -32
  %12 = tail call i32 @crypto_onetimeauth_poly1305(i8* %9, i8* %10, i64 %11, i8* nonnull %0) #5
  call void @llvm.memset.p0i8.i32(i8* nonnull align 1 dereferenceable(16) %0, i8 0, i32 16, i1 false)
  br label %13

13:                                               ; preds = %7, %5
  %14 = phi i32 [ -1, %5 ], [ 0, %7 ]
  ret i32 %14
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #1

declare i32 @crypto_stream_xsalsa20_xor(i8* %0, i8* %1, i64 %2, i8* %3, i8* %4) local_unnamed_addr #2

declare i32 @crypto_onetimeauth_poly1305(i8* %0, i8* %1, i64 %2, i8* %3) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #1

; Function Attrs: nounwind
define i32 @crypto_secretbox_xsalsa20poly1305_open(i8* %0, i8* nonnull %1, i64 %2, i8* nonnull %3, i8* nonnull %4) local_unnamed_addr #0 {
  %6 = alloca [32 x i8], align 16
  %7 = getelementptr inbounds [32 x i8], [32 x i8]* %6, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #5
  %8 = icmp ult i64 %2, 32
  br i1 %8, label %18, label %9

9:                                                ; preds = %5
  %10 = call i32 @crypto_stream_xsalsa20(i8* nonnull %7, i64 32, i8* nonnull %3, i8* nonnull %4) #5
  %11 = getelementptr i8, i8* %1, i32 16
  %12 = getelementptr i8, i8* %1, i32 32
  %13 = add i64 %2, -32
  %14 = call i32 @crypto_onetimeauth_poly1305_verify(i8* %11, i8* %12, i64 %13, i8* nonnull %7) #5
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %18

16:                                               ; preds = %9
  %17 = call i32 @crypto_stream_xsalsa20_xor(i8* %0, i8* nonnull %1, i64 %2, i8* nonnull %3, i8* nonnull %4) #5
  call void @llvm.memset.p0i8.i32(i8* nonnull align 1 dereferenceable(32) %0, i8 0, i32 32, i1 false)
  br label %18

18:                                               ; preds = %16, %9, %5
  %19 = phi i32 [ -1, %5 ], [ -1, %9 ], [ 0, %16 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #5
  ret i32 %19
}

declare i32 @crypto_stream_xsalsa20(i8* %0, i64 %1, i8* %2, i8* %3) local_unnamed_addr #2

declare i32 @crypto_onetimeauth_poly1305_verify(i8* %0, i8* %1, i64 %2, i8* %3) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xsalsa20poly1305_keybytes() local_unnamed_addr #3 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xsalsa20poly1305_noncebytes() local_unnamed_addr #3 {
  ret i32 24
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xsalsa20poly1305_zerobytes() local_unnamed_addr #3 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xsalsa20poly1305_boxzerobytes() local_unnamed_addr #3 {
  ret i32 16
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xsalsa20poly1305_macbytes() local_unnamed_addr #3 {
  ret i32 16
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xsalsa20poly1305_messagebytes_max() local_unnamed_addr #3 {
  ret i32 -17
}

; Function Attrs: nounwind
define void @crypto_secretbox_xsalsa20poly1305_keygen(i8* nonnull %0) local_unnamed_addr #0 {
  tail call void @randombytes_buf(i8* nonnull %0, i32 32) #5
  ret void
}

declare void @randombytes_buf(i8* %0, i32 %1) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #4

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind willreturn writeonly }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for crypto_secretbox_xsalsa20poly1305_macbytes()

; entering Souper's runOnFunction() for crypto_secretbox_xsalsa20poly1305_messagebytes_max()

; ModuleID = './secretbox_xsalsa20poly1305.c.bc'
source_filename = "crypto_secretbox/xsalsa20poly1305/secretbox_xsalsa20poly1305.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

; Function Attrs: nounwind
define i32 @crypto_secretbox_xsalsa20poly1305(i8* nonnull %0, i8* %1, i64 %2, i8* nonnull %3, i8* nonnull %4) local_unnamed_addr #0 {
  %6 = icmp ult i64 %2, 32
  br i1 %6, label %13, label %7

7:                                                ; preds = %5
  %8 = tail call i32 @crypto_stream_xsalsa20_xor(i8* nonnull %0, i8* %1, i64 %2, i8* nonnull %3, i8* nonnull %4) #5
  %9 = getelementptr i8, i8* %0, i32 16
  %10 = getelementptr i8, i8* %0, i32 32
  %11 = add i64 %2, -32
  %12 = tail call i32 @crypto_onetimeauth_poly1305(i8* %9, i8* %10, i64 %11, i8* nonnull %0) #5
  call void @llvm.memset.p0i8.i32(i8* nonnull align 1 dereferenceable(16) %0, i8 0, i32 16, i1 false)
  br label %13

13:                                               ; preds = %7, %5
  %14 = phi i32 [ -1, %5 ], [ 0, %7 ]
  ret i32 %14
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #1

declare i32 @crypto_stream_xsalsa20_xor(i8* %0, i8* %1, i64 %2, i8* %3, i8* %4) local_unnamed_addr #2

declare i32 @crypto_onetimeauth_poly1305(i8* %0, i8* %1, i64 %2, i8* %3) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #1

; Function Attrs: nounwind
define i32 @crypto_secretbox_xsalsa20poly1305_open(i8* %0, i8* nonnull %1, i64 %2, i8* nonnull %3, i8* nonnull %4) local_unnamed_addr #0 {
  %6 = alloca [32 x i8], align 16
  %7 = getelementptr inbounds [32 x i8], [32 x i8]* %6, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #5
  %8 = icmp ult i64 %2, 32
  br i1 %8, label %18, label %9

9:                                                ; preds = %5
  %10 = call i32 @crypto_stream_xsalsa20(i8* nonnull %7, i64 32, i8* nonnull %3, i8* nonnull %4) #5
  %11 = getelementptr i8, i8* %1, i32 16
  %12 = getelementptr i8, i8* %1, i32 32
  %13 = add i64 %2, -32
  %14 = call i32 @crypto_onetimeauth_poly1305_verify(i8* %11, i8* %12, i64 %13, i8* nonnull %7) #5
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %18

16:                                               ; preds = %9
  %17 = call i32 @crypto_stream_xsalsa20_xor(i8* %0, i8* nonnull %1, i64 %2, i8* nonnull %3, i8* nonnull %4) #5
  call void @llvm.memset.p0i8.i32(i8* nonnull align 1 dereferenceable(32) %0, i8 0, i32 32, i1 false)
  br label %18

18:                                               ; preds = %16, %9, %5
  %19 = phi i32 [ -1, %5 ], [ -1, %9 ], [ 0, %16 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #5
  ret i32 %19
}

declare i32 @crypto_stream_xsalsa20(i8* %0, i64 %1, i8* %2, i8* %3) local_unnamed_addr #2

declare i32 @crypto_onetimeauth_poly1305_verify(i8* %0, i8* %1, i64 %2, i8* %3) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xsalsa20poly1305_keybytes() local_unnamed_addr #3 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xsalsa20poly1305_noncebytes() local_unnamed_addr #3 {
  ret i32 24
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xsalsa20poly1305_zerobytes() local_unnamed_addr #3 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xsalsa20poly1305_boxzerobytes() local_unnamed_addr #3 {
  ret i32 16
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xsalsa20poly1305_macbytes() local_unnamed_addr #3 {
  ret i32 16
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xsalsa20poly1305_messagebytes_max() local_unnamed_addr #3 {
  ret i32 -17
}

; Function Attrs: nounwind
define void @crypto_secretbox_xsalsa20poly1305_keygen(i8* nonnull %0) local_unnamed_addr #0 {
  tail call void @randombytes_buf(i8* nonnull %0, i32 32) #5
  ret void
}

declare void @randombytes_buf(i8* %0, i32 %1) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #4

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind willreturn writeonly }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for crypto_secretbox_xsalsa20poly1305_messagebytes_max()

; entering Souper's runOnFunction() for crypto_secretbox_xsalsa20poly1305_keygen()

; ModuleID = './secretbox_xsalsa20poly1305.c.bc'
source_filename = "crypto_secretbox/xsalsa20poly1305/secretbox_xsalsa20poly1305.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

; Function Attrs: nounwind
define i32 @crypto_secretbox_xsalsa20poly1305(i8* nonnull %0, i8* %1, i64 %2, i8* nonnull %3, i8* nonnull %4) local_unnamed_addr #0 {
  %6 = icmp ult i64 %2, 32
  br i1 %6, label %13, label %7

7:                                                ; preds = %5
  %8 = tail call i32 @crypto_stream_xsalsa20_xor(i8* nonnull %0, i8* %1, i64 %2, i8* nonnull %3, i8* nonnull %4) #5
  %9 = getelementptr i8, i8* %0, i32 16
  %10 = getelementptr i8, i8* %0, i32 32
  %11 = add i64 %2, -32
  %12 = tail call i32 @crypto_onetimeauth_poly1305(i8* %9, i8* %10, i64 %11, i8* nonnull %0) #5
  call void @llvm.memset.p0i8.i32(i8* nonnull align 1 dereferenceable(16) %0, i8 0, i32 16, i1 false)
  br label %13

13:                                               ; preds = %7, %5
  %14 = phi i32 [ -1, %5 ], [ 0, %7 ]
  ret i32 %14
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #1

declare i32 @crypto_stream_xsalsa20_xor(i8* %0, i8* %1, i64 %2, i8* %3, i8* %4) local_unnamed_addr #2

declare i32 @crypto_onetimeauth_poly1305(i8* %0, i8* %1, i64 %2, i8* %3) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #1

; Function Attrs: nounwind
define i32 @crypto_secretbox_xsalsa20poly1305_open(i8* %0, i8* nonnull %1, i64 %2, i8* nonnull %3, i8* nonnull %4) local_unnamed_addr #0 {
  %6 = alloca [32 x i8], align 16
  %7 = getelementptr inbounds [32 x i8], [32 x i8]* %6, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #5
  %8 = icmp ult i64 %2, 32
  br i1 %8, label %18, label %9

9:                                                ; preds = %5
  %10 = call i32 @crypto_stream_xsalsa20(i8* nonnull %7, i64 32, i8* nonnull %3, i8* nonnull %4) #5
  %11 = getelementptr i8, i8* %1, i32 16
  %12 = getelementptr i8, i8* %1, i32 32
  %13 = add i64 %2, -32
  %14 = call i32 @crypto_onetimeauth_poly1305_verify(i8* %11, i8* %12, i64 %13, i8* nonnull %7) #5
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %18

16:                                               ; preds = %9
  %17 = call i32 @crypto_stream_xsalsa20_xor(i8* %0, i8* nonnull %1, i64 %2, i8* nonnull %3, i8* nonnull %4) #5
  call void @llvm.memset.p0i8.i32(i8* nonnull align 1 dereferenceable(32) %0, i8 0, i32 32, i1 false)
  br label %18

18:                                               ; preds = %16, %9, %5
  %19 = phi i32 [ -1, %5 ], [ -1, %9 ], [ 0, %16 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #5
  ret i32 %19
}

declare i32 @crypto_stream_xsalsa20(i8* %0, i64 %1, i8* %2, i8* %3) local_unnamed_addr #2

declare i32 @crypto_onetimeauth_poly1305_verify(i8* %0, i8* %1, i64 %2, i8* %3) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xsalsa20poly1305_keybytes() local_unnamed_addr #3 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xsalsa20poly1305_noncebytes() local_unnamed_addr #3 {
  ret i32 24
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xsalsa20poly1305_zerobytes() local_unnamed_addr #3 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xsalsa20poly1305_boxzerobytes() local_unnamed_addr #3 {
  ret i32 16
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xsalsa20poly1305_macbytes() local_unnamed_addr #3 {
  ret i32 16
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_secretbox_xsalsa20poly1305_messagebytes_max() local_unnamed_addr #3 {
  ret i32 -17
}

; Function Attrs: nounwind
define void @crypto_secretbox_xsalsa20poly1305_keygen(i8* nonnull %0) local_unnamed_addr #0 {
  tail call void @randombytes_buf(i8* nonnull %0, i32 32) #5
  ret void
}

declare void @randombytes_buf(i8* %0, i32 %1) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #4

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind willreturn writeonly }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for crypto_secretbox_xsalsa20poly1305_keygen()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
