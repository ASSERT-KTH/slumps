; entering Souper's runOnFunction() for crypto_auth_hmacsha256_keygen()

; ModuleID = './auth_hmacsha256.c.bc'
source_filename = "crypto_auth/hmacsha256/auth_hmacsha256.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.crypto_auth_hmacsha256_state = type { %struct.crypto_hash_sha256_state, %struct.crypto_hash_sha256_state }
%struct.crypto_hash_sha256_state = type { [8 x i32], i64, [64 x i8] }

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_auth_hmacsha256_bytes() local_unnamed_addr #0 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_auth_hmacsha256_keybytes() local_unnamed_addr #0 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_auth_hmacsha256_statebytes() local_unnamed_addr #0 {
  ret i32 208
}

; Function Attrs: nounwind
define void @crypto_auth_hmacsha256_keygen(i8* nonnull %0) local_unnamed_addr #1 {
  tail call void @randombytes_buf(i8* nonnull %0, i32 32) #5
  ret void
}

declare void @randombytes_buf(i8* %0, i32 %1) local_unnamed_addr #2

; Function Attrs: nounwind
define i32 @crypto_auth_hmacsha256_init(%struct.crypto_auth_hmacsha256_state* nonnull %0, i8* nonnull %1, i32 %2) local_unnamed_addr #1 {
  %4 = alloca [64 x i8], align 16
  %5 = alloca [32 x i8], align 16
  %6 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %6) #5
  %7 = getelementptr inbounds [32 x i8], [32 x i8]* %5, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #5
  %8 = icmp ugt i32 %2, 64
  br i1 %8, label %9, label %15

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.crypto_auth_hmacsha256_state, %struct.crypto_auth_hmacsha256_state* %0, i32 0, i32 0
  %11 = tail call i32 @crypto_hash_sha256_init(%struct.crypto_hash_sha256_state* nonnull %10) #5
  %12 = zext i32 %2 to i64
  %13 = tail call i32 @crypto_hash_sha256_update(%struct.crypto_hash_sha256_state* nonnull %10, i8* nonnull %1, i64 %12) #5
  %14 = call i32 @crypto_hash_sha256_final(%struct.crypto_hash_sha256_state* nonnull %10, i8* nonnull %7) #5
  br label %15

15:                                               ; preds = %9, %3
  %16 = phi i8* [ %7, %9 ], [ %1, %3 ]
  %17 = phi i32 [ 32, %9 ], [ %2, %3 ]
  %18 = getelementptr inbounds %struct.crypto_auth_hmacsha256_state, %struct.crypto_auth_hmacsha256_state* %0, i32 0, i32 0
  %19 = call i32 @crypto_hash_sha256_init(%struct.crypto_hash_sha256_state* nonnull %18) #5
  call void @llvm.memset.p0i8.i32(i8* nonnull align 16 dereferenceable(64) %6, i8 54, i32 64, i1 false)
  %20 = icmp eq i32 %17, 0
  br i1 %20, label %36, label %21

21:                                               ; preds = %15
  %22 = load i8, i8* %16, align 1
  %23 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i32 0, i32 0
  %24 = xor i8 %22, 54
  store i8 %24, i8* %23, align 16
  %25 = icmp eq i32 %17, 1
  br i1 %25, label %36, label %26

26:                                               ; preds = %21, %26
  %27 = phi i32 [ %34, %26 ], [ 1, %21 ]
  %28 = getelementptr [64 x i8], [64 x i8]* %4, i32 0, i32 %27
  %29 = load i8, i8* %28, align 1
  %30 = getelementptr i8, i8* %16, i32 %27
  %31 = load i8, i8* %30, align 1
  %32 = getelementptr [64 x i8], [64 x i8]* %4, i32 0, i32 %27
  %33 = xor i8 %29, %31
  store i8 %33, i8* %32, align 1
  %34 = add nuw i32 %27, 1
  %35 = icmp eq i32 %34, %17
  br i1 %35, label %36, label %26

36:                                               ; preds = %26, %21, %15
  %37 = call i32 @crypto_hash_sha256_update(%struct.crypto_hash_sha256_state* nonnull %18, i8* nonnull %6, i64 64) #5
  %38 = getelementptr inbounds %struct.crypto_auth_hmacsha256_state, %struct.crypto_auth_hmacsha256_state* %0, i32 0, i32 1
  %39 = call i32 @crypto_hash_sha256_init(%struct.crypto_hash_sha256_state* nonnull %38) #5
  call void @llvm.memset.p0i8.i32(i8* nonnull align 16 dereferenceable(64) %6, i8 92, i32 64, i1 false)
  br i1 %20, label %55, label %40

40:                                               ; preds = %36
  %41 = load i8, i8* %16, align 1
  %42 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i32 0, i32 0
  %43 = xor i8 %41, 92
  store i8 %43, i8* %42, align 16
  %44 = icmp eq i32 %17, 1
  br i1 %44, label %55, label %45

45:                                               ; preds = %40, %45
  %46 = phi i32 [ %53, %45 ], [ 1, %40 ]
  %47 = getelementptr [64 x i8], [64 x i8]* %4, i32 0, i32 %46
  %48 = load i8, i8* %47, align 1
  %49 = getelementptr i8, i8* %16, i32 %46
  %50 = load i8, i8* %49, align 1
  %51 = getelementptr [64 x i8], [64 x i8]* %4, i32 0, i32 %46
  %52 = xor i8 %48, %50
  store i8 %52, i8* %51, align 1
  %53 = add nuw i32 %46, 1
  %54 = icmp eq i32 %53, %17
  br i1 %54, label %55, label %45

55:                                               ; preds = %45, %40, %36
  %56 = call i32 @crypto_hash_sha256_update(%struct.crypto_hash_sha256_state* nonnull %38, i8* nonnull %6, i64 64) #5
  call void @sodium_memzero(i8* nonnull %6, i32 64) #5
  call void @sodium_memzero(i8* nonnull %7, i32 32) #5
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #3

declare i32 @crypto_hash_sha256_init(%struct.crypto_hash_sha256_state* %0) local_unnamed_addr #2

declare i32 @crypto_hash_sha256_update(%struct.crypto_hash_sha256_state* %0, i8* %1, i64 %2) local_unnamed_addr #2

declare i32 @crypto_hash_sha256_final(%struct.crypto_hash_sha256_state* %0, i8* %1) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #4

declare void @sodium_memzero(i8* %0, i32 %1) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #3

; Function Attrs: nounwind
define i32 @crypto_auth_hmacsha256_update(%struct.crypto_auth_hmacsha256_state* nonnull %0, i8* %1, i64 %2) local_unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.crypto_auth_hmacsha256_state, %struct.crypto_auth_hmacsha256_state* %0, i32 0, i32 0
  %5 = tail call i32 @crypto_hash_sha256_update(%struct.crypto_hash_sha256_state* nonnull %4, i8* %1, i64 %2) #5
  ret i32 0
}

; Function Attrs: nounwind
define i32 @crypto_auth_hmacsha256_final(%struct.crypto_auth_hmacsha256_state* nonnull %0, i8* nonnull %1) local_unnamed_addr #1 {
  %3 = alloca [32 x i8], align 16
  %4 = getelementptr inbounds [32 x i8], [32 x i8]* %3, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %4) #5
  %5 = getelementptr inbounds %struct.crypto_auth_hmacsha256_state, %struct.crypto_auth_hmacsha256_state* %0, i32 0, i32 0
  %6 = call i32 @crypto_hash_sha256_final(%struct.crypto_hash_sha256_state* nonnull %5, i8* nonnull %4) #5
  %7 = getelementptr inbounds %struct.crypto_auth_hmacsha256_state, %struct.crypto_auth_hmacsha256_state* %0, i32 0, i32 1
  %8 = call i32 @crypto_hash_sha256_update(%struct.crypto_hash_sha256_state* nonnull %7, i8* nonnull %4, i64 32) #5
  %9 = call i32 @crypto_hash_sha256_final(%struct.crypto_hash_sha256_state* nonnull %7, i8* nonnull %1) #5
  call void @sodium_memzero(i8* nonnull %4, i32 32) #5
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: nounwind
define i32 @crypto_auth_hmacsha256(i8* nonnull %0, i8* %1, i64 %2, i8* nonnull %3) local_unnamed_addr #1 {
  %5 = alloca [32 x i8], align 16
  %6 = alloca %struct.crypto_auth_hmacsha256_state, align 8
  %7 = bitcast %struct.crypto_auth_hmacsha256_state* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 208, i8* nonnull %7) #5
  %8 = call i32 @crypto_auth_hmacsha256_init(%struct.crypto_auth_hmacsha256_state* %6, i8* %3, i32 32)
  %9 = getelementptr inbounds %struct.crypto_auth_hmacsha256_state, %struct.crypto_auth_hmacsha256_state* %6, i32 0, i32 0
  %10 = call i32 @crypto_hash_sha256_update(%struct.crypto_hash_sha256_state* nonnull %9, i8* %1, i64 %2) #5
  %11 = getelementptr inbounds [32 x i8], [32 x i8]* %5, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #5
  %12 = call i32 @crypto_hash_sha256_final(%struct.crypto_hash_sha256_state* nonnull %9, i8* nonnull %11) #5
  %13 = getelementptr inbounds %struct.crypto_auth_hmacsha256_state, %struct.crypto_auth_hmacsha256_state* %6, i32 0, i32 1
  %14 = call i32 @crypto_hash_sha256_update(%struct.crypto_hash_sha256_state* nonnull %13, i8* nonnull %11, i64 32) #5
  %15 = call i32 @crypto_hash_sha256_final(%struct.crypto_hash_sha256_state* nonnull %13, i8* nonnull %0) #5
  call void @sodium_memzero(i8* nonnull %11, i32 32) #5
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 208, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: nounwind
define i32 @crypto_auth_hmacsha256_verify(i8* nonnull %0, i8* %1, i64 %2, i8* nonnull %3) local_unnamed_addr #1 {
  %5 = alloca [32 x i8], align 16
  %6 = alloca %struct.crypto_auth_hmacsha256_state, align 8
  %7 = alloca [32 x i8], align 16
  %8 = getelementptr inbounds [32 x i8], [32 x i8]* %7, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %8) #5
  %9 = bitcast %struct.crypto_auth_hmacsha256_state* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 208, i8* nonnull %9) #5
  %10 = call i32 @crypto_auth_hmacsha256_init(%struct.crypto_auth_hmacsha256_state* %6, i8* %3, i32 32) #5
  %11 = getelementptr inbounds %struct.crypto_auth_hmacsha256_state, %struct.crypto_auth_hmacsha256_state* %6, i32 0, i32 0
  %12 = call i32 @crypto_hash_sha256_update(%struct.crypto_hash_sha256_state* nonnull %11, i8* %1, i64 %2) #5
  %13 = getelementptr inbounds [32 x i8], [32 x i8]* %5, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %13) #5
  %14 = call i32 @crypto_hash_sha256_final(%struct.crypto_hash_sha256_state* nonnull %11, i8* nonnull %13) #5
  %15 = getelementptr inbounds %struct.crypto_auth_hmacsha256_state, %struct.crypto_auth_hmacsha256_state* %6, i32 0, i32 1
  %16 = call i32 @crypto_hash_sha256_update(%struct.crypto_hash_sha256_state* nonnull %15, i8* nonnull %13, i64 32) #5
  %17 = call i32 @crypto_hash_sha256_final(%struct.crypto_hash_sha256_state* nonnull %15, i8* nonnull %8) #5
  call void @sodium_memzero(i8* nonnull %13, i32 32) #5
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %13) #5
  call void @llvm.lifetime.end.p0i8(i64 208, i8* nonnull %9) #5
  %18 = call i32 @crypto_verify_32(i8* nonnull %0, i8* nonnull %8) #5
  %19 = icmp eq i8* %8, %0
  %20 = select i1 %19, i32 -1, i32 %18
  %21 = call i32 @sodium_memcmp(i8* nonnull %8, i8* nonnull %0, i32 32) #5
  %22 = or i32 %20, %21
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %8) #5
  ret i32 %22
}

declare i32 @crypto_verify_32(i8* %0, i8* %1) local_unnamed_addr #2

declare i32 @sodium_memcmp(i8* %0, i8* %1, i32 %2) local_unnamed_addr #2

attributes #0 = { norecurse nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { argmemonly nounwind willreturn writeonly }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for crypto_auth_hmacsha256_keygen()

