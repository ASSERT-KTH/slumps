
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for chacha20_ref.c.bc:stream_ref()

; ModuleID = 'chacha20_ref.c.bc'
source_filename = "crypto_stream/chacha20/ref/chacha20_ref.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.crypto_stream_chacha20_implementation = type { i32 (i8*, i64, i8*, i8*)*, i32 (i8*, i64, i8*, i8*)*, i32 (i8*, i8*, i64, i8*, i64, i8*)*, i32 (i8*, i8*, i64, i8*, i32, i8*)* }
%struct.chacha_ctx = type { [16 x i32] }

@crypto_stream_chacha20_ref_implementation = hidden local_unnamed_addr global %struct.crypto_stream_chacha20_implementation { i32 (i8*, i64, i8*, i8*)* @stream_ref, i32 (i8*, i64, i8*, i8*)* @stream_ietf_ext_ref, i32 (i8*, i8*, i64, i8*, i64, i8*)* @stream_ref_xor_ic, i32 (i8*, i8*, i64, i8*, i32, i8*)* @stream_ietf_ext_ref_xor_ic }, align 4

; Function Attrs: nounwind
define internal i32 @stream_ref(i8* nocapture %0, i64 %1, i8* nocapture readonly %2, i8* nocapture readonly %3) #0 {
  %5 = alloca %struct.chacha_ctx, align 4
  %6 = bitcast %struct.chacha_ctx* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %6) #4
  %7 = icmp eq i64 %1, 0
  br i1 %7, label %54, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 0
  store i32 1634760805, i32* %9, align 4
  %10 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 1
  store i32 857760878, i32* %10, align 4
  %11 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 2
  store i32 2036477234, i32* %11, align 4
  %12 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 3
  store i32 1797285236, i32* %12, align 4
  %13 = bitcast i8* %3 to i32*
  %14 = load i32, i32* %13, align 1
  %15 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 4
  store i32 %14, i32* %15, align 4
  %16 = getelementptr i8, i8* %3, i32 4
  %17 = bitcast i8* %16 to i32*
  %18 = load i32, i32* %17, align 1
  %19 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 5
  store i32 %18, i32* %19, align 4
  %20 = getelementptr i8, i8* %3, i32 8
  %21 = bitcast i8* %20 to i32*
  %22 = load i32, i32* %21, align 1
  %23 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 6
  store i32 %22, i32* %23, align 4
  %24 = getelementptr i8, i8* %3, i32 12
  %25 = bitcast i8* %24 to i32*
  %26 = load i32, i32* %25, align 1
  %27 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 7
  store i32 %26, i32* %27, align 4
  %28 = getelementptr i8, i8* %3, i32 16
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 1
  %31 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 8
  store i32 %30, i32* %31, align 4
  %32 = getelementptr i8, i8* %3, i32 20
  %33 = bitcast i8* %32 to i32*
  %34 = load i32, i32* %33, align 1
  %35 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 9
  store i32 %34, i32* %35, align 4
  %36 = getelementptr i8, i8* %3, i32 24
  %37 = bitcast i8* %36 to i32*
  %38 = load i32, i32* %37, align 1
  %39 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 10
  store i32 %38, i32* %39, align 4
  %40 = getelementptr i8, i8* %3, i32 28
  %41 = bitcast i8* %40 to i32*
  %42 = load i32, i32* %41, align 1
  %43 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 11
  store i32 %42, i32* %43, align 4
  %44 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 12
  store i32 0, i32* %44, align 4
  %45 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 13
  store i32 0, i32* %45, align 4
  %46 = bitcast i8* %2 to i32*
  %47 = load i32, i32* %46, align 1
  %48 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 14
  store i32 %47, i32* %48, align 4
  %49 = getelementptr i8, i8* %2, i32 4
  %50 = bitcast i8* %49 to i32*
  %51 = load i32, i32* %50, align 1
  %52 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 15
  store i32 %51, i32* %52, align 4
  %53 = trunc i64 %1 to i32
  tail call void @llvm.memset.p0i8.i32(i8* align 1 %0, i8 0, i32 %53, i1 false)
  call fastcc void @chacha20_encrypt_bytes(%struct.chacha_ctx* nonnull %5, i8* %0, i8* %0, i64 %1)
  call void @sodium_memzero(i8* nonnull %6, i32 64) #4
  br label %54

54:                                               ; preds = %4, %8
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %6) #4
  ret i32 0
}

; Function Attrs: nounwind
define internal i32 @stream_ietf_ext_ref(i8* nocapture %0, i64 %1, i8* nocapture readonly %2, i8* nocapture readonly %3) #0 {
  %5 = alloca %struct.chacha_ctx, align 4
  %6 = bitcast %struct.chacha_ctx* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %6) #4
  %7 = icmp eq i64 %1, 0
  br i1 %7, label %57, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 0
  store i32 1634760805, i32* %9, align 4
  %10 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 1
  store i32 857760878, i32* %10, align 4
  %11 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 2
  store i32 2036477234, i32* %11, align 4
  %12 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 3
  store i32 1797285236, i32* %12, align 4
  %13 = bitcast i8* %3 to i32*
  %14 = load i32, i32* %13, align 1
  %15 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 4
  store i32 %14, i32* %15, align 4
  %16 = getelementptr i8, i8* %3, i32 4
  %17 = bitcast i8* %16 to i32*
  %18 = load i32, i32* %17, align 1
  %19 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 5
  store i32 %18, i32* %19, align 4
  %20 = getelementptr i8, i8* %3, i32 8
  %21 = bitcast i8* %20 to i32*
  %22 = load i32, i32* %21, align 1
  %23 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 6
  store i32 %22, i32* %23, align 4
  %24 = getelementptr i8, i8* %3, i32 12
  %25 = bitcast i8* %24 to i32*
  %26 = load i32, i32* %25, align 1
  %27 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 7
  store i32 %26, i32* %27, align 4
  %28 = getelementptr i8, i8* %3, i32 16
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 1
  %31 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 8
  store i32 %30, i32* %31, align 4
  %32 = getelementptr i8, i8* %3, i32 20
  %33 = bitcast i8* %32 to i32*
  %34 = load i32, i32* %33, align 1
  %35 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 9
  store i32 %34, i32* %35, align 4
  %36 = getelementptr i8, i8* %3, i32 24
  %37 = bitcast i8* %36 to i32*
  %38 = load i32, i32* %37, align 1
  %39 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 10
  store i32 %38, i32* %39, align 4
  %40 = getelementptr i8, i8* %3, i32 28
  %41 = bitcast i8* %40 to i32*
  %42 = load i32, i32* %41, align 1
  %43 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 11
  store i32 %42, i32* %43, align 4
  %44 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 12
  store i32 0, i32* %44, align 4
  %45 = bitcast i8* %2 to i32*
  %46 = load i32, i32* %45, align 1
  %47 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 13
  store i32 %46, i32* %47, align 4
  %48 = getelementptr i8, i8* %2, i32 4
  %49 = bitcast i8* %48 to i32*
  %50 = load i32, i32* %49, align 1
  %51 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 14
  store i32 %50, i32* %51, align 4
  %52 = getelementptr i8, i8* %2, i32 8
  %53 = bitcast i8* %52 to i32*
  %54 = load i32, i32* %53, align 1
  %55 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 15
  store i32 %54, i32* %55, align 4
  %56 = trunc i64 %1 to i32
  tail call void @llvm.memset.p0i8.i32(i8* align 1 %0, i8 0, i32 %56, i1 false)
  call fastcc void @chacha20_encrypt_bytes(%struct.chacha_ctx* nonnull %5, i8* %0, i8* %0, i64 %1)
  call void @sodium_memzero(i8* nonnull %6, i32 64) #4
  br label %57

57:                                               ; preds = %4, %8
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %6) #4
  ret i32 0
}

; Function Attrs: nounwind
define internal i32 @stream_ref_xor_ic(i8* nocapture %0, i8* nocapture readonly %1, i64 %2, i8* nocapture readonly %3, i64 %4, i8* nocapture readonly %5) #0 {
  %7 = alloca %struct.chacha_ctx, align 4
  %8 = bitcast %struct.chacha_ctx* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %8) #4
  %9 = icmp eq i64 %2, 0
  br i1 %9, label %58, label %10

10:                                               ; preds = %6
  %11 = lshr i64 %4, 32
  %12 = trunc i64 %11 to i32
  %13 = trunc i64 %4 to i32
  %14 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 0
  store i32 1634760805, i32* %14, align 4
  %15 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 1
  store i32 857760878, i32* %15, align 4
  %16 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 2
  store i32 2036477234, i32* %16, align 4
  %17 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 3
  store i32 1797285236, i32* %17, align 4
  %18 = bitcast i8* %5 to i32*
  %19 = load i32, i32* %18, align 1
  %20 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 4
  store i32 %19, i32* %20, align 4
  %21 = getelementptr i8, i8* %5, i32 4
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 1
  %24 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 5
  store i32 %23, i32* %24, align 4
  %25 = getelementptr i8, i8* %5, i32 8
  %26 = bitcast i8* %25 to i32*
  %27 = load i32, i32* %26, align 1
  %28 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 6
  store i32 %27, i32* %28, align 4
  %29 = getelementptr i8, i8* %5, i32 12
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 1
  %32 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 7
  store i32 %31, i32* %32, align 4
  %33 = getelementptr i8, i8* %5, i32 16
  %34 = bitcast i8* %33 to i32*
  %35 = load i32, i32* %34, align 1
  %36 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 8
  store i32 %35, i32* %36, align 4
  %37 = getelementptr i8, i8* %5, i32 20
  %38 = bitcast i8* %37 to i32*
  %39 = load i32, i32* %38, align 1
  %40 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 9
  store i32 %39, i32* %40, align 4
  %41 = getelementptr i8, i8* %5, i32 24
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %42, align 1
  %44 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 10
  store i32 %43, i32* %44, align 4
  %45 = getelementptr i8, i8* %5, i32 28
  %46 = bitcast i8* %45 to i32*
  %47 = load i32, i32* %46, align 1
  %48 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 11
  store i32 %47, i32* %48, align 4
  %49 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 12
  store i32 %13, i32* %49, align 4
  %50 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 13
  store i32 %12, i32* %50, align 4
  %51 = bitcast i8* %3 to i32*
  %52 = load i32, i32* %51, align 1
  %53 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 14
  store i32 %52, i32* %53, align 4
  %54 = getelementptr i8, i8* %3, i32 4
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 1
  %57 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 15
  store i32 %56, i32* %57, align 4
  call fastcc void @chacha20_encrypt_bytes(%struct.chacha_ctx* nonnull %7, i8* %1, i8* %0, i64 %2)
  call void @sodium_memzero(i8* nonnull %8, i32 64) #4
  br label %58

58:                                               ; preds = %6, %10
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %8) #4
  ret i32 0
}

; Function Attrs: nounwind
define internal i32 @stream_ietf_ext_ref_xor_ic(i8* nocapture %0, i8* nocapture readonly %1, i64 %2, i8* nocapture readonly %3, i32 %4, i8* nocapture readonly %5) #0 {
  %7 = alloca %struct.chacha_ctx, align 4
  %8 = bitcast %struct.chacha_ctx* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %8) #4
  %9 = icmp eq i64 %2, 0
  br i1 %9, label %58, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 0
  store i32 1634760805, i32* %11, align 4
  %12 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 1
  store i32 857760878, i32* %12, align 4
  %13 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 2
  store i32 2036477234, i32* %13, align 4
  %14 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 3
  store i32 1797285236, i32* %14, align 4
  %15 = bitcast i8* %5 to i32*
  %16 = load i32, i32* %15, align 1
  %17 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 4
  store i32 %16, i32* %17, align 4
  %18 = getelementptr i8, i8* %5, i32 4
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 1
  %21 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 5
  store i32 %20, i32* %21, align 4
  %22 = getelementptr i8, i8* %5, i32 8
  %23 = bitcast i8* %22 to i32*
  %24 = load i32, i32* %23, align 1
  %25 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 6
  store i32 %24, i32* %25, align 4
  %26 = getelementptr i8, i8* %5, i32 12
  %27 = bitcast i8* %26 to i32*
  %28 = load i32, i32* %27, align 1
  %29 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 7
  store i32 %28, i32* %29, align 4
  %30 = getelementptr i8, i8* %5, i32 16
  %31 = bitcast i8* %30 to i32*
  %32 = load i32, i32* %31, align 1
  %33 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 8
  store i32 %32, i32* %33, align 4
  %34 = getelementptr i8, i8* %5, i32 20
  %35 = bitcast i8* %34 to i32*
  %36 = load i32, i32* %35, align 1
  %37 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 9
  store i32 %36, i32* %37, align 4
  %38 = getelementptr i8, i8* %5, i32 24
  %39 = bitcast i8* %38 to i32*
  %40 = load i32, i32* %39, align 1
  %41 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 10
  store i32 %40, i32* %41, align 4
  %42 = getelementptr i8, i8* %5, i32 28
  %43 = bitcast i8* %42 to i32*
  %44 = load i32, i32* %43, align 1
  %45 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 11
  store i32 %44, i32* %45, align 4
  %46 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 12
  store i32 %4, i32* %46, align 4
  %47 = bitcast i8* %3 to i32*
  %48 = load i32, i32* %47, align 1
  %49 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 13
  store i32 %48, i32* %49, align 4
  %50 = getelementptr i8, i8* %3, i32 4
  %51 = bitcast i8* %50 to i32*
  %52 = load i32, i32* %51, align 1
  %53 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 14
  store i32 %52, i32* %53, align 4
  %54 = getelementptr i8, i8* %3, i32 8
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 1
  %57 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 15
  store i32 %56, i32* %57, align 4
  call fastcc void @chacha20_encrypt_bytes(%struct.chacha_ctx* nonnull %7, i8* %1, i8* %0, i64 %2)
  call void @sodium_memzero(i8* nonnull %8, i32 64) #4
  br label %58

58:                                               ; preds = %6, %10
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %8) #4
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #1

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

; Function Attrs: nounwind
define internal fastcc void @chacha20_encrypt_bytes(%struct.chacha_ctx* nocapture %0, i8* nocapture readonly %1, i8* nocapture %2, i64 %3) unnamed_addr #0 {
  %5 = alloca [64 x i8], align 16
  %6 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %6) #4
  %7 = icmp eq i64 %3, 0
  br i1 %7, label %377, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 2
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 3
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 4
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 5
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 6
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 7
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 8
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 9
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 10
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 11
  %32 = load i32, i32* %31, align 4
  %33 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 12
  %34 = load i32, i32* %33, align 4
  %35 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 13
  %36 = load i32, i32* %35, align 4
  %37 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 14
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 15
  %40 = load i32, i32* %39, align 4
  br label %41

41:                                               ; preds = %373, %8
  %42 = phi i64 [ %3, %8 ], [ %374, %373 ]
  %43 = phi i32 [ %34, %8 ], [ %322, %373 ]
  %44 = phi i32 [ %36, %8 ], [ %325, %373 ]
  %45 = phi i8* [ %2, %8 ], [ %375, %373 ]
  %46 = phi i8* [ %1, %8 ], [ %376, %373 ]
  %47 = phi i8* [ null, %8 ], [ %61, %373 ]
  %48 = icmp ult i64 %42, 64
  br i1 %48, label %49, label %58

49:                                               ; preds = %41
  call void @llvm.memset.p0i8.i32(i8* nonnull align 16 dereferenceable(64) %6, i8 0, i32 64, i1 false)
  br label %50

50:                                               ; preds = %49, %50
  %51 = phi i32 [ %55, %50 ], [ 0, %49 ]
  %52 = getelementptr i8, i8* %46, i32 %51
  %53 = load i8, i8* %52, align 1
  %54 = getelementptr [64 x i8], [64 x i8]* %5, i32 0, i32 %51
  store i8 %53, i8* %54, align 1
  %55 = add i32 %51, 1
  %56 = zext i32 %55 to i64
  %57 = icmp ugt i64 %42, %56
  br i1 %57, label %50, label %58

58:                                               ; preds = %50, %41
  %59 = phi i8* [ %45, %41 ], [ %6, %50 ]
  %60 = phi i8* [ %46, %41 ], [ %6, %50 ]
  %61 = phi i8* [ %47, %41 ], [ %45, %50 ]
  br label %62

62:                                               ; preds = %58, %62
  %63 = phi i32 [ 20, %58 ], [ %240, %62 ]
  %64 = phi i32 [ %10, %58 ], [ %170, %62 ]
  %65 = phi i32 [ %12, %58 ], [ %190, %62 ]
  %66 = phi i32 [ %14, %58 ], [ %210, %62 ]
  %67 = phi i32 [ %16, %58 ], [ %230, %62 ]
  %68 = phi i32 [ %18, %58 ], [ %239, %62 ]
  %69 = phi i32 [ %20, %58 ], [ %179, %62 ]
  %70 = phi i32 [ %22, %58 ], [ %199, %62 ]
  %71 = phi i32 [ %24, %58 ], [ %219, %62 ]
  %72 = phi i32 [ %26, %58 ], [ %215, %62 ]
  %73 = phi i32 [ %28, %58 ], [ %235, %62 ]
  %74 = phi i32 [ %30, %58 ], [ %175, %62 ]
  %75 = phi i32 [ %40, %58 ], [ %174, %62 ]
  %76 = phi i32 [ %38, %58 ], [ %234, %62 ]
  %77 = phi i32 [ %44, %58 ], [ %214, %62 ]
  %78 = phi i32 [ %43, %58 ], [ %194, %62 ]
  %79 = phi i32 [ %32, %58 ], [ %195, %62 ]
  %80 = add i32 %64, %68
  %81 = xor i32 %80, %78
  %82 = shl i32 %81, 16
  %83 = lshr i32 %81, 16
  %84 = or i32 %83, %82
  %85 = add i32 %84, %72
  %86 = xor i32 %85, %68
  %87 = shl i32 %86, 12
  %88 = lshr i32 %86, 20
  %89 = or i32 %88, %87
  %90 = add i32 %89, %80
  %91 = xor i32 %90, %84
  %92 = shl i32 %91, 8
  %93 = lshr i32 %91, 24
  %94 = or i32 %93, %92
  %95 = add i32 %94, %85
  %96 = xor i32 %95, %89
  %97 = shl i32 %96, 7
  %98 = lshr i32 %96, 25
  %99 = or i32 %98, %97
  %100 = add i32 %65, %69
  %101 = xor i32 %100, %77
  %102 = shl i32 %101, 16
  %103 = lshr i32 %101, 16
  %104 = or i32 %103, %102
  %105 = add i32 %104, %73
  %106 = xor i32 %105, %69
  %107 = shl i32 %106, 12
  %108 = lshr i32 %106, 20
  %109 = or i32 %108, %107
  %110 = add i32 %109, %100
  %111 = xor i32 %110, %104
  %112 = shl i32 %111, 8
  %113 = lshr i32 %111, 24
  %114 = or i32 %113, %112
  %115 = add i32 %114, %105
  %116 = xor i32 %115, %109
  %117 = shl i32 %116, 7
  %118 = lshr i32 %116, 25
  %119 = or i32 %118, %117
  %120 = add i32 %66, %70
  %121 = xor i32 %120, %76
  %122 = shl i32 %121, 16
  %123 = lshr i32 %121, 16
  %124 = or i32 %123, %122
  %125 = add i32 %124, %74
  %126 = xor i32 %125, %70
  %127 = shl i32 %126, 12
  %128 = lshr i32 %126, 20
  %129 = or i32 %128, %127
  %130 = add i32 %129, %120
  %131 = xor i32 %130, %124
  %132 = shl i32 %131, 8
  %133 = lshr i32 %131, 24
  %134 = or i32 %133, %132
  %135 = add i32 %134, %125
  %136 = xor i32 %135, %129
  %137 = shl i32 %136, 7
  %138 = lshr i32 %136, 25
  %139 = or i32 %138, %137
  %140 = add i32 %67, %71
  %141 = xor i32 %140, %75
  %142 = shl i32 %141, 16
  %143 = lshr i32 %141, 16
  %144 = or i32 %143, %142
  %145 = add i32 %144, %79
  %146 = xor i32 %145, %71
  %147 = shl i32 %146, 12
  %148 = lshr i32 %146, 20
  %149 = or i32 %148, %147
  %150 = add i32 %149, %140
  %151 = xor i32 %150, %144
  %152 = shl i32 %151, 8
  %153 = lshr i32 %151, 24
  %154 = or i32 %153, %152
  %155 = add i32 %154, %145
  %156 = xor i32 %155, %149
  %157 = shl i32 %156, 7
  %158 = lshr i32 %156, 25
  %159 = or i32 %158, %157
  %160 = add i32 %119, %90
  %161 = xor i32 %160, %154
  %162 = shl i32 %161, 16
  %163 = lshr i32 %161, 16
  %164 = or i32 %163, %162
  %165 = add i32 %164, %135
  %166 = xor i32 %165, %119
  %167 = shl i32 %166, 12
  %168 = lshr i32 %166, 20
  %169 = or i32 %168, %167
  %170 = add i32 %169, %160
  %171 = xor i32 %170, %164
  %172 = shl i32 %171, 8
  %173 = lshr i32 %171, 24
  %174 = or i32 %173, %172
  %175 = add i32 %174, %165
  %176 = xor i32 %175, %169
  %177 = shl i32 %176, 7
  %178 = lshr i32 %176, 25
  %179 = or i32 %178, %177
  %180 = add i32 %139, %110
  %181 = xor i32 %180, %94
  %182 = shl i32 %181, 16
  %183 = lshr i32 %181, 16
  %184 = or i32 %183, %182
  %185 = add i32 %184, %155
  %186 = xor i32 %185, %139
  %187 = shl i32 %186, 12
  %188 = lshr i32 %186, 20
  %189 = or i32 %188, %187
  %190 = add i32 %189, %180
  %191 = xor i32 %190, %184
  %192 = shl i32 %191, 8
  %193 = lshr i32 %191, 24
  %194 = or i32 %193, %192
  %195 = add i32 %194, %185
  %196 = xor i32 %195, %189
  %197 = shl i32 %196, 7
  %198 = lshr i32 %196, 25
  %199 = or i32 %198, %197
  %200 = add i32 %159, %130
  %201 = xor i32 %200, %114
  %202 = shl i32 %201, 16
  %203 = lshr i32 %201, 16
  %204 = or i32 %203, %202
  %205 = add i32 %204, %95
  %206 = xor i32 %205, %159
  %207 = shl i32 %206, 12
  %208 = lshr i32 %206, 20
  %209 = or i32 %208, %207
  %210 = add i32 %209, %200
  %211 = xor i32 %210, %204
  %212 = shl i32 %211, 8
  %213 = lshr i32 %211, 24
  %214 = or i32 %213, %212
  %215 = add i32 %214, %205
  %216 = xor i32 %215, %209
  %217 = shl i32 %216, 7
  %218 = lshr i32 %216, 25
  %219 = or i32 %218, %217
  %220 = add i32 %99, %150
  %221 = xor i32 %220, %134
  %222 = shl i32 %221, 16
  %223 = lshr i32 %221, 16
  %224 = or i32 %223, %222
  %225 = add i32 %224, %115
  %226 = xor i32 %225, %99
  %227 = shl i32 %226, 12
  %228 = lshr i32 %226, 20
  %229 = or i32 %228, %227
  %230 = add i32 %229, %220
  %231 = xor i32 %230, %224
  %232 = shl i32 %231, 8
  %233 = lshr i32 %231, 24
  %234 = or i32 %233, %232
  %235 = add i32 %234, %225
  %236 = xor i32 %235, %229
  %237 = shl i32 %236, 7
  %238 = lshr i32 %236, 25
  %239 = or i32 %238, %237
  %240 = add nsw i32 %63, -2
  %241 = icmp eq i32 %240, 0
  br i1 %241, label %242, label %62

242:                                              ; preds = %62
  %243 = add i32 %170, %10
  %244 = add i32 %190, %12
  %245 = add i32 %210, %14
  %246 = add i32 %230, %16
  %247 = add i32 %239, %18
  %248 = add i32 %179, %20
  %249 = add i32 %199, %22
  %250 = add i32 %219, %24
  %251 = add i32 %215, %26
  %252 = add i32 %235, %28
  %253 = add i32 %175, %30
  %254 = add i32 %195, %32
  %255 = add i32 %194, %43
  %256 = add i32 %214, %44
  %257 = add i32 %234, %38
  %258 = add i32 %174, %40
  %259 = bitcast i8* %60 to i32*
  %260 = load i32, i32* %259, align 1
  %261 = xor i32 %260, %243
  %262 = getelementptr i8, i8* %60, i32 4
  %263 = bitcast i8* %262 to i32*
  %264 = load i32, i32* %263, align 1
  %265 = xor i32 %264, %244
  %266 = getelementptr i8, i8* %60, i32 8
  %267 = bitcast i8* %266 to i32*
  %268 = load i32, i32* %267, align 1
  %269 = xor i32 %268, %245
  %270 = getelementptr i8, i8* %60, i32 12
  %271 = bitcast i8* %270 to i32*
  %272 = load i32, i32* %271, align 1
  %273 = xor i32 %272, %246
  %274 = getelementptr i8, i8* %60, i32 16
  %275 = bitcast i8* %274 to i32*
  %276 = load i32, i32* %275, align 1
  %277 = xor i32 %276, %247
  %278 = getelementptr i8, i8* %60, i32 20
  %279 = bitcast i8* %278 to i32*
  %280 = load i32, i32* %279, align 1
  %281 = xor i32 %280, %248
  %282 = getelementptr i8, i8* %60, i32 24
  %283 = bitcast i8* %282 to i32*
  %284 = load i32, i32* %283, align 1
  %285 = xor i32 %284, %249
  %286 = getelementptr i8, i8* %60, i32 28
  %287 = bitcast i8* %286 to i32*
  %288 = load i32, i32* %287, align 1
  %289 = xor i32 %288, %250
  %290 = getelementptr i8, i8* %60, i32 32
  %291 = bitcast i8* %290 to i32*
  %292 = load i32, i32* %291, align 1
  %293 = xor i32 %292, %251
  %294 = getelementptr i8, i8* %60, i32 36
  %295 = bitcast i8* %294 to i32*
  %296 = load i32, i32* %295, align 1
  %297 = xor i32 %296, %252
  %298 = getelementptr i8, i8* %60, i32 40
  %299 = bitcast i8* %298 to i32*
  %300 = load i32, i32* %299, align 1
  %301 = xor i32 %300, %253
  %302 = getelementptr i8, i8* %60, i32 44
  %303 = bitcast i8* %302 to i32*
  %304 = load i32, i32* %303, align 1
  %305 = xor i32 %304, %254
  %306 = getelementptr i8, i8* %60, i32 48
  %307 = bitcast i8* %306 to i32*
  %308 = load i32, i32* %307, align 1
  %309 = xor i32 %308, %255
  %310 = getelementptr i8, i8* %60, i32 52
  %311 = bitcast i8* %310 to i32*
  %312 = load i32, i32* %311, align 1
  %313 = xor i32 %312, %256
  %314 = getelementptr i8, i8* %60, i32 56
  %315 = bitcast i8* %314 to i32*
  %316 = load i32, i32* %315, align 1
  %317 = xor i32 %316, %257
  %318 = getelementptr i8, i8* %60, i32 60
  %319 = bitcast i8* %318 to i32*
  %320 = load i32, i32* %319, align 1
  %321 = xor i32 %320, %258
  %322 = add i32 %43, 1
  %323 = icmp eq i32 %322, 0
  %324 = zext i1 %323 to i32
  %325 = add i32 %44, %324
  %326 = bitcast i8* %59 to i32*
  store i32 %261, i32* %326, align 1
  %327 = getelementptr i8, i8* %59, i32 4
  %328 = bitcast i8* %327 to i32*
  store i32 %265, i32* %328, align 1
  %329 = getelementptr i8, i8* %59, i32 8
  %330 = bitcast i8* %329 to i32*
  store i32 %269, i32* %330, align 1
  %331 = getelementptr i8, i8* %59, i32 12
  %332 = bitcast i8* %331 to i32*
  store i32 %273, i32* %332, align 1
  %333 = getelementptr i8, i8* %59, i32 16
  %334 = bitcast i8* %333 to i32*
  store i32 %277, i32* %334, align 1
  %335 = getelementptr i8, i8* %59, i32 20
  %336 = bitcast i8* %335 to i32*
  store i32 %281, i32* %336, align 1
  %337 = getelementptr i8, i8* %59, i32 24
  %338 = bitcast i8* %337 to i32*
  store i32 %285, i32* %338, align 1
  %339 = getelementptr i8, i8* %59, i32 28
  %340 = bitcast i8* %339 to i32*
  store i32 %289, i32* %340, align 1
  %341 = getelementptr i8, i8* %59, i32 32
  %342 = bitcast i8* %341 to i32*
  store i32 %293, i32* %342, align 1
  %343 = getelementptr i8, i8* %59, i32 36
  %344 = bitcast i8* %343 to i32*
  store i32 %297, i32* %344, align 1
  %345 = getelementptr i8, i8* %59, i32 40
  %346 = bitcast i8* %345 to i32*
  store i32 %301, i32* %346, align 1
  %347 = getelementptr i8, i8* %59, i32 44
  %348 = bitcast i8* %347 to i32*
  store i32 %305, i32* %348, align 1
  %349 = getelementptr i8, i8* %59, i32 48
  %350 = bitcast i8* %349 to i32*
  store i32 %309, i32* %350, align 1
  %351 = getelementptr i8, i8* %59, i32 52
  %352 = bitcast i8* %351 to i32*
  store i32 %313, i32* %352, align 1
  %353 = getelementptr i8, i8* %59, i32 56
  %354 = bitcast i8* %353 to i32*
  store i32 %317, i32* %354, align 1
  %355 = getelementptr i8, i8* %59, i32 60
  %356 = bitcast i8* %355 to i32*
  store i32 %321, i32* %356, align 1
  %357 = icmp ult i64 %42, 65
  br i1 %357, label %358, label %373

358:                                              ; preds = %242
  br i1 %48, label %359, label %372

359:                                              ; preds = %358
  %360 = trunc i64 %42 to i32
  %361 = icmp eq i32 %360, 0
  br i1 %361, label %372, label %362

362:                                              ; preds = %359
  %363 = trunc i32 %261 to i8
  store i8 %363, i8* %61, align 1
  %364 = icmp eq i32 %360, 1
  br i1 %364, label %372, label %365

365:                                              ; preds = %362, %365
  %366 = phi i32 [ %370, %365 ], [ 1, %362 ]
  %367 = getelementptr i8, i8* %59, i32 %366
  %368 = load i8, i8* %367, align 1
  %369 = getelementptr i8, i8* %61, i32 %366
  store i8 %368, i8* %369, align 1
  %370 = add nuw i32 %366, 1
  %371 = icmp eq i32 %370, %360
  br i1 %371, label %372, label %365

372:                                              ; preds = %365, %362, %359, %358
  store i32 %322, i32* %33, align 4
  store i32 %325, i32* %35, align 4
  br label %377

373:                                              ; preds = %242
  %374 = add i64 %42, -64
  %375 = getelementptr i8, i8* %59, i32 64
  %376 = getelementptr i8, i8* %60, i32 64
  br label %41

377:                                              ; preds = %4, %372
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %6) #4
  ret void
}

declare void @sodium_memzero(i8* %0, i32 %1) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #1

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { argmemonly nounwind willreturn writeonly }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %7 = icmp eq i64 %1, 0
; Looking for a replacement for:
%0:i64 = var
%1:i1 = eq 0:i64, %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %13, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %17, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %21, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %25, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %29, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %33, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %37, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %42 = load i32, i32* %41, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %46, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %51 = load i32, i32* %50, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %53 = trunc i64 %1 to i32
; Looking for a replacement for:
%0:i64 = var
%1:i1 = eq 0:i64, %0
pc %1 0:i1
%2:i32 = trunc %0
infer %2
#########################################################
; exiting Souper's runOnFunction() for chacha20_ref.c.bc:stream_ref()

; entering Souper's runOnFunction() for chacha20_ref.c.bc:stream_ietf_ext_ref()

; ModuleID = 'chacha20_ref.c.bc'
source_filename = "crypto_stream/chacha20/ref/chacha20_ref.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.crypto_stream_chacha20_implementation = type { i32 (i8*, i64, i8*, i8*)*, i32 (i8*, i64, i8*, i8*)*, i32 (i8*, i8*, i64, i8*, i64, i8*)*, i32 (i8*, i8*, i64, i8*, i32, i8*)* }
%struct.chacha_ctx = type { [16 x i32] }

@crypto_stream_chacha20_ref_implementation = hidden local_unnamed_addr global %struct.crypto_stream_chacha20_implementation { i32 (i8*, i64, i8*, i8*)* @stream_ref, i32 (i8*, i64, i8*, i8*)* @stream_ietf_ext_ref, i32 (i8*, i8*, i64, i8*, i64, i8*)* @stream_ref_xor_ic, i32 (i8*, i8*, i64, i8*, i32, i8*)* @stream_ietf_ext_ref_xor_ic }, align 4

; Function Attrs: nounwind
define internal i32 @stream_ref(i8* nocapture %0, i64 %1, i8* nocapture readonly %2, i8* nocapture readonly %3) #0 {
  %5 = alloca %struct.chacha_ctx, align 4
  %6 = bitcast %struct.chacha_ctx* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %6) #4
  %7 = icmp eq i64 %1, 0
  br i1 %7, label %54, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 0
  store i32 1634760805, i32* %9, align 4
  %10 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 1
  store i32 857760878, i32* %10, align 4
  %11 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 2
  store i32 2036477234, i32* %11, align 4
  %12 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 3
  store i32 1797285236, i32* %12, align 4
  %13 = bitcast i8* %3 to i32*
  %14 = load i32, i32* %13, align 1
  %15 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 4
  store i32 %14, i32* %15, align 4
  %16 = getelementptr i8, i8* %3, i32 4
  %17 = bitcast i8* %16 to i32*
  %18 = load i32, i32* %17, align 1
  %19 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 5
  store i32 %18, i32* %19, align 4
  %20 = getelementptr i8, i8* %3, i32 8
  %21 = bitcast i8* %20 to i32*
  %22 = load i32, i32* %21, align 1
  %23 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 6
  store i32 %22, i32* %23, align 4
  %24 = getelementptr i8, i8* %3, i32 12
  %25 = bitcast i8* %24 to i32*
  %26 = load i32, i32* %25, align 1
  %27 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 7
  store i32 %26, i32* %27, align 4
  %28 = getelementptr i8, i8* %3, i32 16
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 1
  %31 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 8
  store i32 %30, i32* %31, align 4
  %32 = getelementptr i8, i8* %3, i32 20
  %33 = bitcast i8* %32 to i32*
  %34 = load i32, i32* %33, align 1
  %35 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 9
  store i32 %34, i32* %35, align 4
  %36 = getelementptr i8, i8* %3, i32 24
  %37 = bitcast i8* %36 to i32*
  %38 = load i32, i32* %37, align 1
  %39 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 10
  store i32 %38, i32* %39, align 4
  %40 = getelementptr i8, i8* %3, i32 28
  %41 = bitcast i8* %40 to i32*
  %42 = load i32, i32* %41, align 1
  %43 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 11
  store i32 %42, i32* %43, align 4
  %44 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 12
  store i32 0, i32* %44, align 4
  %45 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 13
  store i32 0, i32* %45, align 4
  %46 = bitcast i8* %2 to i32*
  %47 = load i32, i32* %46, align 1
  %48 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 14
  store i32 %47, i32* %48, align 4
  %49 = getelementptr i8, i8* %2, i32 4
  %50 = bitcast i8* %49 to i32*
  %51 = load i32, i32* %50, align 1
  %52 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 15
  store i32 %51, i32* %52, align 4
  %53 = trunc i64 %1 to i32
  tail call void @llvm.memset.p0i8.i32(i8* align 1 %0, i8 0, i32 %53, i1 false)
  call fastcc void @chacha20_encrypt_bytes(%struct.chacha_ctx* nonnull %5, i8* %0, i8* %0, i64 %1)
  call void @sodium_memzero(i8* nonnull %6, i32 64) #4
  br label %54

54:                                               ; preds = %4, %8
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %6) #4
  ret i32 0
}

; Function Attrs: nounwind
define internal i32 @stream_ietf_ext_ref(i8* nocapture %0, i64 %1, i8* nocapture readonly %2, i8* nocapture readonly %3) #0 {
  %5 = alloca %struct.chacha_ctx, align 4
  %6 = bitcast %struct.chacha_ctx* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %6) #4
  %7 = icmp eq i64 %1, 0
  br i1 %7, label %57, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 0
  store i32 1634760805, i32* %9, align 4
  %10 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 1
  store i32 857760878, i32* %10, align 4
  %11 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 2
  store i32 2036477234, i32* %11, align 4
  %12 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 3
  store i32 1797285236, i32* %12, align 4
  %13 = bitcast i8* %3 to i32*
  %14 = load i32, i32* %13, align 1
  %15 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 4
  store i32 %14, i32* %15, align 4
  %16 = getelementptr i8, i8* %3, i32 4
  %17 = bitcast i8* %16 to i32*
  %18 = load i32, i32* %17, align 1
  %19 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 5
  store i32 %18, i32* %19, align 4
  %20 = getelementptr i8, i8* %3, i32 8
  %21 = bitcast i8* %20 to i32*
  %22 = load i32, i32* %21, align 1
  %23 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 6
  store i32 %22, i32* %23, align 4
  %24 = getelementptr i8, i8* %3, i32 12
  %25 = bitcast i8* %24 to i32*
  %26 = load i32, i32* %25, align 1
  %27 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 7
  store i32 %26, i32* %27, align 4
  %28 = getelementptr i8, i8* %3, i32 16
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 1
  %31 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 8
  store i32 %30, i32* %31, align 4
  %32 = getelementptr i8, i8* %3, i32 20
  %33 = bitcast i8* %32 to i32*
  %34 = load i32, i32* %33, align 1
  %35 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 9
  store i32 %34, i32* %35, align 4
  %36 = getelementptr i8, i8* %3, i32 24
  %37 = bitcast i8* %36 to i32*
  %38 = load i32, i32* %37, align 1
  %39 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 10
  store i32 %38, i32* %39, align 4
  %40 = getelementptr i8, i8* %3, i32 28
  %41 = bitcast i8* %40 to i32*
  %42 = load i32, i32* %41, align 1
  %43 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 11
  store i32 %42, i32* %43, align 4
  %44 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 12
  store i32 0, i32* %44, align 4
  %45 = bitcast i8* %2 to i32*
  %46 = load i32, i32* %45, align 1
  %47 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 13
  store i32 %46, i32* %47, align 4
  %48 = getelementptr i8, i8* %2, i32 4
  %49 = bitcast i8* %48 to i32*
  %50 = load i32, i32* %49, align 1
  %51 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 14
  store i32 %50, i32* %51, align 4
  %52 = getelementptr i8, i8* %2, i32 8
  %53 = bitcast i8* %52 to i32*
  %54 = load i32, i32* %53, align 1
  %55 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 15
  store i32 %54, i32* %55, align 4
  %56 = trunc i64 %1 to i32
  tail call void @llvm.memset.p0i8.i32(i8* align 1 %0, i8 0, i32 %56, i1 false)
  call fastcc void @chacha20_encrypt_bytes(%struct.chacha_ctx* nonnull %5, i8* %0, i8* %0, i64 %1)
  call void @sodium_memzero(i8* nonnull %6, i32 64) #4
  br label %57

57:                                               ; preds = %4, %8
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %6) #4
  ret i32 0
}

; Function Attrs: nounwind
define internal i32 @stream_ref_xor_ic(i8* nocapture %0, i8* nocapture readonly %1, i64 %2, i8* nocapture readonly %3, i64 %4, i8* nocapture readonly %5) #0 {
  %7 = alloca %struct.chacha_ctx, align 4
  %8 = bitcast %struct.chacha_ctx* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %8) #4
  %9 = icmp eq i64 %2, 0
  br i1 %9, label %58, label %10

10:                                               ; preds = %6
  %11 = lshr i64 %4, 32
  %12 = trunc i64 %11 to i32
  %13 = trunc i64 %4 to i32
  %14 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 0
  store i32 1634760805, i32* %14, align 4
  %15 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 1
  store i32 857760878, i32* %15, align 4
  %16 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 2
  store i32 2036477234, i32* %16, align 4
  %17 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 3
  store i32 1797285236, i32* %17, align 4
  %18 = bitcast i8* %5 to i32*
  %19 = load i32, i32* %18, align 1
  %20 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 4
  store i32 %19, i32* %20, align 4
  %21 = getelementptr i8, i8* %5, i32 4
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 1
  %24 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 5
  store i32 %23, i32* %24, align 4
  %25 = getelementptr i8, i8* %5, i32 8
  %26 = bitcast i8* %25 to i32*
  %27 = load i32, i32* %26, align 1
  %28 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 6
  store i32 %27, i32* %28, align 4
  %29 = getelementptr i8, i8* %5, i32 12
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 1
  %32 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 7
  store i32 %31, i32* %32, align 4
  %33 = getelementptr i8, i8* %5, i32 16
  %34 = bitcast i8* %33 to i32*
  %35 = load i32, i32* %34, align 1
  %36 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 8
  store i32 %35, i32* %36, align 4
  %37 = getelementptr i8, i8* %5, i32 20
  %38 = bitcast i8* %37 to i32*
  %39 = load i32, i32* %38, align 1
  %40 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 9
  store i32 %39, i32* %40, align 4
  %41 = getelementptr i8, i8* %5, i32 24
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %42, align 1
  %44 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 10
  store i32 %43, i32* %44, align 4
  %45 = getelementptr i8, i8* %5, i32 28
  %46 = bitcast i8* %45 to i32*
  %47 = load i32, i32* %46, align 1
  %48 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 11
  store i32 %47, i32* %48, align 4
  %49 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 12
  store i32 %13, i32* %49, align 4
  %50 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 13
  store i32 %12, i32* %50, align 4
  %51 = bitcast i8* %3 to i32*
  %52 = load i32, i32* %51, align 1
  %53 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 14
  store i32 %52, i32* %53, align 4
  %54 = getelementptr i8, i8* %3, i32 4
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 1
  %57 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 15
  store i32 %56, i32* %57, align 4
  call fastcc void @chacha20_encrypt_bytes(%struct.chacha_ctx* nonnull %7, i8* %1, i8* %0, i64 %2)
  call void @sodium_memzero(i8* nonnull %8, i32 64) #4
  br label %58

58:                                               ; preds = %6, %10
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %8) #4
  ret i32 0
}

; Function Attrs: nounwind
define internal i32 @stream_ietf_ext_ref_xor_ic(i8* nocapture %0, i8* nocapture readonly %1, i64 %2, i8* nocapture readonly %3, i32 %4, i8* nocapture readonly %5) #0 {
  %7 = alloca %struct.chacha_ctx, align 4
  %8 = bitcast %struct.chacha_ctx* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %8) #4
  %9 = icmp eq i64 %2, 0
  br i1 %9, label %58, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 0
  store i32 1634760805, i32* %11, align 4
  %12 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 1
  store i32 857760878, i32* %12, align 4
  %13 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 2
  store i32 2036477234, i32* %13, align 4
  %14 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 3
  store i32 1797285236, i32* %14, align 4
  %15 = bitcast i8* %5 to i32*
  %16 = load i32, i32* %15, align 1
  %17 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 4
  store i32 %16, i32* %17, align 4
  %18 = getelementptr i8, i8* %5, i32 4
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 1
  %21 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 5
  store i32 %20, i32* %21, align 4
  %22 = getelementptr i8, i8* %5, i32 8
  %23 = bitcast i8* %22 to i32*
  %24 = load i32, i32* %23, align 1
  %25 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 6
  store i32 %24, i32* %25, align 4
  %26 = getelementptr i8, i8* %5, i32 12
  %27 = bitcast i8* %26 to i32*
  %28 = load i32, i32* %27, align 1
  %29 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 7
  store i32 %28, i32* %29, align 4
  %30 = getelementptr i8, i8* %5, i32 16
  %31 = bitcast i8* %30 to i32*
  %32 = load i32, i32* %31, align 1
  %33 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 8
  store i32 %32, i32* %33, align 4
  %34 = getelementptr i8, i8* %5, i32 20
  %35 = bitcast i8* %34 to i32*
  %36 = load i32, i32* %35, align 1
  %37 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 9
  store i32 %36, i32* %37, align 4
  %38 = getelementptr i8, i8* %5, i32 24
  %39 = bitcast i8* %38 to i32*
  %40 = load i32, i32* %39, align 1
  %41 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 10
  store i32 %40, i32* %41, align 4
  %42 = getelementptr i8, i8* %5, i32 28
  %43 = bitcast i8* %42 to i32*
  %44 = load i32, i32* %43, align 1
  %45 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 11
  store i32 %44, i32* %45, align 4
  %46 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 12
  store i32 %4, i32* %46, align 4
  %47 = bitcast i8* %3 to i32*
  %48 = load i32, i32* %47, align 1
  %49 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 13
  store i32 %48, i32* %49, align 4
  %50 = getelementptr i8, i8* %3, i32 4
  %51 = bitcast i8* %50 to i32*
  %52 = load i32, i32* %51, align 1
  %53 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 14
  store i32 %52, i32* %53, align 4
  %54 = getelementptr i8, i8* %3, i32 8
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 1
  %57 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 15
  store i32 %56, i32* %57, align 4
  call fastcc void @chacha20_encrypt_bytes(%struct.chacha_ctx* nonnull %7, i8* %1, i8* %0, i64 %2)
  call void @sodium_memzero(i8* nonnull %8, i32 64) #4
  br label %58

58:                                               ; preds = %6, %10
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %8) #4
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #1

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

; Function Attrs: nounwind
define internal fastcc void @chacha20_encrypt_bytes(%struct.chacha_ctx* nocapture %0, i8* nocapture readonly %1, i8* nocapture %2, i64 %3) unnamed_addr #0 {
  %5 = alloca [64 x i8], align 16
  %6 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %6) #4
  %7 = icmp eq i64 %3, 0
  br i1 %7, label %377, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 2
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 3
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 4
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 5
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 6
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 7
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 8
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 9
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 10
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 11
  %32 = load i32, i32* %31, align 4
  %33 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 12
  %34 = load i32, i32* %33, align 4
  %35 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 13
  %36 = load i32, i32* %35, align 4
  %37 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 14
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 15
  %40 = load i32, i32* %39, align 4
  br label %41

41:                                               ; preds = %373, %8
  %42 = phi i64 [ %3, %8 ], [ %374, %373 ]
  %43 = phi i32 [ %34, %8 ], [ %322, %373 ]
  %44 = phi i32 [ %36, %8 ], [ %325, %373 ]
  %45 = phi i8* [ %2, %8 ], [ %375, %373 ]
  %46 = phi i8* [ %1, %8 ], [ %376, %373 ]
  %47 = phi i8* [ null, %8 ], [ %61, %373 ]
  %48 = icmp ult i64 %42, 64
  br i1 %48, label %49, label %58

49:                                               ; preds = %41
  call void @llvm.memset.p0i8.i32(i8* nonnull align 16 dereferenceable(64) %6, i8 0, i32 64, i1 false)
  br label %50

50:                                               ; preds = %49, %50
  %51 = phi i32 [ %55, %50 ], [ 0, %49 ]
  %52 = getelementptr i8, i8* %46, i32 %51
  %53 = load i8, i8* %52, align 1
  %54 = getelementptr [64 x i8], [64 x i8]* %5, i32 0, i32 %51
  store i8 %53, i8* %54, align 1
  %55 = add i32 %51, 1
  %56 = zext i32 %55 to i64
  %57 = icmp ugt i64 %42, %56
  br i1 %57, label %50, label %58

58:                                               ; preds = %50, %41
  %59 = phi i8* [ %45, %41 ], [ %6, %50 ]
  %60 = phi i8* [ %46, %41 ], [ %6, %50 ]
  %61 = phi i8* [ %47, %41 ], [ %45, %50 ]
  br label %62

62:                                               ; preds = %58, %62
  %63 = phi i32 [ 20, %58 ], [ %240, %62 ]
  %64 = phi i32 [ %10, %58 ], [ %170, %62 ]
  %65 = phi i32 [ %12, %58 ], [ %190, %62 ]
  %66 = phi i32 [ %14, %58 ], [ %210, %62 ]
  %67 = phi i32 [ %16, %58 ], [ %230, %62 ]
  %68 = phi i32 [ %18, %58 ], [ %239, %62 ]
  %69 = phi i32 [ %20, %58 ], [ %179, %62 ]
  %70 = phi i32 [ %22, %58 ], [ %199, %62 ]
  %71 = phi i32 [ %24, %58 ], [ %219, %62 ]
  %72 = phi i32 [ %26, %58 ], [ %215, %62 ]
  %73 = phi i32 [ %28, %58 ], [ %235, %62 ]
  %74 = phi i32 [ %30, %58 ], [ %175, %62 ]
  %75 = phi i32 [ %40, %58 ], [ %174, %62 ]
  %76 = phi i32 [ %38, %58 ], [ %234, %62 ]
  %77 = phi i32 [ %44, %58 ], [ %214, %62 ]
  %78 = phi i32 [ %43, %58 ], [ %194, %62 ]
  %79 = phi i32 [ %32, %58 ], [ %195, %62 ]
  %80 = add i32 %64, %68
  %81 = xor i32 %80, %78
  %82 = shl i32 %81, 16
  %83 = lshr i32 %81, 16
  %84 = or i32 %83, %82
  %85 = add i32 %84, %72
  %86 = xor i32 %85, %68
  %87 = shl i32 %86, 12
  %88 = lshr i32 %86, 20
  %89 = or i32 %88, %87
  %90 = add i32 %89, %80
  %91 = xor i32 %90, %84
  %92 = shl i32 %91, 8
  %93 = lshr i32 %91, 24
  %94 = or i32 %93, %92
  %95 = add i32 %94, %85
  %96 = xor i32 %95, %89
  %97 = shl i32 %96, 7
  %98 = lshr i32 %96, 25
  %99 = or i32 %98, %97
  %100 = add i32 %65, %69
  %101 = xor i32 %100, %77
  %102 = shl i32 %101, 16
  %103 = lshr i32 %101, 16
  %104 = or i32 %103, %102
  %105 = add i32 %104, %73
  %106 = xor i32 %105, %69
  %107 = shl i32 %106, 12
  %108 = lshr i32 %106, 20
  %109 = or i32 %108, %107
  %110 = add i32 %109, %100
  %111 = xor i32 %110, %104
  %112 = shl i32 %111, 8
  %113 = lshr i32 %111, 24
  %114 = or i32 %113, %112
  %115 = add i32 %114, %105
  %116 = xor i32 %115, %109
  %117 = shl i32 %116, 7
  %118 = lshr i32 %116, 25
  %119 = or i32 %118, %117
  %120 = add i32 %66, %70
  %121 = xor i32 %120, %76
  %122 = shl i32 %121, 16
  %123 = lshr i32 %121, 16
  %124 = or i32 %123, %122
  %125 = add i32 %124, %74
  %126 = xor i32 %125, %70
  %127 = shl i32 %126, 12
  %128 = lshr i32 %126, 20
  %129 = or i32 %128, %127
  %130 = add i32 %129, %120
  %131 = xor i32 %130, %124
  %132 = shl i32 %131, 8
  %133 = lshr i32 %131, 24
  %134 = or i32 %133, %132
  %135 = add i32 %134, %125
  %136 = xor i32 %135, %129
  %137 = shl i32 %136, 7
  %138 = lshr i32 %136, 25
  %139 = or i32 %138, %137
  %140 = add i32 %67, %71
  %141 = xor i32 %140, %75
  %142 = shl i32 %141, 16
  %143 = lshr i32 %141, 16
  %144 = or i32 %143, %142
  %145 = add i32 %144, %79
  %146 = xor i32 %145, %71
  %147 = shl i32 %146, 12
  %148 = lshr i32 %146, 20
  %149 = or i32 %148, %147
  %150 = add i32 %149, %140
  %151 = xor i32 %150, %144
  %152 = shl i32 %151, 8
  %153 = lshr i32 %151, 24
  %154 = or i32 %153, %152
  %155 = add i32 %154, %145
  %156 = xor i32 %155, %149
  %157 = shl i32 %156, 7
  %158 = lshr i32 %156, 25
  %159 = or i32 %158, %157
  %160 = add i32 %119, %90
  %161 = xor i32 %160, %154
  %162 = shl i32 %161, 16
  %163 = lshr i32 %161, 16
  %164 = or i32 %163, %162
  %165 = add i32 %164, %135
  %166 = xor i32 %165, %119
  %167 = shl i32 %166, 12
  %168 = lshr i32 %166, 20
  %169 = or i32 %168, %167
  %170 = add i32 %169, %160
  %171 = xor i32 %170, %164
  %172 = shl i32 %171, 8
  %173 = lshr i32 %171, 24
  %174 = or i32 %173, %172
  %175 = add i32 %174, %165
  %176 = xor i32 %175, %169
  %177 = shl i32 %176, 7
  %178 = lshr i32 %176, 25
  %179 = or i32 %178, %177
  %180 = add i32 %139, %110
  %181 = xor i32 %180, %94
  %182 = shl i32 %181, 16
  %183 = lshr i32 %181, 16
  %184 = or i32 %183, %182
  %185 = add i32 %184, %155
  %186 = xor i32 %185, %139
  %187 = shl i32 %186, 12
  %188 = lshr i32 %186, 20
  %189 = or i32 %188, %187
  %190 = add i32 %189, %180
  %191 = xor i32 %190, %184
  %192 = shl i32 %191, 8
  %193 = lshr i32 %191, 24
  %194 = or i32 %193, %192
  %195 = add i32 %194, %185
  %196 = xor i32 %195, %189
  %197 = shl i32 %196, 7
  %198 = lshr i32 %196, 25
  %199 = or i32 %198, %197
  %200 = add i32 %159, %130
  %201 = xor i32 %200, %114
  %202 = shl i32 %201, 16
  %203 = lshr i32 %201, 16
  %204 = or i32 %203, %202
  %205 = add i32 %204, %95
  %206 = xor i32 %205, %159
  %207 = shl i32 %206, 12
  %208 = lshr i32 %206, 20
  %209 = or i32 %208, %207
  %210 = add i32 %209, %200
  %211 = xor i32 %210, %204
  %212 = shl i32 %211, 8
  %213 = lshr i32 %211, 24
  %214 = or i32 %213, %212
  %215 = add i32 %214, %205
  %216 = xor i32 %215, %209
  %217 = shl i32 %216, 7
  %218 = lshr i32 %216, 25
  %219 = or i32 %218, %217
  %220 = add i32 %99, %150
  %221 = xor i32 %220, %134
  %222 = shl i32 %221, 16
  %223 = lshr i32 %221, 16
  %224 = or i32 %223, %222
  %225 = add i32 %224, %115
  %226 = xor i32 %225, %99
  %227 = shl i32 %226, 12
  %228 = lshr i32 %226, 20
  %229 = or i32 %228, %227
  %230 = add i32 %229, %220
  %231 = xor i32 %230, %224
  %232 = shl i32 %231, 8
  %233 = lshr i32 %231, 24
  %234 = or i32 %233, %232
  %235 = add i32 %234, %225
  %236 = xor i32 %235, %229
  %237 = shl i32 %236, 7
  %238 = lshr i32 %236, 25
  %239 = or i32 %238, %237
  %240 = add nsw i32 %63, -2
  %241 = icmp eq i32 %240, 0
  br i1 %241, label %242, label %62

242:                                              ; preds = %62
  %243 = add i32 %170, %10
  %244 = add i32 %190, %12
  %245 = add i32 %210, %14
  %246 = add i32 %230, %16
  %247 = add i32 %239, %18
  %248 = add i32 %179, %20
  %249 = add i32 %199, %22
  %250 = add i32 %219, %24
  %251 = add i32 %215, %26
  %252 = add i32 %235, %28
  %253 = add i32 %175, %30
  %254 = add i32 %195, %32
  %255 = add i32 %194, %43
  %256 = add i32 %214, %44
  %257 = add i32 %234, %38
  %258 = add i32 %174, %40
  %259 = bitcast i8* %60 to i32*
  %260 = load i32, i32* %259, align 1
  %261 = xor i32 %260, %243
  %262 = getelementptr i8, i8* %60, i32 4
  %263 = bitcast i8* %262 to i32*
  %264 = load i32, i32* %263, align 1
  %265 = xor i32 %264, %244
  %266 = getelementptr i8, i8* %60, i32 8
  %267 = bitcast i8* %266 to i32*
  %268 = load i32, i32* %267, align 1
  %269 = xor i32 %268, %245
  %270 = getelementptr i8, i8* %60, i32 12
  %271 = bitcast i8* %270 to i32*
  %272 = load i32, i32* %271, align 1
  %273 = xor i32 %272, %246
  %274 = getelementptr i8, i8* %60, i32 16
  %275 = bitcast i8* %274 to i32*
  %276 = load i32, i32* %275, align 1
  %277 = xor i32 %276, %247
  %278 = getelementptr i8, i8* %60, i32 20
  %279 = bitcast i8* %278 to i32*
  %280 = load i32, i32* %279, align 1
  %281 = xor i32 %280, %248
  %282 = getelementptr i8, i8* %60, i32 24
  %283 = bitcast i8* %282 to i32*
  %284 = load i32, i32* %283, align 1
  %285 = xor i32 %284, %249
  %286 = getelementptr i8, i8* %60, i32 28
  %287 = bitcast i8* %286 to i32*
  %288 = load i32, i32* %287, align 1
  %289 = xor i32 %288, %250
  %290 = getelementptr i8, i8* %60, i32 32
  %291 = bitcast i8* %290 to i32*
  %292 = load i32, i32* %291, align 1
  %293 = xor i32 %292, %251
  %294 = getelementptr i8, i8* %60, i32 36
  %295 = bitcast i8* %294 to i32*
  %296 = load i32, i32* %295, align 1
  %297 = xor i32 %296, %252
  %298 = getelementptr i8, i8* %60, i32 40
  %299 = bitcast i8* %298 to i32*
  %300 = load i32, i32* %299, align 1
  %301 = xor i32 %300, %253
  %302 = getelementptr i8, i8* %60, i32 44
  %303 = bitcast i8* %302 to i32*
  %304 = load i32, i32* %303, align 1
  %305 = xor i32 %304, %254
  %306 = getelementptr i8, i8* %60, i32 48
  %307 = bitcast i8* %306 to i32*
  %308 = load i32, i32* %307, align 1
  %309 = xor i32 %308, %255
  %310 = getelementptr i8, i8* %60, i32 52
  %311 = bitcast i8* %310 to i32*
  %312 = load i32, i32* %311, align 1
  %313 = xor i32 %312, %256
  %314 = getelementptr i8, i8* %60, i32 56
  %315 = bitcast i8* %314 to i32*
  %316 = load i32, i32* %315, align 1
  %317 = xor i32 %316, %257
  %318 = getelementptr i8, i8* %60, i32 60
  %319 = bitcast i8* %318 to i32*
  %320 = load i32, i32* %319, align 1
  %321 = xor i32 %320, %258
  %322 = add i32 %43, 1
  %323 = icmp eq i32 %322, 0
  %324 = zext i1 %323 to i32
  %325 = add i32 %44, %324
  %326 = bitcast i8* %59 to i32*
  store i32 %261, i32* %326, align 1
  %327 = getelementptr i8, i8* %59, i32 4
  %328 = bitcast i8* %327 to i32*
  store i32 %265, i32* %328, align 1
  %329 = getelementptr i8, i8* %59, i32 8
  %330 = bitcast i8* %329 to i32*
  store i32 %269, i32* %330, align 1
  %331 = getelementptr i8, i8* %59, i32 12
  %332 = bitcast i8* %331 to i32*
  store i32 %273, i32* %332, align 1
  %333 = getelementptr i8, i8* %59, i32 16
  %334 = bitcast i8* %333 to i32*
  store i32 %277, i32* %334, align 1
  %335 = getelementptr i8, i8* %59, i32 20
  %336 = bitcast i8* %335 to i32*
  store i32 %281, i32* %336, align 1
  %337 = getelementptr i8, i8* %59, i32 24
  %338 = bitcast i8* %337 to i32*
  store i32 %285, i32* %338, align 1
  %339 = getelementptr i8, i8* %59, i32 28
  %340 = bitcast i8* %339 to i32*
  store i32 %289, i32* %340, align 1
  %341 = getelementptr i8, i8* %59, i32 32
  %342 = bitcast i8* %341 to i32*
  store i32 %293, i32* %342, align 1
  %343 = getelementptr i8, i8* %59, i32 36
  %344 = bitcast i8* %343 to i32*
  store i32 %297, i32* %344, align 1
  %345 = getelementptr i8, i8* %59, i32 40
  %346 = bitcast i8* %345 to i32*
  store i32 %301, i32* %346, align 1
  %347 = getelementptr i8, i8* %59, i32 44
  %348 = bitcast i8* %347 to i32*
  store i32 %305, i32* %348, align 1
  %349 = getelementptr i8, i8* %59, i32 48
  %350 = bitcast i8* %349 to i32*
  store i32 %309, i32* %350, align 1
  %351 = getelementptr i8, i8* %59, i32 52
  %352 = bitcast i8* %351 to i32*
  store i32 %313, i32* %352, align 1
  %353 = getelementptr i8, i8* %59, i32 56
  %354 = bitcast i8* %353 to i32*
  store i32 %317, i32* %354, align 1
  %355 = getelementptr i8, i8* %59, i32 60
  %356 = bitcast i8* %355 to i32*
  store i32 %321, i32* %356, align 1
  %357 = icmp ult i64 %42, 65
  br i1 %357, label %358, label %373

358:                                              ; preds = %242
  br i1 %48, label %359, label %372

359:                                              ; preds = %358
  %360 = trunc i64 %42 to i32
  %361 = icmp eq i32 %360, 0
  br i1 %361, label %372, label %362

362:                                              ; preds = %359
  %363 = trunc i32 %261 to i8
  store i8 %363, i8* %61, align 1
  %364 = icmp eq i32 %360, 1
  br i1 %364, label %372, label %365

365:                                              ; preds = %362, %365
  %366 = phi i32 [ %370, %365 ], [ 1, %362 ]
  %367 = getelementptr i8, i8* %59, i32 %366
  %368 = load i8, i8* %367, align 1
  %369 = getelementptr i8, i8* %61, i32 %366
  store i8 %368, i8* %369, align 1
  %370 = add nuw i32 %366, 1
  %371 = icmp eq i32 %370, %360
  br i1 %371, label %372, label %365

372:                                              ; preds = %365, %362, %359, %358
  store i32 %322, i32* %33, align 4
  store i32 %325, i32* %35, align 4
  br label %377

373:                                              ; preds = %242
  %374 = add i64 %42, -64
  %375 = getelementptr i8, i8* %59, i32 64
  %376 = getelementptr i8, i8* %60, i32 64
  br label %41

377:                                              ; preds = %4, %372
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %6) #4
  ret void
}

declare void @sodium_memzero(i8* %0, i32 %1) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #1

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { argmemonly nounwind willreturn writeonly }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %7 = icmp eq i64 %1, 0
; Looking for a replacement for:
%0:i64 = var
%1:i1 = eq 0:i64, %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %13, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %17, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %21, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %25, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %29, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %33, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %37, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %42 = load i32, i32* %41, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %46 = load i32, i32* %45, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %50 = load i32, i32* %49, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %54 = load i32, i32* %53, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %56 = trunc i64 %1 to i32
; Looking for a replacement for:
%0:i64 = var
%1:i1 = eq 0:i64, %0
pc %1 0:i1
%2:i32 = trunc %0
infer %2
#########################################################
; exiting Souper's runOnFunction() for chacha20_ref.c.bc:stream_ietf_ext_ref()

; entering Souper's runOnFunction() for chacha20_ref.c.bc:stream_ref_xor_ic()

; ModuleID = 'chacha20_ref.c.bc'
source_filename = "crypto_stream/chacha20/ref/chacha20_ref.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.crypto_stream_chacha20_implementation = type { i32 (i8*, i64, i8*, i8*)*, i32 (i8*, i64, i8*, i8*)*, i32 (i8*, i8*, i64, i8*, i64, i8*)*, i32 (i8*, i8*, i64, i8*, i32, i8*)* }
%struct.chacha_ctx = type { [16 x i32] }

@crypto_stream_chacha20_ref_implementation = hidden local_unnamed_addr global %struct.crypto_stream_chacha20_implementation { i32 (i8*, i64, i8*, i8*)* @stream_ref, i32 (i8*, i64, i8*, i8*)* @stream_ietf_ext_ref, i32 (i8*, i8*, i64, i8*, i64, i8*)* @stream_ref_xor_ic, i32 (i8*, i8*, i64, i8*, i32, i8*)* @stream_ietf_ext_ref_xor_ic }, align 4

; Function Attrs: nounwind
define internal i32 @stream_ref(i8* nocapture %0, i64 %1, i8* nocapture readonly %2, i8* nocapture readonly %3) #0 {
  %5 = alloca %struct.chacha_ctx, align 4
  %6 = bitcast %struct.chacha_ctx* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %6) #4
  %7 = icmp eq i64 %1, 0
  br i1 %7, label %54, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 0
  store i32 1634760805, i32* %9, align 4
  %10 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 1
  store i32 857760878, i32* %10, align 4
  %11 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 2
  store i32 2036477234, i32* %11, align 4
  %12 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 3
  store i32 1797285236, i32* %12, align 4
  %13 = bitcast i8* %3 to i32*
  %14 = load i32, i32* %13, align 1
  %15 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 4
  store i32 %14, i32* %15, align 4
  %16 = getelementptr i8, i8* %3, i32 4
  %17 = bitcast i8* %16 to i32*
  %18 = load i32, i32* %17, align 1
  %19 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 5
  store i32 %18, i32* %19, align 4
  %20 = getelementptr i8, i8* %3, i32 8
  %21 = bitcast i8* %20 to i32*
  %22 = load i32, i32* %21, align 1
  %23 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 6
  store i32 %22, i32* %23, align 4
  %24 = getelementptr i8, i8* %3, i32 12
  %25 = bitcast i8* %24 to i32*
  %26 = load i32, i32* %25, align 1
  %27 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 7
  store i32 %26, i32* %27, align 4
  %28 = getelementptr i8, i8* %3, i32 16
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 1
  %31 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 8
  store i32 %30, i32* %31, align 4
  %32 = getelementptr i8, i8* %3, i32 20
  %33 = bitcast i8* %32 to i32*
  %34 = load i32, i32* %33, align 1
  %35 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 9
  store i32 %34, i32* %35, align 4
  %36 = getelementptr i8, i8* %3, i32 24
  %37 = bitcast i8* %36 to i32*
  %38 = load i32, i32* %37, align 1
  %39 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 10
  store i32 %38, i32* %39, align 4
  %40 = getelementptr i8, i8* %3, i32 28
  %41 = bitcast i8* %40 to i32*
  %42 = load i32, i32* %41, align 1
  %43 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 11
  store i32 %42, i32* %43, align 4
  %44 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 12
  store i32 0, i32* %44, align 4
  %45 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 13
  store i32 0, i32* %45, align 4
  %46 = bitcast i8* %2 to i32*
  %47 = load i32, i32* %46, align 1
  %48 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 14
  store i32 %47, i32* %48, align 4
  %49 = getelementptr i8, i8* %2, i32 4
  %50 = bitcast i8* %49 to i32*
  %51 = load i32, i32* %50, align 1
  %52 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 15
  store i32 %51, i32* %52, align 4
  %53 = trunc i64 %1 to i32
  tail call void @llvm.memset.p0i8.i32(i8* align 1 %0, i8 0, i32 %53, i1 false)
  call fastcc void @chacha20_encrypt_bytes(%struct.chacha_ctx* nonnull %5, i8* %0, i8* %0, i64 %1)
  call void @sodium_memzero(i8* nonnull %6, i32 64) #4
  br label %54

54:                                               ; preds = %4, %8
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %6) #4
  ret i32 0
}

; Function Attrs: nounwind
define internal i32 @stream_ietf_ext_ref(i8* nocapture %0, i64 %1, i8* nocapture readonly %2, i8* nocapture readonly %3) #0 {
  %5 = alloca %struct.chacha_ctx, align 4
  %6 = bitcast %struct.chacha_ctx* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %6) #4
  %7 = icmp eq i64 %1, 0
  br i1 %7, label %57, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 0
  store i32 1634760805, i32* %9, align 4
  %10 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 1
  store i32 857760878, i32* %10, align 4
  %11 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 2
  store i32 2036477234, i32* %11, align 4
  %12 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 3
  store i32 1797285236, i32* %12, align 4
  %13 = bitcast i8* %3 to i32*
  %14 = load i32, i32* %13, align 1
  %15 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 4
  store i32 %14, i32* %15, align 4
  %16 = getelementptr i8, i8* %3, i32 4
  %17 = bitcast i8* %16 to i32*
  %18 = load i32, i32* %17, align 1
  %19 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 5
  store i32 %18, i32* %19, align 4
  %20 = getelementptr i8, i8* %3, i32 8
  %21 = bitcast i8* %20 to i32*
  %22 = load i32, i32* %21, align 1
  %23 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 6
  store i32 %22, i32* %23, align 4
  %24 = getelementptr i8, i8* %3, i32 12
  %25 = bitcast i8* %24 to i32*
  %26 = load i32, i32* %25, align 1
  %27 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 7
  store i32 %26, i32* %27, align 4
  %28 = getelementptr i8, i8* %3, i32 16
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 1
  %31 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 8
  store i32 %30, i32* %31, align 4
  %32 = getelementptr i8, i8* %3, i32 20
  %33 = bitcast i8* %32 to i32*
  %34 = load i32, i32* %33, align 1
  %35 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 9
  store i32 %34, i32* %35, align 4
  %36 = getelementptr i8, i8* %3, i32 24
  %37 = bitcast i8* %36 to i32*
  %38 = load i32, i32* %37, align 1
  %39 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 10
  store i32 %38, i32* %39, align 4
  %40 = getelementptr i8, i8* %3, i32 28
  %41 = bitcast i8* %40 to i32*
  %42 = load i32, i32* %41, align 1
  %43 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 11
  store i32 %42, i32* %43, align 4
  %44 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 12
  store i32 0, i32* %44, align 4
  %45 = bitcast i8* %2 to i32*
  %46 = load i32, i32* %45, align 1
  %47 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 13
  store i32 %46, i32* %47, align 4
  %48 = getelementptr i8, i8* %2, i32 4
  %49 = bitcast i8* %48 to i32*
  %50 = load i32, i32* %49, align 1
  %51 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 14
  store i32 %50, i32* %51, align 4
  %52 = getelementptr i8, i8* %2, i32 8
  %53 = bitcast i8* %52 to i32*
  %54 = load i32, i32* %53, align 1
  %55 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 15
  store i32 %54, i32* %55, align 4
  %56 = trunc i64 %1 to i32
  tail call void @llvm.memset.p0i8.i32(i8* align 1 %0, i8 0, i32 %56, i1 false)
  call fastcc void @chacha20_encrypt_bytes(%struct.chacha_ctx* nonnull %5, i8* %0, i8* %0, i64 %1)
  call void @sodium_memzero(i8* nonnull %6, i32 64) #4
  br label %57

57:                                               ; preds = %4, %8
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %6) #4
  ret i32 0
}

; Function Attrs: nounwind
define internal i32 @stream_ref_xor_ic(i8* nocapture %0, i8* nocapture readonly %1, i64 %2, i8* nocapture readonly %3, i64 %4, i8* nocapture readonly %5) #0 {
  %7 = alloca %struct.chacha_ctx, align 4
  %8 = bitcast %struct.chacha_ctx* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %8) #4
  %9 = icmp eq i64 %2, 0
  br i1 %9, label %58, label %10

10:                                               ; preds = %6
  %11 = lshr i64 %4, 32
  %12 = trunc i64 %11 to i32
  %13 = trunc i64 %4 to i32
  %14 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 0
  store i32 1634760805, i32* %14, align 4
  %15 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 1
  store i32 857760878, i32* %15, align 4
  %16 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 2
  store i32 2036477234, i32* %16, align 4
  %17 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 3
  store i32 1797285236, i32* %17, align 4
  %18 = bitcast i8* %5 to i32*
  %19 = load i32, i32* %18, align 1
  %20 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 4
  store i32 %19, i32* %20, align 4
  %21 = getelementptr i8, i8* %5, i32 4
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 1
  %24 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 5
  store i32 %23, i32* %24, align 4
  %25 = getelementptr i8, i8* %5, i32 8
  %26 = bitcast i8* %25 to i32*
  %27 = load i32, i32* %26, align 1
  %28 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 6
  store i32 %27, i32* %28, align 4
  %29 = getelementptr i8, i8* %5, i32 12
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 1
  %32 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 7
  store i32 %31, i32* %32, align 4
  %33 = getelementptr i8, i8* %5, i32 16
  %34 = bitcast i8* %33 to i32*
  %35 = load i32, i32* %34, align 1
  %36 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 8
  store i32 %35, i32* %36, align 4
  %37 = getelementptr i8, i8* %5, i32 20
  %38 = bitcast i8* %37 to i32*
  %39 = load i32, i32* %38, align 1
  %40 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 9
  store i32 %39, i32* %40, align 4
  %41 = getelementptr i8, i8* %5, i32 24
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %42, align 1
  %44 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 10
  store i32 %43, i32* %44, align 4
  %45 = getelementptr i8, i8* %5, i32 28
  %46 = bitcast i8* %45 to i32*
  %47 = load i32, i32* %46, align 1
  %48 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 11
  store i32 %47, i32* %48, align 4
  %49 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 12
  store i32 %13, i32* %49, align 4
  %50 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 13
  store i32 %12, i32* %50, align 4
  %51 = bitcast i8* %3 to i32*
  %52 = load i32, i32* %51, align 1
  %53 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 14
  store i32 %52, i32* %53, align 4
  %54 = getelementptr i8, i8* %3, i32 4
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 1
  %57 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 15
  store i32 %56, i32* %57, align 4
  call fastcc void @chacha20_encrypt_bytes(%struct.chacha_ctx* nonnull %7, i8* %1, i8* %0, i64 %2)
  call void @sodium_memzero(i8* nonnull %8, i32 64) #4
  br label %58

58:                                               ; preds = %6, %10
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %8) #4
  ret i32 0
}

; Function Attrs: nounwind
define internal i32 @stream_ietf_ext_ref_xor_ic(i8* nocapture %0, i8* nocapture readonly %1, i64 %2, i8* nocapture readonly %3, i32 %4, i8* nocapture readonly %5) #0 {
  %7 = alloca %struct.chacha_ctx, align 4
  %8 = bitcast %struct.chacha_ctx* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %8) #4
  %9 = icmp eq i64 %2, 0
  br i1 %9, label %58, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 0
  store i32 1634760805, i32* %11, align 4
  %12 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 1
  store i32 857760878, i32* %12, align 4
  %13 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 2
  store i32 2036477234, i32* %13, align 4
  %14 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 3
  store i32 1797285236, i32* %14, align 4
  %15 = bitcast i8* %5 to i32*
  %16 = load i32, i32* %15, align 1
  %17 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 4
  store i32 %16, i32* %17, align 4
  %18 = getelementptr i8, i8* %5, i32 4
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 1
  %21 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 5
  store i32 %20, i32* %21, align 4
  %22 = getelementptr i8, i8* %5, i32 8
  %23 = bitcast i8* %22 to i32*
  %24 = load i32, i32* %23, align 1
  %25 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 6
  store i32 %24, i32* %25, align 4
  %26 = getelementptr i8, i8* %5, i32 12
  %27 = bitcast i8* %26 to i32*
  %28 = load i32, i32* %27, align 1
  %29 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 7
  store i32 %28, i32* %29, align 4
  %30 = getelementptr i8, i8* %5, i32 16
  %31 = bitcast i8* %30 to i32*
  %32 = load i32, i32* %31, align 1
  %33 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 8
  store i32 %32, i32* %33, align 4
  %34 = getelementptr i8, i8* %5, i32 20
  %35 = bitcast i8* %34 to i32*
  %36 = load i32, i32* %35, align 1
  %37 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 9
  store i32 %36, i32* %37, align 4
  %38 = getelementptr i8, i8* %5, i32 24
  %39 = bitcast i8* %38 to i32*
  %40 = load i32, i32* %39, align 1
  %41 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 10
  store i32 %40, i32* %41, align 4
  %42 = getelementptr i8, i8* %5, i32 28
  %43 = bitcast i8* %42 to i32*
  %44 = load i32, i32* %43, align 1
  %45 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 11
  store i32 %44, i32* %45, align 4
  %46 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 12
  store i32 %4, i32* %46, align 4
  %47 = bitcast i8* %3 to i32*
  %48 = load i32, i32* %47, align 1
  %49 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 13
  store i32 %48, i32* %49, align 4
  %50 = getelementptr i8, i8* %3, i32 4
  %51 = bitcast i8* %50 to i32*
  %52 = load i32, i32* %51, align 1
  %53 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 14
  store i32 %52, i32* %53, align 4
  %54 = getelementptr i8, i8* %3, i32 8
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 1
  %57 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 15
  store i32 %56, i32* %57, align 4
  call fastcc void @chacha20_encrypt_bytes(%struct.chacha_ctx* nonnull %7, i8* %1, i8* %0, i64 %2)
  call void @sodium_memzero(i8* nonnull %8, i32 64) #4
  br label %58

58:                                               ; preds = %6, %10
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %8) #4
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #1

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

; Function Attrs: nounwind
define internal fastcc void @chacha20_encrypt_bytes(%struct.chacha_ctx* nocapture %0, i8* nocapture readonly %1, i8* nocapture %2, i64 %3) unnamed_addr #0 {
  %5 = alloca [64 x i8], align 16
  %6 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %6) #4
  %7 = icmp eq i64 %3, 0
  br i1 %7, label %377, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 2
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 3
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 4
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 5
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 6
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 7
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 8
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 9
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 10
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 11
  %32 = load i32, i32* %31, align 4
  %33 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 12
  %34 = load i32, i32* %33, align 4
  %35 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 13
  %36 = load i32, i32* %35, align 4
  %37 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 14
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 15
  %40 = load i32, i32* %39, align 4
  br label %41

41:                                               ; preds = %373, %8
  %42 = phi i64 [ %3, %8 ], [ %374, %373 ]
  %43 = phi i32 [ %34, %8 ], [ %322, %373 ]
  %44 = phi i32 [ %36, %8 ], [ %325, %373 ]
  %45 = phi i8* [ %2, %8 ], [ %375, %373 ]
  %46 = phi i8* [ %1, %8 ], [ %376, %373 ]
  %47 = phi i8* [ null, %8 ], [ %61, %373 ]
  %48 = icmp ult i64 %42, 64
  br i1 %48, label %49, label %58

49:                                               ; preds = %41
  call void @llvm.memset.p0i8.i32(i8* nonnull align 16 dereferenceable(64) %6, i8 0, i32 64, i1 false)
  br label %50

50:                                               ; preds = %49, %50
  %51 = phi i32 [ %55, %50 ], [ 0, %49 ]
  %52 = getelementptr i8, i8* %46, i32 %51
  %53 = load i8, i8* %52, align 1
  %54 = getelementptr [64 x i8], [64 x i8]* %5, i32 0, i32 %51
  store i8 %53, i8* %54, align 1
  %55 = add i32 %51, 1
  %56 = zext i32 %55 to i64
  %57 = icmp ugt i64 %42, %56
  br i1 %57, label %50, label %58

58:                                               ; preds = %50, %41
  %59 = phi i8* [ %45, %41 ], [ %6, %50 ]
  %60 = phi i8* [ %46, %41 ], [ %6, %50 ]
  %61 = phi i8* [ %47, %41 ], [ %45, %50 ]
  br label %62

62:                                               ; preds = %58, %62
  %63 = phi i32 [ 20, %58 ], [ %240, %62 ]
  %64 = phi i32 [ %10, %58 ], [ %170, %62 ]
  %65 = phi i32 [ %12, %58 ], [ %190, %62 ]
  %66 = phi i32 [ %14, %58 ], [ %210, %62 ]
  %67 = phi i32 [ %16, %58 ], [ %230, %62 ]
  %68 = phi i32 [ %18, %58 ], [ %239, %62 ]
  %69 = phi i32 [ %20, %58 ], [ %179, %62 ]
  %70 = phi i32 [ %22, %58 ], [ %199, %62 ]
  %71 = phi i32 [ %24, %58 ], [ %219, %62 ]
  %72 = phi i32 [ %26, %58 ], [ %215, %62 ]
  %73 = phi i32 [ %28, %58 ], [ %235, %62 ]
  %74 = phi i32 [ %30, %58 ], [ %175, %62 ]
  %75 = phi i32 [ %40, %58 ], [ %174, %62 ]
  %76 = phi i32 [ %38, %58 ], [ %234, %62 ]
  %77 = phi i32 [ %44, %58 ], [ %214, %62 ]
  %78 = phi i32 [ %43, %58 ], [ %194, %62 ]
  %79 = phi i32 [ %32, %58 ], [ %195, %62 ]
  %80 = add i32 %64, %68
  %81 = xor i32 %80, %78
  %82 = shl i32 %81, 16
  %83 = lshr i32 %81, 16
  %84 = or i32 %83, %82
  %85 = add i32 %84, %72
  %86 = xor i32 %85, %68
  %87 = shl i32 %86, 12
  %88 = lshr i32 %86, 20
  %89 = or i32 %88, %87
  %90 = add i32 %89, %80
  %91 = xor i32 %90, %84
  %92 = shl i32 %91, 8
  %93 = lshr i32 %91, 24
  %94 = or i32 %93, %92
  %95 = add i32 %94, %85
  %96 = xor i32 %95, %89
  %97 = shl i32 %96, 7
  %98 = lshr i32 %96, 25
  %99 = or i32 %98, %97
  %100 = add i32 %65, %69
  %101 = xor i32 %100, %77
  %102 = shl i32 %101, 16
  %103 = lshr i32 %101, 16
  %104 = or i32 %103, %102
  %105 = add i32 %104, %73
  %106 = xor i32 %105, %69
  %107 = shl i32 %106, 12
  %108 = lshr i32 %106, 20
  %109 = or i32 %108, %107
  %110 = add i32 %109, %100
  %111 = xor i32 %110, %104
  %112 = shl i32 %111, 8
  %113 = lshr i32 %111, 24
  %114 = or i32 %113, %112
  %115 = add i32 %114, %105
  %116 = xor i32 %115, %109
  %117 = shl i32 %116, 7
  %118 = lshr i32 %116, 25
  %119 = or i32 %118, %117
  %120 = add i32 %66, %70
  %121 = xor i32 %120, %76
  %122 = shl i32 %121, 16
  %123 = lshr i32 %121, 16
  %124 = or i32 %123, %122
  %125 = add i32 %124, %74
  %126 = xor i32 %125, %70
  %127 = shl i32 %126, 12
  %128 = lshr i32 %126, 20
  %129 = or i32 %128, %127
  %130 = add i32 %129, %120
  %131 = xor i32 %130, %124
  %132 = shl i32 %131, 8
  %133 = lshr i32 %131, 24
  %134 = or i32 %133, %132
  %135 = add i32 %134, %125
  %136 = xor i32 %135, %129
  %137 = shl i32 %136, 7
  %138 = lshr i32 %136, 25
  %139 = or i32 %138, %137
  %140 = add i32 %67, %71
  %141 = xor i32 %140, %75
  %142 = shl i32 %141, 16
  %143 = lshr i32 %141, 16
  %144 = or i32 %143, %142
  %145 = add i32 %144, %79
  %146 = xor i32 %145, %71
  %147 = shl i32 %146, 12
  %148 = lshr i32 %146, 20
  %149 = or i32 %148, %147
  %150 = add i32 %149, %140
  %151 = xor i32 %150, %144
  %152 = shl i32 %151, 8
  %153 = lshr i32 %151, 24
  %154 = or i32 %153, %152
  %155 = add i32 %154, %145
  %156 = xor i32 %155, %149
  %157 = shl i32 %156, 7
  %158 = lshr i32 %156, 25
  %159 = or i32 %158, %157
  %160 = add i32 %119, %90
  %161 = xor i32 %160, %154
  %162 = shl i32 %161, 16
  %163 = lshr i32 %161, 16
  %164 = or i32 %163, %162
  %165 = add i32 %164, %135
  %166 = xor i32 %165, %119
  %167 = shl i32 %166, 12
  %168 = lshr i32 %166, 20
  %169 = or i32 %168, %167
  %170 = add i32 %169, %160
  %171 = xor i32 %170, %164
  %172 = shl i32 %171, 8
  %173 = lshr i32 %171, 24
  %174 = or i32 %173, %172
  %175 = add i32 %174, %165
  %176 = xor i32 %175, %169
  %177 = shl i32 %176, 7
  %178 = lshr i32 %176, 25
  %179 = or i32 %178, %177
  %180 = add i32 %139, %110
  %181 = xor i32 %180, %94
  %182 = shl i32 %181, 16
  %183 = lshr i32 %181, 16
  %184 = or i32 %183, %182
  %185 = add i32 %184, %155
  %186 = xor i32 %185, %139
  %187 = shl i32 %186, 12
  %188 = lshr i32 %186, 20
  %189 = or i32 %188, %187
  %190 = add i32 %189, %180
  %191 = xor i32 %190, %184
  %192 = shl i32 %191, 8
  %193 = lshr i32 %191, 24
  %194 = or i32 %193, %192
  %195 = add i32 %194, %185
  %196 = xor i32 %195, %189
  %197 = shl i32 %196, 7
  %198 = lshr i32 %196, 25
  %199 = or i32 %198, %197
  %200 = add i32 %159, %130
  %201 = xor i32 %200, %114
  %202 = shl i32 %201, 16
  %203 = lshr i32 %201, 16
  %204 = or i32 %203, %202
  %205 = add i32 %204, %95
  %206 = xor i32 %205, %159
  %207 = shl i32 %206, 12
  %208 = lshr i32 %206, 20
  %209 = or i32 %208, %207
  %210 = add i32 %209, %200
  %211 = xor i32 %210, %204
  %212 = shl i32 %211, 8
  %213 = lshr i32 %211, 24
  %214 = or i32 %213, %212
  %215 = add i32 %214, %205
  %216 = xor i32 %215, %209
  %217 = shl i32 %216, 7
  %218 = lshr i32 %216, 25
  %219 = or i32 %218, %217
  %220 = add i32 %99, %150
  %221 = xor i32 %220, %134
  %222 = shl i32 %221, 16
  %223 = lshr i32 %221, 16
  %224 = or i32 %223, %222
  %225 = add i32 %224, %115
  %226 = xor i32 %225, %99
  %227 = shl i32 %226, 12
  %228 = lshr i32 %226, 20
  %229 = or i32 %228, %227
  %230 = add i32 %229, %220
  %231 = xor i32 %230, %224
  %232 = shl i32 %231, 8
  %233 = lshr i32 %231, 24
  %234 = or i32 %233, %232
  %235 = add i32 %234, %225
  %236 = xor i32 %235, %229
  %237 = shl i32 %236, 7
  %238 = lshr i32 %236, 25
  %239 = or i32 %238, %237
  %240 = add nsw i32 %63, -2
  %241 = icmp eq i32 %240, 0
  br i1 %241, label %242, label %62

242:                                              ; preds = %62
  %243 = add i32 %170, %10
  %244 = add i32 %190, %12
  %245 = add i32 %210, %14
  %246 = add i32 %230, %16
  %247 = add i32 %239, %18
  %248 = add i32 %179, %20
  %249 = add i32 %199, %22
  %250 = add i32 %219, %24
  %251 = add i32 %215, %26
  %252 = add i32 %235, %28
  %253 = add i32 %175, %30
  %254 = add i32 %195, %32
  %255 = add i32 %194, %43
  %256 = add i32 %214, %44
  %257 = add i32 %234, %38
  %258 = add i32 %174, %40
  %259 = bitcast i8* %60 to i32*
  %260 = load i32, i32* %259, align 1
  %261 = xor i32 %260, %243
  %262 = getelementptr i8, i8* %60, i32 4
  %263 = bitcast i8* %262 to i32*
  %264 = load i32, i32* %263, align 1
  %265 = xor i32 %264, %244
  %266 = getelementptr i8, i8* %60, i32 8
  %267 = bitcast i8* %266 to i32*
  %268 = load i32, i32* %267, align 1
  %269 = xor i32 %268, %245
  %270 = getelementptr i8, i8* %60, i32 12
  %271 = bitcast i8* %270 to i32*
  %272 = load i32, i32* %271, align 1
  %273 = xor i32 %272, %246
  %274 = getelementptr i8, i8* %60, i32 16
  %275 = bitcast i8* %274 to i32*
  %276 = load i32, i32* %275, align 1
  %277 = xor i32 %276, %247
  %278 = getelementptr i8, i8* %60, i32 20
  %279 = bitcast i8* %278 to i32*
  %280 = load i32, i32* %279, align 1
  %281 = xor i32 %280, %248
  %282 = getelementptr i8, i8* %60, i32 24
  %283 = bitcast i8* %282 to i32*
  %284 = load i32, i32* %283, align 1
  %285 = xor i32 %284, %249
  %286 = getelementptr i8, i8* %60, i32 28
  %287 = bitcast i8* %286 to i32*
  %288 = load i32, i32* %287, align 1
  %289 = xor i32 %288, %250
  %290 = getelementptr i8, i8* %60, i32 32
  %291 = bitcast i8* %290 to i32*
  %292 = load i32, i32* %291, align 1
  %293 = xor i32 %292, %251
  %294 = getelementptr i8, i8* %60, i32 36
  %295 = bitcast i8* %294 to i32*
  %296 = load i32, i32* %295, align 1
  %297 = xor i32 %296, %252
  %298 = getelementptr i8, i8* %60, i32 40
  %299 = bitcast i8* %298 to i32*
  %300 = load i32, i32* %299, align 1
  %301 = xor i32 %300, %253
  %302 = getelementptr i8, i8* %60, i32 44
  %303 = bitcast i8* %302 to i32*
  %304 = load i32, i32* %303, align 1
  %305 = xor i32 %304, %254
  %306 = getelementptr i8, i8* %60, i32 48
  %307 = bitcast i8* %306 to i32*
  %308 = load i32, i32* %307, align 1
  %309 = xor i32 %308, %255
  %310 = getelementptr i8, i8* %60, i32 52
  %311 = bitcast i8* %310 to i32*
  %312 = load i32, i32* %311, align 1
  %313 = xor i32 %312, %256
  %314 = getelementptr i8, i8* %60, i32 56
  %315 = bitcast i8* %314 to i32*
  %316 = load i32, i32* %315, align 1
  %317 = xor i32 %316, %257
  %318 = getelementptr i8, i8* %60, i32 60
  %319 = bitcast i8* %318 to i32*
  %320 = load i32, i32* %319, align 1
  %321 = xor i32 %320, %258
  %322 = add i32 %43, 1
  %323 = icmp eq i32 %322, 0
  %324 = zext i1 %323 to i32
  %325 = add i32 %44, %324
  %326 = bitcast i8* %59 to i32*
  store i32 %261, i32* %326, align 1
  %327 = getelementptr i8, i8* %59, i32 4
  %328 = bitcast i8* %327 to i32*
  store i32 %265, i32* %328, align 1
  %329 = getelementptr i8, i8* %59, i32 8
  %330 = bitcast i8* %329 to i32*
  store i32 %269, i32* %330, align 1
  %331 = getelementptr i8, i8* %59, i32 12
  %332 = bitcast i8* %331 to i32*
  store i32 %273, i32* %332, align 1
  %333 = getelementptr i8, i8* %59, i32 16
  %334 = bitcast i8* %333 to i32*
  store i32 %277, i32* %334, align 1
  %335 = getelementptr i8, i8* %59, i32 20
  %336 = bitcast i8* %335 to i32*
  store i32 %281, i32* %336, align 1
  %337 = getelementptr i8, i8* %59, i32 24
  %338 = bitcast i8* %337 to i32*
  store i32 %285, i32* %338, align 1
  %339 = getelementptr i8, i8* %59, i32 28
  %340 = bitcast i8* %339 to i32*
  store i32 %289, i32* %340, align 1
  %341 = getelementptr i8, i8* %59, i32 32
  %342 = bitcast i8* %341 to i32*
  store i32 %293, i32* %342, align 1
  %343 = getelementptr i8, i8* %59, i32 36
  %344 = bitcast i8* %343 to i32*
  store i32 %297, i32* %344, align 1
  %345 = getelementptr i8, i8* %59, i32 40
  %346 = bitcast i8* %345 to i32*
  store i32 %301, i32* %346, align 1
  %347 = getelementptr i8, i8* %59, i32 44
  %348 = bitcast i8* %347 to i32*
  store i32 %305, i32* %348, align 1
  %349 = getelementptr i8, i8* %59, i32 48
  %350 = bitcast i8* %349 to i32*
  store i32 %309, i32* %350, align 1
  %351 = getelementptr i8, i8* %59, i32 52
  %352 = bitcast i8* %351 to i32*
  store i32 %313, i32* %352, align 1
  %353 = getelementptr i8, i8* %59, i32 56
  %354 = bitcast i8* %353 to i32*
  store i32 %317, i32* %354, align 1
  %355 = getelementptr i8, i8* %59, i32 60
  %356 = bitcast i8* %355 to i32*
  store i32 %321, i32* %356, align 1
  %357 = icmp ult i64 %42, 65
  br i1 %357, label %358, label %373

358:                                              ; preds = %242
  br i1 %48, label %359, label %372

359:                                              ; preds = %358
  %360 = trunc i64 %42 to i32
  %361 = icmp eq i32 %360, 0
  br i1 %361, label %372, label %362

362:                                              ; preds = %359
  %363 = trunc i32 %261 to i8
  store i8 %363, i8* %61, align 1
  %364 = icmp eq i32 %360, 1
  br i1 %364, label %372, label %365

365:                                              ; preds = %362, %365
  %366 = phi i32 [ %370, %365 ], [ 1, %362 ]
  %367 = getelementptr i8, i8* %59, i32 %366
  %368 = load i8, i8* %367, align 1
  %369 = getelementptr i8, i8* %61, i32 %366
  store i8 %368, i8* %369, align 1
  %370 = add nuw i32 %366, 1
  %371 = icmp eq i32 %370, %360
  br i1 %371, label %372, label %365

372:                                              ; preds = %365, %362, %359, %358
  store i32 %322, i32* %33, align 4
  store i32 %325, i32* %35, align 4
  br label %377

373:                                              ; preds = %242
  %374 = add i64 %42, -64
  %375 = getelementptr i8, i8* %59, i32 64
  %376 = getelementptr i8, i8* %60, i32 64
  br label %41

377:                                              ; preds = %4, %372
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %6) #4
  ret void
}

declare void @sodium_memzero(i8* %0, i32 %1) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #1

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { argmemonly nounwind willreturn writeonly }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %9 = icmp eq i64 %2, 0
; Looking for a replacement for:
%0:i64 = var
%1:i1 = eq 0:i64, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = lshr i64 %4, 32
; Looking for a replacement for:
%0:i64 = var
%1:i64 = lshr %0, 32:i64
infer %1 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %12 = trunc i64 %11 to i32
; Looking for a replacement for:
%0:i64 = var
%1:i64 = lshr %0, 32:i64
%2:i32 = trunc %1
infer %2

; *****
; For LLVM instruction:
;  %13 = trunc i64 %4 to i32
; Looking for a replacement for:
%0:i64 = var
%1:i32 = trunc %0
infer %1

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %18, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %22, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %26, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %30, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %34, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %38, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %42, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %46, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %52 = load i32, i32* %51, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %56 = load i32, i32* %55, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0
