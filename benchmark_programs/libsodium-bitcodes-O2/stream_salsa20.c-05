; entering Souper's runOnFunction() for crypto_stream_salsa20_xor_ic()

; ModuleID = './stream_salsa20.c.bc'
source_filename = "crypto_stream/salsa20/stream_salsa20.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.crypto_stream_salsa20_implementation = type { i32 (i8*, i64, i8*, i8*)*, i32 (i8*, i8*, i64, i8*, i64, i8*)* }

@crypto_stream_salsa20_ref_implementation = external local_unnamed_addr global %struct.crypto_stream_salsa20_implementation, align 4

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_stream_salsa20_keybytes() local_unnamed_addr #0 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_stream_salsa20_noncebytes() local_unnamed_addr #0 {
  ret i32 8
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_stream_salsa20_messagebytes_max() local_unnamed_addr #0 {
  ret i32 -1
}

; Function Attrs: nounwind
define i32 @crypto_stream_salsa20(i8* nonnull %0, i64 %1, i8* nonnull %2, i8* nonnull %3) local_unnamed_addr #1 {
  %5 = load i32 (i8*, i64, i8*, i8*)*, i32 (i8*, i64, i8*, i8*)** getelementptr inbounds (%struct.crypto_stream_salsa20_implementation, %struct.crypto_stream_salsa20_implementation* @crypto_stream_salsa20_ref_implementation, i32 0, i32 0), align 4
  %6 = tail call i32 %5(i8* nonnull %0, i64 %1, i8* nonnull %2, i8* nonnull %3) #3
  ret i32 %6
}

; Function Attrs: nounwind
define i32 @crypto_stream_salsa20_xor_ic(i8* nonnull %0, i8* nonnull %1, i64 %2, i8* nonnull %3, i64 %4, i8* nonnull %5) local_unnamed_addr #1 {
  %7 = load i32 (i8*, i8*, i64, i8*, i64, i8*)*, i32 (i8*, i8*, i64, i8*, i64, i8*)** getelementptr inbounds (%struct.crypto_stream_salsa20_implementation, %struct.crypto_stream_salsa20_implementation* @crypto_stream_salsa20_ref_implementation, i32 0, i32 1), align 4
  %8 = tail call i32 %7(i8* nonnull %0, i8* nonnull %1, i64 %2, i8* nonnull %3, i64 %4, i8* nonnull %5) #3
  ret i32 %8
}

; Function Attrs: nounwind
define i32 @crypto_stream_salsa20_xor(i8* nonnull %0, i8* nonnull %1, i64 %2, i8* nonnull %3, i8* nonnull %4) local_unnamed_addr #1 {
  %6 = load i32 (i8*, i8*, i64, i8*, i64, i8*)*, i32 (i8*, i8*, i64, i8*, i64, i8*)** getelementptr inbounds (%struct.crypto_stream_salsa20_implementation, %struct.crypto_stream_salsa20_implementation* @crypto_stream_salsa20_ref_implementation, i32 0, i32 1), align 4
  %7 = tail call i32 %6(i8* nonnull %0, i8* nonnull %1, i64 %2, i8* nonnull %3, i64 0, i8* nonnull %4) #3
  ret i32 %7
}

; Function Attrs: nounwind
define void @crypto_stream_salsa20_keygen(i8* nonnull %0) local_unnamed_addr #1 {
  tail call void @randombytes_buf(i8* nonnull %0, i32 32) #3
  ret void
}

declare void @randombytes_buf(i8* %0, i32 %1) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readnone
define hidden i32 @_crypto_stream_salsa20_pick_best_implementation() local_unnamed_addr #0 {
  ret i32 0
}

attributes #0 = { norecurse nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %8 = tail call i32 %7(i8* nonnull %0, i8* nonnull %1, i64 %2, i8* nonnull %3, i64 %4, i8* nonnull %5) #3
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for crypto_stream_salsa20_xor_ic()

