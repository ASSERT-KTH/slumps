; entering Souper's runOnFunction() for sodium_crit_enter()

; ModuleID = './core.c.bc'
source_filename = "sodium/core.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.timespec = type { i64, i32 }

@initialized = internal global i32 0, align 4
@_sodium_lock = internal global i32 0, align 4
@_misuse_handler = internal unnamed_addr global void ()* null, align 4

; Function Attrs: nounwind
define i32 @sodium_init() local_unnamed_addr #0 {
  %1 = alloca %struct.timespec, align 8
  %2 = bitcast %struct.timespec* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %2) #7
  call void @llvm.memset.p0i8.i32(i8* nonnull align 8 dereferenceable(16) %2, i8 0, i32 16, i1 false) #7
  %3 = atomicrmw xchg i32* @_sodium_lock, i32 1 seq_cst
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %9, label %5

5:                                                ; preds = %0, %5
  %6 = call i32 @nanosleep(%struct.timespec* nonnull %1, %struct.timespec* null) #7
  %7 = atomicrmw xchg i32* @_sodium_lock, i32 1 seq_cst
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %5

9:                                                ; preds = %5, %0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %2) #7
  %10 = load volatile i32, i32* @initialized, align 4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %21

12:                                               ; preds = %9
  %13 = call i32 @_sodium_runtime_get_cpu_features() #7
  call void @randombytes_stir() #7
  %14 = call i32 @_sodium_alloc_init() #7
  %15 = call i32 @_crypto_pwhash_argon2_pick_best_implementation() #7
  %16 = call i32 @_crypto_generichash_blake2b_pick_best_implementation() #7
  %17 = call i32 @_crypto_onetimeauth_poly1305_pick_best_implementation() #7
  %18 = call i32 @_crypto_scalarmult_curve25519_pick_best_implementation() #7
  %19 = call i32 @_crypto_stream_chacha20_pick_best_implementation() #7
  %20 = call i32 @_crypto_stream_salsa20_pick_best_implementation() #7
  store volatile i32 1, i32* @initialized, align 4
  br label %21

21:                                               ; preds = %9, %12
  %22 = phi i32 [ 0, %12 ], [ 1, %9 ]
  store atomic i32 0, i32* @_sodium_lock release, align 4
  ret i32 %22
}

; Function Attrs: nounwind
define hidden i32 @sodium_crit_enter() local_unnamed_addr #0 {
  %1 = alloca %struct.timespec, align 8
  %2 = bitcast %struct.timespec* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %2) #7
  call void @llvm.memset.p0i8.i32(i8* nonnull align 8 dereferenceable(16) %2, i8 0, i32 16, i1 false)
  %3 = atomicrmw xchg i32* @_sodium_lock, i32 1 seq_cst
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %9, label %5

5:                                                ; preds = %0, %5
  %6 = call i32 @nanosleep(%struct.timespec* nonnull %1, %struct.timespec* null) #7
  %7 = atomicrmw xchg i32* @_sodium_lock, i32 1 seq_cst
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %5

9:                                                ; preds = %5, %0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %2) #7
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind
define hidden i32 @sodium_crit_leave() local_unnamed_addr #1 {
  store atomic i32 0, i32* @_sodium_lock release, align 4
  ret i32 0
}

declare i32 @_sodium_runtime_get_cpu_features() local_unnamed_addr #2

declare void @randombytes_stir() local_unnamed_addr #2

declare i32 @_sodium_alloc_init() local_unnamed_addr #2

declare i32 @_crypto_pwhash_argon2_pick_best_implementation() local_unnamed_addr #2

declare i32 @_crypto_generichash_blake2b_pick_best_implementation() local_unnamed_addr #2

declare i32 @_crypto_onetimeauth_poly1305_pick_best_implementation() local_unnamed_addr #2

declare i32 @_crypto_scalarmult_curve25519_pick_best_implementation() local_unnamed_addr #2

declare i32 @_crypto_stream_chacha20_pick_best_implementation() local_unnamed_addr #2

declare i32 @_crypto_stream_salsa20_pick_best_implementation() local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #3

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #4

declare i32 @nanosleep(%struct.timespec* %0, %struct.timespec* %1) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #3

; Function Attrs: noreturn nounwind
define void @sodium_misuse() local_unnamed_addr #5 {
  %1 = alloca %struct.timespec, align 8
  store atomic i32 0, i32* @_sodium_lock release, align 4
  %2 = bitcast %struct.timespec* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %2) #7
  call void @llvm.memset.p0i8.i32(i8* nonnull align 8 dereferenceable(16) %2, i8 0, i32 16, i1 false) #7
  %3 = atomicrmw xchg i32* @_sodium_lock, i32 1 seq_cst
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %9, label %5

5:                                                ; preds = %0, %5
  %6 = call i32 @nanosleep(%struct.timespec* nonnull %1, %struct.timespec* null) #7
  %7 = atomicrmw xchg i32* @_sodium_lock, i32 1 seq_cst
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %5

9:                                                ; preds = %5, %0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %2) #7
  %10 = load void ()*, void ()** @_misuse_handler, align 4
  %11 = icmp eq void ()* %10, null
  br i1 %11, label %13, label %12

12:                                               ; preds = %9
  call void %10() #7
  br label %13

13:                                               ; preds = %9, %12
  call void @abort() #8
  unreachable
}

; Function Attrs: noreturn
declare void @abort() local_unnamed_addr #6

; Function Attrs: nounwind
define i32 @sodium_set_misuse_handler(void ()* %0) local_unnamed_addr #0 {
  %2 = alloca %struct.timespec, align 8
  %3 = bitcast %struct.timespec* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %3) #7
  call void @llvm.memset.p0i8.i32(i8* nonnull align 8 dereferenceable(16) %3, i8 0, i32 16, i1 false) #7
  %4 = atomicrmw xchg i32* @_sodium_lock, i32 1 seq_cst
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %10, label %6

6:                                                ; preds = %1, %6
  %7 = call i32 @nanosleep(%struct.timespec* nonnull %2, %struct.timespec* null) #7
  %8 = atomicrmw xchg i32* @_sodium_lock, i32 1 seq_cst
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %6

10:                                               ; preds = %6, %1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #7
  store void ()* %0, void ()** @_misuse_handler, align 4
  store atomic i32 0, i32* @_sodium_lock release, align 4
  ret i32 0
}

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { argmemonly nounwind willreturn writeonly }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %3 = atomicrmw xchg i32* @_sodium_lock, i32 1 seq_cst
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = icmp eq i32 %3, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = atomicrmw xchg i32* @_sodium_lock, i32 1 seq_cst
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = icmp eq i32 %7, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for sodium_crit_enter()

