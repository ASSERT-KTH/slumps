; entering Souper's runOnFunction() for crypto_auth_hmacsha512256_verify()

; ModuleID = './auth_hmacsha512256.c.bc'
source_filename = "crypto_auth/hmacsha512256/auth_hmacsha512256.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.crypto_auth_hmacsha512_state = type { %struct.crypto_hash_sha512_state, %struct.crypto_hash_sha512_state }
%struct.crypto_hash_sha512_state = type { [8 x i64], [2 x i64], [128 x i8] }

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_auth_hmacsha512256_bytes() local_unnamed_addr #0 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_auth_hmacsha512256_keybytes() local_unnamed_addr #0 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_auth_hmacsha512256_statebytes() local_unnamed_addr #0 {
  ret i32 416
}

; Function Attrs: nounwind
define void @crypto_auth_hmacsha512256_keygen(i8* nonnull %0) local_unnamed_addr #1 {
  tail call void @randombytes_buf(i8* nonnull %0, i32 32) #4
  ret void
}

declare void @randombytes_buf(i8* %0, i32 %1) local_unnamed_addr #2

; Function Attrs: nounwind
define i32 @crypto_auth_hmacsha512256_init(%struct.crypto_auth_hmacsha512_state* nonnull %0, i8* nonnull %1, i32 %2) local_unnamed_addr #1 {
  %4 = tail call i32 @crypto_auth_hmacsha512_init(%struct.crypto_auth_hmacsha512_state* nonnull %0, i8* nonnull %1, i32 %2) #4
  ret i32 %4
}

declare i32 @crypto_auth_hmacsha512_init(%struct.crypto_auth_hmacsha512_state* %0, i8* %1, i32 %2) local_unnamed_addr #2

; Function Attrs: nounwind
define i32 @crypto_auth_hmacsha512256_update(%struct.crypto_auth_hmacsha512_state* nonnull %0, i8* %1, i64 %2) local_unnamed_addr #1 {
  %4 = tail call i32 @crypto_auth_hmacsha512_update(%struct.crypto_auth_hmacsha512_state* nonnull %0, i8* %1, i64 %2) #4
  ret i32 %4
}

declare i32 @crypto_auth_hmacsha512_update(%struct.crypto_auth_hmacsha512_state* %0, i8* %1, i64 %2) local_unnamed_addr #2

; Function Attrs: nounwind
define i32 @crypto_auth_hmacsha512256_final(%struct.crypto_auth_hmacsha512_state* nonnull %0, i8* nocapture nonnull %1) local_unnamed_addr #1 {
  %3 = alloca [64 x i8], align 16
  %4 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %4) #4
  %5 = call i32 @crypto_auth_hmacsha512_final(%struct.crypto_auth_hmacsha512_state* nonnull %0, i8* nonnull %4) #4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 1 dereferenceable(32) %1, i8* nonnull align 16 dereferenceable(32) %4, i32 32, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %4) #4
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #3

declare i32 @crypto_auth_hmacsha512_final(%struct.crypto_auth_hmacsha512_state* %0, i8* %1) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #3

; Function Attrs: nounwind
define i32 @crypto_auth_hmacsha512256(i8* nocapture nonnull %0, i8* %1, i64 %2, i8* nonnull %3) local_unnamed_addr #1 {
  %5 = alloca [64 x i8], align 16
  %6 = alloca %struct.crypto_auth_hmacsha512_state, align 8
  %7 = bitcast %struct.crypto_auth_hmacsha512_state* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %7) #4
  %8 = call i32 @crypto_auth_hmacsha512_init(%struct.crypto_auth_hmacsha512_state* nonnull %6, i8* nonnull %3, i32 32) #4
  %9 = call i32 @crypto_auth_hmacsha512_update(%struct.crypto_auth_hmacsha512_state* nonnull %6, i8* %1, i64 %2) #4
  %10 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %10) #4
  %11 = call i32 @crypto_auth_hmacsha512_final(%struct.crypto_auth_hmacsha512_state* nonnull %6, i8* nonnull %10) #4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 1 dereferenceable(32) %0, i8* nonnull align 16 dereferenceable(32) %10, i32 32, i1 false) #4
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %10) #4
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %7) #4
  ret i32 0
}

; Function Attrs: nounwind
define i32 @crypto_auth_hmacsha512256_verify(i8* nonnull %0, i8* %1, i64 %2, i8* nonnull %3) local_unnamed_addr #1 {
  %5 = alloca [64 x i8], align 16
  %6 = alloca %struct.crypto_auth_hmacsha512_state, align 8
  %7 = alloca [32 x i8], align 16
  %8 = getelementptr inbounds [32 x i8], [32 x i8]* %7, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %8) #4
  %9 = bitcast %struct.crypto_auth_hmacsha512_state* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %9) #4
  %10 = call i32 @crypto_auth_hmacsha512_init(%struct.crypto_auth_hmacsha512_state* nonnull %6, i8* nonnull %3, i32 32) #4
  %11 = call i32 @crypto_auth_hmacsha512_update(%struct.crypto_auth_hmacsha512_state* nonnull %6, i8* %1, i64 %2) #4
  %12 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %12) #4
  %13 = call i32 @crypto_auth_hmacsha512_final(%struct.crypto_auth_hmacsha512_state* nonnull %6, i8* nonnull %12) #4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 16 dereferenceable(32) %8, i8* nonnull align 16 dereferenceable(32) %12, i32 32, i1 false) #4
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %12) #4
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %9) #4
  %14 = call i32 @crypto_verify_32(i8* nonnull %0, i8* nonnull %8) #4
  %15 = icmp eq i8* %8, %0
  %16 = select i1 %15, i32 -1, i32 %14
  %17 = call i32 @sodium_memcmp(i8* nonnull %8, i8* nonnull %0, i32 32) #4
  %18 = or i32 %16, %17
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %8) #4
  ret i32 %18
}

declare i32 @crypto_verify_32(i8* %0, i8* %1) local_unnamed_addr #2

declare i32 @sodium_memcmp(i8* %0, i8* %1, i32 %2) local_unnamed_addr #2

attributes #0 = { norecurse nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %14 = call i32 @crypto_verify_32(i8* nonnull %0, i8* nonnull %8) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = icmp eq i8* %8, %0
; Looking for a replacement for:
%0:i32 = var (knownBits=xxxxxxxxxxxxxxxxxxxxxxxxxxxx0000) (nonZero)
%1:i32 = var (nonZero)
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %16 = select i1 %15, i32 -1, i32 %14
; Looking for a replacement for:
%0:i32 = var (knownBits=xxxxxxxxxxxxxxxxxxxxxxxxxxxx0000) (nonZero)
%1:i32 = var (nonZero)
%2:i1 = eq %0, %1
%3:i32 = var
%4:i32 = select %2, 4294967295:i32, %3
infer %4

; *****
; For LLVM instruction:
;  %17 = call i32 @sodium_memcmp(i8* nonnull %8, i8* nonnull %0, i32 32) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = or i32 %16, %17
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=xxxxxxxxxxxxxxxxxxxxxxxxxxxx0000) (nonZero)
%2:i32 = var (nonZero)
%3:i1 = eq %1, %2
%4:i32 = var
%5:i32 = select %3, 4294967295:i32, %4
%6:i32 = or %0, %5
infer %6
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var (knownBits=xxxxxxxxxxxxxxxxxxxxxxxxxxxx0000) (nonZero)
%1:i32 = var (nonZero)
%2:i1 = eq %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var (knownBits=xxxxxxxxxxxxxxxxxxxxxxxxxxxx0000) (nonZero)
%1:i32 = var (nonZero)
%2:i1 = eq %0, %1
%3:i32 = var
%4:i32 = select %2, 4294967295:i32, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var (nonZero)

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var (knownBits=xxxxxxxxxxxxxxxxxxxxxxxxxxxx0000) (nonZero)

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 7 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var (knownBits=xxxxxxxxxxxxxxxxxxxxxxxxxxxx0000) (nonZero)
%2:i32 = var (nonZero)
%3:i1 = eq %1, %2
%4:i32 = var
%5:i32 = select %3, 4294967295:i32, %4
%6:i32 = or %0, %5
infer %6


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var (nonZero)

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var (knownBits=xxxxxxxxxxxxxxxxxxxxxxxxxxxx0000) (nonZero)

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var (knownBits=xxxxxxxxxxxxxxxxxxxxxxxxxxxx0000) (nonZero)
%1:i32 = var (nonZero)
%2:i1 = eq %0, %1
%3:i32 = var
%4:i32 = select %2, 4294967295:i32, %3

Cost = 4
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 6 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for crypto_auth_hmacsha512256_verify()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
