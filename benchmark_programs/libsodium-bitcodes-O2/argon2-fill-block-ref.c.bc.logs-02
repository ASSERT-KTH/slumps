; entering Souper's runOnFunction() for ./argon2-fill-block-ref.c.bc:fill_block_with_xor()

; ModuleID = './argon2-fill-block-ref.c.bc'
source_filename = "crypto_pwhash/argon2/argon2-fill-block-ref.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.Argon2_instance_t = type { %struct.block_region_*, i64*, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.block_region_ = type { i8*, %struct.block_*, i32 }
%struct.block_ = type { [128 x i64] }
%struct.Argon2_position_t = type { i32, i32, i8, i32 }

; Function Attrs: nounwind
define hidden void @argon2_fill_segment_ref(%struct.Argon2_instance_t* readonly %0, %struct.Argon2_position_t* nocapture byval(%struct.Argon2_position_t) align 4 %1) local_unnamed_addr #0 {
  %3 = alloca %struct.block_, align 8
  %4 = alloca [128 x i64], align 8
  %5 = alloca %struct.block_, align 8
  %6 = alloca %struct.block_, align 8
  %7 = alloca %struct.block_, align 8
  %8 = alloca %struct.block_, align 8
  %9 = icmp eq %struct.Argon2_instance_t* %0, null
  br i1 %9, label %965, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.Argon2_instance_t, %struct.Argon2_instance_t* %0, i32 0, i32 9
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 2
  %14 = getelementptr inbounds %struct.Argon2_position_t, %struct.Argon2_position_t* %1, i32 0, i32 0
  %15 = load i32, i32* %14, align 4
  br i1 %13, label %19, label %16

16:                                               ; preds = %10
  %17 = getelementptr inbounds %struct.Argon2_position_t, %struct.Argon2_position_t* %1, i32 0, i32 2
  %18 = load i8, i8* %17, align 4
  br label %32

19:                                               ; preds = %10
  %20 = icmp ne i32 %15, 0
  %21 = getelementptr inbounds %struct.Argon2_position_t, %struct.Argon2_position_t* %1, i32 0, i32 2
  %22 = load i8, i8* %21, align 4
  %23 = icmp ugt i8 %22, 1
  %24 = or i1 %20, %23
  br i1 %24, label %25, label %32

25:                                               ; preds = %19
  %26 = getelementptr inbounds %struct.Argon2_instance_t, %struct.Argon2_instance_t* %0, i32 0, i32 1
  %27 = load i64*, i64** %26, align 4
  %28 = getelementptr inbounds %struct.Argon2_position_t, %struct.Argon2_position_t* %1, i32 0, i32 1
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %struct.Argon2_instance_t, %struct.Argon2_instance_t* %0, i32 0, i32 5
  %31 = load i32, i32* %30, align 4
  br label %83

32:                                               ; preds = %19, %16
  %33 = phi i8 [ %18, %16 ], [ %22, %19 ]
  %34 = phi i32 [ %15, %16 ], [ 0, %19 ]
  %35 = getelementptr inbounds %struct.Argon2_instance_t, %struct.Argon2_instance_t* %0, i32 0, i32 1
  %36 = load i64*, i64** %35, align 4
  %37 = bitcast %struct.block_* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %37) #3
  %38 = bitcast %struct.block_* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %38) #3
  %39 = bitcast %struct.block_* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %39) #3
  %40 = bitcast %struct.block_* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %40) #3
  call void @llvm.memset.p0i8.i32(i8* nonnull align 8 dereferenceable(1024) %37, i8 0, i32 1024, i1 false) #3
  %41 = getelementptr inbounds %struct.block_, %struct.block_* %6, i32 0, i32 0, i32 6
  %42 = bitcast i64* %41 to i8*
  call void @llvm.memset.p0i8.i32(i8* nonnull align 8 dereferenceable(1024) %42, i8 0, i32 976, i1 false) #3
  %43 = zext i32 %34 to i64
  %44 = getelementptr inbounds %struct.block_, %struct.block_* %6, i32 0, i32 0, i32 0
  store i64 %43, i64* %44, align 8
  %45 = getelementptr inbounds %struct.Argon2_position_t, %struct.Argon2_position_t* %1, i32 0, i32 1
  %46 = load i32, i32* %45, align 4
  %47 = zext i32 %46 to i64
  %48 = getelementptr inbounds %struct.block_, %struct.block_* %6, i32 0, i32 0, i32 1
  store i64 %47, i64* %48, align 8
  %49 = zext i8 %33 to i64
  %50 = getelementptr inbounds %struct.block_, %struct.block_* %6, i32 0, i32 0, i32 2
  store i64 %49, i64* %50, align 8
  %51 = getelementptr inbounds %struct.Argon2_instance_t, %struct.Argon2_instance_t* %0, i32 0, i32 4
  %52 = load i32, i32* %51, align 4
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds %struct.block_, %struct.block_* %6, i32 0, i32 0, i32 3
  store i64 %53, i64* %54, align 8
  %55 = getelementptr inbounds %struct.Argon2_instance_t, %struct.Argon2_instance_t* %0, i32 0, i32 2
  %56 = load i32, i32* %55, align 4
  %57 = zext i32 %56 to i64
  %58 = getelementptr inbounds %struct.block_, %struct.block_* %6, i32 0, i32 0, i32 4
  store i64 %57, i64* %58, align 8
  %59 = zext i32 %12 to i64
  %60 = getelementptr inbounds %struct.block_, %struct.block_* %6, i32 0, i32 0, i32 5
  store i64 %59, i64* %60, align 8
  %61 = getelementptr inbounds %struct.Argon2_instance_t, %struct.Argon2_instance_t* %0, i32 0, i32 5
  %62 = load i32, i32* %61, align 4
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %81, label %64

64:                                               ; preds = %32
  %65 = getelementptr inbounds %struct.block_, %struct.block_* %6, i32 0, i32 0, i32 6
  br label %66

66:                                               ; preds = %73, %64
  %67 = phi i64 [ 0, %64 ], [ %74, %73 ]
  %68 = phi i32 [ 0, %64 ], [ %78, %73 ]
  %69 = and i32 %68, 127
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %71, label %73

71:                                               ; preds = %66
  %72 = add i64 %67, 1
  store i64 %72, i64* %65, align 8
  call void @llvm.memset.p0i8.i32(i8* nonnull align 8 dereferenceable(1024) %40, i8 0, i32 1024, i1 false) #3
  call void @llvm.memset.p0i8.i32(i8* nonnull align 8 dereferenceable(1024) %39, i8 0, i32 1024, i1 false) #3
  call fastcc void @fill_block_with_xor(%struct.block_* nonnull %5, %struct.block_* nonnull %6, %struct.block_* nonnull %8) #3
  call fastcc void @fill_block_with_xor(%struct.block_* nonnull %5, %struct.block_* nonnull %8, %struct.block_* nonnull %7) #3
  br label %73

73:                                               ; preds = %71, %66
  %74 = phi i64 [ %72, %71 ], [ %67, %66 ]
  %75 = getelementptr %struct.block_, %struct.block_* %7, i32 0, i32 0, i32 %69
  %76 = load i64, i64* %75, align 8
  %77 = getelementptr i64, i64* %36, i32 %68
  store i64 %76, i64* %77, align 8
  %78 = add nuw i32 %68, 1
  %79 = load i32, i32* %61, align 4
  %80 = icmp ult i32 %78, %79
  br i1 %80, label %66, label %81

81:                                               ; preds = %73, %32
  %82 = phi i32 [ 0, %32 ], [ %79, %73 ]
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %40) #3
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %39) #3
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %38) #3
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %37) #3
  br label %83

83:                                               ; preds = %25, %81
  %84 = phi i32 [ %82, %81 ], [ %31, %25 ]
  %85 = phi i32 [ %46, %81 ], [ %29, %25 ]
  %86 = phi i8 [ %33, %81 ], [ %22, %25 ]
  %87 = phi i32 [ %34, %81 ], [ %15, %25 ]
  %88 = phi i64* [ %36, %81 ], [ %27, %25 ]
  %89 = phi i1 [ true, %81 ], [ false, %25 ]
  %90 = getelementptr inbounds %struct.Argon2_position_t, %struct.Argon2_position_t* %1, i32 0, i32 0
  %91 = icmp eq i32 %87, 0
  %92 = getelementptr inbounds %struct.Argon2_position_t, %struct.Argon2_position_t* %1, i32 0, i32 2
  %93 = icmp eq i8 %86, 0
  %94 = and i1 %91, %93
  %95 = select i1 %94, i32 2, i32 0
  %96 = getelementptr inbounds %struct.Argon2_position_t, %struct.Argon2_position_t* %1, i32 0, i32 1
  %97 = getelementptr inbounds %struct.Argon2_instance_t, %struct.Argon2_instance_t* %0, i32 0, i32 6
  %98 = load i32, i32* %97, align 4
  %99 = mul i32 %98, %85
  %100 = zext i8 %86 to i32
  %101 = getelementptr inbounds %struct.Argon2_instance_t, %struct.Argon2_instance_t* %0, i32 0, i32 5
  %102 = mul i32 %84, %100
  %103 = add i32 %95, %99
  %104 = add i32 %103, %102
  %105 = icmp ult i32 %95, %84
  br i1 %105, label %106, label %965

106:                                              ; preds = %83
  %107 = urem i32 %104, %98
  %108 = icmp eq i32 %107, 0
  %109 = add i32 %98, -1
  %110 = select i1 %108, i32 %109, i32 -1
  %111 = add i32 %110, %104
  %112 = getelementptr inbounds %struct.Argon2_instance_t, %struct.Argon2_instance_t* %0, i32 0, i32 0
  %113 = getelementptr inbounds %struct.Argon2_instance_t, %struct.Argon2_instance_t* %0, i32 0, i32 7
  %114 = getelementptr inbounds %struct.Argon2_position_t, %struct.Argon2_position_t* %1, i32 0, i32 3
  %115 = bitcast %struct.block_* %3 to i8*
  %116 = bitcast [128 x i64]* %4 to i8*
  br label %117

117:                                              ; preds = %961, %106
  %118 = phi i32 [ %98, %106 ], [ %964, %961 ]
  %119 = phi i32 [ %84, %106 ], [ %959, %961 ]
  %120 = phi i32 [ %95, %106 ], [ %958, %961 ]
  %121 = phi i32 [ %104, %106 ], [ %963, %961 ]
  %122 = phi i32 [ %111, %106 ], [ %962, %961 ]
  %123 = urem i32 %121, %118
  %124 = icmp eq i32 %123, 1
  %125 = add i32 %121, -1
  %126 = select i1 %124, i32 %125, i32 %122
  br i1 %89, label %127, label %129

127:                                              ; preds = %117
  %128 = getelementptr i64, i64* %88, i32 %120
  br label %134

129:                                              ; preds = %117
  %130 = load %struct.block_region_*, %struct.block_region_** %112, align 4
  %131 = getelementptr inbounds %struct.block_region_, %struct.block_region_* %130, i32 0, i32 1
  %132 = load %struct.block_*, %struct.block_** %131, align 4
  %133 = getelementptr %struct.block_, %struct.block_* %132, i32 %126, i32 0, i32 0
  br label %134

134:                                              ; preds = %129, %127
  %135 = phi i64* [ %128, %127 ], [ %133, %129 ]
  %136 = load i64, i64* %135, align 8
  %137 = lshr i64 %136, 32
  %138 = load i32, i32* %113, align 4
  %139 = trunc i64 %137 to i32
  %140 = urem i32 %139, %138
  %141 = zext i32 %140 to i64
  %142 = load i32, i32* %90, align 4
  %143 = icmp eq i32 %142, 0
  %144 = load i8, i8* %92, align 4
  %145 = icmp eq i8 %144, 0
  %146 = and i1 %143, %145
  %147 = load i32, i32* %96, align 4
  %148 = zext i32 %147 to i64
  %149 = select i1 %146, i64 %148, i64 %141
  store i32 %120, i32* %114, align 4
  %150 = icmp eq i64 %149, %148
  br i1 %143, label %151, label %164

151:                                              ; preds = %134
  br i1 %145, label %152, label %154

152:                                              ; preds = %151
  %153 = add i32 %120, -1
  br label %173

154:                                              ; preds = %151
  %155 = zext i8 %144 to i32
  %156 = mul i32 %119, %155
  br i1 %150, label %157, label %160

157:                                              ; preds = %154
  %158 = add i32 %120, -1
  %159 = add i32 %158, %156
  br label %173

160:                                              ; preds = %154
  %161 = icmp eq i32 %120, 0
  %162 = sext i1 %161 to i32
  %163 = add i32 %156, %162
  br label %173

164:                                              ; preds = %134
  %165 = sub i32 %118, %119
  br i1 %150, label %166, label %169

166:                                              ; preds = %164
  %167 = add i32 %120, -1
  %168 = add i32 %167, %165
  br label %173

169:                                              ; preds = %164
  %170 = icmp eq i32 %120, 0
  %171 = sext i1 %170 to i32
  %172 = add i32 %165, %171
  br label %173

173:                                              ; preds = %169, %166, %160, %157, %152
  %174 = phi i32 [ %153, %152 ], [ %159, %157 ], [ %163, %160 ], [ %168, %166 ], [ %172, %169 ]
  %175 = and i64 %136, 4294967295
  %176 = mul nuw i64 %175, %175
  %177 = lshr i64 %176, 32
  %178 = add i32 %174, -1
  %179 = zext i32 %178 to i64
  %180 = zext i32 %174 to i64
  %181 = mul nuw i64 %177, %180
  %182 = lshr i64 %181, 32
  %183 = icmp eq i8 %144, 3
  %184 = or i1 %143, %183
  %185 = zext i8 %144 to i32
  %186 = add nuw nsw i32 %185, 1
  %187 = mul i32 %186, %119
  %188 = zext i32 %187 to i64
  %189 = select i1 %184, i64 0, i64 %188
  %190 = add nuw nsw i64 %189, %179
  %191 = sub nsw i64 %190, %182
  %192 = zext i32 %118 to i64
  %193 = urem i64 %191, %192
  %194 = trunc i64 %193 to i32
  %195 = load %struct.block_region_*, %struct.block_region_** %112, align 4
  %196 = getelementptr inbounds %struct.block_region_, %struct.block_region_* %195, i32 0, i32 1
  %197 = load %struct.block_*, %struct.block_** %196, align 4
  %198 = trunc i64 %149 to i32
  %199 = mul i32 %118, %198
  %200 = getelementptr %struct.block_, %struct.block_* %197, i32 %199
  %201 = getelementptr %struct.block_, %struct.block_* %200, i32 %194
  %202 = getelementptr %struct.block_, %struct.block_* %197, i32 %121
  br i1 %143, label %205, label %203

203:                                              ; preds = %173
  %204 = getelementptr %struct.block_, %struct.block_* %197, i32 %126
  tail call fastcc void @fill_block_with_xor(%struct.block_* %204, %struct.block_* %201, %struct.block_* %202)
  br label %957

205:                                              ; preds = %173
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %115) #3
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %116)
  %206 = bitcast %struct.block_* %201 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 8 dereferenceable(1024) %115, i8* nonnull align 8 dereferenceable(1024) %206, i32 1024, i1 false) #3
  br label %207

207:                                              ; preds = %207, %205
  %208 = phi i32 [ 0, %205 ], [ %214, %207 ]
  %209 = getelementptr %struct.block_, %struct.block_* %197, i32 %126, i32 0, i32 %208
  %210 = load i64, i64* %209, align 8
  %211 = getelementptr %struct.block_, %struct.block_* %3, i32 0, i32 0, i32 %208
  %212 = load i64, i64* %211, align 8
  %213 = xor i64 %212, %210
  store i64 %213, i64* %211, align 8
  %214 = add nuw nsw i32 %208, 1
  %215 = icmp eq i32 %214, 128
  br i1 %215, label %216, label %207

216:                                              ; preds = %207
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 8 dereferenceable(1024) %116, i8* nonnull align 8 dereferenceable(1024) %115, i32 1024, i1 false) #3
  br label %217

217:                                              ; preds = %217, %216
  %218 = phi i32 [ 0, %216 ], [ %579, %217 ]
  %219 = shl nuw nsw i32 %218, 4
  %220 = getelementptr %struct.block_, %struct.block_* %3, i32 0, i32 0, i32 %219
  %221 = load i64, i64* %220, align 8
  %222 = or i32 %219, 4
  %223 = getelementptr %struct.block_, %struct.block_* %3, i32 0, i32 0, i32 %222
  %224 = load i64, i64* %223, align 8
  %225 = and i64 %224, 4294967295
  %226 = add i64 %224, %221
  %227 = shl i64 %221, 1
  %228 = and i64 %227, 8589934590
  %229 = mul i64 %228, %225
  %230 = add i64 %226, %229
  %231 = or i32 %219, 12
  %232 = getelementptr %struct.block_, %struct.block_* %3, i32 0, i32 0, i32 %231
  %233 = load i64, i64* %232, align 8
  %234 = xor i64 %230, %233
  %235 = lshr i64 %234, 32
  %236 = shl i64 %234, 32
  %237 = or i64 %236, %235
  %238 = or i32 %219, 8
  %239 = getelementptr %struct.block_, %struct.block_* %3, i32 0, i32 0, i32 %238
  %240 = load i64, i64* %239, align 8
  %241 = add i64 %237, %240
  %242 = shl i64 %240, 1
  %243 = and i64 %242, 8589934590
  %244 = mul i64 %235, %243
  %245 = add i64 %241, %244
  %246 = xor i64 %245, %224
  %247 = lshr i64 %246, 24
  %248 = shl i64 %246, 40
  %249 = or i64 %248, %247
  %250 = and i64 %247, 4294967295
  %251 = add i64 %249, %230
  %252 = shl i64 %230, 1
  %253 = and i64 %252, 8589934590
  %254 = mul i64 %250, %253
  %255 = add i64 %251, %254
  store i64 %255, i64* %220, align 8
  %256 = xor i64 %255, %237
  %257 = lshr i64 %256, 16
  %258 = shl i64 %256, 48
  %259 = or i64 %258, %257
  store i64 %259, i64* %232, align 8
  %260 = and i64 %257, 4294967295
  %261 = add i64 %259, %245
  %262 = shl i64 %245, 1
  %263 = and i64 %262, 8589934590
  %264 = mul i64 %260, %263
  %265 = add i64 %261, %264
  store i64 %265, i64* %239, align 8
  %266 = xor i64 %265, %249
  %267 = lshr i64 %266, 63
  %268 = shl i64 %266, 1
  %269 = or i64 %268, %267
  store i64 %269, i64* %223, align 8
  %270 = or i32 %219, 1
  %271 = getelementptr %struct.block_, %struct.block_* %3, i32 0, i32 0, i32 %270
  %272 = load i64, i64* %271, align 8
  %273 = or i32 %219, 5
  %274 = getelementptr %struct.block_, %struct.block_* %3, i32 0, i32 0, i32 %273
  %275 = load i64, i64* %274, align 8
  %276 = and i64 %275, 4294967295
  %277 = add i64 %275, %272
  %278 = shl i64 %272, 1
  %279 = and i64 %278, 8589934590
  %280 = mul i64 %279, %276
  %281 = add i64 %277, %280
  %282 = or i32 %219, 13
  %283 = getelementptr %struct.block_, %struct.block_* %3, i32 0, i32 0, i32 %282
  %284 = load i64, i64* %283, align 8
  %285 = xor i64 %281, %284
  %286 = lshr i64 %285, 32
  %287 = shl i64 %285, 32
  %288 = or i64 %287, %286
  %289 = or i32 %219, 9
  %290 = getelementptr %struct.block_, %struct.block_* %3, i32 0, i32 0, i32 %289
  %291 = load i64, i64* %290, align 8
  %292 = add i64 %288, %291
  %293 = shl i64 %291, 1
  %294 = and i64 %293, 8589934590
  %295 = mul i64 %286, %294
  %296 = add i64 %292, %295
  %297 = xor i64 %296, %275
  %298 = lshr i64 %297, 24
  %299 = shl i64 %297, 40
  %300 = or i64 %299, %298
  %301 = and i64 %298, 4294967295
  %302 = add i64 %300, %281
  %303 = shl i64 %281, 1
  %304 = and i64 %303, 8589934590
  %305 = mul i64 %301, %304
  %306 = add i64 %302, %305
  store i64 %306, i64* %271, align 8
  %307 = xor i64 %306, %288
  %308 = lshr i64 %307, 16
  %309 = shl i64 %307, 48
  %310 = or i64 %309, %308
  store i64 %310, i64* %283, align 8
  %311 = and i64 %308, 4294967295
  %312 = add i64 %310, %296
  %313 = shl i64 %296, 1
  %314 = and i64 %313, 8589934590
  %315 = mul i64 %311, %314
  %316 = add i64 %312, %315
  store i64 %316, i64* %290, align 8
  %317 = xor i64 %316, %300
  %318 = lshr i64 %317, 63
  %319 = shl i64 %317, 1
  %320 = or i64 %319, %318
  store i64 %320, i64* %274, align 8
  %321 = or i32 %219, 2
  %322 = getelementptr %struct.block_, %struct.block_* %3, i32 0, i32 0, i32 %321
  %323 = load i64, i64* %322, align 8
  %324 = or i32 %219, 6
  %325 = getelementptr %struct.block_, %struct.block_* %3, i32 0, i32 0, i32 %324
  %326 = load i64, i64* %325, align 8
  %327 = and i64 %326, 4294967295
  %328 = add i64 %326, %323
  %329 = shl i64 %323, 1
  %330 = and i64 %329, 8589934590
  %331 = mul i64 %330, %327
  %332 = add i64 %328, %331
  %333 = or i32 %219, 14
  %334 = getelementptr %struct.block_, %struct.block_* %3, i32 0, i32 0, i32 %333
  %335 = load i64, i64* %334, align 8
  %336 = xor i64 %332, %335
  %337 = lshr i64 %336, 32
  %338 = shl i64 %336, 32
  %339 = or i64 %338, %337
  %340 = or i32 %219, 10
  %341 = getelementptr %struct.block_, %struct.block_* %3, i32 0, i32 0, i32 %340
  %342 = load i64, i64* %341, align 8
  %343 = add i64 %339, %342
  %344 = shl i64 %342, 1
  %345 = and i64 %344, 8589934590
  %346 = mul i64 %337, %345
  %347 = add i64 %343, %346
  %348 = xor i64 %347, %326
  %349 = lshr i64 %348, 24
  %350 = shl i64 %348, 40
  %351 = or i64 %350, %349
  %352 = and i64 %349, 4294967295
  %353 = add i64 %351, %332
  %354 = shl i64 %332, 1
  %355 = and i64 %354, 8589934590
  %356 = mul i64 %352, %355
  %357 = add i64 %353, %356
  store i64 %357, i64* %322, align 8
  %358 = xor i64 %357, %339
  %359 = lshr i64 %358, 16
  %360 = shl i64 %358, 48
  %361 = or i64 %360, %359
  store i64 %361, i64* %334, align 8
  %362 = and i64 %359, 4294967295
  %363 = add i64 %361, %347
  %364 = shl i64 %347, 1
  %365 = and i64 %364, 8589934590
  %366 = mul i64 %362, %365
  %367 = add i64 %363, %366
  %368 = xor i64 %367, %351
  %369 = lshr i64 %368, 63
  %370 = shl i64 %368, 1
  %371 = or i64 %370, %369
  store i64 %371, i64* %325, align 8
  %372 = or i32 %219, 3
  %373 = getelementptr %struct.block_, %struct.block_* %3, i32 0, i32 0, i32 %372
  %374 = load i64, i64* %373, align 8
  %375 = or i32 %219, 7
  %376 = getelementptr %struct.block_, %struct.block_* %3, i32 0, i32 0, i32 %375
  %377 = load i64, i64* %376, align 8
  %378 = and i64 %377, 4294967295
  %379 = add i64 %377, %374
  %380 = shl i64 %374, 1
  %381 = and i64 %380, 8589934590
  %382 = mul i64 %381, %378
  %383 = add i64 %379, %382
  %384 = or i32 %219, 15
  %385 = getelementptr %struct.block_, %struct.block_* %3, i32 0, i32 0, i32 %384
  %386 = load i64, i64* %385, align 8
  %387 = xor i64 %383, %386
  %388 = lshr i64 %387, 32
  %389 = shl i64 %387, 32
  %390 = or i64 %389, %388
  %391 = or i32 %219, 11
  %392 = getelementptr %struct.block_, %struct.block_* %3, i32 0, i32 0, i32 %391
  %393 = load i64, i64* %392, align 8
  %394 = add i64 %390, %393
  %395 = shl i64 %393, 1
  %396 = and i64 %395, 8589934590
  %397 = mul i64 %388, %396
  %398 = add i64 %394, %397
  %399 = xor i64 %398, %377
  %400 = lshr i64 %399, 24
  %401 = shl i64 %399, 40
  %402 = or i64 %401, %400
  %403 = and i64 %400, 4294967295
  %404 = add i64 %402, %383
  %405 = shl i64 %383, 1
  %406 = and i64 %405, 8589934590
  %407 = mul i64 %403, %406
  %408 = add i64 %404, %407
  store i64 %408, i64* %373, align 8
  %409 = xor i64 %408, %390
  %410 = lshr i64 %409, 16
  %411 = shl i64 %409, 48
  %412 = or i64 %411, %410
  %413 = and i64 %410, 4294967295
  %414 = add i64 %412, %398
  %415 = shl i64 %398, 1
  %416 = and i64 %415, 8589934590
  %417 = mul i64 %413, %416
  %418 = add i64 %414, %417
  %419 = xor i64 %418, %402
  %420 = lshr i64 %419, 63
  %421 = shl i64 %419, 1
  %422 = or i64 %421, %420
  store i64 %422, i64* %376, align 8
  %423 = and i64 %320, 4294967295
  %424 = add i64 %320, %255
  %425 = shl i64 %255, 1
  %426 = and i64 %425, 8589934590
  %427 = mul i64 %423, %426
  %428 = add i64 %424, %427
  %429 = xor i64 %412, %428
  %430 = lshr i64 %429, 32
  %431 = shl i64 %429, 32
  %432 = or i64 %431, %430
  %433 = add i64 %432, %367
  %434 = shl i64 %367, 1
  %435 = and i64 %434, 8589934590
  %436 = mul i64 %430, %435
  %437 = add i64 %433, %436
  %438 = xor i64 %437, %320
  %439 = lshr i64 %438, 24
  %440 = shl i64 %438, 40
  %441 = or i64 %440, %439
  %442 = and i64 %439, 4294967295
  %443 = add i64 %441, %428
  %444 = shl i64 %428, 1
  %445 = and i64 %444, 8589934590
  %446 = mul i64 %442, %445
  %447 = add i64 %443, %446
  store i64 %447, i64* %220, align 8
  %448 = xor i64 %447, %432
  %449 = lshr i64 %448, 16
  %450 = shl i64 %448, 48
  %451 = or i64 %450, %449
  store i64 %451, i64* %385, align 8
  %452 = and i64 %449, 4294967295
  %453 = add i64 %451, %437
  %454 = shl i64 %437, 1
  %455 = and i64 %454, 8589934590
  %456 = mul i64 %452, %455
  %457 = add i64 %453, %456
  store i64 %457, i64* %341, align 8
  %458 = xor i64 %457, %441
  %459 = lshr i64 %458, 63
  %460 = shl i64 %458, 1
  %461 = or i64 %460, %459
  store i64 %461, i64* %274, align 8
  %462 = and i64 %371, 4294967295
  %463 = add i64 %371, %306
  %464 = shl i64 %306, 1
  %465 = and i64 %464, 8589934590
  %466 = mul i64 %462, %465
  %467 = add i64 %463, %466
  %468 = xor i64 %467, %259
  %469 = lshr i64 %468, 32
  %470 = shl i64 %468, 32
  %471 = or i64 %470, %469
  %472 = add i64 %471, %418
  %473 = shl i64 %418, 1
  %474 = and i64 %473, 8589934590
  %475 = mul i64 %474, %469
  %476 = add i64 %472, %475
  %477 = xor i64 %476, %371
  %478 = lshr i64 %477, 24
  %479 = shl i64 %477, 40
  %480 = or i64 %479, %478
  %481 = and i64 %478, 4294967295
  %482 = add i64 %480, %467
  %483 = shl i64 %467, 1
  %484 = and i64 %483, 8589934590
  %485 = mul i64 %481, %484
  %486 = add i64 %482, %485
  store i64 %486, i64* %271, align 8
  %487 = xor i64 %486, %471
  %488 = lshr i64 %487, 16
  %489 = shl i64 %487, 48
  %490 = or i64 %489, %488
  store i64 %490, i64* %232, align 8
  %491 = and i64 %488, 4294967295
  %492 = add i64 %490, %476
  %493 = shl i64 %476, 1
  %494 = and i64 %493, 8589934590
  %495 = mul i64 %491, %494
  %496 = add i64 %492, %495
  store i64 %496, i64* %392, align 8
  %497 = xor i64 %496, %480
  %498 = lshr i64 %497, 63
  %499 = shl i64 %497, 1
  %500 = or i64 %499, %498
  store i64 %500, i64* %325, align 8
  %501 = and i64 %422, 4294967295
  %502 = add i64 %422, %357
  %503 = shl i64 %357, 1
  %504 = and i64 %503, 8589934590
  %505 = mul i64 %501, %504
  %506 = add i64 %502, %505
  %507 = xor i64 %506, %310
  %508 = lshr i64 %507, 32
  %509 = shl i64 %507, 32
  %510 = or i64 %509, %508
  %511 = add i64 %510, %265
  %512 = shl i64 %265, 1
  %513 = and i64 %512, 8589934590
  %514 = mul i64 %508, %513
  %515 = add i64 %511, %514
  %516 = xor i64 %515, %422
  %517 = lshr i64 %516, 24
  %518 = shl i64 %516, 40
  %519 = or i64 %518, %517
  %520 = and i64 %517, 4294967295
  %521 = add i64 %519, %506
  %522 = shl i64 %506, 1
  %523 = and i64 %522, 8589934590
  %524 = mul i64 %520, %523
  %525 = add i64 %521, %524
  store i64 %525, i64* %322, align 8
  %526 = xor i64 %525, %510
  %527 = lshr i64 %526, 16
  %528 = shl i64 %526, 48
  %529 = or i64 %528, %527
  store i64 %529, i64* %283, align 8
  %530 = and i64 %527, 4294967295
  %531 = add i64 %529, %515
  %532 = shl i64 %515, 1
  %533 = and i64 %532, 8589934590
  %534 = mul i64 %530, %533
  %535 = add i64 %531, %534
  store i64 %535, i64* %239, align 8
  %536 = xor i64 %535, %519
  %537 = lshr i64 %536, 63
  %538 = shl i64 %536, 1
  %539 = or i64 %538, %537
  store i64 %539, i64* %376, align 8
  %540 = and i64 %269, 4294967295
  %541 = add i64 %408, %269
  %542 = shl i64 %408, 1
  %543 = and i64 %542, 8589934590
  %544 = mul i64 %543, %540
  %545 = add i64 %541, %544
  %546 = xor i64 %545, %361
  %547 = lshr i64 %546, 32
  %548 = shl i64 %546, 32
  %549 = or i64 %548, %547
  %550 = add i64 %549, %316
  %551 = shl i64 %316, 1
  %552 = and i64 %551, 8589934590
  %553 = mul i64 %547, %552
  %554 = add i64 %550, %553
  %555 = xor i64 %554, %269
  %556 = lshr i64 %555, 24
  %557 = shl i64 %555, 40
  %558 = or i64 %557, %556
  %559 = and i64 %556, 4294967295
  %560 = add i64 %558, %545
  %561 = shl i64 %545, 1
  %562 = and i64 %561, 8589934590
  %563 = mul i64 %559, %562
  %564 = add i64 %560, %563
  store i64 %564, i64* %373, align 8
  %565 = xor i64 %564, %549
  %566 = lshr i64 %565, 16
  %567 = shl i64 %565, 48
  %568 = or i64 %567, %566
  store i64 %568, i64* %334, align 8
  %569 = and i64 %566, 4294967295
  %570 = add i64 %568, %554
  %571 = shl i64 %554, 1
  %572 = and i64 %571, 8589934590
  %573 = mul i64 %569, %572
  %574 = add i64 %570, %573
  store i64 %574, i64* %290, align 8
  %575 = xor i64 %574, %558
  %576 = lshr i64 %575, 63
  %577 = shl i64 %575, 1
  %578 = or i64 %577, %576
  store i64 %578, i64* %223, align 8
  %579 = add nuw nsw i32 %218, 1
  %580 = icmp eq i32 %579, 8
  br i1 %580, label %581, label %217

581:                                              ; preds = %217, %581
  %582 = phi i32 [ %943, %581 ], [ 0, %217 ]
  %583 = shl nuw nsw i32 %582, 1
  %584 = getelementptr %struct.block_, %struct.block_* %3, i32 0, i32 0, i32 %583
  %585 = load i64, i64* %584, align 8
  %586 = add nuw nsw i32 %583, 32
  %587 = getelementptr %struct.block_, %struct.block_* %3, i32 0, i32 0, i32 %586
  %588 = load i64, i64* %587, align 8
  %589 = and i64 %588, 4294967295
  %590 = add i64 %588, %585
  %591 = shl i64 %585, 1
  %592 = and i64 %591, 8589934590
  %593 = mul i64 %592, %589
  %594 = add i64 %590, %593
  %595 = add nuw nsw i32 %583, 96
  %596 = getelementptr %struct.block_, %struct.block_* %3, i32 0, i32 0, i32 %595
  %597 = load i64, i64* %596, align 8
  %598 = xor i64 %594, %597
  %599 = lshr i64 %598, 32
  %600 = shl i64 %598, 32
  %601 = or i64 %600, %599
  %602 = add nuw nsw i32 %583, 64
  %603 = getelementptr %struct.block_, %struct.block_* %3, i32 0, i32 0, i32 %602
  %604 = load i64, i64* %603, align 8
  %605 = add i64 %601, %604
  %606 = shl i64 %604, 1
  %607 = and i64 %606, 8589934590
  %608 = mul i64 %599, %607
  %609 = add i64 %605, %608
  %610 = xor i64 %609, %588
  %611 = lshr i64 %610, 24
  %612 = shl i64 %610, 40
  %613 = or i64 %612, %611
  %614 = and i64 %611, 4294967295
  %615 = add i64 %613, %594
  %616 = shl i64 %594, 1
  %617 = and i64 %616, 8589934590
  %618 = mul i64 %614, %617
  %619 = add i64 %615, %618
  store i64 %619, i64* %584, align 8
  %620 = xor i64 %619, %601
  %621 = lshr i64 %620, 16
  %622 = shl i64 %620, 48
  %623 = or i64 %622, %621
  store i64 %623, i64* %596, align 8
  %624 = and i64 %621, 4294967295
  %625 = add i64 %623, %609
  %626 = shl i64 %609, 1
  %627 = and i64 %626, 8589934590
  %628 = mul i64 %624, %627
  %629 = add i64 %625, %628
  store i64 %629, i64* %603, align 8
  %630 = xor i64 %629, %613
  %631 = lshr i64 %630, 63
  %632 = shl i64 %630, 1
  %633 = or i64 %632, %631
  store i64 %633, i64* %587, align 8
  %634 = or i32 %583, 1
  %635 = getelementptr %struct.block_, %struct.block_* %3, i32 0, i32 0, i32 %634
  %636 = load i64, i64* %635, align 8
  %637 = add nuw nsw i32 %583, 33
  %638 = getelementptr %struct.block_, %struct.block_* %3, i32 0, i32 0, i32 %637
  %639 = load i64, i64* %638, align 8
  %640 = and i64 %639, 4294967295
  %641 = add i64 %639, %636
  %642 = shl i64 %636, 1
  %643 = and i64 %642, 8589934590
  %644 = mul i64 %643, %640
  %645 = add i64 %641, %644
  %646 = add nuw nsw i32 %583, 97
  %647 = getelementptr %struct.block_, %struct.block_* %3, i32 0, i32 0, i32 %646
  %648 = load i64, i64* %647, align 8
  %649 = xor i64 %645, %648
  %650 = lshr i64 %649, 32
  %651 = shl i64 %649, 32
  %652 = or i64 %651, %650
  %653 = add nuw nsw i32 %583, 65
  %654 = getelementptr %struct.block_, %struct.block_* %3, i32 0, i32 0, i32 %653
  %655 = load i64, i64* %654, align 8
  %656 = add i64 %652, %655
  %657 = shl i64 %655, 1
  %658 = and i64 %657, 8589934590
  %659 = mul i64 %650, %658
  %660 = add i64 %656, %659
  %661 = xor i64 %660, %639
  %662 = lshr i64 %661, 24
  %663 = shl i64 %661, 40
  %664 = or i64 %663, %662
  %665 = and i64 %662, 4294967295
  %666 = add i64 %664, %645
  %667 = shl i64 %645, 1
  %668 = and i64 %667, 8589934590
  %669 = mul i64 %665, %668
  %670 = add i64 %666, %669
  store i64 %670, i64* %635, align 8
  %671 = xor i64 %670, %652
  %672 = lshr i64 %671, 16
  %673 = shl i64 %671, 48
  %674 = or i64 %673, %672
  store i64 %674, i64* %647, align 8
  %675 = and i64 %672, 4294967295
  %676 = add i64 %674, %660
  %677 = shl i64 %660, 1
  %678 = and i64 %677, 8589934590
  %679 = mul i64 %675, %678
  %680 = add i64 %676, %679
  store i64 %680, i64* %654, align 8
  %681 = xor i64 %680, %664
  %682 = lshr i64 %681, 63
  %683 = shl i64 %681, 1
  %684 = or i64 %683, %682
  store i64 %684, i64* %638, align 8
  %685 = add nuw nsw i32 %583, 16
  %686 = getelementptr %struct.block_, %struct.block_* %3, i32 0, i32 0, i32 %685
  %687 = load i64, i64* %686, align 8
  %688 = add nuw nsw i32 %583, 48
  %689 = getelementptr %struct.block_, %struct.block_* %3, i32 0, i32 0, i32 %688
  %690 = load i64, i64* %689, align 8
  %691 = and i64 %690, 4294967295
  %692 = add i64 %690, %687
  %693 = shl i64 %687, 1
  %694 = and i64 %693, 8589934590
  %695 = mul i64 %694, %691
  %696 = add i64 %692, %695
  %697 = add nuw nsw i32 %583, 112
  %698 = getelementptr %struct.block_, %struct.block_* %3, i32 0, i32 0, i32 %697
  %699 = load i64, i64* %698, align 8
  %700 = xor i64 %696, %699
  %701 = lshr i64 %700, 32
  %702 = shl i64 %700, 32
  %703 = or i64 %702, %701
  %704 = add nuw nsw i32 %583, 80
  %705 = getelementptr %struct.block_, %struct.block_* %3, i32 0, i32 0, i32 %704
  %706 = load i64, i64* %705, align 8
  %707 = add i64 %703, %706
  %708 = shl i64 %706, 1
  %709 = and i64 %708, 8589934590
  %710 = mul i64 %701, %709
  %711 = add i64 %707, %710
  %712 = xor i64 %711, %690
  %713 = lshr i64 %712, 24
  %714 = shl i64 %712, 40
  %715 = or i64 %714, %713
  %716 = and i64 %713, 4294967295
  %717 = add i64 %715, %696
  %718 = shl i64 %696, 1
  %719 = and i64 %718, 8589934590
  %720 = mul i64 %716, %719
  %721 = add i64 %717, %720
  store i64 %721, i64* %686, align 8
  %722 = xor i64 %721, %703
  %723 = lshr i64 %722, 16
  %724 = shl i64 %722, 48
  %725 = or i64 %724, %723
  store i64 %725, i64* %698, align 8
  %726 = and i64 %723, 4294967295
  %727 = add i64 %725, %711
  %728 = shl i64 %711, 1
  %729 = and i64 %728, 8589934590
  %730 = mul i64 %726, %729
  %731 = add i64 %727, %730
  %732 = xor i64 %731, %715
  %733 = lshr i64 %732, 63
  %734 = shl i64 %732, 1
  %735 = or i64 %734, %733
  store i64 %735, i64* %689, align 8
  %736 = add nuw nsw i32 %583, 17
  %737 = getelementptr %struct.block_, %struct.block_* %3, i32 0, i32 0, i32 %736
  %738 = load i64, i64* %737, align 8
  %739 = add nuw nsw i32 %583, 49
  %740 = getelementptr %struct.block_, %struct.block_* %3, i32 0, i32 0, i32 %739
  %741 = load i64, i64* %740, align 8
  %742 = and i64 %741, 4294967295
  %743 = add i64 %741, %738
  %744 = shl i64 %738, 1
  %745 = and i64 %744, 8589934590
  %746 = mul i64 %745, %742
  %747 = add i64 %743, %746
  %748 = add nuw nsw i32 %583, 113
  %749 = getelementptr %struct.block_, %struct.block_* %3, i32 0, i32 0, i32 %748
  %750 = load i64, i64* %749, align 8
  %751 = xor i64 %747, %750
  %752 = lshr i64 %751, 32
  %753 = shl i64 %751, 32
  %754 = or i64 %753, %752
  %755 = add nuw nsw i32 %583, 81
  %756 = getelementptr %struct.block_, %struct.block_* %3, i32 0, i32 0, i32 %755
  %757 = load i64, i64* %756, align 8
  %758 = add i64 %754, %757
  %759 = shl i64 %757, 1
  %760 = and i64 %759, 8589934590
  %761 = mul i64 %752, %760
  %762 = add i64 %758, %761
  %763 = xor i64 %762, %741
  %764 = lshr i64 %763, 24
  %765 = shl i64 %763, 40
  %766 = or i64 %765, %764
  %767 = and i64 %764, 4294967295
  %768 = add i64 %766, %747
  %769 = shl i64 %747, 1
  %770 = and i64 %769, 8589934590
  %771 = mul i64 %767, %770
  %772 = add i64 %768, %771
  store i64 %772, i64* %737, align 8
  %773 = xor i64 %772, %754
  %774 = lshr i64 %773, 16
  %775 = shl i64 %773, 48
  %776 = or i64 %775, %774
  %777 = and i64 %774, 4294967295
  %778 = add i64 %776, %762
  %779 = shl i64 %762, 1
  %780 = and i64 %779, 8589934590
  %781 = mul i64 %777, %780
  %782 = add i64 %778, %781
  %783 = xor i64 %782, %766
  %784 = lshr i64 %783, 63
  %785 = shl i64 %783, 1
  %786 = or i64 %785, %784
  store i64 %786, i64* %740, align 8
  %787 = and i64 %684, 4294967295
  %788 = add i64 %684, %619
  %789 = shl i64 %619, 1
  %790 = and i64 %789, 8589934590
  %791 = mul i64 %787, %790
  %792 = add i64 %788, %791
  %793 = xor i64 %776, %792
  %794 = lshr i64 %793, 32
  %795 = shl i64 %793, 32
  %796 = or i64 %795, %794
  %797 = add i64 %796, %731
  %798 = shl i64 %731, 1
  %799 = and i64 %798, 8589934590
  %800 = mul i64 %794, %799
  %801 = add i64 %797, %800
  %802 = xor i64 %801, %684
  %803 = lshr i64 %802, 24
  %804 = shl i64 %802, 40
  %805 = or i64 %804, %803
  %806 = and i64 %803, 4294967295
  %807 = add i64 %805, %792
  %808 = shl i64 %792, 1
  %809 = and i64 %808, 8589934590
  %810 = mul i64 %806, %809
  %811 = add i64 %807, %810
  store i64 %811, i64* %584, align 8
  %812 = xor i64 %811, %796
  %813 = lshr i64 %812, 16
  %814 = shl i64 %812, 48
  %815 = or i64 %814, %813
  store i64 %815, i64* %749, align 8
  %816 = and i64 %813, 4294967295
  %817 = add i64 %815, %801
  %818 = shl i64 %801, 1
  %819 = and i64 %818, 8589934590
  %820 = mul i64 %816, %819
  %821 = add i64 %817, %820
  store i64 %821, i64* %705, align 8
  %822 = xor i64 %821, %805
  %823 = lshr i64 %822, 63
  %824 = shl i64 %822, 1
  %825 = or i64 %824, %823
  store i64 %825, i64* %638, align 8
  %826 = and i64 %735, 4294967295
  %827 = add i64 %735, %670
  %828 = shl i64 %670, 1
  %829 = and i64 %828, 8589934590
  %830 = mul i64 %826, %829
  %831 = add i64 %827, %830
  %832 = xor i64 %831, %623
  %833 = lshr i64 %832, 32
  %834 = shl i64 %832, 32
  %835 = or i64 %834, %833
  %836 = add i64 %835, %782
  %837 = shl i64 %782, 1
  %838 = and i64 %837, 8589934590
  %839 = mul i64 %838, %833
  %840 = add i64 %836, %839
  %841 = xor i64 %840, %735
  %842 = lshr i64 %841, 24
  %843 = shl i64 %841, 40
  %844 = or i64 %843, %842
  %845 = and i64 %842, 4294967295
  %846 = add i64 %844, %831
  %847 = shl i64 %831, 1
  %848 = and i64 %847, 8589934590
  %849 = mul i64 %845, %848
  %850 = add i64 %846, %849
  store i64 %850, i64* %635, align 8
  %851 = xor i64 %850, %835
  %852 = lshr i64 %851, 16
  %853 = shl i64 %851, 48
  %854 = or i64 %853, %852
  store i64 %854, i64* %596, align 8
  %855 = and i64 %852, 4294967295
  %856 = add i64 %854, %840
  %857 = shl i64 %840, 1
  %858 = and i64 %857, 8589934590
  %859 = mul i64 %855, %858
  %860 = add i64 %856, %859
  store i64 %860, i64* %756, align 8
  %861 = xor i64 %860, %844
  %862 = lshr i64 %861, 63
  %863 = shl i64 %861, 1
  %864 = or i64 %863, %862
  store i64 %864, i64* %689, align 8
  %865 = and i64 %786, 4294967295
  %866 = add i64 %786, %721
  %867 = shl i64 %721, 1
  %868 = and i64 %867, 8589934590
  %869 = mul i64 %865, %868
  %870 = add i64 %866, %869
  %871 = xor i64 %870, %674
  %872 = lshr i64 %871, 32
  %873 = shl i64 %871, 32
  %874 = or i64 %873, %872
  %875 = add i64 %874, %629
  %876 = shl i64 %629, 1
  %877 = and i64 %876, 8589934590
  %878 = mul i64 %872, %877
  %879 = add i64 %875, %878
  %880 = xor i64 %879, %786
  %881 = lshr i64 %880, 24
  %882 = shl i64 %880, 40
  %883 = or i64 %882, %881
  %884 = and i64 %881, 4294967295
  %885 = add i64 %883, %870
  %886 = shl i64 %870, 1
  %887 = and i64 %886, 8589934590
  %888 = mul i64 %884, %887
  %889 = add i64 %885, %888
  store i64 %889, i64* %686, align 8
  %890 = xor i64 %889, %874
  %891 = lshr i64 %890, 16
  %892 = shl i64 %890, 48
  %893 = or i64 %892, %891
  store i64 %893, i64* %647, align 8
  %894 = and i64 %891, 4294967295
  %895 = add i64 %893, %879
  %896 = shl i64 %879, 1
  %897 = and i64 %896, 8589934590
  %898 = mul i64 %894, %897
  %899 = add i64 %895, %898
  store i64 %899, i64* %603, align 8
  %900 = xor i64 %899, %883
  %901 = lshr i64 %900, 63
  %902 = shl i64 %900, 1
  %903 = or i64 %902, %901
  store i64 %903, i64* %740, align 8
  %904 = and i64 %633, 4294967295
  %905 = add i64 %772, %633
  %906 = shl i64 %772, 1
  %907 = and i64 %906, 8589934590
  %908 = mul i64 %907, %904
  %909 = add i64 %905, %908
  %910 = xor i64 %909, %725
  %911 = lshr i64 %910, 32
  %912 = shl i64 %910, 32
  %913 = or i64 %912, %911
  %914 = add i64 %913, %680
  %915 = shl i64 %680, 1
  %916 = and i64 %915, 8589934590
  %917 = mul i64 %911, %916
  %918 = add i64 %914, %917
  %919 = xor i64 %918, %633
  %920 = lshr i64 %919, 24
  %921 = shl i64 %919, 40
  %922 = or i64 %921, %920
  %923 = and i64 %920, 4294967295
  %924 = add i64 %922, %909
  %925 = shl i64 %909, 1
  %926 = and i64 %925, 8589934590
  %927 = mul i64 %923, %926
  %928 = add i64 %924, %927
  store i64 %928, i64* %737, align 8
  %929 = xor i64 %928, %913
  %930 = lshr i64 %929, 16
  %931 = shl i64 %929, 48
  %932 = or i64 %931, %930
  store i64 %932, i64* %698, align 8
  %933 = and i64 %930, 4294967295
  %934 = add i64 %932, %918
  %935 = shl i64 %918, 1
  %936 = and i64 %935, 8589934590
  %937 = mul i64 %933, %936
  %938 = add i64 %934, %937
  store i64 %938, i64* %654, align 8
  %939 = xor i64 %938, %922
  %940 = lshr i64 %939, 63
  %941 = shl i64 %939, 1
  %942 = or i64 %941, %940
  store i64 %942, i64* %587, align 8
  %943 = add nuw nsw i32 %582, 1
  %944 = icmp eq i32 %943, 8
  br i1 %944, label %945, label %581

945:                                              ; preds = %581
  %946 = bitcast %struct.block_* %202 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 8 dereferenceable(1024) %946, i8* nonnull align 8 dereferenceable(1024) %116, i32 1024, i1 false) #3
  br label %947

947:                                              ; preds = %947, %945
  %948 = phi i32 [ 0, %945 ], [ %954, %947 ]
  %949 = getelementptr %struct.block_, %struct.block_* %3, i32 0, i32 0, i32 %948
  %950 = load i64, i64* %949, align 8
  %951 = getelementptr %struct.block_, %struct.block_* %197, i32 %121, i32 0, i32 %948
  %952 = load i64, i64* %951, align 8
  %953 = xor i64 %952, %950
  store i64 %953, i64* %951, align 8
  %954 = add nuw nsw i32 %948, 1
  %955 = icmp eq i32 %954, 128
  br i1 %955, label %956, label %947

956:                                              ; preds = %947
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %116)
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %115) #3
  br label %957

957:                                              ; preds = %203, %956
  %958 = add nuw i32 %120, 1
  %959 = load i32, i32* %101, align 4
  %960 = icmp ult i32 %958, %959
  br i1 %960, label %961, label %965

961:                                              ; preds = %957
  %962 = add i32 %126, 1
  %963 = add i32 %121, 1
  %964 = load i32, i32* %97, align 4
  br label %117

965:                                              ; preds = %957, %83, %2
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #1

; Function Attrs: nounwind
define internal fastcc void @fill_block_with_xor(%struct.block_* nocapture readonly %0, %struct.block_* nocapture readonly %1, %struct.block_* nocapture %2) unnamed_addr #0 {
  %4 = alloca %struct.block_, align 8
  %5 = alloca %struct.block_, align 8
  %6 = bitcast %struct.block_* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %6) #3
  %7 = bitcast %struct.block_* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %7) #3
  %8 = bitcast %struct.block_* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 8 dereferenceable(1024) %6, i8* nonnull align 8 dereferenceable(1024) %8, i32 1024, i1 false) #3
  br label %9

9:                                                ; preds = %9, %3
  %10 = phi i32 [ 0, %3 ], [ %16, %9 ]
  %11 = getelementptr %struct.block_, %struct.block_* %0, i32 0, i32 0, i32 %10
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr %struct.block_, %struct.block_* %4, i32 0, i32 0, i32 %10
  %14 = load i64, i64* %13, align 8
  %15 = xor i64 %14, %12
  store i64 %15, i64* %13, align 8
  %16 = add nuw nsw i32 %10, 1
  %17 = icmp eq i32 %16, 128
  br i1 %17, label %18, label %9

18:                                               ; preds = %9
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 8 dereferenceable(1024) %7, i8* nonnull align 8 dereferenceable(1024) %6, i32 1024, i1 false) #3
  br label %19

19:                                               ; preds = %19, %18
  %20 = phi i32 [ 0, %18 ], [ %26, %19 ]
  %21 = getelementptr %struct.block_, %struct.block_* %2, i32 0, i32 0, i32 %20
  %22 = load i64, i64* %21, align 8
  %23 = getelementptr %struct.block_, %struct.block_* %5, i32 0, i32 0, i32 %20
  %24 = load i64, i64* %23, align 8
  %25 = xor i64 %24, %22
  store i64 %25, i64* %23, align 8
  %26 = add nuw nsw i32 %20, 1
  %27 = icmp eq i32 %26, 128
  br i1 %27, label %28, label %19

28:                                               ; preds = %19, %28
  %29 = phi i32 [ %390, %28 ], [ 0, %19 ]
  %30 = shl nuw nsw i32 %29, 4
  %31 = getelementptr %struct.block_, %struct.block_* %4, i32 0, i32 0, i32 %30
  %32 = load i64, i64* %31, align 8
  %33 = or i32 %30, 4
  %34 = getelementptr %struct.block_, %struct.block_* %4, i32 0, i32 0, i32 %33
  %35 = load i64, i64* %34, align 8
  %36 = and i64 %35, 4294967295
  %37 = add i64 %35, %32
  %38 = shl i64 %32, 1
  %39 = and i64 %38, 8589934590
  %40 = mul i64 %39, %36
  %41 = add i64 %37, %40
  %42 = or i32 %30, 12
  %43 = getelementptr %struct.block_, %struct.block_* %4, i32 0, i32 0, i32 %42
  %44 = load i64, i64* %43, align 8
  %45 = xor i64 %41, %44
  %46 = lshr i64 %45, 32
  %47 = shl i64 %45, 32
  %48 = or i64 %47, %46
  %49 = or i32 %30, 8
  %50 = getelementptr %struct.block_, %struct.block_* %4, i32 0, i32 0, i32 %49
  %51 = load i64, i64* %50, align 8
  %52 = add i64 %48, %51
  %53 = shl i64 %51, 1
  %54 = and i64 %53, 8589934590
  %55 = mul i64 %54, %46
  %56 = add i64 %52, %55
  %57 = xor i64 %56, %35
  %58 = lshr i64 %57, 24
  %59 = shl i64 %57, 40
  %60 = or i64 %59, %58
  %61 = and i64 %58, 4294967295
  %62 = add i64 %60, %41
  %63 = shl i64 %41, 1
  %64 = and i64 %63, 8589934590
  %65 = mul i64 %61, %64
  %66 = add i64 %62, %65
  store i64 %66, i64* %31, align 8
  %67 = xor i64 %66, %48
  %68 = lshr i64 %67, 16
  %69 = shl i64 %67, 48
  %70 = or i64 %69, %68
  store i64 %70, i64* %43, align 8
  %71 = and i64 %68, 4294967295
  %72 = add i64 %70, %56
  %73 = shl i64 %56, 1
  %74 = and i64 %73, 8589934590
  %75 = mul i64 %71, %74
  %76 = add i64 %72, %75
  store i64 %76, i64* %50, align 8
  %77 = xor i64 %76, %60
  %78 = lshr i64 %77, 63
  %79 = shl i64 %77, 1
  %80 = or i64 %79, %78
  store i64 %80, i64* %34, align 8
  %81 = or i32 %30, 1
  %82 = getelementptr %struct.block_, %struct.block_* %4, i32 0, i32 0, i32 %81
  %83 = load i64, i64* %82, align 8
  %84 = or i32 %30, 5
  %85 = getelementptr %struct.block_, %struct.block_* %4, i32 0, i32 0, i32 %84
  %86 = load i64, i64* %85, align 8
  %87 = and i64 %86, 4294967295
  %88 = add i64 %86, %83
  %89 = shl i64 %83, 1
  %90 = and i64 %89, 8589934590
  %91 = mul i64 %90, %87
  %92 = add i64 %88, %91
  %93 = or i32 %30, 13
  %94 = getelementptr %struct.block_, %struct.block_* %4, i32 0, i32 0, i32 %93
  %95 = load i64, i64* %94, align 8
  %96 = xor i64 %92, %95
  %97 = lshr i64 %96, 32
  %98 = shl i64 %96, 32
  %99 = or i64 %98, %97
  %100 = or i32 %30, 9
  %101 = getelementptr %struct.block_, %struct.block_* %4, i32 0, i32 0, i32 %100
  %102 = load i64, i64* %101, align 8
  %103 = add i64 %99, %102
  %104 = shl i64 %102, 1
  %105 = and i64 %104, 8589934590
  %106 = mul i64 %105, %97
  %107 = add i64 %103, %106
  %108 = xor i64 %107, %86
  %109 = lshr i64 %108, 24
  %110 = shl i64 %108, 40
  %111 = or i64 %110, %109
  %112 = and i64 %109, 4294967295
  %113 = add i64 %111, %92
  %114 = shl i64 %92, 1
  %115 = and i64 %114, 8589934590
  %116 = mul i64 %112, %115
  %117 = add i64 %113, %116
  store i64 %117, i64* %82, align 8
  %118 = xor i64 %117, %99
  %119 = lshr i64 %118, 16
  %120 = shl i64 %118, 48
  %121 = or i64 %120, %119
  store i64 %121, i64* %94, align 8
  %122 = and i64 %119, 4294967295
  %123 = add i64 %121, %107
  %124 = shl i64 %107, 1
  %125 = and i64 %124, 8589934590
  %126 = mul i64 %122, %125
  %127 = add i64 %123, %126
  store i64 %127, i64* %101, align 8
  %128 = xor i64 %127, %111
  %129 = lshr i64 %128, 63
  %130 = shl i64 %128, 1
  %131 = or i64 %130, %129
  store i64 %131, i64* %85, align 8
  %132 = or i32 %30, 2
  %133 = getelementptr %struct.block_, %struct.block_* %4, i32 0, i32 0, i32 %132
  %134 = load i64, i64* %133, align 8
  %135 = or i32 %30, 6
  %136 = getelementptr %struct.block_, %struct.block_* %4, i32 0, i32 0, i32 %135
  %137 = load i64, i64* %136, align 8
  %138 = and i64 %137, 4294967295
  %139 = add i64 %137, %134
  %140 = shl i64 %134, 1
  %141 = and i64 %140, 8589934590
  %142 = mul i64 %141, %138
  %143 = add i64 %139, %142
  %144 = or i32 %30, 14
  %145 = getelementptr %struct.block_, %struct.block_* %4, i32 0, i32 0, i32 %144
  %146 = load i64, i64* %145, align 8
  %147 = xor i64 %143, %146
  %148 = lshr i64 %147, 32
  %149 = shl i64 %147, 32
  %150 = or i64 %149, %148
  %151 = or i32 %30, 10
  %152 = getelementptr %struct.block_, %struct.block_* %4, i32 0, i32 0, i32 %151
  %153 = load i64, i64* %152, align 8
  %154 = add i64 %150, %153
  %155 = shl i64 %153, 1
  %156 = and i64 %155, 8589934590
  %157 = mul i64 %156, %148
  %158 = add i64 %154, %157
  %159 = xor i64 %158, %137
  %160 = lshr i64 %159, 24
  %161 = shl i64 %159, 40
  %162 = or i64 %161, %160
  %163 = and i64 %160, 4294967295
  %164 = add i64 %162, %143
  %165 = shl i64 %143, 1
  %166 = and i64 %165, 8589934590
  %167 = mul i64 %163, %166
  %168 = add i64 %164, %167
  store i64 %168, i64* %133, align 8
  %169 = xor i64 %168, %150
  %170 = lshr i64 %169, 16
  %171 = shl i64 %169, 48
  %172 = or i64 %171, %170
  store i64 %172, i64* %145, align 8
  %173 = and i64 %170, 4294967295
  %174 = add i64 %172, %158
  %175 = shl i64 %158, 1
  %176 = and i64 %175, 8589934590
  %177 = mul i64 %173, %176
  %178 = add i64 %174, %177
  %179 = xor i64 %178, %162
  %180 = lshr i64 %179, 63
  %181 = shl i64 %179, 1
  %182 = or i64 %181, %180
  store i64 %182, i64* %136, align 8
  %183 = or i32 %30, 3
  %184 = getelementptr %struct.block_, %struct.block_* %4, i32 0, i32 0, i32 %183
  %185 = load i64, i64* %184, align 8
  %186 = or i32 %30, 7
  %187 = getelementptr %struct.block_, %struct.block_* %4, i32 0, i32 0, i32 %186
  %188 = load i64, i64* %187, align 8
  %189 = and i64 %188, 4294967295
  %190 = add i64 %188, %185
  %191 = shl i64 %185, 1
  %192 = and i64 %191, 8589934590
  %193 = mul i64 %192, %189
  %194 = add i64 %190, %193
  %195 = or i32 %30, 15
  %196 = getelementptr %struct.block_, %struct.block_* %4, i32 0, i32 0, i32 %195
  %197 = load i64, i64* %196, align 8
  %198 = xor i64 %194, %197
  %199 = lshr i64 %198, 32
  %200 = shl i64 %198, 32
  %201 = or i64 %200, %199
  %202 = or i32 %30, 11
  %203 = getelementptr %struct.block_, %struct.block_* %4, i32 0, i32 0, i32 %202
  %204 = load i64, i64* %203, align 8
  %205 = add i64 %201, %204
  %206 = shl i64 %204, 1
  %207 = and i64 %206, 8589934590
  %208 = mul i64 %207, %199
  %209 = add i64 %205, %208
  %210 = xor i64 %209, %188
  %211 = lshr i64 %210, 24
  %212 = shl i64 %210, 40
  %213 = or i64 %212, %211
  %214 = and i64 %211, 4294967295
  %215 = add i64 %213, %194
  %216 = shl i64 %194, 1
  %217 = and i64 %216, 8589934590
  %218 = mul i64 %214, %217
  %219 = add i64 %215, %218
  store i64 %219, i64* %184, align 8
  %220 = xor i64 %219, %201
  %221 = lshr i64 %220, 16
  %222 = shl i64 %220, 48
  %223 = or i64 %222, %221
  %224 = and i64 %221, 4294967295
  %225 = add i64 %223, %209
  %226 = shl i64 %209, 1
  %227 = and i64 %226, 8589934590
  %228 = mul i64 %224, %227
  %229 = add i64 %225, %228
  %230 = xor i64 %229, %213
  %231 = lshr i64 %230, 63
  %232 = shl i64 %230, 1
  %233 = or i64 %232, %231
  store i64 %233, i64* %187, align 8
  %234 = and i64 %131, 4294967295
  %235 = add i64 %131, %66
  %236 = shl i64 %66, 1
  %237 = and i64 %236, 8589934590
  %238 = mul i64 %234, %237
  %239 = add i64 %235, %238
  %240 = xor i64 %223, %239
  %241 = lshr i64 %240, 32
  %242 = shl i64 %240, 32
  %243 = or i64 %242, %241
  %244 = add i64 %243, %178
  %245 = shl i64 %178, 1
  %246 = and i64 %245, 8589934590
  %247 = mul i64 %241, %246
  %248 = add i64 %244, %247
  %249 = xor i64 %248, %131
  %250 = lshr i64 %249, 24
  %251 = shl i64 %249, 40
  %252 = or i64 %251, %250
  %253 = and i64 %250, 4294967295
  %254 = add i64 %252, %239
  %255 = shl i64 %239, 1
  %256 = and i64 %255, 8589934590
  %257 = mul i64 %253, %256
  %258 = add i64 %254, %257
  store i64 %258, i64* %31, align 8
  %259 = xor i64 %258, %243
  %260 = lshr i64 %259, 16
  %261 = shl i64 %259, 48
  %262 = or i64 %261, %260
  store i64 %262, i64* %196, align 8
  %263 = and i64 %260, 4294967295
  %264 = add i64 %262, %248
  %265 = shl i64 %248, 1
  %266 = and i64 %265, 8589934590
  %267 = mul i64 %263, %266
  %268 = add i64 %264, %267
  store i64 %268, i64* %152, align 8
  %269 = xor i64 %268, %252
  %270 = lshr i64 %269, 63
  %271 = shl i64 %269, 1
  %272 = or i64 %271, %270
  store i64 %272, i64* %85, align 8
  %273 = and i64 %182, 4294967295
  %274 = add i64 %182, %117
  %275 = shl i64 %117, 1
  %276 = and i64 %275, 8589934590
  %277 = mul i64 %273, %276
  %278 = add i64 %274, %277
  %279 = xor i64 %278, %70
  %280 = lshr i64 %279, 32
  %281 = shl i64 %279, 32
  %282 = or i64 %281, %280
  %283 = add i64 %229, %282
  %284 = shl i64 %229, 1
  %285 = and i64 %284, 8589934590
  %286 = mul i64 %285, %280
  %287 = add i64 %283, %286
  %288 = xor i64 %287, %182
  %289 = lshr i64 %288, 24
  %290 = shl i64 %288, 40
  %291 = or i64 %290, %289
  %292 = and i64 %289, 4294967295
  %293 = add i64 %291, %278
  %294 = shl i64 %278, 1
  %295 = and i64 %294, 8589934590
  %296 = mul i64 %292, %295
  %297 = add i64 %293, %296
  store i64 %297, i64* %82, align 8
  %298 = xor i64 %297, %282
  %299 = lshr i64 %298, 16
  %300 = shl i64 %298, 48
  %301 = or i64 %300, %299
  store i64 %301, i64* %43, align 8
  %302 = and i64 %299, 4294967295
  %303 = add i64 %301, %287
  %304 = shl i64 %287, 1
  %305 = and i64 %304, 8589934590
  %306 = mul i64 %302, %305
  %307 = add i64 %303, %306
  store i64 %307, i64* %203, align 8
  %308 = xor i64 %307, %291
  %309 = lshr i64 %308, 63
  %310 = shl i64 %308, 1
  %311 = or i64 %310, %309
  store i64 %311, i64* %136, align 8
  %312 = and i64 %233, 4294967295
  %313 = add i64 %233, %168
  %314 = shl i64 %168, 1
  %315 = and i64 %314, 8589934590
  %316 = mul i64 %312, %315
  %317 = add i64 %313, %316
  %318 = xor i64 %317, %121
  %319 = lshr i64 %318, 32
  %320 = shl i64 %318, 32
  %321 = or i64 %320, %319
  %322 = add i64 %321, %76
  %323 = shl i64 %76, 1
  %324 = and i64 %323, 8589934590
  %325 = mul i64 %319, %324
  %326 = add i64 %322, %325
  %327 = xor i64 %326, %233
  %328 = lshr i64 %327, 24
  %329 = shl i64 %327, 40
  %330 = or i64 %329, %328
  %331 = and i64 %328, 4294967295
  %332 = add i64 %330, %317
  %333 = shl i64 %317, 1
  %334 = and i64 %333, 8589934590
  %335 = mul i64 %331, %334
  %336 = add i64 %332, %335
  store i64 %336, i64* %133, align 8
  %337 = xor i64 %336, %321
  %338 = lshr i64 %337, 16
  %339 = shl i64 %337, 48
  %340 = or i64 %339, %338
  store i64 %340, i64* %94, align 8
  %341 = and i64 %338, 4294967295
  %342 = add i64 %340, %326
  %343 = shl i64 %326, 1
  %344 = and i64 %343, 8589934590
  %345 = mul i64 %341, %344
  %346 = add i64 %342, %345
  store i64 %346, i64* %50, align 8
  %347 = xor i64 %346, %330
  %348 = lshr i64 %347, 63
  %349 = shl i64 %347, 1
  %350 = or i64 %349, %348
  store i64 %350, i64* %187, align 8
  %351 = and i64 %80, 4294967295
  %352 = add i64 %219, %80
  %353 = shl i64 %219, 1
  %354 = and i64 %353, 8589934590
  %355 = mul i64 %354, %351
  %356 = add i64 %352, %355
  %357 = xor i64 %356, %172
  %358 = lshr i64 %357, 32
  %359 = shl i64 %357, 32
  %360 = or i64 %359, %358
  %361 = add i64 %360, %127
  %362 = shl i64 %127, 1
  %363 = and i64 %362, 8589934590
  %364 = mul i64 %358, %363
  %365 = add i64 %361, %364
  %366 = xor i64 %365, %80
  %367 = lshr i64 %366, 24
  %368 = shl i64 %366, 40
  %369 = or i64 %368, %367
  %370 = and i64 %367, 4294967295
  %371 = add i64 %369, %356
  %372 = shl i64 %356, 1
  %373 = and i64 %372, 8589934590
  %374 = mul i64 %370, %373
  %375 = add i64 %371, %374
  store i64 %375, i64* %184, align 8
  %376 = xor i64 %375, %360
  %377 = lshr i64 %376, 16
  %378 = shl i64 %376, 48
  %379 = or i64 %378, %377
  store i64 %379, i64* %145, align 8
  %380 = and i64 %377, 4294967295
  %381 = add i64 %379, %365
  %382 = shl i64 %365, 1
  %383 = and i64 %382, 8589934590
  %384 = mul i64 %380, %383
  %385 = add i64 %381, %384
  store i64 %385, i64* %101, align 8
  %386 = xor i64 %385, %369
  %387 = lshr i64 %386, 63
  %388 = shl i64 %386, 1
  %389 = or i64 %388, %387
  store i64 %389, i64* %34, align 8
  %390 = add nuw nsw i32 %29, 1
  %391 = icmp eq i32 %390, 8
  br i1 %391, label %392, label %28

392:                                              ; preds = %28, %392
  %393 = phi i32 [ %754, %392 ], [ 0, %28 ]
  %394 = shl nuw nsw i32 %393, 1
  %395 = getelementptr %struct.block_, %struct.block_* %4, i32 0, i32 0, i32 %394
  %396 = load i64, i64* %395, align 8
  %397 = add nuw nsw i32 %394, 32
  %398 = getelementptr %struct.block_, %struct.block_* %4, i32 0, i32 0, i32 %397
  %399 = load i64, i64* %398, align 8
  %400 = and i64 %399, 4294967295
  %401 = add i64 %399, %396
  %402 = shl i64 %396, 1
  %403 = and i64 %402, 8589934590
  %404 = mul i64 %403, %400
  %405 = add i64 %401, %404
  %406 = add nuw nsw i32 %394, 96
  %407 = getelementptr %struct.block_, %struct.block_* %4, i32 0, i32 0, i32 %406
  %408 = load i64, i64* %407, align 8
  %409 = xor i64 %405, %408
  %410 = lshr i64 %409, 32
  %411 = shl i64 %409, 32
  %412 = or i64 %411, %410
  %413 = add nuw nsw i32 %394, 64
  %414 = getelementptr %struct.block_, %struct.block_* %4, i32 0, i32 0, i32 %413
  %415 = load i64, i64* %414, align 8
  %416 = add i64 %412, %415
  %417 = shl i64 %415, 1
  %418 = and i64 %417, 8589934590
  %419 = mul i64 %418, %410
  %420 = add i64 %416, %419
  %421 = xor i64 %420, %399
  %422 = lshr i64 %421, 24
  %423 = shl i64 %421, 40
  %424 = or i64 %423, %422
  %425 = and i64 %422, 4294967295
  %426 = add i64 %424, %405
  %427 = shl i64 %405, 1
  %428 = and i64 %427, 8589934590
  %429 = mul i64 %425, %428
  %430 = add i64 %426, %429
  store i64 %430, i64* %395, align 8
  %431 = xor i64 %430, %412
  %432 = lshr i64 %431, 16
  %433 = shl i64 %431, 48
  %434 = or i64 %433, %432
  store i64 %434, i64* %407, align 8
  %435 = and i64 %432, 4294967295
  %436 = add i64 %434, %420
  %437 = shl i64 %420, 1
  %438 = and i64 %437, 8589934590
  %439 = mul i64 %435, %438
  %440 = add i64 %436, %439
  store i64 %440, i64* %414, align 8
  %441 = xor i64 %440, %424
  %442 = lshr i64 %441, 63
  %443 = shl i64 %441, 1
  %444 = or i64 %443, %442
  store i64 %444, i64* %398, align 8
  %445 = or i32 %394, 1
  %446 = getelementptr %struct.block_, %struct.block_* %4, i32 0, i32 0, i32 %445
  %447 = load i64, i64* %446, align 8
  %448 = add nuw nsw i32 %394, 33
  %449 = getelementptr %struct.block_, %struct.block_* %4, i32 0, i32 0, i32 %448
  %450 = load i64, i64* %449, align 8
  %451 = and i64 %450, 4294967295
  %452 = add i64 %450, %447
  %453 = shl i64 %447, 1
  %454 = and i64 %453, 8589934590
  %455 = mul i64 %454, %451
  %456 = add i64 %452, %455
  %457 = add nuw nsw i32 %394, 97
  %458 = getelementptr %struct.block_, %struct.block_* %4, i32 0, i32 0, i32 %457
  %459 = load i64, i64* %458, align 8
  %460 = xor i64 %456, %459
  %461 = lshr i64 %460, 32
  %462 = shl i64 %460, 32
  %463 = or i64 %462, %461
  %464 = add nuw nsw i32 %394, 65
  %465 = getelementptr %struct.block_, %struct.block_* %4, i32 0, i32 0, i32 %464
  %466 = load i64, i64* %465, align 8
  %467 = add i64 %463, %466
  %468 = shl i64 %466, 1
  %469 = and i64 %468, 8589934590
  %470 = mul i64 %469, %461
  %471 = add i64 %467, %470
  %472 = xor i64 %471, %450
  %473 = lshr i64 %472, 24
  %474 = shl i64 %472, 40
  %475 = or i64 %474, %473
  %476 = and i64 %473, 4294967295
  %477 = add i64 %475, %456
  %478 = shl i64 %456, 1
  %479 = and i64 %478, 8589934590
  %480 = mul i64 %476, %479
  %481 = add i64 %477, %480
  store i64 %481, i64* %446, align 8
  %482 = xor i64 %481, %463
  %483 = lshr i64 %482, 16
  %484 = shl i64 %482, 48
  %485 = or i64 %484, %483
  store i64 %485, i64* %458, align 8
  %486 = and i64 %483, 4294967295
  %487 = add i64 %485, %471
  %488 = shl i64 %471, 1
  %489 = and i64 %488, 8589934590
  %490 = mul i64 %486, %489
  %491 = add i64 %487, %490
  store i64 %491, i64* %465, align 8
  %492 = xor i64 %491, %475
  %493 = lshr i64 %492, 63
  %494 = shl i64 %492, 1
  %495 = or i64 %494, %493
  store i64 %495, i64* %449, align 8
  %496 = add nuw nsw i32 %394, 16
  %497 = getelementptr %struct.block_, %struct.block_* %4, i32 0, i32 0, i32 %496
  %498 = load i64, i64* %497, align 8
  %499 = add nuw nsw i32 %394, 48
  %500 = getelementptr %struct.block_, %struct.block_* %4, i32 0, i32 0, i32 %499
  %501 = load i64, i64* %500, align 8
  %502 = and i64 %501, 4294967295
  %503 = add i64 %501, %498
  %504 = shl i64 %498, 1
  %505 = and i64 %504, 8589934590
  %506 = mul i64 %505, %502
  %507 = add i64 %503, %506
  %508 = add nuw nsw i32 %394, 112
  %509 = getelementptr %struct.block_, %struct.block_* %4, i32 0, i32 0, i32 %508
  %510 = load i64, i64* %509, align 8
  %511 = xor i64 %507, %510
  %512 = lshr i64 %511, 32
  %513 = shl i64 %511, 32
  %514 = or i64 %513, %512
  %515 = add nuw nsw i32 %394, 80
  %516 = getelementptr %struct.block_, %struct.block_* %4, i32 0, i32 0, i32 %515
  %517 = load i64, i64* %516, align 8
  %518 = add i64 %514, %517
  %519 = shl i64 %517, 1
  %520 = and i64 %519, 8589934590
  %521 = mul i64 %520, %512
  %522 = add i64 %518, %521
  %523 = xor i64 %522, %501
  %524 = lshr i64 %523, 24
  %525 = shl i64 %523, 40
  %526 = or i64 %525, %524
  %527 = and i64 %524, 4294967295
  %528 = add i64 %526, %507
  %529 = shl i64 %507, 1
  %530 = and i64 %529, 8589934590
  %531 = mul i64 %527, %530
  %532 = add i64 %528, %531
  store i64 %532, i64* %497, align 8
  %533 = xor i64 %532, %514
  %534 = lshr i64 %533, 16
  %535 = shl i64 %533, 48
  %536 = or i64 %535, %534
  store i64 %536, i64* %509, align 8
  %537 = and i64 %534, 4294967295
  %538 = add i64 %536, %522
  %539 = shl i64 %522, 1
  %540 = and i64 %539, 8589934590
  %541 = mul i64 %537, %540
  %542 = add i64 %538, %541
  %543 = xor i64 %542, %526
  %544 = lshr i64 %543, 63
  %545 = shl i64 %543, 1
  %546 = or i64 %545, %544
  store i64 %546, i64* %500, align 8
  %547 = add nuw nsw i32 %394, 17
  %548 = getelementptr %struct.block_, %struct.block_* %4, i32 0, i32 0, i32 %547
  %549 = load i64, i64* %548, align 8
  %550 = add nuw nsw i32 %394, 49
  %551 = getelementptr %struct.block_, %struct.block_* %4, i32 0, i32 0, i32 %550
  %552 = load i64, i64* %551, align 8
  %553 = and i64 %552, 4294967295
  %554 = add i64 %552, %549
  %555 = shl i64 %549, 1
  %556 = and i64 %555, 8589934590
  %557 = mul i64 %556, %553
  %558 = add i64 %554, %557
  %559 = add nuw nsw i32 %394, 113
  %560 = getelementptr %struct.block_, %struct.block_* %4, i32 0, i32 0, i32 %559
  %561 = load i64, i64* %560, align 8
  %562 = xor i64 %558, %561
  %563 = lshr i64 %562, 32
  %564 = shl i64 %562, 32
  %565 = or i64 %564, %563
  %566 = add nuw nsw i32 %394, 81
  %567 = getelementptr %struct.block_, %struct.block_* %4, i32 0, i32 0, i32 %566
  %568 = load i64, i64* %567, align 8
  %569 = add i64 %565, %568
  %570 = shl i64 %568, 1
  %571 = and i64 %570, 8589934590
  %572 = mul i64 %571, %563
  %573 = add i64 %569, %572
  %574 = xor i64 %573, %552
  %575 = lshr i64 %574, 24
  %576 = shl i64 %574, 40
  %577 = or i64 %576, %575
  %578 = and i64 %575, 4294967295
  %579 = add i64 %577, %558
  %580 = shl i64 %558, 1
  %581 = and i64 %580, 8589934590
  %582 = mul i64 %578, %581
  %583 = add i64 %579, %582
  store i64 %583, i64* %548, align 8
  %584 = xor i64 %583, %565
  %585 = lshr i64 %584, 16
  %586 = shl i64 %584, 48
  %587 = or i64 %586, %585
  %588 = and i64 %585, 4294967295
  %589 = add i64 %587, %573
  %590 = shl i64 %573, 1
  %591 = and i64 %590, 8589934590
  %592 = mul i64 %588, %591
  %593 = add i64 %589, %592
  %594 = xor i64 %593, %577
  %595 = lshr i64 %594, 63
  %596 = shl i64 %594, 1
  %597 = or i64 %596, %595
  store i64 %597, i64* %551, align 8
  %598 = and i64 %495, 4294967295
  %599 = add i64 %495, %430
  %600 = shl i64 %430, 1
  %601 = and i64 %600, 8589934590
  %602 = mul i64 %598, %601
  %603 = add i64 %599, %602
  %604 = xor i64 %587, %603
  %605 = lshr i64 %604, 32
  %606 = shl i64 %604, 32
  %607 = or i64 %606, %605
  %608 = add i64 %607, %542
  %609 = shl i64 %542, 1
  %610 = and i64 %609, 8589934590
  %611 = mul i64 %605, %610
  %612 = add i64 %608, %611
  %613 = xor i64 %612, %495
  %614 = lshr i64 %613, 24
  %615 = shl i64 %613, 40
  %616 = or i64 %615, %614
  %617 = and i64 %614, 4294967295
  %618 = add i64 %616, %603
  %619 = shl i64 %603, 1
  %620 = and i64 %619, 8589934590
  %621 = mul i64 %617, %620
  %622 = add i64 %618, %621
  store i64 %622, i64* %395, align 8
  %623 = xor i64 %622, %607
  %624 = lshr i64 %623, 16
  %625 = shl i64 %623, 48
  %626 = or i64 %625, %624
  store i64 %626, i64* %560, align 8
  %627 = and i64 %624, 4294967295
  %628 = add i64 %626, %612
  %629 = shl i64 %612, 1
  %630 = and i64 %629, 8589934590
  %631 = mul i64 %627, %630
  %632 = add i64 %628, %631
  store i64 %632, i64* %516, align 8
  %633 = xor i64 %632, %616
  %634 = lshr i64 %633, 63
  %635 = shl i64 %633, 1
  %636 = or i64 %635, %634
  store i64 %636, i64* %449, align 8
  %637 = and i64 %546, 4294967295
  %638 = add i64 %546, %481
  %639 = shl i64 %481, 1
  %640 = and i64 %639, 8589934590
  %641 = mul i64 %637, %640
  %642 = add i64 %638, %641
  %643 = xor i64 %642, %434
  %644 = lshr i64 %643, 32
  %645 = shl i64 %643, 32
  %646 = or i64 %645, %644
  %647 = add i64 %593, %646
  %648 = shl i64 %593, 1
  %649 = and i64 %648, 8589934590
  %650 = mul i64 %649, %644
  %651 = add i64 %647, %650
  %652 = xor i64 %651, %546
  %653 = lshr i64 %652, 24
  %654 = shl i64 %652, 40
  %655 = or i64 %654, %653
  %656 = and i64 %653, 4294967295
  %657 = add i64 %655, %642
  %658 = shl i64 %642, 1
  %659 = and i64 %658, 8589934590
  %660 = mul i64 %656, %659
  %661 = add i64 %657, %660
  store i64 %661, i64* %446, align 8
  %662 = xor i64 %661, %646
  %663 = lshr i64 %662, 16
  %664 = shl i64 %662, 48
  %665 = or i64 %664, %663
  store i64 %665, i64* %407, align 8
  %666 = and i64 %663, 4294967295
  %667 = add i64 %665, %651
  %668 = shl i64 %651, 1
  %669 = and i64 %668, 8589934590
  %670 = mul i64 %666, %669
  %671 = add i64 %667, %670
  store i64 %671, i64* %567, align 8
  %672 = xor i64 %671, %655
  %673 = lshr i64 %672, 63
  %674 = shl i64 %672, 1
  %675 = or i64 %674, %673
  store i64 %675, i64* %500, align 8
  %676 = and i64 %597, 4294967295
  %677 = add i64 %597, %532
  %678 = shl i64 %532, 1
  %679 = and i64 %678, 8589934590
  %680 = mul i64 %676, %679
  %681 = add i64 %677, %680
  %682 = xor i64 %681, %485
  %683 = lshr i64 %682, 32
  %684 = shl i64 %682, 32
  %685 = or i64 %684, %683
  %686 = add i64 %685, %440
  %687 = shl i64 %440, 1
  %688 = and i64 %687, 8589934590
  %689 = mul i64 %683, %688
  %690 = add i64 %686, %689
  %691 = xor i64 %690, %597
  %692 = lshr i64 %691, 24
  %693 = shl i64 %691, 40
  %694 = or i64 %693, %692
  %695 = and i64 %692, 4294967295
  %696 = add i64 %694, %681
  %697 = shl i64 %681, 1
  %698 = and i64 %697, 8589934590
  %699 = mul i64 %695, %698
  %700 = add i64 %696, %699
  store i64 %700, i64* %497, align 8
  %701 = xor i64 %700, %685
  %702 = lshr i64 %701, 16
  %703 = shl i64 %701, 48
  %704 = or i64 %703, %702
  store i64 %704, i64* %458, align 8
  %705 = and i64 %702, 4294967295
  %706 = add i64 %704, %690
  %707 = shl i64 %690, 1
  %708 = and i64 %707, 8589934590
  %709 = mul i64 %705, %708
  %710 = add i64 %706, %709
  store i64 %710, i64* %414, align 8
  %711 = xor i64 %710, %694
  %712 = lshr i64 %711, 63
  %713 = shl i64 %711, 1
  %714 = or i64 %713, %712
  store i64 %714, i64* %551, align 8
  %715 = and i64 %444, 4294967295
  %716 = add i64 %583, %444
  %717 = shl i64 %583, 1
  %718 = and i64 %717, 8589934590
  %719 = mul i64 %718, %715
  %720 = add i64 %716, %719
  %721 = xor i64 %720, %536
  %722 = lshr i64 %721, 32
  %723 = shl i64 %721, 32
  %724 = or i64 %723, %722
  %725 = add i64 %724, %491
  %726 = shl i64 %491, 1
  %727 = and i64 %726, 8589934590
  %728 = mul i64 %722, %727
  %729 = add i64 %725, %728
  %730 = xor i64 %729, %444
  %731 = lshr i64 %730, 24
  %732 = shl i64 %730, 40
  %733 = or i64 %732, %731
  %734 = and i64 %731, 4294967295
  %735 = add i64 %733, %720
  %736 = shl i64 %720, 1
  %737 = and i64 %736, 8589934590
  %738 = mul i64 %734, %737
  %739 = add i64 %735, %738
  store i64 %739, i64* %548, align 8
  %740 = xor i64 %739, %724
  %741 = lshr i64 %740, 16
  %742 = shl i64 %740, 48
  %743 = or i64 %742, %741
  store i64 %743, i64* %509, align 8
  %744 = and i64 %741, 4294967295
  %745 = add i64 %743, %729
  %746 = shl i64 %729, 1
  %747 = and i64 %746, 8589934590
  %748 = mul i64 %744, %747
  %749 = add i64 %745, %748
  store i64 %749, i64* %465, align 8
  %750 = xor i64 %749, %733
  %751 = lshr i64 %750, 63
  %752 = shl i64 %750, 1
  %753 = or i64 %752, %751
  store i64 %753, i64* %398, align 8
  %754 = add nuw nsw i32 %393, 1
  %755 = icmp eq i32 %754, 8
  br i1 %755, label %756, label %392

756:                                              ; preds = %392
  %757 = bitcast %struct.block_* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 8 dereferenceable(1024) %757, i8* nonnull align 8 dereferenceable(1024) %7, i32 1024, i1 false) #3
  br label %758

758:                                              ; preds = %758, %756
  %759 = phi i32 [ 0, %756 ], [ %765, %758 ]
  %760 = getelementptr %struct.block_, %struct.block_* %4, i32 0, i32 0, i32 %759
  %761 = load i64, i64* %760, align 8
  %762 = getelementptr %struct.block_, %struct.block_* %2, i32 0, i32 0, i32 %759
  %763 = load i64, i64* %762, align 8
  %764 = xor i64 %763, %761
  store i64 %764, i64* %762, align 8
  %765 = add nuw nsw i32 %759, 1
  %766 = icmp eq i32 %765, 128
  br i1 %766, label %767, label %758

767:                                              ; preds = %758
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %7) #3
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %6) #3
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #1

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { argmemonly nounwind willreturn writeonly }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %10 = phi i32 [ 0, %3 ], [ %16, %9 ]
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,128))
infer %0

; *****
; For LLVM instruction:
;  %12 = load i64, i64* %11, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i64, i64* %13, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = xor i64 %14, %12
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %16 = add nuw nsw i32 %10, 1
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,128))
%1:i32 = addnw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %17 = icmp eq i32 %16, 128
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,128))
%1:i32 = addnw 1:i32, %0 (hasExternalUses)
%2:i1 = eq 128:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %20 = phi i32 [ 0, %18 ], [ %26, %19 ]
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,128))
infer %0

; *****
; For LLVM instruction:
;  %22 = load i64, i64* %21, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i64, i64* %23, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = xor i64 %24, %22
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %26 = add nuw nsw i32 %20, 1
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,128))
%1:i32 = addnw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %27 = icmp eq i32 %26, 128
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,128))
%1:i32 = addnw 1:i32, %0 (hasExternalUses)
%2:i1 = eq 128:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %29 = phi i32 [ %390, %28 ], [ 0, %19 ]
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,8))
infer %0

; *****
; For LLVM instruction:
;  %30 = shl nuw nsw i32 %29, 4
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,8))
%1:i32 = shlnw %0, 4:i32
infer %1

; *****
; For LLVM instruction:
;  %32 = load i64, i64* %31, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %33 = or i32 %30, 4
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,8))
%1:i32 = shlnw %0, 4:i32 (hasExternalUses)
%2:i32 = or 4:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %35 = load i64, i64* %34, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %36 = and i64 %35, 4294967295
; Looking for a replacement for:
%0:i64 = var
%1:i64 = and 4294967295:i64, %0
infer %1

; *****
; For LLVM instruction:
;  %37 = add i64 %35, %32
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %38 = shl i64 %32, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = shl %0, 1:i64
infer %1 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %39 = and i64 %38, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = shl %0, 1:i64
%2:i64 = and 8589934590:i64, %1
infer %2

; *****
; For LLVM instruction:
;  %40 = mul i64 %39, %36
; Looking for a replacement for:
%0:i64 = var
%1:i64 = and 4294967295:i64, %0
%2:i64 = var
%3:i64 = shl %2, 1:i64
%4:i64 = and 8589934590:i64, %3
%5:i64 = mul %1, %4
infer %5

; *****
; For LLVM instruction:
;  %41 = add i64 %37, %40
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
infer %7

; *****
; For LLVM instruction:
;  %42 = or i32 %30, 12
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,8))
%1:i32 = shlnw %0, 4:i32 (hasExternalUses)
%2:i32 = or 12:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %44 = load i64, i64* %43, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %45 = xor i64 %41, %44
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = add %1, %2
%4:i64 = and 4294967295:i64, %2
%5:i64 = shl %1, 1:i64
%6:i64 = and 8589934590:i64, %5
%7:i64 = mul %4, %6
%8:i64 = add %3, %7 (hasExternalUses)
%9:i64 = xor %0, %8
infer %9

; *****
; For LLVM instruction:
;  %46 = lshr i64 %45, 32
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = add %1, %2
%4:i64 = and 4294967295:i64, %2
%5:i64 = shl %1, 1:i64
%6:i64 = and 8589934590:i64, %5
%7:i64 = mul %4, %6
%8:i64 = add %3, %7 (hasExternalUses)
%9:i64 = xor %0, %8 (hasExternalUses)
%10:i64 = lshr %9, 32:i64
infer %10

; *****
; For LLVM instruction:
;  %47 = shl i64 %45, 32
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = add %1, %2
%4:i64 = and 4294967295:i64, %2
%5:i64 = shl %1, 1:i64
%6:i64 = and 8589934590:i64, %5
%7:i64 = mul %4, %6
%8:i64 = add %3, %7 (hasExternalUses)
%9:i64 = xor %0, %8 (hasExternalUses)
%10:i64 = shl %9, 32:i64
infer %10

; *****
; For LLVM instruction:
;  %48 = or i64 %47, %46
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = add %1, %2
%4:i64 = and 4294967295:i64, %2
%5:i64 = shl %1, 1:i64
%6:i64 = and 8589934590:i64, %5
%7:i64 = mul %4, %6
%8:i64 = add %3, %7 (hasExternalUses)
%9:i64 = xor %0, %8
%10:i64 = shl %9, 32:i64
%11:i64 = lshr %9, 32:i64 (hasExternalUses)
%12:i64 = or %10, %11
infer %12

; *****
; For LLVM instruction:
;  %49 = or i32 %30, 8
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,8))
%1:i32 = shlnw %0, 4:i32 (hasExternalUses)
%2:i32 = or 8:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %51 = load i64, i64* %50, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %52 = add i64 %48, %51
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64 (hasExternalUses)
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %0, %13
infer %14

; *****
; For LLVM instruction:
;  %53 = shl i64 %51, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = shl %0, 1:i64
infer %1 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %54 = and i64 %53, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = shl %0, 1:i64
%2:i64 = and 8589934590:i64, %1
infer %2

; *****
; For LLVM instruction:
;  %55 = mul i64 %54, %46
; Looking for a replacement for:
%0:i64 = var
%1:i64 = shl %0, 1:i64
%2:i64 = and 8589934590:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = add %4, %5
%7:i64 = and 4294967295:i64, %5
%8:i64 = shl %4, 1:i64
%9:i64 = and 8589934590:i64, %8
%10:i64 = mul %7, %9
%11:i64 = add %6, %10 (hasExternalUses)
%12:i64 = xor %3, %11 (hasExternalUses)
%13:i64 = lshr %12, 32:i64 (hasExternalUses)
%14:i64 = mul %2, %13
infer %14

; *****
; For LLVM instruction:
;  %56 = add i64 %52, %55
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
infer %18

; *****
; For LLVM instruction:
;  %57 = xor i64 %56, %35
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %3, %0
%5:i64 = and 4294967295:i64, %0
%6:i64 = shl %3, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %2, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %1, %13
%15:i64 = shl %1, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %0, %18
infer %19

; *****
; For LLVM instruction:
;  %58 = lshr i64 %57, 24
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %3, %0
%5:i64 = and 4294967295:i64, %0
%6:i64 = shl %3, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %2, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %1, %13
%15:i64 = shl %1, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %0, %18 (hasExternalUses)
%20:i64 = lshr %19, 24:i64
infer %20

; *****
; For LLVM instruction:
;  %59 = shl i64 %57, 40
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %3, %0
%5:i64 = and 4294967295:i64, %0
%6:i64 = shl %3, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %2, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %1, %13
%15:i64 = shl %1, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %0, %18 (hasExternalUses)
%20:i64 = shl %19, 40:i64
infer %20

; *****
; For LLVM instruction:
;  %60 = or i64 %59, %58
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %3, %0
%5:i64 = and 4294967295:i64, %0
%6:i64 = shl %3, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %2, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %1, %13
%15:i64 = shl %1, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %0, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64 (hasExternalUses)
%22:i64 = or %20, %21
infer %22

; *****
; For LLVM instruction:
;  %61 = and i64 %58, 4294967295
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %3, %0
%5:i64 = and 4294967295:i64, %0
%6:i64 = shl %3, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %2, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %1, %13
%15:i64 = shl %1, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %0, %18 (hasExternalUses)
%20:i64 = lshr %19, 24:i64 (hasExternalUses)
%21:i64 = and 4294967295:i64, %20
infer %21

; *****
; For LLVM instruction:
;  %62 = add i64 %60, %41
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6 (hasExternalUses)
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64 (hasExternalUses)
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
infer %23

; *****
; For LLVM instruction:
;  %63 = shl i64 %41, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6 (hasExternalUses)
%8:i64 = shl %7, 1:i64
infer %8 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %64 = and i64 %63, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6 (hasExternalUses)
%8:i64 = shl %7, 1:i64
%9:i64 = and 8589934590:i64, %8
infer %9

; *****
; For LLVM instruction:
;  %65 = mul i64 %61, %64
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %3, %0
%5:i64 = and 4294967295:i64, %0
%6:i64 = shl %3, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %2, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %1, %13
%15:i64 = shl %1, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %0, %18 (hasExternalUses)
%20:i64 = lshr %19, 24:i64 (hasExternalUses)
%21:i64 = and 4294967295:i64, %20
%22:i64 = shl %9, 1:i64
%23:i64 = and 8589934590:i64, %22
%24:i64 = mul %21, %23
infer %24

; *****
; For LLVM instruction:
;  %66 = add i64 %62, %65
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27
infer %28

; *****
; For LLVM instruction:
;  %67 = xor i64 %66, %48
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
infer %29

; *****
; For LLVM instruction:
;  %68 = lshr i64 %67, 16
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13 (hasExternalUses)
%30:i64 = lshr %29, 16:i64
infer %30

; *****
; For LLVM instruction:
;  %69 = shl i64 %67, 48
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13 (hasExternalUses)
%30:i64 = shl %29, 48:i64
infer %30

; *****
; For LLVM instruction:
;  %70 = or i64 %69, %68
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64 (hasExternalUses)
%32:i64 = or %30, %31
infer %32

; *****
; For LLVM instruction:
;  %71 = and i64 %68, 4294967295
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13 (hasExternalUses)
%30:i64 = lshr %29, 16:i64 (hasExternalUses)
%31:i64 = and 4294967295:i64, %30
infer %31

; *****
; For LLVM instruction:
;  %72 = add i64 %70, %56
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64 (hasExternalUses)
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
infer %33

; *****
; For LLVM instruction:
;  %73 = shl i64 %56, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = shl %18, 1:i64
infer %19 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %74 = and i64 %73, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = shl %18, 1:i64
%20:i64 = and 8589934590:i64, %19
infer %20

; *****
; For LLVM instruction:
;  %75 = mul i64 %71, %74
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13 (hasExternalUses)
%30:i64 = lshr %29, 16:i64 (hasExternalUses)
%31:i64 = and 4294967295:i64, %30
%32:i64 = shl %18, 1:i64
%33:i64 = and 8589934590:i64, %32
%34:i64 = mul %31, %33
infer %34

; *****
; For LLVM instruction:
;  %76 = add i64 %72, %75
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
infer %38

; *****
; For LLVM instruction:
;  %77 = xor i64 %76, %60
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = xor %38, %22
infer %39

; *****
; For LLVM instruction:
;  %78 = lshr i64 %77, 63
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = xor %38, %22 (hasExternalUses)
%40:i64 = lshr %39, 63:i64
infer %40

; *****
; For LLVM instruction:
;  %79 = shl i64 %77, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = xor %38, %22 (hasExternalUses)
%40:i64 = shl %39, 1:i64
infer %40

; *****
; For LLVM instruction:
;  %80 = or i64 %79, %78
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = xor %38, %22
%40:i64 = shl %39, 1:i64
%41:i64 = lshr %39, 63:i64
%42:i64 = or %40, %41
infer %42

; *****
; For LLVM instruction:
;  %81 = or i32 %30, 1
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,8))
%1:i32 = shlnw %0, 4:i32 (hasExternalUses)
%2:i32 = or 1:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %83 = load i64, i64* %82, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %84 = or i32 %30, 5
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,8))
%1:i32 = shlnw %0, 4:i32 (hasExternalUses)
%2:i32 = or 5:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %86 = load i64, i64* %85, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %87 = and i64 %86, 4294967295
; Looking for a replacement for:
%0:i64 = var
%1:i64 = and 4294967295:i64, %0
infer %1

; *****
; For LLVM instruction:
;  %88 = add i64 %86, %83
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %89 = shl i64 %83, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = shl %0, 1:i64
infer %1 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %90 = and i64 %89, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = shl %0, 1:i64
%2:i64 = and 8589934590:i64, %1
infer %2

; *****
; For LLVM instruction:
;  %91 = mul i64 %90, %87
; Looking for a replacement for:
%0:i64 = var
%1:i64 = and 4294967295:i64, %0
%2:i64 = var
%3:i64 = shl %2, 1:i64
%4:i64 = and 8589934590:i64, %3
%5:i64 = mul %1, %4
infer %5

; *****
; For LLVM instruction:
;  %92 = add i64 %88, %91
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
infer %7

; *****
; For LLVM instruction:
;  %93 = or i32 %30, 13
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,8))
%1:i32 = shlnw %0, 4:i32 (hasExternalUses)
%2:i32 = or 13:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %95 = load i64, i64* %94, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %96 = xor i64 %92, %95
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = add %1, %2
%4:i64 = and 4294967295:i64, %2
%5:i64 = shl %1, 1:i64
%6:i64 = and 8589934590:i64, %5
%7:i64 = mul %4, %6
%8:i64 = add %3, %7 (hasExternalUses)
%9:i64 = xor %0, %8
infer %9

; *****
; For LLVM instruction:
;  %97 = lshr i64 %96, 32
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = add %1, %2
%4:i64 = and 4294967295:i64, %2
%5:i64 = shl %1, 1:i64
%6:i64 = and 8589934590:i64, %5
%7:i64 = mul %4, %6
%8:i64 = add %3, %7 (hasExternalUses)
%9:i64 = xor %0, %8 (hasExternalUses)
%10:i64 = lshr %9, 32:i64
infer %10

; *****
; For LLVM instruction:
;  %98 = shl i64 %96, 32
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = add %1, %2
%4:i64 = and 4294967295:i64, %2
%5:i64 = shl %1, 1:i64
%6:i64 = and 8589934590:i64, %5
%7:i64 = mul %4, %6
%8:i64 = add %3, %7 (hasExternalUses)
%9:i64 = xor %0, %8 (hasExternalUses)
%10:i64 = shl %9, 32:i64
infer %10

; *****
; For LLVM instruction:
;  %99 = or i64 %98, %97
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = add %1, %2
%4:i64 = and 4294967295:i64, %2
%5:i64 = shl %1, 1:i64
%6:i64 = and 8589934590:i64, %5
%7:i64 = mul %4, %6
%8:i64 = add %3, %7 (hasExternalUses)
%9:i64 = xor %0, %8
%10:i64 = shl %9, 32:i64
%11:i64 = lshr %9, 32:i64 (hasExternalUses)
%12:i64 = or %10, %11
infer %12

; *****
; For LLVM instruction:
;  %100 = or i32 %30, 9
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,8))
%1:i32 = shlnw %0, 4:i32 (hasExternalUses)
%2:i32 = or 9:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %102 = load i64, i64* %101, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %103 = add i64 %99, %102
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64 (hasExternalUses)
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %0, %13
infer %14

; *****
; For LLVM instruction:
;  %104 = shl i64 %102, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = shl %0, 1:i64
infer %1 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %105 = and i64 %104, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = shl %0, 1:i64
%2:i64 = and 8589934590:i64, %1
infer %2

; *****
; For LLVM instruction:
;  %106 = mul i64 %105, %97
; Looking for a replacement for:
%0:i64 = var
%1:i64 = shl %0, 1:i64
%2:i64 = and 8589934590:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = add %4, %5
%7:i64 = and 4294967295:i64, %5
%8:i64 = shl %4, 1:i64
%9:i64 = and 8589934590:i64, %8
%10:i64 = mul %7, %9
%11:i64 = add %6, %10 (hasExternalUses)
%12:i64 = xor %3, %11 (hasExternalUses)
%13:i64 = lshr %12, 32:i64 (hasExternalUses)
%14:i64 = mul %2, %13
infer %14

; *****
; For LLVM instruction:
;  %107 = add i64 %103, %106
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
infer %18

; *****
; For LLVM instruction:
;  %108 = xor i64 %107, %86
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %3, %0
%5:i64 = and 4294967295:i64, %0
%6:i64 = shl %3, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %2, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %1, %13
%15:i64 = shl %1, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %0, %18
infer %19

; *****
; For LLVM instruction:
;  %109 = lshr i64 %108, 24
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %3, %0
%5:i64 = and 4294967295:i64, %0
%6:i64 = shl %3, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %2, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %1, %13
%15:i64 = shl %1, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %0, %18 (hasExternalUses)
%20:i64 = lshr %19, 24:i64
infer %20

; *****
; For LLVM instruction:
;  %110 = shl i64 %108, 40
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %3, %0
%5:i64 = and 4294967295:i64, %0
%6:i64 = shl %3, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %2, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %1, %13
%15:i64 = shl %1, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %0, %18 (hasExternalUses)
%20:i64 = shl %19, 40:i64
infer %20

; *****
; For LLVM instruction:
;  %111 = or i64 %110, %109
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %3, %0
%5:i64 = and 4294967295:i64, %0
%6:i64 = shl %3, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %2, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %1, %13
%15:i64 = shl %1, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %0, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64 (hasExternalUses)
%22:i64 = or %20, %21
infer %22

; *****
; For LLVM instruction:
;  %112 = and i64 %109, 4294967295
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %3, %0
%5:i64 = and 4294967295:i64, %0
%6:i64 = shl %3, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %2, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %1, %13
%15:i64 = shl %1, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %0, %18 (hasExternalUses)
%20:i64 = lshr %19, 24:i64 (hasExternalUses)
%21:i64 = and 4294967295:i64, %20
infer %21

; *****
; For LLVM instruction:
;  %113 = add i64 %111, %92
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6 (hasExternalUses)
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64 (hasExternalUses)
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
infer %23

; *****
; For LLVM instruction:
;  %114 = shl i64 %92, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6 (hasExternalUses)
%8:i64 = shl %7, 1:i64
infer %8 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %115 = and i64 %114, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6 (hasExternalUses)
%8:i64 = shl %7, 1:i64
%9:i64 = and 8589934590:i64, %8
infer %9

; *****
; For LLVM instruction:
;  %116 = mul i64 %112, %115
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %3, %0
%5:i64 = and 4294967295:i64, %0
%6:i64 = shl %3, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %2, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %1, %13
%15:i64 = shl %1, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %0, %18 (hasExternalUses)
%20:i64 = lshr %19, 24:i64 (hasExternalUses)
%21:i64 = and 4294967295:i64, %20
%22:i64 = shl %9, 1:i64
%23:i64 = and 8589934590:i64, %22
%24:i64 = mul %21, %23
infer %24

; *****
; For LLVM instruction:
;  %117 = add i64 %113, %116
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27
infer %28

; *****
; For LLVM instruction:
;  %118 = xor i64 %117, %99
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
infer %29

; *****
; For LLVM instruction:
;  %119 = lshr i64 %118, 16
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13 (hasExternalUses)
%30:i64 = lshr %29, 16:i64
infer %30

; *****
; For LLVM instruction:
;  %120 = shl i64 %118, 48
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13 (hasExternalUses)
%30:i64 = shl %29, 48:i64
infer %30

; *****
; For LLVM instruction:
;  %121 = or i64 %120, %119
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64 (hasExternalUses)
%32:i64 = or %30, %31
infer %32

; *****
; For LLVM instruction:
;  %122 = and i64 %119, 4294967295
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13 (hasExternalUses)
%30:i64 = lshr %29, 16:i64 (hasExternalUses)
%31:i64 = and 4294967295:i64, %30
infer %31

; *****
; For LLVM instruction:
;  %123 = add i64 %121, %107
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64 (hasExternalUses)
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
infer %33

; *****
; For LLVM instruction:
;  %124 = shl i64 %107, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = shl %18, 1:i64
infer %19 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %125 = and i64 %124, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = shl %18, 1:i64
%20:i64 = and 8589934590:i64, %19
infer %20

; *****
; For LLVM instruction:
;  %126 = mul i64 %122, %125
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13 (hasExternalUses)
%30:i64 = lshr %29, 16:i64 (hasExternalUses)
%31:i64 = and 4294967295:i64, %30
%32:i64 = shl %18, 1:i64
%33:i64 = and 8589934590:i64, %32
%34:i64 = mul %31, %33
infer %34

; *****
; For LLVM instruction:
;  %127 = add i64 %123, %126
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
infer %38

; *****
; For LLVM instruction:
;  %128 = xor i64 %127, %111
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = xor %38, %22
infer %39

; *****
; For LLVM instruction:
;  %129 = lshr i64 %128, 63
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = xor %38, %22 (hasExternalUses)
%40:i64 = lshr %39, 63:i64
infer %40

; *****
; For LLVM instruction:
;  %130 = shl i64 %128, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = xor %38, %22 (hasExternalUses)
%40:i64 = shl %39, 1:i64
infer %40

; *****
; For LLVM instruction:
;  %131 = or i64 %130, %129
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = xor %38, %22
%40:i64 = shl %39, 1:i64
%41:i64 = lshr %39, 63:i64
%42:i64 = or %40, %41
infer %42

; *****
; For LLVM instruction:
;  %132 = or i32 %30, 2
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,8))
%1:i32 = shlnw %0, 4:i32 (hasExternalUses)
%2:i32 = or 2:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %134 = load i64, i64* %133, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %135 = or i32 %30, 6
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,8))
%1:i32 = shlnw %0, 4:i32 (hasExternalUses)
%2:i32 = or 6:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %137 = load i64, i64* %136, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %138 = and i64 %137, 4294967295
; Looking for a replacement for:
%0:i64 = var
%1:i64 = and 4294967295:i64, %0
infer %1

; *****
; For LLVM instruction:
;  %139 = add i64 %137, %134
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %140 = shl i64 %134, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = shl %0, 1:i64
infer %1 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %141 = and i64 %140, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = shl %0, 1:i64
%2:i64 = and 8589934590:i64, %1
infer %2

; *****
; For LLVM instruction:
;  %142 = mul i64 %141, %138
; Looking for a replacement for:
%0:i64 = var
%1:i64 = and 4294967295:i64, %0
%2:i64 = var
%3:i64 = shl %2, 1:i64
%4:i64 = and 8589934590:i64, %3
%5:i64 = mul %1, %4
infer %5

; *****
; For LLVM instruction:
;  %143 = add i64 %139, %142
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
infer %7

; *****
; For LLVM instruction:
;  %144 = or i32 %30, 14
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,8))
%1:i32 = shlnw %0, 4:i32 (hasExternalUses)
%2:i32 = or 14:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %146 = load i64, i64* %145, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %147 = xor i64 %143, %146
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = add %1, %2
%4:i64 = and 4294967295:i64, %2
%5:i64 = shl %1, 1:i64
%6:i64 = and 8589934590:i64, %5
%7:i64 = mul %4, %6
%8:i64 = add %3, %7 (hasExternalUses)
%9:i64 = xor %0, %8
infer %9

; *****
; For LLVM instruction:
;  %148 = lshr i64 %147, 32
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = add %1, %2
%4:i64 = and 4294967295:i64, %2
%5:i64 = shl %1, 1:i64
%6:i64 = and 8589934590:i64, %5
%7:i64 = mul %4, %6
%8:i64 = add %3, %7 (hasExternalUses)
%9:i64 = xor %0, %8 (hasExternalUses)
%10:i64 = lshr %9, 32:i64
infer %10

; *****
; For LLVM instruction:
;  %149 = shl i64 %147, 32
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = add %1, %2
%4:i64 = and 4294967295:i64, %2
%5:i64 = shl %1, 1:i64
%6:i64 = and 8589934590:i64, %5
%7:i64 = mul %4, %6
%8:i64 = add %3, %7 (hasExternalUses)
%9:i64 = xor %0, %8 (hasExternalUses)
%10:i64 = shl %9, 32:i64
infer %10

; *****
; For LLVM instruction:
;  %150 = or i64 %149, %148
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = add %1, %2
%4:i64 = and 4294967295:i64, %2
%5:i64 = shl %1, 1:i64
%6:i64 = and 8589934590:i64, %5
%7:i64 = mul %4, %6
%8:i64 = add %3, %7 (hasExternalUses)
%9:i64 = xor %0, %8
%10:i64 = shl %9, 32:i64
%11:i64 = lshr %9, 32:i64 (hasExternalUses)
%12:i64 = or %10, %11
infer %12

; *****
; For LLVM instruction:
;  %151 = or i32 %30, 10
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,8))
%1:i32 = shlnw %0, 4:i32 (hasExternalUses)
%2:i32 = or 10:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %153 = load i64, i64* %152, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %154 = add i64 %150, %153
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64 (hasExternalUses)
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %0, %13
infer %14

; *****
; For LLVM instruction:
;  %155 = shl i64 %153, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = shl %0, 1:i64
infer %1 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %156 = and i64 %155, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = shl %0, 1:i64
%2:i64 = and 8589934590:i64, %1
infer %2

; *****
; For LLVM instruction:
;  %157 = mul i64 %156, %148
; Looking for a replacement for:
%0:i64 = var
%1:i64 = shl %0, 1:i64
%2:i64 = and 8589934590:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = add %4, %5
%7:i64 = and 4294967295:i64, %5
%8:i64 = shl %4, 1:i64
%9:i64 = and 8589934590:i64, %8
%10:i64 = mul %7, %9
%11:i64 = add %6, %10 (hasExternalUses)
%12:i64 = xor %3, %11 (hasExternalUses)
%13:i64 = lshr %12, 32:i64 (hasExternalUses)
%14:i64 = mul %2, %13
infer %14

; *****
; For LLVM instruction:
;  %158 = add i64 %154, %157
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
infer %18

; *****
; For LLVM instruction:
;  %159 = xor i64 %158, %137
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %3, %0
%5:i64 = and 4294967295:i64, %0
%6:i64 = shl %3, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %2, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %1, %13
%15:i64 = shl %1, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %0, %18
infer %19

; *****
; For LLVM instruction:
;  %160 = lshr i64 %159, 24
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %3, %0
%5:i64 = and 4294967295:i64, %0
%6:i64 = shl %3, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %2, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %1, %13
%15:i64 = shl %1, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %0, %18 (hasExternalUses)
%20:i64 = lshr %19, 24:i64
infer %20

; *****
; For LLVM instruction:
;  %161 = shl i64 %159, 40
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %3, %0
%5:i64 = and 4294967295:i64, %0
%6:i64 = shl %3, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %2, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %1, %13
%15:i64 = shl %1, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %0, %18 (hasExternalUses)
%20:i64 = shl %19, 40:i64
infer %20

; *****
; For LLVM instruction:
;  %162 = or i64 %161, %160
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %3, %0
%5:i64 = and 4294967295:i64, %0
%6:i64 = shl %3, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %2, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %1, %13
%15:i64 = shl %1, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %0, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64 (hasExternalUses)
%22:i64 = or %20, %21
infer %22

; *****
; For LLVM instruction:
;  %163 = and i64 %160, 4294967295
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %3, %0
%5:i64 = and 4294967295:i64, %0
%6:i64 = shl %3, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %2, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %1, %13
%15:i64 = shl %1, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %0, %18 (hasExternalUses)
%20:i64 = lshr %19, 24:i64 (hasExternalUses)
%21:i64 = and 4294967295:i64, %20
infer %21

; *****
; For LLVM instruction:
;  %164 = add i64 %162, %143
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6 (hasExternalUses)
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64 (hasExternalUses)
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
infer %23

; *****
; For LLVM instruction:
;  %165 = shl i64 %143, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6 (hasExternalUses)
%8:i64 = shl %7, 1:i64
infer %8 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %166 = and i64 %165, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6 (hasExternalUses)
%8:i64 = shl %7, 1:i64
%9:i64 = and 8589934590:i64, %8
infer %9

; *****
; For LLVM instruction:
;  %167 = mul i64 %163, %166
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %3, %0
%5:i64 = and 4294967295:i64, %0
%6:i64 = shl %3, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %2, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %1, %13
%15:i64 = shl %1, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %0, %18 (hasExternalUses)
%20:i64 = lshr %19, 24:i64 (hasExternalUses)
%21:i64 = and 4294967295:i64, %20
%22:i64 = shl %9, 1:i64
%23:i64 = and 8589934590:i64, %22
%24:i64 = mul %21, %23
infer %24

; *****
; For LLVM instruction:
;  %168 = add i64 %164, %167
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27
infer %28

; *****
; For LLVM instruction:
;  %169 = xor i64 %168, %150
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
infer %29

; *****
; For LLVM instruction:
;  %170 = lshr i64 %169, 16
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13 (hasExternalUses)
%30:i64 = lshr %29, 16:i64
infer %30

; *****
; For LLVM instruction:
;  %171 = shl i64 %169, 48
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13 (hasExternalUses)
%30:i64 = shl %29, 48:i64
infer %30

; *****
; For LLVM instruction:
;  %172 = or i64 %171, %170
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64 (hasExternalUses)
%32:i64 = or %30, %31
infer %32

; *****
; For LLVM instruction:
;  %173 = and i64 %170, 4294967295
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13 (hasExternalUses)
%30:i64 = lshr %29, 16:i64 (hasExternalUses)
%31:i64 = and 4294967295:i64, %30
infer %31

; *****
; For LLVM instruction:
;  %174 = add i64 %172, %158
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64 (hasExternalUses)
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
infer %33

; *****
; For LLVM instruction:
;  %175 = shl i64 %158, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = shl %18, 1:i64
infer %19 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %176 = and i64 %175, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = shl %18, 1:i64
%20:i64 = and 8589934590:i64, %19
infer %20

; *****
; For LLVM instruction:
;  %177 = mul i64 %173, %176
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13 (hasExternalUses)
%30:i64 = lshr %29, 16:i64 (hasExternalUses)
%31:i64 = and 4294967295:i64, %30
%32:i64 = shl %18, 1:i64
%33:i64 = and 8589934590:i64, %32
%34:i64 = mul %31, %33
infer %34

; *****
; For LLVM instruction:
;  %178 = add i64 %174, %177
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
infer %38

; *****
; For LLVM instruction:
;  %179 = xor i64 %178, %162
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = xor %38, %22
infer %39

; *****
; For LLVM instruction:
;  %180 = lshr i64 %179, 63
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = xor %38, %22 (hasExternalUses)
%40:i64 = lshr %39, 63:i64
infer %40

; *****
; For LLVM instruction:
;  %181 = shl i64 %179, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = xor %38, %22 (hasExternalUses)
%40:i64 = shl %39, 1:i64
infer %40

; *****
; For LLVM instruction:
;  %182 = or i64 %181, %180
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = xor %38, %22
%40:i64 = shl %39, 1:i64
%41:i64 = lshr %39, 63:i64
%42:i64 = or %40, %41
infer %42

; *****
; For LLVM instruction:
;  %183 = or i32 %30, 3
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,8))
%1:i32 = shlnw %0, 4:i32 (hasExternalUses)
%2:i32 = or 3:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %185 = load i64, i64* %184, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %186 = or i32 %30, 7
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,8))
%1:i32 = shlnw %0, 4:i32 (hasExternalUses)
%2:i32 = or 7:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %188 = load i64, i64* %187, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %189 = and i64 %188, 4294967295
; Looking for a replacement for:
%0:i64 = var
%1:i64 = and 4294967295:i64, %0
infer %1

; *****
; For LLVM instruction:
;  %190 = add i64 %188, %185
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %191 = shl i64 %185, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = shl %0, 1:i64
infer %1 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %192 = and i64 %191, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = shl %0, 1:i64
%2:i64 = and 8589934590:i64, %1
infer %2

; *****
; For LLVM instruction:
;  %193 = mul i64 %192, %189
; Looking for a replacement for:
%0:i64 = var
%1:i64 = and 4294967295:i64, %0
%2:i64 = var
%3:i64 = shl %2, 1:i64
%4:i64 = and 8589934590:i64, %3
%5:i64 = mul %1, %4
infer %5

; *****
; For LLVM instruction:
;  %194 = add i64 %190, %193
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
infer %7

; *****
; For LLVM instruction:
;  %195 = or i32 %30, 15
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,8))
%1:i32 = shlnw %0, 4:i32 (hasExternalUses)
%2:i32 = or 15:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %197 = load i64, i64* %196, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %198 = xor i64 %194, %197
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = add %1, %2
%4:i64 = and 4294967295:i64, %2
%5:i64 = shl %1, 1:i64
%6:i64 = and 8589934590:i64, %5
%7:i64 = mul %4, %6
%8:i64 = add %3, %7 (hasExternalUses)
%9:i64 = xor %0, %8
infer %9

; *****
; For LLVM instruction:
;  %199 = lshr i64 %198, 32
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = add %1, %2
%4:i64 = and 4294967295:i64, %2
%5:i64 = shl %1, 1:i64
%6:i64 = and 8589934590:i64, %5
%7:i64 = mul %4, %6
%8:i64 = add %3, %7 (hasExternalUses)
%9:i64 = xor %0, %8 (hasExternalUses)
%10:i64 = lshr %9, 32:i64
infer %10

; *****
; For LLVM instruction:
;  %200 = shl i64 %198, 32
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = add %1, %2
%4:i64 = and 4294967295:i64, %2
%5:i64 = shl %1, 1:i64
%6:i64 = and 8589934590:i64, %5
%7:i64 = mul %4, %6
%8:i64 = add %3, %7 (hasExternalUses)
%9:i64 = xor %0, %8 (hasExternalUses)
%10:i64 = shl %9, 32:i64
infer %10

; *****
; For LLVM instruction:
;  %201 = or i64 %200, %199
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = add %1, %2
%4:i64 = and 4294967295:i64, %2
%5:i64 = shl %1, 1:i64
%6:i64 = and 8589934590:i64, %5
%7:i64 = mul %4, %6
%8:i64 = add %3, %7 (hasExternalUses)
%9:i64 = xor %0, %8
%10:i64 = shl %9, 32:i64
%11:i64 = lshr %9, 32:i64 (hasExternalUses)
%12:i64 = or %10, %11
infer %12

; *****
; For LLVM instruction:
;  %202 = or i32 %30, 11
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,8))
%1:i32 = shlnw %0, 4:i32 (hasExternalUses)
%2:i32 = or 11:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %204 = load i64, i64* %203, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %205 = add i64 %201, %204
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64 (hasExternalUses)
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %0, %13
infer %14

; *****
; For LLVM instruction:
;  %206 = shl i64 %204, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = shl %0, 1:i64
infer %1 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %207 = and i64 %206, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = shl %0, 1:i64
%2:i64 = and 8589934590:i64, %1
infer %2

; *****
; For LLVM instruction:
;  %208 = mul i64 %207, %199
; Looking for a replacement for:
%0:i64 = var
%1:i64 = shl %0, 1:i64
%2:i64 = and 8589934590:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = add %4, %5
%7:i64 = and 4294967295:i64, %5
%8:i64 = shl %4, 1:i64
%9:i64 = and 8589934590:i64, %8
%10:i64 = mul %7, %9
%11:i64 = add %6, %10 (hasExternalUses)
%12:i64 = xor %3, %11 (hasExternalUses)
%13:i64 = lshr %12, 32:i64 (hasExternalUses)
%14:i64 = mul %2, %13
infer %14

; *****
; For LLVM instruction:
;  %209 = add i64 %205, %208
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
infer %18

; *****
; For LLVM instruction:
;  %210 = xor i64 %209, %188
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %3, %0
%5:i64 = and 4294967295:i64, %0
%6:i64 = shl %3, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %2, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %1, %13
%15:i64 = shl %1, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %0, %18
infer %19

; *****
; For LLVM instruction:
;  %211 = lshr i64 %210, 24
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %3, %0
%5:i64 = and 4294967295:i64, %0
%6:i64 = shl %3, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %2, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %1, %13
%15:i64 = shl %1, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %0, %18 (hasExternalUses)
%20:i64 = lshr %19, 24:i64
infer %20

; *****
; For LLVM instruction:
;  %212 = shl i64 %210, 40
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %3, %0
%5:i64 = and 4294967295:i64, %0
%6:i64 = shl %3, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %2, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %1, %13
%15:i64 = shl %1, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %0, %18 (hasExternalUses)
%20:i64 = shl %19, 40:i64
infer %20

; *****
; For LLVM instruction:
;  %213 = or i64 %212, %211
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %3, %0
%5:i64 = and 4294967295:i64, %0
%6:i64 = shl %3, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %2, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %1, %13
%15:i64 = shl %1, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %0, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64 (hasExternalUses)
%22:i64 = or %20, %21
infer %22

; *****
; For LLVM instruction:
;  %214 = and i64 %211, 4294967295
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %3, %0
%5:i64 = and 4294967295:i64, %0
%6:i64 = shl %3, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %2, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %1, %13
%15:i64 = shl %1, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %0, %18 (hasExternalUses)
%20:i64 = lshr %19, 24:i64 (hasExternalUses)
%21:i64 = and 4294967295:i64, %20
infer %21

; *****
; For LLVM instruction:
;  %215 = add i64 %213, %194
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6 (hasExternalUses)
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64 (hasExternalUses)
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
infer %23

; *****
; For LLVM instruction:
;  %216 = shl i64 %194, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6 (hasExternalUses)
%8:i64 = shl %7, 1:i64
infer %8 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %217 = and i64 %216, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6 (hasExternalUses)
%8:i64 = shl %7, 1:i64
%9:i64 = and 8589934590:i64, %8
infer %9

; *****
; For LLVM instruction:
;  %218 = mul i64 %214, %217
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %3, %0
%5:i64 = and 4294967295:i64, %0
%6:i64 = shl %3, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %2, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %1, %13
%15:i64 = shl %1, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %0, %18 (hasExternalUses)
%20:i64 = lshr %19, 24:i64 (hasExternalUses)
%21:i64 = and 4294967295:i64, %20
%22:i64 = shl %9, 1:i64
%23:i64 = and 8589934590:i64, %22
%24:i64 = mul %21, %23
infer %24

; *****
; For LLVM instruction:
;  %219 = add i64 %215, %218
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27
infer %28

; *****
; For LLVM instruction:
;  %220 = xor i64 %219, %201
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
infer %29

; *****
; For LLVM instruction:
;  %221 = lshr i64 %220, 16
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13 (hasExternalUses)
%30:i64 = lshr %29, 16:i64
infer %30

; *****
; For LLVM instruction:
;  %222 = shl i64 %220, 48
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13 (hasExternalUses)
%30:i64 = shl %29, 48:i64
infer %30

; *****
; For LLVM instruction:
;  %223 = or i64 %222, %221
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64 (hasExternalUses)
%32:i64 = or %30, %31
infer %32

; *****
; For LLVM instruction:
;  %224 = and i64 %221, 4294967295
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13 (hasExternalUses)
%30:i64 = lshr %29, 16:i64 (hasExternalUses)
%31:i64 = and 4294967295:i64, %30
infer %31

; *****
; For LLVM instruction:
;  %225 = add i64 %223, %209
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64 (hasExternalUses)
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
infer %33

; *****
; For LLVM instruction:
;  %226 = shl i64 %209, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = shl %18, 1:i64
infer %19 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %227 = and i64 %226, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = shl %18, 1:i64
%20:i64 = and 8589934590:i64, %19
infer %20

; *****
; For LLVM instruction:
;  %228 = mul i64 %224, %227
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13 (hasExternalUses)
%30:i64 = lshr %29, 16:i64 (hasExternalUses)
%31:i64 = and 4294967295:i64, %30
%32:i64 = shl %18, 1:i64
%33:i64 = and 8589934590:i64, %32
%34:i64 = mul %31, %33
infer %34

; *****
; For LLVM instruction:
;  %229 = add i64 %225, %228
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
infer %38

; *****
; For LLVM instruction:
;  %230 = xor i64 %229, %213
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = xor %38, %22
infer %39

; *****
; For LLVM instruction:
;  %231 = lshr i64 %230, 63
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = xor %38, %22 (hasExternalUses)
%40:i64 = lshr %39, 63:i64
infer %40

; *****
; For LLVM instruction:
;  %232 = shl i64 %230, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = xor %38, %22 (hasExternalUses)
%40:i64 = shl %39, 1:i64
infer %40

; *****
; For LLVM instruction:
;  %233 = or i64 %232, %231
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = xor %38, %22
%40:i64 = shl %39, 1:i64
%41:i64 = lshr %39, 63:i64
%42:i64 = or %40, %41
infer %42

; *****
; For LLVM instruction:
;  %234 = and i64 %131, 4294967295
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = xor %38, %22
%40:i64 = shl %39, 1:i64
%41:i64 = lshr %39, 63:i64
%42:i64 = or %40, %41 (hasExternalUses)
%43:i64 = and 4294967295:i64, %42
infer %43

; *****
; For LLVM instruction:
;  %235 = add i64 %131, %66
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
infer %72

; *****
; For LLVM instruction:
;  %236 = shl i64 %66, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = shl %28, 1:i64
infer %29 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %237 = and i64 %236, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = shl %28, 1:i64
%30:i64 = and 8589934590:i64, %29
infer %30

; *****
; For LLVM instruction:
;  %238 = mul i64 %234, %237
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = xor %38, %22
%40:i64 = shl %39, 1:i64
%41:i64 = lshr %39, 63:i64
%42:i64 = or %40, %41 (hasExternalUses)
%43:i64 = and 4294967295:i64, %42
%44:i64 = var
%45:i64 = var
%46:i64 = add %44, %45
%47:i64 = and 4294967295:i64, %45
%48:i64 = shl %44, 1:i64
%49:i64 = and 8589934590:i64, %48
%50:i64 = mul %47, %49
%51:i64 = add %46, %50
%52:i64 = var
%53:i64 = var
%54:i64 = xor %53, %51
%55:i64 = shl %54, 32:i64
%56:i64 = lshr %54, 32:i64
%57:i64 = or %55, %56 (hasExternalUses)
%58:i64 = add %52, %57
%59:i64 = shl %52, 1:i64
%60:i64 = and 8589934590:i64, %59
%61:i64 = mul %60, %56
%62:i64 = add %58, %61 (hasExternalUses)
%63:i64 = xor %45, %62
%64:i64 = shl %63, 40:i64
%65:i64 = lshr %63, 24:i64
%66:i64 = or %64, %65 (hasExternalUses)
%67:i64 = add %51, %66
%68:i64 = and 4294967295:i64, %65
%69:i64 = shl %51, 1:i64
%70:i64 = and 8589934590:i64, %69
%71:i64 = mul %68, %70
%72:i64 = add %67, %71 (hasExternalUses)
%73:i64 = shl %72, 1:i64
%74:i64 = and 8589934590:i64, %73
%75:i64 = mul %43, %74
infer %75

; *****
; For LLVM instruction:
;  %239 = add i64 %235, %238
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
infer %77

; *****
; For LLVM instruction:
;  %240 = xor i64 %223, %239
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = var
%79:i64 = var
%80:i64 = add %78, %79
%81:i64 = and 4294967295:i64, %79
%82:i64 = shl %78, 1:i64
%83:i64 = and 8589934590:i64, %82
%84:i64 = mul %81, %83
%85:i64 = add %80, %84
%86:i64 = var
%87:i64 = var
%88:i64 = xor %87, %85
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %86, %91
%93:i64 = shl %86, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95 (hasExternalUses)
%97:i64 = xor %79, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %85, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %85, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64 (hasExternalUses)
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = xor %77, %110
infer %111

; *****
; For LLVM instruction:
;  %241 = lshr i64 %240, 32
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = var
%79:i64 = var
%80:i64 = add %78, %79
%81:i64 = and 4294967295:i64, %79
%82:i64 = shl %78, 1:i64
%83:i64 = and 8589934590:i64, %82
%84:i64 = mul %81, %83
%85:i64 = add %80, %84
%86:i64 = var
%87:i64 = var
%88:i64 = xor %87, %85
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %86, %91
%93:i64 = shl %86, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95 (hasExternalUses)
%97:i64 = xor %79, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %85, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %85, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64 (hasExternalUses)
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = xor %77, %110 (hasExternalUses)
%112:i64 = lshr %111, 32:i64
infer %112

; *****
; For LLVM instruction:
;  %242 = shl i64 %240, 32
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = var
%79:i64 = var
%80:i64 = add %78, %79
%81:i64 = and 4294967295:i64, %79
%82:i64 = shl %78, 1:i64
%83:i64 = and 8589934590:i64, %82
%84:i64 = mul %81, %83
%85:i64 = add %80, %84
%86:i64 = var
%87:i64 = var
%88:i64 = xor %87, %85
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %86, %91
%93:i64 = shl %86, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95 (hasExternalUses)
%97:i64 = xor %79, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %85, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %85, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64 (hasExternalUses)
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = xor %77, %110 (hasExternalUses)
%112:i64 = shl %111, 32:i64
infer %112

; *****
; For LLVM instruction:
;  %243 = or i64 %242, %241
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = var
%79:i64 = var
%80:i64 = add %78, %79
%81:i64 = and 4294967295:i64, %79
%82:i64 = shl %78, 1:i64
%83:i64 = and 8589934590:i64, %82
%84:i64 = mul %81, %83
%85:i64 = add %80, %84
%86:i64 = var
%87:i64 = var
%88:i64 = xor %87, %85
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %86, %91
%93:i64 = shl %86, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95 (hasExternalUses)
%97:i64 = xor %79, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %85, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %85, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64 (hasExternalUses)
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = xor %77, %110
%112:i64 = shl %111, 32:i64
%113:i64 = lshr %111, 32:i64 (hasExternalUses)
%114:i64 = or %112, %113
infer %114

; *****
; For LLVM instruction:
;  %244 = add i64 %243, %178
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64 (hasExternalUses)
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
infer %154

; *****
; For LLVM instruction:
;  %245 = shl i64 %178, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = shl %38, 1:i64
infer %39 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %246 = and i64 %245, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = shl %38, 1:i64
%40:i64 = and 8589934590:i64, %39
infer %40

; *****
; For LLVM instruction:
;  %247 = mul i64 %241, %246
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = shl %38, 1:i64
%40:i64 = and 8589934590:i64, %39
%41:i64 = var
%42:i64 = var
%43:i64 = add %41, %42
%44:i64 = and 4294967295:i64, %42
%45:i64 = shl %41, 1:i64
%46:i64 = and 8589934590:i64, %45
%47:i64 = mul %44, %46
%48:i64 = add %43, %47
%49:i64 = var
%50:i64 = var
%51:i64 = xor %50, %48
%52:i64 = shl %51, 32:i64
%53:i64 = lshr %51, 32:i64
%54:i64 = or %52, %53 (hasExternalUses)
%55:i64 = add %49, %54
%56:i64 = shl %49, 1:i64
%57:i64 = and 8589934590:i64, %56
%58:i64 = mul %57, %53
%59:i64 = add %55, %58 (hasExternalUses)
%60:i64 = xor %42, %59
%61:i64 = shl %60, 40:i64
%62:i64 = lshr %60, 24:i64
%63:i64 = or %61, %62 (hasExternalUses)
%64:i64 = add %48, %63
%65:i64 = and 4294967295:i64, %62
%66:i64 = shl %48, 1:i64
%67:i64 = and 8589934590:i64, %66
%68:i64 = mul %65, %67
%69:i64 = add %64, %68 (hasExternalUses)
%70:i64 = var
%71:i64 = var
%72:i64 = var
%73:i64 = var
%74:i64 = add %72, %73
%75:i64 = and 4294967295:i64, %73
%76:i64 = shl %72, 1:i64
%77:i64 = and 8589934590:i64, %76
%78:i64 = mul %75, %77
%79:i64 = add %74, %78
%80:i64 = xor %71, %79
%81:i64 = shl %80, 32:i64
%82:i64 = lshr %80, 32:i64
%83:i64 = or %81, %82
%84:i64 = add %70, %83
%85:i64 = shl %70, 1:i64
%86:i64 = and 8589934590:i64, %85
%87:i64 = mul %86, %82
%88:i64 = add %84, %87
%89:i64 = xor %73, %88
%90:i64 = shl %89, 40:i64
%91:i64 = lshr %89, 24:i64
%92:i64 = or %90, %91
%93:i64 = add %79, %92
%94:i64 = and 4294967295:i64, %91
%95:i64 = shl %79, 1:i64
%96:i64 = and 8589934590:i64, %95
%97:i64 = mul %94, %96
%98:i64 = add %93, %97 (hasExternalUses)
%99:i64 = xor %98, %83
%100:i64 = shl %99, 48:i64
%101:i64 = lshr %99, 16:i64
%102:i64 = or %100, %101 (hasExternalUses)
%103:i64 = add %88, %102
%104:i64 = and 4294967295:i64, %101
%105:i64 = shl %88, 1:i64
%106:i64 = and 8589934590:i64, %105
%107:i64 = mul %104, %106
%108:i64 = add %103, %107 (hasExternalUses)
%109:i64 = xor %108, %92
%110:i64 = shl %109, 1:i64
%111:i64 = lshr %109, 63:i64
%112:i64 = or %110, %111 (hasExternalUses)
%113:i64 = add %69, %112
%114:i64 = and 4294967295:i64, %112
%115:i64 = shl %69, 1:i64
%116:i64 = and 8589934590:i64, %115
%117:i64 = mul %114, %116
%118:i64 = add %113, %117 (hasExternalUses)
%119:i64 = var
%120:i64 = var
%121:i64 = add %119, %120
%122:i64 = and 4294967295:i64, %120
%123:i64 = shl %119, 1:i64
%124:i64 = and 8589934590:i64, %123
%125:i64 = mul %122, %124
%126:i64 = add %121, %125
%127:i64 = var
%128:i64 = var
%129:i64 = xor %128, %126
%130:i64 = shl %129, 32:i64
%131:i64 = lshr %129, 32:i64
%132:i64 = or %130, %131
%133:i64 = add %127, %132
%134:i64 = shl %127, 1:i64
%135:i64 = and 8589934590:i64, %134
%136:i64 = mul %135, %131
%137:i64 = add %133, %136 (hasExternalUses)
%138:i64 = xor %120, %137
%139:i64 = shl %138, 40:i64
%140:i64 = lshr %138, 24:i64
%141:i64 = or %139, %140 (hasExternalUses)
%142:i64 = add %126, %141
%143:i64 = and 4294967295:i64, %140
%144:i64 = shl %126, 1:i64
%145:i64 = and 8589934590:i64, %144
%146:i64 = mul %143, %145
%147:i64 = add %142, %146 (hasExternalUses)
%148:i64 = xor %147, %132
%149:i64 = shl %148, 48:i64
%150:i64 = lshr %148, 16:i64 (hasExternalUses)
%151:i64 = or %149, %150 (hasExternalUses)
%152:i64 = xor %118, %151 (hasExternalUses)
%153:i64 = lshr %152, 32:i64 (hasExternalUses)
%154:i64 = mul %40, %153
infer %154

; *****
; For LLVM instruction:
;  %248 = add i64 %244, %247
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157
infer %158

; *****
; For LLVM instruction:
;  %249 = xor i64 %248, %131
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110
infer %159

; *****
; For LLVM instruction:
;  %250 = lshr i64 %249, 24
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110 (hasExternalUses)
%160:i64 = lshr %159, 24:i64
infer %160

; *****
; For LLVM instruction:
;  %251 = shl i64 %249, 40
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110 (hasExternalUses)
%160:i64 = shl %159, 40:i64
infer %160

; *****
; For LLVM instruction:
;  %252 = or i64 %251, %250
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64 (hasExternalUses)
%162:i64 = or %160, %161
infer %162

; *****
; For LLVM instruction:
;  %253 = and i64 %250, 4294967295
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110 (hasExternalUses)
%160:i64 = lshr %159, 24:i64 (hasExternalUses)
%161:i64 = and 4294967295:i64, %160
infer %161

; *****
; For LLVM instruction:
;  %254 = add i64 %252, %239
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64 (hasExternalUses)
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
infer %163

; *****
; For LLVM instruction:
;  %255 = shl i64 %239, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = shl %77, 1:i64
infer %78 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %256 = and i64 %255, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = shl %77, 1:i64
%79:i64 = and 8589934590:i64, %78
infer %79

; *****
; For LLVM instruction:
;  %257 = mul i64 %253, %256
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110 (hasExternalUses)
%160:i64 = lshr %159, 24:i64 (hasExternalUses)
%161:i64 = and 4294967295:i64, %160
%162:i64 = shl %116, 1:i64
%163:i64 = and 8589934590:i64, %162
%164:i64 = mul %161, %163
infer %164

; *****
; For LLVM instruction:
;  %258 = add i64 %254, %257
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167
infer %168

; *****
; For LLVM instruction:
;  %259 = xor i64 %258, %243
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
infer %169

; *****
; For LLVM instruction:
;  %260 = lshr i64 %259, 16
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153 (hasExternalUses)
%170:i64 = lshr %169, 16:i64
infer %170

; *****
; For LLVM instruction:
;  %261 = shl i64 %259, 48
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153 (hasExternalUses)
%170:i64 = shl %169, 48:i64
infer %170

; *****
; For LLVM instruction:
;  %262 = or i64 %261, %260
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64 (hasExternalUses)
%172:i64 = or %170, %171
infer %172

; *****
; For LLVM instruction:
;  %263 = and i64 %260, 4294967295
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153 (hasExternalUses)
%170:i64 = lshr %169, 16:i64 (hasExternalUses)
%171:i64 = and 4294967295:i64, %170
infer %171

; *****
; For LLVM instruction:
;  %264 = add i64 %262, %248
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %116, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %116, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64 (hasExternalUses)
%172:i64 = or %170, %171 (hasExternalUses)
%173:i64 = add %158, %172
infer %173

; *****
; For LLVM instruction:
;  %265 = shl i64 %248, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = shl %158, 1:i64
infer %159 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %266 = and i64 %265, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = shl %158, 1:i64
%160:i64 = and 8589934590:i64, %159
infer %160

; *****
; For LLVM instruction:
;  %267 = mul i64 %263, %266
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153 (hasExternalUses)
%170:i64 = lshr %169, 16:i64 (hasExternalUses)
%171:i64 = and 4294967295:i64, %170
%172:i64 = shl %158, 1:i64
%173:i64 = and 8589934590:i64, %172
%174:i64 = mul %171, %173
infer %174

; *****
; For LLVM instruction:
;  %268 = add i64 %264, %267
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %116, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %116, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64
%172:i64 = or %170, %171 (hasExternalUses)
%173:i64 = add %158, %172
%174:i64 = and 4294967295:i64, %171
%175:i64 = shl %158, 1:i64
%176:i64 = and 8589934590:i64, %175
%177:i64 = mul %174, %176
%178:i64 = add %173, %177
infer %178

; *****
; For LLVM instruction:
;  %269 = xor i64 %268, %252
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161
%163:i64 = add %116, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %116, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64
%172:i64 = or %170, %171 (hasExternalUses)
%173:i64 = add %158, %172
%174:i64 = and 4294967295:i64, %171
%175:i64 = shl %158, 1:i64
%176:i64 = and 8589934590:i64, %175
%177:i64 = mul %174, %176
%178:i64 = add %173, %177 (hasExternalUses)
%179:i64 = xor %178, %162
infer %179

; *****
; For LLVM instruction:
;  %270 = lshr i64 %269, 63
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161
%163:i64 = add %116, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %116, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64
%172:i64 = or %170, %171 (hasExternalUses)
%173:i64 = add %158, %172
%174:i64 = and 4294967295:i64, %171
%175:i64 = shl %158, 1:i64
%176:i64 = and 8589934590:i64, %175
%177:i64 = mul %174, %176
%178:i64 = add %173, %177 (hasExternalUses)
%179:i64 = xor %178, %162 (hasExternalUses)
%180:i64 = lshr %179, 63:i64
infer %180

; *****
; For LLVM instruction:
;  %271 = shl i64 %269, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161
%163:i64 = add %116, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %116, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64
%172:i64 = or %170, %171 (hasExternalUses)
%173:i64 = add %158, %172
%174:i64 = and 4294967295:i64, %171
%175:i64 = shl %158, 1:i64
%176:i64 = and 8589934590:i64, %175
%177:i64 = mul %174, %176
%178:i64 = add %173, %177 (hasExternalUses)
%179:i64 = xor %178, %162 (hasExternalUses)
%180:i64 = shl %179, 1:i64
infer %180

; *****
; For LLVM instruction:
;  %272 = or i64 %271, %270
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161
%163:i64 = add %116, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %116, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64
%172:i64 = or %170, %171 (hasExternalUses)
%173:i64 = add %158, %172
%174:i64 = and 4294967295:i64, %171
%175:i64 = shl %158, 1:i64
%176:i64 = and 8589934590:i64, %175
%177:i64 = mul %174, %176
%178:i64 = add %173, %177 (hasExternalUses)
%179:i64 = xor %178, %162
%180:i64 = shl %179, 1:i64
%181:i64 = lshr %179, 63:i64
%182:i64 = or %180, %181
infer %182

; *****
; For LLVM instruction:
;  %273 = and i64 %182, 4294967295
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = xor %38, %22
%40:i64 = shl %39, 1:i64
%41:i64 = lshr %39, 63:i64
%42:i64 = or %40, %41 (hasExternalUses)
%43:i64 = and 4294967295:i64, %42
infer %43

; *****
; For LLVM instruction:
;  %274 = add i64 %182, %117
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
infer %72

; *****
; For LLVM instruction:
;  %275 = shl i64 %117, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = shl %28, 1:i64
infer %29 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %276 = and i64 %275, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = shl %28, 1:i64
%30:i64 = and 8589934590:i64, %29
infer %30

; *****
; For LLVM instruction:
;  %277 = mul i64 %273, %276
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = xor %38, %22
%40:i64 = shl %39, 1:i64
%41:i64 = lshr %39, 63:i64
%42:i64 = or %40, %41 (hasExternalUses)
%43:i64 = and 4294967295:i64, %42
%44:i64 = var
%45:i64 = var
%46:i64 = add %44, %45
%47:i64 = and 4294967295:i64, %45
%48:i64 = shl %44, 1:i64
%49:i64 = and 8589934590:i64, %48
%50:i64 = mul %47, %49
%51:i64 = add %46, %50
%52:i64 = var
%53:i64 = var
%54:i64 = xor %53, %51
%55:i64 = shl %54, 32:i64
%56:i64 = lshr %54, 32:i64
%57:i64 = or %55, %56 (hasExternalUses)
%58:i64 = add %52, %57
%59:i64 = shl %52, 1:i64
%60:i64 = and 8589934590:i64, %59
%61:i64 = mul %60, %56
%62:i64 = add %58, %61 (hasExternalUses)
%63:i64 = xor %45, %62
%64:i64 = shl %63, 40:i64
%65:i64 = lshr %63, 24:i64
%66:i64 = or %64, %65 (hasExternalUses)
%67:i64 = add %51, %66
%68:i64 = and 4294967295:i64, %65
%69:i64 = shl %51, 1:i64
%70:i64 = and 8589934590:i64, %69
%71:i64 = mul %68, %70
%72:i64 = add %67, %71 (hasExternalUses)
%73:i64 = shl %72, 1:i64
%74:i64 = and 8589934590:i64, %73
%75:i64 = mul %43, %74
infer %75

; *****
; For LLVM instruction:
;  %278 = add i64 %274, %277
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
infer %77

; *****
; For LLVM instruction:
;  %279 = xor i64 %278, %70
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = var
%79:i64 = var
%80:i64 = add %78, %79
%81:i64 = and 4294967295:i64, %79
%82:i64 = shl %78, 1:i64
%83:i64 = and 8589934590:i64, %82
%84:i64 = mul %81, %83
%85:i64 = add %80, %84
%86:i64 = var
%87:i64 = var
%88:i64 = xor %87, %85
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %86, %91
%93:i64 = shl %86, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95 (hasExternalUses)
%97:i64 = xor %79, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %85, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %85, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64 (hasExternalUses)
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = xor %77, %110
infer %111

; *****
; For LLVM instruction:
;  %280 = lshr i64 %279, 32
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = var
%79:i64 = var
%80:i64 = add %78, %79
%81:i64 = and 4294967295:i64, %79
%82:i64 = shl %78, 1:i64
%83:i64 = and 8589934590:i64, %82
%84:i64 = mul %81, %83
%85:i64 = add %80, %84
%86:i64 = var
%87:i64 = var
%88:i64 = xor %87, %85
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %86, %91
%93:i64 = shl %86, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95 (hasExternalUses)
%97:i64 = xor %79, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %85, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %85, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64 (hasExternalUses)
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = xor %77, %110 (hasExternalUses)
%112:i64 = lshr %111, 32:i64
infer %112

; *****
; For LLVM instruction:
;  %281 = shl i64 %279, 32
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = var
%79:i64 = var
%80:i64 = add %78, %79
%81:i64 = and 4294967295:i64, %79
%82:i64 = shl %78, 1:i64
%83:i64 = and 8589934590:i64, %82
%84:i64 = mul %81, %83
%85:i64 = add %80, %84
%86:i64 = var
%87:i64 = var
%88:i64 = xor %87, %85
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %86, %91
%93:i64 = shl %86, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95 (hasExternalUses)
%97:i64 = xor %79, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %85, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %85, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64 (hasExternalUses)
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = xor %77, %110 (hasExternalUses)
%112:i64 = shl %111, 32:i64
infer %112

; *****
; For LLVM instruction:
;  %282 = or i64 %281, %280
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = var
%79:i64 = var
%80:i64 = add %78, %79
%81:i64 = and 4294967295:i64, %79
%82:i64 = shl %78, 1:i64
%83:i64 = and 8589934590:i64, %82
%84:i64 = mul %81, %83
%85:i64 = add %80, %84
%86:i64 = var
%87:i64 = var
%88:i64 = xor %87, %85
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %86, %91
%93:i64 = shl %86, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95 (hasExternalUses)
%97:i64 = xor %79, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %85, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %85, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64 (hasExternalUses)
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = xor %77, %110
%112:i64 = shl %111, 32:i64
%113:i64 = lshr %111, 32:i64 (hasExternalUses)
%114:i64 = or %112, %113
infer %114

; *****
; For LLVM instruction:
;  %283 = add i64 %229, %282
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64 (hasExternalUses)
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
infer %154

; *****
; For LLVM instruction:
;  %284 = shl i64 %229, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = shl %38, 1:i64
infer %39 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %285 = and i64 %284, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = shl %38, 1:i64
%40:i64 = and 8589934590:i64, %39
infer %40

; *****
; For LLVM instruction:
;  %286 = mul i64 %285, %280
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = shl %38, 1:i64
%40:i64 = and 8589934590:i64, %39
%41:i64 = var
%42:i64 = var
%43:i64 = add %41, %42
%44:i64 = and 4294967295:i64, %42
%45:i64 = shl %41, 1:i64
%46:i64 = and 8589934590:i64, %45
%47:i64 = mul %44, %46
%48:i64 = add %43, %47
%49:i64 = var
%50:i64 = var
%51:i64 = xor %50, %48
%52:i64 = shl %51, 32:i64
%53:i64 = lshr %51, 32:i64
%54:i64 = or %52, %53 (hasExternalUses)
%55:i64 = add %49, %54
%56:i64 = shl %49, 1:i64
%57:i64 = and 8589934590:i64, %56
%58:i64 = mul %57, %53
%59:i64 = add %55, %58 (hasExternalUses)
%60:i64 = xor %42, %59
%61:i64 = shl %60, 40:i64
%62:i64 = lshr %60, 24:i64
%63:i64 = or %61, %62 (hasExternalUses)
%64:i64 = add %48, %63
%65:i64 = and 4294967295:i64, %62
%66:i64 = shl %48, 1:i64
%67:i64 = and 8589934590:i64, %66
%68:i64 = mul %65, %67
%69:i64 = add %64, %68 (hasExternalUses)
%70:i64 = var
%71:i64 = var
%72:i64 = var
%73:i64 = var
%74:i64 = add %72, %73
%75:i64 = and 4294967295:i64, %73
%76:i64 = shl %72, 1:i64
%77:i64 = and 8589934590:i64, %76
%78:i64 = mul %75, %77
%79:i64 = add %74, %78
%80:i64 = xor %71, %79
%81:i64 = shl %80, 32:i64
%82:i64 = lshr %80, 32:i64
%83:i64 = or %81, %82
%84:i64 = add %70, %83
%85:i64 = shl %70, 1:i64
%86:i64 = and 8589934590:i64, %85
%87:i64 = mul %86, %82
%88:i64 = add %84, %87
%89:i64 = xor %73, %88
%90:i64 = shl %89, 40:i64
%91:i64 = lshr %89, 24:i64
%92:i64 = or %90, %91
%93:i64 = add %79, %92
%94:i64 = and 4294967295:i64, %91
%95:i64 = shl %79, 1:i64
%96:i64 = and 8589934590:i64, %95
%97:i64 = mul %94, %96
%98:i64 = add %93, %97 (hasExternalUses)
%99:i64 = xor %98, %83
%100:i64 = shl %99, 48:i64
%101:i64 = lshr %99, 16:i64
%102:i64 = or %100, %101 (hasExternalUses)
%103:i64 = add %88, %102
%104:i64 = and 4294967295:i64, %101
%105:i64 = shl %88, 1:i64
%106:i64 = and 8589934590:i64, %105
%107:i64 = mul %104, %106
%108:i64 = add %103, %107 (hasExternalUses)
%109:i64 = xor %108, %92
%110:i64 = shl %109, 1:i64
%111:i64 = lshr %109, 63:i64
%112:i64 = or %110, %111 (hasExternalUses)
%113:i64 = add %69, %112
%114:i64 = and 4294967295:i64, %112
%115:i64 = shl %69, 1:i64
%116:i64 = and 8589934590:i64, %115
%117:i64 = mul %114, %116
%118:i64 = add %113, %117 (hasExternalUses)
%119:i64 = var
%120:i64 = var
%121:i64 = add %119, %120
%122:i64 = and 4294967295:i64, %120
%123:i64 = shl %119, 1:i64
%124:i64 = and 8589934590:i64, %123
%125:i64 = mul %122, %124
%126:i64 = add %121, %125
%127:i64 = var
%128:i64 = var
%129:i64 = xor %128, %126
%130:i64 = shl %129, 32:i64
%131:i64 = lshr %129, 32:i64
%132:i64 = or %130, %131
%133:i64 = add %127, %132
%134:i64 = shl %127, 1:i64
%135:i64 = and 8589934590:i64, %134
%136:i64 = mul %135, %131
%137:i64 = add %133, %136 (hasExternalUses)
%138:i64 = xor %120, %137
%139:i64 = shl %138, 40:i64
%140:i64 = lshr %138, 24:i64
%141:i64 = or %139, %140 (hasExternalUses)
%142:i64 = add %126, %141
%143:i64 = and 4294967295:i64, %140
%144:i64 = shl %126, 1:i64
%145:i64 = and 8589934590:i64, %144
%146:i64 = mul %143, %145
%147:i64 = add %142, %146 (hasExternalUses)
%148:i64 = xor %147, %132
%149:i64 = shl %148, 48:i64
%150:i64 = lshr %148, 16:i64 (hasExternalUses)
%151:i64 = or %149, %150 (hasExternalUses)
%152:i64 = xor %118, %151 (hasExternalUses)
%153:i64 = lshr %152, 32:i64 (hasExternalUses)
%154:i64 = mul %40, %153
infer %154

; *****
; For LLVM instruction:
;  %287 = add i64 %283, %286
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157
infer %158

; *****
; For LLVM instruction:
;  %288 = xor i64 %287, %182
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110
infer %159

; *****
; For LLVM instruction:
;  %289 = lshr i64 %288, 24
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110 (hasExternalUses)
%160:i64 = lshr %159, 24:i64
infer %160

; *****
; For LLVM instruction:
;  %290 = shl i64 %288, 40
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110 (hasExternalUses)
%160:i64 = shl %159, 40:i64
infer %160

; *****
; For LLVM instruction:
;  %291 = or i64 %290, %289
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64 (hasExternalUses)
%162:i64 = or %160, %161
infer %162

; *****
; For LLVM instruction:
;  %292 = and i64 %289, 4294967295
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110 (hasExternalUses)
%160:i64 = lshr %159, 24:i64 (hasExternalUses)
%161:i64 = and 4294967295:i64, %160
infer %161

; *****
; For LLVM instruction:
;  %293 = add i64 %291, %278
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64 (hasExternalUses)
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
infer %163

; *****
; For LLVM instruction:
;  %294 = shl i64 %278, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = shl %77, 1:i64
infer %78 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %295 = and i64 %294, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = shl %77, 1:i64
%79:i64 = and 8589934590:i64, %78
infer %79

; *****
; For LLVM instruction:
;  %296 = mul i64 %292, %295
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110 (hasExternalUses)
%160:i64 = lshr %159, 24:i64 (hasExternalUses)
%161:i64 = and 4294967295:i64, %160
%162:i64 = shl %116, 1:i64
%163:i64 = and 8589934590:i64, %162
%164:i64 = mul %161, %163
infer %164

; *****
; For LLVM instruction:
;  %297 = add i64 %293, %296
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167
infer %168

; *****
; For LLVM instruction:
;  %298 = xor i64 %297, %282
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
infer %169

; *****
; For LLVM instruction:
;  %299 = lshr i64 %298, 16
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153 (hasExternalUses)
%170:i64 = lshr %169, 16:i64
infer %170

; *****
; For LLVM instruction:
;  %300 = shl i64 %298, 48
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153 (hasExternalUses)
%170:i64 = shl %169, 48:i64
infer %170

; *****
; For LLVM instruction:
;  %301 = or i64 %300, %299
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64 (hasExternalUses)
%172:i64 = or %170, %171
infer %172

; *****
; For LLVM instruction:
;  %302 = and i64 %299, 4294967295
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153 (hasExternalUses)
%170:i64 = lshr %169, 16:i64 (hasExternalUses)
%171:i64 = and 4294967295:i64, %170
infer %171

; *****
; For LLVM instruction:
;  %303 = add i64 %301, %287
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %116, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %116, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64 (hasExternalUses)
%172:i64 = or %170, %171 (hasExternalUses)
%173:i64 = add %158, %172
infer %173

; *****
; For LLVM instruction:
;  %304 = shl i64 %287, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = shl %158, 1:i64
infer %159 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %305 = and i64 %304, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = shl %158, 1:i64
%160:i64 = and 8589934590:i64, %159
infer %160

; *****
; For LLVM instruction:
;  %306 = mul i64 %302, %305
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153 (hasExternalUses)
%170:i64 = lshr %169, 16:i64 (hasExternalUses)
%171:i64 = and 4294967295:i64, %170
%172:i64 = shl %158, 1:i64
%173:i64 = and 8589934590:i64, %172
%174:i64 = mul %171, %173
infer %174

; *****
; For LLVM instruction:
;  %307 = add i64 %303, %306
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %116, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %116, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64
%172:i64 = or %170, %171 (hasExternalUses)
%173:i64 = add %158, %172
%174:i64 = and 4294967295:i64, %171
%175:i64 = shl %158, 1:i64
%176:i64 = and 8589934590:i64, %175
%177:i64 = mul %174, %176
%178:i64 = add %173, %177
infer %178

; *****
; For LLVM instruction:
;  %308 = xor i64 %307, %291
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161
%163:i64 = add %116, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %116, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64
%172:i64 = or %170, %171 (hasExternalUses)
%173:i64 = add %158, %172
%174:i64 = and 4294967295:i64, %171
%175:i64 = shl %158, 1:i64
%176:i64 = and 8589934590:i64, %175
%177:i64 = mul %174, %176
%178:i64 = add %173, %177 (hasExternalUses)
%179:i64 = xor %178, %162
infer %179

; *****
; For LLVM instruction:
;  %309 = lshr i64 %308, 63
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161
%163:i64 = add %116, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %116, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64
%172:i64 = or %170, %171 (hasExternalUses)
%173:i64 = add %158, %172
%174:i64 = and 4294967295:i64, %171
%175:i64 = shl %158, 1:i64
%176:i64 = and 8589934590:i64, %175
%177:i64 = mul %174, %176
%178:i64 = add %173, %177 (hasExternalUses)
%179:i64 = xor %178, %162 (hasExternalUses)
%180:i64 = lshr %179, 63:i64
infer %180

; *****
; For LLVM instruction:
;  %310 = shl i64 %308, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161
%163:i64 = add %116, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %116, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64
%172:i64 = or %170, %171 (hasExternalUses)
%173:i64 = add %158, %172
%174:i64 = and 4294967295:i64, %171
%175:i64 = shl %158, 1:i64
%176:i64 = and 8589934590:i64, %175
%177:i64 = mul %174, %176
%178:i64 = add %173, %177 (hasExternalUses)
%179:i64 = xor %178, %162 (hasExternalUses)
%180:i64 = shl %179, 1:i64
infer %180

; *****
; For LLVM instruction:
;  %311 = or i64 %310, %309
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161
%163:i64 = add %116, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %116, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64
%172:i64 = or %170, %171 (hasExternalUses)
%173:i64 = add %158, %172
%174:i64 = and 4294967295:i64, %171
%175:i64 = shl %158, 1:i64
%176:i64 = and 8589934590:i64, %175
%177:i64 = mul %174, %176
%178:i64 = add %173, %177 (hasExternalUses)
%179:i64 = xor %178, %162
%180:i64 = shl %179, 1:i64
%181:i64 = lshr %179, 63:i64
%182:i64 = or %180, %181
infer %182

; *****
; For LLVM instruction:
;  %312 = and i64 %233, 4294967295
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = xor %38, %22
%40:i64 = shl %39, 1:i64
%41:i64 = lshr %39, 63:i64
%42:i64 = or %40, %41 (hasExternalUses)
%43:i64 = and 4294967295:i64, %42
infer %43

; *****
; For LLVM instruction:
;  %313 = add i64 %233, %168
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
infer %72

; *****
; For LLVM instruction:
;  %314 = shl i64 %168, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = shl %28, 1:i64
infer %29 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %315 = and i64 %314, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = shl %28, 1:i64
%30:i64 = and 8589934590:i64, %29
infer %30

; *****
; For LLVM instruction:
;  %316 = mul i64 %312, %315
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = xor %38, %22
%40:i64 = shl %39, 1:i64
%41:i64 = lshr %39, 63:i64
%42:i64 = or %40, %41 (hasExternalUses)
%43:i64 = and 4294967295:i64, %42
%44:i64 = var
%45:i64 = var
%46:i64 = add %44, %45
%47:i64 = and 4294967295:i64, %45
%48:i64 = shl %44, 1:i64
%49:i64 = and 8589934590:i64, %48
%50:i64 = mul %47, %49
%51:i64 = add %46, %50
%52:i64 = var
%53:i64 = var
%54:i64 = xor %53, %51
%55:i64 = shl %54, 32:i64
%56:i64 = lshr %54, 32:i64
%57:i64 = or %55, %56 (hasExternalUses)
%58:i64 = add %52, %57
%59:i64 = shl %52, 1:i64
%60:i64 = and 8589934590:i64, %59
%61:i64 = mul %60, %56
%62:i64 = add %58, %61 (hasExternalUses)
%63:i64 = xor %45, %62
%64:i64 = shl %63, 40:i64
%65:i64 = lshr %63, 24:i64
%66:i64 = or %64, %65 (hasExternalUses)
%67:i64 = add %51, %66
%68:i64 = and 4294967295:i64, %65
%69:i64 = shl %51, 1:i64
%70:i64 = and 8589934590:i64, %69
%71:i64 = mul %68, %70
%72:i64 = add %67, %71 (hasExternalUses)
%73:i64 = shl %72, 1:i64
%74:i64 = and 8589934590:i64, %73
%75:i64 = mul %43, %74
infer %75

; *****
; For LLVM instruction:
;  %317 = add i64 %313, %316
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
infer %77

; *****
; For LLVM instruction:
;  %318 = xor i64 %317, %121
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = var
%79:i64 = var
%80:i64 = add %78, %79
%81:i64 = and 4294967295:i64, %79
%82:i64 = shl %78, 1:i64
%83:i64 = and 8589934590:i64, %82
%84:i64 = mul %81, %83
%85:i64 = add %80, %84
%86:i64 = var
%87:i64 = var
%88:i64 = xor %87, %85
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %86, %91
%93:i64 = shl %86, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95 (hasExternalUses)
%97:i64 = xor %79, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %85, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %85, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64 (hasExternalUses)
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = xor %77, %110
infer %111

; *****
; For LLVM instruction:
;  %319 = lshr i64 %318, 32
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = var
%79:i64 = var
%80:i64 = add %78, %79
%81:i64 = and 4294967295:i64, %79
%82:i64 = shl %78, 1:i64
%83:i64 = and 8589934590:i64, %82
%84:i64 = mul %81, %83
%85:i64 = add %80, %84
%86:i64 = var
%87:i64 = var
%88:i64 = xor %87, %85
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %86, %91
%93:i64 = shl %86, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95 (hasExternalUses)
%97:i64 = xor %79, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %85, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %85, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64 (hasExternalUses)
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = xor %77, %110 (hasExternalUses)
%112:i64 = lshr %111, 32:i64
infer %112

; *****
; For LLVM instruction:
;  %320 = shl i64 %318, 32
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = var
%79:i64 = var
%80:i64 = add %78, %79
%81:i64 = and 4294967295:i64, %79
%82:i64 = shl %78, 1:i64
%83:i64 = and 8589934590:i64, %82
%84:i64 = mul %81, %83
%85:i64 = add %80, %84
%86:i64 = var
%87:i64 = var
%88:i64 = xor %87, %85
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %86, %91
%93:i64 = shl %86, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95 (hasExternalUses)
%97:i64 = xor %79, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %85, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %85, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64 (hasExternalUses)
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = xor %77, %110 (hasExternalUses)
%112:i64 = shl %111, 32:i64
infer %112

; *****
; For LLVM instruction:
;  %321 = or i64 %320, %319
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = var
%79:i64 = var
%80:i64 = add %78, %79
%81:i64 = and 4294967295:i64, %79
%82:i64 = shl %78, 1:i64
%83:i64 = and 8589934590:i64, %82
%84:i64 = mul %81, %83
%85:i64 = add %80, %84
%86:i64 = var
%87:i64 = var
%88:i64 = xor %87, %85
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %86, %91
%93:i64 = shl %86, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95 (hasExternalUses)
%97:i64 = xor %79, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %85, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %85, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64 (hasExternalUses)
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = xor %77, %110
%112:i64 = shl %111, 32:i64
%113:i64 = lshr %111, 32:i64 (hasExternalUses)
%114:i64 = or %112, %113
infer %114

; *****
; For LLVM instruction:
;  %322 = add i64 %321, %76
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64 (hasExternalUses)
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
infer %154

; *****
; For LLVM instruction:
;  %323 = shl i64 %76, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = shl %38, 1:i64
infer %39 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %324 = and i64 %323, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = shl %38, 1:i64
%40:i64 = and 8589934590:i64, %39
infer %40

; *****
; For LLVM instruction:
;  %325 = mul i64 %319, %324
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = shl %38, 1:i64
%40:i64 = and 8589934590:i64, %39
%41:i64 = var
%42:i64 = var
%43:i64 = add %41, %42
%44:i64 = and 4294967295:i64, %42
%45:i64 = shl %41, 1:i64
%46:i64 = and 8589934590:i64, %45
%47:i64 = mul %44, %46
%48:i64 = add %43, %47
%49:i64 = var
%50:i64 = var
%51:i64 = xor %50, %48
%52:i64 = shl %51, 32:i64
%53:i64 = lshr %51, 32:i64
%54:i64 = or %52, %53 (hasExternalUses)
%55:i64 = add %49, %54
%56:i64 = shl %49, 1:i64
%57:i64 = and 8589934590:i64, %56
%58:i64 = mul %57, %53
%59:i64 = add %55, %58 (hasExternalUses)
%60:i64 = xor %42, %59
%61:i64 = shl %60, 40:i64
%62:i64 = lshr %60, 24:i64
%63:i64 = or %61, %62 (hasExternalUses)
%64:i64 = add %48, %63
%65:i64 = and 4294967295:i64, %62
%66:i64 = shl %48, 1:i64
%67:i64 = and 8589934590:i64, %66
%68:i64 = mul %65, %67
%69:i64 = add %64, %68 (hasExternalUses)
%70:i64 = var
%71:i64 = var
%72:i64 = var
%73:i64 = var
%74:i64 = add %72, %73
%75:i64 = and 4294967295:i64, %73
%76:i64 = shl %72, 1:i64
%77:i64 = and 8589934590:i64, %76
%78:i64 = mul %75, %77
%79:i64 = add %74, %78
%80:i64 = xor %71, %79
%81:i64 = shl %80, 32:i64
%82:i64 = lshr %80, 32:i64
%83:i64 = or %81, %82
%84:i64 = add %70, %83
%85:i64 = shl %70, 1:i64
%86:i64 = and 8589934590:i64, %85
%87:i64 = mul %86, %82
%88:i64 = add %84, %87
%89:i64 = xor %73, %88
%90:i64 = shl %89, 40:i64
%91:i64 = lshr %89, 24:i64
%92:i64 = or %90, %91
%93:i64 = add %79, %92
%94:i64 = and 4294967295:i64, %91
%95:i64 = shl %79, 1:i64
%96:i64 = and 8589934590:i64, %95
%97:i64 = mul %94, %96
%98:i64 = add %93, %97 (hasExternalUses)
%99:i64 = xor %98, %83
%100:i64 = shl %99, 48:i64
%101:i64 = lshr %99, 16:i64
%102:i64 = or %100, %101 (hasExternalUses)
%103:i64 = add %88, %102
%104:i64 = and 4294967295:i64, %101
%105:i64 = shl %88, 1:i64
%106:i64 = and 8589934590:i64, %105
%107:i64 = mul %104, %106
%108:i64 = add %103, %107 (hasExternalUses)
%109:i64 = xor %108, %92
%110:i64 = shl %109, 1:i64
%111:i64 = lshr %109, 63:i64
%112:i64 = or %110, %111 (hasExternalUses)
%113:i64 = add %69, %112
%114:i64 = and 4294967295:i64, %112
%115:i64 = shl %69, 1:i64
%116:i64 = and 8589934590:i64, %115
%117:i64 = mul %114, %116
%118:i64 = add %113, %117 (hasExternalUses)
%119:i64 = var
%120:i64 = var
%121:i64 = add %119, %120
%122:i64 = and 4294967295:i64, %120
%123:i64 = shl %119, 1:i64
%124:i64 = and 8589934590:i64, %123
%125:i64 = mul %122, %124
%126:i64 = add %121, %125
%127:i64 = var
%128:i64 = var
%129:i64 = xor %128, %126
%130:i64 = shl %129, 32:i64
%131:i64 = lshr %129, 32:i64
%132:i64 = or %130, %131
%133:i64 = add %127, %132
%134:i64 = shl %127, 1:i64
%135:i64 = and 8589934590:i64, %134
%136:i64 = mul %135, %131
%137:i64 = add %133, %136 (hasExternalUses)
%138:i64 = xor %120, %137
%139:i64 = shl %138, 40:i64
%140:i64 = lshr %138, 24:i64
%141:i64 = or %139, %140 (hasExternalUses)
%142:i64 = add %126, %141
%143:i64 = and 4294967295:i64, %140
%144:i64 = shl %126, 1:i64
%145:i64 = and 8589934590:i64, %144
%146:i64 = mul %143, %145
%147:i64 = add %142, %146 (hasExternalUses)
%148:i64 = xor %147, %132
%149:i64 = shl %148, 48:i64
%150:i64 = lshr %148, 16:i64 (hasExternalUses)
%151:i64 = or %149, %150 (hasExternalUses)
%152:i64 = xor %118, %151 (hasExternalUses)
%153:i64 = lshr %152, 32:i64 (hasExternalUses)
%154:i64 = mul %40, %153
infer %154

; *****
; For LLVM instruction:
;  %326 = add i64 %322, %325
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157
infer %158

; *****
; For LLVM instruction:
;  %327 = xor i64 %326, %233
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110
infer %159

; *****
; For LLVM instruction:
;  %328 = lshr i64 %327, 24
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110 (hasExternalUses)
%160:i64 = lshr %159, 24:i64
infer %160

; *****
; For LLVM instruction:
;  %329 = shl i64 %327, 40
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110 (hasExternalUses)
%160:i64 = shl %159, 40:i64
infer %160

; *****
; For LLVM instruction:
;  %330 = or i64 %329, %328
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64 (hasExternalUses)
%162:i64 = or %160, %161
infer %162

; *****
; For LLVM instruction:
;  %331 = and i64 %328, 4294967295
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110 (hasExternalUses)
%160:i64 = lshr %159, 24:i64 (hasExternalUses)
%161:i64 = and 4294967295:i64, %160
infer %161

; *****
; For LLVM instruction:
;  %332 = add i64 %330, %317
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64 (hasExternalUses)
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
infer %163

; *****
; For LLVM instruction:
;  %333 = shl i64 %317, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = shl %77, 1:i64
infer %78 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %334 = and i64 %333, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = shl %77, 1:i64
%79:i64 = and 8589934590:i64, %78
infer %79

; *****
; For LLVM instruction:
;  %335 = mul i64 %331, %334
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110 (hasExternalUses)
%160:i64 = lshr %159, 24:i64 (hasExternalUses)
%161:i64 = and 4294967295:i64, %160
%162:i64 = shl %116, 1:i64
%163:i64 = and 8589934590:i64, %162
%164:i64 = mul %161, %163
infer %164

; *****
; For LLVM instruction:
;  %336 = add i64 %332, %335
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167
infer %168

; *****
; For LLVM instruction:
;  %337 = xor i64 %336, %321
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
infer %169

; *****
; For LLVM instruction:
;  %338 = lshr i64 %337, 16
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153 (hasExternalUses)
%170:i64 = lshr %169, 16:i64
infer %170

; *****
; For LLVM instruction:
;  %339 = shl i64 %337, 48
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153 (hasExternalUses)
%170:i64 = shl %169, 48:i64
infer %170

; *****
; For LLVM instruction:
;  %340 = or i64 %339, %338
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64 (hasExternalUses)
%172:i64 = or %170, %171
infer %172

; *****
; For LLVM instruction:
;  %341 = and i64 %338, 4294967295
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153 (hasExternalUses)
%170:i64 = lshr %169, 16:i64 (hasExternalUses)
%171:i64 = and 4294967295:i64, %170
infer %171

; *****
; For LLVM instruction:
;  %342 = add i64 %340, %326
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %116, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %116, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64 (hasExternalUses)
%172:i64 = or %170, %171 (hasExternalUses)
%173:i64 = add %158, %172
infer %173

; *****
; For LLVM instruction:
;  %343 = shl i64 %326, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = shl %158, 1:i64
infer %159 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %344 = and i64 %343, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = shl %158, 1:i64
%160:i64 = and 8589934590:i64, %159
infer %160

; *****
; For LLVM instruction:
;  %345 = mul i64 %341, %344
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153 (hasExternalUses)
%170:i64 = lshr %169, 16:i64 (hasExternalUses)
%171:i64 = and 4294967295:i64, %170
%172:i64 = shl %158, 1:i64
%173:i64 = and 8589934590:i64, %172
%174:i64 = mul %171, %173
infer %174

; *****
; For LLVM instruction:
;  %346 = add i64 %342, %345
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %116, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %116, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64
%172:i64 = or %170, %171 (hasExternalUses)
%173:i64 = add %158, %172
%174:i64 = and 4294967295:i64, %171
%175:i64 = shl %158, 1:i64
%176:i64 = and 8589934590:i64, %175
%177:i64 = mul %174, %176
%178:i64 = add %173, %177
infer %178

; *****
; For LLVM instruction:
;  %347 = xor i64 %346, %330
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161
%163:i64 = add %116, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %116, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64
%172:i64 = or %170, %171 (hasExternalUses)
%173:i64 = add %158, %172
%174:i64 = and 4294967295:i64, %171
%175:i64 = shl %158, 1:i64
%176:i64 = and 8589934590:i64, %175
%177:i64 = mul %174, %176
%178:i64 = add %173, %177 (hasExternalUses)
%179:i64 = xor %178, %162
infer %179

; *****
; For LLVM instruction:
;  %348 = lshr i64 %347, 63
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161
%163:i64 = add %116, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %116, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64
%172:i64 = or %170, %171 (hasExternalUses)
%173:i64 = add %158, %172
%174:i64 = and 4294967295:i64, %171
%175:i64 = shl %158, 1:i64
%176:i64 = and 8589934590:i64, %175
%177:i64 = mul %174, %176
%178:i64 = add %173, %177 (hasExternalUses)
%179:i64 = xor %178, %162 (hasExternalUses)
%180:i64 = lshr %179, 63:i64
infer %180

; *****
; For LLVM instruction:
;  %349 = shl i64 %347, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161
%163:i64 = add %116, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %116, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64
%172:i64 = or %170, %171 (hasExternalUses)
%173:i64 = add %158, %172
%174:i64 = and 4294967295:i64, %171
%175:i64 = shl %158, 1:i64
%176:i64 = and 8589934590:i64, %175
%177:i64 = mul %174, %176
%178:i64 = add %173, %177 (hasExternalUses)
%179:i64 = xor %178, %162 (hasExternalUses)
%180:i64 = shl %179, 1:i64
infer %180

; *****
; For LLVM instruction:
;  %350 = or i64 %349, %348
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161
%163:i64 = add %116, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %116, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64
%172:i64 = or %170, %171 (hasExternalUses)
%173:i64 = add %158, %172
%174:i64 = and 4294967295:i64, %171
%175:i64 = shl %158, 1:i64
%176:i64 = and 8589934590:i64, %175
%177:i64 = mul %174, %176
%178:i64 = add %173, %177 (hasExternalUses)
%179:i64 = xor %178, %162
%180:i64 = shl %179, 1:i64
%181:i64 = lshr %179, 63:i64
%182:i64 = or %180, %181
infer %182

; *****
; For LLVM instruction:
;  %351 = and i64 %80, 4294967295
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = xor %38, %22
%40:i64 = shl %39, 1:i64
%41:i64 = lshr %39, 63:i64
%42:i64 = or %40, %41 (hasExternalUses)
%43:i64 = and 4294967295:i64, %42
infer %43

; *****
; For LLVM instruction:
;  %352 = add i64 %219, %80
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
infer %72

; *****
; For LLVM instruction:
;  %353 = shl i64 %219, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = shl %28, 1:i64
infer %29 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %354 = and i64 %353, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = shl %28, 1:i64
%30:i64 = and 8589934590:i64, %29
infer %30

; *****
; For LLVM instruction:
;  %355 = mul i64 %354, %351
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = xor %38, %22
%40:i64 = shl %39, 1:i64
%41:i64 = lshr %39, 63:i64
%42:i64 = or %40, %41 (hasExternalUses)
%43:i64 = and 4294967295:i64, %42
%44:i64 = var
%45:i64 = var
%46:i64 = add %44, %45
%47:i64 = and 4294967295:i64, %45
%48:i64 = shl %44, 1:i64
%49:i64 = and 8589934590:i64, %48
%50:i64 = mul %47, %49
%51:i64 = add %46, %50
%52:i64 = var
%53:i64 = var
%54:i64 = xor %53, %51
%55:i64 = shl %54, 32:i64
%56:i64 = lshr %54, 32:i64
%57:i64 = or %55, %56 (hasExternalUses)
%58:i64 = add %52, %57
%59:i64 = shl %52, 1:i64
%60:i64 = and 8589934590:i64, %59
%61:i64 = mul %60, %56
%62:i64 = add %58, %61 (hasExternalUses)
%63:i64 = xor %45, %62
%64:i64 = shl %63, 40:i64
%65:i64 = lshr %63, 24:i64
%66:i64 = or %64, %65 (hasExternalUses)
%67:i64 = add %51, %66
%68:i64 = and 4294967295:i64, %65
%69:i64 = shl %51, 1:i64
%70:i64 = and 8589934590:i64, %69
%71:i64 = mul %68, %70
%72:i64 = add %67, %71 (hasExternalUses)
%73:i64 = shl %72, 1:i64
%74:i64 = and 8589934590:i64, %73
%75:i64 = mul %43, %74
infer %75

; *****
; For LLVM instruction:
;  %356 = add i64 %352, %355
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
infer %77

; *****
; For LLVM instruction:
;  %357 = xor i64 %356, %172
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = var
%79:i64 = var
%80:i64 = add %78, %79
%81:i64 = and 4294967295:i64, %79
%82:i64 = shl %78, 1:i64
%83:i64 = and 8589934590:i64, %82
%84:i64 = mul %81, %83
%85:i64 = add %80, %84
%86:i64 = var
%87:i64 = var
%88:i64 = xor %87, %85
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %86, %91
%93:i64 = shl %86, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95 (hasExternalUses)
%97:i64 = xor %79, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %85, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %85, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64 (hasExternalUses)
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = xor %77, %110
infer %111

; *****
; For LLVM instruction:
;  %358 = lshr i64 %357, 32
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = var
%79:i64 = var
%80:i64 = add %78, %79
%81:i64 = and 4294967295:i64, %79
%82:i64 = shl %78, 1:i64
%83:i64 = and 8589934590:i64, %82
%84:i64 = mul %81, %83
%85:i64 = add %80, %84
%86:i64 = var
%87:i64 = var
%88:i64 = xor %87, %85
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %86, %91
%93:i64 = shl %86, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95 (hasExternalUses)
%97:i64 = xor %79, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %85, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %85, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64 (hasExternalUses)
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = xor %77, %110 (hasExternalUses)
%112:i64 = lshr %111, 32:i64
infer %112

; *****
; For LLVM instruction:
;  %359 = shl i64 %357, 32
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = var
%79:i64 = var
%80:i64 = add %78, %79
%81:i64 = and 4294967295:i64, %79
%82:i64 = shl %78, 1:i64
%83:i64 = and 8589934590:i64, %82
%84:i64 = mul %81, %83
%85:i64 = add %80, %84
%86:i64 = var
%87:i64 = var
%88:i64 = xor %87, %85
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %86, %91
%93:i64 = shl %86, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95 (hasExternalUses)
%97:i64 = xor %79, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %85, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %85, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64 (hasExternalUses)
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = xor %77, %110 (hasExternalUses)
%112:i64 = shl %111, 32:i64
infer %112

; *****
; For LLVM instruction:
;  %360 = or i64 %359, %358
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = var
%79:i64 = var
%80:i64 = add %78, %79
%81:i64 = and 4294967295:i64, %79
%82:i64 = shl %78, 1:i64
%83:i64 = and 8589934590:i64, %82
%84:i64 = mul %81, %83
%85:i64 = add %80, %84
%86:i64 = var
%87:i64 = var
%88:i64 = xor %87, %85
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %86, %91
%93:i64 = shl %86, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95 (hasExternalUses)
%97:i64 = xor %79, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %85, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %85, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64 (hasExternalUses)
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = xor %77, %110
%112:i64 = shl %111, 32:i64
%113:i64 = lshr %111, 32:i64 (hasExternalUses)
%114:i64 = or %112, %113
infer %114

; *****
; For LLVM instruction:
;  %361 = add i64 %360, %127
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64 (hasExternalUses)
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
infer %154

; *****
; For LLVM instruction:
;  %362 = shl i64 %127, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = shl %38, 1:i64
infer %39 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %363 = and i64 %362, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = shl %38, 1:i64
%40:i64 = and 8589934590:i64, %39
infer %40

; *****
; For LLVM instruction:
;  %364 = mul i64 %358, %363
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = shl %38, 1:i64
%40:i64 = and 8589934590:i64, %39
%41:i64 = var
%42:i64 = var
%43:i64 = add %41, %42
%44:i64 = and 4294967295:i64, %42
%45:i64 = shl %41, 1:i64
%46:i64 = and 8589934590:i64, %45
%47:i64 = mul %44, %46
%48:i64 = add %43, %47
%49:i64 = var
%50:i64 = var
%51:i64 = xor %50, %48
%52:i64 = shl %51, 32:i64
%53:i64 = lshr %51, 32:i64
%54:i64 = or %52, %53 (hasExternalUses)
%55:i64 = add %49, %54
%56:i64 = shl %49, 1:i64
%57:i64 = and 8589934590:i64, %56
%58:i64 = mul %57, %53
%59:i64 = add %55, %58 (hasExternalUses)
%60:i64 = xor %42, %59
%61:i64 = shl %60, 40:i64
%62:i64 = lshr %60, 24:i64
%63:i64 = or %61, %62 (hasExternalUses)
%64:i64 = add %48, %63
%65:i64 = and 4294967295:i64, %62
%66:i64 = shl %48, 1:i64
%67:i64 = and 8589934590:i64, %66
%68:i64 = mul %65, %67
%69:i64 = add %64, %68 (hasExternalUses)
%70:i64 = var
%71:i64 = var
%72:i64 = var
%73:i64 = var
%74:i64 = add %72, %73
%75:i64 = and 4294967295:i64, %73
%76:i64 = shl %72, 1:i64
%77:i64 = and 8589934590:i64, %76
%78:i64 = mul %75, %77
%79:i64 = add %74, %78
%80:i64 = xor %71, %79
%81:i64 = shl %80, 32:i64
%82:i64 = lshr %80, 32:i64
%83:i64 = or %81, %82
%84:i64 = add %70, %83
%85:i64 = shl %70, 1:i64
%86:i64 = and 8589934590:i64, %85
%87:i64 = mul %86, %82
%88:i64 = add %84, %87
%89:i64 = xor %73, %88
%90:i64 = shl %89, 40:i64
%91:i64 = lshr %89, 24:i64
%92:i64 = or %90, %91
%93:i64 = add %79, %92
%94:i64 = and 4294967295:i64, %91
%95:i64 = shl %79, 1:i64
%96:i64 = and 8589934590:i64, %95
%97:i64 = mul %94, %96
%98:i64 = add %93, %97 (hasExternalUses)
%99:i64 = xor %98, %83
%100:i64 = shl %99, 48:i64
%101:i64 = lshr %99, 16:i64
%102:i64 = or %100, %101 (hasExternalUses)
%103:i64 = add %88, %102
%104:i64 = and 4294967295:i64, %101
%105:i64 = shl %88, 1:i64
%106:i64 = and 8589934590:i64, %105
%107:i64 = mul %104, %106
%108:i64 = add %103, %107 (hasExternalUses)
%109:i64 = xor %108, %92
%110:i64 = shl %109, 1:i64
%111:i64 = lshr %109, 63:i64
%112:i64 = or %110, %111 (hasExternalUses)
%113:i64 = add %69, %112
%114:i64 = and 4294967295:i64, %112
%115:i64 = shl %69, 1:i64
%116:i64 = and 8589934590:i64, %115
%117:i64 = mul %114, %116
%118:i64 = add %113, %117 (hasExternalUses)
%119:i64 = var
%120:i64 = var
%121:i64 = add %119, %120
%122:i64 = and 4294967295:i64, %120
%123:i64 = shl %119, 1:i64
%124:i64 = and 8589934590:i64, %123
%125:i64 = mul %122, %124
%126:i64 = add %121, %125
%127:i64 = var
%128:i64 = var
%129:i64 = xor %128, %126
%130:i64 = shl %129, 32:i64
%131:i64 = lshr %129, 32:i64
%132:i64 = or %130, %131
%133:i64 = add %127, %132
%134:i64 = shl %127, 1:i64
%135:i64 = and 8589934590:i64, %134
%136:i64 = mul %135, %131
%137:i64 = add %133, %136 (hasExternalUses)
%138:i64 = xor %120, %137
%139:i64 = shl %138, 40:i64
%140:i64 = lshr %138, 24:i64
%141:i64 = or %139, %140 (hasExternalUses)
%142:i64 = add %126, %141
%143:i64 = and 4294967295:i64, %140
%144:i64 = shl %126, 1:i64
%145:i64 = and 8589934590:i64, %144
%146:i64 = mul %143, %145
%147:i64 = add %142, %146 (hasExternalUses)
%148:i64 = xor %147, %132
%149:i64 = shl %148, 48:i64
%150:i64 = lshr %148, 16:i64 (hasExternalUses)
%151:i64 = or %149, %150 (hasExternalUses)
%152:i64 = xor %118, %151 (hasExternalUses)
%153:i64 = lshr %152, 32:i64 (hasExternalUses)
%154:i64 = mul %40, %153
infer %154

; *****
; For LLVM instruction:
;  %365 = add i64 %361, %364
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157
infer %158

; *****
; For LLVM instruction:
;  %366 = xor i64 %365, %80
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110
infer %159

; *****
; For LLVM instruction:
;  %367 = lshr i64 %366, 24
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110 (hasExternalUses)
%160:i64 = lshr %159, 24:i64
infer %160

; *****
; For LLVM instruction:
;  %368 = shl i64 %366, 40
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110 (hasExternalUses)
%160:i64 = shl %159, 40:i64
infer %160

; *****
; For LLVM instruction:
;  %369 = or i64 %368, %367
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64 (hasExternalUses)
%162:i64 = or %160, %161
infer %162

; *****
; For LLVM instruction:
;  %370 = and i64 %367, 4294967295
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110 (hasExternalUses)
%160:i64 = lshr %159, 24:i64 (hasExternalUses)
%161:i64 = and 4294967295:i64, %160
infer %161

; *****
; For LLVM instruction:
;  %371 = add i64 %369, %356
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64 (hasExternalUses)
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
infer %163

; *****
; For LLVM instruction:
;  %372 = shl i64 %356, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = shl %77, 1:i64
infer %78 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %373 = and i64 %372, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = shl %77, 1:i64
%79:i64 = and 8589934590:i64, %78
infer %79

; *****
; For LLVM instruction:
;  %374 = mul i64 %370, %373
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110 (hasExternalUses)
%160:i64 = lshr %159, 24:i64 (hasExternalUses)
%161:i64 = and 4294967295:i64, %160
%162:i64 = shl %116, 1:i64
%163:i64 = and 8589934590:i64, %162
%164:i64 = mul %161, %163
infer %164

; *****
; For LLVM instruction:
;  %375 = add i64 %371, %374
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167
infer %168

; *****
; For LLVM instruction:
;  %376 = xor i64 %375, %360
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
infer %169

; *****
; For LLVM instruction:
;  %377 = lshr i64 %376, 16
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153 (hasExternalUses)
%170:i64 = lshr %169, 16:i64
infer %170

; *****
; For LLVM instruction:
;  %378 = shl i64 %376, 48
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153 (hasExternalUses)
%170:i64 = shl %169, 48:i64
infer %170

; *****
; For LLVM instruction:
;  %379 = or i64 %378, %377
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64 (hasExternalUses)
%172:i64 = or %170, %171
infer %172

; *****
; For LLVM instruction:
;  %380 = and i64 %377, 4294967295
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153 (hasExternalUses)
%170:i64 = lshr %169, 16:i64 (hasExternalUses)
%171:i64 = and 4294967295:i64, %170
infer %171

; *****
; For LLVM instruction:
;  %381 = add i64 %379, %365
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %116, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %116, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64 (hasExternalUses)
%172:i64 = or %170, %171 (hasExternalUses)
%173:i64 = add %158, %172
infer %173

; *****
; For LLVM instruction:
;  %382 = shl i64 %365, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = shl %158, 1:i64
infer %159 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %383 = and i64 %382, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = shl %158, 1:i64
%160:i64 = and 8589934590:i64, %159
infer %160

; *****
; For LLVM instruction:
;  %384 = mul i64 %380, %383
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153 (hasExternalUses)
%170:i64 = lshr %169, 16:i64 (hasExternalUses)
%171:i64 = and 4294967295:i64, %170
%172:i64 = shl %158, 1:i64
%173:i64 = and 8589934590:i64, %172
%174:i64 = mul %171, %173
infer %174

; *****
; For LLVM instruction:
;  %385 = add i64 %381, %384
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %116, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %116, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64
%172:i64 = or %170, %171 (hasExternalUses)
%173:i64 = add %158, %172
%174:i64 = and 4294967295:i64, %171
%175:i64 = shl %158, 1:i64
%176:i64 = and 8589934590:i64, %175
%177:i64 = mul %174, %176
%178:i64 = add %173, %177
infer %178

; *****
; For LLVM instruction:
;  %386 = xor i64 %385, %369
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161
%163:i64 = add %116, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %116, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64
%172:i64 = or %170, %171 (hasExternalUses)
%173:i64 = add %158, %172
%174:i64 = and 4294967295:i64, %171
%175:i64 = shl %158, 1:i64
%176:i64 = and 8589934590:i64, %175
%177:i64 = mul %174, %176
%178:i64 = add %173, %177 (hasExternalUses)
%179:i64 = xor %178, %162
infer %179

; *****
; For LLVM instruction:
;  %387 = lshr i64 %386, 63
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161
%163:i64 = add %116, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %116, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64
%172:i64 = or %170, %171 (hasExternalUses)
%173:i64 = add %158, %172
%174:i64 = and 4294967295:i64, %171
%175:i64 = shl %158, 1:i64
%176:i64 = and 8589934590:i64, %175
%177:i64 = mul %174, %176
%178:i64 = add %173, %177 (hasExternalUses)
%179:i64 = xor %178, %162 (hasExternalUses)
%180:i64 = lshr %179, 63:i64
infer %180

; *****
; For LLVM instruction:
;  %388 = shl i64 %386, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161
%163:i64 = add %116, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %116, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64
%172:i64 = or %170, %171 (hasExternalUses)
%173:i64 = add %158, %172
%174:i64 = and 4294967295:i64, %171
%175:i64 = shl %158, 1:i64
%176:i64 = and 8589934590:i64, %175
%177:i64 = mul %174, %176
%178:i64 = add %173, %177 (hasExternalUses)
%179:i64 = xor %178, %162 (hasExternalUses)
%180:i64 = shl %179, 1:i64
infer %180

; *****
; For LLVM instruction:
;  %389 = or i64 %388, %387
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161
%163:i64 = add %116, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %116, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64
%172:i64 = or %170, %171 (hasExternalUses)
%173:i64 = add %158, %172
%174:i64 = and 4294967295:i64, %171
%175:i64 = shl %158, 1:i64
%176:i64 = and 8589934590:i64, %175
%177:i64 = mul %174, %176
%178:i64 = add %173, %177 (hasExternalUses)
%179:i64 = xor %178, %162
%180:i64 = shl %179, 1:i64
%181:i64 = lshr %179, 63:i64
%182:i64 = or %180, %181
infer %182

; *****
; For LLVM instruction:
;  %390 = add nuw nsw i32 %29, 1
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,8))
%1:i32 = addnw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %391 = icmp eq i32 %390, 8
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,8))
%1:i32 = addnw 1:i32, %0 (hasExternalUses)
%2:i1 = eq 8:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %393 = phi i32 [ %754, %392 ], [ 0, %28 ]
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,8))
infer %0

; *****
; For LLVM instruction:
;  %394 = shl nuw nsw i32 %393, 1
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,8))
%1:i32 = shlnw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %396 = load i64, i64* %395, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %397 = add nuw nsw i32 %394, 32
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,8))
%1:i32 = shlnw %0, 1:i32 (hasExternalUses)
%2:i32 = addnw 32:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %399 = load i64, i64* %398, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %400 = and i64 %399, 4294967295
; Looking for a replacement for:
%0:i64 = var
%1:i64 = and 4294967295:i64, %0
infer %1

; *****
; For LLVM instruction:
;  %401 = add i64 %399, %396
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %402 = shl i64 %396, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = shl %0, 1:i64
infer %1 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %403 = and i64 %402, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = shl %0, 1:i64
%2:i64 = and 8589934590:i64, %1
infer %2

; *****
; For LLVM instruction:
;  %404 = mul i64 %403, %400
; Looking for a replacement for:
%0:i64 = var
%1:i64 = and 4294967295:i64, %0
%2:i64 = var
%3:i64 = shl %2, 1:i64
%4:i64 = and 8589934590:i64, %3
%5:i64 = mul %1, %4
infer %5

; *****
; For LLVM instruction:
;  %405 = add i64 %401, %404
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
infer %7

; *****
; For LLVM instruction:
;  %406 = add nuw nsw i32 %394, 96
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,8))
%1:i32 = shlnw %0, 1:i32 (hasExternalUses)
%2:i32 = addnw 96:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %408 = load i64, i64* %407, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %409 = xor i64 %405, %408
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = add %1, %2
%4:i64 = and 4294967295:i64, %2
%5:i64 = shl %1, 1:i64
%6:i64 = and 8589934590:i64, %5
%7:i64 = mul %4, %6
%8:i64 = add %3, %7 (hasExternalUses)
%9:i64 = xor %0, %8
infer %9

; *****
; For LLVM instruction:
;  %410 = lshr i64 %409, 32
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = add %1, %2
%4:i64 = and 4294967295:i64, %2
%5:i64 = shl %1, 1:i64
%6:i64 = and 8589934590:i64, %5
%7:i64 = mul %4, %6
%8:i64 = add %3, %7 (hasExternalUses)
%9:i64 = xor %0, %8 (hasExternalUses)
%10:i64 = lshr %9, 32:i64
infer %10

; *****
; For LLVM instruction:
;  %411 = shl i64 %409, 32
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = add %1, %2
%4:i64 = and 4294967295:i64, %2
%5:i64 = shl %1, 1:i64
%6:i64 = and 8589934590:i64, %5
%7:i64 = mul %4, %6
%8:i64 = add %3, %7 (hasExternalUses)
%9:i64 = xor %0, %8 (hasExternalUses)
%10:i64 = shl %9, 32:i64
infer %10

; *****
; For LLVM instruction:
;  %412 = or i64 %411, %410
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = add %1, %2
%4:i64 = and 4294967295:i64, %2
%5:i64 = shl %1, 1:i64
%6:i64 = and 8589934590:i64, %5
%7:i64 = mul %4, %6
%8:i64 = add %3, %7 (hasExternalUses)
%9:i64 = xor %0, %8
%10:i64 = shl %9, 32:i64
%11:i64 = lshr %9, 32:i64 (hasExternalUses)
%12:i64 = or %10, %11
infer %12

; *****
; For LLVM instruction:
;  %413 = add nuw nsw i32 %394, 64
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,8))
%1:i32 = shlnw %0, 1:i32 (hasExternalUses)
%2:i32 = addnw 64:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %415 = load i64, i64* %414, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %416 = add i64 %412, %415
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64 (hasExternalUses)
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %0, %13
infer %14

; *****
; For LLVM instruction:
;  %417 = shl i64 %415, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = shl %0, 1:i64
infer %1 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %418 = and i64 %417, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = shl %0, 1:i64
%2:i64 = and 8589934590:i64, %1
infer %2

; *****
; For LLVM instruction:
;  %419 = mul i64 %418, %410
; Looking for a replacement for:
%0:i64 = var
%1:i64 = shl %0, 1:i64
%2:i64 = and 8589934590:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = add %4, %5
%7:i64 = and 4294967295:i64, %5
%8:i64 = shl %4, 1:i64
%9:i64 = and 8589934590:i64, %8
%10:i64 = mul %7, %9
%11:i64 = add %6, %10 (hasExternalUses)
%12:i64 = xor %3, %11 (hasExternalUses)
%13:i64 = lshr %12, 32:i64 (hasExternalUses)
%14:i64 = mul %2, %13
infer %14

; *****
; For LLVM instruction:
;  %420 = add i64 %416, %419
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
infer %18

; *****
; For LLVM instruction:
;  %421 = xor i64 %420, %399
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %3, %0
%5:i64 = and 4294967295:i64, %0
%6:i64 = shl %3, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %2, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %1, %13
%15:i64 = shl %1, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %0, %18
infer %19

; *****
; For LLVM instruction:
;  %422 = lshr i64 %421, 24
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %3, %0
%5:i64 = and 4294967295:i64, %0
%6:i64 = shl %3, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %2, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %1, %13
%15:i64 = shl %1, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %0, %18 (hasExternalUses)
%20:i64 = lshr %19, 24:i64
infer %20

; *****
; For LLVM instruction:
;  %423 = shl i64 %421, 40
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %3, %0
%5:i64 = and 4294967295:i64, %0
%6:i64 = shl %3, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %2, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %1, %13
%15:i64 = shl %1, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %0, %18 (hasExternalUses)
%20:i64 = shl %19, 40:i64
infer %20

; *****
; For LLVM instruction:
;  %424 = or i64 %423, %422
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %3, %0
%5:i64 = and 4294967295:i64, %0
%6:i64 = shl %3, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %2, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %1, %13
%15:i64 = shl %1, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %0, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64 (hasExternalUses)
%22:i64 = or %20, %21
infer %22

; *****
; For LLVM instruction:
;  %425 = and i64 %422, 4294967295
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %3, %0
%5:i64 = and 4294967295:i64, %0
%6:i64 = shl %3, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %2, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %1, %13
%15:i64 = shl %1, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %0, %18 (hasExternalUses)
%20:i64 = lshr %19, 24:i64 (hasExternalUses)
%21:i64 = and 4294967295:i64, %20
infer %21

; *****
; For LLVM instruction:
;  %426 = add i64 %424, %405
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6 (hasExternalUses)
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64 (hasExternalUses)
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
infer %23

; *****
; For LLVM instruction:
;  %427 = shl i64 %405, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6 (hasExternalUses)
%8:i64 = shl %7, 1:i64
infer %8 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %428 = and i64 %427, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6 (hasExternalUses)
%8:i64 = shl %7, 1:i64
%9:i64 = and 8589934590:i64, %8
infer %9

; *****
; For LLVM instruction:
;  %429 = mul i64 %425, %428
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %3, %0
%5:i64 = and 4294967295:i64, %0
%6:i64 = shl %3, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %2, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %1, %13
%15:i64 = shl %1, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %0, %18 (hasExternalUses)
%20:i64 = lshr %19, 24:i64 (hasExternalUses)
%21:i64 = and 4294967295:i64, %20
%22:i64 = shl %9, 1:i64
%23:i64 = and 8589934590:i64, %22
%24:i64 = mul %21, %23
infer %24

; *****
; For LLVM instruction:
;  %430 = add i64 %426, %429
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27
infer %28

; *****
; For LLVM instruction:
;  %431 = xor i64 %430, %412
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
infer %29

; *****
; For LLVM instruction:
;  %432 = lshr i64 %431, 16
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13 (hasExternalUses)
%30:i64 = lshr %29, 16:i64
infer %30

; *****
; For LLVM instruction:
;  %433 = shl i64 %431, 48
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13 (hasExternalUses)
%30:i64 = shl %29, 48:i64
infer %30

; *****
; For LLVM instruction:
;  %434 = or i64 %433, %432
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64 (hasExternalUses)
%32:i64 = or %30, %31
infer %32

; *****
; For LLVM instruction:
;  %435 = and i64 %432, 4294967295
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13 (hasExternalUses)
%30:i64 = lshr %29, 16:i64 (hasExternalUses)
%31:i64 = and 4294967295:i64, %30
infer %31

; *****
; For LLVM instruction:
;  %436 = add i64 %434, %420
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64 (hasExternalUses)
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
infer %33

; *****
; For LLVM instruction:
;  %437 = shl i64 %420, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = shl %18, 1:i64
infer %19 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %438 = and i64 %437, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = shl %18, 1:i64
%20:i64 = and 8589934590:i64, %19
infer %20

; *****
; For LLVM instruction:
;  %439 = mul i64 %435, %438
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13 (hasExternalUses)
%30:i64 = lshr %29, 16:i64 (hasExternalUses)
%31:i64 = and 4294967295:i64, %30
%32:i64 = shl %18, 1:i64
%33:i64 = and 8589934590:i64, %32
%34:i64 = mul %31, %33
infer %34

; *****
; For LLVM instruction:
;  %440 = add i64 %436, %439
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
infer %38

; *****
; For LLVM instruction:
;  %441 = xor i64 %440, %424
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = xor %38, %22
infer %39

; *****
; For LLVM instruction:
;  %442 = lshr i64 %441, 63
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = xor %38, %22 (hasExternalUses)
%40:i64 = lshr %39, 63:i64
infer %40

; *****
; For LLVM instruction:
;  %443 = shl i64 %441, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = xor %38, %22 (hasExternalUses)
%40:i64 = shl %39, 1:i64
infer %40

; *****
; For LLVM instruction:
;  %444 = or i64 %443, %442
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = xor %38, %22
%40:i64 = shl %39, 1:i64
%41:i64 = lshr %39, 63:i64
%42:i64 = or %40, %41
infer %42

; *****
; For LLVM instruction:
;  %445 = or i32 %394, 1
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,8))
%1:i32 = shlnw %0, 1:i32 (hasExternalUses)
%2:i32 = or 1:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %447 = load i64, i64* %446, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %448 = add nuw nsw i32 %394, 33
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,8))
%1:i32 = shlnw %0, 1:i32 (hasExternalUses)
%2:i32 = addnw 33:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %450 = load i64, i64* %449, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %451 = and i64 %450, 4294967295
; Looking for a replacement for:
%0:i64 = var
%1:i64 = and 4294967295:i64, %0
infer %1

; *****
; For LLVM instruction:
;  %452 = add i64 %450, %447
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %453 = shl i64 %447, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = shl %0, 1:i64
infer %1 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %454 = and i64 %453, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = shl %0, 1:i64
%2:i64 = and 8589934590:i64, %1
infer %2

; *****
; For LLVM instruction:
;  %455 = mul i64 %454, %451
; Looking for a replacement for:
%0:i64 = var
%1:i64 = and 4294967295:i64, %0
%2:i64 = var
%3:i64 = shl %2, 1:i64
%4:i64 = and 8589934590:i64, %3
%5:i64 = mul %1, %4
infer %5

; *****
; For LLVM instruction:
;  %456 = add i64 %452, %455
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
infer %7

; *****
; For LLVM instruction:
;  %457 = add nuw nsw i32 %394, 97
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,8))
%1:i32 = shlnw %0, 1:i32 (hasExternalUses)
%2:i32 = addnw 97:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %459 = load i64, i64* %458, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %460 = xor i64 %456, %459
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = add %1, %2
%4:i64 = and 4294967295:i64, %2
%5:i64 = shl %1, 1:i64
%6:i64 = and 8589934590:i64, %5
%7:i64 = mul %4, %6
%8:i64 = add %3, %7 (hasExternalUses)
%9:i64 = xor %0, %8
infer %9

; *****
; For LLVM instruction:
;  %461 = lshr i64 %460, 32
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = add %1, %2
%4:i64 = and 4294967295:i64, %2
%5:i64 = shl %1, 1:i64
%6:i64 = and 8589934590:i64, %5
%7:i64 = mul %4, %6
%8:i64 = add %3, %7 (hasExternalUses)
%9:i64 = xor %0, %8 (hasExternalUses)
%10:i64 = lshr %9, 32:i64
infer %10

; *****
; For LLVM instruction:
;  %462 = shl i64 %460, 32
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = add %1, %2
%4:i64 = and 4294967295:i64, %2
%5:i64 = shl %1, 1:i64
%6:i64 = and 8589934590:i64, %5
%7:i64 = mul %4, %6
%8:i64 = add %3, %7 (hasExternalUses)
%9:i64 = xor %0, %8 (hasExternalUses)
%10:i64 = shl %9, 32:i64
infer %10

; *****
; For LLVM instruction:
;  %463 = or i64 %462, %461
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = add %1, %2
%4:i64 = and 4294967295:i64, %2
%5:i64 = shl %1, 1:i64
%6:i64 = and 8589934590:i64, %5
%7:i64 = mul %4, %6
%8:i64 = add %3, %7 (hasExternalUses)
%9:i64 = xor %0, %8
%10:i64 = shl %9, 32:i64
%11:i64 = lshr %9, 32:i64 (hasExternalUses)
%12:i64 = or %10, %11
infer %12

; *****
; For LLVM instruction:
;  %464 = add nuw nsw i32 %394, 65
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,8))
%1:i32 = shlnw %0, 1:i32 (hasExternalUses)
%2:i32 = addnw 65:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %466 = load i64, i64* %465, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %467 = add i64 %463, %466
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64 (hasExternalUses)
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %0, %13
infer %14

; *****
; For LLVM instruction:
;  %468 = shl i64 %466, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = shl %0, 1:i64
infer %1 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %469 = and i64 %468, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = shl %0, 1:i64
%2:i64 = and 8589934590:i64, %1
infer %2

; *****
; For LLVM instruction:
;  %470 = mul i64 %469, %461
; Looking for a replacement for:
%0:i64 = var
%1:i64 = shl %0, 1:i64
%2:i64 = and 8589934590:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = add %4, %5
%7:i64 = and 4294967295:i64, %5
%8:i64 = shl %4, 1:i64
%9:i64 = and 8589934590:i64, %8
%10:i64 = mul %7, %9
%11:i64 = add %6, %10 (hasExternalUses)
%12:i64 = xor %3, %11 (hasExternalUses)
%13:i64 = lshr %12, 32:i64 (hasExternalUses)
%14:i64 = mul %2, %13
infer %14

; *****
; For LLVM instruction:
;  %471 = add i64 %467, %470
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
infer %18

; *****
; For LLVM instruction:
;  %472 = xor i64 %471, %450
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %3, %0
%5:i64 = and 4294967295:i64, %0
%6:i64 = shl %3, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %2, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %1, %13
%15:i64 = shl %1, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %0, %18
infer %19

; *****
; For LLVM instruction:
;  %473 = lshr i64 %472, 24
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %3, %0
%5:i64 = and 4294967295:i64, %0
%6:i64 = shl %3, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %2, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %1, %13
%15:i64 = shl %1, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %0, %18 (hasExternalUses)
%20:i64 = lshr %19, 24:i64
infer %20

; *****
; For LLVM instruction:
;  %474 = shl i64 %472, 40
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %3, %0
%5:i64 = and 4294967295:i64, %0
%6:i64 = shl %3, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %2, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %1, %13
%15:i64 = shl %1, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %0, %18 (hasExternalUses)
%20:i64 = shl %19, 40:i64
infer %20

; *****
; For LLVM instruction:
;  %475 = or i64 %474, %473
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %3, %0
%5:i64 = and 4294967295:i64, %0
%6:i64 = shl %3, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %2, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %1, %13
%15:i64 = shl %1, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %0, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64 (hasExternalUses)
%22:i64 = or %20, %21
infer %22

; *****
; For LLVM instruction:
;  %476 = and i64 %473, 4294967295
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %3, %0
%5:i64 = and 4294967295:i64, %0
%6:i64 = shl %3, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %2, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %1, %13
%15:i64 = shl %1, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %0, %18 (hasExternalUses)
%20:i64 = lshr %19, 24:i64 (hasExternalUses)
%21:i64 = and 4294967295:i64, %20
infer %21

; *****
; For LLVM instruction:
;  %477 = add i64 %475, %456
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6 (hasExternalUses)
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64 (hasExternalUses)
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
infer %23

; *****
; For LLVM instruction:
;  %478 = shl i64 %456, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6 (hasExternalUses)
%8:i64 = shl %7, 1:i64
infer %8 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %479 = and i64 %478, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6 (hasExternalUses)
%8:i64 = shl %7, 1:i64
%9:i64 = and 8589934590:i64, %8
infer %9

; *****
; For LLVM instruction:
;  %480 = mul i64 %476, %479
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %3, %0
%5:i64 = and 4294967295:i64, %0
%6:i64 = shl %3, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %2, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %1, %13
%15:i64 = shl %1, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %0, %18 (hasExternalUses)
%20:i64 = lshr %19, 24:i64 (hasExternalUses)
%21:i64 = and 4294967295:i64, %20
%22:i64 = shl %9, 1:i64
%23:i64 = and 8589934590:i64, %22
%24:i64 = mul %21, %23
infer %24

; *****
; For LLVM instruction:
;  %481 = add i64 %477, %480
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27
infer %28

; *****
; For LLVM instruction:
;  %482 = xor i64 %481, %463
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
infer %29

; *****
; For LLVM instruction:
;  %483 = lshr i64 %482, 16
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13 (hasExternalUses)
%30:i64 = lshr %29, 16:i64
infer %30

; *****
; For LLVM instruction:
;  %484 = shl i64 %482, 48
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13 (hasExternalUses)
%30:i64 = shl %29, 48:i64
infer %30

; *****
; For LLVM instruction:
;  %485 = or i64 %484, %483
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64 (hasExternalUses)
%32:i64 = or %30, %31
infer %32

; *****
; For LLVM instruction:
;  %486 = and i64 %483, 4294967295
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13 (hasExternalUses)
%30:i64 = lshr %29, 16:i64 (hasExternalUses)
%31:i64 = and 4294967295:i64, %30
infer %31

; *****
; For LLVM instruction:
;  %487 = add i64 %485, %471
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64 (hasExternalUses)
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
infer %33

; *****
; For LLVM instruction:
;  %488 = shl i64 %471, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = shl %18, 1:i64
infer %19 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %489 = and i64 %488, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = shl %18, 1:i64
%20:i64 = and 8589934590:i64, %19
infer %20

; *****
; For LLVM instruction:
;  %490 = mul i64 %486, %489
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13 (hasExternalUses)
%30:i64 = lshr %29, 16:i64 (hasExternalUses)
%31:i64 = and 4294967295:i64, %30
%32:i64 = shl %18, 1:i64
%33:i64 = and 8589934590:i64, %32
%34:i64 = mul %31, %33
infer %34

; *****
; For LLVM instruction:
;  %491 = add i64 %487, %490
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
infer %38

; *****
; For LLVM instruction:
;  %492 = xor i64 %491, %475
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = xor %38, %22
infer %39

; *****
; For LLVM instruction:
;  %493 = lshr i64 %492, 63
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = xor %38, %22 (hasExternalUses)
%40:i64 = lshr %39, 63:i64
infer %40

; *****
; For LLVM instruction:
;  %494 = shl i64 %492, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = xor %38, %22 (hasExternalUses)
%40:i64 = shl %39, 1:i64
infer %40

; *****
; For LLVM instruction:
;  %495 = or i64 %494, %493
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = xor %38, %22
%40:i64 = shl %39, 1:i64
%41:i64 = lshr %39, 63:i64
%42:i64 = or %40, %41
infer %42

; *****
; For LLVM instruction:
;  %496 = add nuw nsw i32 %394, 16
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,8))
%1:i32 = shlnw %0, 1:i32 (hasExternalUses)
%2:i32 = addnw 16:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %498 = load i64, i64* %497, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %499 = add nuw nsw i32 %394, 48
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,8))
%1:i32 = shlnw %0, 1:i32 (hasExternalUses)
%2:i32 = addnw 48:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %501 = load i64, i64* %500, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %502 = and i64 %501, 4294967295
; Looking for a replacement for:
%0:i64 = var
%1:i64 = and 4294967295:i64, %0
infer %1

; *****
; For LLVM instruction:
;  %503 = add i64 %501, %498
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %504 = shl i64 %498, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = shl %0, 1:i64
infer %1 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %505 = and i64 %504, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = shl %0, 1:i64
%2:i64 = and 8589934590:i64, %1
infer %2

; *****
; For LLVM instruction:
;  %506 = mul i64 %505, %502
; Looking for a replacement for:
%0:i64 = var
%1:i64 = and 4294967295:i64, %0
%2:i64 = var
%3:i64 = shl %2, 1:i64
%4:i64 = and 8589934590:i64, %3
%5:i64 = mul %1, %4
infer %5

; *****
; For LLVM instruction:
;  %507 = add i64 %503, %506
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
infer %7

; *****
; For LLVM instruction:
;  %508 = add nuw nsw i32 %394, 112
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,8))
%1:i32 = shlnw %0, 1:i32 (hasExternalUses)
%2:i32 = addnw 112:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %510 = load i64, i64* %509, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %511 = xor i64 %507, %510
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = add %1, %2
%4:i64 = and 4294967295:i64, %2
%5:i64 = shl %1, 1:i64
%6:i64 = and 8589934590:i64, %5
%7:i64 = mul %4, %6
%8:i64 = add %3, %7 (hasExternalUses)
%9:i64 = xor %0, %8
infer %9

; *****
; For LLVM instruction:
;  %512 = lshr i64 %511, 32
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = add %1, %2
%4:i64 = and 4294967295:i64, %2
%5:i64 = shl %1, 1:i64
%6:i64 = and 8589934590:i64, %5
%7:i64 = mul %4, %6
%8:i64 = add %3, %7 (hasExternalUses)
%9:i64 = xor %0, %8 (hasExternalUses)
%10:i64 = lshr %9, 32:i64
infer %10

; *****
; For LLVM instruction:
;  %513 = shl i64 %511, 32
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = add %1, %2
%4:i64 = and 4294967295:i64, %2
%5:i64 = shl %1, 1:i64
%6:i64 = and 8589934590:i64, %5
%7:i64 = mul %4, %6
%8:i64 = add %3, %7 (hasExternalUses)
%9:i64 = xor %0, %8 (hasExternalUses)
%10:i64 = shl %9, 32:i64
infer %10

; *****
; For LLVM instruction:
;  %514 = or i64 %513, %512
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = add %1, %2
%4:i64 = and 4294967295:i64, %2
%5:i64 = shl %1, 1:i64
%6:i64 = and 8589934590:i64, %5
%7:i64 = mul %4, %6
%8:i64 = add %3, %7 (hasExternalUses)
%9:i64 = xor %0, %8
%10:i64 = shl %9, 32:i64
%11:i64 = lshr %9, 32:i64 (hasExternalUses)
%12:i64 = or %10, %11
infer %12

; *****
; For LLVM instruction:
;  %515 = add nuw nsw i32 %394, 80
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,8))
%1:i32 = shlnw %0, 1:i32 (hasExternalUses)
%2:i32 = addnw 80:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %517 = load i64, i64* %516, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %518 = add i64 %514, %517
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64 (hasExternalUses)
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %0, %13
infer %14

; *****
; For LLVM instruction:
;  %519 = shl i64 %517, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = shl %0, 1:i64
infer %1 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %520 = and i64 %519, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = shl %0, 1:i64
%2:i64 = and 8589934590:i64, %1
infer %2

; *****
; For LLVM instruction:
;  %521 = mul i64 %520, %512
; Looking for a replacement for:
%0:i64 = var
%1:i64 = shl %0, 1:i64
%2:i64 = and 8589934590:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = add %4, %5
%7:i64 = and 4294967295:i64, %5
%8:i64 = shl %4, 1:i64
%9:i64 = and 8589934590:i64, %8
%10:i64 = mul %7, %9
%11:i64 = add %6, %10 (hasExternalUses)
%12:i64 = xor %3, %11 (hasExternalUses)
%13:i64 = lshr %12, 32:i64 (hasExternalUses)
%14:i64 = mul %2, %13
infer %14

; *****
; For LLVM instruction:
;  %522 = add i64 %518, %521
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
infer %18

; *****
; For LLVM instruction:
;  %523 = xor i64 %522, %501
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %3, %0
%5:i64 = and 4294967295:i64, %0
%6:i64 = shl %3, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %2, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %1, %13
%15:i64 = shl %1, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %0, %18
infer %19

; *****
; For LLVM instruction:
;  %524 = lshr i64 %523, 24
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %3, %0
%5:i64 = and 4294967295:i64, %0
%6:i64 = shl %3, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %2, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %1, %13
%15:i64 = shl %1, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %0, %18 (hasExternalUses)
%20:i64 = lshr %19, 24:i64
infer %20

; *****
; For LLVM instruction:
;  %525 = shl i64 %523, 40
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %3, %0
%5:i64 = and 4294967295:i64, %0
%6:i64 = shl %3, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %2, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %1, %13
%15:i64 = shl %1, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %0, %18 (hasExternalUses)
%20:i64 = shl %19, 40:i64
infer %20

; *****
; For LLVM instruction:
;  %526 = or i64 %525, %524
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %3, %0
%5:i64 = and 4294967295:i64, %0
%6:i64 = shl %3, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %2, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %1, %13
%15:i64 = shl %1, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %0, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64 (hasExternalUses)
%22:i64 = or %20, %21
infer %22

; *****
; For LLVM instruction:
;  %527 = and i64 %524, 4294967295
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %3, %0
%5:i64 = and 4294967295:i64, %0
%6:i64 = shl %3, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %2, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %1, %13
%15:i64 = shl %1, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %0, %18 (hasExternalUses)
%20:i64 = lshr %19, 24:i64 (hasExternalUses)
%21:i64 = and 4294967295:i64, %20
infer %21

; *****
; For LLVM instruction:
;  %528 = add i64 %526, %507
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6 (hasExternalUses)
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64 (hasExternalUses)
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
infer %23

; *****
; For LLVM instruction:
;  %529 = shl i64 %507, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6 (hasExternalUses)
%8:i64 = shl %7, 1:i64
infer %8 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %530 = and i64 %529, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6 (hasExternalUses)
%8:i64 = shl %7, 1:i64
%9:i64 = and 8589934590:i64, %8
infer %9

; *****
; For LLVM instruction:
;  %531 = mul i64 %527, %530
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %3, %0
%5:i64 = and 4294967295:i64, %0
%6:i64 = shl %3, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %2, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %1, %13
%15:i64 = shl %1, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %0, %18 (hasExternalUses)
%20:i64 = lshr %19, 24:i64 (hasExternalUses)
%21:i64 = and 4294967295:i64, %20
%22:i64 = shl %9, 1:i64
%23:i64 = and 8589934590:i64, %22
%24:i64 = mul %21, %23
infer %24

; *****
; For LLVM instruction:
;  %532 = add i64 %528, %531
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27
infer %28

; *****
; For LLVM instruction:
;  %533 = xor i64 %532, %514
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
infer %29

; *****
; For LLVM instruction:
;  %534 = lshr i64 %533, 16
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13 (hasExternalUses)
%30:i64 = lshr %29, 16:i64
infer %30

; *****
; For LLVM instruction:
;  %535 = shl i64 %533, 48
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13 (hasExternalUses)
%30:i64 = shl %29, 48:i64
infer %30

; *****
; For LLVM instruction:
;  %536 = or i64 %535, %534
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64 (hasExternalUses)
%32:i64 = or %30, %31
infer %32

; *****
; For LLVM instruction:
;  %537 = and i64 %534, 4294967295
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13 (hasExternalUses)
%30:i64 = lshr %29, 16:i64 (hasExternalUses)
%31:i64 = and 4294967295:i64, %30
infer %31

; *****
; For LLVM instruction:
;  %538 = add i64 %536, %522
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64 (hasExternalUses)
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
infer %33

; *****
; For LLVM instruction:
;  %539 = shl i64 %522, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = shl %18, 1:i64
infer %19 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %540 = and i64 %539, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = shl %18, 1:i64
%20:i64 = and 8589934590:i64, %19
infer %20

; *****
; For LLVM instruction:
;  %541 = mul i64 %537, %540
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13 (hasExternalUses)
%30:i64 = lshr %29, 16:i64 (hasExternalUses)
%31:i64 = and 4294967295:i64, %30
%32:i64 = shl %18, 1:i64
%33:i64 = and 8589934590:i64, %32
%34:i64 = mul %31, %33
infer %34

; *****
; For LLVM instruction:
;  %542 = add i64 %538, %541
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
infer %38

; *****
; For LLVM instruction:
;  %543 = xor i64 %542, %526
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = xor %38, %22
infer %39

; *****
; For LLVM instruction:
;  %544 = lshr i64 %543, 63
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = xor %38, %22 (hasExternalUses)
%40:i64 = lshr %39, 63:i64
infer %40

; *****
; For LLVM instruction:
;  %545 = shl i64 %543, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = xor %38, %22 (hasExternalUses)
%40:i64 = shl %39, 1:i64
infer %40

; *****
; For LLVM instruction:
;  %546 = or i64 %545, %544
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = xor %38, %22
%40:i64 = shl %39, 1:i64
%41:i64 = lshr %39, 63:i64
%42:i64 = or %40, %41
infer %42

; *****
; For LLVM instruction:
;  %547 = add nuw nsw i32 %394, 17
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,8))
%1:i32 = shlnw %0, 1:i32 (hasExternalUses)
%2:i32 = addnw 17:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %549 = load i64, i64* %548, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %550 = add nuw nsw i32 %394, 49
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,8))
%1:i32 = shlnw %0, 1:i32 (hasExternalUses)
%2:i32 = addnw 49:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %552 = load i64, i64* %551, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %553 = and i64 %552, 4294967295
; Looking for a replacement for:
%0:i64 = var
%1:i64 = and 4294967295:i64, %0
infer %1

; *****
; For LLVM instruction:
;  %554 = add i64 %552, %549
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %555 = shl i64 %549, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = shl %0, 1:i64
infer %1 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %556 = and i64 %555, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = shl %0, 1:i64
%2:i64 = and 8589934590:i64, %1
infer %2

; *****
; For LLVM instruction:
;  %557 = mul i64 %556, %553
; Looking for a replacement for:
%0:i64 = var
%1:i64 = and 4294967295:i64, %0
%2:i64 = var
%3:i64 = shl %2, 1:i64
%4:i64 = and 8589934590:i64, %3
%5:i64 = mul %1, %4
infer %5

; *****
; For LLVM instruction:
;  %558 = add i64 %554, %557
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
infer %7

; *****
; For LLVM instruction:
;  %559 = add nuw nsw i32 %394, 113
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,8))
%1:i32 = shlnw %0, 1:i32 (hasExternalUses)
%2:i32 = addnw 113:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %561 = load i64, i64* %560, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %562 = xor i64 %558, %561
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = add %1, %2
%4:i64 = and 4294967295:i64, %2
%5:i64 = shl %1, 1:i64
%6:i64 = and 8589934590:i64, %5
%7:i64 = mul %4, %6
%8:i64 = add %3, %7 (hasExternalUses)
%9:i64 = xor %0, %8
infer %9

; *****
; For LLVM instruction:
;  %563 = lshr i64 %562, 32
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = add %1, %2
%4:i64 = and 4294967295:i64, %2
%5:i64 = shl %1, 1:i64
%6:i64 = and 8589934590:i64, %5
%7:i64 = mul %4, %6
%8:i64 = add %3, %7 (hasExternalUses)
%9:i64 = xor %0, %8 (hasExternalUses)
%10:i64 = lshr %9, 32:i64
infer %10

; *****
; For LLVM instruction:
;  %564 = shl i64 %562, 32
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = add %1, %2
%4:i64 = and 4294967295:i64, %2
%5:i64 = shl %1, 1:i64
%6:i64 = and 8589934590:i64, %5
%7:i64 = mul %4, %6
%8:i64 = add %3, %7 (hasExternalUses)
%9:i64 = xor %0, %8 (hasExternalUses)
%10:i64 = shl %9, 32:i64
infer %10

; *****
; For LLVM instruction:
;  %565 = or i64 %564, %563
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = add %1, %2
%4:i64 = and 4294967295:i64, %2
%5:i64 = shl %1, 1:i64
%6:i64 = and 8589934590:i64, %5
%7:i64 = mul %4, %6
%8:i64 = add %3, %7 (hasExternalUses)
%9:i64 = xor %0, %8
%10:i64 = shl %9, 32:i64
%11:i64 = lshr %9, 32:i64 (hasExternalUses)
%12:i64 = or %10, %11
infer %12

; *****
; For LLVM instruction:
;  %566 = add nuw nsw i32 %394, 81
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,8))
%1:i32 = shlnw %0, 1:i32 (hasExternalUses)
%2:i32 = addnw 81:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %568 = load i64, i64* %567, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %569 = add i64 %565, %568
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64 (hasExternalUses)
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %0, %13
infer %14

; *****
; For LLVM instruction:
;  %570 = shl i64 %568, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = shl %0, 1:i64
infer %1 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %571 = and i64 %570, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = shl %0, 1:i64
%2:i64 = and 8589934590:i64, %1
infer %2

; *****
; For LLVM instruction:
;  %572 = mul i64 %571, %563
; Looking for a replacement for:
%0:i64 = var
%1:i64 = shl %0, 1:i64
%2:i64 = and 8589934590:i64, %1
%3:i64 = var
%4:i64 = var
%5:i64 = var
%6:i64 = add %4, %5
%7:i64 = and 4294967295:i64, %5
%8:i64 = shl %4, 1:i64
%9:i64 = and 8589934590:i64, %8
%10:i64 = mul %7, %9
%11:i64 = add %6, %10 (hasExternalUses)
%12:i64 = xor %3, %11 (hasExternalUses)
%13:i64 = lshr %12, 32:i64 (hasExternalUses)
%14:i64 = mul %2, %13
infer %14

; *****
; For LLVM instruction:
;  %573 = add i64 %569, %572
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
infer %18

; *****
; For LLVM instruction:
;  %574 = xor i64 %573, %552
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %3, %0
%5:i64 = and 4294967295:i64, %0
%6:i64 = shl %3, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %2, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %1, %13
%15:i64 = shl %1, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %0, %18
infer %19

; *****
; For LLVM instruction:
;  %575 = lshr i64 %574, 24
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %3, %0
%5:i64 = and 4294967295:i64, %0
%6:i64 = shl %3, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %2, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %1, %13
%15:i64 = shl %1, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %0, %18 (hasExternalUses)
%20:i64 = lshr %19, 24:i64
infer %20

; *****
; For LLVM instruction:
;  %576 = shl i64 %574, 40
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %3, %0
%5:i64 = and 4294967295:i64, %0
%6:i64 = shl %3, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %2, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %1, %13
%15:i64 = shl %1, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %0, %18 (hasExternalUses)
%20:i64 = shl %19, 40:i64
infer %20

; *****
; For LLVM instruction:
;  %577 = or i64 %576, %575
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %3, %0
%5:i64 = and 4294967295:i64, %0
%6:i64 = shl %3, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %2, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %1, %13
%15:i64 = shl %1, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %0, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64 (hasExternalUses)
%22:i64 = or %20, %21
infer %22

; *****
; For LLVM instruction:
;  %578 = and i64 %575, 4294967295
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %3, %0
%5:i64 = and 4294967295:i64, %0
%6:i64 = shl %3, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %2, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %1, %13
%15:i64 = shl %1, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %0, %18 (hasExternalUses)
%20:i64 = lshr %19, 24:i64 (hasExternalUses)
%21:i64 = and 4294967295:i64, %20
infer %21

; *****
; For LLVM instruction:
;  %579 = add i64 %577, %558
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6 (hasExternalUses)
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64 (hasExternalUses)
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
infer %23

; *****
; For LLVM instruction:
;  %580 = shl i64 %558, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6 (hasExternalUses)
%8:i64 = shl %7, 1:i64
infer %8 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %581 = and i64 %580, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6 (hasExternalUses)
%8:i64 = shl %7, 1:i64
%9:i64 = and 8589934590:i64, %8
infer %9

; *****
; For LLVM instruction:
;  %582 = mul i64 %578, %581
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %3, %0
%5:i64 = and 4294967295:i64, %0
%6:i64 = shl %3, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %2, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %1, %13
%15:i64 = shl %1, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %0, %18 (hasExternalUses)
%20:i64 = lshr %19, 24:i64 (hasExternalUses)
%21:i64 = and 4294967295:i64, %20
%22:i64 = shl %9, 1:i64
%23:i64 = and 8589934590:i64, %22
%24:i64 = mul %21, %23
infer %24

; *****
; For LLVM instruction:
;  %583 = add i64 %579, %582
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27
infer %28

; *****
; For LLVM instruction:
;  %584 = xor i64 %583, %565
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
infer %29

; *****
; For LLVM instruction:
;  %585 = lshr i64 %584, 16
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13 (hasExternalUses)
%30:i64 = lshr %29, 16:i64
infer %30

; *****
; For LLVM instruction:
;  %586 = shl i64 %584, 48
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13 (hasExternalUses)
%30:i64 = shl %29, 48:i64
infer %30

; *****
; For LLVM instruction:
;  %587 = or i64 %586, %585
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64 (hasExternalUses)
%32:i64 = or %30, %31
infer %32

; *****
; For LLVM instruction:
;  %588 = and i64 %585, 4294967295
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13 (hasExternalUses)
%30:i64 = lshr %29, 16:i64 (hasExternalUses)
%31:i64 = and 4294967295:i64, %30
infer %31

; *****
; For LLVM instruction:
;  %589 = add i64 %587, %573
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64 (hasExternalUses)
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
infer %33

; *****
; For LLVM instruction:
;  %590 = shl i64 %573, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = shl %18, 1:i64
infer %19 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %591 = and i64 %590, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8 (hasExternalUses)
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = shl %18, 1:i64
%20:i64 = and 8589934590:i64, %19
infer %20

; *****
; For LLVM instruction:
;  %592 = mul i64 %588, %591
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13 (hasExternalUses)
%30:i64 = lshr %29, 16:i64 (hasExternalUses)
%31:i64 = and 4294967295:i64, %30
%32:i64 = shl %18, 1:i64
%33:i64 = and 8589934590:i64, %32
%34:i64 = mul %31, %33
infer %34

; *****
; For LLVM instruction:
;  %593 = add i64 %589, %592
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
infer %38

; *****
; For LLVM instruction:
;  %594 = xor i64 %593, %577
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = xor %38, %22
infer %39

; *****
; For LLVM instruction:
;  %595 = lshr i64 %594, 63
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = xor %38, %22 (hasExternalUses)
%40:i64 = lshr %39, 63:i64
infer %40

; *****
; For LLVM instruction:
;  %596 = shl i64 %594, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = xor %38, %22 (hasExternalUses)
%40:i64 = shl %39, 1:i64
infer %40

; *****
; For LLVM instruction:
;  %597 = or i64 %596, %595
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = xor %38, %22
%40:i64 = shl %39, 1:i64
%41:i64 = lshr %39, 63:i64
%42:i64 = or %40, %41
infer %42

; *****
; For LLVM instruction:
;  %598 = and i64 %495, 4294967295
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = xor %38, %22
%40:i64 = shl %39, 1:i64
%41:i64 = lshr %39, 63:i64
%42:i64 = or %40, %41 (hasExternalUses)
%43:i64 = and 4294967295:i64, %42
infer %43

; *****
; For LLVM instruction:
;  %599 = add i64 %495, %430
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
infer %72

; *****
; For LLVM instruction:
;  %600 = shl i64 %430, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = shl %28, 1:i64
infer %29 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %601 = and i64 %600, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = shl %28, 1:i64
%30:i64 = and 8589934590:i64, %29
infer %30

; *****
; For LLVM instruction:
;  %602 = mul i64 %598, %601
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = xor %38, %22
%40:i64 = shl %39, 1:i64
%41:i64 = lshr %39, 63:i64
%42:i64 = or %40, %41 (hasExternalUses)
%43:i64 = and 4294967295:i64, %42
%44:i64 = var
%45:i64 = var
%46:i64 = add %44, %45
%47:i64 = and 4294967295:i64, %45
%48:i64 = shl %44, 1:i64
%49:i64 = and 8589934590:i64, %48
%50:i64 = mul %47, %49
%51:i64 = add %46, %50
%52:i64 = var
%53:i64 = var
%54:i64 = xor %53, %51
%55:i64 = shl %54, 32:i64
%56:i64 = lshr %54, 32:i64
%57:i64 = or %55, %56 (hasExternalUses)
%58:i64 = add %52, %57
%59:i64 = shl %52, 1:i64
%60:i64 = and 8589934590:i64, %59
%61:i64 = mul %60, %56
%62:i64 = add %58, %61 (hasExternalUses)
%63:i64 = xor %45, %62
%64:i64 = shl %63, 40:i64
%65:i64 = lshr %63, 24:i64
%66:i64 = or %64, %65 (hasExternalUses)
%67:i64 = add %51, %66
%68:i64 = and 4294967295:i64, %65
%69:i64 = shl %51, 1:i64
%70:i64 = and 8589934590:i64, %69
%71:i64 = mul %68, %70
%72:i64 = add %67, %71 (hasExternalUses)
%73:i64 = shl %72, 1:i64
%74:i64 = and 8589934590:i64, %73
%75:i64 = mul %43, %74
infer %75

; *****
; For LLVM instruction:
;  %603 = add i64 %599, %602
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
infer %77

; *****
; For LLVM instruction:
;  %604 = xor i64 %587, %603
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = var
%79:i64 = var
%80:i64 = add %78, %79
%81:i64 = and 4294967295:i64, %79
%82:i64 = shl %78, 1:i64
%83:i64 = and 8589934590:i64, %82
%84:i64 = mul %81, %83
%85:i64 = add %80, %84
%86:i64 = var
%87:i64 = var
%88:i64 = xor %87, %85
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %86, %91
%93:i64 = shl %86, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95 (hasExternalUses)
%97:i64 = xor %79, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %85, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %85, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64 (hasExternalUses)
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = xor %77, %110
infer %111

; *****
; For LLVM instruction:
;  %605 = lshr i64 %604, 32
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = var
%79:i64 = var
%80:i64 = add %78, %79
%81:i64 = and 4294967295:i64, %79
%82:i64 = shl %78, 1:i64
%83:i64 = and 8589934590:i64, %82
%84:i64 = mul %81, %83
%85:i64 = add %80, %84
%86:i64 = var
%87:i64 = var
%88:i64 = xor %87, %85
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %86, %91
%93:i64 = shl %86, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95 (hasExternalUses)
%97:i64 = xor %79, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %85, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %85, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64 (hasExternalUses)
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = xor %77, %110 (hasExternalUses)
%112:i64 = lshr %111, 32:i64
infer %112

; *****
; For LLVM instruction:
;  %606 = shl i64 %604, 32
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = var
%79:i64 = var
%80:i64 = add %78, %79
%81:i64 = and 4294967295:i64, %79
%82:i64 = shl %78, 1:i64
%83:i64 = and 8589934590:i64, %82
%84:i64 = mul %81, %83
%85:i64 = add %80, %84
%86:i64 = var
%87:i64 = var
%88:i64 = xor %87, %85
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %86, %91
%93:i64 = shl %86, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95 (hasExternalUses)
%97:i64 = xor %79, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %85, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %85, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64 (hasExternalUses)
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = xor %77, %110 (hasExternalUses)
%112:i64 = shl %111, 32:i64
infer %112

; *****
; For LLVM instruction:
;  %607 = or i64 %606, %605
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = var
%79:i64 = var
%80:i64 = add %78, %79
%81:i64 = and 4294967295:i64, %79
%82:i64 = shl %78, 1:i64
%83:i64 = and 8589934590:i64, %82
%84:i64 = mul %81, %83
%85:i64 = add %80, %84
%86:i64 = var
%87:i64 = var
%88:i64 = xor %87, %85
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %86, %91
%93:i64 = shl %86, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95 (hasExternalUses)
%97:i64 = xor %79, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %85, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %85, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64 (hasExternalUses)
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = xor %77, %110
%112:i64 = shl %111, 32:i64
%113:i64 = lshr %111, 32:i64 (hasExternalUses)
%114:i64 = or %112, %113
infer %114

; *****
; For LLVM instruction:
;  %608 = add i64 %607, %542
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64 (hasExternalUses)
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
infer %154

; *****
; For LLVM instruction:
;  %609 = shl i64 %542, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = shl %38, 1:i64
infer %39 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %610 = and i64 %609, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = shl %38, 1:i64
%40:i64 = and 8589934590:i64, %39
infer %40

; *****
; For LLVM instruction:
;  %611 = mul i64 %605, %610
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = shl %38, 1:i64
%40:i64 = and 8589934590:i64, %39
%41:i64 = var
%42:i64 = var
%43:i64 = add %41, %42
%44:i64 = and 4294967295:i64, %42
%45:i64 = shl %41, 1:i64
%46:i64 = and 8589934590:i64, %45
%47:i64 = mul %44, %46
%48:i64 = add %43, %47
%49:i64 = var
%50:i64 = var
%51:i64 = xor %50, %48
%52:i64 = shl %51, 32:i64
%53:i64 = lshr %51, 32:i64
%54:i64 = or %52, %53 (hasExternalUses)
%55:i64 = add %49, %54
%56:i64 = shl %49, 1:i64
%57:i64 = and 8589934590:i64, %56
%58:i64 = mul %57, %53
%59:i64 = add %55, %58 (hasExternalUses)
%60:i64 = xor %42, %59
%61:i64 = shl %60, 40:i64
%62:i64 = lshr %60, 24:i64
%63:i64 = or %61, %62 (hasExternalUses)
%64:i64 = add %48, %63
%65:i64 = and 4294967295:i64, %62
%66:i64 = shl %48, 1:i64
%67:i64 = and 8589934590:i64, %66
%68:i64 = mul %65, %67
%69:i64 = add %64, %68 (hasExternalUses)
%70:i64 = var
%71:i64 = var
%72:i64 = var
%73:i64 = var
%74:i64 = add %72, %73
%75:i64 = and 4294967295:i64, %73
%76:i64 = shl %72, 1:i64
%77:i64 = and 8589934590:i64, %76
%78:i64 = mul %75, %77
%79:i64 = add %74, %78
%80:i64 = xor %71, %79
%81:i64 = shl %80, 32:i64
%82:i64 = lshr %80, 32:i64
%83:i64 = or %81, %82
%84:i64 = add %70, %83
%85:i64 = shl %70, 1:i64
%86:i64 = and 8589934590:i64, %85
%87:i64 = mul %86, %82
%88:i64 = add %84, %87
%89:i64 = xor %73, %88
%90:i64 = shl %89, 40:i64
%91:i64 = lshr %89, 24:i64
%92:i64 = or %90, %91
%93:i64 = add %79, %92
%94:i64 = and 4294967295:i64, %91
%95:i64 = shl %79, 1:i64
%96:i64 = and 8589934590:i64, %95
%97:i64 = mul %94, %96
%98:i64 = add %93, %97 (hasExternalUses)
%99:i64 = xor %98, %83
%100:i64 = shl %99, 48:i64
%101:i64 = lshr %99, 16:i64
%102:i64 = or %100, %101 (hasExternalUses)
%103:i64 = add %88, %102
%104:i64 = and 4294967295:i64, %101
%105:i64 = shl %88, 1:i64
%106:i64 = and 8589934590:i64, %105
%107:i64 = mul %104, %106
%108:i64 = add %103, %107 (hasExternalUses)
%109:i64 = xor %108, %92
%110:i64 = shl %109, 1:i64
%111:i64 = lshr %109, 63:i64
%112:i64 = or %110, %111 (hasExternalUses)
%113:i64 = add %69, %112
%114:i64 = and 4294967295:i64, %112
%115:i64 = shl %69, 1:i64
%116:i64 = and 8589934590:i64, %115
%117:i64 = mul %114, %116
%118:i64 = add %113, %117 (hasExternalUses)
%119:i64 = var
%120:i64 = var
%121:i64 = add %119, %120
%122:i64 = and 4294967295:i64, %120
%123:i64 = shl %119, 1:i64
%124:i64 = and 8589934590:i64, %123
%125:i64 = mul %122, %124
%126:i64 = add %121, %125
%127:i64 = var
%128:i64 = var
%129:i64 = xor %128, %126
%130:i64 = shl %129, 32:i64
%131:i64 = lshr %129, 32:i64
%132:i64 = or %130, %131
%133:i64 = add %127, %132
%134:i64 = shl %127, 1:i64
%135:i64 = and 8589934590:i64, %134
%136:i64 = mul %135, %131
%137:i64 = add %133, %136 (hasExternalUses)
%138:i64 = xor %120, %137
%139:i64 = shl %138, 40:i64
%140:i64 = lshr %138, 24:i64
%141:i64 = or %139, %140 (hasExternalUses)
%142:i64 = add %126, %141
%143:i64 = and 4294967295:i64, %140
%144:i64 = shl %126, 1:i64
%145:i64 = and 8589934590:i64, %144
%146:i64 = mul %143, %145
%147:i64 = add %142, %146 (hasExternalUses)
%148:i64 = xor %147, %132
%149:i64 = shl %148, 48:i64
%150:i64 = lshr %148, 16:i64 (hasExternalUses)
%151:i64 = or %149, %150 (hasExternalUses)
%152:i64 = xor %118, %151 (hasExternalUses)
%153:i64 = lshr %152, 32:i64 (hasExternalUses)
%154:i64 = mul %40, %153
infer %154

; *****
; For LLVM instruction:
;  %612 = add i64 %608, %611
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157
infer %158

; *****
; For LLVM instruction:
;  %613 = xor i64 %612, %495
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110
infer %159

; *****
; For LLVM instruction:
;  %614 = lshr i64 %613, 24
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110 (hasExternalUses)
%160:i64 = lshr %159, 24:i64
infer %160

; *****
; For LLVM instruction:
;  %615 = shl i64 %613, 40
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110 (hasExternalUses)
%160:i64 = shl %159, 40:i64
infer %160

; *****
; For LLVM instruction:
;  %616 = or i64 %615, %614
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64 (hasExternalUses)
%162:i64 = or %160, %161
infer %162

; *****
; For LLVM instruction:
;  %617 = and i64 %614, 4294967295
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110 (hasExternalUses)
%160:i64 = lshr %159, 24:i64 (hasExternalUses)
%161:i64 = and 4294967295:i64, %160
infer %161

; *****
; For LLVM instruction:
;  %618 = add i64 %616, %603
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64 (hasExternalUses)
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
infer %163

; *****
; For LLVM instruction:
;  %619 = shl i64 %603, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = shl %77, 1:i64
infer %78 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %620 = and i64 %619, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = shl %77, 1:i64
%79:i64 = and 8589934590:i64, %78
infer %79

; *****
; For LLVM instruction:
;  %621 = mul i64 %617, %620
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110 (hasExternalUses)
%160:i64 = lshr %159, 24:i64 (hasExternalUses)
%161:i64 = and 4294967295:i64, %160
%162:i64 = shl %116, 1:i64
%163:i64 = and 8589934590:i64, %162
%164:i64 = mul %161, %163
infer %164

; *****
; For LLVM instruction:
;  %622 = add i64 %618, %621
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167
infer %168

; *****
; For LLVM instruction:
;  %623 = xor i64 %622, %607
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
infer %169

; *****
; For LLVM instruction:
;  %624 = lshr i64 %623, 16
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153 (hasExternalUses)
%170:i64 = lshr %169, 16:i64
infer %170

; *****
; For LLVM instruction:
;  %625 = shl i64 %623, 48
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153 (hasExternalUses)
%170:i64 = shl %169, 48:i64
infer %170

; *****
; For LLVM instruction:
;  %626 = or i64 %625, %624
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64 (hasExternalUses)
%172:i64 = or %170, %171
infer %172

; *****
; For LLVM instruction:
;  %627 = and i64 %624, 4294967295
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153 (hasExternalUses)
%170:i64 = lshr %169, 16:i64 (hasExternalUses)
%171:i64 = and 4294967295:i64, %170
infer %171

; *****
; For LLVM instruction:
;  %628 = add i64 %626, %612
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %116, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %116, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64 (hasExternalUses)
%172:i64 = or %170, %171 (hasExternalUses)
%173:i64 = add %158, %172
infer %173

; *****
; For LLVM instruction:
;  %629 = shl i64 %612, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = shl %158, 1:i64
infer %159 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %630 = and i64 %629, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = shl %158, 1:i64
%160:i64 = and 8589934590:i64, %159
infer %160

; *****
; For LLVM instruction:
;  %631 = mul i64 %627, %630
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153 (hasExternalUses)
%170:i64 = lshr %169, 16:i64 (hasExternalUses)
%171:i64 = and 4294967295:i64, %170
%172:i64 = shl %158, 1:i64
%173:i64 = and 8589934590:i64, %172
%174:i64 = mul %171, %173
infer %174

; *****
; For LLVM instruction:
;  %632 = add i64 %628, %631
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %116, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %116, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64
%172:i64 = or %170, %171 (hasExternalUses)
%173:i64 = add %158, %172
%174:i64 = and 4294967295:i64, %171
%175:i64 = shl %158, 1:i64
%176:i64 = and 8589934590:i64, %175
%177:i64 = mul %174, %176
%178:i64 = add %173, %177
infer %178

; *****
; For LLVM instruction:
;  %633 = xor i64 %632, %616
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161
%163:i64 = add %116, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %116, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64
%172:i64 = or %170, %171 (hasExternalUses)
%173:i64 = add %158, %172
%174:i64 = and 4294967295:i64, %171
%175:i64 = shl %158, 1:i64
%176:i64 = and 8589934590:i64, %175
%177:i64 = mul %174, %176
%178:i64 = add %173, %177 (hasExternalUses)
%179:i64 = xor %178, %162
infer %179

; *****
; For LLVM instruction:
;  %634 = lshr i64 %633, 63
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161
%163:i64 = add %116, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %116, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64
%172:i64 = or %170, %171 (hasExternalUses)
%173:i64 = add %158, %172
%174:i64 = and 4294967295:i64, %171
%175:i64 = shl %158, 1:i64
%176:i64 = and 8589934590:i64, %175
%177:i64 = mul %174, %176
%178:i64 = add %173, %177 (hasExternalUses)
%179:i64 = xor %178, %162 (hasExternalUses)
%180:i64 = lshr %179, 63:i64
infer %180

; *****
; For LLVM instruction:
;  %635 = shl i64 %633, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161
%163:i64 = add %116, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %116, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64
%172:i64 = or %170, %171 (hasExternalUses)
%173:i64 = add %158, %172
%174:i64 = and 4294967295:i64, %171
%175:i64 = shl %158, 1:i64
%176:i64 = and 8589934590:i64, %175
%177:i64 = mul %174, %176
%178:i64 = add %173, %177 (hasExternalUses)
%179:i64 = xor %178, %162 (hasExternalUses)
%180:i64 = shl %179, 1:i64
infer %180

; *****
; For LLVM instruction:
;  %636 = or i64 %635, %634
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161
%163:i64 = add %116, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %116, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64
%172:i64 = or %170, %171 (hasExternalUses)
%173:i64 = add %158, %172
%174:i64 = and 4294967295:i64, %171
%175:i64 = shl %158, 1:i64
%176:i64 = and 8589934590:i64, %175
%177:i64 = mul %174, %176
%178:i64 = add %173, %177 (hasExternalUses)
%179:i64 = xor %178, %162
%180:i64 = shl %179, 1:i64
%181:i64 = lshr %179, 63:i64
%182:i64 = or %180, %181
infer %182

; *****
; For LLVM instruction:
;  %637 = and i64 %546, 4294967295
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = xor %38, %22
%40:i64 = shl %39, 1:i64
%41:i64 = lshr %39, 63:i64
%42:i64 = or %40, %41 (hasExternalUses)
%43:i64 = and 4294967295:i64, %42
infer %43

; *****
; For LLVM instruction:
;  %638 = add i64 %546, %481
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
infer %72

; *****
; For LLVM instruction:
;  %639 = shl i64 %481, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = shl %28, 1:i64
infer %29 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %640 = and i64 %639, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = shl %28, 1:i64
%30:i64 = and 8589934590:i64, %29
infer %30

; *****
; For LLVM instruction:
;  %641 = mul i64 %637, %640
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = xor %38, %22
%40:i64 = shl %39, 1:i64
%41:i64 = lshr %39, 63:i64
%42:i64 = or %40, %41 (hasExternalUses)
%43:i64 = and 4294967295:i64, %42
%44:i64 = var
%45:i64 = var
%46:i64 = add %44, %45
%47:i64 = and 4294967295:i64, %45
%48:i64 = shl %44, 1:i64
%49:i64 = and 8589934590:i64, %48
%50:i64 = mul %47, %49
%51:i64 = add %46, %50
%52:i64 = var
%53:i64 = var
%54:i64 = xor %53, %51
%55:i64 = shl %54, 32:i64
%56:i64 = lshr %54, 32:i64
%57:i64 = or %55, %56 (hasExternalUses)
%58:i64 = add %52, %57
%59:i64 = shl %52, 1:i64
%60:i64 = and 8589934590:i64, %59
%61:i64 = mul %60, %56
%62:i64 = add %58, %61 (hasExternalUses)
%63:i64 = xor %45, %62
%64:i64 = shl %63, 40:i64
%65:i64 = lshr %63, 24:i64
%66:i64 = or %64, %65 (hasExternalUses)
%67:i64 = add %51, %66
%68:i64 = and 4294967295:i64, %65
%69:i64 = shl %51, 1:i64
%70:i64 = and 8589934590:i64, %69
%71:i64 = mul %68, %70
%72:i64 = add %67, %71 (hasExternalUses)
%73:i64 = shl %72, 1:i64
%74:i64 = and 8589934590:i64, %73
%75:i64 = mul %43, %74
infer %75

; *****
; For LLVM instruction:
;  %642 = add i64 %638, %641
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
infer %77

; *****
; For LLVM instruction:
;  %643 = xor i64 %642, %434
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = var
%79:i64 = var
%80:i64 = add %78, %79
%81:i64 = and 4294967295:i64, %79
%82:i64 = shl %78, 1:i64
%83:i64 = and 8589934590:i64, %82
%84:i64 = mul %81, %83
%85:i64 = add %80, %84
%86:i64 = var
%87:i64 = var
%88:i64 = xor %87, %85
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %86, %91
%93:i64 = shl %86, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95 (hasExternalUses)
%97:i64 = xor %79, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %85, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %85, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64 (hasExternalUses)
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = xor %77, %110
infer %111

; *****
; For LLVM instruction:
;  %644 = lshr i64 %643, 32
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = var
%79:i64 = var
%80:i64 = add %78, %79
%81:i64 = and 4294967295:i64, %79
%82:i64 = shl %78, 1:i64
%83:i64 = and 8589934590:i64, %82
%84:i64 = mul %81, %83
%85:i64 = add %80, %84
%86:i64 = var
%87:i64 = var
%88:i64 = xor %87, %85
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %86, %91
%93:i64 = shl %86, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95 (hasExternalUses)
%97:i64 = xor %79, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %85, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %85, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64 (hasExternalUses)
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = xor %77, %110 (hasExternalUses)
%112:i64 = lshr %111, 32:i64
infer %112

; *****
; For LLVM instruction:
;  %645 = shl i64 %643, 32
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = var
%79:i64 = var
%80:i64 = add %78, %79
%81:i64 = and 4294967295:i64, %79
%82:i64 = shl %78, 1:i64
%83:i64 = and 8589934590:i64, %82
%84:i64 = mul %81, %83
%85:i64 = add %80, %84
%86:i64 = var
%87:i64 = var
%88:i64 = xor %87, %85
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %86, %91
%93:i64 = shl %86, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95 (hasExternalUses)
%97:i64 = xor %79, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %85, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %85, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64 (hasExternalUses)
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = xor %77, %110 (hasExternalUses)
%112:i64 = shl %111, 32:i64
infer %112

; *****
; For LLVM instruction:
;  %646 = or i64 %645, %644
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = var
%79:i64 = var
%80:i64 = add %78, %79
%81:i64 = and 4294967295:i64, %79
%82:i64 = shl %78, 1:i64
%83:i64 = and 8589934590:i64, %82
%84:i64 = mul %81, %83
%85:i64 = add %80, %84
%86:i64 = var
%87:i64 = var
%88:i64 = xor %87, %85
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %86, %91
%93:i64 = shl %86, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95 (hasExternalUses)
%97:i64 = xor %79, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %85, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %85, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64 (hasExternalUses)
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = xor %77, %110
%112:i64 = shl %111, 32:i64
%113:i64 = lshr %111, 32:i64 (hasExternalUses)
%114:i64 = or %112, %113
infer %114

; *****
; For LLVM instruction:
;  %647 = add i64 %593, %646
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64 (hasExternalUses)
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
infer %154

; *****
; For LLVM instruction:
;  %648 = shl i64 %593, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = shl %38, 1:i64
infer %39 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %649 = and i64 %648, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = shl %38, 1:i64
%40:i64 = and 8589934590:i64, %39
infer %40

; *****
; For LLVM instruction:
;  %650 = mul i64 %649, %644
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = shl %38, 1:i64
%40:i64 = and 8589934590:i64, %39
%41:i64 = var
%42:i64 = var
%43:i64 = add %41, %42
%44:i64 = and 4294967295:i64, %42
%45:i64 = shl %41, 1:i64
%46:i64 = and 8589934590:i64, %45
%47:i64 = mul %44, %46
%48:i64 = add %43, %47
%49:i64 = var
%50:i64 = var
%51:i64 = xor %50, %48
%52:i64 = shl %51, 32:i64
%53:i64 = lshr %51, 32:i64
%54:i64 = or %52, %53 (hasExternalUses)
%55:i64 = add %49, %54
%56:i64 = shl %49, 1:i64
%57:i64 = and 8589934590:i64, %56
%58:i64 = mul %57, %53
%59:i64 = add %55, %58 (hasExternalUses)
%60:i64 = xor %42, %59
%61:i64 = shl %60, 40:i64
%62:i64 = lshr %60, 24:i64
%63:i64 = or %61, %62 (hasExternalUses)
%64:i64 = add %48, %63
%65:i64 = and 4294967295:i64, %62
%66:i64 = shl %48, 1:i64
%67:i64 = and 8589934590:i64, %66
%68:i64 = mul %65, %67
%69:i64 = add %64, %68 (hasExternalUses)
%70:i64 = var
%71:i64 = var
%72:i64 = var
%73:i64 = var
%74:i64 = add %72, %73
%75:i64 = and 4294967295:i64, %73
%76:i64 = shl %72, 1:i64
%77:i64 = and 8589934590:i64, %76
%78:i64 = mul %75, %77
%79:i64 = add %74, %78
%80:i64 = xor %71, %79
%81:i64 = shl %80, 32:i64
%82:i64 = lshr %80, 32:i64
%83:i64 = or %81, %82
%84:i64 = add %70, %83
%85:i64 = shl %70, 1:i64
%86:i64 = and 8589934590:i64, %85
%87:i64 = mul %86, %82
%88:i64 = add %84, %87
%89:i64 = xor %73, %88
%90:i64 = shl %89, 40:i64
%91:i64 = lshr %89, 24:i64
%92:i64 = or %90, %91
%93:i64 = add %79, %92
%94:i64 = and 4294967295:i64, %91
%95:i64 = shl %79, 1:i64
%96:i64 = and 8589934590:i64, %95
%97:i64 = mul %94, %96
%98:i64 = add %93, %97 (hasExternalUses)
%99:i64 = xor %98, %83
%100:i64 = shl %99, 48:i64
%101:i64 = lshr %99, 16:i64
%102:i64 = or %100, %101 (hasExternalUses)
%103:i64 = add %88, %102
%104:i64 = and 4294967295:i64, %101
%105:i64 = shl %88, 1:i64
%106:i64 = and 8589934590:i64, %105
%107:i64 = mul %104, %106
%108:i64 = add %103, %107 (hasExternalUses)
%109:i64 = xor %108, %92
%110:i64 = shl %109, 1:i64
%111:i64 = lshr %109, 63:i64
%112:i64 = or %110, %111 (hasExternalUses)
%113:i64 = add %69, %112
%114:i64 = and 4294967295:i64, %112
%115:i64 = shl %69, 1:i64
%116:i64 = and 8589934590:i64, %115
%117:i64 = mul %114, %116
%118:i64 = add %113, %117 (hasExternalUses)
%119:i64 = var
%120:i64 = var
%121:i64 = add %119, %120
%122:i64 = and 4294967295:i64, %120
%123:i64 = shl %119, 1:i64
%124:i64 = and 8589934590:i64, %123
%125:i64 = mul %122, %124
%126:i64 = add %121, %125
%127:i64 = var
%128:i64 = var
%129:i64 = xor %128, %126
%130:i64 = shl %129, 32:i64
%131:i64 = lshr %129, 32:i64
%132:i64 = or %130, %131
%133:i64 = add %127, %132
%134:i64 = shl %127, 1:i64
%135:i64 = and 8589934590:i64, %134
%136:i64 = mul %135, %131
%137:i64 = add %133, %136 (hasExternalUses)
%138:i64 = xor %120, %137
%139:i64 = shl %138, 40:i64
%140:i64 = lshr %138, 24:i64
%141:i64 = or %139, %140 (hasExternalUses)
%142:i64 = add %126, %141
%143:i64 = and 4294967295:i64, %140
%144:i64 = shl %126, 1:i64
%145:i64 = and 8589934590:i64, %144
%146:i64 = mul %143, %145
%147:i64 = add %142, %146 (hasExternalUses)
%148:i64 = xor %147, %132
%149:i64 = shl %148, 48:i64
%150:i64 = lshr %148, 16:i64 (hasExternalUses)
%151:i64 = or %149, %150 (hasExternalUses)
%152:i64 = xor %118, %151 (hasExternalUses)
%153:i64 = lshr %152, 32:i64 (hasExternalUses)
%154:i64 = mul %40, %153
infer %154

; *****
; For LLVM instruction:
;  %651 = add i64 %647, %650
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157
infer %158

; *****
; For LLVM instruction:
;  %652 = xor i64 %651, %546
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110
infer %159

; *****
; For LLVM instruction:
;  %653 = lshr i64 %652, 24
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110 (hasExternalUses)
%160:i64 = lshr %159, 24:i64
infer %160

; *****
; For LLVM instruction:
;  %654 = shl i64 %652, 40
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110 (hasExternalUses)
%160:i64 = shl %159, 40:i64
infer %160

; *****
; For LLVM instruction:
;  %655 = or i64 %654, %653
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64 (hasExternalUses)
%162:i64 = or %160, %161
infer %162

; *****
; For LLVM instruction:
;  %656 = and i64 %653, 4294967295
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110 (hasExternalUses)
%160:i64 = lshr %159, 24:i64 (hasExternalUses)
%161:i64 = and 4294967295:i64, %160
infer %161

; *****
; For LLVM instruction:
;  %657 = add i64 %655, %642
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64 (hasExternalUses)
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
infer %163

; *****
; For LLVM instruction:
;  %658 = shl i64 %642, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = shl %77, 1:i64
infer %78 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %659 = and i64 %658, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = shl %77, 1:i64
%79:i64 = and 8589934590:i64, %78
infer %79

; *****
; For LLVM instruction:
;  %660 = mul i64 %656, %659
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110 (hasExternalUses)
%160:i64 = lshr %159, 24:i64 (hasExternalUses)
%161:i64 = and 4294967295:i64, %160
%162:i64 = shl %116, 1:i64
%163:i64 = and 8589934590:i64, %162
%164:i64 = mul %161, %163
infer %164

; *****
; For LLVM instruction:
;  %661 = add i64 %657, %660
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167
infer %168

; *****
; For LLVM instruction:
;  %662 = xor i64 %661, %646
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
infer %169

; *****
; For LLVM instruction:
;  %663 = lshr i64 %662, 16
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153 (hasExternalUses)
%170:i64 = lshr %169, 16:i64
infer %170

; *****
; For LLVM instruction:
;  %664 = shl i64 %662, 48
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153 (hasExternalUses)
%170:i64 = shl %169, 48:i64
infer %170

; *****
; For LLVM instruction:
;  %665 = or i64 %664, %663
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64 (hasExternalUses)
%172:i64 = or %170, %171
infer %172

; *****
; For LLVM instruction:
;  %666 = and i64 %663, 4294967295
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153 (hasExternalUses)
%170:i64 = lshr %169, 16:i64 (hasExternalUses)
%171:i64 = and 4294967295:i64, %170
infer %171

; *****
; For LLVM instruction:
;  %667 = add i64 %665, %651
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %116, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %116, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64 (hasExternalUses)
%172:i64 = or %170, %171 (hasExternalUses)
%173:i64 = add %158, %172
infer %173

; *****
; For LLVM instruction:
;  %668 = shl i64 %651, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = shl %158, 1:i64
infer %159 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %669 = and i64 %668, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = shl %158, 1:i64
%160:i64 = and 8589934590:i64, %159
infer %160

; *****
; For LLVM instruction:
;  %670 = mul i64 %666, %669
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153 (hasExternalUses)
%170:i64 = lshr %169, 16:i64 (hasExternalUses)
%171:i64 = and 4294967295:i64, %170
%172:i64 = shl %158, 1:i64
%173:i64 = and 8589934590:i64, %172
%174:i64 = mul %171, %173
infer %174

; *****
; For LLVM instruction:
;  %671 = add i64 %667, %670
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %116, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %116, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64
%172:i64 = or %170, %171 (hasExternalUses)
%173:i64 = add %158, %172
%174:i64 = and 4294967295:i64, %171
%175:i64 = shl %158, 1:i64
%176:i64 = and 8589934590:i64, %175
%177:i64 = mul %174, %176
%178:i64 = add %173, %177
infer %178

; *****
; For LLVM instruction:
;  %672 = xor i64 %671, %655
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161
%163:i64 = add %116, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %116, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64
%172:i64 = or %170, %171 (hasExternalUses)
%173:i64 = add %158, %172
%174:i64 = and 4294967295:i64, %171
%175:i64 = shl %158, 1:i64
%176:i64 = and 8589934590:i64, %175
%177:i64 = mul %174, %176
%178:i64 = add %173, %177 (hasExternalUses)
%179:i64 = xor %178, %162
infer %179

; *****
; For LLVM instruction:
;  %673 = lshr i64 %672, 63
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161
%163:i64 = add %116, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %116, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64
%172:i64 = or %170, %171 (hasExternalUses)
%173:i64 = add %158, %172
%174:i64 = and 4294967295:i64, %171
%175:i64 = shl %158, 1:i64
%176:i64 = and 8589934590:i64, %175
%177:i64 = mul %174, %176
%178:i64 = add %173, %177 (hasExternalUses)
%179:i64 = xor %178, %162 (hasExternalUses)
%180:i64 = lshr %179, 63:i64
infer %180

; *****
; For LLVM instruction:
;  %674 = shl i64 %672, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161
%163:i64 = add %116, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %116, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64
%172:i64 = or %170, %171 (hasExternalUses)
%173:i64 = add %158, %172
%174:i64 = and 4294967295:i64, %171
%175:i64 = shl %158, 1:i64
%176:i64 = and 8589934590:i64, %175
%177:i64 = mul %174, %176
%178:i64 = add %173, %177 (hasExternalUses)
%179:i64 = xor %178, %162 (hasExternalUses)
%180:i64 = shl %179, 1:i64
infer %180

; *****
; For LLVM instruction:
;  %675 = or i64 %674, %673
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161
%163:i64 = add %116, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %116, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64
%172:i64 = or %170, %171 (hasExternalUses)
%173:i64 = add %158, %172
%174:i64 = and 4294967295:i64, %171
%175:i64 = shl %158, 1:i64
%176:i64 = and 8589934590:i64, %175
%177:i64 = mul %174, %176
%178:i64 = add %173, %177 (hasExternalUses)
%179:i64 = xor %178, %162
%180:i64 = shl %179, 1:i64
%181:i64 = lshr %179, 63:i64
%182:i64 = or %180, %181
infer %182

; *****
; For LLVM instruction:
;  %676 = and i64 %597, 4294967295
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = xor %38, %22
%40:i64 = shl %39, 1:i64
%41:i64 = lshr %39, 63:i64
%42:i64 = or %40, %41 (hasExternalUses)
%43:i64 = and 4294967295:i64, %42
infer %43

; *****
; For LLVM instruction:
;  %677 = add i64 %597, %532
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
infer %72

; *****
; For LLVM instruction:
;  %678 = shl i64 %532, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = shl %28, 1:i64
infer %29 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %679 = and i64 %678, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = shl %28, 1:i64
%30:i64 = and 8589934590:i64, %29
infer %30

; *****
; For LLVM instruction:
;  %680 = mul i64 %676, %679
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = xor %38, %22
%40:i64 = shl %39, 1:i64
%41:i64 = lshr %39, 63:i64
%42:i64 = or %40, %41 (hasExternalUses)
%43:i64 = and 4294967295:i64, %42
%44:i64 = var
%45:i64 = var
%46:i64 = add %44, %45
%47:i64 = and 4294967295:i64, %45
%48:i64 = shl %44, 1:i64
%49:i64 = and 8589934590:i64, %48
%50:i64 = mul %47, %49
%51:i64 = add %46, %50
%52:i64 = var
%53:i64 = var
%54:i64 = xor %53, %51
%55:i64 = shl %54, 32:i64
%56:i64 = lshr %54, 32:i64
%57:i64 = or %55, %56 (hasExternalUses)
%58:i64 = add %52, %57
%59:i64 = shl %52, 1:i64
%60:i64 = and 8589934590:i64, %59
%61:i64 = mul %60, %56
%62:i64 = add %58, %61 (hasExternalUses)
%63:i64 = xor %45, %62
%64:i64 = shl %63, 40:i64
%65:i64 = lshr %63, 24:i64
%66:i64 = or %64, %65 (hasExternalUses)
%67:i64 = add %51, %66
%68:i64 = and 4294967295:i64, %65
%69:i64 = shl %51, 1:i64
%70:i64 = and 8589934590:i64, %69
%71:i64 = mul %68, %70
%72:i64 = add %67, %71 (hasExternalUses)
%73:i64 = shl %72, 1:i64
%74:i64 = and 8589934590:i64, %73
%75:i64 = mul %43, %74
infer %75

; *****
; For LLVM instruction:
;  %681 = add i64 %677, %680
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
infer %77

; *****
; For LLVM instruction:
;  %682 = xor i64 %681, %485
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = var
%79:i64 = var
%80:i64 = add %78, %79
%81:i64 = and 4294967295:i64, %79
%82:i64 = shl %78, 1:i64
%83:i64 = and 8589934590:i64, %82
%84:i64 = mul %81, %83
%85:i64 = add %80, %84
%86:i64 = var
%87:i64 = var
%88:i64 = xor %87, %85
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %86, %91
%93:i64 = shl %86, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95 (hasExternalUses)
%97:i64 = xor %79, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %85, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %85, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64 (hasExternalUses)
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = xor %77, %110
infer %111

; *****
; For LLVM instruction:
;  %683 = lshr i64 %682, 32
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = var
%79:i64 = var
%80:i64 = add %78, %79
%81:i64 = and 4294967295:i64, %79
%82:i64 = shl %78, 1:i64
%83:i64 = and 8589934590:i64, %82
%84:i64 = mul %81, %83
%85:i64 = add %80, %84
%86:i64 = var
%87:i64 = var
%88:i64 = xor %87, %85
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %86, %91
%93:i64 = shl %86, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95 (hasExternalUses)
%97:i64 = xor %79, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %85, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %85, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64 (hasExternalUses)
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = xor %77, %110 (hasExternalUses)
%112:i64 = lshr %111, 32:i64
infer %112

; *****
; For LLVM instruction:
;  %684 = shl i64 %682, 32
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = var
%79:i64 = var
%80:i64 = add %78, %79
%81:i64 = and 4294967295:i64, %79
%82:i64 = shl %78, 1:i64
%83:i64 = and 8589934590:i64, %82
%84:i64 = mul %81, %83
%85:i64 = add %80, %84
%86:i64 = var
%87:i64 = var
%88:i64 = xor %87, %85
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %86, %91
%93:i64 = shl %86, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95 (hasExternalUses)
%97:i64 = xor %79, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %85, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %85, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64 (hasExternalUses)
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = xor %77, %110 (hasExternalUses)
%112:i64 = shl %111, 32:i64
infer %112

; *****
; For LLVM instruction:
;  %685 = or i64 %684, %683
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = var
%79:i64 = var
%80:i64 = add %78, %79
%81:i64 = and 4294967295:i64, %79
%82:i64 = shl %78, 1:i64
%83:i64 = and 8589934590:i64, %82
%84:i64 = mul %81, %83
%85:i64 = add %80, %84
%86:i64 = var
%87:i64 = var
%88:i64 = xor %87, %85
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %86, %91
%93:i64 = shl %86, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95 (hasExternalUses)
%97:i64 = xor %79, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %85, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %85, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64 (hasExternalUses)
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = xor %77, %110
%112:i64 = shl %111, 32:i64
%113:i64 = lshr %111, 32:i64 (hasExternalUses)
%114:i64 = or %112, %113
infer %114

; *****
; For LLVM instruction:
;  %686 = add i64 %685, %440
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64 (hasExternalUses)
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
infer %154

; *****
; For LLVM instruction:
;  %687 = shl i64 %440, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = shl %38, 1:i64
infer %39 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %688 = and i64 %687, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = shl %38, 1:i64
%40:i64 = and 8589934590:i64, %39
infer %40

; *****
; For LLVM instruction:
;  %689 = mul i64 %683, %688
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = shl %38, 1:i64
%40:i64 = and 8589934590:i64, %39
%41:i64 = var
%42:i64 = var
%43:i64 = add %41, %42
%44:i64 = and 4294967295:i64, %42
%45:i64 = shl %41, 1:i64
%46:i64 = and 8589934590:i64, %45
%47:i64 = mul %44, %46
%48:i64 = add %43, %47
%49:i64 = var
%50:i64 = var
%51:i64 = xor %50, %48
%52:i64 = shl %51, 32:i64
%53:i64 = lshr %51, 32:i64
%54:i64 = or %52, %53 (hasExternalUses)
%55:i64 = add %49, %54
%56:i64 = shl %49, 1:i64
%57:i64 = and 8589934590:i64, %56
%58:i64 = mul %57, %53
%59:i64 = add %55, %58 (hasExternalUses)
%60:i64 = xor %42, %59
%61:i64 = shl %60, 40:i64
%62:i64 = lshr %60, 24:i64
%63:i64 = or %61, %62 (hasExternalUses)
%64:i64 = add %48, %63
%65:i64 = and 4294967295:i64, %62
%66:i64 = shl %48, 1:i64
%67:i64 = and 8589934590:i64, %66
%68:i64 = mul %65, %67
%69:i64 = add %64, %68 (hasExternalUses)
%70:i64 = var
%71:i64 = var
%72:i64 = var
%73:i64 = var
%74:i64 = add %72, %73
%75:i64 = and 4294967295:i64, %73
%76:i64 = shl %72, 1:i64
%77:i64 = and 8589934590:i64, %76
%78:i64 = mul %75, %77
%79:i64 = add %74, %78
%80:i64 = xor %71, %79
%81:i64 = shl %80, 32:i64
%82:i64 = lshr %80, 32:i64
%83:i64 = or %81, %82
%84:i64 = add %70, %83
%85:i64 = shl %70, 1:i64
%86:i64 = and 8589934590:i64, %85
%87:i64 = mul %86, %82
%88:i64 = add %84, %87
%89:i64 = xor %73, %88
%90:i64 = shl %89, 40:i64
%91:i64 = lshr %89, 24:i64
%92:i64 = or %90, %91
%93:i64 = add %79, %92
%94:i64 = and 4294967295:i64, %91
%95:i64 = shl %79, 1:i64
%96:i64 = and 8589934590:i64, %95
%97:i64 = mul %94, %96
%98:i64 = add %93, %97 (hasExternalUses)
%99:i64 = xor %98, %83
%100:i64 = shl %99, 48:i64
%101:i64 = lshr %99, 16:i64
%102:i64 = or %100, %101 (hasExternalUses)
%103:i64 = add %88, %102
%104:i64 = and 4294967295:i64, %101
%105:i64 = shl %88, 1:i64
%106:i64 = and 8589934590:i64, %105
%107:i64 = mul %104, %106
%108:i64 = add %103, %107 (hasExternalUses)
%109:i64 = xor %108, %92
%110:i64 = shl %109, 1:i64
%111:i64 = lshr %109, 63:i64
%112:i64 = or %110, %111 (hasExternalUses)
%113:i64 = add %69, %112
%114:i64 = and 4294967295:i64, %112
%115:i64 = shl %69, 1:i64
%116:i64 = and 8589934590:i64, %115
%117:i64 = mul %114, %116
%118:i64 = add %113, %117 (hasExternalUses)
%119:i64 = var
%120:i64 = var
%121:i64 = add %119, %120
%122:i64 = and 4294967295:i64, %120
%123:i64 = shl %119, 1:i64
%124:i64 = and 8589934590:i64, %123
%125:i64 = mul %122, %124
%126:i64 = add %121, %125
%127:i64 = var
%128:i64 = var
%129:i64 = xor %128, %126
%130:i64 = shl %129, 32:i64
%131:i64 = lshr %129, 32:i64
%132:i64 = or %130, %131
%133:i64 = add %127, %132
%134:i64 = shl %127, 1:i64
%135:i64 = and 8589934590:i64, %134
%136:i64 = mul %135, %131
%137:i64 = add %133, %136 (hasExternalUses)
%138:i64 = xor %120, %137
%139:i64 = shl %138, 40:i64
%140:i64 = lshr %138, 24:i64
%141:i64 = or %139, %140 (hasExternalUses)
%142:i64 = add %126, %141
%143:i64 = and 4294967295:i64, %140
%144:i64 = shl %126, 1:i64
%145:i64 = and 8589934590:i64, %144
%146:i64 = mul %143, %145
%147:i64 = add %142, %146 (hasExternalUses)
%148:i64 = xor %147, %132
%149:i64 = shl %148, 48:i64
%150:i64 = lshr %148, 16:i64 (hasExternalUses)
%151:i64 = or %149, %150 (hasExternalUses)
%152:i64 = xor %118, %151 (hasExternalUses)
%153:i64 = lshr %152, 32:i64 (hasExternalUses)
%154:i64 = mul %40, %153
infer %154

; *****
; For LLVM instruction:
;  %690 = add i64 %686, %689
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157
infer %158

; *****
; For LLVM instruction:
;  %691 = xor i64 %690, %597
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110
infer %159

; *****
; For LLVM instruction:
;  %692 = lshr i64 %691, 24
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110 (hasExternalUses)
%160:i64 = lshr %159, 24:i64
infer %160

; *****
; For LLVM instruction:
;  %693 = shl i64 %691, 40
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110 (hasExternalUses)
%160:i64 = shl %159, 40:i64
infer %160

; *****
; For LLVM instruction:
;  %694 = or i64 %693, %692
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64 (hasExternalUses)
%162:i64 = or %160, %161
infer %162

; *****
; For LLVM instruction:
;  %695 = and i64 %692, 4294967295
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110 (hasExternalUses)
%160:i64 = lshr %159, 24:i64 (hasExternalUses)
%161:i64 = and 4294967295:i64, %160
infer %161

; *****
; For LLVM instruction:
;  %696 = add i64 %694, %681
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64 (hasExternalUses)
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
infer %163

; *****
; For LLVM instruction:
;  %697 = shl i64 %681, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = shl %77, 1:i64
infer %78 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %698 = and i64 %697, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = shl %77, 1:i64
%79:i64 = and 8589934590:i64, %78
infer %79

; *****
; For LLVM instruction:
;  %699 = mul i64 %695, %698
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110 (hasExternalUses)
%160:i64 = lshr %159, 24:i64 (hasExternalUses)
%161:i64 = and 4294967295:i64, %160
%162:i64 = shl %116, 1:i64
%163:i64 = and 8589934590:i64, %162
%164:i64 = mul %161, %163
infer %164

; *****
; For LLVM instruction:
;  %700 = add i64 %696, %699
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167
infer %168

; *****
; For LLVM instruction:
;  %701 = xor i64 %700, %685
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
infer %169

; *****
; For LLVM instruction:
;  %702 = lshr i64 %701, 16
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153 (hasExternalUses)
%170:i64 = lshr %169, 16:i64
infer %170

; *****
; For LLVM instruction:
;  %703 = shl i64 %701, 48
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153 (hasExternalUses)
%170:i64 = shl %169, 48:i64
infer %170

; *****
; For LLVM instruction:
;  %704 = or i64 %703, %702
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64 (hasExternalUses)
%172:i64 = or %170, %171
infer %172

; *****
; For LLVM instruction:
;  %705 = and i64 %702, 4294967295
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153 (hasExternalUses)
%170:i64 = lshr %169, 16:i64 (hasExternalUses)
%171:i64 = and 4294967295:i64, %170
infer %171

; *****
; For LLVM instruction:
;  %706 = add i64 %704, %690
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %116, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %116, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64 (hasExternalUses)
%172:i64 = or %170, %171 (hasExternalUses)
%173:i64 = add %158, %172
infer %173

; *****
; For LLVM instruction:
;  %707 = shl i64 %690, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = shl %158, 1:i64
infer %159 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %708 = and i64 %707, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = shl %158, 1:i64
%160:i64 = and 8589934590:i64, %159
infer %160

; *****
; For LLVM instruction:
;  %709 = mul i64 %705, %708
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153 (hasExternalUses)
%170:i64 = lshr %169, 16:i64 (hasExternalUses)
%171:i64 = and 4294967295:i64, %170
%172:i64 = shl %158, 1:i64
%173:i64 = and 8589934590:i64, %172
%174:i64 = mul %171, %173
infer %174

; *****
; For LLVM instruction:
;  %710 = add i64 %706, %709
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %116, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %116, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64
%172:i64 = or %170, %171 (hasExternalUses)
%173:i64 = add %158, %172
%174:i64 = and 4294967295:i64, %171
%175:i64 = shl %158, 1:i64
%176:i64 = and 8589934590:i64, %175
%177:i64 = mul %174, %176
%178:i64 = add %173, %177
infer %178

; *****
; For LLVM instruction:
;  %711 = xor i64 %710, %694
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161
%163:i64 = add %116, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %116, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64
%172:i64 = or %170, %171 (hasExternalUses)
%173:i64 = add %158, %172
%174:i64 = and 4294967295:i64, %171
%175:i64 = shl %158, 1:i64
%176:i64 = and 8589934590:i64, %175
%177:i64 = mul %174, %176
%178:i64 = add %173, %177 (hasExternalUses)
%179:i64 = xor %178, %162
infer %179

; *****
; For LLVM instruction:
;  %712 = lshr i64 %711, 63
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161
%163:i64 = add %116, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %116, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64
%172:i64 = or %170, %171 (hasExternalUses)
%173:i64 = add %158, %172
%174:i64 = and 4294967295:i64, %171
%175:i64 = shl %158, 1:i64
%176:i64 = and 8589934590:i64, %175
%177:i64 = mul %174, %176
%178:i64 = add %173, %177 (hasExternalUses)
%179:i64 = xor %178, %162 (hasExternalUses)
%180:i64 = lshr %179, 63:i64
infer %180

; *****
; For LLVM instruction:
;  %713 = shl i64 %711, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161
%163:i64 = add %116, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %116, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64
%172:i64 = or %170, %171 (hasExternalUses)
%173:i64 = add %158, %172
%174:i64 = and 4294967295:i64, %171
%175:i64 = shl %158, 1:i64
%176:i64 = and 8589934590:i64, %175
%177:i64 = mul %174, %176
%178:i64 = add %173, %177 (hasExternalUses)
%179:i64 = xor %178, %162 (hasExternalUses)
%180:i64 = shl %179, 1:i64
infer %180

; *****
; For LLVM instruction:
;  %714 = or i64 %713, %712
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161
%163:i64 = add %116, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %116, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64
%172:i64 = or %170, %171 (hasExternalUses)
%173:i64 = add %158, %172
%174:i64 = and 4294967295:i64, %171
%175:i64 = shl %158, 1:i64
%176:i64 = and 8589934590:i64, %175
%177:i64 = mul %174, %176
%178:i64 = add %173, %177 (hasExternalUses)
%179:i64 = xor %178, %162
%180:i64 = shl %179, 1:i64
%181:i64 = lshr %179, 63:i64
%182:i64 = or %180, %181
infer %182

; *****
; For LLVM instruction:
;  %715 = and i64 %444, 4294967295
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = xor %38, %22
%40:i64 = shl %39, 1:i64
%41:i64 = lshr %39, 63:i64
%42:i64 = or %40, %41 (hasExternalUses)
%43:i64 = and 4294967295:i64, %42
infer %43

; *****
; For LLVM instruction:
;  %716 = add i64 %583, %444
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
infer %72

; *****
; For LLVM instruction:
;  %717 = shl i64 %583, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = shl %28, 1:i64
infer %29 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %718 = and i64 %717, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = shl %28, 1:i64
%30:i64 = and 8589934590:i64, %29
infer %30

; *****
; For LLVM instruction:
;  %719 = mul i64 %718, %715
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = xor %38, %22
%40:i64 = shl %39, 1:i64
%41:i64 = lshr %39, 63:i64
%42:i64 = or %40, %41 (hasExternalUses)
%43:i64 = and 4294967295:i64, %42
%44:i64 = var
%45:i64 = var
%46:i64 = add %44, %45
%47:i64 = and 4294967295:i64, %45
%48:i64 = shl %44, 1:i64
%49:i64 = and 8589934590:i64, %48
%50:i64 = mul %47, %49
%51:i64 = add %46, %50
%52:i64 = var
%53:i64 = var
%54:i64 = xor %53, %51
%55:i64 = shl %54, 32:i64
%56:i64 = lshr %54, 32:i64
%57:i64 = or %55, %56 (hasExternalUses)
%58:i64 = add %52, %57
%59:i64 = shl %52, 1:i64
%60:i64 = and 8589934590:i64, %59
%61:i64 = mul %60, %56
%62:i64 = add %58, %61 (hasExternalUses)
%63:i64 = xor %45, %62
%64:i64 = shl %63, 40:i64
%65:i64 = lshr %63, 24:i64
%66:i64 = or %64, %65 (hasExternalUses)
%67:i64 = add %51, %66
%68:i64 = and 4294967295:i64, %65
%69:i64 = shl %51, 1:i64
%70:i64 = and 8589934590:i64, %69
%71:i64 = mul %68, %70
%72:i64 = add %67, %71 (hasExternalUses)
%73:i64 = shl %72, 1:i64
%74:i64 = and 8589934590:i64, %73
%75:i64 = mul %43, %74
infer %75

; *****
; For LLVM instruction:
;  %720 = add i64 %716, %719
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
infer %77

; *****
; For LLVM instruction:
;  %721 = xor i64 %720, %536
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = var
%79:i64 = var
%80:i64 = add %78, %79
%81:i64 = and 4294967295:i64, %79
%82:i64 = shl %78, 1:i64
%83:i64 = and 8589934590:i64, %82
%84:i64 = mul %81, %83
%85:i64 = add %80, %84
%86:i64 = var
%87:i64 = var
%88:i64 = xor %87, %85
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %86, %91
%93:i64 = shl %86, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95 (hasExternalUses)
%97:i64 = xor %79, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %85, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %85, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64 (hasExternalUses)
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = xor %77, %110
infer %111

; *****
; For LLVM instruction:
;  %722 = lshr i64 %721, 32
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = var
%79:i64 = var
%80:i64 = add %78, %79
%81:i64 = and 4294967295:i64, %79
%82:i64 = shl %78, 1:i64
%83:i64 = and 8589934590:i64, %82
%84:i64 = mul %81, %83
%85:i64 = add %80, %84
%86:i64 = var
%87:i64 = var
%88:i64 = xor %87, %85
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %86, %91
%93:i64 = shl %86, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95 (hasExternalUses)
%97:i64 = xor %79, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %85, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %85, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64 (hasExternalUses)
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = xor %77, %110 (hasExternalUses)
%112:i64 = lshr %111, 32:i64
infer %112

; *****
; For LLVM instruction:
;  %723 = shl i64 %721, 32
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = var
%79:i64 = var
%80:i64 = add %78, %79
%81:i64 = and 4294967295:i64, %79
%82:i64 = shl %78, 1:i64
%83:i64 = and 8589934590:i64, %82
%84:i64 = mul %81, %83
%85:i64 = add %80, %84
%86:i64 = var
%87:i64 = var
%88:i64 = xor %87, %85
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %86, %91
%93:i64 = shl %86, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95 (hasExternalUses)
%97:i64 = xor %79, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %85, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %85, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64 (hasExternalUses)
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = xor %77, %110 (hasExternalUses)
%112:i64 = shl %111, 32:i64
infer %112

; *****
; For LLVM instruction:
;  %724 = or i64 %723, %722
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = var
%79:i64 = var
%80:i64 = add %78, %79
%81:i64 = and 4294967295:i64, %79
%82:i64 = shl %78, 1:i64
%83:i64 = and 8589934590:i64, %82
%84:i64 = mul %81, %83
%85:i64 = add %80, %84
%86:i64 = var
%87:i64 = var
%88:i64 = xor %87, %85
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %86, %91
%93:i64 = shl %86, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95 (hasExternalUses)
%97:i64 = xor %79, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %85, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %85, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64 (hasExternalUses)
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = xor %77, %110
%112:i64 = shl %111, 32:i64
%113:i64 = lshr %111, 32:i64 (hasExternalUses)
%114:i64 = or %112, %113
infer %114

; *****
; For LLVM instruction:
;  %725 = add i64 %724, %491
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64 (hasExternalUses)
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
infer %154

; *****
; For LLVM instruction:
;  %726 = shl i64 %491, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = shl %38, 1:i64
infer %39 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %727 = and i64 %726, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = shl %38, 1:i64
%40:i64 = and 8589934590:i64, %39
infer %40

; *****
; For LLVM instruction:
;  %728 = mul i64 %722, %727
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = shl %38, 1:i64
%40:i64 = and 8589934590:i64, %39
%41:i64 = var
%42:i64 = var
%43:i64 = add %41, %42
%44:i64 = and 4294967295:i64, %42
%45:i64 = shl %41, 1:i64
%46:i64 = and 8589934590:i64, %45
%47:i64 = mul %44, %46
%48:i64 = add %43, %47
%49:i64 = var
%50:i64 = var
%51:i64 = xor %50, %48
%52:i64 = shl %51, 32:i64
%53:i64 = lshr %51, 32:i64
%54:i64 = or %52, %53 (hasExternalUses)
%55:i64 = add %49, %54
%56:i64 = shl %49, 1:i64
%57:i64 = and 8589934590:i64, %56
%58:i64 = mul %57, %53
%59:i64 = add %55, %58 (hasExternalUses)
%60:i64 = xor %42, %59
%61:i64 = shl %60, 40:i64
%62:i64 = lshr %60, 24:i64
%63:i64 = or %61, %62 (hasExternalUses)
%64:i64 = add %48, %63
%65:i64 = and 4294967295:i64, %62
%66:i64 = shl %48, 1:i64
%67:i64 = and 8589934590:i64, %66
%68:i64 = mul %65, %67
%69:i64 = add %64, %68 (hasExternalUses)
%70:i64 = var
%71:i64 = var
%72:i64 = var
%73:i64 = var
%74:i64 = add %72, %73
%75:i64 = and 4294967295:i64, %73
%76:i64 = shl %72, 1:i64
%77:i64 = and 8589934590:i64, %76
%78:i64 = mul %75, %77
%79:i64 = add %74, %78
%80:i64 = xor %71, %79
%81:i64 = shl %80, 32:i64
%82:i64 = lshr %80, 32:i64
%83:i64 = or %81, %82
%84:i64 = add %70, %83
%85:i64 = shl %70, 1:i64
%86:i64 = and 8589934590:i64, %85
%87:i64 = mul %86, %82
%88:i64 = add %84, %87
%89:i64 = xor %73, %88
%90:i64 = shl %89, 40:i64
%91:i64 = lshr %89, 24:i64
%92:i64 = or %90, %91
%93:i64 = add %79, %92
%94:i64 = and 4294967295:i64, %91
%95:i64 = shl %79, 1:i64
%96:i64 = and 8589934590:i64, %95
%97:i64 = mul %94, %96
%98:i64 = add %93, %97 (hasExternalUses)
%99:i64 = xor %98, %83
%100:i64 = shl %99, 48:i64
%101:i64 = lshr %99, 16:i64
%102:i64 = or %100, %101 (hasExternalUses)
%103:i64 = add %88, %102
%104:i64 = and 4294967295:i64, %101
%105:i64 = shl %88, 1:i64
%106:i64 = and 8589934590:i64, %105
%107:i64 = mul %104, %106
%108:i64 = add %103, %107 (hasExternalUses)
%109:i64 = xor %108, %92
%110:i64 = shl %109, 1:i64
%111:i64 = lshr %109, 63:i64
%112:i64 = or %110, %111 (hasExternalUses)
%113:i64 = add %69, %112
%114:i64 = and 4294967295:i64, %112
%115:i64 = shl %69, 1:i64
%116:i64 = and 8589934590:i64, %115
%117:i64 = mul %114, %116
%118:i64 = add %113, %117 (hasExternalUses)
%119:i64 = var
%120:i64 = var
%121:i64 = add %119, %120
%122:i64 = and 4294967295:i64, %120
%123:i64 = shl %119, 1:i64
%124:i64 = and 8589934590:i64, %123
%125:i64 = mul %122, %124
%126:i64 = add %121, %125
%127:i64 = var
%128:i64 = var
%129:i64 = xor %128, %126
%130:i64 = shl %129, 32:i64
%131:i64 = lshr %129, 32:i64
%132:i64 = or %130, %131
%133:i64 = add %127, %132
%134:i64 = shl %127, 1:i64
%135:i64 = and 8589934590:i64, %134
%136:i64 = mul %135, %131
%137:i64 = add %133, %136 (hasExternalUses)
%138:i64 = xor %120, %137
%139:i64 = shl %138, 40:i64
%140:i64 = lshr %138, 24:i64
%141:i64 = or %139, %140 (hasExternalUses)
%142:i64 = add %126, %141
%143:i64 = and 4294967295:i64, %140
%144:i64 = shl %126, 1:i64
%145:i64 = and 8589934590:i64, %144
%146:i64 = mul %143, %145
%147:i64 = add %142, %146 (hasExternalUses)
%148:i64 = xor %147, %132
%149:i64 = shl %148, 48:i64
%150:i64 = lshr %148, 16:i64 (hasExternalUses)
%151:i64 = or %149, %150 (hasExternalUses)
%152:i64 = xor %118, %151 (hasExternalUses)
%153:i64 = lshr %152, 32:i64 (hasExternalUses)
%154:i64 = mul %40, %153
infer %154

; *****
; For LLVM instruction:
;  %729 = add i64 %725, %728
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157
infer %158

; *****
; For LLVM instruction:
;  %730 = xor i64 %729, %444
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110
infer %159

; *****
; For LLVM instruction:
;  %731 = lshr i64 %730, 24
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110 (hasExternalUses)
%160:i64 = lshr %159, 24:i64
infer %160

; *****
; For LLVM instruction:
;  %732 = shl i64 %730, 40
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110 (hasExternalUses)
%160:i64 = shl %159, 40:i64
infer %160

; *****
; For LLVM instruction:
;  %733 = or i64 %732, %731
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64 (hasExternalUses)
%162:i64 = or %160, %161
infer %162

; *****
; For LLVM instruction:
;  %734 = and i64 %731, 4294967295
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110 (hasExternalUses)
%160:i64 = lshr %159, 24:i64 (hasExternalUses)
%161:i64 = and 4294967295:i64, %160
infer %161

; *****
; For LLVM instruction:
;  %735 = add i64 %733, %720
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64 (hasExternalUses)
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
infer %163

; *****
; For LLVM instruction:
;  %736 = shl i64 %720, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = shl %77, 1:i64
infer %78 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %737 = and i64 %736, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76 (hasExternalUses)
%78:i64 = shl %77, 1:i64
%79:i64 = and 8589934590:i64, %78
infer %79

; *****
; For LLVM instruction:
;  %738 = mul i64 %734, %737
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110 (hasExternalUses)
%160:i64 = lshr %159, 24:i64 (hasExternalUses)
%161:i64 = and 4294967295:i64, %160
%162:i64 = shl %116, 1:i64
%163:i64 = and 8589934590:i64, %162
%164:i64 = mul %161, %163
infer %164

; *****
; For LLVM instruction:
;  %739 = add i64 %735, %738
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167
infer %168

; *****
; For LLVM instruction:
;  %740 = xor i64 %739, %724
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
infer %169

; *****
; For LLVM instruction:
;  %741 = lshr i64 %740, 16
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153 (hasExternalUses)
%170:i64 = lshr %169, 16:i64
infer %170

; *****
; For LLVM instruction:
;  %742 = shl i64 %740, 48
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153 (hasExternalUses)
%170:i64 = shl %169, 48:i64
infer %170

; *****
; For LLVM instruction:
;  %743 = or i64 %742, %741
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64 (hasExternalUses)
%172:i64 = or %170, %171
infer %172

; *****
; For LLVM instruction:
;  %744 = and i64 %741, 4294967295
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153 (hasExternalUses)
%170:i64 = lshr %169, 16:i64 (hasExternalUses)
%171:i64 = and 4294967295:i64, %170
infer %171

; *****
; For LLVM instruction:
;  %745 = add i64 %743, %729
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %116, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %116, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64 (hasExternalUses)
%172:i64 = or %170, %171 (hasExternalUses)
%173:i64 = add %158, %172
infer %173

; *****
; For LLVM instruction:
;  %746 = shl i64 %729, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = shl %158, 1:i64
infer %159 (demandedBits=0000000000000000000000000000000111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %747 = and i64 %746, 8589934590
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152 (hasExternalUses)
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = shl %158, 1:i64
%160:i64 = and 8589934590:i64, %159
infer %160

; *****
; For LLVM instruction:
;  %748 = mul i64 %744, %747
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = and 4294967295:i64, %1
%4:i64 = shl %0, 1:i64
%5:i64 = and 8589934590:i64, %4
%6:i64 = mul %3, %5
%7:i64 = add %2, %6
%8:i64 = var
%9:i64 = var
%10:i64 = xor %9, %7
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12 (hasExternalUses)
%14:i64 = add %8, %13
%15:i64 = shl %8, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17 (hasExternalUses)
%19:i64 = xor %1, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %7, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %7, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = var
%30:i64 = var
%31:i64 = var
%32:i64 = var
%33:i64 = add %31, %32
%34:i64 = and 4294967295:i64, %32
%35:i64 = shl %31, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37
%39:i64 = xor %30, %38
%40:i64 = shl %39, 32:i64
%41:i64 = lshr %39, 32:i64
%42:i64 = or %40, %41
%43:i64 = add %29, %42
%44:i64 = shl %29, 1:i64
%45:i64 = and 8589934590:i64, %44
%46:i64 = mul %45, %41
%47:i64 = add %43, %46
%48:i64 = xor %32, %47
%49:i64 = shl %48, 40:i64
%50:i64 = lshr %48, 24:i64
%51:i64 = or %49, %50
%52:i64 = add %38, %51
%53:i64 = and 4294967295:i64, %50
%54:i64 = shl %38, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %53, %55
%57:i64 = add %52, %56 (hasExternalUses)
%58:i64 = xor %57, %42
%59:i64 = shl %58, 48:i64
%60:i64 = lshr %58, 16:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %47, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %47, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = xor %67, %51
%69:i64 = shl %68, 1:i64
%70:i64 = lshr %68, 63:i64
%71:i64 = or %69, %70 (hasExternalUses)
%72:i64 = add %28, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %28, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = var
%79:i64 = var
%80:i64 = var
%81:i64 = var
%82:i64 = add %80, %81
%83:i64 = and 4294967295:i64, %81
%84:i64 = shl %80, 1:i64
%85:i64 = and 8589934590:i64, %84
%86:i64 = mul %83, %85
%87:i64 = add %82, %86
%88:i64 = xor %79, %87
%89:i64 = shl %88, 32:i64
%90:i64 = lshr %88, 32:i64
%91:i64 = or %89, %90
%92:i64 = add %78, %91
%93:i64 = shl %78, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %94, %90
%96:i64 = add %92, %95
%97:i64 = xor %81, %96
%98:i64 = shl %97, 40:i64
%99:i64 = lshr %97, 24:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %87, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %87, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %91
%108:i64 = shl %107, 48:i64
%109:i64 = lshr %107, 16:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %96, %110
%112:i64 = and 4294967295:i64, %109
%113:i64 = shl %96, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115 (hasExternalUses)
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %77, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %116, %153
%155:i64 = shl %116, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157 (hasExternalUses)
%159:i64 = xor %158, %71
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %77, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %77, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153 (hasExternalUses)
%170:i64 = lshr %169, 16:i64 (hasExternalUses)
%171:i64 = and 4294967295:i64, %170
%172:i64 = shl %158, 1:i64
%173:i64 = and 8589934590:i64, %172
%174:i64 = mul %171, %173
infer %174

; *****
; For LLVM instruction:
;  %749 = add i64 %745, %748
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161 (hasExternalUses)
%163:i64 = add %116, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %116, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64
%172:i64 = or %170, %171 (hasExternalUses)
%173:i64 = add %158, %172
%174:i64 = and 4294967295:i64, %171
%175:i64 = shl %158, 1:i64
%176:i64 = and 8589934590:i64, %175
%177:i64 = mul %174, %176
%178:i64 = add %173, %177
infer %178

; *****
; For LLVM instruction:
;  %750 = xor i64 %749, %733
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161
%163:i64 = add %116, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %116, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64
%172:i64 = or %170, %171 (hasExternalUses)
%173:i64 = add %158, %172
%174:i64 = and 4294967295:i64, %171
%175:i64 = shl %158, 1:i64
%176:i64 = and 8589934590:i64, %175
%177:i64 = mul %174, %176
%178:i64 = add %173, %177 (hasExternalUses)
%179:i64 = xor %178, %162
infer %179

; *****
; For LLVM instruction:
;  %751 = lshr i64 %750, 63
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161
%163:i64 = add %116, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %116, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64
%172:i64 = or %170, %171 (hasExternalUses)
%173:i64 = add %158, %172
%174:i64 = and 4294967295:i64, %171
%175:i64 = shl %158, 1:i64
%176:i64 = and 8589934590:i64, %175
%177:i64 = mul %174, %176
%178:i64 = add %173, %177 (hasExternalUses)
%179:i64 = xor %178, %162 (hasExternalUses)
%180:i64 = lshr %179, 63:i64
infer %180

; *****
; For LLVM instruction:
;  %752 = shl i64 %750, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161
%163:i64 = add %116, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %116, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64
%172:i64 = or %170, %171 (hasExternalUses)
%173:i64 = add %158, %172
%174:i64 = and 4294967295:i64, %171
%175:i64 = shl %158, 1:i64
%176:i64 = and 8589934590:i64, %175
%177:i64 = mul %174, %176
%178:i64 = add %173, %177 (hasExternalUses)
%179:i64 = xor %178, %162 (hasExternalUses)
%180:i64 = shl %179, 1:i64
infer %180

; *****
; For LLVM instruction:
;  %753 = or i64 %752, %751
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = add %2, %3
%5:i64 = and 4294967295:i64, %3
%6:i64 = shl %2, 1:i64
%7:i64 = and 8589934590:i64, %6
%8:i64 = mul %5, %7
%9:i64 = add %4, %8
%10:i64 = xor %1, %9
%11:i64 = shl %10, 32:i64
%12:i64 = lshr %10, 32:i64
%13:i64 = or %11, %12
%14:i64 = add %0, %13
%15:i64 = shl %0, 1:i64
%16:i64 = and 8589934590:i64, %15
%17:i64 = mul %16, %12
%18:i64 = add %14, %17
%19:i64 = xor %3, %18
%20:i64 = shl %19, 40:i64
%21:i64 = lshr %19, 24:i64
%22:i64 = or %20, %21 (hasExternalUses)
%23:i64 = add %9, %22
%24:i64 = and 4294967295:i64, %21
%25:i64 = shl %9, 1:i64
%26:i64 = and 8589934590:i64, %25
%27:i64 = mul %24, %26
%28:i64 = add %23, %27 (hasExternalUses)
%29:i64 = xor %28, %13
%30:i64 = shl %29, 48:i64
%31:i64 = lshr %29, 16:i64
%32:i64 = or %30, %31 (hasExternalUses)
%33:i64 = add %18, %32
%34:i64 = and 4294967295:i64, %31
%35:i64 = shl %18, 1:i64
%36:i64 = and 8589934590:i64, %35
%37:i64 = mul %34, %36
%38:i64 = add %33, %37 (hasExternalUses)
%39:i64 = var
%40:i64 = var
%41:i64 = add %39, %40
%42:i64 = and 4294967295:i64, %40
%43:i64 = shl %39, 1:i64
%44:i64 = and 8589934590:i64, %43
%45:i64 = mul %42, %44
%46:i64 = add %41, %45
%47:i64 = var
%48:i64 = var
%49:i64 = xor %48, %46
%50:i64 = shl %49, 32:i64
%51:i64 = lshr %49, 32:i64
%52:i64 = or %50, %51 (hasExternalUses)
%53:i64 = add %47, %52
%54:i64 = shl %47, 1:i64
%55:i64 = and 8589934590:i64, %54
%56:i64 = mul %55, %51
%57:i64 = add %53, %56 (hasExternalUses)
%58:i64 = xor %40, %57
%59:i64 = shl %58, 40:i64
%60:i64 = lshr %58, 24:i64
%61:i64 = or %59, %60 (hasExternalUses)
%62:i64 = add %46, %61
%63:i64 = and 4294967295:i64, %60
%64:i64 = shl %46, 1:i64
%65:i64 = and 8589934590:i64, %64
%66:i64 = mul %63, %65
%67:i64 = add %62, %66 (hasExternalUses)
%68:i64 = var
%69:i64 = var
%70:i64 = var
%71:i64 = var
%72:i64 = add %70, %71
%73:i64 = and 4294967295:i64, %71
%74:i64 = shl %70, 1:i64
%75:i64 = and 8589934590:i64, %74
%76:i64 = mul %73, %75
%77:i64 = add %72, %76
%78:i64 = xor %69, %77
%79:i64 = shl %78, 32:i64
%80:i64 = lshr %78, 32:i64
%81:i64 = or %79, %80
%82:i64 = add %68, %81
%83:i64 = shl %68, 1:i64
%84:i64 = and 8589934590:i64, %83
%85:i64 = mul %84, %80
%86:i64 = add %82, %85
%87:i64 = xor %71, %86
%88:i64 = shl %87, 40:i64
%89:i64 = lshr %87, 24:i64
%90:i64 = or %88, %89
%91:i64 = add %77, %90
%92:i64 = and 4294967295:i64, %89
%93:i64 = shl %77, 1:i64
%94:i64 = and 8589934590:i64, %93
%95:i64 = mul %92, %94
%96:i64 = add %91, %95 (hasExternalUses)
%97:i64 = xor %96, %81
%98:i64 = shl %97, 48:i64
%99:i64 = lshr %97, 16:i64
%100:i64 = or %98, %99 (hasExternalUses)
%101:i64 = add %86, %100
%102:i64 = and 4294967295:i64, %99
%103:i64 = shl %86, 1:i64
%104:i64 = and 8589934590:i64, %103
%105:i64 = mul %102, %104
%106:i64 = add %101, %105 (hasExternalUses)
%107:i64 = xor %106, %90
%108:i64 = shl %107, 1:i64
%109:i64 = lshr %107, 63:i64
%110:i64 = or %108, %109 (hasExternalUses)
%111:i64 = add %67, %110
%112:i64 = and 4294967295:i64, %110
%113:i64 = shl %67, 1:i64
%114:i64 = and 8589934590:i64, %113
%115:i64 = mul %112, %114
%116:i64 = add %111, %115
%117:i64 = var
%118:i64 = var
%119:i64 = add %117, %118
%120:i64 = and 4294967295:i64, %118
%121:i64 = shl %117, 1:i64
%122:i64 = and 8589934590:i64, %121
%123:i64 = mul %120, %122
%124:i64 = add %119, %123
%125:i64 = var
%126:i64 = var
%127:i64 = xor %126, %124
%128:i64 = shl %127, 32:i64
%129:i64 = lshr %127, 32:i64
%130:i64 = or %128, %129
%131:i64 = add %125, %130
%132:i64 = shl %125, 1:i64
%133:i64 = and 8589934590:i64, %132
%134:i64 = mul %133, %129
%135:i64 = add %131, %134 (hasExternalUses)
%136:i64 = xor %118, %135
%137:i64 = shl %136, 40:i64
%138:i64 = lshr %136, 24:i64
%139:i64 = or %137, %138 (hasExternalUses)
%140:i64 = add %124, %139
%141:i64 = and 4294967295:i64, %138
%142:i64 = shl %124, 1:i64
%143:i64 = and 8589934590:i64, %142
%144:i64 = mul %141, %143
%145:i64 = add %140, %144 (hasExternalUses)
%146:i64 = xor %145, %130
%147:i64 = shl %146, 48:i64
%148:i64 = lshr %146, 16:i64 (hasExternalUses)
%149:i64 = or %147, %148 (hasExternalUses)
%150:i64 = xor %116, %149
%151:i64 = shl %150, 32:i64
%152:i64 = lshr %150, 32:i64
%153:i64 = or %151, %152
%154:i64 = add %38, %153
%155:i64 = shl %38, 1:i64
%156:i64 = and 8589934590:i64, %155
%157:i64 = mul %156, %152
%158:i64 = add %154, %157
%159:i64 = xor %158, %110
%160:i64 = shl %159, 40:i64
%161:i64 = lshr %159, 24:i64
%162:i64 = or %160, %161
%163:i64 = add %116, %162
%164:i64 = and 4294967295:i64, %161
%165:i64 = shl %116, 1:i64
%166:i64 = and 8589934590:i64, %165
%167:i64 = mul %164, %166
%168:i64 = add %163, %167 (hasExternalUses)
%169:i64 = xor %168, %153
%170:i64 = shl %169, 48:i64
%171:i64 = lshr %169, 16:i64
%172:i64 = or %170, %171 (hasExternalUses)
%173:i64 = add %158, %172
%174:i64 = and 4294967295:i64, %171
%175:i64 = shl %158, 1:i64
%176:i64 = and 8589934590:i64, %175
%177:i64 = mul %174, %176
%178:i64 = add %173, %177 (hasExternalUses)
%179:i64 = xor %178, %162
%180:i64 = shl %179, 1:i64
%181:i64 = lshr %179, 63:i64
%182:i64 = or %180, %181
infer %182

; *****
; For LLVM instruction:
;  %754 = add nuw nsw i32 %393, 1
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,8))
%1:i32 = addnw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %755 = icmp eq i32 %754, 8
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,8))
%1:i32 = addnw 1:i32, %0 (hasExternalUses)
%2:i1 = eq 8:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %759 = phi i32 [ 0, %756 ], [ %765, %758 ]
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,128))
infer %0

; *****
; For LLVM instruction:
;  %761 = load i64, i64* %760, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %763 = load i64, i64* %762, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %764 = xor i64 %763, %761
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %765 = add nuw nsw i32 %759, 1
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,128))
%1:i32 = addnw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %766 = icmp eq i32 %765, 128
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,128))
%1:i32 = addnw 1:i32, %0 (hasExternalUses)
%2:i1 = eq 128:i32, %1
infer %2
#########################################################
; exiting Souper's runOnFunction() for ./argon2-fill-block-ref.c.bc:fill_block_with_xor()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
