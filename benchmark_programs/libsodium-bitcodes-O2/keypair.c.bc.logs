
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for crypto_sign_ed25519_seed_keypair()

; ModuleID = './keypair.c.bc'
source_filename = "crypto_sign/ed25519/ref10/keypair.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.ge25519_p3 = type { [10 x i32], [10 x i32], [10 x i32], [10 x i32] }

; Function Attrs: nounwind
define i32 @crypto_sign_ed25519_seed_keypair(i8* nonnull %0, i8* nonnull %1, i8* nonnull %2) local_unnamed_addr #0 {
  %4 = alloca %struct.ge25519_p3, align 4
  %5 = bitcast %struct.ge25519_p3* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %5) #3
  %6 = tail call i32 @crypto_hash_sha512(i8* nonnull %1, i8* nonnull %2, i64 32) #3
  %7 = load i8, i8* %1, align 1
  %8 = and i8 %7, -8
  store i8 %8, i8* %1, align 1
  %9 = getelementptr i8, i8* %1, i32 31
  %10 = load i8, i8* %9, align 1
  %11 = and i8 %10, 63
  %12 = or i8 %11, 64
  store i8 %12, i8* %9, align 1
  call void @ge25519_scalarmult_base(%struct.ge25519_p3* nonnull %4, i8* nonnull %1) #3
  call void @ge25519_p3_tobytes(i8* nonnull %0, %struct.ge25519_p3* nonnull %4) #3
  call void @llvm.memmove.p0i8.p0i8.i32(i8* nonnull align 1 dereferenceable(32) %1, i8* nonnull align 1 dereferenceable(32) %2, i32 32, i1 false)
  %13 = getelementptr i8, i8* %1, i32 32
  call void @llvm.memmove.p0i8.p0i8.i32(i8* nonnull align 1 dereferenceable(32) %13, i8* nonnull align 1 dereferenceable(32) %0, i32 32, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %5) #3
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #1

declare i32 @crypto_hash_sha512(i8* %0, i8* %1, i64 %2) local_unnamed_addr #2

declare void @ge25519_scalarmult_base(%struct.ge25519_p3* %0, i8* %1) local_unnamed_addr #2

declare void @ge25519_p3_tobytes(i8* %0, %struct.ge25519_p3* %1) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i32(i8* nocapture %0, i8* nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #1

; Function Attrs: nounwind
define i32 @crypto_sign_ed25519_keypair(i8* nonnull %0, i8* nonnull %1) local_unnamed_addr #0 {
  %3 = alloca %struct.ge25519_p3, align 4
  %4 = alloca [32 x i8], align 16
  %5 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %5) #3
  call void @randombytes_buf(i8* nonnull %5, i32 32) #3
  %6 = bitcast %struct.ge25519_p3* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %6) #3
  %7 = call i32 @crypto_hash_sha512(i8* nonnull %1, i8* nonnull %5, i64 32) #3
  %8 = load i8, i8* %1, align 1
  %9 = and i8 %8, -8
  store i8 %9, i8* %1, align 1
  %10 = getelementptr i8, i8* %1, i32 31
  %11 = load i8, i8* %10, align 1
  %12 = and i8 %11, 63
  %13 = or i8 %12, 64
  store i8 %13, i8* %10, align 1
  call void @ge25519_scalarmult_base(%struct.ge25519_p3* nonnull %3, i8* nonnull %1) #3
  call void @ge25519_p3_tobytes(i8* nonnull %0, %struct.ge25519_p3* nonnull %3) #3
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 1 dereferenceable(32) %1, i8* nonnull align 16 dereferenceable(32) %5, i32 32, i1 false) #3
  %14 = getelementptr i8, i8* %1, i32 32
  call void @llvm.memmove.p0i8.p0i8.i32(i8* nonnull align 1 dereferenceable(32) %14, i8* nonnull align 1 dereferenceable(32) %0, i32 32, i1 false) #3
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %6) #3
  call void @sodium_memzero(i8* nonnull %5, i32 32) #3
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %5) #3
  ret i32 0
}

declare void @randombytes_buf(i8* %0, i32 %1) local_unnamed_addr #2

declare void @sodium_memzero(i8* %0, i32 %1) local_unnamed_addr #2

; Function Attrs: nounwind
define i32 @crypto_sign_ed25519_pk_to_curve25519(i8* nonnull %0, i8* nonnull %1) local_unnamed_addr #0 {
  %3 = alloca %struct.ge25519_p3, align 4
  %4 = alloca [10 x i32], align 16
  %5 = alloca [10 x i32], align 16
  %6 = bitcast %struct.ge25519_p3* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %6) #3
  %7 = bitcast [10 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %7) #3
  %8 = bitcast [10 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %8) #3
  %9 = tail call i32 @ge25519_has_small_order(i8* nonnull %1) #3
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %388

11:                                               ; preds = %2
  %12 = call i32 @ge25519_frombytes_negate_vartime(%struct.ge25519_p3* nonnull %3, i8* nonnull %1) #3
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %388

14:                                               ; preds = %11
  %15 = call i32 @ge25519_is_on_main_subgroup(%struct.ge25519_p3* nonnull %3) #3
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %388, label %17

17:                                               ; preds = %14
  %18 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 0
  %19 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 1
  %20 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %3, i32 0, i32 1, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = sub i32 1, %21
  %23 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %3, i32 0, i32 1, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = sub i32 0, %24
  %26 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 2
  %27 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %3, i32 0, i32 1, i32 2
  %28 = load i32, i32* %27, align 4
  %29 = sub i32 0, %28
  %30 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 3
  %31 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %3, i32 0, i32 1, i32 3
  %32 = load i32, i32* %31, align 4
  %33 = sub i32 0, %32
  %34 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 4
  %35 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %3, i32 0, i32 1, i32 4
  %36 = load i32, i32* %35, align 4
  %37 = sub i32 0, %36
  %38 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 5
  %39 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %3, i32 0, i32 1, i32 5
  %40 = load i32, i32* %39, align 4
  %41 = sub i32 0, %40
  %42 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 6
  %43 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %3, i32 0, i32 1, i32 6
  %44 = load i32, i32* %43, align 4
  %45 = sub i32 0, %44
  %46 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 7
  %47 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %3, i32 0, i32 1, i32 7
  %48 = load i32, i32* %47, align 4
  %49 = sub i32 0, %48
  %50 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 8
  %51 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %3, i32 0, i32 1, i32 8
  %52 = load i32, i32* %51, align 4
  %53 = sub i32 0, %52
  %54 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 9
  %55 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %3, i32 0, i32 1, i32 9
  %56 = load i32, i32* %55, align 4
  %57 = sub i32 0, %56
  store i32 %22, i32* %18, align 16
  store i32 %25, i32* %19, align 4
  store i32 %29, i32* %26, align 8
  store i32 %33, i32* %30, align 4
  store i32 %37, i32* %34, align 16
  store i32 %41, i32* %38, align 4
  store i32 %45, i32* %42, align 8
  store i32 %49, i32* %46, align 4
  store i32 %53, i32* %50, align 16
  store i32 %57, i32* %54, align 4
  %58 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 0
  %59 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 1
  %60 = add i32 %21, 1
  %61 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 2
  %62 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 3
  %63 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 4
  %64 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 5
  %65 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 6
  %66 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 7
  %67 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 8
  %68 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 9
  store i32 %60, i32* %58, align 16
  store i32 %24, i32* %59, align 4
  store i32 %28, i32* %61, align 8
  store i32 %32, i32* %62, align 4
  store i32 %36, i32* %63, align 16
  store i32 %40, i32* %64, align 4
  store i32 %44, i32* %65, align 8
  store i32 %48, i32* %66, align 4
  store i32 %52, i32* %67, align 16
  store i32 %56, i32* %68, align 4
  call void @fe25519_invert(i32* nonnull %18, i32* nonnull %18) #3
  %69 = load i32, i32* %18, align 16
  %70 = load i32, i32* %19, align 4
  %71 = load i32, i32* %26, align 8
  %72 = load i32, i32* %30, align 4
  %73 = load i32, i32* %34, align 16
  %74 = load i32, i32* %38, align 4
  %75 = load i32, i32* %42, align 8
  %76 = load i32, i32* %46, align 4
  %77 = load i32, i32* %50, align 16
  %78 = load i32, i32* %54, align 4
  %79 = mul i32 %70, 19
  %80 = mul i32 %71, 19
  %81 = mul i32 %72, 19
  %82 = mul i32 %73, 19
  %83 = mul i32 %74, 19
  %84 = mul i32 %75, 19
  %85 = mul i32 %76, 19
  %86 = mul i32 %77, 19
  %87 = mul i32 %78, 19
  %88 = shl i32 %24, 1
  %89 = shl i32 %32, 1
  %90 = shl i32 %40, 1
  %91 = shl i32 %48, 1
  %92 = shl i32 %56, 1
  %93 = sext i32 %60 to i64
  %94 = sext i32 %69 to i64
  %95 = mul nsw i64 %94, %93
  %96 = sext i32 %70 to i64
  %97 = mul nsw i64 %96, %93
  %98 = sext i32 %71 to i64
  %99 = mul nsw i64 %98, %93
  %100 = sext i32 %72 to i64
  %101 = mul nsw i64 %100, %93
  %102 = sext i32 %73 to i64
  %103 = mul nsw i64 %102, %93
  %104 = sext i32 %74 to i64
  %105 = mul nsw i64 %104, %93
  %106 = sext i32 %75 to i64
  %107 = mul nsw i64 %106, %93
  %108 = sext i32 %76 to i64
  %109 = mul nsw i64 %108, %93
  %110 = sext i32 %77 to i64
  %111 = mul nsw i64 %110, %93
  %112 = sext i32 %78 to i64
  %113 = mul nsw i64 %112, %93
  %114 = sext i32 %24 to i64
  %115 = mul nsw i64 %94, %114
  %116 = sext i32 %88 to i64
  %117 = mul nsw i64 %96, %116
  %118 = mul nsw i64 %98, %114
  %119 = mul nsw i64 %100, %116
  %120 = mul nsw i64 %102, %114
  %121 = mul nsw i64 %104, %116
  %122 = mul nsw i64 %106, %114
  %123 = mul nsw i64 %108, %116
  %124 = mul nsw i64 %110, %114
  %125 = sext i32 %87 to i64
  %126 = mul nsw i64 %125, %116
  %127 = sext i32 %28 to i64
  %128 = mul nsw i64 %94, %127
  %129 = mul nsw i64 %96, %127
  %130 = mul nsw i64 %98, %127
  %131 = mul nsw i64 %100, %127
  %132 = mul nsw i64 %102, %127
  %133 = mul nsw i64 %104, %127
  %134 = mul nsw i64 %106, %127
  %135 = mul nsw i64 %108, %127
  %136 = sext i32 %86 to i64
  %137 = mul nsw i64 %136, %127
  %138 = mul nsw i64 %125, %127
  %139 = sext i32 %32 to i64
  %140 = mul nsw i64 %94, %139
  %141 = sext i32 %89 to i64
  %142 = mul nsw i64 %96, %141
  %143 = mul nsw i64 %98, %139
  %144 = mul nsw i64 %100, %141
  %145 = mul nsw i64 %102, %139
  %146 = mul nsw i64 %104, %141
  %147 = mul nsw i64 %106, %139
  %148 = sext i32 %85 to i64
  %149 = mul nsw i64 %148, %141
  %150 = mul nsw i64 %136, %139
  %151 = mul nsw i64 %125, %141
  %152 = sext i32 %36 to i64
  %153 = mul nsw i64 %94, %152
  %154 = mul nsw i64 %96, %152
  %155 = mul nsw i64 %98, %152
  %156 = mul nsw i64 %100, %152
  %157 = mul nsw i64 %102, %152
  %158 = mul nsw i64 %104, %152
  %159 = sext i32 %84 to i64
  %160 = mul nsw i64 %159, %152
  %161 = mul nsw i64 %148, %152
  %162 = mul nsw i64 %136, %152
  %163 = mul nsw i64 %125, %152
  %164 = sext i32 %40 to i64
  %165 = mul nsw i64 %94, %164
  %166 = sext i32 %90 to i64
  %167 = mul nsw i64 %96, %166
  %168 = mul nsw i64 %98, %164
  %169 = mul nsw i64 %100, %166
  %170 = mul nsw i64 %102, %164
  %171 = sext i32 %83 to i64
  %172 = mul nsw i64 %171, %166
  %173 = mul nsw i64 %159, %164
  %174 = mul nsw i64 %148, %166
  %175 = mul nsw i64 %136, %164
  %176 = mul nsw i64 %125, %166
  %177 = sext i32 %44 to i64
  %178 = mul nsw i64 %94, %177
  %179 = mul nsw i64 %96, %177
  %180 = mul nsw i64 %98, %177
  %181 = mul nsw i64 %100, %177
  %182 = sext i32 %82 to i64
  %183 = mul nsw i64 %182, %177
  %184 = mul nsw i64 %171, %177
  %185 = mul nsw i64 %159, %177
  %186 = mul nsw i64 %148, %177
  %187 = mul nsw i64 %136, %177
  %188 = mul nsw i64 %125, %177
  %189 = sext i32 %48 to i64
  %190 = mul nsw i64 %94, %189
  %191 = sext i32 %91 to i64
  %192 = mul nsw i64 %96, %191
  %193 = mul nsw i64 %98, %189
  %194 = sext i32 %81 to i64
  %195 = mul nsw i64 %194, %191
  %196 = mul nsw i64 %182, %189
  %197 = mul nsw i64 %171, %191
  %198 = mul nsw i64 %159, %189
  %199 = mul nsw i64 %148, %191
  %200 = mul nsw i64 %136, %189
  %201 = mul nsw i64 %125, %191
  %202 = sext i32 %52 to i64
  %203 = mul nsw i64 %94, %202
  %204 = mul nsw i64 %96, %202
  %205 = sext i32 %80 to i64
  %206 = mul nsw i64 %205, %202
  %207 = mul nsw i64 %194, %202
  %208 = mul nsw i64 %182, %202
  %209 = mul nsw i64 %171, %202
  %210 = mul nsw i64 %159, %202
  %211 = mul nsw i64 %148, %202
  %212 = mul nsw i64 %136, %202
  %213 = mul nsw i64 %125, %202
  %214 = sext i32 %56 to i64
  %215 = mul nsw i64 %94, %214
  %216 = sext i32 %92 to i64
  %217 = sext i32 %79 to i64
  %218 = mul nsw i64 %217, %216
  %219 = mul nsw i64 %205, %214
  %220 = mul nsw i64 %194, %216
  %221 = mul nsw i64 %182, %214
  %222 = mul nsw i64 %171, %216
  %223 = mul nsw i64 %159, %214
  %224 = mul nsw i64 %148, %216
  %225 = mul nsw i64 %136, %214
  %226 = mul nsw i64 %125, %216
  %227 = add i64 %218, %95
  %228 = add i64 %227, %206
  %229 = add i64 %228, %195
  %230 = add i64 %229, %183
  %231 = add i64 %230, %172
  %232 = add i64 %231, %160
  %233 = add i64 %232, %149
  %234 = add i64 %233, %137
  %235 = add i64 %234, %126
  %236 = add i64 %97, %115
  %237 = add i64 %142, %153
  %238 = add i64 %237, %130
  %239 = add i64 %238, %119
  %240 = add i64 %239, %103
  %241 = add i64 %240, %222
  %242 = add i64 %241, %210
  %243 = add i64 %242, %199
  %244 = add i64 %243, %187
  %245 = add i64 %244, %176
  %246 = add i64 %235, 33554432
  %247 = ashr i64 %246, 26
  %248 = add i64 %236, %219
  %249 = add i64 %248, %207
  %250 = add i64 %249, %196
  %251 = add i64 %250, %184
  %252 = add i64 %251, %173
  %253 = add i64 %252, %161
  %254 = add i64 %253, %150
  %255 = add i64 %254, %138
  %256 = add i64 %255, %247
  %257 = and i64 %246, -67108864
  %258 = sub i64 %235, %257
  %259 = add i64 %245, 33554432
  %260 = ashr i64 %259, 26
  %261 = add i64 %154, %165
  %262 = add i64 %261, %143
  %263 = add i64 %262, %131
  %264 = add i64 %263, %120
  %265 = add i64 %264, %105
  %266 = add i64 %265, %223
  %267 = add i64 %266, %211
  %268 = add i64 %267, %200
  %269 = add i64 %268, %188
  %270 = add i64 %269, %260
  %271 = and i64 %259, -67108864
  %272 = sub i64 %245, %271
  %273 = add i64 %256, 16777216
  %274 = ashr i64 %273, 25
  %275 = add i64 %117, %128
  %276 = add i64 %275, %99
  %277 = add i64 %276, %220
  %278 = add i64 %277, %208
  %279 = add i64 %278, %197
  %280 = add i64 %279, %185
  %281 = add i64 %280, %174
  %282 = add i64 %281, %162
  %283 = add i64 %282, %151
  %284 = add i64 %283, %274
  %285 = and i64 %273, 4261412864
  %286 = sub i64 %256, %285
  %287 = add i64 %270, 16777216
  %288 = ashr i64 %287, 25
  %289 = add i64 %167, %178
  %290 = add i64 %289, %155
  %291 = add i64 %290, %144
  %292 = add i64 %291, %132
  %293 = add i64 %292, %121
  %294 = add i64 %293, %107
  %295 = add i64 %294, %224
  %296 = add i64 %295, %212
  %297 = add i64 %296, %201
  %298 = add i64 %297, %288
  %299 = and i64 %287, 4261412864
  %300 = sub i64 %270, %299
  %301 = add i64 %284, 33554432
  %302 = ashr i64 %301, 26
  %303 = add i64 %129, %140
  %304 = add i64 %303, %118
  %305 = add i64 %304, %101
  %306 = add i64 %305, %221
  %307 = add i64 %306, %209
  %308 = add i64 %307, %198
  %309 = add i64 %308, %186
  %310 = add i64 %309, %175
  %311 = add i64 %310, %163
  %312 = add i64 %311, %302
  %313 = and i64 %301, 4227858432
  %314 = sub i64 %284, %313
  %315 = add i64 %298, 33554432
  %316 = ashr i64 %315, 26
  %317 = add i64 %179, %190
  %318 = add i64 %317, %168
  %319 = add i64 %318, %156
  %320 = add i64 %319, %145
  %321 = add i64 %320, %133
  %322 = add i64 %321, %122
  %323 = add i64 %322, %109
  %324 = add i64 %323, %225
  %325 = add i64 %324, %213
  %326 = add i64 %325, %316
  %327 = and i64 %315, 4227858432
  %328 = sub i64 %298, %327
  %329 = add i64 %312, 16777216
  %330 = ashr i64 %329, 25
  %331 = add i64 %330, %272
  %332 = and i64 %329, 4261412864
  %333 = sub i64 %312, %332
  %334 = add i64 %326, 16777216
  %335 = ashr i64 %334, 25
  %336 = add i64 %192, %203
  %337 = add i64 %336, %180
  %338 = add i64 %337, %169
  %339 = add i64 %338, %157
  %340 = add i64 %339, %146
  %341 = add i64 %340, %134
  %342 = add i64 %341, %123
  %343 = add i64 %342, %111
  %344 = add i64 %343, %226
  %345 = add i64 %344, %335
  %346 = and i64 %334, 4261412864
  %347 = sub i64 %326, %346
  %348 = add i64 %331, 33554432
  %349 = lshr i64 %348, 26
  %350 = add i64 %300, %349
  %351 = and i64 %348, 4227858432
  %352 = sub i64 %331, %351
  %353 = add i64 %345, 33554432
  %354 = ashr i64 %353, 26
  %355 = add i64 %204, %215
  %356 = add i64 %355, %193
  %357 = add i64 %356, %181
  %358 = add i64 %357, %170
  %359 = add i64 %358, %158
  %360 = add i64 %359, %147
  %361 = add i64 %360, %135
  %362 = add i64 %361, %124
  %363 = add i64 %362, %113
  %364 = add i64 %363, %354
  %365 = and i64 %353, 4227858432
  %366 = sub i64 %345, %365
  %367 = add i64 %364, 16777216
  %368 = ashr i64 %367, 25
  %369 = mul nsw i64 %368, 19
  %370 = add i64 %369, %258
  %371 = and i64 %367, 4261412864
  %372 = sub i64 %364, %371
  %373 = add i64 %370, 33554432
  %374 = lshr i64 %373, 26
  %375 = add i64 %286, %374
  %376 = and i64 %373, 4227858432
  %377 = sub i64 %370, %376
  %378 = trunc i64 %377 to i32
  store i32 %378, i32* %58, align 16
  %379 = trunc i64 %375 to i32
  store i32 %379, i32* %59, align 4
  %380 = trunc i64 %314 to i32
  store i32 %380, i32* %61, align 8
  %381 = trunc i64 %333 to i32
  store i32 %381, i32* %62, align 4
  %382 = trunc i64 %352 to i32
  store i32 %382, i32* %63, align 16
  %383 = trunc i64 %350 to i32
  store i32 %383, i32* %64, align 4
  %384 = trunc i64 %328 to i32
  store i32 %384, i32* %65, align 8
  %385 = trunc i64 %347 to i32
  store i32 %385, i32* %66, align 4
  %386 = trunc i64 %366 to i32
  store i32 %386, i32* %67, align 16
  %387 = trunc i64 %372 to i32
  store i32 %387, i32* %68, align 4
  call void @fe25519_tobytes(i8* nonnull %0, i32* nonnull %58) #3
  br label %388

388:                                              ; preds = %14, %2, %11, %17
  %389 = phi i32 [ 0, %17 ], [ -1, %11 ], [ -1, %2 ], [ -1, %14 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %8) #3
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %7) #3
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %6) #3
  ret i32 %389
}

declare i32 @ge25519_has_small_order(i8* %0) local_unnamed_addr #2

declare i32 @ge25519_frombytes_negate_vartime(%struct.ge25519_p3* %0, i8* %1) local_unnamed_addr #2

declare i32 @ge25519_is_on_main_subgroup(%struct.ge25519_p3* %0) local_unnamed_addr #2

declare void @fe25519_invert(i32* %0, i32* %1) local_unnamed_addr #2

declare void @fe25519_tobytes(i8* %0, i32* %1) local_unnamed_addr #2

; Function Attrs: nounwind
define i32 @crypto_sign_ed25519_sk_to_curve25519(i8* nocapture nonnull %0, i8* nonnull %1) local_unnamed_addr #0 {
  %3 = alloca [64 x i8], align 16
  %4 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %4) #3
  %5 = call i32 @crypto_hash_sha512(i8* nonnull %4, i8* nonnull %1, i64 32) #3
  %6 = load i8, i8* %4, align 16
  %7 = and i8 %6, -8
  store i8 %7, i8* %4, align 16
  %8 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i32 0, i32 31
  %9 = load i8, i8* %8, align 1
  %10 = and i8 %9, 63
  %11 = or i8 %10, 64
  store i8 %11, i8* %8, align 1
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 1 dereferenceable(32) %0, i8* nonnull align 16 dereferenceable(32) %4, i32 32, i1 false)
  call void @sodium_memzero(i8* nonnull %4, i32 64) #3
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %4) #3
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %7 = load i8, i8* %1, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=11111000)

; *****
; For LLVM instruction:
;  %8 = and i8 %7, -8
; Looking for a replacement for:
%0:i8 = var
%1:i8 = and 248:i8, %0
infer %1

; *****
; For LLVM instruction:
;  %10 = load i8, i8* %9, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=00111111)

; *****
; For LLVM instruction:
;  %11 = and i8 %10, 63
; Looking for a replacement for:
%0:i8 = var
%1:i8 = and 63:i8, %0
infer %1 (demandedBits=10111111)

; *****
; For LLVM instruction:
;  %12 = or i8 %11, 64
; Looking for a replacement for:
%0:i8 = var
%1:i8 = and 63:i8, %0
%2:i8 = or 64:i8, %1
infer %2
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0 (demandedBits=11111000)


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -8
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = and 248:i8, %0
infer %1


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -8
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0 (demandedBits=00111111)


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 63
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = and 63:i8, %0
infer %1 (demandedBits=10111111)


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 63
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = and 63:i8, %0
%2:i8 = or 64:i8, %1
infer %2


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 64
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 127
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i8 = and 63:i8, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for crypto_sign_ed25519_seed_keypair()

; entering Souper's runOnFunction() for crypto_sign_ed25519_keypair()

; ModuleID = './keypair.c.bc'
source_filename = "crypto_sign/ed25519/ref10/keypair.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.ge25519_p3 = type { [10 x i32], [10 x i32], [10 x i32], [10 x i32] }

; Function Attrs: nounwind
define i32 @crypto_sign_ed25519_seed_keypair(i8* nonnull %0, i8* nonnull %1, i8* nonnull %2) local_unnamed_addr #0 {
  %4 = alloca %struct.ge25519_p3, align 4
  %5 = bitcast %struct.ge25519_p3* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %5) #3
  %6 = tail call i32 @crypto_hash_sha512(i8* nonnull %1, i8* nonnull %2, i64 32) #3
  %7 = load i8, i8* %1, align 1
  %8 = and i8 %7, -8
  store i8 %8, i8* %1, align 1
  %9 = getelementptr i8, i8* %1, i32 31
  %10 = load i8, i8* %9, align 1
  %11 = and i8 %10, 63
  %12 = or i8 %11, 64
  store i8 %12, i8* %9, align 1
  call void @ge25519_scalarmult_base(%struct.ge25519_p3* nonnull %4, i8* nonnull %1) #3
  call void @ge25519_p3_tobytes(i8* nonnull %0, %struct.ge25519_p3* nonnull %4) #3
  call void @llvm.memmove.p0i8.p0i8.i32(i8* nonnull align 1 dereferenceable(32) %1, i8* nonnull align 1 dereferenceable(32) %2, i32 32, i1 false)
  %13 = getelementptr i8, i8* %1, i32 32
  call void @llvm.memmove.p0i8.p0i8.i32(i8* nonnull align 1 dereferenceable(32) %13, i8* nonnull align 1 dereferenceable(32) %0, i32 32, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %5) #3
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #1

declare i32 @crypto_hash_sha512(i8* %0, i8* %1, i64 %2) local_unnamed_addr #2

declare void @ge25519_scalarmult_base(%struct.ge25519_p3* %0, i8* %1) local_unnamed_addr #2

declare void @ge25519_p3_tobytes(i8* %0, %struct.ge25519_p3* %1) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i32(i8* nocapture %0, i8* nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #1

; Function Attrs: nounwind
define i32 @crypto_sign_ed25519_keypair(i8* nonnull %0, i8* nonnull %1) local_unnamed_addr #0 {
  %3 = alloca %struct.ge25519_p3, align 4
  %4 = alloca [32 x i8], align 16
  %5 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %5) #3
  call void @randombytes_buf(i8* nonnull %5, i32 32) #3
  %6 = bitcast %struct.ge25519_p3* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %6) #3
  %7 = call i32 @crypto_hash_sha512(i8* nonnull %1, i8* nonnull %5, i64 32) #3
  %8 = load i8, i8* %1, align 1
  %9 = and i8 %8, -8
  store i8 %9, i8* %1, align 1
  %10 = getelementptr i8, i8* %1, i32 31
  %11 = load i8, i8* %10, align 1
  %12 = and i8 %11, 63
  %13 = or i8 %12, 64
  store i8 %13, i8* %10, align 1
  call void @ge25519_scalarmult_base(%struct.ge25519_p3* nonnull %3, i8* nonnull %1) #3
  call void @ge25519_p3_tobytes(i8* nonnull %0, %struct.ge25519_p3* nonnull %3) #3
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 1 dereferenceable(32) %1, i8* nonnull align 16 dereferenceable(32) %5, i32 32, i1 false) #3
  %14 = getelementptr i8, i8* %1, i32 32
  call void @llvm.memmove.p0i8.p0i8.i32(i8* nonnull align 1 dereferenceable(32) %14, i8* nonnull align 1 dereferenceable(32) %0, i32 32, i1 false) #3
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %6) #3
  call void @sodium_memzero(i8* nonnull %5, i32 32) #3
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %5) #3
  ret i32 0
}

declare void @randombytes_buf(i8* %0, i32 %1) local_unnamed_addr #2

declare void @sodium_memzero(i8* %0, i32 %1) local_unnamed_addr #2

; Function Attrs: nounwind
define i32 @crypto_sign_ed25519_pk_to_curve25519(i8* nonnull %0, i8* nonnull %1) local_unnamed_addr #0 {
  %3 = alloca %struct.ge25519_p3, align 4
  %4 = alloca [10 x i32], align 16
  %5 = alloca [10 x i32], align 16
  %6 = bitcast %struct.ge25519_p3* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %6) #3
  %7 = bitcast [10 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %7) #3
  %8 = bitcast [10 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %8) #3
  %9 = tail call i32 @ge25519_has_small_order(i8* nonnull %1) #3
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %388

11:                                               ; preds = %2
  %12 = call i32 @ge25519_frombytes_negate_vartime(%struct.ge25519_p3* nonnull %3, i8* nonnull %1) #3
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %388

14:                                               ; preds = %11
  %15 = call i32 @ge25519_is_on_main_subgroup(%struct.ge25519_p3* nonnull %3) #3
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %388, label %17

17:                                               ; preds = %14
  %18 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 0
  %19 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 1
  %20 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %3, i32 0, i32 1, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = sub i32 1, %21
  %23 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %3, i32 0, i32 1, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = sub i32 0, %24
  %26 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 2
  %27 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %3, i32 0, i32 1, i32 2
  %28 = load i32, i32* %27, align 4
  %29 = sub i32 0, %28
  %30 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 3
  %31 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %3, i32 0, i32 1, i32 3
  %32 = load i32, i32* %31, align 4
  %33 = sub i32 0, %32
  %34 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 4
  %35 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %3, i32 0, i32 1, i32 4
  %36 = load i32, i32* %35, align 4
  %37 = sub i32 0, %36
  %38 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 5
  %39 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %3, i32 0, i32 1, i32 5
  %40 = load i32, i32* %39, align 4
  %41 = sub i32 0, %40
  %42 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 6
  %43 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %3, i32 0, i32 1, i32 6
  %44 = load i32, i32* %43, align 4
  %45 = sub i32 0, %44
  %46 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 7
  %47 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %3, i32 0, i32 1, i32 7
  %48 = load i32, i32* %47, align 4
  %49 = sub i32 0, %48
  %50 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 8
  %51 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %3, i32 0, i32 1, i32 8
  %52 = load i32, i32* %51, align 4
  %53 = sub i32 0, %52
  %54 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 9
  %55 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %3, i32 0, i32 1, i32 9
  %56 = load i32, i32* %55, align 4
  %57 = sub i32 0, %56
  store i32 %22, i32* %18, align 16
  store i32 %25, i32* %19, align 4
  store i32 %29, i32* %26, align 8
  store i32 %33, i32* %30, align 4
  store i32 %37, i32* %34, align 16
  store i32 %41, i32* %38, align 4
  store i32 %45, i32* %42, align 8
  store i32 %49, i32* %46, align 4
  store i32 %53, i32* %50, align 16
  store i32 %57, i32* %54, align 4
  %58 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 0
  %59 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 1
  %60 = add i32 %21, 1
  %61 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 2
  %62 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 3
  %63 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 4
  %64 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 5
  %65 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 6
  %66 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 7
  %67 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 8
  %68 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 9
  store i32 %60, i32* %58, align 16
  store i32 %24, i32* %59, align 4
  store i32 %28, i32* %61, align 8
  store i32 %32, i32* %62, align 4
  store i32 %36, i32* %63, align 16
  store i32 %40, i32* %64, align 4
  store i32 %44, i32* %65, align 8
  store i32 %48, i32* %66, align 4
  store i32 %52, i32* %67, align 16
  store i32 %56, i32* %68, align 4
  call void @fe25519_invert(i32* nonnull %18, i32* nonnull %18) #3
  %69 = load i32, i32* %18, align 16
  %70 = load i32, i32* %19, align 4
  %71 = load i32, i32* %26, align 8
  %72 = load i32, i32* %30, align 4
  %73 = load i32, i32* %34, align 16
  %74 = load i32, i32* %38, align 4
  %75 = load i32, i32* %42, align 8
  %76 = load i32, i32* %46, align 4
  %77 = load i32, i32* %50, align 16
  %78 = load i32, i32* %54, align 4
  %79 = mul i32 %70, 19
  %80 = mul i32 %71, 19
  %81 = mul i32 %72, 19
  %82 = mul i32 %73, 19
  %83 = mul i32 %74, 19
  %84 = mul i32 %75, 19
  %85 = mul i32 %76, 19
  %86 = mul i32 %77, 19
  %87 = mul i32 %78, 19
  %88 = shl i32 %24, 1
  %89 = shl i32 %32, 1
  %90 = shl i32 %40, 1
  %91 = shl i32 %48, 1
  %92 = shl i32 %56, 1
  %93 = sext i32 %60 to i64
  %94 = sext i32 %69 to i64
  %95 = mul nsw i64 %94, %93
  %96 = sext i32 %70 to i64
  %97 = mul nsw i64 %96, %93
  %98 = sext i32 %71 to i64
  %99 = mul nsw i64 %98, %93
  %100 = sext i32 %72 to i64
  %101 = mul nsw i64 %100, %93
  %102 = sext i32 %73 to i64
  %103 = mul nsw i64 %102, %93
  %104 = sext i32 %74 to i64
  %105 = mul nsw i64 %104, %93
  %106 = sext i32 %75 to i64
  %107 = mul nsw i64 %106, %93
  %108 = sext i32 %76 to i64
  %109 = mul nsw i64 %108, %93
  %110 = sext i32 %77 to i64
  %111 = mul nsw i64 %110, %93
  %112 = sext i32 %78 to i64
  %113 = mul nsw i64 %112, %93
  %114 = sext i32 %24 to i64
  %115 = mul nsw i64 %94, %114
  %116 = sext i32 %88 to i64
  %117 = mul nsw i64 %96, %116
  %118 = mul nsw i64 %98, %114
  %119 = mul nsw i64 %100, %116
  %120 = mul nsw i64 %102, %114
  %121 = mul nsw i64 %104, %116
  %122 = mul nsw i64 %106, %114
  %123 = mul nsw i64 %108, %116
  %124 = mul nsw i64 %110, %114
  %125 = sext i32 %87 to i64
  %126 = mul nsw i64 %125, %116
  %127 = sext i32 %28 to i64
  %128 = mul nsw i64 %94, %127
  %129 = mul nsw i64 %96, %127
  %130 = mul nsw i64 %98, %127
  %131 = mul nsw i64 %100, %127
  %132 = mul nsw i64 %102, %127
  %133 = mul nsw i64 %104, %127
  %134 = mul nsw i64 %106, %127
  %135 = mul nsw i64 %108, %127
  %136 = sext i32 %86 to i64
  %137 = mul nsw i64 %136, %127
  %138 = mul nsw i64 %125, %127
  %139 = sext i32 %32 to i64
  %140 = mul nsw i64 %94, %139
  %141 = sext i32 %89 to i64
  %142 = mul nsw i64 %96, %141
  %143 = mul nsw i64 %98, %139
  %144 = mul nsw i64 %100, %141
  %145 = mul nsw i64 %102, %139
  %146 = mul nsw i64 %104, %141
  %147 = mul nsw i64 %106, %139
  %148 = sext i32 %85 to i64
  %149 = mul nsw i64 %148, %141
  %150 = mul nsw i64 %136, %139
  %151 = mul nsw i64 %125, %141
  %152 = sext i32 %36 to i64
  %153 = mul nsw i64 %94, %152
  %154 = mul nsw i64 %96, %152
  %155 = mul nsw i64 %98, %152
  %156 = mul nsw i64 %100, %152
  %157 = mul nsw i64 %102, %152
  %158 = mul nsw i64 %104, %152
  %159 = sext i32 %84 to i64
  %160 = mul nsw i64 %159, %152
  %161 = mul nsw i64 %148, %152
  %162 = mul nsw i64 %136, %152
  %163 = mul nsw i64 %125, %152
  %164 = sext i32 %40 to i64
  %165 = mul nsw i64 %94, %164
  %166 = sext i32 %90 to i64
  %167 = mul nsw i64 %96, %166
  %168 = mul nsw i64 %98, %164
  %169 = mul nsw i64 %100, %166
  %170 = mul nsw i64 %102, %164
  %171 = sext i32 %83 to i64
  %172 = mul nsw i64 %171, %166
  %173 = mul nsw i64 %159, %164
  %174 = mul nsw i64 %148, %166
  %175 = mul nsw i64 %136, %164
  %176 = mul nsw i64 %125, %166
  %177 = sext i32 %44 to i64
  %178 = mul nsw i64 %94, %177
  %179 = mul nsw i64 %96, %177
  %180 = mul nsw i64 %98, %177
  %181 = mul nsw i64 %100, %177
  %182 = sext i32 %82 to i64
  %183 = mul nsw i64 %182, %177
  %184 = mul nsw i64 %171, %177
  %185 = mul nsw i64 %159, %177
  %186 = mul nsw i64 %148, %177
  %187 = mul nsw i64 %136, %177
  %188 = mul nsw i64 %125, %177
  %189 = sext i32 %48 to i64
  %190 = mul nsw i64 %94, %189
  %191 = sext i32 %91 to i64
  %192 = mul nsw i64 %96, %191
  %193 = mul nsw i64 %98, %189
  %194 = sext i32 %81 to i64
  %195 = mul nsw i64 %194, %191
  %196 = mul nsw i64 %182, %189
  %197 = mul nsw i64 %171, %191
  %198 = mul nsw i64 %159, %189
  %199 = mul nsw i64 %148, %191
  %200 = mul nsw i64 %136, %189
  %201 = mul nsw i64 %125, %191
  %202 = sext i32 %52 to i64
  %203 = mul nsw i64 %94, %202
  %204 = mul nsw i64 %96, %202
  %205 = sext i32 %80 to i64
  %206 = mul nsw i64 %205, %202
  %207 = mul nsw i64 %194, %202
  %208 = mul nsw i64 %182, %202
  %209 = mul nsw i64 %171, %202
  %210 = mul nsw i64 %159, %202
  %211 = mul nsw i64 %148, %202
  %212 = mul nsw i64 %136, %202
  %213 = mul nsw i64 %125, %202
  %214 = sext i32 %56 to i64
  %215 = mul nsw i64 %94, %214
  %216 = sext i32 %92 to i64
  %217 = sext i32 %79 to i64
  %218 = mul nsw i64 %217, %216
  %219 = mul nsw i64 %205, %214
  %220 = mul nsw i64 %194, %216
  %221 = mul nsw i64 %182, %214
  %222 = mul nsw i64 %171, %216
  %223 = mul nsw i64 %159, %214
  %224 = mul nsw i64 %148, %216
  %225 = mul nsw i64 %136, %214
  %226 = mul nsw i64 %125, %216
  %227 = add i64 %218, %95
  %228 = add i64 %227, %206
  %229 = add i64 %228, %195
  %230 = add i64 %229, %183
  %231 = add i64 %230, %172
  %232 = add i64 %231, %160
  %233 = add i64 %232, %149
  %234 = add i64 %233, %137
  %235 = add i64 %234, %126
  %236 = add i64 %97, %115
  %237 = add i64 %142, %153
  %238 = add i64 %237, %130
  %239 = add i64 %238, %119
  %240 = add i64 %239, %103
  %241 = add i64 %240, %222
  %242 = add i64 %241, %210
  %243 = add i64 %242, %199
  %244 = add i64 %243, %187
  %245 = add i64 %244, %176
  %246 = add i64 %235, 33554432
  %247 = ashr i64 %246, 26
  %248 = add i64 %236, %219
  %249 = add i64 %248, %207
  %250 = add i64 %249, %196
  %251 = add i64 %250, %184
  %252 = add i64 %251, %173
  %253 = add i64 %252, %161
  %254 = add i64 %253, %150
  %255 = add i64 %254, %138
  %256 = add i64 %255, %247
  %257 = and i64 %246, -67108864
  %258 = sub i64 %235, %257
  %259 = add i64 %245, 33554432
  %260 = ashr i64 %259, 26
  %261 = add i64 %154, %165
  %262 = add i64 %261, %143
  %263 = add i64 %262, %131
  %264 = add i64 %263, %120
  %265 = add i64 %264, %105
  %266 = add i64 %265, %223
  %267 = add i64 %266, %211
  %268 = add i64 %267, %200
  %269 = add i64 %268, %188
  %270 = add i64 %269, %260
  %271 = and i64 %259, -67108864
  %272 = sub i64 %245, %271
  %273 = add i64 %256, 16777216
  %274 = ashr i64 %273, 25
  %275 = add i64 %117, %128
  %276 = add i64 %275, %99
  %277 = add i64 %276, %220
  %278 = add i64 %277, %208
  %279 = add i64 %278, %197
  %280 = add i64 %279, %185
  %281 = add i64 %280, %174
  %282 = add i64 %281, %162
  %283 = add i64 %282, %151
  %284 = add i64 %283, %274
  %285 = and i64 %273, 4261412864
  %286 = sub i64 %256, %285
  %287 = add i64 %270, 16777216
  %288 = ashr i64 %287, 25
  %289 = add i64 %167, %178
  %290 = add i64 %289, %155
  %291 = add i64 %290, %144
  %292 = add i64 %291, %132
  %293 = add i64 %292, %121
  %294 = add i64 %293, %107
  %295 = add i64 %294, %224
  %296 = add i64 %295, %212
  %297 = add i64 %296, %201
  %298 = add i64 %297, %288
  %299 = and i64 %287, 4261412864
  %300 = sub i64 %270, %299
  %301 = add i64 %284, 33554432
  %302 = ashr i64 %301, 26
  %303 = add i64 %129, %140
  %304 = add i64 %303, %118
  %305 = add i64 %304, %101
  %306 = add i64 %305, %221
  %307 = add i64 %306, %209
  %308 = add i64 %307, %198
  %309 = add i64 %308, %186
  %310 = add i64 %309, %175
  %311 = add i64 %310, %163
  %312 = add i64 %311, %302
  %313 = and i64 %301, 4227858432
  %314 = sub i64 %284, %313
  %315 = add i64 %298, 33554432
  %316 = ashr i64 %315, 26
  %317 = add i64 %179, %190
  %318 = add i64 %317, %168
  %319 = add i64 %318, %156
  %320 = add i64 %319, %145
  %321 = add i64 %320, %133
  %322 = add i64 %321, %122
  %323 = add i64 %322, %109
  %324 = add i64 %323, %225
  %325 = add i64 %324, %213
  %326 = add i64 %325, %316
  %327 = and i64 %315, 4227858432
  %328 = sub i64 %298, %327
  %329 = add i64 %312, 16777216
  %330 = ashr i64 %329, 25
  %331 = add i64 %330, %272
  %332 = and i64 %329, 4261412864
  %333 = sub i64 %312, %332
  %334 = add i64 %326, 16777216
  %335 = ashr i64 %334, 25
  %336 = add i64 %192, %203
  %337 = add i64 %336, %180
  %338 = add i64 %337, %169
  %339 = add i64 %338, %157
  %340 = add i64 %339, %146
  %341 = add i64 %340, %134
  %342 = add i64 %341, %123
  %343 = add i64 %342, %111
  %344 = add i64 %343, %226
  %345 = add i64 %344, %335
  %346 = and i64 %334, 4261412864
  %347 = sub i64 %326, %346
  %348 = add i64 %331, 33554432
  %349 = lshr i64 %348, 26
  %350 = add i64 %300, %349
  %351 = and i64 %348, 4227858432
  %352 = sub i64 %331, %351
  %353 = add i64 %345, 33554432
  %354 = ashr i64 %353, 26
  %355 = add i64 %204, %215
  %356 = add i64 %355, %193
  %357 = add i64 %356, %181
  %358 = add i64 %357, %170
  %359 = add i64 %358, %158
  %360 = add i64 %359, %147
  %361 = add i64 %360, %135
  %362 = add i64 %361, %124
  %363 = add i64 %362, %113
  %364 = add i64 %363, %354
  %365 = and i64 %353, 4227858432
  %366 = sub i64 %345, %365
  %367 = add i64 %364, 16777216
  %368 = ashr i64 %367, 25
  %369 = mul nsw i64 %368, 19
  %370 = add i64 %369, %258
  %371 = and i64 %367, 4261412864
  %372 = sub i64 %364, %371
  %373 = add i64 %370, 33554432
  %374 = lshr i64 %373, 26
  %375 = add i64 %286, %374
  %376 = and i64 %373, 4227858432
  %377 = sub i64 %370, %376
  %378 = trunc i64 %377 to i32
  store i32 %378, i32* %58, align 16
  %379 = trunc i64 %375 to i32
  store i32 %379, i32* %59, align 4
  %380 = trunc i64 %314 to i32
  store i32 %380, i32* %61, align 8
  %381 = trunc i64 %333 to i32
  store i32 %381, i32* %62, align 4
  %382 = trunc i64 %352 to i32
  store i32 %382, i32* %63, align 16
  %383 = trunc i64 %350 to i32
  store i32 %383, i32* %64, align 4
  %384 = trunc i64 %328 to i32
  store i32 %384, i32* %65, align 8
  %385 = trunc i64 %347 to i32
  store i32 %385, i32* %66, align 4
  %386 = trunc i64 %366 to i32
  store i32 %386, i32* %67, align 16
  %387 = trunc i64 %372 to i32
  store i32 %387, i32* %68, align 4
  call void @fe25519_tobytes(i8* nonnull %0, i32* nonnull %58) #3
  br label %388

388:                                              ; preds = %14, %2, %11, %17
  %389 = phi i32 [ 0, %17 ], [ -1, %11 ], [ -1, %2 ], [ -1, %14 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %8) #3
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %7) #3
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %6) #3
  ret i32 %389
}

declare i32 @ge25519_has_small_order(i8* %0) local_unnamed_addr #2

declare i32 @ge25519_frombytes_negate_vartime(%struct.ge25519_p3* %0, i8* %1) local_unnamed_addr #2

declare i32 @ge25519_is_on_main_subgroup(%struct.ge25519_p3* %0) local_unnamed_addr #2

declare void @fe25519_invert(i32* %0, i32* %1) local_unnamed_addr #2

declare void @fe25519_tobytes(i8* %0, i32* %1) local_unnamed_addr #2

; Function Attrs: nounwind
define i32 @crypto_sign_ed25519_sk_to_curve25519(i8* nocapture nonnull %0, i8* nonnull %1) local_unnamed_addr #0 {
  %3 = alloca [64 x i8], align 16
  %4 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %4) #3
  %5 = call i32 @crypto_hash_sha512(i8* nonnull %4, i8* nonnull %1, i64 32) #3
  %6 = load i8, i8* %4, align 16
  %7 = and i8 %6, -8
  store i8 %7, i8* %4, align 16
  %8 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i32 0, i32 31
  %9 = load i8, i8* %8, align 1
  %10 = and i8 %9, 63
  %11 = or i8 %10, 64
  store i8 %11, i8* %8, align 1
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 1 dereferenceable(32) %0, i8* nonnull align 16 dereferenceable(32) %4, i32 32, i1 false)
  call void @sodium_memzero(i8* nonnull %4, i32 64) #3
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %4) #3
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %8 = load i8, i8* %1, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=11111000)

; *****
; For LLVM instruction:
;  %9 = and i8 %8, -8
; Looking for a replacement for:
%0:i8 = var
%1:i8 = and 248:i8, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i8, i8* %10, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=00111111)

; *****
; For LLVM instruction:
;  %12 = and i8 %11, 63
; Looking for a replacement for:
%0:i8 = var
%1:i8 = and 63:i8, %0
infer %1 (demandedBits=10111111)

; *****
; For LLVM instruction:
;  %13 = or i8 %12, 64
; Looking for a replacement for:
%0:i8 = var
%1:i8 = and 63:i8, %0
%2:i8 = or 64:i8, %1
infer %2
#########################################################
; exiting Souper's runOnFunction() for crypto_sign_ed25519_keypair()

; entering Souper's runOnFunction() for crypto_sign_ed25519_pk_to_curve25519()

; ModuleID = './keypair.c.bc'
source_filename = "crypto_sign/ed25519/ref10/keypair.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.ge25519_p3 = type { [10 x i32], [10 x i32], [10 x i32], [10 x i32] }

; Function Attrs: nounwind
define i32 @crypto_sign_ed25519_seed_keypair(i8* nonnull %0, i8* nonnull %1, i8* nonnull %2) local_unnamed_addr #0 {
  %4 = alloca %struct.ge25519_p3, align 4
  %5 = bitcast %struct.ge25519_p3* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %5) #3
  %6 = tail call i32 @crypto_hash_sha512(i8* nonnull %1, i8* nonnull %2, i64 32) #3
  %7 = load i8, i8* %1, align 1
  %8 = and i8 %7, -8
  store i8 %8, i8* %1, align 1
  %9 = getelementptr i8, i8* %1, i32 31
  %10 = load i8, i8* %9, align 1
  %11 = and i8 %10, 63
  %12 = or i8 %11, 64
  store i8 %12, i8* %9, align 1
  call void @ge25519_scalarmult_base(%struct.ge25519_p3* nonnull %4, i8* nonnull %1) #3
  call void @ge25519_p3_tobytes(i8* nonnull %0, %struct.ge25519_p3* nonnull %4) #3
  call void @llvm.memmove.p0i8.p0i8.i32(i8* nonnull align 1 dereferenceable(32) %1, i8* nonnull align 1 dereferenceable(32) %2, i32 32, i1 false)
  %13 = getelementptr i8, i8* %1, i32 32
  call void @llvm.memmove.p0i8.p0i8.i32(i8* nonnull align 1 dereferenceable(32) %13, i8* nonnull align 1 dereferenceable(32) %0, i32 32, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %5) #3
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #1

declare i32 @crypto_hash_sha512(i8* %0, i8* %1, i64 %2) local_unnamed_addr #2

declare void @ge25519_scalarmult_base(%struct.ge25519_p3* %0, i8* %1) local_unnamed_addr #2

declare void @ge25519_p3_tobytes(i8* %0, %struct.ge25519_p3* %1) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i32(i8* nocapture %0, i8* nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #1

; Function Attrs: nounwind
define i32 @crypto_sign_ed25519_keypair(i8* nonnull %0, i8* nonnull %1) local_unnamed_addr #0 {
  %3 = alloca %struct.ge25519_p3, align 4
  %4 = alloca [32 x i8], align 16
  %5 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %5) #3
  call void @randombytes_buf(i8* nonnull %5, i32 32) #3
  %6 = bitcast %struct.ge25519_p3* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %6) #3
  %7 = call i32 @crypto_hash_sha512(i8* nonnull %1, i8* nonnull %5, i64 32) #3
  %8 = load i8, i8* %1, align 1
  %9 = and i8 %8, -8
  store i8 %9, i8* %1, align 1
  %10 = getelementptr i8, i8* %1, i32 31
  %11 = load i8, i8* %10, align 1
  %12 = and i8 %11, 63
  %13 = or i8 %12, 64
  store i8 %13, i8* %10, align 1
  call void @ge25519_scalarmult_base(%struct.ge25519_p3* nonnull %3, i8* nonnull %1) #3
  call void @ge25519_p3_tobytes(i8* nonnull %0, %struct.ge25519_p3* nonnull %3) #3
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 1 dereferenceable(32) %1, i8* nonnull align 16 dereferenceable(32) %5, i32 32, i1 false) #3
  %14 = getelementptr i8, i8* %1, i32 32
  call void @llvm.memmove.p0i8.p0i8.i32(i8* nonnull align 1 dereferenceable(32) %14, i8* nonnull align 1 dereferenceable(32) %0, i32 32, i1 false) #3
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %6) #3
  call void @sodium_memzero(i8* nonnull %5, i32 32) #3
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %5) #3
  ret i32 0
}

declare void @randombytes_buf(i8* %0, i32 %1) local_unnamed_addr #2

declare void @sodium_memzero(i8* %0, i32 %1) local_unnamed_addr #2

; Function Attrs: nounwind
define i32 @crypto_sign_ed25519_pk_to_curve25519(i8* nonnull %0, i8* nonnull %1) local_unnamed_addr #0 {
  %3 = alloca %struct.ge25519_p3, align 4
  %4 = alloca [10 x i32], align 16
  %5 = alloca [10 x i32], align 16
  %6 = bitcast %struct.ge25519_p3* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %6) #3
  %7 = bitcast [10 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %7) #3
  %8 = bitcast [10 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %8) #3
  %9 = tail call i32 @ge25519_has_small_order(i8* nonnull %1) #3
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %388

11:                                               ; preds = %2
  %12 = call i32 @ge25519_frombytes_negate_vartime(%struct.ge25519_p3* nonnull %3, i8* nonnull %1) #3
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %388

14:                                               ; preds = %11
  %15 = call i32 @ge25519_is_on_main_subgroup(%struct.ge25519_p3* nonnull %3) #3
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %388, label %17

17:                                               ; preds = %14
  %18 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 0
  %19 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 1
  %20 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %3, i32 0, i32 1, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = sub i32 1, %21
  %23 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %3, i32 0, i32 1, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = sub i32 0, %24
  %26 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 2
  %27 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %3, i32 0, i32 1, i32 2
  %28 = load i32, i32* %27, align 4
  %29 = sub i32 0, %28
  %30 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 3
  %31 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %3, i32 0, i32 1, i32 3
  %32 = load i32, i32* %31, align 4
  %33 = sub i32 0, %32
  %34 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 4
  %35 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %3, i32 0, i32 1, i32 4
  %36 = load i32, i32* %35, align 4
  %37 = sub i32 0, %36
  %38 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 5
  %39 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %3, i32 0, i32 1, i32 5
  %40 = load i32, i32* %39, align 4
  %41 = sub i32 0, %40
  %42 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 6
  %43 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %3, i32 0, i32 1, i32 6
  %44 = load i32, i32* %43, align 4
  %45 = sub i32 0, %44
  %46 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 7
  %47 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %3, i32 0, i32 1, i32 7
  %48 = load i32, i32* %47, align 4
  %49 = sub i32 0, %48
  %50 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 8
  %51 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %3, i32 0, i32 1, i32 8
  %52 = load i32, i32* %51, align 4
  %53 = sub i32 0, %52
  %54 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 9
  %55 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %3, i32 0, i32 1, i32 9
  %56 = load i32, i32* %55, align 4
  %57 = sub i32 0, %56
  store i32 %22, i32* %18, align 16
  store i32 %25, i32* %19, align 4
  store i32 %29, i32* %26, align 8
  store i32 %33, i32* %30, align 4
  store i32 %37, i32* %34, align 16
  store i32 %41, i32* %38, align 4
  store i32 %45, i32* %42, align 8
  store i32 %49, i32* %46, align 4
  store i32 %53, i32* %50, align 16
  store i32 %57, i32* %54, align 4
  %58 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 0
  %59 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 1
  %60 = add i32 %21, 1
  %61 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 2
  %62 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 3
  %63 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 4
  %64 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 5
  %65 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 6
  %66 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 7
  %67 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 8
  %68 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 9
  store i32 %60, i32* %58, align 16
  store i32 %24, i32* %59, align 4
  store i32 %28, i32* %61, align 8
  store i32 %32, i32* %62, align 4
  store i32 %36, i32* %63, align 16
  store i32 %40, i32* %64, align 4
  store i32 %44, i32* %65, align 8
  store i32 %48, i32* %66, align 4
  store i32 %52, i32* %67, align 16
  store i32 %56, i32* %68, align 4
  call void @fe25519_invert(i32* nonnull %18, i32* nonnull %18) #3
  %69 = load i32, i32* %18, align 16
  %70 = load i32, i32* %19, align 4
  %71 = load i32, i32* %26, align 8
  %72 = load i32, i32* %30, align 4
  %73 = load i32, i32* %34, align 16
  %74 = load i32, i32* %38, align 4
  %75 = load i32, i32* %42, align 8
  %76 = load i32, i32* %46, align 4
  %77 = load i32, i32* %50, align 16
  %78 = load i32, i32* %54, align 4
  %79 = mul i32 %70, 19
  %80 = mul i32 %71, 19
  %81 = mul i32 %72, 19
  %82 = mul i32 %73, 19
  %83 = mul i32 %74, 19
  %84 = mul i32 %75, 19
  %85 = mul i32 %76, 19
  %86 = mul i32 %77, 19
  %87 = mul i32 %78, 19
  %88 = shl i32 %24, 1
  %89 = shl i32 %32, 1
  %90 = shl i32 %40, 1
  %91 = shl i32 %48, 1
  %92 = shl i32 %56, 1
  %93 = sext i32 %60 to i64
  %94 = sext i32 %69 to i64
  %95 = mul nsw i64 %94, %93
  %96 = sext i32 %70 to i64
  %97 = mul nsw i64 %96, %93
  %98 = sext i32 %71 to i64
  %99 = mul nsw i64 %98, %93
  %100 = sext i32 %72 to i64
  %101 = mul nsw i64 %100, %93
  %102 = sext i32 %73 to i64
  %103 = mul nsw i64 %102, %93
  %104 = sext i32 %74 to i64
  %105 = mul nsw i64 %104, %93
  %106 = sext i32 %75 to i64
  %107 = mul nsw i64 %106, %93
  %108 = sext i32 %76 to i64
  %109 = mul nsw i64 %108, %93
  %110 = sext i32 %77 to i64
  %111 = mul nsw i64 %110, %93
  %112 = sext i32 %78 to i64
  %113 = mul nsw i64 %112, %93
  %114 = sext i32 %24 to i64
  %115 = mul nsw i64 %94, %114
  %116 = sext i32 %88 to i64
  %117 = mul nsw i64 %96, %116
  %118 = mul nsw i64 %98, %114
  %119 = mul nsw i64 %100, %116
  %120 = mul nsw i64 %102, %114
  %121 = mul nsw i64 %104, %116
  %122 = mul nsw i64 %106, %114
  %123 = mul nsw i64 %108, %116
  %124 = mul nsw i64 %110, %114
  %125 = sext i32 %87 to i64
  %126 = mul nsw i64 %125, %116
  %127 = sext i32 %28 to i64
  %128 = mul nsw i64 %94, %127
  %129 = mul nsw i64 %96, %127
  %130 = mul nsw i64 %98, %127
  %131 = mul nsw i64 %100, %127
  %132 = mul nsw i64 %102, %127
  %133 = mul nsw i64 %104, %127
  %134 = mul nsw i64 %106, %127
  %135 = mul nsw i64 %108, %127
  %136 = sext i32 %86 to i64
  %137 = mul nsw i64 %136, %127
  %138 = mul nsw i64 %125, %127
  %139 = sext i32 %32 to i64
  %140 = mul nsw i64 %94, %139
  %141 = sext i32 %89 to i64
  %142 = mul nsw i64 %96, %141
  %143 = mul nsw i64 %98, %139
  %144 = mul nsw i64 %100, %141
  %145 = mul nsw i64 %102, %139
  %146 = mul nsw i64 %104, %141
  %147 = mul nsw i64 %106, %139
  %148 = sext i32 %85 to i64
  %149 = mul nsw i64 %148, %141
  %150 = mul nsw i64 %136, %139
  %151 = mul nsw i64 %125, %141
  %152 = sext i32 %36 to i64
  %153 = mul nsw i64 %94, %152
  %154 = mul nsw i64 %96, %152
  %155 = mul nsw i64 %98, %152
  %156 = mul nsw i64 %100, %152
  %157 = mul nsw i64 %102, %152
  %158 = mul nsw i64 %104, %152
  %159 = sext i32 %84 to i64
  %160 = mul nsw i64 %159, %152
  %161 = mul nsw i64 %148, %152
  %162 = mul nsw i64 %136, %152
  %163 = mul nsw i64 %125, %152
  %164 = sext i32 %40 to i64
  %165 = mul nsw i64 %94, %164
  %166 = sext i32 %90 to i64
  %167 = mul nsw i64 %96, %166
  %168 = mul nsw i64 %98, %164
  %169 = mul nsw i64 %100, %166
  %170 = mul nsw i64 %102, %164
  %171 = sext i32 %83 to i64
  %172 = mul nsw i64 %171, %166
  %173 = mul nsw i64 %159, %164
  %174 = mul nsw i64 %148, %166
  %175 = mul nsw i64 %136, %164
  %176 = mul nsw i64 %125, %166
  %177 = sext i32 %44 to i64
  %178 = mul nsw i64 %94, %177
  %179 = mul nsw i64 %96, %177
  %180 = mul nsw i64 %98, %177
  %181 = mul nsw i64 %100, %177
  %182 = sext i32 %82 to i64
  %183 = mul nsw i64 %182, %177
  %184 = mul nsw i64 %171, %177
  %185 = mul nsw i64 %159, %177
  %186 = mul nsw i64 %148, %177
  %187 = mul nsw i64 %136, %177
  %188 = mul nsw i64 %125, %177
  %189 = sext i32 %48 to i64
  %190 = mul nsw i64 %94, %189
  %191 = sext i32 %91 to i64
  %192 = mul nsw i64 %96, %191
  %193 = mul nsw i64 %98, %189
  %194 = sext i32 %81 to i64
  %195 = mul nsw i64 %194, %191
  %196 = mul nsw i64 %182, %189
  %197 = mul nsw i64 %171, %191
  %198 = mul nsw i64 %159, %189
  %199 = mul nsw i64 %148, %191
  %200 = mul nsw i64 %136, %189
  %201 = mul nsw i64 %125, %191
  %202 = sext i32 %52 to i64
  %203 = mul nsw i64 %94, %202
  %204 = mul nsw i64 %96, %202
  %205 = sext i32 %80 to i64
  %206 = mul nsw i64 %205, %202
  %207 = mul nsw i64 %194, %202
  %208 = mul nsw i64 %182, %202
  %209 = mul nsw i64 %171, %202
  %210 = mul nsw i64 %159, %202
  %211 = mul nsw i64 %148, %202
  %212 = mul nsw i64 %136, %202
  %213 = mul nsw i64 %125, %202
  %214 = sext i32 %56 to i64
  %215 = mul nsw i64 %94, %214
  %216 = sext i32 %92 to i64
  %217 = sext i32 %79 to i64
  %218 = mul nsw i64 %217, %216
  %219 = mul nsw i64 %205, %214
  %220 = mul nsw i64 %194, %216
  %221 = mul nsw i64 %182, %214
  %222 = mul nsw i64 %171, %216
  %223 = mul nsw i64 %159, %214
  %224 = mul nsw i64 %148, %216
  %225 = mul nsw i64 %136, %214
  %226 = mul nsw i64 %125, %216
  %227 = add i64 %218, %95
  %228 = add i64 %227, %206
  %229 = add i64 %228, %195
  %230 = add i64 %229, %183
  %231 = add i64 %230, %172
  %232 = add i64 %231, %160
  %233 = add i64 %232, %149
  %234 = add i64 %233, %137
  %235 = add i64 %234, %126
  %236 = add i64 %97, %115
  %237 = add i64 %142, %153
  %238 = add i64 %237, %130
  %239 = add i64 %238, %119
  %240 = add i64 %239, %103
  %241 = add i64 %240, %222
  %242 = add i64 %241, %210
  %243 = add i64 %242, %199
  %244 = add i64 %243, %187
  %245 = add i64 %244, %176
  %246 = add i64 %235, 33554432
  %247 = ashr i64 %246, 26
  %248 = add i64 %236, %219
  %249 = add i64 %248, %207
  %250 = add i64 %249, %196
  %251 = add i64 %250, %184
  %252 = add i64 %251, %173
  %253 = add i64 %252, %161
  %254 = add i64 %253, %150
  %255 = add i64 %254, %138
  %256 = add i64 %255, %247
  %257 = and i64 %246, -67108864
  %258 = sub i64 %235, %257
  %259 = add i64 %245, 33554432
  %260 = ashr i64 %259, 26
  %261 = add i64 %154, %165
  %262 = add i64 %261, %143
  %263 = add i64 %262, %131
  %264 = add i64 %263, %120
  %265 = add i64 %264, %105
  %266 = add i64 %265, %223
  %267 = add i64 %266, %211
  %268 = add i64 %267, %200
  %269 = add i64 %268, %188
  %270 = add i64 %269, %260
  %271 = and i64 %259, -67108864
  %272 = sub i64 %245, %271
  %273 = add i64 %256, 16777216
  %274 = ashr i64 %273, 25
  %275 = add i64 %117, %128
  %276 = add i64 %275, %99
  %277 = add i64 %276, %220
  %278 = add i64 %277, %208
  %279 = add i64 %278, %197
  %280 = add i64 %279, %185
  %281 = add i64 %280, %174
  %282 = add i64 %281, %162
  %283 = add i64 %282, %151
  %284 = add i64 %283, %274
  %285 = and i64 %273, 4261412864
  %286 = sub i64 %256, %285
  %287 = add i64 %270, 16777216
  %288 = ashr i64 %287, 25
  %289 = add i64 %167, %178
  %290 = add i64 %289, %155
  %291 = add i64 %290, %144
  %292 = add i64 %291, %132
  %293 = add i64 %292, %121
  %294 = add i64 %293, %107
  %295 = add i64 %294, %224
  %296 = add i64 %295, %212
  %297 = add i64 %296, %201
  %298 = add i64 %297, %288
  %299 = and i64 %287, 4261412864
  %300 = sub i64 %270, %299
  %301 = add i64 %284, 33554432
  %302 = ashr i64 %301, 26
  %303 = add i64 %129, %140
  %304 = add i64 %303, %118
  %305 = add i64 %304, %101
  %306 = add i64 %305, %221
  %307 = add i64 %306, %209
  %308 = add i64 %307, %198
  %309 = add i64 %308, %186
  %310 = add i64 %309, %175
  %311 = add i64 %310, %163
  %312 = add i64 %311, %302
  %313 = and i64 %301, 4227858432
  %314 = sub i64 %284, %313
  %315 = add i64 %298, 33554432
  %316 = ashr i64 %315, 26
  %317 = add i64 %179, %190
  %318 = add i64 %317, %168
  %319 = add i64 %318, %156
  %320 = add i64 %319, %145
  %321 = add i64 %320, %133
  %322 = add i64 %321, %122
  %323 = add i64 %322, %109
  %324 = add i64 %323, %225
  %325 = add i64 %324, %213
  %326 = add i64 %325, %316
  %327 = and i64 %315, 4227858432
  %328 = sub i64 %298, %327
  %329 = add i64 %312, 16777216
  %330 = ashr i64 %329, 25
  %331 = add i64 %330, %272
  %332 = and i64 %329, 4261412864
  %333 = sub i64 %312, %332
  %334 = add i64 %326, 16777216
  %335 = ashr i64 %334, 25
  %336 = add i64 %192, %203
  %337 = add i64 %336, %180
  %338 = add i64 %337, %169
  %339 = add i64 %338, %157
  %340 = add i64 %339, %146
  %341 = add i64 %340, %134
  %342 = add i64 %341, %123
  %343 = add i64 %342, %111
  %344 = add i64 %343, %226
  %345 = add i64 %344, %335
  %346 = and i64 %334, 4261412864
  %347 = sub i64 %326, %346
  %348 = add i64 %331, 33554432
  %349 = lshr i64 %348, 26
  %350 = add i64 %300, %349
  %351 = and i64 %348, 4227858432
  %352 = sub i64 %331, %351
  %353 = add i64 %345, 33554432
  %354 = ashr i64 %353, 26
  %355 = add i64 %204, %215
  %356 = add i64 %355, %193
  %357 = add i64 %356, %181
  %358 = add i64 %357, %170
  %359 = add i64 %358, %158
  %360 = add i64 %359, %147
  %361 = add i64 %360, %135
  %362 = add i64 %361, %124
  %363 = add i64 %362, %113
  %364 = add i64 %363, %354
  %365 = and i64 %353, 4227858432
  %366 = sub i64 %345, %365
  %367 = add i64 %364, 16777216
  %368 = ashr i64 %367, 25
  %369 = mul nsw i64 %368, 19
  %370 = add i64 %369, %258
  %371 = and i64 %367, 4261412864
  %372 = sub i64 %364, %371
  %373 = add i64 %370, 33554432
  %374 = lshr i64 %373, 26
  %375 = add i64 %286, %374
  %376 = and i64 %373, 4227858432
  %377 = sub i64 %370, %376
  %378 = trunc i64 %377 to i32
  store i32 %378, i32* %58, align 16
  %379 = trunc i64 %375 to i32
  store i32 %379, i32* %59, align 4
  %380 = trunc i64 %314 to i32
  store i32 %380, i32* %61, align 8
  %381 = trunc i64 %333 to i32
  store i32 %381, i32* %62, align 4
  %382 = trunc i64 %352 to i32
  store i32 %382, i32* %63, align 16
  %383 = trunc i64 %350 to i32
  store i32 %383, i32* %64, align 4
  %384 = trunc i64 %328 to i32
  store i32 %384, i32* %65, align 8
  %385 = trunc i64 %347 to i32
  store i32 %385, i32* %66, align 4
  %386 = trunc i64 %366 to i32
  store i32 %386, i32* %67, align 16
  %387 = trunc i64 %372 to i32
  store i32 %387, i32* %68, align 4
  call void @fe25519_tobytes(i8* nonnull %0, i32* nonnull %58) #3
  br label %388

388:                                              ; preds = %14, %2, %11, %17
  %389 = phi i32 [ 0, %17 ], [ -1, %11 ], [ -1, %2 ], [ -1, %14 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %8) #3
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %7) #3
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %6) #3
  ret i32 %389
}

declare i32 @ge25519_has_small_order(i8* %0) local_unnamed_addr #2

declare i32 @ge25519_frombytes_negate_vartime(%struct.ge25519_p3* %0, i8* %1) local_unnamed_addr #2

declare i32 @ge25519_is_on_main_subgroup(%struct.ge25519_p3* %0) local_unnamed_addr #2

declare void @fe25519_invert(i32* %0, i32* %1) local_unnamed_addr #2

declare void @fe25519_tobytes(i8* %0, i32* %1) local_unnamed_addr #2

; Function Attrs: nounwind
define i32 @crypto_sign_ed25519_sk_to_curve25519(i8* nocapture nonnull %0, i8* nonnull %1) local_unnamed_addr #0 {
  %3 = alloca [64 x i8], align 16
  %4 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %4) #3
  %5 = call i32 @crypto_hash_sha512(i8* nonnull %4, i8* nonnull %1, i64 32) #3
  %6 = load i8, i8* %4, align 16
  %7 = and i8 %6, -8
  store i8 %7, i8* %4, align 16
  %8 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i32 0, i32 31
  %9 = load i8, i8* %8, align 1
  %10 = and i8 %9, 63
  %11 = or i8 %10, 64
  store i8 %11, i8* %8, align 1
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 1 dereferenceable(32) %0, i8* nonnull align 16 dereferenceable(32) %4, i32 32, i1 false)
  call void @sodium_memzero(i8* nonnull %4, i32 64) #3
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %4) #3
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %9 = tail call i32 @ge25519_has_small_order(i8* nonnull %1) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = icmp eq i32 %9, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = call i32 @ge25519_frombytes_negate_vartime(%struct.ge25519_p3* nonnull %3, i8* nonnull %1) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = icmp eq i32 %12, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %15 = call i32 @ge25519_is_on_main_subgroup(%struct.ge25519_p3* nonnull %3) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = icmp eq i32 %15, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %20, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = sub i32 1, %21
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %23, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = sub i32 0, %24
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %27, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %29 = sub i32 0, %28
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %31, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %33 = sub i32 0, %32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %35, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %37 = sub i32 0, %36
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %40 = load i32, i32* %39, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %41 = sub i32 0, %40
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %43, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %45 = sub i32 0, %44
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %48 = load i32, i32* %47, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %49 = sub i32 0, %48
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %52 = load i32, i32* %51, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %53 = sub i32 0, %52
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %56 = load i32, i32* %55, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %57 = sub i32 0, %56
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %60 = add i32 %21, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %69 = load i32, i32* %18, align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %70 = load i32, i32* %19, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %71 = load i32, i32* %26, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %72 = load i32, i32* %30, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %73 = load i32, i32* %34, align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %74 = load i32, i32* %38, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %75 = load i32, i32* %42, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %76 = load i32, i32* %46, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %77 = load i32, i32* %50, align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %78 = load i32, i32* %54, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %79 = mul i32 %70, 19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 19:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %80 = mul i32 %71, 19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 19:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %81 = mul i32 %72, 19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 19:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %82 = mul i32 %73, 19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 19:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %83 = mul i32 %74, 19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 19:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %84 = mul i32 %75, 19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 19:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %85 = mul i32 %76, 19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 19:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %86 = mul i32 %77, 19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 19:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %87 = mul i32 %78, 19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 19:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %88 = shl i32 %24, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %89 = shl i32 %32, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %90 = shl i32 %40, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %91 = shl i32 %48, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %92 = shl i32 %56, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %93 = sext i32 %60 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0 (hasExternalUses)
%2:i64 = sext %1
infer %2

; *****
; For LLVM instruction:
;  %94 = sext i32 %69 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %95 = mul nsw i64 %94, %93
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = add 1:i32, %2 (hasExternalUses)
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
infer %5

; *****
; For LLVM instruction:
;  %96 = sext i32 %70 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %97 = mul nsw i64 %96, %93
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = add 1:i32, %2 (hasExternalUses)
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
infer %5

; *****
; For LLVM instruction:
;  %98 = sext i32 %71 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %99 = mul nsw i64 %98, %93
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = add 1:i32, %2 (hasExternalUses)
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
infer %5

; *****
; For LLVM instruction:
;  %100 = sext i32 %72 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %101 = mul nsw i64 %100, %93
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = add 1:i32, %2 (hasExternalUses)
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
infer %5

; *****
; For LLVM instruction:
;  %102 = sext i32 %73 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %103 = mul nsw i64 %102, %93
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = add 1:i32, %2 (hasExternalUses)
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
infer %5

; *****
; For LLVM instruction:
;  %104 = sext i32 %74 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %105 = mul nsw i64 %104, %93
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = add 1:i32, %2 (hasExternalUses)
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
infer %5

; *****
; For LLVM instruction:
;  %106 = sext i32 %75 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %107 = mul nsw i64 %106, %93
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = add 1:i32, %2 (hasExternalUses)
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
infer %5

; *****
; For LLVM instruction:
;  %108 = sext i32 %76 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %109 = mul nsw i64 %108, %93
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = add 1:i32, %2 (hasExternalUses)
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
infer %5

; *****
; For LLVM instruction:
;  %110 = sext i32 %77 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %111 = mul nsw i64 %110, %93
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = add 1:i32, %2 (hasExternalUses)
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
infer %5

; *****
; For LLVM instruction:
;  %112 = sext i32 %78 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %113 = mul nsw i64 %112, %93
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0
%2:i32 = var
%3:i32 = add 1:i32, %2 (hasExternalUses)
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
infer %5

; *****
; For LLVM instruction:
;  %114 = sext i32 %24 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %115 = mul nsw i64 %94, %114
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %116 = sext i32 %88 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl %0, 1:i32
%2:i64 = sext %1
infer %2

; *****
; For LLVM instruction:
;  %117 = mul nsw i64 %96, %116
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = shl %2, 1:i32
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
infer %5

; *****
; For LLVM instruction:
;  %118 = mul nsw i64 %98, %114
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %119 = mul nsw i64 %100, %116
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = shl %2, 1:i32
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
infer %5

; *****
; For LLVM instruction:
;  %120 = mul nsw i64 %102, %114
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %121 = mul nsw i64 %104, %116
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = shl %2, 1:i32
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
infer %5

; *****
; For LLVM instruction:
;  %122 = mul nsw i64 %106, %114
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %123 = mul nsw i64 %108, %116
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = shl %2, 1:i32
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
infer %5

; *****
; For LLVM instruction:
;  %124 = mul nsw i64 %110, %114
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %125 = sext i32 %87 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 19:i32, %0
%2:i64 = sext %1
infer %2

; *****
; For LLVM instruction:
;  %126 = mul nsw i64 %125, %116
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 19:i32, %0
%2:i64 = sext %1 (hasExternalUses)
%3:i32 = var
%4:i32 = shl %3, 1:i32
%5:i64 = sext %4 (hasExternalUses)
%6:i64 = mulnsw %2, %5
infer %6

; *****
; For LLVM instruction:
;  %127 = sext i32 %28 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %128 = mul nsw i64 %94, %127
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %129 = mul nsw i64 %96, %127
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %130 = mul nsw i64 %98, %127
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %131 = mul nsw i64 %100, %127
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %132 = mul nsw i64 %102, %127
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %133 = mul nsw i64 %104, %127
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %134 = mul nsw i64 %106, %127
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %135 = mul nsw i64 %108, %127
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %136 = sext i32 %86 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 19:i32, %0
%2:i64 = sext %1
infer %2

; *****
; For LLVM instruction:
;  %137 = mul nsw i64 %136, %127
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = mul 19:i32, %2
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
infer %5

; *****
; For LLVM instruction:
;  %138 = mul nsw i64 %125, %127
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = mul 19:i32, %2
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
infer %5

; *****
; For LLVM instruction:
;  %139 = sext i32 %32 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %140 = mul nsw i64 %94, %139
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %141 = sext i32 %89 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl %0, 1:i32
%2:i64 = sext %1
infer %2

; *****
; For LLVM instruction:
;  %142 = mul nsw i64 %96, %141
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = shl %2, 1:i32
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
infer %5

; *****
; For LLVM instruction:
;  %143 = mul nsw i64 %98, %139
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %144 = mul nsw i64 %100, %141
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = shl %2, 1:i32
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
infer %5

; *****
; For LLVM instruction:
;  %145 = mul nsw i64 %102, %139
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %146 = mul nsw i64 %104, %141
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = shl %2, 1:i32
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
infer %5

; *****
; For LLVM instruction:
;  %147 = mul nsw i64 %106, %139
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %148 = sext i32 %85 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 19:i32, %0
%2:i64 = sext %1
infer %2

; *****
; For LLVM instruction:
;  %149 = mul nsw i64 %148, %141
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 19:i32, %0
%2:i64 = sext %1 (hasExternalUses)
%3:i32 = var
%4:i32 = shl %3, 1:i32
%5:i64 = sext %4 (hasExternalUses)
%6:i64 = mulnsw %2, %5
infer %6

; *****
; For LLVM instruction:
;  %150 = mul nsw i64 %136, %139
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = mul 19:i32, %2
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
infer %5

; *****
; For LLVM instruction:
;  %151 = mul nsw i64 %125, %141
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 19:i32, %0
%2:i64 = sext %1 (hasExternalUses)
%3:i32 = var
%4:i32 = shl %3, 1:i32
%5:i64 = sext %4 (hasExternalUses)
%6:i64 = mulnsw %2, %5
infer %6

; *****
; For LLVM instruction:
;  %152 = sext i32 %36 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %153 = mul nsw i64 %94, %152
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %154 = mul nsw i64 %96, %152
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %155 = mul nsw i64 %98, %152
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %156 = mul nsw i64 %100, %152
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %157 = mul nsw i64 %102, %152
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %158 = mul nsw i64 %104, %152
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %159 = sext i32 %84 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 19:i32, %0
%2:i64 = sext %1
infer %2

; *****
; For LLVM instruction:
;  %160 = mul nsw i64 %159, %152
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = mul 19:i32, %2
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
infer %5

; *****
; For LLVM instruction:
;  %161 = mul nsw i64 %148, %152
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = mul 19:i32, %2
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
infer %5

; *****
; For LLVM instruction:
;  %162 = mul nsw i64 %136, %152
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = mul 19:i32, %2
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
infer %5

; *****
; For LLVM instruction:
;  %163 = mul nsw i64 %125, %152
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = mul 19:i32, %2
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
infer %5

; *****
; For LLVM instruction:
;  %164 = sext i32 %40 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %165 = mul nsw i64 %94, %164
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %166 = sext i32 %90 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl %0, 1:i32
%2:i64 = sext %1
infer %2

; *****
; For LLVM instruction:
;  %167 = mul nsw i64 %96, %166
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = shl %2, 1:i32
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
infer %5

; *****
; For LLVM instruction:
;  %168 = mul nsw i64 %98, %164
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %169 = mul nsw i64 %100, %166
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = shl %2, 1:i32
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
infer %5

; *****
; For LLVM instruction:
;  %170 = mul nsw i64 %102, %164
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %171 = sext i32 %83 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 19:i32, %0
%2:i64 = sext %1
infer %2

; *****
; For LLVM instruction:
;  %172 = mul nsw i64 %171, %166
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 19:i32, %0
%2:i64 = sext %1 (hasExternalUses)
%3:i32 = var
%4:i32 = shl %3, 1:i32
%5:i64 = sext %4 (hasExternalUses)
%6:i64 = mulnsw %2, %5
infer %6

; *****
; For LLVM instruction:
;  %173 = mul nsw i64 %159, %164
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = mul 19:i32, %2
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
infer %5

; *****
; For LLVM instruction:
;  %174 = mul nsw i64 %148, %166
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 19:i32, %0
%2:i64 = sext %1 (hasExternalUses)
%3:i32 = var
%4:i32 = shl %3, 1:i32
%5:i64 = sext %4 (hasExternalUses)
%6:i64 = mulnsw %2, %5
infer %6

; *****
; For LLVM instruction:
;  %175 = mul nsw i64 %136, %164
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = mul 19:i32, %2
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
infer %5

; *****
; For LLVM instruction:
;  %176 = mul nsw i64 %125, %166
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 19:i32, %0
%2:i64 = sext %1 (hasExternalUses)
%3:i32 = var
%4:i32 = shl %3, 1:i32
%5:i64 = sext %4 (hasExternalUses)
%6:i64 = mulnsw %2, %5
infer %6

; *****
; For LLVM instruction:
;  %177 = sext i32 %44 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %178 = mul nsw i64 %94, %177
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %179 = mul nsw i64 %96, %177
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %180 = mul nsw i64 %98, %177
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %181 = mul nsw i64 %100, %177
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %182 = sext i32 %82 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 19:i32, %0
%2:i64 = sext %1
infer %2

; *****
; For LLVM instruction:
;  %183 = mul nsw i64 %182, %177
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = mul 19:i32, %2
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
infer %5

; *****
; For LLVM instruction:
;  %184 = mul nsw i64 %171, %177
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = mul 19:i32, %2
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
infer %5

; *****
; For LLVM instruction:
;  %185 = mul nsw i64 %159, %177
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = mul 19:i32, %2
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
infer %5

; *****
; For LLVM instruction:
;  %186 = mul nsw i64 %148, %177
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = mul 19:i32, %2
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
infer %5

; *****
; For LLVM instruction:
;  %187 = mul nsw i64 %136, %177
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = mul 19:i32, %2
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
infer %5

; *****
; For LLVM instruction:
;  %188 = mul nsw i64 %125, %177
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = mul 19:i32, %2
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
infer %5

; *****
; For LLVM instruction:
;  %189 = sext i32 %48 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %190 = mul nsw i64 %94, %189
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %191 = sext i32 %91 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl %0, 1:i32
%2:i64 = sext %1
infer %2

; *****
; For LLVM instruction:
;  %192 = mul nsw i64 %96, %191
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = shl %2, 1:i32
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
infer %5

; *****
; For LLVM instruction:
;  %193 = mul nsw i64 %98, %189
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %194 = sext i32 %81 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 19:i32, %0
%2:i64 = sext %1
infer %2

; *****
; For LLVM instruction:
;  %195 = mul nsw i64 %194, %191
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 19:i32, %0
%2:i64 = sext %1 (hasExternalUses)
%3:i32 = var
%4:i32 = shl %3, 1:i32
%5:i64 = sext %4 (hasExternalUses)
%6:i64 = mulnsw %2, %5
infer %6

; *****
; For LLVM instruction:
;  %196 = mul nsw i64 %182, %189
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = mul 19:i32, %2
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
infer %5

; *****
; For LLVM instruction:
;  %197 = mul nsw i64 %171, %191
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 19:i32, %0
%2:i64 = sext %1 (hasExternalUses)
%3:i32 = var
%4:i32 = shl %3, 1:i32
%5:i64 = sext %4 (hasExternalUses)
%6:i64 = mulnsw %2, %5
infer %6

; *****
; For LLVM instruction:
;  %198 = mul nsw i64 %159, %189
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = mul 19:i32, %2
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
infer %5

; *****
; For LLVM instruction:
;  %199 = mul nsw i64 %148, %191
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 19:i32, %0
%2:i64 = sext %1 (hasExternalUses)
%3:i32 = var
%4:i32 = shl %3, 1:i32
%5:i64 = sext %4 (hasExternalUses)
%6:i64 = mulnsw %2, %5
infer %6

; *****
; For LLVM instruction:
;  %200 = mul nsw i64 %136, %189
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = mul 19:i32, %2
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
infer %5

; *****
; For LLVM instruction:
;  %201 = mul nsw i64 %125, %191
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 19:i32, %0
%2:i64 = sext %1 (hasExternalUses)
%3:i32 = var
%4:i32 = shl %3, 1:i32
%5:i64 = sext %4 (hasExternalUses)
%6:i64 = mulnsw %2, %5
infer %6

; *****
; For LLVM instruction:
;  %202 = sext i32 %52 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %203 = mul nsw i64 %94, %202
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %204 = mul nsw i64 %96, %202
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %205 = sext i32 %80 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 19:i32, %0
%2:i64 = sext %1
infer %2

; *****
; For LLVM instruction:
;  %206 = mul nsw i64 %205, %202
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = mul 19:i32, %2
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
infer %5

; *****
; For LLVM instruction:
;  %207 = mul nsw i64 %194, %202
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = mul 19:i32, %2
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
infer %5

; *****
; For LLVM instruction:
;  %208 = mul nsw i64 %182, %202
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = mul 19:i32, %2
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
infer %5

; *****
; For LLVM instruction:
;  %209 = mul nsw i64 %171, %202
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = mul 19:i32, %2
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
infer %5

; *****
; For LLVM instruction:
;  %210 = mul nsw i64 %159, %202
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = mul 19:i32, %2
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
infer %5

; *****
; For LLVM instruction:
;  %211 = mul nsw i64 %148, %202
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = mul 19:i32, %2
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
infer %5

; *****
; For LLVM instruction:
;  %212 = mul nsw i64 %136, %202
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = mul 19:i32, %2
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
infer %5

; *****
; For LLVM instruction:
;  %213 = mul nsw i64 %125, %202
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = mul 19:i32, %2
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
infer %5

; *****
; For LLVM instruction:
;  %214 = sext i32 %56 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %215 = mul nsw i64 %94, %214
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %216 = sext i32 %92 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl %0, 1:i32
%2:i64 = sext %1
infer %2

; *****
; For LLVM instruction:
;  %217 = sext i32 %79 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 19:i32, %0
%2:i64 = sext %1
infer %2

; *****
; For LLVM instruction:
;  %218 = mul nsw i64 %217, %216
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 19:i32, %0
%2:i64 = sext %1
%3:i32 = var
%4:i32 = shl %3, 1:i32
%5:i64 = sext %4 (hasExternalUses)
%6:i64 = mulnsw %2, %5
infer %6

; *****
; For LLVM instruction:
;  %219 = mul nsw i64 %205, %214
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = mul 19:i32, %2
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
infer %5

; *****
; For LLVM instruction:
;  %220 = mul nsw i64 %194, %216
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 19:i32, %0
%2:i64 = sext %1 (hasExternalUses)
%3:i32 = var
%4:i32 = shl %3, 1:i32
%5:i64 = sext %4 (hasExternalUses)
%6:i64 = mulnsw %2, %5
infer %6

; *****
; For LLVM instruction:
;  %221 = mul nsw i64 %182, %214
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = mul 19:i32, %2
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
infer %5

; *****
; For LLVM instruction:
;  %222 = mul nsw i64 %171, %216
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 19:i32, %0
%2:i64 = sext %1 (hasExternalUses)
%3:i32 = var
%4:i32 = shl %3, 1:i32
%5:i64 = sext %4 (hasExternalUses)
%6:i64 = mulnsw %2, %5
infer %6

; *****
; For LLVM instruction:
;  %223 = mul nsw i64 %159, %214
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = mul 19:i32, %2
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
infer %5

; *****
; For LLVM instruction:
;  %224 = mul nsw i64 %148, %216
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 19:i32, %0
%2:i64 = sext %1 (hasExternalUses)
%3:i32 = var
%4:i32 = shl %3, 1:i32
%5:i64 = sext %4 (hasExternalUses)
%6:i64 = mulnsw %2, %5
infer %6

; *****
; For LLVM instruction:
;  %225 = mul nsw i64 %136, %214
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = mul 19:i32, %2
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
infer %5

; *****
; For LLVM instruction:
;  %226 = mul nsw i64 %125, %216
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 19:i32, %0
%2:i64 = sext %1 (hasExternalUses)
%3:i32 = var
%4:i32 = shl %3, 1:i32
%5:i64 = sext %4 (hasExternalUses)
%6:i64 = mulnsw %2, %5
infer %6

; *****
; For LLVM instruction:
;  %227 = add i64 %218, %95
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = add 1:i32, %2 (hasExternalUses)
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
%6:i32 = var
%7:i32 = mul 19:i32, %6
%8:i64 = sext %7
%9:i32 = var
%10:i32 = shl %9, 1:i32
%11:i64 = sext %10 (hasExternalUses)
%12:i64 = mulnsw %8, %11
%13:i64 = add %5, %12
infer %13

; *****
; For LLVM instruction:
;  %228 = add i64 %227, %206
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = add 1:i32, %2 (hasExternalUses)
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
%6:i32 = var
%7:i32 = mul 19:i32, %6
%8:i64 = sext %7
%9:i32 = var
%10:i32 = shl %9, 1:i32
%11:i64 = sext %10 (hasExternalUses)
%12:i64 = mulnsw %8, %11
%13:i64 = add %5, %12
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i32 = var
%17:i32 = mul 19:i32, %16
%18:i64 = sext %17 (hasExternalUses)
%19:i64 = mulnsw %15, %18
%20:i64 = add %13, %19
infer %20

; *****
; For LLVM instruction:
;  %229 = add i64 %228, %195
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = add 1:i32, %2 (hasExternalUses)
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
%6:i32 = var
%7:i32 = mul 19:i32, %6
%8:i64 = sext %7
%9:i32 = var
%10:i32 = shl %9, 1:i32
%11:i64 = sext %10 (hasExternalUses)
%12:i64 = mulnsw %8, %11
%13:i64 = add %5, %12
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i32 = var
%17:i32 = mul 19:i32, %16
%18:i64 = sext %17 (hasExternalUses)
%19:i64 = mulnsw %15, %18
%20:i64 = add %13, %19
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i32 = var
%25:i32 = shl %24, 1:i32
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %23, %26
%28:i64 = add %20, %27
infer %28

; *****
; For LLVM instruction:
;  %230 = add i64 %229, %183
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = add 1:i32, %2 (hasExternalUses)
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
%6:i32 = var
%7:i32 = mul 19:i32, %6
%8:i64 = sext %7
%9:i32 = var
%10:i32 = shl %9, 1:i32
%11:i64 = sext %10 (hasExternalUses)
%12:i64 = mulnsw %8, %11
%13:i64 = add %5, %12
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i32 = var
%17:i32 = mul 19:i32, %16
%18:i64 = sext %17 (hasExternalUses)
%19:i64 = mulnsw %15, %18
%20:i64 = add %13, %19
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i32 = var
%25:i32 = shl %24, 1:i32
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %23, %26
%28:i64 = add %20, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = mul 19:i32, %31
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
infer %35

; *****
; For LLVM instruction:
;  %231 = add i64 %230, %172
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = add 1:i32, %2 (hasExternalUses)
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
%6:i32 = var
%7:i32 = mul 19:i32, %6
%8:i64 = sext %7
%9:i32 = var
%10:i32 = shl %9, 1:i32
%11:i64 = sext %10 (hasExternalUses)
%12:i64 = mulnsw %8, %11
%13:i64 = add %5, %12
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i32 = var
%17:i32 = mul 19:i32, %16
%18:i64 = sext %17 (hasExternalUses)
%19:i64 = mulnsw %15, %18
%20:i64 = add %13, %19
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i32 = var
%25:i32 = shl %24, 1:i32
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %23, %26
%28:i64 = add %20, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = mul 19:i32, %31
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
%36:i32 = var
%37:i32 = mul 19:i32, %36
%38:i64 = sext %37 (hasExternalUses)
%39:i32 = var
%40:i32 = shl %39, 1:i32
%41:i64 = sext %40 (hasExternalUses)
%42:i64 = mulnsw %38, %41
%43:i64 = add %35, %42
infer %43

; *****
; For LLVM instruction:
;  %232 = add i64 %231, %160
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = add 1:i32, %2 (hasExternalUses)
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
%6:i32 = var
%7:i32 = mul 19:i32, %6
%8:i64 = sext %7
%9:i32 = var
%10:i32 = shl %9, 1:i32
%11:i64 = sext %10 (hasExternalUses)
%12:i64 = mulnsw %8, %11
%13:i64 = add %5, %12
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i32 = var
%17:i32 = mul 19:i32, %16
%18:i64 = sext %17 (hasExternalUses)
%19:i64 = mulnsw %15, %18
%20:i64 = add %13, %19
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i32 = var
%25:i32 = shl %24, 1:i32
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %23, %26
%28:i64 = add %20, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = mul 19:i32, %31
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
%36:i32 = var
%37:i32 = mul 19:i32, %36
%38:i64 = sext %37 (hasExternalUses)
%39:i32 = var
%40:i32 = shl %39, 1:i32
%41:i64 = sext %40 (hasExternalUses)
%42:i64 = mulnsw %38, %41
%43:i64 = add %35, %42
%44:i32 = var
%45:i64 = sext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = mul 19:i32, %46
%48:i64 = sext %47 (hasExternalUses)
%49:i64 = mulnsw %45, %48
%50:i64 = add %43, %49
infer %50

; *****
; For LLVM instruction:
;  %233 = add i64 %232, %149
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = add 1:i32, %2 (hasExternalUses)
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
%6:i32 = var
%7:i32 = mul 19:i32, %6
%8:i64 = sext %7
%9:i32 = var
%10:i32 = shl %9, 1:i32
%11:i64 = sext %10 (hasExternalUses)
%12:i64 = mulnsw %8, %11
%13:i64 = add %5, %12
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i32 = var
%17:i32 = mul 19:i32, %16
%18:i64 = sext %17 (hasExternalUses)
%19:i64 = mulnsw %15, %18
%20:i64 = add %13, %19
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i32 = var
%25:i32 = shl %24, 1:i32
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %23, %26
%28:i64 = add %20, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = mul 19:i32, %31
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
%36:i32 = var
%37:i32 = mul 19:i32, %36
%38:i64 = sext %37 (hasExternalUses)
%39:i32 = var
%40:i32 = shl %39, 1:i32
%41:i64 = sext %40 (hasExternalUses)
%42:i64 = mulnsw %38, %41
%43:i64 = add %35, %42
%44:i32 = var
%45:i64 = sext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = mul 19:i32, %46
%48:i64 = sext %47 (hasExternalUses)
%49:i64 = mulnsw %45, %48
%50:i64 = add %43, %49
%51:i32 = var
%52:i32 = mul 19:i32, %51
%53:i64 = sext %52 (hasExternalUses)
%54:i32 = var
%55:i32 = shl %54, 1:i32
%56:i64 = sext %55 (hasExternalUses)
%57:i64 = mulnsw %53, %56
%58:i64 = add %50, %57
infer %58

; *****
; For LLVM instruction:
;  %234 = add i64 %233, %137
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = add 1:i32, %2 (hasExternalUses)
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
%6:i32 = var
%7:i32 = mul 19:i32, %6
%8:i64 = sext %7
%9:i32 = var
%10:i32 = shl %9, 1:i32
%11:i64 = sext %10 (hasExternalUses)
%12:i64 = mulnsw %8, %11
%13:i64 = add %5, %12
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i32 = var
%17:i32 = mul 19:i32, %16
%18:i64 = sext %17 (hasExternalUses)
%19:i64 = mulnsw %15, %18
%20:i64 = add %13, %19
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i32 = var
%25:i32 = shl %24, 1:i32
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %23, %26
%28:i64 = add %20, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = mul 19:i32, %31
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
%36:i32 = var
%37:i32 = mul 19:i32, %36
%38:i64 = sext %37 (hasExternalUses)
%39:i32 = var
%40:i32 = shl %39, 1:i32
%41:i64 = sext %40 (hasExternalUses)
%42:i64 = mulnsw %38, %41
%43:i64 = add %35, %42
%44:i32 = var
%45:i64 = sext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = mul 19:i32, %46
%48:i64 = sext %47 (hasExternalUses)
%49:i64 = mulnsw %45, %48
%50:i64 = add %43, %49
%51:i32 = var
%52:i32 = mul 19:i32, %51
%53:i64 = sext %52 (hasExternalUses)
%54:i32 = var
%55:i32 = shl %54, 1:i32
%56:i64 = sext %55 (hasExternalUses)
%57:i64 = mulnsw %53, %56
%58:i64 = add %50, %57
%59:i32 = var
%60:i64 = sext %59 (hasExternalUses)
%61:i32 = var
%62:i32 = mul 19:i32, %61
%63:i64 = sext %62 (hasExternalUses)
%64:i64 = mulnsw %60, %63
%65:i64 = add %58, %64
infer %65

; *****
; For LLVM instruction:
;  %235 = add i64 %234, %126
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = add 1:i32, %2 (hasExternalUses)
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
%6:i32 = var
%7:i32 = mul 19:i32, %6
%8:i64 = sext %7
%9:i32 = var
%10:i32 = shl %9, 1:i32
%11:i64 = sext %10 (hasExternalUses)
%12:i64 = mulnsw %8, %11
%13:i64 = add %5, %12
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i32 = var
%17:i32 = mul 19:i32, %16
%18:i64 = sext %17 (hasExternalUses)
%19:i64 = mulnsw %15, %18
%20:i64 = add %13, %19
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i32 = var
%25:i32 = shl %24, 1:i32
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %23, %26
%28:i64 = add %20, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = mul 19:i32, %31
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
%36:i32 = var
%37:i32 = mul 19:i32, %36
%38:i64 = sext %37 (hasExternalUses)
%39:i32 = var
%40:i32 = shl %39, 1:i32
%41:i64 = sext %40 (hasExternalUses)
%42:i64 = mulnsw %38, %41
%43:i64 = add %35, %42
%44:i32 = var
%45:i64 = sext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = mul 19:i32, %46
%48:i64 = sext %47 (hasExternalUses)
%49:i64 = mulnsw %45, %48
%50:i64 = add %43, %49
%51:i32 = var
%52:i32 = mul 19:i32, %51
%53:i64 = sext %52 (hasExternalUses)
%54:i32 = var
%55:i32 = shl %54, 1:i32
%56:i64 = sext %55 (hasExternalUses)
%57:i64 = mulnsw %53, %56
%58:i64 = add %50, %57
%59:i32 = var
%60:i64 = sext %59 (hasExternalUses)
%61:i32 = var
%62:i32 = mul 19:i32, %61
%63:i64 = sext %62 (hasExternalUses)
%64:i64 = mulnsw %60, %63
%65:i64 = add %58, %64
%66:i32 = var
%67:i32 = mul 19:i32, %66
%68:i64 = sext %67 (hasExternalUses)
%69:i32 = var
%70:i32 = shl %69, 1:i32
%71:i64 = sext %70 (hasExternalUses)
%72:i64 = mulnsw %68, %71
%73:i64 = add %65, %72
infer %73

; *****
; For LLVM instruction:
;  %236 = add i64 %97, %115
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = add 1:i32, %7 (hasExternalUses)
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
infer %11

; *****
; For LLVM instruction:
;  %237 = add i64 %142, %153
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
infer %11

; *****
; For LLVM instruction:
;  %238 = add i64 %237, %130
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
infer %17

; *****
; For LLVM instruction:
;  %239 = add i64 %238, %119
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
infer %24

; *****
; For LLVM instruction:
;  %240 = add i64 %239, %103
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i32 = add 1:i32, %27 (hasExternalUses)
%29:i64 = sext %28 (hasExternalUses)
%30:i64 = mulnsw %26, %29
%31:i64 = add %24, %30
infer %31

; *****
; For LLVM instruction:
;  %241 = add i64 %240, %222
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i32 = add 1:i32, %27 (hasExternalUses)
%29:i64 = sext %28 (hasExternalUses)
%30:i64 = mulnsw %26, %29
%31:i64 = add %24, %30
%32:i32 = var
%33:i32 = mul 19:i32, %32
%34:i64 = sext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = shl %35, 1:i32
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %31, %38
infer %39

; *****
; For LLVM instruction:
;  %242 = add i64 %241, %210
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i32 = add 1:i32, %27 (hasExternalUses)
%29:i64 = sext %28 (hasExternalUses)
%30:i64 = mulnsw %26, %29
%31:i64 = add %24, %30
%32:i32 = var
%33:i32 = mul 19:i32, %32
%34:i64 = sext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = shl %35, 1:i32
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %31, %38
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i32 = var
%43:i32 = mul 19:i32, %42
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %41, %44
%46:i64 = add %39, %45
infer %46

; *****
; For LLVM instruction:
;  %243 = add i64 %242, %199
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i32 = add 1:i32, %27 (hasExternalUses)
%29:i64 = sext %28 (hasExternalUses)
%30:i64 = mulnsw %26, %29
%31:i64 = add %24, %30
%32:i32 = var
%33:i32 = mul 19:i32, %32
%34:i64 = sext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = shl %35, 1:i32
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %31, %38
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i32 = var
%43:i32 = mul 19:i32, %42
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %41, %44
%46:i64 = add %39, %45
%47:i32 = var
%48:i32 = mul 19:i32, %47
%49:i64 = sext %48 (hasExternalUses)
%50:i32 = var
%51:i32 = shl %50, 1:i32
%52:i64 = sext %51 (hasExternalUses)
%53:i64 = mulnsw %49, %52
%54:i64 = add %46, %53
infer %54

; *****
; For LLVM instruction:
;  %244 = add i64 %243, %187
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i32 = add 1:i32, %27 (hasExternalUses)
%29:i64 = sext %28 (hasExternalUses)
%30:i64 = mulnsw %26, %29
%31:i64 = add %24, %30
%32:i32 = var
%33:i32 = mul 19:i32, %32
%34:i64 = sext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = shl %35, 1:i32
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %31, %38
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i32 = var
%43:i32 = mul 19:i32, %42
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %41, %44
%46:i64 = add %39, %45
%47:i32 = var
%48:i32 = mul 19:i32, %47
%49:i64 = sext %48 (hasExternalUses)
%50:i32 = var
%51:i32 = shl %50, 1:i32
%52:i64 = sext %51 (hasExternalUses)
%53:i64 = mulnsw %49, %52
%54:i64 = add %46, %53
%55:i32 = var
%56:i64 = sext %55 (hasExternalUses)
%57:i32 = var
%58:i32 = mul 19:i32, %57
%59:i64 = sext %58 (hasExternalUses)
%60:i64 = mulnsw %56, %59
%61:i64 = add %54, %60
infer %61

; *****
; For LLVM instruction:
;  %245 = add i64 %244, %176
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i32 = add 1:i32, %27 (hasExternalUses)
%29:i64 = sext %28 (hasExternalUses)
%30:i64 = mulnsw %26, %29
%31:i64 = add %24, %30
%32:i32 = var
%33:i32 = mul 19:i32, %32
%34:i64 = sext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = shl %35, 1:i32
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %31, %38
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i32 = var
%43:i32 = mul 19:i32, %42
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %41, %44
%46:i64 = add %39, %45
%47:i32 = var
%48:i32 = mul 19:i32, %47
%49:i64 = sext %48 (hasExternalUses)
%50:i32 = var
%51:i32 = shl %50, 1:i32
%52:i64 = sext %51 (hasExternalUses)
%53:i64 = mulnsw %49, %52
%54:i64 = add %46, %53
%55:i32 = var
%56:i64 = sext %55 (hasExternalUses)
%57:i32 = var
%58:i32 = mul 19:i32, %57
%59:i64 = sext %58 (hasExternalUses)
%60:i64 = mulnsw %56, %59
%61:i64 = add %54, %60
%62:i32 = var
%63:i32 = mul 19:i32, %62
%64:i64 = sext %63 (hasExternalUses)
%65:i32 = var
%66:i32 = shl %65, 1:i32
%67:i64 = sext %66 (hasExternalUses)
%68:i64 = mulnsw %64, %67
%69:i64 = add %61, %68
infer %69

; *****
; For LLVM instruction:
;  %246 = add i64 %235, 33554432
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = add 1:i32, %2 (hasExternalUses)
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
%6:i32 = var
%7:i32 = mul 19:i32, %6
%8:i64 = sext %7
%9:i32 = var
%10:i32 = shl %9, 1:i32
%11:i64 = sext %10 (hasExternalUses)
%12:i64 = mulnsw %8, %11
%13:i64 = add %5, %12
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i32 = var
%17:i32 = mul 19:i32, %16
%18:i64 = sext %17 (hasExternalUses)
%19:i64 = mulnsw %15, %18
%20:i64 = add %13, %19
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i32 = var
%25:i32 = shl %24, 1:i32
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %23, %26
%28:i64 = add %20, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = mul 19:i32, %31
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
%36:i32 = var
%37:i32 = mul 19:i32, %36
%38:i64 = sext %37 (hasExternalUses)
%39:i32 = var
%40:i32 = shl %39, 1:i32
%41:i64 = sext %40 (hasExternalUses)
%42:i64 = mulnsw %38, %41
%43:i64 = add %35, %42
%44:i32 = var
%45:i64 = sext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = mul 19:i32, %46
%48:i64 = sext %47 (hasExternalUses)
%49:i64 = mulnsw %45, %48
%50:i64 = add %43, %49
%51:i32 = var
%52:i32 = mul 19:i32, %51
%53:i64 = sext %52 (hasExternalUses)
%54:i32 = var
%55:i32 = shl %54, 1:i32
%56:i64 = sext %55 (hasExternalUses)
%57:i64 = mulnsw %53, %56
%58:i64 = add %50, %57
%59:i32 = var
%60:i64 = sext %59 (hasExternalUses)
%61:i32 = var
%62:i32 = mul 19:i32, %61
%63:i64 = sext %62 (hasExternalUses)
%64:i64 = mulnsw %60, %63
%65:i64 = add %58, %64
%66:i32 = var
%67:i32 = mul 19:i32, %66
%68:i64 = sext %67 (hasExternalUses)
%69:i32 = var
%70:i32 = shl %69, 1:i32
%71:i64 = sext %70 (hasExternalUses)
%72:i64 = mulnsw %68, %71
%73:i64 = add %65, %72 (hasExternalUses)
%74:i64 = add 33554432:i64, %73
infer %74 (demandedBits=1111111111111111111111111111111111111100000000000000000000000000)

; *****
; For LLVM instruction:
;  %247 = ashr i64 %246, 26
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = add 1:i32, %2 (hasExternalUses)
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
%6:i32 = var
%7:i32 = mul 19:i32, %6
%8:i64 = sext %7
%9:i32 = var
%10:i32 = shl %9, 1:i32
%11:i64 = sext %10 (hasExternalUses)
%12:i64 = mulnsw %8, %11
%13:i64 = add %5, %12
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i32 = var
%17:i32 = mul 19:i32, %16
%18:i64 = sext %17 (hasExternalUses)
%19:i64 = mulnsw %15, %18
%20:i64 = add %13, %19
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i32 = var
%25:i32 = shl %24, 1:i32
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %23, %26
%28:i64 = add %20, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = mul 19:i32, %31
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
%36:i32 = var
%37:i32 = mul 19:i32, %36
%38:i64 = sext %37 (hasExternalUses)
%39:i32 = var
%40:i32 = shl %39, 1:i32
%41:i64 = sext %40 (hasExternalUses)
%42:i64 = mulnsw %38, %41
%43:i64 = add %35, %42
%44:i32 = var
%45:i64 = sext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = mul 19:i32, %46
%48:i64 = sext %47 (hasExternalUses)
%49:i64 = mulnsw %45, %48
%50:i64 = add %43, %49
%51:i32 = var
%52:i32 = mul 19:i32, %51
%53:i64 = sext %52 (hasExternalUses)
%54:i32 = var
%55:i32 = shl %54, 1:i32
%56:i64 = sext %55 (hasExternalUses)
%57:i64 = mulnsw %53, %56
%58:i64 = add %50, %57
%59:i32 = var
%60:i64 = sext %59 (hasExternalUses)
%61:i32 = var
%62:i32 = mul 19:i32, %61
%63:i64 = sext %62 (hasExternalUses)
%64:i64 = mulnsw %60, %63
%65:i64 = add %58, %64
%66:i32 = var
%67:i32 = mul 19:i32, %66
%68:i64 = sext %67 (hasExternalUses)
%69:i32 = var
%70:i32 = shl %69, 1:i32
%71:i64 = sext %70 (hasExternalUses)
%72:i64 = mulnsw %68, %71
%73:i64 = add %65, %72 (hasExternalUses)
%74:i64 = add 33554432:i64, %73 (hasExternalUses)
%75:i64 = ashr %74, 26:i64
infer %75

; *****
; For LLVM instruction:
;  %248 = add i64 %236, %219
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = add 1:i32, %7 (hasExternalUses)
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = mul 19:i32, %14
%16:i64 = sext %15 (hasExternalUses)
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
infer %18

; *****
; For LLVM instruction:
;  %249 = add i64 %248, %207
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = add 1:i32, %7 (hasExternalUses)
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = mul 19:i32, %14
%16:i64 = sext %15 (hasExternalUses)
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i64 = mulnsw %20, %23
%25:i64 = add %18, %24
infer %25

; *****
; For LLVM instruction:
;  %250 = add i64 %249, %196
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = add 1:i32, %7 (hasExternalUses)
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = mul 19:i32, %14
%16:i64 = sext %15 (hasExternalUses)
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i64 = mulnsw %20, %23
%25:i64 = add %18, %24
%26:i32 = var
%27:i64 = sext %26 (hasExternalUses)
%28:i32 = var
%29:i32 = mul 19:i32, %28
%30:i64 = sext %29 (hasExternalUses)
%31:i64 = mulnsw %27, %30
%32:i64 = add %25, %31
infer %32

; *****
; For LLVM instruction:
;  %251 = add i64 %250, %184
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = add 1:i32, %7 (hasExternalUses)
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = mul 19:i32, %14
%16:i64 = sext %15 (hasExternalUses)
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i64 = mulnsw %20, %23
%25:i64 = add %18, %24
%26:i32 = var
%27:i64 = sext %26 (hasExternalUses)
%28:i32 = var
%29:i32 = mul 19:i32, %28
%30:i64 = sext %29 (hasExternalUses)
%31:i64 = mulnsw %27, %30
%32:i64 = add %25, %31
%33:i32 = var
%34:i64 = sext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = mul 19:i32, %35
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %32, %38
infer %39

; *****
; For LLVM instruction:
;  %252 = add i64 %251, %173
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = add 1:i32, %7 (hasExternalUses)
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = mul 19:i32, %14
%16:i64 = sext %15 (hasExternalUses)
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i64 = mulnsw %20, %23
%25:i64 = add %18, %24
%26:i32 = var
%27:i64 = sext %26 (hasExternalUses)
%28:i32 = var
%29:i32 = mul 19:i32, %28
%30:i64 = sext %29 (hasExternalUses)
%31:i64 = mulnsw %27, %30
%32:i64 = add %25, %31
%33:i32 = var
%34:i64 = sext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = mul 19:i32, %35
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %32, %38
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i32 = var
%43:i32 = mul 19:i32, %42
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %41, %44
%46:i64 = add %39, %45
infer %46

; *****
; For LLVM instruction:
;  %253 = add i64 %252, %161
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = add 1:i32, %7 (hasExternalUses)
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = mul 19:i32, %14
%16:i64 = sext %15 (hasExternalUses)
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i64 = mulnsw %20, %23
%25:i64 = add %18, %24
%26:i32 = var
%27:i64 = sext %26 (hasExternalUses)
%28:i32 = var
%29:i32 = mul 19:i32, %28
%30:i64 = sext %29 (hasExternalUses)
%31:i64 = mulnsw %27, %30
%32:i64 = add %25, %31
%33:i32 = var
%34:i64 = sext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = mul 19:i32, %35
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %32, %38
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i32 = var
%43:i32 = mul 19:i32, %42
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %41, %44
%46:i64 = add %39, %45
%47:i32 = var
%48:i64 = sext %47 (hasExternalUses)
%49:i32 = var
%50:i32 = mul 19:i32, %49
%51:i64 = sext %50 (hasExternalUses)
%52:i64 = mulnsw %48, %51
%53:i64 = add %46, %52
infer %53

; *****
; For LLVM instruction:
;  %254 = add i64 %253, %150
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = add 1:i32, %7 (hasExternalUses)
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = mul 19:i32, %14
%16:i64 = sext %15 (hasExternalUses)
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i64 = mulnsw %20, %23
%25:i64 = add %18, %24
%26:i32 = var
%27:i64 = sext %26 (hasExternalUses)
%28:i32 = var
%29:i32 = mul 19:i32, %28
%30:i64 = sext %29 (hasExternalUses)
%31:i64 = mulnsw %27, %30
%32:i64 = add %25, %31
%33:i32 = var
%34:i64 = sext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = mul 19:i32, %35
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %32, %38
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i32 = var
%43:i32 = mul 19:i32, %42
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %41, %44
%46:i64 = add %39, %45
%47:i32 = var
%48:i64 = sext %47 (hasExternalUses)
%49:i32 = var
%50:i32 = mul 19:i32, %49
%51:i64 = sext %50 (hasExternalUses)
%52:i64 = mulnsw %48, %51
%53:i64 = add %46, %52
%54:i32 = var
%55:i64 = sext %54 (hasExternalUses)
%56:i32 = var
%57:i32 = mul 19:i32, %56
%58:i64 = sext %57 (hasExternalUses)
%59:i64 = mulnsw %55, %58
%60:i64 = add %53, %59
infer %60

; *****
; For LLVM instruction:
;  %255 = add i64 %254, %138
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = add 1:i32, %7 (hasExternalUses)
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = mul 19:i32, %14
%16:i64 = sext %15 (hasExternalUses)
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i64 = mulnsw %20, %23
%25:i64 = add %18, %24
%26:i32 = var
%27:i64 = sext %26 (hasExternalUses)
%28:i32 = var
%29:i32 = mul 19:i32, %28
%30:i64 = sext %29 (hasExternalUses)
%31:i64 = mulnsw %27, %30
%32:i64 = add %25, %31
%33:i32 = var
%34:i64 = sext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = mul 19:i32, %35
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %32, %38
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i32 = var
%43:i32 = mul 19:i32, %42
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %41, %44
%46:i64 = add %39, %45
%47:i32 = var
%48:i64 = sext %47 (hasExternalUses)
%49:i32 = var
%50:i32 = mul 19:i32, %49
%51:i64 = sext %50 (hasExternalUses)
%52:i64 = mulnsw %48, %51
%53:i64 = add %46, %52
%54:i32 = var
%55:i64 = sext %54 (hasExternalUses)
%56:i32 = var
%57:i32 = mul 19:i32, %56
%58:i64 = sext %57 (hasExternalUses)
%59:i64 = mulnsw %55, %58
%60:i64 = add %53, %59
%61:i32 = var
%62:i64 = sext %61 (hasExternalUses)
%63:i32 = var
%64:i32 = mul 19:i32, %63
%65:i64 = sext %64 (hasExternalUses)
%66:i64 = mulnsw %62, %65
%67:i64 = add %60, %66
infer %67

; *****
; For LLVM instruction:
;  %256 = add i64 %255, %247
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = add 1:i32, %7 (hasExternalUses)
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = mul 19:i32, %14
%16:i64 = sext %15
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i64 = mulnsw %20, %23
%25:i64 = add %18, %24
%26:i32 = var
%27:i64 = sext %26 (hasExternalUses)
%28:i32 = var
%29:i32 = mul 19:i32, %28
%30:i64 = sext %29 (hasExternalUses)
%31:i64 = mulnsw %27, %30
%32:i64 = add %25, %31
%33:i32 = var
%34:i64 = sext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = mul 19:i32, %35
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %32, %38
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i32 = var
%43:i32 = mul 19:i32, %42
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %41, %44
%46:i64 = add %39, %45
%47:i32 = var
%48:i64 = sext %47 (hasExternalUses)
%49:i32 = var
%50:i32 = mul 19:i32, %49
%51:i64 = sext %50 (hasExternalUses)
%52:i64 = mulnsw %48, %51
%53:i64 = add %46, %52
%54:i32 = var
%55:i64 = sext %54 (hasExternalUses)
%56:i32 = var
%57:i32 = mul 19:i32, %56
%58:i64 = sext %57 (hasExternalUses)
%59:i64 = mulnsw %55, %58
%60:i64 = add %53, %59
%61:i32 = var
%62:i64 = sext %61 (hasExternalUses)
%63:i32 = var
%64:i32 = mul 19:i32, %63
%65:i64 = sext %64 (hasExternalUses)
%66:i64 = mulnsw %62, %65
%67:i64 = add %60, %66
%68:i64 = mulnsw %3, %9
%69:i32 = mul 19:i32, %5
%70:i64 = sext %69
%71:i32 = shl %12, 1:i32
%72:i64 = sext %71 (hasExternalUses)
%73:i64 = mulnsw %70, %72
%74:i64 = add %68, %73
%75:i64 = mulnsw %20, %16
%76:i64 = add %74, %75
%77:i32 = shl %26, 1:i32
%78:i64 = sext %77 (hasExternalUses)
%79:i64 = mulnsw %23, %78
%80:i64 = add %76, %79
%81:i64 = mulnsw %34, %30
%82:i64 = add %80, %81
%83:i32 = shl %40, 1:i32
%84:i64 = sext %83 (hasExternalUses)
%85:i64 = mulnsw %37, %84
%86:i64 = add %82, %85
%87:i64 = mulnsw %48, %44
%88:i64 = add %86, %87
%89:i32 = shl %54, 1:i32
%90:i64 = sext %89 (hasExternalUses)
%91:i64 = mulnsw %51, %90
%92:i64 = add %88, %91
%93:i64 = mulnsw %62, %58
%94:i64 = add %92, %93
%95:i32 = shl %0, 1:i32
%96:i64 = sext %95 (hasExternalUses)
%97:i64 = mulnsw %65, %96
%98:i64 = add %94, %97 (hasExternalUses)
%99:i64 = add 33554432:i64, %98 (hasExternalUses)
%100:i64 = ashr %99, 26:i64
%101:i64 = add %67, %100
infer %101

; *****
; For LLVM instruction:
;  %257 = and i64 %246, -67108864
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = add 1:i32, %2 (hasExternalUses)
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
%6:i32 = var
%7:i32 = mul 19:i32, %6
%8:i64 = sext %7
%9:i32 = var
%10:i32 = shl %9, 1:i32
%11:i64 = sext %10 (hasExternalUses)
%12:i64 = mulnsw %8, %11
%13:i64 = add %5, %12
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i32 = var
%17:i32 = mul 19:i32, %16
%18:i64 = sext %17 (hasExternalUses)
%19:i64 = mulnsw %15, %18
%20:i64 = add %13, %19
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i32 = var
%25:i32 = shl %24, 1:i32
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %23, %26
%28:i64 = add %20, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = mul 19:i32, %31
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
%36:i32 = var
%37:i32 = mul 19:i32, %36
%38:i64 = sext %37 (hasExternalUses)
%39:i32 = var
%40:i32 = shl %39, 1:i32
%41:i64 = sext %40 (hasExternalUses)
%42:i64 = mulnsw %38, %41
%43:i64 = add %35, %42
%44:i32 = var
%45:i64 = sext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = mul 19:i32, %46
%48:i64 = sext %47 (hasExternalUses)
%49:i64 = mulnsw %45, %48
%50:i64 = add %43, %49
%51:i32 = var
%52:i32 = mul 19:i32, %51
%53:i64 = sext %52 (hasExternalUses)
%54:i32 = var
%55:i32 = shl %54, 1:i32
%56:i64 = sext %55 (hasExternalUses)
%57:i64 = mulnsw %53, %56
%58:i64 = add %50, %57
%59:i32 = var
%60:i64 = sext %59 (hasExternalUses)
%61:i32 = var
%62:i32 = mul 19:i32, %61
%63:i64 = sext %62 (hasExternalUses)
%64:i64 = mulnsw %60, %63
%65:i64 = add %58, %64
%66:i32 = var
%67:i32 = mul 19:i32, %66
%68:i64 = sext %67 (hasExternalUses)
%69:i32 = var
%70:i32 = shl %69, 1:i32
%71:i64 = sext %70 (hasExternalUses)
%72:i64 = mulnsw %68, %71
%73:i64 = add %65, %72 (hasExternalUses)
%74:i64 = add 33554432:i64, %73 (hasExternalUses)
%75:i64 = and 18446744073642442752:i64, %74
infer %75 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %258 = sub i64 %235, %257
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = add 1:i32, %2 (hasExternalUses)
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
%6:i32 = var
%7:i32 = mul 19:i32, %6
%8:i64 = sext %7
%9:i32 = var
%10:i32 = shl %9, 1:i32
%11:i64 = sext %10 (hasExternalUses)
%12:i64 = mulnsw %8, %11
%13:i64 = add %5, %12
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i32 = var
%17:i32 = mul 19:i32, %16
%18:i64 = sext %17 (hasExternalUses)
%19:i64 = mulnsw %15, %18
%20:i64 = add %13, %19
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i32 = var
%25:i32 = shl %24, 1:i32
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %23, %26
%28:i64 = add %20, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = mul 19:i32, %31
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
%36:i32 = var
%37:i32 = mul 19:i32, %36
%38:i64 = sext %37 (hasExternalUses)
%39:i32 = var
%40:i32 = shl %39, 1:i32
%41:i64 = sext %40 (hasExternalUses)
%42:i64 = mulnsw %38, %41
%43:i64 = add %35, %42
%44:i32 = var
%45:i64 = sext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = mul 19:i32, %46
%48:i64 = sext %47 (hasExternalUses)
%49:i64 = mulnsw %45, %48
%50:i64 = add %43, %49
%51:i32 = var
%52:i32 = mul 19:i32, %51
%53:i64 = sext %52 (hasExternalUses)
%54:i32 = var
%55:i32 = shl %54, 1:i32
%56:i64 = sext %55 (hasExternalUses)
%57:i64 = mulnsw %53, %56
%58:i64 = add %50, %57
%59:i32 = var
%60:i64 = sext %59 (hasExternalUses)
%61:i32 = var
%62:i32 = mul 19:i32, %61
%63:i64 = sext %62 (hasExternalUses)
%64:i64 = mulnsw %60, %63
%65:i64 = add %58, %64
%66:i32 = var
%67:i32 = mul 19:i32, %66
%68:i64 = sext %67 (hasExternalUses)
%69:i32 = var
%70:i32 = shl %69, 1:i32
%71:i64 = sext %70 (hasExternalUses)
%72:i64 = mulnsw %68, %71
%73:i64 = add %65, %72
%74:i64 = add 33554432:i64, %73 (hasExternalUses)
%75:i64 = and 18446744073642442752:i64, %74
%76:i64 = sub %73, %75
infer %76 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %259 = add i64 %245, 33554432
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i32 = add 1:i32, %27 (hasExternalUses)
%29:i64 = sext %28 (hasExternalUses)
%30:i64 = mulnsw %26, %29
%31:i64 = add %24, %30
%32:i32 = var
%33:i32 = mul 19:i32, %32
%34:i64 = sext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = shl %35, 1:i32
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %31, %38
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i32 = var
%43:i32 = mul 19:i32, %42
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %41, %44
%46:i64 = add %39, %45
%47:i32 = var
%48:i32 = mul 19:i32, %47
%49:i64 = sext %48 (hasExternalUses)
%50:i32 = var
%51:i32 = shl %50, 1:i32
%52:i64 = sext %51 (hasExternalUses)
%53:i64 = mulnsw %49, %52
%54:i64 = add %46, %53
%55:i32 = var
%56:i64 = sext %55 (hasExternalUses)
%57:i32 = var
%58:i32 = mul 19:i32, %57
%59:i64 = sext %58 (hasExternalUses)
%60:i64 = mulnsw %56, %59
%61:i64 = add %54, %60
%62:i32 = var
%63:i32 = mul 19:i32, %62
%64:i64 = sext %63 (hasExternalUses)
%65:i32 = var
%66:i32 = shl %65, 1:i32
%67:i64 = sext %66 (hasExternalUses)
%68:i64 = mulnsw %64, %67
%69:i64 = add %61, %68 (hasExternalUses)
%70:i64 = add 33554432:i64, %69
infer %70 (demandedBits=1111111111111111111111111111111111111100000000000000000000000000)

; *****
; For LLVM instruction:
;  %260 = ashr i64 %259, 26
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i32 = add 1:i32, %27 (hasExternalUses)
%29:i64 = sext %28 (hasExternalUses)
%30:i64 = mulnsw %26, %29
%31:i64 = add %24, %30
%32:i32 = var
%33:i32 = mul 19:i32, %32
%34:i64 = sext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = shl %35, 1:i32
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %31, %38
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i32 = var
%43:i32 = mul 19:i32, %42
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %41, %44
%46:i64 = add %39, %45
%47:i32 = var
%48:i32 = mul 19:i32, %47
%49:i64 = sext %48 (hasExternalUses)
%50:i32 = var
%51:i32 = shl %50, 1:i32
%52:i64 = sext %51 (hasExternalUses)
%53:i64 = mulnsw %49, %52
%54:i64 = add %46, %53
%55:i32 = var
%56:i64 = sext %55 (hasExternalUses)
%57:i32 = var
%58:i32 = mul 19:i32, %57
%59:i64 = sext %58 (hasExternalUses)
%60:i64 = mulnsw %56, %59
%61:i64 = add %54, %60
%62:i32 = var
%63:i32 = mul 19:i32, %62
%64:i64 = sext %63 (hasExternalUses)
%65:i32 = var
%66:i32 = shl %65, 1:i32
%67:i64 = sext %66 (hasExternalUses)
%68:i64 = mulnsw %64, %67
%69:i64 = add %61, %68 (hasExternalUses)
%70:i64 = add 33554432:i64, %69 (hasExternalUses)
%71:i64 = ashr %70, 26:i64
infer %71

; *****
; For LLVM instruction:
;  %261 = add i64 %154, %165
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
infer %10

; *****
; For LLVM instruction:
;  %262 = add i64 %261, %143
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
infer %16

; *****
; For LLVM instruction:
;  %263 = add i64 %262, %131
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
infer %22

; *****
; For LLVM instruction:
;  %264 = add i64 %263, %120
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
infer %28

; *****
; For LLVM instruction:
;  %265 = add i64 %264, %105
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = add 1:i32, %31 (hasExternalUses)
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
infer %35

; *****
; For LLVM instruction:
;  %266 = add i64 %265, %223
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = add 1:i32, %31 (hasExternalUses)
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
%36:i32 = var
%37:i64 = sext %36 (hasExternalUses)
%38:i32 = var
%39:i32 = mul 19:i32, %38
%40:i64 = sext %39 (hasExternalUses)
%41:i64 = mulnsw %37, %40
%42:i64 = add %35, %41
infer %42

; *****
; For LLVM instruction:
;  %267 = add i64 %266, %211
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = add 1:i32, %31 (hasExternalUses)
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
%36:i32 = var
%37:i64 = sext %36 (hasExternalUses)
%38:i32 = var
%39:i32 = mul 19:i32, %38
%40:i64 = sext %39 (hasExternalUses)
%41:i64 = mulnsw %37, %40
%42:i64 = add %35, %41
%43:i32 = var
%44:i64 = sext %43 (hasExternalUses)
%45:i32 = var
%46:i32 = mul 19:i32, %45
%47:i64 = sext %46 (hasExternalUses)
%48:i64 = mulnsw %44, %47
%49:i64 = add %42, %48
infer %49

; *****
; For LLVM instruction:
;  %268 = add i64 %267, %200
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = add 1:i32, %31 (hasExternalUses)
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
%36:i32 = var
%37:i64 = sext %36 (hasExternalUses)
%38:i32 = var
%39:i32 = mul 19:i32, %38
%40:i64 = sext %39 (hasExternalUses)
%41:i64 = mulnsw %37, %40
%42:i64 = add %35, %41
%43:i32 = var
%44:i64 = sext %43 (hasExternalUses)
%45:i32 = var
%46:i32 = mul 19:i32, %45
%47:i64 = sext %46 (hasExternalUses)
%48:i64 = mulnsw %44, %47
%49:i64 = add %42, %48
%50:i32 = var
%51:i64 = sext %50 (hasExternalUses)
%52:i32 = var
%53:i32 = mul 19:i32, %52
%54:i64 = sext %53 (hasExternalUses)
%55:i64 = mulnsw %51, %54
%56:i64 = add %49, %55
infer %56

; *****
; For LLVM instruction:
;  %269 = add i64 %268, %188
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = add 1:i32, %31 (hasExternalUses)
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
%36:i32 = var
%37:i64 = sext %36 (hasExternalUses)
%38:i32 = var
%39:i32 = mul 19:i32, %38
%40:i64 = sext %39 (hasExternalUses)
%41:i64 = mulnsw %37, %40
%42:i64 = add %35, %41
%43:i32 = var
%44:i64 = sext %43 (hasExternalUses)
%45:i32 = var
%46:i32 = mul 19:i32, %45
%47:i64 = sext %46 (hasExternalUses)
%48:i64 = mulnsw %44, %47
%49:i64 = add %42, %48
%50:i32 = var
%51:i64 = sext %50 (hasExternalUses)
%52:i32 = var
%53:i32 = mul 19:i32, %52
%54:i64 = sext %53 (hasExternalUses)
%55:i64 = mulnsw %51, %54
%56:i64 = add %49, %55
%57:i32 = var
%58:i64 = sext %57 (hasExternalUses)
%59:i32 = var
%60:i32 = mul 19:i32, %59
%61:i64 = sext %60 (hasExternalUses)
%62:i64 = mulnsw %58, %61
%63:i64 = add %56, %62
infer %63

; *****
; For LLVM instruction:
;  %270 = add i64 %269, %260
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = add 1:i32, %31 (hasExternalUses)
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
%36:i32 = var
%37:i64 = sext %36 (hasExternalUses)
%38:i32 = var
%39:i32 = mul 19:i32, %38
%40:i64 = sext %39 (hasExternalUses)
%41:i64 = mulnsw %37, %40
%42:i64 = add %35, %41
%43:i32 = var
%44:i64 = sext %43 (hasExternalUses)
%45:i32 = var
%46:i32 = mul 19:i32, %45
%47:i64 = sext %46 (hasExternalUses)
%48:i64 = mulnsw %44, %47
%49:i64 = add %42, %48
%50:i32 = var
%51:i64 = sext %50 (hasExternalUses)
%52:i32 = var
%53:i32 = mul 19:i32, %52
%54:i64 = sext %53 (hasExternalUses)
%55:i64 = mulnsw %51, %54
%56:i64 = add %49, %55
%57:i32 = var
%58:i64 = sext %57 (hasExternalUses)
%59:i32 = var
%60:i32 = mul 19:i32, %59
%61:i64 = sext %60 (hasExternalUses)
%62:i64 = mulnsw %58, %61
%63:i64 = add %56, %62
%64:i64 = mulnsw %1, %8
%65:i32 = shl %11, 1:i32
%66:i64 = sext %65 (hasExternalUses)
%67:i64 = mulnsw %3, %66
%68:i64 = add %64, %67
%69:i64 = mulnsw %18, %14
%70:i64 = add %68, %69
%71:i32 = shl %23, 1:i32
%72:i64 = sext %71 (hasExternalUses)
%73:i64 = mulnsw %20, %72
%74:i64 = add %70, %73
%75:i64 = mulnsw %26, %33
%76:i64 = add %74, %75
%77:i32 = mul 19:i32, %29
%78:i64 = sext %77 (hasExternalUses)
%79:i32 = shl %36, 1:i32
%80:i64 = sext %79 (hasExternalUses)
%81:i64 = mulnsw %78, %80
%82:i64 = add %76, %81
%83:i64 = mulnsw %44, %40
%84:i64 = add %82, %83
%85:i32 = shl %50, 1:i32
%86:i64 = sext %85 (hasExternalUses)
%87:i64 = mulnsw %47, %86
%88:i64 = add %84, %87
%89:i64 = mulnsw %58, %54
%90:i64 = add %88, %89
%91:i32 = shl %5, 1:i32
%92:i64 = sext %91 (hasExternalUses)
%93:i64 = mulnsw %61, %92
%94:i64 = add %90, %93 (hasExternalUses)
%95:i64 = add 33554432:i64, %94 (hasExternalUses)
%96:i64 = ashr %95, 26:i64
%97:i64 = add %63, %96
infer %97

; *****
; For LLVM instruction:
;  %271 = and i64 %259, -67108864
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i32 = add 1:i32, %27 (hasExternalUses)
%29:i64 = sext %28 (hasExternalUses)
%30:i64 = mulnsw %26, %29
%31:i64 = add %24, %30
%32:i32 = var
%33:i32 = mul 19:i32, %32
%34:i64 = sext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = shl %35, 1:i32
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %31, %38
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i32 = var
%43:i32 = mul 19:i32, %42
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %41, %44
%46:i64 = add %39, %45
%47:i32 = var
%48:i32 = mul 19:i32, %47
%49:i64 = sext %48 (hasExternalUses)
%50:i32 = var
%51:i32 = shl %50, 1:i32
%52:i64 = sext %51 (hasExternalUses)
%53:i64 = mulnsw %49, %52
%54:i64 = add %46, %53
%55:i32 = var
%56:i64 = sext %55 (hasExternalUses)
%57:i32 = var
%58:i32 = mul 19:i32, %57
%59:i64 = sext %58 (hasExternalUses)
%60:i64 = mulnsw %56, %59
%61:i64 = add %54, %60
%62:i32 = var
%63:i32 = mul 19:i32, %62
%64:i64 = sext %63 (hasExternalUses)
%65:i32 = var
%66:i32 = shl %65, 1:i32
%67:i64 = sext %66 (hasExternalUses)
%68:i64 = mulnsw %64, %67
%69:i64 = add %61, %68 (hasExternalUses)
%70:i64 = add 33554432:i64, %69 (hasExternalUses)
%71:i64 = and 18446744073642442752:i64, %70
infer %71 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %272 = sub i64 %245, %271
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i32 = add 1:i32, %27 (hasExternalUses)
%29:i64 = sext %28 (hasExternalUses)
%30:i64 = mulnsw %26, %29
%31:i64 = add %24, %30
%32:i32 = var
%33:i32 = mul 19:i32, %32
%34:i64 = sext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = shl %35, 1:i32
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %31, %38
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i32 = var
%43:i32 = mul 19:i32, %42
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %41, %44
%46:i64 = add %39, %45
%47:i32 = var
%48:i32 = mul 19:i32, %47
%49:i64 = sext %48 (hasExternalUses)
%50:i32 = var
%51:i32 = shl %50, 1:i32
%52:i64 = sext %51 (hasExternalUses)
%53:i64 = mulnsw %49, %52
%54:i64 = add %46, %53
%55:i32 = var
%56:i64 = sext %55 (hasExternalUses)
%57:i32 = var
%58:i32 = mul 19:i32, %57
%59:i64 = sext %58 (hasExternalUses)
%60:i64 = mulnsw %56, %59
%61:i64 = add %54, %60
%62:i32 = var
%63:i32 = mul 19:i32, %62
%64:i64 = sext %63 (hasExternalUses)
%65:i32 = var
%66:i32 = shl %65, 1:i32
%67:i64 = sext %66 (hasExternalUses)
%68:i64 = mulnsw %64, %67
%69:i64 = add %61, %68
%70:i64 = add 33554432:i64, %69 (hasExternalUses)
%71:i64 = and 18446744073642442752:i64, %70
%72:i64 = sub %69, %71
infer %72 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %273 = add i64 %256, 16777216
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = add 1:i32, %7 (hasExternalUses)
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = mul 19:i32, %14
%16:i64 = sext %15
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i64 = mulnsw %20, %23
%25:i64 = add %18, %24
%26:i32 = var
%27:i64 = sext %26 (hasExternalUses)
%28:i32 = var
%29:i32 = mul 19:i32, %28
%30:i64 = sext %29 (hasExternalUses)
%31:i64 = mulnsw %27, %30
%32:i64 = add %25, %31
%33:i32 = var
%34:i64 = sext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = mul 19:i32, %35
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %32, %38
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i32 = var
%43:i32 = mul 19:i32, %42
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %41, %44
%46:i64 = add %39, %45
%47:i32 = var
%48:i64 = sext %47 (hasExternalUses)
%49:i32 = var
%50:i32 = mul 19:i32, %49
%51:i64 = sext %50 (hasExternalUses)
%52:i64 = mulnsw %48, %51
%53:i64 = add %46, %52
%54:i32 = var
%55:i64 = sext %54 (hasExternalUses)
%56:i32 = var
%57:i32 = mul 19:i32, %56
%58:i64 = sext %57 (hasExternalUses)
%59:i64 = mulnsw %55, %58
%60:i64 = add %53, %59
%61:i32 = var
%62:i64 = sext %61 (hasExternalUses)
%63:i32 = var
%64:i32 = mul 19:i32, %63
%65:i64 = sext %64 (hasExternalUses)
%66:i64 = mulnsw %62, %65
%67:i64 = add %60, %66
%68:i64 = mulnsw %3, %9
%69:i32 = mul 19:i32, %5
%70:i64 = sext %69
%71:i32 = shl %12, 1:i32
%72:i64 = sext %71 (hasExternalUses)
%73:i64 = mulnsw %70, %72
%74:i64 = add %68, %73
%75:i64 = mulnsw %20, %16
%76:i64 = add %74, %75
%77:i32 = shl %26, 1:i32
%78:i64 = sext %77 (hasExternalUses)
%79:i64 = mulnsw %23, %78
%80:i64 = add %76, %79
%81:i64 = mulnsw %34, %30
%82:i64 = add %80, %81
%83:i32 = shl %40, 1:i32
%84:i64 = sext %83 (hasExternalUses)
%85:i64 = mulnsw %37, %84
%86:i64 = add %82, %85
%87:i64 = mulnsw %48, %44
%88:i64 = add %86, %87
%89:i32 = shl %54, 1:i32
%90:i64 = sext %89 (hasExternalUses)
%91:i64 = mulnsw %51, %90
%92:i64 = add %88, %91
%93:i64 = mulnsw %62, %58
%94:i64 = add %92, %93
%95:i32 = shl %0, 1:i32
%96:i64 = sext %95 (hasExternalUses)
%97:i64 = mulnsw %65, %96
%98:i64 = add %94, %97 (hasExternalUses)
%99:i64 = add 33554432:i64, %98 (hasExternalUses)
%100:i64 = ashr %99, 26:i64
%101:i64 = add %67, %100 (hasExternalUses)
%102:i64 = add 16777216:i64, %101
infer %102 (demandedBits=1111111111111111111111111111111111111110000000000000000000000000)

; *****
; For LLVM instruction:
;  %274 = ashr i64 %273, 25
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = add 1:i32, %7 (hasExternalUses)
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = mul 19:i32, %14
%16:i64 = sext %15
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i64 = mulnsw %20, %23
%25:i64 = add %18, %24
%26:i32 = var
%27:i64 = sext %26 (hasExternalUses)
%28:i32 = var
%29:i32 = mul 19:i32, %28
%30:i64 = sext %29 (hasExternalUses)
%31:i64 = mulnsw %27, %30
%32:i64 = add %25, %31
%33:i32 = var
%34:i64 = sext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = mul 19:i32, %35
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %32, %38
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i32 = var
%43:i32 = mul 19:i32, %42
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %41, %44
%46:i64 = add %39, %45
%47:i32 = var
%48:i64 = sext %47 (hasExternalUses)
%49:i32 = var
%50:i32 = mul 19:i32, %49
%51:i64 = sext %50 (hasExternalUses)
%52:i64 = mulnsw %48, %51
%53:i64 = add %46, %52
%54:i32 = var
%55:i64 = sext %54 (hasExternalUses)
%56:i32 = var
%57:i32 = mul 19:i32, %56
%58:i64 = sext %57 (hasExternalUses)
%59:i64 = mulnsw %55, %58
%60:i64 = add %53, %59
%61:i32 = var
%62:i64 = sext %61 (hasExternalUses)
%63:i32 = var
%64:i32 = mul 19:i32, %63
%65:i64 = sext %64 (hasExternalUses)
%66:i64 = mulnsw %62, %65
%67:i64 = add %60, %66
%68:i64 = mulnsw %3, %9
%69:i32 = mul 19:i32, %5
%70:i64 = sext %69
%71:i32 = shl %12, 1:i32
%72:i64 = sext %71 (hasExternalUses)
%73:i64 = mulnsw %70, %72
%74:i64 = add %68, %73
%75:i64 = mulnsw %20, %16
%76:i64 = add %74, %75
%77:i32 = shl %26, 1:i32
%78:i64 = sext %77 (hasExternalUses)
%79:i64 = mulnsw %23, %78
%80:i64 = add %76, %79
%81:i64 = mulnsw %34, %30
%82:i64 = add %80, %81
%83:i32 = shl %40, 1:i32
%84:i64 = sext %83 (hasExternalUses)
%85:i64 = mulnsw %37, %84
%86:i64 = add %82, %85
%87:i64 = mulnsw %48, %44
%88:i64 = add %86, %87
%89:i32 = shl %54, 1:i32
%90:i64 = sext %89 (hasExternalUses)
%91:i64 = mulnsw %51, %90
%92:i64 = add %88, %91
%93:i64 = mulnsw %62, %58
%94:i64 = add %92, %93
%95:i32 = shl %0, 1:i32
%96:i64 = sext %95 (hasExternalUses)
%97:i64 = mulnsw %65, %96
%98:i64 = add %94, %97 (hasExternalUses)
%99:i64 = add 33554432:i64, %98 (hasExternalUses)
%100:i64 = ashr %99, 26:i64
%101:i64 = add %67, %100 (hasExternalUses)
%102:i64 = add 16777216:i64, %101 (hasExternalUses)
%103:i64 = ashr %102, 25:i64
infer %103

; *****
; For LLVM instruction:
;  %275 = add i64 %117, %128
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
infer %11

; *****
; For LLVM instruction:
;  %276 = add i64 %275, %99
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = add 1:i32, %14 (hasExternalUses)
%16:i64 = sext %15 (hasExternalUses)
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
infer %18

; *****
; For LLVM instruction:
;  %277 = add i64 %276, %220
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = add 1:i32, %14 (hasExternalUses)
%16:i64 = sext %15 (hasExternalUses)
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i32 = mul 19:i32, %19
%21:i64 = sext %20 (hasExternalUses)
%22:i32 = var
%23:i32 = shl %22, 1:i32
%24:i64 = sext %23 (hasExternalUses)
%25:i64 = mulnsw %21, %24
%26:i64 = add %18, %25
infer %26

; *****
; For LLVM instruction:
;  %278 = add i64 %277, %208
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = add 1:i32, %14 (hasExternalUses)
%16:i64 = sext %15 (hasExternalUses)
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i32 = mul 19:i32, %19
%21:i64 = sext %20 (hasExternalUses)
%22:i32 = var
%23:i32 = shl %22, 1:i32
%24:i64 = sext %23 (hasExternalUses)
%25:i64 = mulnsw %21, %24
%26:i64 = add %18, %25
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i32 = var
%30:i32 = mul 19:i32, %29
%31:i64 = sext %30 (hasExternalUses)
%32:i64 = mulnsw %28, %31
%33:i64 = add %26, %32
infer %33

; *****
; For LLVM instruction:
;  %279 = add i64 %278, %197
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = add 1:i32, %14 (hasExternalUses)
%16:i64 = sext %15 (hasExternalUses)
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i32 = mul 19:i32, %19
%21:i64 = sext %20 (hasExternalUses)
%22:i32 = var
%23:i32 = shl %22, 1:i32
%24:i64 = sext %23 (hasExternalUses)
%25:i64 = mulnsw %21, %24
%26:i64 = add %18, %25
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i32 = var
%30:i32 = mul 19:i32, %29
%31:i64 = sext %30 (hasExternalUses)
%32:i64 = mulnsw %28, %31
%33:i64 = add %26, %32
%34:i32 = var
%35:i32 = mul 19:i32, %34
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i32 = shl %37, 1:i32
%39:i64 = sext %38 (hasExternalUses)
%40:i64 = mulnsw %36, %39
%41:i64 = add %33, %40
infer %41

; *****
; For LLVM instruction:
;  %280 = add i64 %279, %185
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = add 1:i32, %14 (hasExternalUses)
%16:i64 = sext %15 (hasExternalUses)
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i32 = mul 19:i32, %19
%21:i64 = sext %20 (hasExternalUses)
%22:i32 = var
%23:i32 = shl %22, 1:i32
%24:i64 = sext %23 (hasExternalUses)
%25:i64 = mulnsw %21, %24
%26:i64 = add %18, %25
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i32 = var
%30:i32 = mul 19:i32, %29
%31:i64 = sext %30 (hasExternalUses)
%32:i64 = mulnsw %28, %31
%33:i64 = add %26, %32
%34:i32 = var
%35:i32 = mul 19:i32, %34
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i32 = shl %37, 1:i32
%39:i64 = sext %38 (hasExternalUses)
%40:i64 = mulnsw %36, %39
%41:i64 = add %33, %40
%42:i32 = var
%43:i64 = sext %42 (hasExternalUses)
%44:i32 = var
%45:i32 = mul 19:i32, %44
%46:i64 = sext %45 (hasExternalUses)
%47:i64 = mulnsw %43, %46
%48:i64 = add %41, %47
infer %48

; *****
; For LLVM instruction:
;  %281 = add i64 %280, %174
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = add 1:i32, %14 (hasExternalUses)
%16:i64 = sext %15 (hasExternalUses)
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i32 = mul 19:i32, %19
%21:i64 = sext %20 (hasExternalUses)
%22:i32 = var
%23:i32 = shl %22, 1:i32
%24:i64 = sext %23 (hasExternalUses)
%25:i64 = mulnsw %21, %24
%26:i64 = add %18, %25
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i32 = var
%30:i32 = mul 19:i32, %29
%31:i64 = sext %30 (hasExternalUses)
%32:i64 = mulnsw %28, %31
%33:i64 = add %26, %32
%34:i32 = var
%35:i32 = mul 19:i32, %34
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i32 = shl %37, 1:i32
%39:i64 = sext %38 (hasExternalUses)
%40:i64 = mulnsw %36, %39
%41:i64 = add %33, %40
%42:i32 = var
%43:i64 = sext %42 (hasExternalUses)
%44:i32 = var
%45:i32 = mul 19:i32, %44
%46:i64 = sext %45 (hasExternalUses)
%47:i64 = mulnsw %43, %46
%48:i64 = add %41, %47
%49:i32 = var
%50:i32 = mul 19:i32, %49
%51:i64 = sext %50 (hasExternalUses)
%52:i32 = var
%53:i32 = shl %52, 1:i32
%54:i64 = sext %53 (hasExternalUses)
%55:i64 = mulnsw %51, %54
%56:i64 = add %48, %55
infer %56

; *****
; For LLVM instruction:
;  %282 = add i64 %281, %162
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = add 1:i32, %14 (hasExternalUses)
%16:i64 = sext %15 (hasExternalUses)
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i32 = mul 19:i32, %19
%21:i64 = sext %20 (hasExternalUses)
%22:i32 = var
%23:i32 = shl %22, 1:i32
%24:i64 = sext %23 (hasExternalUses)
%25:i64 = mulnsw %21, %24
%26:i64 = add %18, %25
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i32 = var
%30:i32 = mul 19:i32, %29
%31:i64 = sext %30 (hasExternalUses)
%32:i64 = mulnsw %28, %31
%33:i64 = add %26, %32
%34:i32 = var
%35:i32 = mul 19:i32, %34
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i32 = shl %37, 1:i32
%39:i64 = sext %38 (hasExternalUses)
%40:i64 = mulnsw %36, %39
%41:i64 = add %33, %40
%42:i32 = var
%43:i64 = sext %42 (hasExternalUses)
%44:i32 = var
%45:i32 = mul 19:i32, %44
%46:i64 = sext %45 (hasExternalUses)
%47:i64 = mulnsw %43, %46
%48:i64 = add %41, %47
%49:i32 = var
%50:i32 = mul 19:i32, %49
%51:i64 = sext %50 (hasExternalUses)
%52:i32 = var
%53:i32 = shl %52, 1:i32
%54:i64 = sext %53 (hasExternalUses)
%55:i64 = mulnsw %51, %54
%56:i64 = add %48, %55
%57:i32 = var
%58:i64 = sext %57 (hasExternalUses)
%59:i32 = var
%60:i32 = mul 19:i32, %59
%61:i64 = sext %60 (hasExternalUses)
%62:i64 = mulnsw %58, %61
%63:i64 = add %56, %62
infer %63

; *****
; For LLVM instruction:
;  %283 = add i64 %282, %151
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = add 1:i32, %14 (hasExternalUses)
%16:i64 = sext %15 (hasExternalUses)
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i32 = mul 19:i32, %19
%21:i64 = sext %20 (hasExternalUses)
%22:i32 = var
%23:i32 = shl %22, 1:i32
%24:i64 = sext %23 (hasExternalUses)
%25:i64 = mulnsw %21, %24
%26:i64 = add %18, %25
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i32 = var
%30:i32 = mul 19:i32, %29
%31:i64 = sext %30 (hasExternalUses)
%32:i64 = mulnsw %28, %31
%33:i64 = add %26, %32
%34:i32 = var
%35:i32 = mul 19:i32, %34
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i32 = shl %37, 1:i32
%39:i64 = sext %38 (hasExternalUses)
%40:i64 = mulnsw %36, %39
%41:i64 = add %33, %40
%42:i32 = var
%43:i64 = sext %42 (hasExternalUses)
%44:i32 = var
%45:i32 = mul 19:i32, %44
%46:i64 = sext %45 (hasExternalUses)
%47:i64 = mulnsw %43, %46
%48:i64 = add %41, %47
%49:i32 = var
%50:i32 = mul 19:i32, %49
%51:i64 = sext %50 (hasExternalUses)
%52:i32 = var
%53:i32 = shl %52, 1:i32
%54:i64 = sext %53 (hasExternalUses)
%55:i64 = mulnsw %51, %54
%56:i64 = add %48, %55
%57:i32 = var
%58:i64 = sext %57 (hasExternalUses)
%59:i32 = var
%60:i32 = mul 19:i32, %59
%61:i64 = sext %60 (hasExternalUses)
%62:i64 = mulnsw %58, %61
%63:i64 = add %56, %62
%64:i32 = var
%65:i32 = mul 19:i32, %64
%66:i64 = sext %65 (hasExternalUses)
%67:i32 = var
%68:i32 = shl %67, 1:i32
%69:i64 = sext %68 (hasExternalUses)
%70:i64 = mulnsw %66, %69
%71:i64 = add %63, %70
infer %71

; *****
; For LLVM instruction:
;  %284 = add i64 %283, %274
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = add 1:i32, %14 (hasExternalUses)
%16:i64 = sext %15 (hasExternalUses)
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i32 = mul 19:i32, %19
%21:i64 = sext %20
%22:i32 = var
%23:i32 = shl %22, 1:i32
%24:i64 = sext %23 (hasExternalUses)
%25:i64 = mulnsw %21, %24
%26:i64 = add %18, %25
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i32 = var
%30:i32 = mul 19:i32, %29
%31:i64 = sext %30 (hasExternalUses)
%32:i64 = mulnsw %28, %31
%33:i64 = add %26, %32
%34:i32 = var
%35:i32 = mul 19:i32, %34
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i32 = shl %37, 1:i32
%39:i64 = sext %38 (hasExternalUses)
%40:i64 = mulnsw %36, %39
%41:i64 = add %33, %40
%42:i32 = var
%43:i64 = sext %42 (hasExternalUses)
%44:i32 = var
%45:i32 = mul 19:i32, %44
%46:i64 = sext %45 (hasExternalUses)
%47:i64 = mulnsw %43, %46
%48:i64 = add %41, %47
%49:i32 = var
%50:i32 = mul 19:i32, %49
%51:i64 = sext %50 (hasExternalUses)
%52:i32 = var
%53:i32 = shl %52, 1:i32
%54:i64 = sext %53 (hasExternalUses)
%55:i64 = mulnsw %51, %54
%56:i64 = add %48, %55
%57:i32 = var
%58:i64 = sext %57 (hasExternalUses)
%59:i32 = var
%60:i32 = mul 19:i32, %59
%61:i64 = sext %60 (hasExternalUses)
%62:i64 = mulnsw %58, %61
%63:i64 = add %56, %62
%64:i32 = var
%65:i32 = mul 19:i32, %64
%66:i64 = sext %65 (hasExternalUses)
%67:i32 = var
%68:i32 = shl %67, 1:i32
%69:i64 = sext %68 (hasExternalUses)
%70:i64 = mulnsw %66, %69
%71:i64 = add %63, %70
%72:i64 = sext %7 (hasExternalUses)
%73:i64 = mulnsw %72, %3
%74:i64 = mulnsw %6, %16
%75:i64 = add %73, %74
%76:i64 = sext %22 (hasExternalUses)
%77:i32 = mul 19:i32, %12
%78:i64 = sext %77
%79:i64 = mulnsw %76, %78
%80:i64 = add %75, %79
%81:i64 = mulnsw %28, %21
%82:i64 = add %80, %81
%83:i64 = sext %37 (hasExternalUses)
%84:i64 = mulnsw %83, %31
%85:i64 = add %82, %84
%86:i64 = mulnsw %43, %36
%87:i64 = add %85, %86
%88:i64 = sext %52 (hasExternalUses)
%89:i64 = mulnsw %88, %46
%90:i64 = add %87, %89
%91:i64 = mulnsw %58, %51
%92:i64 = add %90, %91
%93:i64 = sext %67 (hasExternalUses)
%94:i64 = mulnsw %93, %61
%95:i64 = add %92, %94
%96:i64 = mulnsw %1, %66
%97:i64 = add %95, %96
%98:i64 = mulnsw %3, %16
%99:i32 = mul 19:i32, %5
%100:i64 = sext %99
%101:i64 = mulnsw %100, %24
%102:i64 = add %98, %101
%103:i64 = mulnsw %28, %78
%104:i64 = add %102, %103
%105:i64 = mulnsw %21, %39
%106:i64 = add %104, %105
%107:i64 = mulnsw %43, %31
%108:i64 = add %106, %107
%109:i64 = mulnsw %36, %54
%110:i64 = add %108, %109
%111:i64 = mulnsw %58, %46
%112:i64 = add %110, %111
%113:i64 = mulnsw %51, %69
%114:i64 = add %112, %113
%115:i64 = mulnsw %1, %61
%116:i64 = add %114, %115
%117:i64 = mulnsw %66, %9
%118:i64 = add %116, %117 (hasExternalUses)
%119:i64 = add 33554432:i64, %118 (hasExternalUses)
%120:i64 = ashr %119, 26:i64
%121:i64 = add %97, %120 (hasExternalUses)
%122:i64 = add 16777216:i64, %121 (hasExternalUses)
%123:i64 = ashr %122, 25:i64
%124:i64 = add %71, %123
infer %124

; *****
; For LLVM instruction:
;  %285 = and i64 %273, 4261412864
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = add 1:i32, %7 (hasExternalUses)
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = mul 19:i32, %14
%16:i64 = sext %15
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i64 = mulnsw %20, %23
%25:i64 = add %18, %24
%26:i32 = var
%27:i64 = sext %26 (hasExternalUses)
%28:i32 = var
%29:i32 = mul 19:i32, %28
%30:i64 = sext %29 (hasExternalUses)
%31:i64 = mulnsw %27, %30
%32:i64 = add %25, %31
%33:i32 = var
%34:i64 = sext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = mul 19:i32, %35
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %32, %38
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i32 = var
%43:i32 = mul 19:i32, %42
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %41, %44
%46:i64 = add %39, %45
%47:i32 = var
%48:i64 = sext %47 (hasExternalUses)
%49:i32 = var
%50:i32 = mul 19:i32, %49
%51:i64 = sext %50 (hasExternalUses)
%52:i64 = mulnsw %48, %51
%53:i64 = add %46, %52
%54:i32 = var
%55:i64 = sext %54 (hasExternalUses)
%56:i32 = var
%57:i32 = mul 19:i32, %56
%58:i64 = sext %57 (hasExternalUses)
%59:i64 = mulnsw %55, %58
%60:i64 = add %53, %59
%61:i32 = var
%62:i64 = sext %61 (hasExternalUses)
%63:i32 = var
%64:i32 = mul 19:i32, %63
%65:i64 = sext %64 (hasExternalUses)
%66:i64 = mulnsw %62, %65
%67:i64 = add %60, %66
%68:i64 = mulnsw %3, %9
%69:i32 = mul 19:i32, %5
%70:i64 = sext %69
%71:i32 = shl %12, 1:i32
%72:i64 = sext %71 (hasExternalUses)
%73:i64 = mulnsw %70, %72
%74:i64 = add %68, %73
%75:i64 = mulnsw %20, %16
%76:i64 = add %74, %75
%77:i32 = shl %26, 1:i32
%78:i64 = sext %77 (hasExternalUses)
%79:i64 = mulnsw %23, %78
%80:i64 = add %76, %79
%81:i64 = mulnsw %34, %30
%82:i64 = add %80, %81
%83:i32 = shl %40, 1:i32
%84:i64 = sext %83 (hasExternalUses)
%85:i64 = mulnsw %37, %84
%86:i64 = add %82, %85
%87:i64 = mulnsw %48, %44
%88:i64 = add %86, %87
%89:i32 = shl %54, 1:i32
%90:i64 = sext %89 (hasExternalUses)
%91:i64 = mulnsw %51, %90
%92:i64 = add %88, %91
%93:i64 = mulnsw %62, %58
%94:i64 = add %92, %93
%95:i32 = shl %0, 1:i32
%96:i64 = sext %95 (hasExternalUses)
%97:i64 = mulnsw %65, %96
%98:i64 = add %94, %97 (hasExternalUses)
%99:i64 = add 33554432:i64, %98 (hasExternalUses)
%100:i64 = ashr %99, 26:i64
%101:i64 = add %67, %100 (hasExternalUses)
%102:i64 = add 16777216:i64, %101 (hasExternalUses)
%103:i64 = and 4261412864:i64, %102
infer %103 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %286 = sub i64 %256, %285
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = add 1:i32, %7 (hasExternalUses)
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = mul 19:i32, %14
%16:i64 = sext %15
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i64 = mulnsw %20, %23
%25:i64 = add %18, %24
%26:i32 = var
%27:i64 = sext %26 (hasExternalUses)
%28:i32 = var
%29:i32 = mul 19:i32, %28
%30:i64 = sext %29 (hasExternalUses)
%31:i64 = mulnsw %27, %30
%32:i64 = add %25, %31
%33:i32 = var
%34:i64 = sext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = mul 19:i32, %35
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %32, %38
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i32 = var
%43:i32 = mul 19:i32, %42
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %41, %44
%46:i64 = add %39, %45
%47:i32 = var
%48:i64 = sext %47 (hasExternalUses)
%49:i32 = var
%50:i32 = mul 19:i32, %49
%51:i64 = sext %50 (hasExternalUses)
%52:i64 = mulnsw %48, %51
%53:i64 = add %46, %52
%54:i32 = var
%55:i64 = sext %54 (hasExternalUses)
%56:i32 = var
%57:i32 = mul 19:i32, %56
%58:i64 = sext %57 (hasExternalUses)
%59:i64 = mulnsw %55, %58
%60:i64 = add %53, %59
%61:i32 = var
%62:i64 = sext %61 (hasExternalUses)
%63:i32 = var
%64:i32 = mul 19:i32, %63
%65:i64 = sext %64 (hasExternalUses)
%66:i64 = mulnsw %62, %65
%67:i64 = add %60, %66
%68:i64 = mulnsw %3, %9
%69:i32 = mul 19:i32, %5
%70:i64 = sext %69
%71:i32 = shl %12, 1:i32
%72:i64 = sext %71 (hasExternalUses)
%73:i64 = mulnsw %70, %72
%74:i64 = add %68, %73
%75:i64 = mulnsw %20, %16
%76:i64 = add %74, %75
%77:i32 = shl %26, 1:i32
%78:i64 = sext %77 (hasExternalUses)
%79:i64 = mulnsw %23, %78
%80:i64 = add %76, %79
%81:i64 = mulnsw %34, %30
%82:i64 = add %80, %81
%83:i32 = shl %40, 1:i32
%84:i64 = sext %83 (hasExternalUses)
%85:i64 = mulnsw %37, %84
%86:i64 = add %82, %85
%87:i64 = mulnsw %48, %44
%88:i64 = add %86, %87
%89:i32 = shl %54, 1:i32
%90:i64 = sext %89 (hasExternalUses)
%91:i64 = mulnsw %51, %90
%92:i64 = add %88, %91
%93:i64 = mulnsw %62, %58
%94:i64 = add %92, %93
%95:i32 = shl %0, 1:i32
%96:i64 = sext %95 (hasExternalUses)
%97:i64 = mulnsw %65, %96
%98:i64 = add %94, %97 (hasExternalUses)
%99:i64 = add 33554432:i64, %98 (hasExternalUses)
%100:i64 = ashr %99, 26:i64
%101:i64 = add %67, %100
%102:i64 = add 16777216:i64, %101 (hasExternalUses)
%103:i64 = and 4261412864:i64, %102
%104:i64 = sub %101, %103
infer %104 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %287 = add i64 %270, 16777216
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = add 1:i32, %31 (hasExternalUses)
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
%36:i32 = var
%37:i64 = sext %36 (hasExternalUses)
%38:i32 = var
%39:i32 = mul 19:i32, %38
%40:i64 = sext %39 (hasExternalUses)
%41:i64 = mulnsw %37, %40
%42:i64 = add %35, %41
%43:i32 = var
%44:i64 = sext %43 (hasExternalUses)
%45:i32 = var
%46:i32 = mul 19:i32, %45
%47:i64 = sext %46 (hasExternalUses)
%48:i64 = mulnsw %44, %47
%49:i64 = add %42, %48
%50:i32 = var
%51:i64 = sext %50 (hasExternalUses)
%52:i32 = var
%53:i32 = mul 19:i32, %52
%54:i64 = sext %53 (hasExternalUses)
%55:i64 = mulnsw %51, %54
%56:i64 = add %49, %55
%57:i32 = var
%58:i64 = sext %57 (hasExternalUses)
%59:i32 = var
%60:i32 = mul 19:i32, %59
%61:i64 = sext %60 (hasExternalUses)
%62:i64 = mulnsw %58, %61
%63:i64 = add %56, %62
%64:i64 = mulnsw %1, %8
%65:i32 = shl %11, 1:i32
%66:i64 = sext %65 (hasExternalUses)
%67:i64 = mulnsw %3, %66
%68:i64 = add %64, %67
%69:i64 = mulnsw %18, %14
%70:i64 = add %68, %69
%71:i32 = shl %23, 1:i32
%72:i64 = sext %71 (hasExternalUses)
%73:i64 = mulnsw %20, %72
%74:i64 = add %70, %73
%75:i64 = mulnsw %26, %33
%76:i64 = add %74, %75
%77:i32 = mul 19:i32, %29
%78:i64 = sext %77 (hasExternalUses)
%79:i32 = shl %36, 1:i32
%80:i64 = sext %79 (hasExternalUses)
%81:i64 = mulnsw %78, %80
%82:i64 = add %76, %81
%83:i64 = mulnsw %44, %40
%84:i64 = add %82, %83
%85:i32 = shl %50, 1:i32
%86:i64 = sext %85 (hasExternalUses)
%87:i64 = mulnsw %47, %86
%88:i64 = add %84, %87
%89:i64 = mulnsw %58, %54
%90:i64 = add %88, %89
%91:i32 = shl %5, 1:i32
%92:i64 = sext %91 (hasExternalUses)
%93:i64 = mulnsw %61, %92
%94:i64 = add %90, %93 (hasExternalUses)
%95:i64 = add 33554432:i64, %94 (hasExternalUses)
%96:i64 = ashr %95, 26:i64
%97:i64 = add %63, %96 (hasExternalUses)
%98:i64 = add 16777216:i64, %97
infer %98 (demandedBits=1111111111111111111111111111111111111110000000000000000000000000)

; *****
; For LLVM instruction:
;  %288 = ashr i64 %287, 25
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = add 1:i32, %31 (hasExternalUses)
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
%36:i32 = var
%37:i64 = sext %36 (hasExternalUses)
%38:i32 = var
%39:i32 = mul 19:i32, %38
%40:i64 = sext %39 (hasExternalUses)
%41:i64 = mulnsw %37, %40
%42:i64 = add %35, %41
%43:i32 = var
%44:i64 = sext %43 (hasExternalUses)
%45:i32 = var
%46:i32 = mul 19:i32, %45
%47:i64 = sext %46 (hasExternalUses)
%48:i64 = mulnsw %44, %47
%49:i64 = add %42, %48
%50:i32 = var
%51:i64 = sext %50 (hasExternalUses)
%52:i32 = var
%53:i32 = mul 19:i32, %52
%54:i64 = sext %53 (hasExternalUses)
%55:i64 = mulnsw %51, %54
%56:i64 = add %49, %55
%57:i32 = var
%58:i64 = sext %57 (hasExternalUses)
%59:i32 = var
%60:i32 = mul 19:i32, %59
%61:i64 = sext %60 (hasExternalUses)
%62:i64 = mulnsw %58, %61
%63:i64 = add %56, %62
%64:i64 = mulnsw %1, %8
%65:i32 = shl %11, 1:i32
%66:i64 = sext %65 (hasExternalUses)
%67:i64 = mulnsw %3, %66
%68:i64 = add %64, %67
%69:i64 = mulnsw %18, %14
%70:i64 = add %68, %69
%71:i32 = shl %23, 1:i32
%72:i64 = sext %71 (hasExternalUses)
%73:i64 = mulnsw %20, %72
%74:i64 = add %70, %73
%75:i64 = mulnsw %26, %33
%76:i64 = add %74, %75
%77:i32 = mul 19:i32, %29
%78:i64 = sext %77 (hasExternalUses)
%79:i32 = shl %36, 1:i32
%80:i64 = sext %79 (hasExternalUses)
%81:i64 = mulnsw %78, %80
%82:i64 = add %76, %81
%83:i64 = mulnsw %44, %40
%84:i64 = add %82, %83
%85:i32 = shl %50, 1:i32
%86:i64 = sext %85 (hasExternalUses)
%87:i64 = mulnsw %47, %86
%88:i64 = add %84, %87
%89:i64 = mulnsw %58, %54
%90:i64 = add %88, %89
%91:i32 = shl %5, 1:i32
%92:i64 = sext %91 (hasExternalUses)
%93:i64 = mulnsw %61, %92
%94:i64 = add %90, %93 (hasExternalUses)
%95:i64 = add 33554432:i64, %94 (hasExternalUses)
%96:i64 = ashr %95, 26:i64
%97:i64 = add %63, %96 (hasExternalUses)
%98:i64 = add 16777216:i64, %97 (hasExternalUses)
%99:i64 = ashr %98, 25:i64
infer %99

; *****
; For LLVM instruction:
;  %289 = add i64 %167, %178
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
infer %11

; *****
; For LLVM instruction:
;  %290 = add i64 %289, %155
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
infer %17

; *****
; For LLVM instruction:
;  %291 = add i64 %290, %144
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
infer %24

; *****
; For LLVM instruction:
;  %292 = add i64 %291, %132
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %26, %28
%30:i64 = add %24, %29
infer %30

; *****
; For LLVM instruction:
;  %293 = add i64 %292, %121
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %26, %28
%30:i64 = add %24, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = shl %33, 1:i32
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
infer %37

; *****
; For LLVM instruction:
;  %294 = add i64 %293, %107
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %26, %28
%30:i64 = add %24, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = shl %33, 1:i32
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i32 = add 1:i32, %40 (hasExternalUses)
%42:i64 = sext %41 (hasExternalUses)
%43:i64 = mulnsw %39, %42
%44:i64 = add %37, %43
infer %44

; *****
; For LLVM instruction:
;  %295 = add i64 %294, %224
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %26, %28
%30:i64 = add %24, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = shl %33, 1:i32
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i32 = add 1:i32, %40 (hasExternalUses)
%42:i64 = sext %41 (hasExternalUses)
%43:i64 = mulnsw %39, %42
%44:i64 = add %37, %43
%45:i32 = var
%46:i32 = mul 19:i32, %45
%47:i64 = sext %46 (hasExternalUses)
%48:i32 = var
%49:i32 = shl %48, 1:i32
%50:i64 = sext %49 (hasExternalUses)
%51:i64 = mulnsw %47, %50
%52:i64 = add %44, %51
infer %52

; *****
; For LLVM instruction:
;  %296 = add i64 %295, %212
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %26, %28
%30:i64 = add %24, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = shl %33, 1:i32
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i32 = add 1:i32, %40 (hasExternalUses)
%42:i64 = sext %41 (hasExternalUses)
%43:i64 = mulnsw %39, %42
%44:i64 = add %37, %43
%45:i32 = var
%46:i32 = mul 19:i32, %45
%47:i64 = sext %46 (hasExternalUses)
%48:i32 = var
%49:i32 = shl %48, 1:i32
%50:i64 = sext %49 (hasExternalUses)
%51:i64 = mulnsw %47, %50
%52:i64 = add %44, %51
%53:i32 = var
%54:i64 = sext %53 (hasExternalUses)
%55:i32 = var
%56:i32 = mul 19:i32, %55
%57:i64 = sext %56 (hasExternalUses)
%58:i64 = mulnsw %54, %57
%59:i64 = add %52, %58
infer %59

; *****
; For LLVM instruction:
;  %297 = add i64 %296, %201
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %26, %28
%30:i64 = add %24, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = shl %33, 1:i32
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i32 = add 1:i32, %40 (hasExternalUses)
%42:i64 = sext %41 (hasExternalUses)
%43:i64 = mulnsw %39, %42
%44:i64 = add %37, %43
%45:i32 = var
%46:i32 = mul 19:i32, %45
%47:i64 = sext %46 (hasExternalUses)
%48:i32 = var
%49:i32 = shl %48, 1:i32
%50:i64 = sext %49 (hasExternalUses)
%51:i64 = mulnsw %47, %50
%52:i64 = add %44, %51
%53:i32 = var
%54:i64 = sext %53 (hasExternalUses)
%55:i32 = var
%56:i32 = mul 19:i32, %55
%57:i64 = sext %56 (hasExternalUses)
%58:i64 = mulnsw %54, %57
%59:i64 = add %52, %58
%60:i32 = var
%61:i32 = mul 19:i32, %60
%62:i64 = sext %61 (hasExternalUses)
%63:i32 = var
%64:i32 = shl %63, 1:i32
%65:i64 = sext %64 (hasExternalUses)
%66:i64 = mulnsw %62, %65
%67:i64 = add %59, %66
infer %67

; *****
; For LLVM instruction:
;  %298 = add i64 %297, %288
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %26, %28
%30:i64 = add %24, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = shl %33, 1:i32
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i32 = add 1:i32, %40 (hasExternalUses)
%42:i64 = sext %41 (hasExternalUses)
%43:i64 = mulnsw %39, %42
%44:i64 = add %37, %43
%45:i32 = var
%46:i32 = mul 19:i32, %45
%47:i64 = sext %46 (hasExternalUses)
%48:i32 = var
%49:i32 = shl %48, 1:i32
%50:i64 = sext %49 (hasExternalUses)
%51:i64 = mulnsw %47, %50
%52:i64 = add %44, %51
%53:i32 = var
%54:i64 = sext %53 (hasExternalUses)
%55:i32 = var
%56:i32 = mul 19:i32, %55
%57:i64 = sext %56 (hasExternalUses)
%58:i64 = mulnsw %54, %57
%59:i64 = add %52, %58
%60:i32 = var
%61:i32 = mul 19:i32, %60
%62:i64 = sext %61 (hasExternalUses)
%63:i32 = var
%64:i32 = shl %63, 1:i32
%65:i64 = sext %64 (hasExternalUses)
%66:i64 = mulnsw %62, %65
%67:i64 = add %59, %66
%68:i64 = mulnsw %13, %6
%69:i64 = sext %7 (hasExternalUses)
%70:i64 = mulnsw %69, %3
%71:i64 = add %68, %70
%72:i64 = sext %20 (hasExternalUses)
%73:i64 = mulnsw %72, %15
%74:i64 = add %71, %73
%75:i64 = mulnsw %26, %19
%76:i64 = add %74, %75
%77:i64 = sext %33 (hasExternalUses)
%78:i64 = mulnsw %77, %28
%79:i64 = add %76, %78
%80:i64 = mulnsw %32, %42
%81:i64 = add %79, %80
%82:i64 = sext %48 (hasExternalUses)
%83:i32 = mul 19:i32, %38
%84:i64 = sext %83 (hasExternalUses)
%85:i64 = mulnsw %82, %84
%86:i64 = add %81, %85
%87:i64 = mulnsw %54, %47
%88:i64 = add %86, %87
%89:i64 = sext %63 (hasExternalUses)
%90:i64 = mulnsw %89, %57
%91:i64 = add %88, %90
%92:i64 = mulnsw %1, %62
%93:i64 = add %91, %92
%94:i64 = mulnsw %13, %3
%95:i64 = mulnsw %6, %22
%96:i64 = add %94, %95
%97:i64 = mulnsw %26, %15
%98:i64 = add %96, %97
%99:i64 = mulnsw %19, %35
%100:i64 = add %98, %99
%101:i64 = mulnsw %28, %42
%102:i64 = add %100, %101
%103:i32 = mul 19:i32, %31
%104:i64 = sext %103 (hasExternalUses)
%105:i64 = mulnsw %104, %50
%106:i64 = add %102, %105
%107:i64 = mulnsw %54, %84
%108:i64 = add %106, %107
%109:i64 = mulnsw %47, %65
%110:i64 = add %108, %109
%111:i64 = mulnsw %1, %57
%112:i64 = add %110, %111
%113:i64 = mulnsw %62, %9
%114:i64 = add %112, %113 (hasExternalUses)
%115:i64 = add 33554432:i64, %114 (hasExternalUses)
%116:i64 = ashr %115, 26:i64
%117:i64 = add %93, %116 (hasExternalUses)
%118:i64 = add 16777216:i64, %117 (hasExternalUses)
%119:i64 = ashr %118, 25:i64
%120:i64 = add %67, %119
infer %120

; *****
; For LLVM instruction:
;  %299 = and i64 %287, 4261412864
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = add 1:i32, %31 (hasExternalUses)
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
%36:i32 = var
%37:i64 = sext %36 (hasExternalUses)
%38:i32 = var
%39:i32 = mul 19:i32, %38
%40:i64 = sext %39 (hasExternalUses)
%41:i64 = mulnsw %37, %40
%42:i64 = add %35, %41
%43:i32 = var
%44:i64 = sext %43 (hasExternalUses)
%45:i32 = var
%46:i32 = mul 19:i32, %45
%47:i64 = sext %46 (hasExternalUses)
%48:i64 = mulnsw %44, %47
%49:i64 = add %42, %48
%50:i32 = var
%51:i64 = sext %50 (hasExternalUses)
%52:i32 = var
%53:i32 = mul 19:i32, %52
%54:i64 = sext %53 (hasExternalUses)
%55:i64 = mulnsw %51, %54
%56:i64 = add %49, %55
%57:i32 = var
%58:i64 = sext %57 (hasExternalUses)
%59:i32 = var
%60:i32 = mul 19:i32, %59
%61:i64 = sext %60 (hasExternalUses)
%62:i64 = mulnsw %58, %61
%63:i64 = add %56, %62
%64:i64 = mulnsw %1, %8
%65:i32 = shl %11, 1:i32
%66:i64 = sext %65 (hasExternalUses)
%67:i64 = mulnsw %3, %66
%68:i64 = add %64, %67
%69:i64 = mulnsw %18, %14
%70:i64 = add %68, %69
%71:i32 = shl %23, 1:i32
%72:i64 = sext %71 (hasExternalUses)
%73:i64 = mulnsw %20, %72
%74:i64 = add %70, %73
%75:i64 = mulnsw %26, %33
%76:i64 = add %74, %75
%77:i32 = mul 19:i32, %29
%78:i64 = sext %77 (hasExternalUses)
%79:i32 = shl %36, 1:i32
%80:i64 = sext %79 (hasExternalUses)
%81:i64 = mulnsw %78, %80
%82:i64 = add %76, %81
%83:i64 = mulnsw %44, %40
%84:i64 = add %82, %83
%85:i32 = shl %50, 1:i32
%86:i64 = sext %85 (hasExternalUses)
%87:i64 = mulnsw %47, %86
%88:i64 = add %84, %87
%89:i64 = mulnsw %58, %54
%90:i64 = add %88, %89
%91:i32 = shl %5, 1:i32
%92:i64 = sext %91 (hasExternalUses)
%93:i64 = mulnsw %61, %92
%94:i64 = add %90, %93 (hasExternalUses)
%95:i64 = add 33554432:i64, %94 (hasExternalUses)
%96:i64 = ashr %95, 26:i64
%97:i64 = add %63, %96 (hasExternalUses)
%98:i64 = add 16777216:i64, %97 (hasExternalUses)
%99:i64 = and 4261412864:i64, %98
infer %99 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %300 = sub i64 %270, %299
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = add 1:i32, %31 (hasExternalUses)
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
%36:i32 = var
%37:i64 = sext %36 (hasExternalUses)
%38:i32 = var
%39:i32 = mul 19:i32, %38
%40:i64 = sext %39 (hasExternalUses)
%41:i64 = mulnsw %37, %40
%42:i64 = add %35, %41
%43:i32 = var
%44:i64 = sext %43 (hasExternalUses)
%45:i32 = var
%46:i32 = mul 19:i32, %45
%47:i64 = sext %46 (hasExternalUses)
%48:i64 = mulnsw %44, %47
%49:i64 = add %42, %48
%50:i32 = var
%51:i64 = sext %50 (hasExternalUses)
%52:i32 = var
%53:i32 = mul 19:i32, %52
%54:i64 = sext %53 (hasExternalUses)
%55:i64 = mulnsw %51, %54
%56:i64 = add %49, %55
%57:i32 = var
%58:i64 = sext %57 (hasExternalUses)
%59:i32 = var
%60:i32 = mul 19:i32, %59
%61:i64 = sext %60 (hasExternalUses)
%62:i64 = mulnsw %58, %61
%63:i64 = add %56, %62
%64:i64 = mulnsw %1, %8
%65:i32 = shl %11, 1:i32
%66:i64 = sext %65 (hasExternalUses)
%67:i64 = mulnsw %3, %66
%68:i64 = add %64, %67
%69:i64 = mulnsw %18, %14
%70:i64 = add %68, %69
%71:i32 = shl %23, 1:i32
%72:i64 = sext %71 (hasExternalUses)
%73:i64 = mulnsw %20, %72
%74:i64 = add %70, %73
%75:i64 = mulnsw %26, %33
%76:i64 = add %74, %75
%77:i32 = mul 19:i32, %29
%78:i64 = sext %77 (hasExternalUses)
%79:i32 = shl %36, 1:i32
%80:i64 = sext %79 (hasExternalUses)
%81:i64 = mulnsw %78, %80
%82:i64 = add %76, %81
%83:i64 = mulnsw %44, %40
%84:i64 = add %82, %83
%85:i32 = shl %50, 1:i32
%86:i64 = sext %85 (hasExternalUses)
%87:i64 = mulnsw %47, %86
%88:i64 = add %84, %87
%89:i64 = mulnsw %58, %54
%90:i64 = add %88, %89
%91:i32 = shl %5, 1:i32
%92:i64 = sext %91 (hasExternalUses)
%93:i64 = mulnsw %61, %92
%94:i64 = add %90, %93 (hasExternalUses)
%95:i64 = add 33554432:i64, %94 (hasExternalUses)
%96:i64 = ashr %95, 26:i64
%97:i64 = add %63, %96
%98:i64 = add 16777216:i64, %97 (hasExternalUses)
%99:i64 = and 4261412864:i64, %98
%100:i64 = sub %97, %99
infer %100 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %301 = add i64 %284, 33554432
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = add 1:i32, %14 (hasExternalUses)
%16:i64 = sext %15 (hasExternalUses)
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i32 = mul 19:i32, %19
%21:i64 = sext %20
%22:i32 = var
%23:i32 = shl %22, 1:i32
%24:i64 = sext %23 (hasExternalUses)
%25:i64 = mulnsw %21, %24
%26:i64 = add %18, %25
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i32 = var
%30:i32 = mul 19:i32, %29
%31:i64 = sext %30 (hasExternalUses)
%32:i64 = mulnsw %28, %31
%33:i64 = add %26, %32
%34:i32 = var
%35:i32 = mul 19:i32, %34
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i32 = shl %37, 1:i32
%39:i64 = sext %38 (hasExternalUses)
%40:i64 = mulnsw %36, %39
%41:i64 = add %33, %40
%42:i32 = var
%43:i64 = sext %42 (hasExternalUses)
%44:i32 = var
%45:i32 = mul 19:i32, %44
%46:i64 = sext %45 (hasExternalUses)
%47:i64 = mulnsw %43, %46
%48:i64 = add %41, %47
%49:i32 = var
%50:i32 = mul 19:i32, %49
%51:i64 = sext %50 (hasExternalUses)
%52:i32 = var
%53:i32 = shl %52, 1:i32
%54:i64 = sext %53 (hasExternalUses)
%55:i64 = mulnsw %51, %54
%56:i64 = add %48, %55
%57:i32 = var
%58:i64 = sext %57 (hasExternalUses)
%59:i32 = var
%60:i32 = mul 19:i32, %59
%61:i64 = sext %60 (hasExternalUses)
%62:i64 = mulnsw %58, %61
%63:i64 = add %56, %62
%64:i32 = var
%65:i32 = mul 19:i32, %64
%66:i64 = sext %65 (hasExternalUses)
%67:i32 = var
%68:i32 = shl %67, 1:i32
%69:i64 = sext %68 (hasExternalUses)
%70:i64 = mulnsw %66, %69
%71:i64 = add %63, %70
%72:i64 = sext %7 (hasExternalUses)
%73:i64 = mulnsw %72, %3
%74:i64 = mulnsw %6, %16
%75:i64 = add %73, %74
%76:i64 = sext %22 (hasExternalUses)
%77:i32 = mul 19:i32, %12
%78:i64 = sext %77
%79:i64 = mulnsw %76, %78
%80:i64 = add %75, %79
%81:i64 = mulnsw %28, %21
%82:i64 = add %80, %81
%83:i64 = sext %37 (hasExternalUses)
%84:i64 = mulnsw %83, %31
%85:i64 = add %82, %84
%86:i64 = mulnsw %43, %36
%87:i64 = add %85, %86
%88:i64 = sext %52 (hasExternalUses)
%89:i64 = mulnsw %88, %46
%90:i64 = add %87, %89
%91:i64 = mulnsw %58, %51
%92:i64 = add %90, %91
%93:i64 = sext %67 (hasExternalUses)
%94:i64 = mulnsw %93, %61
%95:i64 = add %92, %94
%96:i64 = mulnsw %1, %66
%97:i64 = add %95, %96
%98:i64 = mulnsw %3, %16
%99:i32 = mul 19:i32, %5
%100:i64 = sext %99
%101:i64 = mulnsw %100, %24
%102:i64 = add %98, %101
%103:i64 = mulnsw %28, %78
%104:i64 = add %102, %103
%105:i64 = mulnsw %21, %39
%106:i64 = add %104, %105
%107:i64 = mulnsw %43, %31
%108:i64 = add %106, %107
%109:i64 = mulnsw %36, %54
%110:i64 = add %108, %109
%111:i64 = mulnsw %58, %46
%112:i64 = add %110, %111
%113:i64 = mulnsw %51, %69
%114:i64 = add %112, %113
%115:i64 = mulnsw %1, %61
%116:i64 = add %114, %115
%117:i64 = mulnsw %66, %9
%118:i64 = add %116, %117 (hasExternalUses)
%119:i64 = add 33554432:i64, %118 (hasExternalUses)
%120:i64 = ashr %119, 26:i64
%121:i64 = add %97, %120 (hasExternalUses)
%122:i64 = add 16777216:i64, %121 (hasExternalUses)
%123:i64 = ashr %122, 25:i64
%124:i64 = add %71, %123 (hasExternalUses)
%125:i64 = add 33554432:i64, %124
infer %125 (demandedBits=1111111111111111111111111111111111111100000000000000000000000000)

; *****
; For LLVM instruction:
;  %302 = ashr i64 %301, 26
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = add 1:i32, %14 (hasExternalUses)
%16:i64 = sext %15 (hasExternalUses)
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i32 = mul 19:i32, %19
%21:i64 = sext %20
%22:i32 = var
%23:i32 = shl %22, 1:i32
%24:i64 = sext %23 (hasExternalUses)
%25:i64 = mulnsw %21, %24
%26:i64 = add %18, %25
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i32 = var
%30:i32 = mul 19:i32, %29
%31:i64 = sext %30 (hasExternalUses)
%32:i64 = mulnsw %28, %31
%33:i64 = add %26, %32
%34:i32 = var
%35:i32 = mul 19:i32, %34
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i32 = shl %37, 1:i32
%39:i64 = sext %38 (hasExternalUses)
%40:i64 = mulnsw %36, %39
%41:i64 = add %33, %40
%42:i32 = var
%43:i64 = sext %42 (hasExternalUses)
%44:i32 = var
%45:i32 = mul 19:i32, %44
%46:i64 = sext %45 (hasExternalUses)
%47:i64 = mulnsw %43, %46
%48:i64 = add %41, %47
%49:i32 = var
%50:i32 = mul 19:i32, %49
%51:i64 = sext %50 (hasExternalUses)
%52:i32 = var
%53:i32 = shl %52, 1:i32
%54:i64 = sext %53 (hasExternalUses)
%55:i64 = mulnsw %51, %54
%56:i64 = add %48, %55
%57:i32 = var
%58:i64 = sext %57 (hasExternalUses)
%59:i32 = var
%60:i32 = mul 19:i32, %59
%61:i64 = sext %60 (hasExternalUses)
%62:i64 = mulnsw %58, %61
%63:i64 = add %56, %62
%64:i32 = var
%65:i32 = mul 19:i32, %64
%66:i64 = sext %65 (hasExternalUses)
%67:i32 = var
%68:i32 = shl %67, 1:i32
%69:i64 = sext %68 (hasExternalUses)
%70:i64 = mulnsw %66, %69
%71:i64 = add %63, %70
%72:i64 = sext %7 (hasExternalUses)
%73:i64 = mulnsw %72, %3
%74:i64 = mulnsw %6, %16
%75:i64 = add %73, %74
%76:i64 = sext %22 (hasExternalUses)
%77:i32 = mul 19:i32, %12
%78:i64 = sext %77
%79:i64 = mulnsw %76, %78
%80:i64 = add %75, %79
%81:i64 = mulnsw %28, %21
%82:i64 = add %80, %81
%83:i64 = sext %37 (hasExternalUses)
%84:i64 = mulnsw %83, %31
%85:i64 = add %82, %84
%86:i64 = mulnsw %43, %36
%87:i64 = add %85, %86
%88:i64 = sext %52 (hasExternalUses)
%89:i64 = mulnsw %88, %46
%90:i64 = add %87, %89
%91:i64 = mulnsw %58, %51
%92:i64 = add %90, %91
%93:i64 = sext %67 (hasExternalUses)
%94:i64 = mulnsw %93, %61
%95:i64 = add %92, %94
%96:i64 = mulnsw %1, %66
%97:i64 = add %95, %96
%98:i64 = mulnsw %3, %16
%99:i32 = mul 19:i32, %5
%100:i64 = sext %99
%101:i64 = mulnsw %100, %24
%102:i64 = add %98, %101
%103:i64 = mulnsw %28, %78
%104:i64 = add %102, %103
%105:i64 = mulnsw %21, %39
%106:i64 = add %104, %105
%107:i64 = mulnsw %43, %31
%108:i64 = add %106, %107
%109:i64 = mulnsw %36, %54
%110:i64 = add %108, %109
%111:i64 = mulnsw %58, %46
%112:i64 = add %110, %111
%113:i64 = mulnsw %51, %69
%114:i64 = add %112, %113
%115:i64 = mulnsw %1, %61
%116:i64 = add %114, %115
%117:i64 = mulnsw %66, %9
%118:i64 = add %116, %117 (hasExternalUses)
%119:i64 = add 33554432:i64, %118 (hasExternalUses)
%120:i64 = ashr %119, 26:i64
%121:i64 = add %97, %120 (hasExternalUses)
%122:i64 = add 16777216:i64, %121 (hasExternalUses)
%123:i64 = ashr %122, 25:i64
%124:i64 = add %71, %123 (hasExternalUses)
%125:i64 = add 33554432:i64, %124 (hasExternalUses)
%126:i64 = ashr %125, 26:i64
infer %126

; *****
; For LLVM instruction:
;  %303 = add i64 %129, %140
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
infer %10

; *****
; For LLVM instruction:
;  %304 = add i64 %303, %118
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
infer %16

; *****
; For LLVM instruction:
;  %305 = add i64 %304, %101
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i32 = add 1:i32, %19 (hasExternalUses)
%21:i64 = sext %20 (hasExternalUses)
%22:i64 = mulnsw %18, %21
%23:i64 = add %16, %22
infer %23

; *****
; For LLVM instruction:
;  %306 = add i64 %305, %221
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i32 = add 1:i32, %19 (hasExternalUses)
%21:i64 = sext %20 (hasExternalUses)
%22:i64 = mulnsw %18, %21
%23:i64 = add %16, %22
%24:i32 = var
%25:i64 = sext %24 (hasExternalUses)
%26:i32 = var
%27:i32 = mul 19:i32, %26
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %25, %28
%30:i64 = add %23, %29
infer %30

; *****
; For LLVM instruction:
;  %307 = add i64 %306, %209
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i32 = add 1:i32, %19 (hasExternalUses)
%21:i64 = sext %20 (hasExternalUses)
%22:i64 = mulnsw %18, %21
%23:i64 = add %16, %22
%24:i32 = var
%25:i64 = sext %24 (hasExternalUses)
%26:i32 = var
%27:i32 = mul 19:i32, %26
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %25, %28
%30:i64 = add %23, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = mul 19:i32, %33
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
infer %37

; *****
; For LLVM instruction:
;  %308 = add i64 %307, %198
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i32 = add 1:i32, %19 (hasExternalUses)
%21:i64 = sext %20 (hasExternalUses)
%22:i64 = mulnsw %18, %21
%23:i64 = add %16, %22
%24:i32 = var
%25:i64 = sext %24 (hasExternalUses)
%26:i32 = var
%27:i32 = mul 19:i32, %26
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %25, %28
%30:i64 = add %23, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = mul 19:i32, %33
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i32 = mul 19:i32, %40
%42:i64 = sext %41 (hasExternalUses)
%43:i64 = mulnsw %39, %42
%44:i64 = add %37, %43
infer %44

; *****
; For LLVM instruction:
;  %309 = add i64 %308, %186
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i32 = add 1:i32, %19 (hasExternalUses)
%21:i64 = sext %20 (hasExternalUses)
%22:i64 = mulnsw %18, %21
%23:i64 = add %16, %22
%24:i32 = var
%25:i64 = sext %24 (hasExternalUses)
%26:i32 = var
%27:i32 = mul 19:i32, %26
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %25, %28
%30:i64 = add %23, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = mul 19:i32, %33
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i32 = mul 19:i32, %40
%42:i64 = sext %41 (hasExternalUses)
%43:i64 = mulnsw %39, %42
%44:i64 = add %37, %43
%45:i32 = var
%46:i64 = sext %45 (hasExternalUses)
%47:i32 = var
%48:i32 = mul 19:i32, %47
%49:i64 = sext %48 (hasExternalUses)
%50:i64 = mulnsw %46, %49
%51:i64 = add %44, %50
infer %51

; *****
; For LLVM instruction:
;  %310 = add i64 %309, %175
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i32 = add 1:i32, %19 (hasExternalUses)
%21:i64 = sext %20 (hasExternalUses)
%22:i64 = mulnsw %18, %21
%23:i64 = add %16, %22
%24:i32 = var
%25:i64 = sext %24 (hasExternalUses)
%26:i32 = var
%27:i32 = mul 19:i32, %26
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %25, %28
%30:i64 = add %23, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = mul 19:i32, %33
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i32 = mul 19:i32, %40
%42:i64 = sext %41 (hasExternalUses)
%43:i64 = mulnsw %39, %42
%44:i64 = add %37, %43
%45:i32 = var
%46:i64 = sext %45 (hasExternalUses)
%47:i32 = var
%48:i32 = mul 19:i32, %47
%49:i64 = sext %48 (hasExternalUses)
%50:i64 = mulnsw %46, %49
%51:i64 = add %44, %50
%52:i32 = var
%53:i64 = sext %52 (hasExternalUses)
%54:i32 = var
%55:i32 = mul 19:i32, %54
%56:i64 = sext %55 (hasExternalUses)
%57:i64 = mulnsw %53, %56
%58:i64 = add %51, %57
infer %58

; *****
; For LLVM instruction:
;  %311 = add i64 %310, %163
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i32 = add 1:i32, %19 (hasExternalUses)
%21:i64 = sext %20 (hasExternalUses)
%22:i64 = mulnsw %18, %21
%23:i64 = add %16, %22
%24:i32 = var
%25:i64 = sext %24 (hasExternalUses)
%26:i32 = var
%27:i32 = mul 19:i32, %26
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %25, %28
%30:i64 = add %23, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = mul 19:i32, %33
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i32 = mul 19:i32, %40
%42:i64 = sext %41 (hasExternalUses)
%43:i64 = mulnsw %39, %42
%44:i64 = add %37, %43
%45:i32 = var
%46:i64 = sext %45 (hasExternalUses)
%47:i32 = var
%48:i32 = mul 19:i32, %47
%49:i64 = sext %48 (hasExternalUses)
%50:i64 = mulnsw %46, %49
%51:i64 = add %44, %50
%52:i32 = var
%53:i64 = sext %52 (hasExternalUses)
%54:i32 = var
%55:i32 = mul 19:i32, %54
%56:i64 = sext %55 (hasExternalUses)
%57:i64 = mulnsw %53, %56
%58:i64 = add %51, %57
%59:i32 = var
%60:i64 = sext %59 (hasExternalUses)
%61:i32 = var
%62:i32 = mul 19:i32, %61
%63:i64 = sext %62 (hasExternalUses)
%64:i64 = mulnsw %60, %63
%65:i64 = add %58, %64
infer %65

; *****
; For LLVM instruction:
;  %312 = add i64 %311, %302
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i32 = add 1:i32, %19 (hasExternalUses)
%21:i64 = sext %20 (hasExternalUses)
%22:i64 = mulnsw %18, %21
%23:i64 = add %16, %22
%24:i32 = var
%25:i64 = sext %24 (hasExternalUses)
%26:i32 = var
%27:i32 = mul 19:i32, %26
%28:i64 = sext %27
%29:i64 = mulnsw %25, %28
%30:i64 = add %23, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = mul 19:i32, %33
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i32 = mul 19:i32, %40
%42:i64 = sext %41 (hasExternalUses)
%43:i64 = mulnsw %39, %42
%44:i64 = add %37, %43
%45:i32 = var
%46:i64 = sext %45 (hasExternalUses)
%47:i32 = var
%48:i32 = mul 19:i32, %47
%49:i64 = sext %48 (hasExternalUses)
%50:i64 = mulnsw %46, %49
%51:i64 = add %44, %50
%52:i32 = var
%53:i64 = sext %52 (hasExternalUses)
%54:i32 = var
%55:i32 = mul 19:i32, %54
%56:i64 = sext %55 (hasExternalUses)
%57:i64 = mulnsw %53, %56
%58:i64 = add %51, %57
%59:i32 = var
%60:i64 = sext %59 (hasExternalUses)
%61:i32 = var
%62:i32 = mul 19:i32, %61
%63:i64 = sext %62 (hasExternalUses)
%64:i64 = mulnsw %60, %63
%65:i64 = add %58, %64
%66:i64 = mulnsw %1, %8
%67:i32 = shl %11, 1:i32
%68:i64 = sext %67 (hasExternalUses)
%69:i64 = mulnsw %3, %68
%70:i64 = add %66, %69
%71:i64 = mulnsw %14, %21
%72:i64 = add %70, %71
%73:i32 = mul 19:i32, %17
%74:i64 = sext %73
%75:i32 = shl %24, 1:i32
%76:i64 = sext %75 (hasExternalUses)
%77:i64 = mulnsw %74, %76
%78:i64 = add %72, %77
%79:i64 = mulnsw %32, %28
%80:i64 = add %78, %79
%81:i32 = shl %38, 1:i32
%82:i64 = sext %81 (hasExternalUses)
%83:i64 = mulnsw %35, %82
%84:i64 = add %80, %83
%85:i64 = mulnsw %46, %42
%86:i64 = add %84, %85
%87:i32 = shl %52, 1:i32
%88:i64 = sext %87 (hasExternalUses)
%89:i64 = mulnsw %49, %88
%90:i64 = add %86, %89
%91:i64 = mulnsw %60, %56
%92:i64 = add %90, %91
%93:i32 = shl %5, 1:i32
%94:i64 = sext %93 (hasExternalUses)
%95:i64 = mulnsw %63, %94
%96:i64 = add %92, %95
%97:i64 = mulnsw %12, %8
%98:i64 = mulnsw %3, %21
%99:i64 = add %97, %98
%100:i32 = mul 19:i32, %13
%101:i64 = sext %100
%102:i64 = mulnsw %25, %101
%103:i64 = add %99, %102
%104:i64 = mulnsw %32, %74
%105:i64 = add %103, %104
%106:i64 = mulnsw %39, %28
%107:i64 = add %105, %106
%108:i64 = mulnsw %46, %35
%109:i64 = add %107, %108
%110:i64 = mulnsw %53, %42
%111:i64 = add %109, %110
%112:i64 = mulnsw %60, %49
%113:i64 = add %111, %112
%114:i64 = mulnsw %6, %56
%115:i64 = add %113, %114
%116:i64 = mulnsw %1, %63
%117:i64 = add %115, %116
%118:i64 = mulnsw %8, %21
%119:i32 = mul 19:i32, %2
%120:i64 = sext %119
%121:i64 = mulnsw %120, %76
%122:i64 = add %118, %121
%123:i64 = mulnsw %32, %101
%124:i64 = add %122, %123
%125:i64 = mulnsw %74, %82
%126:i64 = add %124, %125
%127:i64 = mulnsw %46, %28
%128:i64 = add %126, %127
%129:i64 = mulnsw %35, %88
%130:i64 = add %128, %129
%131:i64 = mulnsw %60, %42
%132:i64 = add %130, %131
%133:i64 = mulnsw %49, %94
%134:i64 = add %132, %133
%135:i64 = mulnsw %1, %56
%136:i64 = add %134, %135
%137:i64 = mulnsw %63, %68
%138:i64 = add %136, %137 (hasExternalUses)
%139:i64 = add 33554432:i64, %138 (hasExternalUses)
%140:i64 = ashr %139, 26:i64
%141:i64 = add %117, %140 (hasExternalUses)
%142:i64 = add 16777216:i64, %141 (hasExternalUses)
%143:i64 = ashr %142, 25:i64
%144:i64 = add %96, %143 (hasExternalUses)
%145:i64 = add 33554432:i64, %144 (hasExternalUses)
%146:i64 = ashr %145, 26:i64
%147:i64 = add %65, %146
infer %147

; *****
; For LLVM instruction:
;  %313 = and i64 %301, 4227858432
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = add 1:i32, %14 (hasExternalUses)
%16:i64 = sext %15 (hasExternalUses)
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i32 = mul 19:i32, %19
%21:i64 = sext %20
%22:i32 = var
%23:i32 = shl %22, 1:i32
%24:i64 = sext %23 (hasExternalUses)
%25:i64 = mulnsw %21, %24
%26:i64 = add %18, %25
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i32 = var
%30:i32 = mul 19:i32, %29
%31:i64 = sext %30 (hasExternalUses)
%32:i64 = mulnsw %28, %31
%33:i64 = add %26, %32
%34:i32 = var
%35:i32 = mul 19:i32, %34
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i32 = shl %37, 1:i32
%39:i64 = sext %38 (hasExternalUses)
%40:i64 = mulnsw %36, %39
%41:i64 = add %33, %40
%42:i32 = var
%43:i64 = sext %42 (hasExternalUses)
%44:i32 = var
%45:i32 = mul 19:i32, %44
%46:i64 = sext %45 (hasExternalUses)
%47:i64 = mulnsw %43, %46
%48:i64 = add %41, %47
%49:i32 = var
%50:i32 = mul 19:i32, %49
%51:i64 = sext %50 (hasExternalUses)
%52:i32 = var
%53:i32 = shl %52, 1:i32
%54:i64 = sext %53 (hasExternalUses)
%55:i64 = mulnsw %51, %54
%56:i64 = add %48, %55
%57:i32 = var
%58:i64 = sext %57 (hasExternalUses)
%59:i32 = var
%60:i32 = mul 19:i32, %59
%61:i64 = sext %60 (hasExternalUses)
%62:i64 = mulnsw %58, %61
%63:i64 = add %56, %62
%64:i32 = var
%65:i32 = mul 19:i32, %64
%66:i64 = sext %65 (hasExternalUses)
%67:i32 = var
%68:i32 = shl %67, 1:i32
%69:i64 = sext %68 (hasExternalUses)
%70:i64 = mulnsw %66, %69
%71:i64 = add %63, %70
%72:i64 = sext %7 (hasExternalUses)
%73:i64 = mulnsw %72, %3
%74:i64 = mulnsw %6, %16
%75:i64 = add %73, %74
%76:i64 = sext %22 (hasExternalUses)
%77:i32 = mul 19:i32, %12
%78:i64 = sext %77
%79:i64 = mulnsw %76, %78
%80:i64 = add %75, %79
%81:i64 = mulnsw %28, %21
%82:i64 = add %80, %81
%83:i64 = sext %37 (hasExternalUses)
%84:i64 = mulnsw %83, %31
%85:i64 = add %82, %84
%86:i64 = mulnsw %43, %36
%87:i64 = add %85, %86
%88:i64 = sext %52 (hasExternalUses)
%89:i64 = mulnsw %88, %46
%90:i64 = add %87, %89
%91:i64 = mulnsw %58, %51
%92:i64 = add %90, %91
%93:i64 = sext %67 (hasExternalUses)
%94:i64 = mulnsw %93, %61
%95:i64 = add %92, %94
%96:i64 = mulnsw %1, %66
%97:i64 = add %95, %96
%98:i64 = mulnsw %3, %16
%99:i32 = mul 19:i32, %5
%100:i64 = sext %99
%101:i64 = mulnsw %100, %24
%102:i64 = add %98, %101
%103:i64 = mulnsw %28, %78
%104:i64 = add %102, %103
%105:i64 = mulnsw %21, %39
%106:i64 = add %104, %105
%107:i64 = mulnsw %43, %31
%108:i64 = add %106, %107
%109:i64 = mulnsw %36, %54
%110:i64 = add %108, %109
%111:i64 = mulnsw %58, %46
%112:i64 = add %110, %111
%113:i64 = mulnsw %51, %69
%114:i64 = add %112, %113
%115:i64 = mulnsw %1, %61
%116:i64 = add %114, %115
%117:i64 = mulnsw %66, %9
%118:i64 = add %116, %117 (hasExternalUses)
%119:i64 = add 33554432:i64, %118 (hasExternalUses)
%120:i64 = ashr %119, 26:i64
%121:i64 = add %97, %120 (hasExternalUses)
%122:i64 = add 16777216:i64, %121 (hasExternalUses)
%123:i64 = ashr %122, 25:i64
%124:i64 = add %71, %123 (hasExternalUses)
%125:i64 = add 33554432:i64, %124 (hasExternalUses)
%126:i64 = and 4227858432:i64, %125
infer %126 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %314 = sub i64 %284, %313
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = add 1:i32, %14 (hasExternalUses)
%16:i64 = sext %15 (hasExternalUses)
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i32 = mul 19:i32, %19
%21:i64 = sext %20
%22:i32 = var
%23:i32 = shl %22, 1:i32
%24:i64 = sext %23 (hasExternalUses)
%25:i64 = mulnsw %21, %24
%26:i64 = add %18, %25
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i32 = var
%30:i32 = mul 19:i32, %29
%31:i64 = sext %30 (hasExternalUses)
%32:i64 = mulnsw %28, %31
%33:i64 = add %26, %32
%34:i32 = var
%35:i32 = mul 19:i32, %34
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i32 = shl %37, 1:i32
%39:i64 = sext %38 (hasExternalUses)
%40:i64 = mulnsw %36, %39
%41:i64 = add %33, %40
%42:i32 = var
%43:i64 = sext %42 (hasExternalUses)
%44:i32 = var
%45:i32 = mul 19:i32, %44
%46:i64 = sext %45 (hasExternalUses)
%47:i64 = mulnsw %43, %46
%48:i64 = add %41, %47
%49:i32 = var
%50:i32 = mul 19:i32, %49
%51:i64 = sext %50 (hasExternalUses)
%52:i32 = var
%53:i32 = shl %52, 1:i32
%54:i64 = sext %53 (hasExternalUses)
%55:i64 = mulnsw %51, %54
%56:i64 = add %48, %55
%57:i32 = var
%58:i64 = sext %57 (hasExternalUses)
%59:i32 = var
%60:i32 = mul 19:i32, %59
%61:i64 = sext %60 (hasExternalUses)
%62:i64 = mulnsw %58, %61
%63:i64 = add %56, %62
%64:i32 = var
%65:i32 = mul 19:i32, %64
%66:i64 = sext %65 (hasExternalUses)
%67:i32 = var
%68:i32 = shl %67, 1:i32
%69:i64 = sext %68 (hasExternalUses)
%70:i64 = mulnsw %66, %69
%71:i64 = add %63, %70
%72:i64 = sext %7 (hasExternalUses)
%73:i64 = mulnsw %72, %3
%74:i64 = mulnsw %6, %16
%75:i64 = add %73, %74
%76:i64 = sext %22 (hasExternalUses)
%77:i32 = mul 19:i32, %12
%78:i64 = sext %77
%79:i64 = mulnsw %76, %78
%80:i64 = add %75, %79
%81:i64 = mulnsw %28, %21
%82:i64 = add %80, %81
%83:i64 = sext %37 (hasExternalUses)
%84:i64 = mulnsw %83, %31
%85:i64 = add %82, %84
%86:i64 = mulnsw %43, %36
%87:i64 = add %85, %86
%88:i64 = sext %52 (hasExternalUses)
%89:i64 = mulnsw %88, %46
%90:i64 = add %87, %89
%91:i64 = mulnsw %58, %51
%92:i64 = add %90, %91
%93:i64 = sext %67 (hasExternalUses)
%94:i64 = mulnsw %93, %61
%95:i64 = add %92, %94
%96:i64 = mulnsw %1, %66
%97:i64 = add %95, %96
%98:i64 = mulnsw %3, %16
%99:i32 = mul 19:i32, %5
%100:i64 = sext %99
%101:i64 = mulnsw %100, %24
%102:i64 = add %98, %101
%103:i64 = mulnsw %28, %78
%104:i64 = add %102, %103
%105:i64 = mulnsw %21, %39
%106:i64 = add %104, %105
%107:i64 = mulnsw %43, %31
%108:i64 = add %106, %107
%109:i64 = mulnsw %36, %54
%110:i64 = add %108, %109
%111:i64 = mulnsw %58, %46
%112:i64 = add %110, %111
%113:i64 = mulnsw %51, %69
%114:i64 = add %112, %113
%115:i64 = mulnsw %1, %61
%116:i64 = add %114, %115
%117:i64 = mulnsw %66, %9
%118:i64 = add %116, %117 (hasExternalUses)
%119:i64 = add 33554432:i64, %118 (hasExternalUses)
%120:i64 = ashr %119, 26:i64
%121:i64 = add %97, %120 (hasExternalUses)
%122:i64 = add 16777216:i64, %121 (hasExternalUses)
%123:i64 = ashr %122, 25:i64
%124:i64 = add %71, %123
%125:i64 = add 33554432:i64, %124 (hasExternalUses)
%126:i64 = and 4227858432:i64, %125
%127:i64 = sub %124, %126
infer %127 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %315 = add i64 %298, 33554432
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %26, %28
%30:i64 = add %24, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = shl %33, 1:i32
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i32 = add 1:i32, %40 (hasExternalUses)
%42:i64 = sext %41 (hasExternalUses)
%43:i64 = mulnsw %39, %42
%44:i64 = add %37, %43
%45:i32 = var
%46:i32 = mul 19:i32, %45
%47:i64 = sext %46 (hasExternalUses)
%48:i32 = var
%49:i32 = shl %48, 1:i32
%50:i64 = sext %49 (hasExternalUses)
%51:i64 = mulnsw %47, %50
%52:i64 = add %44, %51
%53:i32 = var
%54:i64 = sext %53 (hasExternalUses)
%55:i32 = var
%56:i32 = mul 19:i32, %55
%57:i64 = sext %56 (hasExternalUses)
%58:i64 = mulnsw %54, %57
%59:i64 = add %52, %58
%60:i32 = var
%61:i32 = mul 19:i32, %60
%62:i64 = sext %61 (hasExternalUses)
%63:i32 = var
%64:i32 = shl %63, 1:i32
%65:i64 = sext %64 (hasExternalUses)
%66:i64 = mulnsw %62, %65
%67:i64 = add %59, %66
%68:i64 = mulnsw %13, %6
%69:i64 = sext %7 (hasExternalUses)
%70:i64 = mulnsw %69, %3
%71:i64 = add %68, %70
%72:i64 = sext %20 (hasExternalUses)
%73:i64 = mulnsw %72, %15
%74:i64 = add %71, %73
%75:i64 = mulnsw %26, %19
%76:i64 = add %74, %75
%77:i64 = sext %33 (hasExternalUses)
%78:i64 = mulnsw %77, %28
%79:i64 = add %76, %78
%80:i64 = mulnsw %32, %42
%81:i64 = add %79, %80
%82:i64 = sext %48 (hasExternalUses)
%83:i32 = mul 19:i32, %38
%84:i64 = sext %83 (hasExternalUses)
%85:i64 = mulnsw %82, %84
%86:i64 = add %81, %85
%87:i64 = mulnsw %54, %47
%88:i64 = add %86, %87
%89:i64 = sext %63 (hasExternalUses)
%90:i64 = mulnsw %89, %57
%91:i64 = add %88, %90
%92:i64 = mulnsw %1, %62
%93:i64 = add %91, %92
%94:i64 = mulnsw %13, %3
%95:i64 = mulnsw %6, %22
%96:i64 = add %94, %95
%97:i64 = mulnsw %26, %15
%98:i64 = add %96, %97
%99:i64 = mulnsw %19, %35
%100:i64 = add %98, %99
%101:i64 = mulnsw %28, %42
%102:i64 = add %100, %101
%103:i32 = mul 19:i32, %31
%104:i64 = sext %103 (hasExternalUses)
%105:i64 = mulnsw %104, %50
%106:i64 = add %102, %105
%107:i64 = mulnsw %54, %84
%108:i64 = add %106, %107
%109:i64 = mulnsw %47, %65
%110:i64 = add %108, %109
%111:i64 = mulnsw %1, %57
%112:i64 = add %110, %111
%113:i64 = mulnsw %62, %9
%114:i64 = add %112, %113 (hasExternalUses)
%115:i64 = add 33554432:i64, %114 (hasExternalUses)
%116:i64 = ashr %115, 26:i64
%117:i64 = add %93, %116 (hasExternalUses)
%118:i64 = add 16777216:i64, %117 (hasExternalUses)
%119:i64 = ashr %118, 25:i64
%120:i64 = add %67, %119 (hasExternalUses)
%121:i64 = add 33554432:i64, %120
infer %121 (demandedBits=1111111111111111111111111111111111111100000000000000000000000000)

; *****
; For LLVM instruction:
;  %316 = ashr i64 %315, 26
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %26, %28
%30:i64 = add %24, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = shl %33, 1:i32
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i32 = add 1:i32, %40 (hasExternalUses)
%42:i64 = sext %41 (hasExternalUses)
%43:i64 = mulnsw %39, %42
%44:i64 = add %37, %43
%45:i32 = var
%46:i32 = mul 19:i32, %45
%47:i64 = sext %46 (hasExternalUses)
%48:i32 = var
%49:i32 = shl %48, 1:i32
%50:i64 = sext %49 (hasExternalUses)
%51:i64 = mulnsw %47, %50
%52:i64 = add %44, %51
%53:i32 = var
%54:i64 = sext %53 (hasExternalUses)
%55:i32 = var
%56:i32 = mul 19:i32, %55
%57:i64 = sext %56 (hasExternalUses)
%58:i64 = mulnsw %54, %57
%59:i64 = add %52, %58
%60:i32 = var
%61:i32 = mul 19:i32, %60
%62:i64 = sext %61 (hasExternalUses)
%63:i32 = var
%64:i32 = shl %63, 1:i32
%65:i64 = sext %64 (hasExternalUses)
%66:i64 = mulnsw %62, %65
%67:i64 = add %59, %66
%68:i64 = mulnsw %13, %6
%69:i64 = sext %7 (hasExternalUses)
%70:i64 = mulnsw %69, %3
%71:i64 = add %68, %70
%72:i64 = sext %20 (hasExternalUses)
%73:i64 = mulnsw %72, %15
%74:i64 = add %71, %73
%75:i64 = mulnsw %26, %19
%76:i64 = add %74, %75
%77:i64 = sext %33 (hasExternalUses)
%78:i64 = mulnsw %77, %28
%79:i64 = add %76, %78
%80:i64 = mulnsw %32, %42
%81:i64 = add %79, %80
%82:i64 = sext %48 (hasExternalUses)
%83:i32 = mul 19:i32, %38
%84:i64 = sext %83 (hasExternalUses)
%85:i64 = mulnsw %82, %84
%86:i64 = add %81, %85
%87:i64 = mulnsw %54, %47
%88:i64 = add %86, %87
%89:i64 = sext %63 (hasExternalUses)
%90:i64 = mulnsw %89, %57
%91:i64 = add %88, %90
%92:i64 = mulnsw %1, %62
%93:i64 = add %91, %92
%94:i64 = mulnsw %13, %3
%95:i64 = mulnsw %6, %22
%96:i64 = add %94, %95
%97:i64 = mulnsw %26, %15
%98:i64 = add %96, %97
%99:i64 = mulnsw %19, %35
%100:i64 = add %98, %99
%101:i64 = mulnsw %28, %42
%102:i64 = add %100, %101
%103:i32 = mul 19:i32, %31
%104:i64 = sext %103 (hasExternalUses)
%105:i64 = mulnsw %104, %50
%106:i64 = add %102, %105
%107:i64 = mulnsw %54, %84
%108:i64 = add %106, %107
%109:i64 = mulnsw %47, %65
%110:i64 = add %108, %109
%111:i64 = mulnsw %1, %57
%112:i64 = add %110, %111
%113:i64 = mulnsw %62, %9
%114:i64 = add %112, %113 (hasExternalUses)
%115:i64 = add 33554432:i64, %114 (hasExternalUses)
%116:i64 = ashr %115, 26:i64
%117:i64 = add %93, %116 (hasExternalUses)
%118:i64 = add 16777216:i64, %117 (hasExternalUses)
%119:i64 = ashr %118, 25:i64
%120:i64 = add %67, %119 (hasExternalUses)
%121:i64 = add 33554432:i64, %120 (hasExternalUses)
%122:i64 = ashr %121, 26:i64
infer %122

; *****
; For LLVM instruction:
;  %317 = add i64 %179, %190
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
infer %10

; *****
; For LLVM instruction:
;  %318 = add i64 %317, %168
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
infer %16

; *****
; For LLVM instruction:
;  %319 = add i64 %318, %156
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
infer %22

; *****
; For LLVM instruction:
;  %320 = add i64 %319, %145
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
infer %28

; *****
; For LLVM instruction:
;  %321 = add i64 %320, %133
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i64 = mulnsw %30, %32
%34:i64 = add %28, %33
infer %34

; *****
; For LLVM instruction:
;  %322 = add i64 %321, %122
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i64 = mulnsw %30, %32
%34:i64 = add %28, %33
%35:i32 = var
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i64 = sext %37 (hasExternalUses)
%39:i64 = mulnsw %36, %38
%40:i64 = add %34, %39
infer %40

; *****
; For LLVM instruction:
;  %323 = add i64 %322, %109
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i64 = mulnsw %30, %32
%34:i64 = add %28, %33
%35:i32 = var
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i64 = sext %37 (hasExternalUses)
%39:i64 = mulnsw %36, %38
%40:i64 = add %34, %39
%41:i32 = var
%42:i64 = sext %41 (hasExternalUses)
%43:i32 = var
%44:i32 = add 1:i32, %43 (hasExternalUses)
%45:i64 = sext %44 (hasExternalUses)
%46:i64 = mulnsw %42, %45
%47:i64 = add %40, %46
infer %47

; *****
; For LLVM instruction:
;  %324 = add i64 %323, %225
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i64 = mulnsw %30, %32
%34:i64 = add %28, %33
%35:i32 = var
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i64 = sext %37 (hasExternalUses)
%39:i64 = mulnsw %36, %38
%40:i64 = add %34, %39
%41:i32 = var
%42:i64 = sext %41 (hasExternalUses)
%43:i32 = var
%44:i32 = add 1:i32, %43 (hasExternalUses)
%45:i64 = sext %44 (hasExternalUses)
%46:i64 = mulnsw %42, %45
%47:i64 = add %40, %46
%48:i32 = var
%49:i64 = sext %48 (hasExternalUses)
%50:i32 = var
%51:i32 = mul 19:i32, %50
%52:i64 = sext %51 (hasExternalUses)
%53:i64 = mulnsw %49, %52
%54:i64 = add %47, %53
infer %54

; *****
; For LLVM instruction:
;  %325 = add i64 %324, %213
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i64 = mulnsw %30, %32
%34:i64 = add %28, %33
%35:i32 = var
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i64 = sext %37 (hasExternalUses)
%39:i64 = mulnsw %36, %38
%40:i64 = add %34, %39
%41:i32 = var
%42:i64 = sext %41 (hasExternalUses)
%43:i32 = var
%44:i32 = add 1:i32, %43 (hasExternalUses)
%45:i64 = sext %44 (hasExternalUses)
%46:i64 = mulnsw %42, %45
%47:i64 = add %40, %46
%48:i32 = var
%49:i64 = sext %48 (hasExternalUses)
%50:i32 = var
%51:i32 = mul 19:i32, %50
%52:i64 = sext %51 (hasExternalUses)
%53:i64 = mulnsw %49, %52
%54:i64 = add %47, %53
%55:i32 = var
%56:i64 = sext %55 (hasExternalUses)
%57:i32 = var
%58:i32 = mul 19:i32, %57
%59:i64 = sext %58 (hasExternalUses)
%60:i64 = mulnsw %56, %59
%61:i64 = add %54, %60
infer %61

; *****
; For LLVM instruction:
;  %326 = add i64 %325, %316
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i64 = mulnsw %30, %32
%34:i64 = add %28, %33
%35:i32 = var
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i64 = sext %37 (hasExternalUses)
%39:i64 = mulnsw %36, %38
%40:i64 = add %34, %39
%41:i32 = var
%42:i64 = sext %41 (hasExternalUses)
%43:i32 = var
%44:i32 = add 1:i32, %43 (hasExternalUses)
%45:i64 = sext %44 (hasExternalUses)
%46:i64 = mulnsw %42, %45
%47:i64 = add %40, %46
%48:i32 = var
%49:i64 = sext %48 (hasExternalUses)
%50:i32 = var
%51:i32 = mul 19:i32, %50
%52:i64 = sext %51 (hasExternalUses)
%53:i64 = mulnsw %49, %52
%54:i64 = add %47, %53
%55:i32 = var
%56:i64 = sext %55 (hasExternalUses)
%57:i32 = var
%58:i32 = mul 19:i32, %57
%59:i64 = sext %58 (hasExternalUses)
%60:i64 = mulnsw %56, %59
%61:i64 = add %54, %60
%62:i64 = mulnsw %1, %8
%63:i32 = shl %11, 1:i32
%64:i64 = sext %63 (hasExternalUses)
%65:i64 = mulnsw %3, %64
%66:i64 = add %62, %65
%67:i64 = mulnsw %18, %14
%68:i64 = add %66, %67
%69:i32 = shl %23, 1:i32
%70:i64 = sext %69 (hasExternalUses)
%71:i64 = mulnsw %20, %70
%72:i64 = add %68, %71
%73:i64 = mulnsw %30, %26
%74:i64 = add %72, %73
%75:i32 = shl %35, 1:i32
%76:i64 = sext %75 (hasExternalUses)
%77:i64 = mulnsw %32, %76
%78:i64 = add %74, %77
%79:i64 = mulnsw %38, %45
%80:i64 = add %78, %79
%81:i32 = mul 19:i32, %41
%82:i64 = sext %81 (hasExternalUses)
%83:i32 = shl %48, 1:i32
%84:i64 = sext %83 (hasExternalUses)
%85:i64 = mulnsw %82, %84
%86:i64 = add %80, %85
%87:i64 = mulnsw %56, %52
%88:i64 = add %86, %87
%89:i32 = shl %5, 1:i32
%90:i64 = sext %89 (hasExternalUses)
%91:i64 = mulnsw %59, %90
%92:i64 = add %88, %91
%93:i64 = mulnsw %18, %3
%94:i64 = mulnsw %12, %8
%95:i64 = add %93, %94
%96:i64 = mulnsw %24, %14
%97:i64 = add %95, %96
%98:i64 = mulnsw %30, %20
%99:i64 = add %97, %98
%100:i64 = mulnsw %36, %26
%101:i64 = add %99, %100
%102:i64 = mulnsw %32, %45
%103:i64 = add %101, %102
%104:i32 = mul 19:i32, %37
%105:i64 = sext %104 (hasExternalUses)
%106:i64 = mulnsw %49, %105
%107:i64 = add %103, %106
%108:i64 = mulnsw %56, %82
%109:i64 = add %107, %108
%110:i64 = mulnsw %6, %52
%111:i64 = add %109, %110
%112:i64 = mulnsw %1, %59
%113:i64 = add %111, %112
%114:i64 = mulnsw %18, %8
%115:i64 = mulnsw %3, %70
%116:i64 = add %114, %115
%117:i64 = mulnsw %30, %14
%118:i64 = add %116, %117
%119:i64 = mulnsw %20, %76
%120:i64 = add %118, %119
%121:i64 = mulnsw %26, %45
%122:i64 = add %120, %121
%123:i32 = mul 19:i32, %31
%124:i64 = sext %123 (hasExternalUses)
%125:i64 = mulnsw %124, %84
%126:i64 = add %122, %125
%127:i64 = mulnsw %56, %105
%128:i64 = add %126, %127
%129:i64 = mulnsw %82, %90
%130:i64 = add %128, %129
%131:i64 = mulnsw %1, %52
%132:i64 = add %130, %131
%133:i64 = mulnsw %59, %64
%134:i64 = add %132, %133 (hasExternalUses)
%135:i64 = add 33554432:i64, %134 (hasExternalUses)
%136:i64 = ashr %135, 26:i64
%137:i64 = add %113, %136 (hasExternalUses)
%138:i64 = add 16777216:i64, %137 (hasExternalUses)
%139:i64 = ashr %138, 25:i64
%140:i64 = add %92, %139 (hasExternalUses)
%141:i64 = add 33554432:i64, %140 (hasExternalUses)
%142:i64 = ashr %141, 26:i64
%143:i64 = add %61, %142
infer %143

; *****
; For LLVM instruction:
;  %327 = and i64 %315, 4227858432
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %26, %28
%30:i64 = add %24, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = shl %33, 1:i32
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i32 = add 1:i32, %40 (hasExternalUses)
%42:i64 = sext %41 (hasExternalUses)
%43:i64 = mulnsw %39, %42
%44:i64 = add %37, %43
%45:i32 = var
%46:i32 = mul 19:i32, %45
%47:i64 = sext %46 (hasExternalUses)
%48:i32 = var
%49:i32 = shl %48, 1:i32
%50:i64 = sext %49 (hasExternalUses)
%51:i64 = mulnsw %47, %50
%52:i64 = add %44, %51
%53:i32 = var
%54:i64 = sext %53 (hasExternalUses)
%55:i32 = var
%56:i32 = mul 19:i32, %55
%57:i64 = sext %56 (hasExternalUses)
%58:i64 = mulnsw %54, %57
%59:i64 = add %52, %58
%60:i32 = var
%61:i32 = mul 19:i32, %60
%62:i64 = sext %61 (hasExternalUses)
%63:i32 = var
%64:i32 = shl %63, 1:i32
%65:i64 = sext %64 (hasExternalUses)
%66:i64 = mulnsw %62, %65
%67:i64 = add %59, %66
%68:i64 = mulnsw %13, %6
%69:i64 = sext %7 (hasExternalUses)
%70:i64 = mulnsw %69, %3
%71:i64 = add %68, %70
%72:i64 = sext %20 (hasExternalUses)
%73:i64 = mulnsw %72, %15
%74:i64 = add %71, %73
%75:i64 = mulnsw %26, %19
%76:i64 = add %74, %75
%77:i64 = sext %33 (hasExternalUses)
%78:i64 = mulnsw %77, %28
%79:i64 = add %76, %78
%80:i64 = mulnsw %32, %42
%81:i64 = add %79, %80
%82:i64 = sext %48 (hasExternalUses)
%83:i32 = mul 19:i32, %38
%84:i64 = sext %83 (hasExternalUses)
%85:i64 = mulnsw %82, %84
%86:i64 = add %81, %85
%87:i64 = mulnsw %54, %47
%88:i64 = add %86, %87
%89:i64 = sext %63 (hasExternalUses)
%90:i64 = mulnsw %89, %57
%91:i64 = add %88, %90
%92:i64 = mulnsw %1, %62
%93:i64 = add %91, %92
%94:i64 = mulnsw %13, %3
%95:i64 = mulnsw %6, %22
%96:i64 = add %94, %95
%97:i64 = mulnsw %26, %15
%98:i64 = add %96, %97
%99:i64 = mulnsw %19, %35
%100:i64 = add %98, %99
%101:i64 = mulnsw %28, %42
%102:i64 = add %100, %101
%103:i32 = mul 19:i32, %31
%104:i64 = sext %103 (hasExternalUses)
%105:i64 = mulnsw %104, %50
%106:i64 = add %102, %105
%107:i64 = mulnsw %54, %84
%108:i64 = add %106, %107
%109:i64 = mulnsw %47, %65
%110:i64 = add %108, %109
%111:i64 = mulnsw %1, %57
%112:i64 = add %110, %111
%113:i64 = mulnsw %62, %9
%114:i64 = add %112, %113 (hasExternalUses)
%115:i64 = add 33554432:i64, %114 (hasExternalUses)
%116:i64 = ashr %115, 26:i64
%117:i64 = add %93, %116 (hasExternalUses)
%118:i64 = add 16777216:i64, %117 (hasExternalUses)
%119:i64 = ashr %118, 25:i64
%120:i64 = add %67, %119 (hasExternalUses)
%121:i64 = add 33554432:i64, %120 (hasExternalUses)
%122:i64 = and 4227858432:i64, %121
infer %122 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %328 = sub i64 %298, %327
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %26, %28
%30:i64 = add %24, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = shl %33, 1:i32
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i32 = add 1:i32, %40 (hasExternalUses)
%42:i64 = sext %41 (hasExternalUses)
%43:i64 = mulnsw %39, %42
%44:i64 = add %37, %43
%45:i32 = var
%46:i32 = mul 19:i32, %45
%47:i64 = sext %46 (hasExternalUses)
%48:i32 = var
%49:i32 = shl %48, 1:i32
%50:i64 = sext %49 (hasExternalUses)
%51:i64 = mulnsw %47, %50
%52:i64 = add %44, %51
%53:i32 = var
%54:i64 = sext %53 (hasExternalUses)
%55:i32 = var
%56:i32 = mul 19:i32, %55
%57:i64 = sext %56 (hasExternalUses)
%58:i64 = mulnsw %54, %57
%59:i64 = add %52, %58
%60:i32 = var
%61:i32 = mul 19:i32, %60
%62:i64 = sext %61 (hasExternalUses)
%63:i32 = var
%64:i32 = shl %63, 1:i32
%65:i64 = sext %64 (hasExternalUses)
%66:i64 = mulnsw %62, %65
%67:i64 = add %59, %66
%68:i64 = mulnsw %13, %6
%69:i64 = sext %7 (hasExternalUses)
%70:i64 = mulnsw %69, %3
%71:i64 = add %68, %70
%72:i64 = sext %20 (hasExternalUses)
%73:i64 = mulnsw %72, %15
%74:i64 = add %71, %73
%75:i64 = mulnsw %26, %19
%76:i64 = add %74, %75
%77:i64 = sext %33 (hasExternalUses)
%78:i64 = mulnsw %77, %28
%79:i64 = add %76, %78
%80:i64 = mulnsw %32, %42
%81:i64 = add %79, %80
%82:i64 = sext %48 (hasExternalUses)
%83:i32 = mul 19:i32, %38
%84:i64 = sext %83 (hasExternalUses)
%85:i64 = mulnsw %82, %84
%86:i64 = add %81, %85
%87:i64 = mulnsw %54, %47
%88:i64 = add %86, %87
%89:i64 = sext %63 (hasExternalUses)
%90:i64 = mulnsw %89, %57
%91:i64 = add %88, %90
%92:i64 = mulnsw %1, %62
%93:i64 = add %91, %92
%94:i64 = mulnsw %13, %3
%95:i64 = mulnsw %6, %22
%96:i64 = add %94, %95
%97:i64 = mulnsw %26, %15
%98:i64 = add %96, %97
%99:i64 = mulnsw %19, %35
%100:i64 = add %98, %99
%101:i64 = mulnsw %28, %42
%102:i64 = add %100, %101
%103:i32 = mul 19:i32, %31
%104:i64 = sext %103 (hasExternalUses)
%105:i64 = mulnsw %104, %50
%106:i64 = add %102, %105
%107:i64 = mulnsw %54, %84
%108:i64 = add %106, %107
%109:i64 = mulnsw %47, %65
%110:i64 = add %108, %109
%111:i64 = mulnsw %1, %57
%112:i64 = add %110, %111
%113:i64 = mulnsw %62, %9
%114:i64 = add %112, %113 (hasExternalUses)
%115:i64 = add 33554432:i64, %114 (hasExternalUses)
%116:i64 = ashr %115, 26:i64
%117:i64 = add %93, %116 (hasExternalUses)
%118:i64 = add 16777216:i64, %117 (hasExternalUses)
%119:i64 = ashr %118, 25:i64
%120:i64 = add %67, %119
%121:i64 = add 33554432:i64, %120 (hasExternalUses)
%122:i64 = and 4227858432:i64, %121
%123:i64 = sub %120, %122
infer %123 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %329 = add i64 %312, 16777216
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i32 = add 1:i32, %19 (hasExternalUses)
%21:i64 = sext %20 (hasExternalUses)
%22:i64 = mulnsw %18, %21
%23:i64 = add %16, %22
%24:i32 = var
%25:i64 = sext %24 (hasExternalUses)
%26:i32 = var
%27:i32 = mul 19:i32, %26
%28:i64 = sext %27
%29:i64 = mulnsw %25, %28
%30:i64 = add %23, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = mul 19:i32, %33
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i32 = mul 19:i32, %40
%42:i64 = sext %41 (hasExternalUses)
%43:i64 = mulnsw %39, %42
%44:i64 = add %37, %43
%45:i32 = var
%46:i64 = sext %45 (hasExternalUses)
%47:i32 = var
%48:i32 = mul 19:i32, %47
%49:i64 = sext %48 (hasExternalUses)
%50:i64 = mulnsw %46, %49
%51:i64 = add %44, %50
%52:i32 = var
%53:i64 = sext %52 (hasExternalUses)
%54:i32 = var
%55:i32 = mul 19:i32, %54
%56:i64 = sext %55 (hasExternalUses)
%57:i64 = mulnsw %53, %56
%58:i64 = add %51, %57
%59:i32 = var
%60:i64 = sext %59 (hasExternalUses)
%61:i32 = var
%62:i32 = mul 19:i32, %61
%63:i64 = sext %62 (hasExternalUses)
%64:i64 = mulnsw %60, %63
%65:i64 = add %58, %64
%66:i64 = mulnsw %1, %8
%67:i32 = shl %11, 1:i32
%68:i64 = sext %67 (hasExternalUses)
%69:i64 = mulnsw %3, %68
%70:i64 = add %66, %69
%71:i64 = mulnsw %14, %21
%72:i64 = add %70, %71
%73:i32 = mul 19:i32, %17
%74:i64 = sext %73
%75:i32 = shl %24, 1:i32
%76:i64 = sext %75 (hasExternalUses)
%77:i64 = mulnsw %74, %76
%78:i64 = add %72, %77
%79:i64 = mulnsw %32, %28
%80:i64 = add %78, %79
%81:i32 = shl %38, 1:i32
%82:i64 = sext %81 (hasExternalUses)
%83:i64 = mulnsw %35, %82
%84:i64 = add %80, %83
%85:i64 = mulnsw %46, %42
%86:i64 = add %84, %85
%87:i32 = shl %52, 1:i32
%88:i64 = sext %87 (hasExternalUses)
%89:i64 = mulnsw %49, %88
%90:i64 = add %86, %89
%91:i64 = mulnsw %60, %56
%92:i64 = add %90, %91
%93:i32 = shl %5, 1:i32
%94:i64 = sext %93 (hasExternalUses)
%95:i64 = mulnsw %63, %94
%96:i64 = add %92, %95
%97:i64 = mulnsw %12, %8
%98:i64 = mulnsw %3, %21
%99:i64 = add %97, %98
%100:i32 = mul 19:i32, %13
%101:i64 = sext %100
%102:i64 = mulnsw %25, %101
%103:i64 = add %99, %102
%104:i64 = mulnsw %32, %74
%105:i64 = add %103, %104
%106:i64 = mulnsw %39, %28
%107:i64 = add %105, %106
%108:i64 = mulnsw %46, %35
%109:i64 = add %107, %108
%110:i64 = mulnsw %53, %42
%111:i64 = add %109, %110
%112:i64 = mulnsw %60, %49
%113:i64 = add %111, %112
%114:i64 = mulnsw %6, %56
%115:i64 = add %113, %114
%116:i64 = mulnsw %1, %63
%117:i64 = add %115, %116
%118:i64 = mulnsw %8, %21
%119:i32 = mul 19:i32, %2
%120:i64 = sext %119
%121:i64 = mulnsw %120, %76
%122:i64 = add %118, %121
%123:i64 = mulnsw %32, %101
%124:i64 = add %122, %123
%125:i64 = mulnsw %74, %82
%126:i64 = add %124, %125
%127:i64 = mulnsw %46, %28
%128:i64 = add %126, %127
%129:i64 = mulnsw %35, %88
%130:i64 = add %128, %129
%131:i64 = mulnsw %60, %42
%132:i64 = add %130, %131
%133:i64 = mulnsw %49, %94
%134:i64 = add %132, %133
%135:i64 = mulnsw %1, %56
%136:i64 = add %134, %135
%137:i64 = mulnsw %63, %68
%138:i64 = add %136, %137 (hasExternalUses)
%139:i64 = add 33554432:i64, %138 (hasExternalUses)
%140:i64 = ashr %139, 26:i64
%141:i64 = add %117, %140 (hasExternalUses)
%142:i64 = add 16777216:i64, %141 (hasExternalUses)
%143:i64 = ashr %142, 25:i64
%144:i64 = add %96, %143 (hasExternalUses)
%145:i64 = add 33554432:i64, %144 (hasExternalUses)
%146:i64 = ashr %145, 26:i64
%147:i64 = add %65, %146 (hasExternalUses)
%148:i64 = add 16777216:i64, %147
infer %148 (demandedBits=1111111111111111111111111111111111111110000000000000000000000000)

; *****
; For LLVM instruction:
;  %330 = ashr i64 %329, 25
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i32 = add 1:i32, %19 (hasExternalUses)
%21:i64 = sext %20 (hasExternalUses)
%22:i64 = mulnsw %18, %21
%23:i64 = add %16, %22
%24:i32 = var
%25:i64 = sext %24 (hasExternalUses)
%26:i32 = var
%27:i32 = mul 19:i32, %26
%28:i64 = sext %27
%29:i64 = mulnsw %25, %28
%30:i64 = add %23, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = mul 19:i32, %33
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i32 = mul 19:i32, %40
%42:i64 = sext %41 (hasExternalUses)
%43:i64 = mulnsw %39, %42
%44:i64 = add %37, %43
%45:i32 = var
%46:i64 = sext %45 (hasExternalUses)
%47:i32 = var
%48:i32 = mul 19:i32, %47
%49:i64 = sext %48 (hasExternalUses)
%50:i64 = mulnsw %46, %49
%51:i64 = add %44, %50
%52:i32 = var
%53:i64 = sext %52 (hasExternalUses)
%54:i32 = var
%55:i32 = mul 19:i32, %54
%56:i64 = sext %55 (hasExternalUses)
%57:i64 = mulnsw %53, %56
%58:i64 = add %51, %57
%59:i32 = var
%60:i64 = sext %59 (hasExternalUses)
%61:i32 = var
%62:i32 = mul 19:i32, %61
%63:i64 = sext %62 (hasExternalUses)
%64:i64 = mulnsw %60, %63
%65:i64 = add %58, %64
%66:i64 = mulnsw %1, %8
%67:i32 = shl %11, 1:i32
%68:i64 = sext %67 (hasExternalUses)
%69:i64 = mulnsw %3, %68
%70:i64 = add %66, %69
%71:i64 = mulnsw %14, %21
%72:i64 = add %70, %71
%73:i32 = mul 19:i32, %17
%74:i64 = sext %73
%75:i32 = shl %24, 1:i32
%76:i64 = sext %75 (hasExternalUses)
%77:i64 = mulnsw %74, %76
%78:i64 = add %72, %77
%79:i64 = mulnsw %32, %28
%80:i64 = add %78, %79
%81:i32 = shl %38, 1:i32
%82:i64 = sext %81 (hasExternalUses)
%83:i64 = mulnsw %35, %82
%84:i64 = add %80, %83
%85:i64 = mulnsw %46, %42
%86:i64 = add %84, %85
%87:i32 = shl %52, 1:i32
%88:i64 = sext %87 (hasExternalUses)
%89:i64 = mulnsw %49, %88
%90:i64 = add %86, %89
%91:i64 = mulnsw %60, %56
%92:i64 = add %90, %91
%93:i32 = shl %5, 1:i32
%94:i64 = sext %93 (hasExternalUses)
%95:i64 = mulnsw %63, %94
%96:i64 = add %92, %95
%97:i64 = mulnsw %12, %8
%98:i64 = mulnsw %3, %21
%99:i64 = add %97, %98
%100:i32 = mul 19:i32, %13
%101:i64 = sext %100
%102:i64 = mulnsw %25, %101
%103:i64 = add %99, %102
%104:i64 = mulnsw %32, %74
%105:i64 = add %103, %104
%106:i64 = mulnsw %39, %28
%107:i64 = add %105, %106
%108:i64 = mulnsw %46, %35
%109:i64 = add %107, %108
%110:i64 = mulnsw %53, %42
%111:i64 = add %109, %110
%112:i64 = mulnsw %60, %49
%113:i64 = add %111, %112
%114:i64 = mulnsw %6, %56
%115:i64 = add %113, %114
%116:i64 = mulnsw %1, %63
%117:i64 = add %115, %116
%118:i64 = mulnsw %8, %21
%119:i32 = mul 19:i32, %2
%120:i64 = sext %119
%121:i64 = mulnsw %120, %76
%122:i64 = add %118, %121
%123:i64 = mulnsw %32, %101
%124:i64 = add %122, %123
%125:i64 = mulnsw %74, %82
%126:i64 = add %124, %125
%127:i64 = mulnsw %46, %28
%128:i64 = add %126, %127
%129:i64 = mulnsw %35, %88
%130:i64 = add %128, %129
%131:i64 = mulnsw %60, %42
%132:i64 = add %130, %131
%133:i64 = mulnsw %49, %94
%134:i64 = add %132, %133
%135:i64 = mulnsw %1, %56
%136:i64 = add %134, %135
%137:i64 = mulnsw %63, %68
%138:i64 = add %136, %137 (hasExternalUses)
%139:i64 = add 33554432:i64, %138 (hasExternalUses)
%140:i64 = ashr %139, 26:i64
%141:i64 = add %117, %140 (hasExternalUses)
%142:i64 = add 16777216:i64, %141 (hasExternalUses)
%143:i64 = ashr %142, 25:i64
%144:i64 = add %96, %143 (hasExternalUses)
%145:i64 = add 33554432:i64, %144 (hasExternalUses)
%146:i64 = ashr %145, 26:i64
%147:i64 = add %65, %146 (hasExternalUses)
%148:i64 = add 16777216:i64, %147 (hasExternalUses)
%149:i64 = ashr %148, 25:i64
infer %149 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %331 = add i64 %330, %272
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i32 = add 1:i32, %27 (hasExternalUses)
%29:i64 = sext %28 (hasExternalUses)
%30:i64 = mulnsw %26, %29
%31:i64 = add %24, %30
%32:i32 = var
%33:i32 = mul 19:i32, %32
%34:i64 = sext %33
%35:i32 = var
%36:i32 = shl %35, 1:i32
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %31, %38
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i32 = var
%43:i32 = mul 19:i32, %42
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %41, %44
%46:i64 = add %39, %45
%47:i32 = var
%48:i32 = mul 19:i32, %47
%49:i64 = sext %48 (hasExternalUses)
%50:i32 = var
%51:i32 = shl %50, 1:i32
%52:i64 = sext %51 (hasExternalUses)
%53:i64 = mulnsw %49, %52
%54:i64 = add %46, %53
%55:i32 = var
%56:i64 = sext %55 (hasExternalUses)
%57:i32 = var
%58:i32 = mul 19:i32, %57
%59:i64 = sext %58 (hasExternalUses)
%60:i64 = mulnsw %56, %59
%61:i64 = add %54, %60
%62:i32 = var
%63:i32 = mul 19:i32, %62
%64:i64 = sext %63 (hasExternalUses)
%65:i32 = var
%66:i32 = shl %65, 1:i32
%67:i64 = sext %66 (hasExternalUses)
%68:i64 = mulnsw %64, %67
%69:i64 = add %61, %68
%70:i64 = add 33554432:i64, %69 (hasExternalUses)
%71:i64 = and 18446744073642442752:i64, %70
%72:i64 = sub %69, %71
%73:i64 = mulnsw %13, %6
%74:i64 = sext %7 (hasExternalUses)
%75:i64 = mulnsw %74, %3
%76:i64 = add %73, %75
%77:i64 = sext %20 (hasExternalUses)
%78:i64 = mulnsw %77, %15
%79:i64 = add %76, %78
%80:i64 = mulnsw %19, %29
%81:i64 = add %79, %80
%82:i64 = sext %35 (hasExternalUses)
%83:i32 = mul 19:i32, %25
%84:i64 = sext %83
%85:i64 = mulnsw %82, %84
%86:i64 = add %81, %85
%87:i64 = mulnsw %41, %34
%88:i64 = add %86, %87
%89:i64 = sext %50 (hasExternalUses)
%90:i64 = mulnsw %89, %44
%91:i64 = add %88, %90
%92:i64 = mulnsw %56, %49
%93:i64 = add %91, %92
%94:i64 = sext %65 (hasExternalUses)
%95:i64 = mulnsw %94, %59
%96:i64 = add %93, %95
%97:i64 = mulnsw %1, %64
%98:i64 = add %96, %97
%99:i64 = mulnsw %13, %3
%100:i64 = mulnsw %6, %22
%101:i64 = add %99, %100
%102:i64 = mulnsw %15, %29
%103:i64 = add %101, %102
%104:i32 = mul 19:i32, %18
%105:i64 = sext %104
%106:i64 = mulnsw %105, %37
%107:i64 = add %103, %106
%108:i64 = mulnsw %41, %84
%109:i64 = add %107, %108
%110:i64 = mulnsw %34, %52
%111:i64 = add %109, %110
%112:i64 = mulnsw %56, %44
%113:i64 = add %111, %112
%114:i64 = mulnsw %49, %67
%115:i64 = add %113, %114
%116:i64 = mulnsw %1, %59
%117:i64 = add %115, %116
%118:i64 = mulnsw %64, %9
%119:i64 = add %117, %118
%120:i64 = mulnsw %77, %3
%121:i64 = mulnsw %6, %29
%122:i64 = add %120, %121
%123:i32 = mul 19:i32, %14
%124:i64 = sext %123
%125:i64 = mulnsw %82, %124
%126:i64 = add %122, %125
%127:i64 = mulnsw %41, %105
%128:i64 = add %126, %127
%129:i64 = mulnsw %89, %84
%130:i64 = add %128, %129
%131:i64 = mulnsw %56, %34
%132:i64 = add %130, %131
%133:i64 = mulnsw %94, %44
%134:i64 = add %132, %133
%135:i64 = mulnsw %1, %49
%136:i64 = add %134, %135
%137:i64 = mulnsw %74, %59
%138:i64 = add %136, %137
%139:i64 = mulnsw %13, %64
%140:i64 = add %138, %139
%141:i64 = mulnsw %3, %29
%142:i32 = mul 19:i32, %5
%143:i64 = sext %142
%144:i64 = mulnsw %143, %37
%145:i64 = add %141, %144
%146:i64 = mulnsw %41, %124
%147:i64 = add %145, %146
%148:i64 = mulnsw %105, %52
%149:i64 = add %147, %148
%150:i64 = mulnsw %56, %84
%151:i64 = add %149, %150
%152:i64 = mulnsw %34, %67
%153:i64 = add %151, %152
%154:i64 = mulnsw %1, %44
%155:i64 = add %153, %154
%156:i64 = mulnsw %49, %9
%157:i64 = add %155, %156
%158:i64 = mulnsw %13, %59
%159:i64 = add %157, %158
%160:i64 = mulnsw %64, %22
%161:i64 = add %159, %160 (hasExternalUses)
%162:i64 = add 33554432:i64, %161 (hasExternalUses)
%163:i64 = ashr %162, 26:i64
%164:i64 = add %140, %163 (hasExternalUses)
%165:i64 = add 16777216:i64, %164 (hasExternalUses)
%166:i64 = ashr %165, 25:i64
%167:i64 = add %119, %166 (hasExternalUses)
%168:i64 = add 33554432:i64, %167 (hasExternalUses)
%169:i64 = ashr %168, 26:i64
%170:i64 = add %98, %169 (hasExternalUses)
%171:i64 = add 16777216:i64, %170 (hasExternalUses)
%172:i64 = ashr %171, 25:i64
%173:i64 = add %72, %172
infer %173 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %332 = and i64 %329, 4261412864
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i32 = add 1:i32, %19 (hasExternalUses)
%21:i64 = sext %20 (hasExternalUses)
%22:i64 = mulnsw %18, %21
%23:i64 = add %16, %22
%24:i32 = var
%25:i64 = sext %24 (hasExternalUses)
%26:i32 = var
%27:i32 = mul 19:i32, %26
%28:i64 = sext %27
%29:i64 = mulnsw %25, %28
%30:i64 = add %23, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = mul 19:i32, %33
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i32 = mul 19:i32, %40
%42:i64 = sext %41 (hasExternalUses)
%43:i64 = mulnsw %39, %42
%44:i64 = add %37, %43
%45:i32 = var
%46:i64 = sext %45 (hasExternalUses)
%47:i32 = var
%48:i32 = mul 19:i32, %47
%49:i64 = sext %48 (hasExternalUses)
%50:i64 = mulnsw %46, %49
%51:i64 = add %44, %50
%52:i32 = var
%53:i64 = sext %52 (hasExternalUses)
%54:i32 = var
%55:i32 = mul 19:i32, %54
%56:i64 = sext %55 (hasExternalUses)
%57:i64 = mulnsw %53, %56
%58:i64 = add %51, %57
%59:i32 = var
%60:i64 = sext %59 (hasExternalUses)
%61:i32 = var
%62:i32 = mul 19:i32, %61
%63:i64 = sext %62 (hasExternalUses)
%64:i64 = mulnsw %60, %63
%65:i64 = add %58, %64
%66:i64 = mulnsw %1, %8
%67:i32 = shl %11, 1:i32
%68:i64 = sext %67 (hasExternalUses)
%69:i64 = mulnsw %3, %68
%70:i64 = add %66, %69
%71:i64 = mulnsw %14, %21
%72:i64 = add %70, %71
%73:i32 = mul 19:i32, %17
%74:i64 = sext %73
%75:i32 = shl %24, 1:i32
%76:i64 = sext %75 (hasExternalUses)
%77:i64 = mulnsw %74, %76
%78:i64 = add %72, %77
%79:i64 = mulnsw %32, %28
%80:i64 = add %78, %79
%81:i32 = shl %38, 1:i32
%82:i64 = sext %81 (hasExternalUses)
%83:i64 = mulnsw %35, %82
%84:i64 = add %80, %83
%85:i64 = mulnsw %46, %42
%86:i64 = add %84, %85
%87:i32 = shl %52, 1:i32
%88:i64 = sext %87 (hasExternalUses)
%89:i64 = mulnsw %49, %88
%90:i64 = add %86, %89
%91:i64 = mulnsw %60, %56
%92:i64 = add %90, %91
%93:i32 = shl %5, 1:i32
%94:i64 = sext %93 (hasExternalUses)
%95:i64 = mulnsw %63, %94
%96:i64 = add %92, %95
%97:i64 = mulnsw %12, %8
%98:i64 = mulnsw %3, %21
%99:i64 = add %97, %98
%100:i32 = mul 19:i32, %13
%101:i64 = sext %100
%102:i64 = mulnsw %25, %101
%103:i64 = add %99, %102
%104:i64 = mulnsw %32, %74
%105:i64 = add %103, %104
%106:i64 = mulnsw %39, %28
%107:i64 = add %105, %106
%108:i64 = mulnsw %46, %35
%109:i64 = add %107, %108
%110:i64 = mulnsw %53, %42
%111:i64 = add %109, %110
%112:i64 = mulnsw %60, %49
%113:i64 = add %111, %112
%114:i64 = mulnsw %6, %56
%115:i64 = add %113, %114
%116:i64 = mulnsw %1, %63
%117:i64 = add %115, %116
%118:i64 = mulnsw %8, %21
%119:i32 = mul 19:i32, %2
%120:i64 = sext %119
%121:i64 = mulnsw %120, %76
%122:i64 = add %118, %121
%123:i64 = mulnsw %32, %101
%124:i64 = add %122, %123
%125:i64 = mulnsw %74, %82
%126:i64 = add %124, %125
%127:i64 = mulnsw %46, %28
%128:i64 = add %126, %127
%129:i64 = mulnsw %35, %88
%130:i64 = add %128, %129
%131:i64 = mulnsw %60, %42
%132:i64 = add %130, %131
%133:i64 = mulnsw %49, %94
%134:i64 = add %132, %133
%135:i64 = mulnsw %1, %56
%136:i64 = add %134, %135
%137:i64 = mulnsw %63, %68
%138:i64 = add %136, %137 (hasExternalUses)
%139:i64 = add 33554432:i64, %138 (hasExternalUses)
%140:i64 = ashr %139, 26:i64
%141:i64 = add %117, %140 (hasExternalUses)
%142:i64 = add 16777216:i64, %141 (hasExternalUses)
%143:i64 = ashr %142, 25:i64
%144:i64 = add %96, %143 (hasExternalUses)
%145:i64 = add 33554432:i64, %144 (hasExternalUses)
%146:i64 = ashr %145, 26:i64
%147:i64 = add %65, %146 (hasExternalUses)
%148:i64 = add 16777216:i64, %147 (hasExternalUses)
%149:i64 = and 4261412864:i64, %148
infer %149 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %333 = sub i64 %312, %332
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i32 = add 1:i32, %19 (hasExternalUses)
%21:i64 = sext %20 (hasExternalUses)
%22:i64 = mulnsw %18, %21
%23:i64 = add %16, %22
%24:i32 = var
%25:i64 = sext %24 (hasExternalUses)
%26:i32 = var
%27:i32 = mul 19:i32, %26
%28:i64 = sext %27
%29:i64 = mulnsw %25, %28
%30:i64 = add %23, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = mul 19:i32, %33
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i32 = mul 19:i32, %40
%42:i64 = sext %41 (hasExternalUses)
%43:i64 = mulnsw %39, %42
%44:i64 = add %37, %43
%45:i32 = var
%46:i64 = sext %45 (hasExternalUses)
%47:i32 = var
%48:i32 = mul 19:i32, %47
%49:i64 = sext %48 (hasExternalUses)
%50:i64 = mulnsw %46, %49
%51:i64 = add %44, %50
%52:i32 = var
%53:i64 = sext %52 (hasExternalUses)
%54:i32 = var
%55:i32 = mul 19:i32, %54
%56:i64 = sext %55 (hasExternalUses)
%57:i64 = mulnsw %53, %56
%58:i64 = add %51, %57
%59:i32 = var
%60:i64 = sext %59 (hasExternalUses)
%61:i32 = var
%62:i32 = mul 19:i32, %61
%63:i64 = sext %62 (hasExternalUses)
%64:i64 = mulnsw %60, %63
%65:i64 = add %58, %64
%66:i64 = mulnsw %1, %8
%67:i32 = shl %11, 1:i32
%68:i64 = sext %67 (hasExternalUses)
%69:i64 = mulnsw %3, %68
%70:i64 = add %66, %69
%71:i64 = mulnsw %14, %21
%72:i64 = add %70, %71
%73:i32 = mul 19:i32, %17
%74:i64 = sext %73
%75:i32 = shl %24, 1:i32
%76:i64 = sext %75 (hasExternalUses)
%77:i64 = mulnsw %74, %76
%78:i64 = add %72, %77
%79:i64 = mulnsw %32, %28
%80:i64 = add %78, %79
%81:i32 = shl %38, 1:i32
%82:i64 = sext %81 (hasExternalUses)
%83:i64 = mulnsw %35, %82
%84:i64 = add %80, %83
%85:i64 = mulnsw %46, %42
%86:i64 = add %84, %85
%87:i32 = shl %52, 1:i32
%88:i64 = sext %87 (hasExternalUses)
%89:i64 = mulnsw %49, %88
%90:i64 = add %86, %89
%91:i64 = mulnsw %60, %56
%92:i64 = add %90, %91
%93:i32 = shl %5, 1:i32
%94:i64 = sext %93 (hasExternalUses)
%95:i64 = mulnsw %63, %94
%96:i64 = add %92, %95
%97:i64 = mulnsw %12, %8
%98:i64 = mulnsw %3, %21
%99:i64 = add %97, %98
%100:i32 = mul 19:i32, %13
%101:i64 = sext %100
%102:i64 = mulnsw %25, %101
%103:i64 = add %99, %102
%104:i64 = mulnsw %32, %74
%105:i64 = add %103, %104
%106:i64 = mulnsw %39, %28
%107:i64 = add %105, %106
%108:i64 = mulnsw %46, %35
%109:i64 = add %107, %108
%110:i64 = mulnsw %53, %42
%111:i64 = add %109, %110
%112:i64 = mulnsw %60, %49
%113:i64 = add %111, %112
%114:i64 = mulnsw %6, %56
%115:i64 = add %113, %114
%116:i64 = mulnsw %1, %63
%117:i64 = add %115, %116
%118:i64 = mulnsw %8, %21
%119:i32 = mul 19:i32, %2
%120:i64 = sext %119
%121:i64 = mulnsw %120, %76
%122:i64 = add %118, %121
%123:i64 = mulnsw %32, %101
%124:i64 = add %122, %123
%125:i64 = mulnsw %74, %82
%126:i64 = add %124, %125
%127:i64 = mulnsw %46, %28
%128:i64 = add %126, %127
%129:i64 = mulnsw %35, %88
%130:i64 = add %128, %129
%131:i64 = mulnsw %60, %42
%132:i64 = add %130, %131
%133:i64 = mulnsw %49, %94
%134:i64 = add %132, %133
%135:i64 = mulnsw %1, %56
%136:i64 = add %134, %135
%137:i64 = mulnsw %63, %68
%138:i64 = add %136, %137 (hasExternalUses)
%139:i64 = add 33554432:i64, %138 (hasExternalUses)
%140:i64 = ashr %139, 26:i64
%141:i64 = add %117, %140 (hasExternalUses)
%142:i64 = add 16777216:i64, %141 (hasExternalUses)
%143:i64 = ashr %142, 25:i64
%144:i64 = add %96, %143 (hasExternalUses)
%145:i64 = add 33554432:i64, %144 (hasExternalUses)
%146:i64 = ashr %145, 26:i64
%147:i64 = add %65, %146
%148:i64 = add 16777216:i64, %147 (hasExternalUses)
%149:i64 = and 4261412864:i64, %148
%150:i64 = sub %147, %149
infer %150 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %334 = add i64 %326, 16777216
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i64 = mulnsw %30, %32
%34:i64 = add %28, %33
%35:i32 = var
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i64 = sext %37 (hasExternalUses)
%39:i64 = mulnsw %36, %38
%40:i64 = add %34, %39
%41:i32 = var
%42:i64 = sext %41 (hasExternalUses)
%43:i32 = var
%44:i32 = add 1:i32, %43 (hasExternalUses)
%45:i64 = sext %44 (hasExternalUses)
%46:i64 = mulnsw %42, %45
%47:i64 = add %40, %46
%48:i32 = var
%49:i64 = sext %48 (hasExternalUses)
%50:i32 = var
%51:i32 = mul 19:i32, %50
%52:i64 = sext %51 (hasExternalUses)
%53:i64 = mulnsw %49, %52
%54:i64 = add %47, %53
%55:i32 = var
%56:i64 = sext %55 (hasExternalUses)
%57:i32 = var
%58:i32 = mul 19:i32, %57
%59:i64 = sext %58 (hasExternalUses)
%60:i64 = mulnsw %56, %59
%61:i64 = add %54, %60
%62:i64 = mulnsw %1, %8
%63:i32 = shl %11, 1:i32
%64:i64 = sext %63 (hasExternalUses)
%65:i64 = mulnsw %3, %64
%66:i64 = add %62, %65
%67:i64 = mulnsw %18, %14
%68:i64 = add %66, %67
%69:i32 = shl %23, 1:i32
%70:i64 = sext %69 (hasExternalUses)
%71:i64 = mulnsw %20, %70
%72:i64 = add %68, %71
%73:i64 = mulnsw %30, %26
%74:i64 = add %72, %73
%75:i32 = shl %35, 1:i32
%76:i64 = sext %75 (hasExternalUses)
%77:i64 = mulnsw %32, %76
%78:i64 = add %74, %77
%79:i64 = mulnsw %38, %45
%80:i64 = add %78, %79
%81:i32 = mul 19:i32, %41
%82:i64 = sext %81 (hasExternalUses)
%83:i32 = shl %48, 1:i32
%84:i64 = sext %83 (hasExternalUses)
%85:i64 = mulnsw %82, %84
%86:i64 = add %80, %85
%87:i64 = mulnsw %56, %52
%88:i64 = add %86, %87
%89:i32 = shl %5, 1:i32
%90:i64 = sext %89 (hasExternalUses)
%91:i64 = mulnsw %59, %90
%92:i64 = add %88, %91
%93:i64 = mulnsw %18, %3
%94:i64 = mulnsw %12, %8
%95:i64 = add %93, %94
%96:i64 = mulnsw %24, %14
%97:i64 = add %95, %96
%98:i64 = mulnsw %30, %20
%99:i64 = add %97, %98
%100:i64 = mulnsw %36, %26
%101:i64 = add %99, %100
%102:i64 = mulnsw %32, %45
%103:i64 = add %101, %102
%104:i32 = mul 19:i32, %37
%105:i64 = sext %104 (hasExternalUses)
%106:i64 = mulnsw %49, %105
%107:i64 = add %103, %106
%108:i64 = mulnsw %56, %82
%109:i64 = add %107, %108
%110:i64 = mulnsw %6, %52
%111:i64 = add %109, %110
%112:i64 = mulnsw %1, %59
%113:i64 = add %111, %112
%114:i64 = mulnsw %18, %8
%115:i64 = mulnsw %3, %70
%116:i64 = add %114, %115
%117:i64 = mulnsw %30, %14
%118:i64 = add %116, %117
%119:i64 = mulnsw %20, %76
%120:i64 = add %118, %119
%121:i64 = mulnsw %26, %45
%122:i64 = add %120, %121
%123:i32 = mul 19:i32, %31
%124:i64 = sext %123 (hasExternalUses)
%125:i64 = mulnsw %124, %84
%126:i64 = add %122, %125
%127:i64 = mulnsw %56, %105
%128:i64 = add %126, %127
%129:i64 = mulnsw %82, %90
%130:i64 = add %128, %129
%131:i64 = mulnsw %1, %52
%132:i64 = add %130, %131
%133:i64 = mulnsw %59, %64
%134:i64 = add %132, %133 (hasExternalUses)
%135:i64 = add 33554432:i64, %134 (hasExternalUses)
%136:i64 = ashr %135, 26:i64
%137:i64 = add %113, %136 (hasExternalUses)
%138:i64 = add 16777216:i64, %137 (hasExternalUses)
%139:i64 = ashr %138, 25:i64
%140:i64 = add %92, %139 (hasExternalUses)
%141:i64 = add 33554432:i64, %140 (hasExternalUses)
%142:i64 = ashr %141, 26:i64
%143:i64 = add %61, %142 (hasExternalUses)
%144:i64 = add 16777216:i64, %143
infer %144 (demandedBits=1111111111111111111111111111111111111110000000000000000000000000)

; *****
; For LLVM instruction:
;  %335 = ashr i64 %334, 25
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i64 = mulnsw %30, %32
%34:i64 = add %28, %33
%35:i32 = var
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i64 = sext %37 (hasExternalUses)
%39:i64 = mulnsw %36, %38
%40:i64 = add %34, %39
%41:i32 = var
%42:i64 = sext %41 (hasExternalUses)
%43:i32 = var
%44:i32 = add 1:i32, %43 (hasExternalUses)
%45:i64 = sext %44 (hasExternalUses)
%46:i64 = mulnsw %42, %45
%47:i64 = add %40, %46
%48:i32 = var
%49:i64 = sext %48 (hasExternalUses)
%50:i32 = var
%51:i32 = mul 19:i32, %50
%52:i64 = sext %51 (hasExternalUses)
%53:i64 = mulnsw %49, %52
%54:i64 = add %47, %53
%55:i32 = var
%56:i64 = sext %55 (hasExternalUses)
%57:i32 = var
%58:i32 = mul 19:i32, %57
%59:i64 = sext %58 (hasExternalUses)
%60:i64 = mulnsw %56, %59
%61:i64 = add %54, %60
%62:i64 = mulnsw %1, %8
%63:i32 = shl %11, 1:i32
%64:i64 = sext %63 (hasExternalUses)
%65:i64 = mulnsw %3, %64
%66:i64 = add %62, %65
%67:i64 = mulnsw %18, %14
%68:i64 = add %66, %67
%69:i32 = shl %23, 1:i32
%70:i64 = sext %69 (hasExternalUses)
%71:i64 = mulnsw %20, %70
%72:i64 = add %68, %71
%73:i64 = mulnsw %30, %26
%74:i64 = add %72, %73
%75:i32 = shl %35, 1:i32
%76:i64 = sext %75 (hasExternalUses)
%77:i64 = mulnsw %32, %76
%78:i64 = add %74, %77
%79:i64 = mulnsw %38, %45
%80:i64 = add %78, %79
%81:i32 = mul 19:i32, %41
%82:i64 = sext %81 (hasExternalUses)
%83:i32 = shl %48, 1:i32
%84:i64 = sext %83 (hasExternalUses)
%85:i64 = mulnsw %82, %84
%86:i64 = add %80, %85
%87:i64 = mulnsw %56, %52
%88:i64 = add %86, %87
%89:i32 = shl %5, 1:i32
%90:i64 = sext %89 (hasExternalUses)
%91:i64 = mulnsw %59, %90
%92:i64 = add %88, %91
%93:i64 = mulnsw %18, %3
%94:i64 = mulnsw %12, %8
%95:i64 = add %93, %94
%96:i64 = mulnsw %24, %14
%97:i64 = add %95, %96
%98:i64 = mulnsw %30, %20
%99:i64 = add %97, %98
%100:i64 = mulnsw %36, %26
%101:i64 = add %99, %100
%102:i64 = mulnsw %32, %45
%103:i64 = add %101, %102
%104:i32 = mul 19:i32, %37
%105:i64 = sext %104 (hasExternalUses)
%106:i64 = mulnsw %49, %105
%107:i64 = add %103, %106
%108:i64 = mulnsw %56, %82
%109:i64 = add %107, %108
%110:i64 = mulnsw %6, %52
%111:i64 = add %109, %110
%112:i64 = mulnsw %1, %59
%113:i64 = add %111, %112
%114:i64 = mulnsw %18, %8
%115:i64 = mulnsw %3, %70
%116:i64 = add %114, %115
%117:i64 = mulnsw %30, %14
%118:i64 = add %116, %117
%119:i64 = mulnsw %20, %76
%120:i64 = add %118, %119
%121:i64 = mulnsw %26, %45
%122:i64 = add %120, %121
%123:i32 = mul 19:i32, %31
%124:i64 = sext %123 (hasExternalUses)
%125:i64 = mulnsw %124, %84
%126:i64 = add %122, %125
%127:i64 = mulnsw %56, %105
%128:i64 = add %126, %127
%129:i64 = mulnsw %82, %90
%130:i64 = add %128, %129
%131:i64 = mulnsw %1, %52
%132:i64 = add %130, %131
%133:i64 = mulnsw %59, %64
%134:i64 = add %132, %133 (hasExternalUses)
%135:i64 = add 33554432:i64, %134 (hasExternalUses)
%136:i64 = ashr %135, 26:i64
%137:i64 = add %113, %136 (hasExternalUses)
%138:i64 = add 16777216:i64, %137 (hasExternalUses)
%139:i64 = ashr %138, 25:i64
%140:i64 = add %92, %139 (hasExternalUses)
%141:i64 = add 33554432:i64, %140 (hasExternalUses)
%142:i64 = ashr %141, 26:i64
%143:i64 = add %61, %142 (hasExternalUses)
%144:i64 = add 16777216:i64, %143 (hasExternalUses)
%145:i64 = ashr %144, 25:i64
infer %145

; *****
; For LLVM instruction:
;  %336 = add i64 %192, %203
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
infer %11

; *****
; For LLVM instruction:
;  %337 = add i64 %336, %180
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
infer %17

; *****
; For LLVM instruction:
;  %338 = add i64 %337, %169
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
infer %24

; *****
; For LLVM instruction:
;  %339 = add i64 %338, %157
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %26, %28
%30:i64 = add %24, %29
infer %30

; *****
; For LLVM instruction:
;  %340 = add i64 %339, %146
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %26, %28
%30:i64 = add %24, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = shl %33, 1:i32
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
infer %37

; *****
; For LLVM instruction:
;  %341 = add i64 %340, %134
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %26, %28
%30:i64 = add %24, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = shl %33, 1:i32
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i64 = mulnsw %39, %41
%43:i64 = add %37, %42
infer %43

; *****
; For LLVM instruction:
;  %342 = add i64 %341, %123
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %26, %28
%30:i64 = add %24, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = shl %33, 1:i32
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i64 = mulnsw %39, %41
%43:i64 = add %37, %42
%44:i32 = var
%45:i64 = sext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = shl %46, 1:i32
%48:i64 = sext %47 (hasExternalUses)
%49:i64 = mulnsw %45, %48
%50:i64 = add %43, %49
infer %50

; *****
; For LLVM instruction:
;  %343 = add i64 %342, %111
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %26, %28
%30:i64 = add %24, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = shl %33, 1:i32
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i64 = mulnsw %39, %41
%43:i64 = add %37, %42
%44:i32 = var
%45:i64 = sext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = shl %46, 1:i32
%48:i64 = sext %47 (hasExternalUses)
%49:i64 = mulnsw %45, %48
%50:i64 = add %43, %49
%51:i32 = var
%52:i64 = sext %51 (hasExternalUses)
%53:i32 = var
%54:i32 = add 1:i32, %53 (hasExternalUses)
%55:i64 = sext %54 (hasExternalUses)
%56:i64 = mulnsw %52, %55
%57:i64 = add %50, %56
infer %57

; *****
; For LLVM instruction:
;  %344 = add i64 %343, %226
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %26, %28
%30:i64 = add %24, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = shl %33, 1:i32
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i64 = mulnsw %39, %41
%43:i64 = add %37, %42
%44:i32 = var
%45:i64 = sext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = shl %46, 1:i32
%48:i64 = sext %47 (hasExternalUses)
%49:i64 = mulnsw %45, %48
%50:i64 = add %43, %49
%51:i32 = var
%52:i64 = sext %51 (hasExternalUses)
%53:i32 = var
%54:i32 = add 1:i32, %53 (hasExternalUses)
%55:i64 = sext %54 (hasExternalUses)
%56:i64 = mulnsw %52, %55
%57:i64 = add %50, %56
%58:i32 = var
%59:i32 = mul 19:i32, %58
%60:i64 = sext %59 (hasExternalUses)
%61:i32 = var
%62:i32 = shl %61, 1:i32
%63:i64 = sext %62 (hasExternalUses)
%64:i64 = mulnsw %60, %63
%65:i64 = add %57, %64
infer %65

; *****
; For LLVM instruction:
;  %345 = add i64 %344, %335
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %26, %28
%30:i64 = add %24, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = shl %33, 1:i32
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i64 = mulnsw %39, %41
%43:i64 = add %37, %42
%44:i32 = var
%45:i64 = sext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = shl %46, 1:i32
%48:i64 = sext %47 (hasExternalUses)
%49:i64 = mulnsw %45, %48
%50:i64 = add %43, %49
%51:i32 = var
%52:i64 = sext %51 (hasExternalUses)
%53:i32 = var
%54:i32 = add 1:i32, %53 (hasExternalUses)
%55:i64 = sext %54 (hasExternalUses)
%56:i64 = mulnsw %52, %55
%57:i64 = add %50, %56
%58:i32 = var
%59:i32 = mul 19:i32, %58
%60:i64 = sext %59 (hasExternalUses)
%61:i32 = var
%62:i32 = shl %61, 1:i32
%63:i64 = sext %62 (hasExternalUses)
%64:i64 = mulnsw %60, %63
%65:i64 = add %57, %64
%66:i64 = mulnsw %13, %6
%67:i64 = sext %7 (hasExternalUses)
%68:i64 = mulnsw %67, %3
%69:i64 = add %66, %68
%70:i64 = sext %20 (hasExternalUses)
%71:i64 = mulnsw %70, %15
%72:i64 = add %69, %71
%73:i64 = mulnsw %26, %19
%74:i64 = add %72, %73
%75:i64 = sext %33 (hasExternalUses)
%76:i64 = mulnsw %75, %28
%77:i64 = add %74, %76
%78:i64 = mulnsw %39, %32
%79:i64 = add %77, %78
%80:i64 = sext %46 (hasExternalUses)
%81:i64 = mulnsw %80, %41
%82:i64 = add %79, %81
%83:i64 = mulnsw %45, %55
%84:i64 = add %82, %83
%85:i64 = sext %61 (hasExternalUses)
%86:i32 = mul 19:i32, %51
%87:i64 = sext %86 (hasExternalUses)
%88:i64 = mulnsw %85, %87
%89:i64 = add %84, %88
%90:i64 = mulnsw %1, %60
%91:i64 = add %89, %90
%92:i64 = mulnsw %13, %3
%93:i64 = mulnsw %6, %22
%94:i64 = add %92, %93
%95:i64 = mulnsw %26, %15
%96:i64 = add %94, %95
%97:i64 = mulnsw %19, %35
%98:i64 = add %96, %97
%99:i64 = mulnsw %39, %28
%100:i64 = add %98, %99
%101:i64 = mulnsw %32, %48
%102:i64 = add %100, %101
%103:i64 = mulnsw %41, %55
%104:i64 = add %102, %103
%105:i32 = mul 19:i32, %44
%106:i64 = sext %105 (hasExternalUses)
%107:i64 = mulnsw %106, %63
%108:i64 = add %104, %107
%109:i64 = mulnsw %1, %87
%110:i64 = add %108, %109
%111:i64 = mulnsw %60, %9
%112:i64 = add %110, %111
%113:i64 = mulnsw %26, %6
%114:i64 = mulnsw %70, %3
%115:i64 = add %113, %114
%116:i64 = mulnsw %75, %15
%117:i64 = add %115, %116
%118:i64 = mulnsw %39, %19
%119:i64 = add %117, %118
%120:i64 = mulnsw %80, %28
%121:i64 = add %119, %120
%122:i64 = mulnsw %32, %55
%123:i64 = add %121, %122
%124:i32 = mul 19:i32, %40
%125:i64 = sext %124 (hasExternalUses)
%126:i64 = mulnsw %85, %125
%127:i64 = add %123, %126
%128:i64 = mulnsw %1, %106
%129:i64 = add %127, %128
%130:i64 = mulnsw %67, %87
%131:i64 = add %129, %130
%132:i64 = mulnsw %13, %60
%133:i64 = add %131, %132
%134:i64 = mulnsw %26, %3
%135:i64 = mulnsw %6, %35
%136:i64 = add %134, %135
%137:i64 = mulnsw %39, %15
%138:i64 = add %136, %137
%139:i64 = mulnsw %19, %48
%140:i64 = add %138, %139
%141:i64 = mulnsw %28, %55
%142:i64 = add %140, %141
%143:i32 = mul 19:i32, %31
%144:i64 = sext %143 (hasExternalUses)
%145:i64 = mulnsw %144, %63
%146:i64 = add %142, %145
%147:i64 = mulnsw %1, %125
%148:i64 = add %146, %147
%149:i64 = mulnsw %106, %9
%150:i64 = add %148, %149
%151:i64 = mulnsw %13, %87
%152:i64 = add %150, %151
%153:i64 = mulnsw %60, %22
%154:i64 = add %152, %153 (hasExternalUses)
%155:i64 = add 33554432:i64, %154 (hasExternalUses)
%156:i64 = ashr %155, 26:i64
%157:i64 = add %133, %156 (hasExternalUses)
%158:i64 = add 16777216:i64, %157 (hasExternalUses)
%159:i64 = ashr %158, 25:i64
%160:i64 = add %112, %159 (hasExternalUses)
%161:i64 = add 33554432:i64, %160 (hasExternalUses)
%162:i64 = ashr %161, 26:i64
%163:i64 = add %91, %162 (hasExternalUses)
%164:i64 = add 16777216:i64, %163 (hasExternalUses)
%165:i64 = ashr %164, 25:i64
%166:i64 = add %65, %165
infer %166

; *****
; For LLVM instruction:
;  %346 = and i64 %334, 4261412864
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i64 = mulnsw %30, %32
%34:i64 = add %28, %33
%35:i32 = var
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i64 = sext %37 (hasExternalUses)
%39:i64 = mulnsw %36, %38
%40:i64 = add %34, %39
%41:i32 = var
%42:i64 = sext %41 (hasExternalUses)
%43:i32 = var
%44:i32 = add 1:i32, %43 (hasExternalUses)
%45:i64 = sext %44 (hasExternalUses)
%46:i64 = mulnsw %42, %45
%47:i64 = add %40, %46
%48:i32 = var
%49:i64 = sext %48 (hasExternalUses)
%50:i32 = var
%51:i32 = mul 19:i32, %50
%52:i64 = sext %51 (hasExternalUses)
%53:i64 = mulnsw %49, %52
%54:i64 = add %47, %53
%55:i32 = var
%56:i64 = sext %55 (hasExternalUses)
%57:i32 = var
%58:i32 = mul 19:i32, %57
%59:i64 = sext %58 (hasExternalUses)
%60:i64 = mulnsw %56, %59
%61:i64 = add %54, %60
%62:i64 = mulnsw %1, %8
%63:i32 = shl %11, 1:i32
%64:i64 = sext %63 (hasExternalUses)
%65:i64 = mulnsw %3, %64
%66:i64 = add %62, %65
%67:i64 = mulnsw %18, %14
%68:i64 = add %66, %67
%69:i32 = shl %23, 1:i32
%70:i64 = sext %69 (hasExternalUses)
%71:i64 = mulnsw %20, %70
%72:i64 = add %68, %71
%73:i64 = mulnsw %30, %26
%74:i64 = add %72, %73
%75:i32 = shl %35, 1:i32
%76:i64 = sext %75 (hasExternalUses)
%77:i64 = mulnsw %32, %76
%78:i64 = add %74, %77
%79:i64 = mulnsw %38, %45
%80:i64 = add %78, %79
%81:i32 = mul 19:i32, %41
%82:i64 = sext %81 (hasExternalUses)
%83:i32 = shl %48, 1:i32
%84:i64 = sext %83 (hasExternalUses)
%85:i64 = mulnsw %82, %84
%86:i64 = add %80, %85
%87:i64 = mulnsw %56, %52
%88:i64 = add %86, %87
%89:i32 = shl %5, 1:i32
%90:i64 = sext %89 (hasExternalUses)
%91:i64 = mulnsw %59, %90
%92:i64 = add %88, %91
%93:i64 = mulnsw %18, %3
%94:i64 = mulnsw %12, %8
%95:i64 = add %93, %94
%96:i64 = mulnsw %24, %14
%97:i64 = add %95, %96
%98:i64 = mulnsw %30, %20
%99:i64 = add %97, %98
%100:i64 = mulnsw %36, %26
%101:i64 = add %99, %100
%102:i64 = mulnsw %32, %45
%103:i64 = add %101, %102
%104:i32 = mul 19:i32, %37
%105:i64 = sext %104 (hasExternalUses)
%106:i64 = mulnsw %49, %105
%107:i64 = add %103, %106
%108:i64 = mulnsw %56, %82
%109:i64 = add %107, %108
%110:i64 = mulnsw %6, %52
%111:i64 = add %109, %110
%112:i64 = mulnsw %1, %59
%113:i64 = add %111, %112
%114:i64 = mulnsw %18, %8
%115:i64 = mulnsw %3, %70
%116:i64 = add %114, %115
%117:i64 = mulnsw %30, %14
%118:i64 = add %116, %117
%119:i64 = mulnsw %20, %76
%120:i64 = add %118, %119
%121:i64 = mulnsw %26, %45
%122:i64 = add %120, %121
%123:i32 = mul 19:i32, %31
%124:i64 = sext %123 (hasExternalUses)
%125:i64 = mulnsw %124, %84
%126:i64 = add %122, %125
%127:i64 = mulnsw %56, %105
%128:i64 = add %126, %127
%129:i64 = mulnsw %82, %90
%130:i64 = add %128, %129
%131:i64 = mulnsw %1, %52
%132:i64 = add %130, %131
%133:i64 = mulnsw %59, %64
%134:i64 = add %132, %133 (hasExternalUses)
%135:i64 = add 33554432:i64, %134 (hasExternalUses)
%136:i64 = ashr %135, 26:i64
%137:i64 = add %113, %136 (hasExternalUses)
%138:i64 = add 16777216:i64, %137 (hasExternalUses)
%139:i64 = ashr %138, 25:i64
%140:i64 = add %92, %139 (hasExternalUses)
%141:i64 = add 33554432:i64, %140 (hasExternalUses)
%142:i64 = ashr %141, 26:i64
%143:i64 = add %61, %142 (hasExternalUses)
%144:i64 = add 16777216:i64, %143 (hasExternalUses)
%145:i64 = and 4261412864:i64, %144
infer %145 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %347 = sub i64 %326, %346
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i64 = mulnsw %30, %32
%34:i64 = add %28, %33
%35:i32 = var
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i64 = sext %37 (hasExternalUses)
%39:i64 = mulnsw %36, %38
%40:i64 = add %34, %39
%41:i32 = var
%42:i64 = sext %41 (hasExternalUses)
%43:i32 = var
%44:i32 = add 1:i32, %43 (hasExternalUses)
%45:i64 = sext %44 (hasExternalUses)
%46:i64 = mulnsw %42, %45
%47:i64 = add %40, %46
%48:i32 = var
%49:i64 = sext %48 (hasExternalUses)
%50:i32 = var
%51:i32 = mul 19:i32, %50
%52:i64 = sext %51 (hasExternalUses)
%53:i64 = mulnsw %49, %52
%54:i64 = add %47, %53
%55:i32 = var
%56:i64 = sext %55 (hasExternalUses)
%57:i32 = var
%58:i32 = mul 19:i32, %57
%59:i64 = sext %58 (hasExternalUses)
%60:i64 = mulnsw %56, %59
%61:i64 = add %54, %60
%62:i64 = mulnsw %1, %8
%63:i32 = shl %11, 1:i32
%64:i64 = sext %63 (hasExternalUses)
%65:i64 = mulnsw %3, %64
%66:i64 = add %62, %65
%67:i64 = mulnsw %18, %14
%68:i64 = add %66, %67
%69:i32 = shl %23, 1:i32
%70:i64 = sext %69 (hasExternalUses)
%71:i64 = mulnsw %20, %70
%72:i64 = add %68, %71
%73:i64 = mulnsw %30, %26
%74:i64 = add %72, %73
%75:i32 = shl %35, 1:i32
%76:i64 = sext %75 (hasExternalUses)
%77:i64 = mulnsw %32, %76
%78:i64 = add %74, %77
%79:i64 = mulnsw %38, %45
%80:i64 = add %78, %79
%81:i32 = mul 19:i32, %41
%82:i64 = sext %81 (hasExternalUses)
%83:i32 = shl %48, 1:i32
%84:i64 = sext %83 (hasExternalUses)
%85:i64 = mulnsw %82, %84
%86:i64 = add %80, %85
%87:i64 = mulnsw %56, %52
%88:i64 = add %86, %87
%89:i32 = shl %5, 1:i32
%90:i64 = sext %89 (hasExternalUses)
%91:i64 = mulnsw %59, %90
%92:i64 = add %88, %91
%93:i64 = mulnsw %18, %3
%94:i64 = mulnsw %12, %8
%95:i64 = add %93, %94
%96:i64 = mulnsw %24, %14
%97:i64 = add %95, %96
%98:i64 = mulnsw %30, %20
%99:i64 = add %97, %98
%100:i64 = mulnsw %36, %26
%101:i64 = add %99, %100
%102:i64 = mulnsw %32, %45
%103:i64 = add %101, %102
%104:i32 = mul 19:i32, %37
%105:i64 = sext %104 (hasExternalUses)
%106:i64 = mulnsw %49, %105
%107:i64 = add %103, %106
%108:i64 = mulnsw %56, %82
%109:i64 = add %107, %108
%110:i64 = mulnsw %6, %52
%111:i64 = add %109, %110
%112:i64 = mulnsw %1, %59
%113:i64 = add %111, %112
%114:i64 = mulnsw %18, %8
%115:i64 = mulnsw %3, %70
%116:i64 = add %114, %115
%117:i64 = mulnsw %30, %14
%118:i64 = add %116, %117
%119:i64 = mulnsw %20, %76
%120:i64 = add %118, %119
%121:i64 = mulnsw %26, %45
%122:i64 = add %120, %121
%123:i32 = mul 19:i32, %31
%124:i64 = sext %123 (hasExternalUses)
%125:i64 = mulnsw %124, %84
%126:i64 = add %122, %125
%127:i64 = mulnsw %56, %105
%128:i64 = add %126, %127
%129:i64 = mulnsw %82, %90
%130:i64 = add %128, %129
%131:i64 = mulnsw %1, %52
%132:i64 = add %130, %131
%133:i64 = mulnsw %59, %64
%134:i64 = add %132, %133 (hasExternalUses)
%135:i64 = add 33554432:i64, %134 (hasExternalUses)
%136:i64 = ashr %135, 26:i64
%137:i64 = add %113, %136 (hasExternalUses)
%138:i64 = add 16777216:i64, %137 (hasExternalUses)
%139:i64 = ashr %138, 25:i64
%140:i64 = add %92, %139 (hasExternalUses)
%141:i64 = add 33554432:i64, %140 (hasExternalUses)
%142:i64 = ashr %141, 26:i64
%143:i64 = add %61, %142
%144:i64 = add 16777216:i64, %143 (hasExternalUses)
%145:i64 = and 4261412864:i64, %144
%146:i64 = sub %143, %145
infer %146 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %348 = add i64 %331, 33554432
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i32 = add 1:i32, %27 (hasExternalUses)
%29:i64 = sext %28 (hasExternalUses)
%30:i64 = mulnsw %26, %29
%31:i64 = add %24, %30
%32:i32 = var
%33:i32 = mul 19:i32, %32
%34:i64 = sext %33
%35:i32 = var
%36:i32 = shl %35, 1:i32
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %31, %38
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i32 = var
%43:i32 = mul 19:i32, %42
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %41, %44
%46:i64 = add %39, %45
%47:i32 = var
%48:i32 = mul 19:i32, %47
%49:i64 = sext %48 (hasExternalUses)
%50:i32 = var
%51:i32 = shl %50, 1:i32
%52:i64 = sext %51 (hasExternalUses)
%53:i64 = mulnsw %49, %52
%54:i64 = add %46, %53
%55:i32 = var
%56:i64 = sext %55 (hasExternalUses)
%57:i32 = var
%58:i32 = mul 19:i32, %57
%59:i64 = sext %58 (hasExternalUses)
%60:i64 = mulnsw %56, %59
%61:i64 = add %54, %60
%62:i32 = var
%63:i32 = mul 19:i32, %62
%64:i64 = sext %63 (hasExternalUses)
%65:i32 = var
%66:i32 = shl %65, 1:i32
%67:i64 = sext %66 (hasExternalUses)
%68:i64 = mulnsw %64, %67
%69:i64 = add %61, %68
%70:i64 = add 33554432:i64, %69 (hasExternalUses)
%71:i64 = and 18446744073642442752:i64, %70
%72:i64 = sub %69, %71
%73:i64 = mulnsw %13, %6
%74:i64 = sext %7 (hasExternalUses)
%75:i64 = mulnsw %74, %3
%76:i64 = add %73, %75
%77:i64 = sext %20 (hasExternalUses)
%78:i64 = mulnsw %77, %15
%79:i64 = add %76, %78
%80:i64 = mulnsw %19, %29
%81:i64 = add %79, %80
%82:i64 = sext %35 (hasExternalUses)
%83:i32 = mul 19:i32, %25
%84:i64 = sext %83
%85:i64 = mulnsw %82, %84
%86:i64 = add %81, %85
%87:i64 = mulnsw %41, %34
%88:i64 = add %86, %87
%89:i64 = sext %50 (hasExternalUses)
%90:i64 = mulnsw %89, %44
%91:i64 = add %88, %90
%92:i64 = mulnsw %56, %49
%93:i64 = add %91, %92
%94:i64 = sext %65 (hasExternalUses)
%95:i64 = mulnsw %94, %59
%96:i64 = add %93, %95
%97:i64 = mulnsw %1, %64
%98:i64 = add %96, %97
%99:i64 = mulnsw %13, %3
%100:i64 = mulnsw %6, %22
%101:i64 = add %99, %100
%102:i64 = mulnsw %15, %29
%103:i64 = add %101, %102
%104:i32 = mul 19:i32, %18
%105:i64 = sext %104
%106:i64 = mulnsw %105, %37
%107:i64 = add %103, %106
%108:i64 = mulnsw %41, %84
%109:i64 = add %107, %108
%110:i64 = mulnsw %34, %52
%111:i64 = add %109, %110
%112:i64 = mulnsw %56, %44
%113:i64 = add %111, %112
%114:i64 = mulnsw %49, %67
%115:i64 = add %113, %114
%116:i64 = mulnsw %1, %59
%117:i64 = add %115, %116
%118:i64 = mulnsw %64, %9
%119:i64 = add %117, %118
%120:i64 = mulnsw %77, %3
%121:i64 = mulnsw %6, %29
%122:i64 = add %120, %121
%123:i32 = mul 19:i32, %14
%124:i64 = sext %123
%125:i64 = mulnsw %82, %124
%126:i64 = add %122, %125
%127:i64 = mulnsw %41, %105
%128:i64 = add %126, %127
%129:i64 = mulnsw %89, %84
%130:i64 = add %128, %129
%131:i64 = mulnsw %56, %34
%132:i64 = add %130, %131
%133:i64 = mulnsw %94, %44
%134:i64 = add %132, %133
%135:i64 = mulnsw %1, %49
%136:i64 = add %134, %135
%137:i64 = mulnsw %74, %59
%138:i64 = add %136, %137
%139:i64 = mulnsw %13, %64
%140:i64 = add %138, %139
%141:i64 = mulnsw %3, %29
%142:i32 = mul 19:i32, %5
%143:i64 = sext %142
%144:i64 = mulnsw %143, %37
%145:i64 = add %141, %144
%146:i64 = mulnsw %41, %124
%147:i64 = add %145, %146
%148:i64 = mulnsw %105, %52
%149:i64 = add %147, %148
%150:i64 = mulnsw %56, %84
%151:i64 = add %149, %150
%152:i64 = mulnsw %34, %67
%153:i64 = add %151, %152
%154:i64 = mulnsw %1, %44
%155:i64 = add %153, %154
%156:i64 = mulnsw %49, %9
%157:i64 = add %155, %156
%158:i64 = mulnsw %13, %59
%159:i64 = add %157, %158
%160:i64 = mulnsw %64, %22
%161:i64 = add %159, %160 (hasExternalUses)
%162:i64 = add 33554432:i64, %161 (hasExternalUses)
%163:i64 = ashr %162, 26:i64
%164:i64 = add %140, %163 (hasExternalUses)
%165:i64 = add 16777216:i64, %164 (hasExternalUses)
%166:i64 = ashr %165, 25:i64
%167:i64 = add %119, %166 (hasExternalUses)
%168:i64 = add 33554432:i64, %167 (hasExternalUses)
%169:i64 = ashr %168, 26:i64
%170:i64 = add %98, %169 (hasExternalUses)
%171:i64 = add 16777216:i64, %170 (hasExternalUses)
%172:i64 = ashr %171, 25:i64
%173:i64 = add %72, %172 (hasExternalUses)
%174:i64 = add 33554432:i64, %173
infer %174 (demandedBits=0000001111111111111111111111111111111100000000000000000000000000)

; *****
; For LLVM instruction:
;  %349 = lshr i64 %348, 26
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i32 = add 1:i32, %27 (hasExternalUses)
%29:i64 = sext %28 (hasExternalUses)
%30:i64 = mulnsw %26, %29
%31:i64 = add %24, %30
%32:i32 = var
%33:i32 = mul 19:i32, %32
%34:i64 = sext %33
%35:i32 = var
%36:i32 = shl %35, 1:i32
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %31, %38
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i32 = var
%43:i32 = mul 19:i32, %42
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %41, %44
%46:i64 = add %39, %45
%47:i32 = var
%48:i32 = mul 19:i32, %47
%49:i64 = sext %48 (hasExternalUses)
%50:i32 = var
%51:i32 = shl %50, 1:i32
%52:i64 = sext %51 (hasExternalUses)
%53:i64 = mulnsw %49, %52
%54:i64 = add %46, %53
%55:i32 = var
%56:i64 = sext %55 (hasExternalUses)
%57:i32 = var
%58:i32 = mul 19:i32, %57
%59:i64 = sext %58 (hasExternalUses)
%60:i64 = mulnsw %56, %59
%61:i64 = add %54, %60
%62:i32 = var
%63:i32 = mul 19:i32, %62
%64:i64 = sext %63 (hasExternalUses)
%65:i32 = var
%66:i32 = shl %65, 1:i32
%67:i64 = sext %66 (hasExternalUses)
%68:i64 = mulnsw %64, %67
%69:i64 = add %61, %68
%70:i64 = add 33554432:i64, %69 (hasExternalUses)
%71:i64 = and 18446744073642442752:i64, %70
%72:i64 = sub %69, %71
%73:i64 = mulnsw %13, %6
%74:i64 = sext %7 (hasExternalUses)
%75:i64 = mulnsw %74, %3
%76:i64 = add %73, %75
%77:i64 = sext %20 (hasExternalUses)
%78:i64 = mulnsw %77, %15
%79:i64 = add %76, %78
%80:i64 = mulnsw %19, %29
%81:i64 = add %79, %80
%82:i64 = sext %35 (hasExternalUses)
%83:i32 = mul 19:i32, %25
%84:i64 = sext %83
%85:i64 = mulnsw %82, %84
%86:i64 = add %81, %85
%87:i64 = mulnsw %41, %34
%88:i64 = add %86, %87
%89:i64 = sext %50 (hasExternalUses)
%90:i64 = mulnsw %89, %44
%91:i64 = add %88, %90
%92:i64 = mulnsw %56, %49
%93:i64 = add %91, %92
%94:i64 = sext %65 (hasExternalUses)
%95:i64 = mulnsw %94, %59
%96:i64 = add %93, %95
%97:i64 = mulnsw %1, %64
%98:i64 = add %96, %97
%99:i64 = mulnsw %13, %3
%100:i64 = mulnsw %6, %22
%101:i64 = add %99, %100
%102:i64 = mulnsw %15, %29
%103:i64 = add %101, %102
%104:i32 = mul 19:i32, %18
%105:i64 = sext %104
%106:i64 = mulnsw %105, %37
%107:i64 = add %103, %106
%108:i64 = mulnsw %41, %84
%109:i64 = add %107, %108
%110:i64 = mulnsw %34, %52
%111:i64 = add %109, %110
%112:i64 = mulnsw %56, %44
%113:i64 = add %111, %112
%114:i64 = mulnsw %49, %67
%115:i64 = add %113, %114
%116:i64 = mulnsw %1, %59
%117:i64 = add %115, %116
%118:i64 = mulnsw %64, %9
%119:i64 = add %117, %118
%120:i64 = mulnsw %77, %3
%121:i64 = mulnsw %6, %29
%122:i64 = add %120, %121
%123:i32 = mul 19:i32, %14
%124:i64 = sext %123
%125:i64 = mulnsw %82, %124
%126:i64 = add %122, %125
%127:i64 = mulnsw %41, %105
%128:i64 = add %126, %127
%129:i64 = mulnsw %89, %84
%130:i64 = add %128, %129
%131:i64 = mulnsw %56, %34
%132:i64 = add %130, %131
%133:i64 = mulnsw %94, %44
%134:i64 = add %132, %133
%135:i64 = mulnsw %1, %49
%136:i64 = add %134, %135
%137:i64 = mulnsw %74, %59
%138:i64 = add %136, %137
%139:i64 = mulnsw %13, %64
%140:i64 = add %138, %139
%141:i64 = mulnsw %3, %29
%142:i32 = mul 19:i32, %5
%143:i64 = sext %142
%144:i64 = mulnsw %143, %37
%145:i64 = add %141, %144
%146:i64 = mulnsw %41, %124
%147:i64 = add %145, %146
%148:i64 = mulnsw %105, %52
%149:i64 = add %147, %148
%150:i64 = mulnsw %56, %84
%151:i64 = add %149, %150
%152:i64 = mulnsw %34, %67
%153:i64 = add %151, %152
%154:i64 = mulnsw %1, %44
%155:i64 = add %153, %154
%156:i64 = mulnsw %49, %9
%157:i64 = add %155, %156
%158:i64 = mulnsw %13, %59
%159:i64 = add %157, %158
%160:i64 = mulnsw %64, %22
%161:i64 = add %159, %160 (hasExternalUses)
%162:i64 = add 33554432:i64, %161 (hasExternalUses)
%163:i64 = ashr %162, 26:i64
%164:i64 = add %140, %163 (hasExternalUses)
%165:i64 = add 16777216:i64, %164 (hasExternalUses)
%166:i64 = ashr %165, 25:i64
%167:i64 = add %119, %166 (hasExternalUses)
%168:i64 = add 33554432:i64, %167 (hasExternalUses)
%169:i64 = ashr %168, 26:i64
%170:i64 = add %98, %169 (hasExternalUses)
%171:i64 = add 16777216:i64, %170 (hasExternalUses)
%172:i64 = ashr %171, 25:i64
%173:i64 = add %72, %172 (hasExternalUses)
%174:i64 = add 33554432:i64, %173 (hasExternalUses)
%175:i64 = lshr %174, 26:i64
infer %175 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %350 = add i64 %300, %349
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = add 1:i32, %31 (hasExternalUses)
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
%36:i32 = var
%37:i64 = sext %36 (hasExternalUses)
%38:i32 = var
%39:i32 = mul 19:i32, %38
%40:i64 = sext %39
%41:i64 = mulnsw %37, %40
%42:i64 = add %35, %41
%43:i32 = var
%44:i64 = sext %43 (hasExternalUses)
%45:i32 = var
%46:i32 = mul 19:i32, %45
%47:i64 = sext %46 (hasExternalUses)
%48:i64 = mulnsw %44, %47
%49:i64 = add %42, %48
%50:i32 = var
%51:i64 = sext %50 (hasExternalUses)
%52:i32 = var
%53:i32 = mul 19:i32, %52
%54:i64 = sext %53 (hasExternalUses)
%55:i64 = mulnsw %51, %54
%56:i64 = add %49, %55
%57:i32 = var
%58:i64 = sext %57 (hasExternalUses)
%59:i32 = var
%60:i32 = mul 19:i32, %59
%61:i64 = sext %60 (hasExternalUses)
%62:i64 = mulnsw %58, %61
%63:i64 = add %56, %62
%64:i64 = mulnsw %1, %8
%65:i32 = shl %11, 1:i32
%66:i64 = sext %65 (hasExternalUses)
%67:i64 = mulnsw %3, %66
%68:i64 = add %64, %67
%69:i64 = mulnsw %18, %14
%70:i64 = add %68, %69
%71:i32 = shl %23, 1:i32
%72:i64 = sext %71 (hasExternalUses)
%73:i64 = mulnsw %20, %72
%74:i64 = add %70, %73
%75:i64 = mulnsw %26, %33
%76:i64 = add %74, %75
%77:i32 = mul 19:i32, %29
%78:i64 = sext %77
%79:i32 = shl %36, 1:i32
%80:i64 = sext %79 (hasExternalUses)
%81:i64 = mulnsw %78, %80
%82:i64 = add %76, %81
%83:i64 = mulnsw %44, %40
%84:i64 = add %82, %83
%85:i32 = shl %50, 1:i32
%86:i64 = sext %85 (hasExternalUses)
%87:i64 = mulnsw %47, %86
%88:i64 = add %84, %87
%89:i64 = mulnsw %58, %54
%90:i64 = add %88, %89
%91:i32 = shl %5, 1:i32
%92:i64 = sext %91 (hasExternalUses)
%93:i64 = mulnsw %61, %92
%94:i64 = add %90, %93
%95:i64 = add 33554432:i64, %94
%96:i64 = ashr %95, 26:i64
%97:i64 = add %63, %96
%98:i64 = add 16777216:i64, %97 (hasExternalUses)
%99:i64 = and 4261412864:i64, %98
%100:i64 = sub %97, %99
%101:i64 = and 18446744073642442752:i64, %95
%102:i64 = sub %94, %101
%103:i64 = mulnsw %18, %3
%104:i64 = mulnsw %12, %8
%105:i64 = add %103, %104
%106:i64 = mulnsw %24, %14
%107:i64 = add %105, %106
%108:i64 = mulnsw %20, %33
%109:i64 = add %107, %108
%110:i32 = mul 19:i32, %25
%111:i64 = sext %110
%112:i64 = mulnsw %37, %111
%113:i64 = add %109, %112
%114:i64 = mulnsw %44, %78
%115:i64 = add %113, %114
%116:i64 = mulnsw %51, %40
%117:i64 = add %115, %116
%118:i64 = mulnsw %58, %47
%119:i64 = add %117, %118
%120:i64 = mulnsw %6, %54
%121:i64 = add %119, %120
%122:i64 = mulnsw %1, %61
%123:i64 = add %121, %122
%124:i64 = mulnsw %18, %8
%125:i64 = mulnsw %3, %72
%126:i64 = add %124, %125
%127:i64 = mulnsw %14, %33
%128:i64 = add %126, %127
%129:i32 = mul 19:i32, %19
%130:i64 = sext %129
%131:i64 = mulnsw %130, %80
%132:i64 = add %128, %131
%133:i64 = mulnsw %44, %111
%134:i64 = add %132, %133
%135:i64 = mulnsw %78, %86
%136:i64 = add %134, %135
%137:i64 = mulnsw %58, %40
%138:i64 = add %136, %137
%139:i64 = mulnsw %47, %92
%140:i64 = add %138, %139
%141:i64 = mulnsw %1, %54
%142:i64 = add %140, %141
%143:i64 = mulnsw %61, %66
%144:i64 = add %142, %143
%145:i64 = mulnsw %24, %8
%146:i64 = mulnsw %3, %33
%147:i64 = add %145, %146
%148:i32 = mul 19:i32, %13
%149:i64 = sext %148
%150:i64 = mulnsw %37, %149
%151:i64 = add %147, %150
%152:i64 = mulnsw %44, %130
%153:i64 = add %151, %152
%154:i64 = mulnsw %51, %111
%155:i64 = add %153, %154
%156:i64 = mulnsw %58, %78
%157:i64 = add %155, %156
%158:i64 = mulnsw %6, %40
%159:i64 = add %157, %158
%160:i64 = mulnsw %1, %47
%161:i64 = add %159, %160
%162:i64 = mulnsw %12, %54
%163:i64 = add %161, %162
%164:i64 = mulnsw %18, %61
%165:i64 = add %163, %164
%166:i64 = mulnsw %8, %33
%167:i32 = mul 19:i32, %2
%168:i64 = sext %167
%169:i64 = mulnsw %168, %80
%170:i64 = add %166, %169
%171:i64 = mulnsw %44, %149
%172:i64 = add %170, %171
%173:i64 = mulnsw %130, %86
%174:i64 = add %172, %173
%175:i64 = mulnsw %58, %111
%176:i64 = add %174, %175
%177:i64 = mulnsw %78, %92
%178:i64 = add %176, %177
%179:i64 = mulnsw %1, %40
%180:i64 = add %178, %179
%181:i64 = mulnsw %47, %66
%182:i64 = add %180, %181
%183:i64 = mulnsw %18, %54
%184:i64 = add %182, %183
%185:i64 = mulnsw %61, %72
%186:i64 = add %184, %185 (hasExternalUses)
%187:i64 = add 33554432:i64, %186 (hasExternalUses)
%188:i64 = ashr %187, 26:i64
%189:i64 = add %165, %188 (hasExternalUses)
%190:i64 = add 16777216:i64, %189 (hasExternalUses)
%191:i64 = ashr %190, 25:i64
%192:i64 = add %144, %191 (hasExternalUses)
%193:i64 = add 33554432:i64, %192 (hasExternalUses)
%194:i64 = ashr %193, 26:i64
%195:i64 = add %123, %194 (hasExternalUses)
%196:i64 = add 16777216:i64, %195 (hasExternalUses)
%197:i64 = ashr %196, 25:i64
%198:i64 = add %102, %197 (hasExternalUses)
%199:i64 = add 33554432:i64, %198 (hasExternalUses)
%200:i64 = lshr %199, 26:i64
%201:i64 = add %100, %200
infer %201 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %351 = and i64 %348, 4227858432
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i32 = add 1:i32, %27 (hasExternalUses)
%29:i64 = sext %28 (hasExternalUses)
%30:i64 = mulnsw %26, %29
%31:i64 = add %24, %30
%32:i32 = var
%33:i32 = mul 19:i32, %32
%34:i64 = sext %33
%35:i32 = var
%36:i32 = shl %35, 1:i32
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %31, %38
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i32 = var
%43:i32 = mul 19:i32, %42
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %41, %44
%46:i64 = add %39, %45
%47:i32 = var
%48:i32 = mul 19:i32, %47
%49:i64 = sext %48 (hasExternalUses)
%50:i32 = var
%51:i32 = shl %50, 1:i32
%52:i64 = sext %51 (hasExternalUses)
%53:i64 = mulnsw %49, %52
%54:i64 = add %46, %53
%55:i32 = var
%56:i64 = sext %55 (hasExternalUses)
%57:i32 = var
%58:i32 = mul 19:i32, %57
%59:i64 = sext %58 (hasExternalUses)
%60:i64 = mulnsw %56, %59
%61:i64 = add %54, %60
%62:i32 = var
%63:i32 = mul 19:i32, %62
%64:i64 = sext %63 (hasExternalUses)
%65:i32 = var
%66:i32 = shl %65, 1:i32
%67:i64 = sext %66 (hasExternalUses)
%68:i64 = mulnsw %64, %67
%69:i64 = add %61, %68
%70:i64 = add 33554432:i64, %69 (hasExternalUses)
%71:i64 = and 18446744073642442752:i64, %70
%72:i64 = sub %69, %71
%73:i64 = mulnsw %13, %6
%74:i64 = sext %7 (hasExternalUses)
%75:i64 = mulnsw %74, %3
%76:i64 = add %73, %75
%77:i64 = sext %20 (hasExternalUses)
%78:i64 = mulnsw %77, %15
%79:i64 = add %76, %78
%80:i64 = mulnsw %19, %29
%81:i64 = add %79, %80
%82:i64 = sext %35 (hasExternalUses)
%83:i32 = mul 19:i32, %25
%84:i64 = sext %83
%85:i64 = mulnsw %82, %84
%86:i64 = add %81, %85
%87:i64 = mulnsw %41, %34
%88:i64 = add %86, %87
%89:i64 = sext %50 (hasExternalUses)
%90:i64 = mulnsw %89, %44
%91:i64 = add %88, %90
%92:i64 = mulnsw %56, %49
%93:i64 = add %91, %92
%94:i64 = sext %65 (hasExternalUses)
%95:i64 = mulnsw %94, %59
%96:i64 = add %93, %95
%97:i64 = mulnsw %1, %64
%98:i64 = add %96, %97
%99:i64 = mulnsw %13, %3
%100:i64 = mulnsw %6, %22
%101:i64 = add %99, %100
%102:i64 = mulnsw %15, %29
%103:i64 = add %101, %102
%104:i32 = mul 19:i32, %18
%105:i64 = sext %104
%106:i64 = mulnsw %105, %37
%107:i64 = add %103, %106
%108:i64 = mulnsw %41, %84
%109:i64 = add %107, %108
%110:i64 = mulnsw %34, %52
%111:i64 = add %109, %110
%112:i64 = mulnsw %56, %44
%113:i64 = add %111, %112
%114:i64 = mulnsw %49, %67
%115:i64 = add %113, %114
%116:i64 = mulnsw %1, %59
%117:i64 = add %115, %116
%118:i64 = mulnsw %64, %9
%119:i64 = add %117, %118
%120:i64 = mulnsw %77, %3
%121:i64 = mulnsw %6, %29
%122:i64 = add %120, %121
%123:i32 = mul 19:i32, %14
%124:i64 = sext %123
%125:i64 = mulnsw %82, %124
%126:i64 = add %122, %125
%127:i64 = mulnsw %41, %105
%128:i64 = add %126, %127
%129:i64 = mulnsw %89, %84
%130:i64 = add %128, %129
%131:i64 = mulnsw %56, %34
%132:i64 = add %130, %131
%133:i64 = mulnsw %94, %44
%134:i64 = add %132, %133
%135:i64 = mulnsw %1, %49
%136:i64 = add %134, %135
%137:i64 = mulnsw %74, %59
%138:i64 = add %136, %137
%139:i64 = mulnsw %13, %64
%140:i64 = add %138, %139
%141:i64 = mulnsw %3, %29
%142:i32 = mul 19:i32, %5
%143:i64 = sext %142
%144:i64 = mulnsw %143, %37
%145:i64 = add %141, %144
%146:i64 = mulnsw %41, %124
%147:i64 = add %145, %146
%148:i64 = mulnsw %105, %52
%149:i64 = add %147, %148
%150:i64 = mulnsw %56, %84
%151:i64 = add %149, %150
%152:i64 = mulnsw %34, %67
%153:i64 = add %151, %152
%154:i64 = mulnsw %1, %44
%155:i64 = add %153, %154
%156:i64 = mulnsw %49, %9
%157:i64 = add %155, %156
%158:i64 = mulnsw %13, %59
%159:i64 = add %157, %158
%160:i64 = mulnsw %64, %22
%161:i64 = add %159, %160 (hasExternalUses)
%162:i64 = add 33554432:i64, %161 (hasExternalUses)
%163:i64 = ashr %162, 26:i64
%164:i64 = add %140, %163 (hasExternalUses)
%165:i64 = add 16777216:i64, %164 (hasExternalUses)
%166:i64 = ashr %165, 25:i64
%167:i64 = add %119, %166 (hasExternalUses)
%168:i64 = add 33554432:i64, %167 (hasExternalUses)
%169:i64 = ashr %168, 26:i64
%170:i64 = add %98, %169 (hasExternalUses)
%171:i64 = add 16777216:i64, %170 (hasExternalUses)
%172:i64 = ashr %171, 25:i64
%173:i64 = add %72, %172 (hasExternalUses)
%174:i64 = add 33554432:i64, %173 (hasExternalUses)
%175:i64 = and 4227858432:i64, %174
infer %175 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %352 = sub i64 %331, %351
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i32 = add 1:i32, %27 (hasExternalUses)
%29:i64 = sext %28 (hasExternalUses)
%30:i64 = mulnsw %26, %29
%31:i64 = add %24, %30
%32:i32 = var
%33:i32 = mul 19:i32, %32
%34:i64 = sext %33
%35:i32 = var
%36:i32 = shl %35, 1:i32
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %31, %38
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i32 = var
%43:i32 = mul 19:i32, %42
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %41, %44
%46:i64 = add %39, %45
%47:i32 = var
%48:i32 = mul 19:i32, %47
%49:i64 = sext %48 (hasExternalUses)
%50:i32 = var
%51:i32 = shl %50, 1:i32
%52:i64 = sext %51 (hasExternalUses)
%53:i64 = mulnsw %49, %52
%54:i64 = add %46, %53
%55:i32 = var
%56:i64 = sext %55 (hasExternalUses)
%57:i32 = var
%58:i32 = mul 19:i32, %57
%59:i64 = sext %58 (hasExternalUses)
%60:i64 = mulnsw %56, %59
%61:i64 = add %54, %60
%62:i32 = var
%63:i32 = mul 19:i32, %62
%64:i64 = sext %63 (hasExternalUses)
%65:i32 = var
%66:i32 = shl %65, 1:i32
%67:i64 = sext %66 (hasExternalUses)
%68:i64 = mulnsw %64, %67
%69:i64 = add %61, %68
%70:i64 = add 33554432:i64, %69 (hasExternalUses)
%71:i64 = and 18446744073642442752:i64, %70
%72:i64 = sub %69, %71
%73:i64 = mulnsw %13, %6
%74:i64 = sext %7 (hasExternalUses)
%75:i64 = mulnsw %74, %3
%76:i64 = add %73, %75
%77:i64 = sext %20 (hasExternalUses)
%78:i64 = mulnsw %77, %15
%79:i64 = add %76, %78
%80:i64 = mulnsw %19, %29
%81:i64 = add %79, %80
%82:i64 = sext %35 (hasExternalUses)
%83:i32 = mul 19:i32, %25
%84:i64 = sext %83
%85:i64 = mulnsw %82, %84
%86:i64 = add %81, %85
%87:i64 = mulnsw %41, %34
%88:i64 = add %86, %87
%89:i64 = sext %50 (hasExternalUses)
%90:i64 = mulnsw %89, %44
%91:i64 = add %88, %90
%92:i64 = mulnsw %56, %49
%93:i64 = add %91, %92
%94:i64 = sext %65 (hasExternalUses)
%95:i64 = mulnsw %94, %59
%96:i64 = add %93, %95
%97:i64 = mulnsw %1, %64
%98:i64 = add %96, %97
%99:i64 = mulnsw %13, %3
%100:i64 = mulnsw %6, %22
%101:i64 = add %99, %100
%102:i64 = mulnsw %15, %29
%103:i64 = add %101, %102
%104:i32 = mul 19:i32, %18
%105:i64 = sext %104
%106:i64 = mulnsw %105, %37
%107:i64 = add %103, %106
%108:i64 = mulnsw %41, %84
%109:i64 = add %107, %108
%110:i64 = mulnsw %34, %52
%111:i64 = add %109, %110
%112:i64 = mulnsw %56, %44
%113:i64 = add %111, %112
%114:i64 = mulnsw %49, %67
%115:i64 = add %113, %114
%116:i64 = mulnsw %1, %59
%117:i64 = add %115, %116
%118:i64 = mulnsw %64, %9
%119:i64 = add %117, %118
%120:i64 = mulnsw %77, %3
%121:i64 = mulnsw %6, %29
%122:i64 = add %120, %121
%123:i32 = mul 19:i32, %14
%124:i64 = sext %123
%125:i64 = mulnsw %82, %124
%126:i64 = add %122, %125
%127:i64 = mulnsw %41, %105
%128:i64 = add %126, %127
%129:i64 = mulnsw %89, %84
%130:i64 = add %128, %129
%131:i64 = mulnsw %56, %34
%132:i64 = add %130, %131
%133:i64 = mulnsw %94, %44
%134:i64 = add %132, %133
%135:i64 = mulnsw %1, %49
%136:i64 = add %134, %135
%137:i64 = mulnsw %74, %59
%138:i64 = add %136, %137
%139:i64 = mulnsw %13, %64
%140:i64 = add %138, %139
%141:i64 = mulnsw %3, %29
%142:i32 = mul 19:i32, %5
%143:i64 = sext %142
%144:i64 = mulnsw %143, %37
%145:i64 = add %141, %144
%146:i64 = mulnsw %41, %124
%147:i64 = add %145, %146
%148:i64 = mulnsw %105, %52
%149:i64 = add %147, %148
%150:i64 = mulnsw %56, %84
%151:i64 = add %149, %150
%152:i64 = mulnsw %34, %67
%153:i64 = add %151, %152
%154:i64 = mulnsw %1, %44
%155:i64 = add %153, %154
%156:i64 = mulnsw %49, %9
%157:i64 = add %155, %156
%158:i64 = mulnsw %13, %59
%159:i64 = add %157, %158
%160:i64 = mulnsw %64, %22
%161:i64 = add %159, %160 (hasExternalUses)
%162:i64 = add 33554432:i64, %161 (hasExternalUses)
%163:i64 = ashr %162, 26:i64
%164:i64 = add %140, %163 (hasExternalUses)
%165:i64 = add 16777216:i64, %164 (hasExternalUses)
%166:i64 = ashr %165, 25:i64
%167:i64 = add %119, %166 (hasExternalUses)
%168:i64 = add 33554432:i64, %167 (hasExternalUses)
%169:i64 = ashr %168, 26:i64
%170:i64 = add %98, %169 (hasExternalUses)
%171:i64 = add 16777216:i64, %170 (hasExternalUses)
%172:i64 = ashr %171, 25:i64
%173:i64 = add %72, %172
%174:i64 = add 33554432:i64, %173 (hasExternalUses)
%175:i64 = and 4227858432:i64, %174
%176:i64 = sub %173, %175
infer %176 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %353 = add i64 %345, 33554432
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %26, %28
%30:i64 = add %24, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = shl %33, 1:i32
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i64 = mulnsw %39, %41
%43:i64 = add %37, %42
%44:i32 = var
%45:i64 = sext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = shl %46, 1:i32
%48:i64 = sext %47 (hasExternalUses)
%49:i64 = mulnsw %45, %48
%50:i64 = add %43, %49
%51:i32 = var
%52:i64 = sext %51 (hasExternalUses)
%53:i32 = var
%54:i32 = add 1:i32, %53 (hasExternalUses)
%55:i64 = sext %54 (hasExternalUses)
%56:i64 = mulnsw %52, %55
%57:i64 = add %50, %56
%58:i32 = var
%59:i32 = mul 19:i32, %58
%60:i64 = sext %59 (hasExternalUses)
%61:i32 = var
%62:i32 = shl %61, 1:i32
%63:i64 = sext %62 (hasExternalUses)
%64:i64 = mulnsw %60, %63
%65:i64 = add %57, %64
%66:i64 = mulnsw %13, %6
%67:i64 = sext %7 (hasExternalUses)
%68:i64 = mulnsw %67, %3
%69:i64 = add %66, %68
%70:i64 = sext %20 (hasExternalUses)
%71:i64 = mulnsw %70, %15
%72:i64 = add %69, %71
%73:i64 = mulnsw %26, %19
%74:i64 = add %72, %73
%75:i64 = sext %33 (hasExternalUses)
%76:i64 = mulnsw %75, %28
%77:i64 = add %74, %76
%78:i64 = mulnsw %39, %32
%79:i64 = add %77, %78
%80:i64 = sext %46 (hasExternalUses)
%81:i64 = mulnsw %80, %41
%82:i64 = add %79, %81
%83:i64 = mulnsw %45, %55
%84:i64 = add %82, %83
%85:i64 = sext %61 (hasExternalUses)
%86:i32 = mul 19:i32, %51
%87:i64 = sext %86 (hasExternalUses)
%88:i64 = mulnsw %85, %87
%89:i64 = add %84, %88
%90:i64 = mulnsw %1, %60
%91:i64 = add %89, %90
%92:i64 = mulnsw %13, %3
%93:i64 = mulnsw %6, %22
%94:i64 = add %92, %93
%95:i64 = mulnsw %26, %15
%96:i64 = add %94, %95
%97:i64 = mulnsw %19, %35
%98:i64 = add %96, %97
%99:i64 = mulnsw %39, %28
%100:i64 = add %98, %99
%101:i64 = mulnsw %32, %48
%102:i64 = add %100, %101
%103:i64 = mulnsw %41, %55
%104:i64 = add %102, %103
%105:i32 = mul 19:i32, %44
%106:i64 = sext %105 (hasExternalUses)
%107:i64 = mulnsw %106, %63
%108:i64 = add %104, %107
%109:i64 = mulnsw %1, %87
%110:i64 = add %108, %109
%111:i64 = mulnsw %60, %9
%112:i64 = add %110, %111
%113:i64 = mulnsw %26, %6
%114:i64 = mulnsw %70, %3
%115:i64 = add %113, %114
%116:i64 = mulnsw %75, %15
%117:i64 = add %115, %116
%118:i64 = mulnsw %39, %19
%119:i64 = add %117, %118
%120:i64 = mulnsw %80, %28
%121:i64 = add %119, %120
%122:i64 = mulnsw %32, %55
%123:i64 = add %121, %122
%124:i32 = mul 19:i32, %40
%125:i64 = sext %124 (hasExternalUses)
%126:i64 = mulnsw %85, %125
%127:i64 = add %123, %126
%128:i64 = mulnsw %1, %106
%129:i64 = add %127, %128
%130:i64 = mulnsw %67, %87
%131:i64 = add %129, %130
%132:i64 = mulnsw %13, %60
%133:i64 = add %131, %132
%134:i64 = mulnsw %26, %3
%135:i64 = mulnsw %6, %35
%136:i64 = add %134, %135
%137:i64 = mulnsw %39, %15
%138:i64 = add %136, %137
%139:i64 = mulnsw %19, %48
%140:i64 = add %138, %139
%141:i64 = mulnsw %28, %55
%142:i64 = add %140, %141
%143:i32 = mul 19:i32, %31
%144:i64 = sext %143 (hasExternalUses)
%145:i64 = mulnsw %144, %63
%146:i64 = add %142, %145
%147:i64 = mulnsw %1, %125
%148:i64 = add %146, %147
%149:i64 = mulnsw %106, %9
%150:i64 = add %148, %149
%151:i64 = mulnsw %13, %87
%152:i64 = add %150, %151
%153:i64 = mulnsw %60, %22
%154:i64 = add %152, %153 (hasExternalUses)
%155:i64 = add 33554432:i64, %154 (hasExternalUses)
%156:i64 = ashr %155, 26:i64
%157:i64 = add %133, %156 (hasExternalUses)
%158:i64 = add 16777216:i64, %157 (hasExternalUses)
%159:i64 = ashr %158, 25:i64
%160:i64 = add %112, %159 (hasExternalUses)
%161:i64 = add 33554432:i64, %160 (hasExternalUses)
%162:i64 = ashr %161, 26:i64
%163:i64 = add %91, %162 (hasExternalUses)
%164:i64 = add 16777216:i64, %163 (hasExternalUses)
%165:i64 = ashr %164, 25:i64
%166:i64 = add %65, %165 (hasExternalUses)
%167:i64 = add 33554432:i64, %166
infer %167 (demandedBits=1111111111111111111111111111111111111100000000000000000000000000)

; *****
; For LLVM instruction:
;  %354 = ashr i64 %353, 26
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %26, %28
%30:i64 = add %24, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = shl %33, 1:i32
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i64 = mulnsw %39, %41
%43:i64 = add %37, %42
%44:i32 = var
%45:i64 = sext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = shl %46, 1:i32
%48:i64 = sext %47 (hasExternalUses)
%49:i64 = mulnsw %45, %48
%50:i64 = add %43, %49
%51:i32 = var
%52:i64 = sext %51 (hasExternalUses)
%53:i32 = var
%54:i32 = add 1:i32, %53 (hasExternalUses)
%55:i64 = sext %54 (hasExternalUses)
%56:i64 = mulnsw %52, %55
%57:i64 = add %50, %56
%58:i32 = var
%59:i32 = mul 19:i32, %58
%60:i64 = sext %59 (hasExternalUses)
%61:i32 = var
%62:i32 = shl %61, 1:i32
%63:i64 = sext %62 (hasExternalUses)
%64:i64 = mulnsw %60, %63
%65:i64 = add %57, %64
%66:i64 = mulnsw %13, %6
%67:i64 = sext %7 (hasExternalUses)
%68:i64 = mulnsw %67, %3
%69:i64 = add %66, %68
%70:i64 = sext %20 (hasExternalUses)
%71:i64 = mulnsw %70, %15
%72:i64 = add %69, %71
%73:i64 = mulnsw %26, %19
%74:i64 = add %72, %73
%75:i64 = sext %33 (hasExternalUses)
%76:i64 = mulnsw %75, %28
%77:i64 = add %74, %76
%78:i64 = mulnsw %39, %32
%79:i64 = add %77, %78
%80:i64 = sext %46 (hasExternalUses)
%81:i64 = mulnsw %80, %41
%82:i64 = add %79, %81
%83:i64 = mulnsw %45, %55
%84:i64 = add %82, %83
%85:i64 = sext %61 (hasExternalUses)
%86:i32 = mul 19:i32, %51
%87:i64 = sext %86 (hasExternalUses)
%88:i64 = mulnsw %85, %87
%89:i64 = add %84, %88
%90:i64 = mulnsw %1, %60
%91:i64 = add %89, %90
%92:i64 = mulnsw %13, %3
%93:i64 = mulnsw %6, %22
%94:i64 = add %92, %93
%95:i64 = mulnsw %26, %15
%96:i64 = add %94, %95
%97:i64 = mulnsw %19, %35
%98:i64 = add %96, %97
%99:i64 = mulnsw %39, %28
%100:i64 = add %98, %99
%101:i64 = mulnsw %32, %48
%102:i64 = add %100, %101
%103:i64 = mulnsw %41, %55
%104:i64 = add %102, %103
%105:i32 = mul 19:i32, %44
%106:i64 = sext %105 (hasExternalUses)
%107:i64 = mulnsw %106, %63
%108:i64 = add %104, %107
%109:i64 = mulnsw %1, %87
%110:i64 = add %108, %109
%111:i64 = mulnsw %60, %9
%112:i64 = add %110, %111
%113:i64 = mulnsw %26, %6
%114:i64 = mulnsw %70, %3
%115:i64 = add %113, %114
%116:i64 = mulnsw %75, %15
%117:i64 = add %115, %116
%118:i64 = mulnsw %39, %19
%119:i64 = add %117, %118
%120:i64 = mulnsw %80, %28
%121:i64 = add %119, %120
%122:i64 = mulnsw %32, %55
%123:i64 = add %121, %122
%124:i32 = mul 19:i32, %40
%125:i64 = sext %124 (hasExternalUses)
%126:i64 = mulnsw %85, %125
%127:i64 = add %123, %126
%128:i64 = mulnsw %1, %106
%129:i64 = add %127, %128
%130:i64 = mulnsw %67, %87
%131:i64 = add %129, %130
%132:i64 = mulnsw %13, %60
%133:i64 = add %131, %132
%134:i64 = mulnsw %26, %3
%135:i64 = mulnsw %6, %35
%136:i64 = add %134, %135
%137:i64 = mulnsw %39, %15
%138:i64 = add %136, %137
%139:i64 = mulnsw %19, %48
%140:i64 = add %138, %139
%141:i64 = mulnsw %28, %55
%142:i64 = add %140, %141
%143:i32 = mul 19:i32, %31
%144:i64 = sext %143 (hasExternalUses)
%145:i64 = mulnsw %144, %63
%146:i64 = add %142, %145
%147:i64 = mulnsw %1, %125
%148:i64 = add %146, %147
%149:i64 = mulnsw %106, %9
%150:i64 = add %148, %149
%151:i64 = mulnsw %13, %87
%152:i64 = add %150, %151
%153:i64 = mulnsw %60, %22
%154:i64 = add %152, %153 (hasExternalUses)
%155:i64 = add 33554432:i64, %154 (hasExternalUses)
%156:i64 = ashr %155, 26:i64
%157:i64 = add %133, %156 (hasExternalUses)
%158:i64 = add 16777216:i64, %157 (hasExternalUses)
%159:i64 = ashr %158, 25:i64
%160:i64 = add %112, %159 (hasExternalUses)
%161:i64 = add 33554432:i64, %160 (hasExternalUses)
%162:i64 = ashr %161, 26:i64
%163:i64 = add %91, %162 (hasExternalUses)
%164:i64 = add 16777216:i64, %163 (hasExternalUses)
%165:i64 = ashr %164, 25:i64
%166:i64 = add %65, %165 (hasExternalUses)
%167:i64 = add 33554432:i64, %166 (hasExternalUses)
%168:i64 = ashr %167, 26:i64
infer %168

; *****
; For LLVM instruction:
;  %355 = add i64 %204, %215
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
infer %10

; *****
; For LLVM instruction:
;  %356 = add i64 %355, %193
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
infer %16

; *****
; For LLVM instruction:
;  %357 = add i64 %356, %181
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
infer %22

; *****
; For LLVM instruction:
;  %358 = add i64 %357, %170
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
infer %28

; *****
; For LLVM instruction:
;  %359 = add i64 %358, %158
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i64 = mulnsw %30, %32
%34:i64 = add %28, %33
infer %34

; *****
; For LLVM instruction:
;  %360 = add i64 %359, %147
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i64 = mulnsw %30, %32
%34:i64 = add %28, %33
%35:i32 = var
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i64 = sext %37 (hasExternalUses)
%39:i64 = mulnsw %36, %38
%40:i64 = add %34, %39
infer %40

; *****
; For LLVM instruction:
;  %361 = add i64 %360, %135
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i64 = mulnsw %30, %32
%34:i64 = add %28, %33
%35:i32 = var
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i64 = sext %37 (hasExternalUses)
%39:i64 = mulnsw %36, %38
%40:i64 = add %34, %39
%41:i32 = var
%42:i64 = sext %41 (hasExternalUses)
%43:i32 = var
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %42, %44
%46:i64 = add %40, %45
infer %46

; *****
; For LLVM instruction:
;  %362 = add i64 %361, %124
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i64 = mulnsw %30, %32
%34:i64 = add %28, %33
%35:i32 = var
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i64 = sext %37 (hasExternalUses)
%39:i64 = mulnsw %36, %38
%40:i64 = add %34, %39
%41:i32 = var
%42:i64 = sext %41 (hasExternalUses)
%43:i32 = var
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %42, %44
%46:i64 = add %40, %45
%47:i32 = var
%48:i64 = sext %47 (hasExternalUses)
%49:i32 = var
%50:i64 = sext %49 (hasExternalUses)
%51:i64 = mulnsw %48, %50
%52:i64 = add %46, %51
infer %52

; *****
; For LLVM instruction:
;  %363 = add i64 %362, %113
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i64 = mulnsw %30, %32
%34:i64 = add %28, %33
%35:i32 = var
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i64 = sext %37 (hasExternalUses)
%39:i64 = mulnsw %36, %38
%40:i64 = add %34, %39
%41:i32 = var
%42:i64 = sext %41 (hasExternalUses)
%43:i32 = var
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %42, %44
%46:i64 = add %40, %45
%47:i32 = var
%48:i64 = sext %47 (hasExternalUses)
%49:i32 = var
%50:i64 = sext %49 (hasExternalUses)
%51:i64 = mulnsw %48, %50
%52:i64 = add %46, %51
%53:i32 = var
%54:i64 = sext %53
%55:i32 = var
%56:i32 = add 1:i32, %55 (hasExternalUses)
%57:i64 = sext %56 (hasExternalUses)
%58:i64 = mulnsw %54, %57
%59:i64 = add %52, %58
infer %59

; *****
; For LLVM instruction:
;  %364 = add i64 %363, %354
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i64 = sext %31
%33:i64 = mulnsw %30, %32
%34:i64 = add %28, %33
%35:i32 = var
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i64 = sext %37
%39:i64 = mulnsw %36, %38
%40:i64 = add %34, %39
%41:i32 = var
%42:i64 = sext %41 (hasExternalUses)
%43:i32 = var
%44:i64 = sext %43
%45:i64 = mulnsw %42, %44
%46:i64 = add %40, %45
%47:i32 = var
%48:i64 = sext %47 (hasExternalUses)
%49:i32 = var
%50:i64 = sext %49
%51:i64 = mulnsw %48, %50
%52:i64 = add %46, %51
%53:i32 = var
%54:i64 = sext %53
%55:i32 = var
%56:i32 = add 1:i32, %55 (hasExternalUses)
%57:i64 = sext %56 (hasExternalUses)
%58:i64 = mulnsw %54, %57
%59:i64 = add %52, %58
%60:i64 = mulnsw %1, %8
%61:i32 = shl %11, 1:i32
%62:i64 = sext %61 (hasExternalUses)
%63:i64 = mulnsw %3, %62
%64:i64 = add %60, %63
%65:i64 = mulnsw %18, %14
%66:i64 = add %64, %65
%67:i32 = shl %23, 1:i32
%68:i64 = sext %67 (hasExternalUses)
%69:i64 = mulnsw %20, %68
%70:i64 = add %66, %69
%71:i64 = mulnsw %30, %26
%72:i64 = add %70, %71
%73:i32 = shl %35, 1:i32
%74:i64 = sext %73 (hasExternalUses)
%75:i64 = mulnsw %32, %74
%76:i64 = add %72, %75
%77:i64 = mulnsw %42, %38
%78:i64 = add %76, %77
%79:i32 = shl %47, 1:i32
%80:i64 = sext %79 (hasExternalUses)
%81:i64 = mulnsw %44, %80
%82:i64 = add %78, %81
%83:i64 = mulnsw %50, %57
%84:i64 = add %82, %83
%85:i32 = mul 19:i32, %53
%86:i64 = sext %85 (hasExternalUses)
%87:i32 = shl %5, 1:i32
%88:i64 = sext %87 (hasExternalUses)
%89:i64 = mulnsw %86, %88
%90:i64 = add %84, %89
%91:i64 = mulnsw %18, %3
%92:i64 = mulnsw %12, %8
%93:i64 = add %91, %92
%94:i64 = mulnsw %24, %14
%95:i64 = add %93, %94
%96:i64 = mulnsw %30, %20
%97:i64 = add %95, %96
%98:i64 = mulnsw %36, %26
%99:i64 = add %97, %98
%100:i64 = mulnsw %42, %32
%101:i64 = add %99, %100
%102:i64 = mulnsw %48, %38
%103:i64 = add %101, %102
%104:i64 = mulnsw %44, %57
%105:i64 = add %103, %104
%106:i32 = mul 19:i32, %49
%107:i64 = sext %106 (hasExternalUses)
%108:i64 = mulnsw %6, %107
%109:i64 = add %105, %108
%110:i64 = mulnsw %1, %86
%111:i64 = add %109, %110
%112:i64 = mulnsw %18, %8
%113:i64 = mulnsw %3, %68
%114:i64 = add %112, %113
%115:i64 = mulnsw %30, %14
%116:i64 = add %114, %115
%117:i64 = mulnsw %20, %74
%118:i64 = add %116, %117
%119:i64 = mulnsw %42, %26
%120:i64 = add %118, %119
%121:i64 = mulnsw %32, %80
%122:i64 = add %120, %121
%123:i64 = mulnsw %38, %57
%124:i64 = add %122, %123
%125:i32 = mul 19:i32, %43
%126:i64 = sext %125 (hasExternalUses)
%127:i64 = mulnsw %126, %88
%128:i64 = add %124, %127
%129:i64 = mulnsw %1, %107
%130:i64 = add %128, %129
%131:i64 = mulnsw %86, %62
%132:i64 = add %130, %131
%133:i64 = mulnsw %30, %3
%134:i64 = mulnsw %24, %8
%135:i64 = add %133, %134
%136:i64 = mulnsw %36, %14
%137:i64 = add %135, %136
%138:i64 = mulnsw %42, %20
%139:i64 = add %137, %138
%140:i64 = mulnsw %48, %26
%141:i64 = add %139, %140
%142:i64 = mulnsw %32, %57
%143:i64 = add %141, %142
%144:i32 = mul 19:i32, %37
%145:i64 = sext %144 (hasExternalUses)
%146:i64 = mulnsw %6, %145
%147:i64 = add %143, %146
%148:i64 = mulnsw %1, %126
%149:i64 = add %147, %148
%150:i64 = mulnsw %12, %107
%151:i64 = add %149, %150
%152:i64 = mulnsw %18, %86
%153:i64 = add %151, %152
%154:i64 = mulnsw %30, %8
%155:i64 = mulnsw %3, %74
%156:i64 = add %154, %155
%157:i64 = mulnsw %42, %14
%158:i64 = add %156, %157
%159:i64 = mulnsw %20, %80
%160:i64 = add %158, %159
%161:i64 = mulnsw %26, %57
%162:i64 = add %160, %161
%163:i32 = mul 19:i32, %31
%164:i64 = sext %163 (hasExternalUses)
%165:i64 = mulnsw %164, %88
%166:i64 = add %162, %165
%167:i64 = mulnsw %1, %145
%168:i64 = add %166, %167
%169:i64 = mulnsw %126, %62
%170:i64 = add %168, %169
%171:i64 = mulnsw %18, %107
%172:i64 = add %170, %171
%173:i64 = mulnsw %86, %68
%174:i64 = add %172, %173 (hasExternalUses)
%175:i64 = add 33554432:i64, %174 (hasExternalUses)
%176:i64 = ashr %175, 26:i64
%177:i64 = add %153, %176 (hasExternalUses)
%178:i64 = add 16777216:i64, %177 (hasExternalUses)
%179:i64 = ashr %178, 25:i64
%180:i64 = add %132, %179 (hasExternalUses)
%181:i64 = add 33554432:i64, %180 (hasExternalUses)
%182:i64 = ashr %181, 26:i64
%183:i64 = add %111, %182 (hasExternalUses)
%184:i64 = add 16777216:i64, %183 (hasExternalUses)
%185:i64 = ashr %184, 25:i64
%186:i64 = add %90, %185 (hasExternalUses)
%187:i64 = add 33554432:i64, %186 (hasExternalUses)
%188:i64 = ashr %187, 26:i64
%189:i64 = add %59, %188
infer %189

; *****
; For LLVM instruction:
;  %365 = and i64 %353, 4227858432
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %26, %28
%30:i64 = add %24, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = shl %33, 1:i32
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i64 = mulnsw %39, %41
%43:i64 = add %37, %42
%44:i32 = var
%45:i64 = sext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = shl %46, 1:i32
%48:i64 = sext %47 (hasExternalUses)
%49:i64 = mulnsw %45, %48
%50:i64 = add %43, %49
%51:i32 = var
%52:i64 = sext %51 (hasExternalUses)
%53:i32 = var
%54:i32 = add 1:i32, %53 (hasExternalUses)
%55:i64 = sext %54 (hasExternalUses)
%56:i64 = mulnsw %52, %55
%57:i64 = add %50, %56
%58:i32 = var
%59:i32 = mul 19:i32, %58
%60:i64 = sext %59 (hasExternalUses)
%61:i32 = var
%62:i32 = shl %61, 1:i32
%63:i64 = sext %62 (hasExternalUses)
%64:i64 = mulnsw %60, %63
%65:i64 = add %57, %64
%66:i64 = mulnsw %13, %6
%67:i64 = sext %7 (hasExternalUses)
%68:i64 = mulnsw %67, %3
%69:i64 = add %66, %68
%70:i64 = sext %20 (hasExternalUses)
%71:i64 = mulnsw %70, %15
%72:i64 = add %69, %71
%73:i64 = mulnsw %26, %19
%74:i64 = add %72, %73
%75:i64 = sext %33 (hasExternalUses)
%76:i64 = mulnsw %75, %28
%77:i64 = add %74, %76
%78:i64 = mulnsw %39, %32
%79:i64 = add %77, %78
%80:i64 = sext %46 (hasExternalUses)
%81:i64 = mulnsw %80, %41
%82:i64 = add %79, %81
%83:i64 = mulnsw %45, %55
%84:i64 = add %82, %83
%85:i64 = sext %61 (hasExternalUses)
%86:i32 = mul 19:i32, %51
%87:i64 = sext %86 (hasExternalUses)
%88:i64 = mulnsw %85, %87
%89:i64 = add %84, %88
%90:i64 = mulnsw %1, %60
%91:i64 = add %89, %90
%92:i64 = mulnsw %13, %3
%93:i64 = mulnsw %6, %22
%94:i64 = add %92, %93
%95:i64 = mulnsw %26, %15
%96:i64 = add %94, %95
%97:i64 = mulnsw %19, %35
%98:i64 = add %96, %97
%99:i64 = mulnsw %39, %28
%100:i64 = add %98, %99
%101:i64 = mulnsw %32, %48
%102:i64 = add %100, %101
%103:i64 = mulnsw %41, %55
%104:i64 = add %102, %103
%105:i32 = mul 19:i32, %44
%106:i64 = sext %105 (hasExternalUses)
%107:i64 = mulnsw %106, %63
%108:i64 = add %104, %107
%109:i64 = mulnsw %1, %87
%110:i64 = add %108, %109
%111:i64 = mulnsw %60, %9
%112:i64 = add %110, %111
%113:i64 = mulnsw %26, %6
%114:i64 = mulnsw %70, %3
%115:i64 = add %113, %114
%116:i64 = mulnsw %75, %15
%117:i64 = add %115, %116
%118:i64 = mulnsw %39, %19
%119:i64 = add %117, %118
%120:i64 = mulnsw %80, %28
%121:i64 = add %119, %120
%122:i64 = mulnsw %32, %55
%123:i64 = add %121, %122
%124:i32 = mul 19:i32, %40
%125:i64 = sext %124 (hasExternalUses)
%126:i64 = mulnsw %85, %125
%127:i64 = add %123, %126
%128:i64 = mulnsw %1, %106
%129:i64 = add %127, %128
%130:i64 = mulnsw %67, %87
%131:i64 = add %129, %130
%132:i64 = mulnsw %13, %60
%133:i64 = add %131, %132
%134:i64 = mulnsw %26, %3
%135:i64 = mulnsw %6, %35
%136:i64 = add %134, %135
%137:i64 = mulnsw %39, %15
%138:i64 = add %136, %137
%139:i64 = mulnsw %19, %48
%140:i64 = add %138, %139
%141:i64 = mulnsw %28, %55
%142:i64 = add %140, %141
%143:i32 = mul 19:i32, %31
%144:i64 = sext %143 (hasExternalUses)
%145:i64 = mulnsw %144, %63
%146:i64 = add %142, %145
%147:i64 = mulnsw %1, %125
%148:i64 = add %146, %147
%149:i64 = mulnsw %106, %9
%150:i64 = add %148, %149
%151:i64 = mulnsw %13, %87
%152:i64 = add %150, %151
%153:i64 = mulnsw %60, %22
%154:i64 = add %152, %153 (hasExternalUses)
%155:i64 = add 33554432:i64, %154 (hasExternalUses)
%156:i64 = ashr %155, 26:i64
%157:i64 = add %133, %156 (hasExternalUses)
%158:i64 = add 16777216:i64, %157 (hasExternalUses)
%159:i64 = ashr %158, 25:i64
%160:i64 = add %112, %159 (hasExternalUses)
%161:i64 = add 33554432:i64, %160 (hasExternalUses)
%162:i64 = ashr %161, 26:i64
%163:i64 = add %91, %162 (hasExternalUses)
%164:i64 = add 16777216:i64, %163 (hasExternalUses)
%165:i64 = ashr %164, 25:i64
%166:i64 = add %65, %165 (hasExternalUses)
%167:i64 = add 33554432:i64, %166 (hasExternalUses)
%168:i64 = and 4227858432:i64, %167
infer %168 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %366 = sub i64 %345, %365
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %26, %28
%30:i64 = add %24, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = shl %33, 1:i32
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i64 = mulnsw %39, %41
%43:i64 = add %37, %42
%44:i32 = var
%45:i64 = sext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = shl %46, 1:i32
%48:i64 = sext %47 (hasExternalUses)
%49:i64 = mulnsw %45, %48
%50:i64 = add %43, %49
%51:i32 = var
%52:i64 = sext %51 (hasExternalUses)
%53:i32 = var
%54:i32 = add 1:i32, %53 (hasExternalUses)
%55:i64 = sext %54 (hasExternalUses)
%56:i64 = mulnsw %52, %55
%57:i64 = add %50, %56
%58:i32 = var
%59:i32 = mul 19:i32, %58
%60:i64 = sext %59 (hasExternalUses)
%61:i32 = var
%62:i32 = shl %61, 1:i32
%63:i64 = sext %62 (hasExternalUses)
%64:i64 = mulnsw %60, %63
%65:i64 = add %57, %64
%66:i64 = mulnsw %13, %6
%67:i64 = sext %7 (hasExternalUses)
%68:i64 = mulnsw %67, %3
%69:i64 = add %66, %68
%70:i64 = sext %20 (hasExternalUses)
%71:i64 = mulnsw %70, %15
%72:i64 = add %69, %71
%73:i64 = mulnsw %26, %19
%74:i64 = add %72, %73
%75:i64 = sext %33 (hasExternalUses)
%76:i64 = mulnsw %75, %28
%77:i64 = add %74, %76
%78:i64 = mulnsw %39, %32
%79:i64 = add %77, %78
%80:i64 = sext %46 (hasExternalUses)
%81:i64 = mulnsw %80, %41
%82:i64 = add %79, %81
%83:i64 = mulnsw %45, %55
%84:i64 = add %82, %83
%85:i64 = sext %61 (hasExternalUses)
%86:i32 = mul 19:i32, %51
%87:i64 = sext %86 (hasExternalUses)
%88:i64 = mulnsw %85, %87
%89:i64 = add %84, %88
%90:i64 = mulnsw %1, %60
%91:i64 = add %89, %90
%92:i64 = mulnsw %13, %3
%93:i64 = mulnsw %6, %22
%94:i64 = add %92, %93
%95:i64 = mulnsw %26, %15
%96:i64 = add %94, %95
%97:i64 = mulnsw %19, %35
%98:i64 = add %96, %97
%99:i64 = mulnsw %39, %28
%100:i64 = add %98, %99
%101:i64 = mulnsw %32, %48
%102:i64 = add %100, %101
%103:i64 = mulnsw %41, %55
%104:i64 = add %102, %103
%105:i32 = mul 19:i32, %44
%106:i64 = sext %105 (hasExternalUses)
%107:i64 = mulnsw %106, %63
%108:i64 = add %104, %107
%109:i64 = mulnsw %1, %87
%110:i64 = add %108, %109
%111:i64 = mulnsw %60, %9
%112:i64 = add %110, %111
%113:i64 = mulnsw %26, %6
%114:i64 = mulnsw %70, %3
%115:i64 = add %113, %114
%116:i64 = mulnsw %75, %15
%117:i64 = add %115, %116
%118:i64 = mulnsw %39, %19
%119:i64 = add %117, %118
%120:i64 = mulnsw %80, %28
%121:i64 = add %119, %120
%122:i64 = mulnsw %32, %55
%123:i64 = add %121, %122
%124:i32 = mul 19:i32, %40
%125:i64 = sext %124 (hasExternalUses)
%126:i64 = mulnsw %85, %125
%127:i64 = add %123, %126
%128:i64 = mulnsw %1, %106
%129:i64 = add %127, %128
%130:i64 = mulnsw %67, %87
%131:i64 = add %129, %130
%132:i64 = mulnsw %13, %60
%133:i64 = add %131, %132
%134:i64 = mulnsw %26, %3
%135:i64 = mulnsw %6, %35
%136:i64 = add %134, %135
%137:i64 = mulnsw %39, %15
%138:i64 = add %136, %137
%139:i64 = mulnsw %19, %48
%140:i64 = add %138, %139
%141:i64 = mulnsw %28, %55
%142:i64 = add %140, %141
%143:i32 = mul 19:i32, %31
%144:i64 = sext %143 (hasExternalUses)
%145:i64 = mulnsw %144, %63
%146:i64 = add %142, %145
%147:i64 = mulnsw %1, %125
%148:i64 = add %146, %147
%149:i64 = mulnsw %106, %9
%150:i64 = add %148, %149
%151:i64 = mulnsw %13, %87
%152:i64 = add %150, %151
%153:i64 = mulnsw %60, %22
%154:i64 = add %152, %153 (hasExternalUses)
%155:i64 = add 33554432:i64, %154 (hasExternalUses)
%156:i64 = ashr %155, 26:i64
%157:i64 = add %133, %156 (hasExternalUses)
%158:i64 = add 16777216:i64, %157 (hasExternalUses)
%159:i64 = ashr %158, 25:i64
%160:i64 = add %112, %159 (hasExternalUses)
%161:i64 = add 33554432:i64, %160 (hasExternalUses)
%162:i64 = ashr %161, 26:i64
%163:i64 = add %91, %162 (hasExternalUses)
%164:i64 = add 16777216:i64, %163 (hasExternalUses)
%165:i64 = ashr %164, 25:i64
%166:i64 = add %65, %165
%167:i64 = add 33554432:i64, %166 (hasExternalUses)
%168:i64 = and 4227858432:i64, %167
%169:i64 = sub %166, %168
infer %169 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %367 = add i64 %364, 16777216
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i64 = sext %31
%33:i64 = mulnsw %30, %32
%34:i64 = add %28, %33
%35:i32 = var
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i64 = sext %37
%39:i64 = mulnsw %36, %38
%40:i64 = add %34, %39
%41:i32 = var
%42:i64 = sext %41 (hasExternalUses)
%43:i32 = var
%44:i64 = sext %43
%45:i64 = mulnsw %42, %44
%46:i64 = add %40, %45
%47:i32 = var
%48:i64 = sext %47 (hasExternalUses)
%49:i32 = var
%50:i64 = sext %49
%51:i64 = mulnsw %48, %50
%52:i64 = add %46, %51
%53:i32 = var
%54:i64 = sext %53
%55:i32 = var
%56:i32 = add 1:i32, %55 (hasExternalUses)
%57:i64 = sext %56 (hasExternalUses)
%58:i64 = mulnsw %54, %57
%59:i64 = add %52, %58
%60:i64 = mulnsw %1, %8
%61:i32 = shl %11, 1:i32
%62:i64 = sext %61 (hasExternalUses)
%63:i64 = mulnsw %3, %62
%64:i64 = add %60, %63
%65:i64 = mulnsw %18, %14
%66:i64 = add %64, %65
%67:i32 = shl %23, 1:i32
%68:i64 = sext %67 (hasExternalUses)
%69:i64 = mulnsw %20, %68
%70:i64 = add %66, %69
%71:i64 = mulnsw %30, %26
%72:i64 = add %70, %71
%73:i32 = shl %35, 1:i32
%74:i64 = sext %73 (hasExternalUses)
%75:i64 = mulnsw %32, %74
%76:i64 = add %72, %75
%77:i64 = mulnsw %42, %38
%78:i64 = add %76, %77
%79:i32 = shl %47, 1:i32
%80:i64 = sext %79 (hasExternalUses)
%81:i64 = mulnsw %44, %80
%82:i64 = add %78, %81
%83:i64 = mulnsw %50, %57
%84:i64 = add %82, %83
%85:i32 = mul 19:i32, %53
%86:i64 = sext %85 (hasExternalUses)
%87:i32 = shl %5, 1:i32
%88:i64 = sext %87 (hasExternalUses)
%89:i64 = mulnsw %86, %88
%90:i64 = add %84, %89
%91:i64 = mulnsw %18, %3
%92:i64 = mulnsw %12, %8
%93:i64 = add %91, %92
%94:i64 = mulnsw %24, %14
%95:i64 = add %93, %94
%96:i64 = mulnsw %30, %20
%97:i64 = add %95, %96
%98:i64 = mulnsw %36, %26
%99:i64 = add %97, %98
%100:i64 = mulnsw %42, %32
%101:i64 = add %99, %100
%102:i64 = mulnsw %48, %38
%103:i64 = add %101, %102
%104:i64 = mulnsw %44, %57
%105:i64 = add %103, %104
%106:i32 = mul 19:i32, %49
%107:i64 = sext %106 (hasExternalUses)
%108:i64 = mulnsw %6, %107
%109:i64 = add %105, %108
%110:i64 = mulnsw %1, %86
%111:i64 = add %109, %110
%112:i64 = mulnsw %18, %8
%113:i64 = mulnsw %3, %68
%114:i64 = add %112, %113
%115:i64 = mulnsw %30, %14
%116:i64 = add %114, %115
%117:i64 = mulnsw %20, %74
%118:i64 = add %116, %117
%119:i64 = mulnsw %42, %26
%120:i64 = add %118, %119
%121:i64 = mulnsw %32, %80
%122:i64 = add %120, %121
%123:i64 = mulnsw %38, %57
%124:i64 = add %122, %123
%125:i32 = mul 19:i32, %43
%126:i64 = sext %125 (hasExternalUses)
%127:i64 = mulnsw %126, %88
%128:i64 = add %124, %127
%129:i64 = mulnsw %1, %107
%130:i64 = add %128, %129
%131:i64 = mulnsw %86, %62
%132:i64 = add %130, %131
%133:i64 = mulnsw %30, %3
%134:i64 = mulnsw %24, %8
%135:i64 = add %133, %134
%136:i64 = mulnsw %36, %14
%137:i64 = add %135, %136
%138:i64 = mulnsw %42, %20
%139:i64 = add %137, %138
%140:i64 = mulnsw %48, %26
%141:i64 = add %139, %140
%142:i64 = mulnsw %32, %57
%143:i64 = add %141, %142
%144:i32 = mul 19:i32, %37
%145:i64 = sext %144 (hasExternalUses)
%146:i64 = mulnsw %6, %145
%147:i64 = add %143, %146
%148:i64 = mulnsw %1, %126
%149:i64 = add %147, %148
%150:i64 = mulnsw %12, %107
%151:i64 = add %149, %150
%152:i64 = mulnsw %18, %86
%153:i64 = add %151, %152
%154:i64 = mulnsw %30, %8
%155:i64 = mulnsw %3, %74
%156:i64 = add %154, %155
%157:i64 = mulnsw %42, %14
%158:i64 = add %156, %157
%159:i64 = mulnsw %20, %80
%160:i64 = add %158, %159
%161:i64 = mulnsw %26, %57
%162:i64 = add %160, %161
%163:i32 = mul 19:i32, %31
%164:i64 = sext %163 (hasExternalUses)
%165:i64 = mulnsw %164, %88
%166:i64 = add %162, %165
%167:i64 = mulnsw %1, %145
%168:i64 = add %166, %167
%169:i64 = mulnsw %126, %62
%170:i64 = add %168, %169
%171:i64 = mulnsw %18, %107
%172:i64 = add %170, %171
%173:i64 = mulnsw %86, %68
%174:i64 = add %172, %173 (hasExternalUses)
%175:i64 = add 33554432:i64, %174 (hasExternalUses)
%176:i64 = ashr %175, 26:i64
%177:i64 = add %153, %176 (hasExternalUses)
%178:i64 = add 16777216:i64, %177 (hasExternalUses)
%179:i64 = ashr %178, 25:i64
%180:i64 = add %132, %179 (hasExternalUses)
%181:i64 = add 33554432:i64, %180 (hasExternalUses)
%182:i64 = ashr %181, 26:i64
%183:i64 = add %111, %182 (hasExternalUses)
%184:i64 = add 16777216:i64, %183 (hasExternalUses)
%185:i64 = ashr %184, 25:i64
%186:i64 = add %90, %185 (hasExternalUses)
%187:i64 = add 33554432:i64, %186 (hasExternalUses)
%188:i64 = ashr %187, 26:i64
%189:i64 = add %59, %188 (hasExternalUses)
%190:i64 = add 16777216:i64, %189
infer %190 (demandedBits=1111111111111111111111111111111111111110000000000000000000000000)

; *****
; For LLVM instruction:
;  %368 = ashr i64 %367, 25
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i64 = sext %31
%33:i64 = mulnsw %30, %32
%34:i64 = add %28, %33
%35:i32 = var
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i64 = sext %37
%39:i64 = mulnsw %36, %38
%40:i64 = add %34, %39
%41:i32 = var
%42:i64 = sext %41 (hasExternalUses)
%43:i32 = var
%44:i64 = sext %43
%45:i64 = mulnsw %42, %44
%46:i64 = add %40, %45
%47:i32 = var
%48:i64 = sext %47 (hasExternalUses)
%49:i32 = var
%50:i64 = sext %49
%51:i64 = mulnsw %48, %50
%52:i64 = add %46, %51
%53:i32 = var
%54:i64 = sext %53
%55:i32 = var
%56:i32 = add 1:i32, %55 (hasExternalUses)
%57:i64 = sext %56 (hasExternalUses)
%58:i64 = mulnsw %54, %57
%59:i64 = add %52, %58
%60:i64 = mulnsw %1, %8
%61:i32 = shl %11, 1:i32
%62:i64 = sext %61 (hasExternalUses)
%63:i64 = mulnsw %3, %62
%64:i64 = add %60, %63
%65:i64 = mulnsw %18, %14
%66:i64 = add %64, %65
%67:i32 = shl %23, 1:i32
%68:i64 = sext %67 (hasExternalUses)
%69:i64 = mulnsw %20, %68
%70:i64 = add %66, %69
%71:i64 = mulnsw %30, %26
%72:i64 = add %70, %71
%73:i32 = shl %35, 1:i32
%74:i64 = sext %73 (hasExternalUses)
%75:i64 = mulnsw %32, %74
%76:i64 = add %72, %75
%77:i64 = mulnsw %42, %38
%78:i64 = add %76, %77
%79:i32 = shl %47, 1:i32
%80:i64 = sext %79 (hasExternalUses)
%81:i64 = mulnsw %44, %80
%82:i64 = add %78, %81
%83:i64 = mulnsw %50, %57
%84:i64 = add %82, %83
%85:i32 = mul 19:i32, %53
%86:i64 = sext %85 (hasExternalUses)
%87:i32 = shl %5, 1:i32
%88:i64 = sext %87 (hasExternalUses)
%89:i64 = mulnsw %86, %88
%90:i64 = add %84, %89
%91:i64 = mulnsw %18, %3
%92:i64 = mulnsw %12, %8
%93:i64 = add %91, %92
%94:i64 = mulnsw %24, %14
%95:i64 = add %93, %94
%96:i64 = mulnsw %30, %20
%97:i64 = add %95, %96
%98:i64 = mulnsw %36, %26
%99:i64 = add %97, %98
%100:i64 = mulnsw %42, %32
%101:i64 = add %99, %100
%102:i64 = mulnsw %48, %38
%103:i64 = add %101, %102
%104:i64 = mulnsw %44, %57
%105:i64 = add %103, %104
%106:i32 = mul 19:i32, %49
%107:i64 = sext %106 (hasExternalUses)
%108:i64 = mulnsw %6, %107
%109:i64 = add %105, %108
%110:i64 = mulnsw %1, %86
%111:i64 = add %109, %110
%112:i64 = mulnsw %18, %8
%113:i64 = mulnsw %3, %68
%114:i64 = add %112, %113
%115:i64 = mulnsw %30, %14
%116:i64 = add %114, %115
%117:i64 = mulnsw %20, %74
%118:i64 = add %116, %117
%119:i64 = mulnsw %42, %26
%120:i64 = add %118, %119
%121:i64 = mulnsw %32, %80
%122:i64 = add %120, %121
%123:i64 = mulnsw %38, %57
%124:i64 = add %122, %123
%125:i32 = mul 19:i32, %43
%126:i64 = sext %125 (hasExternalUses)
%127:i64 = mulnsw %126, %88
%128:i64 = add %124, %127
%129:i64 = mulnsw %1, %107
%130:i64 = add %128, %129
%131:i64 = mulnsw %86, %62
%132:i64 = add %130, %131
%133:i64 = mulnsw %30, %3
%134:i64 = mulnsw %24, %8
%135:i64 = add %133, %134
%136:i64 = mulnsw %36, %14
%137:i64 = add %135, %136
%138:i64 = mulnsw %42, %20
%139:i64 = add %137, %138
%140:i64 = mulnsw %48, %26
%141:i64 = add %139, %140
%142:i64 = mulnsw %32, %57
%143:i64 = add %141, %142
%144:i32 = mul 19:i32, %37
%145:i64 = sext %144 (hasExternalUses)
%146:i64 = mulnsw %6, %145
%147:i64 = add %143, %146
%148:i64 = mulnsw %1, %126
%149:i64 = add %147, %148
%150:i64 = mulnsw %12, %107
%151:i64 = add %149, %150
%152:i64 = mulnsw %18, %86
%153:i64 = add %151, %152
%154:i64 = mulnsw %30, %8
%155:i64 = mulnsw %3, %74
%156:i64 = add %154, %155
%157:i64 = mulnsw %42, %14
%158:i64 = add %156, %157
%159:i64 = mulnsw %20, %80
%160:i64 = add %158, %159
%161:i64 = mulnsw %26, %57
%162:i64 = add %160, %161
%163:i32 = mul 19:i32, %31
%164:i64 = sext %163 (hasExternalUses)
%165:i64 = mulnsw %164, %88
%166:i64 = add %162, %165
%167:i64 = mulnsw %1, %145
%168:i64 = add %166, %167
%169:i64 = mulnsw %126, %62
%170:i64 = add %168, %169
%171:i64 = mulnsw %18, %107
%172:i64 = add %170, %171
%173:i64 = mulnsw %86, %68
%174:i64 = add %172, %173 (hasExternalUses)
%175:i64 = add 33554432:i64, %174 (hasExternalUses)
%176:i64 = ashr %175, 26:i64
%177:i64 = add %153, %176 (hasExternalUses)
%178:i64 = add 16777216:i64, %177 (hasExternalUses)
%179:i64 = ashr %178, 25:i64
%180:i64 = add %132, %179 (hasExternalUses)
%181:i64 = add 33554432:i64, %180 (hasExternalUses)
%182:i64 = ashr %181, 26:i64
%183:i64 = add %111, %182 (hasExternalUses)
%184:i64 = add 16777216:i64, %183 (hasExternalUses)
%185:i64 = ashr %184, 25:i64
%186:i64 = add %90, %185 (hasExternalUses)
%187:i64 = add 33554432:i64, %186 (hasExternalUses)
%188:i64 = ashr %187, 26:i64
%189:i64 = add %59, %188 (hasExternalUses)
%190:i64 = add 16777216:i64, %189 (hasExternalUses)
%191:i64 = ashr %190, 25:i64
infer %191 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %369 = mul nsw i64 %368, 19
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i64 = sext %31
%33:i64 = mulnsw %30, %32
%34:i64 = add %28, %33
%35:i32 = var
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i64 = sext %37
%39:i64 = mulnsw %36, %38
%40:i64 = add %34, %39
%41:i32 = var
%42:i64 = sext %41 (hasExternalUses)
%43:i32 = var
%44:i64 = sext %43
%45:i64 = mulnsw %42, %44
%46:i64 = add %40, %45
%47:i32 = var
%48:i64 = sext %47 (hasExternalUses)
%49:i32 = var
%50:i64 = sext %49
%51:i64 = mulnsw %48, %50
%52:i64 = add %46, %51
%53:i32 = var
%54:i64 = sext %53
%55:i32 = var
%56:i32 = add 1:i32, %55 (hasExternalUses)
%57:i64 = sext %56 (hasExternalUses)
%58:i64 = mulnsw %54, %57
%59:i64 = add %52, %58
%60:i64 = mulnsw %1, %8
%61:i32 = shl %11, 1:i32
%62:i64 = sext %61 (hasExternalUses)
%63:i64 = mulnsw %3, %62
%64:i64 = add %60, %63
%65:i64 = mulnsw %18, %14
%66:i64 = add %64, %65
%67:i32 = shl %23, 1:i32
%68:i64 = sext %67 (hasExternalUses)
%69:i64 = mulnsw %20, %68
%70:i64 = add %66, %69
%71:i64 = mulnsw %30, %26
%72:i64 = add %70, %71
%73:i32 = shl %35, 1:i32
%74:i64 = sext %73 (hasExternalUses)
%75:i64 = mulnsw %32, %74
%76:i64 = add %72, %75
%77:i64 = mulnsw %42, %38
%78:i64 = add %76, %77
%79:i32 = shl %47, 1:i32
%80:i64 = sext %79 (hasExternalUses)
%81:i64 = mulnsw %44, %80
%82:i64 = add %78, %81
%83:i64 = mulnsw %50, %57
%84:i64 = add %82, %83
%85:i32 = mul 19:i32, %53
%86:i64 = sext %85 (hasExternalUses)
%87:i32 = shl %5, 1:i32
%88:i64 = sext %87 (hasExternalUses)
%89:i64 = mulnsw %86, %88
%90:i64 = add %84, %89
%91:i64 = mulnsw %18, %3
%92:i64 = mulnsw %12, %8
%93:i64 = add %91, %92
%94:i64 = mulnsw %24, %14
%95:i64 = add %93, %94
%96:i64 = mulnsw %30, %20
%97:i64 = add %95, %96
%98:i64 = mulnsw %36, %26
%99:i64 = add %97, %98
%100:i64 = mulnsw %42, %32
%101:i64 = add %99, %100
%102:i64 = mulnsw %48, %38
%103:i64 = add %101, %102
%104:i64 = mulnsw %44, %57
%105:i64 = add %103, %104
%106:i32 = mul 19:i32, %49
%107:i64 = sext %106 (hasExternalUses)
%108:i64 = mulnsw %6, %107
%109:i64 = add %105, %108
%110:i64 = mulnsw %1, %86
%111:i64 = add %109, %110
%112:i64 = mulnsw %18, %8
%113:i64 = mulnsw %3, %68
%114:i64 = add %112, %113
%115:i64 = mulnsw %30, %14
%116:i64 = add %114, %115
%117:i64 = mulnsw %20, %74
%118:i64 = add %116, %117
%119:i64 = mulnsw %42, %26
%120:i64 = add %118, %119
%121:i64 = mulnsw %32, %80
%122:i64 = add %120, %121
%123:i64 = mulnsw %38, %57
%124:i64 = add %122, %123
%125:i32 = mul 19:i32, %43
%126:i64 = sext %125 (hasExternalUses)
%127:i64 = mulnsw %126, %88
%128:i64 = add %124, %127
%129:i64 = mulnsw %1, %107
%130:i64 = add %128, %129
%131:i64 = mulnsw %86, %62
%132:i64 = add %130, %131
%133:i64 = mulnsw %30, %3
%134:i64 = mulnsw %24, %8
%135:i64 = add %133, %134
%136:i64 = mulnsw %36, %14
%137:i64 = add %135, %136
%138:i64 = mulnsw %42, %20
%139:i64 = add %137, %138
%140:i64 = mulnsw %48, %26
%141:i64 = add %139, %140
%142:i64 = mulnsw %32, %57
%143:i64 = add %141, %142
%144:i32 = mul 19:i32, %37
%145:i64 = sext %144 (hasExternalUses)
%146:i64 = mulnsw %6, %145
%147:i64 = add %143, %146
%148:i64 = mulnsw %1, %126
%149:i64 = add %147, %148
%150:i64 = mulnsw %12, %107
%151:i64 = add %149, %150
%152:i64 = mulnsw %18, %86
%153:i64 = add %151, %152
%154:i64 = mulnsw %30, %8
%155:i64 = mulnsw %3, %74
%156:i64 = add %154, %155
%157:i64 = mulnsw %42, %14
%158:i64 = add %156, %157
%159:i64 = mulnsw %20, %80
%160:i64 = add %158, %159
%161:i64 = mulnsw %26, %57
%162:i64 = add %160, %161
%163:i32 = mul 19:i32, %31
%164:i64 = sext %163 (hasExternalUses)
%165:i64 = mulnsw %164, %88
%166:i64 = add %162, %165
%167:i64 = mulnsw %1, %145
%168:i64 = add %166, %167
%169:i64 = mulnsw %126, %62
%170:i64 = add %168, %169
%171:i64 = mulnsw %18, %107
%172:i64 = add %170, %171
%173:i64 = mulnsw %86, %68
%174:i64 = add %172, %173 (hasExternalUses)
%175:i64 = add 33554432:i64, %174 (hasExternalUses)
%176:i64 = ashr %175, 26:i64
%177:i64 = add %153, %176 (hasExternalUses)
%178:i64 = add 16777216:i64, %177 (hasExternalUses)
%179:i64 = ashr %178, 25:i64
%180:i64 = add %132, %179 (hasExternalUses)
%181:i64 = add 33554432:i64, %180 (hasExternalUses)
%182:i64 = ashr %181, 26:i64
%183:i64 = add %111, %182 (hasExternalUses)
%184:i64 = add 16777216:i64, %183 (hasExternalUses)
%185:i64 = ashr %184, 25:i64
%186:i64 = add %90, %185 (hasExternalUses)
%187:i64 = add 33554432:i64, %186 (hasExternalUses)
%188:i64 = ashr %187, 26:i64
%189:i64 = add %59, %188 (hasExternalUses)
%190:i64 = add 16777216:i64, %189 (hasExternalUses)
%191:i64 = ashr %190, 25:i64
%192:i64 = mulnsw 19:i64, %191
infer %192 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %370 = add i64 %369, %258
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = add 1:i32, %2 (hasExternalUses)
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
%6:i32 = var
%7:i32 = mul 19:i32, %6
%8:i64 = sext %7
%9:i32 = var
%10:i32 = shl %9, 1:i32
%11:i64 = sext %10 (hasExternalUses)
%12:i64 = mulnsw %8, %11
%13:i64 = add %5, %12
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i32 = var
%17:i32 = mul 19:i32, %16
%18:i64 = sext %17 (hasExternalUses)
%19:i64 = mulnsw %15, %18
%20:i64 = add %13, %19
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i32 = var
%25:i32 = shl %24, 1:i32
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %23, %26
%28:i64 = add %20, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = mul 19:i32, %31
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
%36:i32 = var
%37:i32 = mul 19:i32, %36
%38:i64 = sext %37 (hasExternalUses)
%39:i32 = var
%40:i32 = shl %39, 1:i32
%41:i64 = sext %40 (hasExternalUses)
%42:i64 = mulnsw %38, %41
%43:i64 = add %35, %42
%44:i32 = var
%45:i64 = sext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = mul 19:i32, %46
%48:i64 = sext %47 (hasExternalUses)
%49:i64 = mulnsw %45, %48
%50:i64 = add %43, %49
%51:i32 = var
%52:i32 = mul 19:i32, %51
%53:i64 = sext %52 (hasExternalUses)
%54:i32 = var
%55:i32 = shl %54, 1:i32
%56:i64 = sext %55 (hasExternalUses)
%57:i64 = mulnsw %53, %56
%58:i64 = add %50, %57
%59:i32 = var
%60:i64 = sext %59 (hasExternalUses)
%61:i32 = var
%62:i32 = mul 19:i32, %61
%63:i64 = sext %62 (hasExternalUses)
%64:i64 = mulnsw %60, %63
%65:i64 = add %58, %64
%66:i32 = var
%67:i32 = mul 19:i32, %66
%68:i64 = sext %67 (hasExternalUses)
%69:i32 = var
%70:i32 = shl %69, 1:i32
%71:i64 = sext %70 (hasExternalUses)
%72:i64 = mulnsw %68, %71
%73:i64 = add %65, %72
%74:i64 = add 33554432:i64, %73 (hasExternalUses)
%75:i64 = and 18446744073642442752:i64, %74
%76:i64 = sub %73, %75
%77:i64 = sext %6 (hasExternalUses)
%78:i64 = mulnsw %15, %77
%79:i64 = sext %9 (hasExternalUses)
%80:i64 = mulnsw %79, %1
%81:i64 = add %78, %80
%82:i64 = sext %24 (hasExternalUses)
%83:i64 = sext %16 (hasExternalUses)
%84:i64 = mulnsw %82, %83
%85:i64 = add %81, %84
%86:i64 = sext %21 (hasExternalUses)
%87:i64 = mulnsw %30, %86
%88:i64 = add %85, %87
%89:i64 = sext %39 (hasExternalUses)
%90:i64 = sext %31
%91:i64 = mulnsw %89, %90
%92:i64 = add %88, %91
%93:i64 = sext %36
%94:i64 = mulnsw %45, %93
%95:i64 = add %92, %94
%96:i64 = sext %54 (hasExternalUses)
%97:i64 = sext %46
%98:i64 = mulnsw %96, %97
%99:i64 = add %95, %98
%100:i64 = sext %51
%101:i64 = mulnsw %60, %100
%102:i64 = add %99, %101
%103:i64 = sext %69 (hasExternalUses)
%104:i64 = sext %61
%105:i64 = mulnsw %103, %104
%106:i64 = add %102, %105
%107:i64 = sext %66
%108:i64 = mulnsw %107, %4
%109:i64 = add %106, %108
%110:i64 = mulnsw %15, %1
%111:i64 = mulnsw %77, %26
%112:i64 = add %110, %111
%113:i64 = mulnsw %30, %83
%114:i64 = add %112, %113
%115:i64 = mulnsw %86, %41
%116:i64 = add %114, %115
%117:i64 = mulnsw %45, %90
%118:i64 = add %116, %117
%119:i64 = mulnsw %93, %56
%120:i64 = add %118, %119
%121:i64 = mulnsw %60, %97
%122:i64 = add %120, %121
%123:i64 = mulnsw %100, %71
%124:i64 = add %122, %123
%125:i64 = mulnsw %104, %4
%126:i64 = add %124, %125
%127:i64 = mulnsw %68, %11
%128:i64 = add %126, %127
%129:i64 = mulnsw %30, %77
%130:i64 = mulnsw %82, %1
%131:i64 = add %129, %130
%132:i64 = mulnsw %89, %83
%133:i64 = add %131, %132
%134:i64 = mulnsw %45, %86
%135:i64 = add %133, %134
%136:i64 = mulnsw %96, %90
%137:i64 = add %135, %136
%138:i64 = mulnsw %60, %93
%139:i64 = add %137, %138
%140:i64 = mulnsw %103, %97
%141:i64 = add %139, %140
%142:i64 = mulnsw %100, %4
%143:i64 = add %141, %142
%144:i64 = mulnsw %79, %63
%145:i64 = add %143, %144
%146:i64 = mulnsw %15, %68
%147:i64 = add %145, %146
%148:i64 = mulnsw %30, %1
%149:i64 = mulnsw %77, %41
%150:i64 = add %148, %149
%151:i64 = mulnsw %45, %83
%152:i64 = add %150, %151
%153:i64 = mulnsw %86, %56
%154:i64 = add %152, %153
%155:i64 = mulnsw %60, %90
%156:i64 = add %154, %155
%157:i64 = mulnsw %93, %71
%158:i64 = add %156, %157
%159:i64 = mulnsw %97, %4
%160:i64 = add %158, %159
%161:i64 = mulnsw %53, %11
%162:i64 = add %160, %161
%163:i64 = mulnsw %15, %63
%164:i64 = add %162, %163
%165:i64 = mulnsw %68, %26
%166:i64 = add %164, %165
%167:i64 = mulnsw %45, %77
%168:i64 = mulnsw %89, %1
%169:i64 = add %167, %168
%170:i64 = mulnsw %96, %83
%171:i64 = add %169, %170
%172:i64 = mulnsw %60, %86
%173:i64 = add %171, %172
%174:i64 = mulnsw %103, %90
%175:i64 = add %173, %174
%176:i64 = mulnsw %93, %4
%177:i64 = add %175, %176
%178:i64 = mulnsw %79, %48
%179:i64 = add %177, %178
%180:i64 = mulnsw %15, %53
%181:i64 = add %179, %180
%182:i64 = mulnsw %82, %63
%183:i64 = add %181, %182
%184:i64 = mulnsw %30, %68
%185:i64 = add %183, %184
%186:i64 = mulnsw %45, %1
%187:i64 = mulnsw %77, %56
%188:i64 = add %186, %187
%189:i64 = mulnsw %60, %83
%190:i64 = add %188, %189
%191:i64 = mulnsw %86, %71
%192:i64 = add %190, %191
%193:i64 = mulnsw %90, %4
%194:i64 = add %192, %193
%195:i64 = mulnsw %38, %11
%196:i64 = add %194, %195
%197:i64 = mulnsw %15, %48
%198:i64 = add %196, %197
%199:i64 = mulnsw %53, %26
%200:i64 = add %198, %199
%201:i64 = mulnsw %30, %63
%202:i64 = add %200, %201
%203:i64 = mulnsw %68, %41
%204:i64 = add %202, %203 (hasExternalUses)
%205:i64 = add 33554432:i64, %204 (hasExternalUses)
%206:i64 = ashr %205, 26:i64
%207:i64 = add %185, %206 (hasExternalUses)
%208:i64 = add 16777216:i64, %207 (hasExternalUses)
%209:i64 = ashr %208, 25:i64
%210:i64 = add %166, %209 (hasExternalUses)
%211:i64 = add 33554432:i64, %210 (hasExternalUses)
%212:i64 = ashr %211, 26:i64
%213:i64 = add %147, %212 (hasExternalUses)
%214:i64 = add 16777216:i64, %213 (hasExternalUses)
%215:i64 = ashr %214, 25:i64
%216:i64 = add %128, %215 (hasExternalUses)
%217:i64 = add 33554432:i64, %216 (hasExternalUses)
%218:i64 = ashr %217, 26:i64
%219:i64 = add %109, %218 (hasExternalUses)
%220:i64 = add 16777216:i64, %219 (hasExternalUses)
%221:i64 = ashr %220, 25:i64
%222:i64 = mulnsw 19:i64, %221
%223:i64 = add %76, %222
infer %223 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %371 = and i64 %367, 4261412864
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i64 = sext %31
%33:i64 = mulnsw %30, %32
%34:i64 = add %28, %33
%35:i32 = var
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i64 = sext %37
%39:i64 = mulnsw %36, %38
%40:i64 = add %34, %39
%41:i32 = var
%42:i64 = sext %41 (hasExternalUses)
%43:i32 = var
%44:i64 = sext %43
%45:i64 = mulnsw %42, %44
%46:i64 = add %40, %45
%47:i32 = var
%48:i64 = sext %47 (hasExternalUses)
%49:i32 = var
%50:i64 = sext %49
%51:i64 = mulnsw %48, %50
%52:i64 = add %46, %51
%53:i32 = var
%54:i64 = sext %53
%55:i32 = var
%56:i32 = add 1:i32, %55 (hasExternalUses)
%57:i64 = sext %56 (hasExternalUses)
%58:i64 = mulnsw %54, %57
%59:i64 = add %52, %58
%60:i64 = mulnsw %1, %8
%61:i32 = shl %11, 1:i32
%62:i64 = sext %61 (hasExternalUses)
%63:i64 = mulnsw %3, %62
%64:i64 = add %60, %63
%65:i64 = mulnsw %18, %14
%66:i64 = add %64, %65
%67:i32 = shl %23, 1:i32
%68:i64 = sext %67 (hasExternalUses)
%69:i64 = mulnsw %20, %68
%70:i64 = add %66, %69
%71:i64 = mulnsw %30, %26
%72:i64 = add %70, %71
%73:i32 = shl %35, 1:i32
%74:i64 = sext %73 (hasExternalUses)
%75:i64 = mulnsw %32, %74
%76:i64 = add %72, %75
%77:i64 = mulnsw %42, %38
%78:i64 = add %76, %77
%79:i32 = shl %47, 1:i32
%80:i64 = sext %79 (hasExternalUses)
%81:i64 = mulnsw %44, %80
%82:i64 = add %78, %81
%83:i64 = mulnsw %50, %57
%84:i64 = add %82, %83
%85:i32 = mul 19:i32, %53
%86:i64 = sext %85 (hasExternalUses)
%87:i32 = shl %5, 1:i32
%88:i64 = sext %87 (hasExternalUses)
%89:i64 = mulnsw %86, %88
%90:i64 = add %84, %89
%91:i64 = mulnsw %18, %3
%92:i64 = mulnsw %12, %8
%93:i64 = add %91, %92
%94:i64 = mulnsw %24, %14
%95:i64 = add %93, %94
%96:i64 = mulnsw %30, %20
%97:i64 = add %95, %96
%98:i64 = mulnsw %36, %26
%99:i64 = add %97, %98
%100:i64 = mulnsw %42, %32
%101:i64 = add %99, %100
%102:i64 = mulnsw %48, %38
%103:i64 = add %101, %102
%104:i64 = mulnsw %44, %57
%105:i64 = add %103, %104
%106:i32 = mul 19:i32, %49
%107:i64 = sext %106 (hasExternalUses)
%108:i64 = mulnsw %6, %107
%109:i64 = add %105, %108
%110:i64 = mulnsw %1, %86
%111:i64 = add %109, %110
%112:i64 = mulnsw %18, %8
%113:i64 = mulnsw %3, %68
%114:i64 = add %112, %113
%115:i64 = mulnsw %30, %14
%116:i64 = add %114, %115
%117:i64 = mulnsw %20, %74
%118:i64 = add %116, %117
%119:i64 = mulnsw %42, %26
%120:i64 = add %118, %119
%121:i64 = mulnsw %32, %80
%122:i64 = add %120, %121
%123:i64 = mulnsw %38, %57
%124:i64 = add %122, %123
%125:i32 = mul 19:i32, %43
%126:i64 = sext %125 (hasExternalUses)
%127:i64 = mulnsw %126, %88
%128:i64 = add %124, %127
%129:i64 = mulnsw %1, %107
%130:i64 = add %128, %129
%131:i64 = mulnsw %86, %62
%132:i64 = add %130, %131
%133:i64 = mulnsw %30, %3
%134:i64 = mulnsw %24, %8
%135:i64 = add %133, %134
%136:i64 = mulnsw %36, %14
%137:i64 = add %135, %136
%138:i64 = mulnsw %42, %20
%139:i64 = add %137, %138
%140:i64 = mulnsw %48, %26
%141:i64 = add %139, %140
%142:i64 = mulnsw %32, %57
%143:i64 = add %141, %142
%144:i32 = mul 19:i32, %37
%145:i64 = sext %144 (hasExternalUses)
%146:i64 = mulnsw %6, %145
%147:i64 = add %143, %146
%148:i64 = mulnsw %1, %126
%149:i64 = add %147, %148
%150:i64 = mulnsw %12, %107
%151:i64 = add %149, %150
%152:i64 = mulnsw %18, %86
%153:i64 = add %151, %152
%154:i64 = mulnsw %30, %8
%155:i64 = mulnsw %3, %74
%156:i64 = add %154, %155
%157:i64 = mulnsw %42, %14
%158:i64 = add %156, %157
%159:i64 = mulnsw %20, %80
%160:i64 = add %158, %159
%161:i64 = mulnsw %26, %57
%162:i64 = add %160, %161
%163:i32 = mul 19:i32, %31
%164:i64 = sext %163 (hasExternalUses)
%165:i64 = mulnsw %164, %88
%166:i64 = add %162, %165
%167:i64 = mulnsw %1, %145
%168:i64 = add %166, %167
%169:i64 = mulnsw %126, %62
%170:i64 = add %168, %169
%171:i64 = mulnsw %18, %107
%172:i64 = add %170, %171
%173:i64 = mulnsw %86, %68
%174:i64 = add %172, %173 (hasExternalUses)
%175:i64 = add 33554432:i64, %174 (hasExternalUses)
%176:i64 = ashr %175, 26:i64
%177:i64 = add %153, %176 (hasExternalUses)
%178:i64 = add 16777216:i64, %177 (hasExternalUses)
%179:i64 = ashr %178, 25:i64
%180:i64 = add %132, %179 (hasExternalUses)
%181:i64 = add 33554432:i64, %180 (hasExternalUses)
%182:i64 = ashr %181, 26:i64
%183:i64 = add %111, %182 (hasExternalUses)
%184:i64 = add 16777216:i64, %183 (hasExternalUses)
%185:i64 = ashr %184, 25:i64
%186:i64 = add %90, %185 (hasExternalUses)
%187:i64 = add 33554432:i64, %186 (hasExternalUses)
%188:i64 = ashr %187, 26:i64
%189:i64 = add %59, %188 (hasExternalUses)
%190:i64 = add 16777216:i64, %189 (hasExternalUses)
%191:i64 = and 4261412864:i64, %190
infer %191 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %372 = sub i64 %364, %371
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i64 = sext %31
%33:i64 = mulnsw %30, %32
%34:i64 = add %28, %33
%35:i32 = var
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i64 = sext %37
%39:i64 = mulnsw %36, %38
%40:i64 = add %34, %39
%41:i32 = var
%42:i64 = sext %41 (hasExternalUses)
%43:i32 = var
%44:i64 = sext %43
%45:i64 = mulnsw %42, %44
%46:i64 = add %40, %45
%47:i32 = var
%48:i64 = sext %47 (hasExternalUses)
%49:i32 = var
%50:i64 = sext %49
%51:i64 = mulnsw %48, %50
%52:i64 = add %46, %51
%53:i32 = var
%54:i64 = sext %53
%55:i32 = var
%56:i32 = add 1:i32, %55 (hasExternalUses)
%57:i64 = sext %56 (hasExternalUses)
%58:i64 = mulnsw %54, %57
%59:i64 = add %52, %58
%60:i64 = mulnsw %1, %8
%61:i32 = shl %11, 1:i32
%62:i64 = sext %61 (hasExternalUses)
%63:i64 = mulnsw %3, %62
%64:i64 = add %60, %63
%65:i64 = mulnsw %18, %14
%66:i64 = add %64, %65
%67:i32 = shl %23, 1:i32
%68:i64 = sext %67 (hasExternalUses)
%69:i64 = mulnsw %20, %68
%70:i64 = add %66, %69
%71:i64 = mulnsw %30, %26
%72:i64 = add %70, %71
%73:i32 = shl %35, 1:i32
%74:i64 = sext %73 (hasExternalUses)
%75:i64 = mulnsw %32, %74
%76:i64 = add %72, %75
%77:i64 = mulnsw %42, %38
%78:i64 = add %76, %77
%79:i32 = shl %47, 1:i32
%80:i64 = sext %79 (hasExternalUses)
%81:i64 = mulnsw %44, %80
%82:i64 = add %78, %81
%83:i64 = mulnsw %50, %57
%84:i64 = add %82, %83
%85:i32 = mul 19:i32, %53
%86:i64 = sext %85 (hasExternalUses)
%87:i32 = shl %5, 1:i32
%88:i64 = sext %87 (hasExternalUses)
%89:i64 = mulnsw %86, %88
%90:i64 = add %84, %89
%91:i64 = mulnsw %18, %3
%92:i64 = mulnsw %12, %8
%93:i64 = add %91, %92
%94:i64 = mulnsw %24, %14
%95:i64 = add %93, %94
%96:i64 = mulnsw %30, %20
%97:i64 = add %95, %96
%98:i64 = mulnsw %36, %26
%99:i64 = add %97, %98
%100:i64 = mulnsw %42, %32
%101:i64 = add %99, %100
%102:i64 = mulnsw %48, %38
%103:i64 = add %101, %102
%104:i64 = mulnsw %44, %57
%105:i64 = add %103, %104
%106:i32 = mul 19:i32, %49
%107:i64 = sext %106 (hasExternalUses)
%108:i64 = mulnsw %6, %107
%109:i64 = add %105, %108
%110:i64 = mulnsw %1, %86
%111:i64 = add %109, %110
%112:i64 = mulnsw %18, %8
%113:i64 = mulnsw %3, %68
%114:i64 = add %112, %113
%115:i64 = mulnsw %30, %14
%116:i64 = add %114, %115
%117:i64 = mulnsw %20, %74
%118:i64 = add %116, %117
%119:i64 = mulnsw %42, %26
%120:i64 = add %118, %119
%121:i64 = mulnsw %32, %80
%122:i64 = add %120, %121
%123:i64 = mulnsw %38, %57
%124:i64 = add %122, %123
%125:i32 = mul 19:i32, %43
%126:i64 = sext %125 (hasExternalUses)
%127:i64 = mulnsw %126, %88
%128:i64 = add %124, %127
%129:i64 = mulnsw %1, %107
%130:i64 = add %128, %129
%131:i64 = mulnsw %86, %62
%132:i64 = add %130, %131
%133:i64 = mulnsw %30, %3
%134:i64 = mulnsw %24, %8
%135:i64 = add %133, %134
%136:i64 = mulnsw %36, %14
%137:i64 = add %135, %136
%138:i64 = mulnsw %42, %20
%139:i64 = add %137, %138
%140:i64 = mulnsw %48, %26
%141:i64 = add %139, %140
%142:i64 = mulnsw %32, %57
%143:i64 = add %141, %142
%144:i32 = mul 19:i32, %37
%145:i64 = sext %144 (hasExternalUses)
%146:i64 = mulnsw %6, %145
%147:i64 = add %143, %146
%148:i64 = mulnsw %1, %126
%149:i64 = add %147, %148
%150:i64 = mulnsw %12, %107
%151:i64 = add %149, %150
%152:i64 = mulnsw %18, %86
%153:i64 = add %151, %152
%154:i64 = mulnsw %30, %8
%155:i64 = mulnsw %3, %74
%156:i64 = add %154, %155
%157:i64 = mulnsw %42, %14
%158:i64 = add %156, %157
%159:i64 = mulnsw %20, %80
%160:i64 = add %158, %159
%161:i64 = mulnsw %26, %57
%162:i64 = add %160, %161
%163:i32 = mul 19:i32, %31
%164:i64 = sext %163 (hasExternalUses)
%165:i64 = mulnsw %164, %88
%166:i64 = add %162, %165
%167:i64 = mulnsw %1, %145
%168:i64 = add %166, %167
%169:i64 = mulnsw %126, %62
%170:i64 = add %168, %169
%171:i64 = mulnsw %18, %107
%172:i64 = add %170, %171
%173:i64 = mulnsw %86, %68
%174:i64 = add %172, %173 (hasExternalUses)
%175:i64 = add 33554432:i64, %174 (hasExternalUses)
%176:i64 = ashr %175, 26:i64
%177:i64 = add %153, %176 (hasExternalUses)
%178:i64 = add 16777216:i64, %177 (hasExternalUses)
%179:i64 = ashr %178, 25:i64
%180:i64 = add %132, %179 (hasExternalUses)
%181:i64 = add 33554432:i64, %180 (hasExternalUses)
%182:i64 = ashr %181, 26:i64
%183:i64 = add %111, %182 (hasExternalUses)
%184:i64 = add 16777216:i64, %183 (hasExternalUses)
%185:i64 = ashr %184, 25:i64
%186:i64 = add %90, %185 (hasExternalUses)
%187:i64 = add 33554432:i64, %186 (hasExternalUses)
%188:i64 = ashr %187, 26:i64
%189:i64 = add %59, %188
%190:i64 = add 16777216:i64, %189 (hasExternalUses)
%191:i64 = and 4261412864:i64, %190
%192:i64 = sub %189, %191
infer %192 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %373 = add i64 %370, 33554432
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = add 1:i32, %2 (hasExternalUses)
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
%6:i32 = var
%7:i32 = mul 19:i32, %6
%8:i64 = sext %7
%9:i32 = var
%10:i32 = shl %9, 1:i32
%11:i64 = sext %10 (hasExternalUses)
%12:i64 = mulnsw %8, %11
%13:i64 = add %5, %12
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i32 = var
%17:i32 = mul 19:i32, %16
%18:i64 = sext %17 (hasExternalUses)
%19:i64 = mulnsw %15, %18
%20:i64 = add %13, %19
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i32 = var
%25:i32 = shl %24, 1:i32
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %23, %26
%28:i64 = add %20, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = mul 19:i32, %31
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
%36:i32 = var
%37:i32 = mul 19:i32, %36
%38:i64 = sext %37 (hasExternalUses)
%39:i32 = var
%40:i32 = shl %39, 1:i32
%41:i64 = sext %40 (hasExternalUses)
%42:i64 = mulnsw %38, %41
%43:i64 = add %35, %42
%44:i32 = var
%45:i64 = sext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = mul 19:i32, %46
%48:i64 = sext %47 (hasExternalUses)
%49:i64 = mulnsw %45, %48
%50:i64 = add %43, %49
%51:i32 = var
%52:i32 = mul 19:i32, %51
%53:i64 = sext %52 (hasExternalUses)
%54:i32 = var
%55:i32 = shl %54, 1:i32
%56:i64 = sext %55 (hasExternalUses)
%57:i64 = mulnsw %53, %56
%58:i64 = add %50, %57
%59:i32 = var
%60:i64 = sext %59 (hasExternalUses)
%61:i32 = var
%62:i32 = mul 19:i32, %61
%63:i64 = sext %62 (hasExternalUses)
%64:i64 = mulnsw %60, %63
%65:i64 = add %58, %64
%66:i32 = var
%67:i32 = mul 19:i32, %66
%68:i64 = sext %67 (hasExternalUses)
%69:i32 = var
%70:i32 = shl %69, 1:i32
%71:i64 = sext %70 (hasExternalUses)
%72:i64 = mulnsw %68, %71
%73:i64 = add %65, %72
%74:i64 = add 33554432:i64, %73 (hasExternalUses)
%75:i64 = and 18446744073642442752:i64, %74
%76:i64 = sub %73, %75
%77:i64 = sext %6 (hasExternalUses)
%78:i64 = mulnsw %15, %77
%79:i64 = sext %9 (hasExternalUses)
%80:i64 = mulnsw %79, %1
%81:i64 = add %78, %80
%82:i64 = sext %24 (hasExternalUses)
%83:i64 = sext %16 (hasExternalUses)
%84:i64 = mulnsw %82, %83
%85:i64 = add %81, %84
%86:i64 = sext %21 (hasExternalUses)
%87:i64 = mulnsw %30, %86
%88:i64 = add %85, %87
%89:i64 = sext %39 (hasExternalUses)
%90:i64 = sext %31
%91:i64 = mulnsw %89, %90
%92:i64 = add %88, %91
%93:i64 = sext %36
%94:i64 = mulnsw %45, %93
%95:i64 = add %92, %94
%96:i64 = sext %54 (hasExternalUses)
%97:i64 = sext %46
%98:i64 = mulnsw %96, %97
%99:i64 = add %95, %98
%100:i64 = sext %51
%101:i64 = mulnsw %60, %100
%102:i64 = add %99, %101
%103:i64 = sext %69 (hasExternalUses)
%104:i64 = sext %61
%105:i64 = mulnsw %103, %104
%106:i64 = add %102, %105
%107:i64 = sext %66
%108:i64 = mulnsw %107, %4
%109:i64 = add %106, %108
%110:i64 = mulnsw %15, %1
%111:i64 = mulnsw %77, %26
%112:i64 = add %110, %111
%113:i64 = mulnsw %30, %83
%114:i64 = add %112, %113
%115:i64 = mulnsw %86, %41
%116:i64 = add %114, %115
%117:i64 = mulnsw %45, %90
%118:i64 = add %116, %117
%119:i64 = mulnsw %93, %56
%120:i64 = add %118, %119
%121:i64 = mulnsw %60, %97
%122:i64 = add %120, %121
%123:i64 = mulnsw %100, %71
%124:i64 = add %122, %123
%125:i64 = mulnsw %104, %4
%126:i64 = add %124, %125
%127:i64 = mulnsw %68, %11
%128:i64 = add %126, %127
%129:i64 = mulnsw %30, %77
%130:i64 = mulnsw %82, %1
%131:i64 = add %129, %130
%132:i64 = mulnsw %89, %83
%133:i64 = add %131, %132
%134:i64 = mulnsw %45, %86
%135:i64 = add %133, %134
%136:i64 = mulnsw %96, %90
%137:i64 = add %135, %136
%138:i64 = mulnsw %60, %93
%139:i64 = add %137, %138
%140:i64 = mulnsw %103, %97
%141:i64 = add %139, %140
%142:i64 = mulnsw %100, %4
%143:i64 = add %141, %142
%144:i64 = mulnsw %79, %63
%145:i64 = add %143, %144
%146:i64 = mulnsw %15, %68
%147:i64 = add %145, %146
%148:i64 = mulnsw %30, %1
%149:i64 = mulnsw %77, %41
%150:i64 = add %148, %149
%151:i64 = mulnsw %45, %83
%152:i64 = add %150, %151
%153:i64 = mulnsw %86, %56
%154:i64 = add %152, %153
%155:i64 = mulnsw %60, %90
%156:i64 = add %154, %155
%157:i64 = mulnsw %93, %71
%158:i64 = add %156, %157
%159:i64 = mulnsw %97, %4
%160:i64 = add %158, %159
%161:i64 = mulnsw %53, %11
%162:i64 = add %160, %161
%163:i64 = mulnsw %15, %63
%164:i64 = add %162, %163
%165:i64 = mulnsw %68, %26
%166:i64 = add %164, %165
%167:i64 = mulnsw %45, %77
%168:i64 = mulnsw %89, %1
%169:i64 = add %167, %168
%170:i64 = mulnsw %96, %83
%171:i64 = add %169, %170
%172:i64 = mulnsw %60, %86
%173:i64 = add %171, %172
%174:i64 = mulnsw %103, %90
%175:i64 = add %173, %174
%176:i64 = mulnsw %93, %4
%177:i64 = add %175, %176
%178:i64 = mulnsw %79, %48
%179:i64 = add %177, %178
%180:i64 = mulnsw %15, %53
%181:i64 = add %179, %180
%182:i64 = mulnsw %82, %63
%183:i64 = add %181, %182
%184:i64 = mulnsw %30, %68
%185:i64 = add %183, %184
%186:i64 = mulnsw %45, %1
%187:i64 = mulnsw %77, %56
%188:i64 = add %186, %187
%189:i64 = mulnsw %60, %83
%190:i64 = add %188, %189
%191:i64 = mulnsw %86, %71
%192:i64 = add %190, %191
%193:i64 = mulnsw %90, %4
%194:i64 = add %192, %193
%195:i64 = mulnsw %38, %11
%196:i64 = add %194, %195
%197:i64 = mulnsw %15, %48
%198:i64 = add %196, %197
%199:i64 = mulnsw %53, %26
%200:i64 = add %198, %199
%201:i64 = mulnsw %30, %63
%202:i64 = add %200, %201
%203:i64 = mulnsw %68, %41
%204:i64 = add %202, %203 (hasExternalUses)
%205:i64 = add 33554432:i64, %204 (hasExternalUses)
%206:i64 = ashr %205, 26:i64
%207:i64 = add %185, %206 (hasExternalUses)
%208:i64 = add 16777216:i64, %207 (hasExternalUses)
%209:i64 = ashr %208, 25:i64
%210:i64 = add %166, %209 (hasExternalUses)
%211:i64 = add 33554432:i64, %210 (hasExternalUses)
%212:i64 = ashr %211, 26:i64
%213:i64 = add %147, %212 (hasExternalUses)
%214:i64 = add 16777216:i64, %213 (hasExternalUses)
%215:i64 = ashr %214, 25:i64
%216:i64 = add %128, %215 (hasExternalUses)
%217:i64 = add 33554432:i64, %216 (hasExternalUses)
%218:i64 = ashr %217, 26:i64
%219:i64 = add %109, %218 (hasExternalUses)
%220:i64 = add 16777216:i64, %219 (hasExternalUses)
%221:i64 = ashr %220, 25:i64
%222:i64 = mulnsw 19:i64, %221
%223:i64 = add %76, %222 (hasExternalUses)
%224:i64 = add 33554432:i64, %223
infer %224 (demandedBits=0000001111111111111111111111111111111100000000000000000000000000)

; *****
; For LLVM instruction:
;  %374 = lshr i64 %373, 26
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = add 1:i32, %2 (hasExternalUses)
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
%6:i32 = var
%7:i32 = mul 19:i32, %6
%8:i64 = sext %7
%9:i32 = var
%10:i32 = shl %9, 1:i32
%11:i64 = sext %10 (hasExternalUses)
%12:i64 = mulnsw %8, %11
%13:i64 = add %5, %12
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i32 = var
%17:i32 = mul 19:i32, %16
%18:i64 = sext %17 (hasExternalUses)
%19:i64 = mulnsw %15, %18
%20:i64 = add %13, %19
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i32 = var
%25:i32 = shl %24, 1:i32
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %23, %26
%28:i64 = add %20, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = mul 19:i32, %31
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
%36:i32 = var
%37:i32 = mul 19:i32, %36
%38:i64 = sext %37 (hasExternalUses)
%39:i32 = var
%40:i32 = shl %39, 1:i32
%41:i64 = sext %40 (hasExternalUses)
%42:i64 = mulnsw %38, %41
%43:i64 = add %35, %42
%44:i32 = var
%45:i64 = sext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = mul 19:i32, %46
%48:i64 = sext %47 (hasExternalUses)
%49:i64 = mulnsw %45, %48
%50:i64 = add %43, %49
%51:i32 = var
%52:i32 = mul 19:i32, %51
%53:i64 = sext %52 (hasExternalUses)
%54:i32 = var
%55:i32 = shl %54, 1:i32
%56:i64 = sext %55 (hasExternalUses)
%57:i64 = mulnsw %53, %56
%58:i64 = add %50, %57
%59:i32 = var
%60:i64 = sext %59 (hasExternalUses)
%61:i32 = var
%62:i32 = mul 19:i32, %61
%63:i64 = sext %62 (hasExternalUses)
%64:i64 = mulnsw %60, %63
%65:i64 = add %58, %64
%66:i32 = var
%67:i32 = mul 19:i32, %66
%68:i64 = sext %67 (hasExternalUses)
%69:i32 = var
%70:i32 = shl %69, 1:i32
%71:i64 = sext %70 (hasExternalUses)
%72:i64 = mulnsw %68, %71
%73:i64 = add %65, %72
%74:i64 = add 33554432:i64, %73 (hasExternalUses)
%75:i64 = and 18446744073642442752:i64, %74
%76:i64 = sub %73, %75
%77:i64 = sext %6 (hasExternalUses)
%78:i64 = mulnsw %15, %77
%79:i64 = sext %9 (hasExternalUses)
%80:i64 = mulnsw %79, %1
%81:i64 = add %78, %80
%82:i64 = sext %24 (hasExternalUses)
%83:i64 = sext %16 (hasExternalUses)
%84:i64 = mulnsw %82, %83
%85:i64 = add %81, %84
%86:i64 = sext %21 (hasExternalUses)
%87:i64 = mulnsw %30, %86
%88:i64 = add %85, %87
%89:i64 = sext %39 (hasExternalUses)
%90:i64 = sext %31
%91:i64 = mulnsw %89, %90
%92:i64 = add %88, %91
%93:i64 = sext %36
%94:i64 = mulnsw %45, %93
%95:i64 = add %92, %94
%96:i64 = sext %54 (hasExternalUses)
%97:i64 = sext %46
%98:i64 = mulnsw %96, %97
%99:i64 = add %95, %98
%100:i64 = sext %51
%101:i64 = mulnsw %60, %100
%102:i64 = add %99, %101
%103:i64 = sext %69 (hasExternalUses)
%104:i64 = sext %61
%105:i64 = mulnsw %103, %104
%106:i64 = add %102, %105
%107:i64 = sext %66
%108:i64 = mulnsw %107, %4
%109:i64 = add %106, %108
%110:i64 = mulnsw %15, %1
%111:i64 = mulnsw %77, %26
%112:i64 = add %110, %111
%113:i64 = mulnsw %30, %83
%114:i64 = add %112, %113
%115:i64 = mulnsw %86, %41
%116:i64 = add %114, %115
%117:i64 = mulnsw %45, %90
%118:i64 = add %116, %117
%119:i64 = mulnsw %93, %56
%120:i64 = add %118, %119
%121:i64 = mulnsw %60, %97
%122:i64 = add %120, %121
%123:i64 = mulnsw %100, %71
%124:i64 = add %122, %123
%125:i64 = mulnsw %104, %4
%126:i64 = add %124, %125
%127:i64 = mulnsw %68, %11
%128:i64 = add %126, %127
%129:i64 = mulnsw %30, %77
%130:i64 = mulnsw %82, %1
%131:i64 = add %129, %130
%132:i64 = mulnsw %89, %83
%133:i64 = add %131, %132
%134:i64 = mulnsw %45, %86
%135:i64 = add %133, %134
%136:i64 = mulnsw %96, %90
%137:i64 = add %135, %136
%138:i64 = mulnsw %60, %93
%139:i64 = add %137, %138
%140:i64 = mulnsw %103, %97
%141:i64 = add %139, %140
%142:i64 = mulnsw %100, %4
%143:i64 = add %141, %142
%144:i64 = mulnsw %79, %63
%145:i64 = add %143, %144
%146:i64 = mulnsw %15, %68
%147:i64 = add %145, %146
%148:i64 = mulnsw %30, %1
%149:i64 = mulnsw %77, %41
%150:i64 = add %148, %149
%151:i64 = mulnsw %45, %83
%152:i64 = add %150, %151
%153:i64 = mulnsw %86, %56
%154:i64 = add %152, %153
%155:i64 = mulnsw %60, %90
%156:i64 = add %154, %155
%157:i64 = mulnsw %93, %71
%158:i64 = add %156, %157
%159:i64 = mulnsw %97, %4
%160:i64 = add %158, %159
%161:i64 = mulnsw %53, %11
%162:i64 = add %160, %161
%163:i64 = mulnsw %15, %63
%164:i64 = add %162, %163
%165:i64 = mulnsw %68, %26
%166:i64 = add %164, %165
%167:i64 = mulnsw %45, %77
%168:i64 = mulnsw %89, %1
%169:i64 = add %167, %168
%170:i64 = mulnsw %96, %83
%171:i64 = add %169, %170
%172:i64 = mulnsw %60, %86
%173:i64 = add %171, %172
%174:i64 = mulnsw %103, %90
%175:i64 = add %173, %174
%176:i64 = mulnsw %93, %4
%177:i64 = add %175, %176
%178:i64 = mulnsw %79, %48
%179:i64 = add %177, %178
%180:i64 = mulnsw %15, %53
%181:i64 = add %179, %180
%182:i64 = mulnsw %82, %63
%183:i64 = add %181, %182
%184:i64 = mulnsw %30, %68
%185:i64 = add %183, %184
%186:i64 = mulnsw %45, %1
%187:i64 = mulnsw %77, %56
%188:i64 = add %186, %187
%189:i64 = mulnsw %60, %83
%190:i64 = add %188, %189
%191:i64 = mulnsw %86, %71
%192:i64 = add %190, %191
%193:i64 = mulnsw %90, %4
%194:i64 = add %192, %193
%195:i64 = mulnsw %38, %11
%196:i64 = add %194, %195
%197:i64 = mulnsw %15, %48
%198:i64 = add %196, %197
%199:i64 = mulnsw %53, %26
%200:i64 = add %198, %199
%201:i64 = mulnsw %30, %63
%202:i64 = add %200, %201
%203:i64 = mulnsw %68, %41
%204:i64 = add %202, %203 (hasExternalUses)
%205:i64 = add 33554432:i64, %204 (hasExternalUses)
%206:i64 = ashr %205, 26:i64
%207:i64 = add %185, %206 (hasExternalUses)
%208:i64 = add 16777216:i64, %207 (hasExternalUses)
%209:i64 = ashr %208, 25:i64
%210:i64 = add %166, %209 (hasExternalUses)
%211:i64 = add 33554432:i64, %210 (hasExternalUses)
%212:i64 = ashr %211, 26:i64
%213:i64 = add %147, %212 (hasExternalUses)
%214:i64 = add 16777216:i64, %213 (hasExternalUses)
%215:i64 = ashr %214, 25:i64
%216:i64 = add %128, %215 (hasExternalUses)
%217:i64 = add 33554432:i64, %216 (hasExternalUses)
%218:i64 = ashr %217, 26:i64
%219:i64 = add %109, %218 (hasExternalUses)
%220:i64 = add 16777216:i64, %219 (hasExternalUses)
%221:i64 = ashr %220, 25:i64
%222:i64 = mulnsw 19:i64, %221
%223:i64 = add %76, %222 (hasExternalUses)
%224:i64 = add 33554432:i64, %223 (hasExternalUses)
%225:i64 = lshr %224, 26:i64
infer %225 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %375 = add i64 %286, %374
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = add 1:i32, %7 (hasExternalUses)
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = mul 19:i32, %14
%16:i64 = sext %15
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i64 = mulnsw %20, %23
%25:i64 = add %18, %24
%26:i32 = var
%27:i64 = sext %26 (hasExternalUses)
%28:i32 = var
%29:i32 = mul 19:i32, %28
%30:i64 = sext %29 (hasExternalUses)
%31:i64 = mulnsw %27, %30
%32:i64 = add %25, %31
%33:i32 = var
%34:i64 = sext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = mul 19:i32, %35
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %32, %38
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i32 = var
%43:i32 = mul 19:i32, %42
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %41, %44
%46:i64 = add %39, %45
%47:i32 = var
%48:i64 = sext %47 (hasExternalUses)
%49:i32 = var
%50:i32 = mul 19:i32, %49
%51:i64 = sext %50 (hasExternalUses)
%52:i64 = mulnsw %48, %51
%53:i64 = add %46, %52
%54:i32 = var
%55:i64 = sext %54 (hasExternalUses)
%56:i32 = var
%57:i32 = mul 19:i32, %56
%58:i64 = sext %57 (hasExternalUses)
%59:i64 = mulnsw %55, %58
%60:i64 = add %53, %59
%61:i32 = var
%62:i64 = sext %61 (hasExternalUses)
%63:i32 = var
%64:i32 = mul 19:i32, %63
%65:i64 = sext %64 (hasExternalUses)
%66:i64 = mulnsw %62, %65
%67:i64 = add %60, %66
%68:i64 = mulnsw %3, %9
%69:i32 = mul 19:i32, %5
%70:i64 = sext %69
%71:i32 = shl %12, 1:i32
%72:i64 = sext %71 (hasExternalUses)
%73:i64 = mulnsw %70, %72
%74:i64 = add %68, %73
%75:i64 = mulnsw %20, %16
%76:i64 = add %74, %75
%77:i32 = shl %26, 1:i32
%78:i64 = sext %77 (hasExternalUses)
%79:i64 = mulnsw %23, %78
%80:i64 = add %76, %79
%81:i64 = mulnsw %34, %30
%82:i64 = add %80, %81
%83:i32 = shl %40, 1:i32
%84:i64 = sext %83 (hasExternalUses)
%85:i64 = mulnsw %37, %84
%86:i64 = add %82, %85
%87:i64 = mulnsw %48, %44
%88:i64 = add %86, %87
%89:i32 = shl %54, 1:i32
%90:i64 = sext %89 (hasExternalUses)
%91:i64 = mulnsw %51, %90
%92:i64 = add %88, %91
%93:i64 = mulnsw %62, %58
%94:i64 = add %92, %93
%95:i32 = shl %0, 1:i32
%96:i64 = sext %95 (hasExternalUses)
%97:i64 = mulnsw %65, %96
%98:i64 = add %94, %97
%99:i64 = add 33554432:i64, %98
%100:i64 = ashr %99, 26:i64
%101:i64 = add %67, %100
%102:i64 = add 16777216:i64, %101 (hasExternalUses)
%103:i64 = and 4261412864:i64, %102
%104:i64 = sub %101, %103
%105:i64 = and 18446744073642442752:i64, %99
%106:i64 = sub %98, %105
%107:i64 = mulnsw %20, %6
%108:i64 = mulnsw %13, %3
%109:i64 = add %107, %108
%110:i64 = sext %14 (hasExternalUses)
%111:i64 = mulnsw %27, %110
%112:i64 = add %109, %111
%113:i64 = sext %21 (hasExternalUses)
%114:i64 = mulnsw %34, %113
%115:i64 = add %112, %114
%116:i64 = sext %28
%117:i64 = mulnsw %41, %116
%118:i64 = add %115, %117
%119:i64 = sext %35
%120:i64 = mulnsw %48, %119
%121:i64 = add %118, %120
%122:i64 = sext %42
%123:i64 = mulnsw %55, %122
%124:i64 = add %121, %123
%125:i64 = sext %49
%126:i64 = mulnsw %62, %125
%127:i64 = add %124, %126
%128:i64 = sext %56
%129:i64 = mulnsw %1, %128
%130:i64 = add %127, %129
%131:i64 = sext %63
%132:i64 = mulnsw %131, %9
%133:i64 = add %130, %132
%134:i64 = mulnsw %20, %3
%135:i64 = mulnsw %6, %78
%136:i64 = add %134, %135
%137:i64 = mulnsw %34, %110
%138:i64 = add %136, %137
%139:i64 = mulnsw %113, %84
%140:i64 = add %138, %139
%141:i64 = mulnsw %48, %116
%142:i64 = add %140, %141
%143:i64 = mulnsw %119, %90
%144:i64 = add %142, %143
%145:i64 = mulnsw %62, %122
%146:i64 = add %144, %145
%147:i64 = mulnsw %125, %96
%148:i64 = add %146, %147
%149:i64 = mulnsw %128, %9
%150:i64 = add %148, %149
%151:i64 = mulnsw %65, %72
%152:i64 = add %150, %151
%153:i64 = mulnsw %34, %6
%154:i64 = mulnsw %27, %3
%155:i64 = add %153, %154
%156:i64 = mulnsw %41, %110
%157:i64 = add %155, %156
%158:i64 = mulnsw %48, %113
%159:i64 = add %157, %158
%160:i64 = mulnsw %55, %116
%161:i64 = add %159, %160
%162:i64 = mulnsw %62, %119
%163:i64 = add %161, %162
%164:i64 = mulnsw %1, %122
%165:i64 = add %163, %164
%166:i64 = mulnsw %125, %9
%167:i64 = add %165, %166
%168:i64 = mulnsw %13, %58
%169:i64 = add %167, %168
%170:i64 = mulnsw %20, %65
%171:i64 = add %169, %170
%172:i64 = mulnsw %34, %3
%173:i64 = mulnsw %6, %84
%174:i64 = add %172, %173
%175:i64 = mulnsw %48, %110
%176:i64 = add %174, %175
%177:i64 = mulnsw %113, %90
%178:i64 = add %176, %177
%179:i64 = mulnsw %62, %116
%180:i64 = add %178, %179
%181:i64 = mulnsw %119, %96
%182:i64 = add %180, %181
%183:i64 = mulnsw %122, %9
%184:i64 = add %182, %183
%185:i64 = mulnsw %51, %72
%186:i64 = add %184, %185
%187:i64 = mulnsw %20, %58
%188:i64 = add %186, %187
%189:i64 = mulnsw %65, %78
%190:i64 = add %188, %189
%191:i64 = mulnsw %48, %6
%192:i64 = mulnsw %41, %3
%193:i64 = add %191, %192
%194:i64 = mulnsw %55, %110
%195:i64 = add %193, %194
%196:i64 = mulnsw %62, %113
%197:i64 = add %195, %196
%198:i64 = mulnsw %1, %116
%199:i64 = add %197, %198
%200:i64 = mulnsw %119, %9
%201:i64 = add %199, %200
%202:i64 = mulnsw %13, %44
%203:i64 = add %201, %202
%204:i64 = mulnsw %20, %51
%205:i64 = add %203, %204
%206:i64 = mulnsw %27, %58
%207:i64 = add %205, %206
%208:i64 = mulnsw %34, %65
%209:i64 = add %207, %208
%210:i64 = mulnsw %48, %3
%211:i64 = mulnsw %6, %90
%212:i64 = add %210, %211
%213:i64 = mulnsw %62, %110
%214:i64 = add %212, %213
%215:i64 = mulnsw %113, %96
%216:i64 = add %214, %215
%217:i64 = mulnsw %116, %9
%218:i64 = add %216, %217
%219:i64 = mulnsw %37, %72
%220:i64 = add %218, %219
%221:i64 = mulnsw %20, %44
%222:i64 = add %220, %221
%223:i64 = mulnsw %51, %78
%224:i64 = add %222, %223
%225:i64 = mulnsw %34, %58
%226:i64 = add %224, %225
%227:i64 = mulnsw %65, %84
%228:i64 = add %226, %227 (hasExternalUses)
%229:i64 = add 33554432:i64, %228 (hasExternalUses)
%230:i64 = ashr %229, 26:i64
%231:i64 = add %209, %230 (hasExternalUses)
%232:i64 = add 16777216:i64, %231 (hasExternalUses)
%233:i64 = ashr %232, 25:i64
%234:i64 = add %190, %233 (hasExternalUses)
%235:i64 = add 33554432:i64, %234 (hasExternalUses)
%236:i64 = ashr %235, 26:i64
%237:i64 = add %171, %236 (hasExternalUses)
%238:i64 = add 16777216:i64, %237 (hasExternalUses)
%239:i64 = ashr %238, 25:i64
%240:i64 = add %152, %239 (hasExternalUses)
%241:i64 = add 33554432:i64, %240 (hasExternalUses)
%242:i64 = ashr %241, 26:i64
%243:i64 = add %133, %242 (hasExternalUses)
%244:i64 = add 16777216:i64, %243 (hasExternalUses)
%245:i64 = ashr %244, 25:i64
%246:i64 = mulnsw 19:i64, %245
%247:i64 = add %106, %246 (hasExternalUses)
%248:i64 = add 33554432:i64, %247 (hasExternalUses)
%249:i64 = lshr %248, 26:i64
%250:i64 = add %104, %249
infer %250 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %376 = and i64 %373, 4227858432
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = add 1:i32, %2 (hasExternalUses)
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
%6:i32 = var
%7:i32 = mul 19:i32, %6
%8:i64 = sext %7
%9:i32 = var
%10:i32 = shl %9, 1:i32
%11:i64 = sext %10 (hasExternalUses)
%12:i64 = mulnsw %8, %11
%13:i64 = add %5, %12
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i32 = var
%17:i32 = mul 19:i32, %16
%18:i64 = sext %17 (hasExternalUses)
%19:i64 = mulnsw %15, %18
%20:i64 = add %13, %19
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i32 = var
%25:i32 = shl %24, 1:i32
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %23, %26
%28:i64 = add %20, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = mul 19:i32, %31
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
%36:i32 = var
%37:i32 = mul 19:i32, %36
%38:i64 = sext %37 (hasExternalUses)
%39:i32 = var
%40:i32 = shl %39, 1:i32
%41:i64 = sext %40 (hasExternalUses)
%42:i64 = mulnsw %38, %41
%43:i64 = add %35, %42
%44:i32 = var
%45:i64 = sext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = mul 19:i32, %46
%48:i64 = sext %47 (hasExternalUses)
%49:i64 = mulnsw %45, %48
%50:i64 = add %43, %49
%51:i32 = var
%52:i32 = mul 19:i32, %51
%53:i64 = sext %52 (hasExternalUses)
%54:i32 = var
%55:i32 = shl %54, 1:i32
%56:i64 = sext %55 (hasExternalUses)
%57:i64 = mulnsw %53, %56
%58:i64 = add %50, %57
%59:i32 = var
%60:i64 = sext %59 (hasExternalUses)
%61:i32 = var
%62:i32 = mul 19:i32, %61
%63:i64 = sext %62 (hasExternalUses)
%64:i64 = mulnsw %60, %63
%65:i64 = add %58, %64
%66:i32 = var
%67:i32 = mul 19:i32, %66
%68:i64 = sext %67 (hasExternalUses)
%69:i32 = var
%70:i32 = shl %69, 1:i32
%71:i64 = sext %70 (hasExternalUses)
%72:i64 = mulnsw %68, %71
%73:i64 = add %65, %72
%74:i64 = add 33554432:i64, %73 (hasExternalUses)
%75:i64 = and 18446744073642442752:i64, %74
%76:i64 = sub %73, %75
%77:i64 = sext %6 (hasExternalUses)
%78:i64 = mulnsw %15, %77
%79:i64 = sext %9 (hasExternalUses)
%80:i64 = mulnsw %79, %1
%81:i64 = add %78, %80
%82:i64 = sext %24 (hasExternalUses)
%83:i64 = sext %16 (hasExternalUses)
%84:i64 = mulnsw %82, %83
%85:i64 = add %81, %84
%86:i64 = sext %21 (hasExternalUses)
%87:i64 = mulnsw %30, %86
%88:i64 = add %85, %87
%89:i64 = sext %39 (hasExternalUses)
%90:i64 = sext %31
%91:i64 = mulnsw %89, %90
%92:i64 = add %88, %91
%93:i64 = sext %36
%94:i64 = mulnsw %45, %93
%95:i64 = add %92, %94
%96:i64 = sext %54 (hasExternalUses)
%97:i64 = sext %46
%98:i64 = mulnsw %96, %97
%99:i64 = add %95, %98
%100:i64 = sext %51
%101:i64 = mulnsw %60, %100
%102:i64 = add %99, %101
%103:i64 = sext %69 (hasExternalUses)
%104:i64 = sext %61
%105:i64 = mulnsw %103, %104
%106:i64 = add %102, %105
%107:i64 = sext %66
%108:i64 = mulnsw %107, %4
%109:i64 = add %106, %108
%110:i64 = mulnsw %15, %1
%111:i64 = mulnsw %77, %26
%112:i64 = add %110, %111
%113:i64 = mulnsw %30, %83
%114:i64 = add %112, %113
%115:i64 = mulnsw %86, %41
%116:i64 = add %114, %115
%117:i64 = mulnsw %45, %90
%118:i64 = add %116, %117
%119:i64 = mulnsw %93, %56
%120:i64 = add %118, %119
%121:i64 = mulnsw %60, %97
%122:i64 = add %120, %121
%123:i64 = mulnsw %100, %71
%124:i64 = add %122, %123
%125:i64 = mulnsw %104, %4
%126:i64 = add %124, %125
%127:i64 = mulnsw %68, %11
%128:i64 = add %126, %127
%129:i64 = mulnsw %30, %77
%130:i64 = mulnsw %82, %1
%131:i64 = add %129, %130
%132:i64 = mulnsw %89, %83
%133:i64 = add %131, %132
%134:i64 = mulnsw %45, %86
%135:i64 = add %133, %134
%136:i64 = mulnsw %96, %90
%137:i64 = add %135, %136
%138:i64 = mulnsw %60, %93
%139:i64 = add %137, %138
%140:i64 = mulnsw %103, %97
%141:i64 = add %139, %140
%142:i64 = mulnsw %100, %4
%143:i64 = add %141, %142
%144:i64 = mulnsw %79, %63
%145:i64 = add %143, %144
%146:i64 = mulnsw %15, %68
%147:i64 = add %145, %146
%148:i64 = mulnsw %30, %1
%149:i64 = mulnsw %77, %41
%150:i64 = add %148, %149
%151:i64 = mulnsw %45, %83
%152:i64 = add %150, %151
%153:i64 = mulnsw %86, %56
%154:i64 = add %152, %153
%155:i64 = mulnsw %60, %90
%156:i64 = add %154, %155
%157:i64 = mulnsw %93, %71
%158:i64 = add %156, %157
%159:i64 = mulnsw %97, %4
%160:i64 = add %158, %159
%161:i64 = mulnsw %53, %11
%162:i64 = add %160, %161
%163:i64 = mulnsw %15, %63
%164:i64 = add %162, %163
%165:i64 = mulnsw %68, %26
%166:i64 = add %164, %165
%167:i64 = mulnsw %45, %77
%168:i64 = mulnsw %89, %1
%169:i64 = add %167, %168
%170:i64 = mulnsw %96, %83
%171:i64 = add %169, %170
%172:i64 = mulnsw %60, %86
%173:i64 = add %171, %172
%174:i64 = mulnsw %103, %90
%175:i64 = add %173, %174
%176:i64 = mulnsw %93, %4
%177:i64 = add %175, %176
%178:i64 = mulnsw %79, %48
%179:i64 = add %177, %178
%180:i64 = mulnsw %15, %53
%181:i64 = add %179, %180
%182:i64 = mulnsw %82, %63
%183:i64 = add %181, %182
%184:i64 = mulnsw %30, %68
%185:i64 = add %183, %184
%186:i64 = mulnsw %45, %1
%187:i64 = mulnsw %77, %56
%188:i64 = add %186, %187
%189:i64 = mulnsw %60, %83
%190:i64 = add %188, %189
%191:i64 = mulnsw %86, %71
%192:i64 = add %190, %191
%193:i64 = mulnsw %90, %4
%194:i64 = add %192, %193
%195:i64 = mulnsw %38, %11
%196:i64 = add %194, %195
%197:i64 = mulnsw %15, %48
%198:i64 = add %196, %197
%199:i64 = mulnsw %53, %26
%200:i64 = add %198, %199
%201:i64 = mulnsw %30, %63
%202:i64 = add %200, %201
%203:i64 = mulnsw %68, %41
%204:i64 = add %202, %203 (hasExternalUses)
%205:i64 = add 33554432:i64, %204 (hasExternalUses)
%206:i64 = ashr %205, 26:i64
%207:i64 = add %185, %206 (hasExternalUses)
%208:i64 = add 16777216:i64, %207 (hasExternalUses)
%209:i64 = ashr %208, 25:i64
%210:i64 = add %166, %209 (hasExternalUses)
%211:i64 = add 33554432:i64, %210 (hasExternalUses)
%212:i64 = ashr %211, 26:i64
%213:i64 = add %147, %212 (hasExternalUses)
%214:i64 = add 16777216:i64, %213 (hasExternalUses)
%215:i64 = ashr %214, 25:i64
%216:i64 = add %128, %215 (hasExternalUses)
%217:i64 = add 33554432:i64, %216 (hasExternalUses)
%218:i64 = ashr %217, 26:i64
%219:i64 = add %109, %218 (hasExternalUses)
%220:i64 = add 16777216:i64, %219 (hasExternalUses)
%221:i64 = ashr %220, 25:i64
%222:i64 = mulnsw 19:i64, %221
%223:i64 = add %76, %222 (hasExternalUses)
%224:i64 = add 33554432:i64, %223 (hasExternalUses)
%225:i64 = and 4227858432:i64, %224
infer %225 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %377 = sub i64 %370, %376
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = add 1:i32, %2 (hasExternalUses)
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
%6:i32 = var
%7:i32 = mul 19:i32, %6
%8:i64 = sext %7
%9:i32 = var
%10:i32 = shl %9, 1:i32
%11:i64 = sext %10 (hasExternalUses)
%12:i64 = mulnsw %8, %11
%13:i64 = add %5, %12
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i32 = var
%17:i32 = mul 19:i32, %16
%18:i64 = sext %17 (hasExternalUses)
%19:i64 = mulnsw %15, %18
%20:i64 = add %13, %19
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i32 = var
%25:i32 = shl %24, 1:i32
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %23, %26
%28:i64 = add %20, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = mul 19:i32, %31
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
%36:i32 = var
%37:i32 = mul 19:i32, %36
%38:i64 = sext %37 (hasExternalUses)
%39:i32 = var
%40:i32 = shl %39, 1:i32
%41:i64 = sext %40 (hasExternalUses)
%42:i64 = mulnsw %38, %41
%43:i64 = add %35, %42
%44:i32 = var
%45:i64 = sext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = mul 19:i32, %46
%48:i64 = sext %47 (hasExternalUses)
%49:i64 = mulnsw %45, %48
%50:i64 = add %43, %49
%51:i32 = var
%52:i32 = mul 19:i32, %51
%53:i64 = sext %52 (hasExternalUses)
%54:i32 = var
%55:i32 = shl %54, 1:i32
%56:i64 = sext %55 (hasExternalUses)
%57:i64 = mulnsw %53, %56
%58:i64 = add %50, %57
%59:i32 = var
%60:i64 = sext %59 (hasExternalUses)
%61:i32 = var
%62:i32 = mul 19:i32, %61
%63:i64 = sext %62 (hasExternalUses)
%64:i64 = mulnsw %60, %63
%65:i64 = add %58, %64
%66:i32 = var
%67:i32 = mul 19:i32, %66
%68:i64 = sext %67 (hasExternalUses)
%69:i32 = var
%70:i32 = shl %69, 1:i32
%71:i64 = sext %70 (hasExternalUses)
%72:i64 = mulnsw %68, %71
%73:i64 = add %65, %72
%74:i64 = add 33554432:i64, %73 (hasExternalUses)
%75:i64 = and 18446744073642442752:i64, %74
%76:i64 = sub %73, %75
%77:i64 = sext %6 (hasExternalUses)
%78:i64 = mulnsw %15, %77
%79:i64 = sext %9 (hasExternalUses)
%80:i64 = mulnsw %79, %1
%81:i64 = add %78, %80
%82:i64 = sext %24 (hasExternalUses)
%83:i64 = sext %16 (hasExternalUses)
%84:i64 = mulnsw %82, %83
%85:i64 = add %81, %84
%86:i64 = sext %21 (hasExternalUses)
%87:i64 = mulnsw %30, %86
%88:i64 = add %85, %87
%89:i64 = sext %39 (hasExternalUses)
%90:i64 = sext %31
%91:i64 = mulnsw %89, %90
%92:i64 = add %88, %91
%93:i64 = sext %36
%94:i64 = mulnsw %45, %93
%95:i64 = add %92, %94
%96:i64 = sext %54 (hasExternalUses)
%97:i64 = sext %46
%98:i64 = mulnsw %96, %97
%99:i64 = add %95, %98
%100:i64 = sext %51
%101:i64 = mulnsw %60, %100
%102:i64 = add %99, %101
%103:i64 = sext %69 (hasExternalUses)
%104:i64 = sext %61
%105:i64 = mulnsw %103, %104
%106:i64 = add %102, %105
%107:i64 = sext %66
%108:i64 = mulnsw %107, %4
%109:i64 = add %106, %108
%110:i64 = mulnsw %15, %1
%111:i64 = mulnsw %77, %26
%112:i64 = add %110, %111
%113:i64 = mulnsw %30, %83
%114:i64 = add %112, %113
%115:i64 = mulnsw %86, %41
%116:i64 = add %114, %115
%117:i64 = mulnsw %45, %90
%118:i64 = add %116, %117
%119:i64 = mulnsw %93, %56
%120:i64 = add %118, %119
%121:i64 = mulnsw %60, %97
%122:i64 = add %120, %121
%123:i64 = mulnsw %100, %71
%124:i64 = add %122, %123
%125:i64 = mulnsw %104, %4
%126:i64 = add %124, %125
%127:i64 = mulnsw %68, %11
%128:i64 = add %126, %127
%129:i64 = mulnsw %30, %77
%130:i64 = mulnsw %82, %1
%131:i64 = add %129, %130
%132:i64 = mulnsw %89, %83
%133:i64 = add %131, %132
%134:i64 = mulnsw %45, %86
%135:i64 = add %133, %134
%136:i64 = mulnsw %96, %90
%137:i64 = add %135, %136
%138:i64 = mulnsw %60, %93
%139:i64 = add %137, %138
%140:i64 = mulnsw %103, %97
%141:i64 = add %139, %140
%142:i64 = mulnsw %100, %4
%143:i64 = add %141, %142
%144:i64 = mulnsw %79, %63
%145:i64 = add %143, %144
%146:i64 = mulnsw %15, %68
%147:i64 = add %145, %146
%148:i64 = mulnsw %30, %1
%149:i64 = mulnsw %77, %41
%150:i64 = add %148, %149
%151:i64 = mulnsw %45, %83
%152:i64 = add %150, %151
%153:i64 = mulnsw %86, %56
%154:i64 = add %152, %153
%155:i64 = mulnsw %60, %90
%156:i64 = add %154, %155
%157:i64 = mulnsw %93, %71
%158:i64 = add %156, %157
%159:i64 = mulnsw %97, %4
%160:i64 = add %158, %159
%161:i64 = mulnsw %53, %11
%162:i64 = add %160, %161
%163:i64 = mulnsw %15, %63
%164:i64 = add %162, %163
%165:i64 = mulnsw %68, %26
%166:i64 = add %164, %165
%167:i64 = mulnsw %45, %77
%168:i64 = mulnsw %89, %1
%169:i64 = add %167, %168
%170:i64 = mulnsw %96, %83
%171:i64 = add %169, %170
%172:i64 = mulnsw %60, %86
%173:i64 = add %171, %172
%174:i64 = mulnsw %103, %90
%175:i64 = add %173, %174
%176:i64 = mulnsw %93, %4
%177:i64 = add %175, %176
%178:i64 = mulnsw %79, %48
%179:i64 = add %177, %178
%180:i64 = mulnsw %15, %53
%181:i64 = add %179, %180
%182:i64 = mulnsw %82, %63
%183:i64 = add %181, %182
%184:i64 = mulnsw %30, %68
%185:i64 = add %183, %184
%186:i64 = mulnsw %45, %1
%187:i64 = mulnsw %77, %56
%188:i64 = add %186, %187
%189:i64 = mulnsw %60, %83
%190:i64 = add %188, %189
%191:i64 = mulnsw %86, %71
%192:i64 = add %190, %191
%193:i64 = mulnsw %90, %4
%194:i64 = add %192, %193
%195:i64 = mulnsw %38, %11
%196:i64 = add %194, %195
%197:i64 = mulnsw %15, %48
%198:i64 = add %196, %197
%199:i64 = mulnsw %53, %26
%200:i64 = add %198, %199
%201:i64 = mulnsw %30, %63
%202:i64 = add %200, %201
%203:i64 = mulnsw %68, %41
%204:i64 = add %202, %203 (hasExternalUses)
%205:i64 = add 33554432:i64, %204 (hasExternalUses)
%206:i64 = ashr %205, 26:i64
%207:i64 = add %185, %206 (hasExternalUses)
%208:i64 = add 16777216:i64, %207 (hasExternalUses)
%209:i64 = ashr %208, 25:i64
%210:i64 = add %166, %209 (hasExternalUses)
%211:i64 = add 33554432:i64, %210 (hasExternalUses)
%212:i64 = ashr %211, 26:i64
%213:i64 = add %147, %212 (hasExternalUses)
%214:i64 = add 16777216:i64, %213 (hasExternalUses)
%215:i64 = ashr %214, 25:i64
%216:i64 = add %128, %215 (hasExternalUses)
%217:i64 = add 33554432:i64, %216 (hasExternalUses)
%218:i64 = ashr %217, 26:i64
%219:i64 = add %109, %218 (hasExternalUses)
%220:i64 = add 16777216:i64, %219 (hasExternalUses)
%221:i64 = ashr %220, 25:i64
%222:i64 = mulnsw 19:i64, %221
%223:i64 = add %76, %222
%224:i64 = add 33554432:i64, %223 (hasExternalUses)
%225:i64 = and 4227858432:i64, %224
%226:i64 = sub %223, %225
infer %226 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %378 = trunc i64 %377 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = add 1:i32, %2 (hasExternalUses)
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
%6:i32 = var
%7:i32 = mul 19:i32, %6
%8:i64 = sext %7
%9:i32 = var
%10:i32 = shl %9, 1:i32
%11:i64 = sext %10 (hasExternalUses)
%12:i64 = mulnsw %8, %11
%13:i64 = add %5, %12
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i32 = var
%17:i32 = mul 19:i32, %16
%18:i64 = sext %17 (hasExternalUses)
%19:i64 = mulnsw %15, %18
%20:i64 = add %13, %19
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i32 = var
%25:i32 = shl %24, 1:i32
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %23, %26
%28:i64 = add %20, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = mul 19:i32, %31
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
%36:i32 = var
%37:i32 = mul 19:i32, %36
%38:i64 = sext %37 (hasExternalUses)
%39:i32 = var
%40:i32 = shl %39, 1:i32
%41:i64 = sext %40 (hasExternalUses)
%42:i64 = mulnsw %38, %41
%43:i64 = add %35, %42
%44:i32 = var
%45:i64 = sext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = mul 19:i32, %46
%48:i64 = sext %47 (hasExternalUses)
%49:i64 = mulnsw %45, %48
%50:i64 = add %43, %49
%51:i32 = var
%52:i32 = mul 19:i32, %51
%53:i64 = sext %52 (hasExternalUses)
%54:i32 = var
%55:i32 = shl %54, 1:i32
%56:i64 = sext %55 (hasExternalUses)
%57:i64 = mulnsw %53, %56
%58:i64 = add %50, %57
%59:i32 = var
%60:i64 = sext %59 (hasExternalUses)
%61:i32 = var
%62:i32 = mul 19:i32, %61
%63:i64 = sext %62 (hasExternalUses)
%64:i64 = mulnsw %60, %63
%65:i64 = add %58, %64
%66:i32 = var
%67:i32 = mul 19:i32, %66
%68:i64 = sext %67 (hasExternalUses)
%69:i32 = var
%70:i32 = shl %69, 1:i32
%71:i64 = sext %70 (hasExternalUses)
%72:i64 = mulnsw %68, %71
%73:i64 = add %65, %72
%74:i64 = add 33554432:i64, %73 (hasExternalUses)
%75:i64 = and 18446744073642442752:i64, %74
%76:i64 = sub %73, %75
%77:i64 = sext %6 (hasExternalUses)
%78:i64 = mulnsw %15, %77
%79:i64 = sext %9 (hasExternalUses)
%80:i64 = mulnsw %79, %1
%81:i64 = add %78, %80
%82:i64 = sext %24 (hasExternalUses)
%83:i64 = sext %16 (hasExternalUses)
%84:i64 = mulnsw %82, %83
%85:i64 = add %81, %84
%86:i64 = sext %21 (hasExternalUses)
%87:i64 = mulnsw %30, %86
%88:i64 = add %85, %87
%89:i64 = sext %39 (hasExternalUses)
%90:i64 = sext %31
%91:i64 = mulnsw %89, %90
%92:i64 = add %88, %91
%93:i64 = sext %36
%94:i64 = mulnsw %45, %93
%95:i64 = add %92, %94
%96:i64 = sext %54 (hasExternalUses)
%97:i64 = sext %46
%98:i64 = mulnsw %96, %97
%99:i64 = add %95, %98
%100:i64 = sext %51
%101:i64 = mulnsw %60, %100
%102:i64 = add %99, %101
%103:i64 = sext %69 (hasExternalUses)
%104:i64 = sext %61
%105:i64 = mulnsw %103, %104
%106:i64 = add %102, %105
%107:i64 = sext %66
%108:i64 = mulnsw %107, %4
%109:i64 = add %106, %108
%110:i64 = mulnsw %15, %1
%111:i64 = mulnsw %77, %26
%112:i64 = add %110, %111
%113:i64 = mulnsw %30, %83
%114:i64 = add %112, %113
%115:i64 = mulnsw %86, %41
%116:i64 = add %114, %115
%117:i64 = mulnsw %45, %90
%118:i64 = add %116, %117
%119:i64 = mulnsw %93, %56
%120:i64 = add %118, %119
%121:i64 = mulnsw %60, %97
%122:i64 = add %120, %121
%123:i64 = mulnsw %100, %71
%124:i64 = add %122, %123
%125:i64 = mulnsw %104, %4
%126:i64 = add %124, %125
%127:i64 = mulnsw %68, %11
%128:i64 = add %126, %127
%129:i64 = mulnsw %30, %77
%130:i64 = mulnsw %82, %1
%131:i64 = add %129, %130
%132:i64 = mulnsw %89, %83
%133:i64 = add %131, %132
%134:i64 = mulnsw %45, %86
%135:i64 = add %133, %134
%136:i64 = mulnsw %96, %90
%137:i64 = add %135, %136
%138:i64 = mulnsw %60, %93
%139:i64 = add %137, %138
%140:i64 = mulnsw %103, %97
%141:i64 = add %139, %140
%142:i64 = mulnsw %100, %4
%143:i64 = add %141, %142
%144:i64 = mulnsw %79, %63
%145:i64 = add %143, %144
%146:i64 = mulnsw %15, %68
%147:i64 = add %145, %146
%148:i64 = mulnsw %30, %1
%149:i64 = mulnsw %77, %41
%150:i64 = add %148, %149
%151:i64 = mulnsw %45, %83
%152:i64 = add %150, %151
%153:i64 = mulnsw %86, %56
%154:i64 = add %152, %153
%155:i64 = mulnsw %60, %90
%156:i64 = add %154, %155
%157:i64 = mulnsw %93, %71
%158:i64 = add %156, %157
%159:i64 = mulnsw %97, %4
%160:i64 = add %158, %159
%161:i64 = mulnsw %53, %11
%162:i64 = add %160, %161
%163:i64 = mulnsw %15, %63
%164:i64 = add %162, %163
%165:i64 = mulnsw %68, %26
%166:i64 = add %164, %165
%167:i64 = mulnsw %45, %77
%168:i64 = mulnsw %89, %1
%169:i64 = add %167, %168
%170:i64 = mulnsw %96, %83
%171:i64 = add %169, %170
%172:i64 = mulnsw %60, %86
%173:i64 = add %171, %172
%174:i64 = mulnsw %103, %90
%175:i64 = add %173, %174
%176:i64 = mulnsw %93, %4
%177:i64 = add %175, %176
%178:i64 = mulnsw %79, %48
%179:i64 = add %177, %178
%180:i64 = mulnsw %15, %53
%181:i64 = add %179, %180
%182:i64 = mulnsw %82, %63
%183:i64 = add %181, %182
%184:i64 = mulnsw %30, %68
%185:i64 = add %183, %184
%186:i64 = mulnsw %45, %1
%187:i64 = mulnsw %77, %56
%188:i64 = add %186, %187
%189:i64 = mulnsw %60, %83
%190:i64 = add %188, %189
%191:i64 = mulnsw %86, %71
%192:i64 = add %190, %191
%193:i64 = mulnsw %90, %4
%194:i64 = add %192, %193
%195:i64 = mulnsw %38, %11
%196:i64 = add %194, %195
%197:i64 = mulnsw %15, %48
%198:i64 = add %196, %197
%199:i64 = mulnsw %53, %26
%200:i64 = add %198, %199
%201:i64 = mulnsw %30, %63
%202:i64 = add %200, %201
%203:i64 = mulnsw %68, %41
%204:i64 = add %202, %203 (hasExternalUses)
%205:i64 = add 33554432:i64, %204 (hasExternalUses)
%206:i64 = ashr %205, 26:i64
%207:i64 = add %185, %206 (hasExternalUses)
%208:i64 = add 16777216:i64, %207 (hasExternalUses)
%209:i64 = ashr %208, 25:i64
%210:i64 = add %166, %209 (hasExternalUses)
%211:i64 = add 33554432:i64, %210 (hasExternalUses)
%212:i64 = ashr %211, 26:i64
%213:i64 = add %147, %212 (hasExternalUses)
%214:i64 = add 16777216:i64, %213 (hasExternalUses)
%215:i64 = ashr %214, 25:i64
%216:i64 = add %128, %215 (hasExternalUses)
%217:i64 = add 33554432:i64, %216 (hasExternalUses)
%218:i64 = ashr %217, 26:i64
%219:i64 = add %109, %218 (hasExternalUses)
%220:i64 = add 16777216:i64, %219 (hasExternalUses)
%221:i64 = ashr %220, 25:i64
%222:i64 = mulnsw 19:i64, %221
%223:i64 = add %76, %222
%224:i64 = add 33554432:i64, %223 (hasExternalUses)
%225:i64 = and 4227858432:i64, %224
%226:i64 = sub %223, %225
%227:i32 = trunc %226
infer %227

; *****
; For LLVM instruction:
;  %379 = trunc i64 %375 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = add 1:i32, %7 (hasExternalUses)
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = mul 19:i32, %14
%16:i64 = sext %15
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i64 = mulnsw %20, %23
%25:i64 = add %18, %24
%26:i32 = var
%27:i64 = sext %26 (hasExternalUses)
%28:i32 = var
%29:i32 = mul 19:i32, %28
%30:i64 = sext %29 (hasExternalUses)
%31:i64 = mulnsw %27, %30
%32:i64 = add %25, %31
%33:i32 = var
%34:i64 = sext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = mul 19:i32, %35
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %32, %38
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i32 = var
%43:i32 = mul 19:i32, %42
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %41, %44
%46:i64 = add %39, %45
%47:i32 = var
%48:i64 = sext %47 (hasExternalUses)
%49:i32 = var
%50:i32 = mul 19:i32, %49
%51:i64 = sext %50 (hasExternalUses)
%52:i64 = mulnsw %48, %51
%53:i64 = add %46, %52
%54:i32 = var
%55:i64 = sext %54 (hasExternalUses)
%56:i32 = var
%57:i32 = mul 19:i32, %56
%58:i64 = sext %57 (hasExternalUses)
%59:i64 = mulnsw %55, %58
%60:i64 = add %53, %59
%61:i32 = var
%62:i64 = sext %61 (hasExternalUses)
%63:i32 = var
%64:i32 = mul 19:i32, %63
%65:i64 = sext %64 (hasExternalUses)
%66:i64 = mulnsw %62, %65
%67:i64 = add %60, %66
%68:i64 = mulnsw %3, %9
%69:i32 = mul 19:i32, %5
%70:i64 = sext %69
%71:i32 = shl %12, 1:i32
%72:i64 = sext %71 (hasExternalUses)
%73:i64 = mulnsw %70, %72
%74:i64 = add %68, %73
%75:i64 = mulnsw %20, %16
%76:i64 = add %74, %75
%77:i32 = shl %26, 1:i32
%78:i64 = sext %77 (hasExternalUses)
%79:i64 = mulnsw %23, %78
%80:i64 = add %76, %79
%81:i64 = mulnsw %34, %30
%82:i64 = add %80, %81
%83:i32 = shl %40, 1:i32
%84:i64 = sext %83 (hasExternalUses)
%85:i64 = mulnsw %37, %84
%86:i64 = add %82, %85
%87:i64 = mulnsw %48, %44
%88:i64 = add %86, %87
%89:i32 = shl %54, 1:i32
%90:i64 = sext %89 (hasExternalUses)
%91:i64 = mulnsw %51, %90
%92:i64 = add %88, %91
%93:i64 = mulnsw %62, %58
%94:i64 = add %92, %93
%95:i32 = shl %0, 1:i32
%96:i64 = sext %95 (hasExternalUses)
%97:i64 = mulnsw %65, %96
%98:i64 = add %94, %97
%99:i64 = add 33554432:i64, %98
%100:i64 = ashr %99, 26:i64
%101:i64 = add %67, %100
%102:i64 = add 16777216:i64, %101 (hasExternalUses)
%103:i64 = and 4261412864:i64, %102
%104:i64 = sub %101, %103
%105:i64 = and 18446744073642442752:i64, %99
%106:i64 = sub %98, %105
%107:i64 = mulnsw %20, %6
%108:i64 = mulnsw %13, %3
%109:i64 = add %107, %108
%110:i64 = sext %14 (hasExternalUses)
%111:i64 = mulnsw %27, %110
%112:i64 = add %109, %111
%113:i64 = sext %21 (hasExternalUses)
%114:i64 = mulnsw %34, %113
%115:i64 = add %112, %114
%116:i64 = sext %28
%117:i64 = mulnsw %41, %116
%118:i64 = add %115, %117
%119:i64 = sext %35
%120:i64 = mulnsw %48, %119
%121:i64 = add %118, %120
%122:i64 = sext %42
%123:i64 = mulnsw %55, %122
%124:i64 = add %121, %123
%125:i64 = sext %49
%126:i64 = mulnsw %62, %125
%127:i64 = add %124, %126
%128:i64 = sext %56
%129:i64 = mulnsw %1, %128
%130:i64 = add %127, %129
%131:i64 = sext %63
%132:i64 = mulnsw %131, %9
%133:i64 = add %130, %132
%134:i64 = mulnsw %20, %3
%135:i64 = mulnsw %6, %78
%136:i64 = add %134, %135
%137:i64 = mulnsw %34, %110
%138:i64 = add %136, %137
%139:i64 = mulnsw %113, %84
%140:i64 = add %138, %139
%141:i64 = mulnsw %48, %116
%142:i64 = add %140, %141
%143:i64 = mulnsw %119, %90
%144:i64 = add %142, %143
%145:i64 = mulnsw %62, %122
%146:i64 = add %144, %145
%147:i64 = mulnsw %125, %96
%148:i64 = add %146, %147
%149:i64 = mulnsw %128, %9
%150:i64 = add %148, %149
%151:i64 = mulnsw %65, %72
%152:i64 = add %150, %151
%153:i64 = mulnsw %34, %6
%154:i64 = mulnsw %27, %3
%155:i64 = add %153, %154
%156:i64 = mulnsw %41, %110
%157:i64 = add %155, %156
%158:i64 = mulnsw %48, %113
%159:i64 = add %157, %158
%160:i64 = mulnsw %55, %116
%161:i64 = add %159, %160
%162:i64 = mulnsw %62, %119
%163:i64 = add %161, %162
%164:i64 = mulnsw %1, %122
%165:i64 = add %163, %164
%166:i64 = mulnsw %125, %9
%167:i64 = add %165, %166
%168:i64 = mulnsw %13, %58
%169:i64 = add %167, %168
%170:i64 = mulnsw %20, %65
%171:i64 = add %169, %170
%172:i64 = mulnsw %34, %3
%173:i64 = mulnsw %6, %84
%174:i64 = add %172, %173
%175:i64 = mulnsw %48, %110
%176:i64 = add %174, %175
%177:i64 = mulnsw %113, %90
%178:i64 = add %176, %177
%179:i64 = mulnsw %62, %116
%180:i64 = add %178, %179
%181:i64 = mulnsw %119, %96
%182:i64 = add %180, %181
%183:i64 = mulnsw %122, %9
%184:i64 = add %182, %183
%185:i64 = mulnsw %51, %72
%186:i64 = add %184, %185
%187:i64 = mulnsw %20, %58
%188:i64 = add %186, %187
%189:i64 = mulnsw %65, %78
%190:i64 = add %188, %189
%191:i64 = mulnsw %48, %6
%192:i64 = mulnsw %41, %3
%193:i64 = add %191, %192
%194:i64 = mulnsw %55, %110
%195:i64 = add %193, %194
%196:i64 = mulnsw %62, %113
%197:i64 = add %195, %196
%198:i64 = mulnsw %1, %116
%199:i64 = add %197, %198
%200:i64 = mulnsw %119, %9
%201:i64 = add %199, %200
%202:i64 = mulnsw %13, %44
%203:i64 = add %201, %202
%204:i64 = mulnsw %20, %51
%205:i64 = add %203, %204
%206:i64 = mulnsw %27, %58
%207:i64 = add %205, %206
%208:i64 = mulnsw %34, %65
%209:i64 = add %207, %208
%210:i64 = mulnsw %48, %3
%211:i64 = mulnsw %6, %90
%212:i64 = add %210, %211
%213:i64 = mulnsw %62, %110
%214:i64 = add %212, %213
%215:i64 = mulnsw %113, %96
%216:i64 = add %214, %215
%217:i64 = mulnsw %116, %9
%218:i64 = add %216, %217
%219:i64 = mulnsw %37, %72
%220:i64 = add %218, %219
%221:i64 = mulnsw %20, %44
%222:i64 = add %220, %221
%223:i64 = mulnsw %51, %78
%224:i64 = add %222, %223
%225:i64 = mulnsw %34, %58
%226:i64 = add %224, %225
%227:i64 = mulnsw %65, %84
%228:i64 = add %226, %227 (hasExternalUses)
%229:i64 = add 33554432:i64, %228 (hasExternalUses)
%230:i64 = ashr %229, 26:i64
%231:i64 = add %209, %230 (hasExternalUses)
%232:i64 = add 16777216:i64, %231 (hasExternalUses)
%233:i64 = ashr %232, 25:i64
%234:i64 = add %190, %233 (hasExternalUses)
%235:i64 = add 33554432:i64, %234 (hasExternalUses)
%236:i64 = ashr %235, 26:i64
%237:i64 = add %171, %236 (hasExternalUses)
%238:i64 = add 16777216:i64, %237 (hasExternalUses)
%239:i64 = ashr %238, 25:i64
%240:i64 = add %152, %239 (hasExternalUses)
%241:i64 = add 33554432:i64, %240 (hasExternalUses)
%242:i64 = ashr %241, 26:i64
%243:i64 = add %133, %242 (hasExternalUses)
%244:i64 = add 16777216:i64, %243 (hasExternalUses)
%245:i64 = ashr %244, 25:i64
%246:i64 = mulnsw 19:i64, %245
%247:i64 = add %106, %246 (hasExternalUses)
%248:i64 = add 33554432:i64, %247 (hasExternalUses)
%249:i64 = lshr %248, 26:i64
%250:i64 = add %104, %249
%251:i32 = trunc %250
infer %251

; *****
; For LLVM instruction:
;  %380 = trunc i64 %314 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = add 1:i32, %14 (hasExternalUses)
%16:i64 = sext %15 (hasExternalUses)
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i32 = mul 19:i32, %19
%21:i64 = sext %20
%22:i32 = var
%23:i32 = shl %22, 1:i32
%24:i64 = sext %23 (hasExternalUses)
%25:i64 = mulnsw %21, %24
%26:i64 = add %18, %25
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i32 = var
%30:i32 = mul 19:i32, %29
%31:i64 = sext %30 (hasExternalUses)
%32:i64 = mulnsw %28, %31
%33:i64 = add %26, %32
%34:i32 = var
%35:i32 = mul 19:i32, %34
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i32 = shl %37, 1:i32
%39:i64 = sext %38 (hasExternalUses)
%40:i64 = mulnsw %36, %39
%41:i64 = add %33, %40
%42:i32 = var
%43:i64 = sext %42 (hasExternalUses)
%44:i32 = var
%45:i32 = mul 19:i32, %44
%46:i64 = sext %45 (hasExternalUses)
%47:i64 = mulnsw %43, %46
%48:i64 = add %41, %47
%49:i32 = var
%50:i32 = mul 19:i32, %49
%51:i64 = sext %50 (hasExternalUses)
%52:i32 = var
%53:i32 = shl %52, 1:i32
%54:i64 = sext %53 (hasExternalUses)
%55:i64 = mulnsw %51, %54
%56:i64 = add %48, %55
%57:i32 = var
%58:i64 = sext %57 (hasExternalUses)
%59:i32 = var
%60:i32 = mul 19:i32, %59
%61:i64 = sext %60 (hasExternalUses)
%62:i64 = mulnsw %58, %61
%63:i64 = add %56, %62
%64:i32 = var
%65:i32 = mul 19:i32, %64
%66:i64 = sext %65 (hasExternalUses)
%67:i32 = var
%68:i32 = shl %67, 1:i32
%69:i64 = sext %68 (hasExternalUses)
%70:i64 = mulnsw %66, %69
%71:i64 = add %63, %70
%72:i64 = sext %7 (hasExternalUses)
%73:i64 = mulnsw %72, %3
%74:i64 = mulnsw %6, %16
%75:i64 = add %73, %74
%76:i64 = sext %22 (hasExternalUses)
%77:i32 = mul 19:i32, %12
%78:i64 = sext %77
%79:i64 = mulnsw %76, %78
%80:i64 = add %75, %79
%81:i64 = mulnsw %28, %21
%82:i64 = add %80, %81
%83:i64 = sext %37 (hasExternalUses)
%84:i64 = mulnsw %83, %31
%85:i64 = add %82, %84
%86:i64 = mulnsw %43, %36
%87:i64 = add %85, %86
%88:i64 = sext %52 (hasExternalUses)
%89:i64 = mulnsw %88, %46
%90:i64 = add %87, %89
%91:i64 = mulnsw %58, %51
%92:i64 = add %90, %91
%93:i64 = sext %67 (hasExternalUses)
%94:i64 = mulnsw %93, %61
%95:i64 = add %92, %94
%96:i64 = mulnsw %1, %66
%97:i64 = add %95, %96
%98:i64 = mulnsw %3, %16
%99:i32 = mul 19:i32, %5
%100:i64 = sext %99
%101:i64 = mulnsw %100, %24
%102:i64 = add %98, %101
%103:i64 = mulnsw %28, %78
%104:i64 = add %102, %103
%105:i64 = mulnsw %21, %39
%106:i64 = add %104, %105
%107:i64 = mulnsw %43, %31
%108:i64 = add %106, %107
%109:i64 = mulnsw %36, %54
%110:i64 = add %108, %109
%111:i64 = mulnsw %58, %46
%112:i64 = add %110, %111
%113:i64 = mulnsw %51, %69
%114:i64 = add %112, %113
%115:i64 = mulnsw %1, %61
%116:i64 = add %114, %115
%117:i64 = mulnsw %66, %9
%118:i64 = add %116, %117 (hasExternalUses)
%119:i64 = add 33554432:i64, %118 (hasExternalUses)
%120:i64 = ashr %119, 26:i64
%121:i64 = add %97, %120 (hasExternalUses)
%122:i64 = add 16777216:i64, %121 (hasExternalUses)
%123:i64 = ashr %122, 25:i64
%124:i64 = add %71, %123
%125:i64 = add 33554432:i64, %124 (hasExternalUses)
%126:i64 = and 4227858432:i64, %125
%127:i64 = sub %124, %126
%128:i32 = trunc %127
infer %128

; *****
; For LLVM instruction:
;  %381 = trunc i64 %333 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i32 = add 1:i32, %19 (hasExternalUses)
%21:i64 = sext %20 (hasExternalUses)
%22:i64 = mulnsw %18, %21
%23:i64 = add %16, %22
%24:i32 = var
%25:i64 = sext %24 (hasExternalUses)
%26:i32 = var
%27:i32 = mul 19:i32, %26
%28:i64 = sext %27
%29:i64 = mulnsw %25, %28
%30:i64 = add %23, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = mul 19:i32, %33
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i32 = mul 19:i32, %40
%42:i64 = sext %41 (hasExternalUses)
%43:i64 = mulnsw %39, %42
%44:i64 = add %37, %43
%45:i32 = var
%46:i64 = sext %45 (hasExternalUses)
%47:i32 = var
%48:i32 = mul 19:i32, %47
%49:i64 = sext %48 (hasExternalUses)
%50:i64 = mulnsw %46, %49
%51:i64 = add %44, %50
%52:i32 = var
%53:i64 = sext %52 (hasExternalUses)
%54:i32 = var
%55:i32 = mul 19:i32, %54
%56:i64 = sext %55 (hasExternalUses)
%57:i64 = mulnsw %53, %56
%58:i64 = add %51, %57
%59:i32 = var
%60:i64 = sext %59 (hasExternalUses)
%61:i32 = var
%62:i32 = mul 19:i32, %61
%63:i64 = sext %62 (hasExternalUses)
%64:i64 = mulnsw %60, %63
%65:i64 = add %58, %64
%66:i64 = mulnsw %1, %8
%67:i32 = shl %11, 1:i32
%68:i64 = sext %67 (hasExternalUses)
%69:i64 = mulnsw %3, %68
%70:i64 = add %66, %69
%71:i64 = mulnsw %14, %21
%72:i64 = add %70, %71
%73:i32 = mul 19:i32, %17
%74:i64 = sext %73
%75:i32 = shl %24, 1:i32
%76:i64 = sext %75 (hasExternalUses)
%77:i64 = mulnsw %74, %76
%78:i64 = add %72, %77
%79:i64 = mulnsw %32, %28
%80:i64 = add %78, %79
%81:i32 = shl %38, 1:i32
%82:i64 = sext %81 (hasExternalUses)
%83:i64 = mulnsw %35, %82
%84:i64 = add %80, %83
%85:i64 = mulnsw %46, %42
%86:i64 = add %84, %85
%87:i32 = shl %52, 1:i32
%88:i64 = sext %87 (hasExternalUses)
%89:i64 = mulnsw %49, %88
%90:i64 = add %86, %89
%91:i64 = mulnsw %60, %56
%92:i64 = add %90, %91
%93:i32 = shl %5, 1:i32
%94:i64 = sext %93 (hasExternalUses)
%95:i64 = mulnsw %63, %94
%96:i64 = add %92, %95
%97:i64 = mulnsw %12, %8
%98:i64 = mulnsw %3, %21
%99:i64 = add %97, %98
%100:i32 = mul 19:i32, %13
%101:i64 = sext %100
%102:i64 = mulnsw %25, %101
%103:i64 = add %99, %102
%104:i64 = mulnsw %32, %74
%105:i64 = add %103, %104
%106:i64 = mulnsw %39, %28
%107:i64 = add %105, %106
%108:i64 = mulnsw %46, %35
%109:i64 = add %107, %108
%110:i64 = mulnsw %53, %42
%111:i64 = add %109, %110
%112:i64 = mulnsw %60, %49
%113:i64 = add %111, %112
%114:i64 = mulnsw %6, %56
%115:i64 = add %113, %114
%116:i64 = mulnsw %1, %63
%117:i64 = add %115, %116
%118:i64 = mulnsw %8, %21
%119:i32 = mul 19:i32, %2
%120:i64 = sext %119
%121:i64 = mulnsw %120, %76
%122:i64 = add %118, %121
%123:i64 = mulnsw %32, %101
%124:i64 = add %122, %123
%125:i64 = mulnsw %74, %82
%126:i64 = add %124, %125
%127:i64 = mulnsw %46, %28
%128:i64 = add %126, %127
%129:i64 = mulnsw %35, %88
%130:i64 = add %128, %129
%131:i64 = mulnsw %60, %42
%132:i64 = add %130, %131
%133:i64 = mulnsw %49, %94
%134:i64 = add %132, %133
%135:i64 = mulnsw %1, %56
%136:i64 = add %134, %135
%137:i64 = mulnsw %63, %68
%138:i64 = add %136, %137 (hasExternalUses)
%139:i64 = add 33554432:i64, %138 (hasExternalUses)
%140:i64 = ashr %139, 26:i64
%141:i64 = add %117, %140 (hasExternalUses)
%142:i64 = add 16777216:i64, %141 (hasExternalUses)
%143:i64 = ashr %142, 25:i64
%144:i64 = add %96, %143 (hasExternalUses)
%145:i64 = add 33554432:i64, %144 (hasExternalUses)
%146:i64 = ashr %145, 26:i64
%147:i64 = add %65, %146
%148:i64 = add 16777216:i64, %147 (hasExternalUses)
%149:i64 = and 4261412864:i64, %148
%150:i64 = sub %147, %149
%151:i32 = trunc %150
infer %151

; *****
; For LLVM instruction:
;  %382 = trunc i64 %352 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i32 = add 1:i32, %27 (hasExternalUses)
%29:i64 = sext %28 (hasExternalUses)
%30:i64 = mulnsw %26, %29
%31:i64 = add %24, %30
%32:i32 = var
%33:i32 = mul 19:i32, %32
%34:i64 = sext %33
%35:i32 = var
%36:i32 = shl %35, 1:i32
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %31, %38
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i32 = var
%43:i32 = mul 19:i32, %42
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %41, %44
%46:i64 = add %39, %45
%47:i32 = var
%48:i32 = mul 19:i32, %47
%49:i64 = sext %48 (hasExternalUses)
%50:i32 = var
%51:i32 = shl %50, 1:i32
%52:i64 = sext %51 (hasExternalUses)
%53:i64 = mulnsw %49, %52
%54:i64 = add %46, %53
%55:i32 = var
%56:i64 = sext %55 (hasExternalUses)
%57:i32 = var
%58:i32 = mul 19:i32, %57
%59:i64 = sext %58 (hasExternalUses)
%60:i64 = mulnsw %56, %59
%61:i64 = add %54, %60
%62:i32 = var
%63:i32 = mul 19:i32, %62
%64:i64 = sext %63 (hasExternalUses)
%65:i32 = var
%66:i32 = shl %65, 1:i32
%67:i64 = sext %66 (hasExternalUses)
%68:i64 = mulnsw %64, %67
%69:i64 = add %61, %68
%70:i64 = add 33554432:i64, %69 (hasExternalUses)
%71:i64 = and 18446744073642442752:i64, %70
%72:i64 = sub %69, %71
%73:i64 = mulnsw %13, %6
%74:i64 = sext %7 (hasExternalUses)
%75:i64 = mulnsw %74, %3
%76:i64 = add %73, %75
%77:i64 = sext %20 (hasExternalUses)
%78:i64 = mulnsw %77, %15
%79:i64 = add %76, %78
%80:i64 = mulnsw %19, %29
%81:i64 = add %79, %80
%82:i64 = sext %35 (hasExternalUses)
%83:i32 = mul 19:i32, %25
%84:i64 = sext %83
%85:i64 = mulnsw %82, %84
%86:i64 = add %81, %85
%87:i64 = mulnsw %41, %34
%88:i64 = add %86, %87
%89:i64 = sext %50 (hasExternalUses)
%90:i64 = mulnsw %89, %44
%91:i64 = add %88, %90
%92:i64 = mulnsw %56, %49
%93:i64 = add %91, %92
%94:i64 = sext %65 (hasExternalUses)
%95:i64 = mulnsw %94, %59
%96:i64 = add %93, %95
%97:i64 = mulnsw %1, %64
%98:i64 = add %96, %97
%99:i64 = mulnsw %13, %3
%100:i64 = mulnsw %6, %22
%101:i64 = add %99, %100
%102:i64 = mulnsw %15, %29
%103:i64 = add %101, %102
%104:i32 = mul 19:i32, %18
%105:i64 = sext %104
%106:i64 = mulnsw %105, %37
%107:i64 = add %103, %106
%108:i64 = mulnsw %41, %84
%109:i64 = add %107, %108
%110:i64 = mulnsw %34, %52
%111:i64 = add %109, %110
%112:i64 = mulnsw %56, %44
%113:i64 = add %111, %112
%114:i64 = mulnsw %49, %67
%115:i64 = add %113, %114
%116:i64 = mulnsw %1, %59
%117:i64 = add %115, %116
%118:i64 = mulnsw %64, %9
%119:i64 = add %117, %118
%120:i64 = mulnsw %77, %3
%121:i64 = mulnsw %6, %29
%122:i64 = add %120, %121
%123:i32 = mul 19:i32, %14
%124:i64 = sext %123
%125:i64 = mulnsw %82, %124
%126:i64 = add %122, %125
%127:i64 = mulnsw %41, %105
%128:i64 = add %126, %127
%129:i64 = mulnsw %89, %84
%130:i64 = add %128, %129
%131:i64 = mulnsw %56, %34
%132:i64 = add %130, %131
%133:i64 = mulnsw %94, %44
%134:i64 = add %132, %133
%135:i64 = mulnsw %1, %49
%136:i64 = add %134, %135
%137:i64 = mulnsw %74, %59
%138:i64 = add %136, %137
%139:i64 = mulnsw %13, %64
%140:i64 = add %138, %139
%141:i64 = mulnsw %3, %29
%142:i32 = mul 19:i32, %5
%143:i64 = sext %142
%144:i64 = mulnsw %143, %37
%145:i64 = add %141, %144
%146:i64 = mulnsw %41, %124
%147:i64 = add %145, %146
%148:i64 = mulnsw %105, %52
%149:i64 = add %147, %148
%150:i64 = mulnsw %56, %84
%151:i64 = add %149, %150
%152:i64 = mulnsw %34, %67
%153:i64 = add %151, %152
%154:i64 = mulnsw %1, %44
%155:i64 = add %153, %154
%156:i64 = mulnsw %49, %9
%157:i64 = add %155, %156
%158:i64 = mulnsw %13, %59
%159:i64 = add %157, %158
%160:i64 = mulnsw %64, %22
%161:i64 = add %159, %160 (hasExternalUses)
%162:i64 = add 33554432:i64, %161 (hasExternalUses)
%163:i64 = ashr %162, 26:i64
%164:i64 = add %140, %163 (hasExternalUses)
%165:i64 = add 16777216:i64, %164 (hasExternalUses)
%166:i64 = ashr %165, 25:i64
%167:i64 = add %119, %166 (hasExternalUses)
%168:i64 = add 33554432:i64, %167 (hasExternalUses)
%169:i64 = ashr %168, 26:i64
%170:i64 = add %98, %169 (hasExternalUses)
%171:i64 = add 16777216:i64, %170 (hasExternalUses)
%172:i64 = ashr %171, 25:i64
%173:i64 = add %72, %172
%174:i64 = add 33554432:i64, %173 (hasExternalUses)
%175:i64 = and 4227858432:i64, %174
%176:i64 = sub %173, %175
%177:i32 = trunc %176
infer %177

; *****
; For LLVM instruction:
;  %383 = trunc i64 %350 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = add 1:i32, %31 (hasExternalUses)
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
%36:i32 = var
%37:i64 = sext %36 (hasExternalUses)
%38:i32 = var
%39:i32 = mul 19:i32, %38
%40:i64 = sext %39
%41:i64 = mulnsw %37, %40
%42:i64 = add %35, %41
%43:i32 = var
%44:i64 = sext %43 (hasExternalUses)
%45:i32 = var
%46:i32 = mul 19:i32, %45
%47:i64 = sext %46 (hasExternalUses)
%48:i64 = mulnsw %44, %47
%49:i64 = add %42, %48
%50:i32 = var
%51:i64 = sext %50 (hasExternalUses)
%52:i32 = var
%53:i32 = mul 19:i32, %52
%54:i64 = sext %53 (hasExternalUses)
%55:i64 = mulnsw %51, %54
%56:i64 = add %49, %55
%57:i32 = var
%58:i64 = sext %57 (hasExternalUses)
%59:i32 = var
%60:i32 = mul 19:i32, %59
%61:i64 = sext %60 (hasExternalUses)
%62:i64 = mulnsw %58, %61
%63:i64 = add %56, %62
%64:i64 = mulnsw %1, %8
%65:i32 = shl %11, 1:i32
%66:i64 = sext %65 (hasExternalUses)
%67:i64 = mulnsw %3, %66
%68:i64 = add %64, %67
%69:i64 = mulnsw %18, %14
%70:i64 = add %68, %69
%71:i32 = shl %23, 1:i32
%72:i64 = sext %71 (hasExternalUses)
%73:i64 = mulnsw %20, %72
%74:i64 = add %70, %73
%75:i64 = mulnsw %26, %33
%76:i64 = add %74, %75
%77:i32 = mul 19:i32, %29
%78:i64 = sext %77
%79:i32 = shl %36, 1:i32
%80:i64 = sext %79 (hasExternalUses)
%81:i64 = mulnsw %78, %80
%82:i64 = add %76, %81
%83:i64 = mulnsw %44, %40
%84:i64 = add %82, %83
%85:i32 = shl %50, 1:i32
%86:i64 = sext %85 (hasExternalUses)
%87:i64 = mulnsw %47, %86
%88:i64 = add %84, %87
%89:i64 = mulnsw %58, %54
%90:i64 = add %88, %89
%91:i32 = shl %5, 1:i32
%92:i64 = sext %91 (hasExternalUses)
%93:i64 = mulnsw %61, %92
%94:i64 = add %90, %93
%95:i64 = add 33554432:i64, %94
%96:i64 = ashr %95, 26:i64
%97:i64 = add %63, %96
%98:i64 = add 16777216:i64, %97 (hasExternalUses)
%99:i64 = and 4261412864:i64, %98
%100:i64 = sub %97, %99
%101:i64 = and 18446744073642442752:i64, %95
%102:i64 = sub %94, %101
%103:i64 = mulnsw %18, %3
%104:i64 = mulnsw %12, %8
%105:i64 = add %103, %104
%106:i64 = mulnsw %24, %14
%107:i64 = add %105, %106
%108:i64 = mulnsw %20, %33
%109:i64 = add %107, %108
%110:i32 = mul 19:i32, %25
%111:i64 = sext %110
%112:i64 = mulnsw %37, %111
%113:i64 = add %109, %112
%114:i64 = mulnsw %44, %78
%115:i64 = add %113, %114
%116:i64 = mulnsw %51, %40
%117:i64 = add %115, %116
%118:i64 = mulnsw %58, %47
%119:i64 = add %117, %118
%120:i64 = mulnsw %6, %54
%121:i64 = add %119, %120
%122:i64 = mulnsw %1, %61
%123:i64 = add %121, %122
%124:i64 = mulnsw %18, %8
%125:i64 = mulnsw %3, %72
%126:i64 = add %124, %125
%127:i64 = mulnsw %14, %33
%128:i64 = add %126, %127
%129:i32 = mul 19:i32, %19
%130:i64 = sext %129
%131:i64 = mulnsw %130, %80
%132:i64 = add %128, %131
%133:i64 = mulnsw %44, %111
%134:i64 = add %132, %133
%135:i64 = mulnsw %78, %86
%136:i64 = add %134, %135
%137:i64 = mulnsw %58, %40
%138:i64 = add %136, %137
%139:i64 = mulnsw %47, %92
%140:i64 = add %138, %139
%141:i64 = mulnsw %1, %54
%142:i64 = add %140, %141
%143:i64 = mulnsw %61, %66
%144:i64 = add %142, %143
%145:i64 = mulnsw %24, %8
%146:i64 = mulnsw %3, %33
%147:i64 = add %145, %146
%148:i32 = mul 19:i32, %13
%149:i64 = sext %148
%150:i64 = mulnsw %37, %149
%151:i64 = add %147, %150
%152:i64 = mulnsw %44, %130
%153:i64 = add %151, %152
%154:i64 = mulnsw %51, %111
%155:i64 = add %153, %154
%156:i64 = mulnsw %58, %78
%157:i64 = add %155, %156
%158:i64 = mulnsw %6, %40
%159:i64 = add %157, %158
%160:i64 = mulnsw %1, %47
%161:i64 = add %159, %160
%162:i64 = mulnsw %12, %54
%163:i64 = add %161, %162
%164:i64 = mulnsw %18, %61
%165:i64 = add %163, %164
%166:i64 = mulnsw %8, %33
%167:i32 = mul 19:i32, %2
%168:i64 = sext %167
%169:i64 = mulnsw %168, %80
%170:i64 = add %166, %169
%171:i64 = mulnsw %44, %149
%172:i64 = add %170, %171
%173:i64 = mulnsw %130, %86
%174:i64 = add %172, %173
%175:i64 = mulnsw %58, %111
%176:i64 = add %174, %175
%177:i64 = mulnsw %78, %92
%178:i64 = add %176, %177
%179:i64 = mulnsw %1, %40
%180:i64 = add %178, %179
%181:i64 = mulnsw %47, %66
%182:i64 = add %180, %181
%183:i64 = mulnsw %18, %54
%184:i64 = add %182, %183
%185:i64 = mulnsw %61, %72
%186:i64 = add %184, %185 (hasExternalUses)
%187:i64 = add 33554432:i64, %186 (hasExternalUses)
%188:i64 = ashr %187, 26:i64
%189:i64 = add %165, %188 (hasExternalUses)
%190:i64 = add 16777216:i64, %189 (hasExternalUses)
%191:i64 = ashr %190, 25:i64
%192:i64 = add %144, %191 (hasExternalUses)
%193:i64 = add 33554432:i64, %192 (hasExternalUses)
%194:i64 = ashr %193, 26:i64
%195:i64 = add %123, %194 (hasExternalUses)
%196:i64 = add 16777216:i64, %195 (hasExternalUses)
%197:i64 = ashr %196, 25:i64
%198:i64 = add %102, %197 (hasExternalUses)
%199:i64 = add 33554432:i64, %198 (hasExternalUses)
%200:i64 = lshr %199, 26:i64
%201:i64 = add %100, %200
%202:i32 = trunc %201
infer %202

; *****
; For LLVM instruction:
;  %384 = trunc i64 %328 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %26, %28
%30:i64 = add %24, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = shl %33, 1:i32
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i32 = add 1:i32, %40 (hasExternalUses)
%42:i64 = sext %41 (hasExternalUses)
%43:i64 = mulnsw %39, %42
%44:i64 = add %37, %43
%45:i32 = var
%46:i32 = mul 19:i32, %45
%47:i64 = sext %46 (hasExternalUses)
%48:i32 = var
%49:i32 = shl %48, 1:i32
%50:i64 = sext %49 (hasExternalUses)
%51:i64 = mulnsw %47, %50
%52:i64 = add %44, %51
%53:i32 = var
%54:i64 = sext %53 (hasExternalUses)
%55:i32 = var
%56:i32 = mul 19:i32, %55
%57:i64 = sext %56 (hasExternalUses)
%58:i64 = mulnsw %54, %57
%59:i64 = add %52, %58
%60:i32 = var
%61:i32 = mul 19:i32, %60
%62:i64 = sext %61 (hasExternalUses)
%63:i32 = var
%64:i32 = shl %63, 1:i32
%65:i64 = sext %64 (hasExternalUses)
%66:i64 = mulnsw %62, %65
%67:i64 = add %59, %66
%68:i64 = mulnsw %13, %6
%69:i64 = sext %7 (hasExternalUses)
%70:i64 = mulnsw %69, %3
%71:i64 = add %68, %70
%72:i64 = sext %20 (hasExternalUses)
%73:i64 = mulnsw %72, %15
%74:i64 = add %71, %73
%75:i64 = mulnsw %26, %19
%76:i64 = add %74, %75
%77:i64 = sext %33 (hasExternalUses)
%78:i64 = mulnsw %77, %28
%79:i64 = add %76, %78
%80:i64 = mulnsw %32, %42
%81:i64 = add %79, %80
%82:i64 = sext %48 (hasExternalUses)
%83:i32 = mul 19:i32, %38
%84:i64 = sext %83 (hasExternalUses)
%85:i64 = mulnsw %82, %84
%86:i64 = add %81, %85
%87:i64 = mulnsw %54, %47
%88:i64 = add %86, %87
%89:i64 = sext %63 (hasExternalUses)
%90:i64 = mulnsw %89, %57
%91:i64 = add %88, %90
%92:i64 = mulnsw %1, %62
%93:i64 = add %91, %92
%94:i64 = mulnsw %13, %3
%95:i64 = mulnsw %6, %22
%96:i64 = add %94, %95
%97:i64 = mulnsw %26, %15
%98:i64 = add %96, %97
%99:i64 = mulnsw %19, %35
%100:i64 = add %98, %99
%101:i64 = mulnsw %28, %42
%102:i64 = add %100, %101
%103:i32 = mul 19:i32, %31
%104:i64 = sext %103 (hasExternalUses)
%105:i64 = mulnsw %104, %50
%106:i64 = add %102, %105
%107:i64 = mulnsw %54, %84
%108:i64 = add %106, %107
%109:i64 = mulnsw %47, %65
%110:i64 = add %108, %109
%111:i64 = mulnsw %1, %57
%112:i64 = add %110, %111
%113:i64 = mulnsw %62, %9
%114:i64 = add %112, %113 (hasExternalUses)
%115:i64 = add 33554432:i64, %114 (hasExternalUses)
%116:i64 = ashr %115, 26:i64
%117:i64 = add %93, %116 (hasExternalUses)
%118:i64 = add 16777216:i64, %117 (hasExternalUses)
%119:i64 = ashr %118, 25:i64
%120:i64 = add %67, %119
%121:i64 = add 33554432:i64, %120 (hasExternalUses)
%122:i64 = and 4227858432:i64, %121
%123:i64 = sub %120, %122
%124:i32 = trunc %123
infer %124

; *****
; For LLVM instruction:
;  %385 = trunc i64 %347 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i64 = mulnsw %30, %32
%34:i64 = add %28, %33
%35:i32 = var
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i64 = sext %37 (hasExternalUses)
%39:i64 = mulnsw %36, %38
%40:i64 = add %34, %39
%41:i32 = var
%42:i64 = sext %41 (hasExternalUses)
%43:i32 = var
%44:i32 = add 1:i32, %43 (hasExternalUses)
%45:i64 = sext %44 (hasExternalUses)
%46:i64 = mulnsw %42, %45
%47:i64 = add %40, %46
%48:i32 = var
%49:i64 = sext %48 (hasExternalUses)
%50:i32 = var
%51:i32 = mul 19:i32, %50
%52:i64 = sext %51 (hasExternalUses)
%53:i64 = mulnsw %49, %52
%54:i64 = add %47, %53
%55:i32 = var
%56:i64 = sext %55 (hasExternalUses)
%57:i32 = var
%58:i32 = mul 19:i32, %57
%59:i64 = sext %58 (hasExternalUses)
%60:i64 = mulnsw %56, %59
%61:i64 = add %54, %60
%62:i64 = mulnsw %1, %8
%63:i32 = shl %11, 1:i32
%64:i64 = sext %63 (hasExternalUses)
%65:i64 = mulnsw %3, %64
%66:i64 = add %62, %65
%67:i64 = mulnsw %18, %14
%68:i64 = add %66, %67
%69:i32 = shl %23, 1:i32
%70:i64 = sext %69 (hasExternalUses)
%71:i64 = mulnsw %20, %70
%72:i64 = add %68, %71
%73:i64 = mulnsw %30, %26
%74:i64 = add %72, %73
%75:i32 = shl %35, 1:i32
%76:i64 = sext %75 (hasExternalUses)
%77:i64 = mulnsw %32, %76
%78:i64 = add %74, %77
%79:i64 = mulnsw %38, %45
%80:i64 = add %78, %79
%81:i32 = mul 19:i32, %41
%82:i64 = sext %81 (hasExternalUses)
%83:i32 = shl %48, 1:i32
%84:i64 = sext %83 (hasExternalUses)
%85:i64 = mulnsw %82, %84
%86:i64 = add %80, %85
%87:i64 = mulnsw %56, %52
%88:i64 = add %86, %87
%89:i32 = shl %5, 1:i32
%90:i64 = sext %89 (hasExternalUses)
%91:i64 = mulnsw %59, %90
%92:i64 = add %88, %91
%93:i64 = mulnsw %18, %3
%94:i64 = mulnsw %12, %8
%95:i64 = add %93, %94
%96:i64 = mulnsw %24, %14
%97:i64 = add %95, %96
%98:i64 = mulnsw %30, %20
%99:i64 = add %97, %98
%100:i64 = mulnsw %36, %26
%101:i64 = add %99, %100
%102:i64 = mulnsw %32, %45
%103:i64 = add %101, %102
%104:i32 = mul 19:i32, %37
%105:i64 = sext %104 (hasExternalUses)
%106:i64 = mulnsw %49, %105
%107:i64 = add %103, %106
%108:i64 = mulnsw %56, %82
%109:i64 = add %107, %108
%110:i64 = mulnsw %6, %52
%111:i64 = add %109, %110
%112:i64 = mulnsw %1, %59
%113:i64 = add %111, %112
%114:i64 = mulnsw %18, %8
%115:i64 = mulnsw %3, %70
%116:i64 = add %114, %115
%117:i64 = mulnsw %30, %14
%118:i64 = add %116, %117
%119:i64 = mulnsw %20, %76
%120:i64 = add %118, %119
%121:i64 = mulnsw %26, %45
%122:i64 = add %120, %121
%123:i32 = mul 19:i32, %31
%124:i64 = sext %123 (hasExternalUses)
%125:i64 = mulnsw %124, %84
%126:i64 = add %122, %125
%127:i64 = mulnsw %56, %105
%128:i64 = add %126, %127
%129:i64 = mulnsw %82, %90
%130:i64 = add %128, %129
%131:i64 = mulnsw %1, %52
%132:i64 = add %130, %131
%133:i64 = mulnsw %59, %64
%134:i64 = add %132, %133 (hasExternalUses)
%135:i64 = add 33554432:i64, %134 (hasExternalUses)
%136:i64 = ashr %135, 26:i64
%137:i64 = add %113, %136 (hasExternalUses)
%138:i64 = add 16777216:i64, %137 (hasExternalUses)
%139:i64 = ashr %138, 25:i64
%140:i64 = add %92, %139 (hasExternalUses)
%141:i64 = add 33554432:i64, %140 (hasExternalUses)
%142:i64 = ashr %141, 26:i64
%143:i64 = add %61, %142
%144:i64 = add 16777216:i64, %143 (hasExternalUses)
%145:i64 = and 4261412864:i64, %144
%146:i64 = sub %143, %145
%147:i32 = trunc %146
infer %147

; *****
; For LLVM instruction:
;  %386 = trunc i64 %366 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %26, %28
%30:i64 = add %24, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = shl %33, 1:i32
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i64 = mulnsw %39, %41
%43:i64 = add %37, %42
%44:i32 = var
%45:i64 = sext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = shl %46, 1:i32
%48:i64 = sext %47 (hasExternalUses)
%49:i64 = mulnsw %45, %48
%50:i64 = add %43, %49
%51:i32 = var
%52:i64 = sext %51 (hasExternalUses)
%53:i32 = var
%54:i32 = add 1:i32, %53 (hasExternalUses)
%55:i64 = sext %54 (hasExternalUses)
%56:i64 = mulnsw %52, %55
%57:i64 = add %50, %56
%58:i32 = var
%59:i32 = mul 19:i32, %58
%60:i64 = sext %59 (hasExternalUses)
%61:i32 = var
%62:i32 = shl %61, 1:i32
%63:i64 = sext %62 (hasExternalUses)
%64:i64 = mulnsw %60, %63
%65:i64 = add %57, %64
%66:i64 = mulnsw %13, %6
%67:i64 = sext %7 (hasExternalUses)
%68:i64 = mulnsw %67, %3
%69:i64 = add %66, %68
%70:i64 = sext %20 (hasExternalUses)
%71:i64 = mulnsw %70, %15
%72:i64 = add %69, %71
%73:i64 = mulnsw %26, %19
%74:i64 = add %72, %73
%75:i64 = sext %33 (hasExternalUses)
%76:i64 = mulnsw %75, %28
%77:i64 = add %74, %76
%78:i64 = mulnsw %39, %32
%79:i64 = add %77, %78
%80:i64 = sext %46 (hasExternalUses)
%81:i64 = mulnsw %80, %41
%82:i64 = add %79, %81
%83:i64 = mulnsw %45, %55
%84:i64 = add %82, %83
%85:i64 = sext %61 (hasExternalUses)
%86:i32 = mul 19:i32, %51
%87:i64 = sext %86 (hasExternalUses)
%88:i64 = mulnsw %85, %87
%89:i64 = add %84, %88
%90:i64 = mulnsw %1, %60
%91:i64 = add %89, %90
%92:i64 = mulnsw %13, %3
%93:i64 = mulnsw %6, %22
%94:i64 = add %92, %93
%95:i64 = mulnsw %26, %15
%96:i64 = add %94, %95
%97:i64 = mulnsw %19, %35
%98:i64 = add %96, %97
%99:i64 = mulnsw %39, %28
%100:i64 = add %98, %99
%101:i64 = mulnsw %32, %48
%102:i64 = add %100, %101
%103:i64 = mulnsw %41, %55
%104:i64 = add %102, %103
%105:i32 = mul 19:i32, %44
%106:i64 = sext %105 (hasExternalUses)
%107:i64 = mulnsw %106, %63
%108:i64 = add %104, %107
%109:i64 = mulnsw %1, %87
%110:i64 = add %108, %109
%111:i64 = mulnsw %60, %9
%112:i64 = add %110, %111
%113:i64 = mulnsw %26, %6
%114:i64 = mulnsw %70, %3
%115:i64 = add %113, %114
%116:i64 = mulnsw %75, %15
%117:i64 = add %115, %116
%118:i64 = mulnsw %39, %19
%119:i64 = add %117, %118
%120:i64 = mulnsw %80, %28
%121:i64 = add %119, %120
%122:i64 = mulnsw %32, %55
%123:i64 = add %121, %122
%124:i32 = mul 19:i32, %40
%125:i64 = sext %124 (hasExternalUses)
%126:i64 = mulnsw %85, %125
%127:i64 = add %123, %126
%128:i64 = mulnsw %1, %106
%129:i64 = add %127, %128
%130:i64 = mulnsw %67, %87
%131:i64 = add %129, %130
%132:i64 = mulnsw %13, %60
%133:i64 = add %131, %132
%134:i64 = mulnsw %26, %3
%135:i64 = mulnsw %6, %35
%136:i64 = add %134, %135
%137:i64 = mulnsw %39, %15
%138:i64 = add %136, %137
%139:i64 = mulnsw %19, %48
%140:i64 = add %138, %139
%141:i64 = mulnsw %28, %55
%142:i64 = add %140, %141
%143:i32 = mul 19:i32, %31
%144:i64 = sext %143 (hasExternalUses)
%145:i64 = mulnsw %144, %63
%146:i64 = add %142, %145
%147:i64 = mulnsw %1, %125
%148:i64 = add %146, %147
%149:i64 = mulnsw %106, %9
%150:i64 = add %148, %149
%151:i64 = mulnsw %13, %87
%152:i64 = add %150, %151
%153:i64 = mulnsw %60, %22
%154:i64 = add %152, %153 (hasExternalUses)
%155:i64 = add 33554432:i64, %154 (hasExternalUses)
%156:i64 = ashr %155, 26:i64
%157:i64 = add %133, %156 (hasExternalUses)
%158:i64 = add 16777216:i64, %157 (hasExternalUses)
%159:i64 = ashr %158, 25:i64
%160:i64 = add %112, %159 (hasExternalUses)
%161:i64 = add 33554432:i64, %160 (hasExternalUses)
%162:i64 = ashr %161, 26:i64
%163:i64 = add %91, %162 (hasExternalUses)
%164:i64 = add 16777216:i64, %163 (hasExternalUses)
%165:i64 = ashr %164, 25:i64
%166:i64 = add %65, %165
%167:i64 = add 33554432:i64, %166 (hasExternalUses)
%168:i64 = and 4227858432:i64, %167
%169:i64 = sub %166, %168
%170:i32 = trunc %169
infer %170

; *****
; For LLVM instruction:
;  %387 = trunc i64 %372 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i64 = sext %31
%33:i64 = mulnsw %30, %32
%34:i64 = add %28, %33
%35:i32 = var
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i64 = sext %37
%39:i64 = mulnsw %36, %38
%40:i64 = add %34, %39
%41:i32 = var
%42:i64 = sext %41 (hasExternalUses)
%43:i32 = var
%44:i64 = sext %43
%45:i64 = mulnsw %42, %44
%46:i64 = add %40, %45
%47:i32 = var
%48:i64 = sext %47 (hasExternalUses)
%49:i32 = var
%50:i64 = sext %49
%51:i64 = mulnsw %48, %50
%52:i64 = add %46, %51
%53:i32 = var
%54:i64 = sext %53
%55:i32 = var
%56:i32 = add 1:i32, %55 (hasExternalUses)
%57:i64 = sext %56 (hasExternalUses)
%58:i64 = mulnsw %54, %57
%59:i64 = add %52, %58
%60:i64 = mulnsw %1, %8
%61:i32 = shl %11, 1:i32
%62:i64 = sext %61 (hasExternalUses)
%63:i64 = mulnsw %3, %62
%64:i64 = add %60, %63
%65:i64 = mulnsw %18, %14
%66:i64 = add %64, %65
%67:i32 = shl %23, 1:i32
%68:i64 = sext %67 (hasExternalUses)
%69:i64 = mulnsw %20, %68
%70:i64 = add %66, %69
%71:i64 = mulnsw %30, %26
%72:i64 = add %70, %71
%73:i32 = shl %35, 1:i32
%74:i64 = sext %73 (hasExternalUses)
%75:i64 = mulnsw %32, %74
%76:i64 = add %72, %75
%77:i64 = mulnsw %42, %38
%78:i64 = add %76, %77
%79:i32 = shl %47, 1:i32
%80:i64 = sext %79 (hasExternalUses)
%81:i64 = mulnsw %44, %80
%82:i64 = add %78, %81
%83:i64 = mulnsw %50, %57
%84:i64 = add %82, %83
%85:i32 = mul 19:i32, %53
%86:i64 = sext %85 (hasExternalUses)
%87:i32 = shl %5, 1:i32
%88:i64 = sext %87 (hasExternalUses)
%89:i64 = mulnsw %86, %88
%90:i64 = add %84, %89
%91:i64 = mulnsw %18, %3
%92:i64 = mulnsw %12, %8
%93:i64 = add %91, %92
%94:i64 = mulnsw %24, %14
%95:i64 = add %93, %94
%96:i64 = mulnsw %30, %20
%97:i64 = add %95, %96
%98:i64 = mulnsw %36, %26
%99:i64 = add %97, %98
%100:i64 = mulnsw %42, %32
%101:i64 = add %99, %100
%102:i64 = mulnsw %48, %38
%103:i64 = add %101, %102
%104:i64 = mulnsw %44, %57
%105:i64 = add %103, %104
%106:i32 = mul 19:i32, %49
%107:i64 = sext %106 (hasExternalUses)
%108:i64 = mulnsw %6, %107
%109:i64 = add %105, %108
%110:i64 = mulnsw %1, %86
%111:i64 = add %109, %110
%112:i64 = mulnsw %18, %8
%113:i64 = mulnsw %3, %68
%114:i64 = add %112, %113
%115:i64 = mulnsw %30, %14
%116:i64 = add %114, %115
%117:i64 = mulnsw %20, %74
%118:i64 = add %116, %117
%119:i64 = mulnsw %42, %26
%120:i64 = add %118, %119
%121:i64 = mulnsw %32, %80
%122:i64 = add %120, %121
%123:i64 = mulnsw %38, %57
%124:i64 = add %122, %123
%125:i32 = mul 19:i32, %43
%126:i64 = sext %125 (hasExternalUses)
%127:i64 = mulnsw %126, %88
%128:i64 = add %124, %127
%129:i64 = mulnsw %1, %107
%130:i64 = add %128, %129
%131:i64 = mulnsw %86, %62
%132:i64 = add %130, %131
%133:i64 = mulnsw %30, %3
%134:i64 = mulnsw %24, %8
%135:i64 = add %133, %134
%136:i64 = mulnsw %36, %14
%137:i64 = add %135, %136
%138:i64 = mulnsw %42, %20
%139:i64 = add %137, %138
%140:i64 = mulnsw %48, %26
%141:i64 = add %139, %140
%142:i64 = mulnsw %32, %57
%143:i64 = add %141, %142
%144:i32 = mul 19:i32, %37
%145:i64 = sext %144 (hasExternalUses)
%146:i64 = mulnsw %6, %145
%147:i64 = add %143, %146
%148:i64 = mulnsw %1, %126
%149:i64 = add %147, %148
%150:i64 = mulnsw %12, %107
%151:i64 = add %149, %150
%152:i64 = mulnsw %18, %86
%153:i64 = add %151, %152
%154:i64 = mulnsw %30, %8
%155:i64 = mulnsw %3, %74
%156:i64 = add %154, %155
%157:i64 = mulnsw %42, %14
%158:i64 = add %156, %157
%159:i64 = mulnsw %20, %80
%160:i64 = add %158, %159
%161:i64 = mulnsw %26, %57
%162:i64 = add %160, %161
%163:i32 = mul 19:i32, %31
%164:i64 = sext %163 (hasExternalUses)
%165:i64 = mulnsw %164, %88
%166:i64 = add %162, %165
%167:i64 = mulnsw %1, %145
%168:i64 = add %166, %167
%169:i64 = mulnsw %126, %62
%170:i64 = add %168, %169
%171:i64 = mulnsw %18, %107
%172:i64 = add %170, %171
%173:i64 = mulnsw %86, %68
%174:i64 = add %172, %173 (hasExternalUses)
%175:i64 = add 33554432:i64, %174 (hasExternalUses)
%176:i64 = ashr %175, 26:i64
%177:i64 = add %153, %176 (hasExternalUses)
%178:i64 = add 16777216:i64, %177 (hasExternalUses)
%179:i64 = ashr %178, 25:i64
%180:i64 = add %132, %179 (hasExternalUses)
%181:i64 = add 33554432:i64, %180 (hasExternalUses)
%182:i64 = ashr %181, 26:i64
%183:i64 = add %111, %182 (hasExternalUses)
%184:i64 = add 16777216:i64, %183 (hasExternalUses)
%185:i64 = ashr %184, 25:i64
%186:i64 = add %90, %185 (hasExternalUses)
%187:i64 = add 33554432:i64, %186 (hasExternalUses)
%188:i64 = ashr %187, 26:i64
%189:i64 = add %59, %188
%190:i64 = add 16777216:i64, %189 (hasExternalUses)
%191:i64 = and 4261412864:i64, %190
%192:i64 = sub %189, %191
%193:i32 = trunc %192
infer %193

; *****
; For LLVM instruction:
;  %389 = phi i32 [ 0, %17 ], [ -1, %11 ], [ -1, %2 ], [ -1, %14 ]
; Looking for a replacement for:
%0 = block 4
%1:i32 = phi %0, 0:i32, 4294967295:i32, 4294967295:i32, 4294967295:i32
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sub 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sub 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 19:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -19
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = shl %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 1:i32, %0 (hasExternalUses)
%2:i64 = sext %1
infer %2


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0
infer %1


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = add 1:i32, %2 (hasExternalUses)
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
infer %5


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
ConstantSynthesis: solver returns error on first query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0
%2:i32 = var
%3:i32 = add 1:i32, %2 (hasExternalUses)
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
infer %5


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
infer %4


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
ConstantSynthesis: solver returns error on first query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = shl %0, 1:i32
%2:i64 = sext %1
infer %2


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = shl %2, 1:i32
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
infer %5


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 19:i32, %0
%2:i64 = sext %1
infer %2


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -19
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 7 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 19:i32, %0
%2:i64 = sext %1 (hasExternalUses)
%3:i32 = var
%4:i32 = shl %3, 1:i32
%5:i64 = sext %4 (hasExternalUses)
%6:i64 = mulnsw %2, %5
infer %6


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = mul 19:i32, %2
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
infer %5


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
ConstantSynthesis: solver returns error on first query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 7 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 19:i32, %0
%2:i64 = sext %1
%3:i32 = var
%4:i32 = shl %3, 1:i32
%5:i64 = sext %4 (hasExternalUses)
%6:i64 = mulnsw %2, %5
infer %6


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i32 = shl %0, 1:i32
%2:i64 = sext %1

Cost = 2
verification query failed!
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = add 1:i32, %2 (hasExternalUses)
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
%6:i32 = var
%7:i32 = mul 19:i32, %6
%8:i64 = sext %7
%9:i32 = var
%10:i32 = shl %9, 1:i32
%11:i64 = sext %10 (hasExternalUses)
%12:i64 = mulnsw %8, %11
%13:i64 = add %5, %12
infer %13


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 6 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = add 1:i32, %2 (hasExternalUses)
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
%6:i32 = var
%7:i32 = mul 19:i32, %6
%8:i64 = sext %7
%9:i32 = var
%10:i32 = shl %9, 1:i32
%11:i64 = sext %10 (hasExternalUses)
%12:i64 = mulnsw %8, %11
%13:i64 = add %5, %12
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i32 = var
%17:i32 = mul 19:i32, %16
%18:i64 = sext %17 (hasExternalUses)
%19:i64 = mulnsw %15, %18
%20:i64 = add %13, %19
infer %20


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 6 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = add 1:i32, %2 (hasExternalUses)
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
%6:i32 = var
%7:i32 = mul 19:i32, %6
%8:i64 = sext %7
%9:i32 = var
%10:i32 = shl %9, 1:i32
%11:i64 = sext %10 (hasExternalUses)
%12:i64 = mulnsw %8, %11
%13:i64 = add %5, %12
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i32 = var
%17:i32 = mul 19:i32, %16
%18:i64 = sext %17 (hasExternalUses)
%19:i64 = mulnsw %15, %18
%20:i64 = add %13, %19
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i32 = var
%25:i32 = shl %24, 1:i32
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %23, %26
%28:i64 = add %20, %27
infer %28


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i32 = shl %0, 1:i32
%2:i64 = sext %1

Cost = 2
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = add 1:i32, %2 (hasExternalUses)
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
%6:i32 = var
%7:i32 = mul 19:i32, %6
%8:i64 = sext %7
%9:i32 = var
%10:i32 = shl %9, 1:i32
%11:i64 = sext %10 (hasExternalUses)
%12:i64 = mulnsw %8, %11
%13:i64 = add %5, %12
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i32 = var
%17:i32 = mul 19:i32, %16
%18:i64 = sext %17 (hasExternalUses)
%19:i64 = mulnsw %15, %18
%20:i64 = add %13, %19
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i32 = var
%25:i32 = shl %24, 1:i32
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %23, %26
%28:i64 = add %20, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = mul 19:i32, %31
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
infer %35


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = add 1:i32, %2 (hasExternalUses)
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
%6:i32 = var
%7:i32 = mul 19:i32, %6
%8:i64 = sext %7
%9:i32 = var
%10:i32 = shl %9, 1:i32
%11:i64 = sext %10 (hasExternalUses)
%12:i64 = mulnsw %8, %11
%13:i64 = add %5, %12
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i32 = var
%17:i32 = mul 19:i32, %16
%18:i64 = sext %17 (hasExternalUses)
%19:i64 = mulnsw %15, %18
%20:i64 = add %13, %19
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i32 = var
%25:i32 = shl %24, 1:i32
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %23, %26
%28:i64 = add %20, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = mul 19:i32, %31
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
%36:i32 = var
%37:i32 = mul 19:i32, %36
%38:i64 = sext %37 (hasExternalUses)
%39:i32 = var
%40:i32 = shl %39, 1:i32
%41:i64 = sext %40 (hasExternalUses)
%42:i64 = mulnsw %38, %41
%43:i64 = add %35, %42
infer %43


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i32 = shl %0, 1:i32
%2:i64 = sext %1

Cost = 2
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = add 1:i32, %2 (hasExternalUses)
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
%6:i32 = var
%7:i32 = mul 19:i32, %6
%8:i64 = sext %7
%9:i32 = var
%10:i32 = shl %9, 1:i32
%11:i64 = sext %10 (hasExternalUses)
%12:i64 = mulnsw %8, %11
%13:i64 = add %5, %12
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i32 = var
%17:i32 = mul 19:i32, %16
%18:i64 = sext %17 (hasExternalUses)
%19:i64 = mulnsw %15, %18
%20:i64 = add %13, %19
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i32 = var
%25:i32 = shl %24, 1:i32
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %23, %26
%28:i64 = add %20, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = mul 19:i32, %31
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
%36:i32 = var
%37:i32 = mul 19:i32, %36
%38:i64 = sext %37 (hasExternalUses)
%39:i32 = var
%40:i32 = shl %39, 1:i32
%41:i64 = sext %40 (hasExternalUses)
%42:i64 = mulnsw %38, %41
%43:i64 = add %35, %42
%44:i32 = var
%45:i64 = sext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = mul 19:i32, %46
%48:i64 = sext %47 (hasExternalUses)
%49:i64 = mulnsw %45, %48
%50:i64 = add %43, %49
infer %50


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = add 1:i32, %2 (hasExternalUses)
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
%6:i32 = var
%7:i32 = mul 19:i32, %6
%8:i64 = sext %7
%9:i32 = var
%10:i32 = shl %9, 1:i32
%11:i64 = sext %10 (hasExternalUses)
%12:i64 = mulnsw %8, %11
%13:i64 = add %5, %12
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i32 = var
%17:i32 = mul 19:i32, %16
%18:i64 = sext %17 (hasExternalUses)
%19:i64 = mulnsw %15, %18
%20:i64 = add %13, %19
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i32 = var
%25:i32 = shl %24, 1:i32
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %23, %26
%28:i64 = add %20, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = mul 19:i32, %31
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
%36:i32 = var
%37:i32 = mul 19:i32, %36
%38:i64 = sext %37 (hasExternalUses)
%39:i32 = var
%40:i32 = shl %39, 1:i32
%41:i64 = sext %40 (hasExternalUses)
%42:i64 = mulnsw %38, %41
%43:i64 = add %35, %42
%44:i32 = var
%45:i64 = sext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = mul 19:i32, %46
%48:i64 = sext %47 (hasExternalUses)
%49:i64 = mulnsw %45, %48
%50:i64 = add %43, %49
%51:i32 = var
%52:i32 = mul 19:i32, %51
%53:i64 = sext %52 (hasExternalUses)
%54:i32 = var
%55:i32 = shl %54, 1:i32
%56:i64 = sext %55 (hasExternalUses)
%57:i64 = mulnsw %53, %56
%58:i64 = add %50, %57
infer %58


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i32 = shl %0, 1:i32
%2:i64 = sext %1

Cost = 2
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = add 1:i32, %2 (hasExternalUses)
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
%6:i32 = var
%7:i32 = mul 19:i32, %6
%8:i64 = sext %7
%9:i32 = var
%10:i32 = shl %9, 1:i32
%11:i64 = sext %10 (hasExternalUses)
%12:i64 = mulnsw %8, %11
%13:i64 = add %5, %12
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i32 = var
%17:i32 = mul 19:i32, %16
%18:i64 = sext %17 (hasExternalUses)
%19:i64 = mulnsw %15, %18
%20:i64 = add %13, %19
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i32 = var
%25:i32 = shl %24, 1:i32
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %23, %26
%28:i64 = add %20, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = mul 19:i32, %31
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
%36:i32 = var
%37:i32 = mul 19:i32, %36
%38:i64 = sext %37 (hasExternalUses)
%39:i32 = var
%40:i32 = shl %39, 1:i32
%41:i64 = sext %40 (hasExternalUses)
%42:i64 = mulnsw %38, %41
%43:i64 = add %35, %42
%44:i32 = var
%45:i64 = sext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = mul 19:i32, %46
%48:i64 = sext %47 (hasExternalUses)
%49:i64 = mulnsw %45, %48
%50:i64 = add %43, %49
%51:i32 = var
%52:i32 = mul 19:i32, %51
%53:i64 = sext %52 (hasExternalUses)
%54:i32 = var
%55:i32 = shl %54, 1:i32
%56:i64 = sext %55 (hasExternalUses)
%57:i64 = mulnsw %53, %56
%58:i64 = add %50, %57
%59:i32 = var
%60:i64 = sext %59 (hasExternalUses)
%61:i32 = var
%62:i32 = mul 19:i32, %61
%63:i64 = sext %62 (hasExternalUses)
%64:i64 = mulnsw %60, %63
%65:i64 = add %58, %64
infer %65


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = add 1:i32, %2 (hasExternalUses)
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
%6:i32 = var
%7:i32 = mul 19:i32, %6
%8:i64 = sext %7
%9:i32 = var
%10:i32 = shl %9, 1:i32
%11:i64 = sext %10 (hasExternalUses)
%12:i64 = mulnsw %8, %11
%13:i64 = add %5, %12
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i32 = var
%17:i32 = mul 19:i32, %16
%18:i64 = sext %17 (hasExternalUses)
%19:i64 = mulnsw %15, %18
%20:i64 = add %13, %19
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i32 = var
%25:i32 = shl %24, 1:i32
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %23, %26
%28:i64 = add %20, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = mul 19:i32, %31
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
%36:i32 = var
%37:i32 = mul 19:i32, %36
%38:i64 = sext %37 (hasExternalUses)
%39:i32 = var
%40:i32 = shl %39, 1:i32
%41:i64 = sext %40 (hasExternalUses)
%42:i64 = mulnsw %38, %41
%43:i64 = add %35, %42
%44:i32 = var
%45:i64 = sext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = mul 19:i32, %46
%48:i64 = sext %47 (hasExternalUses)
%49:i64 = mulnsw %45, %48
%50:i64 = add %43, %49
%51:i32 = var
%52:i32 = mul 19:i32, %51
%53:i64 = sext %52 (hasExternalUses)
%54:i32 = var
%55:i32 = shl %54, 1:i32
%56:i64 = sext %55 (hasExternalUses)
%57:i64 = mulnsw %53, %56
%58:i64 = add %50, %57
%59:i32 = var
%60:i64 = sext %59 (hasExternalUses)
%61:i32 = var
%62:i32 = mul 19:i32, %61
%63:i64 = sext %62 (hasExternalUses)
%64:i64 = mulnsw %60, %63
%65:i64 = add %58, %64
%66:i32 = var
%67:i32 = mul 19:i32, %66
%68:i64 = sext %67 (hasExternalUses)
%69:i32 = var
%70:i32 = shl %69, 1:i32
%71:i64 = sext %70 (hasExternalUses)
%72:i64 = mulnsw %68, %71
%73:i64 = add %65, %72
infer %73


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i32 = shl %0, 1:i32
%2:i64 = sext %1

Cost = 2
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = add 1:i32, %7 (hasExternalUses)
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
infer %11


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
infer %11


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
infer %17


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 6 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
infer %24


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i32 = add 1:i32, %27 (hasExternalUses)
%29:i64 = sext %28 (hasExternalUses)
%30:i64 = mulnsw %26, %29
%31:i64 = add %24, %30
infer %31


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i32 = add 1:i32, %27 (hasExternalUses)
%29:i64 = sext %28 (hasExternalUses)
%30:i64 = mulnsw %26, %29
%31:i64 = add %24, %30
%32:i32 = var
%33:i32 = mul 19:i32, %32
%34:i64 = sext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = shl %35, 1:i32
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %31, %38
infer %39


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i32 = mul 19:i32, %0
%2:i64 = sext %1

Cost = 2
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i32 = add 1:i32, %27 (hasExternalUses)
%29:i64 = sext %28 (hasExternalUses)
%30:i64 = mulnsw %26, %29
%31:i64 = add %24, %30
%32:i32 = var
%33:i32 = mul 19:i32, %32
%34:i64 = sext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = shl %35, 1:i32
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %31, %38
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i32 = var
%43:i32 = mul 19:i32, %42
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %41, %44
%46:i64 = add %39, %45
infer %46


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i32 = add 1:i32, %27 (hasExternalUses)
%29:i64 = sext %28 (hasExternalUses)
%30:i64 = mulnsw %26, %29
%31:i64 = add %24, %30
%32:i32 = var
%33:i32 = mul 19:i32, %32
%34:i64 = sext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = shl %35, 1:i32
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %31, %38
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i32 = var
%43:i32 = mul 19:i32, %42
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %41, %44
%46:i64 = add %39, %45
%47:i32 = var
%48:i32 = mul 19:i32, %47
%49:i64 = sext %48 (hasExternalUses)
%50:i32 = var
%51:i32 = shl %50, 1:i32
%52:i64 = sext %51 (hasExternalUses)
%53:i64 = mulnsw %49, %52
%54:i64 = add %46, %53
infer %54


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i32 = mul 19:i32, %0
%2:i64 = sext %1

Cost = 2
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i32 = add 1:i32, %27 (hasExternalUses)
%29:i64 = sext %28 (hasExternalUses)
%30:i64 = mulnsw %26, %29
%31:i64 = add %24, %30
%32:i32 = var
%33:i32 = mul 19:i32, %32
%34:i64 = sext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = shl %35, 1:i32
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %31, %38
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i32 = var
%43:i32 = mul 19:i32, %42
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %41, %44
%46:i64 = add %39, %45
%47:i32 = var
%48:i32 = mul 19:i32, %47
%49:i64 = sext %48 (hasExternalUses)
%50:i32 = var
%51:i32 = shl %50, 1:i32
%52:i64 = sext %51 (hasExternalUses)
%53:i64 = mulnsw %49, %52
%54:i64 = add %46, %53
%55:i32 = var
%56:i64 = sext %55 (hasExternalUses)
%57:i32 = var
%58:i32 = mul 19:i32, %57
%59:i64 = sext %58 (hasExternalUses)
%60:i64 = mulnsw %56, %59
%61:i64 = add %54, %60
infer %61


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i32 = add 1:i32, %27 (hasExternalUses)
%29:i64 = sext %28 (hasExternalUses)
%30:i64 = mulnsw %26, %29
%31:i64 = add %24, %30
%32:i32 = var
%33:i32 = mul 19:i32, %32
%34:i64 = sext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = shl %35, 1:i32
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %31, %38
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i32 = var
%43:i32 = mul 19:i32, %42
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %41, %44
%46:i64 = add %39, %45
%47:i32 = var
%48:i32 = mul 19:i32, %47
%49:i64 = sext %48 (hasExternalUses)
%50:i32 = var
%51:i32 = shl %50, 1:i32
%52:i64 = sext %51 (hasExternalUses)
%53:i64 = mulnsw %49, %52
%54:i64 = add %46, %53
%55:i32 = var
%56:i64 = sext %55 (hasExternalUses)
%57:i32 = var
%58:i32 = mul 19:i32, %57
%59:i64 = sext %58 (hasExternalUses)
%60:i64 = mulnsw %56, %59
%61:i64 = add %54, %60
%62:i32 = var
%63:i32 = mul 19:i32, %62
%64:i64 = sext %63 (hasExternalUses)
%65:i32 = var
%66:i32 = shl %65, 1:i32
%67:i64 = sext %66 (hasExternalUses)
%68:i64 = mulnsw %64, %67
%69:i64 = add %61, %68
infer %69


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i32 = mul 19:i32, %0
%2:i64 = sext %1

Cost = 2
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = add 1:i32, %2 (hasExternalUses)
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
%6:i32 = var
%7:i32 = mul 19:i32, %6
%8:i64 = sext %7
%9:i32 = var
%10:i32 = shl %9, 1:i32
%11:i64 = sext %10 (hasExternalUses)
%12:i64 = mulnsw %8, %11
%13:i64 = add %5, %12
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i32 = var
%17:i32 = mul 19:i32, %16
%18:i64 = sext %17 (hasExternalUses)
%19:i64 = mulnsw %15, %18
%20:i64 = add %13, %19
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i32 = var
%25:i32 = shl %24, 1:i32
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %23, %26
%28:i64 = add %20, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = mul 19:i32, %31
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
%36:i32 = var
%37:i32 = mul 19:i32, %36
%38:i64 = sext %37 (hasExternalUses)
%39:i32 = var
%40:i32 = shl %39, 1:i32
%41:i64 = sext %40 (hasExternalUses)
%42:i64 = mulnsw %38, %41
%43:i64 = add %35, %42
%44:i32 = var
%45:i64 = sext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = mul 19:i32, %46
%48:i64 = sext %47 (hasExternalUses)
%49:i64 = mulnsw %45, %48
%50:i64 = add %43, %49
%51:i32 = var
%52:i32 = mul 19:i32, %51
%53:i64 = sext %52 (hasExternalUses)
%54:i32 = var
%55:i32 = shl %54, 1:i32
%56:i64 = sext %55 (hasExternalUses)
%57:i64 = mulnsw %53, %56
%58:i64 = add %50, %57
%59:i32 = var
%60:i64 = sext %59 (hasExternalUses)
%61:i32 = var
%62:i32 = mul 19:i32, %61
%63:i64 = sext %62 (hasExternalUses)
%64:i64 = mulnsw %60, %63
%65:i64 = add %58, %64
%66:i32 = var
%67:i32 = mul 19:i32, %66
%68:i64 = sext %67 (hasExternalUses)
%69:i32 = var
%70:i32 = shl %69, 1:i32
%71:i64 = sext %70 (hasExternalUses)
%72:i64 = mulnsw %68, %71
%73:i64 = add %65, %72 (hasExternalUses)
%74:i64 = add 33554432:i64, %73
infer %74 (demandedBits=1111111111111111111111111111111111111100000000000000000000000000)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = add 1:i32, %2 (hasExternalUses)
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
%6:i32 = var
%7:i32 = mul 19:i32, %6
%8:i64 = sext %7
%9:i32 = var
%10:i32 = shl %9, 1:i32
%11:i64 = sext %10 (hasExternalUses)
%12:i64 = mulnsw %8, %11
%13:i64 = add %5, %12
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i32 = var
%17:i32 = mul 19:i32, %16
%18:i64 = sext %17 (hasExternalUses)
%19:i64 = mulnsw %15, %18
%20:i64 = add %13, %19
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i32 = var
%25:i32 = shl %24, 1:i32
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %23, %26
%28:i64 = add %20, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = mul 19:i32, %31
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
%36:i32 = var
%37:i32 = mul 19:i32, %36
%38:i64 = sext %37 (hasExternalUses)
%39:i32 = var
%40:i32 = shl %39, 1:i32
%41:i64 = sext %40 (hasExternalUses)
%42:i64 = mulnsw %38, %41
%43:i64 = add %35, %42
%44:i32 = var
%45:i64 = sext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = mul 19:i32, %46
%48:i64 = sext %47 (hasExternalUses)
%49:i64 = mulnsw %45, %48
%50:i64 = add %43, %49
%51:i32 = var
%52:i32 = mul 19:i32, %51
%53:i64 = sext %52 (hasExternalUses)
%54:i32 = var
%55:i32 = shl %54, 1:i32
%56:i64 = sext %55 (hasExternalUses)
%57:i64 = mulnsw %53, %56
%58:i64 = add %50, %57
%59:i32 = var
%60:i64 = sext %59 (hasExternalUses)
%61:i32 = var
%62:i32 = mul 19:i32, %61
%63:i64 = sext %62 (hasExternalUses)
%64:i64 = mulnsw %60, %63
%65:i64 = add %58, %64
%66:i32 = var
%67:i32 = mul 19:i32, %66
%68:i64 = sext %67 (hasExternalUses)
%69:i32 = var
%70:i32 = shl %69, 1:i32
%71:i64 = sext %70 (hasExternalUses)
%72:i64 = mulnsw %68, %71
%73:i64 = add %65, %72 (hasExternalUses)
%74:i64 = add 33554432:i64, %73 (hasExternalUses)
%75:i64 = ashr %74, 26:i64
infer %75


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = add 1:i32, %7 (hasExternalUses)
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = mul 19:i32, %14
%16:i64 = sext %15 (hasExternalUses)
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
infer %18


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 6 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = add 1:i32, %7 (hasExternalUses)
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = mul 19:i32, %14
%16:i64 = sext %15 (hasExternalUses)
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i64 = mulnsw %20, %23
%25:i64 = add %18, %24
infer %25


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = add 1:i32, %7 (hasExternalUses)
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = mul 19:i32, %14
%16:i64 = sext %15 (hasExternalUses)
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i64 = mulnsw %20, %23
%25:i64 = add %18, %24
%26:i32 = var
%27:i64 = sext %26 (hasExternalUses)
%28:i32 = var
%29:i32 = mul 19:i32, %28
%30:i64 = sext %29 (hasExternalUses)
%31:i64 = mulnsw %27, %30
%32:i64 = add %25, %31
infer %32


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = add 1:i32, %7 (hasExternalUses)
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = mul 19:i32, %14
%16:i64 = sext %15 (hasExternalUses)
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i64 = mulnsw %20, %23
%25:i64 = add %18, %24
%26:i32 = var
%27:i64 = sext %26 (hasExternalUses)
%28:i32 = var
%29:i32 = mul 19:i32, %28
%30:i64 = sext %29 (hasExternalUses)
%31:i64 = mulnsw %27, %30
%32:i64 = add %25, %31
%33:i32 = var
%34:i64 = sext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = mul 19:i32, %35
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %32, %38
infer %39


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = add 1:i32, %7 (hasExternalUses)
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = mul 19:i32, %14
%16:i64 = sext %15 (hasExternalUses)
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i64 = mulnsw %20, %23
%25:i64 = add %18, %24
%26:i32 = var
%27:i64 = sext %26 (hasExternalUses)
%28:i32 = var
%29:i32 = mul 19:i32, %28
%30:i64 = sext %29 (hasExternalUses)
%31:i64 = mulnsw %27, %30
%32:i64 = add %25, %31
%33:i32 = var
%34:i64 = sext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = mul 19:i32, %35
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %32, %38
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i32 = var
%43:i32 = mul 19:i32, %42
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %41, %44
%46:i64 = add %39, %45
infer %46


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = add 1:i32, %7 (hasExternalUses)
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = mul 19:i32, %14
%16:i64 = sext %15 (hasExternalUses)
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i64 = mulnsw %20, %23
%25:i64 = add %18, %24
%26:i32 = var
%27:i64 = sext %26 (hasExternalUses)
%28:i32 = var
%29:i32 = mul 19:i32, %28
%30:i64 = sext %29 (hasExternalUses)
%31:i64 = mulnsw %27, %30
%32:i64 = add %25, %31
%33:i32 = var
%34:i64 = sext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = mul 19:i32, %35
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %32, %38
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i32 = var
%43:i32 = mul 19:i32, %42
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %41, %44
%46:i64 = add %39, %45
%47:i32 = var
%48:i64 = sext %47 (hasExternalUses)
%49:i32 = var
%50:i32 = mul 19:i32, %49
%51:i64 = sext %50 (hasExternalUses)
%52:i64 = mulnsw %48, %51
%53:i64 = add %46, %52
infer %53


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = add 1:i32, %7 (hasExternalUses)
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = mul 19:i32, %14
%16:i64 = sext %15 (hasExternalUses)
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i64 = mulnsw %20, %23
%25:i64 = add %18, %24
%26:i32 = var
%27:i64 = sext %26 (hasExternalUses)
%28:i32 = var
%29:i32 = mul 19:i32, %28
%30:i64 = sext %29 (hasExternalUses)
%31:i64 = mulnsw %27, %30
%32:i64 = add %25, %31
%33:i32 = var
%34:i64 = sext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = mul 19:i32, %35
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %32, %38
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i32 = var
%43:i32 = mul 19:i32, %42
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %41, %44
%46:i64 = add %39, %45
%47:i32 = var
%48:i64 = sext %47 (hasExternalUses)
%49:i32 = var
%50:i32 = mul 19:i32, %49
%51:i64 = sext %50 (hasExternalUses)
%52:i64 = mulnsw %48, %51
%53:i64 = add %46, %52
%54:i32 = var
%55:i64 = sext %54 (hasExternalUses)
%56:i32 = var
%57:i32 = mul 19:i32, %56
%58:i64 = sext %57 (hasExternalUses)
%59:i64 = mulnsw %55, %58
%60:i64 = add %53, %59
infer %60


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = add 1:i32, %7 (hasExternalUses)
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = mul 19:i32, %14
%16:i64 = sext %15 (hasExternalUses)
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i64 = mulnsw %20, %23
%25:i64 = add %18, %24
%26:i32 = var
%27:i64 = sext %26 (hasExternalUses)
%28:i32 = var
%29:i32 = mul 19:i32, %28
%30:i64 = sext %29 (hasExternalUses)
%31:i64 = mulnsw %27, %30
%32:i64 = add %25, %31
%33:i32 = var
%34:i64 = sext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = mul 19:i32, %35
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %32, %38
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i32 = var
%43:i32 = mul 19:i32, %42
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %41, %44
%46:i64 = add %39, %45
%47:i32 = var
%48:i64 = sext %47 (hasExternalUses)
%49:i32 = var
%50:i32 = mul 19:i32, %49
%51:i64 = sext %50 (hasExternalUses)
%52:i64 = mulnsw %48, %51
%53:i64 = add %46, %52
%54:i32 = var
%55:i64 = sext %54 (hasExternalUses)
%56:i32 = var
%57:i32 = mul 19:i32, %56
%58:i64 = sext %57 (hasExternalUses)
%59:i64 = mulnsw %55, %58
%60:i64 = add %53, %59
%61:i32 = var
%62:i64 = sext %61 (hasExternalUses)
%63:i32 = var
%64:i32 = mul 19:i32, %63
%65:i64 = sext %64 (hasExternalUses)
%66:i64 = mulnsw %62, %65
%67:i64 = add %60, %66
infer %67


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = add 1:i32, %7 (hasExternalUses)
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = mul 19:i32, %14
%16:i64 = sext %15
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i64 = mulnsw %20, %23
%25:i64 = add %18, %24
%26:i32 = var
%27:i64 = sext %26 (hasExternalUses)
%28:i32 = var
%29:i32 = mul 19:i32, %28
%30:i64 = sext %29 (hasExternalUses)
%31:i64 = mulnsw %27, %30
%32:i64 = add %25, %31
%33:i32 = var
%34:i64 = sext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = mul 19:i32, %35
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %32, %38
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i32 = var
%43:i32 = mul 19:i32, %42
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %41, %44
%46:i64 = add %39, %45
%47:i32 = var
%48:i64 = sext %47 (hasExternalUses)
%49:i32 = var
%50:i32 = mul 19:i32, %49
%51:i64 = sext %50 (hasExternalUses)
%52:i64 = mulnsw %48, %51
%53:i64 = add %46, %52
%54:i32 = var
%55:i64 = sext %54 (hasExternalUses)
%56:i32 = var
%57:i32 = mul 19:i32, %56
%58:i64 = sext %57 (hasExternalUses)
%59:i64 = mulnsw %55, %58
%60:i64 = add %53, %59
%61:i32 = var
%62:i64 = sext %61 (hasExternalUses)
%63:i32 = var
%64:i32 = mul 19:i32, %63
%65:i64 = sext %64 (hasExternalUses)
%66:i64 = mulnsw %62, %65
%67:i64 = add %60, %66
%68:i64 = mulnsw %3, %9
%69:i32 = mul 19:i32, %5
%70:i64 = sext %69
%71:i32 = shl %12, 1:i32
%72:i64 = sext %71 (hasExternalUses)
%73:i64 = mulnsw %70, %72
%74:i64 = add %68, %73
%75:i64 = mulnsw %20, %16
%76:i64 = add %74, %75
%77:i32 = shl %26, 1:i32
%78:i64 = sext %77 (hasExternalUses)
%79:i64 = mulnsw %23, %78
%80:i64 = add %76, %79
%81:i64 = mulnsw %34, %30
%82:i64 = add %80, %81
%83:i32 = shl %40, 1:i32
%84:i64 = sext %83 (hasExternalUses)
%85:i64 = mulnsw %37, %84
%86:i64 = add %82, %85
%87:i64 = mulnsw %48, %44
%88:i64 = add %86, %87
%89:i32 = shl %54, 1:i32
%90:i64 = sext %89 (hasExternalUses)
%91:i64 = mulnsw %51, %90
%92:i64 = add %88, %91
%93:i64 = mulnsw %62, %58
%94:i64 = add %92, %93
%95:i32 = shl %0, 1:i32
%96:i64 = sext %95 (hasExternalUses)
%97:i64 = mulnsw %65, %96
%98:i64 = add %94, %97 (hasExternalUses)
%99:i64 = add 33554432:i64, %98 (hasExternalUses)
%100:i64 = ashr %99, 26:i64
%101:i64 = add %67, %100
infer %101


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i32 = mul 19:i32, %0
%2:i64 = sext %1

Cost = 2
verification query failed!
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = add 1:i32, %2 (hasExternalUses)
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
%6:i32 = var
%7:i32 = mul 19:i32, %6
%8:i64 = sext %7
%9:i32 = var
%10:i32 = shl %9, 1:i32
%11:i64 = sext %10 (hasExternalUses)
%12:i64 = mulnsw %8, %11
%13:i64 = add %5, %12
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i32 = var
%17:i32 = mul 19:i32, %16
%18:i64 = sext %17 (hasExternalUses)
%19:i64 = mulnsw %15, %18
%20:i64 = add %13, %19
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i32 = var
%25:i32 = shl %24, 1:i32
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %23, %26
%28:i64 = add %20, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = mul 19:i32, %31
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
%36:i32 = var
%37:i32 = mul 19:i32, %36
%38:i64 = sext %37 (hasExternalUses)
%39:i32 = var
%40:i32 = shl %39, 1:i32
%41:i64 = sext %40 (hasExternalUses)
%42:i64 = mulnsw %38, %41
%43:i64 = add %35, %42
%44:i32 = var
%45:i64 = sext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = mul 19:i32, %46
%48:i64 = sext %47 (hasExternalUses)
%49:i64 = mulnsw %45, %48
%50:i64 = add %43, %49
%51:i32 = var
%52:i32 = mul 19:i32, %51
%53:i64 = sext %52 (hasExternalUses)
%54:i32 = var
%55:i32 = shl %54, 1:i32
%56:i64 = sext %55 (hasExternalUses)
%57:i64 = mulnsw %53, %56
%58:i64 = add %50, %57
%59:i32 = var
%60:i64 = sext %59 (hasExternalUses)
%61:i32 = var
%62:i32 = mul 19:i32, %61
%63:i64 = sext %62 (hasExternalUses)
%64:i64 = mulnsw %60, %63
%65:i64 = add %58, %64
%66:i32 = var
%67:i32 = mul 19:i32, %66
%68:i64 = sext %67 (hasExternalUses)
%69:i32 = var
%70:i32 = shl %69, 1:i32
%71:i64 = sext %70 (hasExternalUses)
%72:i64 = mulnsw %68, %71
%73:i64 = add %65, %72 (hasExternalUses)
%74:i64 = add 33554432:i64, %73 (hasExternalUses)
%75:i64 = and 18446744073642442752:i64, %74
infer %75 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
ConstantSynthesis: solver returns error on first query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = add 1:i32, %2 (hasExternalUses)
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
%6:i32 = var
%7:i32 = mul 19:i32, %6
%8:i64 = sext %7
%9:i32 = var
%10:i32 = shl %9, 1:i32
%11:i64 = sext %10 (hasExternalUses)
%12:i64 = mulnsw %8, %11
%13:i64 = add %5, %12
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i32 = var
%17:i32 = mul 19:i32, %16
%18:i64 = sext %17 (hasExternalUses)
%19:i64 = mulnsw %15, %18
%20:i64 = add %13, %19
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i32 = var
%25:i32 = shl %24, 1:i32
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %23, %26
%28:i64 = add %20, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = mul 19:i32, %31
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
%36:i32 = var
%37:i32 = mul 19:i32, %36
%38:i64 = sext %37 (hasExternalUses)
%39:i32 = var
%40:i32 = shl %39, 1:i32
%41:i64 = sext %40 (hasExternalUses)
%42:i64 = mulnsw %38, %41
%43:i64 = add %35, %42
%44:i32 = var
%45:i64 = sext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = mul 19:i32, %46
%48:i64 = sext %47 (hasExternalUses)
%49:i64 = mulnsw %45, %48
%50:i64 = add %43, %49
%51:i32 = var
%52:i32 = mul 19:i32, %51
%53:i64 = sext %52 (hasExternalUses)
%54:i32 = var
%55:i32 = shl %54, 1:i32
%56:i64 = sext %55 (hasExternalUses)
%57:i64 = mulnsw %53, %56
%58:i64 = add %50, %57
%59:i32 = var
%60:i64 = sext %59 (hasExternalUses)
%61:i32 = var
%62:i32 = mul 19:i32, %61
%63:i64 = sext %62 (hasExternalUses)
%64:i64 = mulnsw %60, %63
%65:i64 = add %58, %64
%66:i32 = var
%67:i32 = mul 19:i32, %66
%68:i64 = sext %67 (hasExternalUses)
%69:i32 = var
%70:i32 = shl %69, 1:i32
%71:i64 = sext %70 (hasExternalUses)
%72:i64 = mulnsw %68, %71
%73:i64 = add %65, %72
%74:i64 = add 33554432:i64, %73 (hasExternalUses)
%75:i64 = and 18446744073642442752:i64, %74
%76:i64 = sub %73, %75
infer %76 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i32 = shl %0, 1:i32
%2:i64 = sext %1

Cost = 2
verification query failed!
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i32 = add 1:i32, %27 (hasExternalUses)
%29:i64 = sext %28 (hasExternalUses)
%30:i64 = mulnsw %26, %29
%31:i64 = add %24, %30
%32:i32 = var
%33:i32 = mul 19:i32, %32
%34:i64 = sext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = shl %35, 1:i32
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %31, %38
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i32 = var
%43:i32 = mul 19:i32, %42
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %41, %44
%46:i64 = add %39, %45
%47:i32 = var
%48:i32 = mul 19:i32, %47
%49:i64 = sext %48 (hasExternalUses)
%50:i32 = var
%51:i32 = shl %50, 1:i32
%52:i64 = sext %51 (hasExternalUses)
%53:i64 = mulnsw %49, %52
%54:i64 = add %46, %53
%55:i32 = var
%56:i64 = sext %55 (hasExternalUses)
%57:i32 = var
%58:i32 = mul 19:i32, %57
%59:i64 = sext %58 (hasExternalUses)
%60:i64 = mulnsw %56, %59
%61:i64 = add %54, %60
%62:i32 = var
%63:i32 = mul 19:i32, %62
%64:i64 = sext %63 (hasExternalUses)
%65:i32 = var
%66:i32 = shl %65, 1:i32
%67:i64 = sext %66 (hasExternalUses)
%68:i64 = mulnsw %64, %67
%69:i64 = add %61, %68 (hasExternalUses)
%70:i64 = add 33554432:i64, %69
infer %70 (demandedBits=1111111111111111111111111111111111111100000000000000000000000000)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i32 = add 1:i32, %27 (hasExternalUses)
%29:i64 = sext %28 (hasExternalUses)
%30:i64 = mulnsw %26, %29
%31:i64 = add %24, %30
%32:i32 = var
%33:i32 = mul 19:i32, %32
%34:i64 = sext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = shl %35, 1:i32
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %31, %38
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i32 = var
%43:i32 = mul 19:i32, %42
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %41, %44
%46:i64 = add %39, %45
%47:i32 = var
%48:i32 = mul 19:i32, %47
%49:i64 = sext %48 (hasExternalUses)
%50:i32 = var
%51:i32 = shl %50, 1:i32
%52:i64 = sext %51 (hasExternalUses)
%53:i64 = mulnsw %49, %52
%54:i64 = add %46, %53
%55:i32 = var
%56:i64 = sext %55 (hasExternalUses)
%57:i32 = var
%58:i32 = mul 19:i32, %57
%59:i64 = sext %58 (hasExternalUses)
%60:i64 = mulnsw %56, %59
%61:i64 = add %54, %60
%62:i32 = var
%63:i32 = mul 19:i32, %62
%64:i64 = sext %63 (hasExternalUses)
%65:i32 = var
%66:i32 = shl %65, 1:i32
%67:i64 = sext %66 (hasExternalUses)
%68:i64 = mulnsw %64, %67
%69:i64 = add %61, %68 (hasExternalUses)
%70:i64 = add 33554432:i64, %69 (hasExternalUses)
%71:i64 = ashr %70, 26:i64
infer %71


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
infer %10


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
infer %16


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 6 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
infer %22


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
infer %28


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = add 1:i32, %31 (hasExternalUses)
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
infer %35


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = add 1:i32, %31 (hasExternalUses)
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
%36:i32 = var
%37:i64 = sext %36 (hasExternalUses)
%38:i32 = var
%39:i32 = mul 19:i32, %38
%40:i64 = sext %39 (hasExternalUses)
%41:i64 = mulnsw %37, %40
%42:i64 = add %35, %41
infer %42


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = add 1:i32, %31 (hasExternalUses)
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
%36:i32 = var
%37:i64 = sext %36 (hasExternalUses)
%38:i32 = var
%39:i32 = mul 19:i32, %38
%40:i64 = sext %39 (hasExternalUses)
%41:i64 = mulnsw %37, %40
%42:i64 = add %35, %41
%43:i32 = var
%44:i64 = sext %43 (hasExternalUses)
%45:i32 = var
%46:i32 = mul 19:i32, %45
%47:i64 = sext %46 (hasExternalUses)
%48:i64 = mulnsw %44, %47
%49:i64 = add %42, %48
infer %49


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = add 1:i32, %31 (hasExternalUses)
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
%36:i32 = var
%37:i64 = sext %36 (hasExternalUses)
%38:i32 = var
%39:i32 = mul 19:i32, %38
%40:i64 = sext %39 (hasExternalUses)
%41:i64 = mulnsw %37, %40
%42:i64 = add %35, %41
%43:i32 = var
%44:i64 = sext %43 (hasExternalUses)
%45:i32 = var
%46:i32 = mul 19:i32, %45
%47:i64 = sext %46 (hasExternalUses)
%48:i64 = mulnsw %44, %47
%49:i64 = add %42, %48
%50:i32 = var
%51:i64 = sext %50 (hasExternalUses)
%52:i32 = var
%53:i32 = mul 19:i32, %52
%54:i64 = sext %53 (hasExternalUses)
%55:i64 = mulnsw %51, %54
%56:i64 = add %49, %55
infer %56


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = add 1:i32, %31 (hasExternalUses)
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
%36:i32 = var
%37:i64 = sext %36 (hasExternalUses)
%38:i32 = var
%39:i32 = mul 19:i32, %38
%40:i64 = sext %39 (hasExternalUses)
%41:i64 = mulnsw %37, %40
%42:i64 = add %35, %41
%43:i32 = var
%44:i64 = sext %43 (hasExternalUses)
%45:i32 = var
%46:i32 = mul 19:i32, %45
%47:i64 = sext %46 (hasExternalUses)
%48:i64 = mulnsw %44, %47
%49:i64 = add %42, %48
%50:i32 = var
%51:i64 = sext %50 (hasExternalUses)
%52:i32 = var
%53:i32 = mul 19:i32, %52
%54:i64 = sext %53 (hasExternalUses)
%55:i64 = mulnsw %51, %54
%56:i64 = add %49, %55
%57:i32 = var
%58:i64 = sext %57 (hasExternalUses)
%59:i32 = var
%60:i32 = mul 19:i32, %59
%61:i64 = sext %60 (hasExternalUses)
%62:i64 = mulnsw %58, %61
%63:i64 = add %56, %62
infer %63


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = add 1:i32, %31 (hasExternalUses)
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
%36:i32 = var
%37:i64 = sext %36 (hasExternalUses)
%38:i32 = var
%39:i32 = mul 19:i32, %38
%40:i64 = sext %39 (hasExternalUses)
%41:i64 = mulnsw %37, %40
%42:i64 = add %35, %41
%43:i32 = var
%44:i64 = sext %43 (hasExternalUses)
%45:i32 = var
%46:i32 = mul 19:i32, %45
%47:i64 = sext %46 (hasExternalUses)
%48:i64 = mulnsw %44, %47
%49:i64 = add %42, %48
%50:i32 = var
%51:i64 = sext %50 (hasExternalUses)
%52:i32 = var
%53:i32 = mul 19:i32, %52
%54:i64 = sext %53 (hasExternalUses)
%55:i64 = mulnsw %51, %54
%56:i64 = add %49, %55
%57:i32 = var
%58:i64 = sext %57 (hasExternalUses)
%59:i32 = var
%60:i32 = mul 19:i32, %59
%61:i64 = sext %60 (hasExternalUses)
%62:i64 = mulnsw %58, %61
%63:i64 = add %56, %62
%64:i64 = mulnsw %1, %8
%65:i32 = shl %11, 1:i32
%66:i64 = sext %65 (hasExternalUses)
%67:i64 = mulnsw %3, %66
%68:i64 = add %64, %67
%69:i64 = mulnsw %18, %14
%70:i64 = add %68, %69
%71:i32 = shl %23, 1:i32
%72:i64 = sext %71 (hasExternalUses)
%73:i64 = mulnsw %20, %72
%74:i64 = add %70, %73
%75:i64 = mulnsw %26, %33
%76:i64 = add %74, %75
%77:i32 = mul 19:i32, %29
%78:i64 = sext %77 (hasExternalUses)
%79:i32 = shl %36, 1:i32
%80:i64 = sext %79 (hasExternalUses)
%81:i64 = mulnsw %78, %80
%82:i64 = add %76, %81
%83:i64 = mulnsw %44, %40
%84:i64 = add %82, %83
%85:i32 = shl %50, 1:i32
%86:i64 = sext %85 (hasExternalUses)
%87:i64 = mulnsw %47, %86
%88:i64 = add %84, %87
%89:i64 = mulnsw %58, %54
%90:i64 = add %88, %89
%91:i32 = shl %5, 1:i32
%92:i64 = sext %91 (hasExternalUses)
%93:i64 = mulnsw %61, %92
%94:i64 = add %90, %93 (hasExternalUses)
%95:i64 = add 33554432:i64, %94 (hasExternalUses)
%96:i64 = ashr %95, 26:i64
%97:i64 = add %63, %96
infer %97


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i32 = add 1:i32, %27 (hasExternalUses)
%29:i64 = sext %28 (hasExternalUses)
%30:i64 = mulnsw %26, %29
%31:i64 = add %24, %30
%32:i32 = var
%33:i32 = mul 19:i32, %32
%34:i64 = sext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = shl %35, 1:i32
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %31, %38
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i32 = var
%43:i32 = mul 19:i32, %42
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %41, %44
%46:i64 = add %39, %45
%47:i32 = var
%48:i32 = mul 19:i32, %47
%49:i64 = sext %48 (hasExternalUses)
%50:i32 = var
%51:i32 = shl %50, 1:i32
%52:i64 = sext %51 (hasExternalUses)
%53:i64 = mulnsw %49, %52
%54:i64 = add %46, %53
%55:i32 = var
%56:i64 = sext %55 (hasExternalUses)
%57:i32 = var
%58:i32 = mul 19:i32, %57
%59:i64 = sext %58 (hasExternalUses)
%60:i64 = mulnsw %56, %59
%61:i64 = add %54, %60
%62:i32 = var
%63:i32 = mul 19:i32, %62
%64:i64 = sext %63 (hasExternalUses)
%65:i32 = var
%66:i32 = shl %65, 1:i32
%67:i64 = sext %66 (hasExternalUses)
%68:i64 = mulnsw %64, %67
%69:i64 = add %61, %68 (hasExternalUses)
%70:i64 = add 33554432:i64, %69 (hasExternalUses)
%71:i64 = and 18446744073642442752:i64, %70
infer %71 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
ConstantSynthesis: solver returns error on first query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i32 = add 1:i32, %27 (hasExternalUses)
%29:i64 = sext %28 (hasExternalUses)
%30:i64 = mulnsw %26, %29
%31:i64 = add %24, %30
%32:i32 = var
%33:i32 = mul 19:i32, %32
%34:i64 = sext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = shl %35, 1:i32
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %31, %38
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i32 = var
%43:i32 = mul 19:i32, %42
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %41, %44
%46:i64 = add %39, %45
%47:i32 = var
%48:i32 = mul 19:i32, %47
%49:i64 = sext %48 (hasExternalUses)
%50:i32 = var
%51:i32 = shl %50, 1:i32
%52:i64 = sext %51 (hasExternalUses)
%53:i64 = mulnsw %49, %52
%54:i64 = add %46, %53
%55:i32 = var
%56:i64 = sext %55 (hasExternalUses)
%57:i32 = var
%58:i32 = mul 19:i32, %57
%59:i64 = sext %58 (hasExternalUses)
%60:i64 = mulnsw %56, %59
%61:i64 = add %54, %60
%62:i32 = var
%63:i32 = mul 19:i32, %62
%64:i64 = sext %63 (hasExternalUses)
%65:i32 = var
%66:i32 = shl %65, 1:i32
%67:i64 = sext %66 (hasExternalUses)
%68:i64 = mulnsw %64, %67
%69:i64 = add %61, %68
%70:i64 = add 33554432:i64, %69 (hasExternalUses)
%71:i64 = and 18446744073642442752:i64, %70
%72:i64 = sub %69, %71
infer %72 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i32 = mul 19:i32, %0
%2:i64 = sext %1

Cost = 2
verification query failed!
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = add 1:i32, %7 (hasExternalUses)
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = mul 19:i32, %14
%16:i64 = sext %15
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i64 = mulnsw %20, %23
%25:i64 = add %18, %24
%26:i32 = var
%27:i64 = sext %26 (hasExternalUses)
%28:i32 = var
%29:i32 = mul 19:i32, %28
%30:i64 = sext %29 (hasExternalUses)
%31:i64 = mulnsw %27, %30
%32:i64 = add %25, %31
%33:i32 = var
%34:i64 = sext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = mul 19:i32, %35
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %32, %38
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i32 = var
%43:i32 = mul 19:i32, %42
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %41, %44
%46:i64 = add %39, %45
%47:i32 = var
%48:i64 = sext %47 (hasExternalUses)
%49:i32 = var
%50:i32 = mul 19:i32, %49
%51:i64 = sext %50 (hasExternalUses)
%52:i64 = mulnsw %48, %51
%53:i64 = add %46, %52
%54:i32 = var
%55:i64 = sext %54 (hasExternalUses)
%56:i32 = var
%57:i32 = mul 19:i32, %56
%58:i64 = sext %57 (hasExternalUses)
%59:i64 = mulnsw %55, %58
%60:i64 = add %53, %59
%61:i32 = var
%62:i64 = sext %61 (hasExternalUses)
%63:i32 = var
%64:i32 = mul 19:i32, %63
%65:i64 = sext %64 (hasExternalUses)
%66:i64 = mulnsw %62, %65
%67:i64 = add %60, %66
%68:i64 = mulnsw %3, %9
%69:i32 = mul 19:i32, %5
%70:i64 = sext %69
%71:i32 = shl %12, 1:i32
%72:i64 = sext %71 (hasExternalUses)
%73:i64 = mulnsw %70, %72
%74:i64 = add %68, %73
%75:i64 = mulnsw %20, %16
%76:i64 = add %74, %75
%77:i32 = shl %26, 1:i32
%78:i64 = sext %77 (hasExternalUses)
%79:i64 = mulnsw %23, %78
%80:i64 = add %76, %79
%81:i64 = mulnsw %34, %30
%82:i64 = add %80, %81
%83:i32 = shl %40, 1:i32
%84:i64 = sext %83 (hasExternalUses)
%85:i64 = mulnsw %37, %84
%86:i64 = add %82, %85
%87:i64 = mulnsw %48, %44
%88:i64 = add %86, %87
%89:i32 = shl %54, 1:i32
%90:i64 = sext %89 (hasExternalUses)
%91:i64 = mulnsw %51, %90
%92:i64 = add %88, %91
%93:i64 = mulnsw %62, %58
%94:i64 = add %92, %93
%95:i32 = shl %0, 1:i32
%96:i64 = sext %95 (hasExternalUses)
%97:i64 = mulnsw %65, %96
%98:i64 = add %94, %97 (hasExternalUses)
%99:i64 = add 33554432:i64, %98 (hasExternalUses)
%100:i64 = ashr %99, 26:i64
%101:i64 = add %67, %100 (hasExternalUses)
%102:i64 = add 16777216:i64, %101
infer %102 (demandedBits=1111111111111111111111111111111111111110000000000000000000000000)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = add 1:i32, %7 (hasExternalUses)
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = mul 19:i32, %14
%16:i64 = sext %15
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i64 = mulnsw %20, %23
%25:i64 = add %18, %24
%26:i32 = var
%27:i64 = sext %26 (hasExternalUses)
%28:i32 = var
%29:i32 = mul 19:i32, %28
%30:i64 = sext %29 (hasExternalUses)
%31:i64 = mulnsw %27, %30
%32:i64 = add %25, %31
%33:i32 = var
%34:i64 = sext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = mul 19:i32, %35
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %32, %38
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i32 = var
%43:i32 = mul 19:i32, %42
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %41, %44
%46:i64 = add %39, %45
%47:i32 = var
%48:i64 = sext %47 (hasExternalUses)
%49:i32 = var
%50:i32 = mul 19:i32, %49
%51:i64 = sext %50 (hasExternalUses)
%52:i64 = mulnsw %48, %51
%53:i64 = add %46, %52
%54:i32 = var
%55:i64 = sext %54 (hasExternalUses)
%56:i32 = var
%57:i32 = mul 19:i32, %56
%58:i64 = sext %57 (hasExternalUses)
%59:i64 = mulnsw %55, %58
%60:i64 = add %53, %59
%61:i32 = var
%62:i64 = sext %61 (hasExternalUses)
%63:i32 = var
%64:i32 = mul 19:i32, %63
%65:i64 = sext %64 (hasExternalUses)
%66:i64 = mulnsw %62, %65
%67:i64 = add %60, %66
%68:i64 = mulnsw %3, %9
%69:i32 = mul 19:i32, %5
%70:i64 = sext %69
%71:i32 = shl %12, 1:i32
%72:i64 = sext %71 (hasExternalUses)
%73:i64 = mulnsw %70, %72
%74:i64 = add %68, %73
%75:i64 = mulnsw %20, %16
%76:i64 = add %74, %75
%77:i32 = shl %26, 1:i32
%78:i64 = sext %77 (hasExternalUses)
%79:i64 = mulnsw %23, %78
%80:i64 = add %76, %79
%81:i64 = mulnsw %34, %30
%82:i64 = add %80, %81
%83:i32 = shl %40, 1:i32
%84:i64 = sext %83 (hasExternalUses)
%85:i64 = mulnsw %37, %84
%86:i64 = add %82, %85
%87:i64 = mulnsw %48, %44
%88:i64 = add %86, %87
%89:i32 = shl %54, 1:i32
%90:i64 = sext %89 (hasExternalUses)
%91:i64 = mulnsw %51, %90
%92:i64 = add %88, %91
%93:i64 = mulnsw %62, %58
%94:i64 = add %92, %93
%95:i32 = shl %0, 1:i32
%96:i64 = sext %95 (hasExternalUses)
%97:i64 = mulnsw %65, %96
%98:i64 = add %94, %97 (hasExternalUses)
%99:i64 = add 33554432:i64, %98 (hasExternalUses)
%100:i64 = ashr %99, 26:i64
%101:i64 = add %67, %100 (hasExternalUses)
%102:i64 = add 16777216:i64, %101 (hasExternalUses)
%103:i64 = ashr %102, 25:i64
infer %103


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = add 1:i32, %14 (hasExternalUses)
%16:i64 = sext %15 (hasExternalUses)
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
infer %18


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 6 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = add 1:i32, %14 (hasExternalUses)
%16:i64 = sext %15 (hasExternalUses)
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i32 = mul 19:i32, %19
%21:i64 = sext %20 (hasExternalUses)
%22:i32 = var
%23:i32 = shl %22, 1:i32
%24:i64 = sext %23 (hasExternalUses)
%25:i64 = mulnsw %21, %24
%26:i64 = add %18, %25
infer %26


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i32 = mul 19:i32, %0
%2:i64 = sext %1

Cost = 2
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = add 1:i32, %14 (hasExternalUses)
%16:i64 = sext %15 (hasExternalUses)
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i32 = mul 19:i32, %19
%21:i64 = sext %20 (hasExternalUses)
%22:i32 = var
%23:i32 = shl %22, 1:i32
%24:i64 = sext %23 (hasExternalUses)
%25:i64 = mulnsw %21, %24
%26:i64 = add %18, %25
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i32 = var
%30:i32 = mul 19:i32, %29
%31:i64 = sext %30 (hasExternalUses)
%32:i64 = mulnsw %28, %31
%33:i64 = add %26, %32
infer %33


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = add 1:i32, %14 (hasExternalUses)
%16:i64 = sext %15 (hasExternalUses)
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i32 = mul 19:i32, %19
%21:i64 = sext %20 (hasExternalUses)
%22:i32 = var
%23:i32 = shl %22, 1:i32
%24:i64 = sext %23 (hasExternalUses)
%25:i64 = mulnsw %21, %24
%26:i64 = add %18, %25
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i32 = var
%30:i32 = mul 19:i32, %29
%31:i64 = sext %30 (hasExternalUses)
%32:i64 = mulnsw %28, %31
%33:i64 = add %26, %32
%34:i32 = var
%35:i32 = mul 19:i32, %34
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i32 = shl %37, 1:i32
%39:i64 = sext %38 (hasExternalUses)
%40:i64 = mulnsw %36, %39
%41:i64 = add %33, %40
infer %41


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i32 = mul 19:i32, %0
%2:i64 = sext %1

Cost = 2
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = add 1:i32, %14 (hasExternalUses)
%16:i64 = sext %15 (hasExternalUses)
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i32 = mul 19:i32, %19
%21:i64 = sext %20 (hasExternalUses)
%22:i32 = var
%23:i32 = shl %22, 1:i32
%24:i64 = sext %23 (hasExternalUses)
%25:i64 = mulnsw %21, %24
%26:i64 = add %18, %25
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i32 = var
%30:i32 = mul 19:i32, %29
%31:i64 = sext %30 (hasExternalUses)
%32:i64 = mulnsw %28, %31
%33:i64 = add %26, %32
%34:i32 = var
%35:i32 = mul 19:i32, %34
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i32 = shl %37, 1:i32
%39:i64 = sext %38 (hasExternalUses)
%40:i64 = mulnsw %36, %39
%41:i64 = add %33, %40
%42:i32 = var
%43:i64 = sext %42 (hasExternalUses)
%44:i32 = var
%45:i32 = mul 19:i32, %44
%46:i64 = sext %45 (hasExternalUses)
%47:i64 = mulnsw %43, %46
%48:i64 = add %41, %47
infer %48


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = add 1:i32, %14 (hasExternalUses)
%16:i64 = sext %15 (hasExternalUses)
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i32 = mul 19:i32, %19
%21:i64 = sext %20 (hasExternalUses)
%22:i32 = var
%23:i32 = shl %22, 1:i32
%24:i64 = sext %23 (hasExternalUses)
%25:i64 = mulnsw %21, %24
%26:i64 = add %18, %25
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i32 = var
%30:i32 = mul 19:i32, %29
%31:i64 = sext %30 (hasExternalUses)
%32:i64 = mulnsw %28, %31
%33:i64 = add %26, %32
%34:i32 = var
%35:i32 = mul 19:i32, %34
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i32 = shl %37, 1:i32
%39:i64 = sext %38 (hasExternalUses)
%40:i64 = mulnsw %36, %39
%41:i64 = add %33, %40
%42:i32 = var
%43:i64 = sext %42 (hasExternalUses)
%44:i32 = var
%45:i32 = mul 19:i32, %44
%46:i64 = sext %45 (hasExternalUses)
%47:i64 = mulnsw %43, %46
%48:i64 = add %41, %47
%49:i32 = var
%50:i32 = mul 19:i32, %49
%51:i64 = sext %50 (hasExternalUses)
%52:i32 = var
%53:i32 = shl %52, 1:i32
%54:i64 = sext %53 (hasExternalUses)
%55:i64 = mulnsw %51, %54
%56:i64 = add %48, %55
infer %56


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i32 = mul 19:i32, %0
%2:i64 = sext %1

Cost = 2
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = add 1:i32, %14 (hasExternalUses)
%16:i64 = sext %15 (hasExternalUses)
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i32 = mul 19:i32, %19
%21:i64 = sext %20 (hasExternalUses)
%22:i32 = var
%23:i32 = shl %22, 1:i32
%24:i64 = sext %23 (hasExternalUses)
%25:i64 = mulnsw %21, %24
%26:i64 = add %18, %25
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i32 = var
%30:i32 = mul 19:i32, %29
%31:i64 = sext %30 (hasExternalUses)
%32:i64 = mulnsw %28, %31
%33:i64 = add %26, %32
%34:i32 = var
%35:i32 = mul 19:i32, %34
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i32 = shl %37, 1:i32
%39:i64 = sext %38 (hasExternalUses)
%40:i64 = mulnsw %36, %39
%41:i64 = add %33, %40
%42:i32 = var
%43:i64 = sext %42 (hasExternalUses)
%44:i32 = var
%45:i32 = mul 19:i32, %44
%46:i64 = sext %45 (hasExternalUses)
%47:i64 = mulnsw %43, %46
%48:i64 = add %41, %47
%49:i32 = var
%50:i32 = mul 19:i32, %49
%51:i64 = sext %50 (hasExternalUses)
%52:i32 = var
%53:i32 = shl %52, 1:i32
%54:i64 = sext %53 (hasExternalUses)
%55:i64 = mulnsw %51, %54
%56:i64 = add %48, %55
%57:i32 = var
%58:i64 = sext %57 (hasExternalUses)
%59:i32 = var
%60:i32 = mul 19:i32, %59
%61:i64 = sext %60 (hasExternalUses)
%62:i64 = mulnsw %58, %61
%63:i64 = add %56, %62
infer %63


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = add 1:i32, %14 (hasExternalUses)
%16:i64 = sext %15 (hasExternalUses)
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i32 = mul 19:i32, %19
%21:i64 = sext %20 (hasExternalUses)
%22:i32 = var
%23:i32 = shl %22, 1:i32
%24:i64 = sext %23 (hasExternalUses)
%25:i64 = mulnsw %21, %24
%26:i64 = add %18, %25
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i32 = var
%30:i32 = mul 19:i32, %29
%31:i64 = sext %30 (hasExternalUses)
%32:i64 = mulnsw %28, %31
%33:i64 = add %26, %32
%34:i32 = var
%35:i32 = mul 19:i32, %34
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i32 = shl %37, 1:i32
%39:i64 = sext %38 (hasExternalUses)
%40:i64 = mulnsw %36, %39
%41:i64 = add %33, %40
%42:i32 = var
%43:i64 = sext %42 (hasExternalUses)
%44:i32 = var
%45:i32 = mul 19:i32, %44
%46:i64 = sext %45 (hasExternalUses)
%47:i64 = mulnsw %43, %46
%48:i64 = add %41, %47
%49:i32 = var
%50:i32 = mul 19:i32, %49
%51:i64 = sext %50 (hasExternalUses)
%52:i32 = var
%53:i32 = shl %52, 1:i32
%54:i64 = sext %53 (hasExternalUses)
%55:i64 = mulnsw %51, %54
%56:i64 = add %48, %55
%57:i32 = var
%58:i64 = sext %57 (hasExternalUses)
%59:i32 = var
%60:i32 = mul 19:i32, %59
%61:i64 = sext %60 (hasExternalUses)
%62:i64 = mulnsw %58, %61
%63:i64 = add %56, %62
%64:i32 = var
%65:i32 = mul 19:i32, %64
%66:i64 = sext %65 (hasExternalUses)
%67:i32 = var
%68:i32 = shl %67, 1:i32
%69:i64 = sext %68 (hasExternalUses)
%70:i64 = mulnsw %66, %69
%71:i64 = add %63, %70
infer %71


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i32 = mul 19:i32, %0
%2:i64 = sext %1

Cost = 2
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = add 1:i32, %14 (hasExternalUses)
%16:i64 = sext %15 (hasExternalUses)
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i32 = mul 19:i32, %19
%21:i64 = sext %20
%22:i32 = var
%23:i32 = shl %22, 1:i32
%24:i64 = sext %23 (hasExternalUses)
%25:i64 = mulnsw %21, %24
%26:i64 = add %18, %25
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i32 = var
%30:i32 = mul 19:i32, %29
%31:i64 = sext %30 (hasExternalUses)
%32:i64 = mulnsw %28, %31
%33:i64 = add %26, %32
%34:i32 = var
%35:i32 = mul 19:i32, %34
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i32 = shl %37, 1:i32
%39:i64 = sext %38 (hasExternalUses)
%40:i64 = mulnsw %36, %39
%41:i64 = add %33, %40
%42:i32 = var
%43:i64 = sext %42 (hasExternalUses)
%44:i32 = var
%45:i32 = mul 19:i32, %44
%46:i64 = sext %45 (hasExternalUses)
%47:i64 = mulnsw %43, %46
%48:i64 = add %41, %47
%49:i32 = var
%50:i32 = mul 19:i32, %49
%51:i64 = sext %50 (hasExternalUses)
%52:i32 = var
%53:i32 = shl %52, 1:i32
%54:i64 = sext %53 (hasExternalUses)
%55:i64 = mulnsw %51, %54
%56:i64 = add %48, %55
%57:i32 = var
%58:i64 = sext %57 (hasExternalUses)
%59:i32 = var
%60:i32 = mul 19:i32, %59
%61:i64 = sext %60 (hasExternalUses)
%62:i64 = mulnsw %58, %61
%63:i64 = add %56, %62
%64:i32 = var
%65:i32 = mul 19:i32, %64
%66:i64 = sext %65 (hasExternalUses)
%67:i32 = var
%68:i32 = shl %67, 1:i32
%69:i64 = sext %68 (hasExternalUses)
%70:i64 = mulnsw %66, %69
%71:i64 = add %63, %70
%72:i64 = sext %7 (hasExternalUses)
%73:i64 = mulnsw %72, %3
%74:i64 = mulnsw %6, %16
%75:i64 = add %73, %74
%76:i64 = sext %22 (hasExternalUses)
%77:i32 = mul 19:i32, %12
%78:i64 = sext %77
%79:i64 = mulnsw %76, %78
%80:i64 = add %75, %79
%81:i64 = mulnsw %28, %21
%82:i64 = add %80, %81
%83:i64 = sext %37 (hasExternalUses)
%84:i64 = mulnsw %83, %31
%85:i64 = add %82, %84
%86:i64 = mulnsw %43, %36
%87:i64 = add %85, %86
%88:i64 = sext %52 (hasExternalUses)
%89:i64 = mulnsw %88, %46
%90:i64 = add %87, %89
%91:i64 = mulnsw %58, %51
%92:i64 = add %90, %91
%93:i64 = sext %67 (hasExternalUses)
%94:i64 = mulnsw %93, %61
%95:i64 = add %92, %94
%96:i64 = mulnsw %1, %66
%97:i64 = add %95, %96
%98:i64 = mulnsw %3, %16
%99:i32 = mul 19:i32, %5
%100:i64 = sext %99
%101:i64 = mulnsw %100, %24
%102:i64 = add %98, %101
%103:i64 = mulnsw %28, %78
%104:i64 = add %102, %103
%105:i64 = mulnsw %21, %39
%106:i64 = add %104, %105
%107:i64 = mulnsw %43, %31
%108:i64 = add %106, %107
%109:i64 = mulnsw %36, %54
%110:i64 = add %108, %109
%111:i64 = mulnsw %58, %46
%112:i64 = add %110, %111
%113:i64 = mulnsw %51, %69
%114:i64 = add %112, %113
%115:i64 = mulnsw %1, %61
%116:i64 = add %114, %115
%117:i64 = mulnsw %66, %9
%118:i64 = add %116, %117 (hasExternalUses)
%119:i64 = add 33554432:i64, %118 (hasExternalUses)
%120:i64 = ashr %119, 26:i64
%121:i64 = add %97, %120 (hasExternalUses)
%122:i64 = add 16777216:i64, %121 (hasExternalUses)
%123:i64 = ashr %122, 25:i64
%124:i64 = add %71, %123
infer %124


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i32 = mul 19:i32, %0
%2:i64 = sext %1

Cost = 2
verification query failed!
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = add 1:i32, %7 (hasExternalUses)
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = mul 19:i32, %14
%16:i64 = sext %15
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i64 = mulnsw %20, %23
%25:i64 = add %18, %24
%26:i32 = var
%27:i64 = sext %26 (hasExternalUses)
%28:i32 = var
%29:i32 = mul 19:i32, %28
%30:i64 = sext %29 (hasExternalUses)
%31:i64 = mulnsw %27, %30
%32:i64 = add %25, %31
%33:i32 = var
%34:i64 = sext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = mul 19:i32, %35
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %32, %38
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i32 = var
%43:i32 = mul 19:i32, %42
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %41, %44
%46:i64 = add %39, %45
%47:i32 = var
%48:i64 = sext %47 (hasExternalUses)
%49:i32 = var
%50:i32 = mul 19:i32, %49
%51:i64 = sext %50 (hasExternalUses)
%52:i64 = mulnsw %48, %51
%53:i64 = add %46, %52
%54:i32 = var
%55:i64 = sext %54 (hasExternalUses)
%56:i32 = var
%57:i32 = mul 19:i32, %56
%58:i64 = sext %57 (hasExternalUses)
%59:i64 = mulnsw %55, %58
%60:i64 = add %53, %59
%61:i32 = var
%62:i64 = sext %61 (hasExternalUses)
%63:i32 = var
%64:i32 = mul 19:i32, %63
%65:i64 = sext %64 (hasExternalUses)
%66:i64 = mulnsw %62, %65
%67:i64 = add %60, %66
%68:i64 = mulnsw %3, %9
%69:i32 = mul 19:i32, %5
%70:i64 = sext %69
%71:i32 = shl %12, 1:i32
%72:i64 = sext %71 (hasExternalUses)
%73:i64 = mulnsw %70, %72
%74:i64 = add %68, %73
%75:i64 = mulnsw %20, %16
%76:i64 = add %74, %75
%77:i32 = shl %26, 1:i32
%78:i64 = sext %77 (hasExternalUses)
%79:i64 = mulnsw %23, %78
%80:i64 = add %76, %79
%81:i64 = mulnsw %34, %30
%82:i64 = add %80, %81
%83:i32 = shl %40, 1:i32
%84:i64 = sext %83 (hasExternalUses)
%85:i64 = mulnsw %37, %84
%86:i64 = add %82, %85
%87:i64 = mulnsw %48, %44
%88:i64 = add %86, %87
%89:i32 = shl %54, 1:i32
%90:i64 = sext %89 (hasExternalUses)
%91:i64 = mulnsw %51, %90
%92:i64 = add %88, %91
%93:i64 = mulnsw %62, %58
%94:i64 = add %92, %93
%95:i32 = shl %0, 1:i32
%96:i64 = sext %95 (hasExternalUses)
%97:i64 = mulnsw %65, %96
%98:i64 = add %94, %97 (hasExternalUses)
%99:i64 = add 33554432:i64, %98 (hasExternalUses)
%100:i64 = ashr %99, 26:i64
%101:i64 = add %67, %100 (hasExternalUses)
%102:i64 = add 16777216:i64, %101 (hasExternalUses)
%103:i64 = and 4261412864:i64, %102
infer %103 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
ConstantSynthesis: solver returns error on first query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = add 1:i32, %7 (hasExternalUses)
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = mul 19:i32, %14
%16:i64 = sext %15
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i64 = mulnsw %20, %23
%25:i64 = add %18, %24
%26:i32 = var
%27:i64 = sext %26 (hasExternalUses)
%28:i32 = var
%29:i32 = mul 19:i32, %28
%30:i64 = sext %29 (hasExternalUses)
%31:i64 = mulnsw %27, %30
%32:i64 = add %25, %31
%33:i32 = var
%34:i64 = sext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = mul 19:i32, %35
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %32, %38
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i32 = var
%43:i32 = mul 19:i32, %42
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %41, %44
%46:i64 = add %39, %45
%47:i32 = var
%48:i64 = sext %47 (hasExternalUses)
%49:i32 = var
%50:i32 = mul 19:i32, %49
%51:i64 = sext %50 (hasExternalUses)
%52:i64 = mulnsw %48, %51
%53:i64 = add %46, %52
%54:i32 = var
%55:i64 = sext %54 (hasExternalUses)
%56:i32 = var
%57:i32 = mul 19:i32, %56
%58:i64 = sext %57 (hasExternalUses)
%59:i64 = mulnsw %55, %58
%60:i64 = add %53, %59
%61:i32 = var
%62:i64 = sext %61 (hasExternalUses)
%63:i32 = var
%64:i32 = mul 19:i32, %63
%65:i64 = sext %64 (hasExternalUses)
%66:i64 = mulnsw %62, %65
%67:i64 = add %60, %66
%68:i64 = mulnsw %3, %9
%69:i32 = mul 19:i32, %5
%70:i64 = sext %69
%71:i32 = shl %12, 1:i32
%72:i64 = sext %71 (hasExternalUses)
%73:i64 = mulnsw %70, %72
%74:i64 = add %68, %73
%75:i64 = mulnsw %20, %16
%76:i64 = add %74, %75
%77:i32 = shl %26, 1:i32
%78:i64 = sext %77 (hasExternalUses)
%79:i64 = mulnsw %23, %78
%80:i64 = add %76, %79
%81:i64 = mulnsw %34, %30
%82:i64 = add %80, %81
%83:i32 = shl %40, 1:i32
%84:i64 = sext %83 (hasExternalUses)
%85:i64 = mulnsw %37, %84
%86:i64 = add %82, %85
%87:i64 = mulnsw %48, %44
%88:i64 = add %86, %87
%89:i32 = shl %54, 1:i32
%90:i64 = sext %89 (hasExternalUses)
%91:i64 = mulnsw %51, %90
%92:i64 = add %88, %91
%93:i64 = mulnsw %62, %58
%94:i64 = add %92, %93
%95:i32 = shl %0, 1:i32
%96:i64 = sext %95 (hasExternalUses)
%97:i64 = mulnsw %65, %96
%98:i64 = add %94, %97 (hasExternalUses)
%99:i64 = add 33554432:i64, %98 (hasExternalUses)
%100:i64 = ashr %99, 26:i64
%101:i64 = add %67, %100
%102:i64 = add 16777216:i64, %101 (hasExternalUses)
%103:i64 = and 4261412864:i64, %102
%104:i64 = sub %101, %103
infer %104 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = mul 19:i32, %2
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = add 1:i32, %31 (hasExternalUses)
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
%36:i32 = var
%37:i64 = sext %36 (hasExternalUses)
%38:i32 = var
%39:i32 = mul 19:i32, %38
%40:i64 = sext %39 (hasExternalUses)
%41:i64 = mulnsw %37, %40
%42:i64 = add %35, %41
%43:i32 = var
%44:i64 = sext %43 (hasExternalUses)
%45:i32 = var
%46:i32 = mul 19:i32, %45
%47:i64 = sext %46 (hasExternalUses)
%48:i64 = mulnsw %44, %47
%49:i64 = add %42, %48
%50:i32 = var
%51:i64 = sext %50 (hasExternalUses)
%52:i32 = var
%53:i32 = mul 19:i32, %52
%54:i64 = sext %53 (hasExternalUses)
%55:i64 = mulnsw %51, %54
%56:i64 = add %49, %55
%57:i32 = var
%58:i64 = sext %57 (hasExternalUses)
%59:i32 = var
%60:i32 = mul 19:i32, %59
%61:i64 = sext %60 (hasExternalUses)
%62:i64 = mulnsw %58, %61
%63:i64 = add %56, %62
%64:i64 = mulnsw %1, %8
%65:i32 = shl %11, 1:i32
%66:i64 = sext %65 (hasExternalUses)
%67:i64 = mulnsw %3, %66
%68:i64 = add %64, %67
%69:i64 = mulnsw %18, %14
%70:i64 = add %68, %69
%71:i32 = shl %23, 1:i32
%72:i64 = sext %71 (hasExternalUses)
%73:i64 = mulnsw %20, %72
%74:i64 = add %70, %73
%75:i64 = mulnsw %26, %33
%76:i64 = add %74, %75
%77:i32 = mul 19:i32, %29
%78:i64 = sext %77 (hasExternalUses)
%79:i32 = shl %36, 1:i32
%80:i64 = sext %79 (hasExternalUses)
%81:i64 = mulnsw %78, %80
%82:i64 = add %76, %81
%83:i64 = mulnsw %44, %40
%84:i64 = add %82, %83
%85:i32 = shl %50, 1:i32
%86:i64 = sext %85 (hasExternalUses)
%87:i64 = mulnsw %47, %86
%88:i64 = add %84, %87
%89:i64 = mulnsw %58, %54
%90:i64 = add %88, %89
%91:i32 = shl %5, 1:i32
%92:i64 = sext %91 (hasExternalUses)
%93:i64 = mulnsw %61, %92
%94:i64 = add %90, %93 (hasExternalUses)
%95:i64 = add 33554432:i64, %94 (hasExternalUses)
%96:i64 = ashr %95, 26:i64
%97:i64 = add %63, %96 (hasExternalUses)
%98:i64 = add 16777216:i64, %97
infer %98 (demandedBits=1111111111111111111111111111111111111110000000000000000000000000)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = add 1:i32, %31 (hasExternalUses)
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
%36:i32 = var
%37:i64 = sext %36 (hasExternalUses)
%38:i32 = var
%39:i32 = mul 19:i32, %38
%40:i64 = sext %39 (hasExternalUses)
%41:i64 = mulnsw %37, %40
%42:i64 = add %35, %41
%43:i32 = var
%44:i64 = sext %43 (hasExternalUses)
%45:i32 = var
%46:i32 = mul 19:i32, %45
%47:i64 = sext %46 (hasExternalUses)
%48:i64 = mulnsw %44, %47
%49:i64 = add %42, %48
%50:i32 = var
%51:i64 = sext %50 (hasExternalUses)
%52:i32 = var
%53:i32 = mul 19:i32, %52
%54:i64 = sext %53 (hasExternalUses)
%55:i64 = mulnsw %51, %54
%56:i64 = add %49, %55
%57:i32 = var
%58:i64 = sext %57 (hasExternalUses)
%59:i32 = var
%60:i32 = mul 19:i32, %59
%61:i64 = sext %60 (hasExternalUses)
%62:i64 = mulnsw %58, %61
%63:i64 = add %56, %62
%64:i64 = mulnsw %1, %8
%65:i32 = shl %11, 1:i32
%66:i64 = sext %65 (hasExternalUses)
%67:i64 = mulnsw %3, %66
%68:i64 = add %64, %67
%69:i64 = mulnsw %18, %14
%70:i64 = add %68, %69
%71:i32 = shl %23, 1:i32
%72:i64 = sext %71 (hasExternalUses)
%73:i64 = mulnsw %20, %72
%74:i64 = add %70, %73
%75:i64 = mulnsw %26, %33
%76:i64 = add %74, %75
%77:i32 = mul 19:i32, %29
%78:i64 = sext %77 (hasExternalUses)
%79:i32 = shl %36, 1:i32
%80:i64 = sext %79 (hasExternalUses)
%81:i64 = mulnsw %78, %80
%82:i64 = add %76, %81
%83:i64 = mulnsw %44, %40
%84:i64 = add %82, %83
%85:i32 = shl %50, 1:i32
%86:i64 = sext %85 (hasExternalUses)
%87:i64 = mulnsw %47, %86
%88:i64 = add %84, %87
%89:i64 = mulnsw %58, %54
%90:i64 = add %88, %89
%91:i32 = shl %5, 1:i32
%92:i64 = sext %91 (hasExternalUses)
%93:i64 = mulnsw %61, %92
%94:i64 = add %90, %93 (hasExternalUses)
%95:i64 = add 33554432:i64, %94 (hasExternalUses)
%96:i64 = ashr %95, 26:i64
%97:i64 = add %63, %96 (hasExternalUses)
%98:i64 = add 16777216:i64, %97 (hasExternalUses)
%99:i64 = ashr %98, 25:i64
infer %99


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %26, %28
%30:i64 = add %24, %29
infer %30


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %26, %28
%30:i64 = add %24, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = shl %33, 1:i32
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
infer %37


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %26, %28
%30:i64 = add %24, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = shl %33, 1:i32
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i32 = add 1:i32, %40 (hasExternalUses)
%42:i64 = sext %41 (hasExternalUses)
%43:i64 = mulnsw %39, %42
%44:i64 = add %37, %43
infer %44


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %26, %28
%30:i64 = add %24, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = shl %33, 1:i32
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i32 = add 1:i32, %40 (hasExternalUses)
%42:i64 = sext %41 (hasExternalUses)
%43:i64 = mulnsw %39, %42
%44:i64 = add %37, %43
%45:i32 = var
%46:i32 = mul 19:i32, %45
%47:i64 = sext %46 (hasExternalUses)
%48:i32 = var
%49:i32 = shl %48, 1:i32
%50:i64 = sext %49 (hasExternalUses)
%51:i64 = mulnsw %47, %50
%52:i64 = add %44, %51
infer %52


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i32 = mul 19:i32, %0
%2:i64 = sext %1

Cost = 2
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %26, %28
%30:i64 = add %24, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = shl %33, 1:i32
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i32 = add 1:i32, %40 (hasExternalUses)
%42:i64 = sext %41 (hasExternalUses)
%43:i64 = mulnsw %39, %42
%44:i64 = add %37, %43
%45:i32 = var
%46:i32 = mul 19:i32, %45
%47:i64 = sext %46 (hasExternalUses)
%48:i32 = var
%49:i32 = shl %48, 1:i32
%50:i64 = sext %49 (hasExternalUses)
%51:i64 = mulnsw %47, %50
%52:i64 = add %44, %51
%53:i32 = var
%54:i64 = sext %53 (hasExternalUses)
%55:i32 = var
%56:i32 = mul 19:i32, %55
%57:i64 = sext %56 (hasExternalUses)
%58:i64 = mulnsw %54, %57
%59:i64 = add %52, %58
infer %59


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %26, %28
%30:i64 = add %24, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = shl %33, 1:i32
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i32 = add 1:i32, %40 (hasExternalUses)
%42:i64 = sext %41 (hasExternalUses)
%43:i64 = mulnsw %39, %42
%44:i64 = add %37, %43
%45:i32 = var
%46:i32 = mul 19:i32, %45
%47:i64 = sext %46 (hasExternalUses)
%48:i32 = var
%49:i32 = shl %48, 1:i32
%50:i64 = sext %49 (hasExternalUses)
%51:i64 = mulnsw %47, %50
%52:i64 = add %44, %51
%53:i32 = var
%54:i64 = sext %53 (hasExternalUses)
%55:i32 = var
%56:i32 = mul 19:i32, %55
%57:i64 = sext %56 (hasExternalUses)
%58:i64 = mulnsw %54, %57
%59:i64 = add %52, %58
%60:i32 = var
%61:i32 = mul 19:i32, %60
%62:i64 = sext %61 (hasExternalUses)
%63:i32 = var
%64:i32 = shl %63, 1:i32
%65:i64 = sext %64 (hasExternalUses)
%66:i64 = mulnsw %62, %65
%67:i64 = add %59, %66
infer %67


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i32 = mul 19:i32, %0
%2:i64 = sext %1

Cost = 2
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %26, %28
%30:i64 = add %24, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = shl %33, 1:i32
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i32 = add 1:i32, %40 (hasExternalUses)
%42:i64 = sext %41 (hasExternalUses)
%43:i64 = mulnsw %39, %42
%44:i64 = add %37, %43
%45:i32 = var
%46:i32 = mul 19:i32, %45
%47:i64 = sext %46 (hasExternalUses)
%48:i32 = var
%49:i32 = shl %48, 1:i32
%50:i64 = sext %49 (hasExternalUses)
%51:i64 = mulnsw %47, %50
%52:i64 = add %44, %51
%53:i32 = var
%54:i64 = sext %53 (hasExternalUses)
%55:i32 = var
%56:i32 = mul 19:i32, %55
%57:i64 = sext %56 (hasExternalUses)
%58:i64 = mulnsw %54, %57
%59:i64 = add %52, %58
%60:i32 = var
%61:i32 = mul 19:i32, %60
%62:i64 = sext %61 (hasExternalUses)
%63:i32 = var
%64:i32 = shl %63, 1:i32
%65:i64 = sext %64 (hasExternalUses)
%66:i64 = mulnsw %62, %65
%67:i64 = add %59, %66
%68:i64 = mulnsw %13, %6
%69:i64 = sext %7 (hasExternalUses)
%70:i64 = mulnsw %69, %3
%71:i64 = add %68, %70
%72:i64 = sext %20 (hasExternalUses)
%73:i64 = mulnsw %72, %15
%74:i64 = add %71, %73
%75:i64 = mulnsw %26, %19
%76:i64 = add %74, %75
%77:i64 = sext %33 (hasExternalUses)
%78:i64 = mulnsw %77, %28
%79:i64 = add %76, %78
%80:i64 = mulnsw %32, %42
%81:i64 = add %79, %80
%82:i64 = sext %48 (hasExternalUses)
%83:i32 = mul 19:i32, %38
%84:i64 = sext %83 (hasExternalUses)
%85:i64 = mulnsw %82, %84
%86:i64 = add %81, %85
%87:i64 = mulnsw %54, %47
%88:i64 = add %86, %87
%89:i64 = sext %63 (hasExternalUses)
%90:i64 = mulnsw %89, %57
%91:i64 = add %88, %90
%92:i64 = mulnsw %1, %62
%93:i64 = add %91, %92
%94:i64 = mulnsw %13, %3
%95:i64 = mulnsw %6, %22
%96:i64 = add %94, %95
%97:i64 = mulnsw %26, %15
%98:i64 = add %96, %97
%99:i64 = mulnsw %19, %35
%100:i64 = add %98, %99
%101:i64 = mulnsw %28, %42
%102:i64 = add %100, %101
%103:i32 = mul 19:i32, %31
%104:i64 = sext %103 (hasExternalUses)
%105:i64 = mulnsw %104, %50
%106:i64 = add %102, %105
%107:i64 = mulnsw %54, %84
%108:i64 = add %106, %107
%109:i64 = mulnsw %47, %65
%110:i64 = add %108, %109
%111:i64 = mulnsw %1, %57
%112:i64 = add %110, %111
%113:i64 = mulnsw %62, %9
%114:i64 = add %112, %113 (hasExternalUses)
%115:i64 = add 33554432:i64, %114 (hasExternalUses)
%116:i64 = ashr %115, 26:i64
%117:i64 = add %93, %116 (hasExternalUses)
%118:i64 = add 16777216:i64, %117 (hasExternalUses)
%119:i64 = ashr %118, 25:i64
%120:i64 = add %67, %119
infer %120


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i32 = mul 19:i32, %0
%2:i64 = sext %1

Cost = 2
verification query failed!
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = add 1:i32, %31 (hasExternalUses)
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
%36:i32 = var
%37:i64 = sext %36 (hasExternalUses)
%38:i32 = var
%39:i32 = mul 19:i32, %38
%40:i64 = sext %39 (hasExternalUses)
%41:i64 = mulnsw %37, %40
%42:i64 = add %35, %41
%43:i32 = var
%44:i64 = sext %43 (hasExternalUses)
%45:i32 = var
%46:i32 = mul 19:i32, %45
%47:i64 = sext %46 (hasExternalUses)
%48:i64 = mulnsw %44, %47
%49:i64 = add %42, %48
%50:i32 = var
%51:i64 = sext %50 (hasExternalUses)
%52:i32 = var
%53:i32 = mul 19:i32, %52
%54:i64 = sext %53 (hasExternalUses)
%55:i64 = mulnsw %51, %54
%56:i64 = add %49, %55
%57:i32 = var
%58:i64 = sext %57 (hasExternalUses)
%59:i32 = var
%60:i32 = mul 19:i32, %59
%61:i64 = sext %60 (hasExternalUses)
%62:i64 = mulnsw %58, %61
%63:i64 = add %56, %62
%64:i64 = mulnsw %1, %8
%65:i32 = shl %11, 1:i32
%66:i64 = sext %65 (hasExternalUses)
%67:i64 = mulnsw %3, %66
%68:i64 = add %64, %67
%69:i64 = mulnsw %18, %14
%70:i64 = add %68, %69
%71:i32 = shl %23, 1:i32
%72:i64 = sext %71 (hasExternalUses)
%73:i64 = mulnsw %20, %72
%74:i64 = add %70, %73
%75:i64 = mulnsw %26, %33
%76:i64 = add %74, %75
%77:i32 = mul 19:i32, %29
%78:i64 = sext %77 (hasExternalUses)
%79:i32 = shl %36, 1:i32
%80:i64 = sext %79 (hasExternalUses)
%81:i64 = mulnsw %78, %80
%82:i64 = add %76, %81
%83:i64 = mulnsw %44, %40
%84:i64 = add %82, %83
%85:i32 = shl %50, 1:i32
%86:i64 = sext %85 (hasExternalUses)
%87:i64 = mulnsw %47, %86
%88:i64 = add %84, %87
%89:i64 = mulnsw %58, %54
%90:i64 = add %88, %89
%91:i32 = shl %5, 1:i32
%92:i64 = sext %91 (hasExternalUses)
%93:i64 = mulnsw %61, %92
%94:i64 = add %90, %93 (hasExternalUses)
%95:i64 = add 33554432:i64, %94 (hasExternalUses)
%96:i64 = ashr %95, 26:i64
%97:i64 = add %63, %96 (hasExternalUses)
%98:i64 = add 16777216:i64, %97 (hasExternalUses)
%99:i64 = and 4261412864:i64, %98
infer %99 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
ConstantSynthesis: solver returns error on first query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = add 1:i32, %31 (hasExternalUses)
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
%36:i32 = var
%37:i64 = sext %36 (hasExternalUses)
%38:i32 = var
%39:i32 = mul 19:i32, %38
%40:i64 = sext %39 (hasExternalUses)
%41:i64 = mulnsw %37, %40
%42:i64 = add %35, %41
%43:i32 = var
%44:i64 = sext %43 (hasExternalUses)
%45:i32 = var
%46:i32 = mul 19:i32, %45
%47:i64 = sext %46 (hasExternalUses)
%48:i64 = mulnsw %44, %47
%49:i64 = add %42, %48
%50:i32 = var
%51:i64 = sext %50 (hasExternalUses)
%52:i32 = var
%53:i32 = mul 19:i32, %52
%54:i64 = sext %53 (hasExternalUses)
%55:i64 = mulnsw %51, %54
%56:i64 = add %49, %55
%57:i32 = var
%58:i64 = sext %57 (hasExternalUses)
%59:i32 = var
%60:i32 = mul 19:i32, %59
%61:i64 = sext %60 (hasExternalUses)
%62:i64 = mulnsw %58, %61
%63:i64 = add %56, %62
%64:i64 = mulnsw %1, %8
%65:i32 = shl %11, 1:i32
%66:i64 = sext %65 (hasExternalUses)
%67:i64 = mulnsw %3, %66
%68:i64 = add %64, %67
%69:i64 = mulnsw %18, %14
%70:i64 = add %68, %69
%71:i32 = shl %23, 1:i32
%72:i64 = sext %71 (hasExternalUses)
%73:i64 = mulnsw %20, %72
%74:i64 = add %70, %73
%75:i64 = mulnsw %26, %33
%76:i64 = add %74, %75
%77:i32 = mul 19:i32, %29
%78:i64 = sext %77 (hasExternalUses)
%79:i32 = shl %36, 1:i32
%80:i64 = sext %79 (hasExternalUses)
%81:i64 = mulnsw %78, %80
%82:i64 = add %76, %81
%83:i64 = mulnsw %44, %40
%84:i64 = add %82, %83
%85:i32 = shl %50, 1:i32
%86:i64 = sext %85 (hasExternalUses)
%87:i64 = mulnsw %47, %86
%88:i64 = add %84, %87
%89:i64 = mulnsw %58, %54
%90:i64 = add %88, %89
%91:i32 = shl %5, 1:i32
%92:i64 = sext %91 (hasExternalUses)
%93:i64 = mulnsw %61, %92
%94:i64 = add %90, %93 (hasExternalUses)
%95:i64 = add 33554432:i64, %94 (hasExternalUses)
%96:i64 = ashr %95, 26:i64
%97:i64 = add %63, %96
%98:i64 = add 16777216:i64, %97 (hasExternalUses)
%99:i64 = and 4261412864:i64, %98
%100:i64 = sub %97, %99
infer %100 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = mul 19:i32, %2
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = add 1:i32, %14 (hasExternalUses)
%16:i64 = sext %15 (hasExternalUses)
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i32 = mul 19:i32, %19
%21:i64 = sext %20
%22:i32 = var
%23:i32 = shl %22, 1:i32
%24:i64 = sext %23 (hasExternalUses)
%25:i64 = mulnsw %21, %24
%26:i64 = add %18, %25
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i32 = var
%30:i32 = mul 19:i32, %29
%31:i64 = sext %30 (hasExternalUses)
%32:i64 = mulnsw %28, %31
%33:i64 = add %26, %32
%34:i32 = var
%35:i32 = mul 19:i32, %34
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i32 = shl %37, 1:i32
%39:i64 = sext %38 (hasExternalUses)
%40:i64 = mulnsw %36, %39
%41:i64 = add %33, %40
%42:i32 = var
%43:i64 = sext %42 (hasExternalUses)
%44:i32 = var
%45:i32 = mul 19:i32, %44
%46:i64 = sext %45 (hasExternalUses)
%47:i64 = mulnsw %43, %46
%48:i64 = add %41, %47
%49:i32 = var
%50:i32 = mul 19:i32, %49
%51:i64 = sext %50 (hasExternalUses)
%52:i32 = var
%53:i32 = shl %52, 1:i32
%54:i64 = sext %53 (hasExternalUses)
%55:i64 = mulnsw %51, %54
%56:i64 = add %48, %55
%57:i32 = var
%58:i64 = sext %57 (hasExternalUses)
%59:i32 = var
%60:i32 = mul 19:i32, %59
%61:i64 = sext %60 (hasExternalUses)
%62:i64 = mulnsw %58, %61
%63:i64 = add %56, %62
%64:i32 = var
%65:i32 = mul 19:i32, %64
%66:i64 = sext %65 (hasExternalUses)
%67:i32 = var
%68:i32 = shl %67, 1:i32
%69:i64 = sext %68 (hasExternalUses)
%70:i64 = mulnsw %66, %69
%71:i64 = add %63, %70
%72:i64 = sext %7 (hasExternalUses)
%73:i64 = mulnsw %72, %3
%74:i64 = mulnsw %6, %16
%75:i64 = add %73, %74
%76:i64 = sext %22 (hasExternalUses)
%77:i32 = mul 19:i32, %12
%78:i64 = sext %77
%79:i64 = mulnsw %76, %78
%80:i64 = add %75, %79
%81:i64 = mulnsw %28, %21
%82:i64 = add %80, %81
%83:i64 = sext %37 (hasExternalUses)
%84:i64 = mulnsw %83, %31
%85:i64 = add %82, %84
%86:i64 = mulnsw %43, %36
%87:i64 = add %85, %86
%88:i64 = sext %52 (hasExternalUses)
%89:i64 = mulnsw %88, %46
%90:i64 = add %87, %89
%91:i64 = mulnsw %58, %51
%92:i64 = add %90, %91
%93:i64 = sext %67 (hasExternalUses)
%94:i64 = mulnsw %93, %61
%95:i64 = add %92, %94
%96:i64 = mulnsw %1, %66
%97:i64 = add %95, %96
%98:i64 = mulnsw %3, %16
%99:i32 = mul 19:i32, %5
%100:i64 = sext %99
%101:i64 = mulnsw %100, %24
%102:i64 = add %98, %101
%103:i64 = mulnsw %28, %78
%104:i64 = add %102, %103
%105:i64 = mulnsw %21, %39
%106:i64 = add %104, %105
%107:i64 = mulnsw %43, %31
%108:i64 = add %106, %107
%109:i64 = mulnsw %36, %54
%110:i64 = add %108, %109
%111:i64 = mulnsw %58, %46
%112:i64 = add %110, %111
%113:i64 = mulnsw %51, %69
%114:i64 = add %112, %113
%115:i64 = mulnsw %1, %61
%116:i64 = add %114, %115
%117:i64 = mulnsw %66, %9
%118:i64 = add %116, %117 (hasExternalUses)
%119:i64 = add 33554432:i64, %118 (hasExternalUses)
%120:i64 = ashr %119, 26:i64
%121:i64 = add %97, %120 (hasExternalUses)
%122:i64 = add 16777216:i64, %121 (hasExternalUses)
%123:i64 = ashr %122, 25:i64
%124:i64 = add %71, %123 (hasExternalUses)
%125:i64 = add 33554432:i64, %124
infer %125 (demandedBits=1111111111111111111111111111111111111100000000000000000000000000)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = add 1:i32, %14 (hasExternalUses)
%16:i64 = sext %15 (hasExternalUses)
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i32 = mul 19:i32, %19
%21:i64 = sext %20
%22:i32 = var
%23:i32 = shl %22, 1:i32
%24:i64 = sext %23 (hasExternalUses)
%25:i64 = mulnsw %21, %24
%26:i64 = add %18, %25
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i32 = var
%30:i32 = mul 19:i32, %29
%31:i64 = sext %30 (hasExternalUses)
%32:i64 = mulnsw %28, %31
%33:i64 = add %26, %32
%34:i32 = var
%35:i32 = mul 19:i32, %34
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i32 = shl %37, 1:i32
%39:i64 = sext %38 (hasExternalUses)
%40:i64 = mulnsw %36, %39
%41:i64 = add %33, %40
%42:i32 = var
%43:i64 = sext %42 (hasExternalUses)
%44:i32 = var
%45:i32 = mul 19:i32, %44
%46:i64 = sext %45 (hasExternalUses)
%47:i64 = mulnsw %43, %46
%48:i64 = add %41, %47
%49:i32 = var
%50:i32 = mul 19:i32, %49
%51:i64 = sext %50 (hasExternalUses)
%52:i32 = var
%53:i32 = shl %52, 1:i32
%54:i64 = sext %53 (hasExternalUses)
%55:i64 = mulnsw %51, %54
%56:i64 = add %48, %55
%57:i32 = var
%58:i64 = sext %57 (hasExternalUses)
%59:i32 = var
%60:i32 = mul 19:i32, %59
%61:i64 = sext %60 (hasExternalUses)
%62:i64 = mulnsw %58, %61
%63:i64 = add %56, %62
%64:i32 = var
%65:i32 = mul 19:i32, %64
%66:i64 = sext %65 (hasExternalUses)
%67:i32 = var
%68:i32 = shl %67, 1:i32
%69:i64 = sext %68 (hasExternalUses)
%70:i64 = mulnsw %66, %69
%71:i64 = add %63, %70
%72:i64 = sext %7 (hasExternalUses)
%73:i64 = mulnsw %72, %3
%74:i64 = mulnsw %6, %16
%75:i64 = add %73, %74
%76:i64 = sext %22 (hasExternalUses)
%77:i32 = mul 19:i32, %12
%78:i64 = sext %77
%79:i64 = mulnsw %76, %78
%80:i64 = add %75, %79
%81:i64 = mulnsw %28, %21
%82:i64 = add %80, %81
%83:i64 = sext %37 (hasExternalUses)
%84:i64 = mulnsw %83, %31
%85:i64 = add %82, %84
%86:i64 = mulnsw %43, %36
%87:i64 = add %85, %86
%88:i64 = sext %52 (hasExternalUses)
%89:i64 = mulnsw %88, %46
%90:i64 = add %87, %89
%91:i64 = mulnsw %58, %51
%92:i64 = add %90, %91
%93:i64 = sext %67 (hasExternalUses)
%94:i64 = mulnsw %93, %61
%95:i64 = add %92, %94
%96:i64 = mulnsw %1, %66
%97:i64 = add %95, %96
%98:i64 = mulnsw %3, %16
%99:i32 = mul 19:i32, %5
%100:i64 = sext %99
%101:i64 = mulnsw %100, %24
%102:i64 = add %98, %101
%103:i64 = mulnsw %28, %78
%104:i64 = add %102, %103
%105:i64 = mulnsw %21, %39
%106:i64 = add %104, %105
%107:i64 = mulnsw %43, %31
%108:i64 = add %106, %107
%109:i64 = mulnsw %36, %54
%110:i64 = add %108, %109
%111:i64 = mulnsw %58, %46
%112:i64 = add %110, %111
%113:i64 = mulnsw %51, %69
%114:i64 = add %112, %113
%115:i64 = mulnsw %1, %61
%116:i64 = add %114, %115
%117:i64 = mulnsw %66, %9
%118:i64 = add %116, %117 (hasExternalUses)
%119:i64 = add 33554432:i64, %118 (hasExternalUses)
%120:i64 = ashr %119, 26:i64
%121:i64 = add %97, %120 (hasExternalUses)
%122:i64 = add 16777216:i64, %121 (hasExternalUses)
%123:i64 = ashr %122, 25:i64
%124:i64 = add %71, %123 (hasExternalUses)
%125:i64 = add 33554432:i64, %124 (hasExternalUses)
%126:i64 = ashr %125, 26:i64
infer %126


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i32 = add 1:i32, %19 (hasExternalUses)
%21:i64 = sext %20 (hasExternalUses)
%22:i64 = mulnsw %18, %21
%23:i64 = add %16, %22
infer %23


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i32 = add 1:i32, %19 (hasExternalUses)
%21:i64 = sext %20 (hasExternalUses)
%22:i64 = mulnsw %18, %21
%23:i64 = add %16, %22
%24:i32 = var
%25:i64 = sext %24 (hasExternalUses)
%26:i32 = var
%27:i32 = mul 19:i32, %26
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %25, %28
%30:i64 = add %23, %29
infer %30


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i32 = add 1:i32, %19 (hasExternalUses)
%21:i64 = sext %20 (hasExternalUses)
%22:i64 = mulnsw %18, %21
%23:i64 = add %16, %22
%24:i32 = var
%25:i64 = sext %24 (hasExternalUses)
%26:i32 = var
%27:i32 = mul 19:i32, %26
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %25, %28
%30:i64 = add %23, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = mul 19:i32, %33
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
infer %37


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 6 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i32 = add 1:i32, %19 (hasExternalUses)
%21:i64 = sext %20 (hasExternalUses)
%22:i64 = mulnsw %18, %21
%23:i64 = add %16, %22
%24:i32 = var
%25:i64 = sext %24 (hasExternalUses)
%26:i32 = var
%27:i32 = mul 19:i32, %26
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %25, %28
%30:i64 = add %23, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = mul 19:i32, %33
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i32 = mul 19:i32, %40
%42:i64 = sext %41 (hasExternalUses)
%43:i64 = mulnsw %39, %42
%44:i64 = add %37, %43
infer %44


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 6 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i32 = add 1:i32, %19 (hasExternalUses)
%21:i64 = sext %20 (hasExternalUses)
%22:i64 = mulnsw %18, %21
%23:i64 = add %16, %22
%24:i32 = var
%25:i64 = sext %24 (hasExternalUses)
%26:i32 = var
%27:i32 = mul 19:i32, %26
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %25, %28
%30:i64 = add %23, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = mul 19:i32, %33
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i32 = mul 19:i32, %40
%42:i64 = sext %41 (hasExternalUses)
%43:i64 = mulnsw %39, %42
%44:i64 = add %37, %43
%45:i32 = var
%46:i64 = sext %45 (hasExternalUses)
%47:i32 = var
%48:i32 = mul 19:i32, %47
%49:i64 = sext %48 (hasExternalUses)
%50:i64 = mulnsw %46, %49
%51:i64 = add %44, %50
infer %51


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i32 = add 1:i32, %19 (hasExternalUses)
%21:i64 = sext %20 (hasExternalUses)
%22:i64 = mulnsw %18, %21
%23:i64 = add %16, %22
%24:i32 = var
%25:i64 = sext %24 (hasExternalUses)
%26:i32 = var
%27:i32 = mul 19:i32, %26
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %25, %28
%30:i64 = add %23, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = mul 19:i32, %33
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i32 = mul 19:i32, %40
%42:i64 = sext %41 (hasExternalUses)
%43:i64 = mulnsw %39, %42
%44:i64 = add %37, %43
%45:i32 = var
%46:i64 = sext %45 (hasExternalUses)
%47:i32 = var
%48:i32 = mul 19:i32, %47
%49:i64 = sext %48 (hasExternalUses)
%50:i64 = mulnsw %46, %49
%51:i64 = add %44, %50
%52:i32 = var
%53:i64 = sext %52 (hasExternalUses)
%54:i32 = var
%55:i32 = mul 19:i32, %54
%56:i64 = sext %55 (hasExternalUses)
%57:i64 = mulnsw %53, %56
%58:i64 = add %51, %57
infer %58


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i32 = add 1:i32, %19 (hasExternalUses)
%21:i64 = sext %20 (hasExternalUses)
%22:i64 = mulnsw %18, %21
%23:i64 = add %16, %22
%24:i32 = var
%25:i64 = sext %24 (hasExternalUses)
%26:i32 = var
%27:i32 = mul 19:i32, %26
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %25, %28
%30:i64 = add %23, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = mul 19:i32, %33
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i32 = mul 19:i32, %40
%42:i64 = sext %41 (hasExternalUses)
%43:i64 = mulnsw %39, %42
%44:i64 = add %37, %43
%45:i32 = var
%46:i64 = sext %45 (hasExternalUses)
%47:i32 = var
%48:i32 = mul 19:i32, %47
%49:i64 = sext %48 (hasExternalUses)
%50:i64 = mulnsw %46, %49
%51:i64 = add %44, %50
%52:i32 = var
%53:i64 = sext %52 (hasExternalUses)
%54:i32 = var
%55:i32 = mul 19:i32, %54
%56:i64 = sext %55 (hasExternalUses)
%57:i64 = mulnsw %53, %56
%58:i64 = add %51, %57
%59:i32 = var
%60:i64 = sext %59 (hasExternalUses)
%61:i32 = var
%62:i32 = mul 19:i32, %61
%63:i64 = sext %62 (hasExternalUses)
%64:i64 = mulnsw %60, %63
%65:i64 = add %58, %64
infer %65


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i32 = add 1:i32, %19 (hasExternalUses)
%21:i64 = sext %20 (hasExternalUses)
%22:i64 = mulnsw %18, %21
%23:i64 = add %16, %22
%24:i32 = var
%25:i64 = sext %24 (hasExternalUses)
%26:i32 = var
%27:i32 = mul 19:i32, %26
%28:i64 = sext %27
%29:i64 = mulnsw %25, %28
%30:i64 = add %23, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = mul 19:i32, %33
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i32 = mul 19:i32, %40
%42:i64 = sext %41 (hasExternalUses)
%43:i64 = mulnsw %39, %42
%44:i64 = add %37, %43
%45:i32 = var
%46:i64 = sext %45 (hasExternalUses)
%47:i32 = var
%48:i32 = mul 19:i32, %47
%49:i64 = sext %48 (hasExternalUses)
%50:i64 = mulnsw %46, %49
%51:i64 = add %44, %50
%52:i32 = var
%53:i64 = sext %52 (hasExternalUses)
%54:i32 = var
%55:i32 = mul 19:i32, %54
%56:i64 = sext %55 (hasExternalUses)
%57:i64 = mulnsw %53, %56
%58:i64 = add %51, %57
%59:i32 = var
%60:i64 = sext %59 (hasExternalUses)
%61:i32 = var
%62:i32 = mul 19:i32, %61
%63:i64 = sext %62 (hasExternalUses)
%64:i64 = mulnsw %60, %63
%65:i64 = add %58, %64
%66:i64 = mulnsw %1, %8
%67:i32 = shl %11, 1:i32
%68:i64 = sext %67 (hasExternalUses)
%69:i64 = mulnsw %3, %68
%70:i64 = add %66, %69
%71:i64 = mulnsw %14, %21
%72:i64 = add %70, %71
%73:i32 = mul 19:i32, %17
%74:i64 = sext %73
%75:i32 = shl %24, 1:i32
%76:i64 = sext %75 (hasExternalUses)
%77:i64 = mulnsw %74, %76
%78:i64 = add %72, %77
%79:i64 = mulnsw %32, %28
%80:i64 = add %78, %79
%81:i32 = shl %38, 1:i32
%82:i64 = sext %81 (hasExternalUses)
%83:i64 = mulnsw %35, %82
%84:i64 = add %80, %83
%85:i64 = mulnsw %46, %42
%86:i64 = add %84, %85
%87:i32 = shl %52, 1:i32
%88:i64 = sext %87 (hasExternalUses)
%89:i64 = mulnsw %49, %88
%90:i64 = add %86, %89
%91:i64 = mulnsw %60, %56
%92:i64 = add %90, %91
%93:i32 = shl %5, 1:i32
%94:i64 = sext %93 (hasExternalUses)
%95:i64 = mulnsw %63, %94
%96:i64 = add %92, %95
%97:i64 = mulnsw %12, %8
%98:i64 = mulnsw %3, %21
%99:i64 = add %97, %98
%100:i32 = mul 19:i32, %13
%101:i64 = sext %100
%102:i64 = mulnsw %25, %101
%103:i64 = add %99, %102
%104:i64 = mulnsw %32, %74
%105:i64 = add %103, %104
%106:i64 = mulnsw %39, %28
%107:i64 = add %105, %106
%108:i64 = mulnsw %46, %35
%109:i64 = add %107, %108
%110:i64 = mulnsw %53, %42
%111:i64 = add %109, %110
%112:i64 = mulnsw %60, %49
%113:i64 = add %111, %112
%114:i64 = mulnsw %6, %56
%115:i64 = add %113, %114
%116:i64 = mulnsw %1, %63
%117:i64 = add %115, %116
%118:i64 = mulnsw %8, %21
%119:i32 = mul 19:i32, %2
%120:i64 = sext %119
%121:i64 = mulnsw %120, %76
%122:i64 = add %118, %121
%123:i64 = mulnsw %32, %101
%124:i64 = add %122, %123
%125:i64 = mulnsw %74, %82
%126:i64 = add %124, %125
%127:i64 = mulnsw %46, %28
%128:i64 = add %126, %127
%129:i64 = mulnsw %35, %88
%130:i64 = add %128, %129
%131:i64 = mulnsw %60, %42
%132:i64 = add %130, %131
%133:i64 = mulnsw %49, %94
%134:i64 = add %132, %133
%135:i64 = mulnsw %1, %56
%136:i64 = add %134, %135
%137:i64 = mulnsw %63, %68
%138:i64 = add %136, %137 (hasExternalUses)
%139:i64 = add 33554432:i64, %138 (hasExternalUses)
%140:i64 = ashr %139, 26:i64
%141:i64 = add %117, %140 (hasExternalUses)
%142:i64 = add 16777216:i64, %141 (hasExternalUses)
%143:i64 = ashr %142, 25:i64
%144:i64 = add %96, %143 (hasExternalUses)
%145:i64 = add 33554432:i64, %144 (hasExternalUses)
%146:i64 = ashr %145, 26:i64
%147:i64 = add %65, %146
infer %147


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = add 1:i32, %14 (hasExternalUses)
%16:i64 = sext %15 (hasExternalUses)
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i32 = mul 19:i32, %19
%21:i64 = sext %20
%22:i32 = var
%23:i32 = shl %22, 1:i32
%24:i64 = sext %23 (hasExternalUses)
%25:i64 = mulnsw %21, %24
%26:i64 = add %18, %25
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i32 = var
%30:i32 = mul 19:i32, %29
%31:i64 = sext %30 (hasExternalUses)
%32:i64 = mulnsw %28, %31
%33:i64 = add %26, %32
%34:i32 = var
%35:i32 = mul 19:i32, %34
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i32 = shl %37, 1:i32
%39:i64 = sext %38 (hasExternalUses)
%40:i64 = mulnsw %36, %39
%41:i64 = add %33, %40
%42:i32 = var
%43:i64 = sext %42 (hasExternalUses)
%44:i32 = var
%45:i32 = mul 19:i32, %44
%46:i64 = sext %45 (hasExternalUses)
%47:i64 = mulnsw %43, %46
%48:i64 = add %41, %47
%49:i32 = var
%50:i32 = mul 19:i32, %49
%51:i64 = sext %50 (hasExternalUses)
%52:i32 = var
%53:i32 = shl %52, 1:i32
%54:i64 = sext %53 (hasExternalUses)
%55:i64 = mulnsw %51, %54
%56:i64 = add %48, %55
%57:i32 = var
%58:i64 = sext %57 (hasExternalUses)
%59:i32 = var
%60:i32 = mul 19:i32, %59
%61:i64 = sext %60 (hasExternalUses)
%62:i64 = mulnsw %58, %61
%63:i64 = add %56, %62
%64:i32 = var
%65:i32 = mul 19:i32, %64
%66:i64 = sext %65 (hasExternalUses)
%67:i32 = var
%68:i32 = shl %67, 1:i32
%69:i64 = sext %68 (hasExternalUses)
%70:i64 = mulnsw %66, %69
%71:i64 = add %63, %70
%72:i64 = sext %7 (hasExternalUses)
%73:i64 = mulnsw %72, %3
%74:i64 = mulnsw %6, %16
%75:i64 = add %73, %74
%76:i64 = sext %22 (hasExternalUses)
%77:i32 = mul 19:i32, %12
%78:i64 = sext %77
%79:i64 = mulnsw %76, %78
%80:i64 = add %75, %79
%81:i64 = mulnsw %28, %21
%82:i64 = add %80, %81
%83:i64 = sext %37 (hasExternalUses)
%84:i64 = mulnsw %83, %31
%85:i64 = add %82, %84
%86:i64 = mulnsw %43, %36
%87:i64 = add %85, %86
%88:i64 = sext %52 (hasExternalUses)
%89:i64 = mulnsw %88, %46
%90:i64 = add %87, %89
%91:i64 = mulnsw %58, %51
%92:i64 = add %90, %91
%93:i64 = sext %67 (hasExternalUses)
%94:i64 = mulnsw %93, %61
%95:i64 = add %92, %94
%96:i64 = mulnsw %1, %66
%97:i64 = add %95, %96
%98:i64 = mulnsw %3, %16
%99:i32 = mul 19:i32, %5
%100:i64 = sext %99
%101:i64 = mulnsw %100, %24
%102:i64 = add %98, %101
%103:i64 = mulnsw %28, %78
%104:i64 = add %102, %103
%105:i64 = mulnsw %21, %39
%106:i64 = add %104, %105
%107:i64 = mulnsw %43, %31
%108:i64 = add %106, %107
%109:i64 = mulnsw %36, %54
%110:i64 = add %108, %109
%111:i64 = mulnsw %58, %46
%112:i64 = add %110, %111
%113:i64 = mulnsw %51, %69
%114:i64 = add %112, %113
%115:i64 = mulnsw %1, %61
%116:i64 = add %114, %115
%117:i64 = mulnsw %66, %9
%118:i64 = add %116, %117 (hasExternalUses)
%119:i64 = add 33554432:i64, %118 (hasExternalUses)
%120:i64 = ashr %119, 26:i64
%121:i64 = add %97, %120 (hasExternalUses)
%122:i64 = add 16777216:i64, %121 (hasExternalUses)
%123:i64 = ashr %122, 25:i64
%124:i64 = add %71, %123 (hasExternalUses)
%125:i64 = add 33554432:i64, %124 (hasExternalUses)
%126:i64 = and 4227858432:i64, %125
infer %126 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
ConstantSynthesis: solver returns error on first query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = add 1:i32, %14 (hasExternalUses)
%16:i64 = sext %15 (hasExternalUses)
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i32 = mul 19:i32, %19
%21:i64 = sext %20
%22:i32 = var
%23:i32 = shl %22, 1:i32
%24:i64 = sext %23 (hasExternalUses)
%25:i64 = mulnsw %21, %24
%26:i64 = add %18, %25
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i32 = var
%30:i32 = mul 19:i32, %29
%31:i64 = sext %30 (hasExternalUses)
%32:i64 = mulnsw %28, %31
%33:i64 = add %26, %32
%34:i32 = var
%35:i32 = mul 19:i32, %34
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i32 = shl %37, 1:i32
%39:i64 = sext %38 (hasExternalUses)
%40:i64 = mulnsw %36, %39
%41:i64 = add %33, %40
%42:i32 = var
%43:i64 = sext %42 (hasExternalUses)
%44:i32 = var
%45:i32 = mul 19:i32, %44
%46:i64 = sext %45 (hasExternalUses)
%47:i64 = mulnsw %43, %46
%48:i64 = add %41, %47
%49:i32 = var
%50:i32 = mul 19:i32, %49
%51:i64 = sext %50 (hasExternalUses)
%52:i32 = var
%53:i32 = shl %52, 1:i32
%54:i64 = sext %53 (hasExternalUses)
%55:i64 = mulnsw %51, %54
%56:i64 = add %48, %55
%57:i32 = var
%58:i64 = sext %57 (hasExternalUses)
%59:i32 = var
%60:i32 = mul 19:i32, %59
%61:i64 = sext %60 (hasExternalUses)
%62:i64 = mulnsw %58, %61
%63:i64 = add %56, %62
%64:i32 = var
%65:i32 = mul 19:i32, %64
%66:i64 = sext %65 (hasExternalUses)
%67:i32 = var
%68:i32 = shl %67, 1:i32
%69:i64 = sext %68 (hasExternalUses)
%70:i64 = mulnsw %66, %69
%71:i64 = add %63, %70
%72:i64 = sext %7 (hasExternalUses)
%73:i64 = mulnsw %72, %3
%74:i64 = mulnsw %6, %16
%75:i64 = add %73, %74
%76:i64 = sext %22 (hasExternalUses)
%77:i32 = mul 19:i32, %12
%78:i64 = sext %77
%79:i64 = mulnsw %76, %78
%80:i64 = add %75, %79
%81:i64 = mulnsw %28, %21
%82:i64 = add %80, %81
%83:i64 = sext %37 (hasExternalUses)
%84:i64 = mulnsw %83, %31
%85:i64 = add %82, %84
%86:i64 = mulnsw %43, %36
%87:i64 = add %85, %86
%88:i64 = sext %52 (hasExternalUses)
%89:i64 = mulnsw %88, %46
%90:i64 = add %87, %89
%91:i64 = mulnsw %58, %51
%92:i64 = add %90, %91
%93:i64 = sext %67 (hasExternalUses)
%94:i64 = mulnsw %93, %61
%95:i64 = add %92, %94
%96:i64 = mulnsw %1, %66
%97:i64 = add %95, %96
%98:i64 = mulnsw %3, %16
%99:i32 = mul 19:i32, %5
%100:i64 = sext %99
%101:i64 = mulnsw %100, %24
%102:i64 = add %98, %101
%103:i64 = mulnsw %28, %78
%104:i64 = add %102, %103
%105:i64 = mulnsw %21, %39
%106:i64 = add %104, %105
%107:i64 = mulnsw %43, %31
%108:i64 = add %106, %107
%109:i64 = mulnsw %36, %54
%110:i64 = add %108, %109
%111:i64 = mulnsw %58, %46
%112:i64 = add %110, %111
%113:i64 = mulnsw %51, %69
%114:i64 = add %112, %113
%115:i64 = mulnsw %1, %61
%116:i64 = add %114, %115
%117:i64 = mulnsw %66, %9
%118:i64 = add %116, %117 (hasExternalUses)
%119:i64 = add 33554432:i64, %118 (hasExternalUses)
%120:i64 = ashr %119, 26:i64
%121:i64 = add %97, %120 (hasExternalUses)
%122:i64 = add 16777216:i64, %121 (hasExternalUses)
%123:i64 = ashr %122, 25:i64
%124:i64 = add %71, %123
%125:i64 = add 33554432:i64, %124 (hasExternalUses)
%126:i64 = and 4227858432:i64, %125
%127:i64 = sub %124, %126
infer %127 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i32 = mul 19:i32, %0
%2:i64 = sext %1 (hasExternalUses)
%3:i32 = var
%4:i32 = shl %3, 1:i32
%5:i64 = sext %4 (hasExternalUses)
%6:i64 = mulnsw %2, %5

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %26, %28
%30:i64 = add %24, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = shl %33, 1:i32
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i32 = add 1:i32, %40 (hasExternalUses)
%42:i64 = sext %41 (hasExternalUses)
%43:i64 = mulnsw %39, %42
%44:i64 = add %37, %43
%45:i32 = var
%46:i32 = mul 19:i32, %45
%47:i64 = sext %46 (hasExternalUses)
%48:i32 = var
%49:i32 = shl %48, 1:i32
%50:i64 = sext %49 (hasExternalUses)
%51:i64 = mulnsw %47, %50
%52:i64 = add %44, %51
%53:i32 = var
%54:i64 = sext %53 (hasExternalUses)
%55:i32 = var
%56:i32 = mul 19:i32, %55
%57:i64 = sext %56 (hasExternalUses)
%58:i64 = mulnsw %54, %57
%59:i64 = add %52, %58
%60:i32 = var
%61:i32 = mul 19:i32, %60
%62:i64 = sext %61 (hasExternalUses)
%63:i32 = var
%64:i32 = shl %63, 1:i32
%65:i64 = sext %64 (hasExternalUses)
%66:i64 = mulnsw %62, %65
%67:i64 = add %59, %66
%68:i64 = mulnsw %13, %6
%69:i64 = sext %7 (hasExternalUses)
%70:i64 = mulnsw %69, %3
%71:i64 = add %68, %70
%72:i64 = sext %20 (hasExternalUses)
%73:i64 = mulnsw %72, %15
%74:i64 = add %71, %73
%75:i64 = mulnsw %26, %19
%76:i64 = add %74, %75
%77:i64 = sext %33 (hasExternalUses)
%78:i64 = mulnsw %77, %28
%79:i64 = add %76, %78
%80:i64 = mulnsw %32, %42
%81:i64 = add %79, %80
%82:i64 = sext %48 (hasExternalUses)
%83:i32 = mul 19:i32, %38
%84:i64 = sext %83 (hasExternalUses)
%85:i64 = mulnsw %82, %84
%86:i64 = add %81, %85
%87:i64 = mulnsw %54, %47
%88:i64 = add %86, %87
%89:i64 = sext %63 (hasExternalUses)
%90:i64 = mulnsw %89, %57
%91:i64 = add %88, %90
%92:i64 = mulnsw %1, %62
%93:i64 = add %91, %92
%94:i64 = mulnsw %13, %3
%95:i64 = mulnsw %6, %22
%96:i64 = add %94, %95
%97:i64 = mulnsw %26, %15
%98:i64 = add %96, %97
%99:i64 = mulnsw %19, %35
%100:i64 = add %98, %99
%101:i64 = mulnsw %28, %42
%102:i64 = add %100, %101
%103:i32 = mul 19:i32, %31
%104:i64 = sext %103 (hasExternalUses)
%105:i64 = mulnsw %104, %50
%106:i64 = add %102, %105
%107:i64 = mulnsw %54, %84
%108:i64 = add %106, %107
%109:i64 = mulnsw %47, %65
%110:i64 = add %108, %109
%111:i64 = mulnsw %1, %57
%112:i64 = add %110, %111
%113:i64 = mulnsw %62, %9
%114:i64 = add %112, %113 (hasExternalUses)
%115:i64 = add 33554432:i64, %114 (hasExternalUses)
%116:i64 = ashr %115, 26:i64
%117:i64 = add %93, %116 (hasExternalUses)
%118:i64 = add 16777216:i64, %117 (hasExternalUses)
%119:i64 = ashr %118, 25:i64
%120:i64 = add %67, %119 (hasExternalUses)
%121:i64 = add 33554432:i64, %120
infer %121 (demandedBits=1111111111111111111111111111111111111100000000000000000000000000)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %26, %28
%30:i64 = add %24, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = shl %33, 1:i32
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i32 = add 1:i32, %40 (hasExternalUses)
%42:i64 = sext %41 (hasExternalUses)
%43:i64 = mulnsw %39, %42
%44:i64 = add %37, %43
%45:i32 = var
%46:i32 = mul 19:i32, %45
%47:i64 = sext %46 (hasExternalUses)
%48:i32 = var
%49:i32 = shl %48, 1:i32
%50:i64 = sext %49 (hasExternalUses)
%51:i64 = mulnsw %47, %50
%52:i64 = add %44, %51
%53:i32 = var
%54:i64 = sext %53 (hasExternalUses)
%55:i32 = var
%56:i32 = mul 19:i32, %55
%57:i64 = sext %56 (hasExternalUses)
%58:i64 = mulnsw %54, %57
%59:i64 = add %52, %58
%60:i32 = var
%61:i32 = mul 19:i32, %60
%62:i64 = sext %61 (hasExternalUses)
%63:i32 = var
%64:i32 = shl %63, 1:i32
%65:i64 = sext %64 (hasExternalUses)
%66:i64 = mulnsw %62, %65
%67:i64 = add %59, %66
%68:i64 = mulnsw %13, %6
%69:i64 = sext %7 (hasExternalUses)
%70:i64 = mulnsw %69, %3
%71:i64 = add %68, %70
%72:i64 = sext %20 (hasExternalUses)
%73:i64 = mulnsw %72, %15
%74:i64 = add %71, %73
%75:i64 = mulnsw %26, %19
%76:i64 = add %74, %75
%77:i64 = sext %33 (hasExternalUses)
%78:i64 = mulnsw %77, %28
%79:i64 = add %76, %78
%80:i64 = mulnsw %32, %42
%81:i64 = add %79, %80
%82:i64 = sext %48 (hasExternalUses)
%83:i32 = mul 19:i32, %38
%84:i64 = sext %83 (hasExternalUses)
%85:i64 = mulnsw %82, %84
%86:i64 = add %81, %85
%87:i64 = mulnsw %54, %47
%88:i64 = add %86, %87
%89:i64 = sext %63 (hasExternalUses)
%90:i64 = mulnsw %89, %57
%91:i64 = add %88, %90
%92:i64 = mulnsw %1, %62
%93:i64 = add %91, %92
%94:i64 = mulnsw %13, %3
%95:i64 = mulnsw %6, %22
%96:i64 = add %94, %95
%97:i64 = mulnsw %26, %15
%98:i64 = add %96, %97
%99:i64 = mulnsw %19, %35
%100:i64 = add %98, %99
%101:i64 = mulnsw %28, %42
%102:i64 = add %100, %101
%103:i32 = mul 19:i32, %31
%104:i64 = sext %103 (hasExternalUses)
%105:i64 = mulnsw %104, %50
%106:i64 = add %102, %105
%107:i64 = mulnsw %54, %84
%108:i64 = add %106, %107
%109:i64 = mulnsw %47, %65
%110:i64 = add %108, %109
%111:i64 = mulnsw %1, %57
%112:i64 = add %110, %111
%113:i64 = mulnsw %62, %9
%114:i64 = add %112, %113 (hasExternalUses)
%115:i64 = add 33554432:i64, %114 (hasExternalUses)
%116:i64 = ashr %115, 26:i64
%117:i64 = add %93, %116 (hasExternalUses)
%118:i64 = add 16777216:i64, %117 (hasExternalUses)
%119:i64 = ashr %118, 25:i64
%120:i64 = add %67, %119 (hasExternalUses)
%121:i64 = add 33554432:i64, %120 (hasExternalUses)
%122:i64 = ashr %121, 26:i64
infer %122


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i64 = mulnsw %30, %32
%34:i64 = add %28, %33
infer %34


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i64 = mulnsw %30, %32
%34:i64 = add %28, %33
%35:i32 = var
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i64 = sext %37 (hasExternalUses)
%39:i64 = mulnsw %36, %38
%40:i64 = add %34, %39
infer %40


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i64 = mulnsw %30, %32
%34:i64 = add %28, %33
%35:i32 = var
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i64 = sext %37 (hasExternalUses)
%39:i64 = mulnsw %36, %38
%40:i64 = add %34, %39
%41:i32 = var
%42:i64 = sext %41 (hasExternalUses)
%43:i32 = var
%44:i32 = add 1:i32, %43 (hasExternalUses)
%45:i64 = sext %44 (hasExternalUses)
%46:i64 = mulnsw %42, %45
%47:i64 = add %40, %46
infer %47


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i64 = mulnsw %30, %32
%34:i64 = add %28, %33
%35:i32 = var
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i64 = sext %37 (hasExternalUses)
%39:i64 = mulnsw %36, %38
%40:i64 = add %34, %39
%41:i32 = var
%42:i64 = sext %41 (hasExternalUses)
%43:i32 = var
%44:i32 = add 1:i32, %43 (hasExternalUses)
%45:i64 = sext %44 (hasExternalUses)
%46:i64 = mulnsw %42, %45
%47:i64 = add %40, %46
%48:i32 = var
%49:i64 = sext %48 (hasExternalUses)
%50:i32 = var
%51:i32 = mul 19:i32, %50
%52:i64 = sext %51 (hasExternalUses)
%53:i64 = mulnsw %49, %52
%54:i64 = add %47, %53
infer %54


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i64 = mulnsw %30, %32
%34:i64 = add %28, %33
%35:i32 = var
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i64 = sext %37 (hasExternalUses)
%39:i64 = mulnsw %36, %38
%40:i64 = add %34, %39
%41:i32 = var
%42:i64 = sext %41 (hasExternalUses)
%43:i32 = var
%44:i32 = add 1:i32, %43 (hasExternalUses)
%45:i64 = sext %44 (hasExternalUses)
%46:i64 = mulnsw %42, %45
%47:i64 = add %40, %46
%48:i32 = var
%49:i64 = sext %48 (hasExternalUses)
%50:i32 = var
%51:i32 = mul 19:i32, %50
%52:i64 = sext %51 (hasExternalUses)
%53:i64 = mulnsw %49, %52
%54:i64 = add %47, %53
%55:i32 = var
%56:i64 = sext %55 (hasExternalUses)
%57:i32 = var
%58:i32 = mul 19:i32, %57
%59:i64 = sext %58 (hasExternalUses)
%60:i64 = mulnsw %56, %59
%61:i64 = add %54, %60
infer %61


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i64 = mulnsw %30, %32
%34:i64 = add %28, %33
%35:i32 = var
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i64 = sext %37 (hasExternalUses)
%39:i64 = mulnsw %36, %38
%40:i64 = add %34, %39
%41:i32 = var
%42:i64 = sext %41 (hasExternalUses)
%43:i32 = var
%44:i32 = add 1:i32, %43 (hasExternalUses)
%45:i64 = sext %44 (hasExternalUses)
%46:i64 = mulnsw %42, %45
%47:i64 = add %40, %46
%48:i32 = var
%49:i64 = sext %48 (hasExternalUses)
%50:i32 = var
%51:i32 = mul 19:i32, %50
%52:i64 = sext %51 (hasExternalUses)
%53:i64 = mulnsw %49, %52
%54:i64 = add %47, %53
%55:i32 = var
%56:i64 = sext %55 (hasExternalUses)
%57:i32 = var
%58:i32 = mul 19:i32, %57
%59:i64 = sext %58 (hasExternalUses)
%60:i64 = mulnsw %56, %59
%61:i64 = add %54, %60
%62:i64 = mulnsw %1, %8
%63:i32 = shl %11, 1:i32
%64:i64 = sext %63 (hasExternalUses)
%65:i64 = mulnsw %3, %64
%66:i64 = add %62, %65
%67:i64 = mulnsw %18, %14
%68:i64 = add %66, %67
%69:i32 = shl %23, 1:i32
%70:i64 = sext %69 (hasExternalUses)
%71:i64 = mulnsw %20, %70
%72:i64 = add %68, %71
%73:i64 = mulnsw %30, %26
%74:i64 = add %72, %73
%75:i32 = shl %35, 1:i32
%76:i64 = sext %75 (hasExternalUses)
%77:i64 = mulnsw %32, %76
%78:i64 = add %74, %77
%79:i64 = mulnsw %38, %45
%80:i64 = add %78, %79
%81:i32 = mul 19:i32, %41
%82:i64 = sext %81 (hasExternalUses)
%83:i32 = shl %48, 1:i32
%84:i64 = sext %83 (hasExternalUses)
%85:i64 = mulnsw %82, %84
%86:i64 = add %80, %85
%87:i64 = mulnsw %56, %52
%88:i64 = add %86, %87
%89:i32 = shl %5, 1:i32
%90:i64 = sext %89 (hasExternalUses)
%91:i64 = mulnsw %59, %90
%92:i64 = add %88, %91
%93:i64 = mulnsw %18, %3
%94:i64 = mulnsw %12, %8
%95:i64 = add %93, %94
%96:i64 = mulnsw %24, %14
%97:i64 = add %95, %96
%98:i64 = mulnsw %30, %20
%99:i64 = add %97, %98
%100:i64 = mulnsw %36, %26
%101:i64 = add %99, %100
%102:i64 = mulnsw %32, %45
%103:i64 = add %101, %102
%104:i32 = mul 19:i32, %37
%105:i64 = sext %104 (hasExternalUses)
%106:i64 = mulnsw %49, %105
%107:i64 = add %103, %106
%108:i64 = mulnsw %56, %82
%109:i64 = add %107, %108
%110:i64 = mulnsw %6, %52
%111:i64 = add %109, %110
%112:i64 = mulnsw %1, %59
%113:i64 = add %111, %112
%114:i64 = mulnsw %18, %8
%115:i64 = mulnsw %3, %70
%116:i64 = add %114, %115
%117:i64 = mulnsw %30, %14
%118:i64 = add %116, %117
%119:i64 = mulnsw %20, %76
%120:i64 = add %118, %119
%121:i64 = mulnsw %26, %45
%122:i64 = add %120, %121
%123:i32 = mul 19:i32, %31
%124:i64 = sext %123 (hasExternalUses)
%125:i64 = mulnsw %124, %84
%126:i64 = add %122, %125
%127:i64 = mulnsw %56, %105
%128:i64 = add %126, %127
%129:i64 = mulnsw %82, %90
%130:i64 = add %128, %129
%131:i64 = mulnsw %1, %52
%132:i64 = add %130, %131
%133:i64 = mulnsw %59, %64
%134:i64 = add %132, %133 (hasExternalUses)
%135:i64 = add 33554432:i64, %134 (hasExternalUses)
%136:i64 = ashr %135, 26:i64
%137:i64 = add %113, %136 (hasExternalUses)
%138:i64 = add 16777216:i64, %137 (hasExternalUses)
%139:i64 = ashr %138, 25:i64
%140:i64 = add %92, %139 (hasExternalUses)
%141:i64 = add 33554432:i64, %140 (hasExternalUses)
%142:i64 = ashr %141, 26:i64
%143:i64 = add %61, %142
infer %143


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i32 = mul 19:i32, %0
%2:i64 = sext %1

Cost = 2
verification query failed!
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %26, %28
%30:i64 = add %24, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = shl %33, 1:i32
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i32 = add 1:i32, %40 (hasExternalUses)
%42:i64 = sext %41 (hasExternalUses)
%43:i64 = mulnsw %39, %42
%44:i64 = add %37, %43
%45:i32 = var
%46:i32 = mul 19:i32, %45
%47:i64 = sext %46 (hasExternalUses)
%48:i32 = var
%49:i32 = shl %48, 1:i32
%50:i64 = sext %49 (hasExternalUses)
%51:i64 = mulnsw %47, %50
%52:i64 = add %44, %51
%53:i32 = var
%54:i64 = sext %53 (hasExternalUses)
%55:i32 = var
%56:i32 = mul 19:i32, %55
%57:i64 = sext %56 (hasExternalUses)
%58:i64 = mulnsw %54, %57
%59:i64 = add %52, %58
%60:i32 = var
%61:i32 = mul 19:i32, %60
%62:i64 = sext %61 (hasExternalUses)
%63:i32 = var
%64:i32 = shl %63, 1:i32
%65:i64 = sext %64 (hasExternalUses)
%66:i64 = mulnsw %62, %65
%67:i64 = add %59, %66
%68:i64 = mulnsw %13, %6
%69:i64 = sext %7 (hasExternalUses)
%70:i64 = mulnsw %69, %3
%71:i64 = add %68, %70
%72:i64 = sext %20 (hasExternalUses)
%73:i64 = mulnsw %72, %15
%74:i64 = add %71, %73
%75:i64 = mulnsw %26, %19
%76:i64 = add %74, %75
%77:i64 = sext %33 (hasExternalUses)
%78:i64 = mulnsw %77, %28
%79:i64 = add %76, %78
%80:i64 = mulnsw %32, %42
%81:i64 = add %79, %80
%82:i64 = sext %48 (hasExternalUses)
%83:i32 = mul 19:i32, %38
%84:i64 = sext %83 (hasExternalUses)
%85:i64 = mulnsw %82, %84
%86:i64 = add %81, %85
%87:i64 = mulnsw %54, %47
%88:i64 = add %86, %87
%89:i64 = sext %63 (hasExternalUses)
%90:i64 = mulnsw %89, %57
%91:i64 = add %88, %90
%92:i64 = mulnsw %1, %62
%93:i64 = add %91, %92
%94:i64 = mulnsw %13, %3
%95:i64 = mulnsw %6, %22
%96:i64 = add %94, %95
%97:i64 = mulnsw %26, %15
%98:i64 = add %96, %97
%99:i64 = mulnsw %19, %35
%100:i64 = add %98, %99
%101:i64 = mulnsw %28, %42
%102:i64 = add %100, %101
%103:i32 = mul 19:i32, %31
%104:i64 = sext %103 (hasExternalUses)
%105:i64 = mulnsw %104, %50
%106:i64 = add %102, %105
%107:i64 = mulnsw %54, %84
%108:i64 = add %106, %107
%109:i64 = mulnsw %47, %65
%110:i64 = add %108, %109
%111:i64 = mulnsw %1, %57
%112:i64 = add %110, %111
%113:i64 = mulnsw %62, %9
%114:i64 = add %112, %113 (hasExternalUses)
%115:i64 = add 33554432:i64, %114 (hasExternalUses)
%116:i64 = ashr %115, 26:i64
%117:i64 = add %93, %116 (hasExternalUses)
%118:i64 = add 16777216:i64, %117 (hasExternalUses)
%119:i64 = ashr %118, 25:i64
%120:i64 = add %67, %119 (hasExternalUses)
%121:i64 = add 33554432:i64, %120 (hasExternalUses)
%122:i64 = and 4227858432:i64, %121
infer %122 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
ConstantSynthesis: solver returns error on first query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %26, %28
%30:i64 = add %24, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = shl %33, 1:i32
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i32 = add 1:i32, %40 (hasExternalUses)
%42:i64 = sext %41 (hasExternalUses)
%43:i64 = mulnsw %39, %42
%44:i64 = add %37, %43
%45:i32 = var
%46:i32 = mul 19:i32, %45
%47:i64 = sext %46 (hasExternalUses)
%48:i32 = var
%49:i32 = shl %48, 1:i32
%50:i64 = sext %49 (hasExternalUses)
%51:i64 = mulnsw %47, %50
%52:i64 = add %44, %51
%53:i32 = var
%54:i64 = sext %53 (hasExternalUses)
%55:i32 = var
%56:i32 = mul 19:i32, %55
%57:i64 = sext %56 (hasExternalUses)
%58:i64 = mulnsw %54, %57
%59:i64 = add %52, %58
%60:i32 = var
%61:i32 = mul 19:i32, %60
%62:i64 = sext %61 (hasExternalUses)
%63:i32 = var
%64:i32 = shl %63, 1:i32
%65:i64 = sext %64 (hasExternalUses)
%66:i64 = mulnsw %62, %65
%67:i64 = add %59, %66
%68:i64 = mulnsw %13, %6
%69:i64 = sext %7 (hasExternalUses)
%70:i64 = mulnsw %69, %3
%71:i64 = add %68, %70
%72:i64 = sext %20 (hasExternalUses)
%73:i64 = mulnsw %72, %15
%74:i64 = add %71, %73
%75:i64 = mulnsw %26, %19
%76:i64 = add %74, %75
%77:i64 = sext %33 (hasExternalUses)
%78:i64 = mulnsw %77, %28
%79:i64 = add %76, %78
%80:i64 = mulnsw %32, %42
%81:i64 = add %79, %80
%82:i64 = sext %48 (hasExternalUses)
%83:i32 = mul 19:i32, %38
%84:i64 = sext %83 (hasExternalUses)
%85:i64 = mulnsw %82, %84
%86:i64 = add %81, %85
%87:i64 = mulnsw %54, %47
%88:i64 = add %86, %87
%89:i64 = sext %63 (hasExternalUses)
%90:i64 = mulnsw %89, %57
%91:i64 = add %88, %90
%92:i64 = mulnsw %1, %62
%93:i64 = add %91, %92
%94:i64 = mulnsw %13, %3
%95:i64 = mulnsw %6, %22
%96:i64 = add %94, %95
%97:i64 = mulnsw %26, %15
%98:i64 = add %96, %97
%99:i64 = mulnsw %19, %35
%100:i64 = add %98, %99
%101:i64 = mulnsw %28, %42
%102:i64 = add %100, %101
%103:i32 = mul 19:i32, %31
%104:i64 = sext %103 (hasExternalUses)
%105:i64 = mulnsw %104, %50
%106:i64 = add %102, %105
%107:i64 = mulnsw %54, %84
%108:i64 = add %106, %107
%109:i64 = mulnsw %47, %65
%110:i64 = add %108, %109
%111:i64 = mulnsw %1, %57
%112:i64 = add %110, %111
%113:i64 = mulnsw %62, %9
%114:i64 = add %112, %113 (hasExternalUses)
%115:i64 = add 33554432:i64, %114 (hasExternalUses)
%116:i64 = ashr %115, 26:i64
%117:i64 = add %93, %116 (hasExternalUses)
%118:i64 = add 16777216:i64, %117 (hasExternalUses)
%119:i64 = ashr %118, 25:i64
%120:i64 = add %67, %119
%121:i64 = add 33554432:i64, %120 (hasExternalUses)
%122:i64 = and 4227858432:i64, %121
%123:i64 = sub %120, %122
infer %123 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i32 = mul 19:i32, %0
%2:i64 = sext %1 (hasExternalUses)
%3:i32 = var
%4:i32 = shl %3, 1:i32
%5:i64 = sext %4 (hasExternalUses)
%6:i64 = mulnsw %2, %5

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i32 = add 1:i32, %19 (hasExternalUses)
%21:i64 = sext %20 (hasExternalUses)
%22:i64 = mulnsw %18, %21
%23:i64 = add %16, %22
%24:i32 = var
%25:i64 = sext %24 (hasExternalUses)
%26:i32 = var
%27:i32 = mul 19:i32, %26
%28:i64 = sext %27
%29:i64 = mulnsw %25, %28
%30:i64 = add %23, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = mul 19:i32, %33
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i32 = mul 19:i32, %40
%42:i64 = sext %41 (hasExternalUses)
%43:i64 = mulnsw %39, %42
%44:i64 = add %37, %43
%45:i32 = var
%46:i64 = sext %45 (hasExternalUses)
%47:i32 = var
%48:i32 = mul 19:i32, %47
%49:i64 = sext %48 (hasExternalUses)
%50:i64 = mulnsw %46, %49
%51:i64 = add %44, %50
%52:i32 = var
%53:i64 = sext %52 (hasExternalUses)
%54:i32 = var
%55:i32 = mul 19:i32, %54
%56:i64 = sext %55 (hasExternalUses)
%57:i64 = mulnsw %53, %56
%58:i64 = add %51, %57
%59:i32 = var
%60:i64 = sext %59 (hasExternalUses)
%61:i32 = var
%62:i32 = mul 19:i32, %61
%63:i64 = sext %62 (hasExternalUses)
%64:i64 = mulnsw %60, %63
%65:i64 = add %58, %64
%66:i64 = mulnsw %1, %8
%67:i32 = shl %11, 1:i32
%68:i64 = sext %67 (hasExternalUses)
%69:i64 = mulnsw %3, %68
%70:i64 = add %66, %69
%71:i64 = mulnsw %14, %21
%72:i64 = add %70, %71
%73:i32 = mul 19:i32, %17
%74:i64 = sext %73
%75:i32 = shl %24, 1:i32
%76:i64 = sext %75 (hasExternalUses)
%77:i64 = mulnsw %74, %76
%78:i64 = add %72, %77
%79:i64 = mulnsw %32, %28
%80:i64 = add %78, %79
%81:i32 = shl %38, 1:i32
%82:i64 = sext %81 (hasExternalUses)
%83:i64 = mulnsw %35, %82
%84:i64 = add %80, %83
%85:i64 = mulnsw %46, %42
%86:i64 = add %84, %85
%87:i32 = shl %52, 1:i32
%88:i64 = sext %87 (hasExternalUses)
%89:i64 = mulnsw %49, %88
%90:i64 = add %86, %89
%91:i64 = mulnsw %60, %56
%92:i64 = add %90, %91
%93:i32 = shl %5, 1:i32
%94:i64 = sext %93 (hasExternalUses)
%95:i64 = mulnsw %63, %94
%96:i64 = add %92, %95
%97:i64 = mulnsw %12, %8
%98:i64 = mulnsw %3, %21
%99:i64 = add %97, %98
%100:i32 = mul 19:i32, %13
%101:i64 = sext %100
%102:i64 = mulnsw %25, %101
%103:i64 = add %99, %102
%104:i64 = mulnsw %32, %74
%105:i64 = add %103, %104
%106:i64 = mulnsw %39, %28
%107:i64 = add %105, %106
%108:i64 = mulnsw %46, %35
%109:i64 = add %107, %108
%110:i64 = mulnsw %53, %42
%111:i64 = add %109, %110
%112:i64 = mulnsw %60, %49
%113:i64 = add %111, %112
%114:i64 = mulnsw %6, %56
%115:i64 = add %113, %114
%116:i64 = mulnsw %1, %63
%117:i64 = add %115, %116
%118:i64 = mulnsw %8, %21
%119:i32 = mul 19:i32, %2
%120:i64 = sext %119
%121:i64 = mulnsw %120, %76
%122:i64 = add %118, %121
%123:i64 = mulnsw %32, %101
%124:i64 = add %122, %123
%125:i64 = mulnsw %74, %82
%126:i64 = add %124, %125
%127:i64 = mulnsw %46, %28
%128:i64 = add %126, %127
%129:i64 = mulnsw %35, %88
%130:i64 = add %128, %129
%131:i64 = mulnsw %60, %42
%132:i64 = add %130, %131
%133:i64 = mulnsw %49, %94
%134:i64 = add %132, %133
%135:i64 = mulnsw %1, %56
%136:i64 = add %134, %135
%137:i64 = mulnsw %63, %68
%138:i64 = add %136, %137 (hasExternalUses)
%139:i64 = add 33554432:i64, %138 (hasExternalUses)
%140:i64 = ashr %139, 26:i64
%141:i64 = add %117, %140 (hasExternalUses)
%142:i64 = add 16777216:i64, %141 (hasExternalUses)
%143:i64 = ashr %142, 25:i64
%144:i64 = add %96, %143 (hasExternalUses)
%145:i64 = add 33554432:i64, %144 (hasExternalUses)
%146:i64 = ashr %145, 26:i64
%147:i64 = add %65, %146 (hasExternalUses)
%148:i64 = add 16777216:i64, %147
infer %148 (demandedBits=1111111111111111111111111111111111111110000000000000000000000000)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i32 = add 1:i32, %19 (hasExternalUses)
%21:i64 = sext %20 (hasExternalUses)
%22:i64 = mulnsw %18, %21
%23:i64 = add %16, %22
%24:i32 = var
%25:i64 = sext %24 (hasExternalUses)
%26:i32 = var
%27:i32 = mul 19:i32, %26
%28:i64 = sext %27
%29:i64 = mulnsw %25, %28
%30:i64 = add %23, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = mul 19:i32, %33
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i32 = mul 19:i32, %40
%42:i64 = sext %41 (hasExternalUses)
%43:i64 = mulnsw %39, %42
%44:i64 = add %37, %43
%45:i32 = var
%46:i64 = sext %45 (hasExternalUses)
%47:i32 = var
%48:i32 = mul 19:i32, %47
%49:i64 = sext %48 (hasExternalUses)
%50:i64 = mulnsw %46, %49
%51:i64 = add %44, %50
%52:i32 = var
%53:i64 = sext %52 (hasExternalUses)
%54:i32 = var
%55:i32 = mul 19:i32, %54
%56:i64 = sext %55 (hasExternalUses)
%57:i64 = mulnsw %53, %56
%58:i64 = add %51, %57
%59:i32 = var
%60:i64 = sext %59 (hasExternalUses)
%61:i32 = var
%62:i32 = mul 19:i32, %61
%63:i64 = sext %62 (hasExternalUses)
%64:i64 = mulnsw %60, %63
%65:i64 = add %58, %64
%66:i64 = mulnsw %1, %8
%67:i32 = shl %11, 1:i32
%68:i64 = sext %67 (hasExternalUses)
%69:i64 = mulnsw %3, %68
%70:i64 = add %66, %69
%71:i64 = mulnsw %14, %21
%72:i64 = add %70, %71
%73:i32 = mul 19:i32, %17
%74:i64 = sext %73
%75:i32 = shl %24, 1:i32
%76:i64 = sext %75 (hasExternalUses)
%77:i64 = mulnsw %74, %76
%78:i64 = add %72, %77
%79:i64 = mulnsw %32, %28
%80:i64 = add %78, %79
%81:i32 = shl %38, 1:i32
%82:i64 = sext %81 (hasExternalUses)
%83:i64 = mulnsw %35, %82
%84:i64 = add %80, %83
%85:i64 = mulnsw %46, %42
%86:i64 = add %84, %85
%87:i32 = shl %52, 1:i32
%88:i64 = sext %87 (hasExternalUses)
%89:i64 = mulnsw %49, %88
%90:i64 = add %86, %89
%91:i64 = mulnsw %60, %56
%92:i64 = add %90, %91
%93:i32 = shl %5, 1:i32
%94:i64 = sext %93 (hasExternalUses)
%95:i64 = mulnsw %63, %94
%96:i64 = add %92, %95
%97:i64 = mulnsw %12, %8
%98:i64 = mulnsw %3, %21
%99:i64 = add %97, %98
%100:i32 = mul 19:i32, %13
%101:i64 = sext %100
%102:i64 = mulnsw %25, %101
%103:i64 = add %99, %102
%104:i64 = mulnsw %32, %74
%105:i64 = add %103, %104
%106:i64 = mulnsw %39, %28
%107:i64 = add %105, %106
%108:i64 = mulnsw %46, %35
%109:i64 = add %107, %108
%110:i64 = mulnsw %53, %42
%111:i64 = add %109, %110
%112:i64 = mulnsw %60, %49
%113:i64 = add %111, %112
%114:i64 = mulnsw %6, %56
%115:i64 = add %113, %114
%116:i64 = mulnsw %1, %63
%117:i64 = add %115, %116
%118:i64 = mulnsw %8, %21
%119:i32 = mul 19:i32, %2
%120:i64 = sext %119
%121:i64 = mulnsw %120, %76
%122:i64 = add %118, %121
%123:i64 = mulnsw %32, %101
%124:i64 = add %122, %123
%125:i64 = mulnsw %74, %82
%126:i64 = add %124, %125
%127:i64 = mulnsw %46, %28
%128:i64 = add %126, %127
%129:i64 = mulnsw %35, %88
%130:i64 = add %128, %129
%131:i64 = mulnsw %60, %42
%132:i64 = add %130, %131
%133:i64 = mulnsw %49, %94
%134:i64 = add %132, %133
%135:i64 = mulnsw %1, %56
%136:i64 = add %134, %135
%137:i64 = mulnsw %63, %68
%138:i64 = add %136, %137 (hasExternalUses)
%139:i64 = add 33554432:i64, %138 (hasExternalUses)
%140:i64 = ashr %139, 26:i64
%141:i64 = add %117, %140 (hasExternalUses)
%142:i64 = add 16777216:i64, %141 (hasExternalUses)
%143:i64 = ashr %142, 25:i64
%144:i64 = add %96, %143 (hasExternalUses)
%145:i64 = add 33554432:i64, %144 (hasExternalUses)
%146:i64 = ashr %145, 26:i64
%147:i64 = add %65, %146 (hasExternalUses)
%148:i64 = add 16777216:i64, %147 (hasExternalUses)
%149:i64 = ashr %148, 25:i64
infer %149 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i32 = add 1:i32, %27 (hasExternalUses)
%29:i64 = sext %28 (hasExternalUses)
%30:i64 = mulnsw %26, %29
%31:i64 = add %24, %30
%32:i32 = var
%33:i32 = mul 19:i32, %32
%34:i64 = sext %33
%35:i32 = var
%36:i32 = shl %35, 1:i32
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %31, %38
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i32 = var
%43:i32 = mul 19:i32, %42
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %41, %44
%46:i64 = add %39, %45
%47:i32 = var
%48:i32 = mul 19:i32, %47
%49:i64 = sext %48 (hasExternalUses)
%50:i32 = var
%51:i32 = shl %50, 1:i32
%52:i64 = sext %51 (hasExternalUses)
%53:i64 = mulnsw %49, %52
%54:i64 = add %46, %53
%55:i32 = var
%56:i64 = sext %55 (hasExternalUses)
%57:i32 = var
%58:i32 = mul 19:i32, %57
%59:i64 = sext %58 (hasExternalUses)
%60:i64 = mulnsw %56, %59
%61:i64 = add %54, %60
%62:i32 = var
%63:i32 = mul 19:i32, %62
%64:i64 = sext %63 (hasExternalUses)
%65:i32 = var
%66:i32 = shl %65, 1:i32
%67:i64 = sext %66 (hasExternalUses)
%68:i64 = mulnsw %64, %67
%69:i64 = add %61, %68
%70:i64 = add 33554432:i64, %69 (hasExternalUses)
%71:i64 = and 18446744073642442752:i64, %70
%72:i64 = sub %69, %71
%73:i64 = mulnsw %13, %6
%74:i64 = sext %7 (hasExternalUses)
%75:i64 = mulnsw %74, %3
%76:i64 = add %73, %75
%77:i64 = sext %20 (hasExternalUses)
%78:i64 = mulnsw %77, %15
%79:i64 = add %76, %78
%80:i64 = mulnsw %19, %29
%81:i64 = add %79, %80
%82:i64 = sext %35 (hasExternalUses)
%83:i32 = mul 19:i32, %25
%84:i64 = sext %83
%85:i64 = mulnsw %82, %84
%86:i64 = add %81, %85
%87:i64 = mulnsw %41, %34
%88:i64 = add %86, %87
%89:i64 = sext %50 (hasExternalUses)
%90:i64 = mulnsw %89, %44
%91:i64 = add %88, %90
%92:i64 = mulnsw %56, %49
%93:i64 = add %91, %92
%94:i64 = sext %65 (hasExternalUses)
%95:i64 = mulnsw %94, %59
%96:i64 = add %93, %95
%97:i64 = mulnsw %1, %64
%98:i64 = add %96, %97
%99:i64 = mulnsw %13, %3
%100:i64 = mulnsw %6, %22
%101:i64 = add %99, %100
%102:i64 = mulnsw %15, %29
%103:i64 = add %101, %102
%104:i32 = mul 19:i32, %18
%105:i64 = sext %104
%106:i64 = mulnsw %105, %37
%107:i64 = add %103, %106
%108:i64 = mulnsw %41, %84
%109:i64 = add %107, %108
%110:i64 = mulnsw %34, %52
%111:i64 = add %109, %110
%112:i64 = mulnsw %56, %44
%113:i64 = add %111, %112
%114:i64 = mulnsw %49, %67
%115:i64 = add %113, %114
%116:i64 = mulnsw %1, %59
%117:i64 = add %115, %116
%118:i64 = mulnsw %64, %9
%119:i64 = add %117, %118
%120:i64 = mulnsw %77, %3
%121:i64 = mulnsw %6, %29
%122:i64 = add %120, %121
%123:i32 = mul 19:i32, %14
%124:i64 = sext %123
%125:i64 = mulnsw %82, %124
%126:i64 = add %122, %125
%127:i64 = mulnsw %41, %105
%128:i64 = add %126, %127
%129:i64 = mulnsw %89, %84
%130:i64 = add %128, %129
%131:i64 = mulnsw %56, %34
%132:i64 = add %130, %131
%133:i64 = mulnsw %94, %44
%134:i64 = add %132, %133
%135:i64 = mulnsw %1, %49
%136:i64 = add %134, %135
%137:i64 = mulnsw %74, %59
%138:i64 = add %136, %137
%139:i64 = mulnsw %13, %64
%140:i64 = add %138, %139
%141:i64 = mulnsw %3, %29
%142:i32 = mul 19:i32, %5
%143:i64 = sext %142
%144:i64 = mulnsw %143, %37
%145:i64 = add %141, %144
%146:i64 = mulnsw %41, %124
%147:i64 = add %145, %146
%148:i64 = mulnsw %105, %52
%149:i64 = add %147, %148
%150:i64 = mulnsw %56, %84
%151:i64 = add %149, %150
%152:i64 = mulnsw %34, %67
%153:i64 = add %151, %152
%154:i64 = mulnsw %1, %44
%155:i64 = add %153, %154
%156:i64 = mulnsw %49, %9
%157:i64 = add %155, %156
%158:i64 = mulnsw %13, %59
%159:i64 = add %157, %158
%160:i64 = mulnsw %64, %22
%161:i64 = add %159, %160 (hasExternalUses)
%162:i64 = add 33554432:i64, %161 (hasExternalUses)
%163:i64 = ashr %162, 26:i64
%164:i64 = add %140, %163 (hasExternalUses)
%165:i64 = add 16777216:i64, %164 (hasExternalUses)
%166:i64 = ashr %165, 25:i64
%167:i64 = add %119, %166 (hasExternalUses)
%168:i64 = add 33554432:i64, %167 (hasExternalUses)
%169:i64 = ashr %168, 26:i64
%170:i64 = add %98, %169 (hasExternalUses)
%171:i64 = add 16777216:i64, %170 (hasExternalUses)
%172:i64 = ashr %171, 25:i64
%173:i64 = add %72, %172
infer %173 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i32 = mul 19:i32, %0
%2:i64 = sext %1 (hasExternalUses)
%3:i32 = var
%4:i32 = shl %3, 1:i32
%5:i64 = sext %4 (hasExternalUses)
%6:i64 = mulnsw %2, %5

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i32 = add 1:i32, %19 (hasExternalUses)
%21:i64 = sext %20 (hasExternalUses)
%22:i64 = mulnsw %18, %21
%23:i64 = add %16, %22
%24:i32 = var
%25:i64 = sext %24 (hasExternalUses)
%26:i32 = var
%27:i32 = mul 19:i32, %26
%28:i64 = sext %27
%29:i64 = mulnsw %25, %28
%30:i64 = add %23, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = mul 19:i32, %33
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i32 = mul 19:i32, %40
%42:i64 = sext %41 (hasExternalUses)
%43:i64 = mulnsw %39, %42
%44:i64 = add %37, %43
%45:i32 = var
%46:i64 = sext %45 (hasExternalUses)
%47:i32 = var
%48:i32 = mul 19:i32, %47
%49:i64 = sext %48 (hasExternalUses)
%50:i64 = mulnsw %46, %49
%51:i64 = add %44, %50
%52:i32 = var
%53:i64 = sext %52 (hasExternalUses)
%54:i32 = var
%55:i32 = mul 19:i32, %54
%56:i64 = sext %55 (hasExternalUses)
%57:i64 = mulnsw %53, %56
%58:i64 = add %51, %57
%59:i32 = var
%60:i64 = sext %59 (hasExternalUses)
%61:i32 = var
%62:i32 = mul 19:i32, %61
%63:i64 = sext %62 (hasExternalUses)
%64:i64 = mulnsw %60, %63
%65:i64 = add %58, %64
%66:i64 = mulnsw %1, %8
%67:i32 = shl %11, 1:i32
%68:i64 = sext %67 (hasExternalUses)
%69:i64 = mulnsw %3, %68
%70:i64 = add %66, %69
%71:i64 = mulnsw %14, %21
%72:i64 = add %70, %71
%73:i32 = mul 19:i32, %17
%74:i64 = sext %73
%75:i32 = shl %24, 1:i32
%76:i64 = sext %75 (hasExternalUses)
%77:i64 = mulnsw %74, %76
%78:i64 = add %72, %77
%79:i64 = mulnsw %32, %28
%80:i64 = add %78, %79
%81:i32 = shl %38, 1:i32
%82:i64 = sext %81 (hasExternalUses)
%83:i64 = mulnsw %35, %82
%84:i64 = add %80, %83
%85:i64 = mulnsw %46, %42
%86:i64 = add %84, %85
%87:i32 = shl %52, 1:i32
%88:i64 = sext %87 (hasExternalUses)
%89:i64 = mulnsw %49, %88
%90:i64 = add %86, %89
%91:i64 = mulnsw %60, %56
%92:i64 = add %90, %91
%93:i32 = shl %5, 1:i32
%94:i64 = sext %93 (hasExternalUses)
%95:i64 = mulnsw %63, %94
%96:i64 = add %92, %95
%97:i64 = mulnsw %12, %8
%98:i64 = mulnsw %3, %21
%99:i64 = add %97, %98
%100:i32 = mul 19:i32, %13
%101:i64 = sext %100
%102:i64 = mulnsw %25, %101
%103:i64 = add %99, %102
%104:i64 = mulnsw %32, %74
%105:i64 = add %103, %104
%106:i64 = mulnsw %39, %28
%107:i64 = add %105, %106
%108:i64 = mulnsw %46, %35
%109:i64 = add %107, %108
%110:i64 = mulnsw %53, %42
%111:i64 = add %109, %110
%112:i64 = mulnsw %60, %49
%113:i64 = add %111, %112
%114:i64 = mulnsw %6, %56
%115:i64 = add %113, %114
%116:i64 = mulnsw %1, %63
%117:i64 = add %115, %116
%118:i64 = mulnsw %8, %21
%119:i32 = mul 19:i32, %2
%120:i64 = sext %119
%121:i64 = mulnsw %120, %76
%122:i64 = add %118, %121
%123:i64 = mulnsw %32, %101
%124:i64 = add %122, %123
%125:i64 = mulnsw %74, %82
%126:i64 = add %124, %125
%127:i64 = mulnsw %46, %28
%128:i64 = add %126, %127
%129:i64 = mulnsw %35, %88
%130:i64 = add %128, %129
%131:i64 = mulnsw %60, %42
%132:i64 = add %130, %131
%133:i64 = mulnsw %49, %94
%134:i64 = add %132, %133
%135:i64 = mulnsw %1, %56
%136:i64 = add %134, %135
%137:i64 = mulnsw %63, %68
%138:i64 = add %136, %137 (hasExternalUses)
%139:i64 = add 33554432:i64, %138 (hasExternalUses)
%140:i64 = ashr %139, 26:i64
%141:i64 = add %117, %140 (hasExternalUses)
%142:i64 = add 16777216:i64, %141 (hasExternalUses)
%143:i64 = ashr %142, 25:i64
%144:i64 = add %96, %143 (hasExternalUses)
%145:i64 = add 33554432:i64, %144 (hasExternalUses)
%146:i64 = ashr %145, 26:i64
%147:i64 = add %65, %146 (hasExternalUses)
%148:i64 = add 16777216:i64, %147 (hasExternalUses)
%149:i64 = and 4261412864:i64, %148
infer %149 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
ConstantSynthesis: solver returns error on first query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i32 = add 1:i32, %19 (hasExternalUses)
%21:i64 = sext %20 (hasExternalUses)
%22:i64 = mulnsw %18, %21
%23:i64 = add %16, %22
%24:i32 = var
%25:i64 = sext %24 (hasExternalUses)
%26:i32 = var
%27:i32 = mul 19:i32, %26
%28:i64 = sext %27
%29:i64 = mulnsw %25, %28
%30:i64 = add %23, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = mul 19:i32, %33
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i32 = mul 19:i32, %40
%42:i64 = sext %41 (hasExternalUses)
%43:i64 = mulnsw %39, %42
%44:i64 = add %37, %43
%45:i32 = var
%46:i64 = sext %45 (hasExternalUses)
%47:i32 = var
%48:i32 = mul 19:i32, %47
%49:i64 = sext %48 (hasExternalUses)
%50:i64 = mulnsw %46, %49
%51:i64 = add %44, %50
%52:i32 = var
%53:i64 = sext %52 (hasExternalUses)
%54:i32 = var
%55:i32 = mul 19:i32, %54
%56:i64 = sext %55 (hasExternalUses)
%57:i64 = mulnsw %53, %56
%58:i64 = add %51, %57
%59:i32 = var
%60:i64 = sext %59 (hasExternalUses)
%61:i32 = var
%62:i32 = mul 19:i32, %61
%63:i64 = sext %62 (hasExternalUses)
%64:i64 = mulnsw %60, %63
%65:i64 = add %58, %64
%66:i64 = mulnsw %1, %8
%67:i32 = shl %11, 1:i32
%68:i64 = sext %67 (hasExternalUses)
%69:i64 = mulnsw %3, %68
%70:i64 = add %66, %69
%71:i64 = mulnsw %14, %21
%72:i64 = add %70, %71
%73:i32 = mul 19:i32, %17
%74:i64 = sext %73
%75:i32 = shl %24, 1:i32
%76:i64 = sext %75 (hasExternalUses)
%77:i64 = mulnsw %74, %76
%78:i64 = add %72, %77
%79:i64 = mulnsw %32, %28
%80:i64 = add %78, %79
%81:i32 = shl %38, 1:i32
%82:i64 = sext %81 (hasExternalUses)
%83:i64 = mulnsw %35, %82
%84:i64 = add %80, %83
%85:i64 = mulnsw %46, %42
%86:i64 = add %84, %85
%87:i32 = shl %52, 1:i32
%88:i64 = sext %87 (hasExternalUses)
%89:i64 = mulnsw %49, %88
%90:i64 = add %86, %89
%91:i64 = mulnsw %60, %56
%92:i64 = add %90, %91
%93:i32 = shl %5, 1:i32
%94:i64 = sext %93 (hasExternalUses)
%95:i64 = mulnsw %63, %94
%96:i64 = add %92, %95
%97:i64 = mulnsw %12, %8
%98:i64 = mulnsw %3, %21
%99:i64 = add %97, %98
%100:i32 = mul 19:i32, %13
%101:i64 = sext %100
%102:i64 = mulnsw %25, %101
%103:i64 = add %99, %102
%104:i64 = mulnsw %32, %74
%105:i64 = add %103, %104
%106:i64 = mulnsw %39, %28
%107:i64 = add %105, %106
%108:i64 = mulnsw %46, %35
%109:i64 = add %107, %108
%110:i64 = mulnsw %53, %42
%111:i64 = add %109, %110
%112:i64 = mulnsw %60, %49
%113:i64 = add %111, %112
%114:i64 = mulnsw %6, %56
%115:i64 = add %113, %114
%116:i64 = mulnsw %1, %63
%117:i64 = add %115, %116
%118:i64 = mulnsw %8, %21
%119:i32 = mul 19:i32, %2
%120:i64 = sext %119
%121:i64 = mulnsw %120, %76
%122:i64 = add %118, %121
%123:i64 = mulnsw %32, %101
%124:i64 = add %122, %123
%125:i64 = mulnsw %74, %82
%126:i64 = add %124, %125
%127:i64 = mulnsw %46, %28
%128:i64 = add %126, %127
%129:i64 = mulnsw %35, %88
%130:i64 = add %128, %129
%131:i64 = mulnsw %60, %42
%132:i64 = add %130, %131
%133:i64 = mulnsw %49, %94
%134:i64 = add %132, %133
%135:i64 = mulnsw %1, %56
%136:i64 = add %134, %135
%137:i64 = mulnsw %63, %68
%138:i64 = add %136, %137 (hasExternalUses)
%139:i64 = add 33554432:i64, %138 (hasExternalUses)
%140:i64 = ashr %139, 26:i64
%141:i64 = add %117, %140 (hasExternalUses)
%142:i64 = add 16777216:i64, %141 (hasExternalUses)
%143:i64 = ashr %142, 25:i64
%144:i64 = add %96, %143 (hasExternalUses)
%145:i64 = add 33554432:i64, %144 (hasExternalUses)
%146:i64 = ashr %145, 26:i64
%147:i64 = add %65, %146
%148:i64 = add 16777216:i64, %147 (hasExternalUses)
%149:i64 = and 4261412864:i64, %148
%150:i64 = sub %147, %149
infer %150 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = mul 19:i32, %2
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i64 = mulnsw %30, %32
%34:i64 = add %28, %33
%35:i32 = var
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i64 = sext %37 (hasExternalUses)
%39:i64 = mulnsw %36, %38
%40:i64 = add %34, %39
%41:i32 = var
%42:i64 = sext %41 (hasExternalUses)
%43:i32 = var
%44:i32 = add 1:i32, %43 (hasExternalUses)
%45:i64 = sext %44 (hasExternalUses)
%46:i64 = mulnsw %42, %45
%47:i64 = add %40, %46
%48:i32 = var
%49:i64 = sext %48 (hasExternalUses)
%50:i32 = var
%51:i32 = mul 19:i32, %50
%52:i64 = sext %51 (hasExternalUses)
%53:i64 = mulnsw %49, %52
%54:i64 = add %47, %53
%55:i32 = var
%56:i64 = sext %55 (hasExternalUses)
%57:i32 = var
%58:i32 = mul 19:i32, %57
%59:i64 = sext %58 (hasExternalUses)
%60:i64 = mulnsw %56, %59
%61:i64 = add %54, %60
%62:i64 = mulnsw %1, %8
%63:i32 = shl %11, 1:i32
%64:i64 = sext %63 (hasExternalUses)
%65:i64 = mulnsw %3, %64
%66:i64 = add %62, %65
%67:i64 = mulnsw %18, %14
%68:i64 = add %66, %67
%69:i32 = shl %23, 1:i32
%70:i64 = sext %69 (hasExternalUses)
%71:i64 = mulnsw %20, %70
%72:i64 = add %68, %71
%73:i64 = mulnsw %30, %26
%74:i64 = add %72, %73
%75:i32 = shl %35, 1:i32
%76:i64 = sext %75 (hasExternalUses)
%77:i64 = mulnsw %32, %76
%78:i64 = add %74, %77
%79:i64 = mulnsw %38, %45
%80:i64 = add %78, %79
%81:i32 = mul 19:i32, %41
%82:i64 = sext %81 (hasExternalUses)
%83:i32 = shl %48, 1:i32
%84:i64 = sext %83 (hasExternalUses)
%85:i64 = mulnsw %82, %84
%86:i64 = add %80, %85
%87:i64 = mulnsw %56, %52
%88:i64 = add %86, %87
%89:i32 = shl %5, 1:i32
%90:i64 = sext %89 (hasExternalUses)
%91:i64 = mulnsw %59, %90
%92:i64 = add %88, %91
%93:i64 = mulnsw %18, %3
%94:i64 = mulnsw %12, %8
%95:i64 = add %93, %94
%96:i64 = mulnsw %24, %14
%97:i64 = add %95, %96
%98:i64 = mulnsw %30, %20
%99:i64 = add %97, %98
%100:i64 = mulnsw %36, %26
%101:i64 = add %99, %100
%102:i64 = mulnsw %32, %45
%103:i64 = add %101, %102
%104:i32 = mul 19:i32, %37
%105:i64 = sext %104 (hasExternalUses)
%106:i64 = mulnsw %49, %105
%107:i64 = add %103, %106
%108:i64 = mulnsw %56, %82
%109:i64 = add %107, %108
%110:i64 = mulnsw %6, %52
%111:i64 = add %109, %110
%112:i64 = mulnsw %1, %59
%113:i64 = add %111, %112
%114:i64 = mulnsw %18, %8
%115:i64 = mulnsw %3, %70
%116:i64 = add %114, %115
%117:i64 = mulnsw %30, %14
%118:i64 = add %116, %117
%119:i64 = mulnsw %20, %76
%120:i64 = add %118, %119
%121:i64 = mulnsw %26, %45
%122:i64 = add %120, %121
%123:i32 = mul 19:i32, %31
%124:i64 = sext %123 (hasExternalUses)
%125:i64 = mulnsw %124, %84
%126:i64 = add %122, %125
%127:i64 = mulnsw %56, %105
%128:i64 = add %126, %127
%129:i64 = mulnsw %82, %90
%130:i64 = add %128, %129
%131:i64 = mulnsw %1, %52
%132:i64 = add %130, %131
%133:i64 = mulnsw %59, %64
%134:i64 = add %132, %133 (hasExternalUses)
%135:i64 = add 33554432:i64, %134 (hasExternalUses)
%136:i64 = ashr %135, 26:i64
%137:i64 = add %113, %136 (hasExternalUses)
%138:i64 = add 16777216:i64, %137 (hasExternalUses)
%139:i64 = ashr %138, 25:i64
%140:i64 = add %92, %139 (hasExternalUses)
%141:i64 = add 33554432:i64, %140 (hasExternalUses)
%142:i64 = ashr %141, 26:i64
%143:i64 = add %61, %142 (hasExternalUses)
%144:i64 = add 16777216:i64, %143
infer %144 (demandedBits=1111111111111111111111111111111111111110000000000000000000000000)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i64 = mulnsw %30, %32
%34:i64 = add %28, %33
%35:i32 = var
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i64 = sext %37 (hasExternalUses)
%39:i64 = mulnsw %36, %38
%40:i64 = add %34, %39
%41:i32 = var
%42:i64 = sext %41 (hasExternalUses)
%43:i32 = var
%44:i32 = add 1:i32, %43 (hasExternalUses)
%45:i64 = sext %44 (hasExternalUses)
%46:i64 = mulnsw %42, %45
%47:i64 = add %40, %46
%48:i32 = var
%49:i64 = sext %48 (hasExternalUses)
%50:i32 = var
%51:i32 = mul 19:i32, %50
%52:i64 = sext %51 (hasExternalUses)
%53:i64 = mulnsw %49, %52
%54:i64 = add %47, %53
%55:i32 = var
%56:i64 = sext %55 (hasExternalUses)
%57:i32 = var
%58:i32 = mul 19:i32, %57
%59:i64 = sext %58 (hasExternalUses)
%60:i64 = mulnsw %56, %59
%61:i64 = add %54, %60
%62:i64 = mulnsw %1, %8
%63:i32 = shl %11, 1:i32
%64:i64 = sext %63 (hasExternalUses)
%65:i64 = mulnsw %3, %64
%66:i64 = add %62, %65
%67:i64 = mulnsw %18, %14
%68:i64 = add %66, %67
%69:i32 = shl %23, 1:i32
%70:i64 = sext %69 (hasExternalUses)
%71:i64 = mulnsw %20, %70
%72:i64 = add %68, %71
%73:i64 = mulnsw %30, %26
%74:i64 = add %72, %73
%75:i32 = shl %35, 1:i32
%76:i64 = sext %75 (hasExternalUses)
%77:i64 = mulnsw %32, %76
%78:i64 = add %74, %77
%79:i64 = mulnsw %38, %45
%80:i64 = add %78, %79
%81:i32 = mul 19:i32, %41
%82:i64 = sext %81 (hasExternalUses)
%83:i32 = shl %48, 1:i32
%84:i64 = sext %83 (hasExternalUses)
%85:i64 = mulnsw %82, %84
%86:i64 = add %80, %85
%87:i64 = mulnsw %56, %52
%88:i64 = add %86, %87
%89:i32 = shl %5, 1:i32
%90:i64 = sext %89 (hasExternalUses)
%91:i64 = mulnsw %59, %90
%92:i64 = add %88, %91
%93:i64 = mulnsw %18, %3
%94:i64 = mulnsw %12, %8
%95:i64 = add %93, %94
%96:i64 = mulnsw %24, %14
%97:i64 = add %95, %96
%98:i64 = mulnsw %30, %20
%99:i64 = add %97, %98
%100:i64 = mulnsw %36, %26
%101:i64 = add %99, %100
%102:i64 = mulnsw %32, %45
%103:i64 = add %101, %102
%104:i32 = mul 19:i32, %37
%105:i64 = sext %104 (hasExternalUses)
%106:i64 = mulnsw %49, %105
%107:i64 = add %103, %106
%108:i64 = mulnsw %56, %82
%109:i64 = add %107, %108
%110:i64 = mulnsw %6, %52
%111:i64 = add %109, %110
%112:i64 = mulnsw %1, %59
%113:i64 = add %111, %112
%114:i64 = mulnsw %18, %8
%115:i64 = mulnsw %3, %70
%116:i64 = add %114, %115
%117:i64 = mulnsw %30, %14
%118:i64 = add %116, %117
%119:i64 = mulnsw %20, %76
%120:i64 = add %118, %119
%121:i64 = mulnsw %26, %45
%122:i64 = add %120, %121
%123:i32 = mul 19:i32, %31
%124:i64 = sext %123 (hasExternalUses)
%125:i64 = mulnsw %124, %84
%126:i64 = add %122, %125
%127:i64 = mulnsw %56, %105
%128:i64 = add %126, %127
%129:i64 = mulnsw %82, %90
%130:i64 = add %128, %129
%131:i64 = mulnsw %1, %52
%132:i64 = add %130, %131
%133:i64 = mulnsw %59, %64
%134:i64 = add %132, %133 (hasExternalUses)
%135:i64 = add 33554432:i64, %134 (hasExternalUses)
%136:i64 = ashr %135, 26:i64
%137:i64 = add %113, %136 (hasExternalUses)
%138:i64 = add 16777216:i64, %137 (hasExternalUses)
%139:i64 = ashr %138, 25:i64
%140:i64 = add %92, %139 (hasExternalUses)
%141:i64 = add 33554432:i64, %140 (hasExternalUses)
%142:i64 = ashr %141, 26:i64
%143:i64 = add %61, %142 (hasExternalUses)
%144:i64 = add 16777216:i64, %143 (hasExternalUses)
%145:i64 = ashr %144, 25:i64
infer %145


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %26, %28
%30:i64 = add %24, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = shl %33, 1:i32
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i64 = mulnsw %39, %41
%43:i64 = add %37, %42
infer %43


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %26, %28
%30:i64 = add %24, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = shl %33, 1:i32
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i64 = mulnsw %39, %41
%43:i64 = add %37, %42
%44:i32 = var
%45:i64 = sext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = shl %46, 1:i32
%48:i64 = sext %47 (hasExternalUses)
%49:i64 = mulnsw %45, %48
%50:i64 = add %43, %49
infer %50


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %26, %28
%30:i64 = add %24, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = shl %33, 1:i32
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i64 = mulnsw %39, %41
%43:i64 = add %37, %42
%44:i32 = var
%45:i64 = sext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = shl %46, 1:i32
%48:i64 = sext %47 (hasExternalUses)
%49:i64 = mulnsw %45, %48
%50:i64 = add %43, %49
%51:i32 = var
%52:i64 = sext %51 (hasExternalUses)
%53:i32 = var
%54:i32 = add 1:i32, %53 (hasExternalUses)
%55:i64 = sext %54 (hasExternalUses)
%56:i64 = mulnsw %52, %55
%57:i64 = add %50, %56
infer %57


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %26, %28
%30:i64 = add %24, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = shl %33, 1:i32
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i64 = mulnsw %39, %41
%43:i64 = add %37, %42
%44:i32 = var
%45:i64 = sext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = shl %46, 1:i32
%48:i64 = sext %47 (hasExternalUses)
%49:i64 = mulnsw %45, %48
%50:i64 = add %43, %49
%51:i32 = var
%52:i64 = sext %51 (hasExternalUses)
%53:i32 = var
%54:i32 = add 1:i32, %53 (hasExternalUses)
%55:i64 = sext %54 (hasExternalUses)
%56:i64 = mulnsw %52, %55
%57:i64 = add %50, %56
%58:i32 = var
%59:i32 = mul 19:i32, %58
%60:i64 = sext %59 (hasExternalUses)
%61:i32 = var
%62:i32 = shl %61, 1:i32
%63:i64 = sext %62 (hasExternalUses)
%64:i64 = mulnsw %60, %63
%65:i64 = add %57, %64
infer %65


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i32 = mul 19:i32, %0
%2:i64 = sext %1

Cost = 2
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %26, %28
%30:i64 = add %24, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = shl %33, 1:i32
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i64 = mulnsw %39, %41
%43:i64 = add %37, %42
%44:i32 = var
%45:i64 = sext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = shl %46, 1:i32
%48:i64 = sext %47 (hasExternalUses)
%49:i64 = mulnsw %45, %48
%50:i64 = add %43, %49
%51:i32 = var
%52:i64 = sext %51 (hasExternalUses)
%53:i32 = var
%54:i32 = add 1:i32, %53 (hasExternalUses)
%55:i64 = sext %54 (hasExternalUses)
%56:i64 = mulnsw %52, %55
%57:i64 = add %50, %56
%58:i32 = var
%59:i32 = mul 19:i32, %58
%60:i64 = sext %59 (hasExternalUses)
%61:i32 = var
%62:i32 = shl %61, 1:i32
%63:i64 = sext %62 (hasExternalUses)
%64:i64 = mulnsw %60, %63
%65:i64 = add %57, %64
%66:i64 = mulnsw %13, %6
%67:i64 = sext %7 (hasExternalUses)
%68:i64 = mulnsw %67, %3
%69:i64 = add %66, %68
%70:i64 = sext %20 (hasExternalUses)
%71:i64 = mulnsw %70, %15
%72:i64 = add %69, %71
%73:i64 = mulnsw %26, %19
%74:i64 = add %72, %73
%75:i64 = sext %33 (hasExternalUses)
%76:i64 = mulnsw %75, %28
%77:i64 = add %74, %76
%78:i64 = mulnsw %39, %32
%79:i64 = add %77, %78
%80:i64 = sext %46 (hasExternalUses)
%81:i64 = mulnsw %80, %41
%82:i64 = add %79, %81
%83:i64 = mulnsw %45, %55
%84:i64 = add %82, %83
%85:i64 = sext %61 (hasExternalUses)
%86:i32 = mul 19:i32, %51
%87:i64 = sext %86 (hasExternalUses)
%88:i64 = mulnsw %85, %87
%89:i64 = add %84, %88
%90:i64 = mulnsw %1, %60
%91:i64 = add %89, %90
%92:i64 = mulnsw %13, %3
%93:i64 = mulnsw %6, %22
%94:i64 = add %92, %93
%95:i64 = mulnsw %26, %15
%96:i64 = add %94, %95
%97:i64 = mulnsw %19, %35
%98:i64 = add %96, %97
%99:i64 = mulnsw %39, %28
%100:i64 = add %98, %99
%101:i64 = mulnsw %32, %48
%102:i64 = add %100, %101
%103:i64 = mulnsw %41, %55
%104:i64 = add %102, %103
%105:i32 = mul 19:i32, %44
%106:i64 = sext %105 (hasExternalUses)
%107:i64 = mulnsw %106, %63
%108:i64 = add %104, %107
%109:i64 = mulnsw %1, %87
%110:i64 = add %108, %109
%111:i64 = mulnsw %60, %9
%112:i64 = add %110, %111
%113:i64 = mulnsw %26, %6
%114:i64 = mulnsw %70, %3
%115:i64 = add %113, %114
%116:i64 = mulnsw %75, %15
%117:i64 = add %115, %116
%118:i64 = mulnsw %39, %19
%119:i64 = add %117, %118
%120:i64 = mulnsw %80, %28
%121:i64 = add %119, %120
%122:i64 = mulnsw %32, %55
%123:i64 = add %121, %122
%124:i32 = mul 19:i32, %40
%125:i64 = sext %124 (hasExternalUses)
%126:i64 = mulnsw %85, %125
%127:i64 = add %123, %126
%128:i64 = mulnsw %1, %106
%129:i64 = add %127, %128
%130:i64 = mulnsw %67, %87
%131:i64 = add %129, %130
%132:i64 = mulnsw %13, %60
%133:i64 = add %131, %132
%134:i64 = mulnsw %26, %3
%135:i64 = mulnsw %6, %35
%136:i64 = add %134, %135
%137:i64 = mulnsw %39, %15
%138:i64 = add %136, %137
%139:i64 = mulnsw %19, %48
%140:i64 = add %138, %139
%141:i64 = mulnsw %28, %55
%142:i64 = add %140, %141
%143:i32 = mul 19:i32, %31
%144:i64 = sext %143 (hasExternalUses)
%145:i64 = mulnsw %144, %63
%146:i64 = add %142, %145
%147:i64 = mulnsw %1, %125
%148:i64 = add %146, %147
%149:i64 = mulnsw %106, %9
%150:i64 = add %148, %149
%151:i64 = mulnsw %13, %87
%152:i64 = add %150, %151
%153:i64 = mulnsw %60, %22
%154:i64 = add %152, %153 (hasExternalUses)
%155:i64 = add 33554432:i64, %154 (hasExternalUses)
%156:i64 = ashr %155, 26:i64
%157:i64 = add %133, %156 (hasExternalUses)
%158:i64 = add 16777216:i64, %157 (hasExternalUses)
%159:i64 = ashr %158, 25:i64
%160:i64 = add %112, %159 (hasExternalUses)
%161:i64 = add 33554432:i64, %160 (hasExternalUses)
%162:i64 = ashr %161, 26:i64
%163:i64 = add %91, %162 (hasExternalUses)
%164:i64 = add 16777216:i64, %163 (hasExternalUses)
%165:i64 = ashr %164, 25:i64
%166:i64 = add %65, %165
infer %166


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i32 = mul 19:i32, %0
%2:i64 = sext %1

Cost = 2
verification query failed!
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i64 = mulnsw %30, %32
%34:i64 = add %28, %33
%35:i32 = var
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i64 = sext %37 (hasExternalUses)
%39:i64 = mulnsw %36, %38
%40:i64 = add %34, %39
%41:i32 = var
%42:i64 = sext %41 (hasExternalUses)
%43:i32 = var
%44:i32 = add 1:i32, %43 (hasExternalUses)
%45:i64 = sext %44 (hasExternalUses)
%46:i64 = mulnsw %42, %45
%47:i64 = add %40, %46
%48:i32 = var
%49:i64 = sext %48 (hasExternalUses)
%50:i32 = var
%51:i32 = mul 19:i32, %50
%52:i64 = sext %51 (hasExternalUses)
%53:i64 = mulnsw %49, %52
%54:i64 = add %47, %53
%55:i32 = var
%56:i64 = sext %55 (hasExternalUses)
%57:i32 = var
%58:i32 = mul 19:i32, %57
%59:i64 = sext %58 (hasExternalUses)
%60:i64 = mulnsw %56, %59
%61:i64 = add %54, %60
%62:i64 = mulnsw %1, %8
%63:i32 = shl %11, 1:i32
%64:i64 = sext %63 (hasExternalUses)
%65:i64 = mulnsw %3, %64
%66:i64 = add %62, %65
%67:i64 = mulnsw %18, %14
%68:i64 = add %66, %67
%69:i32 = shl %23, 1:i32
%70:i64 = sext %69 (hasExternalUses)
%71:i64 = mulnsw %20, %70
%72:i64 = add %68, %71
%73:i64 = mulnsw %30, %26
%74:i64 = add %72, %73
%75:i32 = shl %35, 1:i32
%76:i64 = sext %75 (hasExternalUses)
%77:i64 = mulnsw %32, %76
%78:i64 = add %74, %77
%79:i64 = mulnsw %38, %45
%80:i64 = add %78, %79
%81:i32 = mul 19:i32, %41
%82:i64 = sext %81 (hasExternalUses)
%83:i32 = shl %48, 1:i32
%84:i64 = sext %83 (hasExternalUses)
%85:i64 = mulnsw %82, %84
%86:i64 = add %80, %85
%87:i64 = mulnsw %56, %52
%88:i64 = add %86, %87
%89:i32 = shl %5, 1:i32
%90:i64 = sext %89 (hasExternalUses)
%91:i64 = mulnsw %59, %90
%92:i64 = add %88, %91
%93:i64 = mulnsw %18, %3
%94:i64 = mulnsw %12, %8
%95:i64 = add %93, %94
%96:i64 = mulnsw %24, %14
%97:i64 = add %95, %96
%98:i64 = mulnsw %30, %20
%99:i64 = add %97, %98
%100:i64 = mulnsw %36, %26
%101:i64 = add %99, %100
%102:i64 = mulnsw %32, %45
%103:i64 = add %101, %102
%104:i32 = mul 19:i32, %37
%105:i64 = sext %104 (hasExternalUses)
%106:i64 = mulnsw %49, %105
%107:i64 = add %103, %106
%108:i64 = mulnsw %56, %82
%109:i64 = add %107, %108
%110:i64 = mulnsw %6, %52
%111:i64 = add %109, %110
%112:i64 = mulnsw %1, %59
%113:i64 = add %111, %112
%114:i64 = mulnsw %18, %8
%115:i64 = mulnsw %3, %70
%116:i64 = add %114, %115
%117:i64 = mulnsw %30, %14
%118:i64 = add %116, %117
%119:i64 = mulnsw %20, %76
%120:i64 = add %118, %119
%121:i64 = mulnsw %26, %45
%122:i64 = add %120, %121
%123:i32 = mul 19:i32, %31
%124:i64 = sext %123 (hasExternalUses)
%125:i64 = mulnsw %124, %84
%126:i64 = add %122, %125
%127:i64 = mulnsw %56, %105
%128:i64 = add %126, %127
%129:i64 = mulnsw %82, %90
%130:i64 = add %128, %129
%131:i64 = mulnsw %1, %52
%132:i64 = add %130, %131
%133:i64 = mulnsw %59, %64
%134:i64 = add %132, %133 (hasExternalUses)
%135:i64 = add 33554432:i64, %134 (hasExternalUses)
%136:i64 = ashr %135, 26:i64
%137:i64 = add %113, %136 (hasExternalUses)
%138:i64 = add 16777216:i64, %137 (hasExternalUses)
%139:i64 = ashr %138, 25:i64
%140:i64 = add %92, %139 (hasExternalUses)
%141:i64 = add 33554432:i64, %140 (hasExternalUses)
%142:i64 = ashr %141, 26:i64
%143:i64 = add %61, %142 (hasExternalUses)
%144:i64 = add 16777216:i64, %143 (hasExternalUses)
%145:i64 = and 4261412864:i64, %144
infer %145 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
ConstantSynthesis: solver returns error on first query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i64 = mulnsw %30, %32
%34:i64 = add %28, %33
%35:i32 = var
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i64 = sext %37 (hasExternalUses)
%39:i64 = mulnsw %36, %38
%40:i64 = add %34, %39
%41:i32 = var
%42:i64 = sext %41 (hasExternalUses)
%43:i32 = var
%44:i32 = add 1:i32, %43 (hasExternalUses)
%45:i64 = sext %44 (hasExternalUses)
%46:i64 = mulnsw %42, %45
%47:i64 = add %40, %46
%48:i32 = var
%49:i64 = sext %48 (hasExternalUses)
%50:i32 = var
%51:i32 = mul 19:i32, %50
%52:i64 = sext %51 (hasExternalUses)
%53:i64 = mulnsw %49, %52
%54:i64 = add %47, %53
%55:i32 = var
%56:i64 = sext %55 (hasExternalUses)
%57:i32 = var
%58:i32 = mul 19:i32, %57
%59:i64 = sext %58 (hasExternalUses)
%60:i64 = mulnsw %56, %59
%61:i64 = add %54, %60
%62:i64 = mulnsw %1, %8
%63:i32 = shl %11, 1:i32
%64:i64 = sext %63 (hasExternalUses)
%65:i64 = mulnsw %3, %64
%66:i64 = add %62, %65
%67:i64 = mulnsw %18, %14
%68:i64 = add %66, %67
%69:i32 = shl %23, 1:i32
%70:i64 = sext %69 (hasExternalUses)
%71:i64 = mulnsw %20, %70
%72:i64 = add %68, %71
%73:i64 = mulnsw %30, %26
%74:i64 = add %72, %73
%75:i32 = shl %35, 1:i32
%76:i64 = sext %75 (hasExternalUses)
%77:i64 = mulnsw %32, %76
%78:i64 = add %74, %77
%79:i64 = mulnsw %38, %45
%80:i64 = add %78, %79
%81:i32 = mul 19:i32, %41
%82:i64 = sext %81 (hasExternalUses)
%83:i32 = shl %48, 1:i32
%84:i64 = sext %83 (hasExternalUses)
%85:i64 = mulnsw %82, %84
%86:i64 = add %80, %85
%87:i64 = mulnsw %56, %52
%88:i64 = add %86, %87
%89:i32 = shl %5, 1:i32
%90:i64 = sext %89 (hasExternalUses)
%91:i64 = mulnsw %59, %90
%92:i64 = add %88, %91
%93:i64 = mulnsw %18, %3
%94:i64 = mulnsw %12, %8
%95:i64 = add %93, %94
%96:i64 = mulnsw %24, %14
%97:i64 = add %95, %96
%98:i64 = mulnsw %30, %20
%99:i64 = add %97, %98
%100:i64 = mulnsw %36, %26
%101:i64 = add %99, %100
%102:i64 = mulnsw %32, %45
%103:i64 = add %101, %102
%104:i32 = mul 19:i32, %37
%105:i64 = sext %104 (hasExternalUses)
%106:i64 = mulnsw %49, %105
%107:i64 = add %103, %106
%108:i64 = mulnsw %56, %82
%109:i64 = add %107, %108
%110:i64 = mulnsw %6, %52
%111:i64 = add %109, %110
%112:i64 = mulnsw %1, %59
%113:i64 = add %111, %112
%114:i64 = mulnsw %18, %8
%115:i64 = mulnsw %3, %70
%116:i64 = add %114, %115
%117:i64 = mulnsw %30, %14
%118:i64 = add %116, %117
%119:i64 = mulnsw %20, %76
%120:i64 = add %118, %119
%121:i64 = mulnsw %26, %45
%122:i64 = add %120, %121
%123:i32 = mul 19:i32, %31
%124:i64 = sext %123 (hasExternalUses)
%125:i64 = mulnsw %124, %84
%126:i64 = add %122, %125
%127:i64 = mulnsw %56, %105
%128:i64 = add %126, %127
%129:i64 = mulnsw %82, %90
%130:i64 = add %128, %129
%131:i64 = mulnsw %1, %52
%132:i64 = add %130, %131
%133:i64 = mulnsw %59, %64
%134:i64 = add %132, %133 (hasExternalUses)
%135:i64 = add 33554432:i64, %134 (hasExternalUses)
%136:i64 = ashr %135, 26:i64
%137:i64 = add %113, %136 (hasExternalUses)
%138:i64 = add 16777216:i64, %137 (hasExternalUses)
%139:i64 = ashr %138, 25:i64
%140:i64 = add %92, %139 (hasExternalUses)
%141:i64 = add 33554432:i64, %140 (hasExternalUses)
%142:i64 = ashr %141, 26:i64
%143:i64 = add %61, %142
%144:i64 = add 16777216:i64, %143 (hasExternalUses)
%145:i64 = and 4261412864:i64, %144
%146:i64 = sub %143, %145
infer %146 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = mul 19:i32, %2
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i32 = add 1:i32, %27 (hasExternalUses)
%29:i64 = sext %28 (hasExternalUses)
%30:i64 = mulnsw %26, %29
%31:i64 = add %24, %30
%32:i32 = var
%33:i32 = mul 19:i32, %32
%34:i64 = sext %33
%35:i32 = var
%36:i32 = shl %35, 1:i32
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %31, %38
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i32 = var
%43:i32 = mul 19:i32, %42
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %41, %44
%46:i64 = add %39, %45
%47:i32 = var
%48:i32 = mul 19:i32, %47
%49:i64 = sext %48 (hasExternalUses)
%50:i32 = var
%51:i32 = shl %50, 1:i32
%52:i64 = sext %51 (hasExternalUses)
%53:i64 = mulnsw %49, %52
%54:i64 = add %46, %53
%55:i32 = var
%56:i64 = sext %55 (hasExternalUses)
%57:i32 = var
%58:i32 = mul 19:i32, %57
%59:i64 = sext %58 (hasExternalUses)
%60:i64 = mulnsw %56, %59
%61:i64 = add %54, %60
%62:i32 = var
%63:i32 = mul 19:i32, %62
%64:i64 = sext %63 (hasExternalUses)
%65:i32 = var
%66:i32 = shl %65, 1:i32
%67:i64 = sext %66 (hasExternalUses)
%68:i64 = mulnsw %64, %67
%69:i64 = add %61, %68
%70:i64 = add 33554432:i64, %69 (hasExternalUses)
%71:i64 = and 18446744073642442752:i64, %70
%72:i64 = sub %69, %71
%73:i64 = mulnsw %13, %6
%74:i64 = sext %7 (hasExternalUses)
%75:i64 = mulnsw %74, %3
%76:i64 = add %73, %75
%77:i64 = sext %20 (hasExternalUses)
%78:i64 = mulnsw %77, %15
%79:i64 = add %76, %78
%80:i64 = mulnsw %19, %29
%81:i64 = add %79, %80
%82:i64 = sext %35 (hasExternalUses)
%83:i32 = mul 19:i32, %25
%84:i64 = sext %83
%85:i64 = mulnsw %82, %84
%86:i64 = add %81, %85
%87:i64 = mulnsw %41, %34
%88:i64 = add %86, %87
%89:i64 = sext %50 (hasExternalUses)
%90:i64 = mulnsw %89, %44
%91:i64 = add %88, %90
%92:i64 = mulnsw %56, %49
%93:i64 = add %91, %92
%94:i64 = sext %65 (hasExternalUses)
%95:i64 = mulnsw %94, %59
%96:i64 = add %93, %95
%97:i64 = mulnsw %1, %64
%98:i64 = add %96, %97
%99:i64 = mulnsw %13, %3
%100:i64 = mulnsw %6, %22
%101:i64 = add %99, %100
%102:i64 = mulnsw %15, %29
%103:i64 = add %101, %102
%104:i32 = mul 19:i32, %18
%105:i64 = sext %104
%106:i64 = mulnsw %105, %37
%107:i64 = add %103, %106
%108:i64 = mulnsw %41, %84
%109:i64 = add %107, %108
%110:i64 = mulnsw %34, %52
%111:i64 = add %109, %110
%112:i64 = mulnsw %56, %44
%113:i64 = add %111, %112
%114:i64 = mulnsw %49, %67
%115:i64 = add %113, %114
%116:i64 = mulnsw %1, %59
%117:i64 = add %115, %116
%118:i64 = mulnsw %64, %9
%119:i64 = add %117, %118
%120:i64 = mulnsw %77, %3
%121:i64 = mulnsw %6, %29
%122:i64 = add %120, %121
%123:i32 = mul 19:i32, %14
%124:i64 = sext %123
%125:i64 = mulnsw %82, %124
%126:i64 = add %122, %125
%127:i64 = mulnsw %41, %105
%128:i64 = add %126, %127
%129:i64 = mulnsw %89, %84
%130:i64 = add %128, %129
%131:i64 = mulnsw %56, %34
%132:i64 = add %130, %131
%133:i64 = mulnsw %94, %44
%134:i64 = add %132, %133
%135:i64 = mulnsw %1, %49
%136:i64 = add %134, %135
%137:i64 = mulnsw %74, %59
%138:i64 = add %136, %137
%139:i64 = mulnsw %13, %64
%140:i64 = add %138, %139
%141:i64 = mulnsw %3, %29
%142:i32 = mul 19:i32, %5
%143:i64 = sext %142
%144:i64 = mulnsw %143, %37
%145:i64 = add %141, %144
%146:i64 = mulnsw %41, %124
%147:i64 = add %145, %146
%148:i64 = mulnsw %105, %52
%149:i64 = add %147, %148
%150:i64 = mulnsw %56, %84
%151:i64 = add %149, %150
%152:i64 = mulnsw %34, %67
%153:i64 = add %151, %152
%154:i64 = mulnsw %1, %44
%155:i64 = add %153, %154
%156:i64 = mulnsw %49, %9
%157:i64 = add %155, %156
%158:i64 = mulnsw %13, %59
%159:i64 = add %157, %158
%160:i64 = mulnsw %64, %22
%161:i64 = add %159, %160 (hasExternalUses)
%162:i64 = add 33554432:i64, %161 (hasExternalUses)
%163:i64 = ashr %162, 26:i64
%164:i64 = add %140, %163 (hasExternalUses)
%165:i64 = add 16777216:i64, %164 (hasExternalUses)
%166:i64 = ashr %165, 25:i64
%167:i64 = add %119, %166 (hasExternalUses)
%168:i64 = add 33554432:i64, %167 (hasExternalUses)
%169:i64 = ashr %168, 26:i64
%170:i64 = add %98, %169 (hasExternalUses)
%171:i64 = add 16777216:i64, %170 (hasExternalUses)
%172:i64 = ashr %171, 25:i64
%173:i64 = add %72, %172 (hasExternalUses)
%174:i64 = add 33554432:i64, %173
infer %174 (demandedBits=0000001111111111111111111111111111111100000000000000000000000000)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i32 = add 1:i32, %27 (hasExternalUses)
%29:i64 = sext %28 (hasExternalUses)
%30:i64 = mulnsw %26, %29
%31:i64 = add %24, %30
%32:i32 = var
%33:i32 = mul 19:i32, %32
%34:i64 = sext %33
%35:i32 = var
%36:i32 = shl %35, 1:i32
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %31, %38
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i32 = var
%43:i32 = mul 19:i32, %42
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %41, %44
%46:i64 = add %39, %45
%47:i32 = var
%48:i32 = mul 19:i32, %47
%49:i64 = sext %48 (hasExternalUses)
%50:i32 = var
%51:i32 = shl %50, 1:i32
%52:i64 = sext %51 (hasExternalUses)
%53:i64 = mulnsw %49, %52
%54:i64 = add %46, %53
%55:i32 = var
%56:i64 = sext %55 (hasExternalUses)
%57:i32 = var
%58:i32 = mul 19:i32, %57
%59:i64 = sext %58 (hasExternalUses)
%60:i64 = mulnsw %56, %59
%61:i64 = add %54, %60
%62:i32 = var
%63:i32 = mul 19:i32, %62
%64:i64 = sext %63 (hasExternalUses)
%65:i32 = var
%66:i32 = shl %65, 1:i32
%67:i64 = sext %66 (hasExternalUses)
%68:i64 = mulnsw %64, %67
%69:i64 = add %61, %68
%70:i64 = add 33554432:i64, %69 (hasExternalUses)
%71:i64 = and 18446744073642442752:i64, %70
%72:i64 = sub %69, %71
%73:i64 = mulnsw %13, %6
%74:i64 = sext %7 (hasExternalUses)
%75:i64 = mulnsw %74, %3
%76:i64 = add %73, %75
%77:i64 = sext %20 (hasExternalUses)
%78:i64 = mulnsw %77, %15
%79:i64 = add %76, %78
%80:i64 = mulnsw %19, %29
%81:i64 = add %79, %80
%82:i64 = sext %35 (hasExternalUses)
%83:i32 = mul 19:i32, %25
%84:i64 = sext %83
%85:i64 = mulnsw %82, %84
%86:i64 = add %81, %85
%87:i64 = mulnsw %41, %34
%88:i64 = add %86, %87
%89:i64 = sext %50 (hasExternalUses)
%90:i64 = mulnsw %89, %44
%91:i64 = add %88, %90
%92:i64 = mulnsw %56, %49
%93:i64 = add %91, %92
%94:i64 = sext %65 (hasExternalUses)
%95:i64 = mulnsw %94, %59
%96:i64 = add %93, %95
%97:i64 = mulnsw %1, %64
%98:i64 = add %96, %97
%99:i64 = mulnsw %13, %3
%100:i64 = mulnsw %6, %22
%101:i64 = add %99, %100
%102:i64 = mulnsw %15, %29
%103:i64 = add %101, %102
%104:i32 = mul 19:i32, %18
%105:i64 = sext %104
%106:i64 = mulnsw %105, %37
%107:i64 = add %103, %106
%108:i64 = mulnsw %41, %84
%109:i64 = add %107, %108
%110:i64 = mulnsw %34, %52
%111:i64 = add %109, %110
%112:i64 = mulnsw %56, %44
%113:i64 = add %111, %112
%114:i64 = mulnsw %49, %67
%115:i64 = add %113, %114
%116:i64 = mulnsw %1, %59
%117:i64 = add %115, %116
%118:i64 = mulnsw %64, %9
%119:i64 = add %117, %118
%120:i64 = mulnsw %77, %3
%121:i64 = mulnsw %6, %29
%122:i64 = add %120, %121
%123:i32 = mul 19:i32, %14
%124:i64 = sext %123
%125:i64 = mulnsw %82, %124
%126:i64 = add %122, %125
%127:i64 = mulnsw %41, %105
%128:i64 = add %126, %127
%129:i64 = mulnsw %89, %84
%130:i64 = add %128, %129
%131:i64 = mulnsw %56, %34
%132:i64 = add %130, %131
%133:i64 = mulnsw %94, %44
%134:i64 = add %132, %133
%135:i64 = mulnsw %1, %49
%136:i64 = add %134, %135
%137:i64 = mulnsw %74, %59
%138:i64 = add %136, %137
%139:i64 = mulnsw %13, %64
%140:i64 = add %138, %139
%141:i64 = mulnsw %3, %29
%142:i32 = mul 19:i32, %5
%143:i64 = sext %142
%144:i64 = mulnsw %143, %37
%145:i64 = add %141, %144
%146:i64 = mulnsw %41, %124
%147:i64 = add %145, %146
%148:i64 = mulnsw %105, %52
%149:i64 = add %147, %148
%150:i64 = mulnsw %56, %84
%151:i64 = add %149, %150
%152:i64 = mulnsw %34, %67
%153:i64 = add %151, %152
%154:i64 = mulnsw %1, %44
%155:i64 = add %153, %154
%156:i64 = mulnsw %49, %9
%157:i64 = add %155, %156
%158:i64 = mulnsw %13, %59
%159:i64 = add %157, %158
%160:i64 = mulnsw %64, %22
%161:i64 = add %159, %160 (hasExternalUses)
%162:i64 = add 33554432:i64, %161 (hasExternalUses)
%163:i64 = ashr %162, 26:i64
%164:i64 = add %140, %163 (hasExternalUses)
%165:i64 = add 16777216:i64, %164 (hasExternalUses)
%166:i64 = ashr %165, 25:i64
%167:i64 = add %119, %166 (hasExternalUses)
%168:i64 = add 33554432:i64, %167 (hasExternalUses)
%169:i64 = ashr %168, 26:i64
%170:i64 = add %98, %169 (hasExternalUses)
%171:i64 = add 16777216:i64, %170 (hasExternalUses)
%172:i64 = ashr %171, 25:i64
%173:i64 = add %72, %172 (hasExternalUses)
%174:i64 = add 33554432:i64, %173 (hasExternalUses)
%175:i64 = lshr %174, 26:i64
infer %175 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = add 1:i32, %31 (hasExternalUses)
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
%36:i32 = var
%37:i64 = sext %36 (hasExternalUses)
%38:i32 = var
%39:i32 = mul 19:i32, %38
%40:i64 = sext %39
%41:i64 = mulnsw %37, %40
%42:i64 = add %35, %41
%43:i32 = var
%44:i64 = sext %43 (hasExternalUses)
%45:i32 = var
%46:i32 = mul 19:i32, %45
%47:i64 = sext %46 (hasExternalUses)
%48:i64 = mulnsw %44, %47
%49:i64 = add %42, %48
%50:i32 = var
%51:i64 = sext %50 (hasExternalUses)
%52:i32 = var
%53:i32 = mul 19:i32, %52
%54:i64 = sext %53 (hasExternalUses)
%55:i64 = mulnsw %51, %54
%56:i64 = add %49, %55
%57:i32 = var
%58:i64 = sext %57 (hasExternalUses)
%59:i32 = var
%60:i32 = mul 19:i32, %59
%61:i64 = sext %60 (hasExternalUses)
%62:i64 = mulnsw %58, %61
%63:i64 = add %56, %62
%64:i64 = mulnsw %1, %8
%65:i32 = shl %11, 1:i32
%66:i64 = sext %65 (hasExternalUses)
%67:i64 = mulnsw %3, %66
%68:i64 = add %64, %67
%69:i64 = mulnsw %18, %14
%70:i64 = add %68, %69
%71:i32 = shl %23, 1:i32
%72:i64 = sext %71 (hasExternalUses)
%73:i64 = mulnsw %20, %72
%74:i64 = add %70, %73
%75:i64 = mulnsw %26, %33
%76:i64 = add %74, %75
%77:i32 = mul 19:i32, %29
%78:i64 = sext %77
%79:i32 = shl %36, 1:i32
%80:i64 = sext %79 (hasExternalUses)
%81:i64 = mulnsw %78, %80
%82:i64 = add %76, %81
%83:i64 = mulnsw %44, %40
%84:i64 = add %82, %83
%85:i32 = shl %50, 1:i32
%86:i64 = sext %85 (hasExternalUses)
%87:i64 = mulnsw %47, %86
%88:i64 = add %84, %87
%89:i64 = mulnsw %58, %54
%90:i64 = add %88, %89
%91:i32 = shl %5, 1:i32
%92:i64 = sext %91 (hasExternalUses)
%93:i64 = mulnsw %61, %92
%94:i64 = add %90, %93
%95:i64 = add 33554432:i64, %94
%96:i64 = ashr %95, 26:i64
%97:i64 = add %63, %96
%98:i64 = add 16777216:i64, %97 (hasExternalUses)
%99:i64 = and 4261412864:i64, %98
%100:i64 = sub %97, %99
%101:i64 = and 18446744073642442752:i64, %95
%102:i64 = sub %94, %101
%103:i64 = mulnsw %18, %3
%104:i64 = mulnsw %12, %8
%105:i64 = add %103, %104
%106:i64 = mulnsw %24, %14
%107:i64 = add %105, %106
%108:i64 = mulnsw %20, %33
%109:i64 = add %107, %108
%110:i32 = mul 19:i32, %25
%111:i64 = sext %110
%112:i64 = mulnsw %37, %111
%113:i64 = add %109, %112
%114:i64 = mulnsw %44, %78
%115:i64 = add %113, %114
%116:i64 = mulnsw %51, %40
%117:i64 = add %115, %116
%118:i64 = mulnsw %58, %47
%119:i64 = add %117, %118
%120:i64 = mulnsw %6, %54
%121:i64 = add %119, %120
%122:i64 = mulnsw %1, %61
%123:i64 = add %121, %122
%124:i64 = mulnsw %18, %8
%125:i64 = mulnsw %3, %72
%126:i64 = add %124, %125
%127:i64 = mulnsw %14, %33
%128:i64 = add %126, %127
%129:i32 = mul 19:i32, %19
%130:i64 = sext %129
%131:i64 = mulnsw %130, %80
%132:i64 = add %128, %131
%133:i64 = mulnsw %44, %111
%134:i64 = add %132, %133
%135:i64 = mulnsw %78, %86
%136:i64 = add %134, %135
%137:i64 = mulnsw %58, %40
%138:i64 = add %136, %137
%139:i64 = mulnsw %47, %92
%140:i64 = add %138, %139
%141:i64 = mulnsw %1, %54
%142:i64 = add %140, %141
%143:i64 = mulnsw %61, %66
%144:i64 = add %142, %143
%145:i64 = mulnsw %24, %8
%146:i64 = mulnsw %3, %33
%147:i64 = add %145, %146
%148:i32 = mul 19:i32, %13
%149:i64 = sext %148
%150:i64 = mulnsw %37, %149
%151:i64 = add %147, %150
%152:i64 = mulnsw %44, %130
%153:i64 = add %151, %152
%154:i64 = mulnsw %51, %111
%155:i64 = add %153, %154
%156:i64 = mulnsw %58, %78
%157:i64 = add %155, %156
%158:i64 = mulnsw %6, %40
%159:i64 = add %157, %158
%160:i64 = mulnsw %1, %47
%161:i64 = add %159, %160
%162:i64 = mulnsw %12, %54
%163:i64 = add %161, %162
%164:i64 = mulnsw %18, %61
%165:i64 = add %163, %164
%166:i64 = mulnsw %8, %33
%167:i32 = mul 19:i32, %2
%168:i64 = sext %167
%169:i64 = mulnsw %168, %80
%170:i64 = add %166, %169
%171:i64 = mulnsw %44, %149
%172:i64 = add %170, %171
%173:i64 = mulnsw %130, %86
%174:i64 = add %172, %173
%175:i64 = mulnsw %58, %111
%176:i64 = add %174, %175
%177:i64 = mulnsw %78, %92
%178:i64 = add %176, %177
%179:i64 = mulnsw %1, %40
%180:i64 = add %178, %179
%181:i64 = mulnsw %47, %66
%182:i64 = add %180, %181
%183:i64 = mulnsw %18, %54
%184:i64 = add %182, %183
%185:i64 = mulnsw %61, %72
%186:i64 = add %184, %185 (hasExternalUses)
%187:i64 = add 33554432:i64, %186 (hasExternalUses)
%188:i64 = ashr %187, 26:i64
%189:i64 = add %165, %188 (hasExternalUses)
%190:i64 = add 16777216:i64, %189 (hasExternalUses)
%191:i64 = ashr %190, 25:i64
%192:i64 = add %144, %191 (hasExternalUses)
%193:i64 = add 33554432:i64, %192 (hasExternalUses)
%194:i64 = ashr %193, 26:i64
%195:i64 = add %123, %194 (hasExternalUses)
%196:i64 = add 16777216:i64, %195 (hasExternalUses)
%197:i64 = ashr %196, 25:i64
%198:i64 = add %102, %197 (hasExternalUses)
%199:i64 = add 33554432:i64, %198 (hasExternalUses)
%200:i64 = lshr %199, 26:i64
%201:i64 = add %100, %200
infer %201 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = add 1:i32, %31 (hasExternalUses)
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
%36:i32 = var
%37:i64 = sext %36 (hasExternalUses)
%38:i32 = var
%39:i32 = mul 19:i32, %38
%40:i64 = sext %39 (hasExternalUses)
%41:i64 = mulnsw %37, %40
%42:i64 = add %35, %41
%43:i32 = var
%44:i64 = sext %43 (hasExternalUses)
%45:i32 = var
%46:i32 = mul 19:i32, %45
%47:i64 = sext %46 (hasExternalUses)
%48:i64 = mulnsw %44, %47
%49:i64 = add %42, %48
%50:i32 = var
%51:i64 = sext %50 (hasExternalUses)
%52:i32 = var
%53:i32 = mul 19:i32, %52
%54:i64 = sext %53 (hasExternalUses)
%55:i64 = mulnsw %51, %54
%56:i64 = add %49, %55
%57:i32 = var
%58:i64 = sext %57 (hasExternalUses)
%59:i32 = var
%60:i32 = mul 19:i32, %59
%61:i64 = sext %60 (hasExternalUses)
%62:i64 = mulnsw %58, %61
%63:i64 = add %56, %62

Cost = 19
verification query failed!
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i32 = add 1:i32, %27 (hasExternalUses)
%29:i64 = sext %28 (hasExternalUses)
%30:i64 = mulnsw %26, %29
%31:i64 = add %24, %30
%32:i32 = var
%33:i32 = mul 19:i32, %32
%34:i64 = sext %33
%35:i32 = var
%36:i32 = shl %35, 1:i32
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %31, %38
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i32 = var
%43:i32 = mul 19:i32, %42
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %41, %44
%46:i64 = add %39, %45
%47:i32 = var
%48:i32 = mul 19:i32, %47
%49:i64 = sext %48 (hasExternalUses)
%50:i32 = var
%51:i32 = shl %50, 1:i32
%52:i64 = sext %51 (hasExternalUses)
%53:i64 = mulnsw %49, %52
%54:i64 = add %46, %53
%55:i32 = var
%56:i64 = sext %55 (hasExternalUses)
%57:i32 = var
%58:i32 = mul 19:i32, %57
%59:i64 = sext %58 (hasExternalUses)
%60:i64 = mulnsw %56, %59
%61:i64 = add %54, %60
%62:i32 = var
%63:i32 = mul 19:i32, %62
%64:i64 = sext %63 (hasExternalUses)
%65:i32 = var
%66:i32 = shl %65, 1:i32
%67:i64 = sext %66 (hasExternalUses)
%68:i64 = mulnsw %64, %67
%69:i64 = add %61, %68
%70:i64 = add 33554432:i64, %69 (hasExternalUses)
%71:i64 = and 18446744073642442752:i64, %70
%72:i64 = sub %69, %71
%73:i64 = mulnsw %13, %6
%74:i64 = sext %7 (hasExternalUses)
%75:i64 = mulnsw %74, %3
%76:i64 = add %73, %75
%77:i64 = sext %20 (hasExternalUses)
%78:i64 = mulnsw %77, %15
%79:i64 = add %76, %78
%80:i64 = mulnsw %19, %29
%81:i64 = add %79, %80
%82:i64 = sext %35 (hasExternalUses)
%83:i32 = mul 19:i32, %25
%84:i64 = sext %83
%85:i64 = mulnsw %82, %84
%86:i64 = add %81, %85
%87:i64 = mulnsw %41, %34
%88:i64 = add %86, %87
%89:i64 = sext %50 (hasExternalUses)
%90:i64 = mulnsw %89, %44
%91:i64 = add %88, %90
%92:i64 = mulnsw %56, %49
%93:i64 = add %91, %92
%94:i64 = sext %65 (hasExternalUses)
%95:i64 = mulnsw %94, %59
%96:i64 = add %93, %95
%97:i64 = mulnsw %1, %64
%98:i64 = add %96, %97
%99:i64 = mulnsw %13, %3
%100:i64 = mulnsw %6, %22
%101:i64 = add %99, %100
%102:i64 = mulnsw %15, %29
%103:i64 = add %101, %102
%104:i32 = mul 19:i32, %18
%105:i64 = sext %104
%106:i64 = mulnsw %105, %37
%107:i64 = add %103, %106
%108:i64 = mulnsw %41, %84
%109:i64 = add %107, %108
%110:i64 = mulnsw %34, %52
%111:i64 = add %109, %110
%112:i64 = mulnsw %56, %44
%113:i64 = add %111, %112
%114:i64 = mulnsw %49, %67
%115:i64 = add %113, %114
%116:i64 = mulnsw %1, %59
%117:i64 = add %115, %116
%118:i64 = mulnsw %64, %9
%119:i64 = add %117, %118
%120:i64 = mulnsw %77, %3
%121:i64 = mulnsw %6, %29
%122:i64 = add %120, %121
%123:i32 = mul 19:i32, %14
%124:i64 = sext %123
%125:i64 = mulnsw %82, %124
%126:i64 = add %122, %125
%127:i64 = mulnsw %41, %105
%128:i64 = add %126, %127
%129:i64 = mulnsw %89, %84
%130:i64 = add %128, %129
%131:i64 = mulnsw %56, %34
%132:i64 = add %130, %131
%133:i64 = mulnsw %94, %44
%134:i64 = add %132, %133
%135:i64 = mulnsw %1, %49
%136:i64 = add %134, %135
%137:i64 = mulnsw %74, %59
%138:i64 = add %136, %137
%139:i64 = mulnsw %13, %64
%140:i64 = add %138, %139
%141:i64 = mulnsw %3, %29
%142:i32 = mul 19:i32, %5
%143:i64 = sext %142
%144:i64 = mulnsw %143, %37
%145:i64 = add %141, %144
%146:i64 = mulnsw %41, %124
%147:i64 = add %145, %146
%148:i64 = mulnsw %105, %52
%149:i64 = add %147, %148
%150:i64 = mulnsw %56, %84
%151:i64 = add %149, %150
%152:i64 = mulnsw %34, %67
%153:i64 = add %151, %152
%154:i64 = mulnsw %1, %44
%155:i64 = add %153, %154
%156:i64 = mulnsw %49, %9
%157:i64 = add %155, %156
%158:i64 = mulnsw %13, %59
%159:i64 = add %157, %158
%160:i64 = mulnsw %64, %22
%161:i64 = add %159, %160 (hasExternalUses)
%162:i64 = add 33554432:i64, %161 (hasExternalUses)
%163:i64 = ashr %162, 26:i64
%164:i64 = add %140, %163 (hasExternalUses)
%165:i64 = add 16777216:i64, %164 (hasExternalUses)
%166:i64 = ashr %165, 25:i64
%167:i64 = add %119, %166 (hasExternalUses)
%168:i64 = add 33554432:i64, %167 (hasExternalUses)
%169:i64 = ashr %168, 26:i64
%170:i64 = add %98, %169 (hasExternalUses)
%171:i64 = add 16777216:i64, %170 (hasExternalUses)
%172:i64 = ashr %171, 25:i64
%173:i64 = add %72, %172 (hasExternalUses)
%174:i64 = add 33554432:i64, %173 (hasExternalUses)
%175:i64 = and 4227858432:i64, %174
infer %175 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
ConstantSynthesis: solver returns error on first query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i32 = add 1:i32, %27 (hasExternalUses)
%29:i64 = sext %28 (hasExternalUses)
%30:i64 = mulnsw %26, %29
%31:i64 = add %24, %30
%32:i32 = var
%33:i32 = mul 19:i32, %32
%34:i64 = sext %33
%35:i32 = var
%36:i32 = shl %35, 1:i32
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %31, %38
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i32 = var
%43:i32 = mul 19:i32, %42
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %41, %44
%46:i64 = add %39, %45
%47:i32 = var
%48:i32 = mul 19:i32, %47
%49:i64 = sext %48 (hasExternalUses)
%50:i32 = var
%51:i32 = shl %50, 1:i32
%52:i64 = sext %51 (hasExternalUses)
%53:i64 = mulnsw %49, %52
%54:i64 = add %46, %53
%55:i32 = var
%56:i64 = sext %55 (hasExternalUses)
%57:i32 = var
%58:i32 = mul 19:i32, %57
%59:i64 = sext %58 (hasExternalUses)
%60:i64 = mulnsw %56, %59
%61:i64 = add %54, %60
%62:i32 = var
%63:i32 = mul 19:i32, %62
%64:i64 = sext %63 (hasExternalUses)
%65:i32 = var
%66:i32 = shl %65, 1:i32
%67:i64 = sext %66 (hasExternalUses)
%68:i64 = mulnsw %64, %67
%69:i64 = add %61, %68
%70:i64 = add 33554432:i64, %69 (hasExternalUses)
%71:i64 = and 18446744073642442752:i64, %70
%72:i64 = sub %69, %71
%73:i64 = mulnsw %13, %6
%74:i64 = sext %7 (hasExternalUses)
%75:i64 = mulnsw %74, %3
%76:i64 = add %73, %75
%77:i64 = sext %20 (hasExternalUses)
%78:i64 = mulnsw %77, %15
%79:i64 = add %76, %78
%80:i64 = mulnsw %19, %29
%81:i64 = add %79, %80
%82:i64 = sext %35 (hasExternalUses)
%83:i32 = mul 19:i32, %25
%84:i64 = sext %83
%85:i64 = mulnsw %82, %84
%86:i64 = add %81, %85
%87:i64 = mulnsw %41, %34
%88:i64 = add %86, %87
%89:i64 = sext %50 (hasExternalUses)
%90:i64 = mulnsw %89, %44
%91:i64 = add %88, %90
%92:i64 = mulnsw %56, %49
%93:i64 = add %91, %92
%94:i64 = sext %65 (hasExternalUses)
%95:i64 = mulnsw %94, %59
%96:i64 = add %93, %95
%97:i64 = mulnsw %1, %64
%98:i64 = add %96, %97
%99:i64 = mulnsw %13, %3
%100:i64 = mulnsw %6, %22
%101:i64 = add %99, %100
%102:i64 = mulnsw %15, %29
%103:i64 = add %101, %102
%104:i32 = mul 19:i32, %18
%105:i64 = sext %104
%106:i64 = mulnsw %105, %37
%107:i64 = add %103, %106
%108:i64 = mulnsw %41, %84
%109:i64 = add %107, %108
%110:i64 = mulnsw %34, %52
%111:i64 = add %109, %110
%112:i64 = mulnsw %56, %44
%113:i64 = add %111, %112
%114:i64 = mulnsw %49, %67
%115:i64 = add %113, %114
%116:i64 = mulnsw %1, %59
%117:i64 = add %115, %116
%118:i64 = mulnsw %64, %9
%119:i64 = add %117, %118
%120:i64 = mulnsw %77, %3
%121:i64 = mulnsw %6, %29
%122:i64 = add %120, %121
%123:i32 = mul 19:i32, %14
%124:i64 = sext %123
%125:i64 = mulnsw %82, %124
%126:i64 = add %122, %125
%127:i64 = mulnsw %41, %105
%128:i64 = add %126, %127
%129:i64 = mulnsw %89, %84
%130:i64 = add %128, %129
%131:i64 = mulnsw %56, %34
%132:i64 = add %130, %131
%133:i64 = mulnsw %94, %44
%134:i64 = add %132, %133
%135:i64 = mulnsw %1, %49
%136:i64 = add %134, %135
%137:i64 = mulnsw %74, %59
%138:i64 = add %136, %137
%139:i64 = mulnsw %13, %64
%140:i64 = add %138, %139
%141:i64 = mulnsw %3, %29
%142:i32 = mul 19:i32, %5
%143:i64 = sext %142
%144:i64 = mulnsw %143, %37
%145:i64 = add %141, %144
%146:i64 = mulnsw %41, %124
%147:i64 = add %145, %146
%148:i64 = mulnsw %105, %52
%149:i64 = add %147, %148
%150:i64 = mulnsw %56, %84
%151:i64 = add %149, %150
%152:i64 = mulnsw %34, %67
%153:i64 = add %151, %152
%154:i64 = mulnsw %1, %44
%155:i64 = add %153, %154
%156:i64 = mulnsw %49, %9
%157:i64 = add %155, %156
%158:i64 = mulnsw %13, %59
%159:i64 = add %157, %158
%160:i64 = mulnsw %64, %22
%161:i64 = add %159, %160 (hasExternalUses)
%162:i64 = add 33554432:i64, %161 (hasExternalUses)
%163:i64 = ashr %162, 26:i64
%164:i64 = add %140, %163 (hasExternalUses)
%165:i64 = add 16777216:i64, %164 (hasExternalUses)
%166:i64 = ashr %165, 25:i64
%167:i64 = add %119, %166 (hasExternalUses)
%168:i64 = add 33554432:i64, %167 (hasExternalUses)
%169:i64 = ashr %168, 26:i64
%170:i64 = add %98, %169 (hasExternalUses)
%171:i64 = add 16777216:i64, %170 (hasExternalUses)
%172:i64 = ashr %171, 25:i64
%173:i64 = add %72, %172
%174:i64 = add 33554432:i64, %173 (hasExternalUses)
%175:i64 = and 4227858432:i64, %174
%176:i64 = sub %173, %175
infer %176 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %26, %28
%30:i64 = add %24, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = shl %33, 1:i32
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i64 = mulnsw %39, %41
%43:i64 = add %37, %42
%44:i32 = var
%45:i64 = sext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = shl %46, 1:i32
%48:i64 = sext %47 (hasExternalUses)
%49:i64 = mulnsw %45, %48
%50:i64 = add %43, %49
%51:i32 = var
%52:i64 = sext %51 (hasExternalUses)
%53:i32 = var
%54:i32 = add 1:i32, %53 (hasExternalUses)
%55:i64 = sext %54 (hasExternalUses)
%56:i64 = mulnsw %52, %55
%57:i64 = add %50, %56
%58:i32 = var
%59:i32 = mul 19:i32, %58
%60:i64 = sext %59 (hasExternalUses)
%61:i32 = var
%62:i32 = shl %61, 1:i32
%63:i64 = sext %62 (hasExternalUses)
%64:i64 = mulnsw %60, %63
%65:i64 = add %57, %64
%66:i64 = mulnsw %13, %6
%67:i64 = sext %7 (hasExternalUses)
%68:i64 = mulnsw %67, %3
%69:i64 = add %66, %68
%70:i64 = sext %20 (hasExternalUses)
%71:i64 = mulnsw %70, %15
%72:i64 = add %69, %71
%73:i64 = mulnsw %26, %19
%74:i64 = add %72, %73
%75:i64 = sext %33 (hasExternalUses)
%76:i64 = mulnsw %75, %28
%77:i64 = add %74, %76
%78:i64 = mulnsw %39, %32
%79:i64 = add %77, %78
%80:i64 = sext %46 (hasExternalUses)
%81:i64 = mulnsw %80, %41
%82:i64 = add %79, %81
%83:i64 = mulnsw %45, %55
%84:i64 = add %82, %83
%85:i64 = sext %61 (hasExternalUses)
%86:i32 = mul 19:i32, %51
%87:i64 = sext %86 (hasExternalUses)
%88:i64 = mulnsw %85, %87
%89:i64 = add %84, %88
%90:i64 = mulnsw %1, %60
%91:i64 = add %89, %90
%92:i64 = mulnsw %13, %3
%93:i64 = mulnsw %6, %22
%94:i64 = add %92, %93
%95:i64 = mulnsw %26, %15
%96:i64 = add %94, %95
%97:i64 = mulnsw %19, %35
%98:i64 = add %96, %97
%99:i64 = mulnsw %39, %28
%100:i64 = add %98, %99
%101:i64 = mulnsw %32, %48
%102:i64 = add %100, %101
%103:i64 = mulnsw %41, %55
%104:i64 = add %102, %103
%105:i32 = mul 19:i32, %44
%106:i64 = sext %105 (hasExternalUses)
%107:i64 = mulnsw %106, %63
%108:i64 = add %104, %107
%109:i64 = mulnsw %1, %87
%110:i64 = add %108, %109
%111:i64 = mulnsw %60, %9
%112:i64 = add %110, %111
%113:i64 = mulnsw %26, %6
%114:i64 = mulnsw %70, %3
%115:i64 = add %113, %114
%116:i64 = mulnsw %75, %15
%117:i64 = add %115, %116
%118:i64 = mulnsw %39, %19
%119:i64 = add %117, %118
%120:i64 = mulnsw %80, %28
%121:i64 = add %119, %120
%122:i64 = mulnsw %32, %55
%123:i64 = add %121, %122
%124:i32 = mul 19:i32, %40
%125:i64 = sext %124 (hasExternalUses)
%126:i64 = mulnsw %85, %125
%127:i64 = add %123, %126
%128:i64 = mulnsw %1, %106
%129:i64 = add %127, %128
%130:i64 = mulnsw %67, %87
%131:i64 = add %129, %130
%132:i64 = mulnsw %13, %60
%133:i64 = add %131, %132
%134:i64 = mulnsw %26, %3
%135:i64 = mulnsw %6, %35
%136:i64 = add %134, %135
%137:i64 = mulnsw %39, %15
%138:i64 = add %136, %137
%139:i64 = mulnsw %19, %48
%140:i64 = add %138, %139
%141:i64 = mulnsw %28, %55
%142:i64 = add %140, %141
%143:i32 = mul 19:i32, %31
%144:i64 = sext %143 (hasExternalUses)
%145:i64 = mulnsw %144, %63
%146:i64 = add %142, %145
%147:i64 = mulnsw %1, %125
%148:i64 = add %146, %147
%149:i64 = mulnsw %106, %9
%150:i64 = add %148, %149
%151:i64 = mulnsw %13, %87
%152:i64 = add %150, %151
%153:i64 = mulnsw %60, %22
%154:i64 = add %152, %153 (hasExternalUses)
%155:i64 = add 33554432:i64, %154 (hasExternalUses)
%156:i64 = ashr %155, 26:i64
%157:i64 = add %133, %156 (hasExternalUses)
%158:i64 = add 16777216:i64, %157 (hasExternalUses)
%159:i64 = ashr %158, 25:i64
%160:i64 = add %112, %159 (hasExternalUses)
%161:i64 = add 33554432:i64, %160 (hasExternalUses)
%162:i64 = ashr %161, 26:i64
%163:i64 = add %91, %162 (hasExternalUses)
%164:i64 = add 16777216:i64, %163 (hasExternalUses)
%165:i64 = ashr %164, 25:i64
%166:i64 = add %65, %165 (hasExternalUses)
%167:i64 = add 33554432:i64, %166
infer %167 (demandedBits=1111111111111111111111111111111111111100000000000000000000000000)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %26, %28
%30:i64 = add %24, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = shl %33, 1:i32
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i64 = mulnsw %39, %41
%43:i64 = add %37, %42
%44:i32 = var
%45:i64 = sext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = shl %46, 1:i32
%48:i64 = sext %47 (hasExternalUses)
%49:i64 = mulnsw %45, %48
%50:i64 = add %43, %49
%51:i32 = var
%52:i64 = sext %51 (hasExternalUses)
%53:i32 = var
%54:i32 = add 1:i32, %53 (hasExternalUses)
%55:i64 = sext %54 (hasExternalUses)
%56:i64 = mulnsw %52, %55
%57:i64 = add %50, %56
%58:i32 = var
%59:i32 = mul 19:i32, %58
%60:i64 = sext %59 (hasExternalUses)
%61:i32 = var
%62:i32 = shl %61, 1:i32
%63:i64 = sext %62 (hasExternalUses)
%64:i64 = mulnsw %60, %63
%65:i64 = add %57, %64
%66:i64 = mulnsw %13, %6
%67:i64 = sext %7 (hasExternalUses)
%68:i64 = mulnsw %67, %3
%69:i64 = add %66, %68
%70:i64 = sext %20 (hasExternalUses)
%71:i64 = mulnsw %70, %15
%72:i64 = add %69, %71
%73:i64 = mulnsw %26, %19
%74:i64 = add %72, %73
%75:i64 = sext %33 (hasExternalUses)
%76:i64 = mulnsw %75, %28
%77:i64 = add %74, %76
%78:i64 = mulnsw %39, %32
%79:i64 = add %77, %78
%80:i64 = sext %46 (hasExternalUses)
%81:i64 = mulnsw %80, %41
%82:i64 = add %79, %81
%83:i64 = mulnsw %45, %55
%84:i64 = add %82, %83
%85:i64 = sext %61 (hasExternalUses)
%86:i32 = mul 19:i32, %51
%87:i64 = sext %86 (hasExternalUses)
%88:i64 = mulnsw %85, %87
%89:i64 = add %84, %88
%90:i64 = mulnsw %1, %60
%91:i64 = add %89, %90
%92:i64 = mulnsw %13, %3
%93:i64 = mulnsw %6, %22
%94:i64 = add %92, %93
%95:i64 = mulnsw %26, %15
%96:i64 = add %94, %95
%97:i64 = mulnsw %19, %35
%98:i64 = add %96, %97
%99:i64 = mulnsw %39, %28
%100:i64 = add %98, %99
%101:i64 = mulnsw %32, %48
%102:i64 = add %100, %101
%103:i64 = mulnsw %41, %55
%104:i64 = add %102, %103
%105:i32 = mul 19:i32, %44
%106:i64 = sext %105 (hasExternalUses)
%107:i64 = mulnsw %106, %63
%108:i64 = add %104, %107
%109:i64 = mulnsw %1, %87
%110:i64 = add %108, %109
%111:i64 = mulnsw %60, %9
%112:i64 = add %110, %111
%113:i64 = mulnsw %26, %6
%114:i64 = mulnsw %70, %3
%115:i64 = add %113, %114
%116:i64 = mulnsw %75, %15
%117:i64 = add %115, %116
%118:i64 = mulnsw %39, %19
%119:i64 = add %117, %118
%120:i64 = mulnsw %80, %28
%121:i64 = add %119, %120
%122:i64 = mulnsw %32, %55
%123:i64 = add %121, %122
%124:i32 = mul 19:i32, %40
%125:i64 = sext %124 (hasExternalUses)
%126:i64 = mulnsw %85, %125
%127:i64 = add %123, %126
%128:i64 = mulnsw %1, %106
%129:i64 = add %127, %128
%130:i64 = mulnsw %67, %87
%131:i64 = add %129, %130
%132:i64 = mulnsw %13, %60
%133:i64 = add %131, %132
%134:i64 = mulnsw %26, %3
%135:i64 = mulnsw %6, %35
%136:i64 = add %134, %135
%137:i64 = mulnsw %39, %15
%138:i64 = add %136, %137
%139:i64 = mulnsw %19, %48
%140:i64 = add %138, %139
%141:i64 = mulnsw %28, %55
%142:i64 = add %140, %141
%143:i32 = mul 19:i32, %31
%144:i64 = sext %143 (hasExternalUses)
%145:i64 = mulnsw %144, %63
%146:i64 = add %142, %145
%147:i64 = mulnsw %1, %125
%148:i64 = add %146, %147
%149:i64 = mulnsw %106, %9
%150:i64 = add %148, %149
%151:i64 = mulnsw %13, %87
%152:i64 = add %150, %151
%153:i64 = mulnsw %60, %22
%154:i64 = add %152, %153 (hasExternalUses)
%155:i64 = add 33554432:i64, %154 (hasExternalUses)
%156:i64 = ashr %155, 26:i64
%157:i64 = add %133, %156 (hasExternalUses)
%158:i64 = add 16777216:i64, %157 (hasExternalUses)
%159:i64 = ashr %158, 25:i64
%160:i64 = add %112, %159 (hasExternalUses)
%161:i64 = add 33554432:i64, %160 (hasExternalUses)
%162:i64 = ashr %161, 26:i64
%163:i64 = add %91, %162 (hasExternalUses)
%164:i64 = add 16777216:i64, %163 (hasExternalUses)
%165:i64 = ashr %164, 25:i64
%166:i64 = add %65, %165 (hasExternalUses)
%167:i64 = add 33554432:i64, %166 (hasExternalUses)
%168:i64 = ashr %167, 26:i64
infer %168


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i64 = mulnsw %30, %32
%34:i64 = add %28, %33
%35:i32 = var
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i64 = sext %37 (hasExternalUses)
%39:i64 = mulnsw %36, %38
%40:i64 = add %34, %39
%41:i32 = var
%42:i64 = sext %41 (hasExternalUses)
%43:i32 = var
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %42, %44
%46:i64 = add %40, %45
infer %46


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i64 = mulnsw %30, %32
%34:i64 = add %28, %33
%35:i32 = var
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i64 = sext %37 (hasExternalUses)
%39:i64 = mulnsw %36, %38
%40:i64 = add %34, %39
%41:i32 = var
%42:i64 = sext %41 (hasExternalUses)
%43:i32 = var
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %42, %44
%46:i64 = add %40, %45
%47:i32 = var
%48:i64 = sext %47 (hasExternalUses)
%49:i32 = var
%50:i64 = sext %49 (hasExternalUses)
%51:i64 = mulnsw %48, %50
%52:i64 = add %46, %51
infer %52


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i64 = mulnsw %30, %32
%34:i64 = add %28, %33
%35:i32 = var
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i64 = sext %37 (hasExternalUses)
%39:i64 = mulnsw %36, %38
%40:i64 = add %34, %39
%41:i32 = var
%42:i64 = sext %41 (hasExternalUses)
%43:i32 = var
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %42, %44
%46:i64 = add %40, %45
%47:i32 = var
%48:i64 = sext %47 (hasExternalUses)
%49:i32 = var
%50:i64 = sext %49 (hasExternalUses)
%51:i64 = mulnsw %48, %50
%52:i64 = add %46, %51
%53:i32 = var
%54:i64 = sext %53
%55:i32 = var
%56:i32 = add 1:i32, %55 (hasExternalUses)
%57:i64 = sext %56 (hasExternalUses)
%58:i64 = mulnsw %54, %57
%59:i64 = add %52, %58
infer %59


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i64 = sext %31
%33:i64 = mulnsw %30, %32
%34:i64 = add %28, %33
%35:i32 = var
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i64 = sext %37
%39:i64 = mulnsw %36, %38
%40:i64 = add %34, %39
%41:i32 = var
%42:i64 = sext %41 (hasExternalUses)
%43:i32 = var
%44:i64 = sext %43
%45:i64 = mulnsw %42, %44
%46:i64 = add %40, %45
%47:i32 = var
%48:i64 = sext %47 (hasExternalUses)
%49:i32 = var
%50:i64 = sext %49
%51:i64 = mulnsw %48, %50
%52:i64 = add %46, %51
%53:i32 = var
%54:i64 = sext %53
%55:i32 = var
%56:i32 = add 1:i32, %55 (hasExternalUses)
%57:i64 = sext %56 (hasExternalUses)
%58:i64 = mulnsw %54, %57
%59:i64 = add %52, %58
%60:i64 = mulnsw %1, %8
%61:i32 = shl %11, 1:i32
%62:i64 = sext %61 (hasExternalUses)
%63:i64 = mulnsw %3, %62
%64:i64 = add %60, %63
%65:i64 = mulnsw %18, %14
%66:i64 = add %64, %65
%67:i32 = shl %23, 1:i32
%68:i64 = sext %67 (hasExternalUses)
%69:i64 = mulnsw %20, %68
%70:i64 = add %66, %69
%71:i64 = mulnsw %30, %26
%72:i64 = add %70, %71
%73:i32 = shl %35, 1:i32
%74:i64 = sext %73 (hasExternalUses)
%75:i64 = mulnsw %32, %74
%76:i64 = add %72, %75
%77:i64 = mulnsw %42, %38
%78:i64 = add %76, %77
%79:i32 = shl %47, 1:i32
%80:i64 = sext %79 (hasExternalUses)
%81:i64 = mulnsw %44, %80
%82:i64 = add %78, %81
%83:i64 = mulnsw %50, %57
%84:i64 = add %82, %83
%85:i32 = mul 19:i32, %53
%86:i64 = sext %85 (hasExternalUses)
%87:i32 = shl %5, 1:i32
%88:i64 = sext %87 (hasExternalUses)
%89:i64 = mulnsw %86, %88
%90:i64 = add %84, %89
%91:i64 = mulnsw %18, %3
%92:i64 = mulnsw %12, %8
%93:i64 = add %91, %92
%94:i64 = mulnsw %24, %14
%95:i64 = add %93, %94
%96:i64 = mulnsw %30, %20
%97:i64 = add %95, %96
%98:i64 = mulnsw %36, %26
%99:i64 = add %97, %98
%100:i64 = mulnsw %42, %32
%101:i64 = add %99, %100
%102:i64 = mulnsw %48, %38
%103:i64 = add %101, %102
%104:i64 = mulnsw %44, %57
%105:i64 = add %103, %104
%106:i32 = mul 19:i32, %49
%107:i64 = sext %106 (hasExternalUses)
%108:i64 = mulnsw %6, %107
%109:i64 = add %105, %108
%110:i64 = mulnsw %1, %86
%111:i64 = add %109, %110
%112:i64 = mulnsw %18, %8
%113:i64 = mulnsw %3, %68
%114:i64 = add %112, %113
%115:i64 = mulnsw %30, %14
%116:i64 = add %114, %115
%117:i64 = mulnsw %20, %74
%118:i64 = add %116, %117
%119:i64 = mulnsw %42, %26
%120:i64 = add %118, %119
%121:i64 = mulnsw %32, %80
%122:i64 = add %120, %121
%123:i64 = mulnsw %38, %57
%124:i64 = add %122, %123
%125:i32 = mul 19:i32, %43
%126:i64 = sext %125 (hasExternalUses)
%127:i64 = mulnsw %126, %88
%128:i64 = add %124, %127
%129:i64 = mulnsw %1, %107
%130:i64 = add %128, %129
%131:i64 = mulnsw %86, %62
%132:i64 = add %130, %131
%133:i64 = mulnsw %30, %3
%134:i64 = mulnsw %24, %8
%135:i64 = add %133, %134
%136:i64 = mulnsw %36, %14
%137:i64 = add %135, %136
%138:i64 = mulnsw %42, %20
%139:i64 = add %137, %138
%140:i64 = mulnsw %48, %26
%141:i64 = add %139, %140
%142:i64 = mulnsw %32, %57
%143:i64 = add %141, %142
%144:i32 = mul 19:i32, %37
%145:i64 = sext %144 (hasExternalUses)
%146:i64 = mulnsw %6, %145
%147:i64 = add %143, %146
%148:i64 = mulnsw %1, %126
%149:i64 = add %147, %148
%150:i64 = mulnsw %12, %107
%151:i64 = add %149, %150
%152:i64 = mulnsw %18, %86
%153:i64 = add %151, %152
%154:i64 = mulnsw %30, %8
%155:i64 = mulnsw %3, %74
%156:i64 = add %154, %155
%157:i64 = mulnsw %42, %14
%158:i64 = add %156, %157
%159:i64 = mulnsw %20, %80
%160:i64 = add %158, %159
%161:i64 = mulnsw %26, %57
%162:i64 = add %160, %161
%163:i32 = mul 19:i32, %31
%164:i64 = sext %163 (hasExternalUses)
%165:i64 = mulnsw %164, %88
%166:i64 = add %162, %165
%167:i64 = mulnsw %1, %145
%168:i64 = add %166, %167
%169:i64 = mulnsw %126, %62
%170:i64 = add %168, %169
%171:i64 = mulnsw %18, %107
%172:i64 = add %170, %171
%173:i64 = mulnsw %86, %68
%174:i64 = add %172, %173 (hasExternalUses)
%175:i64 = add 33554432:i64, %174 (hasExternalUses)
%176:i64 = ashr %175, 26:i64
%177:i64 = add %153, %176 (hasExternalUses)
%178:i64 = add 16777216:i64, %177 (hasExternalUses)
%179:i64 = ashr %178, 25:i64
%180:i64 = add %132, %179 (hasExternalUses)
%181:i64 = add 33554432:i64, %180 (hasExternalUses)
%182:i64 = ashr %181, 26:i64
%183:i64 = add %111, %182 (hasExternalUses)
%184:i64 = add 16777216:i64, %183 (hasExternalUses)
%185:i64 = ashr %184, 25:i64
%186:i64 = add %90, %185 (hasExternalUses)
%187:i64 = add 33554432:i64, %186 (hasExternalUses)
%188:i64 = ashr %187, 26:i64
%189:i64 = add %59, %188
infer %189


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %26, %28
%30:i64 = add %24, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = shl %33, 1:i32
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i64 = mulnsw %39, %41
%43:i64 = add %37, %42
%44:i32 = var
%45:i64 = sext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = shl %46, 1:i32
%48:i64 = sext %47 (hasExternalUses)
%49:i64 = mulnsw %45, %48
%50:i64 = add %43, %49
%51:i32 = var
%52:i64 = sext %51 (hasExternalUses)
%53:i32 = var
%54:i32 = add 1:i32, %53 (hasExternalUses)
%55:i64 = sext %54 (hasExternalUses)
%56:i64 = mulnsw %52, %55
%57:i64 = add %50, %56
%58:i32 = var
%59:i32 = mul 19:i32, %58
%60:i64 = sext %59 (hasExternalUses)
%61:i32 = var
%62:i32 = shl %61, 1:i32
%63:i64 = sext %62 (hasExternalUses)
%64:i64 = mulnsw %60, %63
%65:i64 = add %57, %64
%66:i64 = mulnsw %13, %6
%67:i64 = sext %7 (hasExternalUses)
%68:i64 = mulnsw %67, %3
%69:i64 = add %66, %68
%70:i64 = sext %20 (hasExternalUses)
%71:i64 = mulnsw %70, %15
%72:i64 = add %69, %71
%73:i64 = mulnsw %26, %19
%74:i64 = add %72, %73
%75:i64 = sext %33 (hasExternalUses)
%76:i64 = mulnsw %75, %28
%77:i64 = add %74, %76
%78:i64 = mulnsw %39, %32
%79:i64 = add %77, %78
%80:i64 = sext %46 (hasExternalUses)
%81:i64 = mulnsw %80, %41
%82:i64 = add %79, %81
%83:i64 = mulnsw %45, %55
%84:i64 = add %82, %83
%85:i64 = sext %61 (hasExternalUses)
%86:i32 = mul 19:i32, %51
%87:i64 = sext %86 (hasExternalUses)
%88:i64 = mulnsw %85, %87
%89:i64 = add %84, %88
%90:i64 = mulnsw %1, %60
%91:i64 = add %89, %90
%92:i64 = mulnsw %13, %3
%93:i64 = mulnsw %6, %22
%94:i64 = add %92, %93
%95:i64 = mulnsw %26, %15
%96:i64 = add %94, %95
%97:i64 = mulnsw %19, %35
%98:i64 = add %96, %97
%99:i64 = mulnsw %39, %28
%100:i64 = add %98, %99
%101:i64 = mulnsw %32, %48
%102:i64 = add %100, %101
%103:i64 = mulnsw %41, %55
%104:i64 = add %102, %103
%105:i32 = mul 19:i32, %44
%106:i64 = sext %105 (hasExternalUses)
%107:i64 = mulnsw %106, %63
%108:i64 = add %104, %107
%109:i64 = mulnsw %1, %87
%110:i64 = add %108, %109
%111:i64 = mulnsw %60, %9
%112:i64 = add %110, %111
%113:i64 = mulnsw %26, %6
%114:i64 = mulnsw %70, %3
%115:i64 = add %113, %114
%116:i64 = mulnsw %75, %15
%117:i64 = add %115, %116
%118:i64 = mulnsw %39, %19
%119:i64 = add %117, %118
%120:i64 = mulnsw %80, %28
%121:i64 = add %119, %120
%122:i64 = mulnsw %32, %55
%123:i64 = add %121, %122
%124:i32 = mul 19:i32, %40
%125:i64 = sext %124 (hasExternalUses)
%126:i64 = mulnsw %85, %125
%127:i64 = add %123, %126
%128:i64 = mulnsw %1, %106
%129:i64 = add %127, %128
%130:i64 = mulnsw %67, %87
%131:i64 = add %129, %130
%132:i64 = mulnsw %13, %60
%133:i64 = add %131, %132
%134:i64 = mulnsw %26, %3
%135:i64 = mulnsw %6, %35
%136:i64 = add %134, %135
%137:i64 = mulnsw %39, %15
%138:i64 = add %136, %137
%139:i64 = mulnsw %19, %48
%140:i64 = add %138, %139
%141:i64 = mulnsw %28, %55
%142:i64 = add %140, %141
%143:i32 = mul 19:i32, %31
%144:i64 = sext %143 (hasExternalUses)
%145:i64 = mulnsw %144, %63
%146:i64 = add %142, %145
%147:i64 = mulnsw %1, %125
%148:i64 = add %146, %147
%149:i64 = mulnsw %106, %9
%150:i64 = add %148, %149
%151:i64 = mulnsw %13, %87
%152:i64 = add %150, %151
%153:i64 = mulnsw %60, %22
%154:i64 = add %152, %153 (hasExternalUses)
%155:i64 = add 33554432:i64, %154 (hasExternalUses)
%156:i64 = ashr %155, 26:i64
%157:i64 = add %133, %156 (hasExternalUses)
%158:i64 = add 16777216:i64, %157 (hasExternalUses)
%159:i64 = ashr %158, 25:i64
%160:i64 = add %112, %159 (hasExternalUses)
%161:i64 = add 33554432:i64, %160 (hasExternalUses)
%162:i64 = ashr %161, 26:i64
%163:i64 = add %91, %162 (hasExternalUses)
%164:i64 = add 16777216:i64, %163 (hasExternalUses)
%165:i64 = ashr %164, 25:i64
%166:i64 = add %65, %165 (hasExternalUses)
%167:i64 = add 33554432:i64, %166 (hasExternalUses)
%168:i64 = and 4227858432:i64, %167
infer %168 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
ConstantSynthesis: solver returns error on first query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %26, %28
%30:i64 = add %24, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = shl %33, 1:i32
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i64 = mulnsw %39, %41
%43:i64 = add %37, %42
%44:i32 = var
%45:i64 = sext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = shl %46, 1:i32
%48:i64 = sext %47 (hasExternalUses)
%49:i64 = mulnsw %45, %48
%50:i64 = add %43, %49
%51:i32 = var
%52:i64 = sext %51 (hasExternalUses)
%53:i32 = var
%54:i32 = add 1:i32, %53 (hasExternalUses)
%55:i64 = sext %54 (hasExternalUses)
%56:i64 = mulnsw %52, %55
%57:i64 = add %50, %56
%58:i32 = var
%59:i32 = mul 19:i32, %58
%60:i64 = sext %59 (hasExternalUses)
%61:i32 = var
%62:i32 = shl %61, 1:i32
%63:i64 = sext %62 (hasExternalUses)
%64:i64 = mulnsw %60, %63
%65:i64 = add %57, %64
%66:i64 = mulnsw %13, %6
%67:i64 = sext %7 (hasExternalUses)
%68:i64 = mulnsw %67, %3
%69:i64 = add %66, %68
%70:i64 = sext %20 (hasExternalUses)
%71:i64 = mulnsw %70, %15
%72:i64 = add %69, %71
%73:i64 = mulnsw %26, %19
%74:i64 = add %72, %73
%75:i64 = sext %33 (hasExternalUses)
%76:i64 = mulnsw %75, %28
%77:i64 = add %74, %76
%78:i64 = mulnsw %39, %32
%79:i64 = add %77, %78
%80:i64 = sext %46 (hasExternalUses)
%81:i64 = mulnsw %80, %41
%82:i64 = add %79, %81
%83:i64 = mulnsw %45, %55
%84:i64 = add %82, %83
%85:i64 = sext %61 (hasExternalUses)
%86:i32 = mul 19:i32, %51
%87:i64 = sext %86 (hasExternalUses)
%88:i64 = mulnsw %85, %87
%89:i64 = add %84, %88
%90:i64 = mulnsw %1, %60
%91:i64 = add %89, %90
%92:i64 = mulnsw %13, %3
%93:i64 = mulnsw %6, %22
%94:i64 = add %92, %93
%95:i64 = mulnsw %26, %15
%96:i64 = add %94, %95
%97:i64 = mulnsw %19, %35
%98:i64 = add %96, %97
%99:i64 = mulnsw %39, %28
%100:i64 = add %98, %99
%101:i64 = mulnsw %32, %48
%102:i64 = add %100, %101
%103:i64 = mulnsw %41, %55
%104:i64 = add %102, %103
%105:i32 = mul 19:i32, %44
%106:i64 = sext %105 (hasExternalUses)
%107:i64 = mulnsw %106, %63
%108:i64 = add %104, %107
%109:i64 = mulnsw %1, %87
%110:i64 = add %108, %109
%111:i64 = mulnsw %60, %9
%112:i64 = add %110, %111
%113:i64 = mulnsw %26, %6
%114:i64 = mulnsw %70, %3
%115:i64 = add %113, %114
%116:i64 = mulnsw %75, %15
%117:i64 = add %115, %116
%118:i64 = mulnsw %39, %19
%119:i64 = add %117, %118
%120:i64 = mulnsw %80, %28
%121:i64 = add %119, %120
%122:i64 = mulnsw %32, %55
%123:i64 = add %121, %122
%124:i32 = mul 19:i32, %40
%125:i64 = sext %124 (hasExternalUses)
%126:i64 = mulnsw %85, %125
%127:i64 = add %123, %126
%128:i64 = mulnsw %1, %106
%129:i64 = add %127, %128
%130:i64 = mulnsw %67, %87
%131:i64 = add %129, %130
%132:i64 = mulnsw %13, %60
%133:i64 = add %131, %132
%134:i64 = mulnsw %26, %3
%135:i64 = mulnsw %6, %35
%136:i64 = add %134, %135
%137:i64 = mulnsw %39, %15
%138:i64 = add %136, %137
%139:i64 = mulnsw %19, %48
%140:i64 = add %138, %139
%141:i64 = mulnsw %28, %55
%142:i64 = add %140, %141
%143:i32 = mul 19:i32, %31
%144:i64 = sext %143 (hasExternalUses)
%145:i64 = mulnsw %144, %63
%146:i64 = add %142, %145
%147:i64 = mulnsw %1, %125
%148:i64 = add %146, %147
%149:i64 = mulnsw %106, %9
%150:i64 = add %148, %149
%151:i64 = mulnsw %13, %87
%152:i64 = add %150, %151
%153:i64 = mulnsw %60, %22
%154:i64 = add %152, %153 (hasExternalUses)
%155:i64 = add 33554432:i64, %154 (hasExternalUses)
%156:i64 = ashr %155, 26:i64
%157:i64 = add %133, %156 (hasExternalUses)
%158:i64 = add 16777216:i64, %157 (hasExternalUses)
%159:i64 = ashr %158, 25:i64
%160:i64 = add %112, %159 (hasExternalUses)
%161:i64 = add 33554432:i64, %160 (hasExternalUses)
%162:i64 = ashr %161, 26:i64
%163:i64 = add %91, %162 (hasExternalUses)
%164:i64 = add 16777216:i64, %163 (hasExternalUses)
%165:i64 = ashr %164, 25:i64
%166:i64 = add %65, %165
%167:i64 = add 33554432:i64, %166 (hasExternalUses)
%168:i64 = and 4227858432:i64, %167
%169:i64 = sub %166, %168
infer %169 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i32 = mul 19:i32, %0
%2:i64 = sext %1 (hasExternalUses)
%3:i32 = var
%4:i32 = shl %3, 1:i32
%5:i64 = sext %4 (hasExternalUses)
%6:i64 = mulnsw %2, %5

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i64 = sext %31
%33:i64 = mulnsw %30, %32
%34:i64 = add %28, %33
%35:i32 = var
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i64 = sext %37
%39:i64 = mulnsw %36, %38
%40:i64 = add %34, %39
%41:i32 = var
%42:i64 = sext %41 (hasExternalUses)
%43:i32 = var
%44:i64 = sext %43
%45:i64 = mulnsw %42, %44
%46:i64 = add %40, %45
%47:i32 = var
%48:i64 = sext %47 (hasExternalUses)
%49:i32 = var
%50:i64 = sext %49
%51:i64 = mulnsw %48, %50
%52:i64 = add %46, %51
%53:i32 = var
%54:i64 = sext %53
%55:i32 = var
%56:i32 = add 1:i32, %55 (hasExternalUses)
%57:i64 = sext %56 (hasExternalUses)
%58:i64 = mulnsw %54, %57
%59:i64 = add %52, %58
%60:i64 = mulnsw %1, %8
%61:i32 = shl %11, 1:i32
%62:i64 = sext %61 (hasExternalUses)
%63:i64 = mulnsw %3, %62
%64:i64 = add %60, %63
%65:i64 = mulnsw %18, %14
%66:i64 = add %64, %65
%67:i32 = shl %23, 1:i32
%68:i64 = sext %67 (hasExternalUses)
%69:i64 = mulnsw %20, %68
%70:i64 = add %66, %69
%71:i64 = mulnsw %30, %26
%72:i64 = add %70, %71
%73:i32 = shl %35, 1:i32
%74:i64 = sext %73 (hasExternalUses)
%75:i64 = mulnsw %32, %74
%76:i64 = add %72, %75
%77:i64 = mulnsw %42, %38
%78:i64 = add %76, %77
%79:i32 = shl %47, 1:i32
%80:i64 = sext %79 (hasExternalUses)
%81:i64 = mulnsw %44, %80
%82:i64 = add %78, %81
%83:i64 = mulnsw %50, %57
%84:i64 = add %82, %83
%85:i32 = mul 19:i32, %53
%86:i64 = sext %85 (hasExternalUses)
%87:i32 = shl %5, 1:i32
%88:i64 = sext %87 (hasExternalUses)
%89:i64 = mulnsw %86, %88
%90:i64 = add %84, %89
%91:i64 = mulnsw %18, %3
%92:i64 = mulnsw %12, %8
%93:i64 = add %91, %92
%94:i64 = mulnsw %24, %14
%95:i64 = add %93, %94
%96:i64 = mulnsw %30, %20
%97:i64 = add %95, %96
%98:i64 = mulnsw %36, %26
%99:i64 = add %97, %98
%100:i64 = mulnsw %42, %32
%101:i64 = add %99, %100
%102:i64 = mulnsw %48, %38
%103:i64 = add %101, %102
%104:i64 = mulnsw %44, %57
%105:i64 = add %103, %104
%106:i32 = mul 19:i32, %49
%107:i64 = sext %106 (hasExternalUses)
%108:i64 = mulnsw %6, %107
%109:i64 = add %105, %108
%110:i64 = mulnsw %1, %86
%111:i64 = add %109, %110
%112:i64 = mulnsw %18, %8
%113:i64 = mulnsw %3, %68
%114:i64 = add %112, %113
%115:i64 = mulnsw %30, %14
%116:i64 = add %114, %115
%117:i64 = mulnsw %20, %74
%118:i64 = add %116, %117
%119:i64 = mulnsw %42, %26
%120:i64 = add %118, %119
%121:i64 = mulnsw %32, %80
%122:i64 = add %120, %121
%123:i64 = mulnsw %38, %57
%124:i64 = add %122, %123
%125:i32 = mul 19:i32, %43
%126:i64 = sext %125 (hasExternalUses)
%127:i64 = mulnsw %126, %88
%128:i64 = add %124, %127
%129:i64 = mulnsw %1, %107
%130:i64 = add %128, %129
%131:i64 = mulnsw %86, %62
%132:i64 = add %130, %131
%133:i64 = mulnsw %30, %3
%134:i64 = mulnsw %24, %8
%135:i64 = add %133, %134
%136:i64 = mulnsw %36, %14
%137:i64 = add %135, %136
%138:i64 = mulnsw %42, %20
%139:i64 = add %137, %138
%140:i64 = mulnsw %48, %26
%141:i64 = add %139, %140
%142:i64 = mulnsw %32, %57
%143:i64 = add %141, %142
%144:i32 = mul 19:i32, %37
%145:i64 = sext %144 (hasExternalUses)
%146:i64 = mulnsw %6, %145
%147:i64 = add %143, %146
%148:i64 = mulnsw %1, %126
%149:i64 = add %147, %148
%150:i64 = mulnsw %12, %107
%151:i64 = add %149, %150
%152:i64 = mulnsw %18, %86
%153:i64 = add %151, %152
%154:i64 = mulnsw %30, %8
%155:i64 = mulnsw %3, %74
%156:i64 = add %154, %155
%157:i64 = mulnsw %42, %14
%158:i64 = add %156, %157
%159:i64 = mulnsw %20, %80
%160:i64 = add %158, %159
%161:i64 = mulnsw %26, %57
%162:i64 = add %160, %161
%163:i32 = mul 19:i32, %31
%164:i64 = sext %163 (hasExternalUses)
%165:i64 = mulnsw %164, %88
%166:i64 = add %162, %165
%167:i64 = mulnsw %1, %145
%168:i64 = add %166, %167
%169:i64 = mulnsw %126, %62
%170:i64 = add %168, %169
%171:i64 = mulnsw %18, %107
%172:i64 = add %170, %171
%173:i64 = mulnsw %86, %68
%174:i64 = add %172, %173 (hasExternalUses)
%175:i64 = add 33554432:i64, %174 (hasExternalUses)
%176:i64 = ashr %175, 26:i64
%177:i64 = add %153, %176 (hasExternalUses)
%178:i64 = add 16777216:i64, %177 (hasExternalUses)
%179:i64 = ashr %178, 25:i64
%180:i64 = add %132, %179 (hasExternalUses)
%181:i64 = add 33554432:i64, %180 (hasExternalUses)
%182:i64 = ashr %181, 26:i64
%183:i64 = add %111, %182 (hasExternalUses)
%184:i64 = add 16777216:i64, %183 (hasExternalUses)
%185:i64 = ashr %184, 25:i64
%186:i64 = add %90, %185 (hasExternalUses)
%187:i64 = add 33554432:i64, %186 (hasExternalUses)
%188:i64 = ashr %187, 26:i64
%189:i64 = add %59, %188 (hasExternalUses)
%190:i64 = add 16777216:i64, %189
infer %190 (demandedBits=1111111111111111111111111111111111111110000000000000000000000000)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i64 = sext %31
%33:i64 = mulnsw %30, %32
%34:i64 = add %28, %33
%35:i32 = var
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i64 = sext %37
%39:i64 = mulnsw %36, %38
%40:i64 = add %34, %39
%41:i32 = var
%42:i64 = sext %41 (hasExternalUses)
%43:i32 = var
%44:i64 = sext %43
%45:i64 = mulnsw %42, %44
%46:i64 = add %40, %45
%47:i32 = var
%48:i64 = sext %47 (hasExternalUses)
%49:i32 = var
%50:i64 = sext %49
%51:i64 = mulnsw %48, %50
%52:i64 = add %46, %51
%53:i32 = var
%54:i64 = sext %53
%55:i32 = var
%56:i32 = add 1:i32, %55 (hasExternalUses)
%57:i64 = sext %56 (hasExternalUses)
%58:i64 = mulnsw %54, %57
%59:i64 = add %52, %58
%60:i64 = mulnsw %1, %8
%61:i32 = shl %11, 1:i32
%62:i64 = sext %61 (hasExternalUses)
%63:i64 = mulnsw %3, %62
%64:i64 = add %60, %63
%65:i64 = mulnsw %18, %14
%66:i64 = add %64, %65
%67:i32 = shl %23, 1:i32
%68:i64 = sext %67 (hasExternalUses)
%69:i64 = mulnsw %20, %68
%70:i64 = add %66, %69
%71:i64 = mulnsw %30, %26
%72:i64 = add %70, %71
%73:i32 = shl %35, 1:i32
%74:i64 = sext %73 (hasExternalUses)
%75:i64 = mulnsw %32, %74
%76:i64 = add %72, %75
%77:i64 = mulnsw %42, %38
%78:i64 = add %76, %77
%79:i32 = shl %47, 1:i32
%80:i64 = sext %79 (hasExternalUses)
%81:i64 = mulnsw %44, %80
%82:i64 = add %78, %81
%83:i64 = mulnsw %50, %57
%84:i64 = add %82, %83
%85:i32 = mul 19:i32, %53
%86:i64 = sext %85 (hasExternalUses)
%87:i32 = shl %5, 1:i32
%88:i64 = sext %87 (hasExternalUses)
%89:i64 = mulnsw %86, %88
%90:i64 = add %84, %89
%91:i64 = mulnsw %18, %3
%92:i64 = mulnsw %12, %8
%93:i64 = add %91, %92
%94:i64 = mulnsw %24, %14
%95:i64 = add %93, %94
%96:i64 = mulnsw %30, %20
%97:i64 = add %95, %96
%98:i64 = mulnsw %36, %26
%99:i64 = add %97, %98
%100:i64 = mulnsw %42, %32
%101:i64 = add %99, %100
%102:i64 = mulnsw %48, %38
%103:i64 = add %101, %102
%104:i64 = mulnsw %44, %57
%105:i64 = add %103, %104
%106:i32 = mul 19:i32, %49
%107:i64 = sext %106 (hasExternalUses)
%108:i64 = mulnsw %6, %107
%109:i64 = add %105, %108
%110:i64 = mulnsw %1, %86
%111:i64 = add %109, %110
%112:i64 = mulnsw %18, %8
%113:i64 = mulnsw %3, %68
%114:i64 = add %112, %113
%115:i64 = mulnsw %30, %14
%116:i64 = add %114, %115
%117:i64 = mulnsw %20, %74
%118:i64 = add %116, %117
%119:i64 = mulnsw %42, %26
%120:i64 = add %118, %119
%121:i64 = mulnsw %32, %80
%122:i64 = add %120, %121
%123:i64 = mulnsw %38, %57
%124:i64 = add %122, %123
%125:i32 = mul 19:i32, %43
%126:i64 = sext %125 (hasExternalUses)
%127:i64 = mulnsw %126, %88
%128:i64 = add %124, %127
%129:i64 = mulnsw %1, %107
%130:i64 = add %128, %129
%131:i64 = mulnsw %86, %62
%132:i64 = add %130, %131
%133:i64 = mulnsw %30, %3
%134:i64 = mulnsw %24, %8
%135:i64 = add %133, %134
%136:i64 = mulnsw %36, %14
%137:i64 = add %135, %136
%138:i64 = mulnsw %42, %20
%139:i64 = add %137, %138
%140:i64 = mulnsw %48, %26
%141:i64 = add %139, %140
%142:i64 = mulnsw %32, %57
%143:i64 = add %141, %142
%144:i32 = mul 19:i32, %37
%145:i64 = sext %144 (hasExternalUses)
%146:i64 = mulnsw %6, %145
%147:i64 = add %143, %146
%148:i64 = mulnsw %1, %126
%149:i64 = add %147, %148
%150:i64 = mulnsw %12, %107
%151:i64 = add %149, %150
%152:i64 = mulnsw %18, %86
%153:i64 = add %151, %152
%154:i64 = mulnsw %30, %8
%155:i64 = mulnsw %3, %74
%156:i64 = add %154, %155
%157:i64 = mulnsw %42, %14
%158:i64 = add %156, %157
%159:i64 = mulnsw %20, %80
%160:i64 = add %158, %159
%161:i64 = mulnsw %26, %57
%162:i64 = add %160, %161
%163:i32 = mul 19:i32, %31
%164:i64 = sext %163 (hasExternalUses)
%165:i64 = mulnsw %164, %88
%166:i64 = add %162, %165
%167:i64 = mulnsw %1, %145
%168:i64 = add %166, %167
%169:i64 = mulnsw %126, %62
%170:i64 = add %168, %169
%171:i64 = mulnsw %18, %107
%172:i64 = add %170, %171
%173:i64 = mulnsw %86, %68
%174:i64 = add %172, %173 (hasExternalUses)
%175:i64 = add 33554432:i64, %174 (hasExternalUses)
%176:i64 = ashr %175, 26:i64
%177:i64 = add %153, %176 (hasExternalUses)
%178:i64 = add 16777216:i64, %177 (hasExternalUses)
%179:i64 = ashr %178, 25:i64
%180:i64 = add %132, %179 (hasExternalUses)
%181:i64 = add 33554432:i64, %180 (hasExternalUses)
%182:i64 = ashr %181, 26:i64
%183:i64 = add %111, %182 (hasExternalUses)
%184:i64 = add 16777216:i64, %183 (hasExternalUses)
%185:i64 = ashr %184, 25:i64
%186:i64 = add %90, %185 (hasExternalUses)
%187:i64 = add 33554432:i64, %186 (hasExternalUses)
%188:i64 = ashr %187, 26:i64
%189:i64 = add %59, %188 (hasExternalUses)
%190:i64 = add 16777216:i64, %189 (hasExternalUses)
%191:i64 = ashr %190, 25:i64
infer %191 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i64 = sext %31
%33:i64 = mulnsw %30, %32
%34:i64 = add %28, %33
%35:i32 = var
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i64 = sext %37
%39:i64 = mulnsw %36, %38
%40:i64 = add %34, %39
%41:i32 = var
%42:i64 = sext %41 (hasExternalUses)
%43:i32 = var
%44:i64 = sext %43
%45:i64 = mulnsw %42, %44
%46:i64 = add %40, %45
%47:i32 = var
%48:i64 = sext %47 (hasExternalUses)
%49:i32 = var
%50:i64 = sext %49
%51:i64 = mulnsw %48, %50
%52:i64 = add %46, %51
%53:i32 = var
%54:i64 = sext %53
%55:i32 = var
%56:i32 = add 1:i32, %55 (hasExternalUses)
%57:i64 = sext %56 (hasExternalUses)
%58:i64 = mulnsw %54, %57
%59:i64 = add %52, %58
%60:i64 = mulnsw %1, %8
%61:i32 = shl %11, 1:i32
%62:i64 = sext %61 (hasExternalUses)
%63:i64 = mulnsw %3, %62
%64:i64 = add %60, %63
%65:i64 = mulnsw %18, %14
%66:i64 = add %64, %65
%67:i32 = shl %23, 1:i32
%68:i64 = sext %67 (hasExternalUses)
%69:i64 = mulnsw %20, %68
%70:i64 = add %66, %69
%71:i64 = mulnsw %30, %26
%72:i64 = add %70, %71
%73:i32 = shl %35, 1:i32
%74:i64 = sext %73 (hasExternalUses)
%75:i64 = mulnsw %32, %74
%76:i64 = add %72, %75
%77:i64 = mulnsw %42, %38
%78:i64 = add %76, %77
%79:i32 = shl %47, 1:i32
%80:i64 = sext %79 (hasExternalUses)
%81:i64 = mulnsw %44, %80
%82:i64 = add %78, %81
%83:i64 = mulnsw %50, %57
%84:i64 = add %82, %83
%85:i32 = mul 19:i32, %53
%86:i64 = sext %85 (hasExternalUses)
%87:i32 = shl %5, 1:i32
%88:i64 = sext %87 (hasExternalUses)
%89:i64 = mulnsw %86, %88
%90:i64 = add %84, %89
%91:i64 = mulnsw %18, %3
%92:i64 = mulnsw %12, %8
%93:i64 = add %91, %92
%94:i64 = mulnsw %24, %14
%95:i64 = add %93, %94
%96:i64 = mulnsw %30, %20
%97:i64 = add %95, %96
%98:i64 = mulnsw %36, %26
%99:i64 = add %97, %98
%100:i64 = mulnsw %42, %32
%101:i64 = add %99, %100
%102:i64 = mulnsw %48, %38
%103:i64 = add %101, %102
%104:i64 = mulnsw %44, %57
%105:i64 = add %103, %104
%106:i32 = mul 19:i32, %49
%107:i64 = sext %106 (hasExternalUses)
%108:i64 = mulnsw %6, %107
%109:i64 = add %105, %108
%110:i64 = mulnsw %1, %86
%111:i64 = add %109, %110
%112:i64 = mulnsw %18, %8
%113:i64 = mulnsw %3, %68
%114:i64 = add %112, %113
%115:i64 = mulnsw %30, %14
%116:i64 = add %114, %115
%117:i64 = mulnsw %20, %74
%118:i64 = add %116, %117
%119:i64 = mulnsw %42, %26
%120:i64 = add %118, %119
%121:i64 = mulnsw %32, %80
%122:i64 = add %120, %121
%123:i64 = mulnsw %38, %57
%124:i64 = add %122, %123
%125:i32 = mul 19:i32, %43
%126:i64 = sext %125 (hasExternalUses)
%127:i64 = mulnsw %126, %88
%128:i64 = add %124, %127
%129:i64 = mulnsw %1, %107
%130:i64 = add %128, %129
%131:i64 = mulnsw %86, %62
%132:i64 = add %130, %131
%133:i64 = mulnsw %30, %3
%134:i64 = mulnsw %24, %8
%135:i64 = add %133, %134
%136:i64 = mulnsw %36, %14
%137:i64 = add %135, %136
%138:i64 = mulnsw %42, %20
%139:i64 = add %137, %138
%140:i64 = mulnsw %48, %26
%141:i64 = add %139, %140
%142:i64 = mulnsw %32, %57
%143:i64 = add %141, %142
%144:i32 = mul 19:i32, %37
%145:i64 = sext %144 (hasExternalUses)
%146:i64 = mulnsw %6, %145
%147:i64 = add %143, %146
%148:i64 = mulnsw %1, %126
%149:i64 = add %147, %148
%150:i64 = mulnsw %12, %107
%151:i64 = add %149, %150
%152:i64 = mulnsw %18, %86
%153:i64 = add %151, %152
%154:i64 = mulnsw %30, %8
%155:i64 = mulnsw %3, %74
%156:i64 = add %154, %155
%157:i64 = mulnsw %42, %14
%158:i64 = add %156, %157
%159:i64 = mulnsw %20, %80
%160:i64 = add %158, %159
%161:i64 = mulnsw %26, %57
%162:i64 = add %160, %161
%163:i32 = mul 19:i32, %31
%164:i64 = sext %163 (hasExternalUses)
%165:i64 = mulnsw %164, %88
%166:i64 = add %162, %165
%167:i64 = mulnsw %1, %145
%168:i64 = add %166, %167
%169:i64 = mulnsw %126, %62
%170:i64 = add %168, %169
%171:i64 = mulnsw %18, %107
%172:i64 = add %170, %171
%173:i64 = mulnsw %86, %68
%174:i64 = add %172, %173 (hasExternalUses)
%175:i64 = add 33554432:i64, %174 (hasExternalUses)
%176:i64 = ashr %175, 26:i64
%177:i64 = add %153, %176 (hasExternalUses)
%178:i64 = add 16777216:i64, %177 (hasExternalUses)
%179:i64 = ashr %178, 25:i64
%180:i64 = add %132, %179 (hasExternalUses)
%181:i64 = add 33554432:i64, %180 (hasExternalUses)
%182:i64 = ashr %181, 26:i64
%183:i64 = add %111, %182 (hasExternalUses)
%184:i64 = add 16777216:i64, %183 (hasExternalUses)
%185:i64 = ashr %184, 25:i64
%186:i64 = add %90, %185 (hasExternalUses)
%187:i64 = add 33554432:i64, %186 (hasExternalUses)
%188:i64 = ashr %187, 26:i64
%189:i64 = add %59, %188 (hasExternalUses)
%190:i64 = add 16777216:i64, %189 (hasExternalUses)
%191:i64 = ashr %190, 25:i64
%192:i64 = mulnsw 19:i64, %191
infer %192 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = add 1:i32, %2 (hasExternalUses)
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
%6:i32 = var
%7:i32 = mul 19:i32, %6
%8:i64 = sext %7
%9:i32 = var
%10:i32 = shl %9, 1:i32
%11:i64 = sext %10 (hasExternalUses)
%12:i64 = mulnsw %8, %11
%13:i64 = add %5, %12
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i32 = var
%17:i32 = mul 19:i32, %16
%18:i64 = sext %17 (hasExternalUses)
%19:i64 = mulnsw %15, %18
%20:i64 = add %13, %19
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i32 = var
%25:i32 = shl %24, 1:i32
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %23, %26
%28:i64 = add %20, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = mul 19:i32, %31
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
%36:i32 = var
%37:i32 = mul 19:i32, %36
%38:i64 = sext %37 (hasExternalUses)
%39:i32 = var
%40:i32 = shl %39, 1:i32
%41:i64 = sext %40 (hasExternalUses)
%42:i64 = mulnsw %38, %41
%43:i64 = add %35, %42
%44:i32 = var
%45:i64 = sext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = mul 19:i32, %46
%48:i64 = sext %47 (hasExternalUses)
%49:i64 = mulnsw %45, %48
%50:i64 = add %43, %49
%51:i32 = var
%52:i32 = mul 19:i32, %51
%53:i64 = sext %52 (hasExternalUses)
%54:i32 = var
%55:i32 = shl %54, 1:i32
%56:i64 = sext %55 (hasExternalUses)
%57:i64 = mulnsw %53, %56
%58:i64 = add %50, %57
%59:i32 = var
%60:i64 = sext %59 (hasExternalUses)
%61:i32 = var
%62:i32 = mul 19:i32, %61
%63:i64 = sext %62 (hasExternalUses)
%64:i64 = mulnsw %60, %63
%65:i64 = add %58, %64
%66:i32 = var
%67:i32 = mul 19:i32, %66
%68:i64 = sext %67 (hasExternalUses)
%69:i32 = var
%70:i32 = shl %69, 1:i32
%71:i64 = sext %70 (hasExternalUses)
%72:i64 = mulnsw %68, %71
%73:i64 = add %65, %72
%74:i64 = add 33554432:i64, %73 (hasExternalUses)
%75:i64 = and 18446744073642442752:i64, %74
%76:i64 = sub %73, %75
%77:i64 = sext %6 (hasExternalUses)
%78:i64 = mulnsw %15, %77
%79:i64 = sext %9 (hasExternalUses)
%80:i64 = mulnsw %79, %1
%81:i64 = add %78, %80
%82:i64 = sext %24 (hasExternalUses)
%83:i64 = sext %16 (hasExternalUses)
%84:i64 = mulnsw %82, %83
%85:i64 = add %81, %84
%86:i64 = sext %21 (hasExternalUses)
%87:i64 = mulnsw %30, %86
%88:i64 = add %85, %87
%89:i64 = sext %39 (hasExternalUses)
%90:i64 = sext %31
%91:i64 = mulnsw %89, %90
%92:i64 = add %88, %91
%93:i64 = sext %36
%94:i64 = mulnsw %45, %93
%95:i64 = add %92, %94
%96:i64 = sext %54 (hasExternalUses)
%97:i64 = sext %46
%98:i64 = mulnsw %96, %97
%99:i64 = add %95, %98
%100:i64 = sext %51
%101:i64 = mulnsw %60, %100
%102:i64 = add %99, %101
%103:i64 = sext %69 (hasExternalUses)
%104:i64 = sext %61
%105:i64 = mulnsw %103, %104
%106:i64 = add %102, %105
%107:i64 = sext %66
%108:i64 = mulnsw %107, %4
%109:i64 = add %106, %108
%110:i64 = mulnsw %15, %1
%111:i64 = mulnsw %77, %26
%112:i64 = add %110, %111
%113:i64 = mulnsw %30, %83
%114:i64 = add %112, %113
%115:i64 = mulnsw %86, %41
%116:i64 = add %114, %115
%117:i64 = mulnsw %45, %90
%118:i64 = add %116, %117
%119:i64 = mulnsw %93, %56
%120:i64 = add %118, %119
%121:i64 = mulnsw %60, %97
%122:i64 = add %120, %121
%123:i64 = mulnsw %100, %71
%124:i64 = add %122, %123
%125:i64 = mulnsw %104, %4
%126:i64 = add %124, %125
%127:i64 = mulnsw %68, %11
%128:i64 = add %126, %127
%129:i64 = mulnsw %30, %77
%130:i64 = mulnsw %82, %1
%131:i64 = add %129, %130
%132:i64 = mulnsw %89, %83
%133:i64 = add %131, %132
%134:i64 = mulnsw %45, %86
%135:i64 = add %133, %134
%136:i64 = mulnsw %96, %90
%137:i64 = add %135, %136
%138:i64 = mulnsw %60, %93
%139:i64 = add %137, %138
%140:i64 = mulnsw %103, %97
%141:i64 = add %139, %140
%142:i64 = mulnsw %100, %4
%143:i64 = add %141, %142
%144:i64 = mulnsw %79, %63
%145:i64 = add %143, %144
%146:i64 = mulnsw %15, %68
%147:i64 = add %145, %146
%148:i64 = mulnsw %30, %1
%149:i64 = mulnsw %77, %41
%150:i64 = add %148, %149
%151:i64 = mulnsw %45, %83
%152:i64 = add %150, %151
%153:i64 = mulnsw %86, %56
%154:i64 = add %152, %153
%155:i64 = mulnsw %60, %90
%156:i64 = add %154, %155
%157:i64 = mulnsw %93, %71
%158:i64 = add %156, %157
%159:i64 = mulnsw %97, %4
%160:i64 = add %158, %159
%161:i64 = mulnsw %53, %11
%162:i64 = add %160, %161
%163:i64 = mulnsw %15, %63
%164:i64 = add %162, %163
%165:i64 = mulnsw %68, %26
%166:i64 = add %164, %165
%167:i64 = mulnsw %45, %77
%168:i64 = mulnsw %89, %1
%169:i64 = add %167, %168
%170:i64 = mulnsw %96, %83
%171:i64 = add %169, %170
%172:i64 = mulnsw %60, %86
%173:i64 = add %171, %172
%174:i64 = mulnsw %103, %90
%175:i64 = add %173, %174
%176:i64 = mulnsw %93, %4
%177:i64 = add %175, %176
%178:i64 = mulnsw %79, %48
%179:i64 = add %177, %178
%180:i64 = mulnsw %15, %53
%181:i64 = add %179, %180
%182:i64 = mulnsw %82, %63
%183:i64 = add %181, %182
%184:i64 = mulnsw %30, %68
%185:i64 = add %183, %184
%186:i64 = mulnsw %45, %1
%187:i64 = mulnsw %77, %56
%188:i64 = add %186, %187
%189:i64 = mulnsw %60, %83
%190:i64 = add %188, %189
%191:i64 = mulnsw %86, %71
%192:i64 = add %190, %191
%193:i64 = mulnsw %90, %4
%194:i64 = add %192, %193
%195:i64 = mulnsw %38, %11
%196:i64 = add %194, %195
%197:i64 = mulnsw %15, %48
%198:i64 = add %196, %197
%199:i64 = mulnsw %53, %26
%200:i64 = add %198, %199
%201:i64 = mulnsw %30, %63
%202:i64 = add %200, %201
%203:i64 = mulnsw %68, %41
%204:i64 = add %202, %203 (hasExternalUses)
%205:i64 = add 33554432:i64, %204 (hasExternalUses)
%206:i64 = ashr %205, 26:i64
%207:i64 = add %185, %206 (hasExternalUses)
%208:i64 = add 16777216:i64, %207 (hasExternalUses)
%209:i64 = ashr %208, 25:i64
%210:i64 = add %166, %209 (hasExternalUses)
%211:i64 = add 33554432:i64, %210 (hasExternalUses)
%212:i64 = ashr %211, 26:i64
%213:i64 = add %147, %212 (hasExternalUses)
%214:i64 = add 16777216:i64, %213 (hasExternalUses)
%215:i64 = ashr %214, 25:i64
%216:i64 = add %128, %215 (hasExternalUses)
%217:i64 = add 33554432:i64, %216 (hasExternalUses)
%218:i64 = ashr %217, 26:i64
%219:i64 = add %109, %218 (hasExternalUses)
%220:i64 = add 16777216:i64, %219 (hasExternalUses)
%221:i64 = ashr %220, 25:i64
%222:i64 = mulnsw 19:i64, %221
%223:i64 = add %76, %222
infer %223 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i32 = mul 19:i32, %0
%2:i64 = sext %1 (hasExternalUses)
%3:i32 = var
%4:i32 = shl %3, 1:i32
%5:i64 = sext %4 (hasExternalUses)
%6:i64 = mulnsw %2, %5

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i64 = sext %31
%33:i64 = mulnsw %30, %32
%34:i64 = add %28, %33
%35:i32 = var
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i64 = sext %37
%39:i64 = mulnsw %36, %38
%40:i64 = add %34, %39
%41:i32 = var
%42:i64 = sext %41 (hasExternalUses)
%43:i32 = var
%44:i64 = sext %43
%45:i64 = mulnsw %42, %44
%46:i64 = add %40, %45
%47:i32 = var
%48:i64 = sext %47 (hasExternalUses)
%49:i32 = var
%50:i64 = sext %49
%51:i64 = mulnsw %48, %50
%52:i64 = add %46, %51
%53:i32 = var
%54:i64 = sext %53
%55:i32 = var
%56:i32 = add 1:i32, %55 (hasExternalUses)
%57:i64 = sext %56 (hasExternalUses)
%58:i64 = mulnsw %54, %57
%59:i64 = add %52, %58
%60:i64 = mulnsw %1, %8
%61:i32 = shl %11, 1:i32
%62:i64 = sext %61 (hasExternalUses)
%63:i64 = mulnsw %3, %62
%64:i64 = add %60, %63
%65:i64 = mulnsw %18, %14
%66:i64 = add %64, %65
%67:i32 = shl %23, 1:i32
%68:i64 = sext %67 (hasExternalUses)
%69:i64 = mulnsw %20, %68
%70:i64 = add %66, %69
%71:i64 = mulnsw %30, %26
%72:i64 = add %70, %71
%73:i32 = shl %35, 1:i32
%74:i64 = sext %73 (hasExternalUses)
%75:i64 = mulnsw %32, %74
%76:i64 = add %72, %75
%77:i64 = mulnsw %42, %38
%78:i64 = add %76, %77
%79:i32 = shl %47, 1:i32
%80:i64 = sext %79 (hasExternalUses)
%81:i64 = mulnsw %44, %80
%82:i64 = add %78, %81
%83:i64 = mulnsw %50, %57
%84:i64 = add %82, %83
%85:i32 = mul 19:i32, %53
%86:i64 = sext %85 (hasExternalUses)
%87:i32 = shl %5, 1:i32
%88:i64 = sext %87 (hasExternalUses)
%89:i64 = mulnsw %86, %88
%90:i64 = add %84, %89
%91:i64 = mulnsw %18, %3
%92:i64 = mulnsw %12, %8
%93:i64 = add %91, %92
%94:i64 = mulnsw %24, %14
%95:i64 = add %93, %94
%96:i64 = mulnsw %30, %20
%97:i64 = add %95, %96
%98:i64 = mulnsw %36, %26
%99:i64 = add %97, %98
%100:i64 = mulnsw %42, %32
%101:i64 = add %99, %100
%102:i64 = mulnsw %48, %38
%103:i64 = add %101, %102
%104:i64 = mulnsw %44, %57
%105:i64 = add %103, %104
%106:i32 = mul 19:i32, %49
%107:i64 = sext %106 (hasExternalUses)
%108:i64 = mulnsw %6, %107
%109:i64 = add %105, %108
%110:i64 = mulnsw %1, %86
%111:i64 = add %109, %110
%112:i64 = mulnsw %18, %8
%113:i64 = mulnsw %3, %68
%114:i64 = add %112, %113
%115:i64 = mulnsw %30, %14
%116:i64 = add %114, %115
%117:i64 = mulnsw %20, %74
%118:i64 = add %116, %117
%119:i64 = mulnsw %42, %26
%120:i64 = add %118, %119
%121:i64 = mulnsw %32, %80
%122:i64 = add %120, %121
%123:i64 = mulnsw %38, %57
%124:i64 = add %122, %123
%125:i32 = mul 19:i32, %43
%126:i64 = sext %125 (hasExternalUses)
%127:i64 = mulnsw %126, %88
%128:i64 = add %124, %127
%129:i64 = mulnsw %1, %107
%130:i64 = add %128, %129
%131:i64 = mulnsw %86, %62
%132:i64 = add %130, %131
%133:i64 = mulnsw %30, %3
%134:i64 = mulnsw %24, %8
%135:i64 = add %133, %134
%136:i64 = mulnsw %36, %14
%137:i64 = add %135, %136
%138:i64 = mulnsw %42, %20
%139:i64 = add %137, %138
%140:i64 = mulnsw %48, %26
%141:i64 = add %139, %140
%142:i64 = mulnsw %32, %57
%143:i64 = add %141, %142
%144:i32 = mul 19:i32, %37
%145:i64 = sext %144 (hasExternalUses)
%146:i64 = mulnsw %6, %145
%147:i64 = add %143, %146
%148:i64 = mulnsw %1, %126
%149:i64 = add %147, %148
%150:i64 = mulnsw %12, %107
%151:i64 = add %149, %150
%152:i64 = mulnsw %18, %86
%153:i64 = add %151, %152
%154:i64 = mulnsw %30, %8
%155:i64 = mulnsw %3, %74
%156:i64 = add %154, %155
%157:i64 = mulnsw %42, %14
%158:i64 = add %156, %157
%159:i64 = mulnsw %20, %80
%160:i64 = add %158, %159
%161:i64 = mulnsw %26, %57
%162:i64 = add %160, %161
%163:i32 = mul 19:i32, %31
%164:i64 = sext %163 (hasExternalUses)
%165:i64 = mulnsw %164, %88
%166:i64 = add %162, %165
%167:i64 = mulnsw %1, %145
%168:i64 = add %166, %167
%169:i64 = mulnsw %126, %62
%170:i64 = add %168, %169
%171:i64 = mulnsw %18, %107
%172:i64 = add %170, %171
%173:i64 = mulnsw %86, %68
%174:i64 = add %172, %173 (hasExternalUses)
%175:i64 = add 33554432:i64, %174 (hasExternalUses)
%176:i64 = ashr %175, 26:i64
%177:i64 = add %153, %176 (hasExternalUses)
%178:i64 = add 16777216:i64, %177 (hasExternalUses)
%179:i64 = ashr %178, 25:i64
%180:i64 = add %132, %179 (hasExternalUses)
%181:i64 = add 33554432:i64, %180 (hasExternalUses)
%182:i64 = ashr %181, 26:i64
%183:i64 = add %111, %182 (hasExternalUses)
%184:i64 = add 16777216:i64, %183 (hasExternalUses)
%185:i64 = ashr %184, 25:i64
%186:i64 = add %90, %185 (hasExternalUses)
%187:i64 = add 33554432:i64, %186 (hasExternalUses)
%188:i64 = ashr %187, 26:i64
%189:i64 = add %59, %188 (hasExternalUses)
%190:i64 = add 16777216:i64, %189 (hasExternalUses)
%191:i64 = and 4261412864:i64, %190
infer %191 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
ConstantSynthesis: solver returns error on first query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i64 = sext %31
%33:i64 = mulnsw %30, %32
%34:i64 = add %28, %33
%35:i32 = var
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i64 = sext %37
%39:i64 = mulnsw %36, %38
%40:i64 = add %34, %39
%41:i32 = var
%42:i64 = sext %41 (hasExternalUses)
%43:i32 = var
%44:i64 = sext %43
%45:i64 = mulnsw %42, %44
%46:i64 = add %40, %45
%47:i32 = var
%48:i64 = sext %47 (hasExternalUses)
%49:i32 = var
%50:i64 = sext %49
%51:i64 = mulnsw %48, %50
%52:i64 = add %46, %51
%53:i32 = var
%54:i64 = sext %53
%55:i32 = var
%56:i32 = add 1:i32, %55 (hasExternalUses)
%57:i64 = sext %56 (hasExternalUses)
%58:i64 = mulnsw %54, %57
%59:i64 = add %52, %58
%60:i64 = mulnsw %1, %8
%61:i32 = shl %11, 1:i32
%62:i64 = sext %61 (hasExternalUses)
%63:i64 = mulnsw %3, %62
%64:i64 = add %60, %63
%65:i64 = mulnsw %18, %14
%66:i64 = add %64, %65
%67:i32 = shl %23, 1:i32
%68:i64 = sext %67 (hasExternalUses)
%69:i64 = mulnsw %20, %68
%70:i64 = add %66, %69
%71:i64 = mulnsw %30, %26
%72:i64 = add %70, %71
%73:i32 = shl %35, 1:i32
%74:i64 = sext %73 (hasExternalUses)
%75:i64 = mulnsw %32, %74
%76:i64 = add %72, %75
%77:i64 = mulnsw %42, %38
%78:i64 = add %76, %77
%79:i32 = shl %47, 1:i32
%80:i64 = sext %79 (hasExternalUses)
%81:i64 = mulnsw %44, %80
%82:i64 = add %78, %81
%83:i64 = mulnsw %50, %57
%84:i64 = add %82, %83
%85:i32 = mul 19:i32, %53
%86:i64 = sext %85 (hasExternalUses)
%87:i32 = shl %5, 1:i32
%88:i64 = sext %87 (hasExternalUses)
%89:i64 = mulnsw %86, %88
%90:i64 = add %84, %89
%91:i64 = mulnsw %18, %3
%92:i64 = mulnsw %12, %8
%93:i64 = add %91, %92
%94:i64 = mulnsw %24, %14
%95:i64 = add %93, %94
%96:i64 = mulnsw %30, %20
%97:i64 = add %95, %96
%98:i64 = mulnsw %36, %26
%99:i64 = add %97, %98
%100:i64 = mulnsw %42, %32
%101:i64 = add %99, %100
%102:i64 = mulnsw %48, %38
%103:i64 = add %101, %102
%104:i64 = mulnsw %44, %57
%105:i64 = add %103, %104
%106:i32 = mul 19:i32, %49
%107:i64 = sext %106 (hasExternalUses)
%108:i64 = mulnsw %6, %107
%109:i64 = add %105, %108
%110:i64 = mulnsw %1, %86
%111:i64 = add %109, %110
%112:i64 = mulnsw %18, %8
%113:i64 = mulnsw %3, %68
%114:i64 = add %112, %113
%115:i64 = mulnsw %30, %14
%116:i64 = add %114, %115
%117:i64 = mulnsw %20, %74
%118:i64 = add %116, %117
%119:i64 = mulnsw %42, %26
%120:i64 = add %118, %119
%121:i64 = mulnsw %32, %80
%122:i64 = add %120, %121
%123:i64 = mulnsw %38, %57
%124:i64 = add %122, %123
%125:i32 = mul 19:i32, %43
%126:i64 = sext %125 (hasExternalUses)
%127:i64 = mulnsw %126, %88
%128:i64 = add %124, %127
%129:i64 = mulnsw %1, %107
%130:i64 = add %128, %129
%131:i64 = mulnsw %86, %62
%132:i64 = add %130, %131
%133:i64 = mulnsw %30, %3
%134:i64 = mulnsw %24, %8
%135:i64 = add %133, %134
%136:i64 = mulnsw %36, %14
%137:i64 = add %135, %136
%138:i64 = mulnsw %42, %20
%139:i64 = add %137, %138
%140:i64 = mulnsw %48, %26
%141:i64 = add %139, %140
%142:i64 = mulnsw %32, %57
%143:i64 = add %141, %142
%144:i32 = mul 19:i32, %37
%145:i64 = sext %144 (hasExternalUses)
%146:i64 = mulnsw %6, %145
%147:i64 = add %143, %146
%148:i64 = mulnsw %1, %126
%149:i64 = add %147, %148
%150:i64 = mulnsw %12, %107
%151:i64 = add %149, %150
%152:i64 = mulnsw %18, %86
%153:i64 = add %151, %152
%154:i64 = mulnsw %30, %8
%155:i64 = mulnsw %3, %74
%156:i64 = add %154, %155
%157:i64 = mulnsw %42, %14
%158:i64 = add %156, %157
%159:i64 = mulnsw %20, %80
%160:i64 = add %158, %159
%161:i64 = mulnsw %26, %57
%162:i64 = add %160, %161
%163:i32 = mul 19:i32, %31
%164:i64 = sext %163 (hasExternalUses)
%165:i64 = mulnsw %164, %88
%166:i64 = add %162, %165
%167:i64 = mulnsw %1, %145
%168:i64 = add %166, %167
%169:i64 = mulnsw %126, %62
%170:i64 = add %168, %169
%171:i64 = mulnsw %18, %107
%172:i64 = add %170, %171
%173:i64 = mulnsw %86, %68
%174:i64 = add %172, %173 (hasExternalUses)
%175:i64 = add 33554432:i64, %174 (hasExternalUses)
%176:i64 = ashr %175, 26:i64
%177:i64 = add %153, %176 (hasExternalUses)
%178:i64 = add 16777216:i64, %177 (hasExternalUses)
%179:i64 = ashr %178, 25:i64
%180:i64 = add %132, %179 (hasExternalUses)
%181:i64 = add 33554432:i64, %180 (hasExternalUses)
%182:i64 = ashr %181, 26:i64
%183:i64 = add %111, %182 (hasExternalUses)
%184:i64 = add 16777216:i64, %183 (hasExternalUses)
%185:i64 = ashr %184, 25:i64
%186:i64 = add %90, %185 (hasExternalUses)
%187:i64 = add 33554432:i64, %186 (hasExternalUses)
%188:i64 = ashr %187, 26:i64
%189:i64 = add %59, %188
%190:i64 = add 16777216:i64, %189 (hasExternalUses)
%191:i64 = and 4261412864:i64, %190
%192:i64 = sub %189, %191
infer %192 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0
%2:i32 = var
%3:i32 = add 1:i32, %2 (hasExternalUses)
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4

Cost = 2
verification query failed!
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = add 1:i32, %2 (hasExternalUses)
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
%6:i32 = var
%7:i32 = mul 19:i32, %6
%8:i64 = sext %7
%9:i32 = var
%10:i32 = shl %9, 1:i32
%11:i64 = sext %10 (hasExternalUses)
%12:i64 = mulnsw %8, %11
%13:i64 = add %5, %12
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i32 = var
%17:i32 = mul 19:i32, %16
%18:i64 = sext %17 (hasExternalUses)
%19:i64 = mulnsw %15, %18
%20:i64 = add %13, %19
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i32 = var
%25:i32 = shl %24, 1:i32
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %23, %26
%28:i64 = add %20, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = mul 19:i32, %31
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
%36:i32 = var
%37:i32 = mul 19:i32, %36
%38:i64 = sext %37 (hasExternalUses)
%39:i32 = var
%40:i32 = shl %39, 1:i32
%41:i64 = sext %40 (hasExternalUses)
%42:i64 = mulnsw %38, %41
%43:i64 = add %35, %42
%44:i32 = var
%45:i64 = sext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = mul 19:i32, %46
%48:i64 = sext %47 (hasExternalUses)
%49:i64 = mulnsw %45, %48
%50:i64 = add %43, %49
%51:i32 = var
%52:i32 = mul 19:i32, %51
%53:i64 = sext %52 (hasExternalUses)
%54:i32 = var
%55:i32 = shl %54, 1:i32
%56:i64 = sext %55 (hasExternalUses)
%57:i64 = mulnsw %53, %56
%58:i64 = add %50, %57
%59:i32 = var
%60:i64 = sext %59 (hasExternalUses)
%61:i32 = var
%62:i32 = mul 19:i32, %61
%63:i64 = sext %62 (hasExternalUses)
%64:i64 = mulnsw %60, %63
%65:i64 = add %58, %64
%66:i32 = var
%67:i32 = mul 19:i32, %66
%68:i64 = sext %67 (hasExternalUses)
%69:i32 = var
%70:i32 = shl %69, 1:i32
%71:i64 = sext %70 (hasExternalUses)
%72:i64 = mulnsw %68, %71
%73:i64 = add %65, %72
%74:i64 = add 33554432:i64, %73 (hasExternalUses)
%75:i64 = and 18446744073642442752:i64, %74
%76:i64 = sub %73, %75
%77:i64 = sext %6 (hasExternalUses)
%78:i64 = mulnsw %15, %77
%79:i64 = sext %9 (hasExternalUses)
%80:i64 = mulnsw %79, %1
%81:i64 = add %78, %80
%82:i64 = sext %24 (hasExternalUses)
%83:i64 = sext %16 (hasExternalUses)
%84:i64 = mulnsw %82, %83
%85:i64 = add %81, %84
%86:i64 = sext %21 (hasExternalUses)
%87:i64 = mulnsw %30, %86
%88:i64 = add %85, %87
%89:i64 = sext %39 (hasExternalUses)
%90:i64 = sext %31
%91:i64 = mulnsw %89, %90
%92:i64 = add %88, %91
%93:i64 = sext %36
%94:i64 = mulnsw %45, %93
%95:i64 = add %92, %94
%96:i64 = sext %54 (hasExternalUses)
%97:i64 = sext %46
%98:i64 = mulnsw %96, %97
%99:i64 = add %95, %98
%100:i64 = sext %51
%101:i64 = mulnsw %60, %100
%102:i64 = add %99, %101
%103:i64 = sext %69 (hasExternalUses)
%104:i64 = sext %61
%105:i64 = mulnsw %103, %104
%106:i64 = add %102, %105
%107:i64 = sext %66
%108:i64 = mulnsw %107, %4
%109:i64 = add %106, %108
%110:i64 = mulnsw %15, %1
%111:i64 = mulnsw %77, %26
%112:i64 = add %110, %111
%113:i64 = mulnsw %30, %83
%114:i64 = add %112, %113
%115:i64 = mulnsw %86, %41
%116:i64 = add %114, %115
%117:i64 = mulnsw %45, %90
%118:i64 = add %116, %117
%119:i64 = mulnsw %93, %56
%120:i64 = add %118, %119
%121:i64 = mulnsw %60, %97
%122:i64 = add %120, %121
%123:i64 = mulnsw %100, %71
%124:i64 = add %122, %123
%125:i64 = mulnsw %104, %4
%126:i64 = add %124, %125
%127:i64 = mulnsw %68, %11
%128:i64 = add %126, %127
%129:i64 = mulnsw %30, %77
%130:i64 = mulnsw %82, %1
%131:i64 = add %129, %130
%132:i64 = mulnsw %89, %83
%133:i64 = add %131, %132
%134:i64 = mulnsw %45, %86
%135:i64 = add %133, %134
%136:i64 = mulnsw %96, %90
%137:i64 = add %135, %136
%138:i64 = mulnsw %60, %93
%139:i64 = add %137, %138
%140:i64 = mulnsw %103, %97
%141:i64 = add %139, %140
%142:i64 = mulnsw %100, %4
%143:i64 = add %141, %142
%144:i64 = mulnsw %79, %63
%145:i64 = add %143, %144
%146:i64 = mulnsw %15, %68
%147:i64 = add %145, %146
%148:i64 = mulnsw %30, %1
%149:i64 = mulnsw %77, %41
%150:i64 = add %148, %149
%151:i64 = mulnsw %45, %83
%152:i64 = add %150, %151
%153:i64 = mulnsw %86, %56
%154:i64 = add %152, %153
%155:i64 = mulnsw %60, %90
%156:i64 = add %154, %155
%157:i64 = mulnsw %93, %71
%158:i64 = add %156, %157
%159:i64 = mulnsw %97, %4
%160:i64 = add %158, %159
%161:i64 = mulnsw %53, %11
%162:i64 = add %160, %161
%163:i64 = mulnsw %15, %63
%164:i64 = add %162, %163
%165:i64 = mulnsw %68, %26
%166:i64 = add %164, %165
%167:i64 = mulnsw %45, %77
%168:i64 = mulnsw %89, %1
%169:i64 = add %167, %168
%170:i64 = mulnsw %96, %83
%171:i64 = add %169, %170
%172:i64 = mulnsw %60, %86
%173:i64 = add %171, %172
%174:i64 = mulnsw %103, %90
%175:i64 = add %173, %174
%176:i64 = mulnsw %93, %4
%177:i64 = add %175, %176
%178:i64 = mulnsw %79, %48
%179:i64 = add %177, %178
%180:i64 = mulnsw %15, %53
%181:i64 = add %179, %180
%182:i64 = mulnsw %82, %63
%183:i64 = add %181, %182
%184:i64 = mulnsw %30, %68
%185:i64 = add %183, %184
%186:i64 = mulnsw %45, %1
%187:i64 = mulnsw %77, %56
%188:i64 = add %186, %187
%189:i64 = mulnsw %60, %83
%190:i64 = add %188, %189
%191:i64 = mulnsw %86, %71
%192:i64 = add %190, %191
%193:i64 = mulnsw %90, %4
%194:i64 = add %192, %193
%195:i64 = mulnsw %38, %11
%196:i64 = add %194, %195
%197:i64 = mulnsw %15, %48
%198:i64 = add %196, %197
%199:i64 = mulnsw %53, %26
%200:i64 = add %198, %199
%201:i64 = mulnsw %30, %63
%202:i64 = add %200, %201
%203:i64 = mulnsw %68, %41
%204:i64 = add %202, %203 (hasExternalUses)
%205:i64 = add 33554432:i64, %204 (hasExternalUses)
%206:i64 = ashr %205, 26:i64
%207:i64 = add %185, %206 (hasExternalUses)
%208:i64 = add 16777216:i64, %207 (hasExternalUses)
%209:i64 = ashr %208, 25:i64
%210:i64 = add %166, %209 (hasExternalUses)
%211:i64 = add 33554432:i64, %210 (hasExternalUses)
%212:i64 = ashr %211, 26:i64
%213:i64 = add %147, %212 (hasExternalUses)
%214:i64 = add 16777216:i64, %213 (hasExternalUses)
%215:i64 = ashr %214, 25:i64
%216:i64 = add %128, %215 (hasExternalUses)
%217:i64 = add 33554432:i64, %216 (hasExternalUses)
%218:i64 = ashr %217, 26:i64
%219:i64 = add %109, %218 (hasExternalUses)
%220:i64 = add 16777216:i64, %219 (hasExternalUses)
%221:i64 = ashr %220, 25:i64
%222:i64 = mulnsw 19:i64, %221
%223:i64 = add %76, %222 (hasExternalUses)
%224:i64 = add 33554432:i64, %223
infer %224 (demandedBits=0000001111111111111111111111111111111100000000000000000000000000)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = add 1:i32, %2 (hasExternalUses)
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
%6:i32 = var
%7:i32 = mul 19:i32, %6
%8:i64 = sext %7
%9:i32 = var
%10:i32 = shl %9, 1:i32
%11:i64 = sext %10 (hasExternalUses)
%12:i64 = mulnsw %8, %11
%13:i64 = add %5, %12
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i32 = var
%17:i32 = mul 19:i32, %16
%18:i64 = sext %17 (hasExternalUses)
%19:i64 = mulnsw %15, %18
%20:i64 = add %13, %19
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i32 = var
%25:i32 = shl %24, 1:i32
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %23, %26
%28:i64 = add %20, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = mul 19:i32, %31
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
%36:i32 = var
%37:i32 = mul 19:i32, %36
%38:i64 = sext %37 (hasExternalUses)
%39:i32 = var
%40:i32 = shl %39, 1:i32
%41:i64 = sext %40 (hasExternalUses)
%42:i64 = mulnsw %38, %41
%43:i64 = add %35, %42
%44:i32 = var
%45:i64 = sext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = mul 19:i32, %46
%48:i64 = sext %47 (hasExternalUses)
%49:i64 = mulnsw %45, %48
%50:i64 = add %43, %49
%51:i32 = var
%52:i32 = mul 19:i32, %51
%53:i64 = sext %52 (hasExternalUses)
%54:i32 = var
%55:i32 = shl %54, 1:i32
%56:i64 = sext %55 (hasExternalUses)
%57:i64 = mulnsw %53, %56
%58:i64 = add %50, %57
%59:i32 = var
%60:i64 = sext %59 (hasExternalUses)
%61:i32 = var
%62:i32 = mul 19:i32, %61
%63:i64 = sext %62 (hasExternalUses)
%64:i64 = mulnsw %60, %63
%65:i64 = add %58, %64
%66:i32 = var
%67:i32 = mul 19:i32, %66
%68:i64 = sext %67 (hasExternalUses)
%69:i32 = var
%70:i32 = shl %69, 1:i32
%71:i64 = sext %70 (hasExternalUses)
%72:i64 = mulnsw %68, %71
%73:i64 = add %65, %72
%74:i64 = add 33554432:i64, %73 (hasExternalUses)
%75:i64 = and 18446744073642442752:i64, %74
%76:i64 = sub %73, %75
%77:i64 = sext %6 (hasExternalUses)
%78:i64 = mulnsw %15, %77
%79:i64 = sext %9 (hasExternalUses)
%80:i64 = mulnsw %79, %1
%81:i64 = add %78, %80
%82:i64 = sext %24 (hasExternalUses)
%83:i64 = sext %16 (hasExternalUses)
%84:i64 = mulnsw %82, %83
%85:i64 = add %81, %84
%86:i64 = sext %21 (hasExternalUses)
%87:i64 = mulnsw %30, %86
%88:i64 = add %85, %87
%89:i64 = sext %39 (hasExternalUses)
%90:i64 = sext %31
%91:i64 = mulnsw %89, %90
%92:i64 = add %88, %91
%93:i64 = sext %36
%94:i64 = mulnsw %45, %93
%95:i64 = add %92, %94
%96:i64 = sext %54 (hasExternalUses)
%97:i64 = sext %46
%98:i64 = mulnsw %96, %97
%99:i64 = add %95, %98
%100:i64 = sext %51
%101:i64 = mulnsw %60, %100
%102:i64 = add %99, %101
%103:i64 = sext %69 (hasExternalUses)
%104:i64 = sext %61
%105:i64 = mulnsw %103, %104
%106:i64 = add %102, %105
%107:i64 = sext %66
%108:i64 = mulnsw %107, %4
%109:i64 = add %106, %108
%110:i64 = mulnsw %15, %1
%111:i64 = mulnsw %77, %26
%112:i64 = add %110, %111
%113:i64 = mulnsw %30, %83
%114:i64 = add %112, %113
%115:i64 = mulnsw %86, %41
%116:i64 = add %114, %115
%117:i64 = mulnsw %45, %90
%118:i64 = add %116, %117
%119:i64 = mulnsw %93, %56
%120:i64 = add %118, %119
%121:i64 = mulnsw %60, %97
%122:i64 = add %120, %121
%123:i64 = mulnsw %100, %71
%124:i64 = add %122, %123
%125:i64 = mulnsw %104, %4
%126:i64 = add %124, %125
%127:i64 = mulnsw %68, %11
%128:i64 = add %126, %127
%129:i64 = mulnsw %30, %77
%130:i64 = mulnsw %82, %1
%131:i64 = add %129, %130
%132:i64 = mulnsw %89, %83
%133:i64 = add %131, %132
%134:i64 = mulnsw %45, %86
%135:i64 = add %133, %134
%136:i64 = mulnsw %96, %90
%137:i64 = add %135, %136
%138:i64 = mulnsw %60, %93
%139:i64 = add %137, %138
%140:i64 = mulnsw %103, %97
%141:i64 = add %139, %140
%142:i64 = mulnsw %100, %4
%143:i64 = add %141, %142
%144:i64 = mulnsw %79, %63
%145:i64 = add %143, %144
%146:i64 = mulnsw %15, %68
%147:i64 = add %145, %146
%148:i64 = mulnsw %30, %1
%149:i64 = mulnsw %77, %41
%150:i64 = add %148, %149
%151:i64 = mulnsw %45, %83
%152:i64 = add %150, %151
%153:i64 = mulnsw %86, %56
%154:i64 = add %152, %153
%155:i64 = mulnsw %60, %90
%156:i64 = add %154, %155
%157:i64 = mulnsw %93, %71
%158:i64 = add %156, %157
%159:i64 = mulnsw %97, %4
%160:i64 = add %158, %159
%161:i64 = mulnsw %53, %11
%162:i64 = add %160, %161
%163:i64 = mulnsw %15, %63
%164:i64 = add %162, %163
%165:i64 = mulnsw %68, %26
%166:i64 = add %164, %165
%167:i64 = mulnsw %45, %77
%168:i64 = mulnsw %89, %1
%169:i64 = add %167, %168
%170:i64 = mulnsw %96, %83
%171:i64 = add %169, %170
%172:i64 = mulnsw %60, %86
%173:i64 = add %171, %172
%174:i64 = mulnsw %103, %90
%175:i64 = add %173, %174
%176:i64 = mulnsw %93, %4
%177:i64 = add %175, %176
%178:i64 = mulnsw %79, %48
%179:i64 = add %177, %178
%180:i64 = mulnsw %15, %53
%181:i64 = add %179, %180
%182:i64 = mulnsw %82, %63
%183:i64 = add %181, %182
%184:i64 = mulnsw %30, %68
%185:i64 = add %183, %184
%186:i64 = mulnsw %45, %1
%187:i64 = mulnsw %77, %56
%188:i64 = add %186, %187
%189:i64 = mulnsw %60, %83
%190:i64 = add %188, %189
%191:i64 = mulnsw %86, %71
%192:i64 = add %190, %191
%193:i64 = mulnsw %90, %4
%194:i64 = add %192, %193
%195:i64 = mulnsw %38, %11
%196:i64 = add %194, %195
%197:i64 = mulnsw %15, %48
%198:i64 = add %196, %197
%199:i64 = mulnsw %53, %26
%200:i64 = add %198, %199
%201:i64 = mulnsw %30, %63
%202:i64 = add %200, %201
%203:i64 = mulnsw %68, %41
%204:i64 = add %202, %203 (hasExternalUses)
%205:i64 = add 33554432:i64, %204 (hasExternalUses)
%206:i64 = ashr %205, 26:i64
%207:i64 = add %185, %206 (hasExternalUses)
%208:i64 = add 16777216:i64, %207 (hasExternalUses)
%209:i64 = ashr %208, 25:i64
%210:i64 = add %166, %209 (hasExternalUses)
%211:i64 = add 33554432:i64, %210 (hasExternalUses)
%212:i64 = ashr %211, 26:i64
%213:i64 = add %147, %212 (hasExternalUses)
%214:i64 = add 16777216:i64, %213 (hasExternalUses)
%215:i64 = ashr %214, 25:i64
%216:i64 = add %128, %215 (hasExternalUses)
%217:i64 = add 33554432:i64, %216 (hasExternalUses)
%218:i64 = ashr %217, 26:i64
%219:i64 = add %109, %218 (hasExternalUses)
%220:i64 = add 16777216:i64, %219 (hasExternalUses)
%221:i64 = ashr %220, 25:i64
%222:i64 = mulnsw 19:i64, %221
%223:i64 = add %76, %222 (hasExternalUses)
%224:i64 = add 33554432:i64, %223 (hasExternalUses)
%225:i64 = lshr %224, 26:i64
infer %225 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = add 1:i32, %7 (hasExternalUses)
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = mul 19:i32, %14
%16:i64 = sext %15
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i64 = mulnsw %20, %23
%25:i64 = add %18, %24
%26:i32 = var
%27:i64 = sext %26 (hasExternalUses)
%28:i32 = var
%29:i32 = mul 19:i32, %28
%30:i64 = sext %29 (hasExternalUses)
%31:i64 = mulnsw %27, %30
%32:i64 = add %25, %31
%33:i32 = var
%34:i64 = sext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = mul 19:i32, %35
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %32, %38
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i32 = var
%43:i32 = mul 19:i32, %42
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %41, %44
%46:i64 = add %39, %45
%47:i32 = var
%48:i64 = sext %47 (hasExternalUses)
%49:i32 = var
%50:i32 = mul 19:i32, %49
%51:i64 = sext %50 (hasExternalUses)
%52:i64 = mulnsw %48, %51
%53:i64 = add %46, %52
%54:i32 = var
%55:i64 = sext %54 (hasExternalUses)
%56:i32 = var
%57:i32 = mul 19:i32, %56
%58:i64 = sext %57 (hasExternalUses)
%59:i64 = mulnsw %55, %58
%60:i64 = add %53, %59
%61:i32 = var
%62:i64 = sext %61 (hasExternalUses)
%63:i32 = var
%64:i32 = mul 19:i32, %63
%65:i64 = sext %64 (hasExternalUses)
%66:i64 = mulnsw %62, %65
%67:i64 = add %60, %66
%68:i64 = mulnsw %3, %9
%69:i32 = mul 19:i32, %5
%70:i64 = sext %69
%71:i32 = shl %12, 1:i32
%72:i64 = sext %71 (hasExternalUses)
%73:i64 = mulnsw %70, %72
%74:i64 = add %68, %73
%75:i64 = mulnsw %20, %16
%76:i64 = add %74, %75
%77:i32 = shl %26, 1:i32
%78:i64 = sext %77 (hasExternalUses)
%79:i64 = mulnsw %23, %78
%80:i64 = add %76, %79
%81:i64 = mulnsw %34, %30
%82:i64 = add %80, %81
%83:i32 = shl %40, 1:i32
%84:i64 = sext %83 (hasExternalUses)
%85:i64 = mulnsw %37, %84
%86:i64 = add %82, %85
%87:i64 = mulnsw %48, %44
%88:i64 = add %86, %87
%89:i32 = shl %54, 1:i32
%90:i64 = sext %89 (hasExternalUses)
%91:i64 = mulnsw %51, %90
%92:i64 = add %88, %91
%93:i64 = mulnsw %62, %58
%94:i64 = add %92, %93
%95:i32 = shl %0, 1:i32
%96:i64 = sext %95 (hasExternalUses)
%97:i64 = mulnsw %65, %96
%98:i64 = add %94, %97
%99:i64 = add 33554432:i64, %98
%100:i64 = ashr %99, 26:i64
%101:i64 = add %67, %100
%102:i64 = add 16777216:i64, %101 (hasExternalUses)
%103:i64 = and 4261412864:i64, %102
%104:i64 = sub %101, %103
%105:i64 = and 18446744073642442752:i64, %99
%106:i64 = sub %98, %105
%107:i64 = mulnsw %20, %6
%108:i64 = mulnsw %13, %3
%109:i64 = add %107, %108
%110:i64 = sext %14 (hasExternalUses)
%111:i64 = mulnsw %27, %110
%112:i64 = add %109, %111
%113:i64 = sext %21 (hasExternalUses)
%114:i64 = mulnsw %34, %113
%115:i64 = add %112, %114
%116:i64 = sext %28
%117:i64 = mulnsw %41, %116
%118:i64 = add %115, %117
%119:i64 = sext %35
%120:i64 = mulnsw %48, %119
%121:i64 = add %118, %120
%122:i64 = sext %42
%123:i64 = mulnsw %55, %122
%124:i64 = add %121, %123
%125:i64 = sext %49
%126:i64 = mulnsw %62, %125
%127:i64 = add %124, %126
%128:i64 = sext %56
%129:i64 = mulnsw %1, %128
%130:i64 = add %127, %129
%131:i64 = sext %63
%132:i64 = mulnsw %131, %9
%133:i64 = add %130, %132
%134:i64 = mulnsw %20, %3
%135:i64 = mulnsw %6, %78
%136:i64 = add %134, %135
%137:i64 = mulnsw %34, %110
%138:i64 = add %136, %137
%139:i64 = mulnsw %113, %84
%140:i64 = add %138, %139
%141:i64 = mulnsw %48, %116
%142:i64 = add %140, %141
%143:i64 = mulnsw %119, %90
%144:i64 = add %142, %143
%145:i64 = mulnsw %62, %122
%146:i64 = add %144, %145
%147:i64 = mulnsw %125, %96
%148:i64 = add %146, %147
%149:i64 = mulnsw %128, %9
%150:i64 = add %148, %149
%151:i64 = mulnsw %65, %72
%152:i64 = add %150, %151
%153:i64 = mulnsw %34, %6
%154:i64 = mulnsw %27, %3
%155:i64 = add %153, %154
%156:i64 = mulnsw %41, %110
%157:i64 = add %155, %156
%158:i64 = mulnsw %48, %113
%159:i64 = add %157, %158
%160:i64 = mulnsw %55, %116
%161:i64 = add %159, %160
%162:i64 = mulnsw %62, %119
%163:i64 = add %161, %162
%164:i64 = mulnsw %1, %122
%165:i64 = add %163, %164
%166:i64 = mulnsw %125, %9
%167:i64 = add %165, %166
%168:i64 = mulnsw %13, %58
%169:i64 = add %167, %168
%170:i64 = mulnsw %20, %65
%171:i64 = add %169, %170
%172:i64 = mulnsw %34, %3
%173:i64 = mulnsw %6, %84
%174:i64 = add %172, %173
%175:i64 = mulnsw %48, %110
%176:i64 = add %174, %175
%177:i64 = mulnsw %113, %90
%178:i64 = add %176, %177
%179:i64 = mulnsw %62, %116
%180:i64 = add %178, %179
%181:i64 = mulnsw %119, %96
%182:i64 = add %180, %181
%183:i64 = mulnsw %122, %9
%184:i64 = add %182, %183
%185:i64 = mulnsw %51, %72
%186:i64 = add %184, %185
%187:i64 = mulnsw %20, %58
%188:i64 = add %186, %187
%189:i64 = mulnsw %65, %78
%190:i64 = add %188, %189
%191:i64 = mulnsw %48, %6
%192:i64 = mulnsw %41, %3
%193:i64 = add %191, %192
%194:i64 = mulnsw %55, %110
%195:i64 = add %193, %194
%196:i64 = mulnsw %62, %113
%197:i64 = add %195, %196
%198:i64 = mulnsw %1, %116
%199:i64 = add %197, %198
%200:i64 = mulnsw %119, %9
%201:i64 = add %199, %200
%202:i64 = mulnsw %13, %44
%203:i64 = add %201, %202
%204:i64 = mulnsw %20, %51
%205:i64 = add %203, %204
%206:i64 = mulnsw %27, %58
%207:i64 = add %205, %206
%208:i64 = mulnsw %34, %65
%209:i64 = add %207, %208
%210:i64 = mulnsw %48, %3
%211:i64 = mulnsw %6, %90
%212:i64 = add %210, %211
%213:i64 = mulnsw %62, %110
%214:i64 = add %212, %213
%215:i64 = mulnsw %113, %96
%216:i64 = add %214, %215
%217:i64 = mulnsw %116, %9
%218:i64 = add %216, %217
%219:i64 = mulnsw %37, %72
%220:i64 = add %218, %219
%221:i64 = mulnsw %20, %44
%222:i64 = add %220, %221
%223:i64 = mulnsw %51, %78
%224:i64 = add %222, %223
%225:i64 = mulnsw %34, %58
%226:i64 = add %224, %225
%227:i64 = mulnsw %65, %84
%228:i64 = add %226, %227 (hasExternalUses)
%229:i64 = add 33554432:i64, %228 (hasExternalUses)
%230:i64 = ashr %229, 26:i64
%231:i64 = add %209, %230 (hasExternalUses)
%232:i64 = add 16777216:i64, %231 (hasExternalUses)
%233:i64 = ashr %232, 25:i64
%234:i64 = add %190, %233 (hasExternalUses)
%235:i64 = add 33554432:i64, %234 (hasExternalUses)
%236:i64 = ashr %235, 26:i64
%237:i64 = add %171, %236 (hasExternalUses)
%238:i64 = add 16777216:i64, %237 (hasExternalUses)
%239:i64 = ashr %238, 25:i64
%240:i64 = add %152, %239 (hasExternalUses)
%241:i64 = add 33554432:i64, %240 (hasExternalUses)
%242:i64 = ashr %241, 26:i64
%243:i64 = add %133, %242 (hasExternalUses)
%244:i64 = add 16777216:i64, %243 (hasExternalUses)
%245:i64 = ashr %244, 25:i64
%246:i64 = mulnsw 19:i64, %245
%247:i64 = add %106, %246 (hasExternalUses)
%248:i64 = add 33554432:i64, %247 (hasExternalUses)
%249:i64 = lshr %248, 26:i64
%250:i64 = add %104, %249
infer %250 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = add 1:i32, %7 (hasExternalUses)
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = mul 19:i32, %14
%16:i64 = sext %15 (hasExternalUses)
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i64 = mulnsw %20, %23
%25:i64 = add %18, %24
%26:i32 = var
%27:i64 = sext %26 (hasExternalUses)
%28:i32 = var
%29:i32 = mul 19:i32, %28
%30:i64 = sext %29 (hasExternalUses)
%31:i64 = mulnsw %27, %30
%32:i64 = add %25, %31
%33:i32 = var
%34:i64 = sext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = mul 19:i32, %35
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %32, %38
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i32 = var
%43:i32 = mul 19:i32, %42
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %41, %44
%46:i64 = add %39, %45
%47:i32 = var
%48:i64 = sext %47 (hasExternalUses)
%49:i32 = var
%50:i32 = mul 19:i32, %49
%51:i64 = sext %50 (hasExternalUses)
%52:i64 = mulnsw %48, %51
%53:i64 = add %46, %52
%54:i32 = var
%55:i64 = sext %54 (hasExternalUses)
%56:i32 = var
%57:i32 = mul 19:i32, %56
%58:i64 = sext %57 (hasExternalUses)
%59:i64 = mulnsw %55, %58
%60:i64 = add %53, %59
%61:i32 = var
%62:i64 = sext %61 (hasExternalUses)
%63:i32 = var
%64:i32 = mul 19:i32, %63
%65:i64 = sext %64 (hasExternalUses)
%66:i64 = mulnsw %62, %65
%67:i64 = add %60, %66

Cost = 19
verification query failed!
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = add 1:i32, %2 (hasExternalUses)
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
%6:i32 = var
%7:i32 = mul 19:i32, %6
%8:i64 = sext %7
%9:i32 = var
%10:i32 = shl %9, 1:i32
%11:i64 = sext %10 (hasExternalUses)
%12:i64 = mulnsw %8, %11
%13:i64 = add %5, %12
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i32 = var
%17:i32 = mul 19:i32, %16
%18:i64 = sext %17 (hasExternalUses)
%19:i64 = mulnsw %15, %18
%20:i64 = add %13, %19
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i32 = var
%25:i32 = shl %24, 1:i32
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %23, %26
%28:i64 = add %20, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = mul 19:i32, %31
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
%36:i32 = var
%37:i32 = mul 19:i32, %36
%38:i64 = sext %37 (hasExternalUses)
%39:i32 = var
%40:i32 = shl %39, 1:i32
%41:i64 = sext %40 (hasExternalUses)
%42:i64 = mulnsw %38, %41
%43:i64 = add %35, %42
%44:i32 = var
%45:i64 = sext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = mul 19:i32, %46
%48:i64 = sext %47 (hasExternalUses)
%49:i64 = mulnsw %45, %48
%50:i64 = add %43, %49
%51:i32 = var
%52:i32 = mul 19:i32, %51
%53:i64 = sext %52 (hasExternalUses)
%54:i32 = var
%55:i32 = shl %54, 1:i32
%56:i64 = sext %55 (hasExternalUses)
%57:i64 = mulnsw %53, %56
%58:i64 = add %50, %57
%59:i32 = var
%60:i64 = sext %59 (hasExternalUses)
%61:i32 = var
%62:i32 = mul 19:i32, %61
%63:i64 = sext %62 (hasExternalUses)
%64:i64 = mulnsw %60, %63
%65:i64 = add %58, %64
%66:i32 = var
%67:i32 = mul 19:i32, %66
%68:i64 = sext %67 (hasExternalUses)
%69:i32 = var
%70:i32 = shl %69, 1:i32
%71:i64 = sext %70 (hasExternalUses)
%72:i64 = mulnsw %68, %71
%73:i64 = add %65, %72
%74:i64 = add 33554432:i64, %73 (hasExternalUses)
%75:i64 = and 18446744073642442752:i64, %74
%76:i64 = sub %73, %75
%77:i64 = sext %6 (hasExternalUses)
%78:i64 = mulnsw %15, %77
%79:i64 = sext %9 (hasExternalUses)
%80:i64 = mulnsw %79, %1
%81:i64 = add %78, %80
%82:i64 = sext %24 (hasExternalUses)
%83:i64 = sext %16 (hasExternalUses)
%84:i64 = mulnsw %82, %83
%85:i64 = add %81, %84
%86:i64 = sext %21 (hasExternalUses)
%87:i64 = mulnsw %30, %86
%88:i64 = add %85, %87
%89:i64 = sext %39 (hasExternalUses)
%90:i64 = sext %31
%91:i64 = mulnsw %89, %90
%92:i64 = add %88, %91
%93:i64 = sext %36
%94:i64 = mulnsw %45, %93
%95:i64 = add %92, %94
%96:i64 = sext %54 (hasExternalUses)
%97:i64 = sext %46
%98:i64 = mulnsw %96, %97
%99:i64 = add %95, %98
%100:i64 = sext %51
%101:i64 = mulnsw %60, %100
%102:i64 = add %99, %101
%103:i64 = sext %69 (hasExternalUses)
%104:i64 = sext %61
%105:i64 = mulnsw %103, %104
%106:i64 = add %102, %105
%107:i64 = sext %66
%108:i64 = mulnsw %107, %4
%109:i64 = add %106, %108
%110:i64 = mulnsw %15, %1
%111:i64 = mulnsw %77, %26
%112:i64 = add %110, %111
%113:i64 = mulnsw %30, %83
%114:i64 = add %112, %113
%115:i64 = mulnsw %86, %41
%116:i64 = add %114, %115
%117:i64 = mulnsw %45, %90
%118:i64 = add %116, %117
%119:i64 = mulnsw %93, %56
%120:i64 = add %118, %119
%121:i64 = mulnsw %60, %97
%122:i64 = add %120, %121
%123:i64 = mulnsw %100, %71
%124:i64 = add %122, %123
%125:i64 = mulnsw %104, %4
%126:i64 = add %124, %125
%127:i64 = mulnsw %68, %11
%128:i64 = add %126, %127
%129:i64 = mulnsw %30, %77
%130:i64 = mulnsw %82, %1
%131:i64 = add %129, %130
%132:i64 = mulnsw %89, %83
%133:i64 = add %131, %132
%134:i64 = mulnsw %45, %86
%135:i64 = add %133, %134
%136:i64 = mulnsw %96, %90
%137:i64 = add %135, %136
%138:i64 = mulnsw %60, %93
%139:i64 = add %137, %138
%140:i64 = mulnsw %103, %97
%141:i64 = add %139, %140
%142:i64 = mulnsw %100, %4
%143:i64 = add %141, %142
%144:i64 = mulnsw %79, %63
%145:i64 = add %143, %144
%146:i64 = mulnsw %15, %68
%147:i64 = add %145, %146
%148:i64 = mulnsw %30, %1
%149:i64 = mulnsw %77, %41
%150:i64 = add %148, %149
%151:i64 = mulnsw %45, %83
%152:i64 = add %150, %151
%153:i64 = mulnsw %86, %56
%154:i64 = add %152, %153
%155:i64 = mulnsw %60, %90
%156:i64 = add %154, %155
%157:i64 = mulnsw %93, %71
%158:i64 = add %156, %157
%159:i64 = mulnsw %97, %4
%160:i64 = add %158, %159
%161:i64 = mulnsw %53, %11
%162:i64 = add %160, %161
%163:i64 = mulnsw %15, %63
%164:i64 = add %162, %163
%165:i64 = mulnsw %68, %26
%166:i64 = add %164, %165
%167:i64 = mulnsw %45, %77
%168:i64 = mulnsw %89, %1
%169:i64 = add %167, %168
%170:i64 = mulnsw %96, %83
%171:i64 = add %169, %170
%172:i64 = mulnsw %60, %86
%173:i64 = add %171, %172
%174:i64 = mulnsw %103, %90
%175:i64 = add %173, %174
%176:i64 = mulnsw %93, %4
%177:i64 = add %175, %176
%178:i64 = mulnsw %79, %48
%179:i64 = add %177, %178
%180:i64 = mulnsw %15, %53
%181:i64 = add %179, %180
%182:i64 = mulnsw %82, %63
%183:i64 = add %181, %182
%184:i64 = mulnsw %30, %68
%185:i64 = add %183, %184
%186:i64 = mulnsw %45, %1
%187:i64 = mulnsw %77, %56
%188:i64 = add %186, %187
%189:i64 = mulnsw %60, %83
%190:i64 = add %188, %189
%191:i64 = mulnsw %86, %71
%192:i64 = add %190, %191
%193:i64 = mulnsw %90, %4
%194:i64 = add %192, %193
%195:i64 = mulnsw %38, %11
%196:i64 = add %194, %195
%197:i64 = mulnsw %15, %48
%198:i64 = add %196, %197
%199:i64 = mulnsw %53, %26
%200:i64 = add %198, %199
%201:i64 = mulnsw %30, %63
%202:i64 = add %200, %201
%203:i64 = mulnsw %68, %41
%204:i64 = add %202, %203 (hasExternalUses)
%205:i64 = add 33554432:i64, %204 (hasExternalUses)
%206:i64 = ashr %205, 26:i64
%207:i64 = add %185, %206 (hasExternalUses)
%208:i64 = add 16777216:i64, %207 (hasExternalUses)
%209:i64 = ashr %208, 25:i64
%210:i64 = add %166, %209 (hasExternalUses)
%211:i64 = add 33554432:i64, %210 (hasExternalUses)
%212:i64 = ashr %211, 26:i64
%213:i64 = add %147, %212 (hasExternalUses)
%214:i64 = add 16777216:i64, %213 (hasExternalUses)
%215:i64 = ashr %214, 25:i64
%216:i64 = add %128, %215 (hasExternalUses)
%217:i64 = add 33554432:i64, %216 (hasExternalUses)
%218:i64 = ashr %217, 26:i64
%219:i64 = add %109, %218 (hasExternalUses)
%220:i64 = add 16777216:i64, %219 (hasExternalUses)
%221:i64 = ashr %220, 25:i64
%222:i64 = mulnsw 19:i64, %221
%223:i64 = add %76, %222 (hasExternalUses)
%224:i64 = add 33554432:i64, %223 (hasExternalUses)
%225:i64 = and 4227858432:i64, %224
infer %225 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
ConstantSynthesis: solver returns error on first query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = add 1:i32, %2 (hasExternalUses)
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
%6:i32 = var
%7:i32 = mul 19:i32, %6
%8:i64 = sext %7
%9:i32 = var
%10:i32 = shl %9, 1:i32
%11:i64 = sext %10 (hasExternalUses)
%12:i64 = mulnsw %8, %11
%13:i64 = add %5, %12
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i32 = var
%17:i32 = mul 19:i32, %16
%18:i64 = sext %17 (hasExternalUses)
%19:i64 = mulnsw %15, %18
%20:i64 = add %13, %19
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i32 = var
%25:i32 = shl %24, 1:i32
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %23, %26
%28:i64 = add %20, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = mul 19:i32, %31
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
%36:i32 = var
%37:i32 = mul 19:i32, %36
%38:i64 = sext %37 (hasExternalUses)
%39:i32 = var
%40:i32 = shl %39, 1:i32
%41:i64 = sext %40 (hasExternalUses)
%42:i64 = mulnsw %38, %41
%43:i64 = add %35, %42
%44:i32 = var
%45:i64 = sext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = mul 19:i32, %46
%48:i64 = sext %47 (hasExternalUses)
%49:i64 = mulnsw %45, %48
%50:i64 = add %43, %49
%51:i32 = var
%52:i32 = mul 19:i32, %51
%53:i64 = sext %52 (hasExternalUses)
%54:i32 = var
%55:i32 = shl %54, 1:i32
%56:i64 = sext %55 (hasExternalUses)
%57:i64 = mulnsw %53, %56
%58:i64 = add %50, %57
%59:i32 = var
%60:i64 = sext %59 (hasExternalUses)
%61:i32 = var
%62:i32 = mul 19:i32, %61
%63:i64 = sext %62 (hasExternalUses)
%64:i64 = mulnsw %60, %63
%65:i64 = add %58, %64
%66:i32 = var
%67:i32 = mul 19:i32, %66
%68:i64 = sext %67 (hasExternalUses)
%69:i32 = var
%70:i32 = shl %69, 1:i32
%71:i64 = sext %70 (hasExternalUses)
%72:i64 = mulnsw %68, %71
%73:i64 = add %65, %72
%74:i64 = add 33554432:i64, %73 (hasExternalUses)
%75:i64 = and 18446744073642442752:i64, %74
%76:i64 = sub %73, %75
%77:i64 = sext %6 (hasExternalUses)
%78:i64 = mulnsw %15, %77
%79:i64 = sext %9 (hasExternalUses)
%80:i64 = mulnsw %79, %1
%81:i64 = add %78, %80
%82:i64 = sext %24 (hasExternalUses)
%83:i64 = sext %16 (hasExternalUses)
%84:i64 = mulnsw %82, %83
%85:i64 = add %81, %84
%86:i64 = sext %21 (hasExternalUses)
%87:i64 = mulnsw %30, %86
%88:i64 = add %85, %87
%89:i64 = sext %39 (hasExternalUses)
%90:i64 = sext %31
%91:i64 = mulnsw %89, %90
%92:i64 = add %88, %91
%93:i64 = sext %36
%94:i64 = mulnsw %45, %93
%95:i64 = add %92, %94
%96:i64 = sext %54 (hasExternalUses)
%97:i64 = sext %46
%98:i64 = mulnsw %96, %97
%99:i64 = add %95, %98
%100:i64 = sext %51
%101:i64 = mulnsw %60, %100
%102:i64 = add %99, %101
%103:i64 = sext %69 (hasExternalUses)
%104:i64 = sext %61
%105:i64 = mulnsw %103, %104
%106:i64 = add %102, %105
%107:i64 = sext %66
%108:i64 = mulnsw %107, %4
%109:i64 = add %106, %108
%110:i64 = mulnsw %15, %1
%111:i64 = mulnsw %77, %26
%112:i64 = add %110, %111
%113:i64 = mulnsw %30, %83
%114:i64 = add %112, %113
%115:i64 = mulnsw %86, %41
%116:i64 = add %114, %115
%117:i64 = mulnsw %45, %90
%118:i64 = add %116, %117
%119:i64 = mulnsw %93, %56
%120:i64 = add %118, %119
%121:i64 = mulnsw %60, %97
%122:i64 = add %120, %121
%123:i64 = mulnsw %100, %71
%124:i64 = add %122, %123
%125:i64 = mulnsw %104, %4
%126:i64 = add %124, %125
%127:i64 = mulnsw %68, %11
%128:i64 = add %126, %127
%129:i64 = mulnsw %30, %77
%130:i64 = mulnsw %82, %1
%131:i64 = add %129, %130
%132:i64 = mulnsw %89, %83
%133:i64 = add %131, %132
%134:i64 = mulnsw %45, %86
%135:i64 = add %133, %134
%136:i64 = mulnsw %96, %90
%137:i64 = add %135, %136
%138:i64 = mulnsw %60, %93
%139:i64 = add %137, %138
%140:i64 = mulnsw %103, %97
%141:i64 = add %139, %140
%142:i64 = mulnsw %100, %4
%143:i64 = add %141, %142
%144:i64 = mulnsw %79, %63
%145:i64 = add %143, %144
%146:i64 = mulnsw %15, %68
%147:i64 = add %145, %146
%148:i64 = mulnsw %30, %1
%149:i64 = mulnsw %77, %41
%150:i64 = add %148, %149
%151:i64 = mulnsw %45, %83
%152:i64 = add %150, %151
%153:i64 = mulnsw %86, %56
%154:i64 = add %152, %153
%155:i64 = mulnsw %60, %90
%156:i64 = add %154, %155
%157:i64 = mulnsw %93, %71
%158:i64 = add %156, %157
%159:i64 = mulnsw %97, %4
%160:i64 = add %158, %159
%161:i64 = mulnsw %53, %11
%162:i64 = add %160, %161
%163:i64 = mulnsw %15, %63
%164:i64 = add %162, %163
%165:i64 = mulnsw %68, %26
%166:i64 = add %164, %165
%167:i64 = mulnsw %45, %77
%168:i64 = mulnsw %89, %1
%169:i64 = add %167, %168
%170:i64 = mulnsw %96, %83
%171:i64 = add %169, %170
%172:i64 = mulnsw %60, %86
%173:i64 = add %171, %172
%174:i64 = mulnsw %103, %90
%175:i64 = add %173, %174
%176:i64 = mulnsw %93, %4
%177:i64 = add %175, %176
%178:i64 = mulnsw %79, %48
%179:i64 = add %177, %178
%180:i64 = mulnsw %15, %53
%181:i64 = add %179, %180
%182:i64 = mulnsw %82, %63
%183:i64 = add %181, %182
%184:i64 = mulnsw %30, %68
%185:i64 = add %183, %184
%186:i64 = mulnsw %45, %1
%187:i64 = mulnsw %77, %56
%188:i64 = add %186, %187
%189:i64 = mulnsw %60, %83
%190:i64 = add %188, %189
%191:i64 = mulnsw %86, %71
%192:i64 = add %190, %191
%193:i64 = mulnsw %90, %4
%194:i64 = add %192, %193
%195:i64 = mulnsw %38, %11
%196:i64 = add %194, %195
%197:i64 = mulnsw %15, %48
%198:i64 = add %196, %197
%199:i64 = mulnsw %53, %26
%200:i64 = add %198, %199
%201:i64 = mulnsw %30, %63
%202:i64 = add %200, %201
%203:i64 = mulnsw %68, %41
%204:i64 = add %202, %203 (hasExternalUses)
%205:i64 = add 33554432:i64, %204 (hasExternalUses)
%206:i64 = ashr %205, 26:i64
%207:i64 = add %185, %206 (hasExternalUses)
%208:i64 = add 16777216:i64, %207 (hasExternalUses)
%209:i64 = ashr %208, 25:i64
%210:i64 = add %166, %209 (hasExternalUses)
%211:i64 = add 33554432:i64, %210 (hasExternalUses)
%212:i64 = ashr %211, 26:i64
%213:i64 = add %147, %212 (hasExternalUses)
%214:i64 = add 16777216:i64, %213 (hasExternalUses)
%215:i64 = ashr %214, 25:i64
%216:i64 = add %128, %215 (hasExternalUses)
%217:i64 = add 33554432:i64, %216 (hasExternalUses)
%218:i64 = ashr %217, 26:i64
%219:i64 = add %109, %218 (hasExternalUses)
%220:i64 = add 16777216:i64, %219 (hasExternalUses)
%221:i64 = ashr %220, 25:i64
%222:i64 = mulnsw 19:i64, %221
%223:i64 = add %76, %222
%224:i64 = add 33554432:i64, %223 (hasExternalUses)
%225:i64 = and 4227858432:i64, %224
%226:i64 = sub %223, %225
infer %226 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = add 1:i32, %2 (hasExternalUses)
%4:i64 = sext %3 (hasExternalUses)
%5:i64 = mulnsw %1, %4
%6:i32 = var
%7:i32 = mul 19:i32, %6
%8:i64 = sext %7
%9:i32 = var
%10:i32 = shl %9, 1:i32
%11:i64 = sext %10 (hasExternalUses)
%12:i64 = mulnsw %8, %11
%13:i64 = add %5, %12
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i32 = var
%17:i32 = mul 19:i32, %16
%18:i64 = sext %17 (hasExternalUses)
%19:i64 = mulnsw %15, %18
%20:i64 = add %13, %19
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i32 = var
%25:i32 = shl %24, 1:i32
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %23, %26
%28:i64 = add %20, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = mul 19:i32, %31
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
%36:i32 = var
%37:i32 = mul 19:i32, %36
%38:i64 = sext %37 (hasExternalUses)
%39:i32 = var
%40:i32 = shl %39, 1:i32
%41:i64 = sext %40 (hasExternalUses)
%42:i64 = mulnsw %38, %41
%43:i64 = add %35, %42
%44:i32 = var
%45:i64 = sext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = mul 19:i32, %46
%48:i64 = sext %47 (hasExternalUses)
%49:i64 = mulnsw %45, %48
%50:i64 = add %43, %49
%51:i32 = var
%52:i32 = mul 19:i32, %51
%53:i64 = sext %52 (hasExternalUses)
%54:i32 = var
%55:i32 = shl %54, 1:i32
%56:i64 = sext %55 (hasExternalUses)
%57:i64 = mulnsw %53, %56
%58:i64 = add %50, %57
%59:i32 = var
%60:i64 = sext %59 (hasExternalUses)
%61:i32 = var
%62:i32 = mul 19:i32, %61
%63:i64 = sext %62 (hasExternalUses)
%64:i64 = mulnsw %60, %63
%65:i64 = add %58, %64
%66:i32 = var
%67:i32 = mul 19:i32, %66
%68:i64 = sext %67 (hasExternalUses)
%69:i32 = var
%70:i32 = shl %69, 1:i32
%71:i64 = sext %70 (hasExternalUses)
%72:i64 = mulnsw %68, %71
%73:i64 = add %65, %72
%74:i64 = add 33554432:i64, %73 (hasExternalUses)
%75:i64 = and 18446744073642442752:i64, %74
%76:i64 = sub %73, %75
%77:i64 = sext %6 (hasExternalUses)
%78:i64 = mulnsw %15, %77
%79:i64 = sext %9 (hasExternalUses)
%80:i64 = mulnsw %79, %1
%81:i64 = add %78, %80
%82:i64 = sext %24 (hasExternalUses)
%83:i64 = sext %16 (hasExternalUses)
%84:i64 = mulnsw %82, %83
%85:i64 = add %81, %84
%86:i64 = sext %21 (hasExternalUses)
%87:i64 = mulnsw %30, %86
%88:i64 = add %85, %87
%89:i64 = sext %39 (hasExternalUses)
%90:i64 = sext %31
%91:i64 = mulnsw %89, %90
%92:i64 = add %88, %91
%93:i64 = sext %36
%94:i64 = mulnsw %45, %93
%95:i64 = add %92, %94
%96:i64 = sext %54 (hasExternalUses)
%97:i64 = sext %46
%98:i64 = mulnsw %96, %97
%99:i64 = add %95, %98
%100:i64 = sext %51
%101:i64 = mulnsw %60, %100
%102:i64 = add %99, %101
%103:i64 = sext %69 (hasExternalUses)
%104:i64 = sext %61
%105:i64 = mulnsw %103, %104
%106:i64 = add %102, %105
%107:i64 = sext %66
%108:i64 = mulnsw %107, %4
%109:i64 = add %106, %108
%110:i64 = mulnsw %15, %1
%111:i64 = mulnsw %77, %26
%112:i64 = add %110, %111
%113:i64 = mulnsw %30, %83
%114:i64 = add %112, %113
%115:i64 = mulnsw %86, %41
%116:i64 = add %114, %115
%117:i64 = mulnsw %45, %90
%118:i64 = add %116, %117
%119:i64 = mulnsw %93, %56
%120:i64 = add %118, %119
%121:i64 = mulnsw %60, %97
%122:i64 = add %120, %121
%123:i64 = mulnsw %100, %71
%124:i64 = add %122, %123
%125:i64 = mulnsw %104, %4
%126:i64 = add %124, %125
%127:i64 = mulnsw %68, %11
%128:i64 = add %126, %127
%129:i64 = mulnsw %30, %77
%130:i64 = mulnsw %82, %1
%131:i64 = add %129, %130
%132:i64 = mulnsw %89, %83
%133:i64 = add %131, %132
%134:i64 = mulnsw %45, %86
%135:i64 = add %133, %134
%136:i64 = mulnsw %96, %90
%137:i64 = add %135, %136
%138:i64 = mulnsw %60, %93
%139:i64 = add %137, %138
%140:i64 = mulnsw %103, %97
%141:i64 = add %139, %140
%142:i64 = mulnsw %100, %4
%143:i64 = add %141, %142
%144:i64 = mulnsw %79, %63
%145:i64 = add %143, %144
%146:i64 = mulnsw %15, %68
%147:i64 = add %145, %146
%148:i64 = mulnsw %30, %1
%149:i64 = mulnsw %77, %41
%150:i64 = add %148, %149
%151:i64 = mulnsw %45, %83
%152:i64 = add %150, %151
%153:i64 = mulnsw %86, %56
%154:i64 = add %152, %153
%155:i64 = mulnsw %60, %90
%156:i64 = add %154, %155
%157:i64 = mulnsw %93, %71
%158:i64 = add %156, %157
%159:i64 = mulnsw %97, %4
%160:i64 = add %158, %159
%161:i64 = mulnsw %53, %11
%162:i64 = add %160, %161
%163:i64 = mulnsw %15, %63
%164:i64 = add %162, %163
%165:i64 = mulnsw %68, %26
%166:i64 = add %164, %165
%167:i64 = mulnsw %45, %77
%168:i64 = mulnsw %89, %1
%169:i64 = add %167, %168
%170:i64 = mulnsw %96, %83
%171:i64 = add %169, %170
%172:i64 = mulnsw %60, %86
%173:i64 = add %171, %172
%174:i64 = mulnsw %103, %90
%175:i64 = add %173, %174
%176:i64 = mulnsw %93, %4
%177:i64 = add %175, %176
%178:i64 = mulnsw %79, %48
%179:i64 = add %177, %178
%180:i64 = mulnsw %15, %53
%181:i64 = add %179, %180
%182:i64 = mulnsw %82, %63
%183:i64 = add %181, %182
%184:i64 = mulnsw %30, %68
%185:i64 = add %183, %184
%186:i64 = mulnsw %45, %1
%187:i64 = mulnsw %77, %56
%188:i64 = add %186, %187
%189:i64 = mulnsw %60, %83
%190:i64 = add %188, %189
%191:i64 = mulnsw %86, %71
%192:i64 = add %190, %191
%193:i64 = mulnsw %90, %4
%194:i64 = add %192, %193
%195:i64 = mulnsw %38, %11
%196:i64 = add %194, %195
%197:i64 = mulnsw %15, %48
%198:i64 = add %196, %197
%199:i64 = mulnsw %53, %26
%200:i64 = add %198, %199
%201:i64 = mulnsw %30, %63
%202:i64 = add %200, %201
%203:i64 = mulnsw %68, %41
%204:i64 = add %202, %203 (hasExternalUses)
%205:i64 = add 33554432:i64, %204 (hasExternalUses)
%206:i64 = ashr %205, 26:i64
%207:i64 = add %185, %206 (hasExternalUses)
%208:i64 = add 16777216:i64, %207 (hasExternalUses)
%209:i64 = ashr %208, 25:i64
%210:i64 = add %166, %209 (hasExternalUses)
%211:i64 = add 33554432:i64, %210 (hasExternalUses)
%212:i64 = ashr %211, 26:i64
%213:i64 = add %147, %212 (hasExternalUses)
%214:i64 = add 16777216:i64, %213 (hasExternalUses)
%215:i64 = ashr %214, 25:i64
%216:i64 = add %128, %215 (hasExternalUses)
%217:i64 = add 33554432:i64, %216 (hasExternalUses)
%218:i64 = ashr %217, 26:i64
%219:i64 = add %109, %218 (hasExternalUses)
%220:i64 = add 16777216:i64, %219 (hasExternalUses)
%221:i64 = ashr %220, 25:i64
%222:i64 = mulnsw 19:i64, %221
%223:i64 = add %76, %222
%224:i64 = add 33554432:i64, %223 (hasExternalUses)
%225:i64 = and 4227858432:i64, %224
%226:i64 = sub %223, %225
%227:i32 = trunc %226
infer %227


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = add 1:i32, %7 (hasExternalUses)
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = mul 19:i32, %14
%16:i64 = sext %15
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i32 = var
%22:i32 = mul 19:i32, %21
%23:i64 = sext %22 (hasExternalUses)
%24:i64 = mulnsw %20, %23
%25:i64 = add %18, %24
%26:i32 = var
%27:i64 = sext %26 (hasExternalUses)
%28:i32 = var
%29:i32 = mul 19:i32, %28
%30:i64 = sext %29 (hasExternalUses)
%31:i64 = mulnsw %27, %30
%32:i64 = add %25, %31
%33:i32 = var
%34:i64 = sext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = mul 19:i32, %35
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %32, %38
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i32 = var
%43:i32 = mul 19:i32, %42
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %41, %44
%46:i64 = add %39, %45
%47:i32 = var
%48:i64 = sext %47 (hasExternalUses)
%49:i32 = var
%50:i32 = mul 19:i32, %49
%51:i64 = sext %50 (hasExternalUses)
%52:i64 = mulnsw %48, %51
%53:i64 = add %46, %52
%54:i32 = var
%55:i64 = sext %54 (hasExternalUses)
%56:i32 = var
%57:i32 = mul 19:i32, %56
%58:i64 = sext %57 (hasExternalUses)
%59:i64 = mulnsw %55, %58
%60:i64 = add %53, %59
%61:i32 = var
%62:i64 = sext %61 (hasExternalUses)
%63:i32 = var
%64:i32 = mul 19:i32, %63
%65:i64 = sext %64 (hasExternalUses)
%66:i64 = mulnsw %62, %65
%67:i64 = add %60, %66
%68:i64 = mulnsw %3, %9
%69:i32 = mul 19:i32, %5
%70:i64 = sext %69
%71:i32 = shl %12, 1:i32
%72:i64 = sext %71 (hasExternalUses)
%73:i64 = mulnsw %70, %72
%74:i64 = add %68, %73
%75:i64 = mulnsw %20, %16
%76:i64 = add %74, %75
%77:i32 = shl %26, 1:i32
%78:i64 = sext %77 (hasExternalUses)
%79:i64 = mulnsw %23, %78
%80:i64 = add %76, %79
%81:i64 = mulnsw %34, %30
%82:i64 = add %80, %81
%83:i32 = shl %40, 1:i32
%84:i64 = sext %83 (hasExternalUses)
%85:i64 = mulnsw %37, %84
%86:i64 = add %82, %85
%87:i64 = mulnsw %48, %44
%88:i64 = add %86, %87
%89:i32 = shl %54, 1:i32
%90:i64 = sext %89 (hasExternalUses)
%91:i64 = mulnsw %51, %90
%92:i64 = add %88, %91
%93:i64 = mulnsw %62, %58
%94:i64 = add %92, %93
%95:i32 = shl %0, 1:i32
%96:i64 = sext %95 (hasExternalUses)
%97:i64 = mulnsw %65, %96
%98:i64 = add %94, %97
%99:i64 = add 33554432:i64, %98
%100:i64 = ashr %99, 26:i64
%101:i64 = add %67, %100
%102:i64 = add 16777216:i64, %101 (hasExternalUses)
%103:i64 = and 4261412864:i64, %102
%104:i64 = sub %101, %103
%105:i64 = and 18446744073642442752:i64, %99
%106:i64 = sub %98, %105
%107:i64 = mulnsw %20, %6
%108:i64 = mulnsw %13, %3
%109:i64 = add %107, %108
%110:i64 = sext %14 (hasExternalUses)
%111:i64 = mulnsw %27, %110
%112:i64 = add %109, %111
%113:i64 = sext %21 (hasExternalUses)
%114:i64 = mulnsw %34, %113
%115:i64 = add %112, %114
%116:i64 = sext %28
%117:i64 = mulnsw %41, %116
%118:i64 = add %115, %117
%119:i64 = sext %35
%120:i64 = mulnsw %48, %119
%121:i64 = add %118, %120
%122:i64 = sext %42
%123:i64 = mulnsw %55, %122
%124:i64 = add %121, %123
%125:i64 = sext %49
%126:i64 = mulnsw %62, %125
%127:i64 = add %124, %126
%128:i64 = sext %56
%129:i64 = mulnsw %1, %128
%130:i64 = add %127, %129
%131:i64 = sext %63
%132:i64 = mulnsw %131, %9
%133:i64 = add %130, %132
%134:i64 = mulnsw %20, %3
%135:i64 = mulnsw %6, %78
%136:i64 = add %134, %135
%137:i64 = mulnsw %34, %110
%138:i64 = add %136, %137
%139:i64 = mulnsw %113, %84
%140:i64 = add %138, %139
%141:i64 = mulnsw %48, %116
%142:i64 = add %140, %141
%143:i64 = mulnsw %119, %90
%144:i64 = add %142, %143
%145:i64 = mulnsw %62, %122
%146:i64 = add %144, %145
%147:i64 = mulnsw %125, %96
%148:i64 = add %146, %147
%149:i64 = mulnsw %128, %9
%150:i64 = add %148, %149
%151:i64 = mulnsw %65, %72
%152:i64 = add %150, %151
%153:i64 = mulnsw %34, %6
%154:i64 = mulnsw %27, %3
%155:i64 = add %153, %154
%156:i64 = mulnsw %41, %110
%157:i64 = add %155, %156
%158:i64 = mulnsw %48, %113
%159:i64 = add %157, %158
%160:i64 = mulnsw %55, %116
%161:i64 = add %159, %160
%162:i64 = mulnsw %62, %119
%163:i64 = add %161, %162
%164:i64 = mulnsw %1, %122
%165:i64 = add %163, %164
%166:i64 = mulnsw %125, %9
%167:i64 = add %165, %166
%168:i64 = mulnsw %13, %58
%169:i64 = add %167, %168
%170:i64 = mulnsw %20, %65
%171:i64 = add %169, %170
%172:i64 = mulnsw %34, %3
%173:i64 = mulnsw %6, %84
%174:i64 = add %172, %173
%175:i64 = mulnsw %48, %110
%176:i64 = add %174, %175
%177:i64 = mulnsw %113, %90
%178:i64 = add %176, %177
%179:i64 = mulnsw %62, %116
%180:i64 = add %178, %179
%181:i64 = mulnsw %119, %96
%182:i64 = add %180, %181
%183:i64 = mulnsw %122, %9
%184:i64 = add %182, %183
%185:i64 = mulnsw %51, %72
%186:i64 = add %184, %185
%187:i64 = mulnsw %20, %58
%188:i64 = add %186, %187
%189:i64 = mulnsw %65, %78
%190:i64 = add %188, %189
%191:i64 = mulnsw %48, %6
%192:i64 = mulnsw %41, %3
%193:i64 = add %191, %192
%194:i64 = mulnsw %55, %110
%195:i64 = add %193, %194
%196:i64 = mulnsw %62, %113
%197:i64 = add %195, %196
%198:i64 = mulnsw %1, %116
%199:i64 = add %197, %198
%200:i64 = mulnsw %119, %9
%201:i64 = add %199, %200
%202:i64 = mulnsw %13, %44
%203:i64 = add %201, %202
%204:i64 = mulnsw %20, %51
%205:i64 = add %203, %204
%206:i64 = mulnsw %27, %58
%207:i64 = add %205, %206
%208:i64 = mulnsw %34, %65
%209:i64 = add %207, %208
%210:i64 = mulnsw %48, %3
%211:i64 = mulnsw %6, %90
%212:i64 = add %210, %211
%213:i64 = mulnsw %62, %110
%214:i64 = add %212, %213
%215:i64 = mulnsw %113, %96
%216:i64 = add %214, %215
%217:i64 = mulnsw %116, %9
%218:i64 = add %216, %217
%219:i64 = mulnsw %37, %72
%220:i64 = add %218, %219
%221:i64 = mulnsw %20, %44
%222:i64 = add %220, %221
%223:i64 = mulnsw %51, %78
%224:i64 = add %222, %223
%225:i64 = mulnsw %34, %58
%226:i64 = add %224, %225
%227:i64 = mulnsw %65, %84
%228:i64 = add %226, %227 (hasExternalUses)
%229:i64 = add 33554432:i64, %228 (hasExternalUses)
%230:i64 = ashr %229, 26:i64
%231:i64 = add %209, %230 (hasExternalUses)
%232:i64 = add 16777216:i64, %231 (hasExternalUses)
%233:i64 = ashr %232, 25:i64
%234:i64 = add %190, %233 (hasExternalUses)
%235:i64 = add 33554432:i64, %234 (hasExternalUses)
%236:i64 = ashr %235, 26:i64
%237:i64 = add %171, %236 (hasExternalUses)
%238:i64 = add 16777216:i64, %237 (hasExternalUses)
%239:i64 = ashr %238, 25:i64
%240:i64 = add %152, %239 (hasExternalUses)
%241:i64 = add 33554432:i64, %240 (hasExternalUses)
%242:i64 = ashr %241, 26:i64
%243:i64 = add %133, %242 (hasExternalUses)
%244:i64 = add 16777216:i64, %243 (hasExternalUses)
%245:i64 = ashr %244, 25:i64
%246:i64 = mulnsw 19:i64, %245
%247:i64 = add %106, %246 (hasExternalUses)
%248:i64 = add 33554432:i64, %247 (hasExternalUses)
%249:i64 = lshr %248, 26:i64
%250:i64 = add %104, %249
%251:i32 = trunc %250
infer %251


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = add 1:i32, %14 (hasExternalUses)
%16:i64 = sext %15 (hasExternalUses)
%17:i64 = mulnsw %13, %16
%18:i64 = add %11, %17
%19:i32 = var
%20:i32 = mul 19:i32, %19
%21:i64 = sext %20
%22:i32 = var
%23:i32 = shl %22, 1:i32
%24:i64 = sext %23 (hasExternalUses)
%25:i64 = mulnsw %21, %24
%26:i64 = add %18, %25
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i32 = var
%30:i32 = mul 19:i32, %29
%31:i64 = sext %30 (hasExternalUses)
%32:i64 = mulnsw %28, %31
%33:i64 = add %26, %32
%34:i32 = var
%35:i32 = mul 19:i32, %34
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i32 = shl %37, 1:i32
%39:i64 = sext %38 (hasExternalUses)
%40:i64 = mulnsw %36, %39
%41:i64 = add %33, %40
%42:i32 = var
%43:i64 = sext %42 (hasExternalUses)
%44:i32 = var
%45:i32 = mul 19:i32, %44
%46:i64 = sext %45 (hasExternalUses)
%47:i64 = mulnsw %43, %46
%48:i64 = add %41, %47
%49:i32 = var
%50:i32 = mul 19:i32, %49
%51:i64 = sext %50 (hasExternalUses)
%52:i32 = var
%53:i32 = shl %52, 1:i32
%54:i64 = sext %53 (hasExternalUses)
%55:i64 = mulnsw %51, %54
%56:i64 = add %48, %55
%57:i32 = var
%58:i64 = sext %57 (hasExternalUses)
%59:i32 = var
%60:i32 = mul 19:i32, %59
%61:i64 = sext %60 (hasExternalUses)
%62:i64 = mulnsw %58, %61
%63:i64 = add %56, %62
%64:i32 = var
%65:i32 = mul 19:i32, %64
%66:i64 = sext %65 (hasExternalUses)
%67:i32 = var
%68:i32 = shl %67, 1:i32
%69:i64 = sext %68 (hasExternalUses)
%70:i64 = mulnsw %66, %69
%71:i64 = add %63, %70
%72:i64 = sext %7 (hasExternalUses)
%73:i64 = mulnsw %72, %3
%74:i64 = mulnsw %6, %16
%75:i64 = add %73, %74
%76:i64 = sext %22 (hasExternalUses)
%77:i32 = mul 19:i32, %12
%78:i64 = sext %77
%79:i64 = mulnsw %76, %78
%80:i64 = add %75, %79
%81:i64 = mulnsw %28, %21
%82:i64 = add %80, %81
%83:i64 = sext %37 (hasExternalUses)
%84:i64 = mulnsw %83, %31
%85:i64 = add %82, %84
%86:i64 = mulnsw %43, %36
%87:i64 = add %85, %86
%88:i64 = sext %52 (hasExternalUses)
%89:i64 = mulnsw %88, %46
%90:i64 = add %87, %89
%91:i64 = mulnsw %58, %51
%92:i64 = add %90, %91
%93:i64 = sext %67 (hasExternalUses)
%94:i64 = mulnsw %93, %61
%95:i64 = add %92, %94
%96:i64 = mulnsw %1, %66
%97:i64 = add %95, %96
%98:i64 = mulnsw %3, %16
%99:i32 = mul 19:i32, %5
%100:i64 = sext %99
%101:i64 = mulnsw %100, %24
%102:i64 = add %98, %101
%103:i64 = mulnsw %28, %78
%104:i64 = add %102, %103
%105:i64 = mulnsw %21, %39
%106:i64 = add %104, %105
%107:i64 = mulnsw %43, %31
%108:i64 = add %106, %107
%109:i64 = mulnsw %36, %54
%110:i64 = add %108, %109
%111:i64 = mulnsw %58, %46
%112:i64 = add %110, %111
%113:i64 = mulnsw %51, %69
%114:i64 = add %112, %113
%115:i64 = mulnsw %1, %61
%116:i64 = add %114, %115
%117:i64 = mulnsw %66, %9
%118:i64 = add %116, %117 (hasExternalUses)
%119:i64 = add 33554432:i64, %118 (hasExternalUses)
%120:i64 = ashr %119, 26:i64
%121:i64 = add %97, %120 (hasExternalUses)
%122:i64 = add 16777216:i64, %121 (hasExternalUses)
%123:i64 = ashr %122, 25:i64
%124:i64 = add %71, %123
%125:i64 = add 33554432:i64, %124 (hasExternalUses)
%126:i64 = and 4227858432:i64, %125
%127:i64 = sub %124, %126
%128:i32 = trunc %127
infer %128


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i32 = add 1:i32, %19 (hasExternalUses)
%21:i64 = sext %20 (hasExternalUses)
%22:i64 = mulnsw %18, %21
%23:i64 = add %16, %22
%24:i32 = var
%25:i64 = sext %24 (hasExternalUses)
%26:i32 = var
%27:i32 = mul 19:i32, %26
%28:i64 = sext %27
%29:i64 = mulnsw %25, %28
%30:i64 = add %23, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = mul 19:i32, %33
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i32 = mul 19:i32, %40
%42:i64 = sext %41 (hasExternalUses)
%43:i64 = mulnsw %39, %42
%44:i64 = add %37, %43
%45:i32 = var
%46:i64 = sext %45 (hasExternalUses)
%47:i32 = var
%48:i32 = mul 19:i32, %47
%49:i64 = sext %48 (hasExternalUses)
%50:i64 = mulnsw %46, %49
%51:i64 = add %44, %50
%52:i32 = var
%53:i64 = sext %52 (hasExternalUses)
%54:i32 = var
%55:i32 = mul 19:i32, %54
%56:i64 = sext %55 (hasExternalUses)
%57:i64 = mulnsw %53, %56
%58:i64 = add %51, %57
%59:i32 = var
%60:i64 = sext %59 (hasExternalUses)
%61:i32 = var
%62:i32 = mul 19:i32, %61
%63:i64 = sext %62 (hasExternalUses)
%64:i64 = mulnsw %60, %63
%65:i64 = add %58, %64
%66:i64 = mulnsw %1, %8
%67:i32 = shl %11, 1:i32
%68:i64 = sext %67 (hasExternalUses)
%69:i64 = mulnsw %3, %68
%70:i64 = add %66, %69
%71:i64 = mulnsw %14, %21
%72:i64 = add %70, %71
%73:i32 = mul 19:i32, %17
%74:i64 = sext %73
%75:i32 = shl %24, 1:i32
%76:i64 = sext %75 (hasExternalUses)
%77:i64 = mulnsw %74, %76
%78:i64 = add %72, %77
%79:i64 = mulnsw %32, %28
%80:i64 = add %78, %79
%81:i32 = shl %38, 1:i32
%82:i64 = sext %81 (hasExternalUses)
%83:i64 = mulnsw %35, %82
%84:i64 = add %80, %83
%85:i64 = mulnsw %46, %42
%86:i64 = add %84, %85
%87:i32 = shl %52, 1:i32
%88:i64 = sext %87 (hasExternalUses)
%89:i64 = mulnsw %49, %88
%90:i64 = add %86, %89
%91:i64 = mulnsw %60, %56
%92:i64 = add %90, %91
%93:i32 = shl %5, 1:i32
%94:i64 = sext %93 (hasExternalUses)
%95:i64 = mulnsw %63, %94
%96:i64 = add %92, %95
%97:i64 = mulnsw %12, %8
%98:i64 = mulnsw %3, %21
%99:i64 = add %97, %98
%100:i32 = mul 19:i32, %13
%101:i64 = sext %100
%102:i64 = mulnsw %25, %101
%103:i64 = add %99, %102
%104:i64 = mulnsw %32, %74
%105:i64 = add %103, %104
%106:i64 = mulnsw %39, %28
%107:i64 = add %105, %106
%108:i64 = mulnsw %46, %35
%109:i64 = add %107, %108
%110:i64 = mulnsw %53, %42
%111:i64 = add %109, %110
%112:i64 = mulnsw %60, %49
%113:i64 = add %111, %112
%114:i64 = mulnsw %6, %56
%115:i64 = add %113, %114
%116:i64 = mulnsw %1, %63
%117:i64 = add %115, %116
%118:i64 = mulnsw %8, %21
%119:i32 = mul 19:i32, %2
%120:i64 = sext %119
%121:i64 = mulnsw %120, %76
%122:i64 = add %118, %121
%123:i64 = mulnsw %32, %101
%124:i64 = add %122, %123
%125:i64 = mulnsw %74, %82
%126:i64 = add %124, %125
%127:i64 = mulnsw %46, %28
%128:i64 = add %126, %127
%129:i64 = mulnsw %35, %88
%130:i64 = add %128, %129
%131:i64 = mulnsw %60, %42
%132:i64 = add %130, %131
%133:i64 = mulnsw %49, %94
%134:i64 = add %132, %133
%135:i64 = mulnsw %1, %56
%136:i64 = add %134, %135
%137:i64 = mulnsw %63, %68
%138:i64 = add %136, %137 (hasExternalUses)
%139:i64 = add 33554432:i64, %138 (hasExternalUses)
%140:i64 = ashr %139, 26:i64
%141:i64 = add %117, %140 (hasExternalUses)
%142:i64 = add 16777216:i64, %141 (hasExternalUses)
%143:i64 = ashr %142, 25:i64
%144:i64 = add %96, %143 (hasExternalUses)
%145:i64 = add 33554432:i64, %144 (hasExternalUses)
%146:i64 = ashr %145, 26:i64
%147:i64 = add %65, %146
%148:i64 = add 16777216:i64, %147 (hasExternalUses)
%149:i64 = and 4261412864:i64, %148
%150:i64 = sub %147, %149
%151:i32 = trunc %150
infer %151


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i32 = add 1:i32, %27 (hasExternalUses)
%29:i64 = sext %28 (hasExternalUses)
%30:i64 = mulnsw %26, %29
%31:i64 = add %24, %30
%32:i32 = var
%33:i32 = mul 19:i32, %32
%34:i64 = sext %33
%35:i32 = var
%36:i32 = shl %35, 1:i32
%37:i64 = sext %36 (hasExternalUses)
%38:i64 = mulnsw %34, %37
%39:i64 = add %31, %38
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i32 = var
%43:i32 = mul 19:i32, %42
%44:i64 = sext %43 (hasExternalUses)
%45:i64 = mulnsw %41, %44
%46:i64 = add %39, %45
%47:i32 = var
%48:i32 = mul 19:i32, %47
%49:i64 = sext %48 (hasExternalUses)
%50:i32 = var
%51:i32 = shl %50, 1:i32
%52:i64 = sext %51 (hasExternalUses)
%53:i64 = mulnsw %49, %52
%54:i64 = add %46, %53
%55:i32 = var
%56:i64 = sext %55 (hasExternalUses)
%57:i32 = var
%58:i32 = mul 19:i32, %57
%59:i64 = sext %58 (hasExternalUses)
%60:i64 = mulnsw %56, %59
%61:i64 = add %54, %60
%62:i32 = var
%63:i32 = mul 19:i32, %62
%64:i64 = sext %63 (hasExternalUses)
%65:i32 = var
%66:i32 = shl %65, 1:i32
%67:i64 = sext %66 (hasExternalUses)
%68:i64 = mulnsw %64, %67
%69:i64 = add %61, %68
%70:i64 = add 33554432:i64, %69 (hasExternalUses)
%71:i64 = and 18446744073642442752:i64, %70
%72:i64 = sub %69, %71
%73:i64 = mulnsw %13, %6
%74:i64 = sext %7 (hasExternalUses)
%75:i64 = mulnsw %74, %3
%76:i64 = add %73, %75
%77:i64 = sext %20 (hasExternalUses)
%78:i64 = mulnsw %77, %15
%79:i64 = add %76, %78
%80:i64 = mulnsw %19, %29
%81:i64 = add %79, %80
%82:i64 = sext %35 (hasExternalUses)
%83:i32 = mul 19:i32, %25
%84:i64 = sext %83
%85:i64 = mulnsw %82, %84
%86:i64 = add %81, %85
%87:i64 = mulnsw %41, %34
%88:i64 = add %86, %87
%89:i64 = sext %50 (hasExternalUses)
%90:i64 = mulnsw %89, %44
%91:i64 = add %88, %90
%92:i64 = mulnsw %56, %49
%93:i64 = add %91, %92
%94:i64 = sext %65 (hasExternalUses)
%95:i64 = mulnsw %94, %59
%96:i64 = add %93, %95
%97:i64 = mulnsw %1, %64
%98:i64 = add %96, %97
%99:i64 = mulnsw %13, %3
%100:i64 = mulnsw %6, %22
%101:i64 = add %99, %100
%102:i64 = mulnsw %15, %29
%103:i64 = add %101, %102
%104:i32 = mul 19:i32, %18
%105:i64 = sext %104
%106:i64 = mulnsw %105, %37
%107:i64 = add %103, %106
%108:i64 = mulnsw %41, %84
%109:i64 = add %107, %108
%110:i64 = mulnsw %34, %52
%111:i64 = add %109, %110
%112:i64 = mulnsw %56, %44
%113:i64 = add %111, %112
%114:i64 = mulnsw %49, %67
%115:i64 = add %113, %114
%116:i64 = mulnsw %1, %59
%117:i64 = add %115, %116
%118:i64 = mulnsw %64, %9
%119:i64 = add %117, %118
%120:i64 = mulnsw %77, %3
%121:i64 = mulnsw %6, %29
%122:i64 = add %120, %121
%123:i32 = mul 19:i32, %14
%124:i64 = sext %123
%125:i64 = mulnsw %82, %124
%126:i64 = add %122, %125
%127:i64 = mulnsw %41, %105
%128:i64 = add %126, %127
%129:i64 = mulnsw %89, %84
%130:i64 = add %128, %129
%131:i64 = mulnsw %56, %34
%132:i64 = add %130, %131
%133:i64 = mulnsw %94, %44
%134:i64 = add %132, %133
%135:i64 = mulnsw %1, %49
%136:i64 = add %134, %135
%137:i64 = mulnsw %74, %59
%138:i64 = add %136, %137
%139:i64 = mulnsw %13, %64
%140:i64 = add %138, %139
%141:i64 = mulnsw %3, %29
%142:i32 = mul 19:i32, %5
%143:i64 = sext %142
%144:i64 = mulnsw %143, %37
%145:i64 = add %141, %144
%146:i64 = mulnsw %41, %124
%147:i64 = add %145, %146
%148:i64 = mulnsw %105, %52
%149:i64 = add %147, %148
%150:i64 = mulnsw %56, %84
%151:i64 = add %149, %150
%152:i64 = mulnsw %34, %67
%153:i64 = add %151, %152
%154:i64 = mulnsw %1, %44
%155:i64 = add %153, %154
%156:i64 = mulnsw %49, %9
%157:i64 = add %155, %156
%158:i64 = mulnsw %13, %59
%159:i64 = add %157, %158
%160:i64 = mulnsw %64, %22
%161:i64 = add %159, %160 (hasExternalUses)
%162:i64 = add 33554432:i64, %161 (hasExternalUses)
%163:i64 = ashr %162, 26:i64
%164:i64 = add %140, %163 (hasExternalUses)
%165:i64 = add 16777216:i64, %164 (hasExternalUses)
%166:i64 = ashr %165, 25:i64
%167:i64 = add %119, %166 (hasExternalUses)
%168:i64 = add 33554432:i64, %167 (hasExternalUses)
%169:i64 = ashr %168, 26:i64
%170:i64 = add %98, %169 (hasExternalUses)
%171:i64 = add 16777216:i64, %170 (hasExternalUses)
%172:i64 = ashr %171, 25:i64
%173:i64 = add %72, %172
%174:i64 = add 33554432:i64, %173 (hasExternalUses)
%175:i64 = and 4227858432:i64, %174
%176:i64 = sub %173, %175
%177:i32 = trunc %176
infer %177


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i32 = add 1:i32, %31 (hasExternalUses)
%33:i64 = sext %32 (hasExternalUses)
%34:i64 = mulnsw %30, %33
%35:i64 = add %28, %34
%36:i32 = var
%37:i64 = sext %36 (hasExternalUses)
%38:i32 = var
%39:i32 = mul 19:i32, %38
%40:i64 = sext %39
%41:i64 = mulnsw %37, %40
%42:i64 = add %35, %41
%43:i32 = var
%44:i64 = sext %43 (hasExternalUses)
%45:i32 = var
%46:i32 = mul 19:i32, %45
%47:i64 = sext %46 (hasExternalUses)
%48:i64 = mulnsw %44, %47
%49:i64 = add %42, %48
%50:i32 = var
%51:i64 = sext %50 (hasExternalUses)
%52:i32 = var
%53:i32 = mul 19:i32, %52
%54:i64 = sext %53 (hasExternalUses)
%55:i64 = mulnsw %51, %54
%56:i64 = add %49, %55
%57:i32 = var
%58:i64 = sext %57 (hasExternalUses)
%59:i32 = var
%60:i32 = mul 19:i32, %59
%61:i64 = sext %60 (hasExternalUses)
%62:i64 = mulnsw %58, %61
%63:i64 = add %56, %62
%64:i64 = mulnsw %1, %8
%65:i32 = shl %11, 1:i32
%66:i64 = sext %65 (hasExternalUses)
%67:i64 = mulnsw %3, %66
%68:i64 = add %64, %67
%69:i64 = mulnsw %18, %14
%70:i64 = add %68, %69
%71:i32 = shl %23, 1:i32
%72:i64 = sext %71 (hasExternalUses)
%73:i64 = mulnsw %20, %72
%74:i64 = add %70, %73
%75:i64 = mulnsw %26, %33
%76:i64 = add %74, %75
%77:i32 = mul 19:i32, %29
%78:i64 = sext %77
%79:i32 = shl %36, 1:i32
%80:i64 = sext %79 (hasExternalUses)
%81:i64 = mulnsw %78, %80
%82:i64 = add %76, %81
%83:i64 = mulnsw %44, %40
%84:i64 = add %82, %83
%85:i32 = shl %50, 1:i32
%86:i64 = sext %85 (hasExternalUses)
%87:i64 = mulnsw %47, %86
%88:i64 = add %84, %87
%89:i64 = mulnsw %58, %54
%90:i64 = add %88, %89
%91:i32 = shl %5, 1:i32
%92:i64 = sext %91 (hasExternalUses)
%93:i64 = mulnsw %61, %92
%94:i64 = add %90, %93
%95:i64 = add 33554432:i64, %94
%96:i64 = ashr %95, 26:i64
%97:i64 = add %63, %96
%98:i64 = add 16777216:i64, %97 (hasExternalUses)
%99:i64 = and 4261412864:i64, %98
%100:i64 = sub %97, %99
%101:i64 = and 18446744073642442752:i64, %95
%102:i64 = sub %94, %101
%103:i64 = mulnsw %18, %3
%104:i64 = mulnsw %12, %8
%105:i64 = add %103, %104
%106:i64 = mulnsw %24, %14
%107:i64 = add %105, %106
%108:i64 = mulnsw %20, %33
%109:i64 = add %107, %108
%110:i32 = mul 19:i32, %25
%111:i64 = sext %110
%112:i64 = mulnsw %37, %111
%113:i64 = add %109, %112
%114:i64 = mulnsw %44, %78
%115:i64 = add %113, %114
%116:i64 = mulnsw %51, %40
%117:i64 = add %115, %116
%118:i64 = mulnsw %58, %47
%119:i64 = add %117, %118
%120:i64 = mulnsw %6, %54
%121:i64 = add %119, %120
%122:i64 = mulnsw %1, %61
%123:i64 = add %121, %122
%124:i64 = mulnsw %18, %8
%125:i64 = mulnsw %3, %72
%126:i64 = add %124, %125
%127:i64 = mulnsw %14, %33
%128:i64 = add %126, %127
%129:i32 = mul 19:i32, %19
%130:i64 = sext %129
%131:i64 = mulnsw %130, %80
%132:i64 = add %128, %131
%133:i64 = mulnsw %44, %111
%134:i64 = add %132, %133
%135:i64 = mulnsw %78, %86
%136:i64 = add %134, %135
%137:i64 = mulnsw %58, %40
%138:i64 = add %136, %137
%139:i64 = mulnsw %47, %92
%140:i64 = add %138, %139
%141:i64 = mulnsw %1, %54
%142:i64 = add %140, %141
%143:i64 = mulnsw %61, %66
%144:i64 = add %142, %143
%145:i64 = mulnsw %24, %8
%146:i64 = mulnsw %3, %33
%147:i64 = add %145, %146
%148:i32 = mul 19:i32, %13
%149:i64 = sext %148
%150:i64 = mulnsw %37, %149
%151:i64 = add %147, %150
%152:i64 = mulnsw %44, %130
%153:i64 = add %151, %152
%154:i64 = mulnsw %51, %111
%155:i64 = add %153, %154
%156:i64 = mulnsw %58, %78
%157:i64 = add %155, %156
%158:i64 = mulnsw %6, %40
%159:i64 = add %157, %158
%160:i64 = mulnsw %1, %47
%161:i64 = add %159, %160
%162:i64 = mulnsw %12, %54
%163:i64 = add %161, %162
%164:i64 = mulnsw %18, %61
%165:i64 = add %163, %164
%166:i64 = mulnsw %8, %33
%167:i32 = mul 19:i32, %2
%168:i64 = sext %167
%169:i64 = mulnsw %168, %80
%170:i64 = add %166, %169
%171:i64 = mulnsw %44, %149
%172:i64 = add %170, %171
%173:i64 = mulnsw %130, %86
%174:i64 = add %172, %173
%175:i64 = mulnsw %58, %111
%176:i64 = add %174, %175
%177:i64 = mulnsw %78, %92
%178:i64 = add %176, %177
%179:i64 = mulnsw %1, %40
%180:i64 = add %178, %179
%181:i64 = mulnsw %47, %66
%182:i64 = add %180, %181
%183:i64 = mulnsw %18, %54
%184:i64 = add %182, %183
%185:i64 = mulnsw %61, %72
%186:i64 = add %184, %185 (hasExternalUses)
%187:i64 = add 33554432:i64, %186 (hasExternalUses)
%188:i64 = ashr %187, 26:i64
%189:i64 = add %165, %188 (hasExternalUses)
%190:i64 = add 16777216:i64, %189 (hasExternalUses)
%191:i64 = ashr %190, 25:i64
%192:i64 = add %144, %191 (hasExternalUses)
%193:i64 = add 33554432:i64, %192 (hasExternalUses)
%194:i64 = ashr %193, 26:i64
%195:i64 = add %123, %194 (hasExternalUses)
%196:i64 = add 16777216:i64, %195 (hasExternalUses)
%197:i64 = ashr %196, 25:i64
%198:i64 = add %102, %197 (hasExternalUses)
%199:i64 = add 33554432:i64, %198 (hasExternalUses)
%200:i64 = lshr %199, 26:i64
%201:i64 = add %100, %200
%202:i32 = trunc %201
infer %202


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %26, %28
%30:i64 = add %24, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = shl %33, 1:i32
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i32 = add 1:i32, %40 (hasExternalUses)
%42:i64 = sext %41 (hasExternalUses)
%43:i64 = mulnsw %39, %42
%44:i64 = add %37, %43
%45:i32 = var
%46:i32 = mul 19:i32, %45
%47:i64 = sext %46 (hasExternalUses)
%48:i32 = var
%49:i32 = shl %48, 1:i32
%50:i64 = sext %49 (hasExternalUses)
%51:i64 = mulnsw %47, %50
%52:i64 = add %44, %51
%53:i32 = var
%54:i64 = sext %53 (hasExternalUses)
%55:i32 = var
%56:i32 = mul 19:i32, %55
%57:i64 = sext %56 (hasExternalUses)
%58:i64 = mulnsw %54, %57
%59:i64 = add %52, %58
%60:i32 = var
%61:i32 = mul 19:i32, %60
%62:i64 = sext %61 (hasExternalUses)
%63:i32 = var
%64:i32 = shl %63, 1:i32
%65:i64 = sext %64 (hasExternalUses)
%66:i64 = mulnsw %62, %65
%67:i64 = add %59, %66
%68:i64 = mulnsw %13, %6
%69:i64 = sext %7 (hasExternalUses)
%70:i64 = mulnsw %69, %3
%71:i64 = add %68, %70
%72:i64 = sext %20 (hasExternalUses)
%73:i64 = mulnsw %72, %15
%74:i64 = add %71, %73
%75:i64 = mulnsw %26, %19
%76:i64 = add %74, %75
%77:i64 = sext %33 (hasExternalUses)
%78:i64 = mulnsw %77, %28
%79:i64 = add %76, %78
%80:i64 = mulnsw %32, %42
%81:i64 = add %79, %80
%82:i64 = sext %48 (hasExternalUses)
%83:i32 = mul 19:i32, %38
%84:i64 = sext %83 (hasExternalUses)
%85:i64 = mulnsw %82, %84
%86:i64 = add %81, %85
%87:i64 = mulnsw %54, %47
%88:i64 = add %86, %87
%89:i64 = sext %63 (hasExternalUses)
%90:i64 = mulnsw %89, %57
%91:i64 = add %88, %90
%92:i64 = mulnsw %1, %62
%93:i64 = add %91, %92
%94:i64 = mulnsw %13, %3
%95:i64 = mulnsw %6, %22
%96:i64 = add %94, %95
%97:i64 = mulnsw %26, %15
%98:i64 = add %96, %97
%99:i64 = mulnsw %19, %35
%100:i64 = add %98, %99
%101:i64 = mulnsw %28, %42
%102:i64 = add %100, %101
%103:i32 = mul 19:i32, %31
%104:i64 = sext %103 (hasExternalUses)
%105:i64 = mulnsw %104, %50
%106:i64 = add %102, %105
%107:i64 = mulnsw %54, %84
%108:i64 = add %106, %107
%109:i64 = mulnsw %47, %65
%110:i64 = add %108, %109
%111:i64 = mulnsw %1, %57
%112:i64 = add %110, %111
%113:i64 = mulnsw %62, %9
%114:i64 = add %112, %113 (hasExternalUses)
%115:i64 = add 33554432:i64, %114 (hasExternalUses)
%116:i64 = ashr %115, 26:i64
%117:i64 = add %93, %116 (hasExternalUses)
%118:i64 = add 16777216:i64, %117 (hasExternalUses)
%119:i64 = ashr %118, 25:i64
%120:i64 = add %67, %119
%121:i64 = add 33554432:i64, %120 (hasExternalUses)
%122:i64 = and 4227858432:i64, %121
%123:i64 = sub %120, %122
%124:i32 = trunc %123
infer %124


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i64 = mulnsw %30, %32
%34:i64 = add %28, %33
%35:i32 = var
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i64 = sext %37 (hasExternalUses)
%39:i64 = mulnsw %36, %38
%40:i64 = add %34, %39
%41:i32 = var
%42:i64 = sext %41 (hasExternalUses)
%43:i32 = var
%44:i32 = add 1:i32, %43 (hasExternalUses)
%45:i64 = sext %44 (hasExternalUses)
%46:i64 = mulnsw %42, %45
%47:i64 = add %40, %46
%48:i32 = var
%49:i64 = sext %48 (hasExternalUses)
%50:i32 = var
%51:i32 = mul 19:i32, %50
%52:i64 = sext %51 (hasExternalUses)
%53:i64 = mulnsw %49, %52
%54:i64 = add %47, %53
%55:i32 = var
%56:i64 = sext %55 (hasExternalUses)
%57:i32 = var
%58:i32 = mul 19:i32, %57
%59:i64 = sext %58 (hasExternalUses)
%60:i64 = mulnsw %56, %59
%61:i64 = add %54, %60
%62:i64 = mulnsw %1, %8
%63:i32 = shl %11, 1:i32
%64:i64 = sext %63 (hasExternalUses)
%65:i64 = mulnsw %3, %64
%66:i64 = add %62, %65
%67:i64 = mulnsw %18, %14
%68:i64 = add %66, %67
%69:i32 = shl %23, 1:i32
%70:i64 = sext %69 (hasExternalUses)
%71:i64 = mulnsw %20, %70
%72:i64 = add %68, %71
%73:i64 = mulnsw %30, %26
%74:i64 = add %72, %73
%75:i32 = shl %35, 1:i32
%76:i64 = sext %75 (hasExternalUses)
%77:i64 = mulnsw %32, %76
%78:i64 = add %74, %77
%79:i64 = mulnsw %38, %45
%80:i64 = add %78, %79
%81:i32 = mul 19:i32, %41
%82:i64 = sext %81 (hasExternalUses)
%83:i32 = shl %48, 1:i32
%84:i64 = sext %83 (hasExternalUses)
%85:i64 = mulnsw %82, %84
%86:i64 = add %80, %85
%87:i64 = mulnsw %56, %52
%88:i64 = add %86, %87
%89:i32 = shl %5, 1:i32
%90:i64 = sext %89 (hasExternalUses)
%91:i64 = mulnsw %59, %90
%92:i64 = add %88, %91
%93:i64 = mulnsw %18, %3
%94:i64 = mulnsw %12, %8
%95:i64 = add %93, %94
%96:i64 = mulnsw %24, %14
%97:i64 = add %95, %96
%98:i64 = mulnsw %30, %20
%99:i64 = add %97, %98
%100:i64 = mulnsw %36, %26
%101:i64 = add %99, %100
%102:i64 = mulnsw %32, %45
%103:i64 = add %101, %102
%104:i32 = mul 19:i32, %37
%105:i64 = sext %104 (hasExternalUses)
%106:i64 = mulnsw %49, %105
%107:i64 = add %103, %106
%108:i64 = mulnsw %56, %82
%109:i64 = add %107, %108
%110:i64 = mulnsw %6, %52
%111:i64 = add %109, %110
%112:i64 = mulnsw %1, %59
%113:i64 = add %111, %112
%114:i64 = mulnsw %18, %8
%115:i64 = mulnsw %3, %70
%116:i64 = add %114, %115
%117:i64 = mulnsw %30, %14
%118:i64 = add %116, %117
%119:i64 = mulnsw %20, %76
%120:i64 = add %118, %119
%121:i64 = mulnsw %26, %45
%122:i64 = add %120, %121
%123:i32 = mul 19:i32, %31
%124:i64 = sext %123 (hasExternalUses)
%125:i64 = mulnsw %124, %84
%126:i64 = add %122, %125
%127:i64 = mulnsw %56, %105
%128:i64 = add %126, %127
%129:i64 = mulnsw %82, %90
%130:i64 = add %128, %129
%131:i64 = mulnsw %1, %52
%132:i64 = add %130, %131
%133:i64 = mulnsw %59, %64
%134:i64 = add %132, %133 (hasExternalUses)
%135:i64 = add 33554432:i64, %134 (hasExternalUses)
%136:i64 = ashr %135, 26:i64
%137:i64 = add %113, %136 (hasExternalUses)
%138:i64 = add 16777216:i64, %137 (hasExternalUses)
%139:i64 = ashr %138, 25:i64
%140:i64 = add %92, %139 (hasExternalUses)
%141:i64 = add 33554432:i64, %140 (hasExternalUses)
%142:i64 = ashr %141, 26:i64
%143:i64 = add %61, %142
%144:i64 = add 16777216:i64, %143 (hasExternalUses)
%145:i64 = and 4261412864:i64, %144
%146:i64 = sub %143, %145
%147:i32 = trunc %146
infer %147


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i32 = shl %7, 1:i32
%9:i64 = sext %8 (hasExternalUses)
%10:i64 = mulnsw %6, %9
%11:i64 = add %4, %10
%12:i32 = var
%13:i64 = sext %12 (hasExternalUses)
%14:i32 = var
%15:i64 = sext %14 (hasExternalUses)
%16:i64 = mulnsw %13, %15
%17:i64 = add %11, %16
%18:i32 = var
%19:i64 = sext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = shl %20, 1:i32
%22:i64 = sext %21 (hasExternalUses)
%23:i64 = mulnsw %19, %22
%24:i64 = add %17, %23
%25:i32 = var
%26:i64 = sext %25 (hasExternalUses)
%27:i32 = var
%28:i64 = sext %27 (hasExternalUses)
%29:i64 = mulnsw %26, %28
%30:i64 = add %24, %29
%31:i32 = var
%32:i64 = sext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = shl %33, 1:i32
%35:i64 = sext %34 (hasExternalUses)
%36:i64 = mulnsw %32, %35
%37:i64 = add %30, %36
%38:i32 = var
%39:i64 = sext %38 (hasExternalUses)
%40:i32 = var
%41:i64 = sext %40 (hasExternalUses)
%42:i64 = mulnsw %39, %41
%43:i64 = add %37, %42
%44:i32 = var
%45:i64 = sext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = shl %46, 1:i32
%48:i64 = sext %47 (hasExternalUses)
%49:i64 = mulnsw %45, %48
%50:i64 = add %43, %49
%51:i32 = var
%52:i64 = sext %51 (hasExternalUses)
%53:i32 = var
%54:i32 = add 1:i32, %53 (hasExternalUses)
%55:i64 = sext %54 (hasExternalUses)
%56:i64 = mulnsw %52, %55
%57:i64 = add %50, %56
%58:i32 = var
%59:i32 = mul 19:i32, %58
%60:i64 = sext %59 (hasExternalUses)
%61:i32 = var
%62:i32 = shl %61, 1:i32
%63:i64 = sext %62 (hasExternalUses)
%64:i64 = mulnsw %60, %63
%65:i64 = add %57, %64
%66:i64 = mulnsw %13, %6
%67:i64 = sext %7 (hasExternalUses)
%68:i64 = mulnsw %67, %3
%69:i64 = add %66, %68
%70:i64 = sext %20 (hasExternalUses)
%71:i64 = mulnsw %70, %15
%72:i64 = add %69, %71
%73:i64 = mulnsw %26, %19
%74:i64 = add %72, %73
%75:i64 = sext %33 (hasExternalUses)
%76:i64 = mulnsw %75, %28
%77:i64 = add %74, %76
%78:i64 = mulnsw %39, %32
%79:i64 = add %77, %78
%80:i64 = sext %46 (hasExternalUses)
%81:i64 = mulnsw %80, %41
%82:i64 = add %79, %81
%83:i64 = mulnsw %45, %55
%84:i64 = add %82, %83
%85:i64 = sext %61 (hasExternalUses)
%86:i32 = mul 19:i32, %51
%87:i64 = sext %86 (hasExternalUses)
%88:i64 = mulnsw %85, %87
%89:i64 = add %84, %88
%90:i64 = mulnsw %1, %60
%91:i64 = add %89, %90
%92:i64 = mulnsw %13, %3
%93:i64 = mulnsw %6, %22
%94:i64 = add %92, %93
%95:i64 = mulnsw %26, %15
%96:i64 = add %94, %95
%97:i64 = mulnsw %19, %35
%98:i64 = add %96, %97
%99:i64 = mulnsw %39, %28
%100:i64 = add %98, %99
%101:i64 = mulnsw %32, %48
%102:i64 = add %100, %101
%103:i64 = mulnsw %41, %55
%104:i64 = add %102, %103
%105:i32 = mul 19:i32, %44
%106:i64 = sext %105 (hasExternalUses)
%107:i64 = mulnsw %106, %63
%108:i64 = add %104, %107
%109:i64 = mulnsw %1, %87
%110:i64 = add %108, %109
%111:i64 = mulnsw %60, %9
%112:i64 = add %110, %111
%113:i64 = mulnsw %26, %6
%114:i64 = mulnsw %70, %3
%115:i64 = add %113, %114
%116:i64 = mulnsw %75, %15
%117:i64 = add %115, %116
%118:i64 = mulnsw %39, %19
%119:i64 = add %117, %118
%120:i64 = mulnsw %80, %28
%121:i64 = add %119, %120
%122:i64 = mulnsw %32, %55
%123:i64 = add %121, %122
%124:i32 = mul 19:i32, %40
%125:i64 = sext %124 (hasExternalUses)
%126:i64 = mulnsw %85, %125
%127:i64 = add %123, %126
%128:i64 = mulnsw %1, %106
%129:i64 = add %127, %128
%130:i64 = mulnsw %67, %87
%131:i64 = add %129, %130
%132:i64 = mulnsw %13, %60
%133:i64 = add %131, %132
%134:i64 = mulnsw %26, %3
%135:i64 = mulnsw %6, %35
%136:i64 = add %134, %135
%137:i64 = mulnsw %39, %15
%138:i64 = add %136, %137
%139:i64 = mulnsw %19, %48
%140:i64 = add %138, %139
%141:i64 = mulnsw %28, %55
%142:i64 = add %140, %141
%143:i32 = mul 19:i32, %31
%144:i64 = sext %143 (hasExternalUses)
%145:i64 = mulnsw %144, %63
%146:i64 = add %142, %145
%147:i64 = mulnsw %1, %125
%148:i64 = add %146, %147
%149:i64 = mulnsw %106, %9
%150:i64 = add %148, %149
%151:i64 = mulnsw %13, %87
%152:i64 = add %150, %151
%153:i64 = mulnsw %60, %22
%154:i64 = add %152, %153 (hasExternalUses)
%155:i64 = add 33554432:i64, %154 (hasExternalUses)
%156:i64 = ashr %155, 26:i64
%157:i64 = add %133, %156 (hasExternalUses)
%158:i64 = add 16777216:i64, %157 (hasExternalUses)
%159:i64 = ashr %158, 25:i64
%160:i64 = add %112, %159 (hasExternalUses)
%161:i64 = add 33554432:i64, %160 (hasExternalUses)
%162:i64 = ashr %161, 26:i64
%163:i64 = add %91, %162 (hasExternalUses)
%164:i64 = add 16777216:i64, %163 (hasExternalUses)
%165:i64 = ashr %164, 25:i64
%166:i64 = add %65, %165
%167:i64 = add 33554432:i64, %166 (hasExternalUses)
%168:i64 = and 4227858432:i64, %167
%169:i64 = sub %166, %168
%170:i32 = trunc %169
infer %170


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0 (hasExternalUses)
%2:i32 = var
%3:i64 = sext %2 (hasExternalUses)
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5 (hasExternalUses)
%7:i32 = var
%8:i64 = sext %7 (hasExternalUses)
%9:i64 = mulnsw %6, %8
%10:i64 = add %4, %9
%11:i32 = var
%12:i64 = sext %11 (hasExternalUses)
%13:i32 = var
%14:i64 = sext %13 (hasExternalUses)
%15:i64 = mulnsw %12, %14
%16:i64 = add %10, %15
%17:i32 = var
%18:i64 = sext %17 (hasExternalUses)
%19:i32 = var
%20:i64 = sext %19 (hasExternalUses)
%21:i64 = mulnsw %18, %20
%22:i64 = add %16, %21
%23:i32 = var
%24:i64 = sext %23 (hasExternalUses)
%25:i32 = var
%26:i64 = sext %25
%27:i64 = mulnsw %24, %26
%28:i64 = add %22, %27
%29:i32 = var
%30:i64 = sext %29 (hasExternalUses)
%31:i32 = var
%32:i64 = sext %31
%33:i64 = mulnsw %30, %32
%34:i64 = add %28, %33
%35:i32 = var
%36:i64 = sext %35 (hasExternalUses)
%37:i32 = var
%38:i64 = sext %37
%39:i64 = mulnsw %36, %38
%40:i64 = add %34, %39
%41:i32 = var
%42:i64 = sext %41 (hasExternalUses)
%43:i32 = var
%44:i64 = sext %43
%45:i64 = mulnsw %42, %44
%46:i64 = add %40, %45
%47:i32 = var
%48:i64 = sext %47 (hasExternalUses)
%49:i32 = var
%50:i64 = sext %49
%51:i64 = mulnsw %48, %50
%52:i64 = add %46, %51
%53:i32 = var
%54:i64 = sext %53
%55:i32 = var
%56:i32 = add 1:i32, %55 (hasExternalUses)
%57:i64 = sext %56 (hasExternalUses)
%58:i64 = mulnsw %54, %57
%59:i64 = add %52, %58
%60:i64 = mulnsw %1, %8
%61:i32 = shl %11, 1:i32
%62:i64 = sext %61 (hasExternalUses)
%63:i64 = mulnsw %3, %62
%64:i64 = add %60, %63
%65:i64 = mulnsw %18, %14
%66:i64 = add %64, %65
%67:i32 = shl %23, 1:i32
%68:i64 = sext %67 (hasExternalUses)
%69:i64 = mulnsw %20, %68
%70:i64 = add %66, %69
%71:i64 = mulnsw %30, %26
%72:i64 = add %70, %71
%73:i32 = shl %35, 1:i32
%74:i64 = sext %73 (hasExternalUses)
%75:i64 = mulnsw %32, %74
%76:i64 = add %72, %75
%77:i64 = mulnsw %42, %38
%78:i64 = add %76, %77
%79:i32 = shl %47, 1:i32
%80:i64 = sext %79 (hasExternalUses)
%81:i64 = mulnsw %44, %80
%82:i64 = add %78, %81
%83:i64 = mulnsw %50, %57
%84:i64 = add %82, %83
%85:i32 = mul 19:i32, %53
%86:i64 = sext %85 (hasExternalUses)
%87:i32 = shl %5, 1:i32
%88:i64 = sext %87 (hasExternalUses)
%89:i64 = mulnsw %86, %88
%90:i64 = add %84, %89
%91:i64 = mulnsw %18, %3
%92:i64 = mulnsw %12, %8
%93:i64 = add %91, %92
%94:i64 = mulnsw %24, %14
%95:i64 = add %93, %94
%96:i64 = mulnsw %30, %20
%97:i64 = add %95, %96
%98:i64 = mulnsw %36, %26
%99:i64 = add %97, %98
%100:i64 = mulnsw %42, %32
%101:i64 = add %99, %100
%102:i64 = mulnsw %48, %38
%103:i64 = add %101, %102
%104:i64 = mulnsw %44, %57
%105:i64 = add %103, %104
%106:i32 = mul 19:i32, %49
%107:i64 = sext %106 (hasExternalUses)
%108:i64 = mulnsw %6, %107
%109:i64 = add %105, %108
%110:i64 = mulnsw %1, %86
%111:i64 = add %109, %110
%112:i64 = mulnsw %18, %8
%113:i64 = mulnsw %3, %68
%114:i64 = add %112, %113
%115:i64 = mulnsw %30, %14
%116:i64 = add %114, %115
%117:i64 = mulnsw %20, %74
%118:i64 = add %116, %117
%119:i64 = mulnsw %42, %26
%120:i64 = add %118, %119
%121:i64 = mulnsw %32, %80
%122:i64 = add %120, %121
%123:i64 = mulnsw %38, %57
%124:i64 = add %122, %123
%125:i32 = mul 19:i32, %43
%126:i64 = sext %125 (hasExternalUses)
%127:i64 = mulnsw %126, %88
%128:i64 = add %124, %127
%129:i64 = mulnsw %1, %107
%130:i64 = add %128, %129
%131:i64 = mulnsw %86, %62
%132:i64 = add %130, %131
%133:i64 = mulnsw %30, %3
%134:i64 = mulnsw %24, %8
%135:i64 = add %133, %134
%136:i64 = mulnsw %36, %14
%137:i64 = add %135, %136
%138:i64 = mulnsw %42, %20
%139:i64 = add %137, %138
%140:i64 = mulnsw %48, %26
%141:i64 = add %139, %140
%142:i64 = mulnsw %32, %57
%143:i64 = add %141, %142
%144:i32 = mul 19:i32, %37
%145:i64 = sext %144 (hasExternalUses)
%146:i64 = mulnsw %6, %145
%147:i64 = add %143, %146
%148:i64 = mulnsw %1, %126
%149:i64 = add %147, %148
%150:i64 = mulnsw %12, %107
%151:i64 = add %149, %150
%152:i64 = mulnsw %18, %86
%153:i64 = add %151, %152
%154:i64 = mulnsw %30, %8
%155:i64 = mulnsw %3, %74
%156:i64 = add %154, %155
%157:i64 = mulnsw %42, %14
%158:i64 = add %156, %157
%159:i64 = mulnsw %20, %80
%160:i64 = add %158, %159
%161:i64 = mulnsw %26, %57
%162:i64 = add %160, %161
%163:i32 = mul 19:i32, %31
%164:i64 = sext %163 (hasExternalUses)
%165:i64 = mulnsw %164, %88
%166:i64 = add %162, %165
%167:i64 = mulnsw %1, %145
%168:i64 = add %166, %167
%169:i64 = mulnsw %126, %62
%170:i64 = add %168, %169
%171:i64 = mulnsw %18, %107
%172:i64 = add %170, %171
%173:i64 = mulnsw %86, %68
%174:i64 = add %172, %173 (hasExternalUses)
%175:i64 = add 33554432:i64, %174 (hasExternalUses)
%176:i64 = ashr %175, 26:i64
%177:i64 = add %153, %176 (hasExternalUses)
%178:i64 = add 16777216:i64, %177 (hasExternalUses)
%179:i64 = ashr %178, 25:i64
%180:i64 = add %132, %179 (hasExternalUses)
%181:i64 = add 33554432:i64, %180 (hasExternalUses)
%182:i64 = ashr %181, 26:i64
%183:i64 = add %111, %182 (hasExternalUses)
%184:i64 = add 16777216:i64, %183 (hasExternalUses)
%185:i64 = ashr %184, 25:i64
%186:i64 = add %90, %185 (hasExternalUses)
%187:i64 = add 33554432:i64, %186 (hasExternalUses)
%188:i64 = ashr %187, 26:i64
%189:i64 = add %59, %188
%190:i64 = add 16777216:i64, %189 (hasExternalUses)
%191:i64 = and 4261412864:i64, %190
%192:i64 = sub %189, %191
%193:i32 = trunc %192
infer %193


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0 = block 4
%1:i32 = phi %0, 0:i32, 4294967295:i32, 4294967295:i32, 4294967295:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for crypto_sign_ed25519_pk_to_curve25519()

; entering Souper's runOnFunction() for crypto_sign_ed25519_sk_to_curve25519()

; ModuleID = './keypair.c.bc'
source_filename = "crypto_sign/ed25519/ref10/keypair.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.ge25519_p3 = type { [10 x i32], [10 x i32], [10 x i32], [10 x i32] }

; Function Attrs: nounwind
define i32 @crypto_sign_ed25519_seed_keypair(i8* nonnull %0, i8* nonnull %1, i8* nonnull %2) local_unnamed_addr #0 {
  %4 = alloca %struct.ge25519_p3, align 4
  %5 = bitcast %struct.ge25519_p3* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %5) #3
  %6 = tail call i32 @crypto_hash_sha512(i8* nonnull %1, i8* nonnull %2, i64 32) #3
  %7 = load i8, i8* %1, align 1
  %8 = and i8 %7, -8
  store i8 %8, i8* %1, align 1
  %9 = getelementptr i8, i8* %1, i32 31
  %10 = load i8, i8* %9, align 1
  %11 = and i8 %10, 63
  %12 = or i8 %11, 64
  store i8 %12, i8* %9, align 1
  call void @ge25519_scalarmult_base(%struct.ge25519_p3* nonnull %4, i8* nonnull %1) #3
  call void @ge25519_p3_tobytes(i8* nonnull %0, %struct.ge25519_p3* nonnull %4) #3
  call void @llvm.memmove.p0i8.p0i8.i32(i8* nonnull align 1 dereferenceable(32) %1, i8* nonnull align 1 dereferenceable(32) %2, i32 32, i1 false)
  %13 = getelementptr i8, i8* %1, i32 32
  call void @llvm.memmove.p0i8.p0i8.i32(i8* nonnull align 1 dereferenceable(32) %13, i8* nonnull align 1 dereferenceable(32) %0, i32 32, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %5) #3
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #1

declare i32 @crypto_hash_sha512(i8* %0, i8* %1, i64 %2) local_unnamed_addr #2

declare void @ge25519_scalarmult_base(%struct.ge25519_p3* %0, i8* %1) local_unnamed_addr #2

declare void @ge25519_p3_tobytes(i8* %0, %struct.ge25519_p3* %1) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i32(i8* nocapture %0, i8* nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #1

; Function Attrs: nounwind
define i32 @crypto_sign_ed25519_keypair(i8* nonnull %0, i8* nonnull %1) local_unnamed_addr #0 {
  %3 = alloca %struct.ge25519_p3, align 4
  %4 = alloca [32 x i8], align 16
  %5 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %5) #3
  call void @randombytes_buf(i8* nonnull %5, i32 32) #3
  %6 = bitcast %struct.ge25519_p3* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %6) #3
  %7 = call i32 @crypto_hash_sha512(i8* nonnull %1, i8* nonnull %5, i64 32) #3
  %8 = load i8, i8* %1, align 1
  %9 = and i8 %8, -8
  store i8 %9, i8* %1, align 1
  %10 = getelementptr i8, i8* %1, i32 31
  %11 = load i8, i8* %10, align 1
  %12 = and i8 %11, 63
  %13 = or i8 %12, 64
  store i8 %13, i8* %10, align 1
  call void @ge25519_scalarmult_base(%struct.ge25519_p3* nonnull %3, i8* nonnull %1) #3
  call void @ge25519_p3_tobytes(i8* nonnull %0, %struct.ge25519_p3* nonnull %3) #3
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 1 dereferenceable(32) %1, i8* nonnull align 16 dereferenceable(32) %5, i32 32, i1 false) #3
  %14 = getelementptr i8, i8* %1, i32 32
  call void @llvm.memmove.p0i8.p0i8.i32(i8* nonnull align 1 dereferenceable(32) %14, i8* nonnull align 1 dereferenceable(32) %0, i32 32, i1 false) #3
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %6) #3
  call void @sodium_memzero(i8* nonnull %5, i32 32) #3
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %5) #3
  ret i32 0
}

declare void @randombytes_buf(i8* %0, i32 %1) local_unnamed_addr #2

declare void @sodium_memzero(i8* %0, i32 %1) local_unnamed_addr #2

; Function Attrs: nounwind
define i32 @crypto_sign_ed25519_pk_to_curve25519(i8* nonnull %0, i8* nonnull %1) local_unnamed_addr #0 {
  %3 = alloca %struct.ge25519_p3, align 4
  %4 = alloca [10 x i32], align 16
  %5 = alloca [10 x i32], align 16
  %6 = bitcast %struct.ge25519_p3* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %6) #3
  %7 = bitcast [10 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %7) #3
  %8 = bitcast [10 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %8) #3
  %9 = tail call i32 @ge25519_has_small_order(i8* nonnull %1) #3
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %388

11:                                               ; preds = %2
  %12 = call i32 @ge25519_frombytes_negate_vartime(%struct.ge25519_p3* nonnull %3, i8* nonnull %1) #3
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %388

14:                                               ; preds = %11
  %15 = call i32 @ge25519_is_on_main_subgroup(%struct.ge25519_p3* nonnull %3) #3
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %388, label %17

17:                                               ; preds = %14
  %18 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 0
  %19 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 1
  %20 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %3, i32 0, i32 1, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = sub i32 1, %21
  %23 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %3, i32 0, i32 1, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = sub i32 0, %24
  %26 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 2
  %27 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %3, i32 0, i32 1, i32 2
  %28 = load i32, i32* %27, align 4
  %29 = sub i32 0, %28
  %30 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 3
  %31 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %3, i32 0, i32 1, i32 3
  %32 = load i32, i32* %31, align 4
  %33 = sub i32 0, %32
  %34 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 4
  %35 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %3, i32 0, i32 1, i32 4
  %36 = load i32, i32* %35, align 4
  %37 = sub i32 0, %36
  %38 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 5
  %39 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %3, i32 0, i32 1, i32 5
  %40 = load i32, i32* %39, align 4
  %41 = sub i32 0, %40
  %42 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 6
  %43 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %3, i32 0, i32 1, i32 6
  %44 = load i32, i32* %43, align 4
  %45 = sub i32 0, %44
  %46 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 7
  %47 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %3, i32 0, i32 1, i32 7
  %48 = load i32, i32* %47, align 4
  %49 = sub i32 0, %48
  %50 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 8
  %51 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %3, i32 0, i32 1, i32 8
  %52 = load i32, i32* %51, align 4
  %53 = sub i32 0, %52
  %54 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i32 0, i32 9
  %55 = getelementptr inbounds %struct.ge25519_p3, %struct.ge25519_p3* %3, i32 0, i32 1, i32 9
  %56 = load i32, i32* %55, align 4
  %57 = sub i32 0, %56
  store i32 %22, i32* %18, align 16
  store i32 %25, i32* %19, align 4
  store i32 %29, i32* %26, align 8
  store i32 %33, i32* %30, align 4
  store i32 %37, i32* %34, align 16
  store i32 %41, i32* %38, align 4
  store i32 %45, i32* %42, align 8
  store i32 %49, i32* %46, align 4
  store i32 %53, i32* %50, align 16
  store i32 %57, i32* %54, align 4
  %58 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 0
  %59 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 1
  %60 = add i32 %21, 1
  %61 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 2
  %62 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 3
  %63 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 4
  %64 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 5
  %65 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 6
  %66 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 7
  %67 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 8
  %68 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i32 0, i32 9
  store i32 %60, i32* %58, align 16
  store i32 %24, i32* %59, align 4
  store i32 %28, i32* %61, align 8
  store i32 %32, i32* %62, align 4
  store i32 %36, i32* %63, align 16
  store i32 %40, i32* %64, align 4
  store i32 %44, i32* %65, align 8
  store i32 %48, i32* %66, align 4
  store i32 %52, i32* %67, align 16
  store i32 %56, i32* %68, align 4
  call void @fe25519_invert(i32* nonnull %18, i32* nonnull %18) #3
  %69 = load i32, i32* %18, align 16
  %70 = load i32, i32* %19, align 4
  %71 = load i32, i32* %26, align 8
  %72 = load i32, i32* %30, align 4
  %73 = load i32, i32* %34, align 16
  %74 = load i32, i32* %38, align 4
  %75 = load i32, i32* %42, align 8
  %76 = load i32, i32* %46, align 4
  %77 = load i32, i32* %50, align 16
  %78 = load i32, i32* %54, align 4
  %79 = mul i32 %70, 19
  %80 = mul i32 %71, 19
  %81 = mul i32 %72, 19
  %82 = mul i32 %73, 19
  %83 = mul i32 %74, 19
  %84 = mul i32 %75, 19
  %85 = mul i32 %76, 19
  %86 = mul i32 %77, 19
  %87 = mul i32 %78, 19
  %88 = shl i32 %24, 1
  %89 = shl i32 %32, 1
  %90 = shl i32 %40, 1
  %91 = shl i32 %48, 1
  %92 = shl i32 %56, 1
  %93 = sext i32 %60 to i64
  %94 = sext i32 %69 to i64
  %95 = mul nsw i64 %94, %93
  %96 = sext i32 %70 to i64
  %97 = mul nsw i64 %96, %93
  %98 = sext i32 %71 to i64
  %99 = mul nsw i64 %98, %93
  %100 = sext i32 %72 to i64
  %101 = mul nsw i64 %100, %93
  %102 = sext i32 %73 to i64
  %103 = mul nsw i64 %102, %93
  %104 = sext i32 %74 to i64
  %105 = mul nsw i64 %104, %93
  %106 = sext i32 %75 to i64
  %107 = mul nsw i64 %106, %93
  %108 = sext i32 %76 to i64
  %109 = mul nsw i64 %108, %93
  %110 = sext i32 %77 to i64
  %111 = mul nsw i64 %110, %93
  %112 = sext i32 %78 to i64
  %113 = mul nsw i64 %112, %93
  %114 = sext i32 %24 to i64
  %115 = mul nsw i64 %94, %114
  %116 = sext i32 %88 to i64
  %117 = mul nsw i64 %96, %116
  %118 = mul nsw i64 %98, %114
  %119 = mul nsw i64 %100, %116
  %120 = mul nsw i64 %102, %114
  %121 = mul nsw i64 %104, %116
  %122 = mul nsw i64 %106, %114
  %123 = mul nsw i64 %108, %116
  %124 = mul nsw i64 %110, %114
  %125 = sext i32 %87 to i64
  %126 = mul nsw i64 %125, %116
  %127 = sext i32 %28 to i64
  %128 = mul nsw i64 %94, %127
  %129 = mul nsw i64 %96, %127
  %130 = mul nsw i64 %98, %127
  %131 = mul nsw i64 %100, %127
  %132 = mul nsw i64 %102, %127
  %133 = mul nsw i64 %104, %127
  %134 = mul nsw i64 %106, %127
  %135 = mul nsw i64 %108, %127
  %136 = sext i32 %86 to i64
  %137 = mul nsw i64 %136, %127
  %138 = mul nsw i64 %125, %127
  %139 = sext i32 %32 to i64
  %140 = mul nsw i64 %94, %139
  %141 = sext i32 %89 to i64
  %142 = mul nsw i64 %96, %141
  %143 = mul nsw i64 %98, %139
  %144 = mul nsw i64 %100, %141
  %145 = mul nsw i64 %102, %139
  %146 = mul nsw i64 %104, %141
  %147 = mul nsw i64 %106, %139
  %148 = sext i32 %85 to i64
  %149 = mul nsw i64 %148, %141
  %150 = mul nsw i64 %136, %139
  %151 = mul nsw i64 %125, %141
  %152 = sext i32 %36 to i64
  %153 = mul nsw i64 %94, %152
  %154 = mul nsw i64 %96, %152
  %155 = mul nsw i64 %98, %152
  %156 = mul nsw i64 %100, %152
  %157 = mul nsw i64 %102, %152
  %158 = mul nsw i64 %104, %152
  %159 = sext i32 %84 to i64
  %160 = mul nsw i64 %159, %152
  %161 = mul nsw i64 %148, %152
  %162 = mul nsw i64 %136, %152
  %163 = mul nsw i64 %125, %152
  %164 = sext i32 %40 to i64
  %165 = mul nsw i64 %94, %164
  %166 = sext i32 %90 to i64
  %167 = mul nsw i64 %96, %166
  %168 = mul nsw i64 %98, %164
  %169 = mul nsw i64 %100, %166
  %170 = mul nsw i64 %102, %164
  %171 = sext i32 %83 to i64
  %172 = mul nsw i64 %171, %166
  %173 = mul nsw i64 %159, %164
  %174 = mul nsw i64 %148, %166
  %175 = mul nsw i64 %136, %164
  %176 = mul nsw i64 %125, %166
  %177 = sext i32 %44 to i64
  %178 = mul nsw i64 %94, %177
  %179 = mul nsw i64 %96, %177
  %180 = mul nsw i64 %98, %177
  %181 = mul nsw i64 %100, %177
  %182 = sext i32 %82 to i64
  %183 = mul nsw i64 %182, %177
  %184 = mul nsw i64 %171, %177
  %185 = mul nsw i64 %159, %177
  %186 = mul nsw i64 %148, %177
  %187 = mul nsw i64 %136, %177
  %188 = mul nsw i64 %125, %177
  %189 = sext i32 %48 to i64
  %190 = mul nsw i64 %94, %189
  %191 = sext i32 %91 to i64
  %192 = mul nsw i64 %96, %191
  %193 = mul nsw i64 %98, %189
  %194 = sext i32 %81 to i64
  %195 = mul nsw i64 %194, %191
  %196 = mul nsw i64 %182, %189
  %197 = mul nsw i64 %171, %191
  %198 = mul nsw i64 %159, %189
  %199 = mul nsw i64 %148, %191
  %200 = mul nsw i64 %136, %189
  %201 = mul nsw i64 %125, %191
  %202 = sext i32 %52 to i64
  %203 = mul nsw i64 %94, %202
  %204 = mul nsw i64 %96, %202
  %205 = sext i32 %80 to i64
  %206 = mul nsw i64 %205, %202
  %207 = mul nsw i64 %194, %202
  %208 = mul nsw i64 %182, %202
  %209 = mul nsw i64 %171, %202
  %210 = mul nsw i64 %159, %202
  %211 = mul nsw i64 %148, %202
  %212 = mul nsw i64 %136, %202
  %213 = mul nsw i64 %125, %202
  %214 = sext i32 %56 to i64
  %215 = mul nsw i64 %94, %214
  %216 = sext i32 %92 to i64
  %217 = sext i32 %79 to i64
  %218 = mul nsw i64 %217, %216
  %219 = mul nsw i64 %205, %214
  %220 = mul nsw i64 %194, %216
  %221 = mul nsw i64 %182, %214
  %222 = mul nsw i64 %171, %216
  %223 = mul nsw i64 %159, %214
  %224 = mul nsw i64 %148, %216
  %225 = mul nsw i64 %136, %214
  %226 = mul nsw i64 %125, %216
  %227 = add i64 %218, %95
  %228 = add i64 %227, %206
  %229 = add i64 %228, %195
  %230 = add i64 %229, %183
  %231 = add i64 %230, %172
  %232 = add i64 %231, %160
  %233 = add i64 %232, %149
  %234 = add i64 %233, %137
  %235 = add i64 %234, %126
  %236 = add i64 %97, %115
  %237 = add i64 %142, %153
  %238 = add i64 %237, %130
  %239 = add i64 %238, %119
  %240 = add i64 %239, %103
  %241 = add i64 %240, %222
  %242 = add i64 %241, %210
  %243 = add i64 %242, %199
  %244 = add i64 %243, %187
  %245 = add i64 %244, %176
  %246 = add i64 %235, 33554432
  %247 = ashr i64 %246, 26
  %248 = add i64 %236, %219
  %249 = add i64 %248, %207
  %250 = add i64 %249, %196
  %251 = add i64 %250, %184
  %252 = add i64 %251, %173
  %253 = add i64 %252, %161
  %254 = add i64 %253, %150
  %255 = add i64 %254, %138
  %256 = add i64 %255, %247
  %257 = and i64 %246, -67108864
  %258 = sub i64 %235, %257
  %259 = add i64 %245, 33554432
  %260 = ashr i64 %259, 26
  %261 = add i64 %154, %165
  %262 = add i64 %261, %143
  %263 = add i64 %262, %131
  %264 = add i64 %263, %120
  %265 = add i64 %264, %105
  %266 = add i64 %265, %223
  %267 = add i64 %266, %211
  %268 = add i64 %267, %200
  %269 = add i64 %268, %188
  %270 = add i64 %269, %260
  %271 = and i64 %259, -67108864
  %272 = sub i64 %245, %271
  %273 = add i64 %256, 16777216
  %274 = ashr i64 %273, 25
  %275 = add i64 %117, %128
  %276 = add i64 %275, %99
  %277 = add i64 %276, %220
  %278 = add i64 %277, %208
  %279 = add i64 %278, %197
  %280 = add i64 %279, %185
  %281 = add i64 %280, %174
  %282 = add i64 %281, %162
  %283 = add i64 %282, %151
  %284 = add i64 %283, %274
  %285 = and i64 %273, 4261412864
  %286 = sub i64 %256, %285
  %287 = add i64 %270, 16777216
  %288 = ashr i64 %287, 25
  %289 = add i64 %167, %178
  %290 = add i64 %289, %155
  %291 = add i64 %290, %144
  %292 = add i64 %291, %132
  %293 = add i64 %292, %121
  %294 = add i64 %293, %107
  %295 = add i64 %294, %224
  %296 = add i64 %295, %212
  %297 = add i64 %296, %201
  %298 = add i64 %297, %288
  %299 = and i64 %287, 4261412864
  %300 = sub i64 %270, %299
  %301 = add i64 %284, 33554432
  %302 = ashr i64 %301, 26
  %303 = add i64 %129, %140
  %304 = add i64 %303, %118
  %305 = add i64 %304, %101
  %306 = add i64 %305, %221
  %307 = add i64 %306, %209
  %308 = add i64 %307, %198
  %309 = add i64 %308, %186
  %310 = add i64 %309, %175
  %311 = add i64 %310, %163
  %312 = add i64 %311, %302
  %313 = and i64 %301, 4227858432
  %314 = sub i64 %284, %313
  %315 = add i64 %298, 33554432
  %316 = ashr i64 %315, 26
  %317 = add i64 %179, %190
  %318 = add i64 %317, %168
  %319 = add i64 %318, %156
  %320 = add i64 %319, %145
  %321 = add i64 %320, %133
  %322 = add i64 %321, %122
  %323 = add i64 %322, %109
  %324 = add i64 %323, %225
  %325 = add i64 %324, %213
  %326 = add i64 %325, %316
  %327 = and i64 %315, 4227858432
  %328 = sub i64 %298, %327
  %329 = add i64 %312, 16777216
  %330 = ashr i64 %329, 25
  %331 = add i64 %330, %272
  %332 = and i64 %329, 4261412864
  %333 = sub i64 %312, %332
  %334 = add i64 %326, 16777216
  %335 = ashr i64 %334, 25
  %336 = add i64 %192, %203
  %337 = add i64 %336, %180
  %338 = add i64 %337, %169
  %339 = add i64 %338, %157
  %340 = add i64 %339, %146
  %341 = add i64 %340, %134
  %342 = add i64 %341, %123
  %343 = add i64 %342, %111
  %344 = add i64 %343, %226
  %345 = add i64 %344, %335
  %346 = and i64 %334, 4261412864
  %347 = sub i64 %326, %346
  %348 = add i64 %331, 33554432
  %349 = lshr i64 %348, 26
  %350 = add i64 %300, %349
  %351 = and i64 %348, 4227858432
  %352 = sub i64 %331, %351
  %353 = add i64 %345, 33554432
  %354 = ashr i64 %353, 26
  %355 = add i64 %204, %215
  %356 = add i64 %355, %193
  %357 = add i64 %356, %181
  %358 = add i64 %357, %170
  %359 = add i64 %358, %158
  %360 = add i64 %359, %147
  %361 = add i64 %360, %135
  %362 = add i64 %361, %124
  %363 = add i64 %362, %113
  %364 = add i64 %363, %354
  %365 = and i64 %353, 4227858432
  %366 = sub i64 %345, %365
  %367 = add i64 %364, 16777216
  %368 = ashr i64 %367, 25
  %369 = mul nsw i64 %368, 19
  %370 = add i64 %369, %258
  %371 = and i64 %367, 4261412864
  %372 = sub i64 %364, %371
  %373 = add i64 %370, 33554432
  %374 = lshr i64 %373, 26
  %375 = add i64 %286, %374
  %376 = and i64 %373, 4227858432
  %377 = sub i64 %370, %376
  %378 = trunc i64 %377 to i32
  store i32 %378, i32* %58, align 16
  %379 = trunc i64 %375 to i32
  store i32 %379, i32* %59, align 4
  %380 = trunc i64 %314 to i32
  store i32 %380, i32* %61, align 8
  %381 = trunc i64 %333 to i32
  store i32 %381, i32* %62, align 4
  %382 = trunc i64 %352 to i32
  store i32 %382, i32* %63, align 16
  %383 = trunc i64 %350 to i32
  store i32 %383, i32* %64, align 4
  %384 = trunc i64 %328 to i32
  store i32 %384, i32* %65, align 8
  %385 = trunc i64 %347 to i32
  store i32 %385, i32* %66, align 4
  %386 = trunc i64 %366 to i32
  store i32 %386, i32* %67, align 16
  %387 = trunc i64 %372 to i32
  store i32 %387, i32* %68, align 4
  call void @fe25519_tobytes(i8* nonnull %0, i32* nonnull %58) #3
  br label %388

388:                                              ; preds = %14, %2, %11, %17
  %389 = phi i32 [ 0, %17 ], [ -1, %11 ], [ -1, %2 ], [ -1, %14 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %8) #3
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %7) #3
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %6) #3
  ret i32 %389
}

declare i32 @ge25519_has_small_order(i8* %0) local_unnamed_addr #2

declare i32 @ge25519_frombytes_negate_vartime(%struct.ge25519_p3* %0, i8* %1) local_unnamed_addr #2

declare i32 @ge25519_is_on_main_subgroup(%struct.ge25519_p3* %0) local_unnamed_addr #2

declare void @fe25519_invert(i32* %0, i32* %1) local_unnamed_addr #2

declare void @fe25519_tobytes(i8* %0, i32* %1) local_unnamed_addr #2

; Function Attrs: nounwind
define i32 @crypto_sign_ed25519_sk_to_curve25519(i8* nocapture nonnull %0, i8* nonnull %1) local_unnamed_addr #0 {
  %3 = alloca [64 x i8], align 16
  %4 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %4) #3
  %5 = call i32 @crypto_hash_sha512(i8* nonnull %4, i8* nonnull %1, i64 32) #3
  %6 = load i8, i8* %4, align 16
  %7 = and i8 %6, -8
  store i8 %7, i8* %4, align 16
  %8 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i32 0, i32 31
  %9 = load i8, i8* %8, align 1
  %10 = and i8 %9, 63
  %11 = or i8 %10, 64
  store i8 %11, i8* %8, align 1
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 1 dereferenceable(32) %0, i8* nonnull align 16 dereferenceable(32) %4, i32 32, i1 false)
  call void @sodium_memzero(i8* nonnull %4, i32 64) #3
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %4) #3
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %6 = load i8, i8* %4, align 16
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=11111000)

; *****
; For LLVM instruction:
;  %7 = and i8 %6, -8
; Looking for a replacement for:
%0:i8 = var
%1:i8 = and 248:i8, %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i8, i8* %8, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=00111111)

; *****
; For LLVM instruction:
;  %10 = and i8 %9, 63
; Looking for a replacement for:
%0:i8 = var
%1:i8 = and 63:i8, %0
infer %1 (demandedBits=10111111)

; *****
; For LLVM instruction:
;  %11 = or i8 %10, 64
; Looking for a replacement for:
%0:i8 = var
%1:i8 = and 63:i8, %0
%2:i8 = or 64:i8, %1
infer %2
#########################################################
; exiting Souper's runOnFunction() for crypto_sign_ed25519_sk_to_curve25519()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
