; entering Souper's runOnFunction() for ./core_salsa_ref.c.bc:crypto_core_salsa()

; ModuleID = './core_salsa_ref.c.bc'
source_filename = "crypto_core/salsa/ref/core_salsa_ref.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

; Function Attrs: nofree norecurse nounwind
define i32 @crypto_core_salsa20(i8* nocapture nonnull %0, i8* nocapture nonnull readonly %1, i8* nocapture nonnull readonly %2, i8* readonly %3) local_unnamed_addr #0 {
  tail call fastcc void @crypto_core_salsa(i8* nonnull %0, i8* nonnull %1, i8* nonnull %2, i8* %3, i32 20)
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind
define internal fastcc void @crypto_core_salsa(i8* nocapture %0, i8* nocapture readonly %1, i8* nocapture readonly %2, i8* readonly %3, i32 %4) unnamed_addr #0 {
  %6 = icmp eq i8* %3, null
  br i1 %6, label %19, label %7

7:                                                ; preds = %5
  %8 = bitcast i8* %3 to i32*
  %9 = load i32, i32* %8, align 1
  %10 = getelementptr i8, i8* %3, i32 4
  %11 = bitcast i8* %10 to i32*
  %12 = load i32, i32* %11, align 1
  %13 = getelementptr i8, i8* %3, i32 8
  %14 = bitcast i8* %13 to i32*
  %15 = load i32, i32* %14, align 1
  %16 = getelementptr i8, i8* %3, i32 12
  %17 = bitcast i8* %16 to i32*
  %18 = load i32, i32* %17, align 1
  br label %19

19:                                               ; preds = %5, %7
  %20 = phi i32 [ %18, %7 ], [ 1797285236, %5 ]
  %21 = phi i32 [ %9, %7 ], [ 1634760805, %5 ]
  %22 = phi i32 [ %15, %7 ], [ 2036477234, %5 ]
  %23 = phi i32 [ %12, %7 ], [ 857760878, %5 ]
  %24 = bitcast i8* %2 to i32*
  %25 = load i32, i32* %24, align 1
  %26 = getelementptr i8, i8* %2, i32 4
  %27 = bitcast i8* %26 to i32*
  %28 = load i32, i32* %27, align 1
  %29 = getelementptr i8, i8* %2, i32 8
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 1
  %32 = getelementptr i8, i8* %2, i32 12
  %33 = bitcast i8* %32 to i32*
  %34 = load i32, i32* %33, align 1
  %35 = getelementptr i8, i8* %2, i32 16
  %36 = bitcast i8* %35 to i32*
  %37 = load i32, i32* %36, align 1
  %38 = getelementptr i8, i8* %2, i32 20
  %39 = bitcast i8* %38 to i32*
  %40 = load i32, i32* %39, align 1
  %41 = getelementptr i8, i8* %2, i32 24
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %42, align 1
  %44 = getelementptr i8, i8* %2, i32 28
  %45 = bitcast i8* %44 to i32*
  %46 = load i32, i32* %45, align 1
  %47 = bitcast i8* %1 to i32*
  %48 = load i32, i32* %47, align 1
  %49 = getelementptr i8, i8* %1, i32 4
  %50 = bitcast i8* %49 to i32*
  %51 = load i32, i32* %50, align 1
  %52 = getelementptr i8, i8* %1, i32 8
  %53 = bitcast i8* %52 to i32*
  %54 = load i32, i32* %53, align 1
  %55 = getelementptr i8, i8* %1, i32 12
  %56 = bitcast i8* %55 to i32*
  %57 = load i32, i32* %56, align 1
  %58 = icmp sgt i32 %4, 0
  br i1 %58, label %59, label %239

59:                                               ; preds = %19, %59
  %60 = phi i32 [ %237, %59 ], [ 0, %19 ]
  %61 = phi i32 [ %176, %59 ], [ %21, %19 ]
  %62 = phi i32 [ %161, %59 ], [ %25, %19 ]
  %63 = phi i32 [ %166, %59 ], [ %28, %19 ]
  %64 = phi i32 [ %171, %59 ], [ %31, %19 ]
  %65 = phi i32 [ %191, %59 ], [ %34, %19 ]
  %66 = phi i32 [ %196, %59 ], [ %23, %19 ]
  %67 = phi i32 [ %181, %59 ], [ %48, %19 ]
  %68 = phi i32 [ %186, %59 ], [ %51, %19 ]
  %69 = phi i32 [ %206, %59 ], [ %54, %19 ]
  %70 = phi i32 [ %211, %59 ], [ %57, %19 ]
  %71 = phi i32 [ %216, %59 ], [ %22, %19 ]
  %72 = phi i32 [ %201, %59 ], [ %37, %19 ]
  %73 = phi i32 [ %236, %59 ], [ %20, %19 ]
  %74 = phi i32 [ %231, %59 ], [ %46, %19 ]
  %75 = phi i32 [ %226, %59 ], [ %43, %19 ]
  %76 = phi i32 [ %221, %59 ], [ %40, %19 ]
  %77 = add i32 %61, %76
  %78 = shl i32 %77, 7
  %79 = lshr i32 %77, 25
  %80 = or i32 %79, %78
  %81 = xor i32 %80, %65
  %82 = add i32 %81, %61
  %83 = shl i32 %82, 9
  %84 = lshr i32 %82, 23
  %85 = or i32 %84, %83
  %86 = xor i32 %85, %69
  %87 = add i32 %86, %81
  %88 = shl i32 %87, 13
  %89 = lshr i32 %87, 19
  %90 = or i32 %89, %88
  %91 = xor i32 %90, %76
  %92 = add i32 %91, %86
  %93 = shl i32 %92, 18
  %94 = lshr i32 %92, 14
  %95 = or i32 %94, %93
  %96 = xor i32 %95, %61
  %97 = add i32 %62, %66
  %98 = shl i32 %97, 7
  %99 = lshr i32 %97, 25
  %100 = or i32 %99, %98
  %101 = xor i32 %100, %70
  %102 = add i32 %101, %66
  %103 = shl i32 %102, 9
  %104 = lshr i32 %102, 23
  %105 = or i32 %104, %103
  %106 = xor i32 %105, %75
  %107 = add i32 %106, %101
  %108 = shl i32 %107, 13
  %109 = lshr i32 %107, 19
  %110 = or i32 %109, %108
  %111 = xor i32 %110, %62
  %112 = add i32 %111, %106
  %113 = shl i32 %112, 18
  %114 = lshr i32 %112, 14
  %115 = or i32 %114, %113
  %116 = xor i32 %115, %66
  %117 = add i32 %67, %71
  %118 = shl i32 %117, 7
  %119 = lshr i32 %117, 25
  %120 = or i32 %119, %118
  %121 = xor i32 %120, %74
  %122 = add i32 %121, %71
  %123 = shl i32 %122, 9
  %124 = lshr i32 %122, 23
  %125 = or i32 %124, %123
  %126 = xor i32 %125, %63
  %127 = add i32 %126, %121
  %128 = shl i32 %127, 13
  %129 = lshr i32 %127, 19
  %130 = or i32 %129, %128
  %131 = xor i32 %130, %67
  %132 = add i32 %131, %126
  %133 = shl i32 %132, 18
  %134 = lshr i32 %132, 14
  %135 = or i32 %134, %133
  %136 = xor i32 %135, %71
  %137 = add i32 %72, %73
  %138 = shl i32 %137, 7
  %139 = lshr i32 %137, 25
  %140 = or i32 %139, %138
  %141 = xor i32 %64, %140
  %142 = add i32 %141, %73
  %143 = shl i32 %142, 9
  %144 = lshr i32 %142, 23
  %145 = or i32 %144, %143
  %146 = xor i32 %145, %68
  %147 = add i32 %146, %141
  %148 = shl i32 %147, 13
  %149 = lshr i32 %147, 19
  %150 = or i32 %149, %148
  %151 = xor i32 %150, %72
  %152 = add i32 %151, %146
  %153 = shl i32 %152, 18
  %154 = lshr i32 %152, 14
  %155 = or i32 %154, %153
  %156 = xor i32 %155, %73
  %157 = add i32 %96, %141
  %158 = shl i32 %157, 7
  %159 = lshr i32 %157, 25
  %160 = or i32 %159, %158
  %161 = xor i32 %160, %111
  %162 = add i32 %161, %96
  %163 = shl i32 %162, 9
  %164 = lshr i32 %162, 23
  %165 = or i32 %164, %163
  %166 = xor i32 %165, %126
  %167 = add i32 %166, %161
  %168 = shl i32 %167, 13
  %169 = lshr i32 %167, 19
  %170 = or i32 %169, %168
  %171 = xor i32 %170, %141
  %172 = add i32 %171, %166
  %173 = shl i32 %172, 18
  %174 = lshr i32 %172, 14
  %175 = or i32 %174, %173
  %176 = xor i32 %175, %96
  %177 = add i32 %116, %81
  %178 = shl i32 %177, 7
  %179 = lshr i32 %177, 25
  %180 = or i32 %179, %178
  %181 = xor i32 %180, %131
  %182 = add i32 %181, %116
  %183 = shl i32 %182, 9
  %184 = lshr i32 %182, 23
  %185 = or i32 %184, %183
  %186 = xor i32 %185, %146
  %187 = add i32 %186, %181
  %188 = shl i32 %187, 13
  %189 = lshr i32 %187, 19
  %190 = or i32 %189, %188
  %191 = xor i32 %190, %81
  %192 = add i32 %191, %186
  %193 = shl i32 %192, 18
  %194 = lshr i32 %192, 14
  %195 = or i32 %194, %193
  %196 = xor i32 %195, %116
  %197 = add i32 %136, %101
  %198 = shl i32 %197, 7
  %199 = lshr i32 %197, 25
  %200 = or i32 %199, %198
  %201 = xor i32 %200, %151
  %202 = add i32 %201, %136
  %203 = shl i32 %202, 9
  %204 = lshr i32 %202, 23
  %205 = or i32 %204, %203
  %206 = xor i32 %205, %86
  %207 = add i32 %206, %201
  %208 = shl i32 %207, 13
  %209 = lshr i32 %207, 19
  %210 = or i32 %209, %208
  %211 = xor i32 %210, %101
  %212 = add i32 %211, %206
  %213 = shl i32 %212, 18
  %214 = lshr i32 %212, 14
  %215 = or i32 %214, %213
  %216 = xor i32 %215, %136
  %217 = add i32 %156, %121
  %218 = shl i32 %217, 7
  %219 = lshr i32 %217, 25
  %220 = or i32 %219, %218
  %221 = xor i32 %220, %91
  %222 = add i32 %221, %156
  %223 = shl i32 %222, 9
  %224 = lshr i32 %222, 23
  %225 = or i32 %224, %223
  %226 = xor i32 %225, %106
  %227 = add i32 %226, %221
  %228 = shl i32 %227, 13
  %229 = lshr i32 %227, 19
  %230 = or i32 %229, %228
  %231 = xor i32 %230, %121
  %232 = add i32 %231, %226
  %233 = shl i32 %232, 18
  %234 = lshr i32 %232, 14
  %235 = or i32 %234, %233
  %236 = xor i32 %235, %156
  %237 = add i32 %60, 2
  %238 = icmp slt i32 %237, %4
  br i1 %238, label %59, label %239

239:                                              ; preds = %59, %19
  %240 = phi i32 [ %40, %19 ], [ %221, %59 ]
  %241 = phi i32 [ %43, %19 ], [ %226, %59 ]
  %242 = phi i32 [ %46, %19 ], [ %231, %59 ]
  %243 = phi i32 [ %20, %19 ], [ %236, %59 ]
  %244 = phi i32 [ %37, %19 ], [ %201, %59 ]
  %245 = phi i32 [ %22, %19 ], [ %216, %59 ]
  %246 = phi i32 [ %57, %19 ], [ %211, %59 ]
  %247 = phi i32 [ %54, %19 ], [ %206, %59 ]
  %248 = phi i32 [ %51, %19 ], [ %186, %59 ]
  %249 = phi i32 [ %48, %19 ], [ %181, %59 ]
  %250 = phi i32 [ %23, %19 ], [ %196, %59 ]
  %251 = phi i32 [ %34, %19 ], [ %191, %59 ]
  %252 = phi i32 [ %31, %19 ], [ %171, %59 ]
  %253 = phi i32 [ %28, %19 ], [ %166, %59 ]
  %254 = phi i32 [ %25, %19 ], [ %161, %59 ]
  %255 = phi i32 [ %21, %19 ], [ %176, %59 ]
  %256 = add i32 %255, %21
  %257 = bitcast i8* %0 to i32*
  store i32 %256, i32* %257, align 1
  %258 = getelementptr i8, i8* %0, i32 4
  %259 = add i32 %254, %25
  %260 = bitcast i8* %258 to i32*
  store i32 %259, i32* %260, align 1
  %261 = getelementptr i8, i8* %0, i32 8
  %262 = add i32 %253, %28
  %263 = bitcast i8* %261 to i32*
  store i32 %262, i32* %263, align 1
  %264 = getelementptr i8, i8* %0, i32 12
  %265 = add i32 %252, %31
  %266 = bitcast i8* %264 to i32*
  store i32 %265, i32* %266, align 1
  %267 = getelementptr i8, i8* %0, i32 16
  %268 = add i32 %251, %34
  %269 = bitcast i8* %267 to i32*
  store i32 %268, i32* %269, align 1
  %270 = getelementptr i8, i8* %0, i32 20
  %271 = add i32 %250, %23
  %272 = bitcast i8* %270 to i32*
  store i32 %271, i32* %272, align 1
  %273 = getelementptr i8, i8* %0, i32 24
  %274 = add i32 %249, %48
  %275 = bitcast i8* %273 to i32*
  store i32 %274, i32* %275, align 1
  %276 = getelementptr i8, i8* %0, i32 28
  %277 = add i32 %248, %51
  %278 = bitcast i8* %276 to i32*
  store i32 %277, i32* %278, align 1
  %279 = getelementptr i8, i8* %0, i32 32
  %280 = add i32 %247, %54
  %281 = bitcast i8* %279 to i32*
  store i32 %280, i32* %281, align 1
  %282 = getelementptr i8, i8* %0, i32 36
  %283 = add i32 %246, %57
  %284 = bitcast i8* %282 to i32*
  store i32 %283, i32* %284, align 1
  %285 = getelementptr i8, i8* %0, i32 40
  %286 = add i32 %245, %22
  %287 = bitcast i8* %285 to i32*
  store i32 %286, i32* %287, align 1
  %288 = getelementptr i8, i8* %0, i32 44
  %289 = add i32 %244, %37
  %290 = bitcast i8* %288 to i32*
  store i32 %289, i32* %290, align 1
  %291 = getelementptr i8, i8* %0, i32 48
  %292 = add i32 %240, %40
  %293 = bitcast i8* %291 to i32*
  store i32 %292, i32* %293, align 1
  %294 = getelementptr i8, i8* %0, i32 52
  %295 = add i32 %241, %43
  %296 = bitcast i8* %294 to i32*
  store i32 %295, i32* %296, align 1
  %297 = getelementptr i8, i8* %0, i32 56
  %298 = add i32 %242, %46
  %299 = bitcast i8* %297 to i32*
  store i32 %298, i32* %299, align 1
  %300 = getelementptr i8, i8* %0, i32 60
  %301 = add i32 %243, %20
  %302 = bitcast i8* %300 to i32*
  store i32 %301, i32* %302, align 1
  ret void
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_core_salsa20_outputbytes() local_unnamed_addr #1 {
  ret i32 64
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_core_salsa20_inputbytes() local_unnamed_addr #1 {
  ret i32 16
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_core_salsa20_keybytes() local_unnamed_addr #1 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_core_salsa20_constbytes() local_unnamed_addr #1 {
  ret i32 16
}

; Function Attrs: nofree norecurse nounwind
define i32 @crypto_core_salsa2012(i8* nocapture nonnull %0, i8* nocapture nonnull readonly %1, i8* nocapture nonnull readonly %2, i8* readonly %3) local_unnamed_addr #0 {
  tail call fastcc void @crypto_core_salsa(i8* nonnull %0, i8* nonnull %1, i8* nonnull %2, i8* %3, i32 12)
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_core_salsa2012_outputbytes() local_unnamed_addr #1 {
  ret i32 64
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_core_salsa2012_inputbytes() local_unnamed_addr #1 {
  ret i32 16
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_core_salsa2012_keybytes() local_unnamed_addr #1 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_core_salsa2012_constbytes() local_unnamed_addr #1 {
  ret i32 16
}

; Function Attrs: nofree norecurse nounwind
define i32 @crypto_core_salsa208(i8* nocapture nonnull %0, i8* nocapture nonnull readonly %1, i8* nocapture nonnull readonly %2, i8* readonly %3) local_unnamed_addr #0 {
  tail call fastcc void @crypto_core_salsa(i8* nonnull %0, i8* nonnull %1, i8* nonnull %2, i8* %3, i32 8)
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_core_salsa208_outputbytes() local_unnamed_addr #1 {
  ret i32 64
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_core_salsa208_inputbytes() local_unnamed_addr #1 {
  ret i32 16
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_core_salsa208_keybytes() local_unnamed_addr #1 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_core_salsa208_constbytes() local_unnamed_addr #1 {
  ret i32 16
}

attributes #0 = { nofree norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %6 = icmp eq i8* %3, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %8, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %11, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %14, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %17, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = phi i32 [ %18, %7 ], [ 1797285236, %5 ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = phi %0, %1, 1797285236:i32
infer %2

; *****
; For LLVM instruction:
;  %21 = phi i32 [ %9, %7 ], [ 1634760805, %5 ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = phi %0, %1, 1634760805:i32
infer %2

; *****
; For LLVM instruction:
;  %22 = phi i32 [ %15, %7 ], [ 2036477234, %5 ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = phi %0, %1, 2036477234:i32
infer %2

; *****
; For LLVM instruction:
;  %23 = phi i32 [ %12, %7 ], [ 857760878, %5 ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = phi %0, %1, 857760878:i32
infer %2

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %24, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %27, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %30, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %33, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %36, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %40 = load i32, i32* %39, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %42, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %46 = load i32, i32* %45, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %48 = load i32, i32* %47, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %51 = load i32, i32* %50, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %54 = load i32, i32* %53, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %57 = load i32, i32* %56, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %58 = icmp sgt i32 %4, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %60 = phi i32 [ %237, %59 ], [ 0, %19 ]
; Looking for a replacement for:
%0:i32 = var (knownBits=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0) (range=[0,-1))
infer %0

; *****
; For LLVM instruction:
;  %61 = phi i32 [ %176, %59 ], [ %21, %19 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %62 = phi i32 [ %161, %59 ], [ %25, %19 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %63 = phi i32 [ %166, %59 ], [ %28, %19 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %64 = phi i32 [ %171, %59 ], [ %31, %19 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %65 = phi i32 [ %191, %59 ], [ %34, %19 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %66 = phi i32 [ %196, %59 ], [ %23, %19 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %67 = phi i32 [ %181, %59 ], [ %48, %19 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %68 = phi i32 [ %186, %59 ], [ %51, %19 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %69 = phi i32 [ %206, %59 ], [ %54, %19 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %70 = phi i32 [ %211, %59 ], [ %57, %19 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %71 = phi i32 [ %216, %59 ], [ %22, %19 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %72 = phi i32 [ %201, %59 ], [ %37, %19 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %73 = phi i32 [ %236, %59 ], [ %20, %19 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %74 = phi i32 [ %231, %59 ], [ %46, %19 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %75 = phi i32 [ %226, %59 ], [ %43, %19 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %76 = phi i32 [ %221, %59 ], [ %40, %19 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %77 = add i32 %61, %76
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %78 = shl i32 %77, 7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1 (hasExternalUses)
%3:i32 = shl %2, 7:i32
infer %3

; *****
; For LLVM instruction:
;  %79 = lshr i32 %77, 25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1 (hasExternalUses)
%3:i32 = lshr %2, 25:i32
infer %3

; *****
; For LLVM instruction:
;  %80 = or i32 %79, %78
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = shl %2, 7:i32
%4:i32 = lshr %2, 25:i32
%5:i32 = or %3, %4
infer %5

; *****
; For LLVM instruction:
;  %81 = xor i32 %80, %65
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6
infer %7

; *****
; For LLVM instruction:
;  %82 = add i32 %81, %61
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7
infer %8

; *****
; For LLVM instruction:
;  %83 = shl i32 %82, 9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7 (hasExternalUses)
%9:i32 = shl %8, 9:i32
infer %9

; *****
; For LLVM instruction:
;  %84 = lshr i32 %82, 23
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7 (hasExternalUses)
%9:i32 = lshr %8, 23:i32
infer %9

; *****
; For LLVM instruction:
;  %85 = or i32 %84, %83
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7
%9:i32 = shl %8, 9:i32
%10:i32 = lshr %8, 23:i32
%11:i32 = or %9, %10
infer %11

; *****
; For LLVM instruction:
;  %86 = xor i32 %85, %69
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12
infer %13

; *****
; For LLVM instruction:
;  %87 = add i32 %86, %81
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %1, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
infer %14

; *****
; For LLVM instruction:
;  %88 = shl i32 %87, 13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %1, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13 (hasExternalUses)
%15:i32 = shl %14, 13:i32
infer %15

; *****
; For LLVM instruction:
;  %89 = lshr i32 %87, 19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %1, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13 (hasExternalUses)
%15:i32 = lshr %14, 19:i32
infer %15

; *****
; For LLVM instruction:
;  %90 = or i32 %89, %88
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %1, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
infer %17

; *****
; For LLVM instruction:
;  %91 = xor i32 %90, %76
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17
infer %18

; *****
; For LLVM instruction:
;  %92 = add i32 %91, %86
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
infer %19

; *****
; For LLVM instruction:
;  %93 = shl i32 %92, 18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18 (hasExternalUses)
%20:i32 = shl %19, 18:i32
infer %20

; *****
; For LLVM instruction:
;  %94 = lshr i32 %92, 14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18 (hasExternalUses)
%20:i32 = lshr %19, 14:i32
infer %20

; *****
; For LLVM instruction:
;  %95 = or i32 %94, %93
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
infer %22

; *****
; For LLVM instruction:
;  %96 = xor i32 %95, %61
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22
infer %23

; *****
; For LLVM instruction:
;  %97 = add i32 %62, %66
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %98 = shl i32 %97, 7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1 (hasExternalUses)
%3:i32 = shl %2, 7:i32
infer %3

; *****
; For LLVM instruction:
;  %99 = lshr i32 %97, 25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1 (hasExternalUses)
%3:i32 = lshr %2, 25:i32
infer %3

; *****
; For LLVM instruction:
;  %100 = or i32 %99, %98
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = shl %2, 7:i32
%4:i32 = lshr %2, 25:i32
%5:i32 = or %3, %4
infer %5

; *****
; For LLVM instruction:
;  %101 = xor i32 %100, %70
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6
infer %7

; *****
; For LLVM instruction:
;  %102 = add i32 %101, %66
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7
infer %8

; *****
; For LLVM instruction:
;  %103 = shl i32 %102, 9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7 (hasExternalUses)
%9:i32 = shl %8, 9:i32
infer %9

; *****
; For LLVM instruction:
;  %104 = lshr i32 %102, 23
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7 (hasExternalUses)
%9:i32 = lshr %8, 23:i32
infer %9

; *****
; For LLVM instruction:
;  %105 = or i32 %104, %103
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7
%9:i32 = shl %8, 9:i32
%10:i32 = lshr %8, 23:i32
%11:i32 = or %9, %10
infer %11

; *****
; For LLVM instruction:
;  %106 = xor i32 %105, %75
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12
infer %13

; *****
; For LLVM instruction:
;  %107 = add i32 %106, %101
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
infer %14

; *****
; For LLVM instruction:
;  %108 = shl i32 %107, 13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13 (hasExternalUses)
%15:i32 = shl %14, 13:i32
infer %15

; *****
; For LLVM instruction:
;  %109 = lshr i32 %107, 19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13 (hasExternalUses)
%15:i32 = lshr %14, 19:i32
infer %15

; *****
; For LLVM instruction:
;  %110 = or i32 %109, %108
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
infer %17

; *****
; For LLVM instruction:
;  %111 = xor i32 %110, %62
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17
infer %18

; *****
; For LLVM instruction:
;  %112 = add i32 %111, %106
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17 (hasExternalUses)
%19:i32 = add %18, %13
infer %19

; *****
; For LLVM instruction:
;  %113 = shl i32 %112, 18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17 (hasExternalUses)
%19:i32 = add %18, %13 (hasExternalUses)
%20:i32 = shl %19, 18:i32
infer %20

; *****
; For LLVM instruction:
;  %114 = lshr i32 %112, 14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17 (hasExternalUses)
%19:i32 = add %18, %13 (hasExternalUses)
%20:i32 = lshr %19, 14:i32
infer %20

; *****
; For LLVM instruction:
;  %115 = or i32 %114, %113
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
infer %22

; *****
; For LLVM instruction:
;  %116 = xor i32 %115, %66
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22
infer %23

; *****
; For LLVM instruction:
;  %117 = add i32 %67, %71
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %118 = shl i32 %117, 7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1 (hasExternalUses)
%3:i32 = shl %2, 7:i32
infer %3

; *****
; For LLVM instruction:
;  %119 = lshr i32 %117, 25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1 (hasExternalUses)
%3:i32 = lshr %2, 25:i32
infer %3

; *****
; For LLVM instruction:
;  %120 = or i32 %119, %118
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = shl %2, 7:i32
%4:i32 = lshr %2, 25:i32
%5:i32 = or %3, %4
infer %5

; *****
; For LLVM instruction:
;  %121 = xor i32 %120, %74
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6
infer %7

; *****
; For LLVM instruction:
;  %122 = add i32 %121, %71
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7
infer %8

; *****
; For LLVM instruction:
;  %123 = shl i32 %122, 9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7 (hasExternalUses)
%9:i32 = shl %8, 9:i32
infer %9

; *****
; For LLVM instruction:
;  %124 = lshr i32 %122, 23
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7 (hasExternalUses)
%9:i32 = lshr %8, 23:i32
infer %9

; *****
; For LLVM instruction:
;  %125 = or i32 %124, %123
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7
%9:i32 = shl %8, 9:i32
%10:i32 = lshr %8, 23:i32
%11:i32 = or %9, %10
infer %11

; *****
; For LLVM instruction:
;  %126 = xor i32 %125, %63
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12
infer %13

; *****
; For LLVM instruction:
;  %127 = add i32 %126, %121
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %13, %8
infer %14

; *****
; For LLVM instruction:
;  %128 = shl i32 %127, 13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %13, %8 (hasExternalUses)
%15:i32 = shl %14, 13:i32
infer %15

; *****
; For LLVM instruction:
;  %129 = lshr i32 %127, 19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %13, %8 (hasExternalUses)
%15:i32 = lshr %14, 19:i32
infer %15

; *****
; For LLVM instruction:
;  %130 = or i32 %129, %128
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
infer %17

; *****
; For LLVM instruction:
;  %131 = xor i32 %130, %67
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %2
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %2, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17
infer %18

; *****
; For LLVM instruction:
;  %132 = add i32 %131, %126
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
infer %19

; *****
; For LLVM instruction:
;  %133 = shl i32 %132, 18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18 (hasExternalUses)
%20:i32 = shl %19, 18:i32
infer %20

; *****
; For LLVM instruction:
;  %134 = lshr i32 %132, 14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18 (hasExternalUses)
%20:i32 = lshr %19, 14:i32
infer %20

; *****
; For LLVM instruction:
;  %135 = or i32 %134, %133
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
infer %22

; *****
; For LLVM instruction:
;  %136 = xor i32 %135, %71
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22
infer %23

; *****
; For LLVM instruction:
;  %137 = add i32 %72, %73
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %138 = shl i32 %137, 7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1 (hasExternalUses)
%3:i32 = shl %2, 7:i32
infer %3

; *****
; For LLVM instruction:
;  %139 = lshr i32 %137, 25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1 (hasExternalUses)
%3:i32 = lshr %2, 25:i32
infer %3

; *****
; For LLVM instruction:
;  %140 = or i32 %139, %138
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = shl %2, 7:i32
%4:i32 = lshr %2, 25:i32
%5:i32 = or %3, %4
infer %5

; *****
; For LLVM instruction:
;  %141 = xor i32 %64, %140
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6
infer %7

; *****
; For LLVM instruction:
;  %142 = add i32 %141, %73
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7
infer %8

; *****
; For LLVM instruction:
;  %143 = shl i32 %142, 9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7 (hasExternalUses)
%9:i32 = shl %8, 9:i32
infer %9

; *****
; For LLVM instruction:
;  %144 = lshr i32 %142, 23
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7 (hasExternalUses)
%9:i32 = lshr %8, 23:i32
infer %9

; *****
; For LLVM instruction:
;  %145 = or i32 %144, %143
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7
%9:i32 = shl %8, 9:i32
%10:i32 = lshr %8, 23:i32
%11:i32 = or %9, %10
infer %11

; *****
; For LLVM instruction:
;  %146 = xor i32 %145, %68
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12
infer %13

; *****
; For LLVM instruction:
;  %147 = add i32 %146, %141
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
infer %14

; *****
; For LLVM instruction:
;  %148 = shl i32 %147, 13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13 (hasExternalUses)
%15:i32 = shl %14, 13:i32
infer %15

; *****
; For LLVM instruction:
;  %149 = lshr i32 %147, 19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13 (hasExternalUses)
%15:i32 = lshr %14, 19:i32
infer %15

; *****
; For LLVM instruction:
;  %150 = or i32 %149, %148
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
infer %17

; *****
; For LLVM instruction:
;  %151 = xor i32 %150, %72
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17
infer %18

; *****
; For LLVM instruction:
;  %152 = add i32 %151, %146
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
infer %19

; *****
; For LLVM instruction:
;  %153 = shl i32 %152, 18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18 (hasExternalUses)
%20:i32 = shl %19, 18:i32
infer %20

; *****
; For LLVM instruction:
;  %154 = lshr i32 %152, 14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18 (hasExternalUses)
%20:i32 = lshr %19, 14:i32
infer %20

; *****
; For LLVM instruction:
;  %155 = or i32 %154, %153
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
infer %22

; *****
; For LLVM instruction:
;  %156 = xor i32 %155, %73
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22
infer %23

; *****
; For LLVM instruction:
;  %157 = add i32 %96, %141
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
infer %32

; *****
; For LLVM instruction:
;  %158 = shl i32 %157, 7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31 (hasExternalUses)
%33:i32 = shl %32, 7:i32
infer %33

; *****
; For LLVM instruction:
;  %159 = lshr i32 %157, 25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31 (hasExternalUses)
%33:i32 = lshr %32, 25:i32
infer %33

; *****
; For LLVM instruction:
;  %160 = or i32 %159, %158
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
infer %35

; *****
; For LLVM instruction:
;  %161 = xor i32 %160, %111
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54
infer %55

; *****
; For LLVM instruction:
;  %162 = add i32 %161, %96
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
infer %56

; *****
; For LLVM instruction:
;  %163 = shl i32 %162, 9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55 (hasExternalUses)
%57:i32 = shl %56, 9:i32
infer %57

; *****
; For LLVM instruction:
;  %164 = lshr i32 %162, 23
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55 (hasExternalUses)
%57:i32 = lshr %56, 23:i32
infer %57

; *****
; For LLVM instruction:
;  %165 = or i32 %164, %163
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
infer %59

; *****
; For LLVM instruction:
;  %166 = xor i32 %165, %126
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73
infer %74

; *****
; For LLVM instruction:
;  %167 = add i32 %166, %161
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
infer %75

; *****
; For LLVM instruction:
;  %168 = shl i32 %167, 13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74 (hasExternalUses)
%76:i32 = shl %75, 13:i32
infer %76

; *****
; For LLVM instruction:
;  %169 = lshr i32 %167, 19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74 (hasExternalUses)
%76:i32 = lshr %75, 19:i32
infer %76

; *****
; For LLVM instruction:
;  %170 = or i32 %169, %168
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
infer %78

; *****
; For LLVM instruction:
;  %171 = xor i32 %170, %141
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31
infer %79

; *****
; For LLVM instruction:
;  %172 = add i32 %171, %166
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
infer %80

; *****
; For LLVM instruction:
;  %173 = shl i32 %172, 18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79 (hasExternalUses)
%81:i32 = shl %80, 18:i32
infer %81

; *****
; For LLVM instruction:
;  %174 = lshr i32 %172, 14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79 (hasExternalUses)
%81:i32 = lshr %80, 14:i32
infer %81

; *****
; For LLVM instruction:
;  %175 = or i32 %174, %173
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
%81:i32 = shl %80, 18:i32
%82:i32 = lshr %80, 14:i32
%83:i32 = or %81, %82
infer %83

; *****
; For LLVM instruction:
;  %176 = xor i32 %175, %96
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
%81:i32 = shl %80, 18:i32
%82:i32 = lshr %80, 14:i32
%83:i32 = or %81, %82
%84:i32 = xor %83, %23
infer %84

; *****
; For LLVM instruction:
;  %177 = add i32 %116, %81
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
infer %32

; *****
; For LLVM instruction:
;  %178 = shl i32 %177, 7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31 (hasExternalUses)
%33:i32 = shl %32, 7:i32
infer %33

; *****
; For LLVM instruction:
;  %179 = lshr i32 %177, 25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31 (hasExternalUses)
%33:i32 = lshr %32, 25:i32
infer %33

; *****
; For LLVM instruction:
;  %180 = or i32 %179, %178
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
infer %35

; *****
; For LLVM instruction:
;  %181 = xor i32 %180, %131
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54
infer %55

; *****
; For LLVM instruction:
;  %182 = add i32 %181, %116
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
infer %56

; *****
; For LLVM instruction:
;  %183 = shl i32 %182, 9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55 (hasExternalUses)
%57:i32 = shl %56, 9:i32
infer %57

; *****
; For LLVM instruction:
;  %184 = lshr i32 %182, 23
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55 (hasExternalUses)
%57:i32 = lshr %56, 23:i32
infer %57

; *****
; For LLVM instruction:
;  %185 = or i32 %184, %183
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
infer %59

; *****
; For LLVM instruction:
;  %186 = xor i32 %185, %146
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73
infer %74

; *****
; For LLVM instruction:
;  %187 = add i32 %186, %181
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %31, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
infer %75

; *****
; For LLVM instruction:
;  %188 = shl i32 %187, 13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %31, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74 (hasExternalUses)
%76:i32 = shl %75, 13:i32
infer %76

; *****
; For LLVM instruction:
;  %189 = lshr i32 %187, 19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %31, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74 (hasExternalUses)
%76:i32 = lshr %75, 19:i32
infer %76

; *****
; For LLVM instruction:
;  %190 = or i32 %189, %188
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %31, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
infer %78

; *****
; For LLVM instruction:
;  %191 = xor i32 %190, %81
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %31, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %7
infer %79

; *****
; For LLVM instruction:
;  %192 = add i32 %191, %186
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
infer %80

; *****
; For LLVM instruction:
;  %193 = shl i32 %192, 18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79 (hasExternalUses)
%81:i32 = shl %80, 18:i32
infer %81

; *****
; For LLVM instruction:
;  %194 = lshr i32 %192, 14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79 (hasExternalUses)
%81:i32 = lshr %80, 14:i32
infer %81

; *****
; For LLVM instruction:
;  %195 = or i32 %194, %193
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
%81:i32 = shl %80, 18:i32
%82:i32 = lshr %80, 14:i32
%83:i32 = or %81, %82
infer %83

; *****
; For LLVM instruction:
;  %196 = xor i32 %195, %116
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
%81:i32 = shl %80, 18:i32
%82:i32 = lshr %80, 14:i32
%83:i32 = or %81, %82
%84:i32 = xor %83, %23
infer %84

; *****
; For LLVM instruction:
;  %197 = add i32 %136, %101
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = var
%12:i32 = add %11, %8
%13:i32 = shl %12, 7:i32
%14:i32 = lshr %12, 25:i32
%15:i32 = or %13, %14
%16:i32 = xor %10, %15 (hasExternalUses)
%17:i32 = add %8, %16
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %9, %20 (hasExternalUses)
%22:i32 = add %21, %16
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %11, %25 (hasExternalUses)
%27:i32 = add %21, %26
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
infer %32

; *****
; For LLVM instruction:
;  %198 = shl i32 %197, 7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = var
%12:i32 = add %11, %8
%13:i32 = shl %12, 7:i32
%14:i32 = lshr %12, 25:i32
%15:i32 = or %13, %14
%16:i32 = xor %10, %15 (hasExternalUses)
%17:i32 = add %8, %16
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %9, %20 (hasExternalUses)
%22:i32 = add %21, %16
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %11, %25 (hasExternalUses)
%27:i32 = add %21, %26
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31 (hasExternalUses)
%33:i32 = shl %32, 7:i32
infer %33

; *****
; For LLVM instruction:
;  %199 = lshr i32 %197, 25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = var
%12:i32 = add %11, %8
%13:i32 = shl %12, 7:i32
%14:i32 = lshr %12, 25:i32
%15:i32 = or %13, %14
%16:i32 = xor %10, %15 (hasExternalUses)
%17:i32 = add %8, %16
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %9, %20 (hasExternalUses)
%22:i32 = add %21, %16
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %11, %25 (hasExternalUses)
%27:i32 = add %21, %26
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31 (hasExternalUses)
%33:i32 = lshr %32, 25:i32
infer %33

; *****
; For LLVM instruction:
;  %200 = or i32 %199, %198
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = var
%12:i32 = add %11, %8
%13:i32 = shl %12, 7:i32
%14:i32 = lshr %12, 25:i32
%15:i32 = or %13, %14
%16:i32 = xor %10, %15 (hasExternalUses)
%17:i32 = add %8, %16
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %9, %20 (hasExternalUses)
%22:i32 = add %21, %16
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %11, %25 (hasExternalUses)
%27:i32 = add %21, %26
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
infer %35

; *****
; For LLVM instruction:
;  %201 = xor i32 %200, %151
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = var
%12:i32 = add %11, %8
%13:i32 = shl %12, 7:i32
%14:i32 = lshr %12, 25:i32
%15:i32 = or %13, %14
%16:i32 = xor %10, %15 (hasExternalUses)
%17:i32 = add %8, %16
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %9, %20 (hasExternalUses)
%22:i32 = add %21, %16
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %11, %25 (hasExternalUses)
%27:i32 = add %21, %26
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54
infer %55

; *****
; For LLVM instruction:
;  %202 = add i32 %201, %136
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
infer %56

; *****
; For LLVM instruction:
;  %203 = shl i32 %202, 9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55 (hasExternalUses)
%57:i32 = shl %56, 9:i32
infer %57

; *****
; For LLVM instruction:
;  %204 = lshr i32 %202, 23
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55 (hasExternalUses)
%57:i32 = lshr %56, 23:i32
infer %57

; *****
; For LLVM instruction:
;  %205 = or i32 %204, %203
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
infer %59

; *****
; For LLVM instruction:
;  %206 = xor i32 %205, %86
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73
infer %74

; *****
; For LLVM instruction:
;  %207 = add i32 %206, %201
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = var
%12:i32 = add %11, %8
%13:i32 = shl %12, 7:i32
%14:i32 = lshr %12, 25:i32
%15:i32 = or %13, %14
%16:i32 = xor %10, %15 (hasExternalUses)
%17:i32 = add %8, %16
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %9, %20 (hasExternalUses)
%22:i32 = add %21, %16
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %11, %25 (hasExternalUses)
%27:i32 = add %21, %26
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %31, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
infer %75

; *****
; For LLVM instruction:
;  %208 = shl i32 %207, 13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = var
%12:i32 = add %11, %8
%13:i32 = shl %12, 7:i32
%14:i32 = lshr %12, 25:i32
%15:i32 = or %13, %14
%16:i32 = xor %10, %15 (hasExternalUses)
%17:i32 = add %8, %16
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %9, %20 (hasExternalUses)
%22:i32 = add %21, %16
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %11, %25 (hasExternalUses)
%27:i32 = add %21, %26
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %31, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74 (hasExternalUses)
%76:i32 = shl %75, 13:i32
infer %76

; *****
; For LLVM instruction:
;  %209 = lshr i32 %207, 19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = var
%12:i32 = add %11, %8
%13:i32 = shl %12, 7:i32
%14:i32 = lshr %12, 25:i32
%15:i32 = or %13, %14
%16:i32 = xor %10, %15 (hasExternalUses)
%17:i32 = add %8, %16
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %9, %20 (hasExternalUses)
%22:i32 = add %21, %16
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %11, %25 (hasExternalUses)
%27:i32 = add %21, %26
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %31, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74 (hasExternalUses)
%76:i32 = lshr %75, 19:i32
infer %76

; *****
; For LLVM instruction:
;  %210 = or i32 %209, %208
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = var
%12:i32 = add %11, %8
%13:i32 = shl %12, 7:i32
%14:i32 = lshr %12, 25:i32
%15:i32 = or %13, %14
%16:i32 = xor %10, %15 (hasExternalUses)
%17:i32 = add %8, %16
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %9, %20 (hasExternalUses)
%22:i32 = add %21, %16
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %11, %25 (hasExternalUses)
%27:i32 = add %21, %26
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %31, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
infer %78

; *****
; For LLVM instruction:
;  %211 = xor i32 %210, %101
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = var
%12:i32 = add %11, %8
%13:i32 = shl %12, 7:i32
%14:i32 = lshr %12, 25:i32
%15:i32 = or %13, %14
%16:i32 = xor %10, %15 (hasExternalUses)
%17:i32 = add %8, %16
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %9, %20 (hasExternalUses)
%22:i32 = add %21, %16
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %11, %25 (hasExternalUses)
%27:i32 = add %21, %26
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %31, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %7
infer %79

; *****
; For LLVM instruction:
;  %212 = add i32 %211, %206
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
infer %80

; *****
; For LLVM instruction:
;  %213 = shl i32 %212, 18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79 (hasExternalUses)
%81:i32 = shl %80, 18:i32
infer %81

; *****
; For LLVM instruction:
;  %214 = lshr i32 %212, 14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79 (hasExternalUses)
%81:i32 = lshr %80, 14:i32
infer %81

; *****
; For LLVM instruction:
;  %215 = or i32 %214, %213
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
%81:i32 = shl %80, 18:i32
%82:i32 = lshr %80, 14:i32
%83:i32 = or %81, %82
infer %83

; *****
; For LLVM instruction:
;  %216 = xor i32 %215, %136
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
%81:i32 = shl %80, 18:i32
%82:i32 = lshr %80, 14:i32
%83:i32 = or %81, %82
%84:i32 = xor %83, %23
infer %84

; *****
; For LLVM instruction:
;  %217 = add i32 %156, %121
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
infer %32

; *****
; For LLVM instruction:
;  %218 = shl i32 %217, 7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31 (hasExternalUses)
%33:i32 = shl %32, 7:i32
infer %33

; *****
; For LLVM instruction:
;  %219 = lshr i32 %217, 25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31 (hasExternalUses)
%33:i32 = lshr %32, 25:i32
infer %33

; *****
; For LLVM instruction:
;  %220 = or i32 %219, %218
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
infer %35

; *****
; For LLVM instruction:
;  %221 = xor i32 %220, %91
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54
infer %55

; *****
; For LLVM instruction:
;  %222 = add i32 %221, %156
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
infer %56

; *****
; For LLVM instruction:
;  %223 = shl i32 %222, 9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55 (hasExternalUses)
%57:i32 = shl %56, 9:i32
infer %57

; *****
; For LLVM instruction:
;  %224 = lshr i32 %222, 23
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55 (hasExternalUses)
%57:i32 = lshr %56, 23:i32
infer %57

; *****
; For LLVM instruction:
;  %225 = or i32 %224, %223
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
infer %59

; *****
; For LLVM instruction:
;  %226 = xor i32 %225, %106
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73
infer %74

; *****
; For LLVM instruction:
;  %227 = add i32 %226, %221
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
infer %75

; *****
; For LLVM instruction:
;  %228 = shl i32 %227, 13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74 (hasExternalUses)
%76:i32 = shl %75, 13:i32
infer %76

; *****
; For LLVM instruction:
;  %229 = lshr i32 %227, 19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74 (hasExternalUses)
%76:i32 = lshr %75, 19:i32
infer %76

; *****
; For LLVM instruction:
;  %230 = or i32 %229, %228
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
infer %78

; *****
; For LLVM instruction:
;  %231 = xor i32 %230, %121
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31
infer %79

; *****
; For LLVM instruction:
;  %232 = add i32 %231, %226
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
infer %80

; *****
; For LLVM instruction:
;  %233 = shl i32 %232, 18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79 (hasExternalUses)
%81:i32 = shl %80, 18:i32
infer %81

; *****
; For LLVM instruction:
;  %234 = lshr i32 %232, 14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79 (hasExternalUses)
%81:i32 = lshr %80, 14:i32
infer %81

; *****
; For LLVM instruction:
;  %235 = or i32 %234, %233
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
%81:i32 = shl %80, 18:i32
%82:i32 = lshr %80, 14:i32
%83:i32 = or %81, %82
infer %83

; *****
; For LLVM instruction:
;  %236 = xor i32 %235, %156
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
%81:i32 = shl %80, 18:i32
%82:i32 = lshr %80, 14:i32
%83:i32 = or %81, %82
%84:i32 = xor %83, %23
infer %84

; *****
; For LLVM instruction:
;  %237 = add i32 %60, 2
; Looking for a replacement for:
%0:i32 = var (knownBits=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0) (range=[0,-1))
%1:i32 = add 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %238 = icmp slt i32 %237, %4
; Looking for a replacement for:
%0:i32 = var (knownBits=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0) (range=[0,-1))
%1:i32 = add 2:i32, %0 (hasExternalUses)
%2:i32 = var
%3:i1 = slt %1, %2
infer %3

; *****
; For LLVM instruction:
;  %240 = phi i32 [ %40, %19 ], [ %221, %59 ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = add %5, %2
%7:i32 = shl %6, 7:i32
%8:i32 = lshr %6, 25:i32
%9:i32 = or %7, %8
%10:i32 = xor %4, %9 (hasExternalUses)
%11:i32 = add %2, %10
%12:i32 = shl %11, 9:i32
%13:i32 = lshr %11, 23:i32
%14:i32 = or %12, %13
%15:i32 = xor %3, %14 (hasExternalUses)
%16:i32 = add %10, %15
%17:i32 = shl %16, 13:i32
%18:i32 = lshr %16, 19:i32
%19:i32 = or %17, %18
%20:i32 = xor %5, %19 (hasExternalUses)
%21:i32 = add %15, %20
%22:i32 = shl %21, 18:i32
%23:i32 = lshr %21, 14:i32
%24:i32 = or %22, %23
%25:i32 = xor %2, %24 (hasExternalUses)
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29:i32 = add %27, %28
%30:i32 = shl %29, 7:i32
%31:i32 = lshr %29, 25:i32
%32:i32 = or %30, %31
%33:i32 = xor %26, %32 (hasExternalUses)
%34:i32 = add %25, %33
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %40, %38
%42:i32 = shl %41, 7:i32
%43:i32 = lshr %41, 25:i32
%44:i32 = or %42, %43
%45:i32 = xor %39, %44 (hasExternalUses)
%46:i32 = var
%47:i32 = add %40, %45
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %46, %50 (hasExternalUses)
%52:i32 = add %45, %51
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55 (hasExternalUses)
%57:i32 = xor %37, %56 (hasExternalUses)
%58:i32 = phi %0, %1, %57
infer %58

; *****
; For LLVM instruction:
;  %241 = phi i32 [ %43, %19 ], [ %226, %59 ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = add %5, %2
%7:i32 = shl %6, 7:i32
%8:i32 = lshr %6, 25:i32
%9:i32 = or %7, %8
%10:i32 = xor %4, %9 (hasExternalUses)
%11:i32 = add %2, %10
%12:i32 = shl %11, 9:i32
%13:i32 = lshr %11, 23:i32
%14:i32 = or %12, %13
%15:i32 = xor %3, %14 (hasExternalUses)
%16:i32 = add %10, %15
%17:i32 = shl %16, 13:i32
%18:i32 = lshr %16, 19:i32
%19:i32 = or %17, %18
%20:i32 = xor %5, %19 (hasExternalUses)
%21:i32 = add %15, %20
%22:i32 = shl %21, 18:i32
%23:i32 = lshr %21, 14:i32
%24:i32 = or %22, %23
%25:i32 = xor %2, %24 (hasExternalUses)
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29:i32 = add %27, %28
%30:i32 = shl %29, 7:i32
%31:i32 = lshr %29, 25:i32
%32:i32 = or %30, %31
%33:i32 = xor %26, %32 (hasExternalUses)
%34:i32 = add %25, %33
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %40, %38
%42:i32 = shl %41, 7:i32
%43:i32 = lshr %41, 25:i32
%44:i32 = or %42, %43
%45:i32 = xor %39, %44 (hasExternalUses)
%46:i32 = var
%47:i32 = add %40, %45
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %46, %50 (hasExternalUses)
%52:i32 = add %45, %51
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55 (hasExternalUses)
%57:i32 = xor %37, %56 (hasExternalUses)
%58:i32 = add %25, %57
%59:i32 = shl %58, 9:i32
%60:i32 = lshr %58, 23:i32
%61:i32 = or %59, %60
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = var
%66:i32 = add %65, %63
%67:i32 = shl %66, 7:i32
%68:i32 = lshr %66, 25:i32
%69:i32 = or %67, %68
%70:i32 = xor %64, %69 (hasExternalUses)
%71:i32 = add %63, %70
%72:i32 = shl %71, 9:i32
%73:i32 = lshr %71, 23:i32
%74:i32 = or %72, %73
%75:i32 = xor %62, %74 (hasExternalUses)
%76:i32 = xor %61, %75 (hasExternalUses)
%77:i32 = phi %0, %1, %76
infer %77

; *****
; For LLVM instruction:
;  %242 = phi i32 [ %46, %19 ], [ %231, %59 ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = add %5, %2
%7:i32 = shl %6, 7:i32
%8:i32 = lshr %6, 25:i32
%9:i32 = or %7, %8
%10:i32 = xor %4, %9 (hasExternalUses)
%11:i32 = add %2, %10
%12:i32 = shl %11, 9:i32
%13:i32 = lshr %11, 23:i32
%14:i32 = or %12, %13
%15:i32 = xor %3, %14 (hasExternalUses)
%16:i32 = add %10, %15
%17:i32 = shl %16, 13:i32
%18:i32 = lshr %16, 19:i32
%19:i32 = or %17, %18
%20:i32 = xor %5, %19 (hasExternalUses)
%21:i32 = add %15, %20
%22:i32 = shl %21, 18:i32
%23:i32 = lshr %21, 14:i32
%24:i32 = or %22, %23
%25:i32 = xor %2, %24 (hasExternalUses)
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29:i32 = add %27, %28
%30:i32 = shl %29, 7:i32
%31:i32 = lshr %29, 25:i32
%32:i32 = or %30, %31
%33:i32 = xor %26, %32 (hasExternalUses)
%34:i32 = add %25, %33
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %40, %38
%42:i32 = shl %41, 7:i32
%43:i32 = lshr %41, 25:i32
%44:i32 = or %42, %43
%45:i32 = xor %39, %44 (hasExternalUses)
%46:i32 = var
%47:i32 = add %40, %45
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %46, %50 (hasExternalUses)
%52:i32 = add %45, %51
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55 (hasExternalUses)
%57:i32 = xor %37, %56 (hasExternalUses)
%58:i32 = add %25, %57
%59:i32 = shl %58, 9:i32
%60:i32 = lshr %58, 23:i32
%61:i32 = or %59, %60
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = var
%66:i32 = add %65, %63
%67:i32 = shl %66, 7:i32
%68:i32 = lshr %66, 25:i32
%69:i32 = or %67, %68
%70:i32 = xor %64, %69 (hasExternalUses)
%71:i32 = add %63, %70
%72:i32 = shl %71, 9:i32
%73:i32 = lshr %71, 23:i32
%74:i32 = or %72, %73
%75:i32 = xor %62, %74 (hasExternalUses)
%76:i32 = xor %61, %75 (hasExternalUses)
%77:i32 = add %57, %76
%78:i32 = shl %77, 13:i32
%79:i32 = lshr %77, 19:i32
%80:i32 = or %78, %79
%81:i32 = xor %80, %33 (hasExternalUses)
%82:i32 = phi %0, %1, %81
infer %82

; *****
; For LLVM instruction:
;  %243 = phi i32 [ %20, %19 ], [ %236, %59 ]
; Looking for a replacement for:
%0 = block 2
%1 = block 2
%2:i32 = var
%3:i32 = phi %1, %2, 1797285236:i32
%4:i32 = var
%5:i32 = var
%6:i32 = var
%7:i32 = var
%8:i32 = add %7, %4
%9:i32 = shl %8, 7:i32
%10:i32 = lshr %8, 25:i32
%11:i32 = or %9, %10
%12:i32 = xor %6, %11 (hasExternalUses)
%13:i32 = add %4, %12
%14:i32 = shl %13, 9:i32
%15:i32 = lshr %13, 23:i32
%16:i32 = or %14, %15
%17:i32 = xor %5, %16 (hasExternalUses)
%18:i32 = add %12, %17
%19:i32 = shl %18, 13:i32
%20:i32 = lshr %18, 19:i32
%21:i32 = or %19, %20
%22:i32 = xor %7, %21 (hasExternalUses)
%23:i32 = add %17, %22
%24:i32 = shl %23, 18:i32
%25:i32 = lshr %23, 14:i32
%26:i32 = or %24, %25
%27:i32 = xor %4, %26
%28:i32 = var
%29:i32 = var
%30:i32 = var
%31:i32 = add %29, %30
%32:i32 = shl %31, 7:i32
%33:i32 = lshr %31, 25:i32
%34:i32 = or %32, %33
%35:i32 = xor %28, %34 (hasExternalUses)
%36:i32 = add %27, %35
%37:i32 = shl %36, 7:i32
%38:i32 = lshr %36, 25:i32
%39:i32 = or %37, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = add %42, %40
%44:i32 = shl %43, 7:i32
%45:i32 = lshr %43, 25:i32
%46:i32 = or %44, %45
%47:i32 = xor %41, %46 (hasExternalUses)
%48:i32 = var
%49:i32 = add %42, %47
%50:i32 = shl %49, 9:i32
%51:i32 = lshr %49, 23:i32
%52:i32 = or %50, %51
%53:i32 = xor %48, %52 (hasExternalUses)
%54:i32 = add %47, %53
%55:i32 = shl %54, 13:i32
%56:i32 = lshr %54, 19:i32
%57:i32 = or %55, %56
%58:i32 = xor %40, %57 (hasExternalUses)
%59:i32 = xor %39, %58 (hasExternalUses)
%60:i32 = add %27, %59
%61:i32 = shl %60, 9:i32
%62:i32 = lshr %60, 23:i32
%63:i32 = or %61, %62
%64:i32 = var
%65:i32 = var
%66:i32 = var
%67:i32 = var
%68:i32 = add %67, %65
%69:i32 = shl %68, 7:i32
%70:i32 = lshr %68, 25:i32
%71:i32 = or %69, %70
%72:i32 = xor %66, %71 (hasExternalUses)
%73:i32 = add %65, %72
%74:i32 = shl %73, 9:i32
%75:i32 = lshr %73, 23:i32
%76:i32 = or %74, %75
%77:i32 = xor %64, %76 (hasExternalUses)
%78:i32 = xor %63, %77 (hasExternalUses)
%79:i32 = add %59, %78
%80:i32 = shl %79, 13:i32
%81:i32 = lshr %79, 19:i32
%82:i32 = or %80, %81
%83:i32 = xor %82, %35 (hasExternalUses)
%84:i32 = add %78, %83
%85:i32 = shl %84, 18:i32
%86:i32 = lshr %84, 14:i32
%87:i32 = or %85, %86
%88:i32 = xor %87, %27 (hasExternalUses)
%89:i32 = phi %0, %3, %88
infer %89

; *****
; For LLVM instruction:
;  %244 = phi i32 [ %37, %19 ], [ %201, %59 ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = add %3, %4
%6:i32 = shl %5, 7:i32
%7:i32 = lshr %5, 25:i32
%8:i32 = or %6, %7
%9:i32 = xor %2, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = var
%12:i32 = var
%13:i32 = var
%14:i32 = add %13, %10
%15:i32 = shl %14, 7:i32
%16:i32 = lshr %14, 25:i32
%17:i32 = or %15, %16
%18:i32 = xor %12, %17 (hasExternalUses)
%19:i32 = add %10, %18
%20:i32 = shl %19, 9:i32
%21:i32 = lshr %19, 23:i32
%22:i32 = or %20, %21
%23:i32 = xor %11, %22 (hasExternalUses)
%24:i32 = add %23, %18
%25:i32 = shl %24, 13:i32
%26:i32 = lshr %24, 19:i32
%27:i32 = or %25, %26
%28:i32 = xor %13, %27 (hasExternalUses)
%29:i32 = add %23, %28
%30:i32 = shl %29, 18:i32
%31:i32 = lshr %29, 14:i32
%32:i32 = or %30, %31
%33:i32 = xor %10, %32 (hasExternalUses)
%34:i32 = add %9, %33
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %38, %40
%42:i32 = shl %41, 7:i32
%43:i32 = lshr %41, 25:i32
%44:i32 = or %42, %43
%45:i32 = xor %39, %44 (hasExternalUses)
%46:i32 = var
%47:i32 = add %40, %45
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %46, %50 (hasExternalUses)
%52:i32 = add %45, %51
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55 (hasExternalUses)
%57:i32 = xor %37, %56 (hasExternalUses)
%58:i32 = phi %0, %1, %57
infer %58

; *****
; For LLVM instruction:
;  %245 = phi i32 [ %22, %19 ], [ %216, %59 ]
; Looking for a replacement for:
%0 = block 2
%1 = block 2
%2:i32 = var
%3:i32 = phi %1, %2, 2036477234:i32
%4:i32 = var
%5:i32 = var
%6:i32 = var
%7:i32 = var
%8:i32 = add %7, %4
%9:i32 = shl %8, 7:i32
%10:i32 = lshr %8, 25:i32
%11:i32 = or %9, %10
%12:i32 = xor %6, %11 (hasExternalUses)
%13:i32 = add %4, %12
%14:i32 = shl %13, 9:i32
%15:i32 = lshr %13, 23:i32
%16:i32 = or %14, %15
%17:i32 = xor %5, %16 (hasExternalUses)
%18:i32 = add %17, %12
%19:i32 = shl %18, 13:i32
%20:i32 = lshr %18, 19:i32
%21:i32 = or %19, %20
%22:i32 = xor %7, %21 (hasExternalUses)
%23:i32 = add %17, %22
%24:i32 = shl %23, 18:i32
%25:i32 = lshr %23, 14:i32
%26:i32 = or %24, %25
%27:i32 = xor %4, %26
%28:i32 = var
%29:i32 = var
%30:i32 = var
%31:i32 = add %29, %30
%32:i32 = shl %31, 7:i32
%33:i32 = lshr %31, 25:i32
%34:i32 = or %32, %33
%35:i32 = xor %28, %34 (hasExternalUses)
%36:i32 = add %35, %27
%37:i32 = shl %36, 7:i32
%38:i32 = lshr %36, 25:i32
%39:i32 = or %37, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = add %40, %42
%44:i32 = shl %43, 7:i32
%45:i32 = lshr %43, 25:i32
%46:i32 = or %44, %45
%47:i32 = xor %41, %46 (hasExternalUses)
%48:i32 = var
%49:i32 = add %42, %47
%50:i32 = shl %49, 9:i32
%51:i32 = lshr %49, 23:i32
%52:i32 = or %50, %51
%53:i32 = xor %48, %52 (hasExternalUses)
%54:i32 = add %47, %53
%55:i32 = shl %54, 13:i32
%56:i32 = lshr %54, 19:i32
%57:i32 = or %55, %56
%58:i32 = xor %40, %57 (hasExternalUses)
%59:i32 = xor %39, %58 (hasExternalUses)
%60:i32 = add %27, %59
%61:i32 = shl %60, 9:i32
%62:i32 = lshr %60, 23:i32
%63:i32 = or %61, %62
%64:i32 = var
%65:i32 = var
%66:i32 = var
%67:i32 = var
%68:i32 = add %65, %67
%69:i32 = shl %68, 7:i32
%70:i32 = lshr %68, 25:i32
%71:i32 = or %69, %70
%72:i32 = xor %66, %71 (hasExternalUses)
%73:i32 = add %65, %72
%74:i32 = shl %73, 9:i32
%75:i32 = lshr %73, 23:i32
%76:i32 = or %74, %75
%77:i32 = xor %64, %76 (hasExternalUses)
%78:i32 = xor %63, %77 (hasExternalUses)
%79:i32 = add %59, %78
%80:i32 = shl %79, 13:i32
%81:i32 = lshr %79, 19:i32
%82:i32 = or %80, %81
%83:i32 = xor %82, %35 (hasExternalUses)
%84:i32 = add %78, %83
%85:i32 = shl %84, 18:i32
%86:i32 = lshr %84, 14:i32
%87:i32 = or %85, %86
%88:i32 = xor %87, %27 (hasExternalUses)
%89:i32 = phi %0, %3, %88
infer %89

; *****
; For LLVM instruction:
;  %246 = phi i32 [ %57, %19 ], [ %211, %59 ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = add %3, %4
%6:i32 = shl %5, 7:i32
%7:i32 = lshr %5, 25:i32
%8:i32 = or %6, %7
%9:i32 = xor %2, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = var
%12:i32 = var
%13:i32 = var
%14:i32 = add %13, %10
%15:i32 = shl %14, 7:i32
%16:i32 = lshr %14, 25:i32
%17:i32 = or %15, %16
%18:i32 = xor %12, %17 (hasExternalUses)
%19:i32 = add %10, %18
%20:i32 = shl %19, 9:i32
%21:i32 = lshr %19, 23:i32
%22:i32 = or %20, %21
%23:i32 = xor %11, %22 (hasExternalUses)
%24:i32 = add %23, %18
%25:i32 = shl %24, 13:i32
%26:i32 = lshr %24, 19:i32
%27:i32 = or %25, %26
%28:i32 = xor %13, %27 (hasExternalUses)
%29:i32 = add %23, %28
%30:i32 = shl %29, 18:i32
%31:i32 = lshr %29, 14:i32
%32:i32 = or %30, %31
%33:i32 = xor %10, %32 (hasExternalUses)
%34:i32 = add %9, %33
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %38, %40
%42:i32 = shl %41, 7:i32
%43:i32 = lshr %41, 25:i32
%44:i32 = or %42, %43
%45:i32 = xor %39, %44 (hasExternalUses)
%46:i32 = var
%47:i32 = add %40, %45
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %46, %50 (hasExternalUses)
%52:i32 = add %45, %51
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55 (hasExternalUses)
%57:i32 = xor %37, %56 (hasExternalUses)
%58:i32 = add %33, %57
%59:i32 = shl %58, 9:i32
%60:i32 = lshr %58, 23:i32
%61:i32 = or %59, %60
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = var
%66:i32 = add %63, %65
%67:i32 = shl %66, 7:i32
%68:i32 = lshr %66, 25:i32
%69:i32 = or %67, %68
%70:i32 = xor %64, %69 (hasExternalUses)
%71:i32 = add %63, %70
%72:i32 = shl %71, 9:i32
%73:i32 = lshr %71, 23:i32
%74:i32 = or %72, %73
%75:i32 = xor %62, %74 (hasExternalUses)
%76:i32 = xor %61, %75 (hasExternalUses)
%77:i32 = add %57, %76
%78:i32 = shl %77, 13:i32
%79:i32 = lshr %77, 19:i32
%80:i32 = or %78, %79
%81:i32 = xor %80, %9 (hasExternalUses)
%82:i32 = phi %0, %1, %81
infer %82

; *****
; For LLVM instruction:
;  %247 = phi i32 [ %54, %19 ], [ %206, %59 ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = add %5, %2
%7:i32 = shl %6, 7:i32
%8:i32 = lshr %6, 25:i32
%9:i32 = or %7, %8
%10:i32 = xor %4, %9 (hasExternalUses)
%11:i32 = add %2, %10
%12:i32 = shl %11, 9:i32
%13:i32 = lshr %11, 23:i32
%14:i32 = or %12, %13
%15:i32 = xor %3, %14 (hasExternalUses)
%16:i32 = add %15, %10
%17:i32 = shl %16, 13:i32
%18:i32 = lshr %16, 19:i32
%19:i32 = or %17, %18
%20:i32 = xor %5, %19 (hasExternalUses)
%21:i32 = add %15, %20
%22:i32 = shl %21, 18:i32
%23:i32 = lshr %21, 14:i32
%24:i32 = or %22, %23
%25:i32 = xor %2, %24 (hasExternalUses)
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29:i32 = add %27, %28
%30:i32 = shl %29, 7:i32
%31:i32 = lshr %29, 25:i32
%32:i32 = or %30, %31
%33:i32 = xor %26, %32 (hasExternalUses)
%34:i32 = add %33, %25
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %38, %40
%42:i32 = shl %41, 7:i32
%43:i32 = lshr %41, 25:i32
%44:i32 = or %42, %43
%45:i32 = xor %39, %44 (hasExternalUses)
%46:i32 = var
%47:i32 = add %40, %45
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %46, %50 (hasExternalUses)
%52:i32 = add %45, %51
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55 (hasExternalUses)
%57:i32 = xor %37, %56 (hasExternalUses)
%58:i32 = add %25, %57
%59:i32 = shl %58, 9:i32
%60:i32 = lshr %58, 23:i32
%61:i32 = or %59, %60
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = var
%66:i32 = add %63, %65
%67:i32 = shl %66, 7:i32
%68:i32 = lshr %66, 25:i32
%69:i32 = or %67, %68
%70:i32 = xor %64, %69 (hasExternalUses)
%71:i32 = add %63, %70
%72:i32 = shl %71, 9:i32
%73:i32 = lshr %71, 23:i32
%74:i32 = or %72, %73
%75:i32 = xor %62, %74 (hasExternalUses)
%76:i32 = xor %61, %75 (hasExternalUses)
%77:i32 = phi %0, %1, %76
infer %77

; *****
; For LLVM instruction:
;  %248 = phi i32 [ %51, %19 ], [ %186, %59 ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = add %3, %2
%6:i32 = shl %5, 7:i32
%7:i32 = lshr %5, 25:i32
%8:i32 = or %6, %7
%9:i32 = xor %4, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = add %2, %9
%12:i32 = shl %11, 9:i32
%13:i32 = lshr %11, 23:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = add %9, %15
%17:i32 = shl %16, 13:i32
%18:i32 = lshr %16, 19:i32
%19:i32 = or %17, %18
%20:i32 = xor %3, %19 (hasExternalUses)
%21:i32 = add %20, %15
%22:i32 = shl %21, 18:i32
%23:i32 = lshr %21, 14:i32
%24:i32 = or %22, %23
%25:i32 = xor %2, %24 (hasExternalUses)
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29:i32 = add %27, %28
%30:i32 = shl %29, 7:i32
%31:i32 = lshr %29, 25:i32
%32:i32 = or %30, %31
%33:i32 = xor %26, %32 (hasExternalUses)
%34:i32 = add %33, %25
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = var
%42:i32 = add %38, %40
%43:i32 = shl %42, 7:i32
%44:i32 = lshr %42, 25:i32
%45:i32 = or %43, %44
%46:i32 = xor %41, %45 (hasExternalUses)
%47:i32 = add %40, %46
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %39, %50 (hasExternalUses)
%52:i32 = add %51, %46
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55 (hasExternalUses)
%57:i32 = xor %37, %56 (hasExternalUses)
%58:i32 = add %25, %57
%59:i32 = shl %58, 9:i32
%60:i32 = lshr %58, 23:i32
%61:i32 = or %59, %60
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = var
%66:i32 = add %65, %63
%67:i32 = shl %66, 7:i32
%68:i32 = lshr %66, 25:i32
%69:i32 = or %67, %68
%70:i32 = xor %64, %69 (hasExternalUses)
%71:i32 = add %63, %70
%72:i32 = shl %71, 9:i32
%73:i32 = lshr %71, 23:i32
%74:i32 = or %72, %73
%75:i32 = xor %62, %74 (hasExternalUses)
%76:i32 = xor %61, %75 (hasExternalUses)
%77:i32 = phi %0, %1, %76
infer %77

; *****
; For LLVM instruction:
;  %249 = phi i32 [ %48, %19 ], [ %181, %59 ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = add %3, %4
%6:i32 = shl %5, 7:i32
%7:i32 = lshr %5, 25:i32
%8:i32 = or %6, %7
%9:i32 = xor %2, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = var
%12:i32 = var
%13:i32 = add %11, %10
%14:i32 = shl %13, 7:i32
%15:i32 = lshr %13, 25:i32
%16:i32 = or %14, %15
%17:i32 = xor %12, %16 (hasExternalUses)
%18:i32 = var
%19:i32 = add %10, %17
%20:i32 = shl %19, 9:i32
%21:i32 = lshr %19, 23:i32
%22:i32 = or %20, %21
%23:i32 = xor %18, %22 (hasExternalUses)
%24:i32 = add %17, %23
%25:i32 = shl %24, 13:i32
%26:i32 = lshr %24, 19:i32
%27:i32 = or %25, %26
%28:i32 = xor %11, %27 (hasExternalUses)
%29:i32 = add %28, %23
%30:i32 = shl %29, 18:i32
%31:i32 = lshr %29, 14:i32
%32:i32 = or %30, %31
%33:i32 = xor %10, %32 (hasExternalUses)
%34:i32 = add %9, %33
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = var
%42:i32 = add %38, %40
%43:i32 = shl %42, 7:i32
%44:i32 = lshr %42, 25:i32
%45:i32 = or %43, %44
%46:i32 = xor %41, %45 (hasExternalUses)
%47:i32 = add %40, %46
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %39, %50 (hasExternalUses)
%52:i32 = add %51, %46
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55 (hasExternalUses)
%57:i32 = xor %37, %56 (hasExternalUses)
%58:i32 = phi %0, %1, %57
infer %58

; *****
; For LLVM instruction:
;  %250 = phi i32 [ %23, %19 ], [ %196, %59 ]
; Looking for a replacement for:
%0 = block 2
%1 = block 2
%2:i32 = var
%3:i32 = phi %1, %2, 857760878:i32
%4:i32 = var
%5:i32 = var
%6:i32 = var
%7:i32 = add %5, %4
%8:i32 = shl %7, 7:i32
%9:i32 = lshr %7, 25:i32
%10:i32 = or %8, %9
%11:i32 = xor %6, %10 (hasExternalUses)
%12:i32 = var
%13:i32 = add %4, %11
%14:i32 = shl %13, 9:i32
%15:i32 = lshr %13, 23:i32
%16:i32 = or %14, %15
%17:i32 = xor %12, %16 (hasExternalUses)
%18:i32 = add %11, %17
%19:i32 = shl %18, 13:i32
%20:i32 = lshr %18, 19:i32
%21:i32 = or %19, %20
%22:i32 = xor %5, %21 (hasExternalUses)
%23:i32 = add %22, %17
%24:i32 = shl %23, 18:i32
%25:i32 = lshr %23, 14:i32
%26:i32 = or %24, %25
%27:i32 = xor %4, %26
%28:i32 = var
%29:i32 = var
%30:i32 = var
%31:i32 = add %29, %30
%32:i32 = shl %31, 7:i32
%33:i32 = lshr %31, 25:i32
%34:i32 = or %32, %33
%35:i32 = xor %28, %34 (hasExternalUses)
%36:i32 = add %35, %27
%37:i32 = shl %36, 7:i32
%38:i32 = lshr %36, 25:i32
%39:i32 = or %37, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %40, %42
%45:i32 = shl %44, 7:i32
%46:i32 = lshr %44, 25:i32
%47:i32 = or %45, %46
%48:i32 = xor %43, %47 (hasExternalUses)
%49:i32 = add %42, %48
%50:i32 = shl %49, 9:i32
%51:i32 = lshr %49, 23:i32
%52:i32 = or %50, %51
%53:i32 = xor %41, %52 (hasExternalUses)
%54:i32 = add %53, %48
%55:i32 = shl %54, 13:i32
%56:i32 = lshr %54, 19:i32
%57:i32 = or %55, %56
%58:i32 = xor %40, %57 (hasExternalUses)
%59:i32 = xor %39, %58 (hasExternalUses)
%60:i32 = add %27, %59
%61:i32 = shl %60, 9:i32
%62:i32 = lshr %60, 23:i32
%63:i32 = or %61, %62
%64:i32 = var
%65:i32 = var
%66:i32 = var
%67:i32 = var
%68:i32 = add %67, %65
%69:i32 = shl %68, 7:i32
%70:i32 = lshr %68, 25:i32
%71:i32 = or %69, %70
%72:i32 = xor %66, %71 (hasExternalUses)
%73:i32 = add %65, %72
%74:i32 = shl %73, 9:i32
%75:i32 = lshr %73, 23:i32
%76:i32 = or %74, %75
%77:i32 = xor %64, %76 (hasExternalUses)
%78:i32 = xor %63, %77 (hasExternalUses)
%79:i32 = add %59, %78
%80:i32 = shl %79, 13:i32
%81:i32 = lshr %79, 19:i32
%82:i32 = or %80, %81
%83:i32 = xor %82, %35 (hasExternalUses)
%84:i32 = add %78, %83
%85:i32 = shl %84, 18:i32
%86:i32 = lshr %84, 14:i32
%87:i32 = or %85, %86
%88:i32 = xor %87, %27 (hasExternalUses)
%89:i32 = phi %0, %3, %88
infer %89

; *****
; For LLVM instruction:
;  %251 = phi i32 [ %34, %19 ], [ %191, %59 ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = add %3, %4
%6:i32 = shl %5, 7:i32
%7:i32 = lshr %5, 25:i32
%8:i32 = or %6, %7
%9:i32 = xor %2, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = var
%12:i32 = var
%13:i32 = add %11, %10
%14:i32 = shl %13, 7:i32
%15:i32 = lshr %13, 25:i32
%16:i32 = or %14, %15
%17:i32 = xor %12, %16 (hasExternalUses)
%18:i32 = var
%19:i32 = add %10, %17
%20:i32 = shl %19, 9:i32
%21:i32 = lshr %19, 23:i32
%22:i32 = or %20, %21
%23:i32 = xor %18, %22 (hasExternalUses)
%24:i32 = add %17, %23
%25:i32 = shl %24, 13:i32
%26:i32 = lshr %24, 19:i32
%27:i32 = or %25, %26
%28:i32 = xor %11, %27 (hasExternalUses)
%29:i32 = add %28, %23
%30:i32 = shl %29, 18:i32
%31:i32 = lshr %29, 14:i32
%32:i32 = or %30, %31
%33:i32 = xor %10, %32 (hasExternalUses)
%34:i32 = add %9, %33
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = var
%42:i32 = add %38, %40
%43:i32 = shl %42, 7:i32
%44:i32 = lshr %42, 25:i32
%45:i32 = or %43, %44
%46:i32 = xor %41, %45 (hasExternalUses)
%47:i32 = add %40, %46
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %39, %50 (hasExternalUses)
%52:i32 = add %51, %46
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55 (hasExternalUses)
%57:i32 = xor %37, %56 (hasExternalUses)
%58:i32 = add %33, %57
%59:i32 = shl %58, 9:i32
%60:i32 = lshr %58, 23:i32
%61:i32 = or %59, %60
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = var
%66:i32 = add %65, %63
%67:i32 = shl %66, 7:i32
%68:i32 = lshr %66, 25:i32
%69:i32 = or %67, %68
%70:i32 = xor %64, %69 (hasExternalUses)
%71:i32 = add %63, %70
%72:i32 = shl %71, 9:i32
%73:i32 = lshr %71, 23:i32
%74:i32 = or %72, %73
%75:i32 = xor %62, %74 (hasExternalUses)
%76:i32 = xor %61, %75 (hasExternalUses)
%77:i32 = add %57, %76
%78:i32 = shl %77, 13:i32
%79:i32 = lshr %77, 19:i32
%80:i32 = or %78, %79
%81:i32 = xor %80, %9 (hasExternalUses)
%82:i32 = phi %0, %1, %81
infer %82

; *****
; For LLVM instruction:
;  %252 = phi i32 [ %31, %19 ], [ %171, %59 ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = add %2, %5
%7:i32 = shl %6, 7:i32
%8:i32 = lshr %6, 25:i32
%9:i32 = or %7, %8
%10:i32 = xor %4, %9 (hasExternalUses)
%11:i32 = add %2, %10
%12:i32 = shl %11, 9:i32
%13:i32 = lshr %11, 23:i32
%14:i32 = or %12, %13
%15:i32 = xor %3, %14 (hasExternalUses)
%16:i32 = add %10, %15
%17:i32 = shl %16, 13:i32
%18:i32 = lshr %16, 19:i32
%19:i32 = or %17, %18
%20:i32 = xor %5, %19 (hasExternalUses)
%21:i32 = add %15, %20
%22:i32 = shl %21, 18:i32
%23:i32 = lshr %21, 14:i32
%24:i32 = or %22, %23
%25:i32 = xor %2, %24 (hasExternalUses)
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29:i32 = add %27, %28
%30:i32 = shl %29, 7:i32
%31:i32 = lshr %29, 25:i32
%32:i32 = or %30, %31
%33:i32 = xor %26, %32 (hasExternalUses)
%34:i32 = add %25, %33
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %38, %40
%42:i32 = shl %41, 7:i32
%43:i32 = lshr %41, 25:i32
%44:i32 = or %42, %43
%45:i32 = xor %39, %44 (hasExternalUses)
%46:i32 = var
%47:i32 = add %40, %45
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %46, %50 (hasExternalUses)
%52:i32 = add %45, %51
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55 (hasExternalUses)
%57:i32 = xor %37, %56 (hasExternalUses)
%58:i32 = add %25, %57
%59:i32 = shl %58, 9:i32
%60:i32 = lshr %58, 23:i32
%61:i32 = or %59, %60
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = var
%66:i32 = add %65, %63
%67:i32 = shl %66, 7:i32
%68:i32 = lshr %66, 25:i32
%69:i32 = or %67, %68
%70:i32 = xor %64, %69 (hasExternalUses)
%71:i32 = add %63, %70
%72:i32 = shl %71, 9:i32
%73:i32 = lshr %71, 23:i32
%74:i32 = or %72, %73
%75:i32 = xor %62, %74 (hasExternalUses)
%76:i32 = xor %61, %75 (hasExternalUses)
%77:i32 = add %57, %76
%78:i32 = shl %77, 13:i32
%79:i32 = lshr %77, 19:i32
%80:i32 = or %78, %79
%81:i32 = xor %80, %33 (hasExternalUses)
%82:i32 = phi %0, %1, %81
infer %82

; *****
; For LLVM instruction:
;  %253 = phi i32 [ %28, %19 ], [ %166, %59 ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = add %2, %5
%7:i32 = shl %6, 7:i32
%8:i32 = lshr %6, 25:i32
%9:i32 = or %7, %8
%10:i32 = xor %4, %9 (hasExternalUses)
%11:i32 = add %2, %10
%12:i32 = shl %11, 9:i32
%13:i32 = lshr %11, 23:i32
%14:i32 = or %12, %13
%15:i32 = xor %3, %14 (hasExternalUses)
%16:i32 = add %10, %15
%17:i32 = shl %16, 13:i32
%18:i32 = lshr %16, 19:i32
%19:i32 = or %17, %18
%20:i32 = xor %5, %19 (hasExternalUses)
%21:i32 = add %15, %20
%22:i32 = shl %21, 18:i32
%23:i32 = lshr %21, 14:i32
%24:i32 = or %22, %23
%25:i32 = xor %2, %24 (hasExternalUses)
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29:i32 = add %27, %28
%30:i32 = shl %29, 7:i32
%31:i32 = lshr %29, 25:i32
%32:i32 = or %30, %31
%33:i32 = xor %26, %32 (hasExternalUses)
%34:i32 = add %25, %33
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %38, %40
%42:i32 = shl %41, 7:i32
%43:i32 = lshr %41, 25:i32
%44:i32 = or %42, %43
%45:i32 = xor %39, %44 (hasExternalUses)
%46:i32 = var
%47:i32 = add %40, %45
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %46, %50 (hasExternalUses)
%52:i32 = add %45, %51
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55 (hasExternalUses)
%57:i32 = xor %37, %56 (hasExternalUses)
%58:i32 = add %25, %57
%59:i32 = shl %58, 9:i32
%60:i32 = lshr %58, 23:i32
%61:i32 = or %59, %60
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = var
%66:i32 = add %65, %63
%67:i32 = shl %66, 7:i32
%68:i32 = lshr %66, 25:i32
%69:i32 = or %67, %68
%70:i32 = xor %64, %69 (hasExternalUses)
%71:i32 = add %63, %70
%72:i32 = shl %71, 9:i32
%73:i32 = lshr %71, 23:i32
%74:i32 = or %72, %73
%75:i32 = xor %62, %74 (hasExternalUses)
%76:i32 = xor %61, %75 (hasExternalUses)
%77:i32 = phi %0, %1, %76
infer %77

; *****
; For LLVM instruction:
;  %254 = phi i32 [ %25, %19 ], [ %161, %59 ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = add %2, %5
%7:i32 = shl %6, 7:i32
%8:i32 = lshr %6, 25:i32
%9:i32 = or %7, %8
%10:i32 = xor %4, %9 (hasExternalUses)
%11:i32 = add %2, %10
%12:i32 = shl %11, 9:i32
%13:i32 = lshr %11, 23:i32
%14:i32 = or %12, %13
%15:i32 = xor %3, %14 (hasExternalUses)
%16:i32 = add %10, %15
%17:i32 = shl %16, 13:i32
%18:i32 = lshr %16, 19:i32
%19:i32 = or %17, %18
%20:i32 = xor %5, %19 (hasExternalUses)
%21:i32 = add %15, %20
%22:i32 = shl %21, 18:i32
%23:i32 = lshr %21, 14:i32
%24:i32 = or %22, %23
%25:i32 = xor %2, %24 (hasExternalUses)
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29:i32 = add %27, %28
%30:i32 = shl %29, 7:i32
%31:i32 = lshr %29, 25:i32
%32:i32 = or %30, %31
%33:i32 = xor %26, %32 (hasExternalUses)
%34:i32 = add %25, %33
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %38, %40
%42:i32 = shl %41, 7:i32
%43:i32 = lshr %41, 25:i32
%44:i32 = or %42, %43
%45:i32 = xor %39, %44 (hasExternalUses)
%46:i32 = var
%47:i32 = add %40, %45
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %46, %50 (hasExternalUses)
%52:i32 = add %45, %51
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55 (hasExternalUses)
%57:i32 = xor %37, %56 (hasExternalUses)
%58:i32 = phi %0, %1, %57
infer %58

; *****
; For LLVM instruction:
;  %255 = phi i32 [ %21, %19 ], [ %176, %59 ]
; Looking for a replacement for:
%0 = block 2
%1 = block 2
%2:i32 = var
%3:i32 = phi %1, %2, 1634760805:i32
%4:i32 = var
%5:i32 = var
%6:i32 = var
%7:i32 = var
%8:i32 = add %4, %7
%9:i32 = shl %8, 7:i32
%10:i32 = lshr %8, 25:i32
%11:i32 = or %9, %10
%12:i32 = xor %6, %11 (hasExternalUses)
%13:i32 = add %4, %12
%14:i32 = shl %13, 9:i32
%15:i32 = lshr %13, 23:i32
%16:i32 = or %14, %15
%17:i32 = xor %5, %16 (hasExternalUses)
%18:i32 = add %12, %17
%19:i32 = shl %18, 13:i32
%20:i32 = lshr %18, 19:i32
%21:i32 = or %19, %20
%22:i32 = xor %7, %21 (hasExternalUses)
%23:i32 = add %17, %22
%24:i32 = shl %23, 18:i32
%25:i32 = lshr %23, 14:i32
%26:i32 = or %24, %25
%27:i32 = xor %4, %26
%28:i32 = var
%29:i32 = var
%30:i32 = var
%31:i32 = add %29, %30
%32:i32 = shl %31, 7:i32
%33:i32 = lshr %31, 25:i32
%34:i32 = or %32, %33
%35:i32 = xor %28, %34 (hasExternalUses)
%36:i32 = add %27, %35
%37:i32 = shl %36, 7:i32
%38:i32 = lshr %36, 25:i32
%39:i32 = or %37, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = add %40, %42
%44:i32 = shl %43, 7:i32
%45:i32 = lshr %43, 25:i32
%46:i32 = or %44, %45
%47:i32 = xor %41, %46 (hasExternalUses)
%48:i32 = var
%49:i32 = add %42, %47
%50:i32 = shl %49, 9:i32
%51:i32 = lshr %49, 23:i32
%52:i32 = or %50, %51
%53:i32 = xor %48, %52 (hasExternalUses)
%54:i32 = add %47, %53
%55:i32 = shl %54, 13:i32
%56:i32 = lshr %54, 19:i32
%57:i32 = or %55, %56
%58:i32 = xor %40, %57 (hasExternalUses)
%59:i32 = xor %39, %58 (hasExternalUses)
%60:i32 = add %27, %59
%61:i32 = shl %60, 9:i32
%62:i32 = lshr %60, 23:i32
%63:i32 = or %61, %62
%64:i32 = var
%65:i32 = var
%66:i32 = var
%67:i32 = var
%68:i32 = add %67, %65
%69:i32 = shl %68, 7:i32
%70:i32 = lshr %68, 25:i32
%71:i32 = or %69, %70
%72:i32 = xor %66, %71 (hasExternalUses)
%73:i32 = add %65, %72
%74:i32 = shl %73, 9:i32
%75:i32 = lshr %73, 23:i32
%76:i32 = or %74, %75
%77:i32 = xor %64, %76 (hasExternalUses)
%78:i32 = xor %63, %77 (hasExternalUses)
%79:i32 = add %59, %78
%80:i32 = shl %79, 13:i32
%81:i32 = lshr %79, 19:i32
%82:i32 = or %80, %81
%83:i32 = xor %82, %35 (hasExternalUses)
%84:i32 = add %78, %83
%85:i32 = shl %84, 18:i32
%86:i32 = lshr %84, 14:i32
%87:i32 = or %85, %86
%88:i32 = xor %87, %27 (hasExternalUses)
%89:i32 = phi %0, %3, %88
infer %89

; *****
; For LLVM instruction:
;  %256 = add i32 %255, %21
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = phi %0, %1, 1634760805:i32
%3 = block 2
%4:i32 = var
%5:i32 = var
%6:i32 = var
%7:i32 = var
%8:i32 = add %4, %7
%9:i32 = shl %8, 7:i32
%10:i32 = lshr %8, 25:i32
%11:i32 = or %9, %10
%12:i32 = xor %6, %11
%13:i32 = add %4, %12
%14:i32 = shl %13, 9:i32
%15:i32 = lshr %13, 23:i32
%16:i32 = or %14, %15
%17:i32 = xor %5, %16
%18:i32 = add %12, %17
%19:i32 = shl %18, 13:i32
%20:i32 = lshr %18, 19:i32
%21:i32 = or %19, %20
%22:i32 = xor %7, %21
%23:i32 = add %17, %22
%24:i32 = shl %23, 18:i32
%25:i32 = lshr %23, 14:i32
%26:i32 = or %24, %25
%27:i32 = xor %4, %26
%28:i32 = var
%29:i32 = var
%30:i32 = var
%31:i32 = add %29, %30
%32:i32 = shl %31, 7:i32
%33:i32 = lshr %31, 25:i32
%34:i32 = or %32, %33
%35:i32 = xor %28, %34
%36:i32 = add %27, %35
%37:i32 = shl %36, 7:i32
%38:i32 = lshr %36, 25:i32
%39:i32 = or %37, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = add %40, %42
%44:i32 = shl %43, 7:i32
%45:i32 = lshr %43, 25:i32
%46:i32 = or %44, %45
%47:i32 = xor %41, %46
%48:i32 = var
%49:i32 = add %42, %47
%50:i32 = shl %49, 9:i32
%51:i32 = lshr %49, 23:i32
%52:i32 = or %50, %51
%53:i32 = xor %48, %52
%54:i32 = add %47, %53
%55:i32 = shl %54, 13:i32
%56:i32 = lshr %54, 19:i32
%57:i32 = or %55, %56
%58:i32 = xor %40, %57
%59:i32 = xor %39, %58
%60:i32 = add %27, %59
%61:i32 = shl %60, 9:i32
%62:i32 = lshr %60, 23:i32
%63:i32 = or %61, %62
%64:i32 = var
%65:i32 = var
%66:i32 = var
%67:i32 = var
%68:i32 = add %67, %65
%69:i32 = shl %68, 7:i32
%70:i32 = lshr %68, 25:i32
%71:i32 = or %69, %70
%72:i32 = xor %66, %71
%73:i32 = add %65, %72
%74:i32 = shl %73, 9:i32
%75:i32 = lshr %73, 23:i32
%76:i32 = or %74, %75
%77:i32 = xor %64, %76
%78:i32 = xor %63, %77
%79:i32 = add %59, %78
%80:i32 = shl %79, 13:i32
%81:i32 = lshr %79, 19:i32
%82:i32 = or %80, %81
%83:i32 = xor %82, %35
%84:i32 = add %78, %83
%85:i32 = shl %84, 18:i32
%86:i32 = lshr %84, 14:i32
%87:i32 = or %85, %86
%88:i32 = xor %87, %27
%89:i32 = phi %3, %2, %88
%90:i32 = add %2, %89
infer %90

; *****
; For LLVM instruction:
;  %259 = add i32 %254, %25
; Looking for a replacement for:
%0:i32 = var
%1 = block 2
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = add %2, %5
%7:i32 = shl %6, 7:i32
%8:i32 = lshr %6, 25:i32
%9:i32 = or %7, %8
%10:i32 = xor %4, %9
%11:i32 = add %2, %10
%12:i32 = shl %11, 9:i32
%13:i32 = lshr %11, 23:i32
%14:i32 = or %12, %13
%15:i32 = xor %3, %14
%16:i32 = add %10, %15
%17:i32 = shl %16, 13:i32
%18:i32 = lshr %16, 19:i32
%19:i32 = or %17, %18
%20:i32 = xor %5, %19
%21:i32 = add %15, %20
%22:i32 = shl %21, 18:i32
%23:i32 = lshr %21, 14:i32
%24:i32 = or %22, %23
%25:i32 = xor %2, %24
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29:i32 = add %27, %28
%30:i32 = shl %29, 7:i32
%31:i32 = lshr %29, 25:i32
%32:i32 = or %30, %31
%33:i32 = xor %26, %32
%34:i32 = add %25, %33
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %38, %40
%42:i32 = shl %41, 7:i32
%43:i32 = lshr %41, 25:i32
%44:i32 = or %42, %43
%45:i32 = xor %39, %44
%46:i32 = var
%47:i32 = add %40, %45
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %46, %50
%52:i32 = add %45, %51
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55
%57:i32 = xor %37, %56
%58:i32 = phi %1, %0, %57
%59:i32 = add %0, %58
infer %59

; *****
; For LLVM instruction:
;  %262 = add i32 %253, %28
; Looking for a replacement for:
%0:i32 = var
%1 = block 2
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = add %2, %5
%7:i32 = shl %6, 7:i32
%8:i32 = lshr %6, 25:i32
%9:i32 = or %7, %8
%10:i32 = xor %4, %9
%11:i32 = add %2, %10
%12:i32 = shl %11, 9:i32
%13:i32 = lshr %11, 23:i32
%14:i32 = or %12, %13
%15:i32 = xor %3, %14
%16:i32 = add %10, %15
%17:i32 = shl %16, 13:i32
%18:i32 = lshr %16, 19:i32
%19:i32 = or %17, %18
%20:i32 = xor %5, %19
%21:i32 = add %15, %20
%22:i32 = shl %21, 18:i32
%23:i32 = lshr %21, 14:i32
%24:i32 = or %22, %23
%25:i32 = xor %2, %24
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29:i32 = add %27, %28
%30:i32 = shl %29, 7:i32
%31:i32 = lshr %29, 25:i32
%32:i32 = or %30, %31
%33:i32 = xor %26, %32
%34:i32 = add %25, %33
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %38, %40
%42:i32 = shl %41, 7:i32
%43:i32 = lshr %41, 25:i32
%44:i32 = or %42, %43
%45:i32 = xor %39, %44
%46:i32 = var
%47:i32 = add %40, %45
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %46, %50
%52:i32 = add %45, %51
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55
%57:i32 = xor %37, %56
%58:i32 = add %25, %57
%59:i32 = shl %58, 9:i32
%60:i32 = lshr %58, 23:i32
%61:i32 = or %59, %60
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = var
%66:i32 = add %65, %63
%67:i32 = shl %66, 7:i32
%68:i32 = lshr %66, 25:i32
%69:i32 = or %67, %68
%70:i32 = xor %64, %69
%71:i32 = add %63, %70
%72:i32 = shl %71, 9:i32
%73:i32 = lshr %71, 23:i32
%74:i32 = or %72, %73
%75:i32 = xor %62, %74
%76:i32 = xor %61, %75
%77:i32 = phi %1, %0, %76
%78:i32 = add %0, %77
infer %78

; *****
; For LLVM instruction:
;  %265 = add i32 %252, %31
; Looking for a replacement for:
%0:i32 = var
%1 = block 2
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = add %2, %5
%7:i32 = shl %6, 7:i32
%8:i32 = lshr %6, 25:i32
%9:i32 = or %7, %8
%10:i32 = xor %4, %9
%11:i32 = add %2, %10
%12:i32 = shl %11, 9:i32
%13:i32 = lshr %11, 23:i32
%14:i32 = or %12, %13
%15:i32 = xor %3, %14
%16:i32 = add %10, %15
%17:i32 = shl %16, 13:i32
%18:i32 = lshr %16, 19:i32
%19:i32 = or %17, %18
%20:i32 = xor %5, %19
%21:i32 = add %15, %20
%22:i32 = shl %21, 18:i32
%23:i32 = lshr %21, 14:i32
%24:i32 = or %22, %23
%25:i32 = xor %2, %24
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29:i32 = add %27, %28
%30:i32 = shl %29, 7:i32
%31:i32 = lshr %29, 25:i32
%32:i32 = or %30, %31
%33:i32 = xor %26, %32
%34:i32 = add %25, %33
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %38, %40
%42:i32 = shl %41, 7:i32
%43:i32 = lshr %41, 25:i32
%44:i32 = or %42, %43
%45:i32 = xor %39, %44
%46:i32 = var
%47:i32 = add %40, %45
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %46, %50
%52:i32 = add %45, %51
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55
%57:i32 = xor %37, %56
%58:i32 = add %25, %57
%59:i32 = shl %58, 9:i32
%60:i32 = lshr %58, 23:i32
%61:i32 = or %59, %60
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = var
%66:i32 = add %65, %63
%67:i32 = shl %66, 7:i32
%68:i32 = lshr %66, 25:i32
%69:i32 = or %67, %68
%70:i32 = xor %64, %69
%71:i32 = add %63, %70
%72:i32 = shl %71, 9:i32
%73:i32 = lshr %71, 23:i32
%74:i32 = or %72, %73
%75:i32 = xor %62, %74
%76:i32 = xor %61, %75
%77:i32 = add %57, %76
%78:i32 = shl %77, 13:i32
%79:i32 = lshr %77, 19:i32
%80:i32 = or %78, %79
%81:i32 = xor %80, %33
%82:i32 = phi %1, %0, %81
%83:i32 = add %0, %82
infer %83

; *****
; For LLVM instruction:
;  %268 = add i32 %251, %34
; Looking for a replacement for:
%0:i32 = var
%1 = block 2
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = add %3, %4
%6:i32 = shl %5, 7:i32
%7:i32 = lshr %5, 25:i32
%8:i32 = or %6, %7
%9:i32 = xor %2, %8
%10:i32 = var
%11:i32 = var
%12:i32 = var
%13:i32 = add %11, %10
%14:i32 = shl %13, 7:i32
%15:i32 = lshr %13, 25:i32
%16:i32 = or %14, %15
%17:i32 = xor %12, %16
%18:i32 = var
%19:i32 = add %10, %17
%20:i32 = shl %19, 9:i32
%21:i32 = lshr %19, 23:i32
%22:i32 = or %20, %21
%23:i32 = xor %18, %22
%24:i32 = add %17, %23
%25:i32 = shl %24, 13:i32
%26:i32 = lshr %24, 19:i32
%27:i32 = or %25, %26
%28:i32 = xor %11, %27
%29:i32 = add %28, %23
%30:i32 = shl %29, 18:i32
%31:i32 = lshr %29, 14:i32
%32:i32 = or %30, %31
%33:i32 = xor %10, %32
%34:i32 = add %9, %33
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = var
%42:i32 = add %38, %40
%43:i32 = shl %42, 7:i32
%44:i32 = lshr %42, 25:i32
%45:i32 = or %43, %44
%46:i32 = xor %41, %45
%47:i32 = add %40, %46
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %39, %50
%52:i32 = add %51, %46
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55
%57:i32 = xor %37, %56
%58:i32 = add %33, %57
%59:i32 = shl %58, 9:i32
%60:i32 = lshr %58, 23:i32
%61:i32 = or %59, %60
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = var
%66:i32 = add %65, %63
%67:i32 = shl %66, 7:i32
%68:i32 = lshr %66, 25:i32
%69:i32 = or %67, %68
%70:i32 = xor %64, %69
%71:i32 = add %63, %70
%72:i32 = shl %71, 9:i32
%73:i32 = lshr %71, 23:i32
%74:i32 = or %72, %73
%75:i32 = xor %62, %74
%76:i32 = xor %61, %75
%77:i32 = add %57, %76
%78:i32 = shl %77, 13:i32
%79:i32 = lshr %77, 19:i32
%80:i32 = or %78, %79
%81:i32 = xor %80, %9
%82:i32 = phi %1, %0, %81
%83:i32 = add %0, %82
infer %83

; *****
; For LLVM instruction:
;  %271 = add i32 %250, %23
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = phi %0, %1, 857760878:i32
%3 = block 2
%4:i32 = var
%5:i32 = var
%6:i32 = var
%7:i32 = add %5, %4
%8:i32 = shl %7, 7:i32
%9:i32 = lshr %7, 25:i32
%10:i32 = or %8, %9
%11:i32 = xor %6, %10
%12:i32 = var
%13:i32 = add %4, %11
%14:i32 = shl %13, 9:i32
%15:i32 = lshr %13, 23:i32
%16:i32 = or %14, %15
%17:i32 = xor %12, %16
%18:i32 = add %11, %17
%19:i32 = shl %18, 13:i32
%20:i32 = lshr %18, 19:i32
%21:i32 = or %19, %20
%22:i32 = xor %5, %21
%23:i32 = add %22, %17
%24:i32 = shl %23, 18:i32
%25:i32 = lshr %23, 14:i32
%26:i32 = or %24, %25
%27:i32 = xor %4, %26
%28:i32 = var
%29:i32 = var
%30:i32 = var
%31:i32 = add %29, %30
%32:i32 = shl %31, 7:i32
%33:i32 = lshr %31, 25:i32
%34:i32 = or %32, %33
%35:i32 = xor %28, %34
%36:i32 = add %35, %27
%37:i32 = shl %36, 7:i32
%38:i32 = lshr %36, 25:i32
%39:i32 = or %37, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %40, %42
%45:i32 = shl %44, 7:i32
%46:i32 = lshr %44, 25:i32
%47:i32 = or %45, %46
%48:i32 = xor %43, %47
%49:i32 = add %42, %48
%50:i32 = shl %49, 9:i32
%51:i32 = lshr %49, 23:i32
%52:i32 = or %50, %51
%53:i32 = xor %41, %52
%54:i32 = add %53, %48
%55:i32 = shl %54, 13:i32
%56:i32 = lshr %54, 19:i32
%57:i32 = or %55, %56
%58:i32 = xor %40, %57
%59:i32 = xor %39, %58
%60:i32 = add %27, %59
%61:i32 = shl %60, 9:i32
%62:i32 = lshr %60, 23:i32
%63:i32 = or %61, %62
%64:i32 = var
%65:i32 = var
%66:i32 = var
%67:i32 = var
%68:i32 = add %67, %65
%69:i32 = shl %68, 7:i32
%70:i32 = lshr %68, 25:i32
%71:i32 = or %69, %70
%72:i32 = xor %66, %71
%73:i32 = add %65, %72
%74:i32 = shl %73, 9:i32
%75:i32 = lshr %73, 23:i32
%76:i32 = or %74, %75
%77:i32 = xor %64, %76
%78:i32 = xor %63, %77
%79:i32 = add %59, %78
%80:i32 = shl %79, 13:i32
%81:i32 = lshr %79, 19:i32
%82:i32 = or %80, %81
%83:i32 = xor %82, %35
%84:i32 = add %78, %83
%85:i32 = shl %84, 18:i32
%86:i32 = lshr %84, 14:i32
%87:i32 = or %85, %86
%88:i32 = xor %87, %27
%89:i32 = phi %3, %2, %88
%90:i32 = add %2, %89
infer %90

; *****
; For LLVM instruction:
;  %274 = add i32 %249, %48
; Looking for a replacement for:
%0:i32 = var
%1 = block 2
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = add %3, %4
%6:i32 = shl %5, 7:i32
%7:i32 = lshr %5, 25:i32
%8:i32 = or %6, %7
%9:i32 = xor %2, %8
%10:i32 = var
%11:i32 = var
%12:i32 = var
%13:i32 = add %11, %10
%14:i32 = shl %13, 7:i32
%15:i32 = lshr %13, 25:i32
%16:i32 = or %14, %15
%17:i32 = xor %12, %16
%18:i32 = var
%19:i32 = add %10, %17
%20:i32 = shl %19, 9:i32
%21:i32 = lshr %19, 23:i32
%22:i32 = or %20, %21
%23:i32 = xor %18, %22
%24:i32 = add %17, %23
%25:i32 = shl %24, 13:i32
%26:i32 = lshr %24, 19:i32
%27:i32 = or %25, %26
%28:i32 = xor %11, %27
%29:i32 = add %28, %23
%30:i32 = shl %29, 18:i32
%31:i32 = lshr %29, 14:i32
%32:i32 = or %30, %31
%33:i32 = xor %10, %32
%34:i32 = add %9, %33
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = var
%42:i32 = add %38, %40
%43:i32 = shl %42, 7:i32
%44:i32 = lshr %42, 25:i32
%45:i32 = or %43, %44
%46:i32 = xor %41, %45
%47:i32 = add %40, %46
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %39, %50
%52:i32 = add %51, %46
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55
%57:i32 = xor %37, %56
%58:i32 = phi %1, %0, %57
%59:i32 = add %0, %58
infer %59

; *****
; For LLVM instruction:
;  %277 = add i32 %248, %51
; Looking for a replacement for:
%0:i32 = var
%1 = block 2
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = add %3, %2
%6:i32 = shl %5, 7:i32
%7:i32 = lshr %5, 25:i32
%8:i32 = or %6, %7
%9:i32 = xor %4, %8
%10:i32 = var
%11:i32 = add %2, %9
%12:i32 = shl %11, 9:i32
%13:i32 = lshr %11, 23:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14
%16:i32 = add %9, %15
%17:i32 = shl %16, 13:i32
%18:i32 = lshr %16, 19:i32
%19:i32 = or %17, %18
%20:i32 = xor %3, %19
%21:i32 = add %20, %15
%22:i32 = shl %21, 18:i32
%23:i32 = lshr %21, 14:i32
%24:i32 = or %22, %23
%25:i32 = xor %2, %24
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29:i32 = add %27, %28
%30:i32 = shl %29, 7:i32
%31:i32 = lshr %29, 25:i32
%32:i32 = or %30, %31
%33:i32 = xor %26, %32
%34:i32 = add %33, %25
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = var
%42:i32 = add %38, %40
%43:i32 = shl %42, 7:i32
%44:i32 = lshr %42, 25:i32
%45:i32 = or %43, %44
%46:i32 = xor %41, %45
%47:i32 = add %40, %46
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %39, %50
%52:i32 = add %51, %46
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55
%57:i32 = xor %37, %56
%58:i32 = add %25, %57
%59:i32 = shl %58, 9:i32
%60:i32 = lshr %58, 23:i32
%61:i32 = or %59, %60
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = var
%66:i32 = add %65, %63
%67:i32 = shl %66, 7:i32
%68:i32 = lshr %66, 25:i32
%69:i32 = or %67, %68
%70:i32 = xor %64, %69
%71:i32 = add %63, %70
%72:i32 = shl %71, 9:i32
%73:i32 = lshr %71, 23:i32
%74:i32 = or %72, %73
%75:i32 = xor %62, %74
%76:i32 = xor %61, %75
%77:i32 = phi %1, %0, %76
%78:i32 = add %0, %77
infer %78

; *****
; For LLVM instruction:
;  %280 = add i32 %247, %54
; Looking for a replacement for:
%0:i32 = var
%1 = block 2
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = add %5, %2
%7:i32 = shl %6, 7:i32
%8:i32 = lshr %6, 25:i32
%9:i32 = or %7, %8
%10:i32 = xor %4, %9
%11:i32 = add %2, %10
%12:i32 = shl %11, 9:i32
%13:i32 = lshr %11, 23:i32
%14:i32 = or %12, %13
%15:i32 = xor %3, %14
%16:i32 = add %15, %10
%17:i32 = shl %16, 13:i32
%18:i32 = lshr %16, 19:i32
%19:i32 = or %17, %18
%20:i32 = xor %5, %19
%21:i32 = add %15, %20
%22:i32 = shl %21, 18:i32
%23:i32 = lshr %21, 14:i32
%24:i32 = or %22, %23
%25:i32 = xor %2, %24
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29:i32 = add %27, %28
%30:i32 = shl %29, 7:i32
%31:i32 = lshr %29, 25:i32
%32:i32 = or %30, %31
%33:i32 = xor %26, %32
%34:i32 = add %33, %25
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %38, %40
%42:i32 = shl %41, 7:i32
%43:i32 = lshr %41, 25:i32
%44:i32 = or %42, %43
%45:i32 = xor %39, %44
%46:i32 = var
%47:i32 = add %40, %45
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %46, %50
%52:i32 = add %45, %51
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55
%57:i32 = xor %37, %56
%58:i32 = add %25, %57
%59:i32 = shl %58, 9:i32
%60:i32 = lshr %58, 23:i32
%61:i32 = or %59, %60
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = var
%66:i32 = add %63, %65
%67:i32 = shl %66, 7:i32
%68:i32 = lshr %66, 25:i32
%69:i32 = or %67, %68
%70:i32 = xor %64, %69
%71:i32 = add %63, %70
%72:i32 = shl %71, 9:i32
%73:i32 = lshr %71, 23:i32
%74:i32 = or %72, %73
%75:i32 = xor %62, %74
%76:i32 = xor %61, %75
%77:i32 = phi %1, %0, %76
%78:i32 = add %0, %77
infer %78

; *****
; For LLVM instruction:
;  %283 = add i32 %246, %57
; Looking for a replacement for:
%0:i32 = var
%1 = block 2
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = add %3, %4
%6:i32 = shl %5, 7:i32
%7:i32 = lshr %5, 25:i32
%8:i32 = or %6, %7
%9:i32 = xor %2, %8
%10:i32 = var
%11:i32 = var
%12:i32 = var
%13:i32 = var
%14:i32 = add %13, %10
%15:i32 = shl %14, 7:i32
%16:i32 = lshr %14, 25:i32
%17:i32 = or %15, %16
%18:i32 = xor %12, %17
%19:i32 = add %10, %18
%20:i32 = shl %19, 9:i32
%21:i32 = lshr %19, 23:i32
%22:i32 = or %20, %21
%23:i32 = xor %11, %22
%24:i32 = add %23, %18
%25:i32 = shl %24, 13:i32
%26:i32 = lshr %24, 19:i32
%27:i32 = or %25, %26
%28:i32 = xor %13, %27
%29:i32 = add %23, %28
%30:i32 = shl %29, 18:i32
%31:i32 = lshr %29, 14:i32
%32:i32 = or %30, %31
%33:i32 = xor %10, %32
%34:i32 = add %9, %33
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %38, %40
%42:i32 = shl %41, 7:i32
%43:i32 = lshr %41, 25:i32
%44:i32 = or %42, %43
%45:i32 = xor %39, %44
%46:i32 = var
%47:i32 = add %40, %45
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %46, %50
%52:i32 = add %45, %51
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55
%57:i32 = xor %37, %56
%58:i32 = add %33, %57
%59:i32 = shl %58, 9:i32
%60:i32 = lshr %58, 23:i32
%61:i32 = or %59, %60
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = var
%66:i32 = add %63, %65
%67:i32 = shl %66, 7:i32
%68:i32 = lshr %66, 25:i32
%69:i32 = or %67, %68
%70:i32 = xor %64, %69
%71:i32 = add %63, %70
%72:i32 = shl %71, 9:i32
%73:i32 = lshr %71, 23:i32
%74:i32 = or %72, %73
%75:i32 = xor %62, %74
%76:i32 = xor %61, %75
%77:i32 = add %57, %76
%78:i32 = shl %77, 13:i32
%79:i32 = lshr %77, 19:i32
%80:i32 = or %78, %79
%81:i32 = xor %80, %9
%82:i32 = phi %1, %0, %81
%83:i32 = add %0, %82
infer %83

; *****
; For LLVM instruction:
;  %286 = add i32 %245, %22
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = phi %0, %1, 2036477234:i32
%3 = block 2
%4:i32 = var
%5:i32 = var
%6:i32 = var
%7:i32 = var
%8:i32 = add %7, %4
%9:i32 = shl %8, 7:i32
%10:i32 = lshr %8, 25:i32
%11:i32 = or %9, %10
%12:i32 = xor %6, %11
%13:i32 = add %4, %12
%14:i32 = shl %13, 9:i32
%15:i32 = lshr %13, 23:i32
%16:i32 = or %14, %15
%17:i32 = xor %5, %16
%18:i32 = add %17, %12
%19:i32 = shl %18, 13:i32
%20:i32 = lshr %18, 19:i32
%21:i32 = or %19, %20
%22:i32 = xor %7, %21
%23:i32 = add %17, %22
%24:i32 = shl %23, 18:i32
%25:i32 = lshr %23, 14:i32
%26:i32 = or %24, %25
%27:i32 = xor %4, %26
%28:i32 = var
%29:i32 = var
%30:i32 = var
%31:i32 = add %29, %30
%32:i32 = shl %31, 7:i32
%33:i32 = lshr %31, 25:i32
%34:i32 = or %32, %33
%35:i32 = xor %28, %34
%36:i32 = add %35, %27
%37:i32 = shl %36, 7:i32
%38:i32 = lshr %36, 25:i32
%39:i32 = or %37, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = add %40, %42
%44:i32 = shl %43, 7:i32
%45:i32 = lshr %43, 25:i32
%46:i32 = or %44, %45
%47:i32 = xor %41, %46
%48:i32 = var
%49:i32 = add %42, %47
%50:i32 = shl %49, 9:i32
%51:i32 = lshr %49, 23:i32
%52:i32 = or %50, %51
%53:i32 = xor %48, %52
%54:i32 = add %47, %53
%55:i32 = shl %54, 13:i32
%56:i32 = lshr %54, 19:i32
%57:i32 = or %55, %56
%58:i32 = xor %40, %57
%59:i32 = xor %39, %58
%60:i32 = add %27, %59
%61:i32 = shl %60, 9:i32
%62:i32 = lshr %60, 23:i32
%63:i32 = or %61, %62
%64:i32 = var
%65:i32 = var
%66:i32 = var
%67:i32 = var
%68:i32 = add %65, %67
%69:i32 = shl %68, 7:i32
%70:i32 = lshr %68, 25:i32
%71:i32 = or %69, %70
%72:i32 = xor %66, %71
%73:i32 = add %65, %72
%74:i32 = shl %73, 9:i32
%75:i32 = lshr %73, 23:i32
%76:i32 = or %74, %75
%77:i32 = xor %64, %76
%78:i32 = xor %63, %77
%79:i32 = add %59, %78
%80:i32 = shl %79, 13:i32
%81:i32 = lshr %79, 19:i32
%82:i32 = or %80, %81
%83:i32 = xor %82, %35
%84:i32 = add %78, %83
%85:i32 = shl %84, 18:i32
%86:i32 = lshr %84, 14:i32
%87:i32 = or %85, %86
%88:i32 = xor %87, %27
%89:i32 = phi %3, %2, %88
%90:i32 = add %2, %89
infer %90

; *****
; For LLVM instruction:
;  %289 = add i32 %244, %37
; Looking for a replacement for:
%0:i32 = var
%1 = block 2
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = add %3, %4
%6:i32 = shl %5, 7:i32
%7:i32 = lshr %5, 25:i32
%8:i32 = or %6, %7
%9:i32 = xor %2, %8
%10:i32 = var
%11:i32 = var
%12:i32 = var
%13:i32 = var
%14:i32 = add %13, %10
%15:i32 = shl %14, 7:i32
%16:i32 = lshr %14, 25:i32
%17:i32 = or %15, %16
%18:i32 = xor %12, %17
%19:i32 = add %10, %18
%20:i32 = shl %19, 9:i32
%21:i32 = lshr %19, 23:i32
%22:i32 = or %20, %21
%23:i32 = xor %11, %22
%24:i32 = add %23, %18
%25:i32 = shl %24, 13:i32
%26:i32 = lshr %24, 19:i32
%27:i32 = or %25, %26
%28:i32 = xor %13, %27
%29:i32 = add %23, %28
%30:i32 = shl %29, 18:i32
%31:i32 = lshr %29, 14:i32
%32:i32 = or %30, %31
%33:i32 = xor %10, %32
%34:i32 = add %9, %33
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %38, %40
%42:i32 = shl %41, 7:i32
%43:i32 = lshr %41, 25:i32
%44:i32 = or %42, %43
%45:i32 = xor %39, %44
%46:i32 = var
%47:i32 = add %40, %45
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %46, %50
%52:i32 = add %45, %51
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55
%57:i32 = xor %37, %56
%58:i32 = phi %1, %0, %57
%59:i32 = add %0, %58
infer %59

; *****
; For LLVM instruction:
;  %292 = add i32 %240, %40
; Looking for a replacement for:
%0:i32 = var
%1 = block 2
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = add %5, %2
%7:i32 = shl %6, 7:i32
%8:i32 = lshr %6, 25:i32
%9:i32 = or %7, %8
%10:i32 = xor %4, %9
%11:i32 = add %2, %10
%12:i32 = shl %11, 9:i32
%13:i32 = lshr %11, 23:i32
%14:i32 = or %12, %13
%15:i32 = xor %3, %14
%16:i32 = add %10, %15
%17:i32 = shl %16, 13:i32
%18:i32 = lshr %16, 19:i32
%19:i32 = or %17, %18
%20:i32 = xor %5, %19
%21:i32 = add %15, %20
%22:i32 = shl %21, 18:i32
%23:i32 = lshr %21, 14:i32
%24:i32 = or %22, %23
%25:i32 = xor %2, %24
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29:i32 = add %27, %28
%30:i32 = shl %29, 7:i32
%31:i32 = lshr %29, 25:i32
%32:i32 = or %30, %31
%33:i32 = xor %26, %32
%34:i32 = add %25, %33
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %40, %38
%42:i32 = shl %41, 7:i32
%43:i32 = lshr %41, 25:i32
%44:i32 = or %42, %43
%45:i32 = xor %39, %44
%46:i32 = var
%47:i32 = add %40, %45
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %46, %50
%52:i32 = add %45, %51
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55
%57:i32 = xor %37, %56
%58:i32 = phi %1, %0, %57
%59:i32 = add %0, %58
infer %59

; *****
; For LLVM instruction:
;  %295 = add i32 %241, %43
; Looking for a replacement for:
%0:i32 = var
%1 = block 2
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = add %5, %2
%7:i32 = shl %6, 7:i32
%8:i32 = lshr %6, 25:i32
%9:i32 = or %7, %8
%10:i32 = xor %4, %9
%11:i32 = add %2, %10
%12:i32 = shl %11, 9:i32
%13:i32 = lshr %11, 23:i32
%14:i32 = or %12, %13
%15:i32 = xor %3, %14
%16:i32 = add %10, %15
%17:i32 = shl %16, 13:i32
%18:i32 = lshr %16, 19:i32
%19:i32 = or %17, %18
%20:i32 = xor %5, %19
%21:i32 = add %15, %20
%22:i32 = shl %21, 18:i32
%23:i32 = lshr %21, 14:i32
%24:i32 = or %22, %23
%25:i32 = xor %2, %24
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29:i32 = add %27, %28
%30:i32 = shl %29, 7:i32
%31:i32 = lshr %29, 25:i32
%32:i32 = or %30, %31
%33:i32 = xor %26, %32
%34:i32 = add %25, %33
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %40, %38
%42:i32 = shl %41, 7:i32
%43:i32 = lshr %41, 25:i32
%44:i32 = or %42, %43
%45:i32 = xor %39, %44
%46:i32 = var
%47:i32 = add %40, %45
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %46, %50
%52:i32 = add %45, %51
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55
%57:i32 = xor %37, %56
%58:i32 = add %25, %57
%59:i32 = shl %58, 9:i32
%60:i32 = lshr %58, 23:i32
%61:i32 = or %59, %60
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = var
%66:i32 = add %65, %63
%67:i32 = shl %66, 7:i32
%68:i32 = lshr %66, 25:i32
%69:i32 = or %67, %68
%70:i32 = xor %64, %69
%71:i32 = add %63, %70
%72:i32 = shl %71, 9:i32
%73:i32 = lshr %71, 23:i32
%74:i32 = or %72, %73
%75:i32 = xor %62, %74
%76:i32 = xor %61, %75
%77:i32 = phi %1, %0, %76
%78:i32 = add %0, %77
infer %78

; *****
; For LLVM instruction:
;  %298 = add i32 %242, %46
; Looking for a replacement for:
%0:i32 = var
%1 = block 2
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = add %5, %2
%7:i32 = shl %6, 7:i32
%8:i32 = lshr %6, 25:i32
%9:i32 = or %7, %8
%10:i32 = xor %4, %9
%11:i32 = add %2, %10
%12:i32 = shl %11, 9:i32
%13:i32 = lshr %11, 23:i32
%14:i32 = or %12, %13
%15:i32 = xor %3, %14
%16:i32 = add %10, %15
%17:i32 = shl %16, 13:i32
%18:i32 = lshr %16, 19:i32
%19:i32 = or %17, %18
%20:i32 = xor %5, %19
%21:i32 = add %15, %20
%22:i32 = shl %21, 18:i32
%23:i32 = lshr %21, 14:i32
%24:i32 = or %22, %23
%25:i32 = xor %2, %24
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29:i32 = add %27, %28
%30:i32 = shl %29, 7:i32
%31:i32 = lshr %29, 25:i32
%32:i32 = or %30, %31
%33:i32 = xor %26, %32
%34:i32 = add %25, %33
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %40, %38
%42:i32 = shl %41, 7:i32
%43:i32 = lshr %41, 25:i32
%44:i32 = or %42, %43
%45:i32 = xor %39, %44
%46:i32 = var
%47:i32 = add %40, %45
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %46, %50
%52:i32 = add %45, %51
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55
%57:i32 = xor %37, %56
%58:i32 = add %25, %57
%59:i32 = shl %58, 9:i32
%60:i32 = lshr %58, 23:i32
%61:i32 = or %59, %60
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = var
%66:i32 = add %65, %63
%67:i32 = shl %66, 7:i32
%68:i32 = lshr %66, 25:i32
%69:i32 = or %67, %68
%70:i32 = xor %64, %69
%71:i32 = add %63, %70
%72:i32 = shl %71, 9:i32
%73:i32 = lshr %71, 23:i32
%74:i32 = or %72, %73
%75:i32 = xor %62, %74
%76:i32 = xor %61, %75
%77:i32 = add %57, %76
%78:i32 = shl %77, 13:i32
%79:i32 = lshr %77, 19:i32
%80:i32 = or %78, %79
%81:i32 = xor %80, %33
%82:i32 = phi %1, %0, %81
%83:i32 = add %0, %82
infer %83

; *****
; For LLVM instruction:
;  %301 = add i32 %243, %20
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = phi %0, %1, 1797285236:i32
%3 = block 2
%4:i32 = var
%5:i32 = var
%6:i32 = var
%7:i32 = var
%8:i32 = add %7, %4
%9:i32 = shl %8, 7:i32
%10:i32 = lshr %8, 25:i32
%11:i32 = or %9, %10
%12:i32 = xor %6, %11
%13:i32 = add %4, %12
%14:i32 = shl %13, 9:i32
%15:i32 = lshr %13, 23:i32
%16:i32 = or %14, %15
%17:i32 = xor %5, %16
%18:i32 = add %12, %17
%19:i32 = shl %18, 13:i32
%20:i32 = lshr %18, 19:i32
%21:i32 = or %19, %20
%22:i32 = xor %7, %21
%23:i32 = add %17, %22
%24:i32 = shl %23, 18:i32
%25:i32 = lshr %23, 14:i32
%26:i32 = or %24, %25
%27:i32 = xor %4, %26
%28:i32 = var
%29:i32 = var
%30:i32 = var
%31:i32 = add %29, %30
%32:i32 = shl %31, 7:i32
%33:i32 = lshr %31, 25:i32
%34:i32 = or %32, %33
%35:i32 = xor %28, %34
%36:i32 = add %27, %35
%37:i32 = shl %36, 7:i32
%38:i32 = lshr %36, 25:i32
%39:i32 = or %37, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = add %42, %40
%44:i32 = shl %43, 7:i32
%45:i32 = lshr %43, 25:i32
%46:i32 = or %44, %45
%47:i32 = xor %41, %46
%48:i32 = var
%49:i32 = add %42, %47
%50:i32 = shl %49, 9:i32
%51:i32 = lshr %49, 23:i32
%52:i32 = or %50, %51
%53:i32 = xor %48, %52
%54:i32 = add %47, %53
%55:i32 = shl %54, 13:i32
%56:i32 = lshr %54, 19:i32
%57:i32 = or %55, %56
%58:i32 = xor %40, %57
%59:i32 = xor %39, %58
%60:i32 = add %27, %59
%61:i32 = shl %60, 9:i32
%62:i32 = lshr %60, 23:i32
%63:i32 = or %61, %62
%64:i32 = var
%65:i32 = var
%66:i32 = var
%67:i32 = var
%68:i32 = add %67, %65
%69:i32 = shl %68, 7:i32
%70:i32 = lshr %68, 25:i32
%71:i32 = or %69, %70
%72:i32 = xor %66, %71
%73:i32 = add %65, %72
%74:i32 = shl %73, 9:i32
%75:i32 = lshr %73, 23:i32
%76:i32 = or %74, %75
%77:i32 = xor %64, %76
%78:i32 = xor %63, %77
%79:i32 = add %59, %78
%80:i32 = shl %79, 13:i32
%81:i32 = lshr %79, 19:i32
%82:i32 = or %80, %81
%83:i32 = xor %82, %35
%84:i32 = add %78, %83
%85:i32 = shl %84, 18:i32
%86:i32 = lshr %84, 14:i32
%87:i32 = or %85, %86
%88:i32 = xor %87, %27
%89:i32 = phi %3, %2, %88
%90:i32 = add %2, %89
infer %90
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = phi %0, %1, 1797285236:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1797285236
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1797285237
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = phi %0, %1, 1634760805:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1634760805
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1634760806
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = phi %0, %1, 2036477234:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 2036477234
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2036477235
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = phi %0, %1, 857760878:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 857760878
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -857760879
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var (knownBits=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0) (range=[0,-1))
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -258
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1 (hasExternalUses)
%3:i32 = shl %2, 7:i32
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -128
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1 (hasExternalUses)
%3:i32 = lshr %2, 25:i32
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 127
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = shl %2, 7:i32
%4:i32 = lshr %2, 25:i32
%5:i32 = or %3, %4
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1024
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1 (hasExternalUses)
%3:i32 = lshr %2, 25:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1 (hasExternalUses)
%3:i32 = shl %2, 7:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 6 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6
infer %7


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1 (hasExternalUses)
%3:i32 = lshr %2, 25:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1 (hasExternalUses)
%3:i32 = shl %2, 7:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = shl %2, 7:i32
%4:i32 = lshr %2, 25:i32
%5:i32 = or %3, %4

Cost = 4
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7
infer %8


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483647
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7 (hasExternalUses)
%9:i32 = shl %8, 9:i32
infer %9


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7 (hasExternalUses)
%9:i32 = lshr %8, 23:i32
infer %9


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 256
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7
%9:i32 = shl %8, 9:i32
%10:i32 = lshr %8, 23:i32
%11:i32 = or %9, %10
infer %11


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -268898304
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12
infer %13


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %1, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
infer %14


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483647
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %1, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13 (hasExternalUses)
%15:i32 = shl %14, 13:i32
infer %15


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147475456
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %1, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13 (hasExternalUses)
%15:i32 = lshr %14, 19:i32
infer %15


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4096
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %1, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
infer %17


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -8144
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17
infer %18


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 16384
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
infer %19


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483639
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18 (hasExternalUses)
%20:i32 = shl %19, 18:i32
infer %20


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147221504
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18 (hasExternalUses)
%20:i32 = lshr %19, 14:i32
infer %20


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 131072
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
infer %22


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -23592960
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22
infer %23


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7
infer %8


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483647
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7 (hasExternalUses)
%9:i32 = shl %8, 9:i32
infer %9


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483136
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7 (hasExternalUses)
%9:i32 = lshr %8, 23:i32
infer %9


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 256
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7
%9:i32 = shl %8, 9:i32
%10:i32 = lshr %8, 23:i32
%11:i32 = or %9, %10
infer %11


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -506368
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12
infer %13


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
infer %14


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13 (hasExternalUses)
%15:i32 = shl %14, 13:i32
infer %15


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147475456
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13 (hasExternalUses)
%15:i32 = lshr %14, 19:i32
infer %15


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4096
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
infer %17


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -8144
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17
infer %18


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 16384
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17 (hasExternalUses)
%19:i32 = add %18, %13
infer %19


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -409534464
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17 (hasExternalUses)
%19:i32 = add %18, %13 (hasExternalUses)
%20:i32 = shl %19, 18:i32
infer %20


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 16777216
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17 (hasExternalUses)
%19:i32 = add %18, %13 (hasExternalUses)
%20:i32 = lshr %19, 14:i32
infer %20


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 131072
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
infer %22


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -262144
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22
infer %23


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %13, %8
infer %14


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2113830912
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %13, %8 (hasExternalUses)
%15:i32 = shl %14, 13:i32
infer %15


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %13, %8 (hasExternalUses)
%15:i32 = lshr %14, 19:i32
infer %15


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4096
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
infer %17


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -60325888
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %2
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %2, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17
infer %18


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
infer %19


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18 (hasExternalUses)
%20:i32 = shl %19, 18:i32
infer %20


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18 (hasExternalUses)
%20:i32 = lshr %19, 14:i32
infer %20


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 131072
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
infer %22


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -5242880
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22
infer %23


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
infer %19


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483639
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18 (hasExternalUses)
%20:i32 = shl %19, 18:i32
infer %20


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147221504
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18 (hasExternalUses)
%20:i32 = lshr %19, 14:i32
infer %20


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
ConstantSynthesis: solver returns error on first query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
infer %22


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -23592960
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22
infer %23


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
infer %32


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31 (hasExternalUses)
%33:i32 = shl %32, 7:i32
infer %33


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31 (hasExternalUses)
%33:i32 = lshr %32, 25:i32
infer %33


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 64
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
infer %35


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483392
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54
infer %55


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
infer %56


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55 (hasExternalUses)
%57:i32 = shl %56, 9:i32
infer %57


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147475456
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55 (hasExternalUses)
%57:i32 = lshr %56, 23:i32
infer %57


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 472
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
infer %59


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1024
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73
infer %74


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
infer %75


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483646
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74 (hasExternalUses)
%76:i32 = shl %75, 13:i32
infer %76


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2013011968
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74 (hasExternalUses)
%76:i32 = lshr %75, 19:i32
infer %76


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4096
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
infer %78


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -16384
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31
infer %79


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 112392604
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1 (hasExternalUses)
%3:i32 = shl %2, 7:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = shl %2, 7:i32
%4:i32 = lshr %2, 25:i32
%5:i32 = or %3, %4

Cost = 4
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
infer %80


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79 (hasExternalUses)
%81:i32 = shl %80, 18:i32
infer %81


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -150994944
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79 (hasExternalUses)
%81:i32 = lshr %80, 14:i32
infer %81


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 131072
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
%81:i32 = shl %80, 18:i32
%82:i32 = lshr %80, 14:i32
%83:i32 = or %81, %82
infer %83


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1572707605
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
%81:i32 = shl %80, 18:i32
%82:i32 = lshr %80, 14:i32
%83:i32 = or %81, %82
%84:i32 = xor %83, %23
infer %84


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 726946037
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
infer %32


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31 (hasExternalUses)
%33:i32 = shl %32, 7:i32
infer %33


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31 (hasExternalUses)
%33:i32 = lshr %32, 25:i32
infer %33


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 64
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
infer %35


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -256
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54
infer %55


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
infer %56


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55 (hasExternalUses)
%57:i32 = shl %56, 9:i32
infer %57


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147481088
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55 (hasExternalUses)
%57:i32 = lshr %56, 23:i32
infer %57


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 256
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
infer %59


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1053210608
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73
infer %74


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %31, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
infer %75


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %31, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74 (hasExternalUses)
%76:i32 = shl %75, 13:i32
infer %76


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %31, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74 (hasExternalUses)
%76:i32 = lshr %75, 19:i32
infer %76


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4096
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %31, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
infer %78


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2145452032
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %31, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %7
infer %79


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -924909552
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1 (hasExternalUses)
%3:i32 = lshr %2, 25:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = shl %2, 7:i32
%4:i32 = lshr %2, 25:i32
%5:i32 = or %3, %4

Cost = 4
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
infer %80


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79 (hasExternalUses)
%81:i32 = shl %80, 18:i32
infer %81


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1638662144
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79 (hasExternalUses)
%81:i32 = lshr %80, 14:i32
infer %81


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 54558
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
%81:i32 = shl %80, 18:i32
%82:i32 = lshr %80, 14:i32
%83:i32 = or %81, %82
infer %83


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1552154624
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
%81:i32 = shl %80, 18:i32
%82:i32 = lshr %80, 14:i32
%83:i32 = or %81, %82
%84:i32 = xor %83, %23
infer %84


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1447877215
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = var
%12:i32 = add %11, %8
%13:i32 = shl %12, 7:i32
%14:i32 = lshr %12, 25:i32
%15:i32 = or %13, %14
%16:i32 = xor %10, %15 (hasExternalUses)
%17:i32 = add %8, %16
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %9, %20 (hasExternalUses)
%22:i32 = add %21, %16
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %11, %25 (hasExternalUses)
%27:i32 = add %21, %26
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
infer %32


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = var
%12:i32 = add %11, %8
%13:i32 = shl %12, 7:i32
%14:i32 = lshr %12, 25:i32
%15:i32 = or %13, %14
%16:i32 = xor %10, %15 (hasExternalUses)
%17:i32 = add %8, %16
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %9, %20 (hasExternalUses)
%22:i32 = add %21, %16
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %11, %25 (hasExternalUses)
%27:i32 = add %21, %26
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31 (hasExternalUses)
%33:i32 = shl %32, 7:i32
infer %33


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = var
%12:i32 = add %11, %8
%13:i32 = shl %12, 7:i32
%14:i32 = lshr %12, 25:i32
%15:i32 = or %13, %14
%16:i32 = xor %10, %15 (hasExternalUses)
%17:i32 = add %8, %16
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %9, %20 (hasExternalUses)
%22:i32 = add %21, %16
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %11, %25 (hasExternalUses)
%27:i32 = add %21, %26
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31 (hasExternalUses)
%33:i32 = lshr %32, 25:i32
infer %33


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 64
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = var
%12:i32 = add %11, %8
%13:i32 = shl %12, 7:i32
%14:i32 = lshr %12, 25:i32
%15:i32 = or %13, %14
%16:i32 = xor %10, %15 (hasExternalUses)
%17:i32 = add %8, %16
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %9, %20 (hasExternalUses)
%22:i32 = add %21, %16
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %11, %25 (hasExternalUses)
%27:i32 = add %21, %26
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
infer %35


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -20736
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = var
%12:i32 = add %11, %8
%13:i32 = shl %12, 7:i32
%14:i32 = lshr %12, 25:i32
%15:i32 = or %13, %14
%16:i32 = xor %10, %15 (hasExternalUses)
%17:i32 = add %8, %16
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %9, %20 (hasExternalUses)
%22:i32 = add %21, %16
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %11, %25 (hasExternalUses)
%27:i32 = add %21, %26
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54
infer %55


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
infer %56


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55 (hasExternalUses)
%57:i32 = shl %56, 9:i32
infer %57


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483136
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55 (hasExternalUses)
%57:i32 = lshr %56, 23:i32
infer %57


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 256
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
infer %59


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2113930240
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73
infer %74


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = var
%12:i32 = add %11, %8
%13:i32 = shl %12, 7:i32
%14:i32 = lshr %12, 25:i32
%15:i32 = or %13, %14
%16:i32 = xor %10, %15 (hasExternalUses)
%17:i32 = add %8, %16
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %9, %20 (hasExternalUses)
%22:i32 = add %21, %16
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %11, %25 (hasExternalUses)
%27:i32 = add %21, %26
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %31, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
infer %75


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = var
%12:i32 = add %11, %8
%13:i32 = shl %12, 7:i32
%14:i32 = lshr %12, 25:i32
%15:i32 = or %13, %14
%16:i32 = xor %10, %15 (hasExternalUses)
%17:i32 = add %8, %16
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %9, %20 (hasExternalUses)
%22:i32 = add %21, %16
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %11, %25 (hasExternalUses)
%27:i32 = add %21, %26
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %31, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74 (hasExternalUses)
%76:i32 = shl %75, 13:i32
infer %76


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147475456
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = var
%12:i32 = add %11, %8
%13:i32 = shl %12, 7:i32
%14:i32 = lshr %12, 25:i32
%15:i32 = or %13, %14
%16:i32 = xor %10, %15 (hasExternalUses)
%17:i32 = add %8, %16
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %9, %20 (hasExternalUses)
%22:i32 = add %21, %16
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %11, %25 (hasExternalUses)
%27:i32 = add %21, %26
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %31, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74 (hasExternalUses)
%76:i32 = lshr %75, 19:i32
infer %76


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4096
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = var
%12:i32 = add %11, %8
%13:i32 = shl %12, 7:i32
%14:i32 = lshr %12, 25:i32
%15:i32 = or %13, %14
%16:i32 = xor %10, %15 (hasExternalUses)
%17:i32 = add %8, %16
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %9, %20 (hasExternalUses)
%22:i32 = add %21, %16
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %11, %25 (hasExternalUses)
%27:i32 = add %21, %26
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %31, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
infer %78


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1157636096
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = var
%12:i32 = add %11, %8
%13:i32 = shl %12, 7:i32
%14:i32 = lshr %12, 25:i32
%15:i32 = or %13, %14
%16:i32 = xor %10, %15 (hasExternalUses)
%17:i32 = add %8, %16
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %9, %20 (hasExternalUses)
%22:i32 = add %21, %16
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %11, %25 (hasExternalUses)
%27:i32 = add %21, %26
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %31, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %7
infer %79


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 661127168
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1 (hasExternalUses)
%3:i32 = shl %2, 7:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = shl %2, 7:i32
%4:i32 = lshr %2, 25:i32
%5:i32 = or %3, %4

Cost = 4
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
infer %80


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79 (hasExternalUses)
%81:i32 = shl %80, 18:i32
infer %81


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79 (hasExternalUses)
%81:i32 = lshr %80, 14:i32
infer %81


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 146015
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
%81:i32 = shl %80, 18:i32
%82:i32 = lshr %80, 14:i32
%83:i32 = or %81, %82
infer %83


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -892200964
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
%81:i32 = shl %80, 18:i32
%82:i32 = lshr %80, 14:i32
%83:i32 = or %81, %82
%84:i32 = xor %83, %23
infer %84


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -379354729
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
infer %32


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31 (hasExternalUses)
%33:i32 = shl %32, 7:i32
infer %33


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31 (hasExternalUses)
%33:i32 = lshr %32, 25:i32
infer %33


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 64
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
infer %35


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483520
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54
infer %55


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
infer %56


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55 (hasExternalUses)
%57:i32 = shl %56, 9:i32
infer %57


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147475456
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55 (hasExternalUses)
%57:i32 = lshr %56, 23:i32
infer %57


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 472
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
infer %59


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1024
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73
infer %74


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
infer %75


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483646
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74 (hasExternalUses)
%76:i32 = shl %75, 13:i32
infer %76


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1207967744
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74 (hasExternalUses)
%76:i32 = lshr %75, 19:i32
infer %76


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4096
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
infer %78


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -16384
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31
infer %79


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 43812328
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1 (hasExternalUses)
%3:i32 = shl %2, 7:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = shl %2, 7:i32
%4:i32 = lshr %2, 25:i32
%5:i32 = or %3, %4

Cost = 4
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
infer %80


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79 (hasExternalUses)
%81:i32 = shl %80, 18:i32
infer %81


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1979449344
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79 (hasExternalUses)
%81:i32 = lshr %80, 14:i32
infer %81


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 129122
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
%81:i32 = shl %80, 18:i32
%82:i32 = lshr %80, 14:i32
%83:i32 = or %81, %82
infer %83


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -37019134
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
%81:i32 = shl %80, 18:i32
%82:i32 = lshr %80, 14:i32
%83:i32 = or %81, %82
%84:i32 = xor %83, %23
infer %84


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1233160704
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var (knownBits=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0) (range=[0,-1))
%1:i32 = add 2:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 2
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -256
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var (knownBits=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0) (range=[0,-1))

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var (knownBits=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0) (range=[0,-1))
%1:i32 = add 2:i32, %0 (hasExternalUses)
%2:i32 = var
%3:i1 = slt %1, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = add %5, %2
%7:i32 = shl %6, 7:i32
%8:i32 = lshr %6, 25:i32
%9:i32 = or %7, %8
%10:i32 = xor %4, %9 (hasExternalUses)
%11:i32 = add %2, %10
%12:i32 = shl %11, 9:i32
%13:i32 = lshr %11, 23:i32
%14:i32 = or %12, %13
%15:i32 = xor %3, %14 (hasExternalUses)
%16:i32 = add %10, %15
%17:i32 = shl %16, 13:i32
%18:i32 = lshr %16, 19:i32
%19:i32 = or %17, %18
%20:i32 = xor %5, %19 (hasExternalUses)
%21:i32 = add %15, %20
%22:i32 = shl %21, 18:i32
%23:i32 = lshr %21, 14:i32
%24:i32 = or %22, %23
%25:i32 = xor %2, %24 (hasExternalUses)
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29:i32 = add %27, %28
%30:i32 = shl %29, 7:i32
%31:i32 = lshr %29, 25:i32
%32:i32 = or %30, %31
%33:i32 = xor %26, %32 (hasExternalUses)
%34:i32 = add %25, %33
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %40, %38
%42:i32 = shl %41, 7:i32
%43:i32 = lshr %41, 25:i32
%44:i32 = or %42, %43
%45:i32 = xor %39, %44 (hasExternalUses)
%46:i32 = var
%47:i32 = add %40, %45
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %46, %50 (hasExternalUses)
%52:i32 = add %45, %51
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55 (hasExternalUses)
%57:i32 = xor %37, %56 (hasExternalUses)
%58:i32 = phi %0, %1, %57
infer %58


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = add %5, %2
%7:i32 = shl %6, 7:i32
%8:i32 = lshr %6, 25:i32
%9:i32 = or %7, %8
%10:i32 = xor %4, %9 (hasExternalUses)
%11:i32 = add %2, %10
%12:i32 = shl %11, 9:i32
%13:i32 = lshr %11, 23:i32
%14:i32 = or %12, %13
%15:i32 = xor %3, %14 (hasExternalUses)
%16:i32 = add %10, %15
%17:i32 = shl %16, 13:i32
%18:i32 = lshr %16, 19:i32
%19:i32 = or %17, %18
%20:i32 = xor %5, %19 (hasExternalUses)
%21:i32 = add %15, %20
%22:i32 = shl %21, 18:i32
%23:i32 = lshr %21, 14:i32
%24:i32 = or %22, %23
%25:i32 = xor %2, %24 (hasExternalUses)
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29:i32 = add %27, %28
%30:i32 = shl %29, 7:i32
%31:i32 = lshr %29, 25:i32
%32:i32 = or %30, %31
%33:i32 = xor %26, %32 (hasExternalUses)
%34:i32 = add %25, %33
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %40, %38
%42:i32 = shl %41, 7:i32
%43:i32 = lshr %41, 25:i32
%44:i32 = or %42, %43
%45:i32 = xor %39, %44 (hasExternalUses)
%46:i32 = var
%47:i32 = add %40, %45
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %46, %50 (hasExternalUses)
%52:i32 = add %45, %51
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55 (hasExternalUses)
%57:i32 = xor %37, %56 (hasExternalUses)
%58:i32 = add %25, %57
%59:i32 = shl %58, 9:i32
%60:i32 = lshr %58, 23:i32
%61:i32 = or %59, %60
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = var
%66:i32 = add %65, %63
%67:i32 = shl %66, 7:i32
%68:i32 = lshr %66, 25:i32
%69:i32 = or %67, %68
%70:i32 = xor %64, %69 (hasExternalUses)
%71:i32 = add %63, %70
%72:i32 = shl %71, 9:i32
%73:i32 = lshr %71, 23:i32
%74:i32 = or %72, %73
%75:i32 = xor %62, %74 (hasExternalUses)
%76:i32 = xor %61, %75 (hasExternalUses)
%77:i32 = phi %0, %1, %76
infer %77


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = add %5, %2
%7:i32 = shl %6, 7:i32
%8:i32 = lshr %6, 25:i32
%9:i32 = or %7, %8
%10:i32 = xor %4, %9 (hasExternalUses)
%11:i32 = add %2, %10
%12:i32 = shl %11, 9:i32
%13:i32 = lshr %11, 23:i32
%14:i32 = or %12, %13
%15:i32 = xor %3, %14 (hasExternalUses)
%16:i32 = add %10, %15
%17:i32 = shl %16, 13:i32
%18:i32 = lshr %16, 19:i32
%19:i32 = or %17, %18
%20:i32 = xor %5, %19 (hasExternalUses)
%21:i32 = add %15, %20
%22:i32 = shl %21, 18:i32
%23:i32 = lshr %21, 14:i32
%24:i32 = or %22, %23
%25:i32 = xor %2, %24 (hasExternalUses)
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29:i32 = add %27, %28
%30:i32 = shl %29, 7:i32
%31:i32 = lshr %29, 25:i32
%32:i32 = or %30, %31
%33:i32 = xor %26, %32 (hasExternalUses)
%34:i32 = add %25, %33
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %40, %38
%42:i32 = shl %41, 7:i32
%43:i32 = lshr %41, 25:i32
%44:i32 = or %42, %43
%45:i32 = xor %39, %44 (hasExternalUses)
%46:i32 = var
%47:i32 = add %40, %45
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %46, %50 (hasExternalUses)
%52:i32 = add %45, %51
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55 (hasExternalUses)
%57:i32 = xor %37, %56 (hasExternalUses)
%58:i32 = add %25, %57
%59:i32 = shl %58, 9:i32
%60:i32 = lshr %58, 23:i32
%61:i32 = or %59, %60
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = var
%66:i32 = add %65, %63
%67:i32 = shl %66, 7:i32
%68:i32 = lshr %66, 25:i32
%69:i32 = or %67, %68
%70:i32 = xor %64, %69 (hasExternalUses)
%71:i32 = add %63, %70
%72:i32 = shl %71, 9:i32
%73:i32 = lshr %71, 23:i32
%74:i32 = or %72, %73
%75:i32 = xor %62, %74 (hasExternalUses)
%76:i32 = xor %61, %75 (hasExternalUses)
%77:i32 = add %57, %76
%78:i32 = shl %77, 13:i32
%79:i32 = lshr %77, 19:i32
%80:i32 = or %78, %79
%81:i32 = xor %80, %33 (hasExternalUses)
%82:i32 = phi %0, %1, %81
infer %82


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1 = block 2
%2:i32 = var
%3:i32 = phi %1, %2, 1797285236:i32
%4:i32 = var
%5:i32 = var
%6:i32 = var
%7:i32 = var
%8:i32 = add %7, %4
%9:i32 = shl %8, 7:i32
%10:i32 = lshr %8, 25:i32
%11:i32 = or %9, %10
%12:i32 = xor %6, %11 (hasExternalUses)
%13:i32 = add %4, %12
%14:i32 = shl %13, 9:i32
%15:i32 = lshr %13, 23:i32
%16:i32 = or %14, %15
%17:i32 = xor %5, %16 (hasExternalUses)
%18:i32 = add %12, %17
%19:i32 = shl %18, 13:i32
%20:i32 = lshr %18, 19:i32
%21:i32 = or %19, %20
%22:i32 = xor %7, %21 (hasExternalUses)
%23:i32 = add %17, %22
%24:i32 = shl %23, 18:i32
%25:i32 = lshr %23, 14:i32
%26:i32 = or %24, %25
%27:i32 = xor %4, %26
%28:i32 = var
%29:i32 = var
%30:i32 = var
%31:i32 = add %29, %30
%32:i32 = shl %31, 7:i32
%33:i32 = lshr %31, 25:i32
%34:i32 = or %32, %33
%35:i32 = xor %28, %34 (hasExternalUses)
%36:i32 = add %27, %35
%37:i32 = shl %36, 7:i32
%38:i32 = lshr %36, 25:i32
%39:i32 = or %37, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = add %42, %40
%44:i32 = shl %43, 7:i32
%45:i32 = lshr %43, 25:i32
%46:i32 = or %44, %45
%47:i32 = xor %41, %46 (hasExternalUses)
%48:i32 = var
%49:i32 = add %42, %47
%50:i32 = shl %49, 9:i32
%51:i32 = lshr %49, 23:i32
%52:i32 = or %50, %51
%53:i32 = xor %48, %52 (hasExternalUses)
%54:i32 = add %47, %53
%55:i32 = shl %54, 13:i32
%56:i32 = lshr %54, 19:i32
%57:i32 = or %55, %56
%58:i32 = xor %40, %57 (hasExternalUses)
%59:i32 = xor %39, %58 (hasExternalUses)
%60:i32 = add %27, %59
%61:i32 = shl %60, 9:i32
%62:i32 = lshr %60, 23:i32
%63:i32 = or %61, %62
%64:i32 = var
%65:i32 = var
%66:i32 = var
%67:i32 = var
%68:i32 = add %67, %65
%69:i32 = shl %68, 7:i32
%70:i32 = lshr %68, 25:i32
%71:i32 = or %69, %70
%72:i32 = xor %66, %71 (hasExternalUses)
%73:i32 = add %65, %72
%74:i32 = shl %73, 9:i32
%75:i32 = lshr %73, 23:i32
%76:i32 = or %74, %75
%77:i32 = xor %64, %76 (hasExternalUses)
%78:i32 = xor %63, %77 (hasExternalUses)
%79:i32 = add %59, %78
%80:i32 = shl %79, 13:i32
%81:i32 = lshr %79, 19:i32
%82:i32 = or %80, %81
%83:i32 = xor %82, %35 (hasExternalUses)
%84:i32 = add %78, %83
%85:i32 = shl %84, 18:i32
%86:i32 = lshr %84, 14:i32
%87:i32 = or %85, %86
%88:i32 = xor %87, %27 (hasExternalUses)
%89:i32 = phi %0, %3, %88
infer %89


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1797285236
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0 = block 2
%1:i32 = var
%2:i32 = phi %0, %1, 1797285236:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = add %3, %4
%6:i32 = shl %5, 7:i32
%7:i32 = lshr %5, 25:i32
%8:i32 = or %6, %7
%9:i32 = xor %2, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = var
%12:i32 = var
%13:i32 = var
%14:i32 = add %13, %10
%15:i32 = shl %14, 7:i32
%16:i32 = lshr %14, 25:i32
%17:i32 = or %15, %16
%18:i32 = xor %12, %17 (hasExternalUses)
%19:i32 = add %10, %18
%20:i32 = shl %19, 9:i32
%21:i32 = lshr %19, 23:i32
%22:i32 = or %20, %21
%23:i32 = xor %11, %22 (hasExternalUses)
%24:i32 = add %23, %18
%25:i32 = shl %24, 13:i32
%26:i32 = lshr %24, 19:i32
%27:i32 = or %25, %26
%28:i32 = xor %13, %27 (hasExternalUses)
%29:i32 = add %23, %28
%30:i32 = shl %29, 18:i32
%31:i32 = lshr %29, 14:i32
%32:i32 = or %30, %31
%33:i32 = xor %10, %32 (hasExternalUses)
%34:i32 = add %9, %33
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %38, %40
%42:i32 = shl %41, 7:i32
%43:i32 = lshr %41, 25:i32
%44:i32 = or %42, %43
%45:i32 = xor %39, %44 (hasExternalUses)
%46:i32 = var
%47:i32 = add %40, %45
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %46, %50 (hasExternalUses)
%52:i32 = add %45, %51
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55 (hasExternalUses)
%57:i32 = xor %37, %56 (hasExternalUses)
%58:i32 = phi %0, %1, %57
infer %58


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1 = block 2
%2:i32 = var
%3:i32 = phi %1, %2, 2036477234:i32
%4:i32 = var
%5:i32 = var
%6:i32 = var
%7:i32 = var
%8:i32 = add %7, %4
%9:i32 = shl %8, 7:i32
%10:i32 = lshr %8, 25:i32
%11:i32 = or %9, %10
%12:i32 = xor %6, %11 (hasExternalUses)
%13:i32 = add %4, %12
%14:i32 = shl %13, 9:i32
%15:i32 = lshr %13, 23:i32
%16:i32 = or %14, %15
%17:i32 = xor %5, %16 (hasExternalUses)
%18:i32 = add %17, %12
%19:i32 = shl %18, 13:i32
%20:i32 = lshr %18, 19:i32
%21:i32 = or %19, %20
%22:i32 = xor %7, %21 (hasExternalUses)
%23:i32 = add %17, %22
%24:i32 = shl %23, 18:i32
%25:i32 = lshr %23, 14:i32
%26:i32 = or %24, %25
%27:i32 = xor %4, %26
%28:i32 = var
%29:i32 = var
%30:i32 = var
%31:i32 = add %29, %30
%32:i32 = shl %31, 7:i32
%33:i32 = lshr %31, 25:i32
%34:i32 = or %32, %33
%35:i32 = xor %28, %34 (hasExternalUses)
%36:i32 = add %35, %27
%37:i32 = shl %36, 7:i32
%38:i32 = lshr %36, 25:i32
%39:i32 = or %37, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = add %40, %42
%44:i32 = shl %43, 7:i32
%45:i32 = lshr %43, 25:i32
%46:i32 = or %44, %45
%47:i32 = xor %41, %46 (hasExternalUses)
%48:i32 = var
%49:i32 = add %42, %47
%50:i32 = shl %49, 9:i32
%51:i32 = lshr %49, 23:i32
%52:i32 = or %50, %51
%53:i32 = xor %48, %52 (hasExternalUses)
%54:i32 = add %47, %53
%55:i32 = shl %54, 13:i32
%56:i32 = lshr %54, 19:i32
%57:i32 = or %55, %56
%58:i32 = xor %40, %57 (hasExternalUses)
%59:i32 = xor %39, %58 (hasExternalUses)
%60:i32 = add %27, %59
%61:i32 = shl %60, 9:i32
%62:i32 = lshr %60, 23:i32
%63:i32 = or %61, %62
%64:i32 = var
%65:i32 = var
%66:i32 = var
%67:i32 = var
%68:i32 = add %65, %67
%69:i32 = shl %68, 7:i32
%70:i32 = lshr %68, 25:i32
%71:i32 = or %69, %70
%72:i32 = xor %66, %71 (hasExternalUses)
%73:i32 = add %65, %72
%74:i32 = shl %73, 9:i32
%75:i32 = lshr %73, 23:i32
%76:i32 = or %74, %75
%77:i32 = xor %64, %76 (hasExternalUses)
%78:i32 = xor %63, %77 (hasExternalUses)
%79:i32 = add %59, %78
%80:i32 = shl %79, 13:i32
%81:i32 = lshr %79, 19:i32
%82:i32 = or %80, %81
%83:i32 = xor %82, %35 (hasExternalUses)
%84:i32 = add %78, %83
%85:i32 = shl %84, 18:i32
%86:i32 = lshr %84, 14:i32
%87:i32 = or %85, %86
%88:i32 = xor %87, %27 (hasExternalUses)
%89:i32 = phi %0, %3, %88
infer %89


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2036477234
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0 = block 2
%1:i32 = var
%2:i32 = phi %0, %1, 2036477234:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = add %3, %4
%6:i32 = shl %5, 7:i32
%7:i32 = lshr %5, 25:i32
%8:i32 = or %6, %7
%9:i32 = xor %2, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = var
%12:i32 = var
%13:i32 = var
%14:i32 = add %13, %10
%15:i32 = shl %14, 7:i32
%16:i32 = lshr %14, 25:i32
%17:i32 = or %15, %16
%18:i32 = xor %12, %17 (hasExternalUses)
%19:i32 = add %10, %18
%20:i32 = shl %19, 9:i32
%21:i32 = lshr %19, 23:i32
%22:i32 = or %20, %21
%23:i32 = xor %11, %22 (hasExternalUses)
%24:i32 = add %23, %18
%25:i32 = shl %24, 13:i32
%26:i32 = lshr %24, 19:i32
%27:i32 = or %25, %26
%28:i32 = xor %13, %27 (hasExternalUses)
%29:i32 = add %23, %28
%30:i32 = shl %29, 18:i32
%31:i32 = lshr %29, 14:i32
%32:i32 = or %30, %31
%33:i32 = xor %10, %32 (hasExternalUses)
%34:i32 = add %9, %33
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %38, %40
%42:i32 = shl %41, 7:i32
%43:i32 = lshr %41, 25:i32
%44:i32 = or %42, %43
%45:i32 = xor %39, %44 (hasExternalUses)
%46:i32 = var
%47:i32 = add %40, %45
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %46, %50 (hasExternalUses)
%52:i32 = add %45, %51
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55 (hasExternalUses)
%57:i32 = xor %37, %56 (hasExternalUses)
%58:i32 = add %33, %57
%59:i32 = shl %58, 9:i32
%60:i32 = lshr %58, 23:i32
%61:i32 = or %59, %60
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = var
%66:i32 = add %63, %65
%67:i32 = shl %66, 7:i32
%68:i32 = lshr %66, 25:i32
%69:i32 = or %67, %68
%70:i32 = xor %64, %69 (hasExternalUses)
%71:i32 = add %63, %70
%72:i32 = shl %71, 9:i32
%73:i32 = lshr %71, 23:i32
%74:i32 = or %72, %73
%75:i32 = xor %62, %74 (hasExternalUses)
%76:i32 = xor %61, %75 (hasExternalUses)
%77:i32 = add %57, %76
%78:i32 = shl %77, 13:i32
%79:i32 = lshr %77, 19:i32
%80:i32 = or %78, %79
%81:i32 = xor %80, %9 (hasExternalUses)
%82:i32 = phi %0, %1, %81
infer %82


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = add %5, %2
%7:i32 = shl %6, 7:i32
%8:i32 = lshr %6, 25:i32
%9:i32 = or %7, %8
%10:i32 = xor %4, %9 (hasExternalUses)
%11:i32 = add %2, %10
%12:i32 = shl %11, 9:i32
%13:i32 = lshr %11, 23:i32
%14:i32 = or %12, %13
%15:i32 = xor %3, %14 (hasExternalUses)
%16:i32 = add %15, %10
%17:i32 = shl %16, 13:i32
%18:i32 = lshr %16, 19:i32
%19:i32 = or %17, %18
%20:i32 = xor %5, %19 (hasExternalUses)
%21:i32 = add %15, %20
%22:i32 = shl %21, 18:i32
%23:i32 = lshr %21, 14:i32
%24:i32 = or %22, %23
%25:i32 = xor %2, %24 (hasExternalUses)
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29:i32 = add %27, %28
%30:i32 = shl %29, 7:i32
%31:i32 = lshr %29, 25:i32
%32:i32 = or %30, %31
%33:i32 = xor %26, %32 (hasExternalUses)
%34:i32 = add %33, %25
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %38, %40
%42:i32 = shl %41, 7:i32
%43:i32 = lshr %41, 25:i32
%44:i32 = or %42, %43
%45:i32 = xor %39, %44 (hasExternalUses)
%46:i32 = var
%47:i32 = add %40, %45
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %46, %50 (hasExternalUses)
%52:i32 = add %45, %51
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55 (hasExternalUses)
%57:i32 = xor %37, %56 (hasExternalUses)
%58:i32 = add %25, %57
%59:i32 = shl %58, 9:i32
%60:i32 = lshr %58, 23:i32
%61:i32 = or %59, %60
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = var
%66:i32 = add %63, %65
%67:i32 = shl %66, 7:i32
%68:i32 = lshr %66, 25:i32
%69:i32 = or %67, %68
%70:i32 = xor %64, %69 (hasExternalUses)
%71:i32 = add %63, %70
%72:i32 = shl %71, 9:i32
%73:i32 = lshr %71, 23:i32
%74:i32 = or %72, %73
%75:i32 = xor %62, %74 (hasExternalUses)
%76:i32 = xor %61, %75 (hasExternalUses)
%77:i32 = phi %0, %1, %76
infer %77


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = add %3, %2
%6:i32 = shl %5, 7:i32
%7:i32 = lshr %5, 25:i32
%8:i32 = or %6, %7
%9:i32 = xor %4, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = add %2, %9
%12:i32 = shl %11, 9:i32
%13:i32 = lshr %11, 23:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = add %9, %15
%17:i32 = shl %16, 13:i32
%18:i32 = lshr %16, 19:i32
%19:i32 = or %17, %18
%20:i32 = xor %3, %19 (hasExternalUses)
%21:i32 = add %20, %15
%22:i32 = shl %21, 18:i32
%23:i32 = lshr %21, 14:i32
%24:i32 = or %22, %23
%25:i32 = xor %2, %24 (hasExternalUses)
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29:i32 = add %27, %28
%30:i32 = shl %29, 7:i32
%31:i32 = lshr %29, 25:i32
%32:i32 = or %30, %31
%33:i32 = xor %26, %32 (hasExternalUses)
%34:i32 = add %33, %25
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = var
%42:i32 = add %38, %40
%43:i32 = shl %42, 7:i32
%44:i32 = lshr %42, 25:i32
%45:i32 = or %43, %44
%46:i32 = xor %41, %45 (hasExternalUses)
%47:i32 = add %40, %46
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %39, %50 (hasExternalUses)
%52:i32 = add %51, %46
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55 (hasExternalUses)
%57:i32 = xor %37, %56 (hasExternalUses)
%58:i32 = add %25, %57
%59:i32 = shl %58, 9:i32
%60:i32 = lshr %58, 23:i32
%61:i32 = or %59, %60
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = var
%66:i32 = add %65, %63
%67:i32 = shl %66, 7:i32
%68:i32 = lshr %66, 25:i32
%69:i32 = or %67, %68
%70:i32 = xor %64, %69 (hasExternalUses)
%71:i32 = add %63, %70
%72:i32 = shl %71, 9:i32
%73:i32 = lshr %71, 23:i32
%74:i32 = or %72, %73
%75:i32 = xor %62, %74 (hasExternalUses)
%76:i32 = xor %61, %75 (hasExternalUses)
%77:i32 = phi %0, %1, %76
infer %77


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = add %3, %4
%6:i32 = shl %5, 7:i32
%7:i32 = lshr %5, 25:i32
%8:i32 = or %6, %7
%9:i32 = xor %2, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = var
%12:i32 = var
%13:i32 = add %11, %10
%14:i32 = shl %13, 7:i32
%15:i32 = lshr %13, 25:i32
%16:i32 = or %14, %15
%17:i32 = xor %12, %16 (hasExternalUses)
%18:i32 = var
%19:i32 = add %10, %17
%20:i32 = shl %19, 9:i32
%21:i32 = lshr %19, 23:i32
%22:i32 = or %20, %21
%23:i32 = xor %18, %22 (hasExternalUses)
%24:i32 = add %17, %23
%25:i32 = shl %24, 13:i32
%26:i32 = lshr %24, 19:i32
%27:i32 = or %25, %26
%28:i32 = xor %11, %27 (hasExternalUses)
%29:i32 = add %28, %23
%30:i32 = shl %29, 18:i32
%31:i32 = lshr %29, 14:i32
%32:i32 = or %30, %31
%33:i32 = xor %10, %32 (hasExternalUses)
%34:i32 = add %9, %33
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = var
%42:i32 = add %38, %40
%43:i32 = shl %42, 7:i32
%44:i32 = lshr %42, 25:i32
%45:i32 = or %43, %44
%46:i32 = xor %41, %45 (hasExternalUses)
%47:i32 = add %40, %46
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %39, %50 (hasExternalUses)
%52:i32 = add %51, %46
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55 (hasExternalUses)
%57:i32 = xor %37, %56 (hasExternalUses)
%58:i32 = phi %0, %1, %57
infer %58


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1 = block 2
%2:i32 = var
%3:i32 = phi %1, %2, 857760878:i32
%4:i32 = var
%5:i32 = var
%6:i32 = var
%7:i32 = add %5, %4
%8:i32 = shl %7, 7:i32
%9:i32 = lshr %7, 25:i32
%10:i32 = or %8, %9
%11:i32 = xor %6, %10 (hasExternalUses)
%12:i32 = var
%13:i32 = add %4, %11
%14:i32 = shl %13, 9:i32
%15:i32 = lshr %13, 23:i32
%16:i32 = or %14, %15
%17:i32 = xor %12, %16 (hasExternalUses)
%18:i32 = add %11, %17
%19:i32 = shl %18, 13:i32
%20:i32 = lshr %18, 19:i32
%21:i32 = or %19, %20
%22:i32 = xor %5, %21 (hasExternalUses)
%23:i32 = add %22, %17
%24:i32 = shl %23, 18:i32
%25:i32 = lshr %23, 14:i32
%26:i32 = or %24, %25
%27:i32 = xor %4, %26
%28:i32 = var
%29:i32 = var
%30:i32 = var
%31:i32 = add %29, %30
%32:i32 = shl %31, 7:i32
%33:i32 = lshr %31, 25:i32
%34:i32 = or %32, %33
%35:i32 = xor %28, %34 (hasExternalUses)
%36:i32 = add %35, %27
%37:i32 = shl %36, 7:i32
%38:i32 = lshr %36, 25:i32
%39:i32 = or %37, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %40, %42
%45:i32 = shl %44, 7:i32
%46:i32 = lshr %44, 25:i32
%47:i32 = or %45, %46
%48:i32 = xor %43, %47 (hasExternalUses)
%49:i32 = add %42, %48
%50:i32 = shl %49, 9:i32
%51:i32 = lshr %49, 23:i32
%52:i32 = or %50, %51
%53:i32 = xor %41, %52 (hasExternalUses)
%54:i32 = add %53, %48
%55:i32 = shl %54, 13:i32
%56:i32 = lshr %54, 19:i32
%57:i32 = or %55, %56
%58:i32 = xor %40, %57 (hasExternalUses)
%59:i32 = xor %39, %58 (hasExternalUses)
%60:i32 = add %27, %59
%61:i32 = shl %60, 9:i32
%62:i32 = lshr %60, 23:i32
%63:i32 = or %61, %62
%64:i32 = var
%65:i32 = var
%66:i32 = var
%67:i32 = var
%68:i32 = add %67, %65
%69:i32 = shl %68, 7:i32
%70:i32 = lshr %68, 25:i32
%71:i32 = or %69, %70
%72:i32 = xor %66, %71 (hasExternalUses)
%73:i32 = add %65, %72
%74:i32 = shl %73, 9:i32
%75:i32 = lshr %73, 23:i32
%76:i32 = or %74, %75
%77:i32 = xor %64, %76 (hasExternalUses)
%78:i32 = xor %63, %77 (hasExternalUses)
%79:i32 = add %59, %78
%80:i32 = shl %79, 13:i32
%81:i32 = lshr %79, 19:i32
%82:i32 = or %80, %81
%83:i32 = xor %82, %35 (hasExternalUses)
%84:i32 = add %78, %83
%85:i32 = shl %84, 18:i32
%86:i32 = lshr %84, 14:i32
%87:i32 = or %85, %86
%88:i32 = xor %87, %27 (hasExternalUses)
%89:i32 = phi %0, %3, %88
infer %89


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 857760878
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0 = block 2
%1:i32 = var
%2:i32 = phi %0, %1, 857760878:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = add %3, %4
%6:i32 = shl %5, 7:i32
%7:i32 = lshr %5, 25:i32
%8:i32 = or %6, %7
%9:i32 = xor %2, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = var
%12:i32 = var
%13:i32 = add %11, %10
%14:i32 = shl %13, 7:i32
%15:i32 = lshr %13, 25:i32
%16:i32 = or %14, %15
%17:i32 = xor %12, %16 (hasExternalUses)
%18:i32 = var
%19:i32 = add %10, %17
%20:i32 = shl %19, 9:i32
%21:i32 = lshr %19, 23:i32
%22:i32 = or %20, %21
%23:i32 = xor %18, %22 (hasExternalUses)
%24:i32 = add %17, %23
%25:i32 = shl %24, 13:i32
%26:i32 = lshr %24, 19:i32
%27:i32 = or %25, %26
%28:i32 = xor %11, %27 (hasExternalUses)
%29:i32 = add %28, %23
%30:i32 = shl %29, 18:i32
%31:i32 = lshr %29, 14:i32
%32:i32 = or %30, %31
%33:i32 = xor %10, %32 (hasExternalUses)
%34:i32 = add %9, %33
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = var
%42:i32 = add %38, %40
%43:i32 = shl %42, 7:i32
%44:i32 = lshr %42, 25:i32
%45:i32 = or %43, %44
%46:i32 = xor %41, %45 (hasExternalUses)
%47:i32 = add %40, %46
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %39, %50 (hasExternalUses)
%52:i32 = add %51, %46
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55 (hasExternalUses)
%57:i32 = xor %37, %56 (hasExternalUses)
%58:i32 = add %33, %57
%59:i32 = shl %58, 9:i32
%60:i32 = lshr %58, 23:i32
%61:i32 = or %59, %60
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = var
%66:i32 = add %65, %63
%67:i32 = shl %66, 7:i32
%68:i32 = lshr %66, 25:i32
%69:i32 = or %67, %68
%70:i32 = xor %64, %69 (hasExternalUses)
%71:i32 = add %63, %70
%72:i32 = shl %71, 9:i32
%73:i32 = lshr %71, 23:i32
%74:i32 = or %72, %73
%75:i32 = xor %62, %74 (hasExternalUses)
%76:i32 = xor %61, %75 (hasExternalUses)
%77:i32 = add %57, %76
%78:i32 = shl %77, 13:i32
%79:i32 = lshr %77, 19:i32
%80:i32 = or %78, %79
%81:i32 = xor %80, %9 (hasExternalUses)
%82:i32 = phi %0, %1, %81
infer %82


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = add %2, %5
%7:i32 = shl %6, 7:i32
%8:i32 = lshr %6, 25:i32
%9:i32 = or %7, %8
%10:i32 = xor %4, %9 (hasExternalUses)
%11:i32 = add %2, %10
%12:i32 = shl %11, 9:i32
%13:i32 = lshr %11, 23:i32
%14:i32 = or %12, %13
%15:i32 = xor %3, %14 (hasExternalUses)
%16:i32 = add %10, %15
%17:i32 = shl %16, 13:i32
%18:i32 = lshr %16, 19:i32
%19:i32 = or %17, %18
%20:i32 = xor %5, %19 (hasExternalUses)
%21:i32 = add %15, %20
%22:i32 = shl %21, 18:i32
%23:i32 = lshr %21, 14:i32
%24:i32 = or %22, %23
%25:i32 = xor %2, %24 (hasExternalUses)
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29:i32 = add %27, %28
%30:i32 = shl %29, 7:i32
%31:i32 = lshr %29, 25:i32
%32:i32 = or %30, %31
%33:i32 = xor %26, %32 (hasExternalUses)
%34:i32 = add %25, %33
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %38, %40
%42:i32 = shl %41, 7:i32
%43:i32 = lshr %41, 25:i32
%44:i32 = or %42, %43
%45:i32 = xor %39, %44 (hasExternalUses)
%46:i32 = var
%47:i32 = add %40, %45
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %46, %50 (hasExternalUses)
%52:i32 = add %45, %51
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55 (hasExternalUses)
%57:i32 = xor %37, %56 (hasExternalUses)
%58:i32 = add %25, %57
%59:i32 = shl %58, 9:i32
%60:i32 = lshr %58, 23:i32
%61:i32 = or %59, %60
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = var
%66:i32 = add %65, %63
%67:i32 = shl %66, 7:i32
%68:i32 = lshr %66, 25:i32
%69:i32 = or %67, %68
%70:i32 = xor %64, %69 (hasExternalUses)
%71:i32 = add %63, %70
%72:i32 = shl %71, 9:i32
%73:i32 = lshr %71, 23:i32
%74:i32 = or %72, %73
%75:i32 = xor %62, %74 (hasExternalUses)
%76:i32 = xor %61, %75 (hasExternalUses)
%77:i32 = add %57, %76
%78:i32 = shl %77, 13:i32
%79:i32 = lshr %77, 19:i32
%80:i32 = or %78, %79
%81:i32 = xor %80, %33 (hasExternalUses)
%82:i32 = phi %0, %1, %81
infer %82


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = add %2, %5
%7:i32 = shl %6, 7:i32
%8:i32 = lshr %6, 25:i32
%9:i32 = or %7, %8
%10:i32 = xor %4, %9 (hasExternalUses)
%11:i32 = add %2, %10
%12:i32 = shl %11, 9:i32
%13:i32 = lshr %11, 23:i32
%14:i32 = or %12, %13
%15:i32 = xor %3, %14 (hasExternalUses)
%16:i32 = add %10, %15
%17:i32 = shl %16, 13:i32
%18:i32 = lshr %16, 19:i32
%19:i32 = or %17, %18
%20:i32 = xor %5, %19 (hasExternalUses)
%21:i32 = add %15, %20
%22:i32 = shl %21, 18:i32
%23:i32 = lshr %21, 14:i32
%24:i32 = or %22, %23
%25:i32 = xor %2, %24 (hasExternalUses)
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29:i32 = add %27, %28
%30:i32 = shl %29, 7:i32
%31:i32 = lshr %29, 25:i32
%32:i32 = or %30, %31
%33:i32 = xor %26, %32 (hasExternalUses)
%34:i32 = add %25, %33
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %38, %40
%42:i32 = shl %41, 7:i32
%43:i32 = lshr %41, 25:i32
%44:i32 = or %42, %43
%45:i32 = xor %39, %44 (hasExternalUses)
%46:i32 = var
%47:i32 = add %40, %45
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %46, %50 (hasExternalUses)
%52:i32 = add %45, %51
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55 (hasExternalUses)
%57:i32 = xor %37, %56 (hasExternalUses)
%58:i32 = add %25, %57
%59:i32 = shl %58, 9:i32
%60:i32 = lshr %58, 23:i32
%61:i32 = or %59, %60
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = var
%66:i32 = add %65, %63
%67:i32 = shl %66, 7:i32
%68:i32 = lshr %66, 25:i32
%69:i32 = or %67, %68
%70:i32 = xor %64, %69 (hasExternalUses)
%71:i32 = add %63, %70
%72:i32 = shl %71, 9:i32
%73:i32 = lshr %71, 23:i32
%74:i32 = or %72, %73
%75:i32 = xor %62, %74 (hasExternalUses)
%76:i32 = xor %61, %75 (hasExternalUses)
%77:i32 = phi %0, %1, %76
infer %77


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = add %2, %5
%7:i32 = shl %6, 7:i32
%8:i32 = lshr %6, 25:i32
%9:i32 = or %7, %8
%10:i32 = xor %4, %9 (hasExternalUses)
%11:i32 = add %2, %10
%12:i32 = shl %11, 9:i32
%13:i32 = lshr %11, 23:i32
%14:i32 = or %12, %13
%15:i32 = xor %3, %14 (hasExternalUses)
%16:i32 = add %10, %15
%17:i32 = shl %16, 13:i32
%18:i32 = lshr %16, 19:i32
%19:i32 = or %17, %18
%20:i32 = xor %5, %19 (hasExternalUses)
%21:i32 = add %15, %20
%22:i32 = shl %21, 18:i32
%23:i32 = lshr %21, 14:i32
%24:i32 = or %22, %23
%25:i32 = xor %2, %24 (hasExternalUses)
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29:i32 = add %27, %28
%30:i32 = shl %29, 7:i32
%31:i32 = lshr %29, 25:i32
%32:i32 = or %30, %31
%33:i32 = xor %26, %32 (hasExternalUses)
%34:i32 = add %25, %33
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %38, %40
%42:i32 = shl %41, 7:i32
%43:i32 = lshr %41, 25:i32
%44:i32 = or %42, %43
%45:i32 = xor %39, %44 (hasExternalUses)
%46:i32 = var
%47:i32 = add %40, %45
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %46, %50 (hasExternalUses)
%52:i32 = add %45, %51
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55 (hasExternalUses)
%57:i32 = xor %37, %56 (hasExternalUses)
%58:i32 = phi %0, %1, %57
infer %58


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1 = block 2
%2:i32 = var
%3:i32 = phi %1, %2, 1634760805:i32
%4:i32 = var
%5:i32 = var
%6:i32 = var
%7:i32 = var
%8:i32 = add %4, %7
%9:i32 = shl %8, 7:i32
%10:i32 = lshr %8, 25:i32
%11:i32 = or %9, %10
%12:i32 = xor %6, %11 (hasExternalUses)
%13:i32 = add %4, %12
%14:i32 = shl %13, 9:i32
%15:i32 = lshr %13, 23:i32
%16:i32 = or %14, %15
%17:i32 = xor %5, %16 (hasExternalUses)
%18:i32 = add %12, %17
%19:i32 = shl %18, 13:i32
%20:i32 = lshr %18, 19:i32
%21:i32 = or %19, %20
%22:i32 = xor %7, %21 (hasExternalUses)
%23:i32 = add %17, %22
%24:i32 = shl %23, 18:i32
%25:i32 = lshr %23, 14:i32
%26:i32 = or %24, %25
%27:i32 = xor %4, %26
%28:i32 = var
%29:i32 = var
%30:i32 = var
%31:i32 = add %29, %30
%32:i32 = shl %31, 7:i32
%33:i32 = lshr %31, 25:i32
%34:i32 = or %32, %33
%35:i32 = xor %28, %34 (hasExternalUses)
%36:i32 = add %27, %35
%37:i32 = shl %36, 7:i32
%38:i32 = lshr %36, 25:i32
%39:i32 = or %37, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = add %40, %42
%44:i32 = shl %43, 7:i32
%45:i32 = lshr %43, 25:i32
%46:i32 = or %44, %45
%47:i32 = xor %41, %46 (hasExternalUses)
%48:i32 = var
%49:i32 = add %42, %47
%50:i32 = shl %49, 9:i32
%51:i32 = lshr %49, 23:i32
%52:i32 = or %50, %51
%53:i32 = xor %48, %52 (hasExternalUses)
%54:i32 = add %47, %53
%55:i32 = shl %54, 13:i32
%56:i32 = lshr %54, 19:i32
%57:i32 = or %55, %56
%58:i32 = xor %40, %57 (hasExternalUses)
%59:i32 = xor %39, %58 (hasExternalUses)
%60:i32 = add %27, %59
%61:i32 = shl %60, 9:i32
%62:i32 = lshr %60, 23:i32
%63:i32 = or %61, %62
%64:i32 = var
%65:i32 = var
%66:i32 = var
%67:i32 = var
%68:i32 = add %67, %65
%69:i32 = shl %68, 7:i32
%70:i32 = lshr %68, 25:i32
%71:i32 = or %69, %70
%72:i32 = xor %66, %71 (hasExternalUses)
%73:i32 = add %65, %72
%74:i32 = shl %73, 9:i32
%75:i32 = lshr %73, 23:i32
%76:i32 = or %74, %75
%77:i32 = xor %64, %76 (hasExternalUses)
%78:i32 = xor %63, %77 (hasExternalUses)
%79:i32 = add %59, %78
%80:i32 = shl %79, 13:i32
%81:i32 = lshr %79, 19:i32
%82:i32 = or %80, %81
%83:i32 = xor %82, %35 (hasExternalUses)
%84:i32 = add %78, %83
%85:i32 = shl %84, 18:i32
%86:i32 = lshr %84, 14:i32
%87:i32 = or %85, %86
%88:i32 = xor %87, %27 (hasExternalUses)
%89:i32 = phi %0, %3, %88
infer %89


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1634760805
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0 = block 2
%1:i32 = var
%2:i32 = phi %0, %1, 1634760805:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = phi %0, %1, 1634760805:i32
%3 = block 2
%4:i32 = var
%5:i32 = var
%6:i32 = var
%7:i32 = var
%8:i32 = add %4, %7
%9:i32 = shl %8, 7:i32
%10:i32 = lshr %8, 25:i32
%11:i32 = or %9, %10
%12:i32 = xor %6, %11
%13:i32 = add %4, %12
%14:i32 = shl %13, 9:i32
%15:i32 = lshr %13, 23:i32
%16:i32 = or %14, %15
%17:i32 = xor %5, %16
%18:i32 = add %12, %17
%19:i32 = shl %18, 13:i32
%20:i32 = lshr %18, 19:i32
%21:i32 = or %19, %20
%22:i32 = xor %7, %21
%23:i32 = add %17, %22
%24:i32 = shl %23, 18:i32
%25:i32 = lshr %23, 14:i32
%26:i32 = or %24, %25
%27:i32 = xor %4, %26
%28:i32 = var
%29:i32 = var
%30:i32 = var
%31:i32 = add %29, %30
%32:i32 = shl %31, 7:i32
%33:i32 = lshr %31, 25:i32
%34:i32 = or %32, %33
%35:i32 = xor %28, %34
%36:i32 = add %27, %35
%37:i32 = shl %36, 7:i32
%38:i32 = lshr %36, 25:i32
%39:i32 = or %37, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = add %40, %42
%44:i32 = shl %43, 7:i32
%45:i32 = lshr %43, 25:i32
%46:i32 = or %44, %45
%47:i32 = xor %41, %46
%48:i32 = var
%49:i32 = add %42, %47
%50:i32 = shl %49, 9:i32
%51:i32 = lshr %49, 23:i32
%52:i32 = or %50, %51
%53:i32 = xor %48, %52
%54:i32 = add %47, %53
%55:i32 = shl %54, 13:i32
%56:i32 = lshr %54, 19:i32
%57:i32 = or %55, %56
%58:i32 = xor %40, %57
%59:i32 = xor %39, %58
%60:i32 = add %27, %59
%61:i32 = shl %60, 9:i32
%62:i32 = lshr %60, 23:i32
%63:i32 = or %61, %62
%64:i32 = var
%65:i32 = var
%66:i32 = var
%67:i32 = var
%68:i32 = add %67, %65
%69:i32 = shl %68, 7:i32
%70:i32 = lshr %68, 25:i32
%71:i32 = or %69, %70
%72:i32 = xor %66, %71
%73:i32 = add %65, %72
%74:i32 = shl %73, 9:i32
%75:i32 = lshr %73, 23:i32
%76:i32 = or %74, %75
%77:i32 = xor %64, %76
%78:i32 = xor %63, %77
%79:i32 = add %59, %78
%80:i32 = shl %79, 13:i32
%81:i32 = lshr %79, 19:i32
%82:i32 = or %80, %81
%83:i32 = xor %82, %35
%84:i32 = add %78, %83
%85:i32 = shl %84, 18:i32
%86:i32 = lshr %84, 14:i32
%87:i32 = or %85, %86
%88:i32 = xor %87, %27
%89:i32 = phi %3, %2, %88
%90:i32 = add %2, %89
infer %90


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1634760805
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 202
1 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1025445686
2 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0 = block 2
%1:i32 = var
%2:i32 = phi %0, %1, 1634760805:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22

Cost = 5
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
%81:i32 = shl %80, 18:i32
%82:i32 = lshr %80, 14:i32
%83:i32 = or %81, %82

Cost = 4
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
%81:i32 = shl %80, 18:i32
%82:i32 = lshr %80, 14:i32
%83:i32 = or %81, %82
%84:i32 = xor %83, %23

Cost = 10
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0 = block 2
%1 = block 2
%2:i32 = var
%3:i32 = phi %1, %2, 1634760805:i32
%4:i32 = var
%5:i32 = var
%6:i32 = var
%7:i32 = var
%8:i32 = add %4, %7
%9:i32 = shl %8, 7:i32
%10:i32 = lshr %8, 25:i32
%11:i32 = or %9, %10
%12:i32 = xor %6, %11 (hasExternalUses)
%13:i32 = add %4, %12
%14:i32 = shl %13, 9:i32
%15:i32 = lshr %13, 23:i32
%16:i32 = or %14, %15
%17:i32 = xor %5, %16 (hasExternalUses)
%18:i32 = add %12, %17
%19:i32 = shl %18, 13:i32
%20:i32 = lshr %18, 19:i32
%21:i32 = or %19, %20
%22:i32 = xor %7, %21 (hasExternalUses)
%23:i32 = add %17, %22
%24:i32 = shl %23, 18:i32
%25:i32 = lshr %23, 14:i32
%26:i32 = or %24, %25
%27:i32 = xor %4, %26
%28:i32 = var
%29:i32 = var
%30:i32 = var
%31:i32 = add %29, %30
%32:i32 = shl %31, 7:i32
%33:i32 = lshr %31, 25:i32
%34:i32 = or %32, %33
%35:i32 = xor %28, %34 (hasExternalUses)
%36:i32 = add %27, %35
%37:i32 = shl %36, 7:i32
%38:i32 = lshr %36, 25:i32
%39:i32 = or %37, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = add %40, %42
%44:i32 = shl %43, 7:i32
%45:i32 = lshr %43, 25:i32
%46:i32 = or %44, %45
%47:i32 = xor %41, %46 (hasExternalUses)
%48:i32 = var
%49:i32 = add %42, %47
%50:i32 = shl %49, 9:i32
%51:i32 = lshr %49, 23:i32
%52:i32 = or %50, %51
%53:i32 = xor %48, %52 (hasExternalUses)
%54:i32 = add %47, %53
%55:i32 = shl %54, 13:i32
%56:i32 = lshr %54, 19:i32
%57:i32 = or %55, %56
%58:i32 = xor %40, %57 (hasExternalUses)
%59:i32 = xor %39, %58 (hasExternalUses)
%60:i32 = add %27, %59
%61:i32 = shl %60, 9:i32
%62:i32 = lshr %60, 23:i32
%63:i32 = or %61, %62
%64:i32 = var
%65:i32 = var
%66:i32 = var
%67:i32 = var
%68:i32 = add %67, %65
%69:i32 = shl %68, 7:i32
%70:i32 = lshr %68, 25:i32
%71:i32 = or %69, %70
%72:i32 = xor %66, %71 (hasExternalUses)
%73:i32 = add %65, %72
%74:i32 = shl %73, 9:i32
%75:i32 = lshr %73, 23:i32
%76:i32 = or %74, %75
%77:i32 = xor %64, %76 (hasExternalUses)
%78:i32 = xor %63, %77 (hasExternalUses)
%79:i32 = add %59, %78
%80:i32 = shl %79, 13:i32
%81:i32 = lshr %79, 19:i32
%82:i32 = or %80, %81
%83:i32 = xor %82, %35 (hasExternalUses)
%84:i32 = add %78, %83
%85:i32 = shl %84, 18:i32
%86:i32 = lshr %84, 14:i32
%87:i32 = or %85, %86
%88:i32 = xor %87, %27 (hasExternalUses)
%89:i32 = phi %0, %3, %88

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1 = block 2
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = add %2, %5
%7:i32 = shl %6, 7:i32
%8:i32 = lshr %6, 25:i32
%9:i32 = or %7, %8
%10:i32 = xor %4, %9
%11:i32 = add %2, %10
%12:i32 = shl %11, 9:i32
%13:i32 = lshr %11, 23:i32
%14:i32 = or %12, %13
%15:i32 = xor %3, %14
%16:i32 = add %10, %15
%17:i32 = shl %16, 13:i32
%18:i32 = lshr %16, 19:i32
%19:i32 = or %17, %18
%20:i32 = xor %5, %19
%21:i32 = add %15, %20
%22:i32 = shl %21, 18:i32
%23:i32 = lshr %21, 14:i32
%24:i32 = or %22, %23
%25:i32 = xor %2, %24
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29:i32 = add %27, %28
%30:i32 = shl %29, 7:i32
%31:i32 = lshr %29, 25:i32
%32:i32 = or %30, %31
%33:i32 = xor %26, %32
%34:i32 = add %25, %33
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %38, %40
%42:i32 = shl %41, 7:i32
%43:i32 = lshr %41, 25:i32
%44:i32 = or %42, %43
%45:i32 = xor %39, %44
%46:i32 = var
%47:i32 = add %40, %45
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %46, %50
%52:i32 = add %45, %51
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55
%57:i32 = xor %37, %56
%58:i32 = phi %1, %0, %57
%59:i32 = add %0, %58
infer %59


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16

Cost = 4
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17

Cost = 5
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34

Cost = 4
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54

Cost = 5
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = add %2, %5
%7:i32 = shl %6, 7:i32
%8:i32 = lshr %6, 25:i32
%9:i32 = or %7, %8
%10:i32 = xor %4, %9 (hasExternalUses)
%11:i32 = add %2, %10
%12:i32 = shl %11, 9:i32
%13:i32 = lshr %11, 23:i32
%14:i32 = or %12, %13
%15:i32 = xor %3, %14 (hasExternalUses)
%16:i32 = add %10, %15
%17:i32 = shl %16, 13:i32
%18:i32 = lshr %16, 19:i32
%19:i32 = or %17, %18
%20:i32 = xor %5, %19 (hasExternalUses)
%21:i32 = add %15, %20
%22:i32 = shl %21, 18:i32
%23:i32 = lshr %21, 14:i32
%24:i32 = or %22, %23
%25:i32 = xor %2, %24 (hasExternalUses)
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29:i32 = add %27, %28
%30:i32 = shl %29, 7:i32
%31:i32 = lshr %29, 25:i32
%32:i32 = or %30, %31
%33:i32 = xor %26, %32 (hasExternalUses)
%34:i32 = add %25, %33
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %38, %40
%42:i32 = shl %41, 7:i32
%43:i32 = lshr %41, 25:i32
%44:i32 = or %42, %43
%45:i32 = xor %39, %44 (hasExternalUses)
%46:i32 = var
%47:i32 = add %40, %45
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %46, %50 (hasExternalUses)
%52:i32 = add %45, %51
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55 (hasExternalUses)
%57:i32 = xor %37, %56 (hasExternalUses)
%58:i32 = phi %0, %1, %57

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1 = block 2
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = add %2, %5
%7:i32 = shl %6, 7:i32
%8:i32 = lshr %6, 25:i32
%9:i32 = or %7, %8
%10:i32 = xor %4, %9
%11:i32 = add %2, %10
%12:i32 = shl %11, 9:i32
%13:i32 = lshr %11, 23:i32
%14:i32 = or %12, %13
%15:i32 = xor %3, %14
%16:i32 = add %10, %15
%17:i32 = shl %16, 13:i32
%18:i32 = lshr %16, 19:i32
%19:i32 = or %17, %18
%20:i32 = xor %5, %19
%21:i32 = add %15, %20
%22:i32 = shl %21, 18:i32
%23:i32 = lshr %21, 14:i32
%24:i32 = or %22, %23
%25:i32 = xor %2, %24
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29:i32 = add %27, %28
%30:i32 = shl %29, 7:i32
%31:i32 = lshr %29, 25:i32
%32:i32 = or %30, %31
%33:i32 = xor %26, %32
%34:i32 = add %25, %33
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %38, %40
%42:i32 = shl %41, 7:i32
%43:i32 = lshr %41, 25:i32
%44:i32 = or %42, %43
%45:i32 = xor %39, %44
%46:i32 = var
%47:i32 = add %40, %45
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %46, %50
%52:i32 = add %45, %51
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55
%57:i32 = xor %37, %56
%58:i32 = add %25, %57
%59:i32 = shl %58, 9:i32
%60:i32 = lshr %58, 23:i32
%61:i32 = or %59, %60
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = var
%66:i32 = add %65, %63
%67:i32 = shl %66, 7:i32
%68:i32 = lshr %66, 25:i32
%69:i32 = or %67, %68
%70:i32 = xor %64, %69
%71:i32 = add %63, %70
%72:i32 = shl %71, 9:i32
%73:i32 = lshr %71, 23:i32
%74:i32 = or %72, %73
%75:i32 = xor %62, %74
%76:i32 = xor %61, %75
%77:i32 = phi %1, %0, %76
%78:i32 = add %0, %77
infer %78


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7
%9:i32 = shl %8, 9:i32
%10:i32 = lshr %8, 23:i32
%11:i32 = or %9, %10

Cost = 4
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12

Cost = 5
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58

Cost = 4
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73

Cost = 5
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = add %2, %5
%7:i32 = shl %6, 7:i32
%8:i32 = lshr %6, 25:i32
%9:i32 = or %7, %8
%10:i32 = xor %4, %9 (hasExternalUses)
%11:i32 = add %2, %10
%12:i32 = shl %11, 9:i32
%13:i32 = lshr %11, 23:i32
%14:i32 = or %12, %13
%15:i32 = xor %3, %14 (hasExternalUses)
%16:i32 = add %10, %15
%17:i32 = shl %16, 13:i32
%18:i32 = lshr %16, 19:i32
%19:i32 = or %17, %18
%20:i32 = xor %5, %19 (hasExternalUses)
%21:i32 = add %15, %20
%22:i32 = shl %21, 18:i32
%23:i32 = lshr %21, 14:i32
%24:i32 = or %22, %23
%25:i32 = xor %2, %24 (hasExternalUses)
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29:i32 = add %27, %28
%30:i32 = shl %29, 7:i32
%31:i32 = lshr %29, 25:i32
%32:i32 = or %30, %31
%33:i32 = xor %26, %32 (hasExternalUses)
%34:i32 = add %25, %33
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %38, %40
%42:i32 = shl %41, 7:i32
%43:i32 = lshr %41, 25:i32
%44:i32 = or %42, %43
%45:i32 = xor %39, %44 (hasExternalUses)
%46:i32 = var
%47:i32 = add %40, %45
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %46, %50 (hasExternalUses)
%52:i32 = add %45, %51
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55 (hasExternalUses)
%57:i32 = xor %37, %56 (hasExternalUses)
%58:i32 = add %25, %57
%59:i32 = shl %58, 9:i32
%60:i32 = lshr %58, 23:i32
%61:i32 = or %59, %60
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = var
%66:i32 = add %65, %63
%67:i32 = shl %66, 7:i32
%68:i32 = lshr %66, 25:i32
%69:i32 = or %67, %68
%70:i32 = xor %64, %69 (hasExternalUses)
%71:i32 = add %63, %70
%72:i32 = shl %71, 9:i32
%73:i32 = lshr %71, 23:i32
%74:i32 = or %72, %73
%75:i32 = xor %62, %74 (hasExternalUses)
%76:i32 = xor %61, %75 (hasExternalUses)
%77:i32 = phi %0, %1, %76

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1 = block 2
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = add %2, %5
%7:i32 = shl %6, 7:i32
%8:i32 = lshr %6, 25:i32
%9:i32 = or %7, %8
%10:i32 = xor %4, %9
%11:i32 = add %2, %10
%12:i32 = shl %11, 9:i32
%13:i32 = lshr %11, 23:i32
%14:i32 = or %12, %13
%15:i32 = xor %3, %14
%16:i32 = add %10, %15
%17:i32 = shl %16, 13:i32
%18:i32 = lshr %16, 19:i32
%19:i32 = or %17, %18
%20:i32 = xor %5, %19
%21:i32 = add %15, %20
%22:i32 = shl %21, 18:i32
%23:i32 = lshr %21, 14:i32
%24:i32 = or %22, %23
%25:i32 = xor %2, %24
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29:i32 = add %27, %28
%30:i32 = shl %29, 7:i32
%31:i32 = lshr %29, 25:i32
%32:i32 = or %30, %31
%33:i32 = xor %26, %32
%34:i32 = add %25, %33
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %38, %40
%42:i32 = shl %41, 7:i32
%43:i32 = lshr %41, 25:i32
%44:i32 = or %42, %43
%45:i32 = xor %39, %44
%46:i32 = var
%47:i32 = add %40, %45
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %46, %50
%52:i32 = add %45, %51
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55
%57:i32 = xor %37, %56
%58:i32 = add %25, %57
%59:i32 = shl %58, 9:i32
%60:i32 = lshr %58, 23:i32
%61:i32 = or %59, %60
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = var
%66:i32 = add %65, %63
%67:i32 = shl %66, 7:i32
%68:i32 = lshr %66, 25:i32
%69:i32 = or %67, %68
%70:i32 = xor %64, %69
%71:i32 = add %63, %70
%72:i32 = shl %71, 9:i32
%73:i32 = lshr %71, 23:i32
%74:i32 = or %72, %73
%75:i32 = xor %62, %74
%76:i32 = xor %61, %75
%77:i32 = add %57, %76
%78:i32 = shl %77, 13:i32
%79:i32 = lshr %77, 19:i32
%80:i32 = or %78, %79
%81:i32 = xor %80, %33
%82:i32 = phi %1, %0, %81
%83:i32 = add %0, %82
infer %83


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = shl %2, 7:i32
%4:i32 = lshr %2, 25:i32
%5:i32 = or %3, %4

Cost = 4
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6

Cost = 5
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77

Cost = 4
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31

Cost = 5
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = add %2, %5
%7:i32 = shl %6, 7:i32
%8:i32 = lshr %6, 25:i32
%9:i32 = or %7, %8
%10:i32 = xor %4, %9 (hasExternalUses)
%11:i32 = add %2, %10
%12:i32 = shl %11, 9:i32
%13:i32 = lshr %11, 23:i32
%14:i32 = or %12, %13
%15:i32 = xor %3, %14 (hasExternalUses)
%16:i32 = add %10, %15
%17:i32 = shl %16, 13:i32
%18:i32 = lshr %16, 19:i32
%19:i32 = or %17, %18
%20:i32 = xor %5, %19 (hasExternalUses)
%21:i32 = add %15, %20
%22:i32 = shl %21, 18:i32
%23:i32 = lshr %21, 14:i32
%24:i32 = or %22, %23
%25:i32 = xor %2, %24 (hasExternalUses)
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29:i32 = add %27, %28
%30:i32 = shl %29, 7:i32
%31:i32 = lshr %29, 25:i32
%32:i32 = or %30, %31
%33:i32 = xor %26, %32 (hasExternalUses)
%34:i32 = add %25, %33
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %38, %40
%42:i32 = shl %41, 7:i32
%43:i32 = lshr %41, 25:i32
%44:i32 = or %42, %43
%45:i32 = xor %39, %44 (hasExternalUses)
%46:i32 = var
%47:i32 = add %40, %45
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %46, %50 (hasExternalUses)
%52:i32 = add %45, %51
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55 (hasExternalUses)
%57:i32 = xor %37, %56 (hasExternalUses)
%58:i32 = add %25, %57
%59:i32 = shl %58, 9:i32
%60:i32 = lshr %58, 23:i32
%61:i32 = or %59, %60
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = var
%66:i32 = add %65, %63
%67:i32 = shl %66, 7:i32
%68:i32 = lshr %66, 25:i32
%69:i32 = or %67, %68
%70:i32 = xor %64, %69 (hasExternalUses)
%71:i32 = add %63, %70
%72:i32 = shl %71, 9:i32
%73:i32 = lshr %71, 23:i32
%74:i32 = or %72, %73
%75:i32 = xor %62, %74 (hasExternalUses)
%76:i32 = xor %61, %75 (hasExternalUses)
%77:i32 = add %57, %76
%78:i32 = shl %77, 13:i32
%79:i32 = lshr %77, 19:i32
%80:i32 = or %78, %79
%81:i32 = xor %80, %33 (hasExternalUses)
%82:i32 = phi %0, %1, %81

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1 = block 2
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = add %3, %4
%6:i32 = shl %5, 7:i32
%7:i32 = lshr %5, 25:i32
%8:i32 = or %6, %7
%9:i32 = xor %2, %8
%10:i32 = var
%11:i32 = var
%12:i32 = var
%13:i32 = add %11, %10
%14:i32 = shl %13, 7:i32
%15:i32 = lshr %13, 25:i32
%16:i32 = or %14, %15
%17:i32 = xor %12, %16
%18:i32 = var
%19:i32 = add %10, %17
%20:i32 = shl %19, 9:i32
%21:i32 = lshr %19, 23:i32
%22:i32 = or %20, %21
%23:i32 = xor %18, %22
%24:i32 = add %17, %23
%25:i32 = shl %24, 13:i32
%26:i32 = lshr %24, 19:i32
%27:i32 = or %25, %26
%28:i32 = xor %11, %27
%29:i32 = add %28, %23
%30:i32 = shl %29, 18:i32
%31:i32 = lshr %29, 14:i32
%32:i32 = or %30, %31
%33:i32 = xor %10, %32
%34:i32 = add %9, %33
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = var
%42:i32 = add %38, %40
%43:i32 = shl %42, 7:i32
%44:i32 = lshr %42, 25:i32
%45:i32 = or %43, %44
%46:i32 = xor %41, %45
%47:i32 = add %40, %46
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %39, %50
%52:i32 = add %51, %46
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55
%57:i32 = xor %37, %56
%58:i32 = add %33, %57
%59:i32 = shl %58, 9:i32
%60:i32 = lshr %58, 23:i32
%61:i32 = or %59, %60
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = var
%66:i32 = add %65, %63
%67:i32 = shl %66, 7:i32
%68:i32 = lshr %66, 25:i32
%69:i32 = or %67, %68
%70:i32 = xor %64, %69
%71:i32 = add %63, %70
%72:i32 = shl %71, 9:i32
%73:i32 = lshr %71, 23:i32
%74:i32 = or %72, %73
%75:i32 = xor %62, %74
%76:i32 = xor %61, %75
%77:i32 = add %57, %76
%78:i32 = shl %77, 13:i32
%79:i32 = lshr %77, 19:i32
%80:i32 = or %78, %79
%81:i32 = xor %80, %9
%82:i32 = phi %1, %0, %81
%83:i32 = add %0, %82
infer %83


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = shl %2, 7:i32
%4:i32 = lshr %2, 25:i32
%5:i32 = or %3, %4

Cost = 4
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6

Cost = 5
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %31, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77

Cost = 4
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %31, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %7

Cost = 5
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = add %3, %4
%6:i32 = shl %5, 7:i32
%7:i32 = lshr %5, 25:i32
%8:i32 = or %6, %7
%9:i32 = xor %2, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = var
%12:i32 = var
%13:i32 = add %11, %10
%14:i32 = shl %13, 7:i32
%15:i32 = lshr %13, 25:i32
%16:i32 = or %14, %15
%17:i32 = xor %12, %16 (hasExternalUses)
%18:i32 = var
%19:i32 = add %10, %17
%20:i32 = shl %19, 9:i32
%21:i32 = lshr %19, 23:i32
%22:i32 = or %20, %21
%23:i32 = xor %18, %22 (hasExternalUses)
%24:i32 = add %17, %23
%25:i32 = shl %24, 13:i32
%26:i32 = lshr %24, 19:i32
%27:i32 = or %25, %26
%28:i32 = xor %11, %27 (hasExternalUses)
%29:i32 = add %28, %23
%30:i32 = shl %29, 18:i32
%31:i32 = lshr %29, 14:i32
%32:i32 = or %30, %31
%33:i32 = xor %10, %32 (hasExternalUses)
%34:i32 = add %9, %33
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = var
%42:i32 = add %38, %40
%43:i32 = shl %42, 7:i32
%44:i32 = lshr %42, 25:i32
%45:i32 = or %43, %44
%46:i32 = xor %41, %45 (hasExternalUses)
%47:i32 = add %40, %46
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %39, %50 (hasExternalUses)
%52:i32 = add %51, %46
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55 (hasExternalUses)
%57:i32 = xor %37, %56 (hasExternalUses)
%58:i32 = add %33, %57
%59:i32 = shl %58, 9:i32
%60:i32 = lshr %58, 23:i32
%61:i32 = or %59, %60
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = var
%66:i32 = add %65, %63
%67:i32 = shl %66, 7:i32
%68:i32 = lshr %66, 25:i32
%69:i32 = or %67, %68
%70:i32 = xor %64, %69 (hasExternalUses)
%71:i32 = add %63, %70
%72:i32 = shl %71, 9:i32
%73:i32 = lshr %71, 23:i32
%74:i32 = or %72, %73
%75:i32 = xor %62, %74 (hasExternalUses)
%76:i32 = xor %61, %75 (hasExternalUses)
%77:i32 = add %57, %76
%78:i32 = shl %77, 13:i32
%79:i32 = lshr %77, 19:i32
%80:i32 = or %78, %79
%81:i32 = xor %80, %9 (hasExternalUses)
%82:i32 = phi %0, %1, %81

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = phi %0, %1, 857760878:i32
%3 = block 2
%4:i32 = var
%5:i32 = var
%6:i32 = var
%7:i32 = add %5, %4
%8:i32 = shl %7, 7:i32
%9:i32 = lshr %7, 25:i32
%10:i32 = or %8, %9
%11:i32 = xor %6, %10
%12:i32 = var
%13:i32 = add %4, %11
%14:i32 = shl %13, 9:i32
%15:i32 = lshr %13, 23:i32
%16:i32 = or %14, %15
%17:i32 = xor %12, %16
%18:i32 = add %11, %17
%19:i32 = shl %18, 13:i32
%20:i32 = lshr %18, 19:i32
%21:i32 = or %19, %20
%22:i32 = xor %5, %21
%23:i32 = add %22, %17
%24:i32 = shl %23, 18:i32
%25:i32 = lshr %23, 14:i32
%26:i32 = or %24, %25
%27:i32 = xor %4, %26
%28:i32 = var
%29:i32 = var
%30:i32 = var
%31:i32 = add %29, %30
%32:i32 = shl %31, 7:i32
%33:i32 = lshr %31, 25:i32
%34:i32 = or %32, %33
%35:i32 = xor %28, %34
%36:i32 = add %35, %27
%37:i32 = shl %36, 7:i32
%38:i32 = lshr %36, 25:i32
%39:i32 = or %37, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %40, %42
%45:i32 = shl %44, 7:i32
%46:i32 = lshr %44, 25:i32
%47:i32 = or %45, %46
%48:i32 = xor %43, %47
%49:i32 = add %42, %48
%50:i32 = shl %49, 9:i32
%51:i32 = lshr %49, 23:i32
%52:i32 = or %50, %51
%53:i32 = xor %41, %52
%54:i32 = add %53, %48
%55:i32 = shl %54, 13:i32
%56:i32 = lshr %54, 19:i32
%57:i32 = or %55, %56
%58:i32 = xor %40, %57
%59:i32 = xor %39, %58
%60:i32 = add %27, %59
%61:i32 = shl %60, 9:i32
%62:i32 = lshr %60, 23:i32
%63:i32 = or %61, %62
%64:i32 = var
%65:i32 = var
%66:i32 = var
%67:i32 = var
%68:i32 = add %67, %65
%69:i32 = shl %68, 7:i32
%70:i32 = lshr %68, 25:i32
%71:i32 = or %69, %70
%72:i32 = xor %66, %71
%73:i32 = add %65, %72
%74:i32 = shl %73, 9:i32
%75:i32 = lshr %73, 23:i32
%76:i32 = or %74, %75
%77:i32 = xor %64, %76
%78:i32 = xor %63, %77
%79:i32 = add %59, %78
%80:i32 = shl %79, 13:i32
%81:i32 = lshr %79, 19:i32
%82:i32 = or %80, %81
%83:i32 = xor %82, %35
%84:i32 = add %78, %83
%85:i32 = shl %84, 18:i32
%86:i32 = lshr %84, 14:i32
%87:i32 = or %85, %86
%88:i32 = xor %87, %27
%89:i32 = phi %3, %2, %88
%90:i32 = add %2, %89
infer %90


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 857760878
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1715521756
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0 = block 2
%1:i32 = var
%2:i32 = phi %0, %1, 857760878:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22

Cost = 5
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
%81:i32 = shl %80, 18:i32
%82:i32 = lshr %80, 14:i32
%83:i32 = or %81, %82

Cost = 4
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
%81:i32 = shl %80, 18:i32
%82:i32 = lshr %80, 14:i32
%83:i32 = or %81, %82
%84:i32 = xor %83, %23

Cost = 10
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0 = block 2
%1 = block 2
%2:i32 = var
%3:i32 = phi %1, %2, 857760878:i32
%4:i32 = var
%5:i32 = var
%6:i32 = var
%7:i32 = add %5, %4
%8:i32 = shl %7, 7:i32
%9:i32 = lshr %7, 25:i32
%10:i32 = or %8, %9
%11:i32 = xor %6, %10 (hasExternalUses)
%12:i32 = var
%13:i32 = add %4, %11
%14:i32 = shl %13, 9:i32
%15:i32 = lshr %13, 23:i32
%16:i32 = or %14, %15
%17:i32 = xor %12, %16 (hasExternalUses)
%18:i32 = add %11, %17
%19:i32 = shl %18, 13:i32
%20:i32 = lshr %18, 19:i32
%21:i32 = or %19, %20
%22:i32 = xor %5, %21 (hasExternalUses)
%23:i32 = add %22, %17
%24:i32 = shl %23, 18:i32
%25:i32 = lshr %23, 14:i32
%26:i32 = or %24, %25
%27:i32 = xor %4, %26
%28:i32 = var
%29:i32 = var
%30:i32 = var
%31:i32 = add %29, %30
%32:i32 = shl %31, 7:i32
%33:i32 = lshr %31, 25:i32
%34:i32 = or %32, %33
%35:i32 = xor %28, %34 (hasExternalUses)
%36:i32 = add %35, %27
%37:i32 = shl %36, 7:i32
%38:i32 = lshr %36, 25:i32
%39:i32 = or %37, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %40, %42
%45:i32 = shl %44, 7:i32
%46:i32 = lshr %44, 25:i32
%47:i32 = or %45, %46
%48:i32 = xor %43, %47 (hasExternalUses)
%49:i32 = add %42, %48
%50:i32 = shl %49, 9:i32
%51:i32 = lshr %49, 23:i32
%52:i32 = or %50, %51
%53:i32 = xor %41, %52 (hasExternalUses)
%54:i32 = add %53, %48
%55:i32 = shl %54, 13:i32
%56:i32 = lshr %54, 19:i32
%57:i32 = or %55, %56
%58:i32 = xor %40, %57 (hasExternalUses)
%59:i32 = xor %39, %58 (hasExternalUses)
%60:i32 = add %27, %59
%61:i32 = shl %60, 9:i32
%62:i32 = lshr %60, 23:i32
%63:i32 = or %61, %62
%64:i32 = var
%65:i32 = var
%66:i32 = var
%67:i32 = var
%68:i32 = add %67, %65
%69:i32 = shl %68, 7:i32
%70:i32 = lshr %68, 25:i32
%71:i32 = or %69, %70
%72:i32 = xor %66, %71 (hasExternalUses)
%73:i32 = add %65, %72
%74:i32 = shl %73, 9:i32
%75:i32 = lshr %73, 23:i32
%76:i32 = or %74, %75
%77:i32 = xor %64, %76 (hasExternalUses)
%78:i32 = xor %63, %77 (hasExternalUses)
%79:i32 = add %59, %78
%80:i32 = shl %79, 13:i32
%81:i32 = lshr %79, 19:i32
%82:i32 = or %80, %81
%83:i32 = xor %82, %35 (hasExternalUses)
%84:i32 = add %78, %83
%85:i32 = shl %84, 18:i32
%86:i32 = lshr %84, 14:i32
%87:i32 = or %85, %86
%88:i32 = xor %87, %27 (hasExternalUses)
%89:i32 = phi %0, %3, %88

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1 = block 2
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = add %3, %4
%6:i32 = shl %5, 7:i32
%7:i32 = lshr %5, 25:i32
%8:i32 = or %6, %7
%9:i32 = xor %2, %8
%10:i32 = var
%11:i32 = var
%12:i32 = var
%13:i32 = add %11, %10
%14:i32 = shl %13, 7:i32
%15:i32 = lshr %13, 25:i32
%16:i32 = or %14, %15
%17:i32 = xor %12, %16
%18:i32 = var
%19:i32 = add %10, %17
%20:i32 = shl %19, 9:i32
%21:i32 = lshr %19, 23:i32
%22:i32 = or %20, %21
%23:i32 = xor %18, %22
%24:i32 = add %17, %23
%25:i32 = shl %24, 13:i32
%26:i32 = lshr %24, 19:i32
%27:i32 = or %25, %26
%28:i32 = xor %11, %27
%29:i32 = add %28, %23
%30:i32 = shl %29, 18:i32
%31:i32 = lshr %29, 14:i32
%32:i32 = or %30, %31
%33:i32 = xor %10, %32
%34:i32 = add %9, %33
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = var
%42:i32 = add %38, %40
%43:i32 = shl %42, 7:i32
%44:i32 = lshr %42, 25:i32
%45:i32 = or %43, %44
%46:i32 = xor %41, %45
%47:i32 = add %40, %46
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %39, %50
%52:i32 = add %51, %46
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55
%57:i32 = xor %37, %56
%58:i32 = phi %1, %0, %57
%59:i32 = add %0, %58
infer %59


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16

Cost = 4
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %2
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = add %2, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17

Cost = 5
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34

Cost = 4
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54

Cost = 5
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = add %3, %4
%6:i32 = shl %5, 7:i32
%7:i32 = lshr %5, 25:i32
%8:i32 = or %6, %7
%9:i32 = xor %2, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = var
%12:i32 = var
%13:i32 = add %11, %10
%14:i32 = shl %13, 7:i32
%15:i32 = lshr %13, 25:i32
%16:i32 = or %14, %15
%17:i32 = xor %12, %16 (hasExternalUses)
%18:i32 = var
%19:i32 = add %10, %17
%20:i32 = shl %19, 9:i32
%21:i32 = lshr %19, 23:i32
%22:i32 = or %20, %21
%23:i32 = xor %18, %22 (hasExternalUses)
%24:i32 = add %17, %23
%25:i32 = shl %24, 13:i32
%26:i32 = lshr %24, 19:i32
%27:i32 = or %25, %26
%28:i32 = xor %11, %27 (hasExternalUses)
%29:i32 = add %28, %23
%30:i32 = shl %29, 18:i32
%31:i32 = lshr %29, 14:i32
%32:i32 = or %30, %31
%33:i32 = xor %10, %32 (hasExternalUses)
%34:i32 = add %9, %33
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = var
%42:i32 = add %38, %40
%43:i32 = shl %42, 7:i32
%44:i32 = lshr %42, 25:i32
%45:i32 = or %43, %44
%46:i32 = xor %41, %45 (hasExternalUses)
%47:i32 = add %40, %46
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %39, %50 (hasExternalUses)
%52:i32 = add %51, %46
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55 (hasExternalUses)
%57:i32 = xor %37, %56 (hasExternalUses)
%58:i32 = phi %0, %1, %57

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1 = block 2
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = add %3, %2
%6:i32 = shl %5, 7:i32
%7:i32 = lshr %5, 25:i32
%8:i32 = or %6, %7
%9:i32 = xor %4, %8
%10:i32 = var
%11:i32 = add %2, %9
%12:i32 = shl %11, 9:i32
%13:i32 = lshr %11, 23:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14
%16:i32 = add %9, %15
%17:i32 = shl %16, 13:i32
%18:i32 = lshr %16, 19:i32
%19:i32 = or %17, %18
%20:i32 = xor %3, %19
%21:i32 = add %20, %15
%22:i32 = shl %21, 18:i32
%23:i32 = lshr %21, 14:i32
%24:i32 = or %22, %23
%25:i32 = xor %2, %24
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29:i32 = add %27, %28
%30:i32 = shl %29, 7:i32
%31:i32 = lshr %29, 25:i32
%32:i32 = or %30, %31
%33:i32 = xor %26, %32
%34:i32 = add %33, %25
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = var
%42:i32 = add %38, %40
%43:i32 = shl %42, 7:i32
%44:i32 = lshr %42, 25:i32
%45:i32 = or %43, %44
%46:i32 = xor %41, %45
%47:i32 = add %40, %46
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %39, %50
%52:i32 = add %51, %46
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55
%57:i32 = xor %37, %56
%58:i32 = add %25, %57
%59:i32 = shl %58, 9:i32
%60:i32 = lshr %58, 23:i32
%61:i32 = or %59, %60
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = var
%66:i32 = add %65, %63
%67:i32 = shl %66, 7:i32
%68:i32 = lshr %66, 25:i32
%69:i32 = or %67, %68
%70:i32 = xor %64, %69
%71:i32 = add %63, %70
%72:i32 = shl %71, 9:i32
%73:i32 = lshr %71, 23:i32
%74:i32 = or %72, %73
%75:i32 = xor %62, %74
%76:i32 = xor %61, %75
%77:i32 = phi %1, %0, %76
%78:i32 = add %0, %77
infer %78


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7
%9:i32 = shl %8, 9:i32
%10:i32 = lshr %8, 23:i32
%11:i32 = or %9, %10

Cost = 4
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12

Cost = 5
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58

Cost = 4
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %36, %38
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %39, %43 (hasExternalUses)
%45:i32 = add %38, %44
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %37, %48 (hasExternalUses)
%50:i32 = add %49, %44
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73

Cost = 5
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = add %3, %2
%6:i32 = shl %5, 7:i32
%7:i32 = lshr %5, 25:i32
%8:i32 = or %6, %7
%9:i32 = xor %4, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = add %2, %9
%12:i32 = shl %11, 9:i32
%13:i32 = lshr %11, 23:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = add %9, %15
%17:i32 = shl %16, 13:i32
%18:i32 = lshr %16, 19:i32
%19:i32 = or %17, %18
%20:i32 = xor %3, %19 (hasExternalUses)
%21:i32 = add %20, %15
%22:i32 = shl %21, 18:i32
%23:i32 = lshr %21, 14:i32
%24:i32 = or %22, %23
%25:i32 = xor %2, %24 (hasExternalUses)
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29:i32 = add %27, %28
%30:i32 = shl %29, 7:i32
%31:i32 = lshr %29, 25:i32
%32:i32 = or %30, %31
%33:i32 = xor %26, %32 (hasExternalUses)
%34:i32 = add %33, %25
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = var
%42:i32 = add %38, %40
%43:i32 = shl %42, 7:i32
%44:i32 = lshr %42, 25:i32
%45:i32 = or %43, %44
%46:i32 = xor %41, %45 (hasExternalUses)
%47:i32 = add %40, %46
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %39, %50 (hasExternalUses)
%52:i32 = add %51, %46
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55 (hasExternalUses)
%57:i32 = xor %37, %56 (hasExternalUses)
%58:i32 = add %25, %57
%59:i32 = shl %58, 9:i32
%60:i32 = lshr %58, 23:i32
%61:i32 = or %59, %60
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = var
%66:i32 = add %65, %63
%67:i32 = shl %66, 7:i32
%68:i32 = lshr %66, 25:i32
%69:i32 = or %67, %68
%70:i32 = xor %64, %69 (hasExternalUses)
%71:i32 = add %63, %70
%72:i32 = shl %71, 9:i32
%73:i32 = lshr %71, 23:i32
%74:i32 = or %72, %73
%75:i32 = xor %62, %74 (hasExternalUses)
%76:i32 = xor %61, %75 (hasExternalUses)
%77:i32 = phi %0, %1, %76

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1 = block 2
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = add %5, %2
%7:i32 = shl %6, 7:i32
%8:i32 = lshr %6, 25:i32
%9:i32 = or %7, %8
%10:i32 = xor %4, %9
%11:i32 = add %2, %10
%12:i32 = shl %11, 9:i32
%13:i32 = lshr %11, 23:i32
%14:i32 = or %12, %13
%15:i32 = xor %3, %14
%16:i32 = add %15, %10
%17:i32 = shl %16, 13:i32
%18:i32 = lshr %16, 19:i32
%19:i32 = or %17, %18
%20:i32 = xor %5, %19
%21:i32 = add %15, %20
%22:i32 = shl %21, 18:i32
%23:i32 = lshr %21, 14:i32
%24:i32 = or %22, %23
%25:i32 = xor %2, %24
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29:i32 = add %27, %28
%30:i32 = shl %29, 7:i32
%31:i32 = lshr %29, 25:i32
%32:i32 = or %30, %31
%33:i32 = xor %26, %32
%34:i32 = add %33, %25
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %38, %40
%42:i32 = shl %41, 7:i32
%43:i32 = lshr %41, 25:i32
%44:i32 = or %42, %43
%45:i32 = xor %39, %44
%46:i32 = var
%47:i32 = add %40, %45
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %46, %50
%52:i32 = add %45, %51
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55
%57:i32 = xor %37, %56
%58:i32 = add %25, %57
%59:i32 = shl %58, 9:i32
%60:i32 = lshr %58, 23:i32
%61:i32 = or %59, %60
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = var
%66:i32 = add %63, %65
%67:i32 = shl %66, 7:i32
%68:i32 = lshr %66, 25:i32
%69:i32 = or %67, %68
%70:i32 = xor %64, %69
%71:i32 = add %63, %70
%72:i32 = shl %71, 9:i32
%73:i32 = lshr %71, 23:i32
%74:i32 = or %72, %73
%75:i32 = xor %62, %74
%76:i32 = xor %61, %75
%77:i32 = phi %1, %0, %76
%78:i32 = add %0, %77
infer %78


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7
%9:i32 = shl %8, 9:i32
%10:i32 = lshr %8, 23:i32
%11:i32 = or %9, %10

Cost = 4
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %1, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12

Cost = 5
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58

Cost = 4
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73

Cost = 5
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = add %5, %2
%7:i32 = shl %6, 7:i32
%8:i32 = lshr %6, 25:i32
%9:i32 = or %7, %8
%10:i32 = xor %4, %9 (hasExternalUses)
%11:i32 = add %2, %10
%12:i32 = shl %11, 9:i32
%13:i32 = lshr %11, 23:i32
%14:i32 = or %12, %13
%15:i32 = xor %3, %14 (hasExternalUses)
%16:i32 = add %15, %10
%17:i32 = shl %16, 13:i32
%18:i32 = lshr %16, 19:i32
%19:i32 = or %17, %18
%20:i32 = xor %5, %19 (hasExternalUses)
%21:i32 = add %15, %20
%22:i32 = shl %21, 18:i32
%23:i32 = lshr %21, 14:i32
%24:i32 = or %22, %23
%25:i32 = xor %2, %24 (hasExternalUses)
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29:i32 = add %27, %28
%30:i32 = shl %29, 7:i32
%31:i32 = lshr %29, 25:i32
%32:i32 = or %30, %31
%33:i32 = xor %26, %32 (hasExternalUses)
%34:i32 = add %33, %25
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %38, %40
%42:i32 = shl %41, 7:i32
%43:i32 = lshr %41, 25:i32
%44:i32 = or %42, %43
%45:i32 = xor %39, %44 (hasExternalUses)
%46:i32 = var
%47:i32 = add %40, %45
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %46, %50 (hasExternalUses)
%52:i32 = add %45, %51
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55 (hasExternalUses)
%57:i32 = xor %37, %56 (hasExternalUses)
%58:i32 = add %25, %57
%59:i32 = shl %58, 9:i32
%60:i32 = lshr %58, 23:i32
%61:i32 = or %59, %60
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = var
%66:i32 = add %63, %65
%67:i32 = shl %66, 7:i32
%68:i32 = lshr %66, 25:i32
%69:i32 = or %67, %68
%70:i32 = xor %64, %69 (hasExternalUses)
%71:i32 = add %63, %70
%72:i32 = shl %71, 9:i32
%73:i32 = lshr %71, 23:i32
%74:i32 = or %72, %73
%75:i32 = xor %62, %74 (hasExternalUses)
%76:i32 = xor %61, %75 (hasExternalUses)
%77:i32 = phi %0, %1, %76

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1 = block 2
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = add %3, %4
%6:i32 = shl %5, 7:i32
%7:i32 = lshr %5, 25:i32
%8:i32 = or %6, %7
%9:i32 = xor %2, %8
%10:i32 = var
%11:i32 = var
%12:i32 = var
%13:i32 = var
%14:i32 = add %13, %10
%15:i32 = shl %14, 7:i32
%16:i32 = lshr %14, 25:i32
%17:i32 = or %15, %16
%18:i32 = xor %12, %17
%19:i32 = add %10, %18
%20:i32 = shl %19, 9:i32
%21:i32 = lshr %19, 23:i32
%22:i32 = or %20, %21
%23:i32 = xor %11, %22
%24:i32 = add %23, %18
%25:i32 = shl %24, 13:i32
%26:i32 = lshr %24, 19:i32
%27:i32 = or %25, %26
%28:i32 = xor %13, %27
%29:i32 = add %23, %28
%30:i32 = shl %29, 18:i32
%31:i32 = lshr %29, 14:i32
%32:i32 = or %30, %31
%33:i32 = xor %10, %32
%34:i32 = add %9, %33
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %38, %40
%42:i32 = shl %41, 7:i32
%43:i32 = lshr %41, 25:i32
%44:i32 = or %42, %43
%45:i32 = xor %39, %44
%46:i32 = var
%47:i32 = add %40, %45
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %46, %50
%52:i32 = add %45, %51
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55
%57:i32 = xor %37, %56
%58:i32 = add %33, %57
%59:i32 = shl %58, 9:i32
%60:i32 = lshr %58, 23:i32
%61:i32 = or %59, %60
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = var
%66:i32 = add %63, %65
%67:i32 = shl %66, 7:i32
%68:i32 = lshr %66, 25:i32
%69:i32 = or %67, %68
%70:i32 = xor %64, %69
%71:i32 = add %63, %70
%72:i32 = shl %71, 9:i32
%73:i32 = lshr %71, 23:i32
%74:i32 = or %72, %73
%75:i32 = xor %62, %74
%76:i32 = xor %61, %75
%77:i32 = add %57, %76
%78:i32 = shl %77, 13:i32
%79:i32 = lshr %77, 19:i32
%80:i32 = or %78, %79
%81:i32 = xor %80, %9
%82:i32 = phi %1, %0, %81
%83:i32 = add %0, %82
infer %83


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = shl %2, 7:i32
%4:i32 = lshr %2, 25:i32
%5:i32 = or %3, %4

Cost = 4
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6

Cost = 5
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = var
%12:i32 = add %11, %8
%13:i32 = shl %12, 7:i32
%14:i32 = lshr %12, 25:i32
%15:i32 = or %13, %14
%16:i32 = xor %10, %15 (hasExternalUses)
%17:i32 = add %8, %16
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %9, %20 (hasExternalUses)
%22:i32 = add %21, %16
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %11, %25 (hasExternalUses)
%27:i32 = add %21, %26
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %31, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77

Cost = 4
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = var
%12:i32 = add %11, %8
%13:i32 = shl %12, 7:i32
%14:i32 = lshr %12, 25:i32
%15:i32 = or %13, %14
%16:i32 = xor %10, %15 (hasExternalUses)
%17:i32 = add %8, %16
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %9, %20 (hasExternalUses)
%22:i32 = add %21, %16
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %11, %25 (hasExternalUses)
%27:i32 = add %21, %26
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %31, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %7

Cost = 5
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = add %3, %4
%6:i32 = shl %5, 7:i32
%7:i32 = lshr %5, 25:i32
%8:i32 = or %6, %7
%9:i32 = xor %2, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = var
%12:i32 = var
%13:i32 = var
%14:i32 = add %13, %10
%15:i32 = shl %14, 7:i32
%16:i32 = lshr %14, 25:i32
%17:i32 = or %15, %16
%18:i32 = xor %12, %17 (hasExternalUses)
%19:i32 = add %10, %18
%20:i32 = shl %19, 9:i32
%21:i32 = lshr %19, 23:i32
%22:i32 = or %20, %21
%23:i32 = xor %11, %22 (hasExternalUses)
%24:i32 = add %23, %18
%25:i32 = shl %24, 13:i32
%26:i32 = lshr %24, 19:i32
%27:i32 = or %25, %26
%28:i32 = xor %13, %27 (hasExternalUses)
%29:i32 = add %23, %28
%30:i32 = shl %29, 18:i32
%31:i32 = lshr %29, 14:i32
%32:i32 = or %30, %31
%33:i32 = xor %10, %32 (hasExternalUses)
%34:i32 = add %9, %33
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %38, %40
%42:i32 = shl %41, 7:i32
%43:i32 = lshr %41, 25:i32
%44:i32 = or %42, %43
%45:i32 = xor %39, %44 (hasExternalUses)
%46:i32 = var
%47:i32 = add %40, %45
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %46, %50 (hasExternalUses)
%52:i32 = add %45, %51
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55 (hasExternalUses)
%57:i32 = xor %37, %56 (hasExternalUses)
%58:i32 = add %33, %57
%59:i32 = shl %58, 9:i32
%60:i32 = lshr %58, 23:i32
%61:i32 = or %59, %60
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = var
%66:i32 = add %63, %65
%67:i32 = shl %66, 7:i32
%68:i32 = lshr %66, 25:i32
%69:i32 = or %67, %68
%70:i32 = xor %64, %69 (hasExternalUses)
%71:i32 = add %63, %70
%72:i32 = shl %71, 9:i32
%73:i32 = lshr %71, 23:i32
%74:i32 = or %72, %73
%75:i32 = xor %62, %74 (hasExternalUses)
%76:i32 = xor %61, %75 (hasExternalUses)
%77:i32 = add %57, %76
%78:i32 = shl %77, 13:i32
%79:i32 = lshr %77, 19:i32
%80:i32 = or %78, %79
%81:i32 = xor %80, %9 (hasExternalUses)
%82:i32 = phi %0, %1, %81

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = phi %0, %1, 2036477234:i32
%3 = block 2
%4:i32 = var
%5:i32 = var
%6:i32 = var
%7:i32 = var
%8:i32 = add %7, %4
%9:i32 = shl %8, 7:i32
%10:i32 = lshr %8, 25:i32
%11:i32 = or %9, %10
%12:i32 = xor %6, %11
%13:i32 = add %4, %12
%14:i32 = shl %13, 9:i32
%15:i32 = lshr %13, 23:i32
%16:i32 = or %14, %15
%17:i32 = xor %5, %16
%18:i32 = add %17, %12
%19:i32 = shl %18, 13:i32
%20:i32 = lshr %18, 19:i32
%21:i32 = or %19, %20
%22:i32 = xor %7, %21
%23:i32 = add %17, %22
%24:i32 = shl %23, 18:i32
%25:i32 = lshr %23, 14:i32
%26:i32 = or %24, %25
%27:i32 = xor %4, %26
%28:i32 = var
%29:i32 = var
%30:i32 = var
%31:i32 = add %29, %30
%32:i32 = shl %31, 7:i32
%33:i32 = lshr %31, 25:i32
%34:i32 = or %32, %33
%35:i32 = xor %28, %34
%36:i32 = add %35, %27
%37:i32 = shl %36, 7:i32
%38:i32 = lshr %36, 25:i32
%39:i32 = or %37, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = add %40, %42
%44:i32 = shl %43, 7:i32
%45:i32 = lshr %43, 25:i32
%46:i32 = or %44, %45
%47:i32 = xor %41, %46
%48:i32 = var
%49:i32 = add %42, %47
%50:i32 = shl %49, 9:i32
%51:i32 = lshr %49, 23:i32
%52:i32 = or %50, %51
%53:i32 = xor %48, %52
%54:i32 = add %47, %53
%55:i32 = shl %54, 13:i32
%56:i32 = lshr %54, 19:i32
%57:i32 = or %55, %56
%58:i32 = xor %40, %57
%59:i32 = xor %39, %58
%60:i32 = add %27, %59
%61:i32 = shl %60, 9:i32
%62:i32 = lshr %60, 23:i32
%63:i32 = or %61, %62
%64:i32 = var
%65:i32 = var
%66:i32 = var
%67:i32 = var
%68:i32 = add %65, %67
%69:i32 = shl %68, 7:i32
%70:i32 = lshr %68, 25:i32
%71:i32 = or %69, %70
%72:i32 = xor %66, %71
%73:i32 = add %65, %72
%74:i32 = shl %73, 9:i32
%75:i32 = lshr %73, 23:i32
%76:i32 = or %74, %75
%77:i32 = xor %64, %76
%78:i32 = xor %63, %77
%79:i32 = add %59, %78
%80:i32 = shl %79, 13:i32
%81:i32 = lshr %79, 19:i32
%82:i32 = or %80, %81
%83:i32 = xor %82, %35
%84:i32 = add %78, %83
%85:i32 = shl %84, 18:i32
%86:i32 = lshr %84, 14:i32
%87:i32 = or %85, %86
%88:i32 = xor %87, %27
%89:i32 = phi %3, %2, %88
%90:i32 = add %2, %89
infer %90


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 2036477234
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1361710922
1 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -222012828
2 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0 = block 2
%1:i32 = var
%2:i32 = phi %0, %1, 2036477234:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22

Cost = 5
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
%81:i32 = shl %80, 18:i32
%82:i32 = lshr %80, 14:i32
%83:i32 = or %81, %82

Cost = 4
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %13, %8
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %61, %63
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
%81:i32 = shl %80, 18:i32
%82:i32 = lshr %80, 14:i32
%83:i32 = or %81, %82
%84:i32 = xor %83, %23

Cost = 10
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0 = block 2
%1 = block 2
%2:i32 = var
%3:i32 = phi %1, %2, 2036477234:i32
%4:i32 = var
%5:i32 = var
%6:i32 = var
%7:i32 = var
%8:i32 = add %7, %4
%9:i32 = shl %8, 7:i32
%10:i32 = lshr %8, 25:i32
%11:i32 = or %9, %10
%12:i32 = xor %6, %11 (hasExternalUses)
%13:i32 = add %4, %12
%14:i32 = shl %13, 9:i32
%15:i32 = lshr %13, 23:i32
%16:i32 = or %14, %15
%17:i32 = xor %5, %16 (hasExternalUses)
%18:i32 = add %17, %12
%19:i32 = shl %18, 13:i32
%20:i32 = lshr %18, 19:i32
%21:i32 = or %19, %20
%22:i32 = xor %7, %21 (hasExternalUses)
%23:i32 = add %17, %22
%24:i32 = shl %23, 18:i32
%25:i32 = lshr %23, 14:i32
%26:i32 = or %24, %25
%27:i32 = xor %4, %26
%28:i32 = var
%29:i32 = var
%30:i32 = var
%31:i32 = add %29, %30
%32:i32 = shl %31, 7:i32
%33:i32 = lshr %31, 25:i32
%34:i32 = or %32, %33
%35:i32 = xor %28, %34 (hasExternalUses)
%36:i32 = add %35, %27
%37:i32 = shl %36, 7:i32
%38:i32 = lshr %36, 25:i32
%39:i32 = or %37, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = add %40, %42
%44:i32 = shl %43, 7:i32
%45:i32 = lshr %43, 25:i32
%46:i32 = or %44, %45
%47:i32 = xor %41, %46 (hasExternalUses)
%48:i32 = var
%49:i32 = add %42, %47
%50:i32 = shl %49, 9:i32
%51:i32 = lshr %49, 23:i32
%52:i32 = or %50, %51
%53:i32 = xor %48, %52 (hasExternalUses)
%54:i32 = add %47, %53
%55:i32 = shl %54, 13:i32
%56:i32 = lshr %54, 19:i32
%57:i32 = or %55, %56
%58:i32 = xor %40, %57 (hasExternalUses)
%59:i32 = xor %39, %58 (hasExternalUses)
%60:i32 = add %27, %59
%61:i32 = shl %60, 9:i32
%62:i32 = lshr %60, 23:i32
%63:i32 = or %61, %62
%64:i32 = var
%65:i32 = var
%66:i32 = var
%67:i32 = var
%68:i32 = add %65, %67
%69:i32 = shl %68, 7:i32
%70:i32 = lshr %68, 25:i32
%71:i32 = or %69, %70
%72:i32 = xor %66, %71 (hasExternalUses)
%73:i32 = add %65, %72
%74:i32 = shl %73, 9:i32
%75:i32 = lshr %73, 23:i32
%76:i32 = or %74, %75
%77:i32 = xor %64, %76 (hasExternalUses)
%78:i32 = xor %63, %77 (hasExternalUses)
%79:i32 = add %59, %78
%80:i32 = shl %79, 13:i32
%81:i32 = lshr %79, 19:i32
%82:i32 = or %80, %81
%83:i32 = xor %82, %35 (hasExternalUses)
%84:i32 = add %78, %83
%85:i32 = shl %84, 18:i32
%86:i32 = lshr %84, 14:i32
%87:i32 = or %85, %86
%88:i32 = xor %87, %27 (hasExternalUses)
%89:i32 = phi %0, %3, %88

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1 = block 2
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = add %3, %4
%6:i32 = shl %5, 7:i32
%7:i32 = lshr %5, 25:i32
%8:i32 = or %6, %7
%9:i32 = xor %2, %8
%10:i32 = var
%11:i32 = var
%12:i32 = var
%13:i32 = var
%14:i32 = add %13, %10
%15:i32 = shl %14, 7:i32
%16:i32 = lshr %14, 25:i32
%17:i32 = or %15, %16
%18:i32 = xor %12, %17
%19:i32 = add %10, %18
%20:i32 = shl %19, 9:i32
%21:i32 = lshr %19, 23:i32
%22:i32 = or %20, %21
%23:i32 = xor %11, %22
%24:i32 = add %23, %18
%25:i32 = shl %24, 13:i32
%26:i32 = lshr %24, 19:i32
%27:i32 = or %25, %26
%28:i32 = xor %13, %27
%29:i32 = add %23, %28
%30:i32 = shl %29, 18:i32
%31:i32 = lshr %29, 14:i32
%32:i32 = or %30, %31
%33:i32 = xor %10, %32
%34:i32 = add %9, %33
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %38, %40
%42:i32 = shl %41, 7:i32
%43:i32 = lshr %41, 25:i32
%44:i32 = or %42, %43
%45:i32 = xor %39, %44
%46:i32 = var
%47:i32 = add %40, %45
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %46, %50
%52:i32 = add %45, %51
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55
%57:i32 = xor %37, %56
%58:i32 = phi %1, %0, %57
%59:i32 = add %0, %58
infer %59


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16

Cost = 4
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17

Cost = 5
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = var
%12:i32 = add %11, %8
%13:i32 = shl %12, 7:i32
%14:i32 = lshr %12, 25:i32
%15:i32 = or %13, %14
%16:i32 = xor %10, %15 (hasExternalUses)
%17:i32 = add %8, %16
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %9, %20 (hasExternalUses)
%22:i32 = add %21, %16
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %11, %25 (hasExternalUses)
%27:i32 = add %21, %26
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34

Cost = 4
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = var
%12:i32 = add %11, %8
%13:i32 = shl %12, 7:i32
%14:i32 = lshr %12, 25:i32
%15:i32 = or %13, %14
%16:i32 = xor %10, %15 (hasExternalUses)
%17:i32 = add %8, %16
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %9, %20 (hasExternalUses)
%22:i32 = add %21, %16
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %11, %25 (hasExternalUses)
%27:i32 = add %21, %26
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54

Cost = 5
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = add %3, %4
%6:i32 = shl %5, 7:i32
%7:i32 = lshr %5, 25:i32
%8:i32 = or %6, %7
%9:i32 = xor %2, %8 (hasExternalUses)
%10:i32 = var
%11:i32 = var
%12:i32 = var
%13:i32 = var
%14:i32 = add %13, %10
%15:i32 = shl %14, 7:i32
%16:i32 = lshr %14, 25:i32
%17:i32 = or %15, %16
%18:i32 = xor %12, %17 (hasExternalUses)
%19:i32 = add %10, %18
%20:i32 = shl %19, 9:i32
%21:i32 = lshr %19, 23:i32
%22:i32 = or %20, %21
%23:i32 = xor %11, %22 (hasExternalUses)
%24:i32 = add %23, %18
%25:i32 = shl %24, 13:i32
%26:i32 = lshr %24, 19:i32
%27:i32 = or %25, %26
%28:i32 = xor %13, %27 (hasExternalUses)
%29:i32 = add %23, %28
%30:i32 = shl %29, 18:i32
%31:i32 = lshr %29, 14:i32
%32:i32 = or %30, %31
%33:i32 = xor %10, %32 (hasExternalUses)
%34:i32 = add %9, %33
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %38, %40
%42:i32 = shl %41, 7:i32
%43:i32 = lshr %41, 25:i32
%44:i32 = or %42, %43
%45:i32 = xor %39, %44 (hasExternalUses)
%46:i32 = var
%47:i32 = add %40, %45
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %46, %50 (hasExternalUses)
%52:i32 = add %45, %51
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55 (hasExternalUses)
%57:i32 = xor %37, %56 (hasExternalUses)
%58:i32 = phi %0, %1, %57

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1 = block 2
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = add %5, %2
%7:i32 = shl %6, 7:i32
%8:i32 = lshr %6, 25:i32
%9:i32 = or %7, %8
%10:i32 = xor %4, %9
%11:i32 = add %2, %10
%12:i32 = shl %11, 9:i32
%13:i32 = lshr %11, 23:i32
%14:i32 = or %12, %13
%15:i32 = xor %3, %14
%16:i32 = add %10, %15
%17:i32 = shl %16, 13:i32
%18:i32 = lshr %16, 19:i32
%19:i32 = or %17, %18
%20:i32 = xor %5, %19
%21:i32 = add %15, %20
%22:i32 = shl %21, 18:i32
%23:i32 = lshr %21, 14:i32
%24:i32 = or %22, %23
%25:i32 = xor %2, %24
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29:i32 = add %27, %28
%30:i32 = shl %29, 7:i32
%31:i32 = lshr %29, 25:i32
%32:i32 = or %30, %31
%33:i32 = xor %26, %32
%34:i32 = add %25, %33
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %40, %38
%42:i32 = shl %41, 7:i32
%43:i32 = lshr %41, 25:i32
%44:i32 = or %42, %43
%45:i32 = xor %39, %44
%46:i32 = var
%47:i32 = add %40, %45
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %46, %50
%52:i32 = add %45, %51
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55
%57:i32 = xor %37, %56
%58:i32 = phi %1, %0, %57
%59:i32 = add %0, %58
infer %59


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %1, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16

Cost = 4
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17

Cost = 5
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34

Cost = 4
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54

Cost = 5
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = add %5, %2
%7:i32 = shl %6, 7:i32
%8:i32 = lshr %6, 25:i32
%9:i32 = or %7, %8
%10:i32 = xor %4, %9 (hasExternalUses)
%11:i32 = add %2, %10
%12:i32 = shl %11, 9:i32
%13:i32 = lshr %11, 23:i32
%14:i32 = or %12, %13
%15:i32 = xor %3, %14 (hasExternalUses)
%16:i32 = add %10, %15
%17:i32 = shl %16, 13:i32
%18:i32 = lshr %16, 19:i32
%19:i32 = or %17, %18
%20:i32 = xor %5, %19 (hasExternalUses)
%21:i32 = add %15, %20
%22:i32 = shl %21, 18:i32
%23:i32 = lshr %21, 14:i32
%24:i32 = or %22, %23
%25:i32 = xor %2, %24 (hasExternalUses)
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29:i32 = add %27, %28
%30:i32 = shl %29, 7:i32
%31:i32 = lshr %29, 25:i32
%32:i32 = or %30, %31
%33:i32 = xor %26, %32 (hasExternalUses)
%34:i32 = add %25, %33
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %40, %38
%42:i32 = shl %41, 7:i32
%43:i32 = lshr %41, 25:i32
%44:i32 = or %42, %43
%45:i32 = xor %39, %44 (hasExternalUses)
%46:i32 = var
%47:i32 = add %40, %45
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %46, %50 (hasExternalUses)
%52:i32 = add %45, %51
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55 (hasExternalUses)
%57:i32 = xor %37, %56 (hasExternalUses)
%58:i32 = phi %0, %1, %57

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1 = block 2
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = add %5, %2
%7:i32 = shl %6, 7:i32
%8:i32 = lshr %6, 25:i32
%9:i32 = or %7, %8
%10:i32 = xor %4, %9
%11:i32 = add %2, %10
%12:i32 = shl %11, 9:i32
%13:i32 = lshr %11, 23:i32
%14:i32 = or %12, %13
%15:i32 = xor %3, %14
%16:i32 = add %10, %15
%17:i32 = shl %16, 13:i32
%18:i32 = lshr %16, 19:i32
%19:i32 = or %17, %18
%20:i32 = xor %5, %19
%21:i32 = add %15, %20
%22:i32 = shl %21, 18:i32
%23:i32 = lshr %21, 14:i32
%24:i32 = or %22, %23
%25:i32 = xor %2, %24
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29:i32 = add %27, %28
%30:i32 = shl %29, 7:i32
%31:i32 = lshr %29, 25:i32
%32:i32 = or %30, %31
%33:i32 = xor %26, %32
%34:i32 = add %25, %33
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %40, %38
%42:i32 = shl %41, 7:i32
%43:i32 = lshr %41, 25:i32
%44:i32 = or %42, %43
%45:i32 = xor %39, %44
%46:i32 = var
%47:i32 = add %40, %45
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %46, %50
%52:i32 = add %45, %51
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55
%57:i32 = xor %37, %56
%58:i32 = add %25, %57
%59:i32 = shl %58, 9:i32
%60:i32 = lshr %58, 23:i32
%61:i32 = or %59, %60
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = var
%66:i32 = add %65, %63
%67:i32 = shl %66, 7:i32
%68:i32 = lshr %66, 25:i32
%69:i32 = or %67, %68
%70:i32 = xor %64, %69
%71:i32 = add %63, %70
%72:i32 = shl %71, 9:i32
%73:i32 = lshr %71, 23:i32
%74:i32 = or %72, %73
%75:i32 = xor %62, %74
%76:i32 = xor %61, %75
%77:i32 = phi %1, %0, %76
%78:i32 = add %0, %77
infer %78


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7
%9:i32 = shl %8, 9:i32
%10:i32 = lshr %8, 23:i32
%11:i32 = or %9, %10

Cost = 4
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12

Cost = 5
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58

Cost = 4
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73

Cost = 5
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = add %5, %2
%7:i32 = shl %6, 7:i32
%8:i32 = lshr %6, 25:i32
%9:i32 = or %7, %8
%10:i32 = xor %4, %9 (hasExternalUses)
%11:i32 = add %2, %10
%12:i32 = shl %11, 9:i32
%13:i32 = lshr %11, 23:i32
%14:i32 = or %12, %13
%15:i32 = xor %3, %14 (hasExternalUses)
%16:i32 = add %10, %15
%17:i32 = shl %16, 13:i32
%18:i32 = lshr %16, 19:i32
%19:i32 = or %17, %18
%20:i32 = xor %5, %19 (hasExternalUses)
%21:i32 = add %15, %20
%22:i32 = shl %21, 18:i32
%23:i32 = lshr %21, 14:i32
%24:i32 = or %22, %23
%25:i32 = xor %2, %24 (hasExternalUses)
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29:i32 = add %27, %28
%30:i32 = shl %29, 7:i32
%31:i32 = lshr %29, 25:i32
%32:i32 = or %30, %31
%33:i32 = xor %26, %32 (hasExternalUses)
%34:i32 = add %25, %33
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %40, %38
%42:i32 = shl %41, 7:i32
%43:i32 = lshr %41, 25:i32
%44:i32 = or %42, %43
%45:i32 = xor %39, %44 (hasExternalUses)
%46:i32 = var
%47:i32 = add %40, %45
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %46, %50 (hasExternalUses)
%52:i32 = add %45, %51
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55 (hasExternalUses)
%57:i32 = xor %37, %56 (hasExternalUses)
%58:i32 = add %25, %57
%59:i32 = shl %58, 9:i32
%60:i32 = lshr %58, 23:i32
%61:i32 = or %59, %60
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = var
%66:i32 = add %65, %63
%67:i32 = shl %66, 7:i32
%68:i32 = lshr %66, 25:i32
%69:i32 = or %67, %68
%70:i32 = xor %64, %69 (hasExternalUses)
%71:i32 = add %63, %70
%72:i32 = shl %71, 9:i32
%73:i32 = lshr %71, 23:i32
%74:i32 = or %72, %73
%75:i32 = xor %62, %74 (hasExternalUses)
%76:i32 = xor %61, %75 (hasExternalUses)
%77:i32 = phi %0, %1, %76

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1 = block 2
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = add %5, %2
%7:i32 = shl %6, 7:i32
%8:i32 = lshr %6, 25:i32
%9:i32 = or %7, %8
%10:i32 = xor %4, %9
%11:i32 = add %2, %10
%12:i32 = shl %11, 9:i32
%13:i32 = lshr %11, 23:i32
%14:i32 = or %12, %13
%15:i32 = xor %3, %14
%16:i32 = add %10, %15
%17:i32 = shl %16, 13:i32
%18:i32 = lshr %16, 19:i32
%19:i32 = or %17, %18
%20:i32 = xor %5, %19
%21:i32 = add %15, %20
%22:i32 = shl %21, 18:i32
%23:i32 = lshr %21, 14:i32
%24:i32 = or %22, %23
%25:i32 = xor %2, %24
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29:i32 = add %27, %28
%30:i32 = shl %29, 7:i32
%31:i32 = lshr %29, 25:i32
%32:i32 = or %30, %31
%33:i32 = xor %26, %32
%34:i32 = add %25, %33
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %40, %38
%42:i32 = shl %41, 7:i32
%43:i32 = lshr %41, 25:i32
%44:i32 = or %42, %43
%45:i32 = xor %39, %44
%46:i32 = var
%47:i32 = add %40, %45
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %46, %50
%52:i32 = add %45, %51
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55
%57:i32 = xor %37, %56
%58:i32 = add %25, %57
%59:i32 = shl %58, 9:i32
%60:i32 = lshr %58, 23:i32
%61:i32 = or %59, %60
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = var
%66:i32 = add %65, %63
%67:i32 = shl %66, 7:i32
%68:i32 = lshr %66, 25:i32
%69:i32 = or %67, %68
%70:i32 = xor %64, %69
%71:i32 = add %63, %70
%72:i32 = shl %71, 9:i32
%73:i32 = lshr %71, 23:i32
%74:i32 = or %72, %73
%75:i32 = xor %62, %74
%76:i32 = xor %61, %75
%77:i32 = add %57, %76
%78:i32 = shl %77, 13:i32
%79:i32 = lshr %77, 19:i32
%80:i32 = or %78, %79
%81:i32 = xor %80, %33
%82:i32 = phi %1, %0, %81
%83:i32 = add %0, %82
infer %83


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = shl %2, 7:i32
%4:i32 = lshr %2, 25:i32
%5:i32 = or %3, %4

Cost = 4
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6

Cost = 5
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77

Cost = 4
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31

Cost = 5
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = add %5, %2
%7:i32 = shl %6, 7:i32
%8:i32 = lshr %6, 25:i32
%9:i32 = or %7, %8
%10:i32 = xor %4, %9 (hasExternalUses)
%11:i32 = add %2, %10
%12:i32 = shl %11, 9:i32
%13:i32 = lshr %11, 23:i32
%14:i32 = or %12, %13
%15:i32 = xor %3, %14 (hasExternalUses)
%16:i32 = add %10, %15
%17:i32 = shl %16, 13:i32
%18:i32 = lshr %16, 19:i32
%19:i32 = or %17, %18
%20:i32 = xor %5, %19 (hasExternalUses)
%21:i32 = add %15, %20
%22:i32 = shl %21, 18:i32
%23:i32 = lshr %21, 14:i32
%24:i32 = or %22, %23
%25:i32 = xor %2, %24 (hasExternalUses)
%26:i32 = var
%27:i32 = var
%28:i32 = var
%29:i32 = add %27, %28
%30:i32 = shl %29, 7:i32
%31:i32 = lshr %29, 25:i32
%32:i32 = or %30, %31
%33:i32 = xor %26, %32 (hasExternalUses)
%34:i32 = add %25, %33
%35:i32 = shl %34, 7:i32
%36:i32 = lshr %34, 25:i32
%37:i32 = or %35, %36
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %40, %38
%42:i32 = shl %41, 7:i32
%43:i32 = lshr %41, 25:i32
%44:i32 = or %42, %43
%45:i32 = xor %39, %44 (hasExternalUses)
%46:i32 = var
%47:i32 = add %40, %45
%48:i32 = shl %47, 9:i32
%49:i32 = lshr %47, 23:i32
%50:i32 = or %48, %49
%51:i32 = xor %46, %50 (hasExternalUses)
%52:i32 = add %45, %51
%53:i32 = shl %52, 13:i32
%54:i32 = lshr %52, 19:i32
%55:i32 = or %53, %54
%56:i32 = xor %38, %55 (hasExternalUses)
%57:i32 = xor %37, %56 (hasExternalUses)
%58:i32 = add %25, %57
%59:i32 = shl %58, 9:i32
%60:i32 = lshr %58, 23:i32
%61:i32 = or %59, %60
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = var
%66:i32 = add %65, %63
%67:i32 = shl %66, 7:i32
%68:i32 = lshr %66, 25:i32
%69:i32 = or %67, %68
%70:i32 = xor %64, %69 (hasExternalUses)
%71:i32 = add %63, %70
%72:i32 = shl %71, 9:i32
%73:i32 = lshr %71, 23:i32
%74:i32 = or %72, %73
%75:i32 = xor %62, %74 (hasExternalUses)
%76:i32 = xor %61, %75 (hasExternalUses)
%77:i32 = add %57, %76
%78:i32 = shl %77, 13:i32
%79:i32 = lshr %77, 19:i32
%80:i32 = or %78, %79
%81:i32 = xor %80, %33 (hasExternalUses)
%82:i32 = phi %0, %1, %81

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = phi %0, %1, 1797285236:i32
%3 = block 2
%4:i32 = var
%5:i32 = var
%6:i32 = var
%7:i32 = var
%8:i32 = add %7, %4
%9:i32 = shl %8, 7:i32
%10:i32 = lshr %8, 25:i32
%11:i32 = or %9, %10
%12:i32 = xor %6, %11
%13:i32 = add %4, %12
%14:i32 = shl %13, 9:i32
%15:i32 = lshr %13, 23:i32
%16:i32 = or %14, %15
%17:i32 = xor %5, %16
%18:i32 = add %12, %17
%19:i32 = shl %18, 13:i32
%20:i32 = lshr %18, 19:i32
%21:i32 = or %19, %20
%22:i32 = xor %7, %21
%23:i32 = add %17, %22
%24:i32 = shl %23, 18:i32
%25:i32 = lshr %23, 14:i32
%26:i32 = or %24, %25
%27:i32 = xor %4, %26
%28:i32 = var
%29:i32 = var
%30:i32 = var
%31:i32 = add %29, %30
%32:i32 = shl %31, 7:i32
%33:i32 = lshr %31, 25:i32
%34:i32 = or %32, %33
%35:i32 = xor %28, %34
%36:i32 = add %27, %35
%37:i32 = shl %36, 7:i32
%38:i32 = lshr %36, 25:i32
%39:i32 = or %37, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = add %42, %40
%44:i32 = shl %43, 7:i32
%45:i32 = lshr %43, 25:i32
%46:i32 = or %44, %45
%47:i32 = xor %41, %46
%48:i32 = var
%49:i32 = add %42, %47
%50:i32 = shl %49, 9:i32
%51:i32 = lshr %49, 23:i32
%52:i32 = or %50, %51
%53:i32 = xor %48, %52
%54:i32 = add %47, %53
%55:i32 = shl %54, 13:i32
%56:i32 = lshr %54, 19:i32
%57:i32 = or %55, %56
%58:i32 = xor %40, %57
%59:i32 = xor %39, %58
%60:i32 = add %27, %59
%61:i32 = shl %60, 9:i32
%62:i32 = lshr %60, 23:i32
%63:i32 = or %61, %62
%64:i32 = var
%65:i32 = var
%66:i32 = var
%67:i32 = var
%68:i32 = add %67, %65
%69:i32 = shl %68, 7:i32
%70:i32 = lshr %68, 25:i32
%71:i32 = or %69, %70
%72:i32 = xor %66, %71
%73:i32 = add %65, %72
%74:i32 = shl %73, 9:i32
%75:i32 = lshr %73, 23:i32
%76:i32 = or %74, %75
%77:i32 = xor %64, %76
%78:i32 = xor %63, %77
%79:i32 = add %59, %78
%80:i32 = shl %79, 13:i32
%81:i32 = lshr %79, 19:i32
%82:i32 = or %80, %81
%83:i32 = xor %82, %35
%84:i32 = add %78, %83
%85:i32 = shl %84, 18:i32
%86:i32 = lshr %84, 14:i32
%87:i32 = or %85, %86
%88:i32 = xor %87, %27
%89:i32 = phi %3, %2, %88
%90:i32 = add %2, %89
infer %90


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1797285236
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 702509834
1 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -700396824
2 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0 = block 2
%1:i32 = var
%2:i32 = phi %0, %1, 1797285236:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22

Cost = 5
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
%81:i32 = shl %80, 18:i32
%82:i32 = lshr %80, 14:i32
%83:i32 = or %81, %82

Cost = 4
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %0, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %1, %12 (hasExternalUses)
%14:i32 = add %8, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %3, %17 (hasExternalUses)
%19:i32 = add %13, %18
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %38, %36
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
%81:i32 = shl %80, 18:i32
%82:i32 = lshr %80, 14:i32
%83:i32 = or %81, %82
%84:i32 = xor %83, %23

Cost = 10
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0 = block 2
%1 = block 2
%2:i32 = var
%3:i32 = phi %1, %2, 1797285236:i32
%4:i32 = var
%5:i32 = var
%6:i32 = var
%7:i32 = var
%8:i32 = add %7, %4
%9:i32 = shl %8, 7:i32
%10:i32 = lshr %8, 25:i32
%11:i32 = or %9, %10
%12:i32 = xor %6, %11 (hasExternalUses)
%13:i32 = add %4, %12
%14:i32 = shl %13, 9:i32
%15:i32 = lshr %13, 23:i32
%16:i32 = or %14, %15
%17:i32 = xor %5, %16 (hasExternalUses)
%18:i32 = add %12, %17
%19:i32 = shl %18, 13:i32
%20:i32 = lshr %18, 19:i32
%21:i32 = or %19, %20
%22:i32 = xor %7, %21 (hasExternalUses)
%23:i32 = add %17, %22
%24:i32 = shl %23, 18:i32
%25:i32 = lshr %23, 14:i32
%26:i32 = or %24, %25
%27:i32 = xor %4, %26
%28:i32 = var
%29:i32 = var
%30:i32 = var
%31:i32 = add %29, %30
%32:i32 = shl %31, 7:i32
%33:i32 = lshr %31, 25:i32
%34:i32 = or %32, %33
%35:i32 = xor %28, %34 (hasExternalUses)
%36:i32 = add %27, %35
%37:i32 = shl %36, 7:i32
%38:i32 = lshr %36, 25:i32
%39:i32 = or %37, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = add %42, %40
%44:i32 = shl %43, 7:i32
%45:i32 = lshr %43, 25:i32
%46:i32 = or %44, %45
%47:i32 = xor %41, %46 (hasExternalUses)
%48:i32 = var
%49:i32 = add %42, %47
%50:i32 = shl %49, 9:i32
%51:i32 = lshr %49, 23:i32
%52:i32 = or %50, %51
%53:i32 = xor %48, %52 (hasExternalUses)
%54:i32 = add %47, %53
%55:i32 = shl %54, 13:i32
%56:i32 = lshr %54, 19:i32
%57:i32 = or %55, %56
%58:i32 = xor %40, %57 (hasExternalUses)
%59:i32 = xor %39, %58 (hasExternalUses)
%60:i32 = add %27, %59
%61:i32 = shl %60, 9:i32
%62:i32 = lshr %60, 23:i32
%63:i32 = or %61, %62
%64:i32 = var
%65:i32 = var
%66:i32 = var
%67:i32 = var
%68:i32 = add %67, %65
%69:i32 = shl %68, 7:i32
%70:i32 = lshr %68, 25:i32
%71:i32 = or %69, %70
%72:i32 = xor %66, %71 (hasExternalUses)
%73:i32 = add %65, %72
%74:i32 = shl %73, 9:i32
%75:i32 = lshr %73, 23:i32
%76:i32 = or %74, %75
%77:i32 = xor %64, %76 (hasExternalUses)
%78:i32 = xor %63, %77 (hasExternalUses)
%79:i32 = add %59, %78
%80:i32 = shl %79, 13:i32
%81:i32 = lshr %79, 19:i32
%82:i32 = or %80, %81
%83:i32 = xor %82, %35 (hasExternalUses)
%84:i32 = add %78, %83
%85:i32 = shl %84, 18:i32
%86:i32 = lshr %84, 14:i32
%87:i32 = or %85, %86
%88:i32 = xor %87, %27 (hasExternalUses)
%89:i32 = phi %0, %3, %88

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for ./core_salsa_ref.c.bc:crypto_core_salsa()

