
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for ./poly1305_donna.c.bc:crypto_onetimeauth_poly1305_donna()

; ModuleID = './poly1305_donna.c.bc'
source_filename = "crypto_onetimeauth/poly1305/donna/poly1305_donna.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.crypto_onetimeauth_poly1305_implementation = type { i32 (i8*, i8*, i64, i8*)*, i32 (i8*, i8*, i64, i8*)*, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)*, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*, i64)*, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)* }
%struct.crypto_onetimeauth_poly1305_state = type { [256 x i8] }
%struct.poly1305_state_internal_t = type { [5 x i32], [5 x i32], [4 x i32], i64, [16 x i8], i8 }

@crypto_onetimeauth_poly1305_donna_implementation = hidden local_unnamed_addr global %struct.crypto_onetimeauth_poly1305_implementation { i32 (i8*, i8*, i64, i8*)* @crypto_onetimeauth_poly1305_donna, i32 (i8*, i8*, i64, i8*)* @crypto_onetimeauth_poly1305_donna_verify, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)* @crypto_onetimeauth_poly1305_donna_init, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*, i64)* @crypto_onetimeauth_poly1305_donna_update, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)* @crypto_onetimeauth_poly1305_donna_final }, align 4

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna(i8* nocapture %0, i8* nocapture readonly %1, i64 %2, i8* nocapture readonly %3) #0 {
  %5 = alloca %struct.poly1305_state_internal_t, align 64
  %6 = bitcast %struct.poly1305_state_internal_t* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %6) #6
  %7 = bitcast i8* %3 to i32*
  %8 = load i32, i32* %7, align 1
  %9 = and i32 %8, 67108863
  %10 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 0
  store i32 %9, i32* %10, align 64
  %11 = getelementptr i8, i8* %3, i32 3
  %12 = bitcast i8* %11 to i32*
  %13 = load i32, i32* %12, align 1
  %14 = lshr i32 %13, 2
  %15 = and i32 %14, 67108611
  %16 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 1
  store i32 %15, i32* %16, align 4
  %17 = getelementptr i8, i8* %3, i32 6
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 1
  %20 = lshr i32 %19, 4
  %21 = and i32 %20, 67092735
  %22 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 2
  store i32 %21, i32* %22, align 8
  %23 = getelementptr i8, i8* %3, i32 9
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 1
  %26 = lshr i32 %25, 6
  %27 = and i32 %26, 66076671
  %28 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 3
  store i32 %27, i32* %28, align 4
  %29 = getelementptr i8, i8* %3, i32 12
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 1
  %32 = lshr i32 %31, 8
  %33 = and i32 %32, 1048575
  %34 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 4
  store i32 %33, i32* %34, align 16
  %35 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 1, i32 0
  %36 = getelementptr i8, i8* %3, i32 16
  %37 = bitcast i8* %36 to i32*
  %38 = bitcast i32* %35 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(20) %38, i8 0, i64 20, i1 false) #6
  %39 = load i32, i32* %37, align 1
  %40 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 0
  store i32 %39, i32* %40, align 8
  %41 = getelementptr i8, i8* %3, i32 20
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %42, align 1
  %44 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 1
  store i32 %43, i32* %44, align 4
  %45 = getelementptr i8, i8* %3, i32 24
  %46 = bitcast i8* %45 to i32*
  %47 = load i32, i32* %46, align 1
  %48 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 2
  store i32 %47, i32* %48, align 8
  %49 = getelementptr i8, i8* %3, i32 28
  %50 = bitcast i8* %49 to i32*
  %51 = load i32, i32* %50, align 1
  %52 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 3
  store i32 %51, i32* %52, align 4
  %53 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 3
  store i64 0, i64* %53, align 8
  %54 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 5
  store i8 0, i8* %54, align 16
  call fastcc void @poly1305_update(%struct.poly1305_state_internal_t* nonnull %5, i8* %1, i64 %2)
  call fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* nonnull %5, i8* %0)
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %6) #6
  ret i32 0
}

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_verify(i8* %0, i8* nocapture readonly %1, i64 %2, i8* nocapture readonly %3) #0 {
  %5 = alloca %struct.poly1305_state_internal_t, align 64
  %6 = alloca [16 x i8], align 16
  %7 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #6
  %8 = bitcast %struct.poly1305_state_internal_t* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %8) #6
  %9 = bitcast i8* %3 to i32*
  %10 = load i32, i32* %9, align 1
  %11 = and i32 %10, 67108863
  %12 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 0
  store i32 %11, i32* %12, align 64
  %13 = getelementptr i8, i8* %3, i32 3
  %14 = bitcast i8* %13 to i32*
  %15 = load i32, i32* %14, align 1
  %16 = lshr i32 %15, 2
  %17 = and i32 %16, 67108611
  %18 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 1
  store i32 %17, i32* %18, align 4
  %19 = getelementptr i8, i8* %3, i32 6
  %20 = bitcast i8* %19 to i32*
  %21 = load i32, i32* %20, align 1
  %22 = lshr i32 %21, 4
  %23 = and i32 %22, 67092735
  %24 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 2
  store i32 %23, i32* %24, align 8
  %25 = getelementptr i8, i8* %3, i32 9
  %26 = bitcast i8* %25 to i32*
  %27 = load i32, i32* %26, align 1
  %28 = lshr i32 %27, 6
  %29 = and i32 %28, 66076671
  %30 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 3
  store i32 %29, i32* %30, align 4
  %31 = getelementptr i8, i8* %3, i32 12
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 1
  %34 = lshr i32 %33, 8
  %35 = and i32 %34, 1048575
  %36 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 4
  store i32 %35, i32* %36, align 16
  %37 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 1, i32 0
  %38 = getelementptr i8, i8* %3, i32 16
  %39 = bitcast i8* %38 to i32*
  %40 = bitcast i32* %37 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(20) %40, i8 0, i64 20, i1 false) #6
  %41 = load i32, i32* %39, align 1
  %42 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 0
  store i32 %41, i32* %42, align 8
  %43 = getelementptr i8, i8* %3, i32 20
  %44 = bitcast i8* %43 to i32*
  %45 = load i32, i32* %44, align 1
  %46 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 1
  store i32 %45, i32* %46, align 4
  %47 = getelementptr i8, i8* %3, i32 24
  %48 = bitcast i8* %47 to i32*
  %49 = load i32, i32* %48, align 1
  %50 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 2
  store i32 %49, i32* %50, align 8
  %51 = getelementptr i8, i8* %3, i32 28
  %52 = bitcast i8* %51 to i32*
  %53 = load i32, i32* %52, align 1
  %54 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 3
  store i32 %53, i32* %54, align 4
  %55 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 3
  store i64 0, i64* %55, align 8
  %56 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 5
  store i8 0, i8* %56, align 16
  call fastcc void @poly1305_update(%struct.poly1305_state_internal_t* nonnull %5, i8* %1, i64 %2) #6
  call fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* nonnull %5, i8* nonnull %7) #6
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %8) #6
  %57 = call i32 @crypto_verify_16(i8* %0, i8* nonnull %7) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #6
  ret i32 %57
}

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_init(%struct.crypto_onetimeauth_poly1305_state* nocapture %0, i8* nocapture readonly %1) #0 {
  %3 = bitcast i8* %1 to i32*
  %4 = load i32, i32* %3, align 1
  %5 = and i32 %4, 67108863
  %6 = bitcast %struct.crypto_onetimeauth_poly1305_state* %0 to i32*
  store i32 %5, i32* %6, align 8
  %7 = getelementptr i8, i8* %1, i32 3
  %8 = bitcast i8* %7 to i32*
  %9 = load i32, i32* %8, align 1
  %10 = lshr i32 %9, 2
  %11 = and i32 %10, 67108611
  %12 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 4
  %13 = bitcast i8* %12 to i32*
  store i32 %11, i32* %13, align 4
  %14 = getelementptr i8, i8* %1, i32 6
  %15 = bitcast i8* %14 to i32*
  %16 = load i32, i32* %15, align 1
  %17 = lshr i32 %16, 4
  %18 = and i32 %17, 67092735
  %19 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 8
  %20 = bitcast i8* %19 to i32*
  store i32 %18, i32* %20, align 8
  %21 = getelementptr i8, i8* %1, i32 9
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 1
  %24 = lshr i32 %23, 6
  %25 = and i32 %24, 66076671
  %26 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 12
  %27 = bitcast i8* %26 to i32*
  store i32 %25, i32* %27, align 4
  %28 = getelementptr i8, i8* %1, i32 12
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 1
  %31 = lshr i32 %30, 8
  %32 = and i32 %31, 1048575
  %33 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 16
  %34 = bitcast i8* %33 to i32*
  store i32 %32, i32* %34, align 8
  %35 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 20
  %36 = getelementptr i8, i8* %1, i32 16
  %37 = bitcast i8* %36 to i32*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(20) %35, i8 0, i64 20, i1 false) #6
  %38 = load i32, i32* %37, align 1
  %39 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 40
  %40 = bitcast i8* %39 to i32*
  store i32 %38, i32* %40, align 8
  %41 = getelementptr i8, i8* %1, i32 20
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %42, align 1
  %44 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 44
  %45 = bitcast i8* %44 to i32*
  store i32 %43, i32* %45, align 4
  %46 = getelementptr i8, i8* %1, i32 24
  %47 = bitcast i8* %46 to i32*
  %48 = load i32, i32* %47, align 1
  %49 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 48
  %50 = bitcast i8* %49 to i32*
  store i32 %48, i32* %50, align 8
  %51 = getelementptr i8, i8* %1, i32 28
  %52 = bitcast i8* %51 to i32*
  %53 = load i32, i32* %52, align 1
  %54 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 52
  %55 = bitcast i8* %54 to i32*
  store i32 %53, i32* %55, align 4
  %56 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 56
  %57 = bitcast i8* %56 to i64*
  store i64 0, i64* %57, align 8
  %58 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 80
  store i8 0, i8* %58, align 8
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_update(%struct.crypto_onetimeauth_poly1305_state* nocapture %0, i8* nocapture readonly %1, i64 %2) #1 {
  %4 = bitcast %struct.crypto_onetimeauth_poly1305_state* %0 to %struct.poly1305_state_internal_t*
  tail call fastcc void @poly1305_update(%struct.poly1305_state_internal_t* %4, i8* %1, i64 %2)
  ret i32 0
}

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_final(%struct.crypto_onetimeauth_poly1305_state* %0, i8* nocapture %1) #0 {
  %3 = bitcast %struct.crypto_onetimeauth_poly1305_state* %0 to %struct.poly1305_state_internal_t*
  tail call fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* %3, i8* %1)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #2

; Function Attrs: nofree norecurse nounwind
define internal fastcc void @poly1305_update(%struct.poly1305_state_internal_t* nocapture %0, i8* nocapture readonly %1, i64 %2) unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 3
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %33, label %7

7:                                                ; preds = %3
  %8 = sub i64 16, %5
  %9 = icmp ugt i64 %8, %2
  %10 = select i1 %9, i64 %2, i64 %8
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %24, label %12

12:                                               ; preds = %7, %12
  %13 = phi i64 [ %23, %12 ], [ %5, %7 ]
  %14 = phi i64 [ %21, %12 ], [ 0, %7 ]
  %15 = trunc i64 %14 to i32
  %16 = getelementptr i8, i8* %1, i32 %15
  %17 = load i8, i8* %16, align 1
  %18 = add i64 %13, %14
  %19 = trunc i64 %18 to i32
  %20 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 %19
  store i8 %17, i8* %20, align 1
  %21 = add nuw i64 %14, 1
  %22 = icmp ult i64 %21, %10
  %23 = load i64, i64* %4, align 8
  br i1 %22, label %12, label %24

24:                                               ; preds = %12, %7
  %25 = phi i64 [ %5, %7 ], [ %23, %12 ]
  %26 = add i64 %25, %10
  store i64 %26, i64* %4, align 8
  %27 = icmp ult i64 %26, 16
  br i1 %27, label %60, label %28

28:                                               ; preds = %24
  %29 = trunc i64 %10 to i32
  %30 = getelementptr i8, i8* %1, i32 %29
  %31 = sub i64 %2, %10
  %32 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 0
  tail call fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nonnull %0, i8* nonnull %32, i64 16)
  store i64 0, i64* %4, align 8
  br label %33

33:                                               ; preds = %28, %3
  %34 = phi i64 [ %2, %3 ], [ %31, %28 ]
  %35 = phi i8* [ %1, %3 ], [ %30, %28 ]
  %36 = icmp ugt i64 %34, 15
  br i1 %36, label %37, label %42

37:                                               ; preds = %33
  %38 = and i64 %34, -16
  tail call fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nonnull %0, i8* %35, i64 %38)
  %39 = trunc i64 %38 to i32
  %40 = getelementptr i8, i8* %35, i32 %39
  %41 = sub i64 %34, %38
  br label %42

42:                                               ; preds = %37, %33
  %43 = phi i64 [ %41, %37 ], [ %34, %33 ]
  %44 = phi i8* [ %40, %37 ], [ %35, %33 ]
  %45 = icmp eq i64 %43, 0
  br i1 %45, label %60, label %46

46:                                               ; preds = %42, %46
  %47 = phi i64 [ %55, %46 ], [ 0, %42 ]
  %48 = trunc i64 %47 to i32
  %49 = getelementptr i8, i8* %44, i32 %48
  %50 = load i8, i8* %49, align 1
  %51 = load i64, i64* %4, align 8
  %52 = add i64 %51, %47
  %53 = trunc i64 %52 to i32
  %54 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 %53
  store i8 %50, i8* %54, align 1
  %55 = add nuw i64 %47, 1
  %56 = icmp eq i64 %55, %43
  br i1 %56, label %57, label %46

57:                                               ; preds = %46
  %58 = load i64, i64* %4, align 8
  %59 = add i64 %58, %43
  store i64 %59, i64* %4, align 8
  br label %60

60:                                               ; preds = %57, %42, %24
  ret void
}

; Function Attrs: noinline nounwind
define internal fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* %0, i8* nocapture %1) unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 3
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %20, label %6

6:                                                ; preds = %2
  %7 = trunc i64 %4 to i32
  %8 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 %7
  store i8 1, i8* %8, align 1
  %9 = add i64 %4, 1
  %10 = icmp ult i64 %9, 16
  br i1 %10, label %11, label %17

11:                                               ; preds = %6
  %12 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 16
  %13 = bitcast i32* %12 to i8*
  %14 = add i32 %7, 1
  %15 = getelementptr i8, i8* %13, i32 %14
  %16 = sub i32 15, %7
  call void @llvm.memset.p0i8.i32(i8* align 1 %15, i8 0, i32 %16, i1 false)
  br label %17

17:                                               ; preds = %11, %6
  %18 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 5
  store i8 1, i8* %18, align 8
  %19 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 0
  tail call fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nonnull %0, i8* nonnull %19, i64 16)
  br label %20

20:                                               ; preds = %2, %17
  %21 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 0
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 2
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 3
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 4
  %30 = load i32, i32* %29, align 4
  %31 = lshr i32 %24, 26
  %32 = and i32 %24, 67108863
  %33 = add i32 %26, %31
  %34 = lshr i32 %33, 26
  %35 = and i32 %33, 67108863
  %36 = add i32 %34, %28
  %37 = lshr i32 %36, 26
  %38 = and i32 %36, 67108863
  %39 = add i32 %37, %30
  %40 = lshr i32 %39, 26
  %41 = mul nuw nsw i32 %40, 5
  %42 = add i32 %41, %22
  %43 = lshr i32 %42, 26
  %44 = and i32 %42, 67108863
  %45 = add nuw nsw i32 %43, %32
  %46 = add nuw nsw i32 %44, 5
  %47 = lshr i32 %46, 26
  %48 = add nuw nsw i32 %47, %45
  %49 = lshr i32 %48, 26
  %50 = add nuw nsw i32 %49, %35
  %51 = lshr i32 %50, 26
  %52 = add nuw nsw i32 %51, %38
  %53 = lshr i32 %52, 26
  %54 = or i32 %39, -67108864
  %55 = add nsw i32 %54, %53
  %56 = lshr i32 %55, 31
  %57 = add nsw i32 %56, -1
  %58 = and i32 %57, 67108863
  %59 = and i32 %58, %46
  %60 = and i32 %58, %48
  %61 = and i32 %58, %50
  %62 = and i32 %58, %52
  %63 = and i32 %57, %55
  %64 = ashr i32 %55, 31
  %65 = and i32 %64, %44
  %66 = or i32 %65, %59
  %67 = and i32 %64, %45
  %68 = or i32 %67, %60
  %69 = and i32 %64, %35
  %70 = or i32 %69, %61
  %71 = and i32 %64, %38
  %72 = or i32 %71, %62
  %73 = and i32 %64, %39
  %74 = or i32 %63, %73
  %75 = shl i32 %68, 26
  %76 = or i32 %66, %75
  %77 = lshr i32 %68, 6
  %78 = shl i32 %70, 20
  %79 = or i32 %77, %78
  %80 = lshr i32 %70, 12
  %81 = shl i32 %72, 14
  %82 = or i32 %80, %81
  %83 = lshr i32 %72, 18
  %84 = shl i32 %74, 8
  %85 = or i32 %84, %83
  %86 = zext i32 %76 to i64
  %87 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 0
  %88 = load i32, i32* %87, align 8
  %89 = zext i32 %88 to i64
  %90 = add nuw nsw i64 %86, %89
  %91 = trunc i64 %90 to i32
  %92 = zext i32 %79 to i64
  %93 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 1
  %94 = load i32, i32* %93, align 4
  %95 = zext i32 %94 to i64
  %96 = add nuw nsw i64 %92, %95
  %97 = lshr i64 %90, 32
  %98 = add nuw nsw i64 %96, %97
  %99 = trunc i64 %98 to i32
  %100 = zext i32 %82 to i64
  %101 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 2
  %102 = load i32, i32* %101, align 8
  %103 = zext i32 %102 to i64
  %104 = add nuw nsw i64 %100, %103
  %105 = lshr i64 %98, 32
  %106 = add nuw nsw i64 %104, %105
  %107 = trunc i64 %106 to i32
  %108 = zext i32 %85 to i64
  %109 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 3
  %110 = load i32, i32* %109, align 4
  %111 = zext i32 %110 to i64
  %112 = add nuw nsw i64 %108, %111
  %113 = lshr i64 %106, 32
  %114 = add nuw nsw i64 %112, %113
  %115 = trunc i64 %114 to i32
  %116 = bitcast i8* %1 to i32*
  store i32 %91, i32* %116, align 1
  %117 = getelementptr i8, i8* %1, i32 4
  %118 = bitcast i8* %117 to i32*
  store i32 %99, i32* %118, align 1
  %119 = getelementptr i8, i8* %1, i32 8
  %120 = bitcast i8* %119 to i32*
  store i32 %107, i32* %120, align 1
  %121 = getelementptr i8, i8* %1, i32 12
  %122 = bitcast i8* %121 to i32*
  store i32 %115, i32* %122, align 1
  %123 = bitcast %struct.poly1305_state_internal_t* %0 to i8*
  tail call void @sodium_memzero(i8* %123, i32 88) #6
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #2

; Function Attrs: nofree norecurse nounwind
define internal fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nocapture %0, i8* nocapture readonly %1, i64 %2) unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 5
  %5 = load i8, i8* %4, align 8
  %6 = icmp eq i8 %5, 0
  %7 = select i1 %6, i32 16777216, i32 0
  %8 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 2
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 4
  %15 = load i32, i32* %14, align 8
  %16 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 2
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 3
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 4
  %25 = load i32, i32* %24, align 4
  %26 = icmp ugt i64 %2, 15
  br i1 %26, label %27, label %160

27:                                               ; preds = %3
  %28 = mul i32 %15, 5
  %29 = mul i32 %13, 5
  %30 = mul i32 %11, 5
  %31 = mul i32 %9, 5
  %32 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 0
  %33 = load i32, i32* %32, align 8
  %34 = zext i32 %33 to i64
  %35 = zext i32 %28 to i64
  %36 = zext i32 %29 to i64
  %37 = zext i32 %30 to i64
  %38 = zext i32 %31 to i64
  %39 = zext i32 %9 to i64
  %40 = zext i32 %11 to i64
  %41 = zext i32 %13 to i64
  %42 = zext i32 %15 to i64
  br label %43

43:                                               ; preds = %27, %43
  %44 = phi i8* [ %1, %27 ], [ %157, %43 ]
  %45 = phi i64 [ %2, %27 ], [ %158, %43 ]
  %46 = phi i32 [ %17, %27 ], [ %155, %43 ]
  %47 = phi i32 [ %19, %27 ], [ %156, %43 ]
  %48 = phi i32 [ %21, %27 ], [ %140, %43 ]
  %49 = phi i32 [ %23, %27 ], [ %145, %43 ]
  %50 = phi i32 [ %25, %27 ], [ %151, %43 ]
  %51 = bitcast i8* %44 to i32*
  %52 = load i32, i32* %51, align 1
  %53 = and i32 %52, 67108863
  %54 = add i32 %53, %46
  %55 = getelementptr i8, i8* %44, i32 3
  %56 = bitcast i8* %55 to i32*
  %57 = load i32, i32* %56, align 1
  %58 = lshr i32 %57, 2
  %59 = and i32 %58, 67108863
  %60 = add i32 %59, %47
  %61 = getelementptr i8, i8* %44, i32 6
  %62 = bitcast i8* %61 to i32*
  %63 = load i32, i32* %62, align 1
  %64 = lshr i32 %63, 4
  %65 = and i32 %64, 67108863
  %66 = add i32 %65, %48
  %67 = getelementptr i8, i8* %44, i32 9
  %68 = bitcast i8* %67 to i32*
  %69 = load i32, i32* %68, align 1
  %70 = lshr i32 %69, 6
  %71 = add i32 %70, %49
  %72 = getelementptr i8, i8* %44, i32 12
  %73 = bitcast i8* %72 to i32*
  %74 = load i32, i32* %73, align 1
  %75 = lshr i32 %74, 8
  %76 = or i32 %75, %7
  %77 = add i32 %76, %50
  %78 = zext i32 %54 to i64
  %79 = mul nuw i64 %78, %34
  %80 = zext i32 %60 to i64
  %81 = mul nuw i64 %80, %35
  %82 = add i64 %81, %79
  %83 = zext i32 %66 to i64
  %84 = mul nuw i64 %83, %36
  %85 = add i64 %82, %84
  %86 = zext i32 %71 to i64
  %87 = mul nuw i64 %86, %37
  %88 = add i64 %85, %87
  %89 = zext i32 %77 to i64
  %90 = mul nuw i64 %89, %38
  %91 = add i64 %88, %90
  %92 = mul nuw i64 %78, %39
  %93 = mul nuw i64 %80, %34
  %94 = add i64 %93, %92
  %95 = mul nuw i64 %83, %35
  %96 = add i64 %94, %95
  %97 = mul nuw i64 %86, %36
  %98 = add i64 %96, %97
  %99 = mul nuw i64 %89, %37
  %100 = add i64 %98, %99
  %101 = mul nuw i64 %78, %40
  %102 = mul nuw i64 %80, %39
  %103 = add i64 %102, %101
  %104 = mul nuw i64 %83, %34
  %105 = add i64 %103, %104
  %106 = mul nuw i64 %86, %35
  %107 = add i64 %105, %106
  %108 = mul nuw i64 %89, %36
  %109 = add i64 %107, %108
  %110 = mul nuw i64 %78, %41
  %111 = mul nuw i64 %80, %40
  %112 = add i64 %111, %110
  %113 = mul nuw i64 %83, %39
  %114 = add i64 %112, %113
  %115 = mul nuw i64 %86, %34
  %116 = add i64 %114, %115
  %117 = mul nuw i64 %89, %35
  %118 = add i64 %116, %117
  %119 = mul nuw i64 %78, %42
  %120 = mul nuw i64 %80, %41
  %121 = add i64 %120, %119
  %122 = mul nuw i64 %83, %40
  %123 = add i64 %121, %122
  %124 = mul nuw i64 %86, %39
  %125 = add i64 %123, %124
  %126 = mul nuw i64 %89, %34
  %127 = add i64 %125, %126
  %128 = lshr i64 %91, 26
  %129 = trunc i64 %91 to i32
  %130 = and i32 %129, 67108863
  %131 = and i64 %128, 4294967295
  %132 = add i64 %100, %131
  %133 = lshr i64 %132, 26
  %134 = trunc i64 %132 to i32
  %135 = and i32 %134, 67108863
  %136 = and i64 %133, 4294967295
  %137 = add i64 %109, %136
  %138 = lshr i64 %137, 26
  %139 = trunc i64 %137 to i32
  %140 = and i32 %139, 67108863
  %141 = and i64 %138, 4294967295
  %142 = add i64 %118, %141
  %143 = lshr i64 %142, 26
  %144 = trunc i64 %142 to i32
  %145 = and i32 %144, 67108863
  %146 = and i64 %143, 4294967295
  %147 = add i64 %127, %146
  %148 = lshr i64 %147, 26
  %149 = trunc i64 %148 to i32
  %150 = trunc i64 %147 to i32
  %151 = and i32 %150, 67108863
  %152 = mul i32 %149, 5
  %153 = add i32 %152, %130
  %154 = lshr i32 %153, 26
  %155 = and i32 %153, 67108863
  %156 = add nuw nsw i32 %154, %135
  %157 = getelementptr i8, i8* %44, i32 16
  %158 = add i64 %45, -16
  %159 = icmp ugt i64 %158, 15
  br i1 %159, label %43, label %160

160:                                              ; preds = %43, %3
  %161 = phi i32 [ %25, %3 ], [ %151, %43 ]
  %162 = phi i32 [ %23, %3 ], [ %145, %43 ]
  %163 = phi i32 [ %21, %3 ], [ %140, %43 ]
  %164 = phi i32 [ %19, %3 ], [ %156, %43 ]
  %165 = phi i32 [ %17, %3 ], [ %155, %43 ]
  store i32 %165, i32* %16, align 4
  store i32 %164, i32* %18, align 4
  store i32 %163, i32* %20, align 4
  store i32 %162, i32* %22, align 4
  store i32 %161, i32* %24, align 4
  ret void
}

declare void @sodium_memzero(i8* %0, i32 %1) local_unnamed_addr #4

declare i32 @crypto_verify_16(i8* %0, i8* %1) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly %0, i8 %1, i64 %2, i1 immarg %3) #5

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #5

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { noinline nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind willreturn writeonly }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %7, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00000011111111111111111111111111)

; *****
; For LLVM instruction:
;  %9 = and i32 %8, 67108863
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 67108863:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %12, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00001111111111111111110000001100)

; *****
; For LLVM instruction:
;  %14 = lshr i32 %13, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 2:i32
infer %1 (demandedBits=00000011111111111111111100000011)

; *****
; For LLVM instruction:
;  %15 = and i32 %14, 67108611
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 2:i32
%2:i32 = and 67108611:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %18, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00111111111111000000111111110000)

; *****
; For LLVM instruction:
;  %20 = lshr i32 %19, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 4:i32
infer %1 (demandedBits=00000011111111111100000011111111)

; *****
; For LLVM instruction:
;  %21 = and i32 %20, 67092735
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 4:i32
%2:i32 = and 67092735:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %24, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=11111100000011111111111111000000)

; *****
; For LLVM instruction:
;  %26 = lshr i32 %25, 6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 6:i32
infer %1 (demandedBits=00000011111100000011111111111111)

; *****
; For LLVM instruction:
;  %27 = and i32 %26, 66076671
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 6:i32
%2:i32 = and 66076671:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %30, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00001111111111111111111100000000)

; *****
; For LLVM instruction:
;  %32 = lshr i32 %31, 8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 8:i32
infer %1 (demandedBits=00000000000011111111111111111111)

; *****
; For LLVM instruction:
;  %33 = and i32 %32, 1048575
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 8:i32
%2:i32 = and 1048575:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %37, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %42, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %46, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %51 = load i32, i32* %50, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=00000011111111111111111111111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 67108863
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = and 67108863:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 67108863
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=00001111111111111111110000001100)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268426252
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = lshr %0, 2:i32
infer %1 (demandedBits=00000011111111111111111100000011)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 67106563
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = lshr %0, 2:i32
%2:i32 = and 67108611:i32, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 67106563
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = lshr %0, 2:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=00111111111111000000111111110000)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073483248
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = lshr %0, 4:i32
infer %1 (demandedBits=00000011111111111100000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 67092703
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = lshr %0, 4:i32
%2:i32 = and 67092735:i32, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 67092703
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = lshr %0, 4:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=11111100000011111111111111000000)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -66062400
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = lshr %0, 6:i32
infer %1 (demandedBits=00000011111100000011111111111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 66076639
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = lshr %0, 6:i32
%2:i32 = and 66076671:i32, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 66076639
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = lshr %0, 6:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=00001111111111111111111100000000)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435200
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = lshr %0, 8:i32
infer %1 (demandedBits=00000000000011111111111111111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1048575
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = lshr %0, 8:i32
%2:i32 = and 1048575:i32, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1048575
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = lshr %0, 8:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for ./poly1305_donna.c.bc:crypto_onetimeauth_poly1305_donna()

; entering Souper's runOnFunction() for ./poly1305_donna.c.bc:crypto_onetimeauth_poly1305_donna_verify()

; ModuleID = './poly1305_donna.c.bc'
source_filename = "crypto_onetimeauth/poly1305/donna/poly1305_donna.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.crypto_onetimeauth_poly1305_implementation = type { i32 (i8*, i8*, i64, i8*)*, i32 (i8*, i8*, i64, i8*)*, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)*, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*, i64)*, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)* }
%struct.crypto_onetimeauth_poly1305_state = type { [256 x i8] }
%struct.poly1305_state_internal_t = type { [5 x i32], [5 x i32], [4 x i32], i64, [16 x i8], i8 }

@crypto_onetimeauth_poly1305_donna_implementation = hidden local_unnamed_addr global %struct.crypto_onetimeauth_poly1305_implementation { i32 (i8*, i8*, i64, i8*)* @crypto_onetimeauth_poly1305_donna, i32 (i8*, i8*, i64, i8*)* @crypto_onetimeauth_poly1305_donna_verify, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)* @crypto_onetimeauth_poly1305_donna_init, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*, i64)* @crypto_onetimeauth_poly1305_donna_update, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)* @crypto_onetimeauth_poly1305_donna_final }, align 4

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna(i8* nocapture %0, i8* nocapture readonly %1, i64 %2, i8* nocapture readonly %3) #0 {
  %5 = alloca %struct.poly1305_state_internal_t, align 64
  %6 = bitcast %struct.poly1305_state_internal_t* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %6) #6
  %7 = bitcast i8* %3 to i32*
  %8 = load i32, i32* %7, align 1
  %9 = and i32 %8, 67108863
  %10 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 0
  store i32 %9, i32* %10, align 64
  %11 = getelementptr i8, i8* %3, i32 3
  %12 = bitcast i8* %11 to i32*
  %13 = load i32, i32* %12, align 1
  %14 = lshr i32 %13, 2
  %15 = and i32 %14, 67108611
  %16 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 1
  store i32 %15, i32* %16, align 4
  %17 = getelementptr i8, i8* %3, i32 6
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 1
  %20 = lshr i32 %19, 4
  %21 = and i32 %20, 67092735
  %22 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 2
  store i32 %21, i32* %22, align 8
  %23 = getelementptr i8, i8* %3, i32 9
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 1
  %26 = lshr i32 %25, 6
  %27 = and i32 %26, 66076671
  %28 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 3
  store i32 %27, i32* %28, align 4
  %29 = getelementptr i8, i8* %3, i32 12
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 1
  %32 = lshr i32 %31, 8
  %33 = and i32 %32, 1048575
  %34 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 4
  store i32 %33, i32* %34, align 16
  %35 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 1, i32 0
  %36 = getelementptr i8, i8* %3, i32 16
  %37 = bitcast i8* %36 to i32*
  %38 = bitcast i32* %35 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(20) %38, i8 0, i64 20, i1 false) #6
  %39 = load i32, i32* %37, align 1
  %40 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 0
  store i32 %39, i32* %40, align 8
  %41 = getelementptr i8, i8* %3, i32 20
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %42, align 1
  %44 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 1
  store i32 %43, i32* %44, align 4
  %45 = getelementptr i8, i8* %3, i32 24
  %46 = bitcast i8* %45 to i32*
  %47 = load i32, i32* %46, align 1
  %48 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 2
  store i32 %47, i32* %48, align 8
  %49 = getelementptr i8, i8* %3, i32 28
  %50 = bitcast i8* %49 to i32*
  %51 = load i32, i32* %50, align 1
  %52 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 3
  store i32 %51, i32* %52, align 4
  %53 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 3
  store i64 0, i64* %53, align 8
  %54 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 5
  store i8 0, i8* %54, align 16
  call fastcc void @poly1305_update(%struct.poly1305_state_internal_t* nonnull %5, i8* %1, i64 %2)
  call fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* nonnull %5, i8* %0)
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %6) #6
  ret i32 0
}

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_verify(i8* %0, i8* nocapture readonly %1, i64 %2, i8* nocapture readonly %3) #0 {
  %5 = alloca %struct.poly1305_state_internal_t, align 64
  %6 = alloca [16 x i8], align 16
  %7 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #6
  %8 = bitcast %struct.poly1305_state_internal_t* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %8) #6
  %9 = bitcast i8* %3 to i32*
  %10 = load i32, i32* %9, align 1
  %11 = and i32 %10, 67108863
  %12 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 0
  store i32 %11, i32* %12, align 64
  %13 = getelementptr i8, i8* %3, i32 3
  %14 = bitcast i8* %13 to i32*
  %15 = load i32, i32* %14, align 1
  %16 = lshr i32 %15, 2
  %17 = and i32 %16, 67108611
  %18 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 1
  store i32 %17, i32* %18, align 4
  %19 = getelementptr i8, i8* %3, i32 6
  %20 = bitcast i8* %19 to i32*
  %21 = load i32, i32* %20, align 1
  %22 = lshr i32 %21, 4
  %23 = and i32 %22, 67092735
  %24 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 2
  store i32 %23, i32* %24, align 8
  %25 = getelementptr i8, i8* %3, i32 9
  %26 = bitcast i8* %25 to i32*
  %27 = load i32, i32* %26, align 1
  %28 = lshr i32 %27, 6
  %29 = and i32 %28, 66076671
  %30 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 3
  store i32 %29, i32* %30, align 4
  %31 = getelementptr i8, i8* %3, i32 12
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 1
  %34 = lshr i32 %33, 8
  %35 = and i32 %34, 1048575
  %36 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 4
  store i32 %35, i32* %36, align 16
  %37 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 1, i32 0
  %38 = getelementptr i8, i8* %3, i32 16
  %39 = bitcast i8* %38 to i32*
  %40 = bitcast i32* %37 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(20) %40, i8 0, i64 20, i1 false) #6
  %41 = load i32, i32* %39, align 1
  %42 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 0
  store i32 %41, i32* %42, align 8
  %43 = getelementptr i8, i8* %3, i32 20
  %44 = bitcast i8* %43 to i32*
  %45 = load i32, i32* %44, align 1
  %46 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 1
  store i32 %45, i32* %46, align 4
  %47 = getelementptr i8, i8* %3, i32 24
  %48 = bitcast i8* %47 to i32*
  %49 = load i32, i32* %48, align 1
  %50 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 2
  store i32 %49, i32* %50, align 8
  %51 = getelementptr i8, i8* %3, i32 28
  %52 = bitcast i8* %51 to i32*
  %53 = load i32, i32* %52, align 1
  %54 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 3
  store i32 %53, i32* %54, align 4
  %55 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 3
  store i64 0, i64* %55, align 8
  %56 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 5
  store i8 0, i8* %56, align 16
  call fastcc void @poly1305_update(%struct.poly1305_state_internal_t* nonnull %5, i8* %1, i64 %2) #6
  call fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* nonnull %5, i8* nonnull %7) #6
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %8) #6
  %57 = call i32 @crypto_verify_16(i8* %0, i8* nonnull %7) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #6
  ret i32 %57
}

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_init(%struct.crypto_onetimeauth_poly1305_state* nocapture %0, i8* nocapture readonly %1) #0 {
  %3 = bitcast i8* %1 to i32*
  %4 = load i32, i32* %3, align 1
  %5 = and i32 %4, 67108863
  %6 = bitcast %struct.crypto_onetimeauth_poly1305_state* %0 to i32*
  store i32 %5, i32* %6, align 8
  %7 = getelementptr i8, i8* %1, i32 3
  %8 = bitcast i8* %7 to i32*
  %9 = load i32, i32* %8, align 1
  %10 = lshr i32 %9, 2
  %11 = and i32 %10, 67108611
  %12 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 4
  %13 = bitcast i8* %12 to i32*
  store i32 %11, i32* %13, align 4
  %14 = getelementptr i8, i8* %1, i32 6
  %15 = bitcast i8* %14 to i32*
  %16 = load i32, i32* %15, align 1
  %17 = lshr i32 %16, 4
  %18 = and i32 %17, 67092735
  %19 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 8
  %20 = bitcast i8* %19 to i32*
  store i32 %18, i32* %20, align 8
  %21 = getelementptr i8, i8* %1, i32 9
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 1
  %24 = lshr i32 %23, 6
  %25 = and i32 %24, 66076671
  %26 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 12
  %27 = bitcast i8* %26 to i32*
  store i32 %25, i32* %27, align 4
  %28 = getelementptr i8, i8* %1, i32 12
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 1
  %31 = lshr i32 %30, 8
  %32 = and i32 %31, 1048575
  %33 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 16
  %34 = bitcast i8* %33 to i32*
  store i32 %32, i32* %34, align 8
  %35 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 20
  %36 = getelementptr i8, i8* %1, i32 16
  %37 = bitcast i8* %36 to i32*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(20) %35, i8 0, i64 20, i1 false) #6
  %38 = load i32, i32* %37, align 1
  %39 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 40
  %40 = bitcast i8* %39 to i32*
  store i32 %38, i32* %40, align 8
  %41 = getelementptr i8, i8* %1, i32 20
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %42, align 1
  %44 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 44
  %45 = bitcast i8* %44 to i32*
  store i32 %43, i32* %45, align 4
  %46 = getelementptr i8, i8* %1, i32 24
  %47 = bitcast i8* %46 to i32*
  %48 = load i32, i32* %47, align 1
  %49 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 48
  %50 = bitcast i8* %49 to i32*
  store i32 %48, i32* %50, align 8
  %51 = getelementptr i8, i8* %1, i32 28
  %52 = bitcast i8* %51 to i32*
  %53 = load i32, i32* %52, align 1
  %54 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 52
  %55 = bitcast i8* %54 to i32*
  store i32 %53, i32* %55, align 4
  %56 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 56
  %57 = bitcast i8* %56 to i64*
  store i64 0, i64* %57, align 8
  %58 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 80
  store i8 0, i8* %58, align 8
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_update(%struct.crypto_onetimeauth_poly1305_state* nocapture %0, i8* nocapture readonly %1, i64 %2) #1 {
  %4 = bitcast %struct.crypto_onetimeauth_poly1305_state* %0 to %struct.poly1305_state_internal_t*
  tail call fastcc void @poly1305_update(%struct.poly1305_state_internal_t* %4, i8* %1, i64 %2)
  ret i32 0
}

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_final(%struct.crypto_onetimeauth_poly1305_state* %0, i8* nocapture %1) #0 {
  %3 = bitcast %struct.crypto_onetimeauth_poly1305_state* %0 to %struct.poly1305_state_internal_t*
  tail call fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* %3, i8* %1)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #2

; Function Attrs: nofree norecurse nounwind
define internal fastcc void @poly1305_update(%struct.poly1305_state_internal_t* nocapture %0, i8* nocapture readonly %1, i64 %2) unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 3
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %33, label %7

7:                                                ; preds = %3
  %8 = sub i64 16, %5
  %9 = icmp ugt i64 %8, %2
  %10 = select i1 %9, i64 %2, i64 %8
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %24, label %12

12:                                               ; preds = %7, %12
  %13 = phi i64 [ %23, %12 ], [ %5, %7 ]
  %14 = phi i64 [ %21, %12 ], [ 0, %7 ]
  %15 = trunc i64 %14 to i32
  %16 = getelementptr i8, i8* %1, i32 %15
  %17 = load i8, i8* %16, align 1
  %18 = add i64 %13, %14
  %19 = trunc i64 %18 to i32
  %20 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 %19
  store i8 %17, i8* %20, align 1
  %21 = add nuw i64 %14, 1
  %22 = icmp ult i64 %21, %10
  %23 = load i64, i64* %4, align 8
  br i1 %22, label %12, label %24

24:                                               ; preds = %12, %7
  %25 = phi i64 [ %5, %7 ], [ %23, %12 ]
  %26 = add i64 %25, %10
  store i64 %26, i64* %4, align 8
  %27 = icmp ult i64 %26, 16
  br i1 %27, label %60, label %28

28:                                               ; preds = %24
  %29 = trunc i64 %10 to i32
  %30 = getelementptr i8, i8* %1, i32 %29
  %31 = sub i64 %2, %10
  %32 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 0
  tail call fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nonnull %0, i8* nonnull %32, i64 16)
  store i64 0, i64* %4, align 8
  br label %33

33:                                               ; preds = %28, %3
  %34 = phi i64 [ %2, %3 ], [ %31, %28 ]
  %35 = phi i8* [ %1, %3 ], [ %30, %28 ]
  %36 = icmp ugt i64 %34, 15
  br i1 %36, label %37, label %42

37:                                               ; preds = %33
  %38 = and i64 %34, -16
  tail call fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nonnull %0, i8* %35, i64 %38)
  %39 = trunc i64 %38 to i32
  %40 = getelementptr i8, i8* %35, i32 %39
  %41 = sub i64 %34, %38
  br label %42

42:                                               ; preds = %37, %33
  %43 = phi i64 [ %41, %37 ], [ %34, %33 ]
  %44 = phi i8* [ %40, %37 ], [ %35, %33 ]
  %45 = icmp eq i64 %43, 0
  br i1 %45, label %60, label %46

46:                                               ; preds = %42, %46
  %47 = phi i64 [ %55, %46 ], [ 0, %42 ]
  %48 = trunc i64 %47 to i32
  %49 = getelementptr i8, i8* %44, i32 %48
  %50 = load i8, i8* %49, align 1
  %51 = load i64, i64* %4, align 8
  %52 = add i64 %51, %47
  %53 = trunc i64 %52 to i32
  %54 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 %53
  store i8 %50, i8* %54, align 1
  %55 = add nuw i64 %47, 1
  %56 = icmp eq i64 %55, %43
  br i1 %56, label %57, label %46

57:                                               ; preds = %46
  %58 = load i64, i64* %4, align 8
  %59 = add i64 %58, %43
  store i64 %59, i64* %4, align 8
  br label %60

60:                                               ; preds = %57, %42, %24
  ret void
}

; Function Attrs: noinline nounwind
define internal fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* %0, i8* nocapture %1) unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 3
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %20, label %6

6:                                                ; preds = %2
  %7 = trunc i64 %4 to i32
  %8 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 %7
  store i8 1, i8* %8, align 1
  %9 = add i64 %4, 1
  %10 = icmp ult i64 %9, 16
  br i1 %10, label %11, label %17

11:                                               ; preds = %6
  %12 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 16
  %13 = bitcast i32* %12 to i8*
  %14 = add i32 %7, 1
  %15 = getelementptr i8, i8* %13, i32 %14
  %16 = sub i32 15, %7
  call void @llvm.memset.p0i8.i32(i8* align 1 %15, i8 0, i32 %16, i1 false)
  br label %17

17:                                               ; preds = %11, %6
  %18 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 5
  store i8 1, i8* %18, align 8
  %19 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 0
  tail call fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nonnull %0, i8* nonnull %19, i64 16)
  br label %20

20:                                               ; preds = %2, %17
  %21 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 0
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 2
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 3
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 4
  %30 = load i32, i32* %29, align 4
  %31 = lshr i32 %24, 26
  %32 = and i32 %24, 67108863
  %33 = add i32 %26, %31
  %34 = lshr i32 %33, 26
  %35 = and i32 %33, 67108863
  %36 = add i32 %34, %28
  %37 = lshr i32 %36, 26
  %38 = and i32 %36, 67108863
  %39 = add i32 %37, %30
  %40 = lshr i32 %39, 26
  %41 = mul nuw nsw i32 %40, 5
  %42 = add i32 %41, %22
  %43 = lshr i32 %42, 26
  %44 = and i32 %42, 67108863
  %45 = add nuw nsw i32 %43, %32
  %46 = add nuw nsw i32 %44, 5
  %47 = lshr i32 %46, 26
  %48 = add nuw nsw i32 %47, %45
  %49 = lshr i32 %48, 26
  %50 = add nuw nsw i32 %49, %35
  %51 = lshr i32 %50, 26
  %52 = add nuw nsw i32 %51, %38
  %53 = lshr i32 %52, 26
  %54 = or i32 %39, -67108864
  %55 = add nsw i32 %54, %53
  %56 = lshr i32 %55, 31
  %57 = add nsw i32 %56, -1
  %58 = and i32 %57, 67108863
  %59 = and i32 %58, %46
  %60 = and i32 %58, %48
  %61 = and i32 %58, %50
  %62 = and i32 %58, %52
  %63 = and i32 %57, %55
  %64 = ashr i32 %55, 31
  %65 = and i32 %64, %44
  %66 = or i32 %65, %59
  %67 = and i32 %64, %45
  %68 = or i32 %67, %60
  %69 = and i32 %64, %35
  %70 = or i32 %69, %61
  %71 = and i32 %64, %38
  %72 = or i32 %71, %62
  %73 = and i32 %64, %39
  %74 = or i32 %63, %73
  %75 = shl i32 %68, 26
  %76 = or i32 %66, %75
  %77 = lshr i32 %68, 6
  %78 = shl i32 %70, 20
  %79 = or i32 %77, %78
  %80 = lshr i32 %70, 12
  %81 = shl i32 %72, 14
  %82 = or i32 %80, %81
  %83 = lshr i32 %72, 18
  %84 = shl i32 %74, 8
  %85 = or i32 %84, %83
  %86 = zext i32 %76 to i64
  %87 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 0
  %88 = load i32, i32* %87, align 8
  %89 = zext i32 %88 to i64
  %90 = add nuw nsw i64 %86, %89
  %91 = trunc i64 %90 to i32
  %92 = zext i32 %79 to i64
  %93 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 1
  %94 = load i32, i32* %93, align 4
  %95 = zext i32 %94 to i64
  %96 = add nuw nsw i64 %92, %95
  %97 = lshr i64 %90, 32
  %98 = add nuw nsw i64 %96, %97
  %99 = trunc i64 %98 to i32
  %100 = zext i32 %82 to i64
  %101 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 2
  %102 = load i32, i32* %101, align 8
  %103 = zext i32 %102 to i64
  %104 = add nuw nsw i64 %100, %103
  %105 = lshr i64 %98, 32
  %106 = add nuw nsw i64 %104, %105
  %107 = trunc i64 %106 to i32
  %108 = zext i32 %85 to i64
  %109 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 3
  %110 = load i32, i32* %109, align 4
  %111 = zext i32 %110 to i64
  %112 = add nuw nsw i64 %108, %111
  %113 = lshr i64 %106, 32
  %114 = add nuw nsw i64 %112, %113
  %115 = trunc i64 %114 to i32
  %116 = bitcast i8* %1 to i32*
  store i32 %91, i32* %116, align 1
  %117 = getelementptr i8, i8* %1, i32 4
  %118 = bitcast i8* %117 to i32*
  store i32 %99, i32* %118, align 1
  %119 = getelementptr i8, i8* %1, i32 8
  %120 = bitcast i8* %119 to i32*
  store i32 %107, i32* %120, align 1
  %121 = getelementptr i8, i8* %1, i32 12
  %122 = bitcast i8* %121 to i32*
  store i32 %115, i32* %122, align 1
  %123 = bitcast %struct.poly1305_state_internal_t* %0 to i8*
  tail call void @sodium_memzero(i8* %123, i32 88) #6
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #2

; Function Attrs: nofree norecurse nounwind
define internal fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nocapture %0, i8* nocapture readonly %1, i64 %2) unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 5
  %5 = load i8, i8* %4, align 8
  %6 = icmp eq i8 %5, 0
  %7 = select i1 %6, i32 16777216, i32 0
  %8 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 2
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 4
  %15 = load i32, i32* %14, align 8
  %16 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 2
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 3
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 4
  %25 = load i32, i32* %24, align 4
  %26 = icmp ugt i64 %2, 15
  br i1 %26, label %27, label %160

27:                                               ; preds = %3
  %28 = mul i32 %15, 5
  %29 = mul i32 %13, 5
  %30 = mul i32 %11, 5
  %31 = mul i32 %9, 5
  %32 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 0
  %33 = load i32, i32* %32, align 8
  %34 = zext i32 %33 to i64
  %35 = zext i32 %28 to i64
  %36 = zext i32 %29 to i64
  %37 = zext i32 %30 to i64
  %38 = zext i32 %31 to i64
  %39 = zext i32 %9 to i64
  %40 = zext i32 %11 to i64
  %41 = zext i32 %13 to i64
  %42 = zext i32 %15 to i64
  br label %43

43:                                               ; preds = %27, %43
  %44 = phi i8* [ %1, %27 ], [ %157, %43 ]
  %45 = phi i64 [ %2, %27 ], [ %158, %43 ]
  %46 = phi i32 [ %17, %27 ], [ %155, %43 ]
  %47 = phi i32 [ %19, %27 ], [ %156, %43 ]
  %48 = phi i32 [ %21, %27 ], [ %140, %43 ]
  %49 = phi i32 [ %23, %27 ], [ %145, %43 ]
  %50 = phi i32 [ %25, %27 ], [ %151, %43 ]
  %51 = bitcast i8* %44 to i32*
  %52 = load i32, i32* %51, align 1
  %53 = and i32 %52, 67108863
  %54 = add i32 %53, %46
  %55 = getelementptr i8, i8* %44, i32 3
  %56 = bitcast i8* %55 to i32*
  %57 = load i32, i32* %56, align 1
  %58 = lshr i32 %57, 2
  %59 = and i32 %58, 67108863
  %60 = add i32 %59, %47
  %61 = getelementptr i8, i8* %44, i32 6
  %62 = bitcast i8* %61 to i32*
  %63 = load i32, i32* %62, align 1
  %64 = lshr i32 %63, 4
  %65 = and i32 %64, 67108863
  %66 = add i32 %65, %48
  %67 = getelementptr i8, i8* %44, i32 9
  %68 = bitcast i8* %67 to i32*
  %69 = load i32, i32* %68, align 1
  %70 = lshr i32 %69, 6
  %71 = add i32 %70, %49
  %72 = getelementptr i8, i8* %44, i32 12
  %73 = bitcast i8* %72 to i32*
  %74 = load i32, i32* %73, align 1
  %75 = lshr i32 %74, 8
  %76 = or i32 %75, %7
  %77 = add i32 %76, %50
  %78 = zext i32 %54 to i64
  %79 = mul nuw i64 %78, %34
  %80 = zext i32 %60 to i64
  %81 = mul nuw i64 %80, %35
  %82 = add i64 %81, %79
  %83 = zext i32 %66 to i64
  %84 = mul nuw i64 %83, %36
  %85 = add i64 %82, %84
  %86 = zext i32 %71 to i64
  %87 = mul nuw i64 %86, %37
  %88 = add i64 %85, %87
  %89 = zext i32 %77 to i64
  %90 = mul nuw i64 %89, %38
  %91 = add i64 %88, %90
  %92 = mul nuw i64 %78, %39
  %93 = mul nuw i64 %80, %34
  %94 = add i64 %93, %92
  %95 = mul nuw i64 %83, %35
  %96 = add i64 %94, %95
  %97 = mul nuw i64 %86, %36
  %98 = add i64 %96, %97
  %99 = mul nuw i64 %89, %37
  %100 = add i64 %98, %99
  %101 = mul nuw i64 %78, %40
  %102 = mul nuw i64 %80, %39
  %103 = add i64 %102, %101
  %104 = mul nuw i64 %83, %34
  %105 = add i64 %103, %104
  %106 = mul nuw i64 %86, %35
  %107 = add i64 %105, %106
  %108 = mul nuw i64 %89, %36
  %109 = add i64 %107, %108
  %110 = mul nuw i64 %78, %41
  %111 = mul nuw i64 %80, %40
  %112 = add i64 %111, %110
  %113 = mul nuw i64 %83, %39
  %114 = add i64 %112, %113
  %115 = mul nuw i64 %86, %34
  %116 = add i64 %114, %115
  %117 = mul nuw i64 %89, %35
  %118 = add i64 %116, %117
  %119 = mul nuw i64 %78, %42
  %120 = mul nuw i64 %80, %41
  %121 = add i64 %120, %119
  %122 = mul nuw i64 %83, %40
  %123 = add i64 %121, %122
  %124 = mul nuw i64 %86, %39
  %125 = add i64 %123, %124
  %126 = mul nuw i64 %89, %34
  %127 = add i64 %125, %126
  %128 = lshr i64 %91, 26
  %129 = trunc i64 %91 to i32
  %130 = and i32 %129, 67108863
  %131 = and i64 %128, 4294967295
  %132 = add i64 %100, %131
  %133 = lshr i64 %132, 26
  %134 = trunc i64 %132 to i32
  %135 = and i32 %134, 67108863
  %136 = and i64 %133, 4294967295
  %137 = add i64 %109, %136
  %138 = lshr i64 %137, 26
  %139 = trunc i64 %137 to i32
  %140 = and i32 %139, 67108863
  %141 = and i64 %138, 4294967295
  %142 = add i64 %118, %141
  %143 = lshr i64 %142, 26
  %144 = trunc i64 %142 to i32
  %145 = and i32 %144, 67108863
  %146 = and i64 %143, 4294967295
  %147 = add i64 %127, %146
  %148 = lshr i64 %147, 26
  %149 = trunc i64 %148 to i32
  %150 = trunc i64 %147 to i32
  %151 = and i32 %150, 67108863
  %152 = mul i32 %149, 5
  %153 = add i32 %152, %130
  %154 = lshr i32 %153, 26
  %155 = and i32 %153, 67108863
  %156 = add nuw nsw i32 %154, %135
  %157 = getelementptr i8, i8* %44, i32 16
  %158 = add i64 %45, -16
  %159 = icmp ugt i64 %158, 15
  br i1 %159, label %43, label %160

160:                                              ; preds = %43, %3
  %161 = phi i32 [ %25, %3 ], [ %151, %43 ]
  %162 = phi i32 [ %23, %3 ], [ %145, %43 ]
  %163 = phi i32 [ %21, %3 ], [ %140, %43 ]
  %164 = phi i32 [ %19, %3 ], [ %156, %43 ]
  %165 = phi i32 [ %17, %3 ], [ %155, %43 ]
  store i32 %165, i32* %16, align 4
  store i32 %164, i32* %18, align 4
  store i32 %163, i32* %20, align 4
  store i32 %162, i32* %22, align 4
  store i32 %161, i32* %24, align 4
  ret void
}

declare void @sodium_memzero(i8* %0, i32 %1) local_unnamed_addr #4

declare i32 @crypto_verify_16(i8* %0, i8* %1) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly %0, i8 %1, i64 %2, i1 immarg %3) #5

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #5

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { noinline nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind willreturn writeonly }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %9, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00000011111111111111111111111111)

; *****
; For LLVM instruction:
;  %11 = and i32 %10, 67108863
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 67108863:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %14, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00001111111111111111110000001100)

; *****
; For LLVM instruction:
;  %16 = lshr i32 %15, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 2:i32
infer %1 (demandedBits=00000011111111111111111100000011)

; *****
; For LLVM instruction:
;  %17 = and i32 %16, 67108611
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 2:i32
%2:i32 = and 67108611:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %20, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00111111111111000000111111110000)

; *****
; For LLVM instruction:
;  %22 = lshr i32 %21, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 4:i32
infer %1 (demandedBits=00000011111111111100000011111111)

; *****
; For LLVM instruction:
;  %23 = and i32 %22, 67092735
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 4:i32
%2:i32 = and 67092735:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %26, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=11111100000011111111111111000000)

; *****
; For LLVM instruction:
;  %28 = lshr i32 %27, 6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 6:i32
infer %1 (demandedBits=00000011111100000011111111111111)

; *****
; For LLVM instruction:
;  %29 = and i32 %28, 66076671
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 6:i32
%2:i32 = and 66076671:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %32, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00001111111111111111111100000000)

; *****
; For LLVM instruction:
;  %34 = lshr i32 %33, 8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 8:i32
infer %1 (demandedBits=00000000000011111111111111111111)

; *****
; For LLVM instruction:
;  %35 = and i32 %34, 1048575
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 8:i32
%2:i32 = and 1048575:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %41 = load i32, i32* %39, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %45 = load i32, i32* %44, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %49 = load i32, i32* %48, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %53 = load i32, i32* %52, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %57 = call i32 @crypto_verify_16(i8* %0, i8* nonnull %7) #6
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for ./poly1305_donna.c.bc:crypto_onetimeauth_poly1305_donna_verify()

; entering Souper's runOnFunction() for ./poly1305_donna.c.bc:crypto_onetimeauth_poly1305_donna_init()

; ModuleID = './poly1305_donna.c.bc'
source_filename = "crypto_onetimeauth/poly1305/donna/poly1305_donna.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.crypto_onetimeauth_poly1305_implementation = type { i32 (i8*, i8*, i64, i8*)*, i32 (i8*, i8*, i64, i8*)*, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)*, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*, i64)*, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)* }
%struct.crypto_onetimeauth_poly1305_state = type { [256 x i8] }
%struct.poly1305_state_internal_t = type { [5 x i32], [5 x i32], [4 x i32], i64, [16 x i8], i8 }

@crypto_onetimeauth_poly1305_donna_implementation = hidden local_unnamed_addr global %struct.crypto_onetimeauth_poly1305_implementation { i32 (i8*, i8*, i64, i8*)* @crypto_onetimeauth_poly1305_donna, i32 (i8*, i8*, i64, i8*)* @crypto_onetimeauth_poly1305_donna_verify, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)* @crypto_onetimeauth_poly1305_donna_init, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*, i64)* @crypto_onetimeauth_poly1305_donna_update, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)* @crypto_onetimeauth_poly1305_donna_final }, align 4

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna(i8* nocapture %0, i8* nocapture readonly %1, i64 %2, i8* nocapture readonly %3) #0 {
  %5 = alloca %struct.poly1305_state_internal_t, align 64
  %6 = bitcast %struct.poly1305_state_internal_t* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %6) #6
  %7 = bitcast i8* %3 to i32*
  %8 = load i32, i32* %7, align 1
  %9 = and i32 %8, 67108863
  %10 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 0
  store i32 %9, i32* %10, align 64
  %11 = getelementptr i8, i8* %3, i32 3
  %12 = bitcast i8* %11 to i32*
  %13 = load i32, i32* %12, align 1
  %14 = lshr i32 %13, 2
  %15 = and i32 %14, 67108611
  %16 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 1
  store i32 %15, i32* %16, align 4
  %17 = getelementptr i8, i8* %3, i32 6
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 1
  %20 = lshr i32 %19, 4
  %21 = and i32 %20, 67092735
  %22 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 2
  store i32 %21, i32* %22, align 8
  %23 = getelementptr i8, i8* %3, i32 9
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 1
  %26 = lshr i32 %25, 6
  %27 = and i32 %26, 66076671
  %28 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 3
  store i32 %27, i32* %28, align 4
  %29 = getelementptr i8, i8* %3, i32 12
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 1
  %32 = lshr i32 %31, 8
  %33 = and i32 %32, 1048575
  %34 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 4
  store i32 %33, i32* %34, align 16
  %35 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 1, i32 0
  %36 = getelementptr i8, i8* %3, i32 16
  %37 = bitcast i8* %36 to i32*
  %38 = bitcast i32* %35 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(20) %38, i8 0, i64 20, i1 false) #6
  %39 = load i32, i32* %37, align 1
  %40 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 0
  store i32 %39, i32* %40, align 8
  %41 = getelementptr i8, i8* %3, i32 20
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %42, align 1
  %44 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 1
  store i32 %43, i32* %44, align 4
  %45 = getelementptr i8, i8* %3, i32 24
  %46 = bitcast i8* %45 to i32*
  %47 = load i32, i32* %46, align 1
  %48 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 2
  store i32 %47, i32* %48, align 8
  %49 = getelementptr i8, i8* %3, i32 28
  %50 = bitcast i8* %49 to i32*
  %51 = load i32, i32* %50, align 1
  %52 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 3
  store i32 %51, i32* %52, align 4
  %53 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 3
  store i64 0, i64* %53, align 8
  %54 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 5
  store i8 0, i8* %54, align 16
  call fastcc void @poly1305_update(%struct.poly1305_state_internal_t* nonnull %5, i8* %1, i64 %2)
  call fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* nonnull %5, i8* %0)
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %6) #6
  ret i32 0
}

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_verify(i8* %0, i8* nocapture readonly %1, i64 %2, i8* nocapture readonly %3) #0 {
  %5 = alloca %struct.poly1305_state_internal_t, align 64
  %6 = alloca [16 x i8], align 16
  %7 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #6
  %8 = bitcast %struct.poly1305_state_internal_t* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %8) #6
  %9 = bitcast i8* %3 to i32*
  %10 = load i32, i32* %9, align 1
  %11 = and i32 %10, 67108863
  %12 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 0
  store i32 %11, i32* %12, align 64
  %13 = getelementptr i8, i8* %3, i32 3
  %14 = bitcast i8* %13 to i32*
  %15 = load i32, i32* %14, align 1
  %16 = lshr i32 %15, 2
  %17 = and i32 %16, 67108611
  %18 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 1
  store i32 %17, i32* %18, align 4
  %19 = getelementptr i8, i8* %3, i32 6
  %20 = bitcast i8* %19 to i32*
  %21 = load i32, i32* %20, align 1
  %22 = lshr i32 %21, 4
  %23 = and i32 %22, 67092735
  %24 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 2
  store i32 %23, i32* %24, align 8
  %25 = getelementptr i8, i8* %3, i32 9
  %26 = bitcast i8* %25 to i32*
  %27 = load i32, i32* %26, align 1
  %28 = lshr i32 %27, 6
  %29 = and i32 %28, 66076671
  %30 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 3
  store i32 %29, i32* %30, align 4
  %31 = getelementptr i8, i8* %3, i32 12
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 1
  %34 = lshr i32 %33, 8
  %35 = and i32 %34, 1048575
  %36 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 4
  store i32 %35, i32* %36, align 16
  %37 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 1, i32 0
  %38 = getelementptr i8, i8* %3, i32 16
  %39 = bitcast i8* %38 to i32*
  %40 = bitcast i32* %37 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(20) %40, i8 0, i64 20, i1 false) #6
  %41 = load i32, i32* %39, align 1
  %42 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 0
  store i32 %41, i32* %42, align 8
  %43 = getelementptr i8, i8* %3, i32 20
  %44 = bitcast i8* %43 to i32*
  %45 = load i32, i32* %44, align 1
  %46 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 1
  store i32 %45, i32* %46, align 4
  %47 = getelementptr i8, i8* %3, i32 24
  %48 = bitcast i8* %47 to i32*
  %49 = load i32, i32* %48, align 1
  %50 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 2
  store i32 %49, i32* %50, align 8
  %51 = getelementptr i8, i8* %3, i32 28
  %52 = bitcast i8* %51 to i32*
  %53 = load i32, i32* %52, align 1
  %54 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 3
  store i32 %53, i32* %54, align 4
  %55 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 3
  store i64 0, i64* %55, align 8
  %56 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 5
  store i8 0, i8* %56, align 16
  call fastcc void @poly1305_update(%struct.poly1305_state_internal_t* nonnull %5, i8* %1, i64 %2) #6
  call fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* nonnull %5, i8* nonnull %7) #6
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %8) #6
  %57 = call i32 @crypto_verify_16(i8* %0, i8* nonnull %7) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #6
  ret i32 %57
}

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_init(%struct.crypto_onetimeauth_poly1305_state* nocapture %0, i8* nocapture readonly %1) #0 {
  %3 = bitcast i8* %1 to i32*
  %4 = load i32, i32* %3, align 1
  %5 = and i32 %4, 67108863
  %6 = bitcast %struct.crypto_onetimeauth_poly1305_state* %0 to i32*
  store i32 %5, i32* %6, align 8
  %7 = getelementptr i8, i8* %1, i32 3
  %8 = bitcast i8* %7 to i32*
  %9 = load i32, i32* %8, align 1
  %10 = lshr i32 %9, 2
  %11 = and i32 %10, 67108611
  %12 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 4
  %13 = bitcast i8* %12 to i32*
  store i32 %11, i32* %13, align 4
  %14 = getelementptr i8, i8* %1, i32 6
  %15 = bitcast i8* %14 to i32*
  %16 = load i32, i32* %15, align 1
  %17 = lshr i32 %16, 4
  %18 = and i32 %17, 67092735
  %19 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 8
  %20 = bitcast i8* %19 to i32*
  store i32 %18, i32* %20, align 8
  %21 = getelementptr i8, i8* %1, i32 9
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 1
  %24 = lshr i32 %23, 6
  %25 = and i32 %24, 66076671
  %26 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 12
  %27 = bitcast i8* %26 to i32*
  store i32 %25, i32* %27, align 4
  %28 = getelementptr i8, i8* %1, i32 12
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 1
  %31 = lshr i32 %30, 8
  %32 = and i32 %31, 1048575
  %33 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 16
  %34 = bitcast i8* %33 to i32*
  store i32 %32, i32* %34, align 8
  %35 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 20
  %36 = getelementptr i8, i8* %1, i32 16
  %37 = bitcast i8* %36 to i32*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(20) %35, i8 0, i64 20, i1 false) #6
  %38 = load i32, i32* %37, align 1
  %39 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 40
  %40 = bitcast i8* %39 to i32*
  store i32 %38, i32* %40, align 8
  %41 = getelementptr i8, i8* %1, i32 20
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %42, align 1
  %44 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 44
  %45 = bitcast i8* %44 to i32*
  store i32 %43, i32* %45, align 4
  %46 = getelementptr i8, i8* %1, i32 24
  %47 = bitcast i8* %46 to i32*
  %48 = load i32, i32* %47, align 1
  %49 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 48
  %50 = bitcast i8* %49 to i32*
  store i32 %48, i32* %50, align 8
  %51 = getelementptr i8, i8* %1, i32 28
  %52 = bitcast i8* %51 to i32*
  %53 = load i32, i32* %52, align 1
  %54 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 52
  %55 = bitcast i8* %54 to i32*
  store i32 %53, i32* %55, align 4
  %56 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 56
  %57 = bitcast i8* %56 to i64*
  store i64 0, i64* %57, align 8
  %58 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 80
  store i8 0, i8* %58, align 8
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_update(%struct.crypto_onetimeauth_poly1305_state* nocapture %0, i8* nocapture readonly %1, i64 %2) #1 {
  %4 = bitcast %struct.crypto_onetimeauth_poly1305_state* %0 to %struct.poly1305_state_internal_t*
  tail call fastcc void @poly1305_update(%struct.poly1305_state_internal_t* %4, i8* %1, i64 %2)
  ret i32 0
}

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_final(%struct.crypto_onetimeauth_poly1305_state* %0, i8* nocapture %1) #0 {
  %3 = bitcast %struct.crypto_onetimeauth_poly1305_state* %0 to %struct.poly1305_state_internal_t*
  tail call fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* %3, i8* %1)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #2

; Function Attrs: nofree norecurse nounwind
define internal fastcc void @poly1305_update(%struct.poly1305_state_internal_t* nocapture %0, i8* nocapture readonly %1, i64 %2) unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 3
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %33, label %7

7:                                                ; preds = %3
  %8 = sub i64 16, %5
  %9 = icmp ugt i64 %8, %2
  %10 = select i1 %9, i64 %2, i64 %8
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %24, label %12

12:                                               ; preds = %7, %12
  %13 = phi i64 [ %23, %12 ], [ %5, %7 ]
  %14 = phi i64 [ %21, %12 ], [ 0, %7 ]
  %15 = trunc i64 %14 to i32
  %16 = getelementptr i8, i8* %1, i32 %15
  %17 = load i8, i8* %16, align 1
  %18 = add i64 %13, %14
  %19 = trunc i64 %18 to i32
  %20 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 %19
  store i8 %17, i8* %20, align 1
  %21 = add nuw i64 %14, 1
  %22 = icmp ult i64 %21, %10
  %23 = load i64, i64* %4, align 8
  br i1 %22, label %12, label %24

24:                                               ; preds = %12, %7
  %25 = phi i64 [ %5, %7 ], [ %23, %12 ]
  %26 = add i64 %25, %10
  store i64 %26, i64* %4, align 8
  %27 = icmp ult i64 %26, 16
  br i1 %27, label %60, label %28

28:                                               ; preds = %24
  %29 = trunc i64 %10 to i32
  %30 = getelementptr i8, i8* %1, i32 %29
  %31 = sub i64 %2, %10
  %32 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 0
  tail call fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nonnull %0, i8* nonnull %32, i64 16)
  store i64 0, i64* %4, align 8
  br label %33

33:                                               ; preds = %28, %3
  %34 = phi i64 [ %2, %3 ], [ %31, %28 ]
  %35 = phi i8* [ %1, %3 ], [ %30, %28 ]
  %36 = icmp ugt i64 %34, 15
  br i1 %36, label %37, label %42

37:                                               ; preds = %33
  %38 = and i64 %34, -16
  tail call fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nonnull %0, i8* %35, i64 %38)
  %39 = trunc i64 %38 to i32
  %40 = getelementptr i8, i8* %35, i32 %39
  %41 = sub i64 %34, %38
  br label %42

42:                                               ; preds = %37, %33
  %43 = phi i64 [ %41, %37 ], [ %34, %33 ]
  %44 = phi i8* [ %40, %37 ], [ %35, %33 ]
  %45 = icmp eq i64 %43, 0
  br i1 %45, label %60, label %46

46:                                               ; preds = %42, %46
  %47 = phi i64 [ %55, %46 ], [ 0, %42 ]
  %48 = trunc i64 %47 to i32
  %49 = getelementptr i8, i8* %44, i32 %48
  %50 = load i8, i8* %49, align 1
  %51 = load i64, i64* %4, align 8
  %52 = add i64 %51, %47
  %53 = trunc i64 %52 to i32
  %54 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 %53
  store i8 %50, i8* %54, align 1
  %55 = add nuw i64 %47, 1
  %56 = icmp eq i64 %55, %43
  br i1 %56, label %57, label %46

57:                                               ; preds = %46
  %58 = load i64, i64* %4, align 8
  %59 = add i64 %58, %43
  store i64 %59, i64* %4, align 8
  br label %60

60:                                               ; preds = %57, %42, %24
  ret void
}

; Function Attrs: noinline nounwind
define internal fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* %0, i8* nocapture %1) unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 3
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %20, label %6

6:                                                ; preds = %2
  %7 = trunc i64 %4 to i32
  %8 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 %7
  store i8 1, i8* %8, align 1
  %9 = add i64 %4, 1
  %10 = icmp ult i64 %9, 16
  br i1 %10, label %11, label %17

11:                                               ; preds = %6
  %12 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 16
  %13 = bitcast i32* %12 to i8*
  %14 = add i32 %7, 1
  %15 = getelementptr i8, i8* %13, i32 %14
  %16 = sub i32 15, %7
  call void @llvm.memset.p0i8.i32(i8* align 1 %15, i8 0, i32 %16, i1 false)
  br label %17

17:                                               ; preds = %11, %6
  %18 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 5
  store i8 1, i8* %18, align 8
  %19 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 0
  tail call fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nonnull %0, i8* nonnull %19, i64 16)
  br label %20

20:                                               ; preds = %2, %17
  %21 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 0
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 2
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 3
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 4
  %30 = load i32, i32* %29, align 4
  %31 = lshr i32 %24, 26
  %32 = and i32 %24, 67108863
  %33 = add i32 %26, %31
  %34 = lshr i32 %33, 26
  %35 = and i32 %33, 67108863
  %36 = add i32 %34, %28
  %37 = lshr i32 %36, 26
  %38 = and i32 %36, 67108863
  %39 = add i32 %37, %30
  %40 = lshr i32 %39, 26
  %41 = mul nuw nsw i32 %40, 5
  %42 = add i32 %41, %22
  %43 = lshr i32 %42, 26
  %44 = and i32 %42, 67108863
  %45 = add nuw nsw i32 %43, %32
  %46 = add nuw nsw i32 %44, 5
  %47 = lshr i32 %46, 26
  %48 = add nuw nsw i32 %47, %45
  %49 = lshr i32 %48, 26
  %50 = add nuw nsw i32 %49, %35
  %51 = lshr i32 %50, 26
  %52 = add nuw nsw i32 %51, %38
  %53 = lshr i32 %52, 26
  %54 = or i32 %39, -67108864
  %55 = add nsw i32 %54, %53
  %56 = lshr i32 %55, 31
  %57 = add nsw i32 %56, -1
  %58 = and i32 %57, 67108863
  %59 = and i32 %58, %46
  %60 = and i32 %58, %48
  %61 = and i32 %58, %50
  %62 = and i32 %58, %52
  %63 = and i32 %57, %55
  %64 = ashr i32 %55, 31
  %65 = and i32 %64, %44
  %66 = or i32 %65, %59
  %67 = and i32 %64, %45
  %68 = or i32 %67, %60
  %69 = and i32 %64, %35
  %70 = or i32 %69, %61
  %71 = and i32 %64, %38
  %72 = or i32 %71, %62
  %73 = and i32 %64, %39
  %74 = or i32 %63, %73
  %75 = shl i32 %68, 26
  %76 = or i32 %66, %75
  %77 = lshr i32 %68, 6
  %78 = shl i32 %70, 20
  %79 = or i32 %77, %78
  %80 = lshr i32 %70, 12
  %81 = shl i32 %72, 14
  %82 = or i32 %80, %81
  %83 = lshr i32 %72, 18
  %84 = shl i32 %74, 8
  %85 = or i32 %84, %83
  %86 = zext i32 %76 to i64
  %87 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 0
  %88 = load i32, i32* %87, align 8
  %89 = zext i32 %88 to i64
  %90 = add nuw nsw i64 %86, %89
  %91 = trunc i64 %90 to i32
  %92 = zext i32 %79 to i64
  %93 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 1
  %94 = load i32, i32* %93, align 4
  %95 = zext i32 %94 to i64
  %96 = add nuw nsw i64 %92, %95
  %97 = lshr i64 %90, 32
  %98 = add nuw nsw i64 %96, %97
  %99 = trunc i64 %98 to i32
  %100 = zext i32 %82 to i64
  %101 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 2
  %102 = load i32, i32* %101, align 8
  %103 = zext i32 %102 to i64
  %104 = add nuw nsw i64 %100, %103
  %105 = lshr i64 %98, 32
  %106 = add nuw nsw i64 %104, %105
  %107 = trunc i64 %106 to i32
  %108 = zext i32 %85 to i64
  %109 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 3
  %110 = load i32, i32* %109, align 4
  %111 = zext i32 %110 to i64
  %112 = add nuw nsw i64 %108, %111
  %113 = lshr i64 %106, 32
  %114 = add nuw nsw i64 %112, %113
  %115 = trunc i64 %114 to i32
  %116 = bitcast i8* %1 to i32*
  store i32 %91, i32* %116, align 1
  %117 = getelementptr i8, i8* %1, i32 4
  %118 = bitcast i8* %117 to i32*
  store i32 %99, i32* %118, align 1
  %119 = getelementptr i8, i8* %1, i32 8
  %120 = bitcast i8* %119 to i32*
  store i32 %107, i32* %120, align 1
  %121 = getelementptr i8, i8* %1, i32 12
  %122 = bitcast i8* %121 to i32*
  store i32 %115, i32* %122, align 1
  %123 = bitcast %struct.poly1305_state_internal_t* %0 to i8*
  tail call void @sodium_memzero(i8* %123, i32 88) #6
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #2

; Function Attrs: nofree norecurse nounwind
define internal fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nocapture %0, i8* nocapture readonly %1, i64 %2) unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 5
  %5 = load i8, i8* %4, align 8
  %6 = icmp eq i8 %5, 0
  %7 = select i1 %6, i32 16777216, i32 0
  %8 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 2
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 4
  %15 = load i32, i32* %14, align 8
  %16 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 2
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 3
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 4
  %25 = load i32, i32* %24, align 4
  %26 = icmp ugt i64 %2, 15
  br i1 %26, label %27, label %160

27:                                               ; preds = %3
  %28 = mul i32 %15, 5
  %29 = mul i32 %13, 5
  %30 = mul i32 %11, 5
  %31 = mul i32 %9, 5
  %32 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 0
  %33 = load i32, i32* %32, align 8
  %34 = zext i32 %33 to i64
  %35 = zext i32 %28 to i64
  %36 = zext i32 %29 to i64
  %37 = zext i32 %30 to i64
  %38 = zext i32 %31 to i64
  %39 = zext i32 %9 to i64
  %40 = zext i32 %11 to i64
  %41 = zext i32 %13 to i64
  %42 = zext i32 %15 to i64
  br label %43

43:                                               ; preds = %27, %43
  %44 = phi i8* [ %1, %27 ], [ %157, %43 ]
  %45 = phi i64 [ %2, %27 ], [ %158, %43 ]
  %46 = phi i32 [ %17, %27 ], [ %155, %43 ]
  %47 = phi i32 [ %19, %27 ], [ %156, %43 ]
  %48 = phi i32 [ %21, %27 ], [ %140, %43 ]
  %49 = phi i32 [ %23, %27 ], [ %145, %43 ]
  %50 = phi i32 [ %25, %27 ], [ %151, %43 ]
  %51 = bitcast i8* %44 to i32*
  %52 = load i32, i32* %51, align 1
  %53 = and i32 %52, 67108863
  %54 = add i32 %53, %46
  %55 = getelementptr i8, i8* %44, i32 3
  %56 = bitcast i8* %55 to i32*
  %57 = load i32, i32* %56, align 1
  %58 = lshr i32 %57, 2
  %59 = and i32 %58, 67108863
  %60 = add i32 %59, %47
  %61 = getelementptr i8, i8* %44, i32 6
  %62 = bitcast i8* %61 to i32*
  %63 = load i32, i32* %62, align 1
  %64 = lshr i32 %63, 4
  %65 = and i32 %64, 67108863
  %66 = add i32 %65, %48
  %67 = getelementptr i8, i8* %44, i32 9
  %68 = bitcast i8* %67 to i32*
  %69 = load i32, i32* %68, align 1
  %70 = lshr i32 %69, 6
  %71 = add i32 %70, %49
  %72 = getelementptr i8, i8* %44, i32 12
  %73 = bitcast i8* %72 to i32*
  %74 = load i32, i32* %73, align 1
  %75 = lshr i32 %74, 8
  %76 = or i32 %75, %7
  %77 = add i32 %76, %50
  %78 = zext i32 %54 to i64
  %79 = mul nuw i64 %78, %34
  %80 = zext i32 %60 to i64
  %81 = mul nuw i64 %80, %35
  %82 = add i64 %81, %79
  %83 = zext i32 %66 to i64
  %84 = mul nuw i64 %83, %36
  %85 = add i64 %82, %84
  %86 = zext i32 %71 to i64
  %87 = mul nuw i64 %86, %37
  %88 = add i64 %85, %87
  %89 = zext i32 %77 to i64
  %90 = mul nuw i64 %89, %38
  %91 = add i64 %88, %90
  %92 = mul nuw i64 %78, %39
  %93 = mul nuw i64 %80, %34
  %94 = add i64 %93, %92
  %95 = mul nuw i64 %83, %35
  %96 = add i64 %94, %95
  %97 = mul nuw i64 %86, %36
  %98 = add i64 %96, %97
  %99 = mul nuw i64 %89, %37
  %100 = add i64 %98, %99
  %101 = mul nuw i64 %78, %40
  %102 = mul nuw i64 %80, %39
  %103 = add i64 %102, %101
  %104 = mul nuw i64 %83, %34
  %105 = add i64 %103, %104
  %106 = mul nuw i64 %86, %35
  %107 = add i64 %105, %106
  %108 = mul nuw i64 %89, %36
  %109 = add i64 %107, %108
  %110 = mul nuw i64 %78, %41
  %111 = mul nuw i64 %80, %40
  %112 = add i64 %111, %110
  %113 = mul nuw i64 %83, %39
  %114 = add i64 %112, %113
  %115 = mul nuw i64 %86, %34
  %116 = add i64 %114, %115
  %117 = mul nuw i64 %89, %35
  %118 = add i64 %116, %117
  %119 = mul nuw i64 %78, %42
  %120 = mul nuw i64 %80, %41
  %121 = add i64 %120, %119
  %122 = mul nuw i64 %83, %40
  %123 = add i64 %121, %122
  %124 = mul nuw i64 %86, %39
  %125 = add i64 %123, %124
  %126 = mul nuw i64 %89, %34
  %127 = add i64 %125, %126
  %128 = lshr i64 %91, 26
  %129 = trunc i64 %91 to i32
  %130 = and i32 %129, 67108863
  %131 = and i64 %128, 4294967295
  %132 = add i64 %100, %131
  %133 = lshr i64 %132, 26
  %134 = trunc i64 %132 to i32
  %135 = and i32 %134, 67108863
  %136 = and i64 %133, 4294967295
  %137 = add i64 %109, %136
  %138 = lshr i64 %137, 26
  %139 = trunc i64 %137 to i32
  %140 = and i32 %139, 67108863
  %141 = and i64 %138, 4294967295
  %142 = add i64 %118, %141
  %143 = lshr i64 %142, 26
  %144 = trunc i64 %142 to i32
  %145 = and i32 %144, 67108863
  %146 = and i64 %143, 4294967295
  %147 = add i64 %127, %146
  %148 = lshr i64 %147, 26
  %149 = trunc i64 %148 to i32
  %150 = trunc i64 %147 to i32
  %151 = and i32 %150, 67108863
  %152 = mul i32 %149, 5
  %153 = add i32 %152, %130
  %154 = lshr i32 %153, 26
  %155 = and i32 %153, 67108863
  %156 = add nuw nsw i32 %154, %135
  %157 = getelementptr i8, i8* %44, i32 16
  %158 = add i64 %45, -16
  %159 = icmp ugt i64 %158, 15
  br i1 %159, label %43, label %160

160:                                              ; preds = %43, %3
  %161 = phi i32 [ %25, %3 ], [ %151, %43 ]
  %162 = phi i32 [ %23, %3 ], [ %145, %43 ]
  %163 = phi i32 [ %21, %3 ], [ %140, %43 ]
  %164 = phi i32 [ %19, %3 ], [ %156, %43 ]
  %165 = phi i32 [ %17, %3 ], [ %155, %43 ]
  store i32 %165, i32* %16, align 4
  store i32 %164, i32* %18, align 4
  store i32 %163, i32* %20, align 4
  store i32 %162, i32* %22, align 4
  store i32 %161, i32* %24, align 4
  ret void
}

declare void @sodium_memzero(i8* %0, i32 %1) local_unnamed_addr #4

declare i32 @crypto_verify_16(i8* %0, i8* %1) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly %0, i8 %1, i64 %2, i1 immarg %3) #5

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #5

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { noinline nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind willreturn writeonly }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %3, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00000011111111111111111111111111)

; *****
; For LLVM instruction:
;  %5 = and i32 %4, 67108863
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 67108863:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %8, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00001111111111111111110000001100)

; *****
; For LLVM instruction:
;  %10 = lshr i32 %9, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 2:i32
infer %1 (demandedBits=00000011111111111111111100000011)

; *****
; For LLVM instruction:
;  %11 = and i32 %10, 67108611
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 2:i32
%2:i32 = and 67108611:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %15, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00111111111111000000111111110000)

; *****
; For LLVM instruction:
;  %17 = lshr i32 %16, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 4:i32
infer %1 (demandedBits=00000011111111111100000011111111)

; *****
; For LLVM instruction:
;  %18 = and i32 %17, 67092735
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 4:i32
%2:i32 = and 67092735:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %22, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=11111100000011111111111111000000)

; *****
; For LLVM instruction:
;  %24 = lshr i32 %23, 6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 6:i32
infer %1 (demandedBits=00000011111100000011111111111111)

; *****
; For LLVM instruction:
;  %25 = and i32 %24, 66076671
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 6:i32
%2:i32 = and 66076671:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %29, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00001111111111111111111100000000)

; *****
; For LLVM instruction:
;  %31 = lshr i32 %30, 8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 8:i32
infer %1 (demandedBits=00000000000011111111111111111111)

; *****
; For LLVM instruction:
;  %32 = and i32 %31, 1048575
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 8:i32
%2:i32 = and 1048575:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %37, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %42, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %48 = load i32, i32* %47, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %53 = load i32, i32* %52, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for ./poly1305_donna.c.bc:crypto_onetimeauth_poly1305_donna_init()

; entering Souper's runOnFunction() for ./poly1305_donna.c.bc:crypto_onetimeauth_poly1305_donna_update()

; ModuleID = './poly1305_donna.c.bc'
source_filename = "crypto_onetimeauth/poly1305/donna/poly1305_donna.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.crypto_onetimeauth_poly1305_implementation = type { i32 (i8*, i8*, i64, i8*)*, i32 (i8*, i8*, i64, i8*)*, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)*, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*, i64)*, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)* }
%struct.crypto_onetimeauth_poly1305_state = type { [256 x i8] }
%struct.poly1305_state_internal_t = type { [5 x i32], [5 x i32], [4 x i32], i64, [16 x i8], i8 }

@crypto_onetimeauth_poly1305_donna_implementation = hidden local_unnamed_addr global %struct.crypto_onetimeauth_poly1305_implementation { i32 (i8*, i8*, i64, i8*)* @crypto_onetimeauth_poly1305_donna, i32 (i8*, i8*, i64, i8*)* @crypto_onetimeauth_poly1305_donna_verify, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)* @crypto_onetimeauth_poly1305_donna_init, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*, i64)* @crypto_onetimeauth_poly1305_donna_update, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)* @crypto_onetimeauth_poly1305_donna_final }, align 4

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna(i8* nocapture %0, i8* nocapture readonly %1, i64 %2, i8* nocapture readonly %3) #0 {
  %5 = alloca %struct.poly1305_state_internal_t, align 64
  %6 = bitcast %struct.poly1305_state_internal_t* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %6) #6
  %7 = bitcast i8* %3 to i32*
  %8 = load i32, i32* %7, align 1
  %9 = and i32 %8, 67108863
  %10 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 0
  store i32 %9, i32* %10, align 64
  %11 = getelementptr i8, i8* %3, i32 3
  %12 = bitcast i8* %11 to i32*
  %13 = load i32, i32* %12, align 1
  %14 = lshr i32 %13, 2
  %15 = and i32 %14, 67108611
  %16 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 1
  store i32 %15, i32* %16, align 4
  %17 = getelementptr i8, i8* %3, i32 6
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 1
  %20 = lshr i32 %19, 4
  %21 = and i32 %20, 67092735
  %22 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 2
  store i32 %21, i32* %22, align 8
  %23 = getelementptr i8, i8* %3, i32 9
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 1
  %26 = lshr i32 %25, 6
  %27 = and i32 %26, 66076671
  %28 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 3
  store i32 %27, i32* %28, align 4
  %29 = getelementptr i8, i8* %3, i32 12
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 1
  %32 = lshr i32 %31, 8
  %33 = and i32 %32, 1048575
  %34 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 4
  store i32 %33, i32* %34, align 16
  %35 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 1, i32 0
  %36 = getelementptr i8, i8* %3, i32 16
  %37 = bitcast i8* %36 to i32*
  %38 = bitcast i32* %35 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(20) %38, i8 0, i64 20, i1 false) #6
  %39 = load i32, i32* %37, align 1
  %40 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 0
  store i32 %39, i32* %40, align 8
  %41 = getelementptr i8, i8* %3, i32 20
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %42, align 1
  %44 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 1
  store i32 %43, i32* %44, align 4
  %45 = getelementptr i8, i8* %3, i32 24
  %46 = bitcast i8* %45 to i32*
  %47 = load i32, i32* %46, align 1
  %48 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 2
  store i32 %47, i32* %48, align 8
  %49 = getelementptr i8, i8* %3, i32 28
  %50 = bitcast i8* %49 to i32*
  %51 = load i32, i32* %50, align 1
  %52 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 3
  store i32 %51, i32* %52, align 4
  %53 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 3
  store i64 0, i64* %53, align 8
  %54 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 5
  store i8 0, i8* %54, align 16
  call fastcc void @poly1305_update(%struct.poly1305_state_internal_t* nonnull %5, i8* %1, i64 %2)
  call fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* nonnull %5, i8* %0)
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %6) #6
  ret i32 0
}

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_verify(i8* %0, i8* nocapture readonly %1, i64 %2, i8* nocapture readonly %3) #0 {
  %5 = alloca %struct.poly1305_state_internal_t, align 64
  %6 = alloca [16 x i8], align 16
  %7 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #6
  %8 = bitcast %struct.poly1305_state_internal_t* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %8) #6
  %9 = bitcast i8* %3 to i32*
  %10 = load i32, i32* %9, align 1
  %11 = and i32 %10, 67108863
  %12 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 0
  store i32 %11, i32* %12, align 64
  %13 = getelementptr i8, i8* %3, i32 3
  %14 = bitcast i8* %13 to i32*
  %15 = load i32, i32* %14, align 1
  %16 = lshr i32 %15, 2
  %17 = and i32 %16, 67108611
  %18 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 1
  store i32 %17, i32* %18, align 4
  %19 = getelementptr i8, i8* %3, i32 6
  %20 = bitcast i8* %19 to i32*
  %21 = load i32, i32* %20, align 1
  %22 = lshr i32 %21, 4
  %23 = and i32 %22, 67092735
  %24 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 2
  store i32 %23, i32* %24, align 8
  %25 = getelementptr i8, i8* %3, i32 9
  %26 = bitcast i8* %25 to i32*
  %27 = load i32, i32* %26, align 1
  %28 = lshr i32 %27, 6
  %29 = and i32 %28, 66076671
  %30 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 3
  store i32 %29, i32* %30, align 4
  %31 = getelementptr i8, i8* %3, i32 12
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 1
  %34 = lshr i32 %33, 8
  %35 = and i32 %34, 1048575
  %36 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 4
  store i32 %35, i32* %36, align 16
  %37 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 1, i32 0
  %38 = getelementptr i8, i8* %3, i32 16
  %39 = bitcast i8* %38 to i32*
  %40 = bitcast i32* %37 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(20) %40, i8 0, i64 20, i1 false) #6
  %41 = load i32, i32* %39, align 1
  %42 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 0
  store i32 %41, i32* %42, align 8
  %43 = getelementptr i8, i8* %3, i32 20
  %44 = bitcast i8* %43 to i32*
  %45 = load i32, i32* %44, align 1
  %46 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 1
  store i32 %45, i32* %46, align 4
  %47 = getelementptr i8, i8* %3, i32 24
  %48 = bitcast i8* %47 to i32*
  %49 = load i32, i32* %48, align 1
  %50 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 2
  store i32 %49, i32* %50, align 8
  %51 = getelementptr i8, i8* %3, i32 28
  %52 = bitcast i8* %51 to i32*
  %53 = load i32, i32* %52, align 1
  %54 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 3
  store i32 %53, i32* %54, align 4
  %55 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 3
  store i64 0, i64* %55, align 8
  %56 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 5
  store i8 0, i8* %56, align 16
  call fastcc void @poly1305_update(%struct.poly1305_state_internal_t* nonnull %5, i8* %1, i64 %2) #6
  call fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* nonnull %5, i8* nonnull %7) #6
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %8) #6
  %57 = call i32 @crypto_verify_16(i8* %0, i8* nonnull %7) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #6
  ret i32 %57
}

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_init(%struct.crypto_onetimeauth_poly1305_state* nocapture %0, i8* nocapture readonly %1) #0 {
  %3 = bitcast i8* %1 to i32*
  %4 = load i32, i32* %3, align 1
  %5 = and i32 %4, 67108863
  %6 = bitcast %struct.crypto_onetimeauth_poly1305_state* %0 to i32*
  store i32 %5, i32* %6, align 8
  %7 = getelementptr i8, i8* %1, i32 3
  %8 = bitcast i8* %7 to i32*
  %9 = load i32, i32* %8, align 1
  %10 = lshr i32 %9, 2
  %11 = and i32 %10, 67108611
  %12 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 4
  %13 = bitcast i8* %12 to i32*
  store i32 %11, i32* %13, align 4
  %14 = getelementptr i8, i8* %1, i32 6
  %15 = bitcast i8* %14 to i32*
  %16 = load i32, i32* %15, align 1
  %17 = lshr i32 %16, 4
  %18 = and i32 %17, 67092735
  %19 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 8
  %20 = bitcast i8* %19 to i32*
  store i32 %18, i32* %20, align 8
  %21 = getelementptr i8, i8* %1, i32 9
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 1
  %24 = lshr i32 %23, 6
  %25 = and i32 %24, 66076671
  %26 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 12
  %27 = bitcast i8* %26 to i32*
  store i32 %25, i32* %27, align 4
  %28 = getelementptr i8, i8* %1, i32 12
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 1
  %31 = lshr i32 %30, 8
  %32 = and i32 %31, 1048575
  %33 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 16
  %34 = bitcast i8* %33 to i32*
  store i32 %32, i32* %34, align 8
  %35 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 20
  %36 = getelementptr i8, i8* %1, i32 16
  %37 = bitcast i8* %36 to i32*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(20) %35, i8 0, i64 20, i1 false) #6
  %38 = load i32, i32* %37, align 1
  %39 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 40
  %40 = bitcast i8* %39 to i32*
  store i32 %38, i32* %40, align 8
  %41 = getelementptr i8, i8* %1, i32 20
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %42, align 1
  %44 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 44
  %45 = bitcast i8* %44 to i32*
  store i32 %43, i32* %45, align 4
  %46 = getelementptr i8, i8* %1, i32 24
  %47 = bitcast i8* %46 to i32*
  %48 = load i32, i32* %47, align 1
  %49 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 48
  %50 = bitcast i8* %49 to i32*
  store i32 %48, i32* %50, align 8
  %51 = getelementptr i8, i8* %1, i32 28
  %52 = bitcast i8* %51 to i32*
  %53 = load i32, i32* %52, align 1
  %54 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 52
  %55 = bitcast i8* %54 to i32*
  store i32 %53, i32* %55, align 4
  %56 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 56
  %57 = bitcast i8* %56 to i64*
  store i64 0, i64* %57, align 8
  %58 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 80
  store i8 0, i8* %58, align 8
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_update(%struct.crypto_onetimeauth_poly1305_state* nocapture %0, i8* nocapture readonly %1, i64 %2) #1 {
  %4 = bitcast %struct.crypto_onetimeauth_poly1305_state* %0 to %struct.poly1305_state_internal_t*
  tail call fastcc void @poly1305_update(%struct.poly1305_state_internal_t* %4, i8* %1, i64 %2)
  ret i32 0
}

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_final(%struct.crypto_onetimeauth_poly1305_state* %0, i8* nocapture %1) #0 {
  %3 = bitcast %struct.crypto_onetimeauth_poly1305_state* %0 to %struct.poly1305_state_internal_t*
  tail call fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* %3, i8* %1)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #2

; Function Attrs: nofree norecurse nounwind
define internal fastcc void @poly1305_update(%struct.poly1305_state_internal_t* nocapture %0, i8* nocapture readonly %1, i64 %2) unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 3
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %33, label %7

7:                                                ; preds = %3
  %8 = sub i64 16, %5
  %9 = icmp ugt i64 %8, %2
  %10 = select i1 %9, i64 %2, i64 %8
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %24, label %12

12:                                               ; preds = %7, %12
  %13 = phi i64 [ %23, %12 ], [ %5, %7 ]
  %14 = phi i64 [ %21, %12 ], [ 0, %7 ]
  %15 = trunc i64 %14 to i32
  %16 = getelementptr i8, i8* %1, i32 %15
  %17 = load i8, i8* %16, align 1
  %18 = add i64 %13, %14
  %19 = trunc i64 %18 to i32
  %20 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 %19
  store i8 %17, i8* %20, align 1
  %21 = add nuw i64 %14, 1
  %22 = icmp ult i64 %21, %10
  %23 = load i64, i64* %4, align 8
  br i1 %22, label %12, label %24

24:                                               ; preds = %12, %7
  %25 = phi i64 [ %5, %7 ], [ %23, %12 ]
  %26 = add i64 %25, %10
  store i64 %26, i64* %4, align 8
  %27 = icmp ult i64 %26, 16
  br i1 %27, label %60, label %28

28:                                               ; preds = %24
  %29 = trunc i64 %10 to i32
  %30 = getelementptr i8, i8* %1, i32 %29
  %31 = sub i64 %2, %10
  %32 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 0
  tail call fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nonnull %0, i8* nonnull %32, i64 16)
  store i64 0, i64* %4, align 8
  br label %33

33:                                               ; preds = %28, %3
  %34 = phi i64 [ %2, %3 ], [ %31, %28 ]
  %35 = phi i8* [ %1, %3 ], [ %30, %28 ]
  %36 = icmp ugt i64 %34, 15
  br i1 %36, label %37, label %42

37:                                               ; preds = %33
  %38 = and i64 %34, -16
  tail call fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nonnull %0, i8* %35, i64 %38)
  %39 = trunc i64 %38 to i32
  %40 = getelementptr i8, i8* %35, i32 %39
  %41 = sub i64 %34, %38
  br label %42

42:                                               ; preds = %37, %33
  %43 = phi i64 [ %41, %37 ], [ %34, %33 ]
  %44 = phi i8* [ %40, %37 ], [ %35, %33 ]
  %45 = icmp eq i64 %43, 0
  br i1 %45, label %60, label %46

46:                                               ; preds = %42, %46
  %47 = phi i64 [ %55, %46 ], [ 0, %42 ]
  %48 = trunc i64 %47 to i32
  %49 = getelementptr i8, i8* %44, i32 %48
  %50 = load i8, i8* %49, align 1
  %51 = load i64, i64* %4, align 8
  %52 = add i64 %51, %47
  %53 = trunc i64 %52 to i32
  %54 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 %53
  store i8 %50, i8* %54, align 1
  %55 = add nuw i64 %47, 1
  %56 = icmp eq i64 %55, %43
  br i1 %56, label %57, label %46

57:                                               ; preds = %46
  %58 = load i64, i64* %4, align 8
  %59 = add i64 %58, %43
  store i64 %59, i64* %4, align 8
  br label %60

60:                                               ; preds = %57, %42, %24
  ret void
}

; Function Attrs: noinline nounwind
define internal fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* %0, i8* nocapture %1) unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 3
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %20, label %6

6:                                                ; preds = %2
  %7 = trunc i64 %4 to i32
  %8 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 %7
  store i8 1, i8* %8, align 1
  %9 = add i64 %4, 1
  %10 = icmp ult i64 %9, 16
  br i1 %10, label %11, label %17

11:                                               ; preds = %6
  %12 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 16
  %13 = bitcast i32* %12 to i8*
  %14 = add i32 %7, 1
  %15 = getelementptr i8, i8* %13, i32 %14
  %16 = sub i32 15, %7
  call void @llvm.memset.p0i8.i32(i8* align 1 %15, i8 0, i32 %16, i1 false)
  br label %17

17:                                               ; preds = %11, %6
  %18 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 5
  store i8 1, i8* %18, align 8
  %19 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 0
  tail call fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nonnull %0, i8* nonnull %19, i64 16)
  br label %20

20:                                               ; preds = %2, %17
  %21 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 0
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 2
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 3
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 4
  %30 = load i32, i32* %29, align 4
  %31 = lshr i32 %24, 26
  %32 = and i32 %24, 67108863
  %33 = add i32 %26, %31
  %34 = lshr i32 %33, 26
  %35 = and i32 %33, 67108863
  %36 = add i32 %34, %28
  %37 = lshr i32 %36, 26
  %38 = and i32 %36, 67108863
  %39 = add i32 %37, %30
  %40 = lshr i32 %39, 26
  %41 = mul nuw nsw i32 %40, 5
  %42 = add i32 %41, %22
  %43 = lshr i32 %42, 26
  %44 = and i32 %42, 67108863
  %45 = add nuw nsw i32 %43, %32
  %46 = add nuw nsw i32 %44, 5
  %47 = lshr i32 %46, 26
  %48 = add nuw nsw i32 %47, %45
  %49 = lshr i32 %48, 26
  %50 = add nuw nsw i32 %49, %35
  %51 = lshr i32 %50, 26
  %52 = add nuw nsw i32 %51, %38
  %53 = lshr i32 %52, 26
  %54 = or i32 %39, -67108864
  %55 = add nsw i32 %54, %53
  %56 = lshr i32 %55, 31
  %57 = add nsw i32 %56, -1
  %58 = and i32 %57, 67108863
  %59 = and i32 %58, %46
  %60 = and i32 %58, %48
  %61 = and i32 %58, %50
  %62 = and i32 %58, %52
  %63 = and i32 %57, %55
  %64 = ashr i32 %55, 31
  %65 = and i32 %64, %44
  %66 = or i32 %65, %59
  %67 = and i32 %64, %45
  %68 = or i32 %67, %60
  %69 = and i32 %64, %35
  %70 = or i32 %69, %61
  %71 = and i32 %64, %38
  %72 = or i32 %71, %62
  %73 = and i32 %64, %39
  %74 = or i32 %63, %73
  %75 = shl i32 %68, 26
  %76 = or i32 %66, %75
  %77 = lshr i32 %68, 6
  %78 = shl i32 %70, 20
  %79 = or i32 %77, %78
  %80 = lshr i32 %70, 12
  %81 = shl i32 %72, 14
  %82 = or i32 %80, %81
  %83 = lshr i32 %72, 18
  %84 = shl i32 %74, 8
  %85 = or i32 %84, %83
  %86 = zext i32 %76 to i64
  %87 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 0
  %88 = load i32, i32* %87, align 8
  %89 = zext i32 %88 to i64
  %90 = add nuw nsw i64 %86, %89
  %91 = trunc i64 %90 to i32
  %92 = zext i32 %79 to i64
  %93 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 1
  %94 = load i32, i32* %93, align 4
  %95 = zext i32 %94 to i64
  %96 = add nuw nsw i64 %92, %95
  %97 = lshr i64 %90, 32
  %98 = add nuw nsw i64 %96, %97
  %99 = trunc i64 %98 to i32
  %100 = zext i32 %82 to i64
  %101 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 2
  %102 = load i32, i32* %101, align 8
  %103 = zext i32 %102 to i64
  %104 = add nuw nsw i64 %100, %103
  %105 = lshr i64 %98, 32
  %106 = add nuw nsw i64 %104, %105
  %107 = trunc i64 %106 to i32
  %108 = zext i32 %85 to i64
  %109 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 3
  %110 = load i32, i32* %109, align 4
  %111 = zext i32 %110 to i64
  %112 = add nuw nsw i64 %108, %111
  %113 = lshr i64 %106, 32
  %114 = add nuw nsw i64 %112, %113
  %115 = trunc i64 %114 to i32
  %116 = bitcast i8* %1 to i32*
  store i32 %91, i32* %116, align 1
  %117 = getelementptr i8, i8* %1, i32 4
  %118 = bitcast i8* %117 to i32*
  store i32 %99, i32* %118, align 1
  %119 = getelementptr i8, i8* %1, i32 8
  %120 = bitcast i8* %119 to i32*
  store i32 %107, i32* %120, align 1
  %121 = getelementptr i8, i8* %1, i32 12
  %122 = bitcast i8* %121 to i32*
  store i32 %115, i32* %122, align 1
  %123 = bitcast %struct.poly1305_state_internal_t* %0 to i8*
  tail call void @sodium_memzero(i8* %123, i32 88) #6
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #2

; Function Attrs: nofree norecurse nounwind
define internal fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nocapture %0, i8* nocapture readonly %1, i64 %2) unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 5
  %5 = load i8, i8* %4, align 8
  %6 = icmp eq i8 %5, 0
  %7 = select i1 %6, i32 16777216, i32 0
  %8 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 2
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 4
  %15 = load i32, i32* %14, align 8
  %16 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 2
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 3
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 4
  %25 = load i32, i32* %24, align 4
  %26 = icmp ugt i64 %2, 15
  br i1 %26, label %27, label %160

27:                                               ; preds = %3
  %28 = mul i32 %15, 5
  %29 = mul i32 %13, 5
  %30 = mul i32 %11, 5
  %31 = mul i32 %9, 5
  %32 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 0
  %33 = load i32, i32* %32, align 8
  %34 = zext i32 %33 to i64
  %35 = zext i32 %28 to i64
  %36 = zext i32 %29 to i64
  %37 = zext i32 %30 to i64
  %38 = zext i32 %31 to i64
  %39 = zext i32 %9 to i64
  %40 = zext i32 %11 to i64
  %41 = zext i32 %13 to i64
  %42 = zext i32 %15 to i64
  br label %43

43:                                               ; preds = %27, %43
  %44 = phi i8* [ %1, %27 ], [ %157, %43 ]
  %45 = phi i64 [ %2, %27 ], [ %158, %43 ]
  %46 = phi i32 [ %17, %27 ], [ %155, %43 ]
  %47 = phi i32 [ %19, %27 ], [ %156, %43 ]
  %48 = phi i32 [ %21, %27 ], [ %140, %43 ]
  %49 = phi i32 [ %23, %27 ], [ %145, %43 ]
  %50 = phi i32 [ %25, %27 ], [ %151, %43 ]
  %51 = bitcast i8* %44 to i32*
  %52 = load i32, i32* %51, align 1
  %53 = and i32 %52, 67108863
  %54 = add i32 %53, %46
  %55 = getelementptr i8, i8* %44, i32 3
  %56 = bitcast i8* %55 to i32*
  %57 = load i32, i32* %56, align 1
  %58 = lshr i32 %57, 2
  %59 = and i32 %58, 67108863
  %60 = add i32 %59, %47
  %61 = getelementptr i8, i8* %44, i32 6
  %62 = bitcast i8* %61 to i32*
  %63 = load i32, i32* %62, align 1
  %64 = lshr i32 %63, 4
  %65 = and i32 %64, 67108863
  %66 = add i32 %65, %48
  %67 = getelementptr i8, i8* %44, i32 9
  %68 = bitcast i8* %67 to i32*
  %69 = load i32, i32* %68, align 1
  %70 = lshr i32 %69, 6
  %71 = add i32 %70, %49
  %72 = getelementptr i8, i8* %44, i32 12
  %73 = bitcast i8* %72 to i32*
  %74 = load i32, i32* %73, align 1
  %75 = lshr i32 %74, 8
  %76 = or i32 %75, %7
  %77 = add i32 %76, %50
  %78 = zext i32 %54 to i64
  %79 = mul nuw i64 %78, %34
  %80 = zext i32 %60 to i64
  %81 = mul nuw i64 %80, %35
  %82 = add i64 %81, %79
  %83 = zext i32 %66 to i64
  %84 = mul nuw i64 %83, %36
  %85 = add i64 %82, %84
  %86 = zext i32 %71 to i64
  %87 = mul nuw i64 %86, %37
  %88 = add i64 %85, %87
  %89 = zext i32 %77 to i64
  %90 = mul nuw i64 %89, %38
  %91 = add i64 %88, %90
  %92 = mul nuw i64 %78, %39
  %93 = mul nuw i64 %80, %34
  %94 = add i64 %93, %92
  %95 = mul nuw i64 %83, %35
  %96 = add i64 %94, %95
  %97 = mul nuw i64 %86, %36
  %98 = add i64 %96, %97
  %99 = mul nuw i64 %89, %37
  %100 = add i64 %98, %99
  %101 = mul nuw i64 %78, %40
  %102 = mul nuw i64 %80, %39
  %103 = add i64 %102, %101
  %104 = mul nuw i64 %83, %34
  %105 = add i64 %103, %104
  %106 = mul nuw i64 %86, %35
  %107 = add i64 %105, %106
  %108 = mul nuw i64 %89, %36
  %109 = add i64 %107, %108
  %110 = mul nuw i64 %78, %41
  %111 = mul nuw i64 %80, %40
  %112 = add i64 %111, %110
  %113 = mul nuw i64 %83, %39
  %114 = add i64 %112, %113
  %115 = mul nuw i64 %86, %34
  %116 = add i64 %114, %115
  %117 = mul nuw i64 %89, %35
  %118 = add i64 %116, %117
  %119 = mul nuw i64 %78, %42
  %120 = mul nuw i64 %80, %41
  %121 = add i64 %120, %119
  %122 = mul nuw i64 %83, %40
  %123 = add i64 %121, %122
  %124 = mul nuw i64 %86, %39
  %125 = add i64 %123, %124
  %126 = mul nuw i64 %89, %34
  %127 = add i64 %125, %126
  %128 = lshr i64 %91, 26
  %129 = trunc i64 %91 to i32
  %130 = and i32 %129, 67108863
  %131 = and i64 %128, 4294967295
  %132 = add i64 %100, %131
  %133 = lshr i64 %132, 26
  %134 = trunc i64 %132 to i32
  %135 = and i32 %134, 67108863
  %136 = and i64 %133, 4294967295
  %137 = add i64 %109, %136
  %138 = lshr i64 %137, 26
  %139 = trunc i64 %137 to i32
  %140 = and i32 %139, 67108863
  %141 = and i64 %138, 4294967295
  %142 = add i64 %118, %141
  %143 = lshr i64 %142, 26
  %144 = trunc i64 %142 to i32
  %145 = and i32 %144, 67108863
  %146 = and i64 %143, 4294967295
  %147 = add i64 %127, %146
  %148 = lshr i64 %147, 26
  %149 = trunc i64 %148 to i32
  %150 = trunc i64 %147 to i32
  %151 = and i32 %150, 67108863
  %152 = mul i32 %149, 5
  %153 = add i32 %152, %130
  %154 = lshr i32 %153, 26
  %155 = and i32 %153, 67108863
  %156 = add nuw nsw i32 %154, %135
  %157 = getelementptr i8, i8* %44, i32 16
  %158 = add i64 %45, -16
  %159 = icmp ugt i64 %158, 15
  br i1 %159, label %43, label %160

160:                                              ; preds = %43, %3
  %161 = phi i32 [ %25, %3 ], [ %151, %43 ]
  %162 = phi i32 [ %23, %3 ], [ %145, %43 ]
  %163 = phi i32 [ %21, %3 ], [ %140, %43 ]
  %164 = phi i32 [ %19, %3 ], [ %156, %43 ]
  %165 = phi i32 [ %17, %3 ], [ %155, %43 ]
  store i32 %165, i32* %16, align 4
  store i32 %164, i32* %18, align 4
  store i32 %163, i32* %20, align 4
  store i32 %162, i32* %22, align 4
  store i32 %161, i32* %24, align 4
  ret void
}

declare void @sodium_memzero(i8* %0, i32 %1) local_unnamed_addr #4

declare i32 @crypto_verify_16(i8* %0, i8* %1) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly %0, i8 %1, i64 %2, i1 immarg %3) #5

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #5

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { noinline nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind willreturn writeonly }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for ./poly1305_donna.c.bc:crypto_onetimeauth_poly1305_donna_update()

; entering Souper's runOnFunction() for ./poly1305_donna.c.bc:crypto_onetimeauth_poly1305_donna_final()

; ModuleID = './poly1305_donna.c.bc'
source_filename = "crypto_onetimeauth/poly1305/donna/poly1305_donna.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.crypto_onetimeauth_poly1305_implementation = type { i32 (i8*, i8*, i64, i8*)*, i32 (i8*, i8*, i64, i8*)*, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)*, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*, i64)*, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)* }
%struct.crypto_onetimeauth_poly1305_state = type { [256 x i8] }
%struct.poly1305_state_internal_t = type { [5 x i32], [5 x i32], [4 x i32], i64, [16 x i8], i8 }

@crypto_onetimeauth_poly1305_donna_implementation = hidden local_unnamed_addr global %struct.crypto_onetimeauth_poly1305_implementation { i32 (i8*, i8*, i64, i8*)* @crypto_onetimeauth_poly1305_donna, i32 (i8*, i8*, i64, i8*)* @crypto_onetimeauth_poly1305_donna_verify, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)* @crypto_onetimeauth_poly1305_donna_init, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*, i64)* @crypto_onetimeauth_poly1305_donna_update, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)* @crypto_onetimeauth_poly1305_donna_final }, align 4

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna(i8* nocapture %0, i8* nocapture readonly %1, i64 %2, i8* nocapture readonly %3) #0 {
  %5 = alloca %struct.poly1305_state_internal_t, align 64
  %6 = bitcast %struct.poly1305_state_internal_t* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %6) #6
  %7 = bitcast i8* %3 to i32*
  %8 = load i32, i32* %7, align 1
  %9 = and i32 %8, 67108863
  %10 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 0
  store i32 %9, i32* %10, align 64
  %11 = getelementptr i8, i8* %3, i32 3
  %12 = bitcast i8* %11 to i32*
  %13 = load i32, i32* %12, align 1
  %14 = lshr i32 %13, 2
  %15 = and i32 %14, 67108611
  %16 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 1
  store i32 %15, i32* %16, align 4
  %17 = getelementptr i8, i8* %3, i32 6
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 1
  %20 = lshr i32 %19, 4
  %21 = and i32 %20, 67092735
  %22 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 2
  store i32 %21, i32* %22, align 8
  %23 = getelementptr i8, i8* %3, i32 9
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 1
  %26 = lshr i32 %25, 6
  %27 = and i32 %26, 66076671
  %28 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 3
  store i32 %27, i32* %28, align 4
  %29 = getelementptr i8, i8* %3, i32 12
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 1
  %32 = lshr i32 %31, 8
  %33 = and i32 %32, 1048575
  %34 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 4
  store i32 %33, i32* %34, align 16
  %35 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 1, i32 0
  %36 = getelementptr i8, i8* %3, i32 16
  %37 = bitcast i8* %36 to i32*
  %38 = bitcast i32* %35 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(20) %38, i8 0, i64 20, i1 false) #6
  %39 = load i32, i32* %37, align 1
  %40 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 0
  store i32 %39, i32* %40, align 8
  %41 = getelementptr i8, i8* %3, i32 20
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %42, align 1
  %44 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 1
  store i32 %43, i32* %44, align 4
  %45 = getelementptr i8, i8* %3, i32 24
  %46 = bitcast i8* %45 to i32*
  %47 = load i32, i32* %46, align 1
  %48 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 2
  store i32 %47, i32* %48, align 8
  %49 = getelementptr i8, i8* %3, i32 28
  %50 = bitcast i8* %49 to i32*
  %51 = load i32, i32* %50, align 1
  %52 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 3
  store i32 %51, i32* %52, align 4
  %53 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 3
  store i64 0, i64* %53, align 8
  %54 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 5
  store i8 0, i8* %54, align 16
  call fastcc void @poly1305_update(%struct.poly1305_state_internal_t* nonnull %5, i8* %1, i64 %2)
  call fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* nonnull %5, i8* %0)
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %6) #6
  ret i32 0
}

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_verify(i8* %0, i8* nocapture readonly %1, i64 %2, i8* nocapture readonly %3) #0 {
  %5 = alloca %struct.poly1305_state_internal_t, align 64
  %6 = alloca [16 x i8], align 16
  %7 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #6
  %8 = bitcast %struct.poly1305_state_internal_t* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %8) #6
  %9 = bitcast i8* %3 to i32*
  %10 = load i32, i32* %9, align 1
  %11 = and i32 %10, 67108863
  %12 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 0
  store i32 %11, i32* %12, align 64
  %13 = getelementptr i8, i8* %3, i32 3
  %14 = bitcast i8* %13 to i32*
  %15 = load i32, i32* %14, align 1
  %16 = lshr i32 %15, 2
  %17 = and i32 %16, 67108611
  %18 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 1
  store i32 %17, i32* %18, align 4
  %19 = getelementptr i8, i8* %3, i32 6
  %20 = bitcast i8* %19 to i32*
  %21 = load i32, i32* %20, align 1
  %22 = lshr i32 %21, 4
  %23 = and i32 %22, 67092735
  %24 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 2
  store i32 %23, i32* %24, align 8
  %25 = getelementptr i8, i8* %3, i32 9
  %26 = bitcast i8* %25 to i32*
  %27 = load i32, i32* %26, align 1
  %28 = lshr i32 %27, 6
  %29 = and i32 %28, 66076671
  %30 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 3
  store i32 %29, i32* %30, align 4
  %31 = getelementptr i8, i8* %3, i32 12
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 1
  %34 = lshr i32 %33, 8
  %35 = and i32 %34, 1048575
  %36 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 4
  store i32 %35, i32* %36, align 16
  %37 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 1, i32 0
  %38 = getelementptr i8, i8* %3, i32 16
  %39 = bitcast i8* %38 to i32*
  %40 = bitcast i32* %37 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(20) %40, i8 0, i64 20, i1 false) #6
  %41 = load i32, i32* %39, align 1
  %42 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 0
  store i32 %41, i32* %42, align 8
  %43 = getelementptr i8, i8* %3, i32 20
  %44 = bitcast i8* %43 to i32*
  %45 = load i32, i32* %44, align 1
  %46 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 1
  store i32 %45, i32* %46, align 4
  %47 = getelementptr i8, i8* %3, i32 24
  %48 = bitcast i8* %47 to i32*
  %49 = load i32, i32* %48, align 1
  %50 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 2
  store i32 %49, i32* %50, align 8
  %51 = getelementptr i8, i8* %3, i32 28
  %52 = bitcast i8* %51 to i32*
  %53 = load i32, i32* %52, align 1
  %54 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 3
  store i32 %53, i32* %54, align 4
  %55 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 3
  store i64 0, i64* %55, align 8
  %56 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 5
  store i8 0, i8* %56, align 16
  call fastcc void @poly1305_update(%struct.poly1305_state_internal_t* nonnull %5, i8* %1, i64 %2) #6
  call fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* nonnull %5, i8* nonnull %7) #6
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %8) #6
  %57 = call i32 @crypto_verify_16(i8* %0, i8* nonnull %7) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #6
  ret i32 %57
}

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_init(%struct.crypto_onetimeauth_poly1305_state* nocapture %0, i8* nocapture readonly %1) #0 {
  %3 = bitcast i8* %1 to i32*
  %4 = load i32, i32* %3, align 1
  %5 = and i32 %4, 67108863
  %6 = bitcast %struct.crypto_onetimeauth_poly1305_state* %0 to i32*
  store i32 %5, i32* %6, align 8
  %7 = getelementptr i8, i8* %1, i32 3
  %8 = bitcast i8* %7 to i32*
  %9 = load i32, i32* %8, align 1
  %10 = lshr i32 %9, 2
  %11 = and i32 %10, 67108611
  %12 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 4
  %13 = bitcast i8* %12 to i32*
  store i32 %11, i32* %13, align 4
  %14 = getelementptr i8, i8* %1, i32 6
  %15 = bitcast i8* %14 to i32*
  %16 = load i32, i32* %15, align 1
  %17 = lshr i32 %16, 4
  %18 = and i32 %17, 67092735
  %19 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 8
  %20 = bitcast i8* %19 to i32*
  store i32 %18, i32* %20, align 8
  %21 = getelementptr i8, i8* %1, i32 9
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 1
  %24 = lshr i32 %23, 6
  %25 = and i32 %24, 66076671
  %26 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 12
  %27 = bitcast i8* %26 to i32*
  store i32 %25, i32* %27, align 4
  %28 = getelementptr i8, i8* %1, i32 12
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 1
  %31 = lshr i32 %30, 8
  %32 = and i32 %31, 1048575
  %33 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 16
  %34 = bitcast i8* %33 to i32*
  store i32 %32, i32* %34, align 8
  %35 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 20
  %36 = getelementptr i8, i8* %1, i32 16
  %37 = bitcast i8* %36 to i32*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(20) %35, i8 0, i64 20, i1 false) #6
  %38 = load i32, i32* %37, align 1
  %39 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 40
  %40 = bitcast i8* %39 to i32*
  store i32 %38, i32* %40, align 8
  %41 = getelementptr i8, i8* %1, i32 20
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %42, align 1
  %44 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 44
  %45 = bitcast i8* %44 to i32*
  store i32 %43, i32* %45, align 4
  %46 = getelementptr i8, i8* %1, i32 24
  %47 = bitcast i8* %46 to i32*
  %48 = load i32, i32* %47, align 1
  %49 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 48
  %50 = bitcast i8* %49 to i32*
  store i32 %48, i32* %50, align 8
  %51 = getelementptr i8, i8* %1, i32 28
  %52 = bitcast i8* %51 to i32*
  %53 = load i32, i32* %52, align 1
  %54 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 52
  %55 = bitcast i8* %54 to i32*
  store i32 %53, i32* %55, align 4
  %56 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 56
  %57 = bitcast i8* %56 to i64*
  store i64 0, i64* %57, align 8
  %58 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 80
  store i8 0, i8* %58, align 8
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_update(%struct.crypto_onetimeauth_poly1305_state* nocapture %0, i8* nocapture readonly %1, i64 %2) #1 {
  %4 = bitcast %struct.crypto_onetimeauth_poly1305_state* %0 to %struct.poly1305_state_internal_t*
  tail call fastcc void @poly1305_update(%struct.poly1305_state_internal_t* %4, i8* %1, i64 %2)
  ret i32 0
}

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_final(%struct.crypto_onetimeauth_poly1305_state* %0, i8* nocapture %1) #0 {
  %3 = bitcast %struct.crypto_onetimeauth_poly1305_state* %0 to %struct.poly1305_state_internal_t*
  tail call fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* %3, i8* %1)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #2

; Function Attrs: nofree norecurse nounwind
define internal fastcc void @poly1305_update(%struct.poly1305_state_internal_t* nocapture %0, i8* nocapture readonly %1, i64 %2) unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 3
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %33, label %7

7:                                                ; preds = %3
  %8 = sub i64 16, %5
  %9 = icmp ugt i64 %8, %2
  %10 = select i1 %9, i64 %2, i64 %8
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %24, label %12

12:                                               ; preds = %7, %12
  %13 = phi i64 [ %23, %12 ], [ %5, %7 ]
  %14 = phi i64 [ %21, %12 ], [ 0, %7 ]
  %15 = trunc i64 %14 to i32
  %16 = getelementptr i8, i8* %1, i32 %15
  %17 = load i8, i8* %16, align 1
  %18 = add i64 %13, %14
  %19 = trunc i64 %18 to i32
  %20 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 %19
  store i8 %17, i8* %20, align 1
  %21 = add nuw i64 %14, 1
  %22 = icmp ult i64 %21, %10
  %23 = load i64, i64* %4, align 8
  br i1 %22, label %12, label %24

24:                                               ; preds = %12, %7
  %25 = phi i64 [ %5, %7 ], [ %23, %12 ]
  %26 = add i64 %25, %10
  store i64 %26, i64* %4, align 8
  %27 = icmp ult i64 %26, 16
  br i1 %27, label %60, label %28

28:                                               ; preds = %24
  %29 = trunc i64 %10 to i32
  %30 = getelementptr i8, i8* %1, i32 %29
  %31 = sub i64 %2, %10
  %32 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 0
  tail call fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nonnull %0, i8* nonnull %32, i64 16)
  store i64 0, i64* %4, align 8
  br label %33

33:                                               ; preds = %28, %3
  %34 = phi i64 [ %2, %3 ], [ %31, %28 ]
  %35 = phi i8* [ %1, %3 ], [ %30, %28 ]
  %36 = icmp ugt i64 %34, 15
  br i1 %36, label %37, label %42

37:                                               ; preds = %33
  %38 = and i64 %34, -16
  tail call fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nonnull %0, i8* %35, i64 %38)
  %39 = trunc i64 %38 to i32
  %40 = getelementptr i8, i8* %35, i32 %39
  %41 = sub i64 %34, %38
  br label %42

42:                                               ; preds = %37, %33
  %43 = phi i64 [ %41, %37 ], [ %34, %33 ]
  %44 = phi i8* [ %40, %37 ], [ %35, %33 ]
  %45 = icmp eq i64 %43, 0
  br i1 %45, label %60, label %46

46:                                               ; preds = %42, %46
  %47 = phi i64 [ %55, %46 ], [ 0, %42 ]
  %48 = trunc i64 %47 to i32
  %49 = getelementptr i8, i8* %44, i32 %48
  %50 = load i8, i8* %49, align 1
  %51 = load i64, i64* %4, align 8
  %52 = add i64 %51, %47
  %53 = trunc i64 %52 to i32
  %54 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 %53
  store i8 %50, i8* %54, align 1
  %55 = add nuw i64 %47, 1
  %56 = icmp eq i64 %55, %43
  br i1 %56, label %57, label %46

57:                                               ; preds = %46
  %58 = load i64, i64* %4, align 8
  %59 = add i64 %58, %43
  store i64 %59, i64* %4, align 8
  br label %60

60:                                               ; preds = %57, %42, %24
  ret void
}

; Function Attrs: noinline nounwind
define internal fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* %0, i8* nocapture %1) unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 3
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %20, label %6

6:                                                ; preds = %2
  %7 = trunc i64 %4 to i32
  %8 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 %7
  store i8 1, i8* %8, align 1
  %9 = add i64 %4, 1
  %10 = icmp ult i64 %9, 16
  br i1 %10, label %11, label %17

11:                                               ; preds = %6
  %12 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 16
  %13 = bitcast i32* %12 to i8*
  %14 = add i32 %7, 1
  %15 = getelementptr i8, i8* %13, i32 %14
  %16 = sub i32 15, %7
  call void @llvm.memset.p0i8.i32(i8* align 1 %15, i8 0, i32 %16, i1 false)
  br label %17

17:                                               ; preds = %11, %6
  %18 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 5
  store i8 1, i8* %18, align 8
  %19 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 0
  tail call fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nonnull %0, i8* nonnull %19, i64 16)
  br label %20

20:                                               ; preds = %2, %17
  %21 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 0
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 2
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 3
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 4
  %30 = load i32, i32* %29, align 4
  %31 = lshr i32 %24, 26
  %32 = and i32 %24, 67108863
  %33 = add i32 %26, %31
  %34 = lshr i32 %33, 26
  %35 = and i32 %33, 67108863
  %36 = add i32 %34, %28
  %37 = lshr i32 %36, 26
  %38 = and i32 %36, 67108863
  %39 = add i32 %37, %30
  %40 = lshr i32 %39, 26
  %41 = mul nuw nsw i32 %40, 5
  %42 = add i32 %41, %22
  %43 = lshr i32 %42, 26
  %44 = and i32 %42, 67108863
  %45 = add nuw nsw i32 %43, %32
  %46 = add nuw nsw i32 %44, 5
  %47 = lshr i32 %46, 26
  %48 = add nuw nsw i32 %47, %45
  %49 = lshr i32 %48, 26
  %50 = add nuw nsw i32 %49, %35
  %51 = lshr i32 %50, 26
  %52 = add nuw nsw i32 %51, %38
  %53 = lshr i32 %52, 26
  %54 = or i32 %39, -67108864
  %55 = add nsw i32 %54, %53
  %56 = lshr i32 %55, 31
  %57 = add nsw i32 %56, -1
  %58 = and i32 %57, 67108863
  %59 = and i32 %58, %46
  %60 = and i32 %58, %48
  %61 = and i32 %58, %50
  %62 = and i32 %58, %52
  %63 = and i32 %57, %55
  %64 = ashr i32 %55, 31
  %65 = and i32 %64, %44
  %66 = or i32 %65, %59
  %67 = and i32 %64, %45
  %68 = or i32 %67, %60
  %69 = and i32 %64, %35
  %70 = or i32 %69, %61
  %71 = and i32 %64, %38
  %72 = or i32 %71, %62
  %73 = and i32 %64, %39
  %74 = or i32 %63, %73
  %75 = shl i32 %68, 26
  %76 = or i32 %66, %75
  %77 = lshr i32 %68, 6
  %78 = shl i32 %70, 20
  %79 = or i32 %77, %78
  %80 = lshr i32 %70, 12
  %81 = shl i32 %72, 14
  %82 = or i32 %80, %81
  %83 = lshr i32 %72, 18
  %84 = shl i32 %74, 8
  %85 = or i32 %84, %83
  %86 = zext i32 %76 to i64
  %87 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 0
  %88 = load i32, i32* %87, align 8
  %89 = zext i32 %88 to i64
  %90 = add nuw nsw i64 %86, %89
  %91 = trunc i64 %90 to i32
  %92 = zext i32 %79 to i64
  %93 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 1
  %94 = load i32, i32* %93, align 4
  %95 = zext i32 %94 to i64
  %96 = add nuw nsw i64 %92, %95
  %97 = lshr i64 %90, 32
  %98 = add nuw nsw i64 %96, %97
  %99 = trunc i64 %98 to i32
  %100 = zext i32 %82 to i64
  %101 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 2
  %102 = load i32, i32* %101, align 8
  %103 = zext i32 %102 to i64
  %104 = add nuw nsw i64 %100, %103
  %105 = lshr i64 %98, 32
  %106 = add nuw nsw i64 %104, %105
  %107 = trunc i64 %106 to i32
  %108 = zext i32 %85 to i64
  %109 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 3
  %110 = load i32, i32* %109, align 4
  %111 = zext i32 %110 to i64
  %112 = add nuw nsw i64 %108, %111
  %113 = lshr i64 %106, 32
  %114 = add nuw nsw i64 %112, %113
  %115 = trunc i64 %114 to i32
  %116 = bitcast i8* %1 to i32*
  store i32 %91, i32* %116, align 1
  %117 = getelementptr i8, i8* %1, i32 4
  %118 = bitcast i8* %117 to i32*
  store i32 %99, i32* %118, align 1
  %119 = getelementptr i8, i8* %1, i32 8
  %120 = bitcast i8* %119 to i32*
  store i32 %107, i32* %120, align 1
  %121 = getelementptr i8, i8* %1, i32 12
  %122 = bitcast i8* %121 to i32*
  store i32 %115, i32* %122, align 1
  %123 = bitcast %struct.poly1305_state_internal_t* %0 to i8*
  tail call void @sodium_memzero(i8* %123, i32 88) #6
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #2

; Function Attrs: nofree norecurse nounwind
define internal fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nocapture %0, i8* nocapture readonly %1, i64 %2) unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 5
  %5 = load i8, i8* %4, align 8
  %6 = icmp eq i8 %5, 0
  %7 = select i1 %6, i32 16777216, i32 0
  %8 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 2
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 4
  %15 = load i32, i32* %14, align 8
  %16 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 2
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 3
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 4
  %25 = load i32, i32* %24, align 4
  %26 = icmp ugt i64 %2, 15
  br i1 %26, label %27, label %160

27:                                               ; preds = %3
  %28 = mul i32 %15, 5
  %29 = mul i32 %13, 5
  %30 = mul i32 %11, 5
  %31 = mul i32 %9, 5
  %32 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 0
  %33 = load i32, i32* %32, align 8
  %34 = zext i32 %33 to i64
  %35 = zext i32 %28 to i64
  %36 = zext i32 %29 to i64
  %37 = zext i32 %30 to i64
  %38 = zext i32 %31 to i64
  %39 = zext i32 %9 to i64
  %40 = zext i32 %11 to i64
  %41 = zext i32 %13 to i64
  %42 = zext i32 %15 to i64
  br label %43

43:                                               ; preds = %27, %43
  %44 = phi i8* [ %1, %27 ], [ %157, %43 ]
  %45 = phi i64 [ %2, %27 ], [ %158, %43 ]
  %46 = phi i32 [ %17, %27 ], [ %155, %43 ]
  %47 = phi i32 [ %19, %27 ], [ %156, %43 ]
  %48 = phi i32 [ %21, %27 ], [ %140, %43 ]
  %49 = phi i32 [ %23, %27 ], [ %145, %43 ]
  %50 = phi i32 [ %25, %27 ], [ %151, %43 ]
  %51 = bitcast i8* %44 to i32*
  %52 = load i32, i32* %51, align 1
  %53 = and i32 %52, 67108863
  %54 = add i32 %53, %46
  %55 = getelementptr i8, i8* %44, i32 3
  %56 = bitcast i8* %55 to i32*
  %57 = load i32, i32* %56, align 1
  %58 = lshr i32 %57, 2
  %59 = and i32 %58, 67108863
  %60 = add i32 %59, %47
  %61 = getelementptr i8, i8* %44, i32 6
  %62 = bitcast i8* %61 to i32*
  %63 = load i32, i32* %62, align 1
  %64 = lshr i32 %63, 4
  %65 = and i32 %64, 67108863
  %66 = add i32 %65, %48
  %67 = getelementptr i8, i8* %44, i32 9
  %68 = bitcast i8* %67 to i32*
  %69 = load i32, i32* %68, align 1
  %70 = lshr i32 %69, 6
  %71 = add i32 %70, %49
  %72 = getelementptr i8, i8* %44, i32 12
  %73 = bitcast i8* %72 to i32*
  %74 = load i32, i32* %73, align 1
  %75 = lshr i32 %74, 8
  %76 = or i32 %75, %7
  %77 = add i32 %76, %50
  %78 = zext i32 %54 to i64
  %79 = mul nuw i64 %78, %34
  %80 = zext i32 %60 to i64
  %81 = mul nuw i64 %80, %35
  %82 = add i64 %81, %79
  %83 = zext i32 %66 to i64
  %84 = mul nuw i64 %83, %36
  %85 = add i64 %82, %84
  %86 = zext i32 %71 to i64
  %87 = mul nuw i64 %86, %37
  %88 = add i64 %85, %87
  %89 = zext i32 %77 to i64
  %90 = mul nuw i64 %89, %38
  %91 = add i64 %88, %90
  %92 = mul nuw i64 %78, %39
  %93 = mul nuw i64 %80, %34
  %94 = add i64 %93, %92
  %95 = mul nuw i64 %83, %35
  %96 = add i64 %94, %95
  %97 = mul nuw i64 %86, %36
  %98 = add i64 %96, %97
  %99 = mul nuw i64 %89, %37
  %100 = add i64 %98, %99
  %101 = mul nuw i64 %78, %40
  %102 = mul nuw i64 %80, %39
  %103 = add i64 %102, %101
  %104 = mul nuw i64 %83, %34
  %105 = add i64 %103, %104
  %106 = mul nuw i64 %86, %35
  %107 = add i64 %105, %106
  %108 = mul nuw i64 %89, %36
  %109 = add i64 %107, %108
  %110 = mul nuw i64 %78, %41
  %111 = mul nuw i64 %80, %40
  %112 = add i64 %111, %110
  %113 = mul nuw i64 %83, %39
  %114 = add i64 %112, %113
  %115 = mul nuw i64 %86, %34
  %116 = add i64 %114, %115
  %117 = mul nuw i64 %89, %35
  %118 = add i64 %116, %117
  %119 = mul nuw i64 %78, %42
  %120 = mul nuw i64 %80, %41
  %121 = add i64 %120, %119
  %122 = mul nuw i64 %83, %40
  %123 = add i64 %121, %122
  %124 = mul nuw i64 %86, %39
  %125 = add i64 %123, %124
  %126 = mul nuw i64 %89, %34
  %127 = add i64 %125, %126
  %128 = lshr i64 %91, 26
  %129 = trunc i64 %91 to i32
  %130 = and i32 %129, 67108863
  %131 = and i64 %128, 4294967295
  %132 = add i64 %100, %131
  %133 = lshr i64 %132, 26
  %134 = trunc i64 %132 to i32
  %135 = and i32 %134, 67108863
  %136 = and i64 %133, 4294967295
  %137 = add i64 %109, %136
  %138 = lshr i64 %137, 26
  %139 = trunc i64 %137 to i32
  %140 = and i32 %139, 67108863
  %141 = and i64 %138, 4294967295
  %142 = add i64 %118, %141
  %143 = lshr i64 %142, 26
  %144 = trunc i64 %142 to i32
  %145 = and i32 %144, 67108863
  %146 = and i64 %143, 4294967295
  %147 = add i64 %127, %146
  %148 = lshr i64 %147, 26
  %149 = trunc i64 %148 to i32
  %150 = trunc i64 %147 to i32
  %151 = and i32 %150, 67108863
  %152 = mul i32 %149, 5
  %153 = add i32 %152, %130
  %154 = lshr i32 %153, 26
  %155 = and i32 %153, 67108863
  %156 = add nuw nsw i32 %154, %135
  %157 = getelementptr i8, i8* %44, i32 16
  %158 = add i64 %45, -16
  %159 = icmp ugt i64 %158, 15
  br i1 %159, label %43, label %160

160:                                              ; preds = %43, %3
  %161 = phi i32 [ %25, %3 ], [ %151, %43 ]
  %162 = phi i32 [ %23, %3 ], [ %145, %43 ]
  %163 = phi i32 [ %21, %3 ], [ %140, %43 ]
  %164 = phi i32 [ %19, %3 ], [ %156, %43 ]
  %165 = phi i32 [ %17, %3 ], [ %155, %43 ]
  store i32 %165, i32* %16, align 4
  store i32 %164, i32* %18, align 4
  store i32 %163, i32* %20, align 4
  store i32 %162, i32* %22, align 4
  store i32 %161, i32* %24, align 4
  ret void
}

declare void @sodium_memzero(i8* %0, i32 %1) local_unnamed_addr #4

declare i32 @crypto_verify_16(i8* %0, i8* %1) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly %0, i8 %1, i64 %2, i1 immarg %3) #5

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #5

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { noinline nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind willreturn writeonly }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for ./poly1305_donna.c.bc:crypto_onetimeauth_poly1305_donna_final()

; entering Souper's runOnFunction() for ./poly1305_donna.c.bc:poly1305_update()

; ModuleID = './poly1305_donna.c.bc'
source_filename = "crypto_onetimeauth/poly1305/donna/poly1305_donna.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.crypto_onetimeauth_poly1305_implementation = type { i32 (i8*, i8*, i64, i8*)*, i32 (i8*, i8*, i64, i8*)*, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)*, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*, i64)*, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)* }
%struct.crypto_onetimeauth_poly1305_state = type { [256 x i8] }
%struct.poly1305_state_internal_t = type { [5 x i32], [5 x i32], [4 x i32], i64, [16 x i8], i8 }

@crypto_onetimeauth_poly1305_donna_implementation = hidden local_unnamed_addr global %struct.crypto_onetimeauth_poly1305_implementation { i32 (i8*, i8*, i64, i8*)* @crypto_onetimeauth_poly1305_donna, i32 (i8*, i8*, i64, i8*)* @crypto_onetimeauth_poly1305_donna_verify, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)* @crypto_onetimeauth_poly1305_donna_init, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*, i64)* @crypto_onetimeauth_poly1305_donna_update, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)* @crypto_onetimeauth_poly1305_donna_final }, align 4

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna(i8* nocapture %0, i8* nocapture readonly %1, i64 %2, i8* nocapture readonly %3) #0 {
  %5 = alloca %struct.poly1305_state_internal_t, align 64
  %6 = bitcast %struct.poly1305_state_internal_t* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %6) #6
  %7 = bitcast i8* %3 to i32*
  %8 = load i32, i32* %7, align 1
  %9 = and i32 %8, 67108863
  %10 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 0
  store i32 %9, i32* %10, align 64
  %11 = getelementptr i8, i8* %3, i32 3
  %12 = bitcast i8* %11 to i32*
  %13 = load i32, i32* %12, align 1
  %14 = lshr i32 %13, 2
  %15 = and i32 %14, 67108611
  %16 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 1
  store i32 %15, i32* %16, align 4
  %17 = getelementptr i8, i8* %3, i32 6
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 1
  %20 = lshr i32 %19, 4
  %21 = and i32 %20, 67092735
  %22 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 2
  store i32 %21, i32* %22, align 8
  %23 = getelementptr i8, i8* %3, i32 9
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 1
  %26 = lshr i32 %25, 6
  %27 = and i32 %26, 66076671
  %28 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 3
  store i32 %27, i32* %28, align 4
  %29 = getelementptr i8, i8* %3, i32 12
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 1
  %32 = lshr i32 %31, 8
  %33 = and i32 %32, 1048575
  %34 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 4
  store i32 %33, i32* %34, align 16
  %35 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 1, i32 0
  %36 = getelementptr i8, i8* %3, i32 16
  %37 = bitcast i8* %36 to i32*
  %38 = bitcast i32* %35 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(20) %38, i8 0, i64 20, i1 false) #6
  %39 = load i32, i32* %37, align 1
  %40 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 0
  store i32 %39, i32* %40, align 8
  %41 = getelementptr i8, i8* %3, i32 20
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %42, align 1
  %44 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 1
  store i32 %43, i32* %44, align 4
  %45 = getelementptr i8, i8* %3, i32 24
  %46 = bitcast i8* %45 to i32*
  %47 = load i32, i32* %46, align 1
  %48 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 2
  store i32 %47, i32* %48, align 8
  %49 = getelementptr i8, i8* %3, i32 28
  %50 = bitcast i8* %49 to i32*
  %51 = load i32, i32* %50, align 1
  %52 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 3
  store i32 %51, i32* %52, align 4
  %53 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 3
  store i64 0, i64* %53, align 8
  %54 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 5
  store i8 0, i8* %54, align 16
  call fastcc void @poly1305_update(%struct.poly1305_state_internal_t* nonnull %5, i8* %1, i64 %2)
  call fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* nonnull %5, i8* %0)
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %6) #6
  ret i32 0
}

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_verify(i8* %0, i8* nocapture readonly %1, i64 %2, i8* nocapture readonly %3) #0 {
  %5 = alloca %struct.poly1305_state_internal_t, align 64
  %6 = alloca [16 x i8], align 16
  %7 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #6
  %8 = bitcast %struct.poly1305_state_internal_t* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %8) #6
  %9 = bitcast i8* %3 to i32*
  %10 = load i32, i32* %9, align 1
  %11 = and i32 %10, 67108863
  %12 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 0
  store i32 %11, i32* %12, align 64
  %13 = getelementptr i8, i8* %3, i32 3
  %14 = bitcast i8* %13 to i32*
  %15 = load i32, i32* %14, align 1
  %16 = lshr i32 %15, 2
  %17 = and i32 %16, 67108611
  %18 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 1
  store i32 %17, i32* %18, align 4
  %19 = getelementptr i8, i8* %3, i32 6
  %20 = bitcast i8* %19 to i32*
  %21 = load i32, i32* %20, align 1
  %22 = lshr i32 %21, 4
  %23 = and i32 %22, 67092735
  %24 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 2
  store i32 %23, i32* %24, align 8
  %25 = getelementptr i8, i8* %3, i32 9
  %26 = bitcast i8* %25 to i32*
  %27 = load i32, i32* %26, align 1
  %28 = lshr i32 %27, 6
  %29 = and i32 %28, 66076671
  %30 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 3
  store i32 %29, i32* %30, align 4
  %31 = getelementptr i8, i8* %3, i32 12
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 1
  %34 = lshr i32 %33, 8
  %35 = and i32 %34, 1048575
  %36 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 4
  store i32 %35, i32* %36, align 16
  %37 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 1, i32 0
  %38 = getelementptr i8, i8* %3, i32 16
  %39 = bitcast i8* %38 to i32*
  %40 = bitcast i32* %37 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(20) %40, i8 0, i64 20, i1 false) #6
  %41 = load i32, i32* %39, align 1
  %42 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 0
  store i32 %41, i32* %42, align 8
  %43 = getelementptr i8, i8* %3, i32 20
  %44 = bitcast i8* %43 to i32*
  %45 = load i32, i32* %44, align 1
  %46 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 1
  store i32 %45, i32* %46, align 4
  %47 = getelementptr i8, i8* %3, i32 24
  %48 = bitcast i8* %47 to i32*
  %49 = load i32, i32* %48, align 1
  %50 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 2
  store i32 %49, i32* %50, align 8
  %51 = getelementptr i8, i8* %3, i32 28
  %52 = bitcast i8* %51 to i32*
  %53 = load i32, i32* %52, align 1
  %54 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 3
  store i32 %53, i32* %54, align 4
  %55 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 3
  store i64 0, i64* %55, align 8
  %56 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 5
  store i8 0, i8* %56, align 16
  call fastcc void @poly1305_update(%struct.poly1305_state_internal_t* nonnull %5, i8* %1, i64 %2) #6
  call fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* nonnull %5, i8* nonnull %7) #6
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %8) #6
  %57 = call i32 @crypto_verify_16(i8* %0, i8* nonnull %7) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #6
  ret i32 %57
}

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_init(%struct.crypto_onetimeauth_poly1305_state* nocapture %0, i8* nocapture readonly %1) #0 {
  %3 = bitcast i8* %1 to i32*
  %4 = load i32, i32* %3, align 1
  %5 = and i32 %4, 67108863
  %6 = bitcast %struct.crypto_onetimeauth_poly1305_state* %0 to i32*
  store i32 %5, i32* %6, align 8
  %7 = getelementptr i8, i8* %1, i32 3
  %8 = bitcast i8* %7 to i32*
  %9 = load i32, i32* %8, align 1
  %10 = lshr i32 %9, 2
  %11 = and i32 %10, 67108611
  %12 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 4
  %13 = bitcast i8* %12 to i32*
  store i32 %11, i32* %13, align 4
  %14 = getelementptr i8, i8* %1, i32 6
  %15 = bitcast i8* %14 to i32*
  %16 = load i32, i32* %15, align 1
  %17 = lshr i32 %16, 4
  %18 = and i32 %17, 67092735
  %19 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 8
  %20 = bitcast i8* %19 to i32*
  store i32 %18, i32* %20, align 8
  %21 = getelementptr i8, i8* %1, i32 9
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 1
  %24 = lshr i32 %23, 6
  %25 = and i32 %24, 66076671
  %26 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 12
  %27 = bitcast i8* %26 to i32*
  store i32 %25, i32* %27, align 4
  %28 = getelementptr i8, i8* %1, i32 12
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 1
  %31 = lshr i32 %30, 8
  %32 = and i32 %31, 1048575
  %33 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 16
  %34 = bitcast i8* %33 to i32*
  store i32 %32, i32* %34, align 8
  %35 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 20
  %36 = getelementptr i8, i8* %1, i32 16
  %37 = bitcast i8* %36 to i32*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(20) %35, i8 0, i64 20, i1 false) #6
  %38 = load i32, i32* %37, align 1
  %39 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 40
  %40 = bitcast i8* %39 to i32*
  store i32 %38, i32* %40, align 8
  %41 = getelementptr i8, i8* %1, i32 20
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %42, align 1
  %44 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 44
  %45 = bitcast i8* %44 to i32*
  store i32 %43, i32* %45, align 4
  %46 = getelementptr i8, i8* %1, i32 24
  %47 = bitcast i8* %46 to i32*
  %48 = load i32, i32* %47, align 1
  %49 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 48
  %50 = bitcast i8* %49 to i32*
  store i32 %48, i32* %50, align 8
  %51 = getelementptr i8, i8* %1, i32 28
  %52 = bitcast i8* %51 to i32*
  %53 = load i32, i32* %52, align 1
  %54 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 52
  %55 = bitcast i8* %54 to i32*
  store i32 %53, i32* %55, align 4
  %56 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 56
  %57 = bitcast i8* %56 to i64*
  store i64 0, i64* %57, align 8
  %58 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 80
  store i8 0, i8* %58, align 8
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_update(%struct.crypto_onetimeauth_poly1305_state* nocapture %0, i8* nocapture readonly %1, i64 %2) #1 {
  %4 = bitcast %struct.crypto_onetimeauth_poly1305_state* %0 to %struct.poly1305_state_internal_t*
  tail call fastcc void @poly1305_update(%struct.poly1305_state_internal_t* %4, i8* %1, i64 %2)
  ret i32 0
}

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_final(%struct.crypto_onetimeauth_poly1305_state* %0, i8* nocapture %1) #0 {
  %3 = bitcast %struct.crypto_onetimeauth_poly1305_state* %0 to %struct.poly1305_state_internal_t*
  tail call fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* %3, i8* %1)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #2

; Function Attrs: nofree norecurse nounwind
define internal fastcc void @poly1305_update(%struct.poly1305_state_internal_t* nocapture %0, i8* nocapture readonly %1, i64 %2) unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 3
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %33, label %7

7:                                                ; preds = %3
  %8 = sub i64 16, %5
  %9 = icmp ugt i64 %8, %2
  %10 = select i1 %9, i64 %2, i64 %8
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %24, label %12

12:                                               ; preds = %7, %12
  %13 = phi i64 [ %23, %12 ], [ %5, %7 ]
  %14 = phi i64 [ %21, %12 ], [ 0, %7 ]
  %15 = trunc i64 %14 to i32
  %16 = getelementptr i8, i8* %1, i32 %15
  %17 = load i8, i8* %16, align 1
  %18 = add i64 %13, %14
  %19 = trunc i64 %18 to i32
  %20 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 %19
  store i8 %17, i8* %20, align 1
  %21 = add nuw i64 %14, 1
  %22 = icmp ult i64 %21, %10
  %23 = load i64, i64* %4, align 8
  br i1 %22, label %12, label %24

24:                                               ; preds = %12, %7
  %25 = phi i64 [ %5, %7 ], [ %23, %12 ]
  %26 = add i64 %25, %10
  store i64 %26, i64* %4, align 8
  %27 = icmp ult i64 %26, 16
  br i1 %27, label %60, label %28

28:                                               ; preds = %24
  %29 = trunc i64 %10 to i32
  %30 = getelementptr i8, i8* %1, i32 %29
  %31 = sub i64 %2, %10
  %32 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 0
  tail call fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nonnull %0, i8* nonnull %32, i64 16)
  store i64 0, i64* %4, align 8
  br label %33

33:                                               ; preds = %28, %3
  %34 = phi i64 [ %2, %3 ], [ %31, %28 ]
  %35 = phi i8* [ %1, %3 ], [ %30, %28 ]
  %36 = icmp ugt i64 %34, 15
  br i1 %36, label %37, label %42

37:                                               ; preds = %33
  %38 = and i64 %34, -16
  tail call fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nonnull %0, i8* %35, i64 %38)
  %39 = trunc i64 %38 to i32
  %40 = getelementptr i8, i8* %35, i32 %39
  %41 = sub i64 %34, %38
  br label %42

42:                                               ; preds = %37, %33
  %43 = phi i64 [ %41, %37 ], [ %34, %33 ]
  %44 = phi i8* [ %40, %37 ], [ %35, %33 ]
  %45 = icmp eq i64 %43, 0
  br i1 %45, label %60, label %46

46:                                               ; preds = %42, %46
  %47 = phi i64 [ %55, %46 ], [ 0, %42 ]
  %48 = trunc i64 %47 to i32
  %49 = getelementptr i8, i8* %44, i32 %48
  %50 = load i8, i8* %49, align 1
  %51 = load i64, i64* %4, align 8
  %52 = add i64 %51, %47
  %53 = trunc i64 %52 to i32
  %54 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 %53
  store i8 %50, i8* %54, align 1
  %55 = add nuw i64 %47, 1
  %56 = icmp eq i64 %55, %43
  br i1 %56, label %57, label %46

57:                                               ; preds = %46
  %58 = load i64, i64* %4, align 8
  %59 = add i64 %58, %43
  store i64 %59, i64* %4, align 8
  br label %60

60:                                               ; preds = %57, %42, %24
  ret void
}

; Function Attrs: noinline nounwind
define internal fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* %0, i8* nocapture %1) unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 3
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %20, label %6

6:                                                ; preds = %2
  %7 = trunc i64 %4 to i32
  %8 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 %7
  store i8 1, i8* %8, align 1
  %9 = add i64 %4, 1
  %10 = icmp ult i64 %9, 16
  br i1 %10, label %11, label %17

11:                                               ; preds = %6
  %12 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 16
  %13 = bitcast i32* %12 to i8*
  %14 = add i32 %7, 1
  %15 = getelementptr i8, i8* %13, i32 %14
  %16 = sub i32 15, %7
  call void @llvm.memset.p0i8.i32(i8* align 1 %15, i8 0, i32 %16, i1 false)
  br label %17

17:                                               ; preds = %11, %6
  %18 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 5
  store i8 1, i8* %18, align 8
  %19 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 0
  tail call fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nonnull %0, i8* nonnull %19, i64 16)
  br label %20

20:                                               ; preds = %2, %17
  %21 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 0
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 2
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 3
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 4
  %30 = load i32, i32* %29, align 4
  %31 = lshr i32 %24, 26
  %32 = and i32 %24, 67108863
  %33 = add i32 %26, %31
  %34 = lshr i32 %33, 26
  %35 = and i32 %33, 67108863
  %36 = add i32 %34, %28
  %37 = lshr i32 %36, 26
  %38 = and i32 %36, 67108863
  %39 = add i32 %37, %30
  %40 = lshr i32 %39, 26
  %41 = mul nuw nsw i32 %40, 5
  %42 = add i32 %41, %22
  %43 = lshr i32 %42, 26
  %44 = and i32 %42, 67108863
  %45 = add nuw nsw i32 %43, %32
  %46 = add nuw nsw i32 %44, 5
  %47 = lshr i32 %46, 26
  %48 = add nuw nsw i32 %47, %45
  %49 = lshr i32 %48, 26
  %50 = add nuw nsw i32 %49, %35
  %51 = lshr i32 %50, 26
  %52 = add nuw nsw i32 %51, %38
  %53 = lshr i32 %52, 26
  %54 = or i32 %39, -67108864
  %55 = add nsw i32 %54, %53
  %56 = lshr i32 %55, 31
  %57 = add nsw i32 %56, -1
  %58 = and i32 %57, 67108863
  %59 = and i32 %58, %46
  %60 = and i32 %58, %48
  %61 = and i32 %58, %50
  %62 = and i32 %58, %52
  %63 = and i32 %57, %55
  %64 = ashr i32 %55, 31
  %65 = and i32 %64, %44
  %66 = or i32 %65, %59
  %67 = and i32 %64, %45
  %68 = or i32 %67, %60
  %69 = and i32 %64, %35
  %70 = or i32 %69, %61
  %71 = and i32 %64, %38
  %72 = or i32 %71, %62
  %73 = and i32 %64, %39
  %74 = or i32 %63, %73
  %75 = shl i32 %68, 26
  %76 = or i32 %66, %75
  %77 = lshr i32 %68, 6
  %78 = shl i32 %70, 20
  %79 = or i32 %77, %78
  %80 = lshr i32 %70, 12
  %81 = shl i32 %72, 14
  %82 = or i32 %80, %81
  %83 = lshr i32 %72, 18
  %84 = shl i32 %74, 8
  %85 = or i32 %84, %83
  %86 = zext i32 %76 to i64
  %87 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 0
  %88 = load i32, i32* %87, align 8
  %89 = zext i32 %88 to i64
  %90 = add nuw nsw i64 %86, %89
  %91 = trunc i64 %90 to i32
  %92 = zext i32 %79 to i64
  %93 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 1
  %94 = load i32, i32* %93, align 4
  %95 = zext i32 %94 to i64
  %96 = add nuw nsw i64 %92, %95
  %97 = lshr i64 %90, 32
  %98 = add nuw nsw i64 %96, %97
  %99 = trunc i64 %98 to i32
  %100 = zext i32 %82 to i64
  %101 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 2
  %102 = load i32, i32* %101, align 8
  %103 = zext i32 %102 to i64
  %104 = add nuw nsw i64 %100, %103
  %105 = lshr i64 %98, 32
  %106 = add nuw nsw i64 %104, %105
  %107 = trunc i64 %106 to i32
  %108 = zext i32 %85 to i64
  %109 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 3
  %110 = load i32, i32* %109, align 4
  %111 = zext i32 %110 to i64
  %112 = add nuw nsw i64 %108, %111
  %113 = lshr i64 %106, 32
  %114 = add nuw nsw i64 %112, %113
  %115 = trunc i64 %114 to i32
  %116 = bitcast i8* %1 to i32*
  store i32 %91, i32* %116, align 1
  %117 = getelementptr i8, i8* %1, i32 4
  %118 = bitcast i8* %117 to i32*
  store i32 %99, i32* %118, align 1
  %119 = getelementptr i8, i8* %1, i32 8
  %120 = bitcast i8* %119 to i32*
  store i32 %107, i32* %120, align 1
  %121 = getelementptr i8, i8* %1, i32 12
  %122 = bitcast i8* %121 to i32*
  store i32 %115, i32* %122, align 1
  %123 = bitcast %struct.poly1305_state_internal_t* %0 to i8*
  tail call void @sodium_memzero(i8* %123, i32 88) #6
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #2

; Function Attrs: nofree norecurse nounwind
define internal fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nocapture %0, i8* nocapture readonly %1, i64 %2) unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 5
  %5 = load i8, i8* %4, align 8
  %6 = icmp eq i8 %5, 0
  %7 = select i1 %6, i32 16777216, i32 0
  %8 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 2
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 4
  %15 = load i32, i32* %14, align 8
  %16 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 2
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 3
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 4
  %25 = load i32, i32* %24, align 4
  %26 = icmp ugt i64 %2, 15
  br i1 %26, label %27, label %160

27:                                               ; preds = %3
  %28 = mul i32 %15, 5
  %29 = mul i32 %13, 5
  %30 = mul i32 %11, 5
  %31 = mul i32 %9, 5
  %32 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 0
  %33 = load i32, i32* %32, align 8
  %34 = zext i32 %33 to i64
  %35 = zext i32 %28 to i64
  %36 = zext i32 %29 to i64
  %37 = zext i32 %30 to i64
  %38 = zext i32 %31 to i64
  %39 = zext i32 %9 to i64
  %40 = zext i32 %11 to i64
  %41 = zext i32 %13 to i64
  %42 = zext i32 %15 to i64
  br label %43

43:                                               ; preds = %27, %43
  %44 = phi i8* [ %1, %27 ], [ %157, %43 ]
  %45 = phi i64 [ %2, %27 ], [ %158, %43 ]
  %46 = phi i32 [ %17, %27 ], [ %155, %43 ]
  %47 = phi i32 [ %19, %27 ], [ %156, %43 ]
  %48 = phi i32 [ %21, %27 ], [ %140, %43 ]
  %49 = phi i32 [ %23, %27 ], [ %145, %43 ]
  %50 = phi i32 [ %25, %27 ], [ %151, %43 ]
  %51 = bitcast i8* %44 to i32*
  %52 = load i32, i32* %51, align 1
  %53 = and i32 %52, 67108863
  %54 = add i32 %53, %46
  %55 = getelementptr i8, i8* %44, i32 3
  %56 = bitcast i8* %55 to i32*
  %57 = load i32, i32* %56, align 1
  %58 = lshr i32 %57, 2
  %59 = and i32 %58, 67108863
  %60 = add i32 %59, %47
  %61 = getelementptr i8, i8* %44, i32 6
  %62 = bitcast i8* %61 to i32*
  %63 = load i32, i32* %62, align 1
  %64 = lshr i32 %63, 4
  %65 = and i32 %64, 67108863
  %66 = add i32 %65, %48
  %67 = getelementptr i8, i8* %44, i32 9
  %68 = bitcast i8* %67 to i32*
  %69 = load i32, i32* %68, align 1
  %70 = lshr i32 %69, 6
  %71 = add i32 %70, %49
  %72 = getelementptr i8, i8* %44, i32 12
  %73 = bitcast i8* %72 to i32*
  %74 = load i32, i32* %73, align 1
  %75 = lshr i32 %74, 8
  %76 = or i32 %75, %7
  %77 = add i32 %76, %50
  %78 = zext i32 %54 to i64
  %79 = mul nuw i64 %78, %34
  %80 = zext i32 %60 to i64
  %81 = mul nuw i64 %80, %35
  %82 = add i64 %81, %79
  %83 = zext i32 %66 to i64
  %84 = mul nuw i64 %83, %36
  %85 = add i64 %82, %84
  %86 = zext i32 %71 to i64
  %87 = mul nuw i64 %86, %37
  %88 = add i64 %85, %87
  %89 = zext i32 %77 to i64
  %90 = mul nuw i64 %89, %38
  %91 = add i64 %88, %90
  %92 = mul nuw i64 %78, %39
  %93 = mul nuw i64 %80, %34
  %94 = add i64 %93, %92
  %95 = mul nuw i64 %83, %35
  %96 = add i64 %94, %95
  %97 = mul nuw i64 %86, %36
  %98 = add i64 %96, %97
  %99 = mul nuw i64 %89, %37
  %100 = add i64 %98, %99
  %101 = mul nuw i64 %78, %40
  %102 = mul nuw i64 %80, %39
  %103 = add i64 %102, %101
  %104 = mul nuw i64 %83, %34
  %105 = add i64 %103, %104
  %106 = mul nuw i64 %86, %35
  %107 = add i64 %105, %106
  %108 = mul nuw i64 %89, %36
  %109 = add i64 %107, %108
  %110 = mul nuw i64 %78, %41
  %111 = mul nuw i64 %80, %40
  %112 = add i64 %111, %110
  %113 = mul nuw i64 %83, %39
  %114 = add i64 %112, %113
  %115 = mul nuw i64 %86, %34
  %116 = add i64 %114, %115
  %117 = mul nuw i64 %89, %35
  %118 = add i64 %116, %117
  %119 = mul nuw i64 %78, %42
  %120 = mul nuw i64 %80, %41
  %121 = add i64 %120, %119
  %122 = mul nuw i64 %83, %40
  %123 = add i64 %121, %122
  %124 = mul nuw i64 %86, %39
  %125 = add i64 %123, %124
  %126 = mul nuw i64 %89, %34
  %127 = add i64 %125, %126
  %128 = lshr i64 %91, 26
  %129 = trunc i64 %91 to i32
  %130 = and i32 %129, 67108863
  %131 = and i64 %128, 4294967295
  %132 = add i64 %100, %131
  %133 = lshr i64 %132, 26
  %134 = trunc i64 %132 to i32
  %135 = and i32 %134, 67108863
  %136 = and i64 %133, 4294967295
  %137 = add i64 %109, %136
  %138 = lshr i64 %137, 26
  %139 = trunc i64 %137 to i32
  %140 = and i32 %139, 67108863
  %141 = and i64 %138, 4294967295
  %142 = add i64 %118, %141
  %143 = lshr i64 %142, 26
  %144 = trunc i64 %142 to i32
  %145 = and i32 %144, 67108863
  %146 = and i64 %143, 4294967295
  %147 = add i64 %127, %146
  %148 = lshr i64 %147, 26
  %149 = trunc i64 %148 to i32
  %150 = trunc i64 %147 to i32
  %151 = and i32 %150, 67108863
  %152 = mul i32 %149, 5
  %153 = add i32 %152, %130
  %154 = lshr i32 %153, 26
  %155 = and i32 %153, 67108863
  %156 = add nuw nsw i32 %154, %135
  %157 = getelementptr i8, i8* %44, i32 16
  %158 = add i64 %45, -16
  %159 = icmp ugt i64 %158, 15
  br i1 %159, label %43, label %160

160:                                              ; preds = %43, %3
  %161 = phi i32 [ %25, %3 ], [ %151, %43 ]
  %162 = phi i32 [ %23, %3 ], [ %145, %43 ]
  %163 = phi i32 [ %21, %3 ], [ %140, %43 ]
  %164 = phi i32 [ %19, %3 ], [ %156, %43 ]
  %165 = phi i32 [ %17, %3 ], [ %155, %43 ]
  store i32 %165, i32* %16, align 4
  store i32 %164, i32* %18, align 4
  store i32 %163, i32* %20, align 4
  store i32 %162, i32* %22, align 4
  store i32 %161, i32* %24, align 4
  ret void
}

declare void @sodium_memzero(i8* %0, i32 %1) local_unnamed_addr #4

declare i32 @crypto_verify_16(i8* %0, i8* %1) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly %0, i8 %1, i64 %2, i1 immarg %3) #5

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #5

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { noinline nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind willreturn writeonly }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %5 = load i64, i64* %4, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = icmp eq i64 %5, 0
; Looking for a replacement for:
%0:i64 = var
%1:i1 = eq 0:i64, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = sub i64 16, %5
; Looking for a replacement for:
%0:i64 = var
%1:i1 = eq 0:i64, %0
pc %1 0:i1
%2:i64 = sub 16:i64, %0
infer %2

; *****
; For LLVM instruction:
;  %9 = icmp ugt i64 %8, %2
; Looking for a replacement for:
%0:i64 = var
%1:i1 = eq 0:i64, %0
pc %1 0:i1
%2:i64 = var
%3:i64 = sub 16:i64, %0 (hasExternalUses)
%4:i1 = ult %2, %3
infer %4

; *****
; For LLVM instruction:
;  %10 = select i1 %9, i64 %2, i64 %8
; Looking for a replacement for:
%0:i64 = var
%1:i1 = eq 0:i64, %0
pc %1 0:i1
%2:i64 = var
%3:i64 = sub 16:i64, %0
%4:i1 = ult %2, %3
%5:i64 = select %4, %2, %3
infer %5

; *****
; For LLVM instruction:
;  %11 = icmp eq i64 %10, 0
; Looking for a replacement for:
%0:i64 = var
%1:i1 = eq 0:i64, %0
pc %1 0:i1
%2:i64 = var
%3:i64 = sub 16:i64, %0
%4:i1 = ult %2, %3
%5:i64 = select %4, %2, %3 (hasExternalUses)
%6:i1 = eq 0:i64, %5
infer %6

; *****
; For LLVM instruction:
;  %13 = phi i64 [ %23, %12 ], [ %5, %7 ]
; Looking for a replacement for:
%0:i64 = var
infer %0 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %14 = phi i64 [ %21, %12 ], [ 0, %7 ]
; Looking for a replacement for:
%0:i64 = var (range=[0,-1))
infer %0

; *****
; For LLVM instruction:
;  %15 = trunc i64 %14 to i32
; Looking for a replacement for:
%0:i64 = var (range=[0,-1))
%1:i32 = trunc %0
infer %1

; *****
; For LLVM instruction:
;  %17 = load i8, i8* %16, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = add i64 %13, %14
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var (range=[0,-1))
%2:i64 = add %0, %1
infer %2 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %19 = trunc i64 %18 to i32
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var (range=[0,-1))
%2:i64 = add %0, %1
%3:i32 = trunc %2
infer %3

; *****
; For LLVM instruction:
;  %21 = add nuw i64 %14, 1
; Looking for a replacement for:
%0:i64 = var (range=[0,-1))
%1:i64 = addnuw 1:i64, %0
infer %1

; *****
; For LLVM instruction:
;  %22 = icmp ult i64 %21, %10
; Looking for a replacement for:
%0:i64 = var (range=[0,-1))
%1:i64 = addnuw 1:i64, %0 (hasExternalUses)
%2:i64 = var
%3:i64 = var
%4:i64 = sub 16:i64, %3
%5:i1 = ult %2, %4
%6:i64 = select %5, %2, %4 (hasExternalUses)
%7:i1 = ult %1, %6
infer %7

; *****
; For LLVM instruction:
;  %23 = load i64, i64* %4, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = phi i64 [ %5, %7 ], [ %23, %12 ]
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = var
%3:i64 = phi %0, %1, %2
infer %3

; *****
; For LLVM instruction:
;  %26 = add i64 %25, %10
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = var
%3:i64 = phi %0, %1, %2
%4:i64 = var
%5:i64 = sub 16:i64, %1
%6:i1 = ult %4, %5
%7:i64 = select %6, %4, %5 (hasExternalUses)
%8:i64 = add %3, %7
infer %8

; *****
; For LLVM instruction:
;  %27 = icmp ult i64 %26, 16
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = var
%3:i64 = phi %0, %1, %2
%4:i64 = var
%5:i64 = sub 16:i64, %1
%6:i1 = ult %4, %5
%7:i64 = select %6, %4, %5 (hasExternalUses)
%8:i64 = add %3, %7 (hasExternalUses)
%9:i1 = ult %8, 16:i64
infer %9

; *****
; For LLVM instruction:
;  %29 = trunc i64 %10 to i32
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = var
%3:i64 = phi %0, %1, %2
%4:i64 = var
%5:i64 = sub 16:i64, %1
%6:i1 = ult %4, %5
%7:i64 = select %6, %4, %5 (hasExternalUses)
%8:i64 = add %3, %7 (hasExternalUses)
%9:i1 = ult %8, 16:i64
pc %9 0:i1
%10:i32 = trunc %7
infer %10

; *****
; For LLVM instruction:
;  %31 = sub i64 %2, %10
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = var
%3:i64 = phi %0, %1, %2
%4:i64 = var
%5:i64 = sub 16:i64, %1
%6:i1 = ult %4, %5
%7:i64 = select %6, %4, %5 (hasExternalUses)
%8:i64 = add %3, %7 (hasExternalUses)
%9:i1 = ult %8, 16:i64
pc %9 0:i1
%10:i64 = sub %4, %7
infer %10

; *****
; For LLVM instruction:
;  %34 = phi i64 [ %2, %3 ], [ %31, %28 ]
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = var
%3:i64 = sub 16:i64, %2
%4:i1 = ult %1, %3
%5:i64 = select %4, %1, %3 (hasExternalUses)
%6:i64 = sub %1, %5
%7:i64 = phi %0, %1, %6
infer %7

; *****
; For LLVM instruction:
;  %36 = icmp ugt i64 %34, 15
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = var
%3:i64 = sub 16:i64, %2
%4:i1 = ult %1, %3
%5:i64 = select %4, %1, %3
%6:i64 = sub %1, %5
%7:i64 = phi %0, %1, %6
%8:i1 = ult 15:i64, %7
infer %8

; *****
; For LLVM instruction:
;  %38 = and i64 %34, -16
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = var
%3:i64 = sub 16:i64, %2
%4:i1 = ult %1, %3
%5:i64 = select %4, %1, %3
%6:i64 = sub %1, %5
%7:i64 = phi %0, %1, %6
%8:i1 = ult 15:i64, %7
pc %8 1:i1
%9:i64 = and 18446744073709551600:i64, %7
infer %9

; *****
; For LLVM instruction:
;  %39 = trunc i64 %38 to i32
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = var
%3:i64 = sub 16:i64, %2
%4:i1 = ult %1, %3
%5:i64 = select %4, %1, %3
%6:i64 = sub %1, %5
%7:i64 = phi %0, %1, %6
%8:i1 = ult 15:i64, %7
pc %8 1:i1
%9:i64 = and 18446744073709551600:i64, %7 (hasExternalUses)
%10:i32 = trunc %9
infer %10

; *****
; For LLVM instruction:
;  %41 = sub i64 %34, %38
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = var
%3:i64 = sub 16:i64, %2
%4:i1 = ult %1, %3
%5:i64 = select %4, %1, %3
%6:i64 = sub %1, %5
%7:i64 = phi %0, %1, %6
%8:i1 = ult 15:i64, %7
pc %8 1:i1
%9:i64 = and 18446744073709551600:i64, %7 (hasExternalUses)
%10:i64 = sub %7, %9
infer %10

; *****
; For LLVM instruction:
;  %43 = phi i64 [ %41, %37 ], [ %34, %33 ]
; Looking for a replacement for:
%0 = block 2
%1 = block 2
%2:i64 = var
%3:i64 = var
%4:i64 = sub 16:i64, %3
%5:i1 = ult %2, %4
%6:i64 = select %5, %2, %4
%7:i64 = sub %2, %6
%8:i64 = phi %1, %2, %7
%9:i64 = and 18446744073709551600:i64, %8 (hasExternalUses)
%10:i64 = sub %8, %9
%11:i64 = phi %0, %10, %8
infer %11

; *****
; For LLVM instruction:
;  %45 = icmp eq i64 %43, 0
; Looking for a replacement for:
%0 = block 2
%1 = block 2
%2:i64 = var
%3:i64 = var
%4:i64 = sub 16:i64, %3
%5:i1 = ult %2, %4
%6:i64 = select %5, %2, %4
%7:i64 = sub %2, %6
%8:i64 = phi %1, %2, %7
%9:i64 = and 18446744073709551600:i64, %8
%10:i64 = sub %8, %9
%11:i64 = phi %0, %10, %8
%12:i1 = eq 0:i64, %11
infer %12

; *****
; For LLVM instruction:
;  %47 = phi i64 [ %55, %46 ], [ 0, %42 ]
; Looking for a replacement for:
%0:i64 = var (range=[0,-1))
infer %0

; *****
; For LLVM instruction:
;  %48 = trunc i64 %47 to i32
; Looking for a replacement for:
%0:i64 = var (range=[0,-1))
%1:i32 = trunc %0
infer %1

; *****
; For LLVM instruction:
;  %50 = load i8, i8* %49, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %51 = load i64, i64* %4, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %52 = add i64 %51, %47
; Looking for a replacement for:
%0:i64 = var (range=[0,-1))
%1:i64 = var
%2:i64 = add %0, %1
infer %2 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %53 = trunc i64 %52 to i32
; Looking for a replacement for:
%0:i64 = var (range=[0,-1))
%1:i64 = var
%2:i64 = add %0, %1
%3:i32 = trunc %2
infer %3

; *****
; For LLVM instruction:
;  %55 = add nuw i64 %47, 1
; Looking for a replacement for:
%0:i64 = var (range=[0,-1))
%1:i64 = addnuw 1:i64, %0
infer %1

; *****
; For LLVM instruction:
;  %56 = icmp eq i64 %55, %43
; Looking for a replacement for:
%0 = block 2
%1 = block 2
%2:i64 = var
%3:i64 = var
%4:i64 = sub 16:i64, %3
%5:i1 = ult %2, %4
%6:i64 = select %5, %2, %4
%7:i64 = sub %2, %6
%8:i64 = phi %1, %2, %7
%9:i64 = and 18446744073709551600:i64, %8
%10:i64 = sub %8, %9
%11:i64 = phi %0, %10, %8
%12:i64 = var (range=[0,-1))
%13:i64 = addnuw 1:i64, %12 (hasExternalUses)
%14:i1 = eq %11, %13
infer %14

; *****
; For LLVM instruction:
;  %58 = load i64, i64* %4, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %59 = add i64 %58, %43
; Looking for a replacement for:
%0 = block 2
%1 = block 2
%2:i64 = var
%3:i64 = var
%4:i64 = sub 16:i64, %3
%5:i1 = ult %2, %4
%6:i64 = select %5, %2, %4
%7:i64 = sub %2, %6
%8:i64 = phi %1, %2, %7
%9:i64 = and 18446744073709551600:i64, %8
%10:i64 = sub %8, %9
%11:i64 = phi %0, %10, %8
%12:i64 = var (range=[0,-1))
%13:i64 = addnuw 1:i64, %12 (hasExternalUses)
%14:i1 = eq %11, %13
pc %14 1:i1
%15:i64 = var
%16:i64 = add %15, %11
infer %16
got 1 candidates from LHS

-------------------------------------------------
%0:i64 = var
infer %0


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i1 = eq 0:i64, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i1 = eq 0:i64, %0
pc %1 0:i1
%2:i64 = sub 16:i64, %0
infer %2


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 17
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -524272
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i1 = eq 0:i64, %0
pc %1 0:i1
%2:i64 = var
%3:i64 = sub 16:i64, %0 (hasExternalUses)
%4:i1 = ult %2, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i1 = eq 0:i64, %0
pc %1 0:i1
%2:i64 = var
%3:i64 = sub 16:i64, %0
%4:i1 = ult %2, %3
%5:i64 = select %4, %2, %3
infer %5


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1945837581729679516
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i64 = var
%1:i64 = sub 16:i64, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i1 = eq 0:i64, %0
pc %1 0:i1
%2:i64 = var
%3:i64 = sub 16:i64, %0
%4:i1 = ult %2, %3
%5:i64 = select %4, %2, %3 (hasExternalUses)
%6:i1 = eq 0:i64, %5
infer %6


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i64 = var
infer %0 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4294967295
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i64 = var (range=[0,-1))
infer %0


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -524289
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var (range=[0,-1))
%1:i32 = trunc %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var (range=[0,-1))
%2:i64 = add %0, %1
infer %2 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4294967295
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var (range=[0,-1))

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var (range=[0,-1))
%2:i64 = add %0, %1
%3:i32 = trunc %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var (range=[0,-1))
%1:i64 = addnuw 1:i64, %0
infer %1


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4611686018427387905
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var (range=[0,-1))

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i64 = var (range=[0,-1))
%1:i64 = addnuw 1:i64, %0 (hasExternalUses)
%2:i64 = var
%3:i64 = var
%4:i64 = sub 16:i64, %3
%5:i1 = ult %2, %4
%6:i64 = select %5, %2, %4 (hasExternalUses)
%7:i1 = ult %1, %6
infer %7


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = var
%3:i64 = phi %0, %1, %2
infer %3


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = var
%3:i64 = phi %0, %1, %2
%4:i64 = var
%5:i64 = sub 16:i64, %1
%6:i1 = ult %4, %5
%7:i64 = select %6, %4, %5 (hasExternalUses)
%8:i64 = add %3, %7
infer %8


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0 = block 2
%1:i64 = var
%2:i64 = var
%3:i64 = phi %0, %1, %2

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i64 = var
%1:i64 = sub 16:i64, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 6 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = var
%3:i64 = phi %0, %1, %2
%4:i64 = var
%5:i64 = sub 16:i64, %1
%6:i1 = ult %4, %5
%7:i64 = select %6, %4, %5 (hasExternalUses)
%8:i64 = add %3, %7 (hasExternalUses)
%9:i1 = ult %8, 16:i64
infer %9


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = var
%3:i64 = phi %0, %1, %2
%4:i64 = var
%5:i64 = sub 16:i64, %1
%6:i1 = ult %4, %5
%7:i64 = select %6, %4, %5 (hasExternalUses)
%8:i64 = add %3, %7 (hasExternalUses)
%9:i1 = ult %8, 16:i64
pc %9 0:i1
%10:i32 = trunc %7
infer %10


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -520093738
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = var
%3:i64 = phi %0, %1, %2
%4:i64 = var
%5:i64 = sub 16:i64, %1
%6:i1 = ult %4, %5
%7:i64 = select %6, %4, %5 (hasExternalUses)
%8:i64 = add %3, %7 (hasExternalUses)
%9:i1 = ult %8, 16:i64
pc %9 0:i1
%10:i64 = sub %4, %7
infer %10


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4611686018427387904
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 7 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = var
%3:i64 = sub 16:i64, %2
%4:i1 = ult %1, %3
%5:i64 = select %4, %1, %3 (hasExternalUses)
%6:i64 = sub %1, %5
%7:i64 = phi %0, %1, %6
infer %7


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 524288
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i64 = var
%1:i64 = sub 16:i64, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = var
%3:i64 = sub 16:i64, %2
%4:i1 = ult %1, %3
%5:i64 = select %4, %1, %3
%6:i64 = sub %1, %5
%7:i64 = phi %0, %1, %6
%8:i1 = ult 15:i64, %7
infer %8


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var
%1:i64 = var
%2:i64 = sub 16:i64, %1 (hasExternalUses)
%3:i1 = ult %0, %2

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = var
%3:i64 = sub 16:i64, %2
%4:i1 = ult %1, %3
%5:i64 = select %4, %1, %3
%6:i64 = sub %1, %5
%7:i64 = phi %0, %1, %6
%8:i1 = ult 15:i64, %7
pc %8 1:i1
%9:i64 = and 18446744073709551600:i64, %7
infer %9


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -9223372036854775296
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 3930144
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i64 = var
%1:i64 = sub 16:i64, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i64 = var
%1:i64 = var
%2:i64 = sub 16:i64, %1
%3:i1 = ult %0, %2
%4:i64 = select %3, %0, %2

Cost = 5
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i64 = var
%1:i64 = var
%2:i64 = sub 16:i64, %1
%3:i1 = ult %0, %2
%4:i64 = select %3, %0, %2 (hasExternalUses)
%5:i64 = sub %0, %4

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0 = block 2
%1:i64 = var
%2:i64 = var
%3:i64 = sub 16:i64, %2
%4:i1 = ult %1, %3
%5:i64 = select %4, %1, %3 (hasExternalUses)
%6:i64 = sub %1, %5
%7:i64 = phi %0, %1, %6

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 7 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = var
%3:i64 = sub 16:i64, %2
%4:i1 = ult %1, %3
%5:i64 = select %4, %1, %3
%6:i64 = sub %1, %5
%7:i64 = phi %0, %1, %6
%8:i1 = ult 15:i64, %7
pc %8 1:i1
%9:i64 = and 18446744073709551600:i64, %7 (hasExternalUses)
%10:i32 = trunc %9
infer %10


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 512
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483520
2 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = var
%3:i64 = sub 16:i64, %2
%4:i1 = ult %1, %3
%5:i64 = select %4, %1, %3
%6:i64 = sub %1, %5
%7:i64 = phi %0, %1, %6
%8:i1 = ult 15:i64, %7
pc %8 1:i1
%9:i64 = and 18446744073709551600:i64, %7 (hasExternalUses)
%10:i64 = sub %7, %9
infer %10


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 14
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var
%1:i64 = sub 16:i64, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i64 = var
%1:i64 = var
%2:i64 = sub 16:i64, %1
%3:i1 = ult %0, %2
%4:i64 = select %3, %0, %2

Cost = 5
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i64 = var
%1:i64 = var
%2:i64 = sub 16:i64, %1
%3:i1 = ult %0, %2
%4:i64 = select %3, %0, %2 (hasExternalUses)
%5:i64 = sub %0, %4

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0 = block 2
%1:i64 = var
%2:i64 = var
%3:i64 = sub 16:i64, %2
%4:i1 = ult %1, %3
%5:i64 = select %4, %1, %3 (hasExternalUses)
%6:i64 = sub %1, %5
%7:i64 = phi %0, %1, %6

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 6 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1 = block 2
%2:i64 = var
%3:i64 = var
%4:i64 = sub 16:i64, %3
%5:i1 = ult %2, %4
%6:i64 = select %5, %2, %4
%7:i64 = sub %2, %6
%8:i64 = phi %1, %2, %7
%9:i64 = and 18446744073709551600:i64, %8 (hasExternalUses)
%10:i64 = sub %8, %9
%11:i64 = phi %0, %10, %8
infer %11


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 6700598338418376704
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var
%1:i64 = var
%2:i64 = sub 16:i64, %1
%3:i1 = ult %0, %2
%4:i64 = select %3, %0, %2

Cost = 5
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i64 = var
%1:i64 = var
%2:i64 = sub 16:i64, %1
%3:i1 = ult %0, %2
%4:i64 = select %3, %0, %2 (hasExternalUses)
%5:i64 = sub %0, %4

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0 = block 2
%1:i64 = var
%2:i64 = var
%3:i64 = sub 16:i64, %2
%4:i1 = ult %1, %3
%5:i64 = select %4, %1, %3 (hasExternalUses)
%6:i64 = sub %1, %5
%7:i64 = phi %0, %1, %6

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0 = block 2
%1:i64 = var
%2:i64 = var
%3:i64 = sub 16:i64, %2
%4:i1 = ult %1, %3
%5:i64 = select %4, %1, %3
%6:i64 = sub %1, %5
%7:i64 = phi %0, %1, %6
%8:i64 = and 18446744073709551600:i64, %7

Cost = 8
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 6 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1 = block 2
%2:i64 = var
%3:i64 = var
%4:i64 = sub 16:i64, %3
%5:i1 = ult %2, %4
%6:i64 = select %5, %2, %4
%7:i64 = sub %2, %6
%8:i64 = phi %1, %2, %7
%9:i64 = and 18446744073709551600:i64, %8
%10:i64 = sub %8, %9
%11:i64 = phi %0, %10, %8
%12:i1 = eq 0:i64, %11
infer %12


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i64 = var (range=[0,-1))
%1:i64 = var
%2:i64 = add %0, %1
infer %2 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var (range=[0,-1))

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i64 = var (range=[0,-1))
%1:i64 = var
%2:i64 = add %0, %1
%3:i32 = trunc %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1 = block 2
%2:i64 = var
%3:i64 = var
%4:i64 = sub 16:i64, %3
%5:i1 = ult %2, %4
%6:i64 = select %5, %2, %4
%7:i64 = sub %2, %6
%8:i64 = phi %1, %2, %7
%9:i64 = and 18446744073709551600:i64, %8
%10:i64 = sub %8, %9
%11:i64 = phi %0, %10, %8
%12:i64 = var (range=[0,-1))
%13:i64 = addnuw 1:i64, %12 (hasExternalUses)
%14:i1 = eq %11, %13
infer %14


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1 = block 2
%2:i64 = var
%3:i64 = var
%4:i64 = sub 16:i64, %3
%5:i1 = ult %2, %4
%6:i64 = select %5, %2, %4
%7:i64 = sub %2, %6
%8:i64 = phi %1, %2, %7
%9:i64 = and 18446744073709551600:i64, %8
%10:i64 = sub %8, %9
%11:i64 = phi %0, %10, %8
%12:i64 = var (range=[0,-1))
%13:i64 = addnuw 1:i64, %12 (hasExternalUses)
%14:i1 = eq %11, %13
pc %14 1:i1
%15:i64 = var
%16:i64 = add %15, %11
infer %16


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i64 = var
%1:i64 = var
%2:i64 = sub 16:i64, %1
%3:i1 = ult %0, %2
%4:i64 = select %3, %0, %2 (hasExternalUses)
%5:i64 = sub %0, %4

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0 = block 2
%1:i64 = var
%2:i64 = var
%3:i64 = sub 16:i64, %2
%4:i1 = ult %1, %3
%5:i64 = select %4, %1, %3 (hasExternalUses)
%6:i64 = sub %1, %5
%7:i64 = phi %0, %1, %6

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0 = block 2
%1:i64 = var
%2:i64 = var
%3:i64 = sub 16:i64, %2
%4:i1 = ult %1, %3
%5:i64 = select %4, %1, %3
%6:i64 = sub %1, %5
%7:i64 = phi %0, %1, %6
%8:i64 = and 18446744073709551600:i64, %7

Cost = 8
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0 = block 2
%1:i64 = var
%2:i64 = var
%3:i64 = sub 16:i64, %2
%4:i1 = ult %1, %3
%5:i64 = select %4, %1, %3
%6:i64 = sub %1, %5
%7:i64 = phi %0, %1, %6
%8:i64 = and 18446744073709551600:i64, %7 (hasExternalUses)
%9:i64 = sub %7, %8

Cost = 8
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0 = block 2
%1 = block 2
%2:i64 = var
%3:i64 = var
%4:i64 = sub 16:i64, %3
%5:i1 = ult %2, %4
%6:i64 = select %5, %2, %4
%7:i64 = sub %2, %6
%8:i64 = phi %1, %2, %7
%9:i64 = and 18446744073709551600:i64, %8 (hasExternalUses)
%10:i64 = sub %8, %9
%11:i64 = phi %0, %10, %8

Cost = 9
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for ./poly1305_donna.c.bc:poly1305_update()

; entering Souper's runOnFunction() for ./poly1305_donna.c.bc:poly1305_finish()

; ModuleID = './poly1305_donna.c.bc'
source_filename = "crypto_onetimeauth/poly1305/donna/poly1305_donna.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.crypto_onetimeauth_poly1305_implementation = type { i32 (i8*, i8*, i64, i8*)*, i32 (i8*, i8*, i64, i8*)*, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)*, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*, i64)*, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)* }
%struct.crypto_onetimeauth_poly1305_state = type { [256 x i8] }
%struct.poly1305_state_internal_t = type { [5 x i32], [5 x i32], [4 x i32], i64, [16 x i8], i8 }

@crypto_onetimeauth_poly1305_donna_implementation = hidden local_unnamed_addr global %struct.crypto_onetimeauth_poly1305_implementation { i32 (i8*, i8*, i64, i8*)* @crypto_onetimeauth_poly1305_donna, i32 (i8*, i8*, i64, i8*)* @crypto_onetimeauth_poly1305_donna_verify, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)* @crypto_onetimeauth_poly1305_donna_init, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*, i64)* @crypto_onetimeauth_poly1305_donna_update, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)* @crypto_onetimeauth_poly1305_donna_final }, align 4

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna(i8* nocapture %0, i8* nocapture readonly %1, i64 %2, i8* nocapture readonly %3) #0 {
  %5 = alloca %struct.poly1305_state_internal_t, align 64
  %6 = bitcast %struct.poly1305_state_internal_t* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %6) #6
  %7 = bitcast i8* %3 to i32*
  %8 = load i32, i32* %7, align 1
  %9 = and i32 %8, 67108863
  %10 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 0
  store i32 %9, i32* %10, align 64
  %11 = getelementptr i8, i8* %3, i32 3
  %12 = bitcast i8* %11 to i32*
  %13 = load i32, i32* %12, align 1
  %14 = lshr i32 %13, 2
  %15 = and i32 %14, 67108611
  %16 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 1
  store i32 %15, i32* %16, align 4
  %17 = getelementptr i8, i8* %3, i32 6
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 1
  %20 = lshr i32 %19, 4
  %21 = and i32 %20, 67092735
  %22 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 2
  store i32 %21, i32* %22, align 8
  %23 = getelementptr i8, i8* %3, i32 9
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 1
  %26 = lshr i32 %25, 6
  %27 = and i32 %26, 66076671
  %28 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 3
  store i32 %27, i32* %28, align 4
  %29 = getelementptr i8, i8* %3, i32 12
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 1
  %32 = lshr i32 %31, 8
  %33 = and i32 %32, 1048575
  %34 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 4
  store i32 %33, i32* %34, align 16
  %35 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 1, i32 0
  %36 = getelementptr i8, i8* %3, i32 16
  %37 = bitcast i8* %36 to i32*
  %38 = bitcast i32* %35 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(20) %38, i8 0, i64 20, i1 false) #6
  %39 = load i32, i32* %37, align 1
  %40 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 0
  store i32 %39, i32* %40, align 8
  %41 = getelementptr i8, i8* %3, i32 20
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %42, align 1
  %44 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 1
  store i32 %43, i32* %44, align 4
  %45 = getelementptr i8, i8* %3, i32 24
  %46 = bitcast i8* %45 to i32*
  %47 = load i32, i32* %46, align 1
  %48 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 2
  store i32 %47, i32* %48, align 8
  %49 = getelementptr i8, i8* %3, i32 28
  %50 = bitcast i8* %49 to i32*
  %51 = load i32, i32* %50, align 1
  %52 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 3
  store i32 %51, i32* %52, align 4
  %53 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 3
  store i64 0, i64* %53, align 8
  %54 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 5
  store i8 0, i8* %54, align 16
  call fastcc void @poly1305_update(%struct.poly1305_state_internal_t* nonnull %5, i8* %1, i64 %2)
  call fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* nonnull %5, i8* %0)
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %6) #6
  ret i32 0
}

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_verify(i8* %0, i8* nocapture readonly %1, i64 %2, i8* nocapture readonly %3) #0 {
  %5 = alloca %struct.poly1305_state_internal_t, align 64
  %6 = alloca [16 x i8], align 16
  %7 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #6
  %8 = bitcast %struct.poly1305_state_internal_t* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %8) #6
  %9 = bitcast i8* %3 to i32*
  %10 = load i32, i32* %9, align 1
  %11 = and i32 %10, 67108863
  %12 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 0
  store i32 %11, i32* %12, align 64
  %13 = getelementptr i8, i8* %3, i32 3
  %14 = bitcast i8* %13 to i32*
  %15 = load i32, i32* %14, align 1
  %16 = lshr i32 %15, 2
  %17 = and i32 %16, 67108611
  %18 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 1
  store i32 %17, i32* %18, align 4
  %19 = getelementptr i8, i8* %3, i32 6
  %20 = bitcast i8* %19 to i32*
  %21 = load i32, i32* %20, align 1
  %22 = lshr i32 %21, 4
  %23 = and i32 %22, 67092735
  %24 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 2
  store i32 %23, i32* %24, align 8
  %25 = getelementptr i8, i8* %3, i32 9
  %26 = bitcast i8* %25 to i32*
  %27 = load i32, i32* %26, align 1
  %28 = lshr i32 %27, 6
  %29 = and i32 %28, 66076671
  %30 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 3
  store i32 %29, i32* %30, align 4
  %31 = getelementptr i8, i8* %3, i32 12
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 1
  %34 = lshr i32 %33, 8
  %35 = and i32 %34, 1048575
  %36 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 4
  store i32 %35, i32* %36, align 16
  %37 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 1, i32 0
  %38 = getelementptr i8, i8* %3, i32 16
  %39 = bitcast i8* %38 to i32*
  %40 = bitcast i32* %37 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(20) %40, i8 0, i64 20, i1 false) #6
  %41 = load i32, i32* %39, align 1
  %42 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 0
  store i32 %41, i32* %42, align 8
  %43 = getelementptr i8, i8* %3, i32 20
  %44 = bitcast i8* %43 to i32*
  %45 = load i32, i32* %44, align 1
  %46 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 1
  store i32 %45, i32* %46, align 4
  %47 = getelementptr i8, i8* %3, i32 24
  %48 = bitcast i8* %47 to i32*
  %49 = load i32, i32* %48, align 1
  %50 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 2
  store i32 %49, i32* %50, align 8
  %51 = getelementptr i8, i8* %3, i32 28
  %52 = bitcast i8* %51 to i32*
  %53 = load i32, i32* %52, align 1
  %54 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 3
  store i32 %53, i32* %54, align 4
  %55 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 3
  store i64 0, i64* %55, align 8
  %56 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 5
  store i8 0, i8* %56, align 16
  call fastcc void @poly1305_update(%struct.poly1305_state_internal_t* nonnull %5, i8* %1, i64 %2) #6
  call fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* nonnull %5, i8* nonnull %7) #6
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %8) #6
  %57 = call i32 @crypto_verify_16(i8* %0, i8* nonnull %7) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #6
  ret i32 %57
}

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_init(%struct.crypto_onetimeauth_poly1305_state* nocapture %0, i8* nocapture readonly %1) #0 {
  %3 = bitcast i8* %1 to i32*
  %4 = load i32, i32* %3, align 1
  %5 = and i32 %4, 67108863
  %6 = bitcast %struct.crypto_onetimeauth_poly1305_state* %0 to i32*
  store i32 %5, i32* %6, align 8
  %7 = getelementptr i8, i8* %1, i32 3
  %8 = bitcast i8* %7 to i32*
  %9 = load i32, i32* %8, align 1
  %10 = lshr i32 %9, 2
  %11 = and i32 %10, 67108611
  %12 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 4
  %13 = bitcast i8* %12 to i32*
  store i32 %11, i32* %13, align 4
  %14 = getelementptr i8, i8* %1, i32 6
  %15 = bitcast i8* %14 to i32*
  %16 = load i32, i32* %15, align 1
  %17 = lshr i32 %16, 4
  %18 = and i32 %17, 67092735
  %19 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 8
  %20 = bitcast i8* %19 to i32*
  store i32 %18, i32* %20, align 8
  %21 = getelementptr i8, i8* %1, i32 9
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 1
  %24 = lshr i32 %23, 6
  %25 = and i32 %24, 66076671
  %26 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 12
  %27 = bitcast i8* %26 to i32*
  store i32 %25, i32* %27, align 4
  %28 = getelementptr i8, i8* %1, i32 12
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 1
  %31 = lshr i32 %30, 8
  %32 = and i32 %31, 1048575
  %33 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 16
  %34 = bitcast i8* %33 to i32*
  store i32 %32, i32* %34, align 8
  %35 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 20
  %36 = getelementptr i8, i8* %1, i32 16
  %37 = bitcast i8* %36 to i32*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(20) %35, i8 0, i64 20, i1 false) #6
  %38 = load i32, i32* %37, align 1
  %39 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 40
  %40 = bitcast i8* %39 to i32*
  store i32 %38, i32* %40, align 8
  %41 = getelementptr i8, i8* %1, i32 20
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %42, align 1
  %44 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 44
  %45 = bitcast i8* %44 to i32*
  store i32 %43, i32* %45, align 4
  %46 = getelementptr i8, i8* %1, i32 24
  %47 = bitcast i8* %46 to i32*
  %48 = load i32, i32* %47, align 1
  %49 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 48
  %50 = bitcast i8* %49 to i32*
  store i32 %48, i32* %50, align 8
  %51 = getelementptr i8, i8* %1, i32 28
  %52 = bitcast i8* %51 to i32*
  %53 = load i32, i32* %52, align 1
  %54 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 52
  %55 = bitcast i8* %54 to i32*
  store i32 %53, i32* %55, align 4
  %56 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 56
  %57 = bitcast i8* %56 to i64*
  store i64 0, i64* %57, align 8
  %58 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 80
  store i8 0, i8* %58, align 8
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_update(%struct.crypto_onetimeauth_poly1305_state* nocapture %0, i8* nocapture readonly %1, i64 %2) #1 {
  %4 = bitcast %struct.crypto_onetimeauth_poly1305_state* %0 to %struct.poly1305_state_internal_t*
  tail call fastcc void @poly1305_update(%struct.poly1305_state_internal_t* %4, i8* %1, i64 %2)
  ret i32 0
}

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_final(%struct.crypto_onetimeauth_poly1305_state* %0, i8* nocapture %1) #0 {
  %3 = bitcast %struct.crypto_onetimeauth_poly1305_state* %0 to %struct.poly1305_state_internal_t*
  tail call fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* %3, i8* %1)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #2

; Function Attrs: nofree norecurse nounwind
define internal fastcc void @poly1305_update(%struct.poly1305_state_internal_t* nocapture %0, i8* nocapture readonly %1, i64 %2) unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 3
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %33, label %7

7:                                                ; preds = %3
  %8 = sub i64 16, %5
  %9 = icmp ugt i64 %8, %2
  %10 = select i1 %9, i64 %2, i64 %8
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %24, label %12

12:                                               ; preds = %7, %12
  %13 = phi i64 [ %23, %12 ], [ %5, %7 ]
  %14 = phi i64 [ %21, %12 ], [ 0, %7 ]
  %15 = trunc i64 %14 to i32
  %16 = getelementptr i8, i8* %1, i32 %15
  %17 = load i8, i8* %16, align 1
  %18 = add i64 %13, %14
  %19 = trunc i64 %18 to i32
  %20 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 %19
  store i8 %17, i8* %20, align 1
  %21 = add nuw i64 %14, 1
  %22 = icmp ult i64 %21, %10
  %23 = load i64, i64* %4, align 8
  br i1 %22, label %12, label %24

24:                                               ; preds = %12, %7
  %25 = phi i64 [ %5, %7 ], [ %23, %12 ]
  %26 = add i64 %25, %10
  store i64 %26, i64* %4, align 8
  %27 = icmp ult i64 %26, 16
  br i1 %27, label %60, label %28

28:                                               ; preds = %24
  %29 = trunc i64 %10 to i32
  %30 = getelementptr i8, i8* %1, i32 %29
  %31 = sub i64 %2, %10
  %32 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 0
  tail call fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nonnull %0, i8* nonnull %32, i64 16)
  store i64 0, i64* %4, align 8
  br label %33

33:                                               ; preds = %28, %3
  %34 = phi i64 [ %2, %3 ], [ %31, %28 ]
  %35 = phi i8* [ %1, %3 ], [ %30, %28 ]
  %36 = icmp ugt i64 %34, 15
  br i1 %36, label %37, label %42

37:                                               ; preds = %33
  %38 = and i64 %34, -16
  tail call fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nonnull %0, i8* %35, i64 %38)
  %39 = trunc i64 %38 to i32
  %40 = getelementptr i8, i8* %35, i32 %39
  %41 = sub i64 %34, %38
  br label %42

42:                                               ; preds = %37, %33
  %43 = phi i64 [ %41, %37 ], [ %34, %33 ]
  %44 = phi i8* [ %40, %37 ], [ %35, %33 ]
  %45 = icmp eq i64 %43, 0
  br i1 %45, label %60, label %46

46:                                               ; preds = %42, %46
  %47 = phi i64 [ %55, %46 ], [ 0, %42 ]
  %48 = trunc i64 %47 to i32
  %49 = getelementptr i8, i8* %44, i32 %48
  %50 = load i8, i8* %49, align 1
  %51 = load i64, i64* %4, align 8
  %52 = add i64 %51, %47
  %53 = trunc i64 %52 to i32
  %54 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 %53
  store i8 %50, i8* %54, align 1
  %55 = add nuw i64 %47, 1
  %56 = icmp eq i64 %55, %43
  br i1 %56, label %57, label %46

57:                                               ; preds = %46
  %58 = load i64, i64* %4, align 8
  %59 = add i64 %58, %43
  store i64 %59, i64* %4, align 8
  br label %60

60:                                               ; preds = %57, %42, %24
  ret void
}

; Function Attrs: noinline nounwind
define internal fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* %0, i8* nocapture %1) unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 3
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %20, label %6

6:                                                ; preds = %2
  %7 = trunc i64 %4 to i32
  %8 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 %7
  store i8 1, i8* %8, align 1
  %9 = add i64 %4, 1
  %10 = icmp ult i64 %9, 16
  br i1 %10, label %11, label %17

11:                                               ; preds = %6
  %12 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 16
  %13 = bitcast i32* %12 to i8*
  %14 = add i32 %7, 1
  %15 = getelementptr i8, i8* %13, i32 %14
  %16 = sub i32 15, %7
  call void @llvm.memset.p0i8.i32(i8* align 1 %15, i8 0, i32 %16, i1 false)
  br label %17

17:                                               ; preds = %11, %6
  %18 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 5
  store i8 1, i8* %18, align 8
  %19 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 0
  tail call fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nonnull %0, i8* nonnull %19, i64 16)
  br label %20

20:                                               ; preds = %2, %17
  %21 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 0
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 2
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 3
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 4
  %30 = load i32, i32* %29, align 4
  %31 = lshr i32 %24, 26
  %32 = and i32 %24, 67108863
  %33 = add i32 %26, %31
  %34 = lshr i32 %33, 26
  %35 = and i32 %33, 67108863
  %36 = add i32 %34, %28
  %37 = lshr i32 %36, 26
  %38 = and i32 %36, 67108863
  %39 = add i32 %37, %30
  %40 = lshr i32 %39, 26
  %41 = mul nuw nsw i32 %40, 5
  %42 = add i32 %41, %22
  %43 = lshr i32 %42, 26
  %44 = and i32 %42, 67108863
  %45 = add nuw nsw i32 %43, %32
  %46 = add nuw nsw i32 %44, 5
  %47 = lshr i32 %46, 26
  %48 = add nuw nsw i32 %47, %45
  %49 = lshr i32 %48, 26
  %50 = add nuw nsw i32 %49, %35
  %51 = lshr i32 %50, 26
  %52 = add nuw nsw i32 %51, %38
  %53 = lshr i32 %52, 26
  %54 = or i32 %39, -67108864
  %55 = add nsw i32 %54, %53
  %56 = lshr i32 %55, 31
  %57 = add nsw i32 %56, -1
  %58 = and i32 %57, 67108863
  %59 = and i32 %58, %46
  %60 = and i32 %58, %48
  %61 = and i32 %58, %50
  %62 = and i32 %58, %52
  %63 = and i32 %57, %55
  %64 = ashr i32 %55, 31
  %65 = and i32 %64, %44
  %66 = or i32 %65, %59
  %67 = and i32 %64, %45
  %68 = or i32 %67, %60
  %69 = and i32 %64, %35
  %70 = or i32 %69, %61
  %71 = and i32 %64, %38
  %72 = or i32 %71, %62
  %73 = and i32 %64, %39
  %74 = or i32 %63, %73
  %75 = shl i32 %68, 26
  %76 = or i32 %66, %75
  %77 = lshr i32 %68, 6
  %78 = shl i32 %70, 20
  %79 = or i32 %77, %78
  %80 = lshr i32 %70, 12
  %81 = shl i32 %72, 14
  %82 = or i32 %80, %81
  %83 = lshr i32 %72, 18
  %84 = shl i32 %74, 8
  %85 = or i32 %84, %83
  %86 = zext i32 %76 to i64
  %87 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 0
  %88 = load i32, i32* %87, align 8
  %89 = zext i32 %88 to i64
  %90 = add nuw nsw i64 %86, %89
  %91 = trunc i64 %90 to i32
  %92 = zext i32 %79 to i64
  %93 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 1
  %94 = load i32, i32* %93, align 4
  %95 = zext i32 %94 to i64
  %96 = add nuw nsw i64 %92, %95
  %97 = lshr i64 %90, 32
  %98 = add nuw nsw i64 %96, %97
  %99 = trunc i64 %98 to i32
  %100 = zext i32 %82 to i64
  %101 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 2
  %102 = load i32, i32* %101, align 8
  %103 = zext i32 %102 to i64
  %104 = add nuw nsw i64 %100, %103
  %105 = lshr i64 %98, 32
  %106 = add nuw nsw i64 %104, %105
  %107 = trunc i64 %106 to i32
  %108 = zext i32 %85 to i64
  %109 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 3
  %110 = load i32, i32* %109, align 4
  %111 = zext i32 %110 to i64
  %112 = add nuw nsw i64 %108, %111
  %113 = lshr i64 %106, 32
  %114 = add nuw nsw i64 %112, %113
  %115 = trunc i64 %114 to i32
  %116 = bitcast i8* %1 to i32*
  store i32 %91, i32* %116, align 1
  %117 = getelementptr i8, i8* %1, i32 4
  %118 = bitcast i8* %117 to i32*
  store i32 %99, i32* %118, align 1
  %119 = getelementptr i8, i8* %1, i32 8
  %120 = bitcast i8* %119 to i32*
  store i32 %107, i32* %120, align 1
  %121 = getelementptr i8, i8* %1, i32 12
  %122 = bitcast i8* %121 to i32*
  store i32 %115, i32* %122, align 1
  %123 = bitcast %struct.poly1305_state_internal_t* %0 to i8*
  tail call void @sodium_memzero(i8* %123, i32 88) #6
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #2

; Function Attrs: nofree norecurse nounwind
define internal fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nocapture %0, i8* nocapture readonly %1, i64 %2) unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 5
  %5 = load i8, i8* %4, align 8
  %6 = icmp eq i8 %5, 0
  %7 = select i1 %6, i32 16777216, i32 0
  %8 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 2
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 4
  %15 = load i32, i32* %14, align 8
  %16 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 2
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 3
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 4
  %25 = load i32, i32* %24, align 4
  %26 = icmp ugt i64 %2, 15
  br i1 %26, label %27, label %160

27:                                               ; preds = %3
  %28 = mul i32 %15, 5
  %29 = mul i32 %13, 5
  %30 = mul i32 %11, 5
  %31 = mul i32 %9, 5
  %32 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 0
  %33 = load i32, i32* %32, align 8
  %34 = zext i32 %33 to i64
  %35 = zext i32 %28 to i64
  %36 = zext i32 %29 to i64
  %37 = zext i32 %30 to i64
  %38 = zext i32 %31 to i64
  %39 = zext i32 %9 to i64
  %40 = zext i32 %11 to i64
  %41 = zext i32 %13 to i64
  %42 = zext i32 %15 to i64
  br label %43

43:                                               ; preds = %27, %43
  %44 = phi i8* [ %1, %27 ], [ %157, %43 ]
  %45 = phi i64 [ %2, %27 ], [ %158, %43 ]
  %46 = phi i32 [ %17, %27 ], [ %155, %43 ]
  %47 = phi i32 [ %19, %27 ], [ %156, %43 ]
  %48 = phi i32 [ %21, %27 ], [ %140, %43 ]
  %49 = phi i32 [ %23, %27 ], [ %145, %43 ]
  %50 = phi i32 [ %25, %27 ], [ %151, %43 ]
  %51 = bitcast i8* %44 to i32*
  %52 = load i32, i32* %51, align 1
  %53 = and i32 %52, 67108863
  %54 = add i32 %53, %46
  %55 = getelementptr i8, i8* %44, i32 3
  %56 = bitcast i8* %55 to i32*
  %57 = load i32, i32* %56, align 1
  %58 = lshr i32 %57, 2
  %59 = and i32 %58, 67108863
  %60 = add i32 %59, %47
  %61 = getelementptr i8, i8* %44, i32 6
  %62 = bitcast i8* %61 to i32*
  %63 = load i32, i32* %62, align 1
  %64 = lshr i32 %63, 4
  %65 = and i32 %64, 67108863
  %66 = add i32 %65, %48
  %67 = getelementptr i8, i8* %44, i32 9
  %68 = bitcast i8* %67 to i32*
  %69 = load i32, i32* %68, align 1
  %70 = lshr i32 %69, 6
  %71 = add i32 %70, %49
  %72 = getelementptr i8, i8* %44, i32 12
  %73 = bitcast i8* %72 to i32*
  %74 = load i32, i32* %73, align 1
  %75 = lshr i32 %74, 8
  %76 = or i32 %75, %7
  %77 = add i32 %76, %50
  %78 = zext i32 %54 to i64
  %79 = mul nuw i64 %78, %34
  %80 = zext i32 %60 to i64
  %81 = mul nuw i64 %80, %35
  %82 = add i64 %81, %79
  %83 = zext i32 %66 to i64
  %84 = mul nuw i64 %83, %36
  %85 = add i64 %82, %84
  %86 = zext i32 %71 to i64
  %87 = mul nuw i64 %86, %37
  %88 = add i64 %85, %87
  %89 = zext i32 %77 to i64
  %90 = mul nuw i64 %89, %38
  %91 = add i64 %88, %90
  %92 = mul nuw i64 %78, %39
  %93 = mul nuw i64 %80, %34
  %94 = add i64 %93, %92
  %95 = mul nuw i64 %83, %35
  %96 = add i64 %94, %95
  %97 = mul nuw i64 %86, %36
  %98 = add i64 %96, %97
  %99 = mul nuw i64 %89, %37
  %100 = add i64 %98, %99
  %101 = mul nuw i64 %78, %40
  %102 = mul nuw i64 %80, %39
  %103 = add i64 %102, %101
  %104 = mul nuw i64 %83, %34
  %105 = add i64 %103, %104
  %106 = mul nuw i64 %86, %35
  %107 = add i64 %105, %106
  %108 = mul nuw i64 %89, %36
  %109 = add i64 %107, %108
  %110 = mul nuw i64 %78, %41
  %111 = mul nuw i64 %80, %40
  %112 = add i64 %111, %110
  %113 = mul nuw i64 %83, %39
  %114 = add i64 %112, %113
  %115 = mul nuw i64 %86, %34
  %116 = add i64 %114, %115
  %117 = mul nuw i64 %89, %35
  %118 = add i64 %116, %117
  %119 = mul nuw i64 %78, %42
  %120 = mul nuw i64 %80, %41
  %121 = add i64 %120, %119
  %122 = mul nuw i64 %83, %40
  %123 = add i64 %121, %122
  %124 = mul nuw i64 %86, %39
  %125 = add i64 %123, %124
  %126 = mul nuw i64 %89, %34
  %127 = add i64 %125, %126
  %128 = lshr i64 %91, 26
  %129 = trunc i64 %91 to i32
  %130 = and i32 %129, 67108863
  %131 = and i64 %128, 4294967295
  %132 = add i64 %100, %131
  %133 = lshr i64 %132, 26
  %134 = trunc i64 %132 to i32
  %135 = and i32 %134, 67108863
  %136 = and i64 %133, 4294967295
  %137 = add i64 %109, %136
  %138 = lshr i64 %137, 26
  %139 = trunc i64 %137 to i32
  %140 = and i32 %139, 67108863
  %141 = and i64 %138, 4294967295
  %142 = add i64 %118, %141
  %143 = lshr i64 %142, 26
  %144 = trunc i64 %142 to i32
  %145 = and i32 %144, 67108863
  %146 = and i64 %143, 4294967295
  %147 = add i64 %127, %146
  %148 = lshr i64 %147, 26
  %149 = trunc i64 %148 to i32
  %150 = trunc i64 %147 to i32
  %151 = and i32 %150, 67108863
  %152 = mul i32 %149, 5
  %153 = add i32 %152, %130
  %154 = lshr i32 %153, 26
  %155 = and i32 %153, 67108863
  %156 = add nuw nsw i32 %154, %135
  %157 = getelementptr i8, i8* %44, i32 16
  %158 = add i64 %45, -16
  %159 = icmp ugt i64 %158, 15
  br i1 %159, label %43, label %160

160:                                              ; preds = %43, %3
  %161 = phi i32 [ %25, %3 ], [ %151, %43 ]
  %162 = phi i32 [ %23, %3 ], [ %145, %43 ]
  %163 = phi i32 [ %21, %3 ], [ %140, %43 ]
  %164 = phi i32 [ %19, %3 ], [ %156, %43 ]
  %165 = phi i32 [ %17, %3 ], [ %155, %43 ]
  store i32 %165, i32* %16, align 4
  store i32 %164, i32* %18, align 4
  store i32 %163, i32* %20, align 4
  store i32 %162, i32* %22, align 4
  store i32 %161, i32* %24, align 4
  ret void
}

declare void @sodium_memzero(i8* %0, i32 %1) local_unnamed_addr #4

declare i32 @crypto_verify_16(i8* %0, i8* %1) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly %0, i8 %1, i64 %2, i1 immarg %3) #5

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #5

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { noinline nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind willreturn writeonly }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %4 = load i64, i64* %3, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = icmp eq i64 %4, 0
; Looking for a replacement for:
%0:i64 = var
%1:i1 = eq 0:i64, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = trunc i64 %4 to i32
; Looking for a replacement for:
%0:i64 = var
%1:i1 = eq 0:i64, %0
pc %1 0:i1
%2:i32 = trunc %0
infer %2

; *****
; For LLVM instruction:
;  %9 = add i64 %4, 1
; Looking for a replacement for:
%0:i64 = var
%1:i1 = eq 0:i64, %0
pc %1 0:i1
%2:i64 = add 1:i64, %0
infer %2

; *****
; For LLVM instruction:
;  %10 = icmp ult i64 %9, 16
; Looking for a replacement for:
%0:i64 = var
%1:i1 = eq 0:i64, %0
pc %1 0:i1
%2:i64 = add 1:i64, %0
%3:i1 = ult %2, 16:i64
infer %3

; *****
; For LLVM instruction:
;  %14 = add i32 %7, 1
; Looking for a replacement for:
%0:i64 = var
%1:i1 = eq 0:i64, %0
pc %1 0:i1
%2:i64 = add 1:i64, %0
%3:i1 = ult %2, 16:i64
pc %3 1:i1
%4:i32 = trunc %0 (hasExternalUses)
%5:i32 = add 1:i32, %4
infer %5

; *****
; For LLVM instruction:
;  %16 = sub i32 15, %7
; Looking for a replacement for:
%0:i64 = var
%1:i1 = eq 0:i64, %0
pc %1 0:i1
%2:i64 = add 1:i64, %0
%3:i1 = ult %2, 16:i64
pc %3 1:i1
%4:i32 = trunc %0 (hasExternalUses)
%5:i32 = sub 15:i32, %4
infer %5

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %21, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %23, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %25, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %27, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %29, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %31 = lshr i32 %24, 26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 26:i32
infer %1

; *****
; For LLVM instruction:
;  %32 = and i32 %24, 67108863
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 67108863:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %33 = add i32 %26, %31
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2
infer %3

; *****
; For LLVM instruction:
;  %34 = lshr i32 %33, 26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2 (hasExternalUses)
%4:i32 = lshr %3, 26:i32
infer %4

; *****
; For LLVM instruction:
;  %35 = and i32 %33, 67108863
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2 (hasExternalUses)
%4:i32 = and 67108863:i32, %3
infer %4

; *****
; For LLVM instruction:
;  %36 = add i32 %34, %28
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3 (hasExternalUses)
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5
infer %6

; *****
; For LLVM instruction:
;  %37 = lshr i32 %36, 26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3 (hasExternalUses)
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5 (hasExternalUses)
%7:i32 = lshr %6, 26:i32
infer %7

; *****
; For LLVM instruction:
;  %38 = and i32 %36, 67108863
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3 (hasExternalUses)
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5 (hasExternalUses)
%7:i32 = and 67108863:i32, %6
infer %7

; *****
; For LLVM instruction:
;  %39 = add i32 %37, %30
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4 (hasExternalUses)
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6 (hasExternalUses)
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8
infer %9

; *****
; For LLVM instruction:
;  %40 = lshr i32 %39, 26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4 (hasExternalUses)
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6 (hasExternalUses)
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = lshr %9, 26:i32
infer %10

; *****
; For LLVM instruction:
;  %41 = mul nuw nsw i32 %40, 5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4 (hasExternalUses)
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6 (hasExternalUses)
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = lshr %9, 26:i32
%11:i32 = mulnw 5:i32, %10
infer %11

; *****
; For LLVM instruction:
;  %42 = add i32 %41, %22
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5 (hasExternalUses)
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7 (hasExternalUses)
%9:i32 = lshr %8, 26:i32
%10:i32 = add %1, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = mulnw 5:i32, %11
%13:i32 = add %0, %12
infer %13

; *****
; For LLVM instruction:
;  %43 = lshr i32 %42, 26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5 (hasExternalUses)
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7 (hasExternalUses)
%9:i32 = lshr %8, 26:i32
%10:i32 = add %1, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = mulnw 5:i32, %11
%13:i32 = add %0, %12 (hasExternalUses)
%14:i32 = lshr %13, 26:i32
infer %14

; *****
; For LLVM instruction:
;  %44 = and i32 %42, 67108863
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5 (hasExternalUses)
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7 (hasExternalUses)
%9:i32 = lshr %8, 26:i32
%10:i32 = add %1, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = mulnw 5:i32, %11
%13:i32 = add %0, %12 (hasExternalUses)
%14:i32 = and 67108863:i32, %13
infer %14

; *****
; For LLVM instruction:
;  %45 = add nuw nsw i32 %43, %32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 67108863:i32, %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %0, 26:i32
%7:i32 = add %5, %6 (hasExternalUses)
%8:i32 = lshr %7, 26:i32
%9:i32 = add %4, %8 (hasExternalUses)
%10:i32 = lshr %9, 26:i32
%11:i32 = add %3, %10 (hasExternalUses)
%12:i32 = lshr %11, 26:i32
%13:i32 = mulnw 5:i32, %12
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = lshr %14, 26:i32
%16:i32 = addnw %1, %15
infer %16

; *****
; For LLVM instruction:
;  %46 = add nuw nsw i32 %44, 5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5 (hasExternalUses)
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7 (hasExternalUses)
%9:i32 = lshr %8, 26:i32
%10:i32 = add %1, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = mulnw 5:i32, %11
%13:i32 = add %0, %12 (hasExternalUses)
%14:i32 = and 67108863:i32, %13 (hasExternalUses)
%15:i32 = addnw 5:i32, %14
infer %15

; *****
; For LLVM instruction:
;  %47 = lshr i32 %46, 26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5 (hasExternalUses)
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7 (hasExternalUses)
%9:i32 = lshr %8, 26:i32
%10:i32 = add %1, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = mulnw 5:i32, %11
%13:i32 = add %0, %12 (hasExternalUses)
%14:i32 = and 67108863:i32, %13 (hasExternalUses)
%15:i32 = addnw 5:i32, %14 (hasExternalUses)
%16:i32 = lshr %15, 26:i32
infer %16

; *****
; For LLVM instruction:
;  %48 = add nuw nsw i32 %47, %45
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 67108863:i32, %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %0, 26:i32
%7:i32 = add %5, %6 (hasExternalUses)
%8:i32 = lshr %7, 26:i32
%9:i32 = add %4, %8 (hasExternalUses)
%10:i32 = lshr %9, 26:i32
%11:i32 = add %3, %10 (hasExternalUses)
%12:i32 = lshr %11, 26:i32
%13:i32 = mulnw 5:i32, %12
%14:i32 = add %2, %13
%15:i32 = lshr %14, 26:i32
%16:i32 = addnw %1, %15 (hasExternalUses)
%17:i32 = and 67108863:i32, %14 (hasExternalUses)
%18:i32 = addnw 5:i32, %17 (hasExternalUses)
%19:i32 = lshr %18, 26:i32
%20:i32 = addnw %16, %19
infer %20

; *****
; For LLVM instruction:
;  %49 = lshr i32 %48, 26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 67108863:i32, %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %0, 26:i32
%7:i32 = add %5, %6 (hasExternalUses)
%8:i32 = lshr %7, 26:i32
%9:i32 = add %4, %8 (hasExternalUses)
%10:i32 = lshr %9, 26:i32
%11:i32 = add %3, %10 (hasExternalUses)
%12:i32 = lshr %11, 26:i32
%13:i32 = mulnw 5:i32, %12
%14:i32 = add %2, %13
%15:i32 = lshr %14, 26:i32
%16:i32 = addnw %1, %15 (hasExternalUses)
%17:i32 = and 67108863:i32, %14 (hasExternalUses)
%18:i32 = addnw 5:i32, %17 (hasExternalUses)
%19:i32 = lshr %18, 26:i32
%20:i32 = addnw %16, %19 (hasExternalUses)
%21:i32 = lshr %20, 26:i32
infer %21

; *****
; For LLVM instruction:
;  %50 = add nuw nsw i32 %49, %35
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2
%4:i32 = and 67108863:i32, %3 (hasExternalUses)
%5:i32 = and 67108863:i32, %1
%6:i32 = var
%7:i32 = var
%8:i32 = var
%9:i32 = lshr %3, 26:i32
%10:i32 = add %8, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = add %7, %11 (hasExternalUses)
%13:i32 = lshr %12, 26:i32
%14:i32 = mulnw 5:i32, %13
%15:i32 = add %6, %14
%16:i32 = lshr %15, 26:i32
%17:i32 = addnw %5, %16 (hasExternalUses)
%18:i32 = and 67108863:i32, %15 (hasExternalUses)
%19:i32 = addnw 5:i32, %18 (hasExternalUses)
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %17, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %4, %22
infer %23

; *****
; For LLVM instruction:
;  %51 = lshr i32 %50, 26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2
%4:i32 = and 67108863:i32, %3 (hasExternalUses)
%5:i32 = and 67108863:i32, %1
%6:i32 = var
%7:i32 = var
%8:i32 = var
%9:i32 = lshr %3, 26:i32
%10:i32 = add %8, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = add %7, %11 (hasExternalUses)
%13:i32 = lshr %12, 26:i32
%14:i32 = mulnw 5:i32, %13
%15:i32 = add %6, %14
%16:i32 = lshr %15, 26:i32
%17:i32 = addnw %5, %16 (hasExternalUses)
%18:i32 = and 67108863:i32, %15 (hasExternalUses)
%19:i32 = addnw 5:i32, %18 (hasExternalUses)
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %17, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %4, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
infer %24

; *****
; For LLVM instruction:
;  %52 = add nuw nsw i32 %51, %38
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5
%7:i32 = and 67108863:i32, %6 (hasExternalUses)
%8:i32 = and 67108863:i32, %4 (hasExternalUses)
%9:i32 = and 67108863:i32, %2
%10:i32 = var
%11:i32 = var
%12:i32 = lshr %6, 26:i32
%13:i32 = add %11, %12 (hasExternalUses)
%14:i32 = lshr %13, 26:i32
%15:i32 = mulnw 5:i32, %14
%16:i32 = add %10, %15
%17:i32 = lshr %16, 26:i32
%18:i32 = addnw %9, %17 (hasExternalUses)
%19:i32 = and 67108863:i32, %16 (hasExternalUses)
%20:i32 = addnw 5:i32, %19 (hasExternalUses)
%21:i32 = lshr %20, 26:i32
%22:i32 = addnw %18, %21 (hasExternalUses)
%23:i32 = lshr %22, 26:i32
%24:i32 = addnw %8, %23 (hasExternalUses)
%25:i32 = lshr %24, 26:i32
%26:i32 = addnw %7, %25
infer %26

; *****
; For LLVM instruction:
;  %53 = lshr i32 %52, 26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5
%7:i32 = and 67108863:i32, %6 (hasExternalUses)
%8:i32 = and 67108863:i32, %4 (hasExternalUses)
%9:i32 = and 67108863:i32, %2
%10:i32 = var
%11:i32 = var
%12:i32 = lshr %6, 26:i32
%13:i32 = add %11, %12 (hasExternalUses)
%14:i32 = lshr %13, 26:i32
%15:i32 = mulnw 5:i32, %14
%16:i32 = add %10, %15
%17:i32 = lshr %16, 26:i32
%18:i32 = addnw %9, %17 (hasExternalUses)
%19:i32 = and 67108863:i32, %16 (hasExternalUses)
%20:i32 = addnw 5:i32, %19 (hasExternalUses)
%21:i32 = lshr %20, 26:i32
%22:i32 = addnw %18, %21 (hasExternalUses)
%23:i32 = lshr %22, 26:i32
%24:i32 = addnw %8, %23 (hasExternalUses)
%25:i32 = lshr %24, 26:i32
%26:i32 = addnw %7, %25 (hasExternalUses)
%27:i32 = lshr %26, 26:i32
infer %27

; *****
; For LLVM instruction:
;  %54 = or i32 %39, -67108864
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4 (hasExternalUses)
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6 (hasExternalUses)
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = or 4227858432:i32, %9
infer %10

; *****
; For LLVM instruction:
;  %55 = add nsw i32 %54, %53
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24 (hasExternalUses)
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28
infer %29 (demandedBits=10000000111111111111111111111111)

; *****
; For LLVM instruction:
;  %56 = lshr i32 %55, 31
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24 (hasExternalUses)
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
infer %30 (demandedBits=00000011111111111111111111111111)

; *****
; For LLVM instruction:
;  %57 = add nsw i32 %56, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24 (hasExternalUses)
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30
infer %31 (demandedBits=00000011111111111111111111111111)

; *****
; For LLVM instruction:
;  %58 = and i32 %57, 67108863
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24 (hasExternalUses)
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31
infer %32 (demandedBits=00001111111111111111111111111111)

; *****
; For LLVM instruction:
;  %59 = and i32 %58, %46
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %1, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = mulnw 5:i32, %11
%13:i32 = add %0, %12
%14:i32 = and 67108863:i32, %13 (hasExternalUses)
%15:i32 = addnw 5:i32, %14
%16:i32 = or 4227858432:i32, %10
%17:i32 = and 67108863:i32, %8 (hasExternalUses)
%18:i32 = and 67108863:i32, %6 (hasExternalUses)
%19:i32 = and 67108863:i32, %4
%20:i32 = lshr %13, 26:i32
%21:i32 = addnw %19, %20 (hasExternalUses)
%22:i32 = lshr %15, 26:i32
%23:i32 = addnw %21, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %18, %24 (hasExternalUses)
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %17, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %16, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %15, %32
infer %33

; *****
; For LLVM instruction:
;  %60 = and i32 %58, %48
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 67108863:i32, %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %0, 26:i32
%7:i32 = add %5, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %4, %8
%10:i32 = lshr %9, 26:i32
%11:i32 = add %3, %10 (hasExternalUses)
%12:i32 = lshr %11, 26:i32
%13:i32 = mulnw 5:i32, %12
%14:i32 = add %2, %13
%15:i32 = lshr %14, 26:i32
%16:i32 = addnw %1, %15 (hasExternalUses)
%17:i32 = and 67108863:i32, %14 (hasExternalUses)
%18:i32 = addnw 5:i32, %17 (hasExternalUses)
%19:i32 = lshr %18, 26:i32
%20:i32 = addnw %16, %19
%21:i32 = or 4227858432:i32, %11
%22:i32 = and 67108863:i32, %9 (hasExternalUses)
%23:i32 = and 67108863:i32, %7 (hasExternalUses)
%24:i32 = lshr %20, 26:i32
%25:i32 = addnw %23, %24 (hasExternalUses)
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %22, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %21, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %20, %32
infer %33

; *****
; For LLVM instruction:
;  %61 = and i32 %58, %50
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2
%4:i32 = and 67108863:i32, %3 (hasExternalUses)
%5:i32 = and 67108863:i32, %1
%6:i32 = var
%7:i32 = var
%8:i32 = var
%9:i32 = lshr %3, 26:i32
%10:i32 = add %8, %9
%11:i32 = lshr %10, 26:i32
%12:i32 = add %7, %11 (hasExternalUses)
%13:i32 = lshr %12, 26:i32
%14:i32 = mulnw 5:i32, %13
%15:i32 = add %6, %14
%16:i32 = lshr %15, 26:i32
%17:i32 = addnw %5, %16 (hasExternalUses)
%18:i32 = and 67108863:i32, %15 (hasExternalUses)
%19:i32 = addnw 5:i32, %18 (hasExternalUses)
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %17, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %4, %22
%24:i32 = or 4227858432:i32, %12
%25:i32 = and 67108863:i32, %10 (hasExternalUses)
%26:i32 = lshr %23, 26:i32
%27:i32 = addnw %25, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %24, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %23, %32
infer %33

; *****
; For LLVM instruction:
;  %62 = and i32 %58, %52
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5
%7:i32 = and 67108863:i32, %6 (hasExternalUses)
%8:i32 = and 67108863:i32, %4 (hasExternalUses)
%9:i32 = and 67108863:i32, %2
%10:i32 = var
%11:i32 = var
%12:i32 = lshr %6, 26:i32
%13:i32 = add %11, %12 (hasExternalUses)
%14:i32 = lshr %13, 26:i32
%15:i32 = mulnw 5:i32, %14
%16:i32 = add %10, %15
%17:i32 = lshr %16, 26:i32
%18:i32 = addnw %9, %17 (hasExternalUses)
%19:i32 = and 67108863:i32, %16 (hasExternalUses)
%20:i32 = addnw 5:i32, %19 (hasExternalUses)
%21:i32 = lshr %20, 26:i32
%22:i32 = addnw %18, %21 (hasExternalUses)
%23:i32 = lshr %22, 26:i32
%24:i32 = addnw %8, %23 (hasExternalUses)
%25:i32 = lshr %24, 26:i32
%26:i32 = addnw %7, %25
%27:i32 = or 4227858432:i32, %13
%28:i32 = lshr %26, 26:i32
%29:i32 = addnsw %27, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %26, %32
infer %33

; *****
; For LLVM instruction:
;  %63 = and i32 %57, %55
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24 (hasExternalUses)
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and %31, %29
infer %32 (demandedBits=00000000111111111111111111111111)

; *****
; For LLVM instruction:
;  %64 = ashr i32 %55, 31
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24 (hasExternalUses)
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32
infer %30 (demandedBits=00000111111111111111111111111111)

; *****
; For LLVM instruction:
;  %65 = and i32 %64, %44
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %1, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = mulnw 5:i32, %11
%13:i32 = add %0, %12
%14:i32 = and 67108863:i32, %13
%15:i32 = or 4227858432:i32, %10
%16:i32 = and 67108863:i32, %8 (hasExternalUses)
%17:i32 = and 67108863:i32, %6 (hasExternalUses)
%18:i32 = and 67108863:i32, %4
%19:i32 = lshr %13, 26:i32
%20:i32 = addnw %18, %19 (hasExternalUses)
%21:i32 = addnw 5:i32, %14 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %20, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %17, %24 (hasExternalUses)
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %16, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %15, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %14, %30
infer %31

; *****
; For LLVM instruction:
;  %66 = or i32 %65, %59
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %1, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = mulnw 5:i32, %11
%13:i32 = add %0, %12
%14:i32 = and 67108863:i32, %13
%15:i32 = addnw 5:i32, %14
%16:i32 = or 4227858432:i32, %10
%17:i32 = and 67108863:i32, %8 (hasExternalUses)
%18:i32 = and 67108863:i32, %6 (hasExternalUses)
%19:i32 = and 67108863:i32, %4
%20:i32 = lshr %13, 26:i32
%21:i32 = addnw %19, %20 (hasExternalUses)
%22:i32 = lshr %15, 26:i32
%23:i32 = addnw %21, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %18, %24 (hasExternalUses)
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %17, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %16, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %15, %32
%34:i32 = ashr %29, 31:i32 (hasExternalUses)
%35:i32 = and %14, %34
%36:i32 = or %33, %35
infer %36

; *****
; For LLVM instruction:
;  %67 = and i32 %64, %45
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 67108863:i32, %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %0, 26:i32
%7:i32 = add %5, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %4, %8
%10:i32 = lshr %9, 26:i32
%11:i32 = add %3, %10 (hasExternalUses)
%12:i32 = lshr %11, 26:i32
%13:i32 = mulnw 5:i32, %12
%14:i32 = add %2, %13
%15:i32 = lshr %14, 26:i32
%16:i32 = addnw %1, %15
%17:i32 = or 4227858432:i32, %11
%18:i32 = and 67108863:i32, %9 (hasExternalUses)
%19:i32 = and 67108863:i32, %7 (hasExternalUses)
%20:i32 = and 67108863:i32, %14 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %16, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %19, %24 (hasExternalUses)
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %18, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %17, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %16, %30
infer %31

; *****
; For LLVM instruction:
;  %68 = or i32 %67, %60
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 67108863:i32, %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %0, 26:i32
%7:i32 = add %5, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %4, %8
%10:i32 = lshr %9, 26:i32
%11:i32 = add %3, %10 (hasExternalUses)
%12:i32 = lshr %11, 26:i32
%13:i32 = mulnw 5:i32, %12
%14:i32 = add %2, %13
%15:i32 = lshr %14, 26:i32
%16:i32 = addnw %1, %15
%17:i32 = and 67108863:i32, %14 (hasExternalUses)
%18:i32 = addnw 5:i32, %17 (hasExternalUses)
%19:i32 = lshr %18, 26:i32
%20:i32 = addnw %16, %19
%21:i32 = or 4227858432:i32, %11
%22:i32 = and 67108863:i32, %9 (hasExternalUses)
%23:i32 = and 67108863:i32, %7 (hasExternalUses)
%24:i32 = lshr %20, 26:i32
%25:i32 = addnw %23, %24 (hasExternalUses)
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %22, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %21, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %20, %32
%34:i32 = ashr %29, 31:i32 (hasExternalUses)
%35:i32 = and %16, %34
%36:i32 = or %33, %35
infer %36

; *****
; For LLVM instruction:
;  %69 = and i32 %64, %35
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2
%4:i32 = and 67108863:i32, %3
%5:i32 = var
%6:i32 = var
%7:i32 = lshr %3, 26:i32
%8:i32 = add %6, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %5, %9 (hasExternalUses)
%11:i32 = or 4227858432:i32, %10
%12:i32 = and 67108863:i32, %8 (hasExternalUses)
%13:i32 = and 67108863:i32, %1
%14:i32 = var
%15:i32 = lshr %10, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %4, %24 (hasExternalUses)
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %12, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %11, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %4, %30
infer %31

; *****
; For LLVM instruction:
;  %70 = or i32 %69, %61
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2
%4:i32 = and 67108863:i32, %3
%5:i32 = and 67108863:i32, %1
%6:i32 = var
%7:i32 = var
%8:i32 = var
%9:i32 = lshr %3, 26:i32
%10:i32 = add %8, %9
%11:i32 = lshr %10, 26:i32
%12:i32 = add %7, %11 (hasExternalUses)
%13:i32 = lshr %12, 26:i32
%14:i32 = mulnw 5:i32, %13
%15:i32 = add %6, %14
%16:i32 = lshr %15, 26:i32
%17:i32 = addnw %5, %16 (hasExternalUses)
%18:i32 = and 67108863:i32, %15 (hasExternalUses)
%19:i32 = addnw 5:i32, %18 (hasExternalUses)
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %17, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %4, %22
%24:i32 = or 4227858432:i32, %12
%25:i32 = and 67108863:i32, %10 (hasExternalUses)
%26:i32 = lshr %23, 26:i32
%27:i32 = addnw %25, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %24, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %23, %32
%34:i32 = ashr %29, 31:i32 (hasExternalUses)
%35:i32 = and %4, %34
%36:i32 = or %33, %35
infer %36

; *****
; For LLVM instruction:
;  %71 = and i32 %64, %38
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5
%7:i32 = and 67108863:i32, %6
%8:i32 = var
%9:i32 = lshr %6, 26:i32
%10:i32 = add %8, %9 (hasExternalUses)
%11:i32 = or 4227858432:i32, %10
%12:i32 = and 67108863:i32, %4 (hasExternalUses)
%13:i32 = and 67108863:i32, %2
%14:i32 = var
%15:i32 = lshr %10, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24 (hasExternalUses)
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %7, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %11, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %7, %30
infer %31

; *****
; For LLVM instruction:
;  %72 = or i32 %71, %62
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5
%7:i32 = and 67108863:i32, %6
%8:i32 = and 67108863:i32, %4 (hasExternalUses)
%9:i32 = and 67108863:i32, %2
%10:i32 = var
%11:i32 = var
%12:i32 = lshr %6, 26:i32
%13:i32 = add %11, %12 (hasExternalUses)
%14:i32 = lshr %13, 26:i32
%15:i32 = mulnw 5:i32, %14
%16:i32 = add %10, %15
%17:i32 = lshr %16, 26:i32
%18:i32 = addnw %9, %17 (hasExternalUses)
%19:i32 = and 67108863:i32, %16 (hasExternalUses)
%20:i32 = addnw 5:i32, %19 (hasExternalUses)
%21:i32 = lshr %20, 26:i32
%22:i32 = addnw %18, %21 (hasExternalUses)
%23:i32 = lshr %22, 26:i32
%24:i32 = addnw %8, %23 (hasExternalUses)
%25:i32 = lshr %24, 26:i32
%26:i32 = addnw %7, %25
%27:i32 = or 4227858432:i32, %13
%28:i32 = lshr %26, 26:i32
%29:i32 = addnsw %27, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %26, %32
%34:i32 = ashr %29, 31:i32 (hasExternalUses)
%35:i32 = and %7, %34
%36:i32 = or %33, %35
infer %36

; *****
; For LLVM instruction:
;  %73 = and i32 %64, %39
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24 (hasExternalUses)
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %9, %30
infer %31 (demandedBits=00000000111111111111111111111111)

; *****
; For LLVM instruction:
;  %74 = or i32 %63, %73
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24 (hasExternalUses)
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %9, %30
%32:i32 = lshr %29, 31:i32
%33:i32 = addnsw 4294967295:i32, %32 (hasExternalUses)
%34:i32 = and %33, %29
%35:i32 = or %31, %34
infer %35 (demandedBits=00000000111111111111111111111111)

; *****
; For LLVM instruction:
;  %75 = shl i32 %68, 26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 67108863:i32, %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %0, 26:i32
%7:i32 = add %5, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %4, %8
%10:i32 = lshr %9, 26:i32
%11:i32 = add %3, %10 (hasExternalUses)
%12:i32 = lshr %11, 26:i32
%13:i32 = mulnw 5:i32, %12
%14:i32 = add %2, %13
%15:i32 = lshr %14, 26:i32
%16:i32 = addnw %1, %15
%17:i32 = and 67108863:i32, %14 (hasExternalUses)
%18:i32 = addnw 5:i32, %17 (hasExternalUses)
%19:i32 = lshr %18, 26:i32
%20:i32 = addnw %16, %19
%21:i32 = or 4227858432:i32, %11
%22:i32 = and 67108863:i32, %9 (hasExternalUses)
%23:i32 = and 67108863:i32, %7 (hasExternalUses)
%24:i32 = lshr %20, 26:i32
%25:i32 = addnw %23, %24 (hasExternalUses)
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %22, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %21, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %20, %32
%34:i32 = ashr %29, 31:i32 (hasExternalUses)
%35:i32 = and %16, %34
%36:i32 = or %33, %35 (hasExternalUses)
%37:i32 = shl %36, 26:i32
infer %37

; *****
; For LLVM instruction:
;  %76 = or i32 %66, %75
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %1, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = mulnw 5:i32, %11
%13:i32 = add %0, %12
%14:i32 = and 67108863:i32, %13
%15:i32 = addnw 5:i32, %14
%16:i32 = or 4227858432:i32, %10
%17:i32 = and 67108863:i32, %8 (hasExternalUses)
%18:i32 = and 67108863:i32, %6 (hasExternalUses)
%19:i32 = and 67108863:i32, %4
%20:i32 = lshr %13, 26:i32
%21:i32 = addnw %19, %20
%22:i32 = lshr %15, 26:i32
%23:i32 = addnw %21, %22
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %18, %24 (hasExternalUses)
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %17, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %16, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %15, %32
%34:i32 = ashr %29, 31:i32 (hasExternalUses)
%35:i32 = and %14, %34
%36:i32 = or %33, %35
%37:i32 = and %23, %32
%38:i32 = and %21, %34
%39:i32 = or %37, %38 (hasExternalUses)
%40:i32 = shl %39, 26:i32
%41:i32 = or %36, %40
infer %41

; *****
; For LLVM instruction:
;  %77 = lshr i32 %68, 6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 67108863:i32, %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %0, 26:i32
%7:i32 = add %5, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %4, %8
%10:i32 = lshr %9, 26:i32
%11:i32 = add %3, %10 (hasExternalUses)
%12:i32 = lshr %11, 26:i32
%13:i32 = mulnw 5:i32, %12
%14:i32 = add %2, %13
%15:i32 = lshr %14, 26:i32
%16:i32 = addnw %1, %15
%17:i32 = and 67108863:i32, %14 (hasExternalUses)
%18:i32 = addnw 5:i32, %17 (hasExternalUses)
%19:i32 = lshr %18, 26:i32
%20:i32 = addnw %16, %19
%21:i32 = or 4227858432:i32, %11
%22:i32 = and 67108863:i32, %9 (hasExternalUses)
%23:i32 = and 67108863:i32, %7 (hasExternalUses)
%24:i32 = lshr %20, 26:i32
%25:i32 = addnw %23, %24 (hasExternalUses)
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %22, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %21, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %20, %32
%34:i32 = ashr %29, 31:i32 (hasExternalUses)
%35:i32 = and %16, %34
%36:i32 = or %33, %35 (hasExternalUses)
%37:i32 = lshr %36, 6:i32
infer %37

; *****
; For LLVM instruction:
;  %78 = shl i32 %70, 20
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2
%4:i32 = and 67108863:i32, %3
%5:i32 = and 67108863:i32, %1
%6:i32 = var
%7:i32 = var
%8:i32 = var
%9:i32 = lshr %3, 26:i32
%10:i32 = add %8, %9
%11:i32 = lshr %10, 26:i32
%12:i32 = add %7, %11 (hasExternalUses)
%13:i32 = lshr %12, 26:i32
%14:i32 = mulnw 5:i32, %13
%15:i32 = add %6, %14
%16:i32 = lshr %15, 26:i32
%17:i32 = addnw %5, %16 (hasExternalUses)
%18:i32 = and 67108863:i32, %15 (hasExternalUses)
%19:i32 = addnw 5:i32, %18 (hasExternalUses)
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %17, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %4, %22
%24:i32 = or 4227858432:i32, %12
%25:i32 = and 67108863:i32, %10 (hasExternalUses)
%26:i32 = lshr %23, 26:i32
%27:i32 = addnw %25, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %24, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %23, %32
%34:i32 = ashr %29, 31:i32 (hasExternalUses)
%35:i32 = and %4, %34
%36:i32 = or %33, %35 (hasExternalUses)
%37:i32 = shl %36, 20:i32
infer %37

; *****
; For LLVM instruction:
;  %79 = or i32 %77, %78
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2
%4:i32 = and 67108863:i32, %3
%5:i32 = and 67108863:i32, %1
%6:i32 = var
%7:i32 = var
%8:i32 = var
%9:i32 = lshr %3, 26:i32
%10:i32 = add %8, %9
%11:i32 = lshr %10, 26:i32
%12:i32 = add %7, %11 (hasExternalUses)
%13:i32 = lshr %12, 26:i32
%14:i32 = mulnw 5:i32, %13
%15:i32 = add %6, %14
%16:i32 = lshr %15, 26:i32
%17:i32 = addnw %5, %16
%18:i32 = and 67108863:i32, %15 (hasExternalUses)
%19:i32 = addnw 5:i32, %18 (hasExternalUses)
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %17, %20
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %4, %22
%24:i32 = or 4227858432:i32, %12
%25:i32 = and 67108863:i32, %10 (hasExternalUses)
%26:i32 = lshr %23, 26:i32
%27:i32 = addnw %25, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %24, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %23, %32
%34:i32 = ashr %29, 31:i32 (hasExternalUses)
%35:i32 = and %4, %34
%36:i32 = or %33, %35 (hasExternalUses)
%37:i32 = shl %36, 20:i32
%38:i32 = and %21, %32
%39:i32 = and %17, %34
%40:i32 = or %38, %39 (hasExternalUses)
%41:i32 = lshr %40, 6:i32
%42:i32 = or %37, %41
infer %42

; *****
; For LLVM instruction:
;  %80 = lshr i32 %70, 12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2
%4:i32 = and 67108863:i32, %3
%5:i32 = and 67108863:i32, %1
%6:i32 = var
%7:i32 = var
%8:i32 = var
%9:i32 = lshr %3, 26:i32
%10:i32 = add %8, %9
%11:i32 = lshr %10, 26:i32
%12:i32 = add %7, %11 (hasExternalUses)
%13:i32 = lshr %12, 26:i32
%14:i32 = mulnw 5:i32, %13
%15:i32 = add %6, %14
%16:i32 = lshr %15, 26:i32
%17:i32 = addnw %5, %16 (hasExternalUses)
%18:i32 = and 67108863:i32, %15 (hasExternalUses)
%19:i32 = addnw 5:i32, %18 (hasExternalUses)
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %17, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %4, %22
%24:i32 = or 4227858432:i32, %12
%25:i32 = and 67108863:i32, %10 (hasExternalUses)
%26:i32 = lshr %23, 26:i32
%27:i32 = addnw %25, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %24, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %23, %32
%34:i32 = ashr %29, 31:i32 (hasExternalUses)
%35:i32 = and %4, %34
%36:i32 = or %33, %35 (hasExternalUses)
%37:i32 = lshr %36, 12:i32
infer %37

; *****
; For LLVM instruction:
;  %81 = shl i32 %72, 14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5
%7:i32 = and 67108863:i32, %6
%8:i32 = and 67108863:i32, %4 (hasExternalUses)
%9:i32 = and 67108863:i32, %2
%10:i32 = var
%11:i32 = var
%12:i32 = lshr %6, 26:i32
%13:i32 = add %11, %12 (hasExternalUses)
%14:i32 = lshr %13, 26:i32
%15:i32 = mulnw 5:i32, %14
%16:i32 = add %10, %15
%17:i32 = lshr %16, 26:i32
%18:i32 = addnw %9, %17 (hasExternalUses)
%19:i32 = and 67108863:i32, %16 (hasExternalUses)
%20:i32 = addnw 5:i32, %19 (hasExternalUses)
%21:i32 = lshr %20, 26:i32
%22:i32 = addnw %18, %21 (hasExternalUses)
%23:i32 = lshr %22, 26:i32
%24:i32 = addnw %8, %23 (hasExternalUses)
%25:i32 = lshr %24, 26:i32
%26:i32 = addnw %7, %25
%27:i32 = or 4227858432:i32, %13
%28:i32 = lshr %26, 26:i32
%29:i32 = addnsw %27, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %26, %32
%34:i32 = ashr %29, 31:i32 (hasExternalUses)
%35:i32 = and %7, %34
%36:i32 = or %33, %35 (hasExternalUses)
%37:i32 = shl %36, 14:i32
infer %37

; *****
; For LLVM instruction:
;  %82 = or i32 %80, %81
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5
%7:i32 = and 67108863:i32, %6
%8:i32 = and 67108863:i32, %4
%9:i32 = and 67108863:i32, %2
%10:i32 = var
%11:i32 = var
%12:i32 = lshr %6, 26:i32
%13:i32 = add %11, %12 (hasExternalUses)
%14:i32 = lshr %13, 26:i32
%15:i32 = mulnw 5:i32, %14
%16:i32 = add %10, %15
%17:i32 = lshr %16, 26:i32
%18:i32 = addnw %9, %17 (hasExternalUses)
%19:i32 = and 67108863:i32, %16 (hasExternalUses)
%20:i32 = addnw 5:i32, %19 (hasExternalUses)
%21:i32 = lshr %20, 26:i32
%22:i32 = addnw %18, %21 (hasExternalUses)
%23:i32 = lshr %22, 26:i32
%24:i32 = addnw %8, %23
%25:i32 = lshr %24, 26:i32
%26:i32 = addnw %7, %25
%27:i32 = or 4227858432:i32, %13
%28:i32 = lshr %26, 26:i32
%29:i32 = addnsw %27, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %26, %32
%34:i32 = ashr %29, 31:i32 (hasExternalUses)
%35:i32 = and %7, %34
%36:i32 = or %33, %35 (hasExternalUses)
%37:i32 = shl %36, 14:i32
%38:i32 = and %24, %32
%39:i32 = and %8, %34
%40:i32 = or %38, %39 (hasExternalUses)
%41:i32 = lshr %40, 12:i32
%42:i32 = or %37, %41
infer %42

; *****
; For LLVM instruction:
;  %83 = lshr i32 %72, 18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5
%7:i32 = and 67108863:i32, %6
%8:i32 = and 67108863:i32, %4 (hasExternalUses)
%9:i32 = and 67108863:i32, %2
%10:i32 = var
%11:i32 = var
%12:i32 = lshr %6, 26:i32
%13:i32 = add %11, %12 (hasExternalUses)
%14:i32 = lshr %13, 26:i32
%15:i32 = mulnw 5:i32, %14
%16:i32 = add %10, %15
%17:i32 = lshr %16, 26:i32
%18:i32 = addnw %9, %17 (hasExternalUses)
%19:i32 = and 67108863:i32, %16 (hasExternalUses)
%20:i32 = addnw 5:i32, %19 (hasExternalUses)
%21:i32 = lshr %20, 26:i32
%22:i32 = addnw %18, %21 (hasExternalUses)
%23:i32 = lshr %22, 26:i32
%24:i32 = addnw %8, %23 (hasExternalUses)
%25:i32 = lshr %24, 26:i32
%26:i32 = addnw %7, %25
%27:i32 = or 4227858432:i32, %13
%28:i32 = lshr %26, 26:i32
%29:i32 = addnsw %27, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %26, %32
%34:i32 = ashr %29, 31:i32 (hasExternalUses)
%35:i32 = and %7, %34
%36:i32 = or %33, %35 (hasExternalUses)
%37:i32 = lshr %36, 18:i32
infer %37

; *****
; For LLVM instruction:
;  %84 = shl i32 %74, 8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24 (hasExternalUses)
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %9, %30
%32:i32 = lshr %29, 31:i32
%33:i32 = addnsw 4294967295:i32, %32 (hasExternalUses)
%34:i32 = and %33, %29
%35:i32 = or %31, %34
%36:i32 = shl %35, 8:i32
infer %36

; *****
; For LLVM instruction:
;  %85 = or i32 %84, %83
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24 (hasExternalUses)
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %9, %30
%32:i32 = lshr %29, 31:i32
%33:i32 = addnsw 4294967295:i32, %32
%34:i32 = and %33, %29
%35:i32 = or %31, %34
%36:i32 = shl %35, 8:i32
%37:i32 = and 67108863:i32, %33 (hasExternalUses)
%38:i32 = and %27, %37
%39:i32 = and %11, %30
%40:i32 = or %38, %39 (hasExternalUses)
%41:i32 = lshr %40, 18:i32
%42:i32 = or %36, %41
infer %42

; *****
; For LLVM instruction:
;  %86 = zext i32 %76 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %1, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = mulnw 5:i32, %11
%13:i32 = add %0, %12
%14:i32 = and 67108863:i32, %13
%15:i32 = addnw 5:i32, %14
%16:i32 = or 4227858432:i32, %10
%17:i32 = and 67108863:i32, %8 (hasExternalUses)
%18:i32 = and 67108863:i32, %6 (hasExternalUses)
%19:i32 = and 67108863:i32, %4
%20:i32 = lshr %13, 26:i32
%21:i32 = addnw %19, %20
%22:i32 = lshr %15, 26:i32
%23:i32 = addnw %21, %22
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %18, %24 (hasExternalUses)
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %17, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %16, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %15, %32
%34:i32 = ashr %29, 31:i32 (hasExternalUses)
%35:i32 = and %14, %34
%36:i32 = or %33, %35
%37:i32 = and %23, %32
%38:i32 = and %21, %34
%39:i32 = or %37, %38 (hasExternalUses)
%40:i32 = shl %39, 26:i32
%41:i32 = or %36, %40
%42:i64 = zext %41
infer %42

; *****
; For LLVM instruction:
;  %88 = load i32, i32* %87, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %89 = zext i32 %88 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %90 = add nuw nsw i64 %86, %89
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = var
%7:i32 = lshr %6, 26:i32
%8:i32 = add %5, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %4, %9
%11:i32 = lshr %10, 26:i32
%12:i32 = add %3, %11 (hasExternalUses)
%13:i32 = lshr %12, 26:i32
%14:i32 = mulnw 5:i32, %13
%15:i32 = add %2, %14
%16:i32 = and 67108863:i32, %15
%17:i32 = addnw 5:i32, %16
%18:i32 = or 4227858432:i32, %12
%19:i32 = and 67108863:i32, %10 (hasExternalUses)
%20:i32 = and 67108863:i32, %8 (hasExternalUses)
%21:i32 = and 67108863:i32, %6
%22:i32 = lshr %15, 26:i32
%23:i32 = addnw %21, %22
%24:i32 = lshr %17, 26:i32
%25:i32 = addnw %23, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %20, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %19, %28 (hasExternalUses)
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %18, %30 (hasExternalUses)
%32:i32 = lshr %31, 31:i32
%33:i32 = addnsw 4294967295:i32, %32 (hasExternalUses)
%34:i32 = and 67108863:i32, %33 (hasExternalUses)
%35:i32 = and %17, %34
%36:i32 = ashr %31, 31:i32 (hasExternalUses)
%37:i32 = and %16, %36
%38:i32 = or %35, %37
%39:i32 = and %25, %34
%40:i32 = and %23, %36
%41:i32 = or %39, %40 (hasExternalUses)
%42:i32 = shl %41, 26:i32
%43:i32 = or %38, %42
%44:i64 = zext %43
%45:i64 = addnw %1, %44
infer %45

; *****
; For LLVM instruction:
;  %91 = trunc i64 %90 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = var
%7:i32 = lshr %6, 26:i32
%8:i32 = add %5, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %4, %9
%11:i32 = lshr %10, 26:i32
%12:i32 = add %3, %11 (hasExternalUses)
%13:i32 = lshr %12, 26:i32
%14:i32 = mulnw 5:i32, %13
%15:i32 = add %2, %14
%16:i32 = and 67108863:i32, %15
%17:i32 = addnw 5:i32, %16
%18:i32 = or 4227858432:i32, %12
%19:i32 = and 67108863:i32, %10 (hasExternalUses)
%20:i32 = and 67108863:i32, %8 (hasExternalUses)
%21:i32 = and 67108863:i32, %6
%22:i32 = lshr %15, 26:i32
%23:i32 = addnw %21, %22
%24:i32 = lshr %17, 26:i32
%25:i32 = addnw %23, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %20, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %19, %28 (hasExternalUses)
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %18, %30 (hasExternalUses)
%32:i32 = lshr %31, 31:i32
%33:i32 = addnsw 4294967295:i32, %32 (hasExternalUses)
%34:i32 = and 67108863:i32, %33 (hasExternalUses)
%35:i32 = and %17, %34
%36:i32 = ashr %31, 31:i32 (hasExternalUses)
%37:i32 = and %16, %36
%38:i32 = or %35, %37
%39:i32 = and %25, %34
%40:i32 = and %23, %36
%41:i32 = or %39, %40 (hasExternalUses)
%42:i32 = shl %41, 26:i32
%43:i32 = or %38, %42
%44:i64 = zext %43
%45:i64 = addnw %1, %44 (hasExternalUses)
%46:i32 = trunc %45
infer %46

; *****
; For LLVM instruction:
;  %92 = zext i32 %79 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2
%4:i32 = and 67108863:i32, %3
%5:i32 = and 67108863:i32, %1
%6:i32 = var
%7:i32 = var
%8:i32 = var
%9:i32 = lshr %3, 26:i32
%10:i32 = add %8, %9
%11:i32 = lshr %10, 26:i32
%12:i32 = add %7, %11 (hasExternalUses)
%13:i32 = lshr %12, 26:i32
%14:i32 = mulnw 5:i32, %13
%15:i32 = add %6, %14
%16:i32 = lshr %15, 26:i32
%17:i32 = addnw %5, %16
%18:i32 = and 67108863:i32, %15 (hasExternalUses)
%19:i32 = addnw 5:i32, %18 (hasExternalUses)
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %17, %20
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %4, %22
%24:i32 = or 4227858432:i32, %12
%25:i32 = and 67108863:i32, %10 (hasExternalUses)
%26:i32 = lshr %23, 26:i32
%27:i32 = addnw %25, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %24, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %23, %32
%34:i32 = ashr %29, 31:i32 (hasExternalUses)
%35:i32 = and %4, %34
%36:i32 = or %33, %35 (hasExternalUses)
%37:i32 = shl %36, 20:i32
%38:i32 = and %21, %32
%39:i32 = and %17, %34
%40:i32 = or %38, %39 (hasExternalUses)
%41:i32 = lshr %40, 6:i32
%42:i32 = or %37, %41
%43:i64 = zext %42
infer %43

; *****
; For LLVM instruction:
;  %94 = load i32, i32* %93, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %95 = zext i32 %94 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %96 = add nuw nsw i64 %92, %95
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = and 67108863:i32, %5
%7:i32 = and 67108863:i32, %3
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = lshr %5, 26:i32
%12:i32 = add %10, %11
%13:i32 = lshr %12, 26:i32
%14:i32 = add %9, %13 (hasExternalUses)
%15:i32 = lshr %14, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %8, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %7, %18
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %6, %24
%26:i32 = or 4227858432:i32, %14
%27:i32 = and 67108863:i32, %12 (hasExternalUses)
%28:i32 = lshr %25, 26:i32
%29:i32 = addnw %27, %28 (hasExternalUses)
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %26, %30 (hasExternalUses)
%32:i32 = lshr %31, 31:i32
%33:i32 = addnsw 4294967295:i32, %32 (hasExternalUses)
%34:i32 = and 67108863:i32, %33 (hasExternalUses)
%35:i32 = and %25, %34
%36:i32 = ashr %31, 31:i32 (hasExternalUses)
%37:i32 = and %6, %36
%38:i32 = or %35, %37 (hasExternalUses)
%39:i32 = shl %38, 20:i32
%40:i32 = and %23, %34
%41:i32 = and %19, %36
%42:i32 = or %40, %41 (hasExternalUses)
%43:i32 = lshr %42, 6:i32
%44:i32 = or %39, %43
%45:i64 = zext %44
%46:i64 = addnw %1, %45
infer %46

; *****
; For LLVM instruction:
;  %97 = lshr i64 %90, 32
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = var
%7:i32 = lshr %6, 26:i32
%8:i32 = add %5, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %4, %9
%11:i32 = lshr %10, 26:i32
%12:i32 = add %3, %11 (hasExternalUses)
%13:i32 = lshr %12, 26:i32
%14:i32 = mulnw 5:i32, %13
%15:i32 = add %2, %14
%16:i32 = and 67108863:i32, %15
%17:i32 = addnw 5:i32, %16
%18:i32 = or 4227858432:i32, %12
%19:i32 = and 67108863:i32, %10 (hasExternalUses)
%20:i32 = and 67108863:i32, %8 (hasExternalUses)
%21:i32 = and 67108863:i32, %6
%22:i32 = lshr %15, 26:i32
%23:i32 = addnw %21, %22
%24:i32 = lshr %17, 26:i32
%25:i32 = addnw %23, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %20, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %19, %28 (hasExternalUses)
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %18, %30 (hasExternalUses)
%32:i32 = lshr %31, 31:i32
%33:i32 = addnsw 4294967295:i32, %32 (hasExternalUses)
%34:i32 = and 67108863:i32, %33 (hasExternalUses)
%35:i32 = and %17, %34
%36:i32 = ashr %31, 31:i32 (hasExternalUses)
%37:i32 = and %16, %36
%38:i32 = or %35, %37
%39:i32 = and %25, %34
%40:i32 = and %23, %36
%41:i32 = or %39, %40 (hasExternalUses)
%42:i32 = shl %41, 26:i32
%43:i32 = or %38, %42
%44:i64 = zext %43
%45:i64 = addnw %1, %44 (hasExternalUses)
%46:i64 = lshr %45, 32:i64
infer %46

; *****
; For LLVM instruction:
;  %98 = add nuw nsw i64 %96, %97
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = and 67108863:i32, %5
%7:i32 = and 67108863:i32, %3
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = lshr %5, 26:i32
%12:i32 = add %10, %11
%13:i32 = lshr %12, 26:i32
%14:i32 = add %9, %13 (hasExternalUses)
%15:i32 = lshr %14, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %8, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %7, %18
%20:i32 = and 67108863:i32, %17
%21:i32 = addnw 5:i32, %20
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %6, %24
%26:i32 = or 4227858432:i32, %14
%27:i32 = and 67108863:i32, %12 (hasExternalUses)
%28:i32 = lshr %25, 26:i32
%29:i32 = addnw %27, %28 (hasExternalUses)
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %26, %30 (hasExternalUses)
%32:i32 = lshr %31, 31:i32
%33:i32 = addnsw 4294967295:i32, %32 (hasExternalUses)
%34:i32 = and 67108863:i32, %33 (hasExternalUses)
%35:i32 = and %25, %34
%36:i32 = ashr %31, 31:i32 (hasExternalUses)
%37:i32 = and %6, %36
%38:i32 = or %35, %37 (hasExternalUses)
%39:i32 = shl %38, 20:i32
%40:i32 = and %23, %34
%41:i32 = and %19, %36
%42:i32 = or %40, %41
%43:i32 = lshr %42, 6:i32
%44:i32 = or %39, %43
%45:i64 = zext %44
%46:i64 = addnw %1, %45
%47:i32 = var
%48:i64 = zext %47
%49:i32 = and %21, %34
%50:i32 = and %20, %36
%51:i32 = or %49, %50
%52:i32 = shl %42, 26:i32
%53:i32 = or %51, %52
%54:i64 = zext %53
%55:i64 = addnw %48, %54 (hasExternalUses)
%56:i64 = lshr %55, 32:i64
%57:i64 = addnw %46, %56
infer %57

; *****
; For LLVM instruction:
;  %99 = trunc i64 %98 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = and 67108863:i32, %5
%7:i32 = and 67108863:i32, %3
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = lshr %5, 26:i32
%12:i32 = add %10, %11
%13:i32 = lshr %12, 26:i32
%14:i32 = add %9, %13 (hasExternalUses)
%15:i32 = lshr %14, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %8, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %7, %18
%20:i32 = and 67108863:i32, %17
%21:i32 = addnw 5:i32, %20
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %6, %24
%26:i32 = or 4227858432:i32, %14
%27:i32 = and 67108863:i32, %12 (hasExternalUses)
%28:i32 = lshr %25, 26:i32
%29:i32 = addnw %27, %28 (hasExternalUses)
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %26, %30 (hasExternalUses)
%32:i32 = lshr %31, 31:i32
%33:i32 = addnsw 4294967295:i32, %32 (hasExternalUses)
%34:i32 = and 67108863:i32, %33 (hasExternalUses)
%35:i32 = and %25, %34
%36:i32 = ashr %31, 31:i32 (hasExternalUses)
%37:i32 = and %6, %36
%38:i32 = or %35, %37 (hasExternalUses)
%39:i32 = shl %38, 20:i32
%40:i32 = and %23, %34
%41:i32 = and %19, %36
%42:i32 = or %40, %41
%43:i32 = lshr %42, 6:i32
%44:i32 = or %39, %43
%45:i64 = zext %44
%46:i64 = addnw %1, %45
%47:i32 = var
%48:i64 = zext %47
%49:i32 = and %21, %34
%50:i32 = and %20, %36
%51:i32 = or %49, %50
%52:i32 = shl %42, 26:i32
%53:i32 = or %51, %52
%54:i64 = zext %53
%55:i64 = addnw %48, %54 (hasExternalUses)
%56:i64 = lshr %55, 32:i64
%57:i64 = addnw %46, %56 (hasExternalUses)
%58:i32 = trunc %57
infer %58

; *****
; For LLVM instruction:
;  %100 = zext i32 %82 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5
%7:i32 = and 67108863:i32, %6
%8:i32 = and 67108863:i32, %4
%9:i32 = and 67108863:i32, %2
%10:i32 = var
%11:i32 = var
%12:i32 = lshr %6, 26:i32
%13:i32 = add %11, %12 (hasExternalUses)
%14:i32 = lshr %13, 26:i32
%15:i32 = mulnw 5:i32, %14
%16:i32 = add %10, %15
%17:i32 = lshr %16, 26:i32
%18:i32 = addnw %9, %17 (hasExternalUses)
%19:i32 = and 67108863:i32, %16 (hasExternalUses)
%20:i32 = addnw 5:i32, %19 (hasExternalUses)
%21:i32 = lshr %20, 26:i32
%22:i32 = addnw %18, %21 (hasExternalUses)
%23:i32 = lshr %22, 26:i32
%24:i32 = addnw %8, %23
%25:i32 = lshr %24, 26:i32
%26:i32 = addnw %7, %25
%27:i32 = or 4227858432:i32, %13
%28:i32 = lshr %26, 26:i32
%29:i32 = addnsw %27, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %26, %32
%34:i32 = ashr %29, 31:i32 (hasExternalUses)
%35:i32 = and %7, %34
%36:i32 = or %33, %35 (hasExternalUses)
%37:i32 = shl %36, 14:i32
%38:i32 = and %24, %32
%39:i32 = and %8, %34
%40:i32 = or %38, %39 (hasExternalUses)
%41:i32 = lshr %40, 12:i32
%42:i32 = or %37, %41
%43:i64 = zext %42
infer %43

; *****
; For LLVM instruction:
;  %102 = load i32, i32* %101, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %103 = zext i32 %102 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %104 = add nuw nsw i64 %100, %103
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7
%9:i32 = and 67108863:i32, %8
%10:i32 = and 67108863:i32, %6
%11:i32 = and 67108863:i32, %4
%12:i32 = var
%13:i32 = var
%14:i32 = lshr %8, 26:i32
%15:i32 = add %13, %14 (hasExternalUses)
%16:i32 = lshr %15, 26:i32
%17:i32 = mulnw 5:i32, %16
%18:i32 = add %12, %17
%19:i32 = lshr %18, 26:i32
%20:i32 = addnw %11, %19 (hasExternalUses)
%21:i32 = and 67108863:i32, %18 (hasExternalUses)
%22:i32 = addnw 5:i32, %21 (hasExternalUses)
%23:i32 = lshr %22, 26:i32
%24:i32 = addnw %20, %23 (hasExternalUses)
%25:i32 = lshr %24, 26:i32
%26:i32 = addnw %10, %25
%27:i32 = lshr %26, 26:i32
%28:i32 = addnw %9, %27
%29:i32 = or 4227858432:i32, %15
%30:i32 = lshr %28, 26:i32
%31:i32 = addnsw %29, %30 (hasExternalUses)
%32:i32 = lshr %31, 31:i32
%33:i32 = addnsw 4294967295:i32, %32 (hasExternalUses)
%34:i32 = and 67108863:i32, %33 (hasExternalUses)
%35:i32 = and %28, %34
%36:i32 = ashr %31, 31:i32 (hasExternalUses)
%37:i32 = and %9, %36
%38:i32 = or %35, %37 (hasExternalUses)
%39:i32 = shl %38, 14:i32
%40:i32 = and %26, %34
%41:i32 = and %10, %36
%42:i32 = or %40, %41 (hasExternalUses)
%43:i32 = lshr %42, 12:i32
%44:i32 = or %39, %43
%45:i64 = zext %44
%46:i64 = addnw %1, %45
infer %46

; *****
; For LLVM instruction:
;  %105 = lshr i64 %98, 32
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = and 67108863:i32, %5
%7:i32 = and 67108863:i32, %3
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = lshr %5, 26:i32
%12:i32 = add %10, %11
%13:i32 = lshr %12, 26:i32
%14:i32 = add %9, %13 (hasExternalUses)
%15:i32 = lshr %14, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %8, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %7, %18
%20:i32 = and 67108863:i32, %17
%21:i32 = addnw 5:i32, %20
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %6, %24
%26:i32 = or 4227858432:i32, %14
%27:i32 = and 67108863:i32, %12 (hasExternalUses)
%28:i32 = lshr %25, 26:i32
%29:i32 = addnw %27, %28 (hasExternalUses)
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %26, %30 (hasExternalUses)
%32:i32 = lshr %31, 31:i32
%33:i32 = addnsw 4294967295:i32, %32 (hasExternalUses)
%34:i32 = and 67108863:i32, %33 (hasExternalUses)
%35:i32 = and %25, %34
%36:i32 = ashr %31, 31:i32 (hasExternalUses)
%37:i32 = and %6, %36
%38:i32 = or %35, %37 (hasExternalUses)
%39:i32 = shl %38, 20:i32
%40:i32 = and %23, %34
%41:i32 = and %19, %36
%42:i32 = or %40, %41
%43:i32 = lshr %42, 6:i32
%44:i32 = or %39, %43
%45:i64 = zext %44
%46:i64 = addnw %1, %45
%47:i32 = var
%48:i64 = zext %47
%49:i32 = and %21, %34
%50:i32 = and %20, %36
%51:i32 = or %49, %50
%52:i32 = shl %42, 26:i32
%53:i32 = or %51, %52
%54:i64 = zext %53
%55:i64 = addnw %48, %54 (hasExternalUses)
%56:i64 = lshr %55, 32:i64
%57:i64 = addnw %46, %56 (hasExternalUses)
%58:i64 = lshr %57, 32:i64
infer %58

; *****
; For LLVM instruction:
;  %106 = add nuw nsw i64 %104, %105
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7
%9:i32 = and 67108863:i32, %8
%10:i32 = and 67108863:i32, %6
%11:i32 = and 67108863:i32, %4
%12:i32 = var
%13:i32 = var
%14:i32 = lshr %8, 26:i32
%15:i32 = add %13, %14 (hasExternalUses)
%16:i32 = lshr %15, 26:i32
%17:i32 = mulnw 5:i32, %16
%18:i32 = add %12, %17
%19:i32 = lshr %18, 26:i32
%20:i32 = addnw %11, %19
%21:i32 = and 67108863:i32, %18
%22:i32 = addnw 5:i32, %21
%23:i32 = lshr %22, 26:i32
%24:i32 = addnw %20, %23
%25:i32 = lshr %24, 26:i32
%26:i32 = addnw %10, %25
%27:i32 = lshr %26, 26:i32
%28:i32 = addnw %9, %27
%29:i32 = or 4227858432:i32, %15
%30:i32 = lshr %28, 26:i32
%31:i32 = addnsw %29, %30 (hasExternalUses)
%32:i32 = lshr %31, 31:i32
%33:i32 = addnsw 4294967295:i32, %32 (hasExternalUses)
%34:i32 = and 67108863:i32, %33
%35:i32 = and %28, %34
%36:i32 = ashr %31, 31:i32 (hasExternalUses)
%37:i32 = and %9, %36
%38:i32 = or %35, %37 (hasExternalUses)
%39:i32 = shl %38, 14:i32
%40:i32 = and %26, %34
%41:i32 = and %10, %36
%42:i32 = or %40, %41
%43:i32 = lshr %42, 12:i32
%44:i32 = or %39, %43
%45:i64 = zext %44
%46:i64 = addnw %1, %45
%47:i32 = var
%48:i64 = zext %47
%49:i32 = shl %42, 20:i32
%50:i32 = and %24, %34
%51:i32 = and %20, %36
%52:i32 = or %50, %51
%53:i32 = lshr %52, 6:i32
%54:i32 = or %49, %53
%55:i64 = zext %54
%56:i64 = addnw %48, %55
%57:i32 = var
%58:i64 = zext %57
%59:i32 = and %22, %34
%60:i32 = and %21, %36
%61:i32 = or %59, %60
%62:i32 = shl %52, 26:i32
%63:i32 = or %61, %62
%64:i64 = zext %63
%65:i64 = addnw %58, %64 (hasExternalUses)
%66:i64 = lshr %65, 32:i64
%67:i64 = addnw %56, %66 (hasExternalUses)
%68:i64 = lshr %67, 32:i64
%69:i64 = addnw %46, %68
infer %69

; *****
; For LLVM instruction:
;  %107 = trunc i64 %106 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7
%9:i32 = and 67108863:i32, %8
%10:i32 = and 67108863:i32, %6
%11:i32 = and 67108863:i32, %4
%12:i32 = var
%13:i32 = var
%14:i32 = lshr %8, 26:i32
%15:i32 = add %13, %14 (hasExternalUses)
%16:i32 = lshr %15, 26:i32
%17:i32 = mulnw 5:i32, %16
%18:i32 = add %12, %17
%19:i32 = lshr %18, 26:i32
%20:i32 = addnw %11, %19
%21:i32 = and 67108863:i32, %18
%22:i32 = addnw 5:i32, %21
%23:i32 = lshr %22, 26:i32
%24:i32 = addnw %20, %23
%25:i32 = lshr %24, 26:i32
%26:i32 = addnw %10, %25
%27:i32 = lshr %26, 26:i32
%28:i32 = addnw %9, %27
%29:i32 = or 4227858432:i32, %15
%30:i32 = lshr %28, 26:i32
%31:i32 = addnsw %29, %30 (hasExternalUses)
%32:i32 = lshr %31, 31:i32
%33:i32 = addnsw 4294967295:i32, %32 (hasExternalUses)
%34:i32 = and 67108863:i32, %33
%35:i32 = and %28, %34
%36:i32 = ashr %31, 31:i32 (hasExternalUses)
%37:i32 = and %9, %36
%38:i32 = or %35, %37 (hasExternalUses)
%39:i32 = shl %38, 14:i32
%40:i32 = and %26, %34
%41:i32 = and %10, %36
%42:i32 = or %40, %41
%43:i32 = lshr %42, 12:i32
%44:i32 = or %39, %43
%45:i64 = zext %44
%46:i64 = addnw %1, %45
%47:i32 = var
%48:i64 = zext %47
%49:i32 = shl %42, 20:i32
%50:i32 = and %24, %34
%51:i32 = and %20, %36
%52:i32 = or %50, %51
%53:i32 = lshr %52, 6:i32
%54:i32 = or %49, %53
%55:i64 = zext %54
%56:i64 = addnw %48, %55
%57:i32 = var
%58:i64 = zext %57
%59:i32 = and %22, %34
%60:i32 = and %21, %36
%61:i32 = or %59, %60
%62:i32 = shl %52, 26:i32
%63:i32 = or %61, %62
%64:i64 = zext %63
%65:i64 = addnw %58, %64 (hasExternalUses)
%66:i64 = lshr %65, 32:i64
%67:i64 = addnw %56, %66 (hasExternalUses)
%68:i64 = lshr %67, 32:i64
%69:i64 = addnw %46, %68 (hasExternalUses)
%70:i32 = trunc %69
infer %70

; *****
; For LLVM instruction:
;  %108 = zext i32 %85 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24 (hasExternalUses)
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %9, %30
%32:i32 = lshr %29, 31:i32
%33:i32 = addnsw 4294967295:i32, %32
%34:i32 = and %33, %29
%35:i32 = or %31, %34
%36:i32 = shl %35, 8:i32
%37:i32 = and 67108863:i32, %33 (hasExternalUses)
%38:i32 = and %27, %37
%39:i32 = and %11, %30
%40:i32 = or %38, %39 (hasExternalUses)
%41:i32 = lshr %40, 18:i32
%42:i32 = or %36, %41
%43:i64 = zext %42
infer %43 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %110 = load i32, i32* %109, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %111 = zext i32 %110 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
infer %1 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %112 = add nuw nsw i64 %108, %111
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %5, 26:i32
%7:i32 = add %4, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %3, %8
%10:i32 = lshr %9, 26:i32
%11:i32 = add %2, %10
%12:i32 = or 4227858432:i32, %11
%13:i32 = and 67108863:i32, %9
%14:i32 = and 67108863:i32, %7 (hasExternalUses)
%15:i32 = and 67108863:i32, %5
%16:i32 = var
%17:i32 = lshr %11, 26:i32
%18:i32 = mulnw 5:i32, %17
%19:i32 = add %16, %18
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %15, %20 (hasExternalUses)
%22:i32 = and 67108863:i32, %19 (hasExternalUses)
%23:i32 = addnw 5:i32, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %21, %24 (hasExternalUses)
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %14, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %13, %28
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %12, %30
%32:i32 = ashr %31, 31:i32 (hasExternalUses)
%33:i32 = and %11, %32
%34:i32 = lshr %31, 31:i32
%35:i32 = addnsw 4294967295:i32, %34
%36:i32 = and %35, %31
%37:i32 = or %33, %36
%38:i32 = shl %37, 8:i32
%39:i32 = and 67108863:i32, %35 (hasExternalUses)
%40:i32 = and %29, %39
%41:i32 = and %13, %32
%42:i32 = or %40, %41 (hasExternalUses)
%43:i32 = lshr %42, 18:i32
%44:i32 = or %38, %43
%45:i64 = zext %44
%46:i64 = addnw %1, %45
infer %46 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %113 = lshr i64 %106, 32
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7
%9:i32 = and 67108863:i32, %8
%10:i32 = and 67108863:i32, %6
%11:i32 = and 67108863:i32, %4
%12:i32 = var
%13:i32 = var
%14:i32 = lshr %8, 26:i32
%15:i32 = add %13, %14 (hasExternalUses)
%16:i32 = lshr %15, 26:i32
%17:i32 = mulnw 5:i32, %16
%18:i32 = add %12, %17
%19:i32 = lshr %18, 26:i32
%20:i32 = addnw %11, %19
%21:i32 = and 67108863:i32, %18
%22:i32 = addnw 5:i32, %21
%23:i32 = lshr %22, 26:i32
%24:i32 = addnw %20, %23
%25:i32 = lshr %24, 26:i32
%26:i32 = addnw %10, %25
%27:i32 = lshr %26, 26:i32
%28:i32 = addnw %9, %27
%29:i32 = or 4227858432:i32, %15
%30:i32 = lshr %28, 26:i32
%31:i32 = addnsw %29, %30 (hasExternalUses)
%32:i32 = lshr %31, 31:i32
%33:i32 = addnsw 4294967295:i32, %32 (hasExternalUses)
%34:i32 = and 67108863:i32, %33
%35:i32 = and %28, %34
%36:i32 = ashr %31, 31:i32 (hasExternalUses)
%37:i32 = and %9, %36
%38:i32 = or %35, %37 (hasExternalUses)
%39:i32 = shl %38, 14:i32
%40:i32 = and %26, %34
%41:i32 = and %10, %36
%42:i32 = or %40, %41
%43:i32 = lshr %42, 12:i32
%44:i32 = or %39, %43
%45:i64 = zext %44
%46:i64 = addnw %1, %45
%47:i32 = var
%48:i64 = zext %47
%49:i32 = shl %42, 20:i32
%50:i32 = and %24, %34
%51:i32 = and %20, %36
%52:i32 = or %50, %51
%53:i32 = lshr %52, 6:i32
%54:i32 = or %49, %53
%55:i64 = zext %54
%56:i64 = addnw %48, %55
%57:i32 = var
%58:i64 = zext %57
%59:i32 = and %22, %34
%60:i32 = and %21, %36
%61:i32 = or %59, %60
%62:i32 = shl %52, 26:i32
%63:i32 = or %61, %62
%64:i64 = zext %63
%65:i64 = addnw %58, %64 (hasExternalUses)
%66:i64 = lshr %65, 32:i64
%67:i64 = addnw %56, %66 (hasExternalUses)
%68:i64 = lshr %67, 32:i64
%69:i64 = addnw %46, %68 (hasExternalUses)
%70:i64 = lshr %69, 32:i64
infer %70 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %114 = add nuw nsw i64 %112, %113
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %5, 26:i32
%7:i32 = add %4, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %3, %8
%10:i32 = lshr %9, 26:i32
%11:i32 = add %2, %10
%12:i32 = or 4227858432:i32, %11
%13:i32 = and 67108863:i32, %9
%14:i32 = and 67108863:i32, %7
%15:i32 = and 67108863:i32, %5
%16:i32 = var
%17:i32 = lshr %11, 26:i32
%18:i32 = mulnw 5:i32, %17
%19:i32 = add %16, %18
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %15, %20
%22:i32 = and 67108863:i32, %19
%23:i32 = addnw 5:i32, %22
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %21, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %14, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %13, %28
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %12, %30
%32:i32 = ashr %31, 31:i32
%33:i32 = and %11, %32
%34:i32 = lshr %31, 31:i32
%35:i32 = addnsw 4294967295:i32, %34
%36:i32 = and %35, %31
%37:i32 = or %33, %36
%38:i32 = shl %37, 8:i32
%39:i32 = and 67108863:i32, %35
%40:i32 = and %29, %39
%41:i32 = and %13, %32
%42:i32 = or %40, %41
%43:i32 = lshr %42, 18:i32
%44:i32 = or %38, %43
%45:i64 = zext %44
%46:i64 = addnw %1, %45
%47:i32 = var
%48:i64 = zext %47
%49:i32 = shl %42, 14:i32
%50:i32 = and %27, %39
%51:i32 = and %14, %32
%52:i32 = or %50, %51
%53:i32 = lshr %52, 12:i32
%54:i32 = or %49, %53
%55:i64 = zext %54
%56:i64 = addnw %48, %55
%57:i32 = var
%58:i64 = zext %57
%59:i32 = shl %52, 20:i32
%60:i32 = and %25, %39
%61:i32 = and %21, %32
%62:i32 = or %60, %61
%63:i32 = lshr %62, 6:i32
%64:i32 = or %59, %63
%65:i64 = zext %64
%66:i64 = addnw %58, %65
%67:i32 = var
%68:i64 = zext %67
%69:i32 = and %23, %39
%70:i32 = and %22, %32
%71:i32 = or %69, %70
%72:i32 = shl %62, 26:i32
%73:i32 = or %71, %72
%74:i64 = zext %73
%75:i64 = addnw %68, %74 (hasExternalUses)
%76:i64 = lshr %75, 32:i64
%77:i64 = addnw %66, %76 (hasExternalUses)
%78:i64 = lshr %77, 32:i64
%79:i64 = addnw %56, %78 (hasExternalUses)
%80:i64 = lshr %79, 32:i64
%81:i64 = addnw %46, %80
infer %81 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %115 = trunc i64 %114 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %5, 26:i32
%7:i32 = add %4, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %3, %8
%10:i32 = lshr %9, 26:i32
%11:i32 = add %2, %10
%12:i32 = or 4227858432:i32, %11
%13:i32 = and 67108863:i32, %9
%14:i32 = and 67108863:i32, %7
%15:i32 = and 67108863:i32, %5
%16:i32 = var
%17:i32 = lshr %11, 26:i32
%18:i32 = mulnw 5:i32, %17
%19:i32 = add %16, %18
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %15, %20
%22:i32 = and 67108863:i32, %19
%23:i32 = addnw 5:i32, %22
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %21, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %14, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %13, %28
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %12, %30
%32:i32 = ashr %31, 31:i32
%33:i32 = and %11, %32
%34:i32 = lshr %31, 31:i32
%35:i32 = addnsw 4294967295:i32, %34
%36:i32 = and %35, %31
%37:i32 = or %33, %36
%38:i32 = shl %37, 8:i32
%39:i32 = and 67108863:i32, %35
%40:i32 = and %29, %39
%41:i32 = and %13, %32
%42:i32 = or %40, %41
%43:i32 = lshr %42, 18:i32
%44:i32 = or %38, %43
%45:i64 = zext %44
%46:i64 = addnw %1, %45
%47:i32 = var
%48:i64 = zext %47
%49:i32 = shl %42, 14:i32
%50:i32 = and %27, %39
%51:i32 = and %14, %32
%52:i32 = or %50, %51
%53:i32 = lshr %52, 12:i32
%54:i32 = or %49, %53
%55:i64 = zext %54
%56:i64 = addnw %48, %55
%57:i32 = var
%58:i64 = zext %57
%59:i32 = shl %52, 20:i32
%60:i32 = and %25, %39
%61:i32 = and %21, %32
%62:i32 = or %60, %61
%63:i32 = lshr %62, 6:i32
%64:i32 = or %59, %63
%65:i64 = zext %64
%66:i64 = addnw %58, %65
%67:i32 = var
%68:i64 = zext %67
%69:i32 = and %23, %39
%70:i32 = and %22, %32
%71:i32 = or %69, %70
%72:i32 = shl %62, 26:i32
%73:i32 = or %71, %72
%74:i64 = zext %73
%75:i64 = addnw %68, %74 (hasExternalUses)
%76:i64 = lshr %75, 32:i64
%77:i64 = addnw %66, %76 (hasExternalUses)
%78:i64 = lshr %77, 32:i64
%79:i64 = addnw %56, %78 (hasExternalUses)
%80:i64 = lshr %79, 32:i64
%81:i64 = addnw %46, %80
%82:i32 = trunc %81
infer %82
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i1 = eq 0:i64, %0
pc %1 0:i1
%2:i32 = trunc %0
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i1 = eq 0:i64, %0
pc %1 0:i1
%2:i64 = add 1:i64, %0
infer %2


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 524289
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i1 = eq 0:i64, %0
pc %1 0:i1
%2:i64 = add 1:i64, %0
%3:i1 = ult %2, 16:i64
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i1 = eq 0:i64, %0
pc %1 0:i1
%2:i64 = add 1:i64, %0
%3:i1 = ult %2, 16:i64
pc %3 1:i1
%4:i32 = trunc %0 (hasExternalUses)
%5:i32 = add 1:i32, %4
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 9
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i1 = eq 0:i64, %0
pc %1 0:i1
%2:i64 = add 1:i64, %0
%3:i1 = ult %2, 16:i64
pc %3 1:i1
%4:i32 = trunc %0 (hasExternalUses)
%5:i32 = sub 15:i32, %4
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 7
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 14
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = lshr %0, 26:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 63
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = lshr %0, 26:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2 (hasExternalUses)
%4:i32 = lshr %3, 26:i32
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 63
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2 (hasExternalUses)
%4:i32 = and 67108863:i32, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 67108863
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 7 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3 (hasExternalUses)
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5
infer %6


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = lshr %0, 26:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3 (hasExternalUses)
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5 (hasExternalUses)
%7:i32 = lshr %6, 26:i32
infer %7


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 63
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3 (hasExternalUses)
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5 (hasExternalUses)
%7:i32 = and 67108863:i32, %6
infer %7


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 67108863
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4 (hasExternalUses)
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6 (hasExternalUses)
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8
infer %9


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = lshr %0, 26:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4 (hasExternalUses)
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6 (hasExternalUses)
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = lshr %9, 26:i32
infer %10


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 63
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4 (hasExternalUses)
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6 (hasExternalUses)
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = lshr %9, 26:i32
%11:i32 = mulnw 5:i32, %10
infer %11


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 80
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5 (hasExternalUses)
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7 (hasExternalUses)
%9:i32 = lshr %8, 26:i32
%10:i32 = add %1, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = mulnw 5:i32, %11
%13:i32 = add %0, %12
infer %13


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5 (hasExternalUses)
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7 (hasExternalUses)
%9:i32 = lshr %8, 26:i32
%10:i32 = add %1, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = mulnw 5:i32, %11
%13:i32 = add %0, %12 (hasExternalUses)
%14:i32 = lshr %13, 26:i32
infer %14


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 63
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5 (hasExternalUses)
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7 (hasExternalUses)
%9:i32 = lshr %8, 26:i32
%10:i32 = add %1, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = mulnw 5:i32, %11
%13:i32 = add %0, %12 (hasExternalUses)
%14:i32 = and 67108863:i32, %13
infer %14


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 67108863
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = and 67108863:i32, %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %0, 26:i32
%7:i32 = add %5, %6 (hasExternalUses)
%8:i32 = lshr %7, 26:i32
%9:i32 = add %4, %8 (hasExternalUses)
%10:i32 = lshr %9, 26:i32
%11:i32 = add %3, %10 (hasExternalUses)
%12:i32 = lshr %11, 26:i32
%13:i32 = mulnw 5:i32, %12
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = lshr %14, 26:i32
%16:i32 = addnw %1, %15
infer %16


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 8192
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = and 67108863:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5 (hasExternalUses)
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7 (hasExternalUses)
%9:i32 = lshr %8, 26:i32
%10:i32 = add %1, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = mulnw 5:i32, %11
%13:i32 = add %0, %12 (hasExternalUses)
%14:i32 = and 67108863:i32, %13 (hasExternalUses)
%15:i32 = addnw 5:i32, %14
infer %15


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 5
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 33554437
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5 (hasExternalUses)
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7 (hasExternalUses)
%9:i32 = lshr %8, 26:i32
%10:i32 = add %1, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = mulnw 5:i32, %11
%13:i32 = add %0, %12 (hasExternalUses)
%14:i32 = and 67108863:i32, %13 (hasExternalUses)
%15:i32 = addnw 5:i32, %14 (hasExternalUses)
%16:i32 = lshr %15, 26:i32
infer %16


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = and 67108863:i32, %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %0, 26:i32
%7:i32 = add %5, %6 (hasExternalUses)
%8:i32 = lshr %7, 26:i32
%9:i32 = add %4, %8 (hasExternalUses)
%10:i32 = lshr %9, 26:i32
%11:i32 = add %3, %10 (hasExternalUses)
%12:i32 = lshr %11, 26:i32
%13:i32 = mulnw 5:i32, %12
%14:i32 = add %2, %13
%15:i32 = lshr %14, 26:i32
%16:i32 = addnw %1, %15 (hasExternalUses)
%17:i32 = and 67108863:i32, %14 (hasExternalUses)
%18:i32 = addnw 5:i32, %17 (hasExternalUses)
%19:i32 = lshr %18, 26:i32
%20:i32 = addnw %16, %19
infer %20


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = and 67108863:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = and 67108863:i32, %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %0, 26:i32
%7:i32 = add %5, %6 (hasExternalUses)
%8:i32 = lshr %7, 26:i32
%9:i32 = add %4, %8 (hasExternalUses)
%10:i32 = lshr %9, 26:i32
%11:i32 = add %3, %10 (hasExternalUses)
%12:i32 = lshr %11, 26:i32
%13:i32 = mulnw 5:i32, %12
%14:i32 = add %2, %13
%15:i32 = lshr %14, 26:i32
%16:i32 = addnw %1, %15 (hasExternalUses)
%17:i32 = and 67108863:i32, %14 (hasExternalUses)
%18:i32 = addnw 5:i32, %17 (hasExternalUses)
%19:i32 = lshr %18, 26:i32
%20:i32 = addnw %16, %19 (hasExternalUses)
%21:i32 = lshr %20, 26:i32
infer %21


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2
%4:i32 = and 67108863:i32, %3 (hasExternalUses)
%5:i32 = and 67108863:i32, %1
%6:i32 = var
%7:i32 = var
%8:i32 = var
%9:i32 = lshr %3, 26:i32
%10:i32 = add %8, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = add %7, %11 (hasExternalUses)
%13:i32 = lshr %12, 26:i32
%14:i32 = mulnw 5:i32, %13
%15:i32 = add %6, %14
%16:i32 = lshr %15, 26:i32
%17:i32 = addnw %5, %16 (hasExternalUses)
%18:i32 = and 67108863:i32, %15 (hasExternalUses)
%19:i32 = addnw 5:i32, %18 (hasExternalUses)
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %17, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %4, %22
infer %23


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i32 = lshr %0, 26:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2
%4:i32 = and 67108863:i32, %3 (hasExternalUses)
%5:i32 = and 67108863:i32, %1
%6:i32 = var
%7:i32 = var
%8:i32 = var
%9:i32 = lshr %3, 26:i32
%10:i32 = add %8, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = add %7, %11 (hasExternalUses)
%13:i32 = lshr %12, 26:i32
%14:i32 = mulnw 5:i32, %13
%15:i32 = add %6, %14
%16:i32 = lshr %15, 26:i32
%17:i32 = addnw %5, %16 (hasExternalUses)
%18:i32 = and 67108863:i32, %15 (hasExternalUses)
%19:i32 = addnw 5:i32, %18 (hasExternalUses)
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %17, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %4, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
infer %24


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5
%7:i32 = and 67108863:i32, %6 (hasExternalUses)
%8:i32 = and 67108863:i32, %4 (hasExternalUses)
%9:i32 = and 67108863:i32, %2
%10:i32 = var
%11:i32 = var
%12:i32 = lshr %6, 26:i32
%13:i32 = add %11, %12 (hasExternalUses)
%14:i32 = lshr %13, 26:i32
%15:i32 = mulnw 5:i32, %14
%16:i32 = add %10, %15
%17:i32 = lshr %16, 26:i32
%18:i32 = addnw %9, %17 (hasExternalUses)
%19:i32 = and 67108863:i32, %16 (hasExternalUses)
%20:i32 = addnw 5:i32, %19 (hasExternalUses)
%21:i32 = lshr %20, 26:i32
%22:i32 = addnw %18, %21 (hasExternalUses)
%23:i32 = lshr %22, 26:i32
%24:i32 = addnw %8, %23 (hasExternalUses)
%25:i32 = lshr %24, 26:i32
%26:i32 = addnw %7, %25
infer %26


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5
%7:i32 = and 67108863:i32, %6 (hasExternalUses)
%8:i32 = and 67108863:i32, %4 (hasExternalUses)
%9:i32 = and 67108863:i32, %2
%10:i32 = var
%11:i32 = var
%12:i32 = lshr %6, 26:i32
%13:i32 = add %11, %12 (hasExternalUses)
%14:i32 = lshr %13, 26:i32
%15:i32 = mulnw 5:i32, %14
%16:i32 = add %10, %15
%17:i32 = lshr %16, 26:i32
%18:i32 = addnw %9, %17 (hasExternalUses)
%19:i32 = and 67108863:i32, %16 (hasExternalUses)
%20:i32 = addnw 5:i32, %19 (hasExternalUses)
%21:i32 = lshr %20, 26:i32
%22:i32 = addnw %18, %21 (hasExternalUses)
%23:i32 = lshr %22, 26:i32
%24:i32 = addnw %8, %23 (hasExternalUses)
%25:i32 = lshr %24, 26:i32
%26:i32 = addnw %7, %25 (hasExternalUses)
%27:i32 = lshr %26, 26:i32
infer %27


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4 (hasExternalUses)
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6 (hasExternalUses)
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = or 4227858432:i32, %9
infer %10


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -67108864
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24 (hasExternalUses)
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28
infer %29 (demandedBits=10000000111111111111111111111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -2147483648
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -67108848
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24 (hasExternalUses)
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
infer %30 (demandedBits=00000011111111111111111111111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24 (hasExternalUses)
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30
infer %31 (demandedBits=00000011111111111111111111111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24 (hasExternalUses)
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31
infer %32 (demandedBits=00001111111111111111111111111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 67108863
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %1, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = mulnw 5:i32, %11
%13:i32 = add %0, %12
%14:i32 = and 67108863:i32, %13 (hasExternalUses)
%15:i32 = addnw 5:i32, %14
%16:i32 = or 4227858432:i32, %10
%17:i32 = and 67108863:i32, %8 (hasExternalUses)
%18:i32 = and 67108863:i32, %6 (hasExternalUses)
%19:i32 = and 67108863:i32, %4
%20:i32 = lshr %13, 26:i32
%21:i32 = addnw %19, %20 (hasExternalUses)
%22:i32 = lshr %15, 26:i32
%23:i32 = addnw %21, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %18, %24 (hasExternalUses)
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %17, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %16, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %15, %32
infer %33


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 3
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = and 67108863:i32, %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %0, 26:i32
%7:i32 = add %5, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %4, %8
%10:i32 = lshr %9, 26:i32
%11:i32 = add %3, %10 (hasExternalUses)
%12:i32 = lshr %11, 26:i32
%13:i32 = mulnw 5:i32, %12
%14:i32 = add %2, %13
%15:i32 = lshr %14, 26:i32
%16:i32 = addnw %1, %15 (hasExternalUses)
%17:i32 = and 67108863:i32, %14 (hasExternalUses)
%18:i32 = addnw 5:i32, %17 (hasExternalUses)
%19:i32 = lshr %18, 26:i32
%20:i32 = addnw %16, %19
%21:i32 = or 4227858432:i32, %11
%22:i32 = and 67108863:i32, %9 (hasExternalUses)
%23:i32 = and 67108863:i32, %7 (hasExternalUses)
%24:i32 = lshr %20, 26:i32
%25:i32 = addnw %23, %24 (hasExternalUses)
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %22, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %21, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %20, %32
infer %33


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i32 = and 67108863:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2
%4:i32 = and 67108863:i32, %3 (hasExternalUses)
%5:i32 = and 67108863:i32, %1
%6:i32 = var
%7:i32 = var
%8:i32 = var
%9:i32 = lshr %3, 26:i32
%10:i32 = add %8, %9
%11:i32 = lshr %10, 26:i32
%12:i32 = add %7, %11 (hasExternalUses)
%13:i32 = lshr %12, 26:i32
%14:i32 = mulnw 5:i32, %13
%15:i32 = add %6, %14
%16:i32 = lshr %15, 26:i32
%17:i32 = addnw %5, %16 (hasExternalUses)
%18:i32 = and 67108863:i32, %15 (hasExternalUses)
%19:i32 = addnw 5:i32, %18 (hasExternalUses)
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %17, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %4, %22
%24:i32 = or 4227858432:i32, %12
%25:i32 = and 67108863:i32, %10 (hasExternalUses)
%26:i32 = lshr %23, 26:i32
%27:i32 = addnw %25, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %24, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %23, %32
infer %33


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
second query is UNSAT-- this guess works
Dataflow Pruned 0/0
There are 1 Guesses
There are 1 RHSs before deduplication
There are 1 RHSs after deduplication
"
; No valid RHS in the list
#########################################################

Module before replacement:
; ModuleID = './poly1305_donna.c.bc'
source_filename = "crypto_onetimeauth/poly1305/donna/poly1305_donna.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.crypto_onetimeauth_poly1305_implementation = type { i32 (i8*, i8*, i64, i8*)*, i32 (i8*, i8*, i64, i8*)*, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)*, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*, i64)*, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)* }
%struct.crypto_onetimeauth_poly1305_state = type { [256 x i8] }
%struct.poly1305_state_internal_t = type { [5 x i32], [5 x i32], [4 x i32], i64, [16 x i8], i8 }

@crypto_onetimeauth_poly1305_donna_implementation = hidden local_unnamed_addr global %struct.crypto_onetimeauth_poly1305_implementation { i32 (i8*, i8*, i64, i8*)* @crypto_onetimeauth_poly1305_donna, i32 (i8*, i8*, i64, i8*)* @crypto_onetimeauth_poly1305_donna_verify, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)* @crypto_onetimeauth_poly1305_donna_init, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*, i64)* @crypto_onetimeauth_poly1305_donna_update, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)* @crypto_onetimeauth_poly1305_donna_final }, align 4

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna(i8* nocapture %0, i8* nocapture readonly %1, i64 %2, i8* nocapture readonly %3) #0 {
  %5 = alloca %struct.poly1305_state_internal_t, align 64
  %6 = bitcast %struct.poly1305_state_internal_t* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %6) #6
  %7 = bitcast i8* %3 to i32*
  %8 = load i32, i32* %7, align 1
  %9 = and i32 %8, 67108863
  %10 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 0
  store i32 %9, i32* %10, align 64
  %11 = getelementptr i8, i8* %3, i32 3
  %12 = bitcast i8* %11 to i32*
  %13 = load i32, i32* %12, align 1
  %14 = lshr i32 %13, 2
  %15 = and i32 %14, 67108611
  %16 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 1
  store i32 %15, i32* %16, align 4
  %17 = getelementptr i8, i8* %3, i32 6
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 1
  %20 = lshr i32 %19, 4
  %21 = and i32 %20, 67092735
  %22 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 2
  store i32 %21, i32* %22, align 8
  %23 = getelementptr i8, i8* %3, i32 9
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 1
  %26 = lshr i32 %25, 6
  %27 = and i32 %26, 66076671
  %28 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 3
  store i32 %27, i32* %28, align 4
  %29 = getelementptr i8, i8* %3, i32 12
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 1
  %32 = lshr i32 %31, 8
  %33 = and i32 %32, 1048575
  %34 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 4
  store i32 %33, i32* %34, align 16
  %35 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 1, i32 0
  %36 = getelementptr i8, i8* %3, i32 16
  %37 = bitcast i8* %36 to i32*
  %38 = bitcast i32* %35 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(20) %38, i8 0, i64 20, i1 false) #6
  %39 = load i32, i32* %37, align 1
  %40 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 0
  store i32 %39, i32* %40, align 8
  %41 = getelementptr i8, i8* %3, i32 20
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %42, align 1
  %44 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 1
  store i32 %43, i32* %44, align 4
  %45 = getelementptr i8, i8* %3, i32 24
  %46 = bitcast i8* %45 to i32*
  %47 = load i32, i32* %46, align 1
  %48 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 2
  store i32 %47, i32* %48, align 8
  %49 = getelementptr i8, i8* %3, i32 28
  %50 = bitcast i8* %49 to i32*
  %51 = load i32, i32* %50, align 1
  %52 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 3
  store i32 %51, i32* %52, align 4
  %53 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 3
  store i64 0, i64* %53, align 8
  %54 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 5
  store i8 0, i8* %54, align 16
  call fastcc void @poly1305_update(%struct.poly1305_state_internal_t* nonnull %5, i8* %1, i64 %2)
  call fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* nonnull %5, i8* %0)
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %6) #6
  ret i32 0
}

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_verify(i8* %0, i8* nocapture readonly %1, i64 %2, i8* nocapture readonly %3) #0 {
  %5 = alloca %struct.poly1305_state_internal_t, align 64
  %6 = alloca [16 x i8], align 16
  %7 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #6
  %8 = bitcast %struct.poly1305_state_internal_t* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %8) #6
  %9 = bitcast i8* %3 to i32*
  %10 = load i32, i32* %9, align 1
  %11 = and i32 %10, 67108863
  %12 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 0
  store i32 %11, i32* %12, align 64
  %13 = getelementptr i8, i8* %3, i32 3
  %14 = bitcast i8* %13 to i32*
  %15 = load i32, i32* %14, align 1
  %16 = lshr i32 %15, 2
  %17 = and i32 %16, 67108611
  %18 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 1
  store i32 %17, i32* %18, align 4
  %19 = getelementptr i8, i8* %3, i32 6
  %20 = bitcast i8* %19 to i32*
  %21 = load i32, i32* %20, align 1
  %22 = lshr i32 %21, 4
  %23 = and i32 %22, 67092735
  %24 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 2
  store i32 %23, i32* %24, align 8
  %25 = getelementptr i8, i8* %3, i32 9
  %26 = bitcast i8* %25 to i32*
  %27 = load i32, i32* %26, align 1
  %28 = lshr i32 %27, 6
  %29 = and i32 %28, 66076671
  %30 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 3
  store i32 %29, i32* %30, align 4
  %31 = getelementptr i8, i8* %3, i32 12
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 1
  %34 = lshr i32 %33, 8
  %35 = and i32 %34, 1048575
  %36 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 4
  store i32 %35, i32* %36, align 16
  %37 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 1, i32 0
  %38 = getelementptr i8, i8* %3, i32 16
  %39 = bitcast i8* %38 to i32*
  %40 = bitcast i32* %37 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(20) %40, i8 0, i64 20, i1 false) #6
  %41 = load i32, i32* %39, align 1
  %42 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 0
  store i32 %41, i32* %42, align 8
  %43 = getelementptr i8, i8* %3, i32 20
  %44 = bitcast i8* %43 to i32*
  %45 = load i32, i32* %44, align 1
  %46 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 1
  store i32 %45, i32* %46, align 4
  %47 = getelementptr i8, i8* %3, i32 24
  %48 = bitcast i8* %47 to i32*
  %49 = load i32, i32* %48, align 1
  %50 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 2
  store i32 %49, i32* %50, align 8
  %51 = getelementptr i8, i8* %3, i32 28
  %52 = bitcast i8* %51 to i32*
  %53 = load i32, i32* %52, align 1
  %54 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 3
  store i32 %53, i32* %54, align 4
  %55 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 3
  store i64 0, i64* %55, align 8
  %56 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 5
  store i8 0, i8* %56, align 16
  call fastcc void @poly1305_update(%struct.poly1305_state_internal_t* nonnull %5, i8* %1, i64 %2) #6
  call fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* nonnull %5, i8* nonnull %7) #6
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %8) #6
  %57 = call i32 @crypto_verify_16(i8* %0, i8* nonnull %7) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #6
  ret i32 %57
}

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_init(%struct.crypto_onetimeauth_poly1305_state* nocapture %0, i8* nocapture readonly %1) #0 {
  %3 = bitcast i8* %1 to i32*
  %4 = load i32, i32* %3, align 1
  %5 = and i32 %4, 67108863
  %6 = bitcast %struct.crypto_onetimeauth_poly1305_state* %0 to i32*
  store i32 %5, i32* %6, align 8
  %7 = getelementptr i8, i8* %1, i32 3
  %8 = bitcast i8* %7 to i32*
  %9 = load i32, i32* %8, align 1
  %10 = lshr i32 %9, 2
  %11 = and i32 %10, 67108611
  %12 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 4
  %13 = bitcast i8* %12 to i32*
  store i32 %11, i32* %13, align 4
  %14 = getelementptr i8, i8* %1, i32 6
  %15 = bitcast i8* %14 to i32*
  %16 = load i32, i32* %15, align 1
  %17 = lshr i32 %16, 4
  %18 = and i32 %17, 67092735
  %19 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 8
  %20 = bitcast i8* %19 to i32*
  store i32 %18, i32* %20, align 8
  %21 = getelementptr i8, i8* %1, i32 9
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 1
  %24 = lshr i32 %23, 6
  %25 = and i32 %24, 66076671
  %26 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 12
  %27 = bitcast i8* %26 to i32*
  store i32 %25, i32* %27, align 4
  %28 = getelementptr i8, i8* %1, i32 12
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 1
  %31 = lshr i32 %30, 8
  %32 = and i32 %31, 1048575
  %33 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 16
  %34 = bitcast i8* %33 to i32*
  store i32 %32, i32* %34, align 8
  %35 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 20
  %36 = getelementptr i8, i8* %1, i32 16
  %37 = bitcast i8* %36 to i32*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(20) %35, i8 0, i64 20, i1 false) #6
  %38 = load i32, i32* %37, align 1
  %39 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 40
  %40 = bitcast i8* %39 to i32*
  store i32 %38, i32* %40, align 8
  %41 = getelementptr i8, i8* %1, i32 20
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %42, align 1
  %44 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 44
  %45 = bitcast i8* %44 to i32*
  store i32 %43, i32* %45, align 4
  %46 = getelementptr i8, i8* %1, i32 24
  %47 = bitcast i8* %46 to i32*
  %48 = load i32, i32* %47, align 1
  %49 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 48
  %50 = bitcast i8* %49 to i32*
  store i32 %48, i32* %50, align 8
  %51 = getelementptr i8, i8* %1, i32 28
  %52 = bitcast i8* %51 to i32*
  %53 = load i32, i32* %52, align 1
  %54 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 52
  %55 = bitcast i8* %54 to i32*
  store i32 %53, i32* %55, align 4
  %56 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 56
  %57 = bitcast i8* %56 to i64*
  store i64 0, i64* %57, align 8
  %58 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 80
  store i8 0, i8* %58, align 8
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_update(%struct.crypto_onetimeauth_poly1305_state* nocapture %0, i8* nocapture readonly %1, i64 %2) #1 {
  %4 = bitcast %struct.crypto_onetimeauth_poly1305_state* %0 to %struct.poly1305_state_internal_t*
  tail call fastcc void @poly1305_update(%struct.poly1305_state_internal_t* %4, i8* %1, i64 %2)
  ret i32 0
}

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_final(%struct.crypto_onetimeauth_poly1305_state* %0, i8* nocapture %1) #0 {
  %3 = bitcast %struct.crypto_onetimeauth_poly1305_state* %0 to %struct.poly1305_state_internal_t*
  tail call fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* %3, i8* %1)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #2

; Function Attrs: nofree norecurse nounwind
define internal fastcc void @poly1305_update(%struct.poly1305_state_internal_t* nocapture %0, i8* nocapture readonly %1, i64 %2) unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 3
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %33, label %7

7:                                                ; preds = %3
  %8 = sub i64 16, %5
  %9 = icmp ugt i64 %8, %2
  %10 = select i1 %9, i64 %2, i64 %8
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %24, label %12

12:                                               ; preds = %7, %12
  %13 = phi i64 [ %23, %12 ], [ %5, %7 ]
  %14 = phi i64 [ %21, %12 ], [ 0, %7 ]
  %15 = trunc i64 %14 to i32
  %16 = getelementptr i8, i8* %1, i32 %15
  %17 = load i8, i8* %16, align 1
  %18 = add i64 %13, %14
  %19 = trunc i64 %18 to i32
  %20 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 %19
  store i8 %17, i8* %20, align 1
  %21 = add nuw i64 %14, 1
  %22 = icmp ult i64 %21, %10
  %23 = load i64, i64* %4, align 8
  br i1 %22, label %12, label %24

24:                                               ; preds = %12, %7
  %25 = phi i64 [ %5, %7 ], [ %23, %12 ]
  %26 = add i64 %25, %10
  store i64 %26, i64* %4, align 8
  %27 = icmp ult i64 %26, 16
  br i1 %27, label %60, label %28

28:                                               ; preds = %24
  %29 = trunc i64 %10 to i32
  %30 = getelementptr i8, i8* %1, i32 %29
  %31 = sub i64 %2, %10
  %32 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 0
  tail call fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nonnull %0, i8* nonnull %32, i64 16)
  store i64 0, i64* %4, align 8
  br label %33

33:                                               ; preds = %28, %3
  %34 = phi i64 [ %2, %3 ], [ %31, %28 ]
  %35 = phi i8* [ %1, %3 ], [ %30, %28 ]
  %36 = icmp ugt i64 %34, 15
  br i1 %36, label %37, label %42

37:                                               ; preds = %33
  %38 = and i64 %34, -16
  tail call fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nonnull %0, i8* %35, i64 %38)
  %39 = trunc i64 %38 to i32
  %40 = getelementptr i8, i8* %35, i32 %39
  %41 = sub i64 %34, %38
  br label %42

42:                                               ; preds = %37, %33
  %43 = phi i64 [ %41, %37 ], [ %34, %33 ]
  %44 = phi i8* [ %40, %37 ], [ %35, %33 ]
  %45 = icmp eq i64 %43, 0
  br i1 %45, label %60, label %46

46:                                               ; preds = %42, %46
  %47 = phi i64 [ %55, %46 ], [ 0, %42 ]
  %48 = trunc i64 %47 to i32
  %49 = getelementptr i8, i8* %44, i32 %48
  %50 = load i8, i8* %49, align 1
  %51 = load i64, i64* %4, align 8
  %52 = add i64 %51, %47
  %53 = trunc i64 %52 to i32
  %54 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 %53
  store i8 %50, i8* %54, align 1
  %55 = add nuw i64 %47, 1
  %56 = icmp eq i64 %55, %43
  br i1 %56, label %57, label %46

57:                                               ; preds = %46
  %58 = load i64, i64* %4, align 8
  %59 = add i64 %58, %43
  store i64 %59, i64* %4, align 8
  br label %60

60:                                               ; preds = %57, %42, %24
  ret void
}

; Function Attrs: noinline nounwind
define internal fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* %0, i8* nocapture %1) unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 3
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %20, label %6

6:                                                ; preds = %2
  %7 = trunc i64 %4 to i32
  %8 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 %7
  store i8 1, i8* %8, align 1
  %9 = add i64 %4, 1
  %10 = icmp ult i64 %9, 16
  br i1 %10, label %11, label %17

11:                                               ; preds = %6
  %12 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 16
  %13 = bitcast i32* %12 to i8*
  %14 = add i32 %7, 1
  %15 = getelementptr i8, i8* %13, i32 %14
  %16 = sub i32 15, %7
  call void @llvm.memset.p0i8.i32(i8* align 1 %15, i8 0, i32 %16, i1 false)
  br label %17

17:                                               ; preds = %11, %6
  %18 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 5
  store i8 1, i8* %18, align 8
  %19 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 0
  tail call fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nonnull %0, i8* nonnull %19, i64 16)
  br label %20

20:                                               ; preds = %2, %17
  %21 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 0
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 2
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 3
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 4
  %30 = load i32, i32* %29, align 4
  %31 = lshr i32 %24, 26
  %32 = and i32 %24, 67108863
  %33 = add i32 %26, %31
  %34 = lshr i32 %33, 26
  %35 = and i32 %33, 67108863
  %36 = add i32 %34, %28
  %37 = lshr i32 %36, 26
  %38 = and i32 %36, 67108863
  %39 = add i32 %37, %30
  %40 = lshr i32 %39, 26
  %41 = mul nuw nsw i32 %40, 5
  %42 = add i32 %41, %22
  %43 = lshr i32 %42, 26
  %44 = and i32 %42, 67108863
  %45 = add nuw nsw i32 %43, %32
  %46 = add nuw nsw i32 %44, 5
  %47 = lshr i32 %46, 26
  %48 = add nuw nsw i32 %47, %45
  %49 = lshr i32 %48, 26
  %50 = add nuw nsw i32 %49, %35
  %51 = lshr i32 %50, 26
  %52 = add nuw nsw i32 %51, %38
  %53 = lshr i32 %52, 26
  %54 = or i32 %39, -67108864
  %55 = add nsw i32 %54, %53
  %56 = lshr i32 %55, 31
  %57 = add nsw i32 %56, -1
  %58 = and i32 %57, 67108863
  %59 = and i32 %58, %46
  %60 = and i32 %58, %48
  %61 = and i32 %58, %50
  %62 = and i32 %58, %52
  %63 = and i32 %57, %55
  %64 = ashr i32 %55, 31
  %65 = and i32 %64, %44
  %66 = or i32 %65, %59
  %67 = and i32 %64, %45
  %68 = or i32 %67, %60
  %69 = and i32 %64, %35
  %70 = or i32 %69, %61
  %71 = and i32 %64, %38
  %72 = or i32 %71, %62
  %73 = and i32 %64, %39
  %74 = or i32 %63, %73
  %75 = shl i32 %68, 26
  %76 = or i32 %66, %75
  %77 = lshr i32 %68, 6
  %78 = shl i32 %70, 20
  %79 = or i32 %77, %78
  %80 = lshr i32 %70, 12
  %81 = shl i32 %72, 14
  %82 = or i32 %80, %81
  %83 = lshr i32 %72, 18
  %84 = shl i32 %74, 8
  %85 = or i32 %84, %83
  %86 = zext i32 %76 to i64
  %87 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 0
  %88 = load i32, i32* %87, align 8
  %89 = zext i32 %88 to i64
  %90 = add nuw nsw i64 %86, %89
  %91 = trunc i64 %90 to i32
  %92 = zext i32 %79 to i64
  %93 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 1
  %94 = load i32, i32* %93, align 4
  %95 = zext i32 %94 to i64
  %96 = add nuw nsw i64 %92, %95
  %97 = lshr i64 %90, 32
  %98 = add nuw nsw i64 %96, %97
  %99 = trunc i64 %98 to i32
  %100 = zext i32 %82 to i64
  %101 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 2
  %102 = load i32, i32* %101, align 8
  %103 = zext i32 %102 to i64
  %104 = add nuw nsw i64 %100, %103
  %105 = lshr i64 %98, 32
  %106 = add nuw nsw i64 %104, %105
  %107 = trunc i64 %106 to i32
  %108 = zext i32 %85 to i64
  %109 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 3
  %110 = load i32, i32* %109, align 4
  %111 = zext i32 %110 to i64
  %112 = add nuw nsw i64 %108, %111
  %113 = lshr i64 %106, 32
  %114 = add nuw nsw i64 %112, %113
  %115 = trunc i64 %114 to i32
  %116 = bitcast i8* %1 to i32*
  store i32 %91, i32* %116, align 1
  %117 = getelementptr i8, i8* %1, i32 4
  %118 = bitcast i8* %117 to i32*
  store i32 %99, i32* %118, align 1
  %119 = getelementptr i8, i8* %1, i32 8
  %120 = bitcast i8* %119 to i32*
  store i32 %107, i32* %120, align 1
  %121 = getelementptr i8, i8* %1, i32 12
  %122 = bitcast i8* %121 to i32*
  store i32 %115, i32* %122, align 1
  %123 = bitcast %struct.poly1305_state_internal_t* %0 to i8*
  tail call void @sodium_memzero(i8* %123, i32 88) #6
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #2

; Function Attrs: nofree norecurse nounwind
define internal fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nocapture %0, i8* nocapture readonly %1, i64 %2) unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 5
  %5 = load i8, i8* %4, align 8
  %6 = icmp eq i8 %5, 0
  %7 = select i1 %6, i32 16777216, i32 0
  %8 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 2
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 4
  %15 = load i32, i32* %14, align 8
  %16 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 2
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 3
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 4
  %25 = load i32, i32* %24, align 4
  %26 = icmp ugt i64 %2, 15
  br i1 %26, label %27, label %160

27:                                               ; preds = %3
  %28 = mul i32 %15, 5
  %29 = mul i32 %13, 5
  %30 = mul i32 %11, 5
  %31 = mul i32 %9, 5
  %32 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 0
  %33 = load i32, i32* %32, align 8
  %34 = zext i32 %33 to i64
  %35 = zext i32 %28 to i64
  %36 = zext i32 %29 to i64
  %37 = zext i32 %30 to i64
  %38 = zext i32 %31 to i64
  %39 = zext i32 %9 to i64
  %40 = zext i32 %11 to i64
  %41 = zext i32 %13 to i64
  %42 = zext i32 %15 to i64
  br label %43

43:                                               ; preds = %27, %43
  %44 = phi i8* [ %1, %27 ], [ %157, %43 ]
  %45 = phi i64 [ %2, %27 ], [ %158, %43 ]
  %46 = phi i32 [ %17, %27 ], [ %155, %43 ]
  %47 = phi i32 [ %19, %27 ], [ %156, %43 ]
  %48 = phi i32 [ %21, %27 ], [ %140, %43 ]
  %49 = phi i32 [ %23, %27 ], [ %145, %43 ]
  %50 = phi i32 [ %25, %27 ], [ %151, %43 ]
  %51 = bitcast i8* %44 to i32*
  %52 = load i32, i32* %51, align 1
  %53 = and i32 %52, 67108863
  %54 = add i32 %53, %46
  %55 = getelementptr i8, i8* %44, i32 3
  %56 = bitcast i8* %55 to i32*
  %57 = load i32, i32* %56, align 1
  %58 = lshr i32 %57, 2
  %59 = and i32 %58, 67108863
  %60 = add i32 %59, %47
  %61 = getelementptr i8, i8* %44, i32 6
  %62 = bitcast i8* %61 to i32*
  %63 = load i32, i32* %62, align 1
  %64 = lshr i32 %63, 4
  %65 = and i32 %64, 67108863
  %66 = add i32 %65, %48
  %67 = getelementptr i8, i8* %44, i32 9
  %68 = bitcast i8* %67 to i32*
  %69 = load i32, i32* %68, align 1
  %70 = lshr i32 %69, 6
  %71 = add i32 %70, %49
  %72 = getelementptr i8, i8* %44, i32 12
  %73 = bitcast i8* %72 to i32*
  %74 = load i32, i32* %73, align 1
  %75 = lshr i32 %74, 8
  %76 = or i32 %75, %7
  %77 = add i32 %76, %50
  %78 = zext i32 %54 to i64
  %79 = mul nuw i64 %78, %34
  %80 = zext i32 %60 to i64
  %81 = mul nuw i64 %80, %35
  %82 = add i64 %81, %79
  %83 = zext i32 %66 to i64
  %84 = mul nuw i64 %83, %36
  %85 = add i64 %82, %84
  %86 = zext i32 %71 to i64
  %87 = mul nuw i64 %86, %37
  %88 = add i64 %85, %87
  %89 = zext i32 %77 to i64
  %90 = mul nuw i64 %89, %38
  %91 = add i64 %88, %90
  %92 = mul nuw i64 %78, %39
  %93 = mul nuw i64 %80, %34
  %94 = add i64 %93, %92
  %95 = mul nuw i64 %83, %35
  %96 = add i64 %94, %95
  %97 = mul nuw i64 %86, %36
  %98 = add i64 %96, %97
  %99 = mul nuw i64 %89, %37
  %100 = add i64 %98, %99
  %101 = mul nuw i64 %78, %40
  %102 = mul nuw i64 %80, %39
  %103 = add i64 %102, %101
  %104 = mul nuw i64 %83, %34
  %105 = add i64 %103, %104
  %106 = mul nuw i64 %86, %35
  %107 = add i64 %105, %106
  %108 = mul nuw i64 %89, %36
  %109 = add i64 %107, %108
  %110 = mul nuw i64 %78, %41
  %111 = mul nuw i64 %80, %40
  %112 = add i64 %111, %110
  %113 = mul nuw i64 %83, %39
  %114 = add i64 %112, %113
  %115 = mul nuw i64 %86, %34
  %116 = add i64 %114, %115
  %117 = mul nuw i64 %89, %35
  %118 = add i64 %116, %117
  %119 = mul nuw i64 %78, %42
  %120 = mul nuw i64 %80, %41
  %121 = add i64 %120, %119
  %122 = mul nuw i64 %83, %40
  %123 = add i64 %121, %122
  %124 = mul nuw i64 %86, %39
  %125 = add i64 %123, %124
  %126 = mul nuw i64 %89, %34
  %127 = add i64 %125, %126
  %128 = lshr i64 %91, 26
  %129 = trunc i64 %91 to i32
  %130 = and i32 %129, 67108863
  %131 = and i64 %128, 4294967295
  %132 = add i64 %100, %131
  %133 = lshr i64 %132, 26
  %134 = trunc i64 %132 to i32
  %135 = and i32 %134, 67108863
  %136 = and i64 %133, 4294967295
  %137 = add i64 %109, %136
  %138 = lshr i64 %137, 26
  %139 = trunc i64 %137 to i32
  %140 = and i32 %139, 67108863
  %141 = and i64 %138, 4294967295
  %142 = add i64 %118, %141
  %143 = lshr i64 %142, 26
  %144 = trunc i64 %142 to i32
  %145 = and i32 %144, 67108863
  %146 = and i64 %143, 4294967295
  %147 = add i64 %127, %146
  %148 = lshr i64 %147, 26
  %149 = trunc i64 %148 to i32
  %150 = trunc i64 %147 to i32
  %151 = and i32 %150, 67108863
  %152 = mul i32 %149, 5
  %153 = add i32 %152, %130
  %154 = lshr i32 %153, 26
  %155 = and i32 %153, 67108863
  %156 = add nuw nsw i32 %154, %135
  %157 = getelementptr i8, i8* %44, i32 16
  %158 = add i64 %45, -16
  %159 = icmp ugt i64 %158, 15
  br i1 %159, label %43, label %160

160:                                              ; preds = %43, %3
  %161 = phi i32 [ %25, %3 ], [ %151, %43 ]
  %162 = phi i32 [ %23, %3 ], [ %145, %43 ]
  %163 = phi i32 [ %21, %3 ], [ %140, %43 ]
  %164 = phi i32 [ %19, %3 ], [ %156, %43 ]
  %165 = phi i32 [ %17, %3 ], [ %155, %43 ]
  store i32 %165, i32* %16, align 4
  store i32 %164, i32* %18, align 4
  store i32 %163, i32* %20, align 4
  store i32 %162, i32* %22, align 4
  store i32 %161, i32* %24, align 4
  ret void
}

declare void @sodium_memzero(i8* %0, i32 %1) local_unnamed_addr #4

declare i32 @crypto_verify_16(i8* %0, i8* %1) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly %0, i8 %1, i64 %2, i1 immarg %3) #5

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #5

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { noinline nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind willreturn writeonly }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; Replacing "  %61 = and i32 %58, %50"
; from ""
; with "i32 0" in:
"%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2
%4:i32 = and 67108863:i32, %3 (hasExternalUses)
%5:i32 = and 67108863:i32, %1
%6:i32 = var
%7:i32 = var
%8:i32 = var
%9:i32 = lshr %3, 26:i32
%10:i32 = add %8, %9
%11:i32 = lshr %10, 26:i32
%12:i32 = add %7, %11 (hasExternalUses)
%13:i32 = lshr %12, 26:i32
%14:i32 = mulnw 5:i32, %13
%15:i32 = add %6, %14
%16:i32 = lshr %15, 26:i32
%17:i32 = addnw %5, %16 (hasExternalUses)
%18:i32 = and 67108863:i32, %15 (hasExternalUses)
%19:i32 = addnw 5:i32, %18 (hasExternalUses)
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %17, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %4, %22
%24:i32 = or 4227858432:i32, %12
%25:i32 = and 67108863:i32, %10 (hasExternalUses)
%26:i32 = lshr %23, 26:i32
%27:i32 = addnw %25, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %24, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %23, %32
cand %33 0:i32
"
; with "i32 0"

Module after replacement:
; ModuleID = './poly1305_donna.c.bc'
source_filename = "crypto_onetimeauth/poly1305/donna/poly1305_donna.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.crypto_onetimeauth_poly1305_implementation = type { i32 (i8*, i8*, i64, i8*)*, i32 (i8*, i8*, i64, i8*)*, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)*, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*, i64)*, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)* }
%struct.crypto_onetimeauth_poly1305_state = type { [256 x i8] }
%struct.poly1305_state_internal_t = type { [5 x i32], [5 x i32], [4 x i32], i64, [16 x i8], i8 }

@crypto_onetimeauth_poly1305_donna_implementation = hidden local_unnamed_addr global %struct.crypto_onetimeauth_poly1305_implementation { i32 (i8*, i8*, i64, i8*)* @crypto_onetimeauth_poly1305_donna, i32 (i8*, i8*, i64, i8*)* @crypto_onetimeauth_poly1305_donna_verify, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)* @crypto_onetimeauth_poly1305_donna_init, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*, i64)* @crypto_onetimeauth_poly1305_donna_update, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)* @crypto_onetimeauth_poly1305_donna_final }, align 4

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna(i8* nocapture %0, i8* nocapture readonly %1, i64 %2, i8* nocapture readonly %3) #0 {
  %5 = alloca %struct.poly1305_state_internal_t, align 64
  %6 = bitcast %struct.poly1305_state_internal_t* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %6) #6
  %7 = bitcast i8* %3 to i32*
  %8 = load i32, i32* %7, align 1
  %9 = and i32 %8, 67108863
  %10 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 0
  store i32 %9, i32* %10, align 64
  %11 = getelementptr i8, i8* %3, i32 3
  %12 = bitcast i8* %11 to i32*
  %13 = load i32, i32* %12, align 1
  %14 = lshr i32 %13, 2
  %15 = and i32 %14, 67108611
  %16 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 1
  store i32 %15, i32* %16, align 4
  %17 = getelementptr i8, i8* %3, i32 6
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 1
  %20 = lshr i32 %19, 4
  %21 = and i32 %20, 67092735
  %22 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 2
  store i32 %21, i32* %22, align 8
  %23 = getelementptr i8, i8* %3, i32 9
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 1
  %26 = lshr i32 %25, 6
  %27 = and i32 %26, 66076671
  %28 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 3
  store i32 %27, i32* %28, align 4
  %29 = getelementptr i8, i8* %3, i32 12
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 1
  %32 = lshr i32 %31, 8
  %33 = and i32 %32, 1048575
  %34 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 4
  store i32 %33, i32* %34, align 16
  %35 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 1, i32 0
  %36 = getelementptr i8, i8* %3, i32 16
  %37 = bitcast i8* %36 to i32*
  %38 = bitcast i32* %35 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(20) %38, i8 0, i64 20, i1 false) #6
  %39 = load i32, i32* %37, align 1
  %40 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 0
  store i32 %39, i32* %40, align 8
  %41 = getelementptr i8, i8* %3, i32 20
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %42, align 1
  %44 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 1
  store i32 %43, i32* %44, align 4
  %45 = getelementptr i8, i8* %3, i32 24
  %46 = bitcast i8* %45 to i32*
  %47 = load i32, i32* %46, align 1
  %48 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 2
  store i32 %47, i32* %48, align 8
  %49 = getelementptr i8, i8* %3, i32 28
  %50 = bitcast i8* %49 to i32*
  %51 = load i32, i32* %50, align 1
  %52 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 3
  store i32 %51, i32* %52, align 4
  %53 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 3
  store i64 0, i64* %53, align 8
  %54 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 5
  store i8 0, i8* %54, align 16
  call fastcc void @poly1305_update(%struct.poly1305_state_internal_t* nonnull %5, i8* %1, i64 %2)
  call fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* nonnull %5, i8* %0)
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %6) #6
  ret i32 0
}

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_verify(i8* %0, i8* nocapture readonly %1, i64 %2, i8* nocapture readonly %3) #0 {
  %5 = alloca %struct.poly1305_state_internal_t, align 64
  %6 = alloca [16 x i8], align 16
  %7 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #6
  %8 = bitcast %struct.poly1305_state_internal_t* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %8) #6
  %9 = bitcast i8* %3 to i32*
  %10 = load i32, i32* %9, align 1
  %11 = and i32 %10, 67108863
  %12 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 0
  store i32 %11, i32* %12, align 64
  %13 = getelementptr i8, i8* %3, i32 3
  %14 = bitcast i8* %13 to i32*
  %15 = load i32, i32* %14, align 1
  %16 = lshr i32 %15, 2
  %17 = and i32 %16, 67108611
  %18 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 1
  store i32 %17, i32* %18, align 4
  %19 = getelementptr i8, i8* %3, i32 6
  %20 = bitcast i8* %19 to i32*
  %21 = load i32, i32* %20, align 1
  %22 = lshr i32 %21, 4
  %23 = and i32 %22, 67092735
  %24 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 2
  store i32 %23, i32* %24, align 8
  %25 = getelementptr i8, i8* %3, i32 9
  %26 = bitcast i8* %25 to i32*
  %27 = load i32, i32* %26, align 1
  %28 = lshr i32 %27, 6
  %29 = and i32 %28, 66076671
  %30 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 3
  store i32 %29, i32* %30, align 4
  %31 = getelementptr i8, i8* %3, i32 12
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 1
  %34 = lshr i32 %33, 8
  %35 = and i32 %34, 1048575
  %36 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 4
  store i32 %35, i32* %36, align 16
  %37 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 1, i32 0
  %38 = getelementptr i8, i8* %3, i32 16
  %39 = bitcast i8* %38 to i32*
  %40 = bitcast i32* %37 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(20) %40, i8 0, i64 20, i1 false) #6
  %41 = load i32, i32* %39, align 1
  %42 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 0
  store i32 %41, i32* %42, align 8
  %43 = getelementptr i8, i8* %3, i32 20
  %44 = bitcast i8* %43 to i32*
  %45 = load i32, i32* %44, align 1
  %46 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 1
  store i32 %45, i32* %46, align 4
  %47 = getelementptr i8, i8* %3, i32 24
  %48 = bitcast i8* %47 to i32*
  %49 = load i32, i32* %48, align 1
  %50 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 2
  store i32 %49, i32* %50, align 8
  %51 = getelementptr i8, i8* %3, i32 28
  %52 = bitcast i8* %51 to i32*
  %53 = load i32, i32* %52, align 1
  %54 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 3
  store i32 %53, i32* %54, align 4
  %55 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 3
  store i64 0, i64* %55, align 8
  %56 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 5
  store i8 0, i8* %56, align 16
  call fastcc void @poly1305_update(%struct.poly1305_state_internal_t* nonnull %5, i8* %1, i64 %2) #6
  call fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* nonnull %5, i8* nonnull %7) #6
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %8) #6
  %57 = call i32 @crypto_verify_16(i8* %0, i8* nonnull %7) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #6
  ret i32 %57
}

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_init(%struct.crypto_onetimeauth_poly1305_state* nocapture %0, i8* nocapture readonly %1) #0 {
  %3 = bitcast i8* %1 to i32*
  %4 = load i32, i32* %3, align 1
  %5 = and i32 %4, 67108863
  %6 = bitcast %struct.crypto_onetimeauth_poly1305_state* %0 to i32*
  store i32 %5, i32* %6, align 8
  %7 = getelementptr i8, i8* %1, i32 3
  %8 = bitcast i8* %7 to i32*
  %9 = load i32, i32* %8, align 1
  %10 = lshr i32 %9, 2
  %11 = and i32 %10, 67108611
  %12 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 4
  %13 = bitcast i8* %12 to i32*
  store i32 %11, i32* %13, align 4
  %14 = getelementptr i8, i8* %1, i32 6
  %15 = bitcast i8* %14 to i32*
  %16 = load i32, i32* %15, align 1
  %17 = lshr i32 %16, 4
  %18 = and i32 %17, 67092735
  %19 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 8
  %20 = bitcast i8* %19 to i32*
  store i32 %18, i32* %20, align 8
  %21 = getelementptr i8, i8* %1, i32 9
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 1
  %24 = lshr i32 %23, 6
  %25 = and i32 %24, 66076671
  %26 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 12
  %27 = bitcast i8* %26 to i32*
  store i32 %25, i32* %27, align 4
  %28 = getelementptr i8, i8* %1, i32 12
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 1
  %31 = lshr i32 %30, 8
  %32 = and i32 %31, 1048575
  %33 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 16
  %34 = bitcast i8* %33 to i32*
  store i32 %32, i32* %34, align 8
  %35 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 20
  %36 = getelementptr i8, i8* %1, i32 16
  %37 = bitcast i8* %36 to i32*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(20) %35, i8 0, i64 20, i1 false) #6
  %38 = load i32, i32* %37, align 1
  %39 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 40
  %40 = bitcast i8* %39 to i32*
  store i32 %38, i32* %40, align 8
  %41 = getelementptr i8, i8* %1, i32 20
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %42, align 1
  %44 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 44
  %45 = bitcast i8* %44 to i32*
  store i32 %43, i32* %45, align 4
  %46 = getelementptr i8, i8* %1, i32 24
  %47 = bitcast i8* %46 to i32*
  %48 = load i32, i32* %47, align 1
  %49 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 48
  %50 = bitcast i8* %49 to i32*
  store i32 %48, i32* %50, align 8
  %51 = getelementptr i8, i8* %1, i32 28
  %52 = bitcast i8* %51 to i32*
  %53 = load i32, i32* %52, align 1
  %54 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 52
  %55 = bitcast i8* %54 to i32*
  store i32 %53, i32* %55, align 4
  %56 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 56
  %57 = bitcast i8* %56 to i64*
  store i64 0, i64* %57, align 8
  %58 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 80
  store i8 0, i8* %58, align 8
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_update(%struct.crypto_onetimeauth_poly1305_state* nocapture %0, i8* nocapture readonly %1, i64 %2) #1 {
  %4 = bitcast %struct.crypto_onetimeauth_poly1305_state* %0 to %struct.poly1305_state_internal_t*
  tail call fastcc void @poly1305_update(%struct.poly1305_state_internal_t* %4, i8* %1, i64 %2)
  ret i32 0
}

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_final(%struct.crypto_onetimeauth_poly1305_state* %0, i8* nocapture %1) #0 {
  %3 = bitcast %struct.crypto_onetimeauth_poly1305_state* %0 to %struct.poly1305_state_internal_t*
  tail call fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* %3, i8* %1)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #2

; Function Attrs: nofree norecurse nounwind
define internal fastcc void @poly1305_update(%struct.poly1305_state_internal_t* nocapture %0, i8* nocapture readonly %1, i64 %2) unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 3
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %33, label %7

7:                                                ; preds = %3
  %8 = sub i64 16, %5
  %9 = icmp ugt i64 %8, %2
  %10 = select i1 %9, i64 %2, i64 %8
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %24, label %12

12:                                               ; preds = %7, %12
  %13 = phi i64 [ %23, %12 ], [ %5, %7 ]
  %14 = phi i64 [ %21, %12 ], [ 0, %7 ]
  %15 = trunc i64 %14 to i32
  %16 = getelementptr i8, i8* %1, i32 %15
  %17 = load i8, i8* %16, align 1
  %18 = add i64 %13, %14
  %19 = trunc i64 %18 to i32
  %20 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 %19
  store i8 %17, i8* %20, align 1
  %21 = add nuw i64 %14, 1
  %22 = icmp ult i64 %21, %10
  %23 = load i64, i64* %4, align 8
  br i1 %22, label %12, label %24

24:                                               ; preds = %12, %7
  %25 = phi i64 [ %5, %7 ], [ %23, %12 ]
  %26 = add i64 %25, %10
  store i64 %26, i64* %4, align 8
  %27 = icmp ult i64 %26, 16
  br i1 %27, label %60, label %28

28:                                               ; preds = %24
  %29 = trunc i64 %10 to i32
  %30 = getelementptr i8, i8* %1, i32 %29
  %31 = sub i64 %2, %10
  %32 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 0
  tail call fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nonnull %0, i8* nonnull %32, i64 16)
  store i64 0, i64* %4, align 8
  br label %33

33:                                               ; preds = %28, %3
  %34 = phi i64 [ %2, %3 ], [ %31, %28 ]
  %35 = phi i8* [ %1, %3 ], [ %30, %28 ]
  %36 = icmp ugt i64 %34, 15
  br i1 %36, label %37, label %42

37:                                               ; preds = %33
  %38 = and i64 %34, -16
  tail call fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nonnull %0, i8* %35, i64 %38)
  %39 = trunc i64 %38 to i32
  %40 = getelementptr i8, i8* %35, i32 %39
  %41 = sub i64 %34, %38
  br label %42

42:                                               ; preds = %37, %33
  %43 = phi i64 [ %41, %37 ], [ %34, %33 ]
  %44 = phi i8* [ %40, %37 ], [ %35, %33 ]
  %45 = icmp eq i64 %43, 0
  br i1 %45, label %60, label %46

46:                                               ; preds = %42, %46
  %47 = phi i64 [ %55, %46 ], [ 0, %42 ]
  %48 = trunc i64 %47 to i32
  %49 = getelementptr i8, i8* %44, i32 %48
  %50 = load i8, i8* %49, align 1
  %51 = load i64, i64* %4, align 8
  %52 = add i64 %51, %47
  %53 = trunc i64 %52 to i32
  %54 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 %53
  store i8 %50, i8* %54, align 1
  %55 = add nuw i64 %47, 1
  %56 = icmp eq i64 %55, %43
  br i1 %56, label %57, label %46

57:                                               ; preds = %46
  %58 = load i64, i64* %4, align 8
  %59 = add i64 %58, %43
  store i64 %59, i64* %4, align 8
  br label %60

60:                                               ; preds = %57, %42, %24
  ret void
}

; Function Attrs: noinline nounwind
define internal fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* %0, i8* nocapture %1) unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 3
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %20, label %6

6:                                                ; preds = %2
  %7 = trunc i64 %4 to i32
  %8 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 %7
  store i8 1, i8* %8, align 1
  %9 = add i64 %4, 1
  %10 = icmp ult i64 %9, 16
  br i1 %10, label %11, label %17

11:                                               ; preds = %6
  %12 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 16
  %13 = bitcast i32* %12 to i8*
  %14 = add i32 %7, 1
  %15 = getelementptr i8, i8* %13, i32 %14
  %16 = sub i32 15, %7
  call void @llvm.memset.p0i8.i32(i8* align 1 %15, i8 0, i32 %16, i1 false)
  br label %17

17:                                               ; preds = %11, %6
  %18 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 5
  store i8 1, i8* %18, align 8
  %19 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 0
  tail call fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nonnull %0, i8* nonnull %19, i64 16)
  br label %20

20:                                               ; preds = %2, %17
  %21 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 0
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 2
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 3
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 4
  %30 = load i32, i32* %29, align 4
  %31 = lshr i32 %24, 26
  %32 = and i32 %24, 67108863
  %33 = add i32 %26, %31
  %34 = lshr i32 %33, 26
  %35 = and i32 %33, 67108863
  %36 = add i32 %34, %28
  %37 = lshr i32 %36, 26
  %38 = and i32 %36, 67108863
  %39 = add i32 %37, %30
  %40 = lshr i32 %39, 26
  %41 = mul nuw nsw i32 %40, 5
  %42 = add i32 %41, %22
  %43 = lshr i32 %42, 26
  %44 = and i32 %42, 67108863
  %45 = add nuw nsw i32 %43, %32
  %46 = add nuw nsw i32 %44, 5
  %47 = lshr i32 %46, 26
  %48 = add nuw nsw i32 %47, %45
  %49 = lshr i32 %48, 26
  %50 = add nuw nsw i32 %49, %35
  %51 = lshr i32 %50, 26
  %52 = add nuw nsw i32 %51, %38
  %53 = lshr i32 %52, 26
  %54 = or i32 %39, -67108864
  %55 = add nsw i32 %54, %53
  %56 = lshr i32 %55, 31
  %57 = add nsw i32 %56, -1
  %58 = and i32 %57, 67108863
  %59 = and i32 %58, %46
  %60 = and i32 %58, %48
  %61 = and i32 %58, %52
  %62 = and i32 %57, %55
  %63 = ashr i32 %55, 31
  %64 = and i32 %63, %44
  %65 = or i32 %64, %59
  %66 = and i32 %63, %45
  %67 = or i32 %66, %60
  %68 = and i32 %63, %35
  %69 = or i32 %68, 0
  %70 = and i32 %63, %38
  %71 = or i32 %70, %61
  %72 = and i32 %63, %39
  %73 = or i32 %62, %72
  %74 = shl i32 %67, 26
  %75 = or i32 %65, %74
  %76 = lshr i32 %67, 6
  %77 = shl i32 %69, 20
  %78 = or i32 %76, %77
  %79 = lshr i32 %69, 12
  %80 = shl i32 %71, 14
  %81 = or i32 %79, %80
  %82 = lshr i32 %71, 18
  %83 = shl i32 %73, 8
  %84 = or i32 %83, %82
  %85 = zext i32 %75 to i64
  %86 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 0
  %87 = load i32, i32* %86, align 8
  %88 = zext i32 %87 to i64
  %89 = add nuw nsw i64 %85, %88
  %90 = trunc i64 %89 to i32
  %91 = zext i32 %78 to i64
  %92 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 1
  %93 = load i32, i32* %92, align 4
  %94 = zext i32 %93 to i64
  %95 = add nuw nsw i64 %91, %94
  %96 = lshr i64 %89, 32
  %97 = add nuw nsw i64 %95, %96
  %98 = trunc i64 %97 to i32
  %99 = zext i32 %81 to i64
  %100 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 2
  %101 = load i32, i32* %100, align 8
  %102 = zext i32 %101 to i64
  %103 = add nuw nsw i64 %99, %102
  %104 = lshr i64 %97, 32
  %105 = add nuw nsw i64 %103, %104
  %106 = trunc i64 %105 to i32
  %107 = zext i32 %84 to i64
  %108 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 3
  %109 = load i32, i32* %108, align 4
  %110 = zext i32 %109 to i64
  %111 = add nuw nsw i64 %107, %110
  %112 = lshr i64 %105, 32
  %113 = add nuw nsw i64 %111, %112
  %114 = trunc i64 %113 to i32
  %115 = bitcast i8* %1 to i32*
  store i32 %90, i32* %115, align 1
  %116 = getelementptr i8, i8* %1, i32 4
  %117 = bitcast i8* %116 to i32*
  store i32 %98, i32* %117, align 1
  %118 = getelementptr i8, i8* %1, i32 8
  %119 = bitcast i8* %118 to i32*
  store i32 %106, i32* %119, align 1
  %120 = getelementptr i8, i8* %1, i32 12
  %121 = bitcast i8* %120 to i32*
  store i32 %114, i32* %121, align 1
  %122 = bitcast %struct.poly1305_state_internal_t* %0 to i8*
  tail call void @sodium_memzero(i8* %122, i32 88) #6
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #2

; Function Attrs: nofree norecurse nounwind
define internal fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nocapture %0, i8* nocapture readonly %1, i64 %2) unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 5
  %5 = load i8, i8* %4, align 8
  %6 = icmp eq i8 %5, 0
  %7 = select i1 %6, i32 16777216, i32 0
  %8 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 2
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 4
  %15 = load i32, i32* %14, align 8
  %16 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 2
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 3
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 4
  %25 = load i32, i32* %24, align 4
  %26 = icmp ugt i64 %2, 15
  br i1 %26, label %27, label %160

27:                                               ; preds = %3
  %28 = mul i32 %15, 5
  %29 = mul i32 %13, 5
  %30 = mul i32 %11, 5
  %31 = mul i32 %9, 5
  %32 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 0
  %33 = load i32, i32* %32, align 8
  %34 = zext i32 %33 to i64
  %35 = zext i32 %28 to i64
  %36 = zext i32 %29 to i64
  %37 = zext i32 %30 to i64
  %38 = zext i32 %31 to i64
  %39 = zext i32 %9 to i64
  %40 = zext i32 %11 to i64
  %41 = zext i32 %13 to i64
  %42 = zext i32 %15 to i64
  br label %43

43:                                               ; preds = %27, %43
  %44 = phi i8* [ %1, %27 ], [ %157, %43 ]
  %45 = phi i64 [ %2, %27 ], [ %158, %43 ]
  %46 = phi i32 [ %17, %27 ], [ %155, %43 ]
  %47 = phi i32 [ %19, %27 ], [ %156, %43 ]
  %48 = phi i32 [ %21, %27 ], [ %140, %43 ]
  %49 = phi i32 [ %23, %27 ], [ %145, %43 ]
  %50 = phi i32 [ %25, %27 ], [ %151, %43 ]
  %51 = bitcast i8* %44 to i32*
  %52 = load i32, i32* %51, align 1
  %53 = and i32 %52, 67108863
  %54 = add i32 %53, %46
  %55 = getelementptr i8, i8* %44, i32 3
  %56 = bitcast i8* %55 to i32*
  %57 = load i32, i32* %56, align 1
  %58 = lshr i32 %57, 2
  %59 = and i32 %58, 67108863
  %60 = add i32 %59, %47
  %61 = getelementptr i8, i8* %44, i32 6
  %62 = bitcast i8* %61 to i32*
  %63 = load i32, i32* %62, align 1
  %64 = lshr i32 %63, 4
  %65 = and i32 %64, 67108863
  %66 = add i32 %65, %48
  %67 = getelementptr i8, i8* %44, i32 9
  %68 = bitcast i8* %67 to i32*
  %69 = load i32, i32* %68, align 1
  %70 = lshr i32 %69, 6
  %71 = add i32 %70, %49
  %72 = getelementptr i8, i8* %44, i32 12
  %73 = bitcast i8* %72 to i32*
  %74 = load i32, i32* %73, align 1
  %75 = lshr i32 %74, 8
  %76 = or i32 %75, %7
  %77 = add i32 %76, %50
  %78 = zext i32 %54 to i64
  %79 = mul nuw i64 %78, %34
  %80 = zext i32 %60 to i64
  %81 = mul nuw i64 %80, %35
  %82 = add i64 %81, %79
  %83 = zext i32 %66 to i64
  %84 = mul nuw i64 %83, %36
  %85 = add i64 %82, %84
  %86 = zext i32 %71 to i64
  %87 = mul nuw i64 %86, %37
  %88 = add i64 %85, %87
  %89 = zext i32 %77 to i64
  %90 = mul nuw i64 %89, %38
  %91 = add i64 %88, %90
  %92 = mul nuw i64 %78, %39
  %93 = mul nuw i64 %80, %34
  %94 = add i64 %93, %92
  %95 = mul nuw i64 %83, %35
  %96 = add i64 %94, %95
  %97 = mul nuw i64 %86, %36
  %98 = add i64 %96, %97
  %99 = mul nuw i64 %89, %37
  %100 = add i64 %98, %99
  %101 = mul nuw i64 %78, %40
  %102 = mul nuw i64 %80, %39
  %103 = add i64 %102, %101
  %104 = mul nuw i64 %83, %34
  %105 = add i64 %103, %104
  %106 = mul nuw i64 %86, %35
  %107 = add i64 %105, %106
  %108 = mul nuw i64 %89, %36
  %109 = add i64 %107, %108
  %110 = mul nuw i64 %78, %41
  %111 = mul nuw i64 %80, %40
  %112 = add i64 %111, %110
  %113 = mul nuw i64 %83, %39
  %114 = add i64 %112, %113
  %115 = mul nuw i64 %86, %34
  %116 = add i64 %114, %115
  %117 = mul nuw i64 %89, %35
  %118 = add i64 %116, %117
  %119 = mul nuw i64 %78, %42
  %120 = mul nuw i64 %80, %41
  %121 = add i64 %120, %119
  %122 = mul nuw i64 %83, %40
  %123 = add i64 %121, %122
  %124 = mul nuw i64 %86, %39
  %125 = add i64 %123, %124
  %126 = mul nuw i64 %89, %34
  %127 = add i64 %125, %126
  %128 = lshr i64 %91, 26
  %129 = trunc i64 %91 to i32
  %130 = and i32 %129, 67108863
  %131 = and i64 %128, 4294967295
  %132 = add i64 %100, %131
  %133 = lshr i64 %132, 26
  %134 = trunc i64 %132 to i32
  %135 = and i32 %134, 67108863
  %136 = and i64 %133, 4294967295
  %137 = add i64 %109, %136
  %138 = lshr i64 %137, 26
  %139 = trunc i64 %137 to i32
  %140 = and i32 %139, 67108863
  %141 = and i64 %138, 4294967295
  %142 = add i64 %118, %141
  %143 = lshr i64 %142, 26
  %144 = trunc i64 %142 to i32
  %145 = and i32 %144, 67108863
  %146 = and i64 %143, 4294967295
  %147 = add i64 %127, %146
  %148 = lshr i64 %147, 26
  %149 = trunc i64 %148 to i32
  %150 = trunc i64 %147 to i32
  %151 = and i32 %150, 67108863
  %152 = mul i32 %149, 5
  %153 = add i32 %152, %130
  %154 = lshr i32 %153, 26
  %155 = and i32 %153, 67108863
  %156 = add nuw nsw i32 %154, %135
  %157 = getelementptr i8, i8* %44, i32 16
  %158 = add i64 %45, -16
  %159 = icmp ugt i64 %158, 15
  br i1 %159, label %43, label %160

160:                                              ; preds = %43, %3
  %161 = phi i32 [ %25, %3 ], [ %151, %43 ]
  %162 = phi i32 [ %23, %3 ], [ %145, %43 ]
  %163 = phi i32 [ %21, %3 ], [ %140, %43 ]
  %164 = phi i32 [ %19, %3 ], [ %156, %43 ]
  %165 = phi i32 [ %17, %3 ], [ %155, %43 ]
  store i32 %165, i32* %16, align 4
  store i32 %164, i32* %18, align 4
  store i32 %163, i32* %20, align 4
  store i32 %162, i32* %22, align 4
  store i32 %161, i32* %24, align 4
  ret void
}

declare void @sodium_memzero(i8* %0, i32 %1) local_unnamed_addr #4

declare i32 @crypto_verify_16(i8* %0, i8* %1) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly %0, i8 %1, i64 %2, i1 immarg %3) #5

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #5

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { noinline nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind willreturn writeonly }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

#########################################################
; exiting Souper's runOnFunction() for ./poly1305_donna.c.bc:poly1305_finish()
rescanning function after transformation was applied

; entering Souper's runOnFunction() for ./poly1305_donna.c.bc:poly1305_finish()

; ModuleID = './poly1305_donna.c.bc'
source_filename = "crypto_onetimeauth/poly1305/donna/poly1305_donna.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.crypto_onetimeauth_poly1305_implementation = type { i32 (i8*, i8*, i64, i8*)*, i32 (i8*, i8*, i64, i8*)*, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)*, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*, i64)*, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)* }
%struct.crypto_onetimeauth_poly1305_state = type { [256 x i8] }
%struct.poly1305_state_internal_t = type { [5 x i32], [5 x i32], [4 x i32], i64, [16 x i8], i8 }

@crypto_onetimeauth_poly1305_donna_implementation = hidden local_unnamed_addr global %struct.crypto_onetimeauth_poly1305_implementation { i32 (i8*, i8*, i64, i8*)* @crypto_onetimeauth_poly1305_donna, i32 (i8*, i8*, i64, i8*)* @crypto_onetimeauth_poly1305_donna_verify, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)* @crypto_onetimeauth_poly1305_donna_init, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*, i64)* @crypto_onetimeauth_poly1305_donna_update, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)* @crypto_onetimeauth_poly1305_donna_final }, align 4

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna(i8* nocapture %0, i8* nocapture readonly %1, i64 %2, i8* nocapture readonly %3) #0 {
  %5 = alloca %struct.poly1305_state_internal_t, align 64
  %6 = bitcast %struct.poly1305_state_internal_t* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %6) #6
  %7 = bitcast i8* %3 to i32*
  %8 = load i32, i32* %7, align 1
  %9 = and i32 %8, 67108863
  %10 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 0
  store i32 %9, i32* %10, align 64
  %11 = getelementptr i8, i8* %3, i32 3
  %12 = bitcast i8* %11 to i32*
  %13 = load i32, i32* %12, align 1
  %14 = lshr i32 %13, 2
  %15 = and i32 %14, 67108611
  %16 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 1
  store i32 %15, i32* %16, align 4
  %17 = getelementptr i8, i8* %3, i32 6
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 1
  %20 = lshr i32 %19, 4
  %21 = and i32 %20, 67092735
  %22 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 2
  store i32 %21, i32* %22, align 8
  %23 = getelementptr i8, i8* %3, i32 9
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 1
  %26 = lshr i32 %25, 6
  %27 = and i32 %26, 66076671
  %28 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 3
  store i32 %27, i32* %28, align 4
  %29 = getelementptr i8, i8* %3, i32 12
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 1
  %32 = lshr i32 %31, 8
  %33 = and i32 %32, 1048575
  %34 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 4
  store i32 %33, i32* %34, align 16
  %35 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 1, i32 0
  %36 = getelementptr i8, i8* %3, i32 16
  %37 = bitcast i8* %36 to i32*
  %38 = bitcast i32* %35 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(20) %38, i8 0, i64 20, i1 false) #6
  %39 = load i32, i32* %37, align 1
  %40 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 0
  store i32 %39, i32* %40, align 8
  %41 = getelementptr i8, i8* %3, i32 20
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %42, align 1
  %44 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 1
  store i32 %43, i32* %44, align 4
  %45 = getelementptr i8, i8* %3, i32 24
  %46 = bitcast i8* %45 to i32*
  %47 = load i32, i32* %46, align 1
  %48 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 2
  store i32 %47, i32* %48, align 8
  %49 = getelementptr i8, i8* %3, i32 28
  %50 = bitcast i8* %49 to i32*
  %51 = load i32, i32* %50, align 1
  %52 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 3
  store i32 %51, i32* %52, align 4
  %53 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 3
  store i64 0, i64* %53, align 8
  %54 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 5
  store i8 0, i8* %54, align 16
  call fastcc void @poly1305_update(%struct.poly1305_state_internal_t* nonnull %5, i8* %1, i64 %2)
  call fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* nonnull %5, i8* %0)
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %6) #6
  ret i32 0
}

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_verify(i8* %0, i8* nocapture readonly %1, i64 %2, i8* nocapture readonly %3) #0 {
  %5 = alloca %struct.poly1305_state_internal_t, align 64
  %6 = alloca [16 x i8], align 16
  %7 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #6
  %8 = bitcast %struct.poly1305_state_internal_t* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %8) #6
  %9 = bitcast i8* %3 to i32*
  %10 = load i32, i32* %9, align 1
  %11 = and i32 %10, 67108863
  %12 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 0
  store i32 %11, i32* %12, align 64
  %13 = getelementptr i8, i8* %3, i32 3
  %14 = bitcast i8* %13 to i32*
  %15 = load i32, i32* %14, align 1
  %16 = lshr i32 %15, 2
  %17 = and i32 %16, 67108611
  %18 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 1
  store i32 %17, i32* %18, align 4
  %19 = getelementptr i8, i8* %3, i32 6
  %20 = bitcast i8* %19 to i32*
  %21 = load i32, i32* %20, align 1
  %22 = lshr i32 %21, 4
  %23 = and i32 %22, 67092735
  %24 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 2
  store i32 %23, i32* %24, align 8
  %25 = getelementptr i8, i8* %3, i32 9
  %26 = bitcast i8* %25 to i32*
  %27 = load i32, i32* %26, align 1
  %28 = lshr i32 %27, 6
  %29 = and i32 %28, 66076671
  %30 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 3
  store i32 %29, i32* %30, align 4
  %31 = getelementptr i8, i8* %3, i32 12
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 1
  %34 = lshr i32 %33, 8
  %35 = and i32 %34, 1048575
  %36 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 4
  store i32 %35, i32* %36, align 16
  %37 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 1, i32 0
  %38 = getelementptr i8, i8* %3, i32 16
  %39 = bitcast i8* %38 to i32*
  %40 = bitcast i32* %37 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(20) %40, i8 0, i64 20, i1 false) #6
  %41 = load i32, i32* %39, align 1
  %42 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 0
  store i32 %41, i32* %42, align 8
  %43 = getelementptr i8, i8* %3, i32 20
  %44 = bitcast i8* %43 to i32*
  %45 = load i32, i32* %44, align 1
  %46 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 1
  store i32 %45, i32* %46, align 4
  %47 = getelementptr i8, i8* %3, i32 24
  %48 = bitcast i8* %47 to i32*
  %49 = load i32, i32* %48, align 1
  %50 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 2
  store i32 %49, i32* %50, align 8
  %51 = getelementptr i8, i8* %3, i32 28
  %52 = bitcast i8* %51 to i32*
  %53 = load i32, i32* %52, align 1
  %54 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 3
  store i32 %53, i32* %54, align 4
  %55 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 3
  store i64 0, i64* %55, align 8
  %56 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 5
  store i8 0, i8* %56, align 16
  call fastcc void @poly1305_update(%struct.poly1305_state_internal_t* nonnull %5, i8* %1, i64 %2) #6
  call fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* nonnull %5, i8* nonnull %7) #6
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %8) #6
  %57 = call i32 @crypto_verify_16(i8* %0, i8* nonnull %7) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #6
  ret i32 %57
}

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_init(%struct.crypto_onetimeauth_poly1305_state* nocapture %0, i8* nocapture readonly %1) #0 {
  %3 = bitcast i8* %1 to i32*
  %4 = load i32, i32* %3, align 1
  %5 = and i32 %4, 67108863
  %6 = bitcast %struct.crypto_onetimeauth_poly1305_state* %0 to i32*
  store i32 %5, i32* %6, align 8
  %7 = getelementptr i8, i8* %1, i32 3
  %8 = bitcast i8* %7 to i32*
  %9 = load i32, i32* %8, align 1
  %10 = lshr i32 %9, 2
  %11 = and i32 %10, 67108611
  %12 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 4
  %13 = bitcast i8* %12 to i32*
  store i32 %11, i32* %13, align 4
  %14 = getelementptr i8, i8* %1, i32 6
  %15 = bitcast i8* %14 to i32*
  %16 = load i32, i32* %15, align 1
  %17 = lshr i32 %16, 4
  %18 = and i32 %17, 67092735
  %19 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 8
  %20 = bitcast i8* %19 to i32*
  store i32 %18, i32* %20, align 8
  %21 = getelementptr i8, i8* %1, i32 9
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 1
  %24 = lshr i32 %23, 6
  %25 = and i32 %24, 66076671
  %26 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 12
  %27 = bitcast i8* %26 to i32*
  store i32 %25, i32* %27, align 4
  %28 = getelementptr i8, i8* %1, i32 12
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 1
  %31 = lshr i32 %30, 8
  %32 = and i32 %31, 1048575
  %33 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 16
  %34 = bitcast i8* %33 to i32*
  store i32 %32, i32* %34, align 8
  %35 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 20
  %36 = getelementptr i8, i8* %1, i32 16
  %37 = bitcast i8* %36 to i32*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(20) %35, i8 0, i64 20, i1 false) #6
  %38 = load i32, i32* %37, align 1
  %39 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 40
  %40 = bitcast i8* %39 to i32*
  store i32 %38, i32* %40, align 8
  %41 = getelementptr i8, i8* %1, i32 20
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %42, align 1
  %44 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 44
  %45 = bitcast i8* %44 to i32*
  store i32 %43, i32* %45, align 4
  %46 = getelementptr i8, i8* %1, i32 24
  %47 = bitcast i8* %46 to i32*
  %48 = load i32, i32* %47, align 1
  %49 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 48
  %50 = bitcast i8* %49 to i32*
  store i32 %48, i32* %50, align 8
  %51 = getelementptr i8, i8* %1, i32 28
  %52 = bitcast i8* %51 to i32*
  %53 = load i32, i32* %52, align 1
  %54 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 52
  %55 = bitcast i8* %54 to i32*
  store i32 %53, i32* %55, align 4
  %56 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 56
  %57 = bitcast i8* %56 to i64*
  store i64 0, i64* %57, align 8
  %58 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 80
  store i8 0, i8* %58, align 8
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_update(%struct.crypto_onetimeauth_poly1305_state* nocapture %0, i8* nocapture readonly %1, i64 %2) #1 {
  %4 = bitcast %struct.crypto_onetimeauth_poly1305_state* %0 to %struct.poly1305_state_internal_t*
  tail call fastcc void @poly1305_update(%struct.poly1305_state_internal_t* %4, i8* %1, i64 %2)
  ret i32 0
}

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_final(%struct.crypto_onetimeauth_poly1305_state* %0, i8* nocapture %1) #0 {
  %3 = bitcast %struct.crypto_onetimeauth_poly1305_state* %0 to %struct.poly1305_state_internal_t*
  tail call fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* %3, i8* %1)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #2

; Function Attrs: nofree norecurse nounwind
define internal fastcc void @poly1305_update(%struct.poly1305_state_internal_t* nocapture %0, i8* nocapture readonly %1, i64 %2) unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 3
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %33, label %7

7:                                                ; preds = %3
  %8 = sub i64 16, %5
  %9 = icmp ugt i64 %8, %2
  %10 = select i1 %9, i64 %2, i64 %8
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %24, label %12

12:                                               ; preds = %7, %12
  %13 = phi i64 [ %23, %12 ], [ %5, %7 ]
  %14 = phi i64 [ %21, %12 ], [ 0, %7 ]
  %15 = trunc i64 %14 to i32
  %16 = getelementptr i8, i8* %1, i32 %15
  %17 = load i8, i8* %16, align 1
  %18 = add i64 %13, %14
  %19 = trunc i64 %18 to i32
  %20 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 %19
  store i8 %17, i8* %20, align 1
  %21 = add nuw i64 %14, 1
  %22 = icmp ult i64 %21, %10
  %23 = load i64, i64* %4, align 8
  br i1 %22, label %12, label %24

24:                                               ; preds = %12, %7
  %25 = phi i64 [ %5, %7 ], [ %23, %12 ]
  %26 = add i64 %25, %10
  store i64 %26, i64* %4, align 8
  %27 = icmp ult i64 %26, 16
  br i1 %27, label %60, label %28

28:                                               ; preds = %24
  %29 = trunc i64 %10 to i32
  %30 = getelementptr i8, i8* %1, i32 %29
  %31 = sub i64 %2, %10
  %32 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 0
  tail call fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nonnull %0, i8* nonnull %32, i64 16)
  store i64 0, i64* %4, align 8
  br label %33

33:                                               ; preds = %28, %3
  %34 = phi i64 [ %2, %3 ], [ %31, %28 ]
  %35 = phi i8* [ %1, %3 ], [ %30, %28 ]
  %36 = icmp ugt i64 %34, 15
  br i1 %36, label %37, label %42

37:                                               ; preds = %33
  %38 = and i64 %34, -16
  tail call fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nonnull %0, i8* %35, i64 %38)
  %39 = trunc i64 %38 to i32
  %40 = getelementptr i8, i8* %35, i32 %39
  %41 = sub i64 %34, %38
  br label %42

42:                                               ; preds = %37, %33
  %43 = phi i64 [ %41, %37 ], [ %34, %33 ]
  %44 = phi i8* [ %40, %37 ], [ %35, %33 ]
  %45 = icmp eq i64 %43, 0
  br i1 %45, label %60, label %46

46:                                               ; preds = %42, %46
  %47 = phi i64 [ %55, %46 ], [ 0, %42 ]
  %48 = trunc i64 %47 to i32
  %49 = getelementptr i8, i8* %44, i32 %48
  %50 = load i8, i8* %49, align 1
  %51 = load i64, i64* %4, align 8
  %52 = add i64 %51, %47
  %53 = trunc i64 %52 to i32
  %54 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 %53
  store i8 %50, i8* %54, align 1
  %55 = add nuw i64 %47, 1
  %56 = icmp eq i64 %55, %43
  br i1 %56, label %57, label %46

57:                                               ; preds = %46
  %58 = load i64, i64* %4, align 8
  %59 = add i64 %58, %43
  store i64 %59, i64* %4, align 8
  br label %60

60:                                               ; preds = %57, %42, %24
  ret void
}

; Function Attrs: noinline nounwind
define internal fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* %0, i8* nocapture %1) unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 3
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %20, label %6

6:                                                ; preds = %2
  %7 = trunc i64 %4 to i32
  %8 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 %7
  store i8 1, i8* %8, align 1
  %9 = add i64 %4, 1
  %10 = icmp ult i64 %9, 16
  br i1 %10, label %11, label %17

11:                                               ; preds = %6
  %12 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 16
  %13 = bitcast i32* %12 to i8*
  %14 = add i32 %7, 1
  %15 = getelementptr i8, i8* %13, i32 %14
  %16 = sub i32 15, %7
  call void @llvm.memset.p0i8.i32(i8* align 1 %15, i8 0, i32 %16, i1 false)
  br label %17

17:                                               ; preds = %11, %6
  %18 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 5
  store i8 1, i8* %18, align 8
  %19 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 0
  tail call fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nonnull %0, i8* nonnull %19, i64 16)
  br label %20

20:                                               ; preds = %2, %17
  %21 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 0
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 2
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 3
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 4
  %30 = load i32, i32* %29, align 4
  %31 = lshr i32 %24, 26
  %32 = and i32 %24, 67108863
  %33 = add i32 %26, %31
  %34 = lshr i32 %33, 26
  %35 = and i32 %33, 67108863
  %36 = add i32 %34, %28
  %37 = lshr i32 %36, 26
  %38 = and i32 %36, 67108863
  %39 = add i32 %37, %30
  %40 = lshr i32 %39, 26
  %41 = mul nuw nsw i32 %40, 5
  %42 = add i32 %41, %22
  %43 = lshr i32 %42, 26
  %44 = and i32 %42, 67108863
  %45 = add nuw nsw i32 %43, %32
  %46 = add nuw nsw i32 %44, 5
  %47 = lshr i32 %46, 26
  %48 = add nuw nsw i32 %47, %45
  %49 = lshr i32 %48, 26
  %50 = add nuw nsw i32 %49, %35
  %51 = lshr i32 %50, 26
  %52 = add nuw nsw i32 %51, %38
  %53 = lshr i32 %52, 26
  %54 = or i32 %39, -67108864
  %55 = add nsw i32 %54, %53
  %56 = lshr i32 %55, 31
  %57 = add nsw i32 %56, -1
  %58 = and i32 %57, 67108863
  %59 = and i32 %58, %46
  %60 = and i32 %58, %48
  %61 = and i32 %58, %52
  %62 = and i32 %57, %55
  %63 = ashr i32 %55, 31
  %64 = and i32 %63, %44
  %65 = or i32 %64, %59
  %66 = and i32 %63, %45
  %67 = or i32 %66, %60
  %68 = and i32 %63, %35
  %69 = or i32 %68, 0
  %70 = and i32 %63, %38
  %71 = or i32 %70, %61
  %72 = and i32 %63, %39
  %73 = or i32 %62, %72
  %74 = shl i32 %67, 26
  %75 = or i32 %65, %74
  %76 = lshr i32 %67, 6
  %77 = shl i32 %69, 20
  %78 = or i32 %76, %77
  %79 = lshr i32 %69, 12
  %80 = shl i32 %71, 14
  %81 = or i32 %79, %80
  %82 = lshr i32 %71, 18
  %83 = shl i32 %73, 8
  %84 = or i32 %83, %82
  %85 = zext i32 %75 to i64
  %86 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 0
  %87 = load i32, i32* %86, align 8
  %88 = zext i32 %87 to i64
  %89 = add nuw nsw i64 %85, %88
  %90 = trunc i64 %89 to i32
  %91 = zext i32 %78 to i64
  %92 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 1
  %93 = load i32, i32* %92, align 4
  %94 = zext i32 %93 to i64
  %95 = add nuw nsw i64 %91, %94
  %96 = lshr i64 %89, 32
  %97 = add nuw nsw i64 %95, %96
  %98 = trunc i64 %97 to i32
  %99 = zext i32 %81 to i64
  %100 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 2
  %101 = load i32, i32* %100, align 8
  %102 = zext i32 %101 to i64
  %103 = add nuw nsw i64 %99, %102
  %104 = lshr i64 %97, 32
  %105 = add nuw nsw i64 %103, %104
  %106 = trunc i64 %105 to i32
  %107 = zext i32 %84 to i64
  %108 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 3
  %109 = load i32, i32* %108, align 4
  %110 = zext i32 %109 to i64
  %111 = add nuw nsw i64 %107, %110
  %112 = lshr i64 %105, 32
  %113 = add nuw nsw i64 %111, %112
  %114 = trunc i64 %113 to i32
  %115 = bitcast i8* %1 to i32*
  store i32 %90, i32* %115, align 1
  %116 = getelementptr i8, i8* %1, i32 4
  %117 = bitcast i8* %116 to i32*
  store i32 %98, i32* %117, align 1
  %118 = getelementptr i8, i8* %1, i32 8
  %119 = bitcast i8* %118 to i32*
  store i32 %106, i32* %119, align 1
  %120 = getelementptr i8, i8* %1, i32 12
  %121 = bitcast i8* %120 to i32*
  store i32 %114, i32* %121, align 1
  %122 = bitcast %struct.poly1305_state_internal_t* %0 to i8*
  tail call void @sodium_memzero(i8* %122, i32 88) #6
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #2

; Function Attrs: nofree norecurse nounwind
define internal fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nocapture %0, i8* nocapture readonly %1, i64 %2) unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 5
  %5 = load i8, i8* %4, align 8
  %6 = icmp eq i8 %5, 0
  %7 = select i1 %6, i32 16777216, i32 0
  %8 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 2
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 4
  %15 = load i32, i32* %14, align 8
  %16 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 2
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 3
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 4
  %25 = load i32, i32* %24, align 4
  %26 = icmp ugt i64 %2, 15
  br i1 %26, label %27, label %160

27:                                               ; preds = %3
  %28 = mul i32 %15, 5
  %29 = mul i32 %13, 5
  %30 = mul i32 %11, 5
  %31 = mul i32 %9, 5
  %32 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 0
  %33 = load i32, i32* %32, align 8
  %34 = zext i32 %33 to i64
  %35 = zext i32 %28 to i64
  %36 = zext i32 %29 to i64
  %37 = zext i32 %30 to i64
  %38 = zext i32 %31 to i64
  %39 = zext i32 %9 to i64
  %40 = zext i32 %11 to i64
  %41 = zext i32 %13 to i64
  %42 = zext i32 %15 to i64
  br label %43

43:                                               ; preds = %27, %43
  %44 = phi i8* [ %1, %27 ], [ %157, %43 ]
  %45 = phi i64 [ %2, %27 ], [ %158, %43 ]
  %46 = phi i32 [ %17, %27 ], [ %155, %43 ]
  %47 = phi i32 [ %19, %27 ], [ %156, %43 ]
  %48 = phi i32 [ %21, %27 ], [ %140, %43 ]
  %49 = phi i32 [ %23, %27 ], [ %145, %43 ]
  %50 = phi i32 [ %25, %27 ], [ %151, %43 ]
  %51 = bitcast i8* %44 to i32*
  %52 = load i32, i32* %51, align 1
  %53 = and i32 %52, 67108863
  %54 = add i32 %53, %46
  %55 = getelementptr i8, i8* %44, i32 3
  %56 = bitcast i8* %55 to i32*
  %57 = load i32, i32* %56, align 1
  %58 = lshr i32 %57, 2
  %59 = and i32 %58, 67108863
  %60 = add i32 %59, %47
  %61 = getelementptr i8, i8* %44, i32 6
  %62 = bitcast i8* %61 to i32*
  %63 = load i32, i32* %62, align 1
  %64 = lshr i32 %63, 4
  %65 = and i32 %64, 67108863
  %66 = add i32 %65, %48
  %67 = getelementptr i8, i8* %44, i32 9
  %68 = bitcast i8* %67 to i32*
  %69 = load i32, i32* %68, align 1
  %70 = lshr i32 %69, 6
  %71 = add i32 %70, %49
  %72 = getelementptr i8, i8* %44, i32 12
  %73 = bitcast i8* %72 to i32*
  %74 = load i32, i32* %73, align 1
  %75 = lshr i32 %74, 8
  %76 = or i32 %75, %7
  %77 = add i32 %76, %50
  %78 = zext i32 %54 to i64
  %79 = mul nuw i64 %78, %34
  %80 = zext i32 %60 to i64
  %81 = mul nuw i64 %80, %35
  %82 = add i64 %81, %79
  %83 = zext i32 %66 to i64
  %84 = mul nuw i64 %83, %36
  %85 = add i64 %82, %84
  %86 = zext i32 %71 to i64
  %87 = mul nuw i64 %86, %37
  %88 = add i64 %85, %87
  %89 = zext i32 %77 to i64
  %90 = mul nuw i64 %89, %38
  %91 = add i64 %88, %90
  %92 = mul nuw i64 %78, %39
  %93 = mul nuw i64 %80, %34
  %94 = add i64 %93, %92
  %95 = mul nuw i64 %83, %35
  %96 = add i64 %94, %95
  %97 = mul nuw i64 %86, %36
  %98 = add i64 %96, %97
  %99 = mul nuw i64 %89, %37
  %100 = add i64 %98, %99
  %101 = mul nuw i64 %78, %40
  %102 = mul nuw i64 %80, %39
  %103 = add i64 %102, %101
  %104 = mul nuw i64 %83, %34
  %105 = add i64 %103, %104
  %106 = mul nuw i64 %86, %35
  %107 = add i64 %105, %106
  %108 = mul nuw i64 %89, %36
  %109 = add i64 %107, %108
  %110 = mul nuw i64 %78, %41
  %111 = mul nuw i64 %80, %40
  %112 = add i64 %111, %110
  %113 = mul nuw i64 %83, %39
  %114 = add i64 %112, %113
  %115 = mul nuw i64 %86, %34
  %116 = add i64 %114, %115
  %117 = mul nuw i64 %89, %35
  %118 = add i64 %116, %117
  %119 = mul nuw i64 %78, %42
  %120 = mul nuw i64 %80, %41
  %121 = add i64 %120, %119
  %122 = mul nuw i64 %83, %40
  %123 = add i64 %121, %122
  %124 = mul nuw i64 %86, %39
  %125 = add i64 %123, %124
  %126 = mul nuw i64 %89, %34
  %127 = add i64 %125, %126
  %128 = lshr i64 %91, 26
  %129 = trunc i64 %91 to i32
  %130 = and i32 %129, 67108863
  %131 = and i64 %128, 4294967295
  %132 = add i64 %100, %131
  %133 = lshr i64 %132, 26
  %134 = trunc i64 %132 to i32
  %135 = and i32 %134, 67108863
  %136 = and i64 %133, 4294967295
  %137 = add i64 %109, %136
  %138 = lshr i64 %137, 26
  %139 = trunc i64 %137 to i32
  %140 = and i32 %139, 67108863
  %141 = and i64 %138, 4294967295
  %142 = add i64 %118, %141
  %143 = lshr i64 %142, 26
  %144 = trunc i64 %142 to i32
  %145 = and i32 %144, 67108863
  %146 = and i64 %143, 4294967295
  %147 = add i64 %127, %146
  %148 = lshr i64 %147, 26
  %149 = trunc i64 %148 to i32
  %150 = trunc i64 %147 to i32
  %151 = and i32 %150, 67108863
  %152 = mul i32 %149, 5
  %153 = add i32 %152, %130
  %154 = lshr i32 %153, 26
  %155 = and i32 %153, 67108863
  %156 = add nuw nsw i32 %154, %135
  %157 = getelementptr i8, i8* %44, i32 16
  %158 = add i64 %45, -16
  %159 = icmp ugt i64 %158, 15
  br i1 %159, label %43, label %160

160:                                              ; preds = %43, %3
  %161 = phi i32 [ %25, %3 ], [ %151, %43 ]
  %162 = phi i32 [ %23, %3 ], [ %145, %43 ]
  %163 = phi i32 [ %21, %3 ], [ %140, %43 ]
  %164 = phi i32 [ %19, %3 ], [ %156, %43 ]
  %165 = phi i32 [ %17, %3 ], [ %155, %43 ]
  store i32 %165, i32* %16, align 4
  store i32 %164, i32* %18, align 4
  store i32 %163, i32* %20, align 4
  store i32 %162, i32* %22, align 4
  store i32 %161, i32* %24, align 4
  ret void
}

declare void @sodium_memzero(i8* %0, i32 %1) local_unnamed_addr #4

declare i32 @crypto_verify_16(i8* %0, i8* %1) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly %0, i8 %1, i64 %2, i1 immarg %3) #5

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #5

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { noinline nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind willreturn writeonly }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %4 = load i64, i64* %3, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = icmp eq i64 %4, 0
; Looking for a replacement for:
%0:i64 = var
%1:i1 = eq 0:i64, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = trunc i64 %4 to i32
; Looking for a replacement for:
%0:i64 = var
%1:i1 = eq 0:i64, %0
pc %1 0:i1
%2:i32 = trunc %0
infer %2

; *****
; For LLVM instruction:
;  %9 = add i64 %4, 1
; Looking for a replacement for:
%0:i64 = var
%1:i1 = eq 0:i64, %0
pc %1 0:i1
%2:i64 = add 1:i64, %0
infer %2

; *****
; For LLVM instruction:
;  %10 = icmp ult i64 %9, 16
; Looking for a replacement for:
%0:i64 = var
%1:i1 = eq 0:i64, %0
pc %1 0:i1
%2:i64 = add 1:i64, %0
%3:i1 = ult %2, 16:i64
infer %3

; *****
; For LLVM instruction:
;  %14 = add i32 %7, 1
; Looking for a replacement for:
%0:i64 = var
%1:i1 = eq 0:i64, %0
pc %1 0:i1
%2:i64 = add 1:i64, %0
%3:i1 = ult %2, 16:i64
pc %3 1:i1
%4:i32 = trunc %0 (hasExternalUses)
%5:i32 = add 1:i32, %4
infer %5

; *****
; For LLVM instruction:
;  %16 = sub i32 15, %7
; Looking for a replacement for:
%0:i64 = var
%1:i1 = eq 0:i64, %0
pc %1 0:i1
%2:i64 = add 1:i64, %0
%3:i1 = ult %2, 16:i64
pc %3 1:i1
%4:i32 = trunc %0 (hasExternalUses)
%5:i32 = sub 15:i32, %4
infer %5

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %21, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %23, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %25, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %27, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %29, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %31 = lshr i32 %24, 26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 26:i32
infer %1

; *****
; For LLVM instruction:
;  %32 = and i32 %24, 67108863
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 67108863:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %33 = add i32 %26, %31
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2
infer %3

; *****
; For LLVM instruction:
;  %34 = lshr i32 %33, 26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2 (hasExternalUses)
%4:i32 = lshr %3, 26:i32
infer %4

; *****
; For LLVM instruction:
;  %35 = and i32 %33, 67108863
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2 (hasExternalUses)
%4:i32 = and 67108863:i32, %3
infer %4

; *****
; For LLVM instruction:
;  %36 = add i32 %34, %28
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3 (hasExternalUses)
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5
infer %6

; *****
; For LLVM instruction:
;  %37 = lshr i32 %36, 26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3 (hasExternalUses)
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5 (hasExternalUses)
%7:i32 = lshr %6, 26:i32
infer %7

; *****
; For LLVM instruction:
;  %38 = and i32 %36, 67108863
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3 (hasExternalUses)
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5 (hasExternalUses)
%7:i32 = and 67108863:i32, %6
infer %7

; *****
; For LLVM instruction:
;  %39 = add i32 %37, %30
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4 (hasExternalUses)
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6 (hasExternalUses)
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8
infer %9

; *****
; For LLVM instruction:
;  %40 = lshr i32 %39, 26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4 (hasExternalUses)
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6 (hasExternalUses)
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = lshr %9, 26:i32
infer %10

; *****
; For LLVM instruction:
;  %41 = mul nuw nsw i32 %40, 5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4 (hasExternalUses)
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6 (hasExternalUses)
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = lshr %9, 26:i32
%11:i32 = mulnw 5:i32, %10
infer %11

; *****
; For LLVM instruction:
;  %42 = add i32 %41, %22
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5 (hasExternalUses)
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7 (hasExternalUses)
%9:i32 = lshr %8, 26:i32
%10:i32 = add %1, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = mulnw 5:i32, %11
%13:i32 = add %0, %12
infer %13

; *****
; For LLVM instruction:
;  %43 = lshr i32 %42, 26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5 (hasExternalUses)
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7 (hasExternalUses)
%9:i32 = lshr %8, 26:i32
%10:i32 = add %1, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = mulnw 5:i32, %11
%13:i32 = add %0, %12 (hasExternalUses)
%14:i32 = lshr %13, 26:i32
infer %14

; *****
; For LLVM instruction:
;  %44 = and i32 %42, 67108863
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5 (hasExternalUses)
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7 (hasExternalUses)
%9:i32 = lshr %8, 26:i32
%10:i32 = add %1, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = mulnw 5:i32, %11
%13:i32 = add %0, %12 (hasExternalUses)
%14:i32 = and 67108863:i32, %13
infer %14

; *****
; For LLVM instruction:
;  %45 = add nuw nsw i32 %43, %32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 67108863:i32, %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %0, 26:i32
%7:i32 = add %5, %6 (hasExternalUses)
%8:i32 = lshr %7, 26:i32
%9:i32 = add %4, %8 (hasExternalUses)
%10:i32 = lshr %9, 26:i32
%11:i32 = add %3, %10 (hasExternalUses)
%12:i32 = lshr %11, 26:i32
%13:i32 = mulnw 5:i32, %12
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = lshr %14, 26:i32
%16:i32 = addnw %1, %15
infer %16

; *****
; For LLVM instruction:
;  %46 = add nuw nsw i32 %44, 5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5 (hasExternalUses)
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7 (hasExternalUses)
%9:i32 = lshr %8, 26:i32
%10:i32 = add %1, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = mulnw 5:i32, %11
%13:i32 = add %0, %12 (hasExternalUses)
%14:i32 = and 67108863:i32, %13 (hasExternalUses)
%15:i32 = addnw 5:i32, %14
infer %15

; *****
; For LLVM instruction:
;  %47 = lshr i32 %46, 26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5 (hasExternalUses)
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7 (hasExternalUses)
%9:i32 = lshr %8, 26:i32
%10:i32 = add %1, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = mulnw 5:i32, %11
%13:i32 = add %0, %12 (hasExternalUses)
%14:i32 = and 67108863:i32, %13 (hasExternalUses)
%15:i32 = addnw 5:i32, %14 (hasExternalUses)
%16:i32 = lshr %15, 26:i32
infer %16

; *****
; For LLVM instruction:
;  %48 = add nuw nsw i32 %47, %45
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 67108863:i32, %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %0, 26:i32
%7:i32 = add %5, %6 (hasExternalUses)
%8:i32 = lshr %7, 26:i32
%9:i32 = add %4, %8 (hasExternalUses)
%10:i32 = lshr %9, 26:i32
%11:i32 = add %3, %10 (hasExternalUses)
%12:i32 = lshr %11, 26:i32
%13:i32 = mulnw 5:i32, %12
%14:i32 = add %2, %13
%15:i32 = lshr %14, 26:i32
%16:i32 = addnw %1, %15 (hasExternalUses)
%17:i32 = and 67108863:i32, %14 (hasExternalUses)
%18:i32 = addnw 5:i32, %17 (hasExternalUses)
%19:i32 = lshr %18, 26:i32
%20:i32 = addnw %16, %19
infer %20

; *****
; For LLVM instruction:
;  %49 = lshr i32 %48, 26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 67108863:i32, %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %0, 26:i32
%7:i32 = add %5, %6 (hasExternalUses)
%8:i32 = lshr %7, 26:i32
%9:i32 = add %4, %8 (hasExternalUses)
%10:i32 = lshr %9, 26:i32
%11:i32 = add %3, %10 (hasExternalUses)
%12:i32 = lshr %11, 26:i32
%13:i32 = mulnw 5:i32, %12
%14:i32 = add %2, %13
%15:i32 = lshr %14, 26:i32
%16:i32 = addnw %1, %15 (hasExternalUses)
%17:i32 = and 67108863:i32, %14 (hasExternalUses)
%18:i32 = addnw 5:i32, %17 (hasExternalUses)
%19:i32 = lshr %18, 26:i32
%20:i32 = addnw %16, %19 (hasExternalUses)
%21:i32 = lshr %20, 26:i32
infer %21

; *****
; For LLVM instruction:
;  %50 = add nuw nsw i32 %49, %35
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2
%4:i32 = and 67108863:i32, %3 (hasExternalUses)
%5:i32 = and 67108863:i32, %1
%6:i32 = var
%7:i32 = var
%8:i32 = var
%9:i32 = lshr %3, 26:i32
%10:i32 = add %8, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = add %7, %11 (hasExternalUses)
%13:i32 = lshr %12, 26:i32
%14:i32 = mulnw 5:i32, %13
%15:i32 = add %6, %14
%16:i32 = lshr %15, 26:i32
%17:i32 = addnw %5, %16 (hasExternalUses)
%18:i32 = and 67108863:i32, %15 (hasExternalUses)
%19:i32 = addnw 5:i32, %18 (hasExternalUses)
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %17, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %4, %22
infer %23 (demandedBits=11111100000000000000000000000000)

; *****
; For LLVM instruction:
;  %51 = lshr i32 %50, 26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2
%4:i32 = and 67108863:i32, %3 (hasExternalUses)
%5:i32 = and 67108863:i32, %1
%6:i32 = var
%7:i32 = var
%8:i32 = var
%9:i32 = lshr %3, 26:i32
%10:i32 = add %8, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = add %7, %11 (hasExternalUses)
%13:i32 = lshr %12, 26:i32
%14:i32 = mulnw 5:i32, %13
%15:i32 = add %6, %14
%16:i32 = lshr %15, 26:i32
%17:i32 = addnw %5, %16 (hasExternalUses)
%18:i32 = and 67108863:i32, %15 (hasExternalUses)
%19:i32 = addnw 5:i32, %18 (hasExternalUses)
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %17, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %4, %22
%24:i32 = lshr %23, 26:i32
infer %24

; *****
; For LLVM instruction:
;  %52 = add nuw nsw i32 %51, %38
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5
%7:i32 = and 67108863:i32, %6 (hasExternalUses)
%8:i32 = and 67108863:i32, %4 (hasExternalUses)
%9:i32 = and 67108863:i32, %2
%10:i32 = var
%11:i32 = var
%12:i32 = lshr %6, 26:i32
%13:i32 = add %11, %12 (hasExternalUses)
%14:i32 = lshr %13, 26:i32
%15:i32 = mulnw 5:i32, %14
%16:i32 = add %10, %15
%17:i32 = lshr %16, 26:i32
%18:i32 = addnw %9, %17 (hasExternalUses)
%19:i32 = and 67108863:i32, %16 (hasExternalUses)
%20:i32 = addnw 5:i32, %19 (hasExternalUses)
%21:i32 = lshr %20, 26:i32
%22:i32 = addnw %18, %21 (hasExternalUses)
%23:i32 = lshr %22, 26:i32
%24:i32 = addnw %8, %23
%25:i32 = lshr %24, 26:i32
%26:i32 = addnw %7, %25
infer %26

; *****
; For LLVM instruction:
;  %53 = lshr i32 %52, 26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5
%7:i32 = and 67108863:i32, %6 (hasExternalUses)
%8:i32 = and 67108863:i32, %4 (hasExternalUses)
%9:i32 = and 67108863:i32, %2
%10:i32 = var
%11:i32 = var
%12:i32 = lshr %6, 26:i32
%13:i32 = add %11, %12 (hasExternalUses)
%14:i32 = lshr %13, 26:i32
%15:i32 = mulnw 5:i32, %14
%16:i32 = add %10, %15
%17:i32 = lshr %16, 26:i32
%18:i32 = addnw %9, %17 (hasExternalUses)
%19:i32 = and 67108863:i32, %16 (hasExternalUses)
%20:i32 = addnw 5:i32, %19 (hasExternalUses)
%21:i32 = lshr %20, 26:i32
%22:i32 = addnw %18, %21 (hasExternalUses)
%23:i32 = lshr %22, 26:i32
%24:i32 = addnw %8, %23
%25:i32 = lshr %24, 26:i32
%26:i32 = addnw %7, %25 (hasExternalUses)
%27:i32 = lshr %26, 26:i32
infer %27

; *****
; For LLVM instruction:
;  %54 = or i32 %39, -67108864
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4 (hasExternalUses)
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6 (hasExternalUses)
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = or 4227858432:i32, %9
infer %10

; *****
; For LLVM instruction:
;  %55 = add nsw i32 %54, %53
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28
infer %29 (demandedBits=10000000111111111111111111111111)

; *****
; For LLVM instruction:
;  %56 = lshr i32 %55, 31
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
infer %30 (demandedBits=00000011111111111111111111111111)

; *****
; For LLVM instruction:
;  %57 = add nsw i32 %56, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30
infer %31 (demandedBits=00000011111111111111111111111111)

; *****
; For LLVM instruction:
;  %58 = and i32 %57, 67108863
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31
infer %32 (demandedBits=00001111111111111111111111111111)

; *****
; For LLVM instruction:
;  %59 = and i32 %58, %46
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %1, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = mulnw 5:i32, %11
%13:i32 = add %0, %12
%14:i32 = and 67108863:i32, %13 (hasExternalUses)
%15:i32 = addnw 5:i32, %14
%16:i32 = or 4227858432:i32, %10
%17:i32 = and 67108863:i32, %8 (hasExternalUses)
%18:i32 = and 67108863:i32, %6 (hasExternalUses)
%19:i32 = and 67108863:i32, %4
%20:i32 = lshr %13, 26:i32
%21:i32 = addnw %19, %20 (hasExternalUses)
%22:i32 = lshr %15, 26:i32
%23:i32 = addnw %21, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %18, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %17, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %16, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %15, %32
infer %33

; *****
; For LLVM instruction:
;  %60 = and i32 %58, %48
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 67108863:i32, %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %0, 26:i32
%7:i32 = add %5, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %4, %8
%10:i32 = lshr %9, 26:i32
%11:i32 = add %3, %10 (hasExternalUses)
%12:i32 = lshr %11, 26:i32
%13:i32 = mulnw 5:i32, %12
%14:i32 = add %2, %13
%15:i32 = lshr %14, 26:i32
%16:i32 = addnw %1, %15 (hasExternalUses)
%17:i32 = and 67108863:i32, %14 (hasExternalUses)
%18:i32 = addnw 5:i32, %17 (hasExternalUses)
%19:i32 = lshr %18, 26:i32
%20:i32 = addnw %16, %19
%21:i32 = or 4227858432:i32, %11
%22:i32 = and 67108863:i32, %9 (hasExternalUses)
%23:i32 = and 67108863:i32, %7 (hasExternalUses)
%24:i32 = lshr %20, 26:i32
%25:i32 = addnw %23, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %22, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %21, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %20, %32
infer %33

; *****
; For LLVM instruction:
;  %61 = and i32 %58, %52
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5
%7:i32 = and 67108863:i32, %6 (hasExternalUses)
%8:i32 = and 67108863:i32, %4 (hasExternalUses)
%9:i32 = and 67108863:i32, %2
%10:i32 = var
%11:i32 = var
%12:i32 = lshr %6, 26:i32
%13:i32 = add %11, %12 (hasExternalUses)
%14:i32 = lshr %13, 26:i32
%15:i32 = mulnw 5:i32, %14
%16:i32 = add %10, %15
%17:i32 = lshr %16, 26:i32
%18:i32 = addnw %9, %17 (hasExternalUses)
%19:i32 = and 67108863:i32, %16 (hasExternalUses)
%20:i32 = addnw 5:i32, %19 (hasExternalUses)
%21:i32 = lshr %20, 26:i32
%22:i32 = addnw %18, %21 (hasExternalUses)
%23:i32 = lshr %22, 26:i32
%24:i32 = addnw %8, %23
%25:i32 = lshr %24, 26:i32
%26:i32 = addnw %7, %25
%27:i32 = or 4227858432:i32, %13
%28:i32 = lshr %26, 26:i32
%29:i32 = addnsw %27, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %26, %32
infer %33

; *****
; For LLVM instruction:
;  %62 = and i32 %57, %55
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and %31, %29
infer %32 (demandedBits=00000000111111111111111111111111)

; *****
; For LLVM instruction:
;  %63 = ashr i32 %55, 31
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32
infer %30 (demandedBits=00000111111111111111111111111111)

; *****
; For LLVM instruction:
;  %64 = and i32 %63, %44
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %1, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = mulnw 5:i32, %11
%13:i32 = add %0, %12
%14:i32 = and 67108863:i32, %13
%15:i32 = or 4227858432:i32, %10
%16:i32 = and 67108863:i32, %8 (hasExternalUses)
%17:i32 = and 67108863:i32, %6 (hasExternalUses)
%18:i32 = and 67108863:i32, %4
%19:i32 = lshr %13, 26:i32
%20:i32 = addnw %18, %19 (hasExternalUses)
%21:i32 = addnw 5:i32, %14 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %20, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %17, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %16, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %15, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %14, %30
infer %31

; *****
; For LLVM instruction:
;  %65 = or i32 %64, %59
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %1, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = mulnw 5:i32, %11
%13:i32 = add %0, %12
%14:i32 = and 67108863:i32, %13
%15:i32 = addnw 5:i32, %14
%16:i32 = or 4227858432:i32, %10
%17:i32 = and 67108863:i32, %8 (hasExternalUses)
%18:i32 = and 67108863:i32, %6 (hasExternalUses)
%19:i32 = and 67108863:i32, %4
%20:i32 = lshr %13, 26:i32
%21:i32 = addnw %19, %20 (hasExternalUses)
%22:i32 = lshr %15, 26:i32
%23:i32 = addnw %21, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %18, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %17, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %16, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %15, %32
%34:i32 = ashr %29, 31:i32 (hasExternalUses)
%35:i32 = and %14, %34
%36:i32 = or %33, %35
infer %36

; *****
; For LLVM instruction:
;  %66 = and i32 %63, %45
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 67108863:i32, %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %0, 26:i32
%7:i32 = add %5, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %4, %8
%10:i32 = lshr %9, 26:i32
%11:i32 = add %3, %10 (hasExternalUses)
%12:i32 = lshr %11, 26:i32
%13:i32 = mulnw 5:i32, %12
%14:i32 = add %2, %13
%15:i32 = lshr %14, 26:i32
%16:i32 = addnw %1, %15
%17:i32 = or 4227858432:i32, %11
%18:i32 = and 67108863:i32, %9 (hasExternalUses)
%19:i32 = and 67108863:i32, %7 (hasExternalUses)
%20:i32 = and 67108863:i32, %14 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %16, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %19, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %18, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %17, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %16, %30
infer %31

; *****
; For LLVM instruction:
;  %67 = or i32 %66, %60
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 67108863:i32, %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %0, 26:i32
%7:i32 = add %5, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %4, %8
%10:i32 = lshr %9, 26:i32
%11:i32 = add %3, %10 (hasExternalUses)
%12:i32 = lshr %11, 26:i32
%13:i32 = mulnw 5:i32, %12
%14:i32 = add %2, %13
%15:i32 = lshr %14, 26:i32
%16:i32 = addnw %1, %15
%17:i32 = and 67108863:i32, %14 (hasExternalUses)
%18:i32 = addnw 5:i32, %17 (hasExternalUses)
%19:i32 = lshr %18, 26:i32
%20:i32 = addnw %16, %19
%21:i32 = or 4227858432:i32, %11
%22:i32 = and 67108863:i32, %9 (hasExternalUses)
%23:i32 = and 67108863:i32, %7 (hasExternalUses)
%24:i32 = lshr %20, 26:i32
%25:i32 = addnw %23, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %22, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %21, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %20, %32
%34:i32 = ashr %29, 31:i32 (hasExternalUses)
%35:i32 = and %16, %34
%36:i32 = or %33, %35
infer %36

; *****
; For LLVM instruction:
;  %68 = and i32 %63, %35
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2
%4:i32 = and 67108863:i32, %3
%5:i32 = var
%6:i32 = var
%7:i32 = lshr %3, 26:i32
%8:i32 = add %6, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %5, %9 (hasExternalUses)
%11:i32 = or 4227858432:i32, %10
%12:i32 = and 67108863:i32, %8 (hasExternalUses)
%13:i32 = and 67108863:i32, %1
%14:i32 = var
%15:i32 = lshr %10, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %4, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %12, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %11, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %4, %30
infer %31

; *****
; For LLVM instruction:
;  %69 = or i32 %68, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2
%4:i32 = and 67108863:i32, %3
%5:i32 = var
%6:i32 = var
%7:i32 = lshr %3, 26:i32
%8:i32 = add %6, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %5, %9 (hasExternalUses)
%11:i32 = or 4227858432:i32, %10
%12:i32 = and 67108863:i32, %8 (hasExternalUses)
%13:i32 = and 67108863:i32, %1
%14:i32 = var
%15:i32 = lshr %10, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %4, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %12, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %11, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %4, %30
%32:i32 = or 0:i32, %31
infer %32

; *****
; For LLVM instruction:
;  %70 = and i32 %63, %38
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5
%7:i32 = and 67108863:i32, %6
%8:i32 = var
%9:i32 = lshr %6, 26:i32
%10:i32 = add %8, %9 (hasExternalUses)
%11:i32 = or 4227858432:i32, %10
%12:i32 = and 67108863:i32, %4 (hasExternalUses)
%13:i32 = and 67108863:i32, %2
%14:i32 = var
%15:i32 = lshr %10, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %7, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %11, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %7, %30
infer %31

; *****
; For LLVM instruction:
;  %71 = or i32 %70, %61
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5
%7:i32 = and 67108863:i32, %6
%8:i32 = and 67108863:i32, %4 (hasExternalUses)
%9:i32 = and 67108863:i32, %2
%10:i32 = var
%11:i32 = var
%12:i32 = lshr %6, 26:i32
%13:i32 = add %11, %12 (hasExternalUses)
%14:i32 = lshr %13, 26:i32
%15:i32 = mulnw 5:i32, %14
%16:i32 = add %10, %15
%17:i32 = lshr %16, 26:i32
%18:i32 = addnw %9, %17 (hasExternalUses)
%19:i32 = and 67108863:i32, %16 (hasExternalUses)
%20:i32 = addnw 5:i32, %19 (hasExternalUses)
%21:i32 = lshr %20, 26:i32
%22:i32 = addnw %18, %21 (hasExternalUses)
%23:i32 = lshr %22, 26:i32
%24:i32 = addnw %8, %23
%25:i32 = lshr %24, 26:i32
%26:i32 = addnw %7, %25
%27:i32 = or 4227858432:i32, %13
%28:i32 = lshr %26, 26:i32
%29:i32 = addnsw %27, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %26, %32
%34:i32 = ashr %29, 31:i32 (hasExternalUses)
%35:i32 = and %7, %34
%36:i32 = or %33, %35
infer %36

; *****
; For LLVM instruction:
;  %72 = and i32 %63, %39
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %9, %30
infer %31 (demandedBits=00000000111111111111111111111111)

; *****
; For LLVM instruction:
;  %73 = or i32 %62, %72
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %9, %30
%32:i32 = lshr %29, 31:i32
%33:i32 = addnsw 4294967295:i32, %32 (hasExternalUses)
%34:i32 = and %33, %29
%35:i32 = or %31, %34
infer %35 (demandedBits=00000000111111111111111111111111)

; *****
; For LLVM instruction:
;  %74 = shl i32 %67, 26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 67108863:i32, %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %0, 26:i32
%7:i32 = add %5, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %4, %8
%10:i32 = lshr %9, 26:i32
%11:i32 = add %3, %10 (hasExternalUses)
%12:i32 = lshr %11, 26:i32
%13:i32 = mulnw 5:i32, %12
%14:i32 = add %2, %13
%15:i32 = lshr %14, 26:i32
%16:i32 = addnw %1, %15
%17:i32 = and 67108863:i32, %14 (hasExternalUses)
%18:i32 = addnw 5:i32, %17 (hasExternalUses)
%19:i32 = lshr %18, 26:i32
%20:i32 = addnw %16, %19
%21:i32 = or 4227858432:i32, %11
%22:i32 = and 67108863:i32, %9 (hasExternalUses)
%23:i32 = and 67108863:i32, %7 (hasExternalUses)
%24:i32 = lshr %20, 26:i32
%25:i32 = addnw %23, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %22, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %21, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %20, %32
%34:i32 = ashr %29, 31:i32 (hasExternalUses)
%35:i32 = and %16, %34
%36:i32 = or %33, %35 (hasExternalUses)
%37:i32 = shl %36, 26:i32
infer %37

; *****
; For LLVM instruction:
;  %75 = or i32 %65, %74
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %1, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = mulnw 5:i32, %11
%13:i32 = add %0, %12
%14:i32 = and 67108863:i32, %13
%15:i32 = addnw 5:i32, %14
%16:i32 = or 4227858432:i32, %10
%17:i32 = and 67108863:i32, %8 (hasExternalUses)
%18:i32 = and 67108863:i32, %6 (hasExternalUses)
%19:i32 = and 67108863:i32, %4
%20:i32 = lshr %13, 26:i32
%21:i32 = addnw %19, %20
%22:i32 = lshr %15, 26:i32
%23:i32 = addnw %21, %22
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %18, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %17, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %16, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %15, %32
%34:i32 = ashr %29, 31:i32 (hasExternalUses)
%35:i32 = and %14, %34
%36:i32 = or %33, %35
%37:i32 = and %23, %32
%38:i32 = and %21, %34
%39:i32 = or %37, %38 (hasExternalUses)
%40:i32 = shl %39, 26:i32
%41:i32 = or %36, %40
infer %41

; *****
; For LLVM instruction:
;  %76 = lshr i32 %67, 6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 67108863:i32, %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %0, 26:i32
%7:i32 = add %5, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %4, %8
%10:i32 = lshr %9, 26:i32
%11:i32 = add %3, %10 (hasExternalUses)
%12:i32 = lshr %11, 26:i32
%13:i32 = mulnw 5:i32, %12
%14:i32 = add %2, %13
%15:i32 = lshr %14, 26:i32
%16:i32 = addnw %1, %15
%17:i32 = and 67108863:i32, %14 (hasExternalUses)
%18:i32 = addnw 5:i32, %17 (hasExternalUses)
%19:i32 = lshr %18, 26:i32
%20:i32 = addnw %16, %19
%21:i32 = or 4227858432:i32, %11
%22:i32 = and 67108863:i32, %9 (hasExternalUses)
%23:i32 = and 67108863:i32, %7 (hasExternalUses)
%24:i32 = lshr %20, 26:i32
%25:i32 = addnw %23, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %22, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %21, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %20, %32
%34:i32 = ashr %29, 31:i32 (hasExternalUses)
%35:i32 = and %16, %34
%36:i32 = or %33, %35 (hasExternalUses)
%37:i32 = lshr %36, 6:i32
infer %37

; *****
; For LLVM instruction:
;  %77 = shl i32 %69, 20
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2
%4:i32 = and 67108863:i32, %3
%5:i32 = var
%6:i32 = var
%7:i32 = lshr %3, 26:i32
%8:i32 = add %6, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %5, %9 (hasExternalUses)
%11:i32 = or 4227858432:i32, %10
%12:i32 = and 67108863:i32, %8 (hasExternalUses)
%13:i32 = and 67108863:i32, %1
%14:i32 = var
%15:i32 = lshr %10, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %4, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %12, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %11, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %4, %30
%32:i32 = or 0:i32, %31 (hasExternalUses)
%33:i32 = shl %32, 20:i32
infer %33

; *****
; For LLVM instruction:
;  %78 = or i32 %76, %77
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2
%4:i32 = and 67108863:i32, %3
%5:i32 = var
%6:i32 = var
%7:i32 = lshr %3, 26:i32
%8:i32 = add %6, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %5, %9 (hasExternalUses)
%11:i32 = or 4227858432:i32, %10
%12:i32 = and 67108863:i32, %8 (hasExternalUses)
%13:i32 = and 67108863:i32, %1
%14:i32 = var
%15:i32 = lshr %10, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %4, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %12, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %11, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %4, %30
%32:i32 = or 0:i32, %31 (hasExternalUses)
%33:i32 = shl %32, 20:i32
%34:i32 = lshr %29, 31:i32
%35:i32 = addnsw 4294967295:i32, %34 (hasExternalUses)
%36:i32 = and 67108863:i32, %35 (hasExternalUses)
%37:i32 = and %23, %36
%38:i32 = and %19, %30
%39:i32 = or %37, %38 (hasExternalUses)
%40:i32 = lshr %39, 6:i32
%41:i32 = or %33, %40
infer %41

; *****
; For LLVM instruction:
;  %79 = lshr i32 %69, 12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2
%4:i32 = and 67108863:i32, %3
%5:i32 = var
%6:i32 = var
%7:i32 = lshr %3, 26:i32
%8:i32 = add %6, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %5, %9 (hasExternalUses)
%11:i32 = or 4227858432:i32, %10
%12:i32 = and 67108863:i32, %8 (hasExternalUses)
%13:i32 = and 67108863:i32, %1
%14:i32 = var
%15:i32 = lshr %10, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %4, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %12, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %11, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %4, %30
%32:i32 = or 0:i32, %31 (hasExternalUses)
%33:i32 = lshr %32, 12:i32
infer %33

; *****
; For LLVM instruction:
;  %80 = shl i32 %71, 14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5
%7:i32 = and 67108863:i32, %6
%8:i32 = and 67108863:i32, %4 (hasExternalUses)
%9:i32 = and 67108863:i32, %2
%10:i32 = var
%11:i32 = var
%12:i32 = lshr %6, 26:i32
%13:i32 = add %11, %12 (hasExternalUses)
%14:i32 = lshr %13, 26:i32
%15:i32 = mulnw 5:i32, %14
%16:i32 = add %10, %15
%17:i32 = lshr %16, 26:i32
%18:i32 = addnw %9, %17 (hasExternalUses)
%19:i32 = and 67108863:i32, %16 (hasExternalUses)
%20:i32 = addnw 5:i32, %19 (hasExternalUses)
%21:i32 = lshr %20, 26:i32
%22:i32 = addnw %18, %21 (hasExternalUses)
%23:i32 = lshr %22, 26:i32
%24:i32 = addnw %8, %23
%25:i32 = lshr %24, 26:i32
%26:i32 = addnw %7, %25
%27:i32 = or 4227858432:i32, %13
%28:i32 = lshr %26, 26:i32
%29:i32 = addnsw %27, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %26, %32
%34:i32 = ashr %29, 31:i32 (hasExternalUses)
%35:i32 = and %7, %34
%36:i32 = or %33, %35 (hasExternalUses)
%37:i32 = shl %36, 14:i32
infer %37

; *****
; For LLVM instruction:
;  %81 = or i32 %79, %80
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5
%7:i32 = and 67108863:i32, %6
%8:i32 = and 67108863:i32, %4
%9:i32 = and 67108863:i32, %2
%10:i32 = var
%11:i32 = var
%12:i32 = lshr %6, 26:i32
%13:i32 = add %11, %12 (hasExternalUses)
%14:i32 = lshr %13, 26:i32
%15:i32 = mulnw 5:i32, %14
%16:i32 = add %10, %15
%17:i32 = lshr %16, 26:i32
%18:i32 = addnw %9, %17 (hasExternalUses)
%19:i32 = and 67108863:i32, %16 (hasExternalUses)
%20:i32 = addnw 5:i32, %19 (hasExternalUses)
%21:i32 = lshr %20, 26:i32
%22:i32 = addnw %18, %21 (hasExternalUses)
%23:i32 = lshr %22, 26:i32
%24:i32 = addnw %8, %23
%25:i32 = lshr %24, 26:i32
%26:i32 = addnw %7, %25
%27:i32 = or 4227858432:i32, %13
%28:i32 = lshr %26, 26:i32
%29:i32 = addnsw %27, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %26, %32
%34:i32 = ashr %29, 31:i32 (hasExternalUses)
%35:i32 = and %7, %34
%36:i32 = or %33, %35 (hasExternalUses)
%37:i32 = shl %36, 14:i32
%38:i32 = and %8, %34
%39:i32 = or 0:i32, %38 (hasExternalUses)
%40:i32 = lshr %39, 12:i32
%41:i32 = or %37, %40
infer %41

; *****
; For LLVM instruction:
;  %82 = lshr i32 %71, 18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5
%7:i32 = and 67108863:i32, %6
%8:i32 = and 67108863:i32, %4 (hasExternalUses)
%9:i32 = and 67108863:i32, %2
%10:i32 = var
%11:i32 = var
%12:i32 = lshr %6, 26:i32
%13:i32 = add %11, %12 (hasExternalUses)
%14:i32 = lshr %13, 26:i32
%15:i32 = mulnw 5:i32, %14
%16:i32 = add %10, %15
%17:i32 = lshr %16, 26:i32
%18:i32 = addnw %9, %17 (hasExternalUses)
%19:i32 = and 67108863:i32, %16 (hasExternalUses)
%20:i32 = addnw 5:i32, %19 (hasExternalUses)
%21:i32 = lshr %20, 26:i32
%22:i32 = addnw %18, %21 (hasExternalUses)
%23:i32 = lshr %22, 26:i32
%24:i32 = addnw %8, %23
%25:i32 = lshr %24, 26:i32
%26:i32 = addnw %7, %25
%27:i32 = or 4227858432:i32, %13
%28:i32 = lshr %26, 26:i32
%29:i32 = addnsw %27, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %26, %32
%34:i32 = ashr %29, 31:i32 (hasExternalUses)
%35:i32 = and %7, %34
%36:i32 = or %33, %35 (hasExternalUses)
%37:i32 = lshr %36, 18:i32
infer %37

; *****
; For LLVM instruction:
;  %83 = shl i32 %73, 8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %9, %30
%32:i32 = lshr %29, 31:i32
%33:i32 = addnsw 4294967295:i32, %32 (hasExternalUses)
%34:i32 = and %33, %29
%35:i32 = or %31, %34
%36:i32 = shl %35, 8:i32
infer %36

; *****
; For LLVM instruction:
;  %84 = or i32 %83, %82
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %9, %30
%32:i32 = lshr %29, 31:i32
%33:i32 = addnsw 4294967295:i32, %32
%34:i32 = and %33, %29
%35:i32 = or %31, %34
%36:i32 = shl %35, 8:i32
%37:i32 = and 67108863:i32, %33 (hasExternalUses)
%38:i32 = and %27, %37
%39:i32 = and %11, %30
%40:i32 = or %38, %39 (hasExternalUses)
%41:i32 = lshr %40, 18:i32
%42:i32 = or %36, %41
infer %42

; *****
; For LLVM instruction:
;  %85 = zext i32 %75 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %1, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = mulnw 5:i32, %11
%13:i32 = add %0, %12
%14:i32 = and 67108863:i32, %13
%15:i32 = addnw 5:i32, %14
%16:i32 = or 4227858432:i32, %10
%17:i32 = and 67108863:i32, %8 (hasExternalUses)
%18:i32 = and 67108863:i32, %6 (hasExternalUses)
%19:i32 = and 67108863:i32, %4
%20:i32 = lshr %13, 26:i32
%21:i32 = addnw %19, %20
%22:i32 = lshr %15, 26:i32
%23:i32 = addnw %21, %22
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %18, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %17, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %16, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %15, %32
%34:i32 = ashr %29, 31:i32 (hasExternalUses)
%35:i32 = and %14, %34
%36:i32 = or %33, %35
%37:i32 = and %23, %32
%38:i32 = and %21, %34
%39:i32 = or %37, %38 (hasExternalUses)
%40:i32 = shl %39, 26:i32
%41:i32 = or %36, %40
%42:i64 = zext %41
infer %42

; *****
; For LLVM instruction:
;  %87 = load i32, i32* %86, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %88 = zext i32 %87 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %89 = add nuw nsw i64 %85, %88
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = var
%7:i32 = lshr %6, 26:i32
%8:i32 = add %5, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %4, %9
%11:i32 = lshr %10, 26:i32
%12:i32 = add %3, %11 (hasExternalUses)
%13:i32 = lshr %12, 26:i32
%14:i32 = mulnw 5:i32, %13
%15:i32 = add %2, %14
%16:i32 = and 67108863:i32, %15
%17:i32 = addnw 5:i32, %16
%18:i32 = or 4227858432:i32, %12
%19:i32 = and 67108863:i32, %10 (hasExternalUses)
%20:i32 = and 67108863:i32, %8 (hasExternalUses)
%21:i32 = and 67108863:i32, %6
%22:i32 = lshr %15, 26:i32
%23:i32 = addnw %21, %22
%24:i32 = lshr %17, 26:i32
%25:i32 = addnw %23, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %20, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %19, %28 (hasExternalUses)
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %18, %30 (hasExternalUses)
%32:i32 = lshr %31, 31:i32
%33:i32 = addnsw 4294967295:i32, %32 (hasExternalUses)
%34:i32 = and 67108863:i32, %33 (hasExternalUses)
%35:i32 = and %17, %34
%36:i32 = ashr %31, 31:i32 (hasExternalUses)
%37:i32 = and %16, %36
%38:i32 = or %35, %37
%39:i32 = and %25, %34
%40:i32 = and %23, %36
%41:i32 = or %39, %40 (hasExternalUses)
%42:i32 = shl %41, 26:i32
%43:i32 = or %38, %42
%44:i64 = zext %43
%45:i64 = addnw %1, %44
infer %45

; *****
; For LLVM instruction:
;  %90 = trunc i64 %89 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = var
%7:i32 = lshr %6, 26:i32
%8:i32 = add %5, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %4, %9
%11:i32 = lshr %10, 26:i32
%12:i32 = add %3, %11 (hasExternalUses)
%13:i32 = lshr %12, 26:i32
%14:i32 = mulnw 5:i32, %13
%15:i32 = add %2, %14
%16:i32 = and 67108863:i32, %15
%17:i32 = addnw 5:i32, %16
%18:i32 = or 4227858432:i32, %12
%19:i32 = and 67108863:i32, %10 (hasExternalUses)
%20:i32 = and 67108863:i32, %8 (hasExternalUses)
%21:i32 = and 67108863:i32, %6
%22:i32 = lshr %15, 26:i32
%23:i32 = addnw %21, %22
%24:i32 = lshr %17, 26:i32
%25:i32 = addnw %23, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %20, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %19, %28 (hasExternalUses)
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %18, %30 (hasExternalUses)
%32:i32 = lshr %31, 31:i32
%33:i32 = addnsw 4294967295:i32, %32 (hasExternalUses)
%34:i32 = and 67108863:i32, %33 (hasExternalUses)
%35:i32 = and %17, %34
%36:i32 = ashr %31, 31:i32 (hasExternalUses)
%37:i32 = and %16, %36
%38:i32 = or %35, %37
%39:i32 = and %25, %34
%40:i32 = and %23, %36
%41:i32 = or %39, %40 (hasExternalUses)
%42:i32 = shl %41, 26:i32
%43:i32 = or %38, %42
%44:i64 = zext %43
%45:i64 = addnw %1, %44 (hasExternalUses)
%46:i32 = trunc %45
infer %46

; *****
; For LLVM instruction:
;  %91 = zext i32 %78 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2
%4:i32 = and 67108863:i32, %3
%5:i32 = var
%6:i32 = var
%7:i32 = lshr %3, 26:i32
%8:i32 = add %6, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %5, %9 (hasExternalUses)
%11:i32 = or 4227858432:i32, %10
%12:i32 = and 67108863:i32, %8 (hasExternalUses)
%13:i32 = and 67108863:i32, %1
%14:i32 = var
%15:i32 = lshr %10, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %4, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %12, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %11, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %4, %30
%32:i32 = or 0:i32, %31 (hasExternalUses)
%33:i32 = shl %32, 20:i32
%34:i32 = lshr %29, 31:i32
%35:i32 = addnsw 4294967295:i32, %34 (hasExternalUses)
%36:i32 = and 67108863:i32, %35 (hasExternalUses)
%37:i32 = and %23, %36
%38:i32 = and %19, %30
%39:i32 = or %37, %38 (hasExternalUses)
%40:i32 = lshr %39, 6:i32
%41:i32 = or %33, %40
%42:i64 = zext %41
infer %42

; *****
; For LLVM instruction:
;  %93 = load i32, i32* %92, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %94 = zext i32 %93 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %95 = add nuw nsw i64 %91, %94
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = and 67108863:i32, %5
%7:i32 = var
%8:i32 = var
%9:i32 = lshr %5, 26:i32
%10:i32 = add %8, %9
%11:i32 = lshr %10, 26:i32
%12:i32 = add %7, %11 (hasExternalUses)
%13:i32 = or 4227858432:i32, %12
%14:i32 = and 67108863:i32, %10 (hasExternalUses)
%15:i32 = and 67108863:i32, %3
%16:i32 = var
%17:i32 = lshr %12, 26:i32
%18:i32 = mulnw 5:i32, %17
%19:i32 = add %16, %18
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %15, %20
%22:i32 = and 67108863:i32, %19 (hasExternalUses)
%23:i32 = addnw 5:i32, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %21, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %6, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %14, %28 (hasExternalUses)
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %13, %30 (hasExternalUses)
%32:i32 = ashr %31, 31:i32 (hasExternalUses)
%33:i32 = and %6, %32
%34:i32 = or 0:i32, %33 (hasExternalUses)
%35:i32 = shl %34, 20:i32
%36:i32 = lshr %31, 31:i32
%37:i32 = addnsw 4294967295:i32, %36 (hasExternalUses)
%38:i32 = and 67108863:i32, %37 (hasExternalUses)
%39:i32 = and %25, %38
%40:i32 = and %21, %32
%41:i32 = or %39, %40 (hasExternalUses)
%42:i32 = lshr %41, 6:i32
%43:i32 = or %35, %42
%44:i64 = zext %43
%45:i64 = addnw %1, %44
infer %45

; *****
; For LLVM instruction:
;  %96 = lshr i64 %89, 32
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = var
%7:i32 = lshr %6, 26:i32
%8:i32 = add %5, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %4, %9
%11:i32 = lshr %10, 26:i32
%12:i32 = add %3, %11 (hasExternalUses)
%13:i32 = lshr %12, 26:i32
%14:i32 = mulnw 5:i32, %13
%15:i32 = add %2, %14
%16:i32 = and 67108863:i32, %15
%17:i32 = addnw 5:i32, %16
%18:i32 = or 4227858432:i32, %12
%19:i32 = and 67108863:i32, %10 (hasExternalUses)
%20:i32 = and 67108863:i32, %8 (hasExternalUses)
%21:i32 = and 67108863:i32, %6
%22:i32 = lshr %15, 26:i32
%23:i32 = addnw %21, %22
%24:i32 = lshr %17, 26:i32
%25:i32 = addnw %23, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %20, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %19, %28 (hasExternalUses)
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %18, %30 (hasExternalUses)
%32:i32 = lshr %31, 31:i32
%33:i32 = addnsw 4294967295:i32, %32 (hasExternalUses)
%34:i32 = and 67108863:i32, %33 (hasExternalUses)
%35:i32 = and %17, %34
%36:i32 = ashr %31, 31:i32 (hasExternalUses)
%37:i32 = and %16, %36
%38:i32 = or %35, %37
%39:i32 = and %25, %34
%40:i32 = and %23, %36
%41:i32 = or %39, %40 (hasExternalUses)
%42:i32 = shl %41, 26:i32
%43:i32 = or %38, %42
%44:i64 = zext %43
%45:i64 = addnw %1, %44 (hasExternalUses)
%46:i64 = lshr %45, 32:i64
infer %46

; *****
; For LLVM instruction:
;  %97 = add nuw nsw i64 %95, %96
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = and 67108863:i32, %5
%7:i32 = var
%8:i32 = var
%9:i32 = lshr %5, 26:i32
%10:i32 = add %8, %9
%11:i32 = lshr %10, 26:i32
%12:i32 = add %7, %11 (hasExternalUses)
%13:i32 = or 4227858432:i32, %12
%14:i32 = and 67108863:i32, %10 (hasExternalUses)
%15:i32 = and 67108863:i32, %3
%16:i32 = var
%17:i32 = lshr %12, 26:i32
%18:i32 = mulnw 5:i32, %17
%19:i32 = add %16, %18
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %15, %20
%22:i32 = and 67108863:i32, %19
%23:i32 = addnw 5:i32, %22
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %21, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %6, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %14, %28 (hasExternalUses)
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %13, %30 (hasExternalUses)
%32:i32 = ashr %31, 31:i32 (hasExternalUses)
%33:i32 = and %6, %32
%34:i32 = or 0:i32, %33 (hasExternalUses)
%35:i32 = shl %34, 20:i32
%36:i32 = lshr %31, 31:i32
%37:i32 = addnsw 4294967295:i32, %36 (hasExternalUses)
%38:i32 = and 67108863:i32, %37 (hasExternalUses)
%39:i32 = and %25, %38
%40:i32 = and %21, %32
%41:i32 = or %39, %40
%42:i32 = lshr %41, 6:i32
%43:i32 = or %35, %42
%44:i64 = zext %43
%45:i64 = addnw %1, %44
%46:i32 = var
%47:i64 = zext %46
%48:i32 = and %23, %38
%49:i32 = and %22, %32
%50:i32 = or %48, %49
%51:i32 = shl %41, 26:i32
%52:i32 = or %50, %51
%53:i64 = zext %52
%54:i64 = addnw %47, %53 (hasExternalUses)
%55:i64 = lshr %54, 32:i64
%56:i64 = addnw %45, %55
infer %56

; *****
; For LLVM instruction:
;  %98 = trunc i64 %97 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = and 67108863:i32, %5
%7:i32 = var
%8:i32 = var
%9:i32 = lshr %5, 26:i32
%10:i32 = add %8, %9
%11:i32 = lshr %10, 26:i32
%12:i32 = add %7, %11 (hasExternalUses)
%13:i32 = or 4227858432:i32, %12
%14:i32 = and 67108863:i32, %10 (hasExternalUses)
%15:i32 = and 67108863:i32, %3
%16:i32 = var
%17:i32 = lshr %12, 26:i32
%18:i32 = mulnw 5:i32, %17
%19:i32 = add %16, %18
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %15, %20
%22:i32 = and 67108863:i32, %19
%23:i32 = addnw 5:i32, %22
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %21, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %6, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %14, %28 (hasExternalUses)
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %13, %30 (hasExternalUses)
%32:i32 = ashr %31, 31:i32 (hasExternalUses)
%33:i32 = and %6, %32
%34:i32 = or 0:i32, %33 (hasExternalUses)
%35:i32 = shl %34, 20:i32
%36:i32 = lshr %31, 31:i32
%37:i32 = addnsw 4294967295:i32, %36 (hasExternalUses)
%38:i32 = and 67108863:i32, %37 (hasExternalUses)
%39:i32 = and %25, %38
%40:i32 = and %21, %32
%41:i32 = or %39, %40
%42:i32 = lshr %41, 6:i32
%43:i32 = or %35, %42
%44:i64 = zext %43
%45:i64 = addnw %1, %44
%46:i32 = var
%47:i64 = zext %46
%48:i32 = and %23, %38
%49:i32 = and %22, %32
%50:i32 = or %48, %49
%51:i32 = shl %41, 26:i32
%52:i32 = or %50, %51
%53:i64 = zext %52
%54:i64 = addnw %47, %53 (hasExternalUses)
%55:i64 = lshr %54, 32:i64
%56:i64 = addnw %45, %55 (hasExternalUses)
%57:i32 = trunc %56
infer %57

; *****
; For LLVM instruction:
;  %99 = zext i32 %81 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5
%7:i32 = and 67108863:i32, %6
%8:i32 = and 67108863:i32, %4
%9:i32 = and 67108863:i32, %2
%10:i32 = var
%11:i32 = var
%12:i32 = lshr %6, 26:i32
%13:i32 = add %11, %12 (hasExternalUses)
%14:i32 = lshr %13, 26:i32
%15:i32 = mulnw 5:i32, %14
%16:i32 = add %10, %15
%17:i32 = lshr %16, 26:i32
%18:i32 = addnw %9, %17 (hasExternalUses)
%19:i32 = and 67108863:i32, %16 (hasExternalUses)
%20:i32 = addnw 5:i32, %19 (hasExternalUses)
%21:i32 = lshr %20, 26:i32
%22:i32 = addnw %18, %21 (hasExternalUses)
%23:i32 = lshr %22, 26:i32
%24:i32 = addnw %8, %23
%25:i32 = lshr %24, 26:i32
%26:i32 = addnw %7, %25
%27:i32 = or 4227858432:i32, %13
%28:i32 = lshr %26, 26:i32
%29:i32 = addnsw %27, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %26, %32
%34:i32 = ashr %29, 31:i32 (hasExternalUses)
%35:i32 = and %7, %34
%36:i32 = or %33, %35 (hasExternalUses)
%37:i32 = shl %36, 14:i32
%38:i32 = and %8, %34
%39:i32 = or 0:i32, %38 (hasExternalUses)
%40:i32 = lshr %39, 12:i32
%41:i32 = or %37, %40
%42:i64 = zext %41
infer %42

; *****
; For LLVM instruction:
;  %101 = load i32, i32* %100, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %102 = zext i32 %101 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %103 = add nuw nsw i64 %99, %102
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7
%9:i32 = and 67108863:i32, %8
%10:i32 = and 67108863:i32, %6
%11:i32 = and 67108863:i32, %4
%12:i32 = var
%13:i32 = var
%14:i32 = lshr %8, 26:i32
%15:i32 = add %13, %14 (hasExternalUses)
%16:i32 = lshr %15, 26:i32
%17:i32 = mulnw 5:i32, %16
%18:i32 = add %12, %17
%19:i32 = lshr %18, 26:i32
%20:i32 = addnw %11, %19 (hasExternalUses)
%21:i32 = and 67108863:i32, %18 (hasExternalUses)
%22:i32 = addnw 5:i32, %21 (hasExternalUses)
%23:i32 = lshr %22, 26:i32
%24:i32 = addnw %20, %23 (hasExternalUses)
%25:i32 = lshr %24, 26:i32
%26:i32 = addnw %10, %25
%27:i32 = lshr %26, 26:i32
%28:i32 = addnw %9, %27
%29:i32 = or 4227858432:i32, %15
%30:i32 = lshr %28, 26:i32
%31:i32 = addnsw %29, %30 (hasExternalUses)
%32:i32 = lshr %31, 31:i32
%33:i32 = addnsw 4294967295:i32, %32 (hasExternalUses)
%34:i32 = and 67108863:i32, %33 (hasExternalUses)
%35:i32 = and %28, %34
%36:i32 = ashr %31, 31:i32 (hasExternalUses)
%37:i32 = and %9, %36
%38:i32 = or %35, %37 (hasExternalUses)
%39:i32 = shl %38, 14:i32
%40:i32 = and %10, %36
%41:i32 = or 0:i32, %40 (hasExternalUses)
%42:i32 = lshr %41, 12:i32
%43:i32 = or %39, %42
%44:i64 = zext %43
%45:i64 = addnw %1, %44
infer %45

; *****
; For LLVM instruction:
;  %104 = lshr i64 %97, 32
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = and 67108863:i32, %5
%7:i32 = var
%8:i32 = var
%9:i32 = lshr %5, 26:i32
%10:i32 = add %8, %9
%11:i32 = lshr %10, 26:i32
%12:i32 = add %7, %11 (hasExternalUses)
%13:i32 = or 4227858432:i32, %12
%14:i32 = and 67108863:i32, %10 (hasExternalUses)
%15:i32 = and 67108863:i32, %3
%16:i32 = var
%17:i32 = lshr %12, 26:i32
%18:i32 = mulnw 5:i32, %17
%19:i32 = add %16, %18
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %15, %20
%22:i32 = and 67108863:i32, %19
%23:i32 = addnw 5:i32, %22
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %21, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %6, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %14, %28 (hasExternalUses)
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %13, %30 (hasExternalUses)
%32:i32 = ashr %31, 31:i32 (hasExternalUses)
%33:i32 = and %6, %32
%34:i32 = or 0:i32, %33 (hasExternalUses)
%35:i32 = shl %34, 20:i32
%36:i32 = lshr %31, 31:i32
%37:i32 = addnsw 4294967295:i32, %36 (hasExternalUses)
%38:i32 = and 67108863:i32, %37 (hasExternalUses)
%39:i32 = and %25, %38
%40:i32 = and %21, %32
%41:i32 = or %39, %40
%42:i32 = lshr %41, 6:i32
%43:i32 = or %35, %42
%44:i64 = zext %43
%45:i64 = addnw %1, %44
%46:i32 = var
%47:i64 = zext %46
%48:i32 = and %23, %38
%49:i32 = and %22, %32
%50:i32 = or %48, %49
%51:i32 = shl %41, 26:i32
%52:i32 = or %50, %51
%53:i64 = zext %52
%54:i64 = addnw %47, %53 (hasExternalUses)
%55:i64 = lshr %54, 32:i64
%56:i64 = addnw %45, %55 (hasExternalUses)
%57:i64 = lshr %56, 32:i64
infer %57

; *****
; For LLVM instruction:
;  %105 = add nuw nsw i64 %103, %104
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7
%9:i32 = and 67108863:i32, %8
%10:i32 = and 67108863:i32, %6
%11:i32 = and 67108863:i32, %4
%12:i32 = var
%13:i32 = var
%14:i32 = lshr %8, 26:i32
%15:i32 = add %13, %14 (hasExternalUses)
%16:i32 = lshr %15, 26:i32
%17:i32 = mulnw 5:i32, %16
%18:i32 = add %12, %17
%19:i32 = lshr %18, 26:i32
%20:i32 = addnw %11, %19
%21:i32 = and 67108863:i32, %18
%22:i32 = addnw 5:i32, %21
%23:i32 = lshr %22, 26:i32
%24:i32 = addnw %20, %23
%25:i32 = lshr %24, 26:i32
%26:i32 = addnw %10, %25
%27:i32 = lshr %26, 26:i32
%28:i32 = addnw %9, %27
%29:i32 = or 4227858432:i32, %15
%30:i32 = lshr %28, 26:i32
%31:i32 = addnsw %29, %30 (hasExternalUses)
%32:i32 = lshr %31, 31:i32
%33:i32 = addnsw 4294967295:i32, %32 (hasExternalUses)
%34:i32 = and 67108863:i32, %33
%35:i32 = and %28, %34
%36:i32 = ashr %31, 31:i32 (hasExternalUses)
%37:i32 = and %9, %36
%38:i32 = or %35, %37 (hasExternalUses)
%39:i32 = shl %38, 14:i32
%40:i32 = and %10, %36
%41:i32 = or 0:i32, %40
%42:i32 = lshr %41, 12:i32
%43:i32 = or %39, %42
%44:i64 = zext %43
%45:i64 = addnw %1, %44
%46:i32 = var
%47:i64 = zext %46
%48:i32 = shl %41, 20:i32
%49:i32 = and %24, %34
%50:i32 = and %20, %36
%51:i32 = or %49, %50
%52:i32 = lshr %51, 6:i32
%53:i32 = or %48, %52
%54:i64 = zext %53
%55:i64 = addnw %47, %54
%56:i32 = var
%57:i64 = zext %56
%58:i32 = and %22, %34
%59:i32 = and %21, %36
%60:i32 = or %58, %59
%61:i32 = shl %51, 26:i32
%62:i32 = or %60, %61
%63:i64 = zext %62
%64:i64 = addnw %57, %63 (hasExternalUses)
%65:i64 = lshr %64, 32:i64
%66:i64 = addnw %55, %65 (hasExternalUses)
%67:i64 = lshr %66, 32:i64
%68:i64 = addnw %45, %67
infer %68

; *****
; For LLVM instruction:
;  %106 = trunc i64 %105 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7
%9:i32 = and 67108863:i32, %8
%10:i32 = and 67108863:i32, %6
%11:i32 = and 67108863:i32, %4
%12:i32 = var
%13:i32 = var
%14:i32 = lshr %8, 26:i32
%15:i32 = add %13, %14 (hasExternalUses)
%16:i32 = lshr %15, 26:i32
%17:i32 = mulnw 5:i32, %16
%18:i32 = add %12, %17
%19:i32 = lshr %18, 26:i32
%20:i32 = addnw %11, %19
%21:i32 = and 67108863:i32, %18
%22:i32 = addnw 5:i32, %21
%23:i32 = lshr %22, 26:i32
%24:i32 = addnw %20, %23
%25:i32 = lshr %24, 26:i32
%26:i32 = addnw %10, %25
%27:i32 = lshr %26, 26:i32
%28:i32 = addnw %9, %27
%29:i32 = or 4227858432:i32, %15
%30:i32 = lshr %28, 26:i32
%31:i32 = addnsw %29, %30 (hasExternalUses)
%32:i32 = lshr %31, 31:i32
%33:i32 = addnsw 4294967295:i32, %32 (hasExternalUses)
%34:i32 = and 67108863:i32, %33
%35:i32 = and %28, %34
%36:i32 = ashr %31, 31:i32 (hasExternalUses)
%37:i32 = and %9, %36
%38:i32 = or %35, %37 (hasExternalUses)
%39:i32 = shl %38, 14:i32
%40:i32 = and %10, %36
%41:i32 = or 0:i32, %40
%42:i32 = lshr %41, 12:i32
%43:i32 = or %39, %42
%44:i64 = zext %43
%45:i64 = addnw %1, %44
%46:i32 = var
%47:i64 = zext %46
%48:i32 = shl %41, 20:i32
%49:i32 = and %24, %34
%50:i32 = and %20, %36
%51:i32 = or %49, %50
%52:i32 = lshr %51, 6:i32
%53:i32 = or %48, %52
%54:i64 = zext %53
%55:i64 = addnw %47, %54
%56:i32 = var
%57:i64 = zext %56
%58:i32 = and %22, %34
%59:i32 = and %21, %36
%60:i32 = or %58, %59
%61:i32 = shl %51, 26:i32
%62:i32 = or %60, %61
%63:i64 = zext %62
%64:i64 = addnw %57, %63 (hasExternalUses)
%65:i64 = lshr %64, 32:i64
%66:i64 = addnw %55, %65 (hasExternalUses)
%67:i64 = lshr %66, 32:i64
%68:i64 = addnw %45, %67 (hasExternalUses)
%69:i32 = trunc %68
infer %69

; *****
; For LLVM instruction:
;  %107 = zext i32 %84 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %9, %30
%32:i32 = lshr %29, 31:i32
%33:i32 = addnsw 4294967295:i32, %32
%34:i32 = and %33, %29
%35:i32 = or %31, %34
%36:i32 = shl %35, 8:i32
%37:i32 = and 67108863:i32, %33 (hasExternalUses)
%38:i32 = and %27, %37
%39:i32 = and %11, %30
%40:i32 = or %38, %39 (hasExternalUses)
%41:i32 = lshr %40, 18:i32
%42:i32 = or %36, %41
%43:i64 = zext %42
infer %43 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %109 = load i32, i32* %108, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %110 = zext i32 %109 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
infer %1 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %111 = add nuw nsw i64 %107, %110
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %5, 26:i32
%7:i32 = add %4, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %3, %8
%10:i32 = lshr %9, 26:i32
%11:i32 = add %2, %10
%12:i32 = or 4227858432:i32, %11
%13:i32 = and 67108863:i32, %9
%14:i32 = and 67108863:i32, %7 (hasExternalUses)
%15:i32 = and 67108863:i32, %5
%16:i32 = var
%17:i32 = lshr %11, 26:i32
%18:i32 = mulnw 5:i32, %17
%19:i32 = add %16, %18
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %15, %20 (hasExternalUses)
%22:i32 = and 67108863:i32, %19 (hasExternalUses)
%23:i32 = addnw 5:i32, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %21, %24 (hasExternalUses)
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %14, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %13, %28
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %12, %30
%32:i32 = ashr %31, 31:i32 (hasExternalUses)
%33:i32 = and %11, %32
%34:i32 = lshr %31, 31:i32
%35:i32 = addnsw 4294967295:i32, %34
%36:i32 = and %35, %31
%37:i32 = or %33, %36
%38:i32 = shl %37, 8:i32
%39:i32 = and 67108863:i32, %35 (hasExternalUses)
%40:i32 = and %29, %39
%41:i32 = and %13, %32
%42:i32 = or %40, %41 (hasExternalUses)
%43:i32 = lshr %42, 18:i32
%44:i32 = or %38, %43
%45:i64 = zext %44
%46:i64 = addnw %1, %45
infer %46 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %112 = lshr i64 %105, 32
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7
%9:i32 = and 67108863:i32, %8
%10:i32 = and 67108863:i32, %6
%11:i32 = and 67108863:i32, %4
%12:i32 = var
%13:i32 = var
%14:i32 = lshr %8, 26:i32
%15:i32 = add %13, %14 (hasExternalUses)
%16:i32 = lshr %15, 26:i32
%17:i32 = mulnw 5:i32, %16
%18:i32 = add %12, %17
%19:i32 = lshr %18, 26:i32
%20:i32 = addnw %11, %19
%21:i32 = and 67108863:i32, %18
%22:i32 = addnw 5:i32, %21
%23:i32 = lshr %22, 26:i32
%24:i32 = addnw %20, %23
%25:i32 = lshr %24, 26:i32
%26:i32 = addnw %10, %25
%27:i32 = lshr %26, 26:i32
%28:i32 = addnw %9, %27
%29:i32 = or 4227858432:i32, %15
%30:i32 = lshr %28, 26:i32
%31:i32 = addnsw %29, %30 (hasExternalUses)
%32:i32 = lshr %31, 31:i32
%33:i32 = addnsw 4294967295:i32, %32 (hasExternalUses)
%34:i32 = and 67108863:i32, %33
%35:i32 = and %28, %34
%36:i32 = ashr %31, 31:i32 (hasExternalUses)
%37:i32 = and %9, %36
%38:i32 = or %35, %37 (hasExternalUses)
%39:i32 = shl %38, 14:i32
%40:i32 = and %10, %36
%41:i32 = or 0:i32, %40
%42:i32 = lshr %41, 12:i32
%43:i32 = or %39, %42
%44:i64 = zext %43
%45:i64 = addnw %1, %44
%46:i32 = var
%47:i64 = zext %46
%48:i32 = shl %41, 20:i32
%49:i32 = and %24, %34
%50:i32 = and %20, %36
%51:i32 = or %49, %50
%52:i32 = lshr %51, 6:i32
%53:i32 = or %48, %52
%54:i64 = zext %53
%55:i64 = addnw %47, %54
%56:i32 = var
%57:i64 = zext %56
%58:i32 = and %22, %34
%59:i32 = and %21, %36
%60:i32 = or %58, %59
%61:i32 = shl %51, 26:i32
%62:i32 = or %60, %61
%63:i64 = zext %62
%64:i64 = addnw %57, %63 (hasExternalUses)
%65:i64 = lshr %64, 32:i64
%66:i64 = addnw %55, %65 (hasExternalUses)
%67:i64 = lshr %66, 32:i64
%68:i64 = addnw %45, %67 (hasExternalUses)
%69:i64 = lshr %68, 32:i64
infer %69 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %113 = add nuw nsw i64 %111, %112
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %5, 26:i32
%7:i32 = add %4, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %3, %8
%10:i32 = lshr %9, 26:i32
%11:i32 = add %2, %10
%12:i32 = or 4227858432:i32, %11
%13:i32 = and 67108863:i32, %9
%14:i32 = and 67108863:i32, %7
%15:i32 = and 67108863:i32, %5
%16:i32 = var
%17:i32 = lshr %11, 26:i32
%18:i32 = mulnw 5:i32, %17
%19:i32 = add %16, %18
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %15, %20
%22:i32 = and 67108863:i32, %19
%23:i32 = addnw 5:i32, %22
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %21, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %14, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %13, %28
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %12, %30
%32:i32 = ashr %31, 31:i32
%33:i32 = and %11, %32
%34:i32 = lshr %31, 31:i32
%35:i32 = addnsw 4294967295:i32, %34
%36:i32 = and %35, %31
%37:i32 = or %33, %36
%38:i32 = shl %37, 8:i32
%39:i32 = and 67108863:i32, %35
%40:i32 = and %29, %39
%41:i32 = and %13, %32
%42:i32 = or %40, %41
%43:i32 = lshr %42, 18:i32
%44:i32 = or %38, %43
%45:i64 = zext %44
%46:i64 = addnw %1, %45
%47:i32 = var
%48:i64 = zext %47
%49:i32 = shl %42, 14:i32
%50:i32 = and %14, %32
%51:i32 = or 0:i32, %50
%52:i32 = lshr %51, 12:i32
%53:i32 = or %49, %52
%54:i64 = zext %53
%55:i64 = addnw %48, %54
%56:i32 = var
%57:i64 = zext %56
%58:i32 = shl %51, 20:i32
%59:i32 = and %25, %39
%60:i32 = and %21, %32
%61:i32 = or %59, %60
%62:i32 = lshr %61, 6:i32
%63:i32 = or %58, %62
%64:i64 = zext %63
%65:i64 = addnw %57, %64
%66:i32 = var
%67:i64 = zext %66
%68:i32 = and %23, %39
%69:i32 = and %22, %32
%70:i32 = or %68, %69
%71:i32 = shl %61, 26:i32
%72:i32 = or %70, %71
%73:i64 = zext %72
%74:i64 = addnw %67, %73 (hasExternalUses)
%75:i64 = lshr %74, 32:i64
%76:i64 = addnw %65, %75 (hasExternalUses)
%77:i64 = lshr %76, 32:i64
%78:i64 = addnw %55, %77 (hasExternalUses)
%79:i64 = lshr %78, 32:i64
%80:i64 = addnw %46, %79
infer %80 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %114 = trunc i64 %113 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %5, 26:i32
%7:i32 = add %4, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %3, %8
%10:i32 = lshr %9, 26:i32
%11:i32 = add %2, %10
%12:i32 = or 4227858432:i32, %11
%13:i32 = and 67108863:i32, %9
%14:i32 = and 67108863:i32, %7
%15:i32 = and 67108863:i32, %5
%16:i32 = var
%17:i32 = lshr %11, 26:i32
%18:i32 = mulnw 5:i32, %17
%19:i32 = add %16, %18
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %15, %20
%22:i32 = and 67108863:i32, %19
%23:i32 = addnw 5:i32, %22
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %21, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %14, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %13, %28
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %12, %30
%32:i32 = ashr %31, 31:i32
%33:i32 = and %11, %32
%34:i32 = lshr %31, 31:i32
%35:i32 = addnsw 4294967295:i32, %34
%36:i32 = and %35, %31
%37:i32 = or %33, %36
%38:i32 = shl %37, 8:i32
%39:i32 = and 67108863:i32, %35
%40:i32 = and %29, %39
%41:i32 = and %13, %32
%42:i32 = or %40, %41
%43:i32 = lshr %42, 18:i32
%44:i32 = or %38, %43
%45:i64 = zext %44
%46:i64 = addnw %1, %45
%47:i32 = var
%48:i64 = zext %47
%49:i32 = shl %42, 14:i32
%50:i32 = and %14, %32
%51:i32 = or 0:i32, %50
%52:i32 = lshr %51, 12:i32
%53:i32 = or %49, %52
%54:i64 = zext %53
%55:i64 = addnw %48, %54
%56:i32 = var
%57:i64 = zext %56
%58:i32 = shl %51, 20:i32
%59:i32 = and %25, %39
%60:i32 = and %21, %32
%61:i32 = or %59, %60
%62:i32 = lshr %61, 6:i32
%63:i32 = or %58, %62
%64:i64 = zext %63
%65:i64 = addnw %57, %64
%66:i32 = var
%67:i64 = zext %66
%68:i32 = and %23, %39
%69:i32 = and %22, %32
%70:i32 = or %68, %69
%71:i32 = shl %61, 26:i32
%72:i32 = or %70, %71
%73:i64 = zext %72
%74:i64 = addnw %67, %73 (hasExternalUses)
%75:i64 = lshr %74, 32:i64
%76:i64 = addnw %65, %75 (hasExternalUses)
%77:i64 = lshr %76, 32:i64
%78:i64 = addnw %55, %77 (hasExternalUses)
%79:i64 = lshr %78, 32:i64
%80:i64 = addnw %46, %79
%81:i32 = trunc %80
infer %81
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2
%4:i32 = and 67108863:i32, %3 (hasExternalUses)
%5:i32 = and 67108863:i32, %1
%6:i32 = var
%7:i32 = var
%8:i32 = var
%9:i32 = lshr %3, 26:i32
%10:i32 = add %8, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = add %7, %11 (hasExternalUses)
%13:i32 = lshr %12, 26:i32
%14:i32 = mulnw 5:i32, %13
%15:i32 = add %6, %14
%16:i32 = lshr %15, 26:i32
%17:i32 = addnw %5, %16 (hasExternalUses)
%18:i32 = and 67108863:i32, %15 (hasExternalUses)
%19:i32 = addnw 5:i32, %18 (hasExternalUses)
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %17, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %4, %22
infer %23 (demandedBits=11111100000000000000000000000000)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 67108864
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = lshr %0, 26:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2
%4:i32 = and 67108863:i32, %3 (hasExternalUses)
%5:i32 = and 67108863:i32, %1
%6:i32 = var
%7:i32 = var
%8:i32 = var
%9:i32 = lshr %3, 26:i32
%10:i32 = add %8, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = add %7, %11 (hasExternalUses)
%13:i32 = lshr %12, 26:i32
%14:i32 = mulnw 5:i32, %13
%15:i32 = add %6, %14
%16:i32 = lshr %15, 26:i32
%17:i32 = addnw %5, %16 (hasExternalUses)
%18:i32 = and 67108863:i32, %15 (hasExternalUses)
%19:i32 = addnw 5:i32, %18 (hasExternalUses)
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %17, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %4, %22
%24:i32 = lshr %23, 26:i32
infer %24


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = lshr %0, 26:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5
%7:i32 = and 67108863:i32, %6 (hasExternalUses)
%8:i32 = and 67108863:i32, %4 (hasExternalUses)
%9:i32 = and 67108863:i32, %2
%10:i32 = var
%11:i32 = var
%12:i32 = lshr %6, 26:i32
%13:i32 = add %11, %12 (hasExternalUses)
%14:i32 = lshr %13, 26:i32
%15:i32 = mulnw 5:i32, %14
%16:i32 = add %10, %15
%17:i32 = lshr %16, 26:i32
%18:i32 = addnw %9, %17 (hasExternalUses)
%19:i32 = and 67108863:i32, %16 (hasExternalUses)
%20:i32 = addnw 5:i32, %19 (hasExternalUses)
%21:i32 = lshr %20, 26:i32
%22:i32 = addnw %18, %21 (hasExternalUses)
%23:i32 = lshr %22, 26:i32
%24:i32 = addnw %8, %23
%25:i32 = lshr %24, 26:i32
%26:i32 = addnw %7, %25
infer %26


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2 (hasExternalUses)
%4:i32 = lshr %3, 26:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2 (hasExternalUses)
%4:i32 = and 67108863:i32, %3

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5
%7:i32 = and 67108863:i32, %6 (hasExternalUses)
%8:i32 = and 67108863:i32, %4 (hasExternalUses)
%9:i32 = and 67108863:i32, %2
%10:i32 = var
%11:i32 = var
%12:i32 = lshr %6, 26:i32
%13:i32 = add %11, %12 (hasExternalUses)
%14:i32 = lshr %13, 26:i32
%15:i32 = mulnw 5:i32, %14
%16:i32 = add %10, %15
%17:i32 = lshr %16, 26:i32
%18:i32 = addnw %9, %17 (hasExternalUses)
%19:i32 = and 67108863:i32, %16 (hasExternalUses)
%20:i32 = addnw 5:i32, %19 (hasExternalUses)
%21:i32 = lshr %20, 26:i32
%22:i32 = addnw %18, %21 (hasExternalUses)
%23:i32 = lshr %22, 26:i32
%24:i32 = addnw %8, %23
%25:i32 = lshr %24, 26:i32
%26:i32 = addnw %7, %25 (hasExternalUses)
%27:i32 = lshr %26, 26:i32
infer %27


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28
infer %29 (demandedBits=10000000111111111111111111111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -2147483648
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -52
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
infer %30 (demandedBits=00000011111111111111111111111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30
infer %31 (demandedBits=00000011111111111111111111111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31
infer %32 (demandedBits=00001111111111111111111111111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 67108863
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %1, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = mulnw 5:i32, %11
%13:i32 = add %0, %12
%14:i32 = and 67108863:i32, %13 (hasExternalUses)
%15:i32 = addnw 5:i32, %14
%16:i32 = or 4227858432:i32, %10
%17:i32 = and 67108863:i32, %8 (hasExternalUses)
%18:i32 = and 67108863:i32, %6 (hasExternalUses)
%19:i32 = and 67108863:i32, %4
%20:i32 = lshr %13, 26:i32
%21:i32 = addnw %19, %20 (hasExternalUses)
%22:i32 = lshr %15, 26:i32
%23:i32 = addnw %21, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %18, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %17, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %16, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %15, %32
infer %33


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 124
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = and 67108863:i32, %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %0, 26:i32
%7:i32 = add %5, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %4, %8
%10:i32 = lshr %9, 26:i32
%11:i32 = add %3, %10 (hasExternalUses)
%12:i32 = lshr %11, 26:i32
%13:i32 = mulnw 5:i32, %12
%14:i32 = add %2, %13
%15:i32 = lshr %14, 26:i32
%16:i32 = addnw %1, %15 (hasExternalUses)
%17:i32 = and 67108863:i32, %14 (hasExternalUses)
%18:i32 = addnw 5:i32, %17 (hasExternalUses)
%19:i32 = lshr %18, 26:i32
%20:i32 = addnw %16, %19
%21:i32 = or 4227858432:i32, %11
%22:i32 = and 67108863:i32, %9 (hasExternalUses)
%23:i32 = and 67108863:i32, %7 (hasExternalUses)
%24:i32 = lshr %20, 26:i32
%25:i32 = addnw %23, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %22, %26 (hasExternalUses)
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %21, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %20, %32
infer %33


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 39
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i32 = and 67108863:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5
%7:i32 = and 67108863:i32, %6 (hasExternalUses)
%8:i32 = and 67108863:i32, %4 (hasExternalUses)
%9:i32 = and 67108863:i32, %2
%10:i32 = var
%11:i32 = var
%12:i32 = lshr %6, 26:i32
%13:i32 = add %11, %12 (hasExternalUses)
%14:i32 = lshr %13, 26:i32
%15:i32 = mulnw 5:i32, %14
%16:i32 = add %10, %15
%17:i32 = lshr %16, 26:i32
%18:i32 = addnw %9, %17 (hasExternalUses)
%19:i32 = and 67108863:i32, %16 (hasExternalUses)
%20:i32 = addnw 5:i32, %19 (hasExternalUses)
%21:i32 = lshr %20, 26:i32
%22:i32 = addnw %18, %21 (hasExternalUses)
%23:i32 = lshr %22, 26:i32
%24:i32 = addnw %8, %23
%25:i32 = lshr %24, 26:i32
%26:i32 = addnw %7, %25
%27:i32 = or 4227858432:i32, %13
%28:i32 = lshr %26, 26:i32
%29:i32 = addnsw %27, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %26, %32
infer %33


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
second query is UNSAT-- this guess works

--------------------------------
guess 1

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3 (hasExternalUses)
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 1 RHSs before deduplication
There are 1 RHSs after deduplication
"
; No valid RHS in the list
#########################################################

Module before replacement:
; ModuleID = './poly1305_donna.c.bc'
source_filename = "crypto_onetimeauth/poly1305/donna/poly1305_donna.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.crypto_onetimeauth_poly1305_implementation = type { i32 (i8*, i8*, i64, i8*)*, i32 (i8*, i8*, i64, i8*)*, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)*, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*, i64)*, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)* }
%struct.crypto_onetimeauth_poly1305_state = type { [256 x i8] }
%struct.poly1305_state_internal_t = type { [5 x i32], [5 x i32], [4 x i32], i64, [16 x i8], i8 }

@crypto_onetimeauth_poly1305_donna_implementation = hidden local_unnamed_addr global %struct.crypto_onetimeauth_poly1305_implementation { i32 (i8*, i8*, i64, i8*)* @crypto_onetimeauth_poly1305_donna, i32 (i8*, i8*, i64, i8*)* @crypto_onetimeauth_poly1305_donna_verify, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)* @crypto_onetimeauth_poly1305_donna_init, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*, i64)* @crypto_onetimeauth_poly1305_donna_update, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)* @crypto_onetimeauth_poly1305_donna_final }, align 4

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna(i8* nocapture %0, i8* nocapture readonly %1, i64 %2, i8* nocapture readonly %3) #0 {
  %5 = alloca %struct.poly1305_state_internal_t, align 64
  %6 = bitcast %struct.poly1305_state_internal_t* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %6) #6
  %7 = bitcast i8* %3 to i32*
  %8 = load i32, i32* %7, align 1
  %9 = and i32 %8, 67108863
  %10 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 0
  store i32 %9, i32* %10, align 64
  %11 = getelementptr i8, i8* %3, i32 3
  %12 = bitcast i8* %11 to i32*
  %13 = load i32, i32* %12, align 1
  %14 = lshr i32 %13, 2
  %15 = and i32 %14, 67108611
  %16 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 1
  store i32 %15, i32* %16, align 4
  %17 = getelementptr i8, i8* %3, i32 6
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 1
  %20 = lshr i32 %19, 4
  %21 = and i32 %20, 67092735
  %22 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 2
  store i32 %21, i32* %22, align 8
  %23 = getelementptr i8, i8* %3, i32 9
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 1
  %26 = lshr i32 %25, 6
  %27 = and i32 %26, 66076671
  %28 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 3
  store i32 %27, i32* %28, align 4
  %29 = getelementptr i8, i8* %3, i32 12
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 1
  %32 = lshr i32 %31, 8
  %33 = and i32 %32, 1048575
  %34 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 4
  store i32 %33, i32* %34, align 16
  %35 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 1, i32 0
  %36 = getelementptr i8, i8* %3, i32 16
  %37 = bitcast i8* %36 to i32*
  %38 = bitcast i32* %35 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(20) %38, i8 0, i64 20, i1 false) #6
  %39 = load i32, i32* %37, align 1
  %40 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 0
  store i32 %39, i32* %40, align 8
  %41 = getelementptr i8, i8* %3, i32 20
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %42, align 1
  %44 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 1
  store i32 %43, i32* %44, align 4
  %45 = getelementptr i8, i8* %3, i32 24
  %46 = bitcast i8* %45 to i32*
  %47 = load i32, i32* %46, align 1
  %48 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 2
  store i32 %47, i32* %48, align 8
  %49 = getelementptr i8, i8* %3, i32 28
  %50 = bitcast i8* %49 to i32*
  %51 = load i32, i32* %50, align 1
  %52 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 3
  store i32 %51, i32* %52, align 4
  %53 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 3
  store i64 0, i64* %53, align 8
  %54 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 5
  store i8 0, i8* %54, align 16
  call fastcc void @poly1305_update(%struct.poly1305_state_internal_t* nonnull %5, i8* %1, i64 %2)
  call fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* nonnull %5, i8* %0)
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %6) #6
  ret i32 0
}

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_verify(i8* %0, i8* nocapture readonly %1, i64 %2, i8* nocapture readonly %3) #0 {
  %5 = alloca %struct.poly1305_state_internal_t, align 64
  %6 = alloca [16 x i8], align 16
  %7 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #6
  %8 = bitcast %struct.poly1305_state_internal_t* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %8) #6
  %9 = bitcast i8* %3 to i32*
  %10 = load i32, i32* %9, align 1
  %11 = and i32 %10, 67108863
  %12 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 0
  store i32 %11, i32* %12, align 64
  %13 = getelementptr i8, i8* %3, i32 3
  %14 = bitcast i8* %13 to i32*
  %15 = load i32, i32* %14, align 1
  %16 = lshr i32 %15, 2
  %17 = and i32 %16, 67108611
  %18 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 1
  store i32 %17, i32* %18, align 4
  %19 = getelementptr i8, i8* %3, i32 6
  %20 = bitcast i8* %19 to i32*
  %21 = load i32, i32* %20, align 1
  %22 = lshr i32 %21, 4
  %23 = and i32 %22, 67092735
  %24 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 2
  store i32 %23, i32* %24, align 8
  %25 = getelementptr i8, i8* %3, i32 9
  %26 = bitcast i8* %25 to i32*
  %27 = load i32, i32* %26, align 1
  %28 = lshr i32 %27, 6
  %29 = and i32 %28, 66076671
  %30 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 3
  store i32 %29, i32* %30, align 4
  %31 = getelementptr i8, i8* %3, i32 12
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 1
  %34 = lshr i32 %33, 8
  %35 = and i32 %34, 1048575
  %36 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 4
  store i32 %35, i32* %36, align 16
  %37 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 1, i32 0
  %38 = getelementptr i8, i8* %3, i32 16
  %39 = bitcast i8* %38 to i32*
  %40 = bitcast i32* %37 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(20) %40, i8 0, i64 20, i1 false) #6
  %41 = load i32, i32* %39, align 1
  %42 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 0
  store i32 %41, i32* %42, align 8
  %43 = getelementptr i8, i8* %3, i32 20
  %44 = bitcast i8* %43 to i32*
  %45 = load i32, i32* %44, align 1
  %46 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 1
  store i32 %45, i32* %46, align 4
  %47 = getelementptr i8, i8* %3, i32 24
  %48 = bitcast i8* %47 to i32*
  %49 = load i32, i32* %48, align 1
  %50 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 2
  store i32 %49, i32* %50, align 8
  %51 = getelementptr i8, i8* %3, i32 28
  %52 = bitcast i8* %51 to i32*
  %53 = load i32, i32* %52, align 1
  %54 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 3
  store i32 %53, i32* %54, align 4
  %55 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 3
  store i64 0, i64* %55, align 8
  %56 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 5
  store i8 0, i8* %56, align 16
  call fastcc void @poly1305_update(%struct.poly1305_state_internal_t* nonnull %5, i8* %1, i64 %2) #6
  call fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* nonnull %5, i8* nonnull %7) #6
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %8) #6
  %57 = call i32 @crypto_verify_16(i8* %0, i8* nonnull %7) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #6
  ret i32 %57
}

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_init(%struct.crypto_onetimeauth_poly1305_state* nocapture %0, i8* nocapture readonly %1) #0 {
  %3 = bitcast i8* %1 to i32*
  %4 = load i32, i32* %3, align 1
  %5 = and i32 %4, 67108863
  %6 = bitcast %struct.crypto_onetimeauth_poly1305_state* %0 to i32*
  store i32 %5, i32* %6, align 8
  %7 = getelementptr i8, i8* %1, i32 3
  %8 = bitcast i8* %7 to i32*
  %9 = load i32, i32* %8, align 1
  %10 = lshr i32 %9, 2
  %11 = and i32 %10, 67108611
  %12 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 4
  %13 = bitcast i8* %12 to i32*
  store i32 %11, i32* %13, align 4
  %14 = getelementptr i8, i8* %1, i32 6
  %15 = bitcast i8* %14 to i32*
  %16 = load i32, i32* %15, align 1
  %17 = lshr i32 %16, 4
  %18 = and i32 %17, 67092735
  %19 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 8
  %20 = bitcast i8* %19 to i32*
  store i32 %18, i32* %20, align 8
  %21 = getelementptr i8, i8* %1, i32 9
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 1
  %24 = lshr i32 %23, 6
  %25 = and i32 %24, 66076671
  %26 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 12
  %27 = bitcast i8* %26 to i32*
  store i32 %25, i32* %27, align 4
  %28 = getelementptr i8, i8* %1, i32 12
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 1
  %31 = lshr i32 %30, 8
  %32 = and i32 %31, 1048575
  %33 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 16
  %34 = bitcast i8* %33 to i32*
  store i32 %32, i32* %34, align 8
  %35 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 20
  %36 = getelementptr i8, i8* %1, i32 16
  %37 = bitcast i8* %36 to i32*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(20) %35, i8 0, i64 20, i1 false) #6
  %38 = load i32, i32* %37, align 1
  %39 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 40
  %40 = bitcast i8* %39 to i32*
  store i32 %38, i32* %40, align 8
  %41 = getelementptr i8, i8* %1, i32 20
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %42, align 1
  %44 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 44
  %45 = bitcast i8* %44 to i32*
  store i32 %43, i32* %45, align 4
  %46 = getelementptr i8, i8* %1, i32 24
  %47 = bitcast i8* %46 to i32*
  %48 = load i32, i32* %47, align 1
  %49 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 48
  %50 = bitcast i8* %49 to i32*
  store i32 %48, i32* %50, align 8
  %51 = getelementptr i8, i8* %1, i32 28
  %52 = bitcast i8* %51 to i32*
  %53 = load i32, i32* %52, align 1
  %54 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 52
  %55 = bitcast i8* %54 to i32*
  store i32 %53, i32* %55, align 4
  %56 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 56
  %57 = bitcast i8* %56 to i64*
  store i64 0, i64* %57, align 8
  %58 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 80
  store i8 0, i8* %58, align 8
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_update(%struct.crypto_onetimeauth_poly1305_state* nocapture %0, i8* nocapture readonly %1, i64 %2) #1 {
  %4 = bitcast %struct.crypto_onetimeauth_poly1305_state* %0 to %struct.poly1305_state_internal_t*
  tail call fastcc void @poly1305_update(%struct.poly1305_state_internal_t* %4, i8* %1, i64 %2)
  ret i32 0
}

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_final(%struct.crypto_onetimeauth_poly1305_state* %0, i8* nocapture %1) #0 {
  %3 = bitcast %struct.crypto_onetimeauth_poly1305_state* %0 to %struct.poly1305_state_internal_t*
  tail call fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* %3, i8* %1)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #2

; Function Attrs: nofree norecurse nounwind
define internal fastcc void @poly1305_update(%struct.poly1305_state_internal_t* nocapture %0, i8* nocapture readonly %1, i64 %2) unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 3
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %33, label %7

7:                                                ; preds = %3
  %8 = sub i64 16, %5
  %9 = icmp ugt i64 %8, %2
  %10 = select i1 %9, i64 %2, i64 %8
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %24, label %12

12:                                               ; preds = %7, %12
  %13 = phi i64 [ %23, %12 ], [ %5, %7 ]
  %14 = phi i64 [ %21, %12 ], [ 0, %7 ]
  %15 = trunc i64 %14 to i32
  %16 = getelementptr i8, i8* %1, i32 %15
  %17 = load i8, i8* %16, align 1
  %18 = add i64 %13, %14
  %19 = trunc i64 %18 to i32
  %20 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 %19
  store i8 %17, i8* %20, align 1
  %21 = add nuw i64 %14, 1
  %22 = icmp ult i64 %21, %10
  %23 = load i64, i64* %4, align 8
  br i1 %22, label %12, label %24

24:                                               ; preds = %12, %7
  %25 = phi i64 [ %5, %7 ], [ %23, %12 ]
  %26 = add i64 %25, %10
  store i64 %26, i64* %4, align 8
  %27 = icmp ult i64 %26, 16
  br i1 %27, label %60, label %28

28:                                               ; preds = %24
  %29 = trunc i64 %10 to i32
  %30 = getelementptr i8, i8* %1, i32 %29
  %31 = sub i64 %2, %10
  %32 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 0
  tail call fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nonnull %0, i8* nonnull %32, i64 16)
  store i64 0, i64* %4, align 8
  br label %33

33:                                               ; preds = %28, %3
  %34 = phi i64 [ %2, %3 ], [ %31, %28 ]
  %35 = phi i8* [ %1, %3 ], [ %30, %28 ]
  %36 = icmp ugt i64 %34, 15
  br i1 %36, label %37, label %42

37:                                               ; preds = %33
  %38 = and i64 %34, -16
  tail call fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nonnull %0, i8* %35, i64 %38)
  %39 = trunc i64 %38 to i32
  %40 = getelementptr i8, i8* %35, i32 %39
  %41 = sub i64 %34, %38
  br label %42

42:                                               ; preds = %37, %33
  %43 = phi i64 [ %41, %37 ], [ %34, %33 ]
  %44 = phi i8* [ %40, %37 ], [ %35, %33 ]
  %45 = icmp eq i64 %43, 0
  br i1 %45, label %60, label %46

46:                                               ; preds = %42, %46
  %47 = phi i64 [ %55, %46 ], [ 0, %42 ]
  %48 = trunc i64 %47 to i32
  %49 = getelementptr i8, i8* %44, i32 %48
  %50 = load i8, i8* %49, align 1
  %51 = load i64, i64* %4, align 8
  %52 = add i64 %51, %47
  %53 = trunc i64 %52 to i32
  %54 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 %53
  store i8 %50, i8* %54, align 1
  %55 = add nuw i64 %47, 1
  %56 = icmp eq i64 %55, %43
  br i1 %56, label %57, label %46

57:                                               ; preds = %46
  %58 = load i64, i64* %4, align 8
  %59 = add i64 %58, %43
  store i64 %59, i64* %4, align 8
  br label %60

60:                                               ; preds = %57, %42, %24
  ret void
}

; Function Attrs: noinline nounwind
define internal fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* %0, i8* nocapture %1) unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 3
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %20, label %6

6:                                                ; preds = %2
  %7 = trunc i64 %4 to i32
  %8 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 %7
  store i8 1, i8* %8, align 1
  %9 = add i64 %4, 1
  %10 = icmp ult i64 %9, 16
  br i1 %10, label %11, label %17

11:                                               ; preds = %6
  %12 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 16
  %13 = bitcast i32* %12 to i8*
  %14 = add i32 %7, 1
  %15 = getelementptr i8, i8* %13, i32 %14
  %16 = sub i32 15, %7
  call void @llvm.memset.p0i8.i32(i8* align 1 %15, i8 0, i32 %16, i1 false)
  br label %17

17:                                               ; preds = %11, %6
  %18 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 5
  store i8 1, i8* %18, align 8
  %19 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 0
  tail call fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nonnull %0, i8* nonnull %19, i64 16)
  br label %20

20:                                               ; preds = %2, %17
  %21 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 0
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 2
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 3
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 4
  %30 = load i32, i32* %29, align 4
  %31 = lshr i32 %24, 26
  %32 = and i32 %24, 67108863
  %33 = add i32 %26, %31
  %34 = lshr i32 %33, 26
  %35 = and i32 %33, 67108863
  %36 = add i32 %34, %28
  %37 = lshr i32 %36, 26
  %38 = and i32 %36, 67108863
  %39 = add i32 %37, %30
  %40 = lshr i32 %39, 26
  %41 = mul nuw nsw i32 %40, 5
  %42 = add i32 %41, %22
  %43 = lshr i32 %42, 26
  %44 = and i32 %42, 67108863
  %45 = add nuw nsw i32 %43, %32
  %46 = add nuw nsw i32 %44, 5
  %47 = lshr i32 %46, 26
  %48 = add nuw nsw i32 %47, %45
  %49 = lshr i32 %48, 26
  %50 = add nuw nsw i32 %49, %35
  %51 = lshr i32 %50, 26
  %52 = add nuw nsw i32 %51, %38
  %53 = lshr i32 %52, 26
  %54 = or i32 %39, -67108864
  %55 = add nsw i32 %54, %53
  %56 = lshr i32 %55, 31
  %57 = add nsw i32 %56, -1
  %58 = and i32 %57, 67108863
  %59 = and i32 %58, %46
  %60 = and i32 %58, %48
  %61 = and i32 %58, %52
  %62 = and i32 %57, %55
  %63 = ashr i32 %55, 31
  %64 = and i32 %63, %44
  %65 = or i32 %64, %59
  %66 = and i32 %63, %45
  %67 = or i32 %66, %60
  %68 = and i32 %63, %35
  %69 = or i32 %68, 0
  %70 = and i32 %63, %38
  %71 = or i32 %70, %61
  %72 = and i32 %63, %39
  %73 = or i32 %62, %72
  %74 = shl i32 %67, 26
  %75 = or i32 %65, %74
  %76 = lshr i32 %67, 6
  %77 = shl i32 %69, 20
  %78 = or i32 %76, %77
  %79 = lshr i32 %69, 12
  %80 = shl i32 %71, 14
  %81 = or i32 %79, %80
  %82 = lshr i32 %71, 18
  %83 = shl i32 %73, 8
  %84 = or i32 %83, %82
  %85 = zext i32 %75 to i64
  %86 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 0
  %87 = load i32, i32* %86, align 8
  %88 = zext i32 %87 to i64
  %89 = add nuw nsw i64 %85, %88
  %90 = trunc i64 %89 to i32
  %91 = zext i32 %78 to i64
  %92 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 1
  %93 = load i32, i32* %92, align 4
  %94 = zext i32 %93 to i64
  %95 = add nuw nsw i64 %91, %94
  %96 = lshr i64 %89, 32
  %97 = add nuw nsw i64 %95, %96
  %98 = trunc i64 %97 to i32
  %99 = zext i32 %81 to i64
  %100 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 2
  %101 = load i32, i32* %100, align 8
  %102 = zext i32 %101 to i64
  %103 = add nuw nsw i64 %99, %102
  %104 = lshr i64 %97, 32
  %105 = add nuw nsw i64 %103, %104
  %106 = trunc i64 %105 to i32
  %107 = zext i32 %84 to i64
  %108 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 3
  %109 = load i32, i32* %108, align 4
  %110 = zext i32 %109 to i64
  %111 = add nuw nsw i64 %107, %110
  %112 = lshr i64 %105, 32
  %113 = add nuw nsw i64 %111, %112
  %114 = trunc i64 %113 to i32
  %115 = bitcast i8* %1 to i32*
  store i32 %90, i32* %115, align 1
  %116 = getelementptr i8, i8* %1, i32 4
  %117 = bitcast i8* %116 to i32*
  store i32 %98, i32* %117, align 1
  %118 = getelementptr i8, i8* %1, i32 8
  %119 = bitcast i8* %118 to i32*
  store i32 %106, i32* %119, align 1
  %120 = getelementptr i8, i8* %1, i32 12
  %121 = bitcast i8* %120 to i32*
  store i32 %114, i32* %121, align 1
  %122 = bitcast %struct.poly1305_state_internal_t* %0 to i8*
  tail call void @sodium_memzero(i8* %122, i32 88) #6
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #2

; Function Attrs: nofree norecurse nounwind
define internal fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nocapture %0, i8* nocapture readonly %1, i64 %2) unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 5
  %5 = load i8, i8* %4, align 8
  %6 = icmp eq i8 %5, 0
  %7 = select i1 %6, i32 16777216, i32 0
  %8 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 2
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 4
  %15 = load i32, i32* %14, align 8
  %16 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 2
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 3
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 4
  %25 = load i32, i32* %24, align 4
  %26 = icmp ugt i64 %2, 15
  br i1 %26, label %27, label %160

27:                                               ; preds = %3
  %28 = mul i32 %15, 5
  %29 = mul i32 %13, 5
  %30 = mul i32 %11, 5
  %31 = mul i32 %9, 5
  %32 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 0
  %33 = load i32, i32* %32, align 8
  %34 = zext i32 %33 to i64
  %35 = zext i32 %28 to i64
  %36 = zext i32 %29 to i64
  %37 = zext i32 %30 to i64
  %38 = zext i32 %31 to i64
  %39 = zext i32 %9 to i64
  %40 = zext i32 %11 to i64
  %41 = zext i32 %13 to i64
  %42 = zext i32 %15 to i64
  br label %43

43:                                               ; preds = %27, %43
  %44 = phi i8* [ %1, %27 ], [ %157, %43 ]
  %45 = phi i64 [ %2, %27 ], [ %158, %43 ]
  %46 = phi i32 [ %17, %27 ], [ %155, %43 ]
  %47 = phi i32 [ %19, %27 ], [ %156, %43 ]
  %48 = phi i32 [ %21, %27 ], [ %140, %43 ]
  %49 = phi i32 [ %23, %27 ], [ %145, %43 ]
  %50 = phi i32 [ %25, %27 ], [ %151, %43 ]
  %51 = bitcast i8* %44 to i32*
  %52 = load i32, i32* %51, align 1
  %53 = and i32 %52, 67108863
  %54 = add i32 %53, %46
  %55 = getelementptr i8, i8* %44, i32 3
  %56 = bitcast i8* %55 to i32*
  %57 = load i32, i32* %56, align 1
  %58 = lshr i32 %57, 2
  %59 = and i32 %58, 67108863
  %60 = add i32 %59, %47
  %61 = getelementptr i8, i8* %44, i32 6
  %62 = bitcast i8* %61 to i32*
  %63 = load i32, i32* %62, align 1
  %64 = lshr i32 %63, 4
  %65 = and i32 %64, 67108863
  %66 = add i32 %65, %48
  %67 = getelementptr i8, i8* %44, i32 9
  %68 = bitcast i8* %67 to i32*
  %69 = load i32, i32* %68, align 1
  %70 = lshr i32 %69, 6
  %71 = add i32 %70, %49
  %72 = getelementptr i8, i8* %44, i32 12
  %73 = bitcast i8* %72 to i32*
  %74 = load i32, i32* %73, align 1
  %75 = lshr i32 %74, 8
  %76 = or i32 %75, %7
  %77 = add i32 %76, %50
  %78 = zext i32 %54 to i64
  %79 = mul nuw i64 %78, %34
  %80 = zext i32 %60 to i64
  %81 = mul nuw i64 %80, %35
  %82 = add i64 %81, %79
  %83 = zext i32 %66 to i64
  %84 = mul nuw i64 %83, %36
  %85 = add i64 %82, %84
  %86 = zext i32 %71 to i64
  %87 = mul nuw i64 %86, %37
  %88 = add i64 %85, %87
  %89 = zext i32 %77 to i64
  %90 = mul nuw i64 %89, %38
  %91 = add i64 %88, %90
  %92 = mul nuw i64 %78, %39
  %93 = mul nuw i64 %80, %34
  %94 = add i64 %93, %92
  %95 = mul nuw i64 %83, %35
  %96 = add i64 %94, %95
  %97 = mul nuw i64 %86, %36
  %98 = add i64 %96, %97
  %99 = mul nuw i64 %89, %37
  %100 = add i64 %98, %99
  %101 = mul nuw i64 %78, %40
  %102 = mul nuw i64 %80, %39
  %103 = add i64 %102, %101
  %104 = mul nuw i64 %83, %34
  %105 = add i64 %103, %104
  %106 = mul nuw i64 %86, %35
  %107 = add i64 %105, %106
  %108 = mul nuw i64 %89, %36
  %109 = add i64 %107, %108
  %110 = mul nuw i64 %78, %41
  %111 = mul nuw i64 %80, %40
  %112 = add i64 %111, %110
  %113 = mul nuw i64 %83, %39
  %114 = add i64 %112, %113
  %115 = mul nuw i64 %86, %34
  %116 = add i64 %114, %115
  %117 = mul nuw i64 %89, %35
  %118 = add i64 %116, %117
  %119 = mul nuw i64 %78, %42
  %120 = mul nuw i64 %80, %41
  %121 = add i64 %120, %119
  %122 = mul nuw i64 %83, %40
  %123 = add i64 %121, %122
  %124 = mul nuw i64 %86, %39
  %125 = add i64 %123, %124
  %126 = mul nuw i64 %89, %34
  %127 = add i64 %125, %126
  %128 = lshr i64 %91, 26
  %129 = trunc i64 %91 to i32
  %130 = and i32 %129, 67108863
  %131 = and i64 %128, 4294967295
  %132 = add i64 %100, %131
  %133 = lshr i64 %132, 26
  %134 = trunc i64 %132 to i32
  %135 = and i32 %134, 67108863
  %136 = and i64 %133, 4294967295
  %137 = add i64 %109, %136
  %138 = lshr i64 %137, 26
  %139 = trunc i64 %137 to i32
  %140 = and i32 %139, 67108863
  %141 = and i64 %138, 4294967295
  %142 = add i64 %118, %141
  %143 = lshr i64 %142, 26
  %144 = trunc i64 %142 to i32
  %145 = and i32 %144, 67108863
  %146 = and i64 %143, 4294967295
  %147 = add i64 %127, %146
  %148 = lshr i64 %147, 26
  %149 = trunc i64 %148 to i32
  %150 = trunc i64 %147 to i32
  %151 = and i32 %150, 67108863
  %152 = mul i32 %149, 5
  %153 = add i32 %152, %130
  %154 = lshr i32 %153, 26
  %155 = and i32 %153, 67108863
  %156 = add nuw nsw i32 %154, %135
  %157 = getelementptr i8, i8* %44, i32 16
  %158 = add i64 %45, -16
  %159 = icmp ugt i64 %158, 15
  br i1 %159, label %43, label %160

160:                                              ; preds = %43, %3
  %161 = phi i32 [ %25, %3 ], [ %151, %43 ]
  %162 = phi i32 [ %23, %3 ], [ %145, %43 ]
  %163 = phi i32 [ %21, %3 ], [ %140, %43 ]
  %164 = phi i32 [ %19, %3 ], [ %156, %43 ]
  %165 = phi i32 [ %17, %3 ], [ %155, %43 ]
  store i32 %165, i32* %16, align 4
  store i32 %164, i32* %18, align 4
  store i32 %163, i32* %20, align 4
  store i32 %162, i32* %22, align 4
  store i32 %161, i32* %24, align 4
  ret void
}

declare void @sodium_memzero(i8* %0, i32 %1) local_unnamed_addr #4

declare i32 @crypto_verify_16(i8* %0, i8* %1) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly %0, i8 %1, i64 %2, i1 immarg %3) #5

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #5

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { noinline nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind willreturn writeonly }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; Replacing "  %61 = and i32 %58, %52"
; from ""
; with "i32 0" in:
"%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5
%7:i32 = and 67108863:i32, %6 (hasExternalUses)
%8:i32 = and 67108863:i32, %4 (hasExternalUses)
%9:i32 = and 67108863:i32, %2
%10:i32 = var
%11:i32 = var
%12:i32 = lshr %6, 26:i32
%13:i32 = add %11, %12 (hasExternalUses)
%14:i32 = lshr %13, 26:i32
%15:i32 = mulnw 5:i32, %14
%16:i32 = add %10, %15
%17:i32 = lshr %16, 26:i32
%18:i32 = addnw %9, %17 (hasExternalUses)
%19:i32 = and 67108863:i32, %16 (hasExternalUses)
%20:i32 = addnw 5:i32, %19 (hasExternalUses)
%21:i32 = lshr %20, 26:i32
%22:i32 = addnw %18, %21 (hasExternalUses)
%23:i32 = lshr %22, 26:i32
%24:i32 = addnw %8, %23
%25:i32 = lshr %24, 26:i32
%26:i32 = addnw %7, %25
%27:i32 = or 4227858432:i32, %13
%28:i32 = lshr %26, 26:i32
%29:i32 = addnsw %27, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %26, %32
cand %33 0:i32
"
; with "i32 0"

Module after replacement:
; ModuleID = './poly1305_donna.c.bc'
source_filename = "crypto_onetimeauth/poly1305/donna/poly1305_donna.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.crypto_onetimeauth_poly1305_implementation = type { i32 (i8*, i8*, i64, i8*)*, i32 (i8*, i8*, i64, i8*)*, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)*, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*, i64)*, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)* }
%struct.crypto_onetimeauth_poly1305_state = type { [256 x i8] }
%struct.poly1305_state_internal_t = type { [5 x i32], [5 x i32], [4 x i32], i64, [16 x i8], i8 }

@crypto_onetimeauth_poly1305_donna_implementation = hidden local_unnamed_addr global %struct.crypto_onetimeauth_poly1305_implementation { i32 (i8*, i8*, i64, i8*)* @crypto_onetimeauth_poly1305_donna, i32 (i8*, i8*, i64, i8*)* @crypto_onetimeauth_poly1305_donna_verify, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)* @crypto_onetimeauth_poly1305_donna_init, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*, i64)* @crypto_onetimeauth_poly1305_donna_update, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)* @crypto_onetimeauth_poly1305_donna_final }, align 4

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna(i8* nocapture %0, i8* nocapture readonly %1, i64 %2, i8* nocapture readonly %3) #0 {
  %5 = alloca %struct.poly1305_state_internal_t, align 64
  %6 = bitcast %struct.poly1305_state_internal_t* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %6) #6
  %7 = bitcast i8* %3 to i32*
  %8 = load i32, i32* %7, align 1
  %9 = and i32 %8, 67108863
  %10 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 0
  store i32 %9, i32* %10, align 64
  %11 = getelementptr i8, i8* %3, i32 3
  %12 = bitcast i8* %11 to i32*
  %13 = load i32, i32* %12, align 1
  %14 = lshr i32 %13, 2
  %15 = and i32 %14, 67108611
  %16 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 1
  store i32 %15, i32* %16, align 4
  %17 = getelementptr i8, i8* %3, i32 6
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 1
  %20 = lshr i32 %19, 4
  %21 = and i32 %20, 67092735
  %22 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 2
  store i32 %21, i32* %22, align 8
  %23 = getelementptr i8, i8* %3, i32 9
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 1
  %26 = lshr i32 %25, 6
  %27 = and i32 %26, 66076671
  %28 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 3
  store i32 %27, i32* %28, align 4
  %29 = getelementptr i8, i8* %3, i32 12
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 1
  %32 = lshr i32 %31, 8
  %33 = and i32 %32, 1048575
  %34 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 4
  store i32 %33, i32* %34, align 16
  %35 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 1, i32 0
  %36 = getelementptr i8, i8* %3, i32 16
  %37 = bitcast i8* %36 to i32*
  %38 = bitcast i32* %35 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(20) %38, i8 0, i64 20, i1 false) #6
  %39 = load i32, i32* %37, align 1
  %40 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 0
  store i32 %39, i32* %40, align 8
  %41 = getelementptr i8, i8* %3, i32 20
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %42, align 1
  %44 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 1
  store i32 %43, i32* %44, align 4
  %45 = getelementptr i8, i8* %3, i32 24
  %46 = bitcast i8* %45 to i32*
  %47 = load i32, i32* %46, align 1
  %48 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 2
  store i32 %47, i32* %48, align 8
  %49 = getelementptr i8, i8* %3, i32 28
  %50 = bitcast i8* %49 to i32*
  %51 = load i32, i32* %50, align 1
  %52 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 3
  store i32 %51, i32* %52, align 4
  %53 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 3
  store i64 0, i64* %53, align 8
  %54 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 5
  store i8 0, i8* %54, align 16
  call fastcc void @poly1305_update(%struct.poly1305_state_internal_t* nonnull %5, i8* %1, i64 %2)
  call fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* nonnull %5, i8* %0)
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %6) #6
  ret i32 0
}

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_verify(i8* %0, i8* nocapture readonly %1, i64 %2, i8* nocapture readonly %3) #0 {
  %5 = alloca %struct.poly1305_state_internal_t, align 64
  %6 = alloca [16 x i8], align 16
  %7 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #6
  %8 = bitcast %struct.poly1305_state_internal_t* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %8) #6
  %9 = bitcast i8* %3 to i32*
  %10 = load i32, i32* %9, align 1
  %11 = and i32 %10, 67108863
  %12 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 0
  store i32 %11, i32* %12, align 64
  %13 = getelementptr i8, i8* %3, i32 3
  %14 = bitcast i8* %13 to i32*
  %15 = load i32, i32* %14, align 1
  %16 = lshr i32 %15, 2
  %17 = and i32 %16, 67108611
  %18 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 1
  store i32 %17, i32* %18, align 4
  %19 = getelementptr i8, i8* %3, i32 6
  %20 = bitcast i8* %19 to i32*
  %21 = load i32, i32* %20, align 1
  %22 = lshr i32 %21, 4
  %23 = and i32 %22, 67092735
  %24 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 2
  store i32 %23, i32* %24, align 8
  %25 = getelementptr i8, i8* %3, i32 9
  %26 = bitcast i8* %25 to i32*
  %27 = load i32, i32* %26, align 1
  %28 = lshr i32 %27, 6
  %29 = and i32 %28, 66076671
  %30 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 3
  store i32 %29, i32* %30, align 4
  %31 = getelementptr i8, i8* %3, i32 12
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 1
  %34 = lshr i32 %33, 8
  %35 = and i32 %34, 1048575
  %36 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 4
  store i32 %35, i32* %36, align 16
  %37 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 1, i32 0
  %38 = getelementptr i8, i8* %3, i32 16
  %39 = bitcast i8* %38 to i32*
  %40 = bitcast i32* %37 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(20) %40, i8 0, i64 20, i1 false) #6
  %41 = load i32, i32* %39, align 1
  %42 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 0
  store i32 %41, i32* %42, align 8
  %43 = getelementptr i8, i8* %3, i32 20
  %44 = bitcast i8* %43 to i32*
  %45 = load i32, i32* %44, align 1
  %46 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 1
  store i32 %45, i32* %46, align 4
  %47 = getelementptr i8, i8* %3, i32 24
  %48 = bitcast i8* %47 to i32*
  %49 = load i32, i32* %48, align 1
  %50 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 2
  store i32 %49, i32* %50, align 8
  %51 = getelementptr i8, i8* %3, i32 28
  %52 = bitcast i8* %51 to i32*
  %53 = load i32, i32* %52, align 1
  %54 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 3
  store i32 %53, i32* %54, align 4
  %55 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 3
  store i64 0, i64* %55, align 8
  %56 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 5
  store i8 0, i8* %56, align 16
  call fastcc void @poly1305_update(%struct.poly1305_state_internal_t* nonnull %5, i8* %1, i64 %2) #6
  call fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* nonnull %5, i8* nonnull %7) #6
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %8) #6
  %57 = call i32 @crypto_verify_16(i8* %0, i8* nonnull %7) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #6
  ret i32 %57
}

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_init(%struct.crypto_onetimeauth_poly1305_state* nocapture %0, i8* nocapture readonly %1) #0 {
  %3 = bitcast i8* %1 to i32*
  %4 = load i32, i32* %3, align 1
  %5 = and i32 %4, 67108863
  %6 = bitcast %struct.crypto_onetimeauth_poly1305_state* %0 to i32*
  store i32 %5, i32* %6, align 8
  %7 = getelementptr i8, i8* %1, i32 3
  %8 = bitcast i8* %7 to i32*
  %9 = load i32, i32* %8, align 1
  %10 = lshr i32 %9, 2
  %11 = and i32 %10, 67108611
  %12 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 4
  %13 = bitcast i8* %12 to i32*
  store i32 %11, i32* %13, align 4
  %14 = getelementptr i8, i8* %1, i32 6
  %15 = bitcast i8* %14 to i32*
  %16 = load i32, i32* %15, align 1
  %17 = lshr i32 %16, 4
  %18 = and i32 %17, 67092735
  %19 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 8
  %20 = bitcast i8* %19 to i32*
  store i32 %18, i32* %20, align 8
  %21 = getelementptr i8, i8* %1, i32 9
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 1
  %24 = lshr i32 %23, 6
  %25 = and i32 %24, 66076671
  %26 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 12
  %27 = bitcast i8* %26 to i32*
  store i32 %25, i32* %27, align 4
  %28 = getelementptr i8, i8* %1, i32 12
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 1
  %31 = lshr i32 %30, 8
  %32 = and i32 %31, 1048575
  %33 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 16
  %34 = bitcast i8* %33 to i32*
  store i32 %32, i32* %34, align 8
  %35 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 20
  %36 = getelementptr i8, i8* %1, i32 16
  %37 = bitcast i8* %36 to i32*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(20) %35, i8 0, i64 20, i1 false) #6
  %38 = load i32, i32* %37, align 1
  %39 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 40
  %40 = bitcast i8* %39 to i32*
  store i32 %38, i32* %40, align 8
  %41 = getelementptr i8, i8* %1, i32 20
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %42, align 1
  %44 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 44
  %45 = bitcast i8* %44 to i32*
  store i32 %43, i32* %45, align 4
  %46 = getelementptr i8, i8* %1, i32 24
  %47 = bitcast i8* %46 to i32*
  %48 = load i32, i32* %47, align 1
  %49 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 48
  %50 = bitcast i8* %49 to i32*
  store i32 %48, i32* %50, align 8
  %51 = getelementptr i8, i8* %1, i32 28
  %52 = bitcast i8* %51 to i32*
  %53 = load i32, i32* %52, align 1
  %54 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 52
  %55 = bitcast i8* %54 to i32*
  store i32 %53, i32* %55, align 4
  %56 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 56
  %57 = bitcast i8* %56 to i64*
  store i64 0, i64* %57, align 8
  %58 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 80
  store i8 0, i8* %58, align 8
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_update(%struct.crypto_onetimeauth_poly1305_state* nocapture %0, i8* nocapture readonly %1, i64 %2) #1 {
  %4 = bitcast %struct.crypto_onetimeauth_poly1305_state* %0 to %struct.poly1305_state_internal_t*
  tail call fastcc void @poly1305_update(%struct.poly1305_state_internal_t* %4, i8* %1, i64 %2)
  ret i32 0
}

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_final(%struct.crypto_onetimeauth_poly1305_state* %0, i8* nocapture %1) #0 {
  %3 = bitcast %struct.crypto_onetimeauth_poly1305_state* %0 to %struct.poly1305_state_internal_t*
  tail call fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* %3, i8* %1)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #2

; Function Attrs: nofree norecurse nounwind
define internal fastcc void @poly1305_update(%struct.poly1305_state_internal_t* nocapture %0, i8* nocapture readonly %1, i64 %2) unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 3
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %33, label %7

7:                                                ; preds = %3
  %8 = sub i64 16, %5
  %9 = icmp ugt i64 %8, %2
  %10 = select i1 %9, i64 %2, i64 %8
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %24, label %12

12:                                               ; preds = %7, %12
  %13 = phi i64 [ %23, %12 ], [ %5, %7 ]
  %14 = phi i64 [ %21, %12 ], [ 0, %7 ]
  %15 = trunc i64 %14 to i32
  %16 = getelementptr i8, i8* %1, i32 %15
  %17 = load i8, i8* %16, align 1
  %18 = add i64 %13, %14
  %19 = trunc i64 %18 to i32
  %20 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 %19
  store i8 %17, i8* %20, align 1
  %21 = add nuw i64 %14, 1
  %22 = icmp ult i64 %21, %10
  %23 = load i64, i64* %4, align 8
  br i1 %22, label %12, label %24

24:                                               ; preds = %12, %7
  %25 = phi i64 [ %5, %7 ], [ %23, %12 ]
  %26 = add i64 %25, %10
  store i64 %26, i64* %4, align 8
  %27 = icmp ult i64 %26, 16
  br i1 %27, label %60, label %28

28:                                               ; preds = %24
  %29 = trunc i64 %10 to i32
  %30 = getelementptr i8, i8* %1, i32 %29
  %31 = sub i64 %2, %10
  %32 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 0
  tail call fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nonnull %0, i8* nonnull %32, i64 16)
  store i64 0, i64* %4, align 8
  br label %33

33:                                               ; preds = %28, %3
  %34 = phi i64 [ %2, %3 ], [ %31, %28 ]
  %35 = phi i8* [ %1, %3 ], [ %30, %28 ]
  %36 = icmp ugt i64 %34, 15
  br i1 %36, label %37, label %42

37:                                               ; preds = %33
  %38 = and i64 %34, -16
  tail call fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nonnull %0, i8* %35, i64 %38)
  %39 = trunc i64 %38 to i32
  %40 = getelementptr i8, i8* %35, i32 %39
  %41 = sub i64 %34, %38
  br label %42

42:                                               ; preds = %37, %33
  %43 = phi i64 [ %41, %37 ], [ %34, %33 ]
  %44 = phi i8* [ %40, %37 ], [ %35, %33 ]
  %45 = icmp eq i64 %43, 0
  br i1 %45, label %60, label %46

46:                                               ; preds = %42, %46
  %47 = phi i64 [ %55, %46 ], [ 0, %42 ]
  %48 = trunc i64 %47 to i32
  %49 = getelementptr i8, i8* %44, i32 %48
  %50 = load i8, i8* %49, align 1
  %51 = load i64, i64* %4, align 8
  %52 = add i64 %51, %47
  %53 = trunc i64 %52 to i32
  %54 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 %53
  store i8 %50, i8* %54, align 1
  %55 = add nuw i64 %47, 1
  %56 = icmp eq i64 %55, %43
  br i1 %56, label %57, label %46

57:                                               ; preds = %46
  %58 = load i64, i64* %4, align 8
  %59 = add i64 %58, %43
  store i64 %59, i64* %4, align 8
  br label %60

60:                                               ; preds = %57, %42, %24
  ret void
}

; Function Attrs: noinline nounwind
define internal fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* %0, i8* nocapture %1) unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 3
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %20, label %6

6:                                                ; preds = %2
  %7 = trunc i64 %4 to i32
  %8 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 %7
  store i8 1, i8* %8, align 1
  %9 = add i64 %4, 1
  %10 = icmp ult i64 %9, 16
  br i1 %10, label %11, label %17

11:                                               ; preds = %6
  %12 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 16
  %13 = bitcast i32* %12 to i8*
  %14 = add i32 %7, 1
  %15 = getelementptr i8, i8* %13, i32 %14
  %16 = sub i32 15, %7
  call void @llvm.memset.p0i8.i32(i8* align 1 %15, i8 0, i32 %16, i1 false)
  br label %17

17:                                               ; preds = %11, %6
  %18 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 5
  store i8 1, i8* %18, align 8
  %19 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 0
  tail call fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nonnull %0, i8* nonnull %19, i64 16)
  br label %20

20:                                               ; preds = %2, %17
  %21 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 0
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 2
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 3
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 4
  %30 = load i32, i32* %29, align 4
  %31 = lshr i32 %24, 26
  %32 = and i32 %24, 67108863
  %33 = add i32 %26, %31
  %34 = lshr i32 %33, 26
  %35 = and i32 %33, 67108863
  %36 = add i32 %34, %28
  %37 = lshr i32 %36, 26
  %38 = and i32 %36, 67108863
  %39 = add i32 %37, %30
  %40 = lshr i32 %39, 26
  %41 = mul nuw nsw i32 %40, 5
  %42 = add i32 %41, %22
  %43 = lshr i32 %42, 26
  %44 = and i32 %42, 67108863
  %45 = add nuw nsw i32 %43, %32
  %46 = add nuw nsw i32 %44, 5
  %47 = lshr i32 %46, 26
  %48 = add nuw nsw i32 %47, %45
  %49 = lshr i32 %48, 26
  %50 = add nuw nsw i32 %49, %35
  %51 = lshr i32 %50, 26
  %52 = add nuw nsw i32 %51, %38
  %53 = lshr i32 %52, 26
  %54 = or i32 %39, -67108864
  %55 = add nsw i32 %54, %53
  %56 = lshr i32 %55, 31
  %57 = add nsw i32 %56, -1
  %58 = and i32 %57, 67108863
  %59 = and i32 %58, %46
  %60 = and i32 %58, %48
  %61 = and i32 %57, %55
  %62 = ashr i32 %55, 31
  %63 = and i32 %62, %44
  %64 = or i32 %63, %59
  %65 = and i32 %62, %45
  %66 = or i32 %65, %60
  %67 = and i32 %62, %35
  %68 = or i32 %67, 0
  %69 = and i32 %62, %38
  %70 = or i32 %69, 0
  %71 = and i32 %62, %39
  %72 = or i32 %61, %71
  %73 = shl i32 %66, 26
  %74 = or i32 %64, %73
  %75 = lshr i32 %66, 6
  %76 = shl i32 %68, 20
  %77 = or i32 %75, %76
  %78 = lshr i32 %68, 12
  %79 = shl i32 %70, 14
  %80 = or i32 %78, %79
  %81 = lshr i32 %70, 18
  %82 = shl i32 %72, 8
  %83 = or i32 %82, %81
  %84 = zext i32 %74 to i64
  %85 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 0
  %86 = load i32, i32* %85, align 8
  %87 = zext i32 %86 to i64
  %88 = add nuw nsw i64 %84, %87
  %89 = trunc i64 %88 to i32
  %90 = zext i32 %77 to i64
  %91 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 1
  %92 = load i32, i32* %91, align 4
  %93 = zext i32 %92 to i64
  %94 = add nuw nsw i64 %90, %93
  %95 = lshr i64 %88, 32
  %96 = add nuw nsw i64 %94, %95
  %97 = trunc i64 %96 to i32
  %98 = zext i32 %80 to i64
  %99 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 2
  %100 = load i32, i32* %99, align 8
  %101 = zext i32 %100 to i64
  %102 = add nuw nsw i64 %98, %101
  %103 = lshr i64 %96, 32
  %104 = add nuw nsw i64 %102, %103
  %105 = trunc i64 %104 to i32
  %106 = zext i32 %83 to i64
  %107 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 3
  %108 = load i32, i32* %107, align 4
  %109 = zext i32 %108 to i64
  %110 = add nuw nsw i64 %106, %109
  %111 = lshr i64 %104, 32
  %112 = add nuw nsw i64 %110, %111
  %113 = trunc i64 %112 to i32
  %114 = bitcast i8* %1 to i32*
  store i32 %89, i32* %114, align 1
  %115 = getelementptr i8, i8* %1, i32 4
  %116 = bitcast i8* %115 to i32*
  store i32 %97, i32* %116, align 1
  %117 = getelementptr i8, i8* %1, i32 8
  %118 = bitcast i8* %117 to i32*
  store i32 %105, i32* %118, align 1
  %119 = getelementptr i8, i8* %1, i32 12
  %120 = bitcast i8* %119 to i32*
  store i32 %113, i32* %120, align 1
  %121 = bitcast %struct.poly1305_state_internal_t* %0 to i8*
  tail call void @sodium_memzero(i8* %121, i32 88) #6
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #2

; Function Attrs: nofree norecurse nounwind
define internal fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nocapture %0, i8* nocapture readonly %1, i64 %2) unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 5
  %5 = load i8, i8* %4, align 8
  %6 = icmp eq i8 %5, 0
  %7 = select i1 %6, i32 16777216, i32 0
  %8 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 2
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 4
  %15 = load i32, i32* %14, align 8
  %16 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 2
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 3
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 4
  %25 = load i32, i32* %24, align 4
  %26 = icmp ugt i64 %2, 15
  br i1 %26, label %27, label %160

27:                                               ; preds = %3
  %28 = mul i32 %15, 5
  %29 = mul i32 %13, 5
  %30 = mul i32 %11, 5
  %31 = mul i32 %9, 5
  %32 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 0
  %33 = load i32, i32* %32, align 8
  %34 = zext i32 %33 to i64
  %35 = zext i32 %28 to i64
  %36 = zext i32 %29 to i64
  %37 = zext i32 %30 to i64
  %38 = zext i32 %31 to i64
  %39 = zext i32 %9 to i64
  %40 = zext i32 %11 to i64
  %41 = zext i32 %13 to i64
  %42 = zext i32 %15 to i64
  br label %43

43:                                               ; preds = %27, %43
  %44 = phi i8* [ %1, %27 ], [ %157, %43 ]
  %45 = phi i64 [ %2, %27 ], [ %158, %43 ]
  %46 = phi i32 [ %17, %27 ], [ %155, %43 ]
  %47 = phi i32 [ %19, %27 ], [ %156, %43 ]
  %48 = phi i32 [ %21, %27 ], [ %140, %43 ]
  %49 = phi i32 [ %23, %27 ], [ %145, %43 ]
  %50 = phi i32 [ %25, %27 ], [ %151, %43 ]
  %51 = bitcast i8* %44 to i32*
  %52 = load i32, i32* %51, align 1
  %53 = and i32 %52, 67108863
  %54 = add i32 %53, %46
  %55 = getelementptr i8, i8* %44, i32 3
  %56 = bitcast i8* %55 to i32*
  %57 = load i32, i32* %56, align 1
  %58 = lshr i32 %57, 2
  %59 = and i32 %58, 67108863
  %60 = add i32 %59, %47
  %61 = getelementptr i8, i8* %44, i32 6
  %62 = bitcast i8* %61 to i32*
  %63 = load i32, i32* %62, align 1
  %64 = lshr i32 %63, 4
  %65 = and i32 %64, 67108863
  %66 = add i32 %65, %48
  %67 = getelementptr i8, i8* %44, i32 9
  %68 = bitcast i8* %67 to i32*
  %69 = load i32, i32* %68, align 1
  %70 = lshr i32 %69, 6
  %71 = add i32 %70, %49
  %72 = getelementptr i8, i8* %44, i32 12
  %73 = bitcast i8* %72 to i32*
  %74 = load i32, i32* %73, align 1
  %75 = lshr i32 %74, 8
  %76 = or i32 %75, %7
  %77 = add i32 %76, %50
  %78 = zext i32 %54 to i64
  %79 = mul nuw i64 %78, %34
  %80 = zext i32 %60 to i64
  %81 = mul nuw i64 %80, %35
  %82 = add i64 %81, %79
  %83 = zext i32 %66 to i64
  %84 = mul nuw i64 %83, %36
  %85 = add i64 %82, %84
  %86 = zext i32 %71 to i64
  %87 = mul nuw i64 %86, %37
  %88 = add i64 %85, %87
  %89 = zext i32 %77 to i64
  %90 = mul nuw i64 %89, %38
  %91 = add i64 %88, %90
  %92 = mul nuw i64 %78, %39
  %93 = mul nuw i64 %80, %34
  %94 = add i64 %93, %92
  %95 = mul nuw i64 %83, %35
  %96 = add i64 %94, %95
  %97 = mul nuw i64 %86, %36
  %98 = add i64 %96, %97
  %99 = mul nuw i64 %89, %37
  %100 = add i64 %98, %99
  %101 = mul nuw i64 %78, %40
  %102 = mul nuw i64 %80, %39
  %103 = add i64 %102, %101
  %104 = mul nuw i64 %83, %34
  %105 = add i64 %103, %104
  %106 = mul nuw i64 %86, %35
  %107 = add i64 %105, %106
  %108 = mul nuw i64 %89, %36
  %109 = add i64 %107, %108
  %110 = mul nuw i64 %78, %41
  %111 = mul nuw i64 %80, %40
  %112 = add i64 %111, %110
  %113 = mul nuw i64 %83, %39
  %114 = add i64 %112, %113
  %115 = mul nuw i64 %86, %34
  %116 = add i64 %114, %115
  %117 = mul nuw i64 %89, %35
  %118 = add i64 %116, %117
  %119 = mul nuw i64 %78, %42
  %120 = mul nuw i64 %80, %41
  %121 = add i64 %120, %119
  %122 = mul nuw i64 %83, %40
  %123 = add i64 %121, %122
  %124 = mul nuw i64 %86, %39
  %125 = add i64 %123, %124
  %126 = mul nuw i64 %89, %34
  %127 = add i64 %125, %126
  %128 = lshr i64 %91, 26
  %129 = trunc i64 %91 to i32
  %130 = and i32 %129, 67108863
  %131 = and i64 %128, 4294967295
  %132 = add i64 %100, %131
  %133 = lshr i64 %132, 26
  %134 = trunc i64 %132 to i32
  %135 = and i32 %134, 67108863
  %136 = and i64 %133, 4294967295
  %137 = add i64 %109, %136
  %138 = lshr i64 %137, 26
  %139 = trunc i64 %137 to i32
  %140 = and i32 %139, 67108863
  %141 = and i64 %138, 4294967295
  %142 = add i64 %118, %141
  %143 = lshr i64 %142, 26
  %144 = trunc i64 %142 to i32
  %145 = and i32 %144, 67108863
  %146 = and i64 %143, 4294967295
  %147 = add i64 %127, %146
  %148 = lshr i64 %147, 26
  %149 = trunc i64 %148 to i32
  %150 = trunc i64 %147 to i32
  %151 = and i32 %150, 67108863
  %152 = mul i32 %149, 5
  %153 = add i32 %152, %130
  %154 = lshr i32 %153, 26
  %155 = and i32 %153, 67108863
  %156 = add nuw nsw i32 %154, %135
  %157 = getelementptr i8, i8* %44, i32 16
  %158 = add i64 %45, -16
  %159 = icmp ugt i64 %158, 15
  br i1 %159, label %43, label %160

160:                                              ; preds = %43, %3
  %161 = phi i32 [ %25, %3 ], [ %151, %43 ]
  %162 = phi i32 [ %23, %3 ], [ %145, %43 ]
  %163 = phi i32 [ %21, %3 ], [ %140, %43 ]
  %164 = phi i32 [ %19, %3 ], [ %156, %43 ]
  %165 = phi i32 [ %17, %3 ], [ %155, %43 ]
  store i32 %165, i32* %16, align 4
  store i32 %164, i32* %18, align 4
  store i32 %163, i32* %20, align 4
  store i32 %162, i32* %22, align 4
  store i32 %161, i32* %24, align 4
  ret void
}

declare void @sodium_memzero(i8* %0, i32 %1) local_unnamed_addr #4

declare i32 @crypto_verify_16(i8* %0, i8* %1) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly %0, i8 %1, i64 %2, i1 immarg %3) #5

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #5

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { noinline nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind willreturn writeonly }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

#########################################################
; exiting Souper's runOnFunction() for ./poly1305_donna.c.bc:poly1305_finish()
rescanning function after transformation was applied

; entering Souper's runOnFunction() for ./poly1305_donna.c.bc:poly1305_finish()

; ModuleID = './poly1305_donna.c.bc'
source_filename = "crypto_onetimeauth/poly1305/donna/poly1305_donna.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.crypto_onetimeauth_poly1305_implementation = type { i32 (i8*, i8*, i64, i8*)*, i32 (i8*, i8*, i64, i8*)*, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)*, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*, i64)*, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)* }
%struct.crypto_onetimeauth_poly1305_state = type { [256 x i8] }
%struct.poly1305_state_internal_t = type { [5 x i32], [5 x i32], [4 x i32], i64, [16 x i8], i8 }

@crypto_onetimeauth_poly1305_donna_implementation = hidden local_unnamed_addr global %struct.crypto_onetimeauth_poly1305_implementation { i32 (i8*, i8*, i64, i8*)* @crypto_onetimeauth_poly1305_donna, i32 (i8*, i8*, i64, i8*)* @crypto_onetimeauth_poly1305_donna_verify, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)* @crypto_onetimeauth_poly1305_donna_init, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*, i64)* @crypto_onetimeauth_poly1305_donna_update, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)* @crypto_onetimeauth_poly1305_donna_final }, align 4

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna(i8* nocapture %0, i8* nocapture readonly %1, i64 %2, i8* nocapture readonly %3) #0 {
  %5 = alloca %struct.poly1305_state_internal_t, align 64
  %6 = bitcast %struct.poly1305_state_internal_t* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %6) #6
  %7 = bitcast i8* %3 to i32*
  %8 = load i32, i32* %7, align 1
  %9 = and i32 %8, 67108863
  %10 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 0
  store i32 %9, i32* %10, align 64
  %11 = getelementptr i8, i8* %3, i32 3
  %12 = bitcast i8* %11 to i32*
  %13 = load i32, i32* %12, align 1
  %14 = lshr i32 %13, 2
  %15 = and i32 %14, 67108611
  %16 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 1
  store i32 %15, i32* %16, align 4
  %17 = getelementptr i8, i8* %3, i32 6
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 1
  %20 = lshr i32 %19, 4
  %21 = and i32 %20, 67092735
  %22 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 2
  store i32 %21, i32* %22, align 8
  %23 = getelementptr i8, i8* %3, i32 9
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 1
  %26 = lshr i32 %25, 6
  %27 = and i32 %26, 66076671
  %28 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 3
  store i32 %27, i32* %28, align 4
  %29 = getelementptr i8, i8* %3, i32 12
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 1
  %32 = lshr i32 %31, 8
  %33 = and i32 %32, 1048575
  %34 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 4
  store i32 %33, i32* %34, align 16
  %35 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 1, i32 0
  %36 = getelementptr i8, i8* %3, i32 16
  %37 = bitcast i8* %36 to i32*
  %38 = bitcast i32* %35 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(20) %38, i8 0, i64 20, i1 false) #6
  %39 = load i32, i32* %37, align 1
  %40 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 0
  store i32 %39, i32* %40, align 8
  %41 = getelementptr i8, i8* %3, i32 20
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %42, align 1
  %44 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 1
  store i32 %43, i32* %44, align 4
  %45 = getelementptr i8, i8* %3, i32 24
  %46 = bitcast i8* %45 to i32*
  %47 = load i32, i32* %46, align 1
  %48 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 2
  store i32 %47, i32* %48, align 8
  %49 = getelementptr i8, i8* %3, i32 28
  %50 = bitcast i8* %49 to i32*
  %51 = load i32, i32* %50, align 1
  %52 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 3
  store i32 %51, i32* %52, align 4
  %53 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 3
  store i64 0, i64* %53, align 8
  %54 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 5
  store i8 0, i8* %54, align 16
  call fastcc void @poly1305_update(%struct.poly1305_state_internal_t* nonnull %5, i8* %1, i64 %2)
  call fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* nonnull %5, i8* %0)
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %6) #6
  ret i32 0
}

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_verify(i8* %0, i8* nocapture readonly %1, i64 %2, i8* nocapture readonly %3) #0 {
  %5 = alloca %struct.poly1305_state_internal_t, align 64
  %6 = alloca [16 x i8], align 16
  %7 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #6
  %8 = bitcast %struct.poly1305_state_internal_t* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %8) #6
  %9 = bitcast i8* %3 to i32*
  %10 = load i32, i32* %9, align 1
  %11 = and i32 %10, 67108863
  %12 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 0
  store i32 %11, i32* %12, align 64
  %13 = getelementptr i8, i8* %3, i32 3
  %14 = bitcast i8* %13 to i32*
  %15 = load i32, i32* %14, align 1
  %16 = lshr i32 %15, 2
  %17 = and i32 %16, 67108611
  %18 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 1
  store i32 %17, i32* %18, align 4
  %19 = getelementptr i8, i8* %3, i32 6
  %20 = bitcast i8* %19 to i32*
  %21 = load i32, i32* %20, align 1
  %22 = lshr i32 %21, 4
  %23 = and i32 %22, 67092735
  %24 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 2
  store i32 %23, i32* %24, align 8
  %25 = getelementptr i8, i8* %3, i32 9
  %26 = bitcast i8* %25 to i32*
  %27 = load i32, i32* %26, align 1
  %28 = lshr i32 %27, 6
  %29 = and i32 %28, 66076671
  %30 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 3
  store i32 %29, i32* %30, align 4
  %31 = getelementptr i8, i8* %3, i32 12
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 1
  %34 = lshr i32 %33, 8
  %35 = and i32 %34, 1048575
  %36 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 4
  store i32 %35, i32* %36, align 16
  %37 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 1, i32 0
  %38 = getelementptr i8, i8* %3, i32 16
  %39 = bitcast i8* %38 to i32*
  %40 = bitcast i32* %37 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(20) %40, i8 0, i64 20, i1 false) #6
  %41 = load i32, i32* %39, align 1
  %42 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 0
  store i32 %41, i32* %42, align 8
  %43 = getelementptr i8, i8* %3, i32 20
  %44 = bitcast i8* %43 to i32*
  %45 = load i32, i32* %44, align 1
  %46 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 1
  store i32 %45, i32* %46, align 4
  %47 = getelementptr i8, i8* %3, i32 24
  %48 = bitcast i8* %47 to i32*
  %49 = load i32, i32* %48, align 1
  %50 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 2
  store i32 %49, i32* %50, align 8
  %51 = getelementptr i8, i8* %3, i32 28
  %52 = bitcast i8* %51 to i32*
  %53 = load i32, i32* %52, align 1
  %54 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 3
  store i32 %53, i32* %54, align 4
  %55 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 3
  store i64 0, i64* %55, align 8
  %56 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 5
  store i8 0, i8* %56, align 16
  call fastcc void @poly1305_update(%struct.poly1305_state_internal_t* nonnull %5, i8* %1, i64 %2) #6
  call fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* nonnull %5, i8* nonnull %7) #6
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %8) #6
  %57 = call i32 @crypto_verify_16(i8* %0, i8* nonnull %7) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #6
  ret i32 %57
}

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_init(%struct.crypto_onetimeauth_poly1305_state* nocapture %0, i8* nocapture readonly %1) #0 {
  %3 = bitcast i8* %1 to i32*
  %4 = load i32, i32* %3, align 1
  %5 = and i32 %4, 67108863
  %6 = bitcast %struct.crypto_onetimeauth_poly1305_state* %0 to i32*
  store i32 %5, i32* %6, align 8
  %7 = getelementptr i8, i8* %1, i32 3
  %8 = bitcast i8* %7 to i32*
  %9 = load i32, i32* %8, align 1
  %10 = lshr i32 %9, 2
  %11 = and i32 %10, 67108611
  %12 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 4
  %13 = bitcast i8* %12 to i32*
  store i32 %11, i32* %13, align 4
  %14 = getelementptr i8, i8* %1, i32 6
  %15 = bitcast i8* %14 to i32*
  %16 = load i32, i32* %15, align 1
  %17 = lshr i32 %16, 4
  %18 = and i32 %17, 67092735
  %19 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 8
  %20 = bitcast i8* %19 to i32*
  store i32 %18, i32* %20, align 8
  %21 = getelementptr i8, i8* %1, i32 9
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 1
  %24 = lshr i32 %23, 6
  %25 = and i32 %24, 66076671
  %26 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 12
  %27 = bitcast i8* %26 to i32*
  store i32 %25, i32* %27, align 4
  %28 = getelementptr i8, i8* %1, i32 12
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 1
  %31 = lshr i32 %30, 8
  %32 = and i32 %31, 1048575
  %33 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 16
  %34 = bitcast i8* %33 to i32*
  store i32 %32, i32* %34, align 8
  %35 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 20
  %36 = getelementptr i8, i8* %1, i32 16
  %37 = bitcast i8* %36 to i32*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(20) %35, i8 0, i64 20, i1 false) #6
  %38 = load i32, i32* %37, align 1
  %39 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 40
  %40 = bitcast i8* %39 to i32*
  store i32 %38, i32* %40, align 8
  %41 = getelementptr i8, i8* %1, i32 20
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %42, align 1
  %44 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 44
  %45 = bitcast i8* %44 to i32*
  store i32 %43, i32* %45, align 4
  %46 = getelementptr i8, i8* %1, i32 24
  %47 = bitcast i8* %46 to i32*
  %48 = load i32, i32* %47, align 1
  %49 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 48
  %50 = bitcast i8* %49 to i32*
  store i32 %48, i32* %50, align 8
  %51 = getelementptr i8, i8* %1, i32 28
  %52 = bitcast i8* %51 to i32*
  %53 = load i32, i32* %52, align 1
  %54 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 52
  %55 = bitcast i8* %54 to i32*
  store i32 %53, i32* %55, align 4
  %56 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 56
  %57 = bitcast i8* %56 to i64*
  store i64 0, i64* %57, align 8
  %58 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 80
  store i8 0, i8* %58, align 8
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_update(%struct.crypto_onetimeauth_poly1305_state* nocapture %0, i8* nocapture readonly %1, i64 %2) #1 {
  %4 = bitcast %struct.crypto_onetimeauth_poly1305_state* %0 to %struct.poly1305_state_internal_t*
  tail call fastcc void @poly1305_update(%struct.poly1305_state_internal_t* %4, i8* %1, i64 %2)
  ret i32 0
}

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_final(%struct.crypto_onetimeauth_poly1305_state* %0, i8* nocapture %1) #0 {
  %3 = bitcast %struct.crypto_onetimeauth_poly1305_state* %0 to %struct.poly1305_state_internal_t*
  tail call fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* %3, i8* %1)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #2

; Function Attrs: nofree norecurse nounwind
define internal fastcc void @poly1305_update(%struct.poly1305_state_internal_t* nocapture %0, i8* nocapture readonly %1, i64 %2) unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 3
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %33, label %7

7:                                                ; preds = %3
  %8 = sub i64 16, %5
  %9 = icmp ugt i64 %8, %2
  %10 = select i1 %9, i64 %2, i64 %8
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %24, label %12

12:                                               ; preds = %7, %12
  %13 = phi i64 [ %23, %12 ], [ %5, %7 ]
  %14 = phi i64 [ %21, %12 ], [ 0, %7 ]
  %15 = trunc i64 %14 to i32
  %16 = getelementptr i8, i8* %1, i32 %15
  %17 = load i8, i8* %16, align 1
  %18 = add i64 %13, %14
  %19 = trunc i64 %18 to i32
  %20 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 %19
  store i8 %17, i8* %20, align 1
  %21 = add nuw i64 %14, 1
  %22 = icmp ult i64 %21, %10
  %23 = load i64, i64* %4, align 8
  br i1 %22, label %12, label %24

24:                                               ; preds = %12, %7
  %25 = phi i64 [ %5, %7 ], [ %23, %12 ]
  %26 = add i64 %25, %10
  store i64 %26, i64* %4, align 8
  %27 = icmp ult i64 %26, 16
  br i1 %27, label %60, label %28

28:                                               ; preds = %24
  %29 = trunc i64 %10 to i32
  %30 = getelementptr i8, i8* %1, i32 %29
  %31 = sub i64 %2, %10
  %32 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 0
  tail call fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nonnull %0, i8* nonnull %32, i64 16)
  store i64 0, i64* %4, align 8
  br label %33

33:                                               ; preds = %28, %3
  %34 = phi i64 [ %2, %3 ], [ %31, %28 ]
  %35 = phi i8* [ %1, %3 ], [ %30, %28 ]
  %36 = icmp ugt i64 %34, 15
  br i1 %36, label %37, label %42

37:                                               ; preds = %33
  %38 = and i64 %34, -16
  tail call fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nonnull %0, i8* %35, i64 %38)
  %39 = trunc i64 %38 to i32
  %40 = getelementptr i8, i8* %35, i32 %39
  %41 = sub i64 %34, %38
  br label %42

42:                                               ; preds = %37, %33
  %43 = phi i64 [ %41, %37 ], [ %34, %33 ]
  %44 = phi i8* [ %40, %37 ], [ %35, %33 ]
  %45 = icmp eq i64 %43, 0
  br i1 %45, label %60, label %46

46:                                               ; preds = %42, %46
  %47 = phi i64 [ %55, %46 ], [ 0, %42 ]
  %48 = trunc i64 %47 to i32
  %49 = getelementptr i8, i8* %44, i32 %48
  %50 = load i8, i8* %49, align 1
  %51 = load i64, i64* %4, align 8
  %52 = add i64 %51, %47
  %53 = trunc i64 %52 to i32
  %54 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 %53
  store i8 %50, i8* %54, align 1
  %55 = add nuw i64 %47, 1
  %56 = icmp eq i64 %55, %43
  br i1 %56, label %57, label %46

57:                                               ; preds = %46
  %58 = load i64, i64* %4, align 8
  %59 = add i64 %58, %43
  store i64 %59, i64* %4, align 8
  br label %60

60:                                               ; preds = %57, %42, %24
  ret void
}

; Function Attrs: noinline nounwind
define internal fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* %0, i8* nocapture %1) unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 3
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %20, label %6

6:                                                ; preds = %2
  %7 = trunc i64 %4 to i32
  %8 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 %7
  store i8 1, i8* %8, align 1
  %9 = add i64 %4, 1
  %10 = icmp ult i64 %9, 16
  br i1 %10, label %11, label %17

11:                                               ; preds = %6
  %12 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 16
  %13 = bitcast i32* %12 to i8*
  %14 = add i32 %7, 1
  %15 = getelementptr i8, i8* %13, i32 %14
  %16 = sub i32 15, %7
  call void @llvm.memset.p0i8.i32(i8* align 1 %15, i8 0, i32 %16, i1 false)
  br label %17

17:                                               ; preds = %11, %6
  %18 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 5
  store i8 1, i8* %18, align 8
  %19 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 0
  tail call fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nonnull %0, i8* nonnull %19, i64 16)
  br label %20

20:                                               ; preds = %2, %17
  %21 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 0
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 2
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 3
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 4
  %30 = load i32, i32* %29, align 4
  %31 = lshr i32 %24, 26
  %32 = and i32 %24, 67108863
  %33 = add i32 %26, %31
  %34 = lshr i32 %33, 26
  %35 = and i32 %33, 67108863
  %36 = add i32 %34, %28
  %37 = lshr i32 %36, 26
  %38 = and i32 %36, 67108863
  %39 = add i32 %37, %30
  %40 = lshr i32 %39, 26
  %41 = mul nuw nsw i32 %40, 5
  %42 = add i32 %41, %22
  %43 = lshr i32 %42, 26
  %44 = and i32 %42, 67108863
  %45 = add nuw nsw i32 %43, %32
  %46 = add nuw nsw i32 %44, 5
  %47 = lshr i32 %46, 26
  %48 = add nuw nsw i32 %47, %45
  %49 = lshr i32 %48, 26
  %50 = add nuw nsw i32 %49, %35
  %51 = lshr i32 %50, 26
  %52 = add nuw nsw i32 %51, %38
  %53 = lshr i32 %52, 26
  %54 = or i32 %39, -67108864
  %55 = add nsw i32 %54, %53
  %56 = lshr i32 %55, 31
  %57 = add nsw i32 %56, -1
  %58 = and i32 %57, 67108863
  %59 = and i32 %58, %46
  %60 = and i32 %58, %48
  %61 = and i32 %57, %55
  %62 = ashr i32 %55, 31
  %63 = and i32 %62, %44
  %64 = or i32 %63, %59
  %65 = and i32 %62, %45
  %66 = or i32 %65, %60
  %67 = and i32 %62, %35
  %68 = or i32 %67, 0
  %69 = and i32 %62, %38
  %70 = or i32 %69, 0
  %71 = and i32 %62, %39
  %72 = or i32 %61, %71
  %73 = shl i32 %66, 26
  %74 = or i32 %64, %73
  %75 = lshr i32 %66, 6
  %76 = shl i32 %68, 20
  %77 = or i32 %75, %76
  %78 = lshr i32 %68, 12
  %79 = shl i32 %70, 14
  %80 = or i32 %78, %79
  %81 = lshr i32 %70, 18
  %82 = shl i32 %72, 8
  %83 = or i32 %82, %81
  %84 = zext i32 %74 to i64
  %85 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 0
  %86 = load i32, i32* %85, align 8
  %87 = zext i32 %86 to i64
  %88 = add nuw nsw i64 %84, %87
  %89 = trunc i64 %88 to i32
  %90 = zext i32 %77 to i64
  %91 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 1
  %92 = load i32, i32* %91, align 4
  %93 = zext i32 %92 to i64
  %94 = add nuw nsw i64 %90, %93
  %95 = lshr i64 %88, 32
  %96 = add nuw nsw i64 %94, %95
  %97 = trunc i64 %96 to i32
  %98 = zext i32 %80 to i64
  %99 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 2
  %100 = load i32, i32* %99, align 8
  %101 = zext i32 %100 to i64
  %102 = add nuw nsw i64 %98, %101
  %103 = lshr i64 %96, 32
  %104 = add nuw nsw i64 %102, %103
  %105 = trunc i64 %104 to i32
  %106 = zext i32 %83 to i64
  %107 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 3
  %108 = load i32, i32* %107, align 4
  %109 = zext i32 %108 to i64
  %110 = add nuw nsw i64 %106, %109
  %111 = lshr i64 %104, 32
  %112 = add nuw nsw i64 %110, %111
  %113 = trunc i64 %112 to i32
  %114 = bitcast i8* %1 to i32*
  store i32 %89, i32* %114, align 1
  %115 = getelementptr i8, i8* %1, i32 4
  %116 = bitcast i8* %115 to i32*
  store i32 %97, i32* %116, align 1
  %117 = getelementptr i8, i8* %1, i32 8
  %118 = bitcast i8* %117 to i32*
  store i32 %105, i32* %118, align 1
  %119 = getelementptr i8, i8* %1, i32 12
  %120 = bitcast i8* %119 to i32*
  store i32 %113, i32* %120, align 1
  %121 = bitcast %struct.poly1305_state_internal_t* %0 to i8*
  tail call void @sodium_memzero(i8* %121, i32 88) #6
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #2

; Function Attrs: nofree norecurse nounwind
define internal fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nocapture %0, i8* nocapture readonly %1, i64 %2) unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 5
  %5 = load i8, i8* %4, align 8
  %6 = icmp eq i8 %5, 0
  %7 = select i1 %6, i32 16777216, i32 0
  %8 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 2
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 4
  %15 = load i32, i32* %14, align 8
  %16 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 2
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 3
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 4
  %25 = load i32, i32* %24, align 4
  %26 = icmp ugt i64 %2, 15
  br i1 %26, label %27, label %160

27:                                               ; preds = %3
  %28 = mul i32 %15, 5
  %29 = mul i32 %13, 5
  %30 = mul i32 %11, 5
  %31 = mul i32 %9, 5
  %32 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 0
  %33 = load i32, i32* %32, align 8
  %34 = zext i32 %33 to i64
  %35 = zext i32 %28 to i64
  %36 = zext i32 %29 to i64
  %37 = zext i32 %30 to i64
  %38 = zext i32 %31 to i64
  %39 = zext i32 %9 to i64
  %40 = zext i32 %11 to i64
  %41 = zext i32 %13 to i64
  %42 = zext i32 %15 to i64
  br label %43

43:                                               ; preds = %27, %43
  %44 = phi i8* [ %1, %27 ], [ %157, %43 ]
  %45 = phi i64 [ %2, %27 ], [ %158, %43 ]
  %46 = phi i32 [ %17, %27 ], [ %155, %43 ]
  %47 = phi i32 [ %19, %27 ], [ %156, %43 ]
  %48 = phi i32 [ %21, %27 ], [ %140, %43 ]
  %49 = phi i32 [ %23, %27 ], [ %145, %43 ]
  %50 = phi i32 [ %25, %27 ], [ %151, %43 ]
  %51 = bitcast i8* %44 to i32*
  %52 = load i32, i32* %51, align 1
  %53 = and i32 %52, 67108863
  %54 = add i32 %53, %46
  %55 = getelementptr i8, i8* %44, i32 3
  %56 = bitcast i8* %55 to i32*
  %57 = load i32, i32* %56, align 1
  %58 = lshr i32 %57, 2
  %59 = and i32 %58, 67108863
  %60 = add i32 %59, %47
  %61 = getelementptr i8, i8* %44, i32 6
  %62 = bitcast i8* %61 to i32*
  %63 = load i32, i32* %62, align 1
  %64 = lshr i32 %63, 4
  %65 = and i32 %64, 67108863
  %66 = add i32 %65, %48
  %67 = getelementptr i8, i8* %44, i32 9
  %68 = bitcast i8* %67 to i32*
  %69 = load i32, i32* %68, align 1
  %70 = lshr i32 %69, 6
  %71 = add i32 %70, %49
  %72 = getelementptr i8, i8* %44, i32 12
  %73 = bitcast i8* %72 to i32*
  %74 = load i32, i32* %73, align 1
  %75 = lshr i32 %74, 8
  %76 = or i32 %75, %7
  %77 = add i32 %76, %50
  %78 = zext i32 %54 to i64
  %79 = mul nuw i64 %78, %34
  %80 = zext i32 %60 to i64
  %81 = mul nuw i64 %80, %35
  %82 = add i64 %81, %79
  %83 = zext i32 %66 to i64
  %84 = mul nuw i64 %83, %36
  %85 = add i64 %82, %84
  %86 = zext i32 %71 to i64
  %87 = mul nuw i64 %86, %37
  %88 = add i64 %85, %87
  %89 = zext i32 %77 to i64
  %90 = mul nuw i64 %89, %38
  %91 = add i64 %88, %90
  %92 = mul nuw i64 %78, %39
  %93 = mul nuw i64 %80, %34
  %94 = add i64 %93, %92
  %95 = mul nuw i64 %83, %35
  %96 = add i64 %94, %95
  %97 = mul nuw i64 %86, %36
  %98 = add i64 %96, %97
  %99 = mul nuw i64 %89, %37
  %100 = add i64 %98, %99
  %101 = mul nuw i64 %78, %40
  %102 = mul nuw i64 %80, %39
  %103 = add i64 %102, %101
  %104 = mul nuw i64 %83, %34
  %105 = add i64 %103, %104
  %106 = mul nuw i64 %86, %35
  %107 = add i64 %105, %106
  %108 = mul nuw i64 %89, %36
  %109 = add i64 %107, %108
  %110 = mul nuw i64 %78, %41
  %111 = mul nuw i64 %80, %40
  %112 = add i64 %111, %110
  %113 = mul nuw i64 %83, %39
  %114 = add i64 %112, %113
  %115 = mul nuw i64 %86, %34
  %116 = add i64 %114, %115
  %117 = mul nuw i64 %89, %35
  %118 = add i64 %116, %117
  %119 = mul nuw i64 %78, %42
  %120 = mul nuw i64 %80, %41
  %121 = add i64 %120, %119
  %122 = mul nuw i64 %83, %40
  %123 = add i64 %121, %122
  %124 = mul nuw i64 %86, %39
  %125 = add i64 %123, %124
  %126 = mul nuw i64 %89, %34
  %127 = add i64 %125, %126
  %128 = lshr i64 %91, 26
  %129 = trunc i64 %91 to i32
  %130 = and i32 %129, 67108863
  %131 = and i64 %128, 4294967295
  %132 = add i64 %100, %131
  %133 = lshr i64 %132, 26
  %134 = trunc i64 %132 to i32
  %135 = and i32 %134, 67108863
  %136 = and i64 %133, 4294967295
  %137 = add i64 %109, %136
  %138 = lshr i64 %137, 26
  %139 = trunc i64 %137 to i32
  %140 = and i32 %139, 67108863
  %141 = and i64 %138, 4294967295
  %142 = add i64 %118, %141
  %143 = lshr i64 %142, 26
  %144 = trunc i64 %142 to i32
  %145 = and i32 %144, 67108863
  %146 = and i64 %143, 4294967295
  %147 = add i64 %127, %146
  %148 = lshr i64 %147, 26
  %149 = trunc i64 %148 to i32
  %150 = trunc i64 %147 to i32
  %151 = and i32 %150, 67108863
  %152 = mul i32 %149, 5
  %153 = add i32 %152, %130
  %154 = lshr i32 %153, 26
  %155 = and i32 %153, 67108863
  %156 = add nuw nsw i32 %154, %135
  %157 = getelementptr i8, i8* %44, i32 16
  %158 = add i64 %45, -16
  %159 = icmp ugt i64 %158, 15
  br i1 %159, label %43, label %160

160:                                              ; preds = %43, %3
  %161 = phi i32 [ %25, %3 ], [ %151, %43 ]
  %162 = phi i32 [ %23, %3 ], [ %145, %43 ]
  %163 = phi i32 [ %21, %3 ], [ %140, %43 ]
  %164 = phi i32 [ %19, %3 ], [ %156, %43 ]
  %165 = phi i32 [ %17, %3 ], [ %155, %43 ]
  store i32 %165, i32* %16, align 4
  store i32 %164, i32* %18, align 4
  store i32 %163, i32* %20, align 4
  store i32 %162, i32* %22, align 4
  store i32 %161, i32* %24, align 4
  ret void
}

declare void @sodium_memzero(i8* %0, i32 %1) local_unnamed_addr #4

declare i32 @crypto_verify_16(i8* %0, i8* %1) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly %0, i8 %1, i64 %2, i1 immarg %3) #5

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #5

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { noinline nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind willreturn writeonly }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %4 = load i64, i64* %3, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = icmp eq i64 %4, 0
; Looking for a replacement for:
%0:i64 = var
%1:i1 = eq 0:i64, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = trunc i64 %4 to i32
; Looking for a replacement for:
%0:i64 = var
%1:i1 = eq 0:i64, %0
pc %1 0:i1
%2:i32 = trunc %0
infer %2

; *****
; For LLVM instruction:
;  %9 = add i64 %4, 1
; Looking for a replacement for:
%0:i64 = var
%1:i1 = eq 0:i64, %0
pc %1 0:i1
%2:i64 = add 1:i64, %0
infer %2

; *****
; For LLVM instruction:
;  %10 = icmp ult i64 %9, 16
; Looking for a replacement for:
%0:i64 = var
%1:i1 = eq 0:i64, %0
pc %1 0:i1
%2:i64 = add 1:i64, %0
%3:i1 = ult %2, 16:i64
infer %3

; *****
; For LLVM instruction:
;  %14 = add i32 %7, 1
; Looking for a replacement for:
%0:i64 = var
%1:i1 = eq 0:i64, %0
pc %1 0:i1
%2:i64 = add 1:i64, %0
%3:i1 = ult %2, 16:i64
pc %3 1:i1
%4:i32 = trunc %0 (hasExternalUses)
%5:i32 = add 1:i32, %4
infer %5

; *****
; For LLVM instruction:
;  %16 = sub i32 15, %7
; Looking for a replacement for:
%0:i64 = var
%1:i1 = eq 0:i64, %0
pc %1 0:i1
%2:i64 = add 1:i64, %0
%3:i1 = ult %2, 16:i64
pc %3 1:i1
%4:i32 = trunc %0 (hasExternalUses)
%5:i32 = sub 15:i32, %4
infer %5

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %21, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %23, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %25, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %27, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %29, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %31 = lshr i32 %24, 26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 26:i32
infer %1

; *****
; For LLVM instruction:
;  %32 = and i32 %24, 67108863
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 67108863:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %33 = add i32 %26, %31
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2
infer %3

; *****
; For LLVM instruction:
;  %34 = lshr i32 %33, 26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2 (hasExternalUses)
%4:i32 = lshr %3, 26:i32
infer %4

; *****
; For LLVM instruction:
;  %35 = and i32 %33, 67108863
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2 (hasExternalUses)
%4:i32 = and 67108863:i32, %3
infer %4

; *****
; For LLVM instruction:
;  %36 = add i32 %34, %28
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3 (hasExternalUses)
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5
infer %6

; *****
; For LLVM instruction:
;  %37 = lshr i32 %36, 26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3 (hasExternalUses)
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5 (hasExternalUses)
%7:i32 = lshr %6, 26:i32
infer %7

; *****
; For LLVM instruction:
;  %38 = and i32 %36, 67108863
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3 (hasExternalUses)
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5 (hasExternalUses)
%7:i32 = and 67108863:i32, %6
infer %7

; *****
; For LLVM instruction:
;  %39 = add i32 %37, %30
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4 (hasExternalUses)
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6 (hasExternalUses)
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8
infer %9

; *****
; For LLVM instruction:
;  %40 = lshr i32 %39, 26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4 (hasExternalUses)
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6 (hasExternalUses)
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = lshr %9, 26:i32
infer %10

; *****
; For LLVM instruction:
;  %41 = mul nuw nsw i32 %40, 5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4 (hasExternalUses)
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6 (hasExternalUses)
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = lshr %9, 26:i32
%11:i32 = mulnw 5:i32, %10
infer %11

; *****
; For LLVM instruction:
;  %42 = add i32 %41, %22
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5 (hasExternalUses)
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7 (hasExternalUses)
%9:i32 = lshr %8, 26:i32
%10:i32 = add %1, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = mulnw 5:i32, %11
%13:i32 = add %0, %12
infer %13

; *****
; For LLVM instruction:
;  %43 = lshr i32 %42, 26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5 (hasExternalUses)
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7 (hasExternalUses)
%9:i32 = lshr %8, 26:i32
%10:i32 = add %1, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = mulnw 5:i32, %11
%13:i32 = add %0, %12 (hasExternalUses)
%14:i32 = lshr %13, 26:i32
infer %14

; *****
; For LLVM instruction:
;  %44 = and i32 %42, 67108863
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5 (hasExternalUses)
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7 (hasExternalUses)
%9:i32 = lshr %8, 26:i32
%10:i32 = add %1, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = mulnw 5:i32, %11
%13:i32 = add %0, %12 (hasExternalUses)
%14:i32 = and 67108863:i32, %13
infer %14

; *****
; For LLVM instruction:
;  %45 = add nuw nsw i32 %43, %32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 67108863:i32, %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %0, 26:i32
%7:i32 = add %5, %6 (hasExternalUses)
%8:i32 = lshr %7, 26:i32
%9:i32 = add %4, %8 (hasExternalUses)
%10:i32 = lshr %9, 26:i32
%11:i32 = add %3, %10 (hasExternalUses)
%12:i32 = lshr %11, 26:i32
%13:i32 = mulnw 5:i32, %12
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = lshr %14, 26:i32
%16:i32 = addnw %1, %15
infer %16

; *****
; For LLVM instruction:
;  %46 = add nuw nsw i32 %44, 5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5 (hasExternalUses)
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7 (hasExternalUses)
%9:i32 = lshr %8, 26:i32
%10:i32 = add %1, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = mulnw 5:i32, %11
%13:i32 = add %0, %12 (hasExternalUses)
%14:i32 = and 67108863:i32, %13 (hasExternalUses)
%15:i32 = addnw 5:i32, %14
infer %15

; *****
; For LLVM instruction:
;  %47 = lshr i32 %46, 26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5 (hasExternalUses)
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7 (hasExternalUses)
%9:i32 = lshr %8, 26:i32
%10:i32 = add %1, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = mulnw 5:i32, %11
%13:i32 = add %0, %12 (hasExternalUses)
%14:i32 = and 67108863:i32, %13 (hasExternalUses)
%15:i32 = addnw 5:i32, %14 (hasExternalUses)
%16:i32 = lshr %15, 26:i32
infer %16

; *****
; For LLVM instruction:
;  %48 = add nuw nsw i32 %47, %45
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 67108863:i32, %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %0, 26:i32
%7:i32 = add %5, %6 (hasExternalUses)
%8:i32 = lshr %7, 26:i32
%9:i32 = add %4, %8 (hasExternalUses)
%10:i32 = lshr %9, 26:i32
%11:i32 = add %3, %10 (hasExternalUses)
%12:i32 = lshr %11, 26:i32
%13:i32 = mulnw 5:i32, %12
%14:i32 = add %2, %13
%15:i32 = lshr %14, 26:i32
%16:i32 = addnw %1, %15 (hasExternalUses)
%17:i32 = and 67108863:i32, %14 (hasExternalUses)
%18:i32 = addnw 5:i32, %17 (hasExternalUses)
%19:i32 = lshr %18, 26:i32
%20:i32 = addnw %16, %19
infer %20

; *****
; For LLVM instruction:
;  %49 = lshr i32 %48, 26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 67108863:i32, %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %0, 26:i32
%7:i32 = add %5, %6 (hasExternalUses)
%8:i32 = lshr %7, 26:i32
%9:i32 = add %4, %8 (hasExternalUses)
%10:i32 = lshr %9, 26:i32
%11:i32 = add %3, %10 (hasExternalUses)
%12:i32 = lshr %11, 26:i32
%13:i32 = mulnw 5:i32, %12
%14:i32 = add %2, %13
%15:i32 = lshr %14, 26:i32
%16:i32 = addnw %1, %15 (hasExternalUses)
%17:i32 = and 67108863:i32, %14 (hasExternalUses)
%18:i32 = addnw 5:i32, %17 (hasExternalUses)
%19:i32 = lshr %18, 26:i32
%20:i32 = addnw %16, %19 (hasExternalUses)
%21:i32 = lshr %20, 26:i32
infer %21

; *****
; For LLVM instruction:
;  %50 = add nuw nsw i32 %49, %35
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2
%4:i32 = and 67108863:i32, %3 (hasExternalUses)
%5:i32 = and 67108863:i32, %1
%6:i32 = var
%7:i32 = var
%8:i32 = var
%9:i32 = lshr %3, 26:i32
%10:i32 = add %8, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = add %7, %11 (hasExternalUses)
%13:i32 = lshr %12, 26:i32
%14:i32 = mulnw 5:i32, %13
%15:i32 = add %6, %14
%16:i32 = lshr %15, 26:i32
%17:i32 = addnw %5, %16 (hasExternalUses)
%18:i32 = and 67108863:i32, %15 (hasExternalUses)
%19:i32 = addnw 5:i32, %18 (hasExternalUses)
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %17, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %4, %22
infer %23 (demandedBits=11111100000000000000000000000000)

; *****
; For LLVM instruction:
;  %51 = lshr i32 %50, 26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2
%4:i32 = and 67108863:i32, %3 (hasExternalUses)
%5:i32 = and 67108863:i32, %1
%6:i32 = var
%7:i32 = var
%8:i32 = var
%9:i32 = lshr %3, 26:i32
%10:i32 = add %8, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = add %7, %11 (hasExternalUses)
%13:i32 = lshr %12, 26:i32
%14:i32 = mulnw 5:i32, %13
%15:i32 = add %6, %14
%16:i32 = lshr %15, 26:i32
%17:i32 = addnw %5, %16 (hasExternalUses)
%18:i32 = and 67108863:i32, %15 (hasExternalUses)
%19:i32 = addnw 5:i32, %18 (hasExternalUses)
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %17, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %4, %22
%24:i32 = lshr %23, 26:i32
infer %24

; *****
; For LLVM instruction:
;  %52 = add nuw nsw i32 %51, %38
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5
%7:i32 = and 67108863:i32, %6 (hasExternalUses)
%8:i32 = and 67108863:i32, %4 (hasExternalUses)
%9:i32 = and 67108863:i32, %2
%10:i32 = var
%11:i32 = var
%12:i32 = lshr %6, 26:i32
%13:i32 = add %11, %12 (hasExternalUses)
%14:i32 = lshr %13, 26:i32
%15:i32 = mulnw 5:i32, %14
%16:i32 = add %10, %15
%17:i32 = lshr %16, 26:i32
%18:i32 = addnw %9, %17 (hasExternalUses)
%19:i32 = and 67108863:i32, %16 (hasExternalUses)
%20:i32 = addnw 5:i32, %19 (hasExternalUses)
%21:i32 = lshr %20, 26:i32
%22:i32 = addnw %18, %21 (hasExternalUses)
%23:i32 = lshr %22, 26:i32
%24:i32 = addnw %8, %23
%25:i32 = lshr %24, 26:i32
%26:i32 = addnw %7, %25
infer %26 (demandedBits=11111100000000000000000000000000)

; *****
; For LLVM instruction:
;  %53 = lshr i32 %52, 26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5
%7:i32 = and 67108863:i32, %6 (hasExternalUses)
%8:i32 = and 67108863:i32, %4 (hasExternalUses)
%9:i32 = and 67108863:i32, %2
%10:i32 = var
%11:i32 = var
%12:i32 = lshr %6, 26:i32
%13:i32 = add %11, %12 (hasExternalUses)
%14:i32 = lshr %13, 26:i32
%15:i32 = mulnw 5:i32, %14
%16:i32 = add %10, %15
%17:i32 = lshr %16, 26:i32
%18:i32 = addnw %9, %17 (hasExternalUses)
%19:i32 = and 67108863:i32, %16 (hasExternalUses)
%20:i32 = addnw 5:i32, %19 (hasExternalUses)
%21:i32 = lshr %20, 26:i32
%22:i32 = addnw %18, %21 (hasExternalUses)
%23:i32 = lshr %22, 26:i32
%24:i32 = addnw %8, %23
%25:i32 = lshr %24, 26:i32
%26:i32 = addnw %7, %25
%27:i32 = lshr %26, 26:i32
infer %27

; *****
; For LLVM instruction:
;  %54 = or i32 %39, -67108864
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4 (hasExternalUses)
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6 (hasExternalUses)
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = or 4227858432:i32, %9
infer %10

; *****
; For LLVM instruction:
;  %55 = add nsw i32 %54, %53
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28
infer %29 (demandedBits=10000000111111111111111111111111)

; *****
; For LLVM instruction:
;  %56 = lshr i32 %55, 31
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
infer %30 (demandedBits=00000011111111111111111111111111)

; *****
; For LLVM instruction:
;  %57 = add nsw i32 %56, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30
infer %31 (demandedBits=00000011111111111111111111111111)

; *****
; For LLVM instruction:
;  %58 = and i32 %57, 67108863
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31
infer %32 (demandedBits=00001111111111111111111111111111)

; *****
; For LLVM instruction:
;  %59 = and i32 %58, %46
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %1, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = mulnw 5:i32, %11
%13:i32 = add %0, %12
%14:i32 = and 67108863:i32, %13 (hasExternalUses)
%15:i32 = addnw 5:i32, %14
%16:i32 = or 4227858432:i32, %10
%17:i32 = and 67108863:i32, %8 (hasExternalUses)
%18:i32 = and 67108863:i32, %6 (hasExternalUses)
%19:i32 = and 67108863:i32, %4
%20:i32 = lshr %13, 26:i32
%21:i32 = addnw %19, %20 (hasExternalUses)
%22:i32 = lshr %15, 26:i32
%23:i32 = addnw %21, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %18, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %17, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %16, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %15, %32
infer %33

; *****
; For LLVM instruction:
;  %60 = and i32 %58, %48
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 67108863:i32, %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %0, 26:i32
%7:i32 = add %5, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %4, %8
%10:i32 = lshr %9, 26:i32
%11:i32 = add %3, %10 (hasExternalUses)
%12:i32 = lshr %11, 26:i32
%13:i32 = mulnw 5:i32, %12
%14:i32 = add %2, %13
%15:i32 = lshr %14, 26:i32
%16:i32 = addnw %1, %15 (hasExternalUses)
%17:i32 = and 67108863:i32, %14 (hasExternalUses)
%18:i32 = addnw 5:i32, %17 (hasExternalUses)
%19:i32 = lshr %18, 26:i32
%20:i32 = addnw %16, %19
%21:i32 = or 4227858432:i32, %11
%22:i32 = and 67108863:i32, %9 (hasExternalUses)
%23:i32 = and 67108863:i32, %7 (hasExternalUses)
%24:i32 = lshr %20, 26:i32
%25:i32 = addnw %23, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %22, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %21, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %20, %32
infer %33

; *****
; For LLVM instruction:
;  %61 = and i32 %57, %55
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and %31, %29
infer %32 (demandedBits=00000000111111111111111111111111)

; *****
; For LLVM instruction:
;  %62 = ashr i32 %55, 31
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32
infer %30 (demandedBits=00000111111111111111111111111111)

; *****
; For LLVM instruction:
;  %63 = and i32 %62, %44
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %1, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = mulnw 5:i32, %11
%13:i32 = add %0, %12
%14:i32 = and 67108863:i32, %13
%15:i32 = or 4227858432:i32, %10
%16:i32 = and 67108863:i32, %8 (hasExternalUses)
%17:i32 = and 67108863:i32, %6 (hasExternalUses)
%18:i32 = and 67108863:i32, %4
%19:i32 = lshr %13, 26:i32
%20:i32 = addnw %18, %19 (hasExternalUses)
%21:i32 = addnw 5:i32, %14 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %20, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %17, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %16, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %15, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %14, %30
infer %31

; *****
; For LLVM instruction:
;  %64 = or i32 %63, %59
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %1, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = mulnw 5:i32, %11
%13:i32 = add %0, %12
%14:i32 = and 67108863:i32, %13
%15:i32 = addnw 5:i32, %14
%16:i32 = or 4227858432:i32, %10
%17:i32 = and 67108863:i32, %8 (hasExternalUses)
%18:i32 = and 67108863:i32, %6 (hasExternalUses)
%19:i32 = and 67108863:i32, %4
%20:i32 = lshr %13, 26:i32
%21:i32 = addnw %19, %20 (hasExternalUses)
%22:i32 = lshr %15, 26:i32
%23:i32 = addnw %21, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %18, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %17, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %16, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %15, %32
%34:i32 = ashr %29, 31:i32 (hasExternalUses)
%35:i32 = and %14, %34
%36:i32 = or %33, %35
infer %36

; *****
; For LLVM instruction:
;  %65 = and i32 %62, %45
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 67108863:i32, %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %0, 26:i32
%7:i32 = add %5, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %4, %8
%10:i32 = lshr %9, 26:i32
%11:i32 = add %3, %10 (hasExternalUses)
%12:i32 = lshr %11, 26:i32
%13:i32 = mulnw 5:i32, %12
%14:i32 = add %2, %13
%15:i32 = lshr %14, 26:i32
%16:i32 = addnw %1, %15
%17:i32 = or 4227858432:i32, %11
%18:i32 = and 67108863:i32, %9 (hasExternalUses)
%19:i32 = and 67108863:i32, %7 (hasExternalUses)
%20:i32 = and 67108863:i32, %14 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %16, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %19, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %18, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %17, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %16, %30
infer %31

; *****
; For LLVM instruction:
;  %66 = or i32 %65, %60
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 67108863:i32, %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %0, 26:i32
%7:i32 = add %5, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %4, %8
%10:i32 = lshr %9, 26:i32
%11:i32 = add %3, %10 (hasExternalUses)
%12:i32 = lshr %11, 26:i32
%13:i32 = mulnw 5:i32, %12
%14:i32 = add %2, %13
%15:i32 = lshr %14, 26:i32
%16:i32 = addnw %1, %15
%17:i32 = and 67108863:i32, %14 (hasExternalUses)
%18:i32 = addnw 5:i32, %17 (hasExternalUses)
%19:i32 = lshr %18, 26:i32
%20:i32 = addnw %16, %19
%21:i32 = or 4227858432:i32, %11
%22:i32 = and 67108863:i32, %9 (hasExternalUses)
%23:i32 = and 67108863:i32, %7 (hasExternalUses)
%24:i32 = lshr %20, 26:i32
%25:i32 = addnw %23, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %22, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %21, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %20, %32
%34:i32 = ashr %29, 31:i32 (hasExternalUses)
%35:i32 = and %16, %34
%36:i32 = or %33, %35
infer %36

; *****
; For LLVM instruction:
;  %67 = and i32 %62, %35
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2
%4:i32 = and 67108863:i32, %3
%5:i32 = var
%6:i32 = var
%7:i32 = lshr %3, 26:i32
%8:i32 = add %6, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %5, %9 (hasExternalUses)
%11:i32 = or 4227858432:i32, %10
%12:i32 = and 67108863:i32, %8 (hasExternalUses)
%13:i32 = and 67108863:i32, %1
%14:i32 = var
%15:i32 = lshr %10, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %4, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %12, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %11, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %4, %30
infer %31

; *****
; For LLVM instruction:
;  %68 = or i32 %67, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2
%4:i32 = and 67108863:i32, %3
%5:i32 = var
%6:i32 = var
%7:i32 = lshr %3, 26:i32
%8:i32 = add %6, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %5, %9 (hasExternalUses)
%11:i32 = or 4227858432:i32, %10
%12:i32 = and 67108863:i32, %8 (hasExternalUses)
%13:i32 = and 67108863:i32, %1
%14:i32 = var
%15:i32 = lshr %10, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %4, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %12, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %11, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %4, %30
%32:i32 = or 0:i32, %31
infer %32

; *****
; For LLVM instruction:
;  %69 = and i32 %62, %38
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5
%7:i32 = and 67108863:i32, %6
%8:i32 = var
%9:i32 = lshr %6, 26:i32
%10:i32 = add %8, %9 (hasExternalUses)
%11:i32 = or 4227858432:i32, %10
%12:i32 = and 67108863:i32, %4 (hasExternalUses)
%13:i32 = and 67108863:i32, %2
%14:i32 = var
%15:i32 = lshr %10, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %7, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %11, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %7, %30
infer %31

; *****
; For LLVM instruction:
;  %70 = or i32 %69, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5
%7:i32 = and 67108863:i32, %6
%8:i32 = var
%9:i32 = lshr %6, 26:i32
%10:i32 = add %8, %9 (hasExternalUses)
%11:i32 = or 4227858432:i32, %10
%12:i32 = and 67108863:i32, %4 (hasExternalUses)
%13:i32 = and 67108863:i32, %2
%14:i32 = var
%15:i32 = lshr %10, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %7, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %11, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %7, %30
%32:i32 = or 0:i32, %31
infer %32

; *****
; For LLVM instruction:
;  %71 = and i32 %62, %39
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %9, %30
infer %31 (demandedBits=00000000111111111111111111111111)

; *****
; For LLVM instruction:
;  %72 = or i32 %61, %71
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %9, %30
%32:i32 = lshr %29, 31:i32
%33:i32 = addnsw 4294967295:i32, %32 (hasExternalUses)
%34:i32 = and %33, %29
%35:i32 = or %31, %34
infer %35 (demandedBits=00000000111111111111111111111111)

; *****
; For LLVM instruction:
;  %73 = shl i32 %66, 26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 67108863:i32, %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %0, 26:i32
%7:i32 = add %5, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %4, %8
%10:i32 = lshr %9, 26:i32
%11:i32 = add %3, %10 (hasExternalUses)
%12:i32 = lshr %11, 26:i32
%13:i32 = mulnw 5:i32, %12
%14:i32 = add %2, %13
%15:i32 = lshr %14, 26:i32
%16:i32 = addnw %1, %15
%17:i32 = and 67108863:i32, %14 (hasExternalUses)
%18:i32 = addnw 5:i32, %17 (hasExternalUses)
%19:i32 = lshr %18, 26:i32
%20:i32 = addnw %16, %19
%21:i32 = or 4227858432:i32, %11
%22:i32 = and 67108863:i32, %9 (hasExternalUses)
%23:i32 = and 67108863:i32, %7 (hasExternalUses)
%24:i32 = lshr %20, 26:i32
%25:i32 = addnw %23, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %22, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %21, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %20, %32
%34:i32 = ashr %29, 31:i32 (hasExternalUses)
%35:i32 = and %16, %34
%36:i32 = or %33, %35 (hasExternalUses)
%37:i32 = shl %36, 26:i32
infer %37

; *****
; For LLVM instruction:
;  %74 = or i32 %64, %73
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %1, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = mulnw 5:i32, %11
%13:i32 = add %0, %12
%14:i32 = and 67108863:i32, %13
%15:i32 = addnw 5:i32, %14
%16:i32 = or 4227858432:i32, %10
%17:i32 = and 67108863:i32, %8 (hasExternalUses)
%18:i32 = and 67108863:i32, %6 (hasExternalUses)
%19:i32 = and 67108863:i32, %4
%20:i32 = lshr %13, 26:i32
%21:i32 = addnw %19, %20
%22:i32 = lshr %15, 26:i32
%23:i32 = addnw %21, %22
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %18, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %17, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %16, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31
%33:i32 = and %15, %32
%34:i32 = ashr %29, 31:i32 (hasExternalUses)
%35:i32 = and %14, %34
%36:i32 = or %33, %35
%37:i32 = and %23, %32
%38:i32 = and %21, %34
%39:i32 = or %37, %38 (hasExternalUses)
%40:i32 = shl %39, 26:i32
%41:i32 = or %36, %40
infer %41

; *****
; For LLVM instruction:
;  %75 = lshr i32 %66, 6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 67108863:i32, %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %0, 26:i32
%7:i32 = add %5, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %4, %8
%10:i32 = lshr %9, 26:i32
%11:i32 = add %3, %10 (hasExternalUses)
%12:i32 = lshr %11, 26:i32
%13:i32 = mulnw 5:i32, %12
%14:i32 = add %2, %13
%15:i32 = lshr %14, 26:i32
%16:i32 = addnw %1, %15
%17:i32 = and 67108863:i32, %14 (hasExternalUses)
%18:i32 = addnw 5:i32, %17 (hasExternalUses)
%19:i32 = lshr %18, 26:i32
%20:i32 = addnw %16, %19
%21:i32 = or 4227858432:i32, %11
%22:i32 = and 67108863:i32, %9 (hasExternalUses)
%23:i32 = and 67108863:i32, %7 (hasExternalUses)
%24:i32 = lshr %20, 26:i32
%25:i32 = addnw %23, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %22, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %21, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %20, %32
%34:i32 = ashr %29, 31:i32 (hasExternalUses)
%35:i32 = and %16, %34
%36:i32 = or %33, %35 (hasExternalUses)
%37:i32 = lshr %36, 6:i32
infer %37

; *****
; For LLVM instruction:
;  %76 = shl i32 %68, 20
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2
%4:i32 = and 67108863:i32, %3
%5:i32 = var
%6:i32 = var
%7:i32 = lshr %3, 26:i32
%8:i32 = add %6, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %5, %9 (hasExternalUses)
%11:i32 = or 4227858432:i32, %10
%12:i32 = and 67108863:i32, %8 (hasExternalUses)
%13:i32 = and 67108863:i32, %1
%14:i32 = var
%15:i32 = lshr %10, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %4, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %12, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %11, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %4, %30
%32:i32 = or 0:i32, %31 (hasExternalUses)
%33:i32 = shl %32, 20:i32
infer %33

; *****
; For LLVM instruction:
;  %77 = or i32 %75, %76
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2
%4:i32 = and 67108863:i32, %3
%5:i32 = var
%6:i32 = var
%7:i32 = lshr %3, 26:i32
%8:i32 = add %6, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %5, %9 (hasExternalUses)
%11:i32 = or 4227858432:i32, %10
%12:i32 = and 67108863:i32, %8 (hasExternalUses)
%13:i32 = and 67108863:i32, %1
%14:i32 = var
%15:i32 = lshr %10, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %4, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %12, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %11, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %4, %30
%32:i32 = or 0:i32, %31 (hasExternalUses)
%33:i32 = shl %32, 20:i32
%34:i32 = lshr %29, 31:i32
%35:i32 = addnsw 4294967295:i32, %34 (hasExternalUses)
%36:i32 = and 67108863:i32, %35 (hasExternalUses)
%37:i32 = and %23, %36
%38:i32 = and %19, %30
%39:i32 = or %37, %38 (hasExternalUses)
%40:i32 = lshr %39, 6:i32
%41:i32 = or %33, %40
infer %41

; *****
; For LLVM instruction:
;  %78 = lshr i32 %68, 12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2
%4:i32 = and 67108863:i32, %3
%5:i32 = var
%6:i32 = var
%7:i32 = lshr %3, 26:i32
%8:i32 = add %6, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %5, %9 (hasExternalUses)
%11:i32 = or 4227858432:i32, %10
%12:i32 = and 67108863:i32, %8 (hasExternalUses)
%13:i32 = and 67108863:i32, %1
%14:i32 = var
%15:i32 = lshr %10, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %4, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %12, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %11, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %4, %30
%32:i32 = or 0:i32, %31 (hasExternalUses)
%33:i32 = lshr %32, 12:i32
infer %33

; *****
; For LLVM instruction:
;  %79 = shl i32 %70, 14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5
%7:i32 = and 67108863:i32, %6
%8:i32 = var
%9:i32 = lshr %6, 26:i32
%10:i32 = add %8, %9 (hasExternalUses)
%11:i32 = or 4227858432:i32, %10
%12:i32 = and 67108863:i32, %4 (hasExternalUses)
%13:i32 = and 67108863:i32, %2
%14:i32 = var
%15:i32 = lshr %10, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %7, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %11, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %7, %30
%32:i32 = or 0:i32, %31 (hasExternalUses)
%33:i32 = shl %32, 14:i32
infer %33

; *****
; For LLVM instruction:
;  %80 = or i32 %78, %79
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5
%7:i32 = and 67108863:i32, %6
%8:i32 = var
%9:i32 = lshr %6, 26:i32
%10:i32 = add %8, %9 (hasExternalUses)
%11:i32 = or 4227858432:i32, %10
%12:i32 = and 67108863:i32, %4
%13:i32 = and 67108863:i32, %2
%14:i32 = var
%15:i32 = lshr %10, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %7, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %11, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %7, %30
%32:i32 = or 0:i32, %31 (hasExternalUses)
%33:i32 = shl %32, 14:i32
%34:i32 = and %12, %30
%35:i32 = or 0:i32, %34 (hasExternalUses)
%36:i32 = lshr %35, 12:i32
%37:i32 = or %33, %36
infer %37

; *****
; For LLVM instruction:
;  %81 = lshr i32 %70, 18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5
%7:i32 = and 67108863:i32, %6
%8:i32 = var
%9:i32 = lshr %6, 26:i32
%10:i32 = add %8, %9 (hasExternalUses)
%11:i32 = or 4227858432:i32, %10
%12:i32 = and 67108863:i32, %4 (hasExternalUses)
%13:i32 = and 67108863:i32, %2
%14:i32 = var
%15:i32 = lshr %10, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %7, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %11, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %7, %30
%32:i32 = or 0:i32, %31 (hasExternalUses)
%33:i32 = lshr %32, 18:i32
infer %33

; *****
; For LLVM instruction:
;  %82 = shl i32 %72, 8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %9, %30
%32:i32 = lshr %29, 31:i32
%33:i32 = addnsw 4294967295:i32, %32 (hasExternalUses)
%34:i32 = and %33, %29
%35:i32 = or %31, %34
%36:i32 = shl %35, 8:i32
infer %36

; *****
; For LLVM instruction:
;  %83 = or i32 %82, %81
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %9, %30
%32:i32 = lshr %29, 31:i32
%33:i32 = addnsw 4294967295:i32, %32 (hasExternalUses)
%34:i32 = and %33, %29
%35:i32 = or %31, %34
%36:i32 = shl %35, 8:i32
%37:i32 = and %11, %30
%38:i32 = or 0:i32, %37 (hasExternalUses)
%39:i32 = lshr %38, 18:i32
%40:i32 = or %36, %39
infer %40

; *****
; For LLVM instruction:
;  %84 = zext i32 %74 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %1, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = mulnw 5:i32, %11
%13:i32 = add %0, %12
%14:i32 = and 67108863:i32, %13
%15:i32 = addnw 5:i32, %14
%16:i32 = or 4227858432:i32, %10
%17:i32 = and 67108863:i32, %8 (hasExternalUses)
%18:i32 = and 67108863:i32, %6 (hasExternalUses)
%19:i32 = and 67108863:i32, %4
%20:i32 = lshr %13, 26:i32
%21:i32 = addnw %19, %20
%22:i32 = lshr %15, 26:i32
%23:i32 = addnw %21, %22
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %18, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %17, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %16, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31
%33:i32 = and %15, %32
%34:i32 = ashr %29, 31:i32 (hasExternalUses)
%35:i32 = and %14, %34
%36:i32 = or %33, %35
%37:i32 = and %23, %32
%38:i32 = and %21, %34
%39:i32 = or %37, %38 (hasExternalUses)
%40:i32 = shl %39, 26:i32
%41:i32 = or %36, %40
%42:i64 = zext %41
infer %42

; *****
; For LLVM instruction:
;  %86 = load i32, i32* %85, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %87 = zext i32 %86 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %88 = add nuw nsw i64 %84, %87
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = var
%7:i32 = lshr %6, 26:i32
%8:i32 = add %5, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %4, %9
%11:i32 = lshr %10, 26:i32
%12:i32 = add %3, %11 (hasExternalUses)
%13:i32 = lshr %12, 26:i32
%14:i32 = mulnw 5:i32, %13
%15:i32 = add %2, %14
%16:i32 = and 67108863:i32, %15
%17:i32 = addnw 5:i32, %16
%18:i32 = or 4227858432:i32, %12
%19:i32 = and 67108863:i32, %10 (hasExternalUses)
%20:i32 = and 67108863:i32, %8 (hasExternalUses)
%21:i32 = and 67108863:i32, %6
%22:i32 = lshr %15, 26:i32
%23:i32 = addnw %21, %22
%24:i32 = lshr %17, 26:i32
%25:i32 = addnw %23, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %20, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %19, %28
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %18, %30 (hasExternalUses)
%32:i32 = lshr %31, 31:i32
%33:i32 = addnsw 4294967295:i32, %32 (hasExternalUses)
%34:i32 = and 67108863:i32, %33
%35:i32 = and %17, %34
%36:i32 = ashr %31, 31:i32 (hasExternalUses)
%37:i32 = and %16, %36
%38:i32 = or %35, %37
%39:i32 = and %25, %34
%40:i32 = and %23, %36
%41:i32 = or %39, %40 (hasExternalUses)
%42:i32 = shl %41, 26:i32
%43:i32 = or %38, %42
%44:i64 = zext %43
%45:i64 = addnw %1, %44
infer %45

; *****
; For LLVM instruction:
;  %89 = trunc i64 %88 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = var
%7:i32 = lshr %6, 26:i32
%8:i32 = add %5, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %4, %9
%11:i32 = lshr %10, 26:i32
%12:i32 = add %3, %11 (hasExternalUses)
%13:i32 = lshr %12, 26:i32
%14:i32 = mulnw 5:i32, %13
%15:i32 = add %2, %14
%16:i32 = and 67108863:i32, %15
%17:i32 = addnw 5:i32, %16
%18:i32 = or 4227858432:i32, %12
%19:i32 = and 67108863:i32, %10 (hasExternalUses)
%20:i32 = and 67108863:i32, %8 (hasExternalUses)
%21:i32 = and 67108863:i32, %6
%22:i32 = lshr %15, 26:i32
%23:i32 = addnw %21, %22
%24:i32 = lshr %17, 26:i32
%25:i32 = addnw %23, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %20, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %19, %28
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %18, %30 (hasExternalUses)
%32:i32 = lshr %31, 31:i32
%33:i32 = addnsw 4294967295:i32, %32 (hasExternalUses)
%34:i32 = and 67108863:i32, %33
%35:i32 = and %17, %34
%36:i32 = ashr %31, 31:i32 (hasExternalUses)
%37:i32 = and %16, %36
%38:i32 = or %35, %37
%39:i32 = and %25, %34
%40:i32 = and %23, %36
%41:i32 = or %39, %40 (hasExternalUses)
%42:i32 = shl %41, 26:i32
%43:i32 = or %38, %42
%44:i64 = zext %43
%45:i64 = addnw %1, %44 (hasExternalUses)
%46:i32 = trunc %45
infer %46

; *****
; For LLVM instruction:
;  %90 = zext i32 %77 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2
%4:i32 = and 67108863:i32, %3
%5:i32 = var
%6:i32 = var
%7:i32 = lshr %3, 26:i32
%8:i32 = add %6, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %5, %9 (hasExternalUses)
%11:i32 = or 4227858432:i32, %10
%12:i32 = and 67108863:i32, %8 (hasExternalUses)
%13:i32 = and 67108863:i32, %1
%14:i32 = var
%15:i32 = lshr %10, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %4, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %12, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %11, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %4, %30
%32:i32 = or 0:i32, %31 (hasExternalUses)
%33:i32 = shl %32, 20:i32
%34:i32 = lshr %29, 31:i32
%35:i32 = addnsw 4294967295:i32, %34 (hasExternalUses)
%36:i32 = and 67108863:i32, %35 (hasExternalUses)
%37:i32 = and %23, %36
%38:i32 = and %19, %30
%39:i32 = or %37, %38 (hasExternalUses)
%40:i32 = lshr %39, 6:i32
%41:i32 = or %33, %40
%42:i64 = zext %41
infer %42

; *****
; For LLVM instruction:
;  %92 = load i32, i32* %91, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %93 = zext i32 %92 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %94 = add nuw nsw i64 %90, %93
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = and 67108863:i32, %5
%7:i32 = var
%8:i32 = var
%9:i32 = lshr %5, 26:i32
%10:i32 = add %8, %9
%11:i32 = lshr %10, 26:i32
%12:i32 = add %7, %11 (hasExternalUses)
%13:i32 = or 4227858432:i32, %12
%14:i32 = and 67108863:i32, %10 (hasExternalUses)
%15:i32 = and 67108863:i32, %3
%16:i32 = var
%17:i32 = lshr %12, 26:i32
%18:i32 = mulnw 5:i32, %17
%19:i32 = add %16, %18
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %15, %20
%22:i32 = and 67108863:i32, %19 (hasExternalUses)
%23:i32 = addnw 5:i32, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %21, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %6, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %14, %28
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %13, %30 (hasExternalUses)
%32:i32 = ashr %31, 31:i32 (hasExternalUses)
%33:i32 = and %6, %32
%34:i32 = or 0:i32, %33 (hasExternalUses)
%35:i32 = shl %34, 20:i32
%36:i32 = lshr %31, 31:i32
%37:i32 = addnsw 4294967295:i32, %36 (hasExternalUses)
%38:i32 = and 67108863:i32, %37 (hasExternalUses)
%39:i32 = and %25, %38
%40:i32 = and %21, %32
%41:i32 = or %39, %40 (hasExternalUses)
%42:i32 = lshr %41, 6:i32
%43:i32 = or %35, %42
%44:i64 = zext %43
%45:i64 = addnw %1, %44
infer %45

; *****
; For LLVM instruction:
;  %95 = lshr i64 %88, 32
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = var
%7:i32 = lshr %6, 26:i32
%8:i32 = add %5, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %4, %9
%11:i32 = lshr %10, 26:i32
%12:i32 = add %3, %11 (hasExternalUses)
%13:i32 = lshr %12, 26:i32
%14:i32 = mulnw 5:i32, %13
%15:i32 = add %2, %14
%16:i32 = and 67108863:i32, %15
%17:i32 = addnw 5:i32, %16
%18:i32 = or 4227858432:i32, %12
%19:i32 = and 67108863:i32, %10 (hasExternalUses)
%20:i32 = and 67108863:i32, %8 (hasExternalUses)
%21:i32 = and 67108863:i32, %6
%22:i32 = lshr %15, 26:i32
%23:i32 = addnw %21, %22
%24:i32 = lshr %17, 26:i32
%25:i32 = addnw %23, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %20, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %19, %28
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %18, %30 (hasExternalUses)
%32:i32 = lshr %31, 31:i32
%33:i32 = addnsw 4294967295:i32, %32 (hasExternalUses)
%34:i32 = and 67108863:i32, %33
%35:i32 = and %17, %34
%36:i32 = ashr %31, 31:i32 (hasExternalUses)
%37:i32 = and %16, %36
%38:i32 = or %35, %37
%39:i32 = and %25, %34
%40:i32 = and %23, %36
%41:i32 = or %39, %40 (hasExternalUses)
%42:i32 = shl %41, 26:i32
%43:i32 = or %38, %42
%44:i64 = zext %43
%45:i64 = addnw %1, %44 (hasExternalUses)
%46:i64 = lshr %45, 32:i64
infer %46

; *****
; For LLVM instruction:
;  %96 = add nuw nsw i64 %94, %95
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = and 67108863:i32, %5
%7:i32 = var
%8:i32 = var
%9:i32 = lshr %5, 26:i32
%10:i32 = add %8, %9
%11:i32 = lshr %10, 26:i32
%12:i32 = add %7, %11 (hasExternalUses)
%13:i32 = or 4227858432:i32, %12
%14:i32 = and 67108863:i32, %10 (hasExternalUses)
%15:i32 = and 67108863:i32, %3
%16:i32 = var
%17:i32 = lshr %12, 26:i32
%18:i32 = mulnw 5:i32, %17
%19:i32 = add %16, %18
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %15, %20
%22:i32 = and 67108863:i32, %19
%23:i32 = addnw 5:i32, %22
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %21, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %6, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %14, %28
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %13, %30 (hasExternalUses)
%32:i32 = ashr %31, 31:i32 (hasExternalUses)
%33:i32 = and %6, %32
%34:i32 = or 0:i32, %33 (hasExternalUses)
%35:i32 = shl %34, 20:i32
%36:i32 = lshr %31, 31:i32
%37:i32 = addnsw 4294967295:i32, %36 (hasExternalUses)
%38:i32 = and 67108863:i32, %37
%39:i32 = and %25, %38
%40:i32 = and %21, %32
%41:i32 = or %39, %40
%42:i32 = lshr %41, 6:i32
%43:i32 = or %35, %42
%44:i64 = zext %43
%45:i64 = addnw %1, %44
%46:i32 = var
%47:i64 = zext %46
%48:i32 = and %23, %38
%49:i32 = and %22, %32
%50:i32 = or %48, %49
%51:i32 = shl %41, 26:i32
%52:i32 = or %50, %51
%53:i64 = zext %52
%54:i64 = addnw %47, %53 (hasExternalUses)
%55:i64 = lshr %54, 32:i64
%56:i64 = addnw %45, %55
infer %56

; *****
; For LLVM instruction:
;  %97 = trunc i64 %96 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = and 67108863:i32, %5
%7:i32 = var
%8:i32 = var
%9:i32 = lshr %5, 26:i32
%10:i32 = add %8, %9
%11:i32 = lshr %10, 26:i32
%12:i32 = add %7, %11 (hasExternalUses)
%13:i32 = or 4227858432:i32, %12
%14:i32 = and 67108863:i32, %10 (hasExternalUses)
%15:i32 = and 67108863:i32, %3
%16:i32 = var
%17:i32 = lshr %12, 26:i32
%18:i32 = mulnw 5:i32, %17
%19:i32 = add %16, %18
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %15, %20
%22:i32 = and 67108863:i32, %19
%23:i32 = addnw 5:i32, %22
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %21, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %6, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %14, %28
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %13, %30 (hasExternalUses)
%32:i32 = ashr %31, 31:i32 (hasExternalUses)
%33:i32 = and %6, %32
%34:i32 = or 0:i32, %33 (hasExternalUses)
%35:i32 = shl %34, 20:i32
%36:i32 = lshr %31, 31:i32
%37:i32 = addnsw 4294967295:i32, %36 (hasExternalUses)
%38:i32 = and 67108863:i32, %37
%39:i32 = and %25, %38
%40:i32 = and %21, %32
%41:i32 = or %39, %40
%42:i32 = lshr %41, 6:i32
%43:i32 = or %35, %42
%44:i64 = zext %43
%45:i64 = addnw %1, %44
%46:i32 = var
%47:i64 = zext %46
%48:i32 = and %23, %38
%49:i32 = and %22, %32
%50:i32 = or %48, %49
%51:i32 = shl %41, 26:i32
%52:i32 = or %50, %51
%53:i64 = zext %52
%54:i64 = addnw %47, %53 (hasExternalUses)
%55:i64 = lshr %54, 32:i64
%56:i64 = addnw %45, %55 (hasExternalUses)
%57:i32 = trunc %56
infer %57

; *****
; For LLVM instruction:
;  %98 = zext i32 %80 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5
%7:i32 = and 67108863:i32, %6
%8:i32 = var
%9:i32 = lshr %6, 26:i32
%10:i32 = add %8, %9 (hasExternalUses)
%11:i32 = or 4227858432:i32, %10
%12:i32 = and 67108863:i32, %4
%13:i32 = and 67108863:i32, %2
%14:i32 = var
%15:i32 = lshr %10, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %7, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %11, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %7, %30
%32:i32 = or 0:i32, %31 (hasExternalUses)
%33:i32 = shl %32, 14:i32
%34:i32 = and %12, %30
%35:i32 = or 0:i32, %34 (hasExternalUses)
%36:i32 = lshr %35, 12:i32
%37:i32 = or %33, %36
%38:i64 = zext %37
infer %38

; *****
; For LLVM instruction:
;  %100 = load i32, i32* %99, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %101 = zext i32 %100 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %102 = add nuw nsw i64 %98, %101
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7
%9:i32 = and 67108863:i32, %8
%10:i32 = var
%11:i32 = lshr %8, 26:i32
%12:i32 = add %10, %11 (hasExternalUses)
%13:i32 = or 4227858432:i32, %12
%14:i32 = and 67108863:i32, %6
%15:i32 = and 67108863:i32, %4
%16:i32 = var
%17:i32 = lshr %12, 26:i32
%18:i32 = mulnw 5:i32, %17
%19:i32 = add %16, %18
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %15, %20 (hasExternalUses)
%22:i32 = and 67108863:i32, %19 (hasExternalUses)
%23:i32 = addnw 5:i32, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %21, %24 (hasExternalUses)
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %14, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %9, %28
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %13, %30 (hasExternalUses)
%32:i32 = ashr %31, 31:i32 (hasExternalUses)
%33:i32 = and %9, %32
%34:i32 = or 0:i32, %33 (hasExternalUses)
%35:i32 = shl %34, 14:i32
%36:i32 = and %14, %32
%37:i32 = or 0:i32, %36 (hasExternalUses)
%38:i32 = lshr %37, 12:i32
%39:i32 = or %35, %38
%40:i64 = zext %39
%41:i64 = addnw %1, %40
infer %41

; *****
; For LLVM instruction:
;  %103 = lshr i64 %96, 32
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = and 67108863:i32, %5
%7:i32 = var
%8:i32 = var
%9:i32 = lshr %5, 26:i32
%10:i32 = add %8, %9
%11:i32 = lshr %10, 26:i32
%12:i32 = add %7, %11 (hasExternalUses)
%13:i32 = or 4227858432:i32, %12
%14:i32 = and 67108863:i32, %10 (hasExternalUses)
%15:i32 = and 67108863:i32, %3
%16:i32 = var
%17:i32 = lshr %12, 26:i32
%18:i32 = mulnw 5:i32, %17
%19:i32 = add %16, %18
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %15, %20
%22:i32 = and 67108863:i32, %19
%23:i32 = addnw 5:i32, %22
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %21, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %6, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %14, %28
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %13, %30 (hasExternalUses)
%32:i32 = ashr %31, 31:i32 (hasExternalUses)
%33:i32 = and %6, %32
%34:i32 = or 0:i32, %33 (hasExternalUses)
%35:i32 = shl %34, 20:i32
%36:i32 = lshr %31, 31:i32
%37:i32 = addnsw 4294967295:i32, %36 (hasExternalUses)
%38:i32 = and 67108863:i32, %37
%39:i32 = and %25, %38
%40:i32 = and %21, %32
%41:i32 = or %39, %40
%42:i32 = lshr %41, 6:i32
%43:i32 = or %35, %42
%44:i64 = zext %43
%45:i64 = addnw %1, %44
%46:i32 = var
%47:i64 = zext %46
%48:i32 = and %23, %38
%49:i32 = and %22, %32
%50:i32 = or %48, %49
%51:i32 = shl %41, 26:i32
%52:i32 = or %50, %51
%53:i64 = zext %52
%54:i64 = addnw %47, %53 (hasExternalUses)
%55:i64 = lshr %54, 32:i64
%56:i64 = addnw %45, %55 (hasExternalUses)
%57:i64 = lshr %56, 32:i64
infer %57

; *****
; For LLVM instruction:
;  %104 = add nuw nsw i64 %102, %103
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7
%9:i32 = and 67108863:i32, %8
%10:i32 = var
%11:i32 = lshr %8, 26:i32
%12:i32 = add %10, %11 (hasExternalUses)
%13:i32 = or 4227858432:i32, %12
%14:i32 = and 67108863:i32, %6
%15:i32 = and 67108863:i32, %4
%16:i32 = var
%17:i32 = lshr %12, 26:i32
%18:i32 = mulnw 5:i32, %17
%19:i32 = add %16, %18
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %15, %20
%22:i32 = and 67108863:i32, %19
%23:i32 = addnw 5:i32, %22
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %21, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %14, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %9, %28
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %13, %30 (hasExternalUses)
%32:i32 = ashr %31, 31:i32 (hasExternalUses)
%33:i32 = and %9, %32
%34:i32 = or 0:i32, %33 (hasExternalUses)
%35:i32 = shl %34, 14:i32
%36:i32 = and %14, %32
%37:i32 = or 0:i32, %36
%38:i32 = lshr %37, 12:i32
%39:i32 = or %35, %38
%40:i64 = zext %39
%41:i64 = addnw %1, %40
%42:i32 = var
%43:i64 = zext %42
%44:i32 = shl %37, 20:i32
%45:i32 = lshr %31, 31:i32
%46:i32 = addnsw 4294967295:i32, %45 (hasExternalUses)
%47:i32 = and 67108863:i32, %46
%48:i32 = and %25, %47
%49:i32 = and %21, %32
%50:i32 = or %48, %49
%51:i32 = lshr %50, 6:i32
%52:i32 = or %44, %51
%53:i64 = zext %52
%54:i64 = addnw %43, %53
%55:i32 = var
%56:i64 = zext %55
%57:i32 = and %23, %47
%58:i32 = and %22, %32
%59:i32 = or %57, %58
%60:i32 = shl %50, 26:i32
%61:i32 = or %59, %60
%62:i64 = zext %61
%63:i64 = addnw %56, %62 (hasExternalUses)
%64:i64 = lshr %63, 32:i64
%65:i64 = addnw %54, %64 (hasExternalUses)
%66:i64 = lshr %65, 32:i64
%67:i64 = addnw %41, %66
infer %67

; *****
; For LLVM instruction:
;  %105 = trunc i64 %104 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7
%9:i32 = and 67108863:i32, %8
%10:i32 = var
%11:i32 = lshr %8, 26:i32
%12:i32 = add %10, %11 (hasExternalUses)
%13:i32 = or 4227858432:i32, %12
%14:i32 = and 67108863:i32, %6
%15:i32 = and 67108863:i32, %4
%16:i32 = var
%17:i32 = lshr %12, 26:i32
%18:i32 = mulnw 5:i32, %17
%19:i32 = add %16, %18
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %15, %20
%22:i32 = and 67108863:i32, %19
%23:i32 = addnw 5:i32, %22
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %21, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %14, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %9, %28
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %13, %30 (hasExternalUses)
%32:i32 = ashr %31, 31:i32 (hasExternalUses)
%33:i32 = and %9, %32
%34:i32 = or 0:i32, %33 (hasExternalUses)
%35:i32 = shl %34, 14:i32
%36:i32 = and %14, %32
%37:i32 = or 0:i32, %36
%38:i32 = lshr %37, 12:i32
%39:i32 = or %35, %38
%40:i64 = zext %39
%41:i64 = addnw %1, %40
%42:i32 = var
%43:i64 = zext %42
%44:i32 = shl %37, 20:i32
%45:i32 = lshr %31, 31:i32
%46:i32 = addnsw 4294967295:i32, %45 (hasExternalUses)
%47:i32 = and 67108863:i32, %46
%48:i32 = and %25, %47
%49:i32 = and %21, %32
%50:i32 = or %48, %49
%51:i32 = lshr %50, 6:i32
%52:i32 = or %44, %51
%53:i64 = zext %52
%54:i64 = addnw %43, %53
%55:i32 = var
%56:i64 = zext %55
%57:i32 = and %23, %47
%58:i32 = and %22, %32
%59:i32 = or %57, %58
%60:i32 = shl %50, 26:i32
%61:i32 = or %59, %60
%62:i64 = zext %61
%63:i64 = addnw %56, %62 (hasExternalUses)
%64:i64 = lshr %63, 32:i64
%65:i64 = addnw %54, %64 (hasExternalUses)
%66:i64 = lshr %65, 32:i64
%67:i64 = addnw %41, %66 (hasExternalUses)
%68:i32 = trunc %67
infer %68

; *****
; For LLVM instruction:
;  %106 = zext i32 %83 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %9, %30
%32:i32 = lshr %29, 31:i32
%33:i32 = addnsw 4294967295:i32, %32 (hasExternalUses)
%34:i32 = and %33, %29
%35:i32 = or %31, %34
%36:i32 = shl %35, 8:i32
%37:i32 = and %11, %30
%38:i32 = or 0:i32, %37 (hasExternalUses)
%39:i32 = lshr %38, 18:i32
%40:i32 = or %36, %39
%41:i64 = zext %40
infer %41 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %108 = load i32, i32* %107, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %109 = zext i32 %108 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
infer %1 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %110 = add nuw nsw i64 %106, %109
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %5, 26:i32
%7:i32 = add %4, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %3, %8
%10:i32 = lshr %9, 26:i32
%11:i32 = add %2, %10
%12:i32 = or 4227858432:i32, %11
%13:i32 = and 67108863:i32, %9
%14:i32 = and 67108863:i32, %7 (hasExternalUses)
%15:i32 = and 67108863:i32, %5
%16:i32 = var
%17:i32 = lshr %11, 26:i32
%18:i32 = mulnw 5:i32, %17
%19:i32 = add %16, %18
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %15, %20 (hasExternalUses)
%22:i32 = and 67108863:i32, %19 (hasExternalUses)
%23:i32 = addnw 5:i32, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %21, %24 (hasExternalUses)
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %14, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %13, %28
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %12, %30
%32:i32 = ashr %31, 31:i32 (hasExternalUses)
%33:i32 = and %11, %32
%34:i32 = lshr %31, 31:i32
%35:i32 = addnsw 4294967295:i32, %34 (hasExternalUses)
%36:i32 = and %35, %31
%37:i32 = or %33, %36
%38:i32 = shl %37, 8:i32
%39:i32 = and %13, %32
%40:i32 = or 0:i32, %39 (hasExternalUses)
%41:i32 = lshr %40, 18:i32
%42:i32 = or %38, %41
%43:i64 = zext %42
%44:i64 = addnw %1, %43
infer %44 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %111 = lshr i64 %104, 32
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7
%9:i32 = and 67108863:i32, %8
%10:i32 = var
%11:i32 = lshr %8, 26:i32
%12:i32 = add %10, %11 (hasExternalUses)
%13:i32 = or 4227858432:i32, %12
%14:i32 = and 67108863:i32, %6
%15:i32 = and 67108863:i32, %4
%16:i32 = var
%17:i32 = lshr %12, 26:i32
%18:i32 = mulnw 5:i32, %17
%19:i32 = add %16, %18
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %15, %20
%22:i32 = and 67108863:i32, %19
%23:i32 = addnw 5:i32, %22
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %21, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %14, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %9, %28
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %13, %30 (hasExternalUses)
%32:i32 = ashr %31, 31:i32 (hasExternalUses)
%33:i32 = and %9, %32
%34:i32 = or 0:i32, %33 (hasExternalUses)
%35:i32 = shl %34, 14:i32
%36:i32 = and %14, %32
%37:i32 = or 0:i32, %36
%38:i32 = lshr %37, 12:i32
%39:i32 = or %35, %38
%40:i64 = zext %39
%41:i64 = addnw %1, %40
%42:i32 = var
%43:i64 = zext %42
%44:i32 = shl %37, 20:i32
%45:i32 = lshr %31, 31:i32
%46:i32 = addnsw 4294967295:i32, %45 (hasExternalUses)
%47:i32 = and 67108863:i32, %46
%48:i32 = and %25, %47
%49:i32 = and %21, %32
%50:i32 = or %48, %49
%51:i32 = lshr %50, 6:i32
%52:i32 = or %44, %51
%53:i64 = zext %52
%54:i64 = addnw %43, %53
%55:i32 = var
%56:i64 = zext %55
%57:i32 = and %23, %47
%58:i32 = and %22, %32
%59:i32 = or %57, %58
%60:i32 = shl %50, 26:i32
%61:i32 = or %59, %60
%62:i64 = zext %61
%63:i64 = addnw %56, %62 (hasExternalUses)
%64:i64 = lshr %63, 32:i64
%65:i64 = addnw %54, %64 (hasExternalUses)
%66:i64 = lshr %65, 32:i64
%67:i64 = addnw %41, %66 (hasExternalUses)
%68:i64 = lshr %67, 32:i64
infer %68 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %112 = add nuw nsw i64 %110, %111
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %5, 26:i32
%7:i32 = add %4, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %3, %8
%10:i32 = lshr %9, 26:i32
%11:i32 = add %2, %10
%12:i32 = or 4227858432:i32, %11
%13:i32 = and 67108863:i32, %9
%14:i32 = and 67108863:i32, %7
%15:i32 = and 67108863:i32, %5
%16:i32 = var
%17:i32 = lshr %11, 26:i32
%18:i32 = mulnw 5:i32, %17
%19:i32 = add %16, %18
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %15, %20
%22:i32 = and 67108863:i32, %19
%23:i32 = addnw 5:i32, %22
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %21, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %14, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %13, %28
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %12, %30
%32:i32 = ashr %31, 31:i32
%33:i32 = and %11, %32
%34:i32 = lshr %31, 31:i32
%35:i32 = addnsw 4294967295:i32, %34
%36:i32 = and %35, %31
%37:i32 = or %33, %36
%38:i32 = shl %37, 8:i32
%39:i32 = and %13, %32
%40:i32 = or 0:i32, %39
%41:i32 = lshr %40, 18:i32
%42:i32 = or %38, %41
%43:i64 = zext %42
%44:i64 = addnw %1, %43
%45:i32 = var
%46:i64 = zext %45
%47:i32 = shl %40, 14:i32
%48:i32 = and %14, %32
%49:i32 = or 0:i32, %48
%50:i32 = lshr %49, 12:i32
%51:i32 = or %47, %50
%52:i64 = zext %51
%53:i64 = addnw %46, %52
%54:i32 = var
%55:i64 = zext %54
%56:i32 = shl %49, 20:i32
%57:i32 = and 67108863:i32, %35
%58:i32 = and %25, %57
%59:i32 = and %21, %32
%60:i32 = or %58, %59
%61:i32 = lshr %60, 6:i32
%62:i32 = or %56, %61
%63:i64 = zext %62
%64:i64 = addnw %55, %63
%65:i32 = var
%66:i64 = zext %65
%67:i32 = and %23, %57
%68:i32 = and %22, %32
%69:i32 = or %67, %68
%70:i32 = shl %60, 26:i32
%71:i32 = or %69, %70
%72:i64 = zext %71
%73:i64 = addnw %66, %72 (hasExternalUses)
%74:i64 = lshr %73, 32:i64
%75:i64 = addnw %64, %74 (hasExternalUses)
%76:i64 = lshr %75, 32:i64
%77:i64 = addnw %53, %76 (hasExternalUses)
%78:i64 = lshr %77, 32:i64
%79:i64 = addnw %44, %78
infer %79 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %113 = trunc i64 %112 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %5, 26:i32
%7:i32 = add %4, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %3, %8
%10:i32 = lshr %9, 26:i32
%11:i32 = add %2, %10
%12:i32 = or 4227858432:i32, %11
%13:i32 = and 67108863:i32, %9
%14:i32 = and 67108863:i32, %7
%15:i32 = and 67108863:i32, %5
%16:i32 = var
%17:i32 = lshr %11, 26:i32
%18:i32 = mulnw 5:i32, %17
%19:i32 = add %16, %18
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %15, %20
%22:i32 = and 67108863:i32, %19
%23:i32 = addnw 5:i32, %22
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %21, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %14, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %13, %28
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %12, %30
%32:i32 = ashr %31, 31:i32
%33:i32 = and %11, %32
%34:i32 = lshr %31, 31:i32
%35:i32 = addnsw 4294967295:i32, %34
%36:i32 = and %35, %31
%37:i32 = or %33, %36
%38:i32 = shl %37, 8:i32
%39:i32 = and %13, %32
%40:i32 = or 0:i32, %39
%41:i32 = lshr %40, 18:i32
%42:i32 = or %38, %41
%43:i64 = zext %42
%44:i64 = addnw %1, %43
%45:i32 = var
%46:i64 = zext %45
%47:i32 = shl %40, 14:i32
%48:i32 = and %14, %32
%49:i32 = or 0:i32, %48
%50:i32 = lshr %49, 12:i32
%51:i32 = or %47, %50
%52:i64 = zext %51
%53:i64 = addnw %46, %52
%54:i32 = var
%55:i64 = zext %54
%56:i32 = shl %49, 20:i32
%57:i32 = and 67108863:i32, %35
%58:i32 = and %25, %57
%59:i32 = and %21, %32
%60:i32 = or %58, %59
%61:i32 = lshr %60, 6:i32
%62:i32 = or %56, %61
%63:i64 = zext %62
%64:i64 = addnw %55, %63
%65:i32 = var
%66:i64 = zext %65
%67:i32 = and %23, %57
%68:i32 = and %22, %32
%69:i32 = or %67, %68
%70:i32 = shl %60, 26:i32
%71:i32 = or %69, %70
%72:i64 = zext %71
%73:i64 = addnw %66, %72 (hasExternalUses)
%74:i64 = lshr %73, 32:i64
%75:i64 = addnw %64, %74 (hasExternalUses)
%76:i64 = lshr %75, 32:i64
%77:i64 = addnw %53, %76 (hasExternalUses)
%78:i64 = lshr %77, 32:i64
%79:i64 = addnw %44, %78
%80:i32 = trunc %79
infer %80
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5
%7:i32 = and 67108863:i32, %6 (hasExternalUses)
%8:i32 = and 67108863:i32, %4 (hasExternalUses)
%9:i32 = and 67108863:i32, %2
%10:i32 = var
%11:i32 = var
%12:i32 = lshr %6, 26:i32
%13:i32 = add %11, %12 (hasExternalUses)
%14:i32 = lshr %13, 26:i32
%15:i32 = mulnw 5:i32, %14
%16:i32 = add %10, %15
%17:i32 = lshr %16, 26:i32
%18:i32 = addnw %9, %17 (hasExternalUses)
%19:i32 = and 67108863:i32, %16 (hasExternalUses)
%20:i32 = addnw 5:i32, %19 (hasExternalUses)
%21:i32 = lshr %20, 26:i32
%22:i32 = addnw %18, %21 (hasExternalUses)
%23:i32 = lshr %22, 26:i32
%24:i32 = addnw %8, %23
%25:i32 = lshr %24, 26:i32
%26:i32 = addnw %7, %25
infer %26 (demandedBits=11111100000000000000000000000000)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 67108864
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2 (hasExternalUses)
%4:i32 = and 67108863:i32, %3

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2 (hasExternalUses)
%4:i32 = lshr %3, 26:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5
%7:i32 = and 67108863:i32, %6 (hasExternalUses)
%8:i32 = and 67108863:i32, %4 (hasExternalUses)
%9:i32 = and 67108863:i32, %2
%10:i32 = var
%11:i32 = var
%12:i32 = lshr %6, 26:i32
%13:i32 = add %11, %12 (hasExternalUses)
%14:i32 = lshr %13, 26:i32
%15:i32 = mulnw 5:i32, %14
%16:i32 = add %10, %15
%17:i32 = lshr %16, 26:i32
%18:i32 = addnw %9, %17 (hasExternalUses)
%19:i32 = and 67108863:i32, %16 (hasExternalUses)
%20:i32 = addnw 5:i32, %19 (hasExternalUses)
%21:i32 = lshr %20, 26:i32
%22:i32 = addnw %18, %21 (hasExternalUses)
%23:i32 = lshr %22, 26:i32
%24:i32 = addnw %8, %23
%25:i32 = lshr %24, 26:i32
%26:i32 = addnw %7, %25
%27:i32 = lshr %26, 26:i32
infer %27


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2 (hasExternalUses)
%4:i32 = and 67108863:i32, %3

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3 (hasExternalUses)
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28
infer %29 (demandedBits=10000000111111111111111111111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -2147483648
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1584
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3 (hasExternalUses)
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5 (hasExternalUses)
%7:i32 = and 67108863:i32, %6

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3 (hasExternalUses)
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5 (hasExternalUses)
%7:i32 = lshr %6, 26:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4 (hasExternalUses)
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6 (hasExternalUses)
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
infer %30 (demandedBits=00000011111111111111111111111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30
infer %31 (demandedBits=00000011111111111111111111111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31
infer %32 (demandedBits=00001111111111111111111111111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 67108863
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %1, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = mulnw 5:i32, %11
%13:i32 = add %0, %12
%14:i32 = and 67108863:i32, %13 (hasExternalUses)
%15:i32 = addnw 5:i32, %14
%16:i32 = or 4227858432:i32, %10
%17:i32 = and 67108863:i32, %8 (hasExternalUses)
%18:i32 = and 67108863:i32, %6 (hasExternalUses)
%19:i32 = and 67108863:i32, %4
%20:i32 = lshr %13, 26:i32
%21:i32 = addnw %19, %20 (hasExternalUses)
%22:i32 = lshr %15, 26:i32
%23:i32 = addnw %21, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %18, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %17, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %16, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %15, %32
infer %33


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = and 67108863:i32, %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %0, 26:i32
%7:i32 = add %5, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %4, %8
%10:i32 = lshr %9, 26:i32
%11:i32 = add %3, %10 (hasExternalUses)
%12:i32 = lshr %11, 26:i32
%13:i32 = mulnw 5:i32, %12
%14:i32 = add %2, %13
%15:i32 = lshr %14, 26:i32
%16:i32 = addnw %1, %15 (hasExternalUses)
%17:i32 = and 67108863:i32, %14 (hasExternalUses)
%18:i32 = addnw 5:i32, %17 (hasExternalUses)
%19:i32 = lshr %18, 26:i32
%20:i32 = addnw %16, %19
%21:i32 = or 4227858432:i32, %11
%22:i32 = and 67108863:i32, %9 (hasExternalUses)
%23:i32 = and 67108863:i32, %7 (hasExternalUses)
%24:i32 = lshr %20, 26:i32
%25:i32 = addnw %23, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %22, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %21, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %20, %32
infer %33


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 28
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and %31, %29
infer %32 (demandedBits=00000000111111111111111111111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
second query is UNSAT-- this guess works
Dataflow Pruned 0/0
There are 1 Guesses
There are 1 RHSs before deduplication
There are 1 RHSs after deduplication
"
; No valid RHS in the list
#########################################################

Module before replacement:
; ModuleID = './poly1305_donna.c.bc'
source_filename = "crypto_onetimeauth/poly1305/donna/poly1305_donna.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.crypto_onetimeauth_poly1305_implementation = type { i32 (i8*, i8*, i64, i8*)*, i32 (i8*, i8*, i64, i8*)*, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)*, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*, i64)*, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)* }
%struct.crypto_onetimeauth_poly1305_state = type { [256 x i8] }
%struct.poly1305_state_internal_t = type { [5 x i32], [5 x i32], [4 x i32], i64, [16 x i8], i8 }

@crypto_onetimeauth_poly1305_donna_implementation = hidden local_unnamed_addr global %struct.crypto_onetimeauth_poly1305_implementation { i32 (i8*, i8*, i64, i8*)* @crypto_onetimeauth_poly1305_donna, i32 (i8*, i8*, i64, i8*)* @crypto_onetimeauth_poly1305_donna_verify, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)* @crypto_onetimeauth_poly1305_donna_init, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*, i64)* @crypto_onetimeauth_poly1305_donna_update, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)* @crypto_onetimeauth_poly1305_donna_final }, align 4

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna(i8* nocapture %0, i8* nocapture readonly %1, i64 %2, i8* nocapture readonly %3) #0 {
  %5 = alloca %struct.poly1305_state_internal_t, align 64
  %6 = bitcast %struct.poly1305_state_internal_t* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %6) #6
  %7 = bitcast i8* %3 to i32*
  %8 = load i32, i32* %7, align 1
  %9 = and i32 %8, 67108863
  %10 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 0
  store i32 %9, i32* %10, align 64
  %11 = getelementptr i8, i8* %3, i32 3
  %12 = bitcast i8* %11 to i32*
  %13 = load i32, i32* %12, align 1
  %14 = lshr i32 %13, 2
  %15 = and i32 %14, 67108611
  %16 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 1
  store i32 %15, i32* %16, align 4
  %17 = getelementptr i8, i8* %3, i32 6
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 1
  %20 = lshr i32 %19, 4
  %21 = and i32 %20, 67092735
  %22 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 2
  store i32 %21, i32* %22, align 8
  %23 = getelementptr i8, i8* %3, i32 9
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 1
  %26 = lshr i32 %25, 6
  %27 = and i32 %26, 66076671
  %28 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 3
  store i32 %27, i32* %28, align 4
  %29 = getelementptr i8, i8* %3, i32 12
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 1
  %32 = lshr i32 %31, 8
  %33 = and i32 %32, 1048575
  %34 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 4
  store i32 %33, i32* %34, align 16
  %35 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 1, i32 0
  %36 = getelementptr i8, i8* %3, i32 16
  %37 = bitcast i8* %36 to i32*
  %38 = bitcast i32* %35 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(20) %38, i8 0, i64 20, i1 false) #6
  %39 = load i32, i32* %37, align 1
  %40 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 0
  store i32 %39, i32* %40, align 8
  %41 = getelementptr i8, i8* %3, i32 20
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %42, align 1
  %44 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 1
  store i32 %43, i32* %44, align 4
  %45 = getelementptr i8, i8* %3, i32 24
  %46 = bitcast i8* %45 to i32*
  %47 = load i32, i32* %46, align 1
  %48 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 2
  store i32 %47, i32* %48, align 8
  %49 = getelementptr i8, i8* %3, i32 28
  %50 = bitcast i8* %49 to i32*
  %51 = load i32, i32* %50, align 1
  %52 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 3
  store i32 %51, i32* %52, align 4
  %53 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 3
  store i64 0, i64* %53, align 8
  %54 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 5
  store i8 0, i8* %54, align 16
  call fastcc void @poly1305_update(%struct.poly1305_state_internal_t* nonnull %5, i8* %1, i64 %2)
  call fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* nonnull %5, i8* %0)
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %6) #6
  ret i32 0
}

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_verify(i8* %0, i8* nocapture readonly %1, i64 %2, i8* nocapture readonly %3) #0 {
  %5 = alloca %struct.poly1305_state_internal_t, align 64
  %6 = alloca [16 x i8], align 16
  %7 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #6
  %8 = bitcast %struct.poly1305_state_internal_t* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %8) #6
  %9 = bitcast i8* %3 to i32*
  %10 = load i32, i32* %9, align 1
  %11 = and i32 %10, 67108863
  %12 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 0
  store i32 %11, i32* %12, align 64
  %13 = getelementptr i8, i8* %3, i32 3
  %14 = bitcast i8* %13 to i32*
  %15 = load i32, i32* %14, align 1
  %16 = lshr i32 %15, 2
  %17 = and i32 %16, 67108611
  %18 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 1
  store i32 %17, i32* %18, align 4
  %19 = getelementptr i8, i8* %3, i32 6
  %20 = bitcast i8* %19 to i32*
  %21 = load i32, i32* %20, align 1
  %22 = lshr i32 %21, 4
  %23 = and i32 %22, 67092735
  %24 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 2
  store i32 %23, i32* %24, align 8
  %25 = getelementptr i8, i8* %3, i32 9
  %26 = bitcast i8* %25 to i32*
  %27 = load i32, i32* %26, align 1
  %28 = lshr i32 %27, 6
  %29 = and i32 %28, 66076671
  %30 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 3
  store i32 %29, i32* %30, align 4
  %31 = getelementptr i8, i8* %3, i32 12
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 1
  %34 = lshr i32 %33, 8
  %35 = and i32 %34, 1048575
  %36 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 4
  store i32 %35, i32* %36, align 16
  %37 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 1, i32 0
  %38 = getelementptr i8, i8* %3, i32 16
  %39 = bitcast i8* %38 to i32*
  %40 = bitcast i32* %37 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(20) %40, i8 0, i64 20, i1 false) #6
  %41 = load i32, i32* %39, align 1
  %42 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 0
  store i32 %41, i32* %42, align 8
  %43 = getelementptr i8, i8* %3, i32 20
  %44 = bitcast i8* %43 to i32*
  %45 = load i32, i32* %44, align 1
  %46 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 1
  store i32 %45, i32* %46, align 4
  %47 = getelementptr i8, i8* %3, i32 24
  %48 = bitcast i8* %47 to i32*
  %49 = load i32, i32* %48, align 1
  %50 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 2
  store i32 %49, i32* %50, align 8
  %51 = getelementptr i8, i8* %3, i32 28
  %52 = bitcast i8* %51 to i32*
  %53 = load i32, i32* %52, align 1
  %54 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 3
  store i32 %53, i32* %54, align 4
  %55 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 3
  store i64 0, i64* %55, align 8
  %56 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 5
  store i8 0, i8* %56, align 16
  call fastcc void @poly1305_update(%struct.poly1305_state_internal_t* nonnull %5, i8* %1, i64 %2) #6
  call fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* nonnull %5, i8* nonnull %7) #6
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %8) #6
  %57 = call i32 @crypto_verify_16(i8* %0, i8* nonnull %7) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #6
  ret i32 %57
}

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_init(%struct.crypto_onetimeauth_poly1305_state* nocapture %0, i8* nocapture readonly %1) #0 {
  %3 = bitcast i8* %1 to i32*
  %4 = load i32, i32* %3, align 1
  %5 = and i32 %4, 67108863
  %6 = bitcast %struct.crypto_onetimeauth_poly1305_state* %0 to i32*
  store i32 %5, i32* %6, align 8
  %7 = getelementptr i8, i8* %1, i32 3
  %8 = bitcast i8* %7 to i32*
  %9 = load i32, i32* %8, align 1
  %10 = lshr i32 %9, 2
  %11 = and i32 %10, 67108611
  %12 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 4
  %13 = bitcast i8* %12 to i32*
  store i32 %11, i32* %13, align 4
  %14 = getelementptr i8, i8* %1, i32 6
  %15 = bitcast i8* %14 to i32*
  %16 = load i32, i32* %15, align 1
  %17 = lshr i32 %16, 4
  %18 = and i32 %17, 67092735
  %19 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 8
  %20 = bitcast i8* %19 to i32*
  store i32 %18, i32* %20, align 8
  %21 = getelementptr i8, i8* %1, i32 9
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 1
  %24 = lshr i32 %23, 6
  %25 = and i32 %24, 66076671
  %26 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 12
  %27 = bitcast i8* %26 to i32*
  store i32 %25, i32* %27, align 4
  %28 = getelementptr i8, i8* %1, i32 12
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 1
  %31 = lshr i32 %30, 8
  %32 = and i32 %31, 1048575
  %33 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 16
  %34 = bitcast i8* %33 to i32*
  store i32 %32, i32* %34, align 8
  %35 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 20
  %36 = getelementptr i8, i8* %1, i32 16
  %37 = bitcast i8* %36 to i32*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(20) %35, i8 0, i64 20, i1 false) #6
  %38 = load i32, i32* %37, align 1
  %39 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 40
  %40 = bitcast i8* %39 to i32*
  store i32 %38, i32* %40, align 8
  %41 = getelementptr i8, i8* %1, i32 20
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %42, align 1
  %44 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 44
  %45 = bitcast i8* %44 to i32*
  store i32 %43, i32* %45, align 4
  %46 = getelementptr i8, i8* %1, i32 24
  %47 = bitcast i8* %46 to i32*
  %48 = load i32, i32* %47, align 1
  %49 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 48
  %50 = bitcast i8* %49 to i32*
  store i32 %48, i32* %50, align 8
  %51 = getelementptr i8, i8* %1, i32 28
  %52 = bitcast i8* %51 to i32*
  %53 = load i32, i32* %52, align 1
  %54 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 52
  %55 = bitcast i8* %54 to i32*
  store i32 %53, i32* %55, align 4
  %56 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 56
  %57 = bitcast i8* %56 to i64*
  store i64 0, i64* %57, align 8
  %58 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 80
  store i8 0, i8* %58, align 8
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_update(%struct.crypto_onetimeauth_poly1305_state* nocapture %0, i8* nocapture readonly %1, i64 %2) #1 {
  %4 = bitcast %struct.crypto_onetimeauth_poly1305_state* %0 to %struct.poly1305_state_internal_t*
  tail call fastcc void @poly1305_update(%struct.poly1305_state_internal_t* %4, i8* %1, i64 %2)
  ret i32 0
}

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_final(%struct.crypto_onetimeauth_poly1305_state* %0, i8* nocapture %1) #0 {
  %3 = bitcast %struct.crypto_onetimeauth_poly1305_state* %0 to %struct.poly1305_state_internal_t*
  tail call fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* %3, i8* %1)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #2

; Function Attrs: nofree norecurse nounwind
define internal fastcc void @poly1305_update(%struct.poly1305_state_internal_t* nocapture %0, i8* nocapture readonly %1, i64 %2) unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 3
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %33, label %7

7:                                                ; preds = %3
  %8 = sub i64 16, %5
  %9 = icmp ugt i64 %8, %2
  %10 = select i1 %9, i64 %2, i64 %8
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %24, label %12

12:                                               ; preds = %7, %12
  %13 = phi i64 [ %23, %12 ], [ %5, %7 ]
  %14 = phi i64 [ %21, %12 ], [ 0, %7 ]
  %15 = trunc i64 %14 to i32
  %16 = getelementptr i8, i8* %1, i32 %15
  %17 = load i8, i8* %16, align 1
  %18 = add i64 %13, %14
  %19 = trunc i64 %18 to i32
  %20 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 %19
  store i8 %17, i8* %20, align 1
  %21 = add nuw i64 %14, 1
  %22 = icmp ult i64 %21, %10
  %23 = load i64, i64* %4, align 8
  br i1 %22, label %12, label %24

24:                                               ; preds = %12, %7
  %25 = phi i64 [ %5, %7 ], [ %23, %12 ]
  %26 = add i64 %25, %10
  store i64 %26, i64* %4, align 8
  %27 = icmp ult i64 %26, 16
  br i1 %27, label %60, label %28

28:                                               ; preds = %24
  %29 = trunc i64 %10 to i32
  %30 = getelementptr i8, i8* %1, i32 %29
  %31 = sub i64 %2, %10
  %32 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 0
  tail call fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nonnull %0, i8* nonnull %32, i64 16)
  store i64 0, i64* %4, align 8
  br label %33

33:                                               ; preds = %28, %3
  %34 = phi i64 [ %2, %3 ], [ %31, %28 ]
  %35 = phi i8* [ %1, %3 ], [ %30, %28 ]
  %36 = icmp ugt i64 %34, 15
  br i1 %36, label %37, label %42

37:                                               ; preds = %33
  %38 = and i64 %34, -16
  tail call fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nonnull %0, i8* %35, i64 %38)
  %39 = trunc i64 %38 to i32
  %40 = getelementptr i8, i8* %35, i32 %39
  %41 = sub i64 %34, %38
  br label %42

42:                                               ; preds = %37, %33
  %43 = phi i64 [ %41, %37 ], [ %34, %33 ]
  %44 = phi i8* [ %40, %37 ], [ %35, %33 ]
  %45 = icmp eq i64 %43, 0
  br i1 %45, label %60, label %46

46:                                               ; preds = %42, %46
  %47 = phi i64 [ %55, %46 ], [ 0, %42 ]
  %48 = trunc i64 %47 to i32
  %49 = getelementptr i8, i8* %44, i32 %48
  %50 = load i8, i8* %49, align 1
  %51 = load i64, i64* %4, align 8
  %52 = add i64 %51, %47
  %53 = trunc i64 %52 to i32
  %54 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 %53
  store i8 %50, i8* %54, align 1
  %55 = add nuw i64 %47, 1
  %56 = icmp eq i64 %55, %43
  br i1 %56, label %57, label %46

57:                                               ; preds = %46
  %58 = load i64, i64* %4, align 8
  %59 = add i64 %58, %43
  store i64 %59, i64* %4, align 8
  br label %60

60:                                               ; preds = %57, %42, %24
  ret void
}

; Function Attrs: noinline nounwind
define internal fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* %0, i8* nocapture %1) unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 3
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %20, label %6

6:                                                ; preds = %2
  %7 = trunc i64 %4 to i32
  %8 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 %7
  store i8 1, i8* %8, align 1
  %9 = add i64 %4, 1
  %10 = icmp ult i64 %9, 16
  br i1 %10, label %11, label %17

11:                                               ; preds = %6
  %12 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 16
  %13 = bitcast i32* %12 to i8*
  %14 = add i32 %7, 1
  %15 = getelementptr i8, i8* %13, i32 %14
  %16 = sub i32 15, %7
  call void @llvm.memset.p0i8.i32(i8* align 1 %15, i8 0, i32 %16, i1 false)
  br label %17

17:                                               ; preds = %11, %6
  %18 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 5
  store i8 1, i8* %18, align 8
  %19 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 0
  tail call fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nonnull %0, i8* nonnull %19, i64 16)
  br label %20

20:                                               ; preds = %2, %17
  %21 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 0
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 2
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 3
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 4
  %30 = load i32, i32* %29, align 4
  %31 = lshr i32 %24, 26
  %32 = and i32 %24, 67108863
  %33 = add i32 %26, %31
  %34 = lshr i32 %33, 26
  %35 = and i32 %33, 67108863
  %36 = add i32 %34, %28
  %37 = lshr i32 %36, 26
  %38 = and i32 %36, 67108863
  %39 = add i32 %37, %30
  %40 = lshr i32 %39, 26
  %41 = mul nuw nsw i32 %40, 5
  %42 = add i32 %41, %22
  %43 = lshr i32 %42, 26
  %44 = and i32 %42, 67108863
  %45 = add nuw nsw i32 %43, %32
  %46 = add nuw nsw i32 %44, 5
  %47 = lshr i32 %46, 26
  %48 = add nuw nsw i32 %47, %45
  %49 = lshr i32 %48, 26
  %50 = add nuw nsw i32 %49, %35
  %51 = lshr i32 %50, 26
  %52 = add nuw nsw i32 %51, %38
  %53 = lshr i32 %52, 26
  %54 = or i32 %39, -67108864
  %55 = add nsw i32 %54, %53
  %56 = lshr i32 %55, 31
  %57 = add nsw i32 %56, -1
  %58 = and i32 %57, 67108863
  %59 = and i32 %58, %46
  %60 = and i32 %58, %48
  %61 = and i32 %57, %55
  %62 = ashr i32 %55, 31
  %63 = and i32 %62, %44
  %64 = or i32 %63, %59
  %65 = and i32 %62, %45
  %66 = or i32 %65, %60
  %67 = and i32 %62, %35
  %68 = or i32 %67, 0
  %69 = and i32 %62, %38
  %70 = or i32 %69, 0
  %71 = and i32 %62, %39
  %72 = or i32 %61, %71
  %73 = shl i32 %66, 26
  %74 = or i32 %64, %73
  %75 = lshr i32 %66, 6
  %76 = shl i32 %68, 20
  %77 = or i32 %75, %76
  %78 = lshr i32 %68, 12
  %79 = shl i32 %70, 14
  %80 = or i32 %78, %79
  %81 = lshr i32 %70, 18
  %82 = shl i32 %72, 8
  %83 = or i32 %82, %81
  %84 = zext i32 %74 to i64
  %85 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 0
  %86 = load i32, i32* %85, align 8
  %87 = zext i32 %86 to i64
  %88 = add nuw nsw i64 %84, %87
  %89 = trunc i64 %88 to i32
  %90 = zext i32 %77 to i64
  %91 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 1
  %92 = load i32, i32* %91, align 4
  %93 = zext i32 %92 to i64
  %94 = add nuw nsw i64 %90, %93
  %95 = lshr i64 %88, 32
  %96 = add nuw nsw i64 %94, %95
  %97 = trunc i64 %96 to i32
  %98 = zext i32 %80 to i64
  %99 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 2
  %100 = load i32, i32* %99, align 8
  %101 = zext i32 %100 to i64
  %102 = add nuw nsw i64 %98, %101
  %103 = lshr i64 %96, 32
  %104 = add nuw nsw i64 %102, %103
  %105 = trunc i64 %104 to i32
  %106 = zext i32 %83 to i64
  %107 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 3
  %108 = load i32, i32* %107, align 4
  %109 = zext i32 %108 to i64
  %110 = add nuw nsw i64 %106, %109
  %111 = lshr i64 %104, 32
  %112 = add nuw nsw i64 %110, %111
  %113 = trunc i64 %112 to i32
  %114 = bitcast i8* %1 to i32*
  store i32 %89, i32* %114, align 1
  %115 = getelementptr i8, i8* %1, i32 4
  %116 = bitcast i8* %115 to i32*
  store i32 %97, i32* %116, align 1
  %117 = getelementptr i8, i8* %1, i32 8
  %118 = bitcast i8* %117 to i32*
  store i32 %105, i32* %118, align 1
  %119 = getelementptr i8, i8* %1, i32 12
  %120 = bitcast i8* %119 to i32*
  store i32 %113, i32* %120, align 1
  %121 = bitcast %struct.poly1305_state_internal_t* %0 to i8*
  tail call void @sodium_memzero(i8* %121, i32 88) #6
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #2

; Function Attrs: nofree norecurse nounwind
define internal fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nocapture %0, i8* nocapture readonly %1, i64 %2) unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 5
  %5 = load i8, i8* %4, align 8
  %6 = icmp eq i8 %5, 0
  %7 = select i1 %6, i32 16777216, i32 0
  %8 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 2
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 4
  %15 = load i32, i32* %14, align 8
  %16 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 2
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 3
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 4
  %25 = load i32, i32* %24, align 4
  %26 = icmp ugt i64 %2, 15
  br i1 %26, label %27, label %160

27:                                               ; preds = %3
  %28 = mul i32 %15, 5
  %29 = mul i32 %13, 5
  %30 = mul i32 %11, 5
  %31 = mul i32 %9, 5
  %32 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 0
  %33 = load i32, i32* %32, align 8
  %34 = zext i32 %33 to i64
  %35 = zext i32 %28 to i64
  %36 = zext i32 %29 to i64
  %37 = zext i32 %30 to i64
  %38 = zext i32 %31 to i64
  %39 = zext i32 %9 to i64
  %40 = zext i32 %11 to i64
  %41 = zext i32 %13 to i64
  %42 = zext i32 %15 to i64
  br label %43

43:                                               ; preds = %27, %43
  %44 = phi i8* [ %1, %27 ], [ %157, %43 ]
  %45 = phi i64 [ %2, %27 ], [ %158, %43 ]
  %46 = phi i32 [ %17, %27 ], [ %155, %43 ]
  %47 = phi i32 [ %19, %27 ], [ %156, %43 ]
  %48 = phi i32 [ %21, %27 ], [ %140, %43 ]
  %49 = phi i32 [ %23, %27 ], [ %145, %43 ]
  %50 = phi i32 [ %25, %27 ], [ %151, %43 ]
  %51 = bitcast i8* %44 to i32*
  %52 = load i32, i32* %51, align 1
  %53 = and i32 %52, 67108863
  %54 = add i32 %53, %46
  %55 = getelementptr i8, i8* %44, i32 3
  %56 = bitcast i8* %55 to i32*
  %57 = load i32, i32* %56, align 1
  %58 = lshr i32 %57, 2
  %59 = and i32 %58, 67108863
  %60 = add i32 %59, %47
  %61 = getelementptr i8, i8* %44, i32 6
  %62 = bitcast i8* %61 to i32*
  %63 = load i32, i32* %62, align 1
  %64 = lshr i32 %63, 4
  %65 = and i32 %64, 67108863
  %66 = add i32 %65, %48
  %67 = getelementptr i8, i8* %44, i32 9
  %68 = bitcast i8* %67 to i32*
  %69 = load i32, i32* %68, align 1
  %70 = lshr i32 %69, 6
  %71 = add i32 %70, %49
  %72 = getelementptr i8, i8* %44, i32 12
  %73 = bitcast i8* %72 to i32*
  %74 = load i32, i32* %73, align 1
  %75 = lshr i32 %74, 8
  %76 = or i32 %75, %7
  %77 = add i32 %76, %50
  %78 = zext i32 %54 to i64
  %79 = mul nuw i64 %78, %34
  %80 = zext i32 %60 to i64
  %81 = mul nuw i64 %80, %35
  %82 = add i64 %81, %79
  %83 = zext i32 %66 to i64
  %84 = mul nuw i64 %83, %36
  %85 = add i64 %82, %84
  %86 = zext i32 %71 to i64
  %87 = mul nuw i64 %86, %37
  %88 = add i64 %85, %87
  %89 = zext i32 %77 to i64
  %90 = mul nuw i64 %89, %38
  %91 = add i64 %88, %90
  %92 = mul nuw i64 %78, %39
  %93 = mul nuw i64 %80, %34
  %94 = add i64 %93, %92
  %95 = mul nuw i64 %83, %35
  %96 = add i64 %94, %95
  %97 = mul nuw i64 %86, %36
  %98 = add i64 %96, %97
  %99 = mul nuw i64 %89, %37
  %100 = add i64 %98, %99
  %101 = mul nuw i64 %78, %40
  %102 = mul nuw i64 %80, %39
  %103 = add i64 %102, %101
  %104 = mul nuw i64 %83, %34
  %105 = add i64 %103, %104
  %106 = mul nuw i64 %86, %35
  %107 = add i64 %105, %106
  %108 = mul nuw i64 %89, %36
  %109 = add i64 %107, %108
  %110 = mul nuw i64 %78, %41
  %111 = mul nuw i64 %80, %40
  %112 = add i64 %111, %110
  %113 = mul nuw i64 %83, %39
  %114 = add i64 %112, %113
  %115 = mul nuw i64 %86, %34
  %116 = add i64 %114, %115
  %117 = mul nuw i64 %89, %35
  %118 = add i64 %116, %117
  %119 = mul nuw i64 %78, %42
  %120 = mul nuw i64 %80, %41
  %121 = add i64 %120, %119
  %122 = mul nuw i64 %83, %40
  %123 = add i64 %121, %122
  %124 = mul nuw i64 %86, %39
  %125 = add i64 %123, %124
  %126 = mul nuw i64 %89, %34
  %127 = add i64 %125, %126
  %128 = lshr i64 %91, 26
  %129 = trunc i64 %91 to i32
  %130 = and i32 %129, 67108863
  %131 = and i64 %128, 4294967295
  %132 = add i64 %100, %131
  %133 = lshr i64 %132, 26
  %134 = trunc i64 %132 to i32
  %135 = and i32 %134, 67108863
  %136 = and i64 %133, 4294967295
  %137 = add i64 %109, %136
  %138 = lshr i64 %137, 26
  %139 = trunc i64 %137 to i32
  %140 = and i32 %139, 67108863
  %141 = and i64 %138, 4294967295
  %142 = add i64 %118, %141
  %143 = lshr i64 %142, 26
  %144 = trunc i64 %142 to i32
  %145 = and i32 %144, 67108863
  %146 = and i64 %143, 4294967295
  %147 = add i64 %127, %146
  %148 = lshr i64 %147, 26
  %149 = trunc i64 %148 to i32
  %150 = trunc i64 %147 to i32
  %151 = and i32 %150, 67108863
  %152 = mul i32 %149, 5
  %153 = add i32 %152, %130
  %154 = lshr i32 %153, 26
  %155 = and i32 %153, 67108863
  %156 = add nuw nsw i32 %154, %135
  %157 = getelementptr i8, i8* %44, i32 16
  %158 = add i64 %45, -16
  %159 = icmp ugt i64 %158, 15
  br i1 %159, label %43, label %160

160:                                              ; preds = %43, %3
  %161 = phi i32 [ %25, %3 ], [ %151, %43 ]
  %162 = phi i32 [ %23, %3 ], [ %145, %43 ]
  %163 = phi i32 [ %21, %3 ], [ %140, %43 ]
  %164 = phi i32 [ %19, %3 ], [ %156, %43 ]
  %165 = phi i32 [ %17, %3 ], [ %155, %43 ]
  store i32 %165, i32* %16, align 4
  store i32 %164, i32* %18, align 4
  store i32 %163, i32* %20, align 4
  store i32 %162, i32* %22, align 4
  store i32 %161, i32* %24, align 4
  ret void
}

declare void @sodium_memzero(i8* %0, i32 %1) local_unnamed_addr #4

declare i32 @crypto_verify_16(i8* %0, i8* %1) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly %0, i8 %1, i64 %2, i1 immarg %3) #5

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #5

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { noinline nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind willreturn writeonly }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; Replacing "  %61 = and i32 %57, %55"
; from ""
; with "i32 0" in:
"%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30 (hasExternalUses)
%32:i32 = and %31, %29
cand %32 0:i32 (demandedBits=00000000111111111111111111111111)
"
; with "i32 0"

Module after replacement:
; ModuleID = './poly1305_donna.c.bc'
source_filename = "crypto_onetimeauth/poly1305/donna/poly1305_donna.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.crypto_onetimeauth_poly1305_implementation = type { i32 (i8*, i8*, i64, i8*)*, i32 (i8*, i8*, i64, i8*)*, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)*, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*, i64)*, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)* }
%struct.crypto_onetimeauth_poly1305_state = type { [256 x i8] }
%struct.poly1305_state_internal_t = type { [5 x i32], [5 x i32], [4 x i32], i64, [16 x i8], i8 }

@crypto_onetimeauth_poly1305_donna_implementation = hidden local_unnamed_addr global %struct.crypto_onetimeauth_poly1305_implementation { i32 (i8*, i8*, i64, i8*)* @crypto_onetimeauth_poly1305_donna, i32 (i8*, i8*, i64, i8*)* @crypto_onetimeauth_poly1305_donna_verify, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)* @crypto_onetimeauth_poly1305_donna_init, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*, i64)* @crypto_onetimeauth_poly1305_donna_update, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)* @crypto_onetimeauth_poly1305_donna_final }, align 4

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna(i8* nocapture %0, i8* nocapture readonly %1, i64 %2, i8* nocapture readonly %3) #0 {
  %5 = alloca %struct.poly1305_state_internal_t, align 64
  %6 = bitcast %struct.poly1305_state_internal_t* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %6) #6
  %7 = bitcast i8* %3 to i32*
  %8 = load i32, i32* %7, align 1
  %9 = and i32 %8, 67108863
  %10 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 0
  store i32 %9, i32* %10, align 64
  %11 = getelementptr i8, i8* %3, i32 3
  %12 = bitcast i8* %11 to i32*
  %13 = load i32, i32* %12, align 1
  %14 = lshr i32 %13, 2
  %15 = and i32 %14, 67108611
  %16 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 1
  store i32 %15, i32* %16, align 4
  %17 = getelementptr i8, i8* %3, i32 6
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 1
  %20 = lshr i32 %19, 4
  %21 = and i32 %20, 67092735
  %22 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 2
  store i32 %21, i32* %22, align 8
  %23 = getelementptr i8, i8* %3, i32 9
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 1
  %26 = lshr i32 %25, 6
  %27 = and i32 %26, 66076671
  %28 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 3
  store i32 %27, i32* %28, align 4
  %29 = getelementptr i8, i8* %3, i32 12
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 1
  %32 = lshr i32 %31, 8
  %33 = and i32 %32, 1048575
  %34 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 4
  store i32 %33, i32* %34, align 16
  %35 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 1, i32 0
  %36 = getelementptr i8, i8* %3, i32 16
  %37 = bitcast i8* %36 to i32*
  %38 = bitcast i32* %35 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(20) %38, i8 0, i64 20, i1 false) #6
  %39 = load i32, i32* %37, align 1
  %40 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 0
  store i32 %39, i32* %40, align 8
  %41 = getelementptr i8, i8* %3, i32 20
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %42, align 1
  %44 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 1
  store i32 %43, i32* %44, align 4
  %45 = getelementptr i8, i8* %3, i32 24
  %46 = bitcast i8* %45 to i32*
  %47 = load i32, i32* %46, align 1
  %48 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 2
  store i32 %47, i32* %48, align 8
  %49 = getelementptr i8, i8* %3, i32 28
  %50 = bitcast i8* %49 to i32*
  %51 = load i32, i32* %50, align 1
  %52 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 3
  store i32 %51, i32* %52, align 4
  %53 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 3
  store i64 0, i64* %53, align 8
  %54 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 5
  store i8 0, i8* %54, align 16
  call fastcc void @poly1305_update(%struct.poly1305_state_internal_t* nonnull %5, i8* %1, i64 %2)
  call fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* nonnull %5, i8* %0)
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %6) #6
  ret i32 0
}

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_verify(i8* %0, i8* nocapture readonly %1, i64 %2, i8* nocapture readonly %3) #0 {
  %5 = alloca %struct.poly1305_state_internal_t, align 64
  %6 = alloca [16 x i8], align 16
  %7 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #6
  %8 = bitcast %struct.poly1305_state_internal_t* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %8) #6
  %9 = bitcast i8* %3 to i32*
  %10 = load i32, i32* %9, align 1
  %11 = and i32 %10, 67108863
  %12 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 0
  store i32 %11, i32* %12, align 64
  %13 = getelementptr i8, i8* %3, i32 3
  %14 = bitcast i8* %13 to i32*
  %15 = load i32, i32* %14, align 1
  %16 = lshr i32 %15, 2
  %17 = and i32 %16, 67108611
  %18 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 1
  store i32 %17, i32* %18, align 4
  %19 = getelementptr i8, i8* %3, i32 6
  %20 = bitcast i8* %19 to i32*
  %21 = load i32, i32* %20, align 1
  %22 = lshr i32 %21, 4
  %23 = and i32 %22, 67092735
  %24 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 2
  store i32 %23, i32* %24, align 8
  %25 = getelementptr i8, i8* %3, i32 9
  %26 = bitcast i8* %25 to i32*
  %27 = load i32, i32* %26, align 1
  %28 = lshr i32 %27, 6
  %29 = and i32 %28, 66076671
  %30 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 3
  store i32 %29, i32* %30, align 4
  %31 = getelementptr i8, i8* %3, i32 12
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 1
  %34 = lshr i32 %33, 8
  %35 = and i32 %34, 1048575
  %36 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 4
  store i32 %35, i32* %36, align 16
  %37 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 1, i32 0
  %38 = getelementptr i8, i8* %3, i32 16
  %39 = bitcast i8* %38 to i32*
  %40 = bitcast i32* %37 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(20) %40, i8 0, i64 20, i1 false) #6
  %41 = load i32, i32* %39, align 1
  %42 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 0
  store i32 %41, i32* %42, align 8
  %43 = getelementptr i8, i8* %3, i32 20
  %44 = bitcast i8* %43 to i32*
  %45 = load i32, i32* %44, align 1
  %46 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 1
  store i32 %45, i32* %46, align 4
  %47 = getelementptr i8, i8* %3, i32 24
  %48 = bitcast i8* %47 to i32*
  %49 = load i32, i32* %48, align 1
  %50 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 2
  store i32 %49, i32* %50, align 8
  %51 = getelementptr i8, i8* %3, i32 28
  %52 = bitcast i8* %51 to i32*
  %53 = load i32, i32* %52, align 1
  %54 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 3
  store i32 %53, i32* %54, align 4
  %55 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 3
  store i64 0, i64* %55, align 8
  %56 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 5
  store i8 0, i8* %56, align 16
  call fastcc void @poly1305_update(%struct.poly1305_state_internal_t* nonnull %5, i8* %1, i64 %2) #6
  call fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* nonnull %5, i8* nonnull %7) #6
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %8) #6
  %57 = call i32 @crypto_verify_16(i8* %0, i8* nonnull %7) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #6
  ret i32 %57
}

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_init(%struct.crypto_onetimeauth_poly1305_state* nocapture %0, i8* nocapture readonly %1) #0 {
  %3 = bitcast i8* %1 to i32*
  %4 = load i32, i32* %3, align 1
  %5 = and i32 %4, 67108863
  %6 = bitcast %struct.crypto_onetimeauth_poly1305_state* %0 to i32*
  store i32 %5, i32* %6, align 8
  %7 = getelementptr i8, i8* %1, i32 3
  %8 = bitcast i8* %7 to i32*
  %9 = load i32, i32* %8, align 1
  %10 = lshr i32 %9, 2
  %11 = and i32 %10, 67108611
  %12 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 4
  %13 = bitcast i8* %12 to i32*
  store i32 %11, i32* %13, align 4
  %14 = getelementptr i8, i8* %1, i32 6
  %15 = bitcast i8* %14 to i32*
  %16 = load i32, i32* %15, align 1
  %17 = lshr i32 %16, 4
  %18 = and i32 %17, 67092735
  %19 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 8
  %20 = bitcast i8* %19 to i32*
  store i32 %18, i32* %20, align 8
  %21 = getelementptr i8, i8* %1, i32 9
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 1
  %24 = lshr i32 %23, 6
  %25 = and i32 %24, 66076671
  %26 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 12
  %27 = bitcast i8* %26 to i32*
  store i32 %25, i32* %27, align 4
  %28 = getelementptr i8, i8* %1, i32 12
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 1
  %31 = lshr i32 %30, 8
  %32 = and i32 %31, 1048575
  %33 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 16
  %34 = bitcast i8* %33 to i32*
  store i32 %32, i32* %34, align 8
  %35 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 20
  %36 = getelementptr i8, i8* %1, i32 16
  %37 = bitcast i8* %36 to i32*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(20) %35, i8 0, i64 20, i1 false) #6
  %38 = load i32, i32* %37, align 1
  %39 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 40
  %40 = bitcast i8* %39 to i32*
  store i32 %38, i32* %40, align 8
  %41 = getelementptr i8, i8* %1, i32 20
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %42, align 1
  %44 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 44
  %45 = bitcast i8* %44 to i32*
  store i32 %43, i32* %45, align 4
  %46 = getelementptr i8, i8* %1, i32 24
  %47 = bitcast i8* %46 to i32*
  %48 = load i32, i32* %47, align 1
  %49 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 48
  %50 = bitcast i8* %49 to i32*
  store i32 %48, i32* %50, align 8
  %51 = getelementptr i8, i8* %1, i32 28
  %52 = bitcast i8* %51 to i32*
  %53 = load i32, i32* %52, align 1
  %54 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 52
  %55 = bitcast i8* %54 to i32*
  store i32 %53, i32* %55, align 4
  %56 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 56
  %57 = bitcast i8* %56 to i64*
  store i64 0, i64* %57, align 8
  %58 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 80
  store i8 0, i8* %58, align 8
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_update(%struct.crypto_onetimeauth_poly1305_state* nocapture %0, i8* nocapture readonly %1, i64 %2) #1 {
  %4 = bitcast %struct.crypto_onetimeauth_poly1305_state* %0 to %struct.poly1305_state_internal_t*
  tail call fastcc void @poly1305_update(%struct.poly1305_state_internal_t* %4, i8* %1, i64 %2)
  ret i32 0
}

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_final(%struct.crypto_onetimeauth_poly1305_state* %0, i8* nocapture %1) #0 {
  %3 = bitcast %struct.crypto_onetimeauth_poly1305_state* %0 to %struct.poly1305_state_internal_t*
  tail call fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* %3, i8* %1)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #2

; Function Attrs: nofree norecurse nounwind
define internal fastcc void @poly1305_update(%struct.poly1305_state_internal_t* nocapture %0, i8* nocapture readonly %1, i64 %2) unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 3
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %33, label %7

7:                                                ; preds = %3
  %8 = sub i64 16, %5
  %9 = icmp ugt i64 %8, %2
  %10 = select i1 %9, i64 %2, i64 %8
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %24, label %12

12:                                               ; preds = %7, %12
  %13 = phi i64 [ %23, %12 ], [ %5, %7 ]
  %14 = phi i64 [ %21, %12 ], [ 0, %7 ]
  %15 = trunc i64 %14 to i32
  %16 = getelementptr i8, i8* %1, i32 %15
  %17 = load i8, i8* %16, align 1
  %18 = add i64 %13, %14
  %19 = trunc i64 %18 to i32
  %20 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 %19
  store i8 %17, i8* %20, align 1
  %21 = add nuw i64 %14, 1
  %22 = icmp ult i64 %21, %10
  %23 = load i64, i64* %4, align 8
  br i1 %22, label %12, label %24

24:                                               ; preds = %12, %7
  %25 = phi i64 [ %5, %7 ], [ %23, %12 ]
  %26 = add i64 %25, %10
  store i64 %26, i64* %4, align 8
  %27 = icmp ult i64 %26, 16
  br i1 %27, label %60, label %28

28:                                               ; preds = %24
  %29 = trunc i64 %10 to i32
  %30 = getelementptr i8, i8* %1, i32 %29
  %31 = sub i64 %2, %10
  %32 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 0
  tail call fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nonnull %0, i8* nonnull %32, i64 16)
  store i64 0, i64* %4, align 8
  br label %33

33:                                               ; preds = %28, %3
  %34 = phi i64 [ %2, %3 ], [ %31, %28 ]
  %35 = phi i8* [ %1, %3 ], [ %30, %28 ]
  %36 = icmp ugt i64 %34, 15
  br i1 %36, label %37, label %42

37:                                               ; preds = %33
  %38 = and i64 %34, -16
  tail call fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nonnull %0, i8* %35, i64 %38)
  %39 = trunc i64 %38 to i32
  %40 = getelementptr i8, i8* %35, i32 %39
  %41 = sub i64 %34, %38
  br label %42

42:                                               ; preds = %37, %33
  %43 = phi i64 [ %41, %37 ], [ %34, %33 ]
  %44 = phi i8* [ %40, %37 ], [ %35, %33 ]
  %45 = icmp eq i64 %43, 0
  br i1 %45, label %60, label %46

46:                                               ; preds = %42, %46
  %47 = phi i64 [ %55, %46 ], [ 0, %42 ]
  %48 = trunc i64 %47 to i32
  %49 = getelementptr i8, i8* %44, i32 %48
  %50 = load i8, i8* %49, align 1
  %51 = load i64, i64* %4, align 8
  %52 = add i64 %51, %47
  %53 = trunc i64 %52 to i32
  %54 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 %53
  store i8 %50, i8* %54, align 1
  %55 = add nuw i64 %47, 1
  %56 = icmp eq i64 %55, %43
  br i1 %56, label %57, label %46

57:                                               ; preds = %46
  %58 = load i64, i64* %4, align 8
  %59 = add i64 %58, %43
  store i64 %59, i64* %4, align 8
  br label %60

60:                                               ; preds = %57, %42, %24
  ret void
}

; Function Attrs: noinline nounwind
define internal fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* %0, i8* nocapture %1) unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 3
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %20, label %6

6:                                                ; preds = %2
  %7 = trunc i64 %4 to i32
  %8 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 %7
  store i8 1, i8* %8, align 1
  %9 = add i64 %4, 1
  %10 = icmp ult i64 %9, 16
  br i1 %10, label %11, label %17

11:                                               ; preds = %6
  %12 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 16
  %13 = bitcast i32* %12 to i8*
  %14 = add i32 %7, 1
  %15 = getelementptr i8, i8* %13, i32 %14
  %16 = sub i32 15, %7
  call void @llvm.memset.p0i8.i32(i8* align 1 %15, i8 0, i32 %16, i1 false)
  br label %17

17:                                               ; preds = %11, %6
  %18 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 5
  store i8 1, i8* %18, align 8
  %19 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 0
  tail call fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nonnull %0, i8* nonnull %19, i64 16)
  br label %20

20:                                               ; preds = %2, %17
  %21 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 0
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 2
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 3
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 4
  %30 = load i32, i32* %29, align 4
  %31 = lshr i32 %24, 26
  %32 = and i32 %24, 67108863
  %33 = add i32 %26, %31
  %34 = lshr i32 %33, 26
  %35 = and i32 %33, 67108863
  %36 = add i32 %34, %28
  %37 = lshr i32 %36, 26
  %38 = and i32 %36, 67108863
  %39 = add i32 %37, %30
  %40 = lshr i32 %39, 26
  %41 = mul nuw nsw i32 %40, 5
  %42 = add i32 %41, %22
  %43 = lshr i32 %42, 26
  %44 = and i32 %42, 67108863
  %45 = add nuw nsw i32 %43, %32
  %46 = add nuw nsw i32 %44, 5
  %47 = lshr i32 %46, 26
  %48 = add nuw nsw i32 %47, %45
  %49 = lshr i32 %48, 26
  %50 = add nuw nsw i32 %49, %35
  %51 = lshr i32 %50, 26
  %52 = add nuw nsw i32 %51, %38
  %53 = lshr i32 %52, 26
  %54 = or i32 %39, -67108864
  %55 = add nsw i32 %54, %53
  %56 = lshr i32 %55, 31
  %57 = add nsw i32 %56, -1
  %58 = and i32 %57, 67108863
  %59 = and i32 %58, %46
  %60 = and i32 %58, %48
  %61 = ashr i32 %55, 31
  %62 = and i32 %61, %44
  %63 = or i32 %62, %59
  %64 = and i32 %61, %45
  %65 = or i32 %64, %60
  %66 = and i32 %61, %35
  %67 = or i32 %66, 0
  %68 = and i32 %61, %38
  %69 = or i32 %68, 0
  %70 = and i32 %61, %39
  %71 = or i32 0, %70
  %72 = shl i32 %65, 26
  %73 = or i32 %63, %72
  %74 = lshr i32 %65, 6
  %75 = shl i32 %67, 20
  %76 = or i32 %74, %75
  %77 = lshr i32 %67, 12
  %78 = shl i32 %69, 14
  %79 = or i32 %77, %78
  %80 = lshr i32 %69, 18
  %81 = shl i32 %71, 8
  %82 = or i32 %81, %80
  %83 = zext i32 %73 to i64
  %84 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 0
  %85 = load i32, i32* %84, align 8
  %86 = zext i32 %85 to i64
  %87 = add nuw nsw i64 %83, %86
  %88 = trunc i64 %87 to i32
  %89 = zext i32 %76 to i64
  %90 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 1
  %91 = load i32, i32* %90, align 4
  %92 = zext i32 %91 to i64
  %93 = add nuw nsw i64 %89, %92
  %94 = lshr i64 %87, 32
  %95 = add nuw nsw i64 %93, %94
  %96 = trunc i64 %95 to i32
  %97 = zext i32 %79 to i64
  %98 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 2
  %99 = load i32, i32* %98, align 8
  %100 = zext i32 %99 to i64
  %101 = add nuw nsw i64 %97, %100
  %102 = lshr i64 %95, 32
  %103 = add nuw nsw i64 %101, %102
  %104 = trunc i64 %103 to i32
  %105 = zext i32 %82 to i64
  %106 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 3
  %107 = load i32, i32* %106, align 4
  %108 = zext i32 %107 to i64
  %109 = add nuw nsw i64 %105, %108
  %110 = lshr i64 %103, 32
  %111 = add nuw nsw i64 %109, %110
  %112 = trunc i64 %111 to i32
  %113 = bitcast i8* %1 to i32*
  store i32 %88, i32* %113, align 1
  %114 = getelementptr i8, i8* %1, i32 4
  %115 = bitcast i8* %114 to i32*
  store i32 %96, i32* %115, align 1
  %116 = getelementptr i8, i8* %1, i32 8
  %117 = bitcast i8* %116 to i32*
  store i32 %104, i32* %117, align 1
  %118 = getelementptr i8, i8* %1, i32 12
  %119 = bitcast i8* %118 to i32*
  store i32 %112, i32* %119, align 1
  %120 = bitcast %struct.poly1305_state_internal_t* %0 to i8*
  tail call void @sodium_memzero(i8* %120, i32 88) #6
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #2

; Function Attrs: nofree norecurse nounwind
define internal fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nocapture %0, i8* nocapture readonly %1, i64 %2) unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 5
  %5 = load i8, i8* %4, align 8
  %6 = icmp eq i8 %5, 0
  %7 = select i1 %6, i32 16777216, i32 0
  %8 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 2
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 4
  %15 = load i32, i32* %14, align 8
  %16 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 2
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 3
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 4
  %25 = load i32, i32* %24, align 4
  %26 = icmp ugt i64 %2, 15
  br i1 %26, label %27, label %160

27:                                               ; preds = %3
  %28 = mul i32 %15, 5
  %29 = mul i32 %13, 5
  %30 = mul i32 %11, 5
  %31 = mul i32 %9, 5
  %32 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 0
  %33 = load i32, i32* %32, align 8
  %34 = zext i32 %33 to i64
  %35 = zext i32 %28 to i64
  %36 = zext i32 %29 to i64
  %37 = zext i32 %30 to i64
  %38 = zext i32 %31 to i64
  %39 = zext i32 %9 to i64
  %40 = zext i32 %11 to i64
  %41 = zext i32 %13 to i64
  %42 = zext i32 %15 to i64
  br label %43

43:                                               ; preds = %27, %43
  %44 = phi i8* [ %1, %27 ], [ %157, %43 ]
  %45 = phi i64 [ %2, %27 ], [ %158, %43 ]
  %46 = phi i32 [ %17, %27 ], [ %155, %43 ]
  %47 = phi i32 [ %19, %27 ], [ %156, %43 ]
  %48 = phi i32 [ %21, %27 ], [ %140, %43 ]
  %49 = phi i32 [ %23, %27 ], [ %145, %43 ]
  %50 = phi i32 [ %25, %27 ], [ %151, %43 ]
  %51 = bitcast i8* %44 to i32*
  %52 = load i32, i32* %51, align 1
  %53 = and i32 %52, 67108863
  %54 = add i32 %53, %46
  %55 = getelementptr i8, i8* %44, i32 3
  %56 = bitcast i8* %55 to i32*
  %57 = load i32, i32* %56, align 1
  %58 = lshr i32 %57, 2
  %59 = and i32 %58, 67108863
  %60 = add i32 %59, %47
  %61 = getelementptr i8, i8* %44, i32 6
  %62 = bitcast i8* %61 to i32*
  %63 = load i32, i32* %62, align 1
  %64 = lshr i32 %63, 4
  %65 = and i32 %64, 67108863
  %66 = add i32 %65, %48
  %67 = getelementptr i8, i8* %44, i32 9
  %68 = bitcast i8* %67 to i32*
  %69 = load i32, i32* %68, align 1
  %70 = lshr i32 %69, 6
  %71 = add i32 %70, %49
  %72 = getelementptr i8, i8* %44, i32 12
  %73 = bitcast i8* %72 to i32*
  %74 = load i32, i32* %73, align 1
  %75 = lshr i32 %74, 8
  %76 = or i32 %75, %7
  %77 = add i32 %76, %50
  %78 = zext i32 %54 to i64
  %79 = mul nuw i64 %78, %34
  %80 = zext i32 %60 to i64
  %81 = mul nuw i64 %80, %35
  %82 = add i64 %81, %79
  %83 = zext i32 %66 to i64
  %84 = mul nuw i64 %83, %36
  %85 = add i64 %82, %84
  %86 = zext i32 %71 to i64
  %87 = mul nuw i64 %86, %37
  %88 = add i64 %85, %87
  %89 = zext i32 %77 to i64
  %90 = mul nuw i64 %89, %38
  %91 = add i64 %88, %90
  %92 = mul nuw i64 %78, %39
  %93 = mul nuw i64 %80, %34
  %94 = add i64 %93, %92
  %95 = mul nuw i64 %83, %35
  %96 = add i64 %94, %95
  %97 = mul nuw i64 %86, %36
  %98 = add i64 %96, %97
  %99 = mul nuw i64 %89, %37
  %100 = add i64 %98, %99
  %101 = mul nuw i64 %78, %40
  %102 = mul nuw i64 %80, %39
  %103 = add i64 %102, %101
  %104 = mul nuw i64 %83, %34
  %105 = add i64 %103, %104
  %106 = mul nuw i64 %86, %35
  %107 = add i64 %105, %106
  %108 = mul nuw i64 %89, %36
  %109 = add i64 %107, %108
  %110 = mul nuw i64 %78, %41
  %111 = mul nuw i64 %80, %40
  %112 = add i64 %111, %110
  %113 = mul nuw i64 %83, %39
  %114 = add i64 %112, %113
  %115 = mul nuw i64 %86, %34
  %116 = add i64 %114, %115
  %117 = mul nuw i64 %89, %35
  %118 = add i64 %116, %117
  %119 = mul nuw i64 %78, %42
  %120 = mul nuw i64 %80, %41
  %121 = add i64 %120, %119
  %122 = mul nuw i64 %83, %40
  %123 = add i64 %121, %122
  %124 = mul nuw i64 %86, %39
  %125 = add i64 %123, %124
  %126 = mul nuw i64 %89, %34
  %127 = add i64 %125, %126
  %128 = lshr i64 %91, 26
  %129 = trunc i64 %91 to i32
  %130 = and i32 %129, 67108863
  %131 = and i64 %128, 4294967295
  %132 = add i64 %100, %131
  %133 = lshr i64 %132, 26
  %134 = trunc i64 %132 to i32
  %135 = and i32 %134, 67108863
  %136 = and i64 %133, 4294967295
  %137 = add i64 %109, %136
  %138 = lshr i64 %137, 26
  %139 = trunc i64 %137 to i32
  %140 = and i32 %139, 67108863
  %141 = and i64 %138, 4294967295
  %142 = add i64 %118, %141
  %143 = lshr i64 %142, 26
  %144 = trunc i64 %142 to i32
  %145 = and i32 %144, 67108863
  %146 = and i64 %143, 4294967295
  %147 = add i64 %127, %146
  %148 = lshr i64 %147, 26
  %149 = trunc i64 %148 to i32
  %150 = trunc i64 %147 to i32
  %151 = and i32 %150, 67108863
  %152 = mul i32 %149, 5
  %153 = add i32 %152, %130
  %154 = lshr i32 %153, 26
  %155 = and i32 %153, 67108863
  %156 = add nuw nsw i32 %154, %135
  %157 = getelementptr i8, i8* %44, i32 16
  %158 = add i64 %45, -16
  %159 = icmp ugt i64 %158, 15
  br i1 %159, label %43, label %160

160:                                              ; preds = %43, %3
  %161 = phi i32 [ %25, %3 ], [ %151, %43 ]
  %162 = phi i32 [ %23, %3 ], [ %145, %43 ]
  %163 = phi i32 [ %21, %3 ], [ %140, %43 ]
  %164 = phi i32 [ %19, %3 ], [ %156, %43 ]
  %165 = phi i32 [ %17, %3 ], [ %155, %43 ]
  store i32 %165, i32* %16, align 4
  store i32 %164, i32* %18, align 4
  store i32 %163, i32* %20, align 4
  store i32 %162, i32* %22, align 4
  store i32 %161, i32* %24, align 4
  ret void
}

declare void @sodium_memzero(i8* %0, i32 %1) local_unnamed_addr #4

declare i32 @crypto_verify_16(i8* %0, i8* %1) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly %0, i8 %1, i64 %2, i1 immarg %3) #5

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #5

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { noinline nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind willreturn writeonly }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

#########################################################
; exiting Souper's runOnFunction() for ./poly1305_donna.c.bc:poly1305_finish()
rescanning function after transformation was applied

; entering Souper's runOnFunction() for ./poly1305_donna.c.bc:poly1305_finish()

; ModuleID = './poly1305_donna.c.bc'
source_filename = "crypto_onetimeauth/poly1305/donna/poly1305_donna.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.crypto_onetimeauth_poly1305_implementation = type { i32 (i8*, i8*, i64, i8*)*, i32 (i8*, i8*, i64, i8*)*, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)*, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*, i64)*, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)* }
%struct.crypto_onetimeauth_poly1305_state = type { [256 x i8] }
%struct.poly1305_state_internal_t = type { [5 x i32], [5 x i32], [4 x i32], i64, [16 x i8], i8 }

@crypto_onetimeauth_poly1305_donna_implementation = hidden local_unnamed_addr global %struct.crypto_onetimeauth_poly1305_implementation { i32 (i8*, i8*, i64, i8*)* @crypto_onetimeauth_poly1305_donna, i32 (i8*, i8*, i64, i8*)* @crypto_onetimeauth_poly1305_donna_verify, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)* @crypto_onetimeauth_poly1305_donna_init, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*, i64)* @crypto_onetimeauth_poly1305_donna_update, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)* @crypto_onetimeauth_poly1305_donna_final }, align 4

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna(i8* nocapture %0, i8* nocapture readonly %1, i64 %2, i8* nocapture readonly %3) #0 {
  %5 = alloca %struct.poly1305_state_internal_t, align 64
  %6 = bitcast %struct.poly1305_state_internal_t* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %6) #6
  %7 = bitcast i8* %3 to i32*
  %8 = load i32, i32* %7, align 1
  %9 = and i32 %8, 67108863
  %10 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 0
  store i32 %9, i32* %10, align 64
  %11 = getelementptr i8, i8* %3, i32 3
  %12 = bitcast i8* %11 to i32*
  %13 = load i32, i32* %12, align 1
  %14 = lshr i32 %13, 2
  %15 = and i32 %14, 67108611
  %16 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 1
  store i32 %15, i32* %16, align 4
  %17 = getelementptr i8, i8* %3, i32 6
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 1
  %20 = lshr i32 %19, 4
  %21 = and i32 %20, 67092735
  %22 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 2
  store i32 %21, i32* %22, align 8
  %23 = getelementptr i8, i8* %3, i32 9
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 1
  %26 = lshr i32 %25, 6
  %27 = and i32 %26, 66076671
  %28 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 3
  store i32 %27, i32* %28, align 4
  %29 = getelementptr i8, i8* %3, i32 12
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 1
  %32 = lshr i32 %31, 8
  %33 = and i32 %32, 1048575
  %34 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 4
  store i32 %33, i32* %34, align 16
  %35 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 1, i32 0
  %36 = getelementptr i8, i8* %3, i32 16
  %37 = bitcast i8* %36 to i32*
  %38 = bitcast i32* %35 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(20) %38, i8 0, i64 20, i1 false) #6
  %39 = load i32, i32* %37, align 1
  %40 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 0
  store i32 %39, i32* %40, align 8
  %41 = getelementptr i8, i8* %3, i32 20
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %42, align 1
  %44 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 1
  store i32 %43, i32* %44, align 4
  %45 = getelementptr i8, i8* %3, i32 24
  %46 = bitcast i8* %45 to i32*
  %47 = load i32, i32* %46, align 1
  %48 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 2
  store i32 %47, i32* %48, align 8
  %49 = getelementptr i8, i8* %3, i32 28
  %50 = bitcast i8* %49 to i32*
  %51 = load i32, i32* %50, align 1
  %52 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 3
  store i32 %51, i32* %52, align 4
  %53 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 3
  store i64 0, i64* %53, align 8
  %54 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 5
  store i8 0, i8* %54, align 16
  call fastcc void @poly1305_update(%struct.poly1305_state_internal_t* nonnull %5, i8* %1, i64 %2)
  call fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* nonnull %5, i8* %0)
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %6) #6
  ret i32 0
}

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_verify(i8* %0, i8* nocapture readonly %1, i64 %2, i8* nocapture readonly %3) #0 {
  %5 = alloca %struct.poly1305_state_internal_t, align 64
  %6 = alloca [16 x i8], align 16
  %7 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #6
  %8 = bitcast %struct.poly1305_state_internal_t* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %8) #6
  %9 = bitcast i8* %3 to i32*
  %10 = load i32, i32* %9, align 1
  %11 = and i32 %10, 67108863
  %12 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 0
  store i32 %11, i32* %12, align 64
  %13 = getelementptr i8, i8* %3, i32 3
  %14 = bitcast i8* %13 to i32*
  %15 = load i32, i32* %14, align 1
  %16 = lshr i32 %15, 2
  %17 = and i32 %16, 67108611
  %18 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 1
  store i32 %17, i32* %18, align 4
  %19 = getelementptr i8, i8* %3, i32 6
  %20 = bitcast i8* %19 to i32*
  %21 = load i32, i32* %20, align 1
  %22 = lshr i32 %21, 4
  %23 = and i32 %22, 67092735
  %24 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 2
  store i32 %23, i32* %24, align 8
  %25 = getelementptr i8, i8* %3, i32 9
  %26 = bitcast i8* %25 to i32*
  %27 = load i32, i32* %26, align 1
  %28 = lshr i32 %27, 6
  %29 = and i32 %28, 66076671
  %30 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 3
  store i32 %29, i32* %30, align 4
  %31 = getelementptr i8, i8* %3, i32 12
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 1
  %34 = lshr i32 %33, 8
  %35 = and i32 %34, 1048575
  %36 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 4
  store i32 %35, i32* %36, align 16
  %37 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 1, i32 0
  %38 = getelementptr i8, i8* %3, i32 16
  %39 = bitcast i8* %38 to i32*
  %40 = bitcast i32* %37 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(20) %40, i8 0, i64 20, i1 false) #6
  %41 = load i32, i32* %39, align 1
  %42 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 0
  store i32 %41, i32* %42, align 8
  %43 = getelementptr i8, i8* %3, i32 20
  %44 = bitcast i8* %43 to i32*
  %45 = load i32, i32* %44, align 1
  %46 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 1
  store i32 %45, i32* %46, align 4
  %47 = getelementptr i8, i8* %3, i32 24
  %48 = bitcast i8* %47 to i32*
  %49 = load i32, i32* %48, align 1
  %50 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 2
  store i32 %49, i32* %50, align 8
  %51 = getelementptr i8, i8* %3, i32 28
  %52 = bitcast i8* %51 to i32*
  %53 = load i32, i32* %52, align 1
  %54 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 3
  store i32 %53, i32* %54, align 4
  %55 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 3
  store i64 0, i64* %55, align 8
  %56 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 5
  store i8 0, i8* %56, align 16
  call fastcc void @poly1305_update(%struct.poly1305_state_internal_t* nonnull %5, i8* %1, i64 %2) #6
  call fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* nonnull %5, i8* nonnull %7) #6
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %8) #6
  %57 = call i32 @crypto_verify_16(i8* %0, i8* nonnull %7) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #6
  ret i32 %57
}

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_init(%struct.crypto_onetimeauth_poly1305_state* nocapture %0, i8* nocapture readonly %1) #0 {
  %3 = bitcast i8* %1 to i32*
  %4 = load i32, i32* %3, align 1
  %5 = and i32 %4, 67108863
  %6 = bitcast %struct.crypto_onetimeauth_poly1305_state* %0 to i32*
  store i32 %5, i32* %6, align 8
  %7 = getelementptr i8, i8* %1, i32 3
  %8 = bitcast i8* %7 to i32*
  %9 = load i32, i32* %8, align 1
  %10 = lshr i32 %9, 2
  %11 = and i32 %10, 67108611
  %12 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 4
  %13 = bitcast i8* %12 to i32*
  store i32 %11, i32* %13, align 4
  %14 = getelementptr i8, i8* %1, i32 6
  %15 = bitcast i8* %14 to i32*
  %16 = load i32, i32* %15, align 1
  %17 = lshr i32 %16, 4
  %18 = and i32 %17, 67092735
  %19 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 8
  %20 = bitcast i8* %19 to i32*
  store i32 %18, i32* %20, align 8
  %21 = getelementptr i8, i8* %1, i32 9
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 1
  %24 = lshr i32 %23, 6
  %25 = and i32 %24, 66076671
  %26 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 12
  %27 = bitcast i8* %26 to i32*
  store i32 %25, i32* %27, align 4
  %28 = getelementptr i8, i8* %1, i32 12
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 1
  %31 = lshr i32 %30, 8
  %32 = and i32 %31, 1048575
  %33 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 16
  %34 = bitcast i8* %33 to i32*
  store i32 %32, i32* %34, align 8
  %35 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 20
  %36 = getelementptr i8, i8* %1, i32 16
  %37 = bitcast i8* %36 to i32*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(20) %35, i8 0, i64 20, i1 false) #6
  %38 = load i32, i32* %37, align 1
  %39 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 40
  %40 = bitcast i8* %39 to i32*
  store i32 %38, i32* %40, align 8
  %41 = getelementptr i8, i8* %1, i32 20
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %42, align 1
  %44 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 44
  %45 = bitcast i8* %44 to i32*
  store i32 %43, i32* %45, align 4
  %46 = getelementptr i8, i8* %1, i32 24
  %47 = bitcast i8* %46 to i32*
  %48 = load i32, i32* %47, align 1
  %49 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 48
  %50 = bitcast i8* %49 to i32*
  store i32 %48, i32* %50, align 8
  %51 = getelementptr i8, i8* %1, i32 28
  %52 = bitcast i8* %51 to i32*
  %53 = load i32, i32* %52, align 1
  %54 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 52
  %55 = bitcast i8* %54 to i32*
  store i32 %53, i32* %55, align 4
  %56 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 56
  %57 = bitcast i8* %56 to i64*
  store i64 0, i64* %57, align 8
  %58 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 80
  store i8 0, i8* %58, align 8
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_update(%struct.crypto_onetimeauth_poly1305_state* nocapture %0, i8* nocapture readonly %1, i64 %2) #1 {
  %4 = bitcast %struct.crypto_onetimeauth_poly1305_state* %0 to %struct.poly1305_state_internal_t*
  tail call fastcc void @poly1305_update(%struct.poly1305_state_internal_t* %4, i8* %1, i64 %2)
  ret i32 0
}

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_final(%struct.crypto_onetimeauth_poly1305_state* %0, i8* nocapture %1) #0 {
  %3 = bitcast %struct.crypto_onetimeauth_poly1305_state* %0 to %struct.poly1305_state_internal_t*
  tail call fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* %3, i8* %1)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #2

; Function Attrs: nofree norecurse nounwind
define internal fastcc void @poly1305_update(%struct.poly1305_state_internal_t* nocapture %0, i8* nocapture readonly %1, i64 %2) unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 3
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %33, label %7

7:                                                ; preds = %3
  %8 = sub i64 16, %5
  %9 = icmp ugt i64 %8, %2
  %10 = select i1 %9, i64 %2, i64 %8
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %24, label %12

12:                                               ; preds = %7, %12
  %13 = phi i64 [ %23, %12 ], [ %5, %7 ]
  %14 = phi i64 [ %21, %12 ], [ 0, %7 ]
  %15 = trunc i64 %14 to i32
  %16 = getelementptr i8, i8* %1, i32 %15
  %17 = load i8, i8* %16, align 1
  %18 = add i64 %13, %14
  %19 = trunc i64 %18 to i32
  %20 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 %19
  store i8 %17, i8* %20, align 1
  %21 = add nuw i64 %14, 1
  %22 = icmp ult i64 %21, %10
  %23 = load i64, i64* %4, align 8
  br i1 %22, label %12, label %24

24:                                               ; preds = %12, %7
  %25 = phi i64 [ %5, %7 ], [ %23, %12 ]
  %26 = add i64 %25, %10
  store i64 %26, i64* %4, align 8
  %27 = icmp ult i64 %26, 16
  br i1 %27, label %60, label %28

28:                                               ; preds = %24
  %29 = trunc i64 %10 to i32
  %30 = getelementptr i8, i8* %1, i32 %29
  %31 = sub i64 %2, %10
  %32 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 0
  tail call fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nonnull %0, i8* nonnull %32, i64 16)
  store i64 0, i64* %4, align 8
  br label %33

33:                                               ; preds = %28, %3
  %34 = phi i64 [ %2, %3 ], [ %31, %28 ]
  %35 = phi i8* [ %1, %3 ], [ %30, %28 ]
  %36 = icmp ugt i64 %34, 15
  br i1 %36, label %37, label %42

37:                                               ; preds = %33
  %38 = and i64 %34, -16
  tail call fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nonnull %0, i8* %35, i64 %38)
  %39 = trunc i64 %38 to i32
  %40 = getelementptr i8, i8* %35, i32 %39
  %41 = sub i64 %34, %38
  br label %42

42:                                               ; preds = %37, %33
  %43 = phi i64 [ %41, %37 ], [ %34, %33 ]
  %44 = phi i8* [ %40, %37 ], [ %35, %33 ]
  %45 = icmp eq i64 %43, 0
  br i1 %45, label %60, label %46

46:                                               ; preds = %42, %46
  %47 = phi i64 [ %55, %46 ], [ 0, %42 ]
  %48 = trunc i64 %47 to i32
  %49 = getelementptr i8, i8* %44, i32 %48
  %50 = load i8, i8* %49, align 1
  %51 = load i64, i64* %4, align 8
  %52 = add i64 %51, %47
  %53 = trunc i64 %52 to i32
  %54 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 %53
  store i8 %50, i8* %54, align 1
  %55 = add nuw i64 %47, 1
  %56 = icmp eq i64 %55, %43
  br i1 %56, label %57, label %46

57:                                               ; preds = %46
  %58 = load i64, i64* %4, align 8
  %59 = add i64 %58, %43
  store i64 %59, i64* %4, align 8
  br label %60

60:                                               ; preds = %57, %42, %24
  ret void
}

; Function Attrs: noinline nounwind
define internal fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* %0, i8* nocapture %1) unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 3
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %20, label %6

6:                                                ; preds = %2
  %7 = trunc i64 %4 to i32
  %8 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 %7
  store i8 1, i8* %8, align 1
  %9 = add i64 %4, 1
  %10 = icmp ult i64 %9, 16
  br i1 %10, label %11, label %17

11:                                               ; preds = %6
  %12 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 16
  %13 = bitcast i32* %12 to i8*
  %14 = add i32 %7, 1
  %15 = getelementptr i8, i8* %13, i32 %14
  %16 = sub i32 15, %7
  call void @llvm.memset.p0i8.i32(i8* align 1 %15, i8 0, i32 %16, i1 false)
  br label %17

17:                                               ; preds = %11, %6
  %18 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 5
  store i8 1, i8* %18, align 8
  %19 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 0
  tail call fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nonnull %0, i8* nonnull %19, i64 16)
  br label %20

20:                                               ; preds = %2, %17
  %21 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 0
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 2
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 3
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 4
  %30 = load i32, i32* %29, align 4
  %31 = lshr i32 %24, 26
  %32 = and i32 %24, 67108863
  %33 = add i32 %26, %31
  %34 = lshr i32 %33, 26
  %35 = and i32 %33, 67108863
  %36 = add i32 %34, %28
  %37 = lshr i32 %36, 26
  %38 = and i32 %36, 67108863
  %39 = add i32 %37, %30
  %40 = lshr i32 %39, 26
  %41 = mul nuw nsw i32 %40, 5
  %42 = add i32 %41, %22
  %43 = lshr i32 %42, 26
  %44 = and i32 %42, 67108863
  %45 = add nuw nsw i32 %43, %32
  %46 = add nuw nsw i32 %44, 5
  %47 = lshr i32 %46, 26
  %48 = add nuw nsw i32 %47, %45
  %49 = lshr i32 %48, 26
  %50 = add nuw nsw i32 %49, %35
  %51 = lshr i32 %50, 26
  %52 = add nuw nsw i32 %51, %38
  %53 = lshr i32 %52, 26
  %54 = or i32 %39, -67108864
  %55 = add nsw i32 %54, %53
  %56 = lshr i32 %55, 31
  %57 = add nsw i32 %56, -1
  %58 = and i32 %57, 67108863
  %59 = and i32 %58, %46
  %60 = and i32 %58, %48
  %61 = ashr i32 %55, 31
  %62 = and i32 %61, %44
  %63 = or i32 %62, %59
  %64 = and i32 %61, %45
  %65 = or i32 %64, %60
  %66 = and i32 %61, %35
  %67 = or i32 %66, 0
  %68 = and i32 %61, %38
  %69 = or i32 %68, 0
  %70 = and i32 %61, %39
  %71 = or i32 0, %70
  %72 = shl i32 %65, 26
  %73 = or i32 %63, %72
  %74 = lshr i32 %65, 6
  %75 = shl i32 %67, 20
  %76 = or i32 %74, %75
  %77 = lshr i32 %67, 12
  %78 = shl i32 %69, 14
  %79 = or i32 %77, %78
  %80 = lshr i32 %69, 18
  %81 = shl i32 %71, 8
  %82 = or i32 %81, %80
  %83 = zext i32 %73 to i64
  %84 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 0
  %85 = load i32, i32* %84, align 8
  %86 = zext i32 %85 to i64
  %87 = add nuw nsw i64 %83, %86
  %88 = trunc i64 %87 to i32
  %89 = zext i32 %76 to i64
  %90 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 1
  %91 = load i32, i32* %90, align 4
  %92 = zext i32 %91 to i64
  %93 = add nuw nsw i64 %89, %92
  %94 = lshr i64 %87, 32
  %95 = add nuw nsw i64 %93, %94
  %96 = trunc i64 %95 to i32
  %97 = zext i32 %79 to i64
  %98 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 2
  %99 = load i32, i32* %98, align 8
  %100 = zext i32 %99 to i64
  %101 = add nuw nsw i64 %97, %100
  %102 = lshr i64 %95, 32
  %103 = add nuw nsw i64 %101, %102
  %104 = trunc i64 %103 to i32
  %105 = zext i32 %82 to i64
  %106 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 3
  %107 = load i32, i32* %106, align 4
  %108 = zext i32 %107 to i64
  %109 = add nuw nsw i64 %105, %108
  %110 = lshr i64 %103, 32
  %111 = add nuw nsw i64 %109, %110
  %112 = trunc i64 %111 to i32
  %113 = bitcast i8* %1 to i32*
  store i32 %88, i32* %113, align 1
  %114 = getelementptr i8, i8* %1, i32 4
  %115 = bitcast i8* %114 to i32*
  store i32 %96, i32* %115, align 1
  %116 = getelementptr i8, i8* %1, i32 8
  %117 = bitcast i8* %116 to i32*
  store i32 %104, i32* %117, align 1
  %118 = getelementptr i8, i8* %1, i32 12
  %119 = bitcast i8* %118 to i32*
  store i32 %112, i32* %119, align 1
  %120 = bitcast %struct.poly1305_state_internal_t* %0 to i8*
  tail call void @sodium_memzero(i8* %120, i32 88) #6
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #2

; Function Attrs: nofree norecurse nounwind
define internal fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nocapture %0, i8* nocapture readonly %1, i64 %2) unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 5
  %5 = load i8, i8* %4, align 8
  %6 = icmp eq i8 %5, 0
  %7 = select i1 %6, i32 16777216, i32 0
  %8 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 2
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 4
  %15 = load i32, i32* %14, align 8
  %16 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 2
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 3
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 4
  %25 = load i32, i32* %24, align 4
  %26 = icmp ugt i64 %2, 15
  br i1 %26, label %27, label %160

27:                                               ; preds = %3
  %28 = mul i32 %15, 5
  %29 = mul i32 %13, 5
  %30 = mul i32 %11, 5
  %31 = mul i32 %9, 5
  %32 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 0
  %33 = load i32, i32* %32, align 8
  %34 = zext i32 %33 to i64
  %35 = zext i32 %28 to i64
  %36 = zext i32 %29 to i64
  %37 = zext i32 %30 to i64
  %38 = zext i32 %31 to i64
  %39 = zext i32 %9 to i64
  %40 = zext i32 %11 to i64
  %41 = zext i32 %13 to i64
  %42 = zext i32 %15 to i64
  br label %43

43:                                               ; preds = %27, %43
  %44 = phi i8* [ %1, %27 ], [ %157, %43 ]
  %45 = phi i64 [ %2, %27 ], [ %158, %43 ]
  %46 = phi i32 [ %17, %27 ], [ %155, %43 ]
  %47 = phi i32 [ %19, %27 ], [ %156, %43 ]
  %48 = phi i32 [ %21, %27 ], [ %140, %43 ]
  %49 = phi i32 [ %23, %27 ], [ %145, %43 ]
  %50 = phi i32 [ %25, %27 ], [ %151, %43 ]
  %51 = bitcast i8* %44 to i32*
  %52 = load i32, i32* %51, align 1
  %53 = and i32 %52, 67108863
  %54 = add i32 %53, %46
  %55 = getelementptr i8, i8* %44, i32 3
  %56 = bitcast i8* %55 to i32*
  %57 = load i32, i32* %56, align 1
  %58 = lshr i32 %57, 2
  %59 = and i32 %58, 67108863
  %60 = add i32 %59, %47
  %61 = getelementptr i8, i8* %44, i32 6
  %62 = bitcast i8* %61 to i32*
  %63 = load i32, i32* %62, align 1
  %64 = lshr i32 %63, 4
  %65 = and i32 %64, 67108863
  %66 = add i32 %65, %48
  %67 = getelementptr i8, i8* %44, i32 9
  %68 = bitcast i8* %67 to i32*
  %69 = load i32, i32* %68, align 1
  %70 = lshr i32 %69, 6
  %71 = add i32 %70, %49
  %72 = getelementptr i8, i8* %44, i32 12
  %73 = bitcast i8* %72 to i32*
  %74 = load i32, i32* %73, align 1
  %75 = lshr i32 %74, 8
  %76 = or i32 %75, %7
  %77 = add i32 %76, %50
  %78 = zext i32 %54 to i64
  %79 = mul nuw i64 %78, %34
  %80 = zext i32 %60 to i64
  %81 = mul nuw i64 %80, %35
  %82 = add i64 %81, %79
  %83 = zext i32 %66 to i64
  %84 = mul nuw i64 %83, %36
  %85 = add i64 %82, %84
  %86 = zext i32 %71 to i64
  %87 = mul nuw i64 %86, %37
  %88 = add i64 %85, %87
  %89 = zext i32 %77 to i64
  %90 = mul nuw i64 %89, %38
  %91 = add i64 %88, %90
  %92 = mul nuw i64 %78, %39
  %93 = mul nuw i64 %80, %34
  %94 = add i64 %93, %92
  %95 = mul nuw i64 %83, %35
  %96 = add i64 %94, %95
  %97 = mul nuw i64 %86, %36
  %98 = add i64 %96, %97
  %99 = mul nuw i64 %89, %37
  %100 = add i64 %98, %99
  %101 = mul nuw i64 %78, %40
  %102 = mul nuw i64 %80, %39
  %103 = add i64 %102, %101
  %104 = mul nuw i64 %83, %34
  %105 = add i64 %103, %104
  %106 = mul nuw i64 %86, %35
  %107 = add i64 %105, %106
  %108 = mul nuw i64 %89, %36
  %109 = add i64 %107, %108
  %110 = mul nuw i64 %78, %41
  %111 = mul nuw i64 %80, %40
  %112 = add i64 %111, %110
  %113 = mul nuw i64 %83, %39
  %114 = add i64 %112, %113
  %115 = mul nuw i64 %86, %34
  %116 = add i64 %114, %115
  %117 = mul nuw i64 %89, %35
  %118 = add i64 %116, %117
  %119 = mul nuw i64 %78, %42
  %120 = mul nuw i64 %80, %41
  %121 = add i64 %120, %119
  %122 = mul nuw i64 %83, %40
  %123 = add i64 %121, %122
  %124 = mul nuw i64 %86, %39
  %125 = add i64 %123, %124
  %126 = mul nuw i64 %89, %34
  %127 = add i64 %125, %126
  %128 = lshr i64 %91, 26
  %129 = trunc i64 %91 to i32
  %130 = and i32 %129, 67108863
  %131 = and i64 %128, 4294967295
  %132 = add i64 %100, %131
  %133 = lshr i64 %132, 26
  %134 = trunc i64 %132 to i32
  %135 = and i32 %134, 67108863
  %136 = and i64 %133, 4294967295
  %137 = add i64 %109, %136
  %138 = lshr i64 %137, 26
  %139 = trunc i64 %137 to i32
  %140 = and i32 %139, 67108863
  %141 = and i64 %138, 4294967295
  %142 = add i64 %118, %141
  %143 = lshr i64 %142, 26
  %144 = trunc i64 %142 to i32
  %145 = and i32 %144, 67108863
  %146 = and i64 %143, 4294967295
  %147 = add i64 %127, %146
  %148 = lshr i64 %147, 26
  %149 = trunc i64 %148 to i32
  %150 = trunc i64 %147 to i32
  %151 = and i32 %150, 67108863
  %152 = mul i32 %149, 5
  %153 = add i32 %152, %130
  %154 = lshr i32 %153, 26
  %155 = and i32 %153, 67108863
  %156 = add nuw nsw i32 %154, %135
  %157 = getelementptr i8, i8* %44, i32 16
  %158 = add i64 %45, -16
  %159 = icmp ugt i64 %158, 15
  br i1 %159, label %43, label %160

160:                                              ; preds = %43, %3
  %161 = phi i32 [ %25, %3 ], [ %151, %43 ]
  %162 = phi i32 [ %23, %3 ], [ %145, %43 ]
  %163 = phi i32 [ %21, %3 ], [ %140, %43 ]
  %164 = phi i32 [ %19, %3 ], [ %156, %43 ]
  %165 = phi i32 [ %17, %3 ], [ %155, %43 ]
  store i32 %165, i32* %16, align 4
  store i32 %164, i32* %18, align 4
  store i32 %163, i32* %20, align 4
  store i32 %162, i32* %22, align 4
  store i32 %161, i32* %24, align 4
  ret void
}

declare void @sodium_memzero(i8* %0, i32 %1) local_unnamed_addr #4

declare i32 @crypto_verify_16(i8* %0, i8* %1) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly %0, i8 %1, i64 %2, i1 immarg %3) #5

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #5

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { noinline nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind willreturn writeonly }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %4 = load i64, i64* %3, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = icmp eq i64 %4, 0
; Looking for a replacement for:
%0:i64 = var
%1:i1 = eq 0:i64, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = trunc i64 %4 to i32
; Looking for a replacement for:
%0:i64 = var
%1:i1 = eq 0:i64, %0
pc %1 0:i1
%2:i32 = trunc %0
infer %2

; *****
; For LLVM instruction:
;  %9 = add i64 %4, 1
; Looking for a replacement for:
%0:i64 = var
%1:i1 = eq 0:i64, %0
pc %1 0:i1
%2:i64 = add 1:i64, %0
infer %2

; *****
; For LLVM instruction:
;  %10 = icmp ult i64 %9, 16
; Looking for a replacement for:
%0:i64 = var
%1:i1 = eq 0:i64, %0
pc %1 0:i1
%2:i64 = add 1:i64, %0
%3:i1 = ult %2, 16:i64
infer %3

; *****
; For LLVM instruction:
;  %14 = add i32 %7, 1
; Looking for a replacement for:
%0:i64 = var
%1:i1 = eq 0:i64, %0
pc %1 0:i1
%2:i64 = add 1:i64, %0
%3:i1 = ult %2, 16:i64
pc %3 1:i1
%4:i32 = trunc %0 (hasExternalUses)
%5:i32 = add 1:i32, %4
infer %5

; *****
; For LLVM instruction:
;  %16 = sub i32 15, %7
; Looking for a replacement for:
%0:i64 = var
%1:i1 = eq 0:i64, %0
pc %1 0:i1
%2:i64 = add 1:i64, %0
%3:i1 = ult %2, 16:i64
pc %3 1:i1
%4:i32 = trunc %0 (hasExternalUses)
%5:i32 = sub 15:i32, %4
infer %5

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %21, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %23, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %25, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %27, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %29, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %31 = lshr i32 %24, 26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 26:i32
infer %1

; *****
; For LLVM instruction:
;  %32 = and i32 %24, 67108863
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 67108863:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %33 = add i32 %26, %31
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2
infer %3

; *****
; For LLVM instruction:
;  %34 = lshr i32 %33, 26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2 (hasExternalUses)
%4:i32 = lshr %3, 26:i32
infer %4

; *****
; For LLVM instruction:
;  %35 = and i32 %33, 67108863
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2 (hasExternalUses)
%4:i32 = and 67108863:i32, %3
infer %4

; *****
; For LLVM instruction:
;  %36 = add i32 %34, %28
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3 (hasExternalUses)
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5
infer %6

; *****
; For LLVM instruction:
;  %37 = lshr i32 %36, 26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3 (hasExternalUses)
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5 (hasExternalUses)
%7:i32 = lshr %6, 26:i32
infer %7

; *****
; For LLVM instruction:
;  %38 = and i32 %36, 67108863
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3 (hasExternalUses)
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5 (hasExternalUses)
%7:i32 = and 67108863:i32, %6
infer %7

; *****
; For LLVM instruction:
;  %39 = add i32 %37, %30
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4 (hasExternalUses)
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6 (hasExternalUses)
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8
infer %9

; *****
; For LLVM instruction:
;  %40 = lshr i32 %39, 26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4 (hasExternalUses)
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6 (hasExternalUses)
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = lshr %9, 26:i32
infer %10

; *****
; For LLVM instruction:
;  %41 = mul nuw nsw i32 %40, 5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4 (hasExternalUses)
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6 (hasExternalUses)
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = lshr %9, 26:i32
%11:i32 = mulnw 5:i32, %10
infer %11

; *****
; For LLVM instruction:
;  %42 = add i32 %41, %22
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5 (hasExternalUses)
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7 (hasExternalUses)
%9:i32 = lshr %8, 26:i32
%10:i32 = add %1, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = mulnw 5:i32, %11
%13:i32 = add %0, %12
infer %13

; *****
; For LLVM instruction:
;  %43 = lshr i32 %42, 26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5 (hasExternalUses)
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7 (hasExternalUses)
%9:i32 = lshr %8, 26:i32
%10:i32 = add %1, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = mulnw 5:i32, %11
%13:i32 = add %0, %12 (hasExternalUses)
%14:i32 = lshr %13, 26:i32
infer %14

; *****
; For LLVM instruction:
;  %44 = and i32 %42, 67108863
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5 (hasExternalUses)
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7 (hasExternalUses)
%9:i32 = lshr %8, 26:i32
%10:i32 = add %1, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = mulnw 5:i32, %11
%13:i32 = add %0, %12 (hasExternalUses)
%14:i32 = and 67108863:i32, %13
infer %14

; *****
; For LLVM instruction:
;  %45 = add nuw nsw i32 %43, %32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 67108863:i32, %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %0, 26:i32
%7:i32 = add %5, %6 (hasExternalUses)
%8:i32 = lshr %7, 26:i32
%9:i32 = add %4, %8 (hasExternalUses)
%10:i32 = lshr %9, 26:i32
%11:i32 = add %3, %10 (hasExternalUses)
%12:i32 = lshr %11, 26:i32
%13:i32 = mulnw 5:i32, %12
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = lshr %14, 26:i32
%16:i32 = addnw %1, %15
infer %16

; *****
; For LLVM instruction:
;  %46 = add nuw nsw i32 %44, 5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5 (hasExternalUses)
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7 (hasExternalUses)
%9:i32 = lshr %8, 26:i32
%10:i32 = add %1, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = mulnw 5:i32, %11
%13:i32 = add %0, %12 (hasExternalUses)
%14:i32 = and 67108863:i32, %13 (hasExternalUses)
%15:i32 = addnw 5:i32, %14
infer %15

; *****
; For LLVM instruction:
;  %47 = lshr i32 %46, 26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5 (hasExternalUses)
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7 (hasExternalUses)
%9:i32 = lshr %8, 26:i32
%10:i32 = add %1, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = mulnw 5:i32, %11
%13:i32 = add %0, %12 (hasExternalUses)
%14:i32 = and 67108863:i32, %13 (hasExternalUses)
%15:i32 = addnw 5:i32, %14 (hasExternalUses)
%16:i32 = lshr %15, 26:i32
infer %16

; *****
; For LLVM instruction:
;  %48 = add nuw nsw i32 %47, %45
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 67108863:i32, %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %0, 26:i32
%7:i32 = add %5, %6 (hasExternalUses)
%8:i32 = lshr %7, 26:i32
%9:i32 = add %4, %8 (hasExternalUses)
%10:i32 = lshr %9, 26:i32
%11:i32 = add %3, %10 (hasExternalUses)
%12:i32 = lshr %11, 26:i32
%13:i32 = mulnw 5:i32, %12
%14:i32 = add %2, %13
%15:i32 = lshr %14, 26:i32
%16:i32 = addnw %1, %15 (hasExternalUses)
%17:i32 = and 67108863:i32, %14 (hasExternalUses)
%18:i32 = addnw 5:i32, %17 (hasExternalUses)
%19:i32 = lshr %18, 26:i32
%20:i32 = addnw %16, %19
infer %20

; *****
; For LLVM instruction:
;  %49 = lshr i32 %48, 26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 67108863:i32, %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %0, 26:i32
%7:i32 = add %5, %6 (hasExternalUses)
%8:i32 = lshr %7, 26:i32
%9:i32 = add %4, %8 (hasExternalUses)
%10:i32 = lshr %9, 26:i32
%11:i32 = add %3, %10 (hasExternalUses)
%12:i32 = lshr %11, 26:i32
%13:i32 = mulnw 5:i32, %12
%14:i32 = add %2, %13
%15:i32 = lshr %14, 26:i32
%16:i32 = addnw %1, %15 (hasExternalUses)
%17:i32 = and 67108863:i32, %14 (hasExternalUses)
%18:i32 = addnw 5:i32, %17 (hasExternalUses)
%19:i32 = lshr %18, 26:i32
%20:i32 = addnw %16, %19 (hasExternalUses)
%21:i32 = lshr %20, 26:i32
infer %21

; *****
; For LLVM instruction:
;  %50 = add nuw nsw i32 %49, %35
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2
%4:i32 = and 67108863:i32, %3 (hasExternalUses)
%5:i32 = and 67108863:i32, %1
%6:i32 = var
%7:i32 = var
%8:i32 = var
%9:i32 = lshr %3, 26:i32
%10:i32 = add %8, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = add %7, %11 (hasExternalUses)
%13:i32 = lshr %12, 26:i32
%14:i32 = mulnw 5:i32, %13
%15:i32 = add %6, %14
%16:i32 = lshr %15, 26:i32
%17:i32 = addnw %5, %16 (hasExternalUses)
%18:i32 = and 67108863:i32, %15 (hasExternalUses)
%19:i32 = addnw 5:i32, %18 (hasExternalUses)
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %17, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %4, %22
infer %23 (demandedBits=11111100000000000000000000000000)

; *****
; For LLVM instruction:
;  %51 = lshr i32 %50, 26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2
%4:i32 = and 67108863:i32, %3 (hasExternalUses)
%5:i32 = and 67108863:i32, %1
%6:i32 = var
%7:i32 = var
%8:i32 = var
%9:i32 = lshr %3, 26:i32
%10:i32 = add %8, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = add %7, %11 (hasExternalUses)
%13:i32 = lshr %12, 26:i32
%14:i32 = mulnw 5:i32, %13
%15:i32 = add %6, %14
%16:i32 = lshr %15, 26:i32
%17:i32 = addnw %5, %16 (hasExternalUses)
%18:i32 = and 67108863:i32, %15 (hasExternalUses)
%19:i32 = addnw 5:i32, %18 (hasExternalUses)
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %17, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %4, %22
%24:i32 = lshr %23, 26:i32
infer %24

; *****
; For LLVM instruction:
;  %52 = add nuw nsw i32 %51, %38
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5
%7:i32 = and 67108863:i32, %6 (hasExternalUses)
%8:i32 = and 67108863:i32, %4 (hasExternalUses)
%9:i32 = and 67108863:i32, %2
%10:i32 = var
%11:i32 = var
%12:i32 = lshr %6, 26:i32
%13:i32 = add %11, %12 (hasExternalUses)
%14:i32 = lshr %13, 26:i32
%15:i32 = mulnw 5:i32, %14
%16:i32 = add %10, %15
%17:i32 = lshr %16, 26:i32
%18:i32 = addnw %9, %17 (hasExternalUses)
%19:i32 = and 67108863:i32, %16 (hasExternalUses)
%20:i32 = addnw 5:i32, %19 (hasExternalUses)
%21:i32 = lshr %20, 26:i32
%22:i32 = addnw %18, %21 (hasExternalUses)
%23:i32 = lshr %22, 26:i32
%24:i32 = addnw %8, %23
%25:i32 = lshr %24, 26:i32
%26:i32 = addnw %7, %25
infer %26 (demandedBits=11111100000000000000000000000000)

; *****
; For LLVM instruction:
;  %53 = lshr i32 %52, 26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5
%7:i32 = and 67108863:i32, %6 (hasExternalUses)
%8:i32 = and 67108863:i32, %4 (hasExternalUses)
%9:i32 = and 67108863:i32, %2
%10:i32 = var
%11:i32 = var
%12:i32 = lshr %6, 26:i32
%13:i32 = add %11, %12 (hasExternalUses)
%14:i32 = lshr %13, 26:i32
%15:i32 = mulnw 5:i32, %14
%16:i32 = add %10, %15
%17:i32 = lshr %16, 26:i32
%18:i32 = addnw %9, %17 (hasExternalUses)
%19:i32 = and 67108863:i32, %16 (hasExternalUses)
%20:i32 = addnw 5:i32, %19 (hasExternalUses)
%21:i32 = lshr %20, 26:i32
%22:i32 = addnw %18, %21 (hasExternalUses)
%23:i32 = lshr %22, 26:i32
%24:i32 = addnw %8, %23
%25:i32 = lshr %24, 26:i32
%26:i32 = addnw %7, %25
%27:i32 = lshr %26, 26:i32
infer %27

; *****
; For LLVM instruction:
;  %54 = or i32 %39, -67108864
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4 (hasExternalUses)
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6 (hasExternalUses)
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = or 4227858432:i32, %9
infer %10

; *****
; For LLVM instruction:
;  %55 = add nsw i32 %54, %53
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28
infer %29 (demandedBits=10000000000000000000000000000000)

; *****
; For LLVM instruction:
;  %56 = lshr i32 %55, 31
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
infer %30 (demandedBits=00000011111111111111111111111111)

; *****
; For LLVM instruction:
;  %57 = add nsw i32 %56, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30
infer %31 (demandedBits=00000011111111111111111111111111)

; *****
; For LLVM instruction:
;  %58 = and i32 %57, 67108863
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30
%32:i32 = and 67108863:i32, %31
infer %32 (demandedBits=00001111111111111111111111111111)

; *****
; For LLVM instruction:
;  %59 = and i32 %58, %46
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %1, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = mulnw 5:i32, %11
%13:i32 = add %0, %12
%14:i32 = and 67108863:i32, %13 (hasExternalUses)
%15:i32 = addnw 5:i32, %14
%16:i32 = or 4227858432:i32, %10
%17:i32 = and 67108863:i32, %8 (hasExternalUses)
%18:i32 = and 67108863:i32, %6 (hasExternalUses)
%19:i32 = and 67108863:i32, %4
%20:i32 = lshr %13, 26:i32
%21:i32 = addnw %19, %20 (hasExternalUses)
%22:i32 = lshr %15, 26:i32
%23:i32 = addnw %21, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %18, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %17, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %16, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %15, %32
infer %33

; *****
; For LLVM instruction:
;  %60 = and i32 %58, %48
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 67108863:i32, %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %0, 26:i32
%7:i32 = add %5, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %4, %8
%10:i32 = lshr %9, 26:i32
%11:i32 = add %3, %10 (hasExternalUses)
%12:i32 = lshr %11, 26:i32
%13:i32 = mulnw 5:i32, %12
%14:i32 = add %2, %13
%15:i32 = lshr %14, 26:i32
%16:i32 = addnw %1, %15 (hasExternalUses)
%17:i32 = and 67108863:i32, %14 (hasExternalUses)
%18:i32 = addnw 5:i32, %17 (hasExternalUses)
%19:i32 = lshr %18, 26:i32
%20:i32 = addnw %16, %19
%21:i32 = or 4227858432:i32, %11
%22:i32 = and 67108863:i32, %9 (hasExternalUses)
%23:i32 = and 67108863:i32, %7 (hasExternalUses)
%24:i32 = lshr %20, 26:i32
%25:i32 = addnw %23, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %22, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %21, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %20, %32
infer %33

; *****
; For LLVM instruction:
;  %61 = ashr i32 %55, 31
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32
infer %30 (demandedBits=00000111111111111111111111111111)

; *****
; For LLVM instruction:
;  %62 = and i32 %61, %44
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %1, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = mulnw 5:i32, %11
%13:i32 = add %0, %12
%14:i32 = and 67108863:i32, %13
%15:i32 = or 4227858432:i32, %10
%16:i32 = and 67108863:i32, %8 (hasExternalUses)
%17:i32 = and 67108863:i32, %6 (hasExternalUses)
%18:i32 = and 67108863:i32, %4
%19:i32 = lshr %13, 26:i32
%20:i32 = addnw %18, %19 (hasExternalUses)
%21:i32 = addnw 5:i32, %14 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %20, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %17, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %16, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %15, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %14, %30
infer %31

; *****
; For LLVM instruction:
;  %63 = or i32 %62, %59
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %1, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = mulnw 5:i32, %11
%13:i32 = add %0, %12
%14:i32 = and 67108863:i32, %13
%15:i32 = addnw 5:i32, %14
%16:i32 = or 4227858432:i32, %10
%17:i32 = and 67108863:i32, %8 (hasExternalUses)
%18:i32 = and 67108863:i32, %6 (hasExternalUses)
%19:i32 = and 67108863:i32, %4
%20:i32 = lshr %13, 26:i32
%21:i32 = addnw %19, %20 (hasExternalUses)
%22:i32 = lshr %15, 26:i32
%23:i32 = addnw %21, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %18, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %17, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %16, %28
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %15, %32
%34:i32 = ashr %29, 31:i32 (hasExternalUses)
%35:i32 = and %14, %34
%36:i32 = or %33, %35
infer %36

; *****
; For LLVM instruction:
;  %64 = and i32 %61, %45
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 67108863:i32, %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %0, 26:i32
%7:i32 = add %5, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %4, %8
%10:i32 = lshr %9, 26:i32
%11:i32 = add %3, %10 (hasExternalUses)
%12:i32 = lshr %11, 26:i32
%13:i32 = mulnw 5:i32, %12
%14:i32 = add %2, %13
%15:i32 = lshr %14, 26:i32
%16:i32 = addnw %1, %15
%17:i32 = or 4227858432:i32, %11
%18:i32 = and 67108863:i32, %9 (hasExternalUses)
%19:i32 = and 67108863:i32, %7 (hasExternalUses)
%20:i32 = and 67108863:i32, %14 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %16, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %19, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %18, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %17, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %16, %30
infer %31

; *****
; For LLVM instruction:
;  %65 = or i32 %64, %60
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 67108863:i32, %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %0, 26:i32
%7:i32 = add %5, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %4, %8
%10:i32 = lshr %9, 26:i32
%11:i32 = add %3, %10 (hasExternalUses)
%12:i32 = lshr %11, 26:i32
%13:i32 = mulnw 5:i32, %12
%14:i32 = add %2, %13
%15:i32 = lshr %14, 26:i32
%16:i32 = addnw %1, %15
%17:i32 = and 67108863:i32, %14 (hasExternalUses)
%18:i32 = addnw 5:i32, %17 (hasExternalUses)
%19:i32 = lshr %18, 26:i32
%20:i32 = addnw %16, %19
%21:i32 = or 4227858432:i32, %11
%22:i32 = and 67108863:i32, %9 (hasExternalUses)
%23:i32 = and 67108863:i32, %7 (hasExternalUses)
%24:i32 = lshr %20, 26:i32
%25:i32 = addnw %23, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %22, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %21, %28
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %20, %32
%34:i32 = ashr %29, 31:i32 (hasExternalUses)
%35:i32 = and %16, %34
%36:i32 = or %33, %35
infer %36

; *****
; For LLVM instruction:
;  %66 = and i32 %61, %35
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2
%4:i32 = and 67108863:i32, %3
%5:i32 = var
%6:i32 = var
%7:i32 = lshr %3, 26:i32
%8:i32 = add %6, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %5, %9 (hasExternalUses)
%11:i32 = or 4227858432:i32, %10
%12:i32 = and 67108863:i32, %8 (hasExternalUses)
%13:i32 = and 67108863:i32, %1
%14:i32 = var
%15:i32 = lshr %10, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %4, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %12, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %11, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %4, %30
infer %31

; *****
; For LLVM instruction:
;  %67 = or i32 %66, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2
%4:i32 = and 67108863:i32, %3
%5:i32 = var
%6:i32 = var
%7:i32 = lshr %3, 26:i32
%8:i32 = add %6, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %5, %9 (hasExternalUses)
%11:i32 = or 4227858432:i32, %10
%12:i32 = and 67108863:i32, %8 (hasExternalUses)
%13:i32 = and 67108863:i32, %1
%14:i32 = var
%15:i32 = lshr %10, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %4, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %12, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %11, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %4, %30
%32:i32 = or 0:i32, %31
infer %32

; *****
; For LLVM instruction:
;  %68 = and i32 %61, %38
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5
%7:i32 = and 67108863:i32, %6
%8:i32 = var
%9:i32 = lshr %6, 26:i32
%10:i32 = add %8, %9 (hasExternalUses)
%11:i32 = or 4227858432:i32, %10
%12:i32 = and 67108863:i32, %4 (hasExternalUses)
%13:i32 = and 67108863:i32, %2
%14:i32 = var
%15:i32 = lshr %10, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %7, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %11, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %7, %30
infer %31

; *****
; For LLVM instruction:
;  %69 = or i32 %68, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5
%7:i32 = and 67108863:i32, %6
%8:i32 = var
%9:i32 = lshr %6, 26:i32
%10:i32 = add %8, %9 (hasExternalUses)
%11:i32 = or 4227858432:i32, %10
%12:i32 = and 67108863:i32, %4 (hasExternalUses)
%13:i32 = and 67108863:i32, %2
%14:i32 = var
%15:i32 = lshr %10, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %7, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %11, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %7, %30
%32:i32 = or 0:i32, %31
infer %32

; *****
; For LLVM instruction:
;  %70 = and i32 %61, %39
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %9, %30
infer %31 (demandedBits=00000000111111111111111111111111)

; *****
; For LLVM instruction:
;  %71 = or i32 0, %70
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %9, %30
%32:i32 = or 0:i32, %31
infer %32 (demandedBits=00000000111111111111111111111111)

; *****
; For LLVM instruction:
;  %72 = shl i32 %65, 26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 67108863:i32, %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %0, 26:i32
%7:i32 = add %5, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %4, %8
%10:i32 = lshr %9, 26:i32
%11:i32 = add %3, %10 (hasExternalUses)
%12:i32 = lshr %11, 26:i32
%13:i32 = mulnw 5:i32, %12
%14:i32 = add %2, %13
%15:i32 = lshr %14, 26:i32
%16:i32 = addnw %1, %15
%17:i32 = and 67108863:i32, %14 (hasExternalUses)
%18:i32 = addnw 5:i32, %17 (hasExternalUses)
%19:i32 = lshr %18, 26:i32
%20:i32 = addnw %16, %19
%21:i32 = or 4227858432:i32, %11
%22:i32 = and 67108863:i32, %9 (hasExternalUses)
%23:i32 = and 67108863:i32, %7 (hasExternalUses)
%24:i32 = lshr %20, 26:i32
%25:i32 = addnw %23, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %22, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %21, %28
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %20, %32
%34:i32 = ashr %29, 31:i32 (hasExternalUses)
%35:i32 = and %16, %34
%36:i32 = or %33, %35 (hasExternalUses)
%37:i32 = shl %36, 26:i32
infer %37

; *****
; For LLVM instruction:
;  %73 = or i32 %63, %72
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %1, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = mulnw 5:i32, %11
%13:i32 = add %0, %12
%14:i32 = and 67108863:i32, %13
%15:i32 = addnw 5:i32, %14
%16:i32 = or 4227858432:i32, %10
%17:i32 = and 67108863:i32, %8 (hasExternalUses)
%18:i32 = and 67108863:i32, %6 (hasExternalUses)
%19:i32 = and 67108863:i32, %4
%20:i32 = lshr %13, 26:i32
%21:i32 = addnw %19, %20
%22:i32 = lshr %15, 26:i32
%23:i32 = addnw %21, %22
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %18, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %17, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %16, %28
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30
%32:i32 = and 67108863:i32, %31
%33:i32 = and %15, %32
%34:i32 = ashr %29, 31:i32 (hasExternalUses)
%35:i32 = and %14, %34
%36:i32 = or %33, %35
%37:i32 = and %23, %32
%38:i32 = and %21, %34
%39:i32 = or %37, %38 (hasExternalUses)
%40:i32 = shl %39, 26:i32
%41:i32 = or %36, %40
infer %41

; *****
; For LLVM instruction:
;  %74 = lshr i32 %65, 6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 67108863:i32, %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %0, 26:i32
%7:i32 = add %5, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %4, %8
%10:i32 = lshr %9, 26:i32
%11:i32 = add %3, %10 (hasExternalUses)
%12:i32 = lshr %11, 26:i32
%13:i32 = mulnw 5:i32, %12
%14:i32 = add %2, %13
%15:i32 = lshr %14, 26:i32
%16:i32 = addnw %1, %15
%17:i32 = and 67108863:i32, %14 (hasExternalUses)
%18:i32 = addnw 5:i32, %17 (hasExternalUses)
%19:i32 = lshr %18, 26:i32
%20:i32 = addnw %16, %19
%21:i32 = or 4227858432:i32, %11
%22:i32 = and 67108863:i32, %9 (hasExternalUses)
%23:i32 = and 67108863:i32, %7 (hasExternalUses)
%24:i32 = lshr %20, 26:i32
%25:i32 = addnw %23, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %22, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %21, %28
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %20, %32
%34:i32 = ashr %29, 31:i32 (hasExternalUses)
%35:i32 = and %16, %34
%36:i32 = or %33, %35 (hasExternalUses)
%37:i32 = lshr %36, 6:i32
infer %37

; *****
; For LLVM instruction:
;  %75 = shl i32 %67, 20
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2
%4:i32 = and 67108863:i32, %3
%5:i32 = var
%6:i32 = var
%7:i32 = lshr %3, 26:i32
%8:i32 = add %6, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %5, %9 (hasExternalUses)
%11:i32 = or 4227858432:i32, %10
%12:i32 = and 67108863:i32, %8 (hasExternalUses)
%13:i32 = and 67108863:i32, %1
%14:i32 = var
%15:i32 = lshr %10, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %4, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %12, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %11, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %4, %30
%32:i32 = or 0:i32, %31 (hasExternalUses)
%33:i32 = shl %32, 20:i32
infer %33

; *****
; For LLVM instruction:
;  %76 = or i32 %74, %75
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2
%4:i32 = and 67108863:i32, %3
%5:i32 = var
%6:i32 = var
%7:i32 = lshr %3, 26:i32
%8:i32 = add %6, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %5, %9 (hasExternalUses)
%11:i32 = or 4227858432:i32, %10
%12:i32 = and 67108863:i32, %8 (hasExternalUses)
%13:i32 = and 67108863:i32, %1
%14:i32 = var
%15:i32 = lshr %10, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %4, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %12, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %11, %28
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %4, %30
%32:i32 = or 0:i32, %31 (hasExternalUses)
%33:i32 = shl %32, 20:i32
%34:i32 = lshr %29, 31:i32
%35:i32 = addnsw 4294967295:i32, %34
%36:i32 = and 67108863:i32, %35 (hasExternalUses)
%37:i32 = and %23, %36
%38:i32 = and %19, %30
%39:i32 = or %37, %38 (hasExternalUses)
%40:i32 = lshr %39, 6:i32
%41:i32 = or %33, %40
infer %41

; *****
; For LLVM instruction:
;  %77 = lshr i32 %67, 12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2
%4:i32 = and 67108863:i32, %3
%5:i32 = var
%6:i32 = var
%7:i32 = lshr %3, 26:i32
%8:i32 = add %6, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %5, %9 (hasExternalUses)
%11:i32 = or 4227858432:i32, %10
%12:i32 = and 67108863:i32, %8 (hasExternalUses)
%13:i32 = and 67108863:i32, %1
%14:i32 = var
%15:i32 = lshr %10, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %4, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %12, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %11, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %4, %30
%32:i32 = or 0:i32, %31 (hasExternalUses)
%33:i32 = lshr %32, 12:i32
infer %33

; *****
; For LLVM instruction:
;  %78 = shl i32 %69, 14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5
%7:i32 = and 67108863:i32, %6
%8:i32 = var
%9:i32 = lshr %6, 26:i32
%10:i32 = add %8, %9 (hasExternalUses)
%11:i32 = or 4227858432:i32, %10
%12:i32 = and 67108863:i32, %4 (hasExternalUses)
%13:i32 = and 67108863:i32, %2
%14:i32 = var
%15:i32 = lshr %10, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %7, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %11, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %7, %30
%32:i32 = or 0:i32, %31 (hasExternalUses)
%33:i32 = shl %32, 14:i32
infer %33

; *****
; For LLVM instruction:
;  %79 = or i32 %77, %78
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5
%7:i32 = and 67108863:i32, %6
%8:i32 = var
%9:i32 = lshr %6, 26:i32
%10:i32 = add %8, %9 (hasExternalUses)
%11:i32 = or 4227858432:i32, %10
%12:i32 = and 67108863:i32, %4
%13:i32 = and 67108863:i32, %2
%14:i32 = var
%15:i32 = lshr %10, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %7, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %11, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %7, %30
%32:i32 = or 0:i32, %31 (hasExternalUses)
%33:i32 = shl %32, 14:i32
%34:i32 = and %12, %30
%35:i32 = or 0:i32, %34 (hasExternalUses)
%36:i32 = lshr %35, 12:i32
%37:i32 = or %33, %36
infer %37

; *****
; For LLVM instruction:
;  %80 = lshr i32 %69, 18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5
%7:i32 = and 67108863:i32, %6
%8:i32 = var
%9:i32 = lshr %6, 26:i32
%10:i32 = add %8, %9 (hasExternalUses)
%11:i32 = or 4227858432:i32, %10
%12:i32 = and 67108863:i32, %4 (hasExternalUses)
%13:i32 = and 67108863:i32, %2
%14:i32 = var
%15:i32 = lshr %10, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %7, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %11, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %7, %30
%32:i32 = or 0:i32, %31 (hasExternalUses)
%33:i32 = lshr %32, 18:i32
infer %33

; *****
; For LLVM instruction:
;  %81 = shl i32 %71, 8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %9, %30
%32:i32 = or 0:i32, %31
%33:i32 = shl %32, 8:i32
infer %33

; *****
; For LLVM instruction:
;  %82 = or i32 %81, %80
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %9, %30
%32:i32 = or 0:i32, %31
%33:i32 = shl %32, 8:i32
%34:i32 = and %11, %30
%35:i32 = or 0:i32, %34 (hasExternalUses)
%36:i32 = lshr %35, 18:i32
%37:i32 = or %33, %36
infer %37

; *****
; For LLVM instruction:
;  %83 = zext i32 %73 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %1, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = mulnw 5:i32, %11
%13:i32 = add %0, %12
%14:i32 = and 67108863:i32, %13
%15:i32 = addnw 5:i32, %14
%16:i32 = or 4227858432:i32, %10
%17:i32 = and 67108863:i32, %8 (hasExternalUses)
%18:i32 = and 67108863:i32, %6 (hasExternalUses)
%19:i32 = and 67108863:i32, %4
%20:i32 = lshr %13, 26:i32
%21:i32 = addnw %19, %20
%22:i32 = lshr %15, 26:i32
%23:i32 = addnw %21, %22
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %18, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %17, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %16, %28
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30
%32:i32 = and 67108863:i32, %31
%33:i32 = and %15, %32
%34:i32 = ashr %29, 31:i32 (hasExternalUses)
%35:i32 = and %14, %34
%36:i32 = or %33, %35
%37:i32 = and %23, %32
%38:i32 = and %21, %34
%39:i32 = or %37, %38 (hasExternalUses)
%40:i32 = shl %39, 26:i32
%41:i32 = or %36, %40
%42:i64 = zext %41
infer %42

; *****
; For LLVM instruction:
;  %85 = load i32, i32* %84, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %86 = zext i32 %85 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %87 = add nuw nsw i64 %83, %86
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = var
%7:i32 = lshr %6, 26:i32
%8:i32 = add %5, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %4, %9
%11:i32 = lshr %10, 26:i32
%12:i32 = add %3, %11 (hasExternalUses)
%13:i32 = lshr %12, 26:i32
%14:i32 = mulnw 5:i32, %13
%15:i32 = add %2, %14
%16:i32 = and 67108863:i32, %15
%17:i32 = addnw 5:i32, %16
%18:i32 = or 4227858432:i32, %12
%19:i32 = and 67108863:i32, %10 (hasExternalUses)
%20:i32 = and 67108863:i32, %8 (hasExternalUses)
%21:i32 = and 67108863:i32, %6
%22:i32 = lshr %15, 26:i32
%23:i32 = addnw %21, %22
%24:i32 = lshr %17, 26:i32
%25:i32 = addnw %23, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %20, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %19, %28
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %18, %30
%32:i32 = lshr %31, 31:i32
%33:i32 = addnsw 4294967295:i32, %32
%34:i32 = and 67108863:i32, %33
%35:i32 = and %17, %34
%36:i32 = ashr %31, 31:i32 (hasExternalUses)
%37:i32 = and %16, %36
%38:i32 = or %35, %37
%39:i32 = and %25, %34
%40:i32 = and %23, %36
%41:i32 = or %39, %40 (hasExternalUses)
%42:i32 = shl %41, 26:i32
%43:i32 = or %38, %42
%44:i64 = zext %43
%45:i64 = addnw %1, %44
infer %45

; *****
; For LLVM instruction:
;  %88 = trunc i64 %87 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = var
%7:i32 = lshr %6, 26:i32
%8:i32 = add %5, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %4, %9
%11:i32 = lshr %10, 26:i32
%12:i32 = add %3, %11 (hasExternalUses)
%13:i32 = lshr %12, 26:i32
%14:i32 = mulnw 5:i32, %13
%15:i32 = add %2, %14
%16:i32 = and 67108863:i32, %15
%17:i32 = addnw 5:i32, %16
%18:i32 = or 4227858432:i32, %12
%19:i32 = and 67108863:i32, %10 (hasExternalUses)
%20:i32 = and 67108863:i32, %8 (hasExternalUses)
%21:i32 = and 67108863:i32, %6
%22:i32 = lshr %15, 26:i32
%23:i32 = addnw %21, %22
%24:i32 = lshr %17, 26:i32
%25:i32 = addnw %23, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %20, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %19, %28
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %18, %30
%32:i32 = lshr %31, 31:i32
%33:i32 = addnsw 4294967295:i32, %32
%34:i32 = and 67108863:i32, %33
%35:i32 = and %17, %34
%36:i32 = ashr %31, 31:i32 (hasExternalUses)
%37:i32 = and %16, %36
%38:i32 = or %35, %37
%39:i32 = and %25, %34
%40:i32 = and %23, %36
%41:i32 = or %39, %40 (hasExternalUses)
%42:i32 = shl %41, 26:i32
%43:i32 = or %38, %42
%44:i64 = zext %43
%45:i64 = addnw %1, %44 (hasExternalUses)
%46:i32 = trunc %45
infer %46

; *****
; For LLVM instruction:
;  %89 = zext i32 %76 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2
%4:i32 = and 67108863:i32, %3
%5:i32 = var
%6:i32 = var
%7:i32 = lshr %3, 26:i32
%8:i32 = add %6, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %5, %9 (hasExternalUses)
%11:i32 = or 4227858432:i32, %10
%12:i32 = and 67108863:i32, %8 (hasExternalUses)
%13:i32 = and 67108863:i32, %1
%14:i32 = var
%15:i32 = lshr %10, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %4, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %12, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %11, %28
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %4, %30
%32:i32 = or 0:i32, %31 (hasExternalUses)
%33:i32 = shl %32, 20:i32
%34:i32 = lshr %29, 31:i32
%35:i32 = addnsw 4294967295:i32, %34
%36:i32 = and 67108863:i32, %35 (hasExternalUses)
%37:i32 = and %23, %36
%38:i32 = and %19, %30
%39:i32 = or %37, %38 (hasExternalUses)
%40:i32 = lshr %39, 6:i32
%41:i32 = or %33, %40
%42:i64 = zext %41
infer %42

; *****
; For LLVM instruction:
;  %91 = load i32, i32* %90, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %92 = zext i32 %91 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %93 = add nuw nsw i64 %89, %92
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = and 67108863:i32, %5
%7:i32 = var
%8:i32 = var
%9:i32 = lshr %5, 26:i32
%10:i32 = add %8, %9
%11:i32 = lshr %10, 26:i32
%12:i32 = add %7, %11 (hasExternalUses)
%13:i32 = or 4227858432:i32, %12
%14:i32 = and 67108863:i32, %10 (hasExternalUses)
%15:i32 = and 67108863:i32, %3
%16:i32 = var
%17:i32 = lshr %12, 26:i32
%18:i32 = mulnw 5:i32, %17
%19:i32 = add %16, %18
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %15, %20
%22:i32 = and 67108863:i32, %19 (hasExternalUses)
%23:i32 = addnw 5:i32, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %21, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %6, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %14, %28
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %13, %30
%32:i32 = ashr %31, 31:i32 (hasExternalUses)
%33:i32 = and %6, %32
%34:i32 = or 0:i32, %33 (hasExternalUses)
%35:i32 = shl %34, 20:i32
%36:i32 = lshr %31, 31:i32
%37:i32 = addnsw 4294967295:i32, %36
%38:i32 = and 67108863:i32, %37 (hasExternalUses)
%39:i32 = and %25, %38
%40:i32 = and %21, %32
%41:i32 = or %39, %40 (hasExternalUses)
%42:i32 = lshr %41, 6:i32
%43:i32 = or %35, %42
%44:i64 = zext %43
%45:i64 = addnw %1, %44
infer %45

; *****
; For LLVM instruction:
;  %94 = lshr i64 %87, 32
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = var
%7:i32 = lshr %6, 26:i32
%8:i32 = add %5, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %4, %9
%11:i32 = lshr %10, 26:i32
%12:i32 = add %3, %11 (hasExternalUses)
%13:i32 = lshr %12, 26:i32
%14:i32 = mulnw 5:i32, %13
%15:i32 = add %2, %14
%16:i32 = and 67108863:i32, %15
%17:i32 = addnw 5:i32, %16
%18:i32 = or 4227858432:i32, %12
%19:i32 = and 67108863:i32, %10 (hasExternalUses)
%20:i32 = and 67108863:i32, %8 (hasExternalUses)
%21:i32 = and 67108863:i32, %6
%22:i32 = lshr %15, 26:i32
%23:i32 = addnw %21, %22
%24:i32 = lshr %17, 26:i32
%25:i32 = addnw %23, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %20, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %19, %28
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %18, %30
%32:i32 = lshr %31, 31:i32
%33:i32 = addnsw 4294967295:i32, %32
%34:i32 = and 67108863:i32, %33
%35:i32 = and %17, %34
%36:i32 = ashr %31, 31:i32 (hasExternalUses)
%37:i32 = and %16, %36
%38:i32 = or %35, %37
%39:i32 = and %25, %34
%40:i32 = and %23, %36
%41:i32 = or %39, %40 (hasExternalUses)
%42:i32 = shl %41, 26:i32
%43:i32 = or %38, %42
%44:i64 = zext %43
%45:i64 = addnw %1, %44 (hasExternalUses)
%46:i64 = lshr %45, 32:i64
infer %46

; *****
; For LLVM instruction:
;  %95 = add nuw nsw i64 %93, %94
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = and 67108863:i32, %5
%7:i32 = var
%8:i32 = var
%9:i32 = lshr %5, 26:i32
%10:i32 = add %8, %9
%11:i32 = lshr %10, 26:i32
%12:i32 = add %7, %11 (hasExternalUses)
%13:i32 = or 4227858432:i32, %12
%14:i32 = and 67108863:i32, %10 (hasExternalUses)
%15:i32 = and 67108863:i32, %3
%16:i32 = var
%17:i32 = lshr %12, 26:i32
%18:i32 = mulnw 5:i32, %17
%19:i32 = add %16, %18
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %15, %20
%22:i32 = and 67108863:i32, %19
%23:i32 = addnw 5:i32, %22
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %21, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %6, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %14, %28
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %13, %30
%32:i32 = ashr %31, 31:i32 (hasExternalUses)
%33:i32 = and %6, %32
%34:i32 = or 0:i32, %33 (hasExternalUses)
%35:i32 = shl %34, 20:i32
%36:i32 = lshr %31, 31:i32
%37:i32 = addnsw 4294967295:i32, %36
%38:i32 = and 67108863:i32, %37
%39:i32 = and %25, %38
%40:i32 = and %21, %32
%41:i32 = or %39, %40
%42:i32 = lshr %41, 6:i32
%43:i32 = or %35, %42
%44:i64 = zext %43
%45:i64 = addnw %1, %44
%46:i32 = var
%47:i64 = zext %46
%48:i32 = and %23, %38
%49:i32 = and %22, %32
%50:i32 = or %48, %49
%51:i32 = shl %41, 26:i32
%52:i32 = or %50, %51
%53:i64 = zext %52
%54:i64 = addnw %47, %53 (hasExternalUses)
%55:i64 = lshr %54, 32:i64
%56:i64 = addnw %45, %55
infer %56

; *****
; For LLVM instruction:
;  %96 = trunc i64 %95 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = and 67108863:i32, %5
%7:i32 = var
%8:i32 = var
%9:i32 = lshr %5, 26:i32
%10:i32 = add %8, %9
%11:i32 = lshr %10, 26:i32
%12:i32 = add %7, %11 (hasExternalUses)
%13:i32 = or 4227858432:i32, %12
%14:i32 = and 67108863:i32, %10 (hasExternalUses)
%15:i32 = and 67108863:i32, %3
%16:i32 = var
%17:i32 = lshr %12, 26:i32
%18:i32 = mulnw 5:i32, %17
%19:i32 = add %16, %18
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %15, %20
%22:i32 = and 67108863:i32, %19
%23:i32 = addnw 5:i32, %22
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %21, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %6, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %14, %28
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %13, %30
%32:i32 = ashr %31, 31:i32 (hasExternalUses)
%33:i32 = and %6, %32
%34:i32 = or 0:i32, %33 (hasExternalUses)
%35:i32 = shl %34, 20:i32
%36:i32 = lshr %31, 31:i32
%37:i32 = addnsw 4294967295:i32, %36
%38:i32 = and 67108863:i32, %37
%39:i32 = and %25, %38
%40:i32 = and %21, %32
%41:i32 = or %39, %40
%42:i32 = lshr %41, 6:i32
%43:i32 = or %35, %42
%44:i64 = zext %43
%45:i64 = addnw %1, %44
%46:i32 = var
%47:i64 = zext %46
%48:i32 = and %23, %38
%49:i32 = and %22, %32
%50:i32 = or %48, %49
%51:i32 = shl %41, 26:i32
%52:i32 = or %50, %51
%53:i64 = zext %52
%54:i64 = addnw %47, %53 (hasExternalUses)
%55:i64 = lshr %54, 32:i64
%56:i64 = addnw %45, %55 (hasExternalUses)
%57:i32 = trunc %56
infer %57

; *****
; For LLVM instruction:
;  %97 = zext i32 %79 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5
%7:i32 = and 67108863:i32, %6
%8:i32 = var
%9:i32 = lshr %6, 26:i32
%10:i32 = add %8, %9 (hasExternalUses)
%11:i32 = or 4227858432:i32, %10
%12:i32 = and 67108863:i32, %4
%13:i32 = and 67108863:i32, %2
%14:i32 = var
%15:i32 = lshr %10, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %7, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %11, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %7, %30
%32:i32 = or 0:i32, %31 (hasExternalUses)
%33:i32 = shl %32, 14:i32
%34:i32 = and %12, %30
%35:i32 = or 0:i32, %34 (hasExternalUses)
%36:i32 = lshr %35, 12:i32
%37:i32 = or %33, %36
%38:i64 = zext %37
infer %38

; *****
; For LLVM instruction:
;  %99 = load i32, i32* %98, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %100 = zext i32 %99 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %101 = add nuw nsw i64 %97, %100
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7
%9:i32 = and 67108863:i32, %8
%10:i32 = var
%11:i32 = lshr %8, 26:i32
%12:i32 = add %10, %11 (hasExternalUses)
%13:i32 = or 4227858432:i32, %12
%14:i32 = and 67108863:i32, %6
%15:i32 = and 67108863:i32, %4
%16:i32 = var
%17:i32 = lshr %12, 26:i32
%18:i32 = mulnw 5:i32, %17
%19:i32 = add %16, %18
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %15, %20 (hasExternalUses)
%22:i32 = and 67108863:i32, %19 (hasExternalUses)
%23:i32 = addnw 5:i32, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %21, %24 (hasExternalUses)
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %14, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %9, %28
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %13, %30 (hasExternalUses)
%32:i32 = ashr %31, 31:i32 (hasExternalUses)
%33:i32 = and %9, %32
%34:i32 = or 0:i32, %33 (hasExternalUses)
%35:i32 = shl %34, 14:i32
%36:i32 = and %14, %32
%37:i32 = or 0:i32, %36 (hasExternalUses)
%38:i32 = lshr %37, 12:i32
%39:i32 = or %35, %38
%40:i64 = zext %39
%41:i64 = addnw %1, %40
infer %41

; *****
; For LLVM instruction:
;  %102 = lshr i64 %95, 32
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = and 67108863:i32, %5
%7:i32 = var
%8:i32 = var
%9:i32 = lshr %5, 26:i32
%10:i32 = add %8, %9
%11:i32 = lshr %10, 26:i32
%12:i32 = add %7, %11 (hasExternalUses)
%13:i32 = or 4227858432:i32, %12
%14:i32 = and 67108863:i32, %10 (hasExternalUses)
%15:i32 = and 67108863:i32, %3
%16:i32 = var
%17:i32 = lshr %12, 26:i32
%18:i32 = mulnw 5:i32, %17
%19:i32 = add %16, %18
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %15, %20
%22:i32 = and 67108863:i32, %19
%23:i32 = addnw 5:i32, %22
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %21, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %6, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %14, %28
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %13, %30
%32:i32 = ashr %31, 31:i32 (hasExternalUses)
%33:i32 = and %6, %32
%34:i32 = or 0:i32, %33 (hasExternalUses)
%35:i32 = shl %34, 20:i32
%36:i32 = lshr %31, 31:i32
%37:i32 = addnsw 4294967295:i32, %36
%38:i32 = and 67108863:i32, %37
%39:i32 = and %25, %38
%40:i32 = and %21, %32
%41:i32 = or %39, %40
%42:i32 = lshr %41, 6:i32
%43:i32 = or %35, %42
%44:i64 = zext %43
%45:i64 = addnw %1, %44
%46:i32 = var
%47:i64 = zext %46
%48:i32 = and %23, %38
%49:i32 = and %22, %32
%50:i32 = or %48, %49
%51:i32 = shl %41, 26:i32
%52:i32 = or %50, %51
%53:i64 = zext %52
%54:i64 = addnw %47, %53 (hasExternalUses)
%55:i64 = lshr %54, 32:i64
%56:i64 = addnw %45, %55 (hasExternalUses)
%57:i64 = lshr %56, 32:i64
infer %57

; *****
; For LLVM instruction:
;  %103 = add nuw nsw i64 %101, %102
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7
%9:i32 = and 67108863:i32, %8
%10:i32 = var
%11:i32 = lshr %8, 26:i32
%12:i32 = add %10, %11 (hasExternalUses)
%13:i32 = or 4227858432:i32, %12
%14:i32 = and 67108863:i32, %6
%15:i32 = and 67108863:i32, %4
%16:i32 = var
%17:i32 = lshr %12, 26:i32
%18:i32 = mulnw 5:i32, %17
%19:i32 = add %16, %18
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %15, %20
%22:i32 = and 67108863:i32, %19
%23:i32 = addnw 5:i32, %22
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %21, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %14, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %9, %28
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %13, %30
%32:i32 = ashr %31, 31:i32 (hasExternalUses)
%33:i32 = and %9, %32
%34:i32 = or 0:i32, %33 (hasExternalUses)
%35:i32 = shl %34, 14:i32
%36:i32 = and %14, %32
%37:i32 = or 0:i32, %36
%38:i32 = lshr %37, 12:i32
%39:i32 = or %35, %38
%40:i64 = zext %39
%41:i64 = addnw %1, %40
%42:i32 = var
%43:i64 = zext %42
%44:i32 = shl %37, 20:i32
%45:i32 = lshr %31, 31:i32
%46:i32 = addnsw 4294967295:i32, %45
%47:i32 = and 67108863:i32, %46
%48:i32 = and %25, %47
%49:i32 = and %21, %32
%50:i32 = or %48, %49
%51:i32 = lshr %50, 6:i32
%52:i32 = or %44, %51
%53:i64 = zext %52
%54:i64 = addnw %43, %53
%55:i32 = var
%56:i64 = zext %55
%57:i32 = and %23, %47
%58:i32 = and %22, %32
%59:i32 = or %57, %58
%60:i32 = shl %50, 26:i32
%61:i32 = or %59, %60
%62:i64 = zext %61
%63:i64 = addnw %56, %62 (hasExternalUses)
%64:i64 = lshr %63, 32:i64
%65:i64 = addnw %54, %64 (hasExternalUses)
%66:i64 = lshr %65, 32:i64
%67:i64 = addnw %41, %66
infer %67

; *****
; For LLVM instruction:
;  %104 = trunc i64 %103 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7
%9:i32 = and 67108863:i32, %8
%10:i32 = var
%11:i32 = lshr %8, 26:i32
%12:i32 = add %10, %11 (hasExternalUses)
%13:i32 = or 4227858432:i32, %12
%14:i32 = and 67108863:i32, %6
%15:i32 = and 67108863:i32, %4
%16:i32 = var
%17:i32 = lshr %12, 26:i32
%18:i32 = mulnw 5:i32, %17
%19:i32 = add %16, %18
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %15, %20
%22:i32 = and 67108863:i32, %19
%23:i32 = addnw 5:i32, %22
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %21, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %14, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %9, %28
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %13, %30
%32:i32 = ashr %31, 31:i32 (hasExternalUses)
%33:i32 = and %9, %32
%34:i32 = or 0:i32, %33 (hasExternalUses)
%35:i32 = shl %34, 14:i32
%36:i32 = and %14, %32
%37:i32 = or 0:i32, %36
%38:i32 = lshr %37, 12:i32
%39:i32 = or %35, %38
%40:i64 = zext %39
%41:i64 = addnw %1, %40
%42:i32 = var
%43:i64 = zext %42
%44:i32 = shl %37, 20:i32
%45:i32 = lshr %31, 31:i32
%46:i32 = addnsw 4294967295:i32, %45
%47:i32 = and 67108863:i32, %46
%48:i32 = and %25, %47
%49:i32 = and %21, %32
%50:i32 = or %48, %49
%51:i32 = lshr %50, 6:i32
%52:i32 = or %44, %51
%53:i64 = zext %52
%54:i64 = addnw %43, %53
%55:i32 = var
%56:i64 = zext %55
%57:i32 = and %23, %47
%58:i32 = and %22, %32
%59:i32 = or %57, %58
%60:i32 = shl %50, 26:i32
%61:i32 = or %59, %60
%62:i64 = zext %61
%63:i64 = addnw %56, %62 (hasExternalUses)
%64:i64 = lshr %63, 32:i64
%65:i64 = addnw %54, %64 (hasExternalUses)
%66:i64 = lshr %65, 32:i64
%67:i64 = addnw %41, %66 (hasExternalUses)
%68:i32 = trunc %67
infer %68

; *****
; For LLVM instruction:
;  %105 = zext i32 %82 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %9, %30
%32:i32 = or 0:i32, %31
%33:i32 = shl %32, 8:i32
%34:i32 = and %11, %30
%35:i32 = or 0:i32, %34 (hasExternalUses)
%36:i32 = lshr %35, 18:i32
%37:i32 = or %33, %36
%38:i64 = zext %37
infer %38 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %107 = load i32, i32* %106, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %108 = zext i32 %107 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
infer %1 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %109 = add nuw nsw i64 %105, %108
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %5, 26:i32
%7:i32 = add %4, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %3, %8
%10:i32 = lshr %9, 26:i32
%11:i32 = add %2, %10
%12:i32 = or 4227858432:i32, %11
%13:i32 = and 67108863:i32, %9
%14:i32 = and 67108863:i32, %7 (hasExternalUses)
%15:i32 = and 67108863:i32, %5
%16:i32 = var
%17:i32 = lshr %11, 26:i32
%18:i32 = mulnw 5:i32, %17
%19:i32 = add %16, %18
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %15, %20 (hasExternalUses)
%22:i32 = and 67108863:i32, %19 (hasExternalUses)
%23:i32 = addnw 5:i32, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %21, %24 (hasExternalUses)
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %14, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %13, %28
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %12, %30 (hasExternalUses)
%32:i32 = ashr %31, 31:i32 (hasExternalUses)
%33:i32 = and %11, %32
%34:i32 = or 0:i32, %33
%35:i32 = shl %34, 8:i32
%36:i32 = and %13, %32
%37:i32 = or 0:i32, %36 (hasExternalUses)
%38:i32 = lshr %37, 18:i32
%39:i32 = or %35, %38
%40:i64 = zext %39
%41:i64 = addnw %1, %40
infer %41 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %110 = lshr i64 %103, 32
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7
%9:i32 = and 67108863:i32, %8
%10:i32 = var
%11:i32 = lshr %8, 26:i32
%12:i32 = add %10, %11 (hasExternalUses)
%13:i32 = or 4227858432:i32, %12
%14:i32 = and 67108863:i32, %6
%15:i32 = and 67108863:i32, %4
%16:i32 = var
%17:i32 = lshr %12, 26:i32
%18:i32 = mulnw 5:i32, %17
%19:i32 = add %16, %18
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %15, %20
%22:i32 = and 67108863:i32, %19
%23:i32 = addnw 5:i32, %22
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %21, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %14, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %9, %28
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %13, %30
%32:i32 = ashr %31, 31:i32 (hasExternalUses)
%33:i32 = and %9, %32
%34:i32 = or 0:i32, %33 (hasExternalUses)
%35:i32 = shl %34, 14:i32
%36:i32 = and %14, %32
%37:i32 = or 0:i32, %36
%38:i32 = lshr %37, 12:i32
%39:i32 = or %35, %38
%40:i64 = zext %39
%41:i64 = addnw %1, %40
%42:i32 = var
%43:i64 = zext %42
%44:i32 = shl %37, 20:i32
%45:i32 = lshr %31, 31:i32
%46:i32 = addnsw 4294967295:i32, %45
%47:i32 = and 67108863:i32, %46
%48:i32 = and %25, %47
%49:i32 = and %21, %32
%50:i32 = or %48, %49
%51:i32 = lshr %50, 6:i32
%52:i32 = or %44, %51
%53:i64 = zext %52
%54:i64 = addnw %43, %53
%55:i32 = var
%56:i64 = zext %55
%57:i32 = and %23, %47
%58:i32 = and %22, %32
%59:i32 = or %57, %58
%60:i32 = shl %50, 26:i32
%61:i32 = or %59, %60
%62:i64 = zext %61
%63:i64 = addnw %56, %62 (hasExternalUses)
%64:i64 = lshr %63, 32:i64
%65:i64 = addnw %54, %64 (hasExternalUses)
%66:i64 = lshr %65, 32:i64
%67:i64 = addnw %41, %66 (hasExternalUses)
%68:i64 = lshr %67, 32:i64
infer %68 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %111 = add nuw nsw i64 %109, %110
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %5, 26:i32
%7:i32 = add %4, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %3, %8
%10:i32 = lshr %9, 26:i32
%11:i32 = add %2, %10
%12:i32 = or 4227858432:i32, %11
%13:i32 = and 67108863:i32, %9
%14:i32 = and 67108863:i32, %7
%15:i32 = and 67108863:i32, %5
%16:i32 = var
%17:i32 = lshr %11, 26:i32
%18:i32 = mulnw 5:i32, %17
%19:i32 = add %16, %18
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %15, %20
%22:i32 = and 67108863:i32, %19
%23:i32 = addnw 5:i32, %22
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %21, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %14, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %13, %28
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %12, %30
%32:i32 = ashr %31, 31:i32
%33:i32 = and %11, %32
%34:i32 = or 0:i32, %33
%35:i32 = shl %34, 8:i32
%36:i32 = and %13, %32
%37:i32 = or 0:i32, %36
%38:i32 = lshr %37, 18:i32
%39:i32 = or %35, %38
%40:i64 = zext %39
%41:i64 = addnw %1, %40
%42:i32 = var
%43:i64 = zext %42
%44:i32 = shl %37, 14:i32
%45:i32 = and %14, %32
%46:i32 = or 0:i32, %45
%47:i32 = lshr %46, 12:i32
%48:i32 = or %44, %47
%49:i64 = zext %48
%50:i64 = addnw %43, %49
%51:i32 = var
%52:i64 = zext %51
%53:i32 = shl %46, 20:i32
%54:i32 = lshr %31, 31:i32
%55:i32 = addnsw 4294967295:i32, %54
%56:i32 = and 67108863:i32, %55
%57:i32 = and %25, %56
%58:i32 = and %21, %32
%59:i32 = or %57, %58
%60:i32 = lshr %59, 6:i32
%61:i32 = or %53, %60
%62:i64 = zext %61
%63:i64 = addnw %52, %62
%64:i32 = var
%65:i64 = zext %64
%66:i32 = and %23, %56
%67:i32 = and %22, %32
%68:i32 = or %66, %67
%69:i32 = shl %59, 26:i32
%70:i32 = or %68, %69
%71:i64 = zext %70
%72:i64 = addnw %65, %71 (hasExternalUses)
%73:i64 = lshr %72, 32:i64
%74:i64 = addnw %63, %73 (hasExternalUses)
%75:i64 = lshr %74, 32:i64
%76:i64 = addnw %50, %75 (hasExternalUses)
%77:i64 = lshr %76, 32:i64
%78:i64 = addnw %41, %77
infer %78 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %112 = trunc i64 %111 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %5, 26:i32
%7:i32 = add %4, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %3, %8
%10:i32 = lshr %9, 26:i32
%11:i32 = add %2, %10
%12:i32 = or 4227858432:i32, %11
%13:i32 = and 67108863:i32, %9
%14:i32 = and 67108863:i32, %7
%15:i32 = and 67108863:i32, %5
%16:i32 = var
%17:i32 = lshr %11, 26:i32
%18:i32 = mulnw 5:i32, %17
%19:i32 = add %16, %18
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %15, %20
%22:i32 = and 67108863:i32, %19
%23:i32 = addnw 5:i32, %22
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %21, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %14, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %13, %28
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %12, %30
%32:i32 = ashr %31, 31:i32
%33:i32 = and %11, %32
%34:i32 = or 0:i32, %33
%35:i32 = shl %34, 8:i32
%36:i32 = and %13, %32
%37:i32 = or 0:i32, %36
%38:i32 = lshr %37, 18:i32
%39:i32 = or %35, %38
%40:i64 = zext %39
%41:i64 = addnw %1, %40
%42:i32 = var
%43:i64 = zext %42
%44:i32 = shl %37, 14:i32
%45:i32 = and %14, %32
%46:i32 = or 0:i32, %45
%47:i32 = lshr %46, 12:i32
%48:i32 = or %44, %47
%49:i64 = zext %48
%50:i64 = addnw %43, %49
%51:i32 = var
%52:i64 = zext %51
%53:i32 = shl %46, 20:i32
%54:i32 = lshr %31, 31:i32
%55:i32 = addnsw 4294967295:i32, %54
%56:i32 = and 67108863:i32, %55
%57:i32 = and %25, %56
%58:i32 = and %21, %32
%59:i32 = or %57, %58
%60:i32 = lshr %59, 6:i32
%61:i32 = or %53, %60
%62:i64 = zext %61
%63:i64 = addnw %52, %62
%64:i32 = var
%65:i64 = zext %64
%66:i32 = and %23, %56
%67:i32 = and %22, %32
%68:i32 = or %66, %67
%69:i32 = shl %59, 26:i32
%70:i32 = or %68, %69
%71:i64 = zext %70
%72:i64 = addnw %65, %71 (hasExternalUses)
%73:i64 = lshr %72, 32:i64
%74:i64 = addnw %63, %73 (hasExternalUses)
%75:i64 = lshr %74, 32:i64
%76:i64 = addnw %50, %75 (hasExternalUses)
%77:i64 = lshr %76, 32:i64
%78:i64 = addnw %41, %77
%79:i32 = trunc %78
infer %79
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28
infer %29 (demandedBits=10000000000000000000000000000000)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -2147483648
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3 (hasExternalUses)
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5 (hasExternalUses)
%7:i32 = lshr %6, 26:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4 (hasExternalUses)
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6 (hasExternalUses)
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30
%32:i32 = and 67108863:i32, %31
infer %32 (demandedBits=00001111111111111111111111111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 67108863
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %1, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = mulnw 5:i32, %11
%13:i32 = add %0, %12
%14:i32 = and 67108863:i32, %13 (hasExternalUses)
%15:i32 = addnw 5:i32, %14
%16:i32 = or 4227858432:i32, %10
%17:i32 = and 67108863:i32, %8 (hasExternalUses)
%18:i32 = and 67108863:i32, %6 (hasExternalUses)
%19:i32 = and 67108863:i32, %4
%20:i32 = lshr %13, 26:i32
%21:i32 = addnw %19, %20 (hasExternalUses)
%22:i32 = lshr %15, 26:i32
%23:i32 = addnw %21, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %18, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %17, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %16, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %15, %32
infer %33


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = and 67108863:i32, %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %0, 26:i32
%7:i32 = add %5, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %4, %8
%10:i32 = lshr %9, 26:i32
%11:i32 = add %3, %10 (hasExternalUses)
%12:i32 = lshr %11, 26:i32
%13:i32 = mulnw 5:i32, %12
%14:i32 = add %2, %13
%15:i32 = lshr %14, 26:i32
%16:i32 = addnw %1, %15 (hasExternalUses)
%17:i32 = and 67108863:i32, %14 (hasExternalUses)
%18:i32 = addnw 5:i32, %17 (hasExternalUses)
%19:i32 = lshr %18, 26:i32
%20:i32 = addnw %16, %19
%21:i32 = or 4227858432:i32, %11
%22:i32 = and 67108863:i32, %9 (hasExternalUses)
%23:i32 = and 67108863:i32, %7 (hasExternalUses)
%24:i32 = lshr %20, 26:i32
%25:i32 = addnw %23, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %22, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %21, %28 (hasExternalUses)
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %20, %32
infer %33


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 59
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32
infer %30 (demandedBits=00000111111111111111111111111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 134217727
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %1, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = mulnw 5:i32, %11
%13:i32 = add %0, %12
%14:i32 = and 67108863:i32, %13
%15:i32 = or 4227858432:i32, %10
%16:i32 = and 67108863:i32, %8 (hasExternalUses)
%17:i32 = and 67108863:i32, %6 (hasExternalUses)
%18:i32 = and 67108863:i32, %4
%19:i32 = lshr %13, 26:i32
%20:i32 = addnw %18, %19 (hasExternalUses)
%21:i32 = addnw 5:i32, %14 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %20, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %17, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %16, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %15, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %14, %30
infer %31


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 30237871
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %1, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = mulnw 5:i32, %11
%13:i32 = add %0, %12
%14:i32 = and 67108863:i32, %13
%15:i32 = addnw 5:i32, %14
%16:i32 = or 4227858432:i32, %10
%17:i32 = and 67108863:i32, %8 (hasExternalUses)
%18:i32 = and 67108863:i32, %6 (hasExternalUses)
%19:i32 = and 67108863:i32, %4
%20:i32 = lshr %13, 26:i32
%21:i32 = addnw %19, %20 (hasExternalUses)
%22:i32 = lshr %15, 26:i32
%23:i32 = addnw %21, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %18, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %17, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %16, %28
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %15, %32
%34:i32 = ashr %29, 31:i32 (hasExternalUses)
%35:i32 = and %14, %34
%36:i32 = or %33, %35
infer %36


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 33554671
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = and 67108863:i32, %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %0, 26:i32
%7:i32 = add %5, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %4, %8
%10:i32 = lshr %9, 26:i32
%11:i32 = add %3, %10 (hasExternalUses)
%12:i32 = lshr %11, 26:i32
%13:i32 = mulnw 5:i32, %12
%14:i32 = add %2, %13
%15:i32 = lshr %14, 26:i32
%16:i32 = addnw %1, %15
%17:i32 = or 4227858432:i32, %11
%18:i32 = and 67108863:i32, %9 (hasExternalUses)
%19:i32 = and 67108863:i32, %7 (hasExternalUses)
%20:i32 = and 67108863:i32, %14 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %16, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %19, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %18, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %17, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %16, %30
infer %31


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 24238444
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i32 = and 67108863:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = and 67108863:i32, %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %0, 26:i32
%7:i32 = add %5, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %4, %8
%10:i32 = lshr %9, 26:i32
%11:i32 = add %3, %10 (hasExternalUses)
%12:i32 = lshr %11, 26:i32
%13:i32 = mulnw 5:i32, %12
%14:i32 = add %2, %13
%15:i32 = lshr %14, 26:i32
%16:i32 = addnw %1, %15
%17:i32 = and 67108863:i32, %14 (hasExternalUses)
%18:i32 = addnw 5:i32, %17 (hasExternalUses)
%19:i32 = lshr %18, 26:i32
%20:i32 = addnw %16, %19
%21:i32 = or 4227858432:i32, %11
%22:i32 = and 67108863:i32, %9 (hasExternalUses)
%23:i32 = and 67108863:i32, %7 (hasExternalUses)
%24:i32 = lshr %20, 26:i32
%25:i32 = addnw %23, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %22, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %21, %28
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %20, %32
%34:i32 = ashr %29, 31:i32 (hasExternalUses)
%35:i32 = and %16, %34
%36:i32 = or %33, %35
infer %36


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 33554483
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2
%4:i32 = and 67108863:i32, %3
%5:i32 = var
%6:i32 = var
%7:i32 = lshr %3, 26:i32
%8:i32 = add %6, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %5, %9 (hasExternalUses)
%11:i32 = or 4227858432:i32, %10
%12:i32 = and 67108863:i32, %8 (hasExternalUses)
%13:i32 = and 67108863:i32, %1
%14:i32 = var
%15:i32 = lshr %10, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %4, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %12, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %11, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %4, %30
infer %31


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 67088425
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i32 = lshr %0, 26:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2 (hasExternalUses)
%4:i32 = and 67108863:i32, %3

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2
%4:i32 = and 67108863:i32, %3
%5:i32 = var
%6:i32 = var
%7:i32 = lshr %3, 26:i32
%8:i32 = add %6, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %5, %9 (hasExternalUses)
%11:i32 = or 4227858432:i32, %10
%12:i32 = and 67108863:i32, %8 (hasExternalUses)
%13:i32 = and 67108863:i32, %1
%14:i32 = var
%15:i32 = lshr %10, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %4, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %12, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %11, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %4, %30
%32:i32 = or 0:i32, %31
infer %32


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 67088425
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2 (hasExternalUses)
%4:i32 = and 67108863:i32, %3

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5
%7:i32 = and 67108863:i32, %6
%8:i32 = var
%9:i32 = lshr %6, 26:i32
%10:i32 = add %8, %9 (hasExternalUses)
%11:i32 = or 4227858432:i32, %10
%12:i32 = and 67108863:i32, %4 (hasExternalUses)
%13:i32 = and 67108863:i32, %2
%14:i32 = var
%15:i32 = lshr %10, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %7, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %11, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %7, %30
infer %31


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 67102655
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2 (hasExternalUses)
%4:i32 = lshr %3, 26:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3 (hasExternalUses)
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3 (hasExternalUses)
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5 (hasExternalUses)
%7:i32 = and 67108863:i32, %6

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5
%7:i32 = and 67108863:i32, %6
%8:i32 = var
%9:i32 = lshr %6, 26:i32
%10:i32 = add %8, %9 (hasExternalUses)
%11:i32 = or 4227858432:i32, %10
%12:i32 = and 67108863:i32, %4 (hasExternalUses)
%13:i32 = and 67108863:i32, %2
%14:i32 = var
%15:i32 = lshr %10, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %7, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %11, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %7, %30
%32:i32 = or 0:i32, %31
infer %32


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 67102655
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3 (hasExternalUses)
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3 (hasExternalUses)
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5 (hasExternalUses)
%7:i32 = and 67108863:i32, %6

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %9, %30
infer %31 (demandedBits=00000000111111111111111111111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 5242901
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 872415199
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3 (hasExternalUses)
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5 (hasExternalUses)
%7:i32 = lshr %6, 26:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4 (hasExternalUses)
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6 (hasExternalUses)
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %9, %30
%32:i32 = or 0:i32, %31
infer %32 (demandedBits=00000000111111111111111111111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 5242901
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 872415199
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3 (hasExternalUses)
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5 (hasExternalUses)
%7:i32 = lshr %6, 26:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4 (hasExternalUses)
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6 (hasExternalUses)
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4 (hasExternalUses)
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6 (hasExternalUses)
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8 (hasExternalUses)
%10:i32 = or 4227858432:i32, %9

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = and 67108863:i32, %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %0, 26:i32
%7:i32 = add %5, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %4, %8
%10:i32 = lshr %9, 26:i32
%11:i32 = add %3, %10 (hasExternalUses)
%12:i32 = lshr %11, 26:i32
%13:i32 = mulnw 5:i32, %12
%14:i32 = add %2, %13
%15:i32 = lshr %14, 26:i32
%16:i32 = addnw %1, %15
%17:i32 = and 67108863:i32, %14 (hasExternalUses)
%18:i32 = addnw 5:i32, %17 (hasExternalUses)
%19:i32 = lshr %18, 26:i32
%20:i32 = addnw %16, %19
%21:i32 = or 4227858432:i32, %11
%22:i32 = and 67108863:i32, %9 (hasExternalUses)
%23:i32 = and 67108863:i32, %7 (hasExternalUses)
%24:i32 = lshr %20, 26:i32
%25:i32 = addnw %23, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %22, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %21, %28
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %20, %32
%34:i32 = ashr %29, 31:i32 (hasExternalUses)
%35:i32 = and %16, %34
%36:i32 = or %33, %35 (hasExternalUses)
%37:i32 = shl %36, 26:i32
infer %37


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2013265920
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %1, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = mulnw 5:i32, %11
%13:i32 = add %0, %12
%14:i32 = and 67108863:i32, %13
%15:i32 = addnw 5:i32, %14
%16:i32 = or 4227858432:i32, %10
%17:i32 = and 67108863:i32, %8 (hasExternalUses)
%18:i32 = and 67108863:i32, %6 (hasExternalUses)
%19:i32 = and 67108863:i32, %4
%20:i32 = lshr %13, 26:i32
%21:i32 = addnw %19, %20
%22:i32 = lshr %15, 26:i32
%23:i32 = addnw %21, %22
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %18, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %17, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %16, %28
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30
%32:i32 = and 67108863:i32, %31
%33:i32 = and %15, %32
%34:i32 = ashr %29, 31:i32 (hasExternalUses)
%35:i32 = and %14, %34
%36:i32 = or %33, %35
%37:i32 = and %23, %32
%38:i32 = and %21, %34
%39:i32 = or %37, %38 (hasExternalUses)
%40:i32 = shl %39, 26:i32
%41:i32 = or %36, %40
infer %41


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1809825679
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = and 67108863:i32, %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %0, 26:i32
%7:i32 = add %5, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %4, %8
%10:i32 = lshr %9, 26:i32
%11:i32 = add %3, %10 (hasExternalUses)
%12:i32 = lshr %11, 26:i32
%13:i32 = mulnw 5:i32, %12
%14:i32 = add %2, %13
%15:i32 = lshr %14, 26:i32
%16:i32 = addnw %1, %15
%17:i32 = and 67108863:i32, %14 (hasExternalUses)
%18:i32 = addnw 5:i32, %17 (hasExternalUses)
%19:i32 = lshr %18, 26:i32
%20:i32 = addnw %16, %19
%21:i32 = or 4227858432:i32, %11
%22:i32 = and 67108863:i32, %9 (hasExternalUses)
%23:i32 = and 67108863:i32, %7 (hasExternalUses)
%24:i32 = lshr %20, 26:i32
%25:i32 = addnw %23, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %22, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %21, %28
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30
%32:i32 = and 67108863:i32, %31 (hasExternalUses)
%33:i32 = and %20, %32
%34:i32 = ashr %29, 31:i32 (hasExternalUses)
%35:i32 = and %16, %34
%36:i32 = or %33, %35 (hasExternalUses)
%37:i32 = lshr %36, 6:i32
infer %37


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 511742
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2
%4:i32 = and 67108863:i32, %3
%5:i32 = var
%6:i32 = var
%7:i32 = lshr %3, 26:i32
%8:i32 = add %6, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %5, %9 (hasExternalUses)
%11:i32 = or 4227858432:i32, %10
%12:i32 = and 67108863:i32, %8 (hasExternalUses)
%13:i32 = and 67108863:i32, %1
%14:i32 = var
%15:i32 = lshr %10, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %4, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %12, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %11, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %4, %30
%32:i32 = or 0:i32, %31 (hasExternalUses)
%33:i32 = shl %32, 20:i32
infer %33


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1114636288
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2
%4:i32 = and 67108863:i32, %3
%5:i32 = var
%6:i32 = var
%7:i32 = lshr %3, 26:i32
%8:i32 = add %6, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %5, %9 (hasExternalUses)
%11:i32 = or 4227858432:i32, %10
%12:i32 = and 67108863:i32, %8 (hasExternalUses)
%13:i32 = and 67108863:i32, %1
%14:i32 = var
%15:i32 = lshr %10, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %4, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %12, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %11, %28
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %4, %30
%32:i32 = or 0:i32, %31 (hasExternalUses)
%33:i32 = shl %32, 20:i32
%34:i32 = lshr %29, 31:i32
%35:i32 = addnsw 4294967295:i32, %34
%36:i32 = and 67108863:i32, %35 (hasExternalUses)
%37:i32 = and %23, %36
%38:i32 = and %19, %30
%39:i32 = or %37, %38 (hasExternalUses)
%40:i32 = lshr %39, 6:i32
%41:i32 = or %33, %40
infer %41


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1048578
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2
%4:i32 = and 67108863:i32, %3
%5:i32 = var
%6:i32 = var
%7:i32 = lshr %3, 26:i32
%8:i32 = add %6, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %5, %9 (hasExternalUses)
%11:i32 = or 4227858432:i32, %10
%12:i32 = and 67108863:i32, %8 (hasExternalUses)
%13:i32 = and 67108863:i32, %1
%14:i32 = var
%15:i32 = lshr %10, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %4, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %12, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %11, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %4, %30
%32:i32 = or 0:i32, %31 (hasExternalUses)
%33:i32 = lshr %32, 12:i32
infer %33


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 16128
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5
%7:i32 = and 67108863:i32, %6
%8:i32 = var
%9:i32 = lshr %6, 26:i32
%10:i32 = add %8, %9 (hasExternalUses)
%11:i32 = or 4227858432:i32, %10
%12:i32 = and 67108863:i32, %4 (hasExternalUses)
%13:i32 = and 67108863:i32, %2
%14:i32 = var
%15:i32 = lshr %10, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %7, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %11, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %7, %30
%32:i32 = or 0:i32, %31 (hasExternalUses)
%33:i32 = shl %32, 14:i32
infer %33


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2146484224
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5
%7:i32 = and 67108863:i32, %6
%8:i32 = var
%9:i32 = lshr %6, 26:i32
%10:i32 = add %8, %9 (hasExternalUses)
%11:i32 = or 4227858432:i32, %10
%12:i32 = and 67108863:i32, %4
%13:i32 = and 67108863:i32, %2
%14:i32 = var
%15:i32 = lshr %10, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %7, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %11, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %7, %30
%32:i32 = or 0:i32, %31 (hasExternalUses)
%33:i32 = shl %32, 14:i32
%34:i32 = and %12, %30
%35:i32 = or 0:i32, %34 (hasExternalUses)
%36:i32 = lshr %35, 12:i32
%37:i32 = or %33, %36
infer %37


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483616
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5
%7:i32 = and 67108863:i32, %6
%8:i32 = var
%9:i32 = lshr %6, 26:i32
%10:i32 = add %8, %9 (hasExternalUses)
%11:i32 = or 4227858432:i32, %10
%12:i32 = and 67108863:i32, %4 (hasExternalUses)
%13:i32 = and 67108863:i32, %2
%14:i32 = var
%15:i32 = lshr %10, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %7, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %11, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %7, %30
%32:i32 = or 0:i32, %31 (hasExternalUses)
%33:i32 = lshr %32, 18:i32
infer %33


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 232
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7 (hasExternalUses)
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %9, %30
%32:i32 = or 0:i32, %31
%33:i32 = shl %32, 8:i32
infer %33


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147479808
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3 (hasExternalUses)
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5 (hasExternalUses)
%7:i32 = lshr %6, 26:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4 (hasExternalUses)
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6 (hasExternalUses)
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %9, %30
%32:i32 = or 0:i32, %31
%33:i32 = shl %32, 8:i32
%34:i32 = and %11, %30
%35:i32 = or 0:i32, %34 (hasExternalUses)
%36:i32 = lshr %35, 18:i32
%37:i32 = or %33, %36
infer %37


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073750015
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %1, %9 (hasExternalUses)
%11:i32 = lshr %10, 26:i32
%12:i32 = mulnw 5:i32, %11
%13:i32 = add %0, %12
%14:i32 = and 67108863:i32, %13
%15:i32 = addnw 5:i32, %14
%16:i32 = or 4227858432:i32, %10
%17:i32 = and 67108863:i32, %8 (hasExternalUses)
%18:i32 = and 67108863:i32, %6 (hasExternalUses)
%19:i32 = and 67108863:i32, %4
%20:i32 = lshr %13, 26:i32
%21:i32 = addnw %19, %20
%22:i32 = lshr %15, 26:i32
%23:i32 = addnw %21, %22
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %18, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %17, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %16, %28
%30:i32 = lshr %29, 31:i32
%31:i32 = addnsw 4294967295:i32, %30
%32:i32 = and 67108863:i32, %31
%33:i32 = and %15, %32
%34:i32 = ashr %29, 31:i32 (hasExternalUses)
%35:i32 = and %14, %34
%36:i32 = or %33, %35
%37:i32 = and %23, %32
%38:i32 = and %21, %34
%39:i32 = or %37, %38 (hasExternalUses)
%40:i32 = shl %39, 26:i32
%41:i32 = or %36, %40
%42:i64 = zext %41
infer %42


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1809825679
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0
infer %1


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4294967295
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = var
%7:i32 = lshr %6, 26:i32
%8:i32 = add %5, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %4, %9
%11:i32 = lshr %10, 26:i32
%12:i32 = add %3, %11 (hasExternalUses)
%13:i32 = lshr %12, 26:i32
%14:i32 = mulnw 5:i32, %13
%15:i32 = add %2, %14
%16:i32 = and 67108863:i32, %15
%17:i32 = addnw 5:i32, %16
%18:i32 = or 4227858432:i32, %12
%19:i32 = and 67108863:i32, %10 (hasExternalUses)
%20:i32 = and 67108863:i32, %8 (hasExternalUses)
%21:i32 = and 67108863:i32, %6
%22:i32 = lshr %15, 26:i32
%23:i32 = addnw %21, %22
%24:i32 = lshr %17, 26:i32
%25:i32 = addnw %23, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %20, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %19, %28
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %18, %30
%32:i32 = lshr %31, 31:i32
%33:i32 = addnsw 4294967295:i32, %32
%34:i32 = and 67108863:i32, %33
%35:i32 = and %17, %34
%36:i32 = ashr %31, 31:i32 (hasExternalUses)
%37:i32 = and %16, %36
%38:i32 = or %35, %37
%39:i32 = and %25, %34
%40:i32 = and %23, %36
%41:i32 = or %39, %40 (hasExternalUses)
%42:i32 = shl %41, 26:i32
%43:i32 = or %38, %42
%44:i64 = zext %43
%45:i64 = addnw %1, %44
infer %45


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4261412862
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i64 = zext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = var
%7:i32 = lshr %6, 26:i32
%8:i32 = add %5, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %4, %9
%11:i32 = lshr %10, 26:i32
%12:i32 = add %3, %11 (hasExternalUses)
%13:i32 = lshr %12, 26:i32
%14:i32 = mulnw 5:i32, %13
%15:i32 = add %2, %14
%16:i32 = and 67108863:i32, %15
%17:i32 = addnw 5:i32, %16
%18:i32 = or 4227858432:i32, %12
%19:i32 = and 67108863:i32, %10 (hasExternalUses)
%20:i32 = and 67108863:i32, %8 (hasExternalUses)
%21:i32 = and 67108863:i32, %6
%22:i32 = lshr %15, 26:i32
%23:i32 = addnw %21, %22
%24:i32 = lshr %17, 26:i32
%25:i32 = addnw %23, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %20, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %19, %28
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %18, %30
%32:i32 = lshr %31, 31:i32
%33:i32 = addnsw 4294967295:i32, %32
%34:i32 = and 67108863:i32, %33
%35:i32 = and %17, %34
%36:i32 = ashr %31, 31:i32 (hasExternalUses)
%37:i32 = and %16, %36
%38:i32 = or %35, %37
%39:i32 = and %25, %34
%40:i32 = and %23, %36
%41:i32 = or %39, %40 (hasExternalUses)
%42:i32 = shl %41, 26:i32
%43:i32 = or %38, %42
%44:i64 = zext %43
%45:i64 = addnw %1, %44 (hasExternalUses)
%46:i32 = trunc %45
infer %46


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483392
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 26:i32
%3:i32 = add %0, %2
%4:i32 = and 67108863:i32, %3
%5:i32 = var
%6:i32 = var
%7:i32 = lshr %3, 26:i32
%8:i32 = add %6, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %5, %9 (hasExternalUses)
%11:i32 = or 4227858432:i32, %10
%12:i32 = and 67108863:i32, %8 (hasExternalUses)
%13:i32 = and 67108863:i32, %1
%14:i32 = var
%15:i32 = lshr %10, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %4, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %12, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %11, %28
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %4, %30
%32:i32 = or 0:i32, %31 (hasExternalUses)
%33:i32 = shl %32, 20:i32
%34:i32 = lshr %29, 31:i32
%35:i32 = addnsw 4294967295:i32, %34
%36:i32 = and 67108863:i32, %35 (hasExternalUses)
%37:i32 = and %23, %36
%38:i32 = and %19, %30
%39:i32 = or %37, %38 (hasExternalUses)
%40:i32 = lshr %39, 6:i32
%41:i32 = or %33, %40
%42:i64 = zext %41
infer %42


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4293918718
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = and 67108863:i32, %5
%7:i32 = var
%8:i32 = var
%9:i32 = lshr %5, 26:i32
%10:i32 = add %8, %9
%11:i32 = lshr %10, 26:i32
%12:i32 = add %7, %11 (hasExternalUses)
%13:i32 = or 4227858432:i32, %12
%14:i32 = and 67108863:i32, %10 (hasExternalUses)
%15:i32 = and 67108863:i32, %3
%16:i32 = var
%17:i32 = lshr %12, 26:i32
%18:i32 = mulnw 5:i32, %17
%19:i32 = add %16, %18
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %15, %20
%22:i32 = and 67108863:i32, %19 (hasExternalUses)
%23:i32 = addnw 5:i32, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %21, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %6, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %14, %28
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %13, %30
%32:i32 = ashr %31, 31:i32 (hasExternalUses)
%33:i32 = and %6, %32
%34:i32 = or 0:i32, %33 (hasExternalUses)
%35:i32 = shl %34, 20:i32
%36:i32 = lshr %31, 31:i32
%37:i32 = addnsw 4294967295:i32, %36
%38:i32 = and 67108863:i32, %37 (hasExternalUses)
%39:i32 = and %25, %38
%40:i32 = and %21, %32
%41:i32 = or %39, %40 (hasExternalUses)
%42:i32 = lshr %41, 6:i32
%43:i32 = or %35, %42
%44:i64 = zext %43
%45:i64 = addnw %1, %44
infer %45


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4292870146
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i64 = zext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = var
%7:i32 = lshr %6, 26:i32
%8:i32 = add %5, %7
%9:i32 = lshr %8, 26:i32
%10:i32 = add %4, %9
%11:i32 = lshr %10, 26:i32
%12:i32 = add %3, %11 (hasExternalUses)
%13:i32 = lshr %12, 26:i32
%14:i32 = mulnw 5:i32, %13
%15:i32 = add %2, %14
%16:i32 = and 67108863:i32, %15
%17:i32 = addnw 5:i32, %16
%18:i32 = or 4227858432:i32, %12
%19:i32 = and 67108863:i32, %10 (hasExternalUses)
%20:i32 = and 67108863:i32, %8 (hasExternalUses)
%21:i32 = and 67108863:i32, %6
%22:i32 = lshr %15, 26:i32
%23:i32 = addnw %21, %22
%24:i32 = lshr %17, 26:i32
%25:i32 = addnw %23, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %20, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %19, %28
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %18, %30
%32:i32 = lshr %31, 31:i32
%33:i32 = addnsw 4294967295:i32, %32
%34:i32 = and 67108863:i32, %33
%35:i32 = and %17, %34
%36:i32 = ashr %31, 31:i32 (hasExternalUses)
%37:i32 = and %16, %36
%38:i32 = or %35, %37
%39:i32 = and %25, %34
%40:i32 = and %23, %36
%41:i32 = or %39, %40 (hasExternalUses)
%42:i32 = shl %41, 26:i32
%43:i32 = or %38, %42
%44:i64 = zext %43
%45:i64 = addnw %1, %44 (hasExternalUses)
%46:i64 = lshr %45, 32:i64
infer %46


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = and 67108863:i32, %5
%7:i32 = var
%8:i32 = var
%9:i32 = lshr %5, 26:i32
%10:i32 = add %8, %9
%11:i32 = lshr %10, 26:i32
%12:i32 = add %7, %11 (hasExternalUses)
%13:i32 = or 4227858432:i32, %12
%14:i32 = and 67108863:i32, %10 (hasExternalUses)
%15:i32 = and 67108863:i32, %3
%16:i32 = var
%17:i32 = lshr %12, 26:i32
%18:i32 = mulnw 5:i32, %17
%19:i32 = add %16, %18
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %15, %20
%22:i32 = and 67108863:i32, %19
%23:i32 = addnw 5:i32, %22
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %21, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %6, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %14, %28
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %13, %30
%32:i32 = ashr %31, 31:i32 (hasExternalUses)
%33:i32 = and %6, %32
%34:i32 = or 0:i32, %33 (hasExternalUses)
%35:i32 = shl %34, 20:i32
%36:i32 = lshr %31, 31:i32
%37:i32 = addnsw 4294967295:i32, %36
%38:i32 = and 67108863:i32, %37
%39:i32 = and %25, %38
%40:i32 = and %21, %32
%41:i32 = or %39, %40
%42:i32 = lshr %41, 6:i32
%43:i32 = or %35, %42
%44:i64 = zext %43
%45:i64 = addnw %1, %44
%46:i32 = var
%47:i64 = zext %46
%48:i32 = and %23, %38
%49:i32 = and %22, %32
%50:i32 = or %48, %49
%51:i32 = shl %41, 26:i32
%52:i32 = or %50, %51
%53:i64 = zext %52
%54:i64 = addnw %47, %53 (hasExternalUses)
%55:i64 = lshr %54, 32:i64
%56:i64 = addnw %45, %55
infer %56


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i64 = zext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i64 = zext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = and 67108863:i32, %5
%7:i32 = var
%8:i32 = var
%9:i32 = lshr %5, 26:i32
%10:i32 = add %8, %9
%11:i32 = lshr %10, 26:i32
%12:i32 = add %7, %11 (hasExternalUses)
%13:i32 = or 4227858432:i32, %12
%14:i32 = and 67108863:i32, %10 (hasExternalUses)
%15:i32 = and 67108863:i32, %3
%16:i32 = var
%17:i32 = lshr %12, 26:i32
%18:i32 = mulnw 5:i32, %17
%19:i32 = add %16, %18
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %15, %20
%22:i32 = and 67108863:i32, %19
%23:i32 = addnw 5:i32, %22
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %21, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %6, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %14, %28
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %13, %30
%32:i32 = ashr %31, 31:i32 (hasExternalUses)
%33:i32 = and %6, %32
%34:i32 = or 0:i32, %33 (hasExternalUses)
%35:i32 = shl %34, 20:i32
%36:i32 = lshr %31, 31:i32
%37:i32 = addnsw 4294967295:i32, %36
%38:i32 = and 67108863:i32, %37
%39:i32 = and %25, %38
%40:i32 = and %21, %32
%41:i32 = or %39, %40
%42:i32 = lshr %41, 6:i32
%43:i32 = or %35, %42
%44:i64 = zext %43
%45:i64 = addnw %1, %44
%46:i32 = var
%47:i64 = zext %46
%48:i32 = and %23, %38
%49:i32 = and %22, %32
%50:i32 = or %48, %49
%51:i32 = shl %41, 26:i32
%52:i32 = or %50, %51
%53:i64 = zext %52
%54:i64 = addnw %47, %53 (hasExternalUses)
%55:i64 = lshr %54, 32:i64
%56:i64 = addnw %45, %55 (hasExternalUses)
%57:i32 = trunc %56
infer %57


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -4194304
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = lshr %2, 26:i32
%4:i32 = add %1, %3
%5:i32 = lshr %4, 26:i32
%6:i32 = add %0, %5
%7:i32 = and 67108863:i32, %6
%8:i32 = var
%9:i32 = lshr %6, 26:i32
%10:i32 = add %8, %9 (hasExternalUses)
%11:i32 = or 4227858432:i32, %10
%12:i32 = and 67108863:i32, %4
%13:i32 = and 67108863:i32, %2
%14:i32 = var
%15:i32 = lshr %10, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %7, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %11, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %7, %30
%32:i32 = or 0:i32, %31 (hasExternalUses)
%33:i32 = shl %32, 14:i32
%34:i32 = and %12, %30
%35:i32 = or 0:i32, %34 (hasExternalUses)
%36:i32 = lshr %35, 12:i32
%37:i32 = or %33, %36
%38:i64 = zext %37
infer %38


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483616
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7
%9:i32 = and 67108863:i32, %8
%10:i32 = var
%11:i32 = lshr %8, 26:i32
%12:i32 = add %10, %11 (hasExternalUses)
%13:i32 = or 4227858432:i32, %12
%14:i32 = and 67108863:i32, %6
%15:i32 = and 67108863:i32, %4
%16:i32 = var
%17:i32 = lshr %12, 26:i32
%18:i32 = mulnw 5:i32, %17
%19:i32 = add %16, %18
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %15, %20 (hasExternalUses)
%22:i32 = and 67108863:i32, %19 (hasExternalUses)
%23:i32 = addnw 5:i32, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %21, %24 (hasExternalUses)
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %14, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %9, %28
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %13, %30 (hasExternalUses)
%32:i32 = ashr %31, 31:i32 (hasExternalUses)
%33:i32 = and %9, %32
%34:i32 = or 0:i32, %33 (hasExternalUses)
%35:i32 = shl %34, 14:i32
%36:i32 = and %14, %32
%37:i32 = or 0:i32, %36 (hasExternalUses)
%38:i32 = lshr %37, 12:i32
%39:i32 = or %35, %38
%40:i64 = zext %39
%41:i64 = addnw %1, %40
infer %41


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 16
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i64 = zext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = and 67108863:i32, %5
%7:i32 = var
%8:i32 = var
%9:i32 = lshr %5, 26:i32
%10:i32 = add %8, %9
%11:i32 = lshr %10, 26:i32
%12:i32 = add %7, %11 (hasExternalUses)
%13:i32 = or 4227858432:i32, %12
%14:i32 = and 67108863:i32, %10 (hasExternalUses)
%15:i32 = and 67108863:i32, %3
%16:i32 = var
%17:i32 = lshr %12, 26:i32
%18:i32 = mulnw 5:i32, %17
%19:i32 = add %16, %18
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %15, %20
%22:i32 = and 67108863:i32, %19
%23:i32 = addnw 5:i32, %22
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %21, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %6, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %14, %28
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %13, %30
%32:i32 = ashr %31, 31:i32 (hasExternalUses)
%33:i32 = and %6, %32
%34:i32 = or 0:i32, %33 (hasExternalUses)
%35:i32 = shl %34, 20:i32
%36:i32 = lshr %31, 31:i32
%37:i32 = addnsw 4294967295:i32, %36
%38:i32 = and 67108863:i32, %37
%39:i32 = and %25, %38
%40:i32 = and %21, %32
%41:i32 = or %39, %40
%42:i32 = lshr %41, 6:i32
%43:i32 = or %35, %42
%44:i64 = zext %43
%45:i64 = addnw %1, %44
%46:i32 = var
%47:i64 = zext %46
%48:i32 = and %23, %38
%49:i32 = and %22, %32
%50:i32 = or %48, %49
%51:i32 = shl %41, 26:i32
%52:i32 = or %50, %51
%53:i64 = zext %52
%54:i64 = addnw %47, %53 (hasExternalUses)
%55:i64 = lshr %54, 32:i64
%56:i64 = addnw %45, %55 (hasExternalUses)
%57:i64 = lshr %56, 32:i64
infer %57


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7
%9:i32 = and 67108863:i32, %8
%10:i32 = var
%11:i32 = lshr %8, 26:i32
%12:i32 = add %10, %11 (hasExternalUses)
%13:i32 = or 4227858432:i32, %12
%14:i32 = and 67108863:i32, %6
%15:i32 = and 67108863:i32, %4
%16:i32 = var
%17:i32 = lshr %12, 26:i32
%18:i32 = mulnw 5:i32, %17
%19:i32 = add %16, %18
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %15, %20
%22:i32 = and 67108863:i32, %19
%23:i32 = addnw 5:i32, %22
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %21, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %14, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %9, %28
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %13, %30
%32:i32 = ashr %31, 31:i32 (hasExternalUses)
%33:i32 = and %9, %32
%34:i32 = or 0:i32, %33 (hasExternalUses)
%35:i32 = shl %34, 14:i32
%36:i32 = and %14, %32
%37:i32 = or 0:i32, %36
%38:i32 = lshr %37, 12:i32
%39:i32 = or %35, %38
%40:i64 = zext %39
%41:i64 = addnw %1, %40
%42:i32 = var
%43:i64 = zext %42
%44:i32 = shl %37, 20:i32
%45:i32 = lshr %31, 31:i32
%46:i32 = addnsw 4294967295:i32, %45
%47:i32 = and 67108863:i32, %46
%48:i32 = and %25, %47
%49:i32 = and %21, %32
%50:i32 = or %48, %49
%51:i32 = lshr %50, 6:i32
%52:i32 = or %44, %51
%53:i64 = zext %52
%54:i64 = addnw %43, %53
%55:i32 = var
%56:i64 = zext %55
%57:i32 = and %23, %47
%58:i32 = and %22, %32
%59:i32 = or %57, %58
%60:i32 = shl %50, 26:i32
%61:i32 = or %59, %60
%62:i64 = zext %61
%63:i64 = addnw %56, %62 (hasExternalUses)
%64:i64 = lshr %63, 32:i64
%65:i64 = addnw %54, %64 (hasExternalUses)
%66:i64 = lshr %65, 32:i64
%67:i64 = addnw %41, %66
infer %67


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4294967284
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i64 = zext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7
%9:i32 = and 67108863:i32, %8
%10:i32 = var
%11:i32 = lshr %8, 26:i32
%12:i32 = add %10, %11 (hasExternalUses)
%13:i32 = or 4227858432:i32, %12
%14:i32 = and 67108863:i32, %6
%15:i32 = and 67108863:i32, %4
%16:i32 = var
%17:i32 = lshr %12, 26:i32
%18:i32 = mulnw 5:i32, %17
%19:i32 = add %16, %18
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %15, %20
%22:i32 = and 67108863:i32, %19
%23:i32 = addnw 5:i32, %22
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %21, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %14, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %9, %28
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %13, %30
%32:i32 = ashr %31, 31:i32 (hasExternalUses)
%33:i32 = and %9, %32
%34:i32 = or 0:i32, %33 (hasExternalUses)
%35:i32 = shl %34, 14:i32
%36:i32 = and %14, %32
%37:i32 = or 0:i32, %36
%38:i32 = lshr %37, 12:i32
%39:i32 = or %35, %38
%40:i64 = zext %39
%41:i64 = addnw %1, %40
%42:i32 = var
%43:i64 = zext %42
%44:i32 = shl %37, 20:i32
%45:i32 = lshr %31, 31:i32
%46:i32 = addnsw 4294967295:i32, %45
%47:i32 = and 67108863:i32, %46
%48:i32 = and %25, %47
%49:i32 = and %21, %32
%50:i32 = or %48, %49
%51:i32 = lshr %50, 6:i32
%52:i32 = or %44, %51
%53:i64 = zext %52
%54:i64 = addnw %43, %53
%55:i32 = var
%56:i64 = zext %55
%57:i32 = and %23, %47
%58:i32 = and %22, %32
%59:i32 = or %57, %58
%60:i32 = shl %50, 26:i32
%61:i32 = or %59, %60
%62:i64 = zext %61
%63:i64 = addnw %56, %62 (hasExternalUses)
%64:i64 = lshr %63, 32:i64
%65:i64 = addnw %54, %64 (hasExternalUses)
%66:i64 = lshr %65, 32:i64
%67:i64 = addnw %41, %66 (hasExternalUses)
%68:i32 = trunc %67
infer %68


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %9, %30
%32:i32 = or 0:i32, %31
%33:i32 = shl %32, 8:i32
%34:i32 = and %11, %30
%35:i32 = or 0:i32, %34 (hasExternalUses)
%36:i32 = lshr %35, 18:i32
%37:i32 = or %33, %36
%38:i64 = zext %37
infer %38 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073750015
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0
infer %1 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4294967295
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %5, 26:i32
%7:i32 = add %4, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %3, %8
%10:i32 = lshr %9, 26:i32
%11:i32 = add %2, %10
%12:i32 = or 4227858432:i32, %11
%13:i32 = and 67108863:i32, %9
%14:i32 = and 67108863:i32, %7 (hasExternalUses)
%15:i32 = and 67108863:i32, %5
%16:i32 = var
%17:i32 = lshr %11, 26:i32
%18:i32 = mulnw 5:i32, %17
%19:i32 = add %16, %18
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %15, %20 (hasExternalUses)
%22:i32 = and 67108863:i32, %19 (hasExternalUses)
%23:i32 = addnw 5:i32, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %21, %24 (hasExternalUses)
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %14, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %13, %28
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %12, %30 (hasExternalUses)
%32:i32 = ashr %31, 31:i32 (hasExternalUses)
%33:i32 = and %11, %32
%34:i32 = or 0:i32, %33
%35:i32 = shl %34, 8:i32
%36:i32 = and %13, %32
%37:i32 = or 0:i32, %36 (hasExternalUses)
%38:i32 = lshr %37, 18:i32
%39:i32 = or %35, %38
%40:i64 = zext %39
%41:i64 = addnw %1, %40
infer %41 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i64 = zext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = lshr %4, 26:i32
%6:i32 = add %3, %5
%7:i32 = lshr %6, 26:i32
%8:i32 = add %2, %7
%9:i32 = and 67108863:i32, %8
%10:i32 = var
%11:i32 = lshr %8, 26:i32
%12:i32 = add %10, %11 (hasExternalUses)
%13:i32 = or 4227858432:i32, %12
%14:i32 = and 67108863:i32, %6
%15:i32 = and 67108863:i32, %4
%16:i32 = var
%17:i32 = lshr %12, 26:i32
%18:i32 = mulnw 5:i32, %17
%19:i32 = add %16, %18
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %15, %20
%22:i32 = and 67108863:i32, %19
%23:i32 = addnw 5:i32, %22
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %21, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %14, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %9, %28
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %13, %30
%32:i32 = ashr %31, 31:i32 (hasExternalUses)
%33:i32 = and %9, %32
%34:i32 = or 0:i32, %33 (hasExternalUses)
%35:i32 = shl %34, 14:i32
%36:i32 = and %14, %32
%37:i32 = or 0:i32, %36
%38:i32 = lshr %37, 12:i32
%39:i32 = or %35, %38
%40:i64 = zext %39
%41:i64 = addnw %1, %40
%42:i32 = var
%43:i64 = zext %42
%44:i32 = shl %37, 20:i32
%45:i32 = lshr %31, 31:i32
%46:i32 = addnsw 4294967295:i32, %45
%47:i32 = and 67108863:i32, %46
%48:i32 = and %25, %47
%49:i32 = and %21, %32
%50:i32 = or %48, %49
%51:i32 = lshr %50, 6:i32
%52:i32 = or %44, %51
%53:i64 = zext %52
%54:i64 = addnw %43, %53
%55:i32 = var
%56:i64 = zext %55
%57:i32 = and %23, %47
%58:i32 = and %22, %32
%59:i32 = or %57, %58
%60:i32 = shl %50, 26:i32
%61:i32 = or %59, %60
%62:i64 = zext %61
%63:i64 = addnw %56, %62 (hasExternalUses)
%64:i64 = lshr %63, 32:i64
%65:i64 = addnw %54, %64 (hasExternalUses)
%66:i64 = lshr %65, 32:i64
%67:i64 = addnw %41, %66 (hasExternalUses)
%68:i64 = lshr %67, 32:i64
infer %68 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %5, 26:i32
%7:i32 = add %4, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %3, %8
%10:i32 = lshr %9, 26:i32
%11:i32 = add %2, %10
%12:i32 = or 4227858432:i32, %11
%13:i32 = and 67108863:i32, %9
%14:i32 = and 67108863:i32, %7
%15:i32 = and 67108863:i32, %5
%16:i32 = var
%17:i32 = lshr %11, 26:i32
%18:i32 = mulnw 5:i32, %17
%19:i32 = add %16, %18
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %15, %20
%22:i32 = and 67108863:i32, %19
%23:i32 = addnw 5:i32, %22
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %21, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %14, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %13, %28
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %12, %30
%32:i32 = ashr %31, 31:i32
%33:i32 = and %11, %32
%34:i32 = or 0:i32, %33
%35:i32 = shl %34, 8:i32
%36:i32 = and %13, %32
%37:i32 = or 0:i32, %36
%38:i32 = lshr %37, 18:i32
%39:i32 = or %35, %38
%40:i64 = zext %39
%41:i64 = addnw %1, %40
%42:i32 = var
%43:i64 = zext %42
%44:i32 = shl %37, 14:i32
%45:i32 = and %14, %32
%46:i32 = or 0:i32, %45
%47:i32 = lshr %46, 12:i32
%48:i32 = or %44, %47
%49:i64 = zext %48
%50:i64 = addnw %43, %49
%51:i32 = var
%52:i64 = zext %51
%53:i32 = shl %46, 20:i32
%54:i32 = lshr %31, 31:i32
%55:i32 = addnsw 4294967295:i32, %54
%56:i32 = and 67108863:i32, %55
%57:i32 = and %25, %56
%58:i32 = and %21, %32
%59:i32 = or %57, %58
%60:i32 = lshr %59, 6:i32
%61:i32 = or %53, %60
%62:i64 = zext %61
%63:i64 = addnw %52, %62
%64:i32 = var
%65:i64 = zext %64
%66:i32 = and %23, %56
%67:i32 = and %22, %32
%68:i32 = or %66, %67
%69:i32 = shl %59, 26:i32
%70:i32 = or %68, %69
%71:i64 = zext %70
%72:i64 = addnw %65, %71 (hasExternalUses)
%73:i64 = lshr %72, 32:i64
%74:i64 = addnw %63, %73 (hasExternalUses)
%75:i64 = lshr %74, 32:i64
%76:i64 = addnw %50, %75 (hasExternalUses)
%77:i64 = lshr %76, 32:i64
%78:i64 = addnw %41, %77
infer %78 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i64 = zext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 26:i32
%5:i32 = add %2, %4
%6:i32 = lshr %5, 26:i32
%7:i32 = add %1, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %0, %8
%10:i32 = or 4227858432:i32, %9
%11:i32 = and 67108863:i32, %7
%12:i32 = and 67108863:i32, %5 (hasExternalUses)
%13:i32 = and 67108863:i32, %3
%14:i32 = var
%15:i32 = lshr %9, 26:i32
%16:i32 = mulnw 5:i32, %15
%17:i32 = add %14, %16
%18:i32 = lshr %17, 26:i32
%19:i32 = addnw %13, %18 (hasExternalUses)
%20:i32 = and 67108863:i32, %17 (hasExternalUses)
%21:i32 = addnw 5:i32, %20 (hasExternalUses)
%22:i32 = lshr %21, 26:i32
%23:i32 = addnw %19, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %12, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %11, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnsw %10, %28 (hasExternalUses)
%30:i32 = ashr %29, 31:i32 (hasExternalUses)
%31:i32 = and %9, %30
%32:i32 = or 0:i32, %31
%33:i32 = shl %32, 8:i32
%34:i32 = and %11, %30
%35:i32 = or 0:i32, %34 (hasExternalUses)
%36:i32 = lshr %35, 18:i32
%37:i32 = or %33, %36
%38:i64 = zext %37

Cost = 12
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %5, 26:i32
%7:i32 = add %4, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %3, %8
%10:i32 = lshr %9, 26:i32
%11:i32 = add %2, %10
%12:i32 = or 4227858432:i32, %11
%13:i32 = and 67108863:i32, %9
%14:i32 = and 67108863:i32, %7 (hasExternalUses)
%15:i32 = and 67108863:i32, %5
%16:i32 = var
%17:i32 = lshr %11, 26:i32
%18:i32 = mulnw 5:i32, %17
%19:i32 = add %16, %18
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %15, %20 (hasExternalUses)
%22:i32 = and 67108863:i32, %19 (hasExternalUses)
%23:i32 = addnw 5:i32, %22 (hasExternalUses)
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %21, %24 (hasExternalUses)
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %14, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %13, %28
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %12, %30 (hasExternalUses)
%32:i32 = ashr %31, 31:i32 (hasExternalUses)
%33:i32 = and %11, %32
%34:i32 = or 0:i32, %33
%35:i32 = shl %34, 8:i32
%36:i32 = and %13, %32
%37:i32 = or 0:i32, %36 (hasExternalUses)
%38:i32 = lshr %37, 18:i32
%39:i32 = or %35, %38
%40:i64 = zext %39
%41:i64 = addnw %1, %40

Cost = 14
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %5, 26:i32
%7:i32 = add %4, %6
%8:i32 = lshr %7, 26:i32
%9:i32 = add %3, %8
%10:i32 = lshr %9, 26:i32
%11:i32 = add %2, %10
%12:i32 = or 4227858432:i32, %11
%13:i32 = and 67108863:i32, %9
%14:i32 = and 67108863:i32, %7
%15:i32 = and 67108863:i32, %5
%16:i32 = var
%17:i32 = lshr %11, 26:i32
%18:i32 = mulnw 5:i32, %17
%19:i32 = add %16, %18
%20:i32 = lshr %19, 26:i32
%21:i32 = addnw %15, %20
%22:i32 = and 67108863:i32, %19
%23:i32 = addnw 5:i32, %22
%24:i32 = lshr %23, 26:i32
%25:i32 = addnw %21, %24
%26:i32 = lshr %25, 26:i32
%27:i32 = addnw %14, %26
%28:i32 = lshr %27, 26:i32
%29:i32 = addnw %13, %28
%30:i32 = lshr %29, 26:i32
%31:i32 = addnsw %12, %30
%32:i32 = ashr %31, 31:i32
%33:i32 = and %11, %32
%34:i32 = or 0:i32, %33
%35:i32 = shl %34, 8:i32
%36:i32 = and %13, %32
%37:i32 = or 0:i32, %36
%38:i32 = lshr %37, 18:i32
%39:i32 = or %35, %38
%40:i64 = zext %39
%41:i64 = addnw %1, %40
%42:i32 = var
%43:i64 = zext %42
%44:i32 = shl %37, 14:i32
%45:i32 = and %14, %32
%46:i32 = or 0:i32, %45
%47:i32 = lshr %46, 12:i32
%48:i32 = or %44, %47
%49:i64 = zext %48
%50:i64 = addnw %43, %49
%51:i32 = var
%52:i64 = zext %51
%53:i32 = shl %46, 20:i32
%54:i32 = lshr %31, 31:i32
%55:i32 = addnsw 4294967295:i32, %54
%56:i32 = and 67108863:i32, %55
%57:i32 = and %25, %56
%58:i32 = and %21, %32
%59:i32 = or %57, %58
%60:i32 = lshr %59, 6:i32
%61:i32 = or %53, %60
%62:i64 = zext %61
%63:i64 = addnw %52, %62
%64:i32 = var
%65:i64 = zext %64
%66:i32 = and %23, %56
%67:i32 = and %22, %32
%68:i32 = or %66, %67
%69:i32 = shl %59, 26:i32
%70:i32 = or %68, %69
%71:i64 = zext %70
%72:i64 = addnw %65, %71 (hasExternalUses)
%73:i64 = lshr %72, 32:i64
%74:i64 = addnw %63, %73 (hasExternalUses)
%75:i64 = lshr %74, 32:i64
%76:i64 = addnw %50, %75 (hasExternalUses)
%77:i64 = lshr %76, 32:i64
%78:i64 = addnw %41, %77
%79:i32 = trunc %78
infer %79


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147481600
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for ./poly1305_donna.c.bc:poly1305_finish()

; entering Souper's runOnFunction() for ./poly1305_donna.c.bc:poly1305_blocks()

; ModuleID = './poly1305_donna.c.bc'
source_filename = "crypto_onetimeauth/poly1305/donna/poly1305_donna.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.crypto_onetimeauth_poly1305_implementation = type { i32 (i8*, i8*, i64, i8*)*, i32 (i8*, i8*, i64, i8*)*, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)*, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*, i64)*, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)* }
%struct.crypto_onetimeauth_poly1305_state = type { [256 x i8] }
%struct.poly1305_state_internal_t = type { [5 x i32], [5 x i32], [4 x i32], i64, [16 x i8], i8 }

@crypto_onetimeauth_poly1305_donna_implementation = hidden local_unnamed_addr global %struct.crypto_onetimeauth_poly1305_implementation { i32 (i8*, i8*, i64, i8*)* @crypto_onetimeauth_poly1305_donna, i32 (i8*, i8*, i64, i8*)* @crypto_onetimeauth_poly1305_donna_verify, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)* @crypto_onetimeauth_poly1305_donna_init, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*, i64)* @crypto_onetimeauth_poly1305_donna_update, i32 (%struct.crypto_onetimeauth_poly1305_state*, i8*)* @crypto_onetimeauth_poly1305_donna_final }, align 4

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna(i8* nocapture %0, i8* nocapture readonly %1, i64 %2, i8* nocapture readonly %3) #0 {
  %5 = alloca %struct.poly1305_state_internal_t, align 64
  %6 = bitcast %struct.poly1305_state_internal_t* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %6) #6
  %7 = bitcast i8* %3 to i32*
  %8 = load i32, i32* %7, align 1
  %9 = and i32 %8, 67108863
  %10 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 0
  store i32 %9, i32* %10, align 64
  %11 = getelementptr i8, i8* %3, i32 3
  %12 = bitcast i8* %11 to i32*
  %13 = load i32, i32* %12, align 1
  %14 = lshr i32 %13, 2
  %15 = and i32 %14, 67108611
  %16 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 1
  store i32 %15, i32* %16, align 4
  %17 = getelementptr i8, i8* %3, i32 6
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 1
  %20 = lshr i32 %19, 4
  %21 = and i32 %20, 67092735
  %22 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 2
  store i32 %21, i32* %22, align 8
  %23 = getelementptr i8, i8* %3, i32 9
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 1
  %26 = lshr i32 %25, 6
  %27 = and i32 %26, 66076671
  %28 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 3
  store i32 %27, i32* %28, align 4
  %29 = getelementptr i8, i8* %3, i32 12
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 1
  %32 = lshr i32 %31, 8
  %33 = and i32 %32, 1048575
  %34 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 4
  store i32 %33, i32* %34, align 16
  %35 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 1, i32 0
  %36 = getelementptr i8, i8* %3, i32 16
  %37 = bitcast i8* %36 to i32*
  %38 = bitcast i32* %35 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(20) %38, i8 0, i64 20, i1 false) #6
  %39 = load i32, i32* %37, align 1
  %40 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 0
  store i32 %39, i32* %40, align 8
  %41 = getelementptr i8, i8* %3, i32 20
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %42, align 1
  %44 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 1
  store i32 %43, i32* %44, align 4
  %45 = getelementptr i8, i8* %3, i32 24
  %46 = bitcast i8* %45 to i32*
  %47 = load i32, i32* %46, align 1
  %48 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 2
  store i32 %47, i32* %48, align 8
  %49 = getelementptr i8, i8* %3, i32 28
  %50 = bitcast i8* %49 to i32*
  %51 = load i32, i32* %50, align 1
  %52 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 3
  store i32 %51, i32* %52, align 4
  %53 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 3
  store i64 0, i64* %53, align 8
  %54 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 5
  store i8 0, i8* %54, align 16
  call fastcc void @poly1305_update(%struct.poly1305_state_internal_t* nonnull %5, i8* %1, i64 %2)
  call fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* nonnull %5, i8* %0)
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %6) #6
  ret i32 0
}

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_verify(i8* %0, i8* nocapture readonly %1, i64 %2, i8* nocapture readonly %3) #0 {
  %5 = alloca %struct.poly1305_state_internal_t, align 64
  %6 = alloca [16 x i8], align 16
  %7 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #6
  %8 = bitcast %struct.poly1305_state_internal_t* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %8) #6
  %9 = bitcast i8* %3 to i32*
  %10 = load i32, i32* %9, align 1
  %11 = and i32 %10, 67108863
  %12 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 0
  store i32 %11, i32* %12, align 64
  %13 = getelementptr i8, i8* %3, i32 3
  %14 = bitcast i8* %13 to i32*
  %15 = load i32, i32* %14, align 1
  %16 = lshr i32 %15, 2
  %17 = and i32 %16, 67108611
  %18 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 1
  store i32 %17, i32* %18, align 4
  %19 = getelementptr i8, i8* %3, i32 6
  %20 = bitcast i8* %19 to i32*
  %21 = load i32, i32* %20, align 1
  %22 = lshr i32 %21, 4
  %23 = and i32 %22, 67092735
  %24 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 2
  store i32 %23, i32* %24, align 8
  %25 = getelementptr i8, i8* %3, i32 9
  %26 = bitcast i8* %25 to i32*
  %27 = load i32, i32* %26, align 1
  %28 = lshr i32 %27, 6
  %29 = and i32 %28, 66076671
  %30 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 3
  store i32 %29, i32* %30, align 4
  %31 = getelementptr i8, i8* %3, i32 12
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 1
  %34 = lshr i32 %33, 8
  %35 = and i32 %34, 1048575
  %36 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 0, i32 4
  store i32 %35, i32* %36, align 16
  %37 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 1, i32 0
  %38 = getelementptr i8, i8* %3, i32 16
  %39 = bitcast i8* %38 to i32*
  %40 = bitcast i32* %37 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(20) %40, i8 0, i64 20, i1 false) #6
  %41 = load i32, i32* %39, align 1
  %42 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 0
  store i32 %41, i32* %42, align 8
  %43 = getelementptr i8, i8* %3, i32 20
  %44 = bitcast i8* %43 to i32*
  %45 = load i32, i32* %44, align 1
  %46 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 1
  store i32 %45, i32* %46, align 4
  %47 = getelementptr i8, i8* %3, i32 24
  %48 = bitcast i8* %47 to i32*
  %49 = load i32, i32* %48, align 1
  %50 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 2
  store i32 %49, i32* %50, align 8
  %51 = getelementptr i8, i8* %3, i32 28
  %52 = bitcast i8* %51 to i32*
  %53 = load i32, i32* %52, align 1
  %54 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 2, i32 3
  store i32 %53, i32* %54, align 4
  %55 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 3
  store i64 0, i64* %55, align 8
  %56 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %5, i32 0, i32 5
  store i8 0, i8* %56, align 16
  call fastcc void @poly1305_update(%struct.poly1305_state_internal_t* nonnull %5, i8* %1, i64 %2) #6
  call fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* nonnull %5, i8* nonnull %7) #6
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %8) #6
  %57 = call i32 @crypto_verify_16(i8* %0, i8* nonnull %7) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #6
  ret i32 %57
}

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_init(%struct.crypto_onetimeauth_poly1305_state* nocapture %0, i8* nocapture readonly %1) #0 {
  %3 = bitcast i8* %1 to i32*
  %4 = load i32, i32* %3, align 1
  %5 = and i32 %4, 67108863
  %6 = bitcast %struct.crypto_onetimeauth_poly1305_state* %0 to i32*
  store i32 %5, i32* %6, align 8
  %7 = getelementptr i8, i8* %1, i32 3
  %8 = bitcast i8* %7 to i32*
  %9 = load i32, i32* %8, align 1
  %10 = lshr i32 %9, 2
  %11 = and i32 %10, 67108611
  %12 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 4
  %13 = bitcast i8* %12 to i32*
  store i32 %11, i32* %13, align 4
  %14 = getelementptr i8, i8* %1, i32 6
  %15 = bitcast i8* %14 to i32*
  %16 = load i32, i32* %15, align 1
  %17 = lshr i32 %16, 4
  %18 = and i32 %17, 67092735
  %19 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 8
  %20 = bitcast i8* %19 to i32*
  store i32 %18, i32* %20, align 8
  %21 = getelementptr i8, i8* %1, i32 9
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 1
  %24 = lshr i32 %23, 6
  %25 = and i32 %24, 66076671
  %26 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 12
  %27 = bitcast i8* %26 to i32*
  store i32 %25, i32* %27, align 4
  %28 = getelementptr i8, i8* %1, i32 12
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 1
  %31 = lshr i32 %30, 8
  %32 = and i32 %31, 1048575
  %33 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 16
  %34 = bitcast i8* %33 to i32*
  store i32 %32, i32* %34, align 8
  %35 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 20
  %36 = getelementptr i8, i8* %1, i32 16
  %37 = bitcast i8* %36 to i32*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(20) %35, i8 0, i64 20, i1 false) #6
  %38 = load i32, i32* %37, align 1
  %39 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 40
  %40 = bitcast i8* %39 to i32*
  store i32 %38, i32* %40, align 8
  %41 = getelementptr i8, i8* %1, i32 20
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %42, align 1
  %44 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 44
  %45 = bitcast i8* %44 to i32*
  store i32 %43, i32* %45, align 4
  %46 = getelementptr i8, i8* %1, i32 24
  %47 = bitcast i8* %46 to i32*
  %48 = load i32, i32* %47, align 1
  %49 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 48
  %50 = bitcast i8* %49 to i32*
  store i32 %48, i32* %50, align 8
  %51 = getelementptr i8, i8* %1, i32 28
  %52 = bitcast i8* %51 to i32*
  %53 = load i32, i32* %52, align 1
  %54 = getelementptr %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 52
  %55 = bitcast i8* %54 to i32*
  store i32 %53, i32* %55, align 4
  %56 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 56
  %57 = bitcast i8* %56 to i64*
  store i64 0, i64* %57, align 8
  %58 = getelementptr inbounds %struct.crypto_onetimeauth_poly1305_state, %struct.crypto_onetimeauth_poly1305_state* %0, i32 0, i32 0, i32 80
  store i8 0, i8* %58, align 8
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_update(%struct.crypto_onetimeauth_poly1305_state* nocapture %0, i8* nocapture readonly %1, i64 %2) #1 {
  %4 = bitcast %struct.crypto_onetimeauth_poly1305_state* %0 to %struct.poly1305_state_internal_t*
  tail call fastcc void @poly1305_update(%struct.poly1305_state_internal_t* %4, i8* %1, i64 %2)
  ret i32 0
}

; Function Attrs: nounwind
define internal i32 @crypto_onetimeauth_poly1305_donna_final(%struct.crypto_onetimeauth_poly1305_state* %0, i8* nocapture %1) #0 {
  %3 = bitcast %struct.crypto_onetimeauth_poly1305_state* %0 to %struct.poly1305_state_internal_t*
  tail call fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* %3, i8* %1)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #2

; Function Attrs: nofree norecurse nounwind
define internal fastcc void @poly1305_update(%struct.poly1305_state_internal_t* nocapture %0, i8* nocapture readonly %1, i64 %2) unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 3
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %33, label %7

7:                                                ; preds = %3
  %8 = sub i64 16, %5
  %9 = icmp ugt i64 %8, %2
  %10 = select i1 %9, i64 %2, i64 %8
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %24, label %12

12:                                               ; preds = %7, %12
  %13 = phi i64 [ %23, %12 ], [ %5, %7 ]
  %14 = phi i64 [ %21, %12 ], [ 0, %7 ]
  %15 = trunc i64 %14 to i32
  %16 = getelementptr i8, i8* %1, i32 %15
  %17 = load i8, i8* %16, align 1
  %18 = add i64 %13, %14
  %19 = trunc i64 %18 to i32
  %20 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 %19
  store i8 %17, i8* %20, align 1
  %21 = add nuw i64 %14, 1
  %22 = icmp ult i64 %21, %10
  %23 = load i64, i64* %4, align 8
  br i1 %22, label %12, label %24

24:                                               ; preds = %12, %7
  %25 = phi i64 [ %5, %7 ], [ %23, %12 ]
  %26 = add i64 %25, %10
  store i64 %26, i64* %4, align 8
  %27 = icmp ult i64 %26, 16
  br i1 %27, label %60, label %28

28:                                               ; preds = %24
  %29 = trunc i64 %10 to i32
  %30 = getelementptr i8, i8* %1, i32 %29
  %31 = sub i64 %2, %10
  %32 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 0
  tail call fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nonnull %0, i8* nonnull %32, i64 16)
  store i64 0, i64* %4, align 8
  br label %33

33:                                               ; preds = %28, %3
  %34 = phi i64 [ %2, %3 ], [ %31, %28 ]
  %35 = phi i8* [ %1, %3 ], [ %30, %28 ]
  %36 = icmp ugt i64 %34, 15
  br i1 %36, label %37, label %42

37:                                               ; preds = %33
  %38 = and i64 %34, -16
  tail call fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nonnull %0, i8* %35, i64 %38)
  %39 = trunc i64 %38 to i32
  %40 = getelementptr i8, i8* %35, i32 %39
  %41 = sub i64 %34, %38
  br label %42

42:                                               ; preds = %37, %33
  %43 = phi i64 [ %41, %37 ], [ %34, %33 ]
  %44 = phi i8* [ %40, %37 ], [ %35, %33 ]
  %45 = icmp eq i64 %43, 0
  br i1 %45, label %60, label %46

46:                                               ; preds = %42, %46
  %47 = phi i64 [ %55, %46 ], [ 0, %42 ]
  %48 = trunc i64 %47 to i32
  %49 = getelementptr i8, i8* %44, i32 %48
  %50 = load i8, i8* %49, align 1
  %51 = load i64, i64* %4, align 8
  %52 = add i64 %51, %47
  %53 = trunc i64 %52 to i32
  %54 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 %53
  store i8 %50, i8* %54, align 1
  %55 = add nuw i64 %47, 1
  %56 = icmp eq i64 %55, %43
  br i1 %56, label %57, label %46

57:                                               ; preds = %46
  %58 = load i64, i64* %4, align 8
  %59 = add i64 %58, %43
  store i64 %59, i64* %4, align 8
  br label %60

60:                                               ; preds = %57, %42, %24
  ret void
}

; Function Attrs: noinline nounwind
define internal fastcc void @poly1305_finish(%struct.poly1305_state_internal_t* %0, i8* nocapture %1) unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 3
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %20, label %6

6:                                                ; preds = %2
  %7 = trunc i64 %4 to i32
  %8 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 %7
  store i8 1, i8* %8, align 1
  %9 = add i64 %4, 1
  %10 = icmp ult i64 %9, 16
  br i1 %10, label %11, label %17

11:                                               ; preds = %6
  %12 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 16
  %13 = bitcast i32* %12 to i8*
  %14 = add i32 %7, 1
  %15 = getelementptr i8, i8* %13, i32 %14
  %16 = sub i32 15, %7
  call void @llvm.memset.p0i8.i32(i8* align 1 %15, i8 0, i32 %16, i1 false)
  br label %17

17:                                               ; preds = %11, %6
  %18 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 5
  store i8 1, i8* %18, align 8
  %19 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 4, i32 0
  tail call fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nonnull %0, i8* nonnull %19, i64 16)
  br label %20

20:                                               ; preds = %2, %17
  %21 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 0
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 2
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 3
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 4
  %30 = load i32, i32* %29, align 4
  %31 = lshr i32 %24, 26
  %32 = and i32 %24, 67108863
  %33 = add i32 %26, %31
  %34 = lshr i32 %33, 26
  %35 = and i32 %33, 67108863
  %36 = add i32 %34, %28
  %37 = lshr i32 %36, 26
  %38 = and i32 %36, 67108863
  %39 = add i32 %37, %30
  %40 = lshr i32 %39, 26
  %41 = mul nuw nsw i32 %40, 5
  %42 = add i32 %41, %22
  %43 = lshr i32 %42, 26
  %44 = and i32 %42, 67108863
  %45 = add nuw nsw i32 %43, %32
  %46 = add nuw nsw i32 %44, 5
  %47 = lshr i32 %46, 26
  %48 = add nuw nsw i32 %47, %45
  %49 = lshr i32 %48, 26
  %50 = add nuw nsw i32 %49, %35
  %51 = lshr i32 %50, 26
  %52 = add nuw nsw i32 %51, %38
  %53 = lshr i32 %52, 26
  %54 = or i32 %39, -67108864
  %55 = add nsw i32 %54, %53
  %56 = lshr i32 %55, 31
  %57 = add nsw i32 %56, -1
  %58 = and i32 %57, 67108863
  %59 = and i32 %58, %46
  %60 = and i32 %58, %48
  %61 = ashr i32 %55, 31
  %62 = and i32 %61, %44
  %63 = or i32 %62, %59
  %64 = and i32 %61, %45
  %65 = or i32 %64, %60
  %66 = and i32 %61, %35
  %67 = or i32 %66, 0
  %68 = and i32 %61, %38
  %69 = or i32 %68, 0
  %70 = and i32 %61, %39
  %71 = or i32 0, %70
  %72 = shl i32 %65, 26
  %73 = or i32 %63, %72
  %74 = lshr i32 %65, 6
  %75 = shl i32 %67, 20
  %76 = or i32 %74, %75
  %77 = lshr i32 %67, 12
  %78 = shl i32 %69, 14
  %79 = or i32 %77, %78
  %80 = lshr i32 %69, 18
  %81 = shl i32 %71, 8
  %82 = or i32 %81, %80
  %83 = zext i32 %73 to i64
  %84 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 0
  %85 = load i32, i32* %84, align 8
  %86 = zext i32 %85 to i64
  %87 = add nuw nsw i64 %83, %86
  %88 = trunc i64 %87 to i32
  %89 = zext i32 %76 to i64
  %90 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 1
  %91 = load i32, i32* %90, align 4
  %92 = zext i32 %91 to i64
  %93 = add nuw nsw i64 %89, %92
  %94 = lshr i64 %87, 32
  %95 = add nuw nsw i64 %93, %94
  %96 = trunc i64 %95 to i32
  %97 = zext i32 %79 to i64
  %98 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 2
  %99 = load i32, i32* %98, align 8
  %100 = zext i32 %99 to i64
  %101 = add nuw nsw i64 %97, %100
  %102 = lshr i64 %95, 32
  %103 = add nuw nsw i64 %101, %102
  %104 = trunc i64 %103 to i32
  %105 = zext i32 %82 to i64
  %106 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 2, i32 3
  %107 = load i32, i32* %106, align 4
  %108 = zext i32 %107 to i64
  %109 = add nuw nsw i64 %105, %108
  %110 = lshr i64 %103, 32
  %111 = add nuw nsw i64 %109, %110
  %112 = trunc i64 %111 to i32
  %113 = bitcast i8* %1 to i32*
  store i32 %88, i32* %113, align 1
  %114 = getelementptr i8, i8* %1, i32 4
  %115 = bitcast i8* %114 to i32*
  store i32 %96, i32* %115, align 1
  %116 = getelementptr i8, i8* %1, i32 8
  %117 = bitcast i8* %116 to i32*
  store i32 %104, i32* %117, align 1
  %118 = getelementptr i8, i8* %1, i32 12
  %119 = bitcast i8* %118 to i32*
  store i32 %112, i32* %119, align 1
  %120 = bitcast %struct.poly1305_state_internal_t* %0 to i8*
  tail call void @sodium_memzero(i8* %120, i32 88) #6
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #2

; Function Attrs: nofree norecurse nounwind
define internal fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* nocapture %0, i8* nocapture readonly %1, i64 %2) unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 5
  %5 = load i8, i8* %4, align 8
  %6 = icmp eq i8 %5, 0
  %7 = select i1 %6, i32 16777216, i32 0
  %8 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 2
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 4
  %15 = load i32, i32* %14, align 8
  %16 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 2
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 3
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 1, i32 4
  %25 = load i32, i32* %24, align 4
  %26 = icmp ugt i64 %2, 15
  br i1 %26, label %27, label %160

27:                                               ; preds = %3
  %28 = mul i32 %15, 5
  %29 = mul i32 %13, 5
  %30 = mul i32 %11, 5
  %31 = mul i32 %9, 5
  %32 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i32 0, i32 0, i32 0
  %33 = load i32, i32* %32, align 8
  %34 = zext i32 %33 to i64
  %35 = zext i32 %28 to i64
  %36 = zext i32 %29 to i64
  %37 = zext i32 %30 to i64
  %38 = zext i32 %31 to i64
  %39 = zext i32 %9 to i64
  %40 = zext i32 %11 to i64
  %41 = zext i32 %13 to i64
  %42 = zext i32 %15 to i64
  br label %43

43:                                               ; preds = %27, %43
  %44 = phi i8* [ %1, %27 ], [ %157, %43 ]
  %45 = phi i64 [ %2, %27 ], [ %158, %43 ]
  %46 = phi i32 [ %17, %27 ], [ %155, %43 ]
  %47 = phi i32 [ %19, %27 ], [ %156, %43 ]
  %48 = phi i32 [ %21, %27 ], [ %140, %43 ]
  %49 = phi i32 [ %23, %27 ], [ %145, %43 ]
  %50 = phi i32 [ %25, %27 ], [ %151, %43 ]
  %51 = bitcast i8* %44 to i32*
  %52 = load i32, i32* %51, align 1
  %53 = and i32 %52, 67108863
  %54 = add i32 %53, %46
  %55 = getelementptr i8, i8* %44, i32 3
  %56 = bitcast i8* %55 to i32*
  %57 = load i32, i32* %56, align 1
  %58 = lshr i32 %57, 2
  %59 = and i32 %58, 67108863
  %60 = add i32 %59, %47
  %61 = getelementptr i8, i8* %44, i32 6
  %62 = bitcast i8* %61 to i32*
  %63 = load i32, i32* %62, align 1
  %64 = lshr i32 %63, 4
  %65 = and i32 %64, 67108863
  %66 = add i32 %65, %48
  %67 = getelementptr i8, i8* %44, i32 9
  %68 = bitcast i8* %67 to i32*
  %69 = load i32, i32* %68, align 1
  %70 = lshr i32 %69, 6
  %71 = add i32 %70, %49
  %72 = getelementptr i8, i8* %44, i32 12
  %73 = bitcast i8* %72 to i32*
  %74 = load i32, i32* %73, align 1
  %75 = lshr i32 %74, 8
  %76 = or i32 %75, %7
  %77 = add i32 %76, %50
  %78 = zext i32 %54 to i64
  %79 = mul nuw i64 %78, %34
  %80 = zext i32 %60 to i64
  %81 = mul nuw i64 %80, %35
  %82 = add i64 %81, %79
  %83 = zext i32 %66 to i64
  %84 = mul nuw i64 %83, %36
  %85 = add i64 %82, %84
  %86 = zext i32 %71 to i64
  %87 = mul nuw i64 %86, %37
  %88 = add i64 %85, %87
  %89 = zext i32 %77 to i64
  %90 = mul nuw i64 %89, %38
  %91 = add i64 %88, %90
  %92 = mul nuw i64 %78, %39
  %93 = mul nuw i64 %80, %34
  %94 = add i64 %93, %92
  %95 = mul nuw i64 %83, %35
  %96 = add i64 %94, %95
  %97 = mul nuw i64 %86, %36
  %98 = add i64 %96, %97
  %99 = mul nuw i64 %89, %37
  %100 = add i64 %98, %99
  %101 = mul nuw i64 %78, %40
  %102 = mul nuw i64 %80, %39
  %103 = add i64 %102, %101
  %104 = mul nuw i64 %83, %34
  %105 = add i64 %103, %104
  %106 = mul nuw i64 %86, %35
  %107 = add i64 %105, %106
  %108 = mul nuw i64 %89, %36
  %109 = add i64 %107, %108
  %110 = mul nuw i64 %78, %41
  %111 = mul nuw i64 %80, %40
  %112 = add i64 %111, %110
  %113 = mul nuw i64 %83, %39
  %114 = add i64 %112, %113
  %115 = mul nuw i64 %86, %34
  %116 = add i64 %114, %115
  %117 = mul nuw i64 %89, %35
  %118 = add i64 %116, %117
  %119 = mul nuw i64 %78, %42
  %120 = mul nuw i64 %80, %41
  %121 = add i64 %120, %119
  %122 = mul nuw i64 %83, %40
  %123 = add i64 %121, %122
  %124 = mul nuw i64 %86, %39
  %125 = add i64 %123, %124
  %126 = mul nuw i64 %89, %34
  %127 = add i64 %125, %126
  %128 = lshr i64 %91, 26
  %129 = trunc i64 %91 to i32
  %130 = and i32 %129, 67108863
  %131 = and i64 %128, 4294967295
  %132 = add i64 %100, %131
  %133 = lshr i64 %132, 26
  %134 = trunc i64 %132 to i32
  %135 = and i32 %134, 67108863
  %136 = and i64 %133, 4294967295
  %137 = add i64 %109, %136
  %138 = lshr i64 %137, 26
  %139 = trunc i64 %137 to i32
  %140 = and i32 %139, 67108863
  %141 = and i64 %138, 4294967295
  %142 = add i64 %118, %141
  %143 = lshr i64 %142, 26
  %144 = trunc i64 %142 to i32
  %145 = and i32 %144, 67108863
  %146 = and i64 %143, 4294967295
  %147 = add i64 %127, %146
  %148 = lshr i64 %147, 26
  %149 = trunc i64 %148 to i32
  %150 = trunc i64 %147 to i32
  %151 = and i32 %150, 67108863
  %152 = mul i32 %149, 5
  %153 = add i32 %152, %130
  %154 = lshr i32 %153, 26
  %155 = and i32 %153, 67108863
  %156 = add nuw nsw i32 %154, %135
  %157 = getelementptr i8, i8* %44, i32 16
  %158 = add i64 %45, -16
  %159 = icmp ugt i64 %158, 15
  br i1 %159, label %43, label %160

160:                                              ; preds = %43, %3
  %161 = phi i32 [ %25, %3 ], [ %151, %43 ]
  %162 = phi i32 [ %23, %3 ], [ %145, %43 ]
  %163 = phi i32 [ %21, %3 ], [ %140, %43 ]
  %164 = phi i32 [ %19, %3 ], [ %156, %43 ]
  %165 = phi i32 [ %17, %3 ], [ %155, %43 ]
  store i32 %165, i32* %16, align 4
  store i32 %164, i32* %18, align 4
  store i32 %163, i32* %20, align 4
  store i32 %162, i32* %22, align 4
  store i32 %161, i32* %24, align 4
  ret void
}

declare void @sodium_memzero(i8* %0, i32 %1) local_unnamed_addr #4

declare i32 @crypto_verify_16(i8* %0, i8* %1) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly %0, i8 %1, i64 %2, i1 immarg %3) #5

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #5

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { noinline nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind willreturn writeonly }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %5 = load i8, i8* %4, align 8
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = icmp eq i8 %5, 0
; Looking for a replacement for:
%0:i8 = var
%1:i1 = eq 0:i8, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = select i1 %6, i32 16777216, i32 0
; Looking for a replacement for:
%0:i8 = var
%1:i1 = eq 0:i8, %0
%2:i32 = select %1, 16777216:i32, 0:i32
infer %2

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %8, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %10, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %12, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %14, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %16, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %18, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %20, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %22, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %24, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = icmp ugt i64 %2, 15
; Looking for a replacement for:
%0:i64 = var
%1:i1 = ult 15:i64, %0
infer %1

; *****
; For LLVM instruction:
;  %28 = mul i32 %15, 5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 5:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %29 = mul i32 %13, 5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 5:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %30 = mul i32 %11, 5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 5:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %31 = mul i32 %9, 5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 5:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %32, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %34 = zext i32 %33 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
infer %1 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %35 = zext i32 %28 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 5:i32, %0
%2:i64 = zext %1
infer %2 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %36 = zext i32 %29 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 5:i32, %0
%2:i64 = zext %1
infer %2 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %37 = zext i32 %30 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 5:i32, %0
%2:i64 = zext %1
infer %2 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %38 = zext i32 %31 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 5:i32, %0
%2:i64 = zext %1
infer %2 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %39 = zext i32 %9 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
infer %1 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %40 = zext i32 %11 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
infer %1 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %41 = zext i32 %13 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
infer %1 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %42 = zext i32 %15 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
infer %1 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %45 = phi i64 [ %2, %27 ], [ %158, %43 ]
; Looking for a replacement for:
%0:i64 = var (range=[16,0))
infer %0

; *****
; For LLVM instruction:
;  %46 = phi i32 [ %17, %27 ], [ %155, %43 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %47 = phi i32 [ %19, %27 ], [ %156, %43 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %48 = phi i32 [ %21, %27 ], [ %140, %43 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %49 = phi i32 [ %23, %27 ], [ %145, %43 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %50 = phi i32 [ %25, %27 ], [ %151, %43 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %52 = load i32, i32* %51, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00000011111111111111111111111111)

; *****
; For LLVM instruction:
;  %53 = and i32 %52, 67108863
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 67108863:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %54 = add i32 %53, %46
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = and 67108863:i32, %1
%3:i32 = add %0, %2
infer %3

; *****
; For LLVM instruction:
;  %57 = load i32, i32* %56, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00001111111111111111111111111100)

; *****
; For LLVM instruction:
;  %58 = lshr i32 %57, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 2:i32
infer %1 (demandedBits=00000011111111111111111111111111)

; *****
; For LLVM instruction:
;  %59 = and i32 %58, 67108863
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 2:i32
%2:i32 = and 67108863:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %60 = add i32 %59, %47
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 2:i32
%3:i32 = and 67108863:i32, %2
%4:i32 = add %0, %3
infer %4

; *****
; For LLVM instruction:
;  %63 = load i32, i32* %62, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00111111111111111111111111110000)

; *****
; For LLVM instruction:
;  %64 = lshr i32 %63, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 4:i32
infer %1 (demandedBits=00000011111111111111111111111111)

; *****
; For LLVM instruction:
;  %65 = and i32 %64, 67108863
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 4:i32
%2:i32 = and 67108863:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %66 = add i32 %65, %48
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 4:i32
%3:i32 = and 67108863:i32, %2
%4:i32 = add %0, %3
infer %4

; *****
; For LLVM instruction:
;  %69 = load i32, i32* %68, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=11111111111111111111111111000000)

; *****
; For LLVM instruction:
;  %70 = lshr i32 %69, 6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 6:i32
infer %1

; *****
; For LLVM instruction:
;  %71 = add i32 %70, %49
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 6:i32
%3:i32 = add %0, %2
infer %3

; *****
; For LLVM instruction:
;  %74 = load i32, i32* %73, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=11111111111111111111111100000000)

; *****
; For LLVM instruction:
;  %75 = lshr i32 %74, 8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 8:i32
infer %1

; *****
; For LLVM instruction:
;  %76 = or i32 %75, %7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 8:i32
%2:i8 = var
%3:i1 = eq 0:i8, %2
%4:i32 = select %3, 16777216:i32, 0:i32
%5:i32 = or %1, %4
infer %5

; *****
; For LLVM instruction:
;  %77 = add i32 %76, %50
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 8:i32
%3:i8 = var
%4:i1 = eq 0:i8, %3
%5:i32 = select %4, 16777216:i32, 0:i32
%6:i32 = or %2, %5
%7:i32 = add %0, %6
infer %7

; *****
; For LLVM instruction:
;  %78 = zext i32 %54 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = and 67108863:i32, %1
%3:i32 = add %0, %2
%4:i64 = zext %3
infer %4 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %79 = mul nuw i64 %78, %34
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = and 67108863:i32, %3
%5:i32 = add %2, %4
%6:i64 = zext %5 (hasExternalUses)
%7:i64 = mulnuw %1, %6
infer %7 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %80 = zext i32 %60 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 2:i32
%3:i32 = and 67108863:i32, %2
%4:i32 = add %0, %3
%5:i64 = zext %4
infer %5 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %81 = mul nuw i64 %80, %35
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 2:i32
%3:i32 = and 67108863:i32, %2
%4:i32 = add %0, %3
%5:i64 = zext %4 (hasExternalUses)
%6:i32 = var
%7:i32 = mul 5:i32, %6
%8:i64 = zext %7 (hasExternalUses)
%9:i64 = mulnuw %5, %8
infer %9 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %82 = add i64 %81, %79
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = and 67108863:i32, %3
%5:i32 = add %2, %4
%6:i64 = zext %5 (hasExternalUses)
%7:i64 = mulnuw %1, %6
%8:i32 = var
%9:i32 = var
%10:i32 = lshr %9, 2:i32
%11:i32 = and 67108863:i32, %10
%12:i32 = add %8, %11
%13:i64 = zext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = mul 5:i32, %14
%16:i64 = zext %15 (hasExternalUses)
%17:i64 = mulnuw %13, %16
%18:i64 = add %7, %17
infer %18 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %83 = zext i32 %66 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 4:i32
%3:i32 = and 67108863:i32, %2
%4:i32 = add %0, %3
%5:i64 = zext %4
infer %5 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %84 = mul nuw i64 %83, %36
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 4:i32
%3:i32 = and 67108863:i32, %2
%4:i32 = add %0, %3
%5:i64 = zext %4 (hasExternalUses)
%6:i32 = var
%7:i32 = mul 5:i32, %6
%8:i64 = zext %7 (hasExternalUses)
%9:i64 = mulnuw %5, %8
infer %9 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %85 = add i64 %82, %84
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = and 67108863:i32, %3
%5:i32 = add %2, %4
%6:i64 = zext %5 (hasExternalUses)
%7:i64 = mulnuw %1, %6
%8:i32 = var
%9:i32 = var
%10:i32 = lshr %9, 2:i32
%11:i32 = and 67108863:i32, %10
%12:i32 = add %8, %11
%13:i64 = zext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = mul 5:i32, %14
%16:i64 = zext %15 (hasExternalUses)
%17:i64 = mulnuw %13, %16
%18:i64 = add %7, %17
%19:i32 = var
%20:i32 = var
%21:i32 = lshr %20, 4:i32
%22:i32 = and 67108863:i32, %21
%23:i32 = add %19, %22
%24:i64 = zext %23 (hasExternalUses)
%25:i32 = var
%26:i32 = mul 5:i32, %25
%27:i64 = zext %26 (hasExternalUses)
%28:i64 = mulnuw %24, %27
%29:i64 = add %18, %28
infer %29 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %86 = zext i32 %71 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 6:i32
%3:i32 = add %0, %2
%4:i64 = zext %3
infer %4 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %87 = mul nuw i64 %86, %37
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 6:i32
%3:i32 = add %0, %2
%4:i64 = zext %3 (hasExternalUses)
%5:i32 = var
%6:i32 = mul 5:i32, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %4, %7
infer %8 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %88 = add i64 %85, %87
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = and 67108863:i32, %3
%5:i32 = add %2, %4
%6:i64 = zext %5 (hasExternalUses)
%7:i64 = mulnuw %1, %6
%8:i32 = var
%9:i32 = var
%10:i32 = lshr %9, 2:i32
%11:i32 = and 67108863:i32, %10
%12:i32 = add %8, %11
%13:i64 = zext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = mul 5:i32, %14
%16:i64 = zext %15 (hasExternalUses)
%17:i64 = mulnuw %13, %16
%18:i64 = add %7, %17
%19:i32 = var
%20:i32 = var
%21:i32 = lshr %20, 4:i32
%22:i32 = and 67108863:i32, %21
%23:i32 = add %19, %22
%24:i64 = zext %23 (hasExternalUses)
%25:i32 = var
%26:i32 = mul 5:i32, %25
%27:i64 = zext %26 (hasExternalUses)
%28:i64 = mulnuw %24, %27
%29:i64 = add %18, %28
%30:i32 = var
%31:i32 = var
%32:i32 = lshr %31, 6:i32
%33:i32 = add %30, %32
%34:i64 = zext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = mul 5:i32, %35
%37:i64 = zext %36 (hasExternalUses)
%38:i64 = mulnuw %34, %37
%39:i64 = add %29, %38
infer %39 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %89 = zext i32 %77 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 8:i32
%3:i8 = var
%4:i1 = eq 0:i8, %3
%5:i32 = select %4, 16777216:i32, 0:i32
%6:i32 = or %2, %5
%7:i32 = add %0, %6
%8:i64 = zext %7
infer %8 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %90 = mul nuw i64 %89, %38
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 8:i32
%3:i8 = var
%4:i1 = eq 0:i8, %3
%5:i32 = select %4, 16777216:i32, 0:i32
%6:i32 = or %2, %5
%7:i32 = add %0, %6
%8:i64 = zext %7 (hasExternalUses)
%9:i32 = var
%10:i32 = mul 5:i32, %9
%11:i64 = zext %10
%12:i64 = mulnuw %8, %11
infer %12 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %91 = add i64 %88, %90
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = and 67108863:i32, %3
%5:i32 = add %2, %4
%6:i64 = zext %5 (hasExternalUses)
%7:i64 = mulnuw %1, %6
%8:i32 = var
%9:i32 = var
%10:i32 = lshr %9, 2:i32
%11:i32 = and 67108863:i32, %10
%12:i32 = add %8, %11
%13:i64 = zext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = mul 5:i32, %14
%16:i64 = zext %15 (hasExternalUses)
%17:i64 = mulnuw %13, %16
%18:i64 = add %7, %17
%19:i32 = var
%20:i32 = var
%21:i32 = lshr %20, 4:i32
%22:i32 = and 67108863:i32, %21
%23:i32 = add %19, %22
%24:i64 = zext %23 (hasExternalUses)
%25:i32 = var
%26:i32 = mul 5:i32, %25
%27:i64 = zext %26 (hasExternalUses)
%28:i64 = mulnuw %24, %27
%29:i64 = add %18, %28
%30:i32 = var
%31:i32 = var
%32:i32 = lshr %31, 6:i32
%33:i32 = add %30, %32
%34:i64 = zext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = mul 5:i32, %35
%37:i64 = zext %36 (hasExternalUses)
%38:i64 = mulnuw %34, %37
%39:i64 = add %29, %38
%40:i32 = var
%41:i32 = var
%42:i32 = lshr %41, 8:i32
%43:i8 = var
%44:i1 = eq 0:i8, %43
%45:i32 = select %44, 16777216:i32, 0:i32
%46:i32 = or %42, %45
%47:i32 = add %40, %46
%48:i64 = zext %47 (hasExternalUses)
%49:i32 = var
%50:i32 = mul 5:i32, %49
%51:i64 = zext %50
%52:i64 = mulnuw %48, %51
%53:i64 = add %39, %52
infer %53 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %92 = mul nuw i64 %78, %39
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = and 67108863:i32, %3
%5:i32 = add %2, %4
%6:i64 = zext %5 (hasExternalUses)
%7:i64 = mulnuw %1, %6
infer %7 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %93 = mul nuw i64 %80, %34
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %1, %7
infer %8 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %94 = add i64 %93, %92
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = and 67108863:i32, %3
%5:i32 = add %2, %4
%6:i64 = zext %5 (hasExternalUses)
%7:i64 = mulnuw %1, %6
%8:i32 = var
%9:i64 = zext %8 (hasExternalUses)
%10:i32 = var
%11:i32 = var
%12:i32 = lshr %11, 2:i32
%13:i32 = and 67108863:i32, %12
%14:i32 = add %10, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %9, %15
%17:i64 = add %7, %16
infer %17 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %95 = mul nuw i64 %83, %35
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 4:i32
%3:i32 = and 67108863:i32, %2
%4:i32 = add %0, %3
%5:i64 = zext %4 (hasExternalUses)
%6:i32 = var
%7:i32 = mul 5:i32, %6
%8:i64 = zext %7 (hasExternalUses)
%9:i64 = mulnuw %5, %8
infer %9 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %96 = add i64 %94, %95
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = and 67108863:i32, %3
%5:i32 = add %2, %4
%6:i64 = zext %5 (hasExternalUses)
%7:i64 = mulnuw %1, %6
%8:i32 = var
%9:i64 = zext %8 (hasExternalUses)
%10:i32 = var
%11:i32 = var
%12:i32 = lshr %11, 2:i32
%13:i32 = and 67108863:i32, %12
%14:i32 = add %10, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %9, %15
%17:i64 = add %7, %16
%18:i32 = var
%19:i32 = var
%20:i32 = lshr %19, 4:i32
%21:i32 = and 67108863:i32, %20
%22:i32 = add %18, %21
%23:i64 = zext %22 (hasExternalUses)
%24:i32 = var
%25:i32 = mul 5:i32, %24
%26:i64 = zext %25 (hasExternalUses)
%27:i64 = mulnuw %23, %26
%28:i64 = add %17, %27
infer %28 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %97 = mul nuw i64 %86, %36
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 6:i32
%3:i32 = add %0, %2
%4:i64 = zext %3 (hasExternalUses)
%5:i32 = var
%6:i32 = mul 5:i32, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %4, %7
infer %8 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %98 = add i64 %96, %97
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = and 67108863:i32, %3
%5:i32 = add %2, %4
%6:i64 = zext %5 (hasExternalUses)
%7:i64 = mulnuw %1, %6
%8:i32 = var
%9:i64 = zext %8 (hasExternalUses)
%10:i32 = var
%11:i32 = var
%12:i32 = lshr %11, 2:i32
%13:i32 = and 67108863:i32, %12
%14:i32 = add %10, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %9, %15
%17:i64 = add %7, %16
%18:i32 = var
%19:i32 = var
%20:i32 = lshr %19, 4:i32
%21:i32 = and 67108863:i32, %20
%22:i32 = add %18, %21
%23:i64 = zext %22 (hasExternalUses)
%24:i32 = var
%25:i32 = mul 5:i32, %24
%26:i64 = zext %25 (hasExternalUses)
%27:i64 = mulnuw %23, %26
%28:i64 = add %17, %27
%29:i32 = var
%30:i32 = var
%31:i32 = lshr %30, 6:i32
%32:i32 = add %29, %31
%33:i64 = zext %32 (hasExternalUses)
%34:i32 = var
%35:i32 = mul 5:i32, %34
%36:i64 = zext %35 (hasExternalUses)
%37:i64 = mulnuw %33, %36
%38:i64 = add %28, %37
infer %38 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %99 = mul nuw i64 %89, %37
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 8:i32
%3:i8 = var
%4:i1 = eq 0:i8, %3
%5:i32 = select %4, 16777216:i32, 0:i32
%6:i32 = or %2, %5
%7:i32 = add %0, %6
%8:i64 = zext %7 (hasExternalUses)
%9:i32 = var
%10:i32 = mul 5:i32, %9
%11:i64 = zext %10 (hasExternalUses)
%12:i64 = mulnuw %8, %11
infer %12 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %100 = add i64 %98, %99
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = and 67108863:i32, %3
%5:i32 = add %2, %4
%6:i64 = zext %5 (hasExternalUses)
%7:i64 = mulnuw %1, %6
%8:i32 = var
%9:i64 = zext %8 (hasExternalUses)
%10:i32 = var
%11:i32 = var
%12:i32 = lshr %11, 2:i32
%13:i32 = and 67108863:i32, %12
%14:i32 = add %10, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %9, %15
%17:i64 = add %7, %16
%18:i32 = var
%19:i32 = var
%20:i32 = lshr %19, 4:i32
%21:i32 = and 67108863:i32, %20
%22:i32 = add %18, %21
%23:i64 = zext %22 (hasExternalUses)
%24:i32 = var
%25:i32 = mul 5:i32, %24
%26:i64 = zext %25 (hasExternalUses)
%27:i64 = mulnuw %23, %26
%28:i64 = add %17, %27
%29:i32 = var
%30:i32 = var
%31:i32 = lshr %30, 6:i32
%32:i32 = add %29, %31
%33:i64 = zext %32 (hasExternalUses)
%34:i32 = var
%35:i32 = mul 5:i32, %34
%36:i64 = zext %35 (hasExternalUses)
%37:i64 = mulnuw %33, %36
%38:i64 = add %28, %37
%39:i32 = var
%40:i32 = var
%41:i32 = lshr %40, 8:i32
%42:i8 = var
%43:i1 = eq 0:i8, %42
%44:i32 = select %43, 16777216:i32, 0:i32
%45:i32 = or %41, %44
%46:i32 = add %39, %45
%47:i64 = zext %46 (hasExternalUses)
%48:i32 = var
%49:i32 = mul 5:i32, %48
%50:i64 = zext %49 (hasExternalUses)
%51:i64 = mulnuw %47, %50
%52:i64 = add %38, %51
infer %52 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %101 = mul nuw i64 %78, %40
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = and 67108863:i32, %3
%5:i32 = add %2, %4
%6:i64 = zext %5 (hasExternalUses)
%7:i64 = mulnuw %1, %6
infer %7 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %102 = mul nuw i64 %80, %39
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %1, %7
infer %8 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %103 = add i64 %102, %101
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9 (hasExternalUses)
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
infer %17 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %104 = mul nuw i64 %83, %34
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 4:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %1, %7
infer %8 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %105 = add i64 %103, %104
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9 (hasExternalUses)
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24 (hasExternalUses)
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
infer %27 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %106 = mul nuw i64 %86, %35
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 6:i32
%3:i32 = add %0, %2
%4:i64 = zext %3 (hasExternalUses)
%5:i32 = var
%6:i32 = mul 5:i32, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %4, %7
infer %8 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %107 = add i64 %105, %106
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9 (hasExternalUses)
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24 (hasExternalUses)
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
%28:i32 = var
%29:i32 = var
%30:i32 = lshr %29, 6:i32
%31:i32 = add %28, %30
%32:i64 = zext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = mul 5:i32, %33
%35:i64 = zext %34 (hasExternalUses)
%36:i64 = mulnuw %32, %35
%37:i64 = add %27, %36
infer %37 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %108 = mul nuw i64 %89, %36
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 8:i32
%3:i8 = var
%4:i1 = eq 0:i8, %3
%5:i32 = select %4, 16777216:i32, 0:i32
%6:i32 = or %2, %5
%7:i32 = add %0, %6
%8:i64 = zext %7 (hasExternalUses)
%9:i32 = var
%10:i32 = mul 5:i32, %9
%11:i64 = zext %10 (hasExternalUses)
%12:i64 = mulnuw %8, %11
infer %12 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %109 = add i64 %107, %108
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9 (hasExternalUses)
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24 (hasExternalUses)
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
%28:i32 = var
%29:i32 = var
%30:i32 = lshr %29, 6:i32
%31:i32 = add %28, %30
%32:i64 = zext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = mul 5:i32, %33
%35:i64 = zext %34 (hasExternalUses)
%36:i64 = mulnuw %32, %35
%37:i64 = add %27, %36
%38:i32 = var
%39:i32 = var
%40:i32 = lshr %39, 8:i32
%41:i8 = var
%42:i1 = eq 0:i8, %41
%43:i32 = select %42, 16777216:i32, 0:i32
%44:i32 = or %40, %43
%45:i32 = add %38, %44
%46:i64 = zext %45 (hasExternalUses)
%47:i32 = var
%48:i32 = mul 5:i32, %47
%49:i64 = zext %48 (hasExternalUses)
%50:i64 = mulnuw %46, %49
%51:i64 = add %37, %50
infer %51 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %110 = mul nuw i64 %78, %41
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = and 67108863:i32, %3
%5:i32 = add %2, %4
%6:i64 = zext %5 (hasExternalUses)
%7:i64 = mulnuw %1, %6
infer %7 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %111 = mul nuw i64 %80, %40
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %1, %7
infer %8 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %112 = add i64 %111, %110
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9 (hasExternalUses)
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
infer %17 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %113 = mul nuw i64 %83, %39
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 4:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %1, %7
infer %8 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %114 = add i64 %112, %113
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9 (hasExternalUses)
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24 (hasExternalUses)
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
infer %27 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %115 = mul nuw i64 %86, %34
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 6:i32
%5:i32 = add %2, %4
%6:i64 = zext %5 (hasExternalUses)
%7:i64 = mulnuw %1, %6
infer %7 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %116 = add i64 %114, %115
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9 (hasExternalUses)
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24 (hasExternalUses)
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
%28:i32 = var
%29:i64 = zext %28 (hasExternalUses)
%30:i32 = var
%31:i32 = var
%32:i32 = lshr %31, 6:i32
%33:i32 = add %30, %32
%34:i64 = zext %33 (hasExternalUses)
%35:i64 = mulnuw %29, %34
%36:i64 = add %27, %35
infer %36 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %117 = mul nuw i64 %89, %35
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 8:i32
%3:i8 = var
%4:i1 = eq 0:i8, %3
%5:i32 = select %4, 16777216:i32, 0:i32
%6:i32 = or %2, %5
%7:i32 = add %0, %6
%8:i64 = zext %7 (hasExternalUses)
%9:i32 = var
%10:i32 = mul 5:i32, %9
%11:i64 = zext %10 (hasExternalUses)
%12:i64 = mulnuw %8, %11
infer %12 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %118 = add i64 %116, %117
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9 (hasExternalUses)
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24 (hasExternalUses)
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
%28:i32 = var
%29:i64 = zext %28 (hasExternalUses)
%30:i32 = var
%31:i32 = var
%32:i32 = lshr %31, 6:i32
%33:i32 = add %30, %32
%34:i64 = zext %33 (hasExternalUses)
%35:i64 = mulnuw %29, %34
%36:i64 = add %27, %35
%37:i32 = var
%38:i32 = var
%39:i32 = lshr %38, 8:i32
%40:i8 = var
%41:i1 = eq 0:i8, %40
%42:i32 = select %41, 16777216:i32, 0:i32
%43:i32 = or %39, %42
%44:i32 = add %37, %43
%45:i64 = zext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = mul 5:i32, %46
%48:i64 = zext %47 (hasExternalUses)
%49:i64 = mulnuw %45, %48
%50:i64 = add %36, %49
infer %50 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %119 = mul nuw i64 %78, %42
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = and 67108863:i32, %3
%5:i32 = add %2, %4
%6:i64 = zext %5 (hasExternalUses)
%7:i64 = mulnuw %1, %6
infer %7 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %120 = mul nuw i64 %80, %41
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %1, %7
infer %8 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %121 = add i64 %120, %119
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
infer %17 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %122 = mul nuw i64 %83, %40
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 4:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %1, %7
infer %8 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %123 = add i64 %121, %122
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24 (hasExternalUses)
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
infer %27 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %124 = mul nuw i64 %86, %39
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 6:i32
%5:i32 = add %2, %4
%6:i64 = zext %5 (hasExternalUses)
%7:i64 = mulnuw %1, %6
infer %7 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %125 = add i64 %123, %124
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24 (hasExternalUses)
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
%28:i32 = var
%29:i64 = zext %28 (hasExternalUses)
%30:i32 = var
%31:i32 = var
%32:i32 = lshr %31, 6:i32
%33:i32 = add %30, %32
%34:i64 = zext %33 (hasExternalUses)
%35:i64 = mulnuw %29, %34
%36:i64 = add %27, %35
infer %36 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %126 = mul nuw i64 %89, %34
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 8:i32
%5:i8 = var
%6:i1 = eq 0:i8, %5
%7:i32 = select %6, 16777216:i32, 0:i32
%8:i32 = or %4, %7
%9:i32 = add %2, %8
%10:i64 = zext %9 (hasExternalUses)
%11:i64 = mulnuw %1, %10
infer %11 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %127 = add i64 %125, %126
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24 (hasExternalUses)
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
%28:i32 = var
%29:i64 = zext %28 (hasExternalUses)
%30:i32 = var
%31:i32 = var
%32:i32 = lshr %31, 6:i32
%33:i32 = add %30, %32
%34:i64 = zext %33 (hasExternalUses)
%35:i64 = mulnuw %29, %34
%36:i64 = add %27, %35
%37:i32 = var
%38:i64 = zext %37 (hasExternalUses)
%39:i32 = var
%40:i32 = var
%41:i32 = lshr %40, 8:i32
%42:i8 = var
%43:i1 = eq 0:i8, %42
%44:i32 = select %43, 16777216:i32, 0:i32
%45:i32 = or %41, %44
%46:i32 = add %39, %45
%47:i64 = zext %46 (hasExternalUses)
%48:i64 = mulnuw %38, %47
%49:i64 = add %36, %48
infer %49 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %128 = lshr i64 %91, 26
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = and 67108863:i32, %3
%5:i32 = add %2, %4
%6:i64 = zext %5 (hasExternalUses)
%7:i64 = mulnuw %1, %6
%8:i32 = var
%9:i32 = var
%10:i32 = lshr %9, 2:i32
%11:i32 = and 67108863:i32, %10
%12:i32 = add %8, %11
%13:i64 = zext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = mul 5:i32, %14
%16:i64 = zext %15 (hasExternalUses)
%17:i64 = mulnuw %13, %16
%18:i64 = add %7, %17
%19:i32 = var
%20:i32 = var
%21:i32 = lshr %20, 4:i32
%22:i32 = and 67108863:i32, %21
%23:i32 = add %19, %22
%24:i64 = zext %23 (hasExternalUses)
%25:i32 = var
%26:i32 = mul 5:i32, %25
%27:i64 = zext %26 (hasExternalUses)
%28:i64 = mulnuw %24, %27
%29:i64 = add %18, %28
%30:i32 = var
%31:i32 = var
%32:i32 = lshr %31, 6:i32
%33:i32 = add %30, %32
%34:i64 = zext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = mul 5:i32, %35
%37:i64 = zext %36 (hasExternalUses)
%38:i64 = mulnuw %34, %37
%39:i64 = add %29, %38
%40:i32 = var
%41:i32 = var
%42:i32 = lshr %41, 8:i32
%43:i8 = var
%44:i1 = eq 0:i8, %43
%45:i32 = select %44, 16777216:i32, 0:i32
%46:i32 = or %42, %45
%47:i32 = add %40, %46
%48:i64 = zext %47 (hasExternalUses)
%49:i32 = var
%50:i32 = mul 5:i32, %49
%51:i64 = zext %50
%52:i64 = mulnuw %48, %51
%53:i64 = add %39, %52 (hasExternalUses)
%54:i64 = lshr %53, 26:i64
infer %54 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %129 = trunc i64 %91 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = and 67108863:i32, %3
%5:i32 = add %2, %4
%6:i64 = zext %5 (hasExternalUses)
%7:i64 = mulnuw %1, %6
%8:i32 = var
%9:i32 = var
%10:i32 = lshr %9, 2:i32
%11:i32 = and 67108863:i32, %10
%12:i32 = add %8, %11
%13:i64 = zext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = mul 5:i32, %14
%16:i64 = zext %15 (hasExternalUses)
%17:i64 = mulnuw %13, %16
%18:i64 = add %7, %17
%19:i32 = var
%20:i32 = var
%21:i32 = lshr %20, 4:i32
%22:i32 = and 67108863:i32, %21
%23:i32 = add %19, %22
%24:i64 = zext %23 (hasExternalUses)
%25:i32 = var
%26:i32 = mul 5:i32, %25
%27:i64 = zext %26 (hasExternalUses)
%28:i64 = mulnuw %24, %27
%29:i64 = add %18, %28
%30:i32 = var
%31:i32 = var
%32:i32 = lshr %31, 6:i32
%33:i32 = add %30, %32
%34:i64 = zext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = mul 5:i32, %35
%37:i64 = zext %36 (hasExternalUses)
%38:i64 = mulnuw %34, %37
%39:i64 = add %29, %38
%40:i32 = var
%41:i32 = var
%42:i32 = lshr %41, 8:i32
%43:i8 = var
%44:i1 = eq 0:i8, %43
%45:i32 = select %44, 16777216:i32, 0:i32
%46:i32 = or %42, %45
%47:i32 = add %40, %46
%48:i64 = zext %47 (hasExternalUses)
%49:i32 = var
%50:i32 = mul 5:i32, %49
%51:i64 = zext %50
%52:i64 = mulnuw %48, %51
%53:i64 = add %39, %52 (hasExternalUses)
%54:i32 = trunc %53
infer %54 (demandedBits=00000011111111111111111111111111)

; *****
; For LLVM instruction:
;  %130 = and i32 %129, 67108863
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = and 67108863:i32, %3
%5:i32 = add %2, %4
%6:i64 = zext %5 (hasExternalUses)
%7:i64 = mulnuw %1, %6
%8:i32 = var
%9:i32 = var
%10:i32 = lshr %9, 2:i32
%11:i32 = and 67108863:i32, %10
%12:i32 = add %8, %11
%13:i64 = zext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = mul 5:i32, %14
%16:i64 = zext %15 (hasExternalUses)
%17:i64 = mulnuw %13, %16
%18:i64 = add %7, %17
%19:i32 = var
%20:i32 = var
%21:i32 = lshr %20, 4:i32
%22:i32 = and 67108863:i32, %21
%23:i32 = add %19, %22
%24:i64 = zext %23 (hasExternalUses)
%25:i32 = var
%26:i32 = mul 5:i32, %25
%27:i64 = zext %26 (hasExternalUses)
%28:i64 = mulnuw %24, %27
%29:i64 = add %18, %28
%30:i32 = var
%31:i32 = var
%32:i32 = lshr %31, 6:i32
%33:i32 = add %30, %32
%34:i64 = zext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = mul 5:i32, %35
%37:i64 = zext %36 (hasExternalUses)
%38:i64 = mulnuw %34, %37
%39:i64 = add %29, %38
%40:i32 = var
%41:i32 = var
%42:i32 = lshr %41, 8:i32
%43:i8 = var
%44:i1 = eq 0:i8, %43
%45:i32 = select %44, 16777216:i32, 0:i32
%46:i32 = or %42, %45
%47:i32 = add %40, %46
%48:i64 = zext %47 (hasExternalUses)
%49:i32 = var
%50:i32 = mul 5:i32, %49
%51:i64 = zext %50
%52:i64 = mulnuw %48, %51
%53:i64 = add %39, %52 (hasExternalUses)
%54:i32 = trunc %53
%55:i32 = and 67108863:i32, %54
infer %55

; *****
; For LLVM instruction:
;  %131 = and i64 %128, 4294967295
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = and 67108863:i32, %3
%5:i32 = add %2, %4
%6:i64 = zext %5 (hasExternalUses)
%7:i64 = mulnuw %1, %6
%8:i32 = var
%9:i32 = var
%10:i32 = lshr %9, 2:i32
%11:i32 = and 67108863:i32, %10
%12:i32 = add %8, %11
%13:i64 = zext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = mul 5:i32, %14
%16:i64 = zext %15 (hasExternalUses)
%17:i64 = mulnuw %13, %16
%18:i64 = add %7, %17
%19:i32 = var
%20:i32 = var
%21:i32 = lshr %20, 4:i32
%22:i32 = and 67108863:i32, %21
%23:i32 = add %19, %22
%24:i64 = zext %23 (hasExternalUses)
%25:i32 = var
%26:i32 = mul 5:i32, %25
%27:i64 = zext %26 (hasExternalUses)
%28:i64 = mulnuw %24, %27
%29:i64 = add %18, %28
%30:i32 = var
%31:i32 = var
%32:i32 = lshr %31, 6:i32
%33:i32 = add %30, %32
%34:i64 = zext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = mul 5:i32, %35
%37:i64 = zext %36 (hasExternalUses)
%38:i64 = mulnuw %34, %37
%39:i64 = add %29, %38
%40:i32 = var
%41:i32 = var
%42:i32 = lshr %41, 8:i32
%43:i8 = var
%44:i1 = eq 0:i8, %43
%45:i32 = select %44, 16777216:i32, 0:i32
%46:i32 = or %42, %45
%47:i32 = add %40, %46
%48:i64 = zext %47 (hasExternalUses)
%49:i32 = var
%50:i32 = mul 5:i32, %49
%51:i64 = zext %50
%52:i64 = mulnuw %48, %51
%53:i64 = add %39, %52 (hasExternalUses)
%54:i64 = lshr %53, 26:i64
%55:i64 = and 4294967295:i64, %54
infer %55 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %132 = add i64 %100, %131
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = and 67108863:i32, %3
%5:i32 = add %2, %4
%6:i64 = zext %5 (hasExternalUses)
%7:i64 = mulnuw %1, %6
%8:i32 = var
%9:i64 = zext %8 (hasExternalUses)
%10:i32 = var
%11:i32 = var
%12:i32 = lshr %11, 2:i32
%13:i32 = and 67108863:i32, %12
%14:i32 = add %10, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %9, %15
%17:i64 = add %7, %16
%18:i32 = var
%19:i32 = var
%20:i32 = lshr %19, 4:i32
%21:i32 = and 67108863:i32, %20
%22:i32 = add %18, %21
%23:i64 = zext %22 (hasExternalUses)
%24:i32 = var
%25:i32 = mul 5:i32, %24
%26:i64 = zext %25 (hasExternalUses)
%27:i64 = mulnuw %23, %26
%28:i64 = add %17, %27
%29:i32 = var
%30:i32 = var
%31:i32 = lshr %30, 6:i32
%32:i32 = add %29, %31
%33:i64 = zext %32 (hasExternalUses)
%34:i32 = var
%35:i32 = mul 5:i32, %34
%36:i64 = zext %35 (hasExternalUses)
%37:i64 = mulnuw %33, %36
%38:i64 = add %28, %37
%39:i32 = var
%40:i32 = var
%41:i32 = lshr %40, 8:i32
%42:i8 = var
%43:i1 = eq 0:i8, %42
%44:i32 = select %43, 16777216:i32, 0:i32
%45:i32 = or %41, %44
%46:i32 = add %39, %45
%47:i64 = zext %46 (hasExternalUses)
%48:i32 = var
%49:i32 = mul 5:i32, %48
%50:i64 = zext %49
%51:i64 = mulnuw %47, %50
%52:i64 = add %38, %51
%53:i64 = mulnuw %9, %6
%54:i64 = mulnuw %15, %26
%55:i64 = add %53, %54
%56:i64 = mulnuw %23, %36
%57:i64 = add %55, %56
%58:i64 = mulnuw %33, %50
%59:i64 = add %57, %58
%60:i32 = mul 5:i32, %0
%61:i64 = zext %60
%62:i64 = mulnuw %47, %61
%63:i64 = add %59, %62 (hasExternalUses)
%64:i64 = lshr %63, 26:i64
%65:i64 = and 4294967295:i64, %64
%66:i64 = add %52, %65
infer %66 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %133 = lshr i64 %132, 26
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = and 67108863:i32, %3
%5:i32 = add %2, %4
%6:i64 = zext %5 (hasExternalUses)
%7:i64 = mulnuw %1, %6
%8:i32 = var
%9:i64 = zext %8 (hasExternalUses)
%10:i32 = var
%11:i32 = var
%12:i32 = lshr %11, 2:i32
%13:i32 = and 67108863:i32, %12
%14:i32 = add %10, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %9, %15
%17:i64 = add %7, %16
%18:i32 = var
%19:i32 = var
%20:i32 = lshr %19, 4:i32
%21:i32 = and 67108863:i32, %20
%22:i32 = add %18, %21
%23:i64 = zext %22 (hasExternalUses)
%24:i32 = var
%25:i32 = mul 5:i32, %24
%26:i64 = zext %25 (hasExternalUses)
%27:i64 = mulnuw %23, %26
%28:i64 = add %17, %27
%29:i32 = var
%30:i32 = var
%31:i32 = lshr %30, 6:i32
%32:i32 = add %29, %31
%33:i64 = zext %32 (hasExternalUses)
%34:i32 = var
%35:i32 = mul 5:i32, %34
%36:i64 = zext %35 (hasExternalUses)
%37:i64 = mulnuw %33, %36
%38:i64 = add %28, %37
%39:i32 = var
%40:i32 = var
%41:i32 = lshr %40, 8:i32
%42:i8 = var
%43:i1 = eq 0:i8, %42
%44:i32 = select %43, 16777216:i32, 0:i32
%45:i32 = or %41, %44
%46:i32 = add %39, %45
%47:i64 = zext %46 (hasExternalUses)
%48:i32 = var
%49:i32 = mul 5:i32, %48
%50:i64 = zext %49
%51:i64 = mulnuw %47, %50
%52:i64 = add %38, %51
%53:i64 = mulnuw %9, %6
%54:i64 = mulnuw %15, %26
%55:i64 = add %53, %54
%56:i64 = mulnuw %23, %36
%57:i64 = add %55, %56
%58:i64 = mulnuw %33, %50
%59:i64 = add %57, %58
%60:i32 = mul 5:i32, %0
%61:i64 = zext %60
%62:i64 = mulnuw %47, %61
%63:i64 = add %59, %62 (hasExternalUses)
%64:i64 = lshr %63, 26:i64
%65:i64 = and 4294967295:i64, %64
%66:i64 = add %52, %65 (hasExternalUses)
%67:i64 = lshr %66, 26:i64
infer %67 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %134 = trunc i64 %132 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = and 67108863:i32, %3
%5:i32 = add %2, %4
%6:i64 = zext %5 (hasExternalUses)
%7:i64 = mulnuw %1, %6
%8:i32 = var
%9:i64 = zext %8 (hasExternalUses)
%10:i32 = var
%11:i32 = var
%12:i32 = lshr %11, 2:i32
%13:i32 = and 67108863:i32, %12
%14:i32 = add %10, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %9, %15
%17:i64 = add %7, %16
%18:i32 = var
%19:i32 = var
%20:i32 = lshr %19, 4:i32
%21:i32 = and 67108863:i32, %20
%22:i32 = add %18, %21
%23:i64 = zext %22 (hasExternalUses)
%24:i32 = var
%25:i32 = mul 5:i32, %24
%26:i64 = zext %25 (hasExternalUses)
%27:i64 = mulnuw %23, %26
%28:i64 = add %17, %27
%29:i32 = var
%30:i32 = var
%31:i32 = lshr %30, 6:i32
%32:i32 = add %29, %31
%33:i64 = zext %32 (hasExternalUses)
%34:i32 = var
%35:i32 = mul 5:i32, %34
%36:i64 = zext %35 (hasExternalUses)
%37:i64 = mulnuw %33, %36
%38:i64 = add %28, %37
%39:i32 = var
%40:i32 = var
%41:i32 = lshr %40, 8:i32
%42:i8 = var
%43:i1 = eq 0:i8, %42
%44:i32 = select %43, 16777216:i32, 0:i32
%45:i32 = or %41, %44
%46:i32 = add %39, %45
%47:i64 = zext %46 (hasExternalUses)
%48:i32 = var
%49:i32 = mul 5:i32, %48
%50:i64 = zext %49
%51:i64 = mulnuw %47, %50
%52:i64 = add %38, %51
%53:i64 = mulnuw %9, %6
%54:i64 = mulnuw %15, %26
%55:i64 = add %53, %54
%56:i64 = mulnuw %23, %36
%57:i64 = add %55, %56
%58:i64 = mulnuw %33, %50
%59:i64 = add %57, %58
%60:i32 = mul 5:i32, %0
%61:i64 = zext %60
%62:i64 = mulnuw %47, %61
%63:i64 = add %59, %62 (hasExternalUses)
%64:i64 = lshr %63, 26:i64
%65:i64 = and 4294967295:i64, %64
%66:i64 = add %52, %65 (hasExternalUses)
%67:i32 = trunc %66
infer %67 (demandedBits=00000011111111111111111111111111)

; *****
; For LLVM instruction:
;  %135 = and i32 %134, 67108863
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = and 67108863:i32, %3
%5:i32 = add %2, %4
%6:i64 = zext %5 (hasExternalUses)
%7:i64 = mulnuw %1, %6
%8:i32 = var
%9:i64 = zext %8 (hasExternalUses)
%10:i32 = var
%11:i32 = var
%12:i32 = lshr %11, 2:i32
%13:i32 = and 67108863:i32, %12
%14:i32 = add %10, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %9, %15
%17:i64 = add %7, %16
%18:i32 = var
%19:i32 = var
%20:i32 = lshr %19, 4:i32
%21:i32 = and 67108863:i32, %20
%22:i32 = add %18, %21
%23:i64 = zext %22 (hasExternalUses)
%24:i32 = var
%25:i32 = mul 5:i32, %24
%26:i64 = zext %25 (hasExternalUses)
%27:i64 = mulnuw %23, %26
%28:i64 = add %17, %27
%29:i32 = var
%30:i32 = var
%31:i32 = lshr %30, 6:i32
%32:i32 = add %29, %31
%33:i64 = zext %32 (hasExternalUses)
%34:i32 = var
%35:i32 = mul 5:i32, %34
%36:i64 = zext %35 (hasExternalUses)
%37:i64 = mulnuw %33, %36
%38:i64 = add %28, %37
%39:i32 = var
%40:i32 = var
%41:i32 = lshr %40, 8:i32
%42:i8 = var
%43:i1 = eq 0:i8, %42
%44:i32 = select %43, 16777216:i32, 0:i32
%45:i32 = or %41, %44
%46:i32 = add %39, %45
%47:i64 = zext %46 (hasExternalUses)
%48:i32 = var
%49:i32 = mul 5:i32, %48
%50:i64 = zext %49
%51:i64 = mulnuw %47, %50
%52:i64 = add %38, %51
%53:i64 = mulnuw %9, %6
%54:i64 = mulnuw %15, %26
%55:i64 = add %53, %54
%56:i64 = mulnuw %23, %36
%57:i64 = add %55, %56
%58:i64 = mulnuw %33, %50
%59:i64 = add %57, %58
%60:i32 = mul 5:i32, %0
%61:i64 = zext %60
%62:i64 = mulnuw %47, %61
%63:i64 = add %59, %62 (hasExternalUses)
%64:i64 = lshr %63, 26:i64
%65:i64 = and 4294967295:i64, %64
%66:i64 = add %52, %65 (hasExternalUses)
%67:i32 = trunc %66
%68:i32 = and 67108863:i32, %67
infer %68

; *****
; For LLVM instruction:
;  %136 = and i64 %133, 4294967295
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = and 67108863:i32, %3
%5:i32 = add %2, %4
%6:i64 = zext %5 (hasExternalUses)
%7:i64 = mulnuw %1, %6
%8:i32 = var
%9:i64 = zext %8 (hasExternalUses)
%10:i32 = var
%11:i32 = var
%12:i32 = lshr %11, 2:i32
%13:i32 = and 67108863:i32, %12
%14:i32 = add %10, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %9, %15
%17:i64 = add %7, %16
%18:i32 = var
%19:i32 = var
%20:i32 = lshr %19, 4:i32
%21:i32 = and 67108863:i32, %20
%22:i32 = add %18, %21
%23:i64 = zext %22 (hasExternalUses)
%24:i32 = var
%25:i32 = mul 5:i32, %24
%26:i64 = zext %25 (hasExternalUses)
%27:i64 = mulnuw %23, %26
%28:i64 = add %17, %27
%29:i32 = var
%30:i32 = var
%31:i32 = lshr %30, 6:i32
%32:i32 = add %29, %31
%33:i64 = zext %32 (hasExternalUses)
%34:i32 = var
%35:i32 = mul 5:i32, %34
%36:i64 = zext %35 (hasExternalUses)
%37:i64 = mulnuw %33, %36
%38:i64 = add %28, %37
%39:i32 = var
%40:i32 = var
%41:i32 = lshr %40, 8:i32
%42:i8 = var
%43:i1 = eq 0:i8, %42
%44:i32 = select %43, 16777216:i32, 0:i32
%45:i32 = or %41, %44
%46:i32 = add %39, %45
%47:i64 = zext %46 (hasExternalUses)
%48:i32 = var
%49:i32 = mul 5:i32, %48
%50:i64 = zext %49
%51:i64 = mulnuw %47, %50
%52:i64 = add %38, %51
%53:i64 = mulnuw %9, %6
%54:i64 = mulnuw %15, %26
%55:i64 = add %53, %54
%56:i64 = mulnuw %23, %36
%57:i64 = add %55, %56
%58:i64 = mulnuw %33, %50
%59:i64 = add %57, %58
%60:i32 = mul 5:i32, %0
%61:i64 = zext %60
%62:i64 = mulnuw %47, %61
%63:i64 = add %59, %62 (hasExternalUses)
%64:i64 = lshr %63, 26:i64
%65:i64 = and 4294967295:i64, %64
%66:i64 = add %52, %65 (hasExternalUses)
%67:i64 = lshr %66, 26:i64
%68:i64 = and 4294967295:i64, %67
infer %68 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %137 = add i64 %109, %136
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9 (hasExternalUses)
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24 (hasExternalUses)
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
%28:i32 = var
%29:i32 = var
%30:i32 = lshr %29, 6:i32
%31:i32 = add %28, %30
%32:i64 = zext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = mul 5:i32, %33
%35:i64 = zext %34 (hasExternalUses)
%36:i64 = mulnuw %32, %35
%37:i64 = add %27, %36
%38:i32 = var
%39:i32 = var
%40:i32 = lshr %39, 8:i32
%41:i8 = var
%42:i1 = eq 0:i8, %41
%43:i32 = select %42, 16777216:i32, 0:i32
%44:i32 = or %40, %43
%45:i32 = add %38, %44
%46:i64 = zext %45 (hasExternalUses)
%47:i32 = var
%48:i32 = mul 5:i32, %47
%49:i64 = zext %48
%50:i64 = mulnuw %46, %49
%51:i64 = add %37, %50
%52:i64 = mulnuw %1, %15
%53:i64 = mulnuw %19, %7
%54:i64 = add %52, %53
%55:i64 = mulnuw %25, %35
%56:i64 = add %54, %55
%57:i64 = mulnuw %32, %49
%58:i64 = add %56, %57
%59:i32 = mul 5:i32, %9
%60:i64 = zext %59
%61:i64 = mulnuw %46, %60
%62:i64 = add %58, %61
%63:i64 = mulnuw %19, %15
%64:i64 = mulnuw %7, %35
%65:i64 = add %63, %64
%66:i64 = mulnuw %25, %49
%67:i64 = add %65, %66
%68:i64 = mulnuw %32, %60
%69:i64 = add %67, %68
%70:i32 = mul 5:i32, %0
%71:i64 = zext %70
%72:i64 = mulnuw %46, %71
%73:i64 = add %69, %72 (hasExternalUses)
%74:i64 = lshr %73, 26:i64
%75:i64 = and 4294967295:i64, %74
%76:i64 = add %62, %75 (hasExternalUses)
%77:i64 = lshr %76, 26:i64
%78:i64 = and 4294967295:i64, %77
%79:i64 = add %51, %78
infer %79 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %138 = lshr i64 %137, 26
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9 (hasExternalUses)
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24 (hasExternalUses)
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
%28:i32 = var
%29:i32 = var
%30:i32 = lshr %29, 6:i32
%31:i32 = add %28, %30
%32:i64 = zext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = mul 5:i32, %33
%35:i64 = zext %34 (hasExternalUses)
%36:i64 = mulnuw %32, %35
%37:i64 = add %27, %36
%38:i32 = var
%39:i32 = var
%40:i32 = lshr %39, 8:i32
%41:i8 = var
%42:i1 = eq 0:i8, %41
%43:i32 = select %42, 16777216:i32, 0:i32
%44:i32 = or %40, %43
%45:i32 = add %38, %44
%46:i64 = zext %45 (hasExternalUses)
%47:i32 = var
%48:i32 = mul 5:i32, %47
%49:i64 = zext %48
%50:i64 = mulnuw %46, %49
%51:i64 = add %37, %50
%52:i64 = mulnuw %1, %15
%53:i64 = mulnuw %19, %7
%54:i64 = add %52, %53
%55:i64 = mulnuw %25, %35
%56:i64 = add %54, %55
%57:i64 = mulnuw %32, %49
%58:i64 = add %56, %57
%59:i32 = mul 5:i32, %9
%60:i64 = zext %59
%61:i64 = mulnuw %46, %60
%62:i64 = add %58, %61
%63:i64 = mulnuw %19, %15
%64:i64 = mulnuw %7, %35
%65:i64 = add %63, %64
%66:i64 = mulnuw %25, %49
%67:i64 = add %65, %66
%68:i64 = mulnuw %32, %60
%69:i64 = add %67, %68
%70:i32 = mul 5:i32, %0
%71:i64 = zext %70
%72:i64 = mulnuw %46, %71
%73:i64 = add %69, %72 (hasExternalUses)
%74:i64 = lshr %73, 26:i64
%75:i64 = and 4294967295:i64, %74
%76:i64 = add %62, %75 (hasExternalUses)
%77:i64 = lshr %76, 26:i64
%78:i64 = and 4294967295:i64, %77
%79:i64 = add %51, %78 (hasExternalUses)
%80:i64 = lshr %79, 26:i64
infer %80 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %139 = trunc i64 %137 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9 (hasExternalUses)
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24 (hasExternalUses)
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
%28:i32 = var
%29:i32 = var
%30:i32 = lshr %29, 6:i32
%31:i32 = add %28, %30
%32:i64 = zext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = mul 5:i32, %33
%35:i64 = zext %34 (hasExternalUses)
%36:i64 = mulnuw %32, %35
%37:i64 = add %27, %36
%38:i32 = var
%39:i32 = var
%40:i32 = lshr %39, 8:i32
%41:i8 = var
%42:i1 = eq 0:i8, %41
%43:i32 = select %42, 16777216:i32, 0:i32
%44:i32 = or %40, %43
%45:i32 = add %38, %44
%46:i64 = zext %45 (hasExternalUses)
%47:i32 = var
%48:i32 = mul 5:i32, %47
%49:i64 = zext %48
%50:i64 = mulnuw %46, %49
%51:i64 = add %37, %50
%52:i64 = mulnuw %1, %15
%53:i64 = mulnuw %19, %7
%54:i64 = add %52, %53
%55:i64 = mulnuw %25, %35
%56:i64 = add %54, %55
%57:i64 = mulnuw %32, %49
%58:i64 = add %56, %57
%59:i32 = mul 5:i32, %9
%60:i64 = zext %59
%61:i64 = mulnuw %46, %60
%62:i64 = add %58, %61
%63:i64 = mulnuw %19, %15
%64:i64 = mulnuw %7, %35
%65:i64 = add %63, %64
%66:i64 = mulnuw %25, %49
%67:i64 = add %65, %66
%68:i64 = mulnuw %32, %60
%69:i64 = add %67, %68
%70:i32 = mul 5:i32, %0
%71:i64 = zext %70
%72:i64 = mulnuw %46, %71
%73:i64 = add %69, %72 (hasExternalUses)
%74:i64 = lshr %73, 26:i64
%75:i64 = and 4294967295:i64, %74
%76:i64 = add %62, %75 (hasExternalUses)
%77:i64 = lshr %76, 26:i64
%78:i64 = and 4294967295:i64, %77
%79:i64 = add %51, %78 (hasExternalUses)
%80:i32 = trunc %79
infer %80 (demandedBits=00000011111111111111111111111111)

; *****
; For LLVM instruction:
;  %140 = and i32 %139, 67108863
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9 (hasExternalUses)
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24 (hasExternalUses)
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
%28:i32 = var
%29:i32 = var
%30:i32 = lshr %29, 6:i32
%31:i32 = add %28, %30
%32:i64 = zext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = mul 5:i32, %33
%35:i64 = zext %34 (hasExternalUses)
%36:i64 = mulnuw %32, %35
%37:i64 = add %27, %36
%38:i32 = var
%39:i32 = var
%40:i32 = lshr %39, 8:i32
%41:i8 = var
%42:i1 = eq 0:i8, %41
%43:i32 = select %42, 16777216:i32, 0:i32
%44:i32 = or %40, %43
%45:i32 = add %38, %44
%46:i64 = zext %45 (hasExternalUses)
%47:i32 = var
%48:i32 = mul 5:i32, %47
%49:i64 = zext %48
%50:i64 = mulnuw %46, %49
%51:i64 = add %37, %50
%52:i64 = mulnuw %1, %15
%53:i64 = mulnuw %19, %7
%54:i64 = add %52, %53
%55:i64 = mulnuw %25, %35
%56:i64 = add %54, %55
%57:i64 = mulnuw %32, %49
%58:i64 = add %56, %57
%59:i32 = mul 5:i32, %9
%60:i64 = zext %59
%61:i64 = mulnuw %46, %60
%62:i64 = add %58, %61
%63:i64 = mulnuw %19, %15
%64:i64 = mulnuw %7, %35
%65:i64 = add %63, %64
%66:i64 = mulnuw %25, %49
%67:i64 = add %65, %66
%68:i64 = mulnuw %32, %60
%69:i64 = add %67, %68
%70:i32 = mul 5:i32, %0
%71:i64 = zext %70
%72:i64 = mulnuw %46, %71
%73:i64 = add %69, %72 (hasExternalUses)
%74:i64 = lshr %73, 26:i64
%75:i64 = and 4294967295:i64, %74
%76:i64 = add %62, %75 (hasExternalUses)
%77:i64 = lshr %76, 26:i64
%78:i64 = and 4294967295:i64, %77
%79:i64 = add %51, %78 (hasExternalUses)
%80:i32 = trunc %79
%81:i32 = and 67108863:i32, %80
infer %81

; *****
; For LLVM instruction:
;  %141 = and i64 %138, 4294967295
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9 (hasExternalUses)
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24 (hasExternalUses)
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
%28:i32 = var
%29:i32 = var
%30:i32 = lshr %29, 6:i32
%31:i32 = add %28, %30
%32:i64 = zext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = mul 5:i32, %33
%35:i64 = zext %34 (hasExternalUses)
%36:i64 = mulnuw %32, %35
%37:i64 = add %27, %36
%38:i32 = var
%39:i32 = var
%40:i32 = lshr %39, 8:i32
%41:i8 = var
%42:i1 = eq 0:i8, %41
%43:i32 = select %42, 16777216:i32, 0:i32
%44:i32 = or %40, %43
%45:i32 = add %38, %44
%46:i64 = zext %45 (hasExternalUses)
%47:i32 = var
%48:i32 = mul 5:i32, %47
%49:i64 = zext %48
%50:i64 = mulnuw %46, %49
%51:i64 = add %37, %50
%52:i64 = mulnuw %1, %15
%53:i64 = mulnuw %19, %7
%54:i64 = add %52, %53
%55:i64 = mulnuw %25, %35
%56:i64 = add %54, %55
%57:i64 = mulnuw %32, %49
%58:i64 = add %56, %57
%59:i32 = mul 5:i32, %9
%60:i64 = zext %59
%61:i64 = mulnuw %46, %60
%62:i64 = add %58, %61
%63:i64 = mulnuw %19, %15
%64:i64 = mulnuw %7, %35
%65:i64 = add %63, %64
%66:i64 = mulnuw %25, %49
%67:i64 = add %65, %66
%68:i64 = mulnuw %32, %60
%69:i64 = add %67, %68
%70:i32 = mul 5:i32, %0
%71:i64 = zext %70
%72:i64 = mulnuw %46, %71
%73:i64 = add %69, %72 (hasExternalUses)
%74:i64 = lshr %73, 26:i64
%75:i64 = and 4294967295:i64, %74
%76:i64 = add %62, %75 (hasExternalUses)
%77:i64 = lshr %76, 26:i64
%78:i64 = and 4294967295:i64, %77
%79:i64 = add %51, %78 (hasExternalUses)
%80:i64 = lshr %79, 26:i64
%81:i64 = and 4294967295:i64, %80
infer %81 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %142 = add i64 %118, %141
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9 (hasExternalUses)
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24 (hasExternalUses)
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
%28:i32 = var
%29:i64 = zext %28 (hasExternalUses)
%30:i32 = var
%31:i32 = var
%32:i32 = lshr %31, 6:i32
%33:i32 = add %30, %32
%34:i64 = zext %33 (hasExternalUses)
%35:i64 = mulnuw %29, %34
%36:i64 = add %27, %35
%37:i32 = var
%38:i32 = var
%39:i32 = lshr %38, 8:i32
%40:i8 = var
%41:i1 = eq 0:i8, %40
%42:i32 = select %41, 16777216:i32, 0:i32
%43:i32 = or %39, %42
%44:i32 = add %37, %43
%45:i64 = zext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = mul 5:i32, %46
%48:i64 = zext %47
%49:i64 = mulnuw %45, %48
%50:i64 = add %36, %49
%51:i64 = mulnuw %19, %7
%52:i64 = mulnuw %1, %15
%53:i64 = add %51, %52
%54:i64 = mulnuw %29, %25
%55:i64 = add %53, %54
%56:i64 = mulnuw %34, %48
%57:i64 = add %55, %56
%58:i32 = mul 5:i32, %9
%59:i64 = zext %58
%60:i64 = mulnuw %45, %59
%61:i64 = add %57, %60
%62:i64 = mulnuw %19, %15
%63:i64 = mulnuw %29, %7
%64:i64 = add %62, %63
%65:i64 = mulnuw %25, %48
%66:i64 = add %64, %65
%67:i64 = mulnuw %34, %59
%68:i64 = add %66, %67
%69:i32 = mul 5:i32, %0
%70:i64 = zext %69
%71:i64 = mulnuw %45, %70
%72:i64 = add %68, %71
%73:i64 = mulnuw %29, %15
%74:i64 = mulnuw %7, %48
%75:i64 = add %73, %74
%76:i64 = mulnuw %25, %59
%77:i64 = add %75, %76
%78:i64 = mulnuw %34, %70
%79:i64 = add %77, %78
%80:i32 = mul 5:i32, %18
%81:i64 = zext %80
%82:i64 = mulnuw %45, %81
%83:i64 = add %79, %82 (hasExternalUses)
%84:i64 = lshr %83, 26:i64
%85:i64 = and 4294967295:i64, %84
%86:i64 = add %72, %85 (hasExternalUses)
%87:i64 = lshr %86, 26:i64
%88:i64 = and 4294967295:i64, %87
%89:i64 = add %61, %88 (hasExternalUses)
%90:i64 = lshr %89, 26:i64
%91:i64 = and 4294967295:i64, %90
%92:i64 = add %50, %91
infer %92 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %143 = lshr i64 %142, 26
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9 (hasExternalUses)
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24 (hasExternalUses)
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
%28:i32 = var
%29:i64 = zext %28 (hasExternalUses)
%30:i32 = var
%31:i32 = var
%32:i32 = lshr %31, 6:i32
%33:i32 = add %30, %32
%34:i64 = zext %33 (hasExternalUses)
%35:i64 = mulnuw %29, %34
%36:i64 = add %27, %35
%37:i32 = var
%38:i32 = var
%39:i32 = lshr %38, 8:i32
%40:i8 = var
%41:i1 = eq 0:i8, %40
%42:i32 = select %41, 16777216:i32, 0:i32
%43:i32 = or %39, %42
%44:i32 = add %37, %43
%45:i64 = zext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = mul 5:i32, %46
%48:i64 = zext %47
%49:i64 = mulnuw %45, %48
%50:i64 = add %36, %49
%51:i64 = mulnuw %19, %7
%52:i64 = mulnuw %1, %15
%53:i64 = add %51, %52
%54:i64 = mulnuw %29, %25
%55:i64 = add %53, %54
%56:i64 = mulnuw %34, %48
%57:i64 = add %55, %56
%58:i32 = mul 5:i32, %9
%59:i64 = zext %58
%60:i64 = mulnuw %45, %59
%61:i64 = add %57, %60
%62:i64 = mulnuw %19, %15
%63:i64 = mulnuw %29, %7
%64:i64 = add %62, %63
%65:i64 = mulnuw %25, %48
%66:i64 = add %64, %65
%67:i64 = mulnuw %34, %59
%68:i64 = add %66, %67
%69:i32 = mul 5:i32, %0
%70:i64 = zext %69
%71:i64 = mulnuw %45, %70
%72:i64 = add %68, %71
%73:i64 = mulnuw %29, %15
%74:i64 = mulnuw %7, %48
%75:i64 = add %73, %74
%76:i64 = mulnuw %25, %59
%77:i64 = add %75, %76
%78:i64 = mulnuw %34, %70
%79:i64 = add %77, %78
%80:i32 = mul 5:i32, %18
%81:i64 = zext %80
%82:i64 = mulnuw %45, %81
%83:i64 = add %79, %82 (hasExternalUses)
%84:i64 = lshr %83, 26:i64
%85:i64 = and 4294967295:i64, %84
%86:i64 = add %72, %85 (hasExternalUses)
%87:i64 = lshr %86, 26:i64
%88:i64 = and 4294967295:i64, %87
%89:i64 = add %61, %88 (hasExternalUses)
%90:i64 = lshr %89, 26:i64
%91:i64 = and 4294967295:i64, %90
%92:i64 = add %50, %91 (hasExternalUses)
%93:i64 = lshr %92, 26:i64
infer %93 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %144 = trunc i64 %142 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9 (hasExternalUses)
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24 (hasExternalUses)
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
%28:i32 = var
%29:i64 = zext %28 (hasExternalUses)
%30:i32 = var
%31:i32 = var
%32:i32 = lshr %31, 6:i32
%33:i32 = add %30, %32
%34:i64 = zext %33 (hasExternalUses)
%35:i64 = mulnuw %29, %34
%36:i64 = add %27, %35
%37:i32 = var
%38:i32 = var
%39:i32 = lshr %38, 8:i32
%40:i8 = var
%41:i1 = eq 0:i8, %40
%42:i32 = select %41, 16777216:i32, 0:i32
%43:i32 = or %39, %42
%44:i32 = add %37, %43
%45:i64 = zext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = mul 5:i32, %46
%48:i64 = zext %47
%49:i64 = mulnuw %45, %48
%50:i64 = add %36, %49
%51:i64 = mulnuw %19, %7
%52:i64 = mulnuw %1, %15
%53:i64 = add %51, %52
%54:i64 = mulnuw %29, %25
%55:i64 = add %53, %54
%56:i64 = mulnuw %34, %48
%57:i64 = add %55, %56
%58:i32 = mul 5:i32, %9
%59:i64 = zext %58
%60:i64 = mulnuw %45, %59
%61:i64 = add %57, %60
%62:i64 = mulnuw %19, %15
%63:i64 = mulnuw %29, %7
%64:i64 = add %62, %63
%65:i64 = mulnuw %25, %48
%66:i64 = add %64, %65
%67:i64 = mulnuw %34, %59
%68:i64 = add %66, %67
%69:i32 = mul 5:i32, %0
%70:i64 = zext %69
%71:i64 = mulnuw %45, %70
%72:i64 = add %68, %71
%73:i64 = mulnuw %29, %15
%74:i64 = mulnuw %7, %48
%75:i64 = add %73, %74
%76:i64 = mulnuw %25, %59
%77:i64 = add %75, %76
%78:i64 = mulnuw %34, %70
%79:i64 = add %77, %78
%80:i32 = mul 5:i32, %18
%81:i64 = zext %80
%82:i64 = mulnuw %45, %81
%83:i64 = add %79, %82 (hasExternalUses)
%84:i64 = lshr %83, 26:i64
%85:i64 = and 4294967295:i64, %84
%86:i64 = add %72, %85 (hasExternalUses)
%87:i64 = lshr %86, 26:i64
%88:i64 = and 4294967295:i64, %87
%89:i64 = add %61, %88 (hasExternalUses)
%90:i64 = lshr %89, 26:i64
%91:i64 = and 4294967295:i64, %90
%92:i64 = add %50, %91 (hasExternalUses)
%93:i32 = trunc %92
infer %93 (demandedBits=00000011111111111111111111111111)

; *****
; For LLVM instruction:
;  %145 = and i32 %144, 67108863
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9 (hasExternalUses)
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24 (hasExternalUses)
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
%28:i32 = var
%29:i64 = zext %28 (hasExternalUses)
%30:i32 = var
%31:i32 = var
%32:i32 = lshr %31, 6:i32
%33:i32 = add %30, %32
%34:i64 = zext %33 (hasExternalUses)
%35:i64 = mulnuw %29, %34
%36:i64 = add %27, %35
%37:i32 = var
%38:i32 = var
%39:i32 = lshr %38, 8:i32
%40:i8 = var
%41:i1 = eq 0:i8, %40
%42:i32 = select %41, 16777216:i32, 0:i32
%43:i32 = or %39, %42
%44:i32 = add %37, %43
%45:i64 = zext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = mul 5:i32, %46
%48:i64 = zext %47
%49:i64 = mulnuw %45, %48
%50:i64 = add %36, %49
%51:i64 = mulnuw %19, %7
%52:i64 = mulnuw %1, %15
%53:i64 = add %51, %52
%54:i64 = mulnuw %29, %25
%55:i64 = add %53, %54
%56:i64 = mulnuw %34, %48
%57:i64 = add %55, %56
%58:i32 = mul 5:i32, %9
%59:i64 = zext %58
%60:i64 = mulnuw %45, %59
%61:i64 = add %57, %60
%62:i64 = mulnuw %19, %15
%63:i64 = mulnuw %29, %7
%64:i64 = add %62, %63
%65:i64 = mulnuw %25, %48
%66:i64 = add %64, %65
%67:i64 = mulnuw %34, %59
%68:i64 = add %66, %67
%69:i32 = mul 5:i32, %0
%70:i64 = zext %69
%71:i64 = mulnuw %45, %70
%72:i64 = add %68, %71
%73:i64 = mulnuw %29, %15
%74:i64 = mulnuw %7, %48
%75:i64 = add %73, %74
%76:i64 = mulnuw %25, %59
%77:i64 = add %75, %76
%78:i64 = mulnuw %34, %70
%79:i64 = add %77, %78
%80:i32 = mul 5:i32, %18
%81:i64 = zext %80
%82:i64 = mulnuw %45, %81
%83:i64 = add %79, %82 (hasExternalUses)
%84:i64 = lshr %83, 26:i64
%85:i64 = and 4294967295:i64, %84
%86:i64 = add %72, %85 (hasExternalUses)
%87:i64 = lshr %86, 26:i64
%88:i64 = and 4294967295:i64, %87
%89:i64 = add %61, %88 (hasExternalUses)
%90:i64 = lshr %89, 26:i64
%91:i64 = and 4294967295:i64, %90
%92:i64 = add %50, %91 (hasExternalUses)
%93:i32 = trunc %92
%94:i32 = and 67108863:i32, %93
infer %94

; *****
; For LLVM instruction:
;  %146 = and i64 %143, 4294967295
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9 (hasExternalUses)
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24 (hasExternalUses)
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
%28:i32 = var
%29:i64 = zext %28 (hasExternalUses)
%30:i32 = var
%31:i32 = var
%32:i32 = lshr %31, 6:i32
%33:i32 = add %30, %32
%34:i64 = zext %33 (hasExternalUses)
%35:i64 = mulnuw %29, %34
%36:i64 = add %27, %35
%37:i32 = var
%38:i32 = var
%39:i32 = lshr %38, 8:i32
%40:i8 = var
%41:i1 = eq 0:i8, %40
%42:i32 = select %41, 16777216:i32, 0:i32
%43:i32 = or %39, %42
%44:i32 = add %37, %43
%45:i64 = zext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = mul 5:i32, %46
%48:i64 = zext %47
%49:i64 = mulnuw %45, %48
%50:i64 = add %36, %49
%51:i64 = mulnuw %19, %7
%52:i64 = mulnuw %1, %15
%53:i64 = add %51, %52
%54:i64 = mulnuw %29, %25
%55:i64 = add %53, %54
%56:i64 = mulnuw %34, %48
%57:i64 = add %55, %56
%58:i32 = mul 5:i32, %9
%59:i64 = zext %58
%60:i64 = mulnuw %45, %59
%61:i64 = add %57, %60
%62:i64 = mulnuw %19, %15
%63:i64 = mulnuw %29, %7
%64:i64 = add %62, %63
%65:i64 = mulnuw %25, %48
%66:i64 = add %64, %65
%67:i64 = mulnuw %34, %59
%68:i64 = add %66, %67
%69:i32 = mul 5:i32, %0
%70:i64 = zext %69
%71:i64 = mulnuw %45, %70
%72:i64 = add %68, %71
%73:i64 = mulnuw %29, %15
%74:i64 = mulnuw %7, %48
%75:i64 = add %73, %74
%76:i64 = mulnuw %25, %59
%77:i64 = add %75, %76
%78:i64 = mulnuw %34, %70
%79:i64 = add %77, %78
%80:i32 = mul 5:i32, %18
%81:i64 = zext %80
%82:i64 = mulnuw %45, %81
%83:i64 = add %79, %82 (hasExternalUses)
%84:i64 = lshr %83, 26:i64
%85:i64 = and 4294967295:i64, %84
%86:i64 = add %72, %85 (hasExternalUses)
%87:i64 = lshr %86, 26:i64
%88:i64 = and 4294967295:i64, %87
%89:i64 = add %61, %88 (hasExternalUses)
%90:i64 = lshr %89, 26:i64
%91:i64 = and 4294967295:i64, %90
%92:i64 = add %50, %91 (hasExternalUses)
%93:i64 = lshr %92, 26:i64
%94:i64 = and 4294967295:i64, %93
infer %94 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %147 = add i64 %127, %146
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
%28:i32 = var
%29:i64 = zext %28
%30:i32 = var
%31:i32 = var
%32:i32 = lshr %31, 6:i32
%33:i32 = add %30, %32
%34:i64 = zext %33
%35:i64 = mulnuw %29, %34
%36:i64 = add %27, %35
%37:i32 = var
%38:i64 = zext %37
%39:i32 = var
%40:i32 = var
%41:i32 = lshr %40, 8:i32
%42:i8 = var
%43:i1 = eq 0:i8, %42
%44:i32 = select %43, 16777216:i32, 0:i32
%45:i32 = or %41, %44
%46:i32 = add %39, %45
%47:i64 = zext %46
%48:i64 = mulnuw %38, %47
%49:i64 = add %36, %48
%50:i64 = mulnuw %19, %7
%51:i64 = mulnuw %1, %15
%52:i64 = add %50, %51
%53:i64 = mulnuw %29, %25
%54:i64 = add %52, %53
%55:i64 = mulnuw %38, %34
%56:i64 = add %54, %55
%57:i32 = mul 5:i32, %9
%58:i64 = zext %57
%59:i64 = mulnuw %47, %58
%60:i64 = add %56, %59
%61:i64 = mulnuw %29, %7
%62:i64 = mulnuw %19, %15
%63:i64 = add %61, %62
%64:i64 = mulnuw %38, %25
%65:i64 = add %63, %64
%66:i64 = mulnuw %34, %58
%67:i64 = add %65, %66
%68:i32 = mul 5:i32, %0
%69:i64 = zext %68
%70:i64 = mulnuw %47, %69
%71:i64 = add %67, %70
%72:i64 = mulnuw %29, %15
%73:i64 = mulnuw %38, %7
%74:i64 = add %72, %73
%75:i64 = mulnuw %25, %58
%76:i64 = add %74, %75
%77:i64 = mulnuw %34, %69
%78:i64 = add %76, %77
%79:i32 = mul 5:i32, %18
%80:i64 = zext %79
%81:i64 = mulnuw %47, %80
%82:i64 = add %78, %81
%83:i64 = mulnuw %38, %15
%84:i64 = mulnuw %7, %58
%85:i64 = add %83, %84
%86:i64 = mulnuw %25, %69
%87:i64 = add %85, %86
%88:i64 = mulnuw %34, %80
%89:i64 = add %87, %88
%90:i32 = mul 5:i32, %28
%91:i64 = zext %90
%92:i64 = mulnuw %47, %91
%93:i64 = add %89, %92 (hasExternalUses)
%94:i64 = lshr %93, 26:i64
%95:i64 = and 4294967295:i64, %94
%96:i64 = add %82, %95 (hasExternalUses)
%97:i64 = lshr %96, 26:i64
%98:i64 = and 4294967295:i64, %97
%99:i64 = add %71, %98 (hasExternalUses)
%100:i64 = lshr %99, 26:i64
%101:i64 = and 4294967295:i64, %100
%102:i64 = add %60, %101 (hasExternalUses)
%103:i64 = lshr %102, 26:i64
%104:i64 = and 4294967295:i64, %103
%105:i64 = add %49, %104
infer %105 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %148 = lshr i64 %147, 26
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
%28:i32 = var
%29:i64 = zext %28
%30:i32 = var
%31:i32 = var
%32:i32 = lshr %31, 6:i32
%33:i32 = add %30, %32
%34:i64 = zext %33
%35:i64 = mulnuw %29, %34
%36:i64 = add %27, %35
%37:i32 = var
%38:i64 = zext %37
%39:i32 = var
%40:i32 = var
%41:i32 = lshr %40, 8:i32
%42:i8 = var
%43:i1 = eq 0:i8, %42
%44:i32 = select %43, 16777216:i32, 0:i32
%45:i32 = or %41, %44
%46:i32 = add %39, %45
%47:i64 = zext %46
%48:i64 = mulnuw %38, %47
%49:i64 = add %36, %48
%50:i64 = mulnuw %19, %7
%51:i64 = mulnuw %1, %15
%52:i64 = add %50, %51
%53:i64 = mulnuw %29, %25
%54:i64 = add %52, %53
%55:i64 = mulnuw %38, %34
%56:i64 = add %54, %55
%57:i32 = mul 5:i32, %9
%58:i64 = zext %57
%59:i64 = mulnuw %47, %58
%60:i64 = add %56, %59
%61:i64 = mulnuw %29, %7
%62:i64 = mulnuw %19, %15
%63:i64 = add %61, %62
%64:i64 = mulnuw %38, %25
%65:i64 = add %63, %64
%66:i64 = mulnuw %34, %58
%67:i64 = add %65, %66
%68:i32 = mul 5:i32, %0
%69:i64 = zext %68
%70:i64 = mulnuw %47, %69
%71:i64 = add %67, %70
%72:i64 = mulnuw %29, %15
%73:i64 = mulnuw %38, %7
%74:i64 = add %72, %73
%75:i64 = mulnuw %25, %58
%76:i64 = add %74, %75
%77:i64 = mulnuw %34, %69
%78:i64 = add %76, %77
%79:i32 = mul 5:i32, %18
%80:i64 = zext %79
%81:i64 = mulnuw %47, %80
%82:i64 = add %78, %81
%83:i64 = mulnuw %38, %15
%84:i64 = mulnuw %7, %58
%85:i64 = add %83, %84
%86:i64 = mulnuw %25, %69
%87:i64 = add %85, %86
%88:i64 = mulnuw %34, %80
%89:i64 = add %87, %88
%90:i32 = mul 5:i32, %28
%91:i64 = zext %90
%92:i64 = mulnuw %47, %91
%93:i64 = add %89, %92 (hasExternalUses)
%94:i64 = lshr %93, 26:i64
%95:i64 = and 4294967295:i64, %94
%96:i64 = add %82, %95 (hasExternalUses)
%97:i64 = lshr %96, 26:i64
%98:i64 = and 4294967295:i64, %97
%99:i64 = add %71, %98 (hasExternalUses)
%100:i64 = lshr %99, 26:i64
%101:i64 = and 4294967295:i64, %100
%102:i64 = add %60, %101 (hasExternalUses)
%103:i64 = lshr %102, 26:i64
%104:i64 = and 4294967295:i64, %103
%105:i64 = add %49, %104 (hasExternalUses)
%106:i64 = lshr %105, 26:i64
infer %106 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %149 = trunc i64 %148 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
%28:i32 = var
%29:i64 = zext %28
%30:i32 = var
%31:i32 = var
%32:i32 = lshr %31, 6:i32
%33:i32 = add %30, %32
%34:i64 = zext %33
%35:i64 = mulnuw %29, %34
%36:i64 = add %27, %35
%37:i32 = var
%38:i64 = zext %37
%39:i32 = var
%40:i32 = var
%41:i32 = lshr %40, 8:i32
%42:i8 = var
%43:i1 = eq 0:i8, %42
%44:i32 = select %43, 16777216:i32, 0:i32
%45:i32 = or %41, %44
%46:i32 = add %39, %45
%47:i64 = zext %46
%48:i64 = mulnuw %38, %47
%49:i64 = add %36, %48
%50:i64 = mulnuw %19, %7
%51:i64 = mulnuw %1, %15
%52:i64 = add %50, %51
%53:i64 = mulnuw %29, %25
%54:i64 = add %52, %53
%55:i64 = mulnuw %38, %34
%56:i64 = add %54, %55
%57:i32 = mul 5:i32, %9
%58:i64 = zext %57
%59:i64 = mulnuw %47, %58
%60:i64 = add %56, %59
%61:i64 = mulnuw %29, %7
%62:i64 = mulnuw %19, %15
%63:i64 = add %61, %62
%64:i64 = mulnuw %38, %25
%65:i64 = add %63, %64
%66:i64 = mulnuw %34, %58
%67:i64 = add %65, %66
%68:i32 = mul 5:i32, %0
%69:i64 = zext %68
%70:i64 = mulnuw %47, %69
%71:i64 = add %67, %70
%72:i64 = mulnuw %29, %15
%73:i64 = mulnuw %38, %7
%74:i64 = add %72, %73
%75:i64 = mulnuw %25, %58
%76:i64 = add %74, %75
%77:i64 = mulnuw %34, %69
%78:i64 = add %76, %77
%79:i32 = mul 5:i32, %18
%80:i64 = zext %79
%81:i64 = mulnuw %47, %80
%82:i64 = add %78, %81
%83:i64 = mulnuw %38, %15
%84:i64 = mulnuw %7, %58
%85:i64 = add %83, %84
%86:i64 = mulnuw %25, %69
%87:i64 = add %85, %86
%88:i64 = mulnuw %34, %80
%89:i64 = add %87, %88
%90:i32 = mul 5:i32, %28
%91:i64 = zext %90
%92:i64 = mulnuw %47, %91
%93:i64 = add %89, %92 (hasExternalUses)
%94:i64 = lshr %93, 26:i64
%95:i64 = and 4294967295:i64, %94
%96:i64 = add %82, %95 (hasExternalUses)
%97:i64 = lshr %96, 26:i64
%98:i64 = and 4294967295:i64, %97
%99:i64 = add %71, %98 (hasExternalUses)
%100:i64 = lshr %99, 26:i64
%101:i64 = and 4294967295:i64, %100
%102:i64 = add %60, %101 (hasExternalUses)
%103:i64 = lshr %102, 26:i64
%104:i64 = and 4294967295:i64, %103
%105:i64 = add %49, %104 (hasExternalUses)
%106:i64 = lshr %105, 26:i64
%107:i32 = trunc %106
infer %107

; *****
; For LLVM instruction:
;  %150 = trunc i64 %147 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
%28:i32 = var
%29:i64 = zext %28
%30:i32 = var
%31:i32 = var
%32:i32 = lshr %31, 6:i32
%33:i32 = add %30, %32
%34:i64 = zext %33
%35:i64 = mulnuw %29, %34
%36:i64 = add %27, %35
%37:i32 = var
%38:i64 = zext %37
%39:i32 = var
%40:i32 = var
%41:i32 = lshr %40, 8:i32
%42:i8 = var
%43:i1 = eq 0:i8, %42
%44:i32 = select %43, 16777216:i32, 0:i32
%45:i32 = or %41, %44
%46:i32 = add %39, %45
%47:i64 = zext %46
%48:i64 = mulnuw %38, %47
%49:i64 = add %36, %48
%50:i64 = mulnuw %19, %7
%51:i64 = mulnuw %1, %15
%52:i64 = add %50, %51
%53:i64 = mulnuw %29, %25
%54:i64 = add %52, %53
%55:i64 = mulnuw %38, %34
%56:i64 = add %54, %55
%57:i32 = mul 5:i32, %9
%58:i64 = zext %57
%59:i64 = mulnuw %47, %58
%60:i64 = add %56, %59
%61:i64 = mulnuw %29, %7
%62:i64 = mulnuw %19, %15
%63:i64 = add %61, %62
%64:i64 = mulnuw %38, %25
%65:i64 = add %63, %64
%66:i64 = mulnuw %34, %58
%67:i64 = add %65, %66
%68:i32 = mul 5:i32, %0
%69:i64 = zext %68
%70:i64 = mulnuw %47, %69
%71:i64 = add %67, %70
%72:i64 = mulnuw %29, %15
%73:i64 = mulnuw %38, %7
%74:i64 = add %72, %73
%75:i64 = mulnuw %25, %58
%76:i64 = add %74, %75
%77:i64 = mulnuw %34, %69
%78:i64 = add %76, %77
%79:i32 = mul 5:i32, %18
%80:i64 = zext %79
%81:i64 = mulnuw %47, %80
%82:i64 = add %78, %81
%83:i64 = mulnuw %38, %15
%84:i64 = mulnuw %7, %58
%85:i64 = add %83, %84
%86:i64 = mulnuw %25, %69
%87:i64 = add %85, %86
%88:i64 = mulnuw %34, %80
%89:i64 = add %87, %88
%90:i32 = mul 5:i32, %28
%91:i64 = zext %90
%92:i64 = mulnuw %47, %91
%93:i64 = add %89, %92 (hasExternalUses)
%94:i64 = lshr %93, 26:i64
%95:i64 = and 4294967295:i64, %94
%96:i64 = add %82, %95 (hasExternalUses)
%97:i64 = lshr %96, 26:i64
%98:i64 = and 4294967295:i64, %97
%99:i64 = add %71, %98 (hasExternalUses)
%100:i64 = lshr %99, 26:i64
%101:i64 = and 4294967295:i64, %100
%102:i64 = add %60, %101 (hasExternalUses)
%103:i64 = lshr %102, 26:i64
%104:i64 = and 4294967295:i64, %103
%105:i64 = add %49, %104 (hasExternalUses)
%106:i32 = trunc %105
infer %106 (demandedBits=00000011111111111111111111111111)

; *****
; For LLVM instruction:
;  %151 = and i32 %150, 67108863
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
%28:i32 = var
%29:i64 = zext %28
%30:i32 = var
%31:i32 = var
%32:i32 = lshr %31, 6:i32
%33:i32 = add %30, %32
%34:i64 = zext %33
%35:i64 = mulnuw %29, %34
%36:i64 = add %27, %35
%37:i32 = var
%38:i64 = zext %37
%39:i32 = var
%40:i32 = var
%41:i32 = lshr %40, 8:i32
%42:i8 = var
%43:i1 = eq 0:i8, %42
%44:i32 = select %43, 16777216:i32, 0:i32
%45:i32 = or %41, %44
%46:i32 = add %39, %45
%47:i64 = zext %46
%48:i64 = mulnuw %38, %47
%49:i64 = add %36, %48
%50:i64 = mulnuw %19, %7
%51:i64 = mulnuw %1, %15
%52:i64 = add %50, %51
%53:i64 = mulnuw %29, %25
%54:i64 = add %52, %53
%55:i64 = mulnuw %38, %34
%56:i64 = add %54, %55
%57:i32 = mul 5:i32, %9
%58:i64 = zext %57
%59:i64 = mulnuw %47, %58
%60:i64 = add %56, %59
%61:i64 = mulnuw %29, %7
%62:i64 = mulnuw %19, %15
%63:i64 = add %61, %62
%64:i64 = mulnuw %38, %25
%65:i64 = add %63, %64
%66:i64 = mulnuw %34, %58
%67:i64 = add %65, %66
%68:i32 = mul 5:i32, %0
%69:i64 = zext %68
%70:i64 = mulnuw %47, %69
%71:i64 = add %67, %70
%72:i64 = mulnuw %29, %15
%73:i64 = mulnuw %38, %7
%74:i64 = add %72, %73
%75:i64 = mulnuw %25, %58
%76:i64 = add %74, %75
%77:i64 = mulnuw %34, %69
%78:i64 = add %76, %77
%79:i32 = mul 5:i32, %18
%80:i64 = zext %79
%81:i64 = mulnuw %47, %80
%82:i64 = add %78, %81
%83:i64 = mulnuw %38, %15
%84:i64 = mulnuw %7, %58
%85:i64 = add %83, %84
%86:i64 = mulnuw %25, %69
%87:i64 = add %85, %86
%88:i64 = mulnuw %34, %80
%89:i64 = add %87, %88
%90:i32 = mul 5:i32, %28
%91:i64 = zext %90
%92:i64 = mulnuw %47, %91
%93:i64 = add %89, %92 (hasExternalUses)
%94:i64 = lshr %93, 26:i64
%95:i64 = and 4294967295:i64, %94
%96:i64 = add %82, %95 (hasExternalUses)
%97:i64 = lshr %96, 26:i64
%98:i64 = and 4294967295:i64, %97
%99:i64 = add %71, %98 (hasExternalUses)
%100:i64 = lshr %99, 26:i64
%101:i64 = and 4294967295:i64, %100
%102:i64 = add %60, %101 (hasExternalUses)
%103:i64 = lshr %102, 26:i64
%104:i64 = and 4294967295:i64, %103
%105:i64 = add %49, %104 (hasExternalUses)
%106:i32 = trunc %105
%107:i32 = and 67108863:i32, %106
infer %107

; *****
; For LLVM instruction:
;  %152 = mul i32 %149, 5
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
%28:i32 = var
%29:i64 = zext %28
%30:i32 = var
%31:i32 = var
%32:i32 = lshr %31, 6:i32
%33:i32 = add %30, %32
%34:i64 = zext %33
%35:i64 = mulnuw %29, %34
%36:i64 = add %27, %35
%37:i32 = var
%38:i64 = zext %37
%39:i32 = var
%40:i32 = var
%41:i32 = lshr %40, 8:i32
%42:i8 = var
%43:i1 = eq 0:i8, %42
%44:i32 = select %43, 16777216:i32, 0:i32
%45:i32 = or %41, %44
%46:i32 = add %39, %45
%47:i64 = zext %46
%48:i64 = mulnuw %38, %47
%49:i64 = add %36, %48
%50:i64 = mulnuw %19, %7
%51:i64 = mulnuw %1, %15
%52:i64 = add %50, %51
%53:i64 = mulnuw %29, %25
%54:i64 = add %52, %53
%55:i64 = mulnuw %38, %34
%56:i64 = add %54, %55
%57:i32 = mul 5:i32, %9
%58:i64 = zext %57
%59:i64 = mulnuw %47, %58
%60:i64 = add %56, %59
%61:i64 = mulnuw %29, %7
%62:i64 = mulnuw %19, %15
%63:i64 = add %61, %62
%64:i64 = mulnuw %38, %25
%65:i64 = add %63, %64
%66:i64 = mulnuw %34, %58
%67:i64 = add %65, %66
%68:i32 = mul 5:i32, %0
%69:i64 = zext %68
%70:i64 = mulnuw %47, %69
%71:i64 = add %67, %70
%72:i64 = mulnuw %29, %15
%73:i64 = mulnuw %38, %7
%74:i64 = add %72, %73
%75:i64 = mulnuw %25, %58
%76:i64 = add %74, %75
%77:i64 = mulnuw %34, %69
%78:i64 = add %76, %77
%79:i32 = mul 5:i32, %18
%80:i64 = zext %79
%81:i64 = mulnuw %47, %80
%82:i64 = add %78, %81
%83:i64 = mulnuw %38, %15
%84:i64 = mulnuw %7, %58
%85:i64 = add %83, %84
%86:i64 = mulnuw %25, %69
%87:i64 = add %85, %86
%88:i64 = mulnuw %34, %80
%89:i64 = add %87, %88
%90:i32 = mul 5:i32, %28
%91:i64 = zext %90
%92:i64 = mulnuw %47, %91
%93:i64 = add %89, %92 (hasExternalUses)
%94:i64 = lshr %93, 26:i64
%95:i64 = and 4294967295:i64, %94
%96:i64 = add %82, %95 (hasExternalUses)
%97:i64 = lshr %96, 26:i64
%98:i64 = and 4294967295:i64, %97
%99:i64 = add %71, %98 (hasExternalUses)
%100:i64 = lshr %99, 26:i64
%101:i64 = and 4294967295:i64, %100
%102:i64 = add %60, %101 (hasExternalUses)
%103:i64 = lshr %102, 26:i64
%104:i64 = and 4294967295:i64, %103
%105:i64 = add %49, %104 (hasExternalUses)
%106:i64 = lshr %105, 26:i64
%107:i32 = trunc %106
%108:i32 = mul 5:i32, %107
infer %108

; *****
; For LLVM instruction:
;  %153 = add i32 %152, %130
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
%28:i32 = var
%29:i64 = zext %28
%30:i32 = var
%31:i32 = var
%32:i32 = lshr %31, 6:i32
%33:i32 = add %30, %32
%34:i64 = zext %33
%35:i64 = mulnuw %29, %34
%36:i64 = add %27, %35
%37:i32 = var
%38:i64 = zext %37
%39:i32 = var
%40:i32 = var
%41:i32 = lshr %40, 8:i32
%42:i8 = var
%43:i1 = eq 0:i8, %42
%44:i32 = select %43, 16777216:i32, 0:i32
%45:i32 = or %41, %44
%46:i32 = add %39, %45
%47:i64 = zext %46
%48:i64 = mulnuw %38, %47
%49:i64 = add %36, %48
%50:i64 = mulnuw %19, %7
%51:i64 = mulnuw %1, %15
%52:i64 = add %50, %51
%53:i64 = mulnuw %29, %25
%54:i64 = add %52, %53
%55:i64 = mulnuw %38, %34
%56:i64 = add %54, %55
%57:i32 = mul 5:i32, %9
%58:i64 = zext %57
%59:i64 = mulnuw %47, %58
%60:i64 = add %56, %59
%61:i64 = mulnuw %29, %7
%62:i64 = mulnuw %19, %15
%63:i64 = add %61, %62
%64:i64 = mulnuw %38, %25
%65:i64 = add %63, %64
%66:i64 = mulnuw %34, %58
%67:i64 = add %65, %66
%68:i32 = mul 5:i32, %0
%69:i64 = zext %68
%70:i64 = mulnuw %47, %69
%71:i64 = add %67, %70
%72:i64 = mulnuw %29, %15
%73:i64 = mulnuw %38, %7
%74:i64 = add %72, %73
%75:i64 = mulnuw %25, %58
%76:i64 = add %74, %75
%77:i64 = mulnuw %34, %69
%78:i64 = add %76, %77
%79:i32 = mul 5:i32, %18
%80:i64 = zext %79
%81:i64 = mulnuw %47, %80
%82:i64 = add %78, %81
%83:i64 = mulnuw %38, %15
%84:i64 = mulnuw %7, %58
%85:i64 = add %83, %84
%86:i64 = mulnuw %25, %69
%87:i64 = add %85, %86
%88:i64 = mulnuw %34, %80
%89:i64 = add %87, %88
%90:i32 = mul 5:i32, %28
%91:i64 = zext %90
%92:i64 = mulnuw %47, %91
%93:i64 = add %89, %92
%94:i64 = lshr %93, 26:i64
%95:i64 = and 4294967295:i64, %94
%96:i64 = add %82, %95 (hasExternalUses)
%97:i64 = lshr %96, 26:i64
%98:i64 = and 4294967295:i64, %97
%99:i64 = add %71, %98 (hasExternalUses)
%100:i64 = lshr %99, 26:i64
%101:i64 = and 4294967295:i64, %100
%102:i64 = add %60, %101 (hasExternalUses)
%103:i64 = lshr %102, 26:i64
%104:i64 = and 4294967295:i64, %103
%105:i64 = add %49, %104 (hasExternalUses)
%106:i64 = lshr %105, 26:i64
%107:i32 = trunc %106
%108:i32 = mul 5:i32, %107
%109:i32 = trunc %93
%110:i32 = and 67108863:i32, %109
%111:i32 = add %108, %110
infer %111

; *****
; For LLVM instruction:
;  %154 = lshr i32 %153, 26
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
%28:i32 = var
%29:i64 = zext %28
%30:i32 = var
%31:i32 = var
%32:i32 = lshr %31, 6:i32
%33:i32 = add %30, %32
%34:i64 = zext %33
%35:i64 = mulnuw %29, %34
%36:i64 = add %27, %35
%37:i32 = var
%38:i64 = zext %37
%39:i32 = var
%40:i32 = var
%41:i32 = lshr %40, 8:i32
%42:i8 = var
%43:i1 = eq 0:i8, %42
%44:i32 = select %43, 16777216:i32, 0:i32
%45:i32 = or %41, %44
%46:i32 = add %39, %45
%47:i64 = zext %46
%48:i64 = mulnuw %38, %47
%49:i64 = add %36, %48
%50:i64 = mulnuw %19, %7
%51:i64 = mulnuw %1, %15
%52:i64 = add %50, %51
%53:i64 = mulnuw %29, %25
%54:i64 = add %52, %53
%55:i64 = mulnuw %38, %34
%56:i64 = add %54, %55
%57:i32 = mul 5:i32, %9
%58:i64 = zext %57
%59:i64 = mulnuw %47, %58
%60:i64 = add %56, %59
%61:i64 = mulnuw %29, %7
%62:i64 = mulnuw %19, %15
%63:i64 = add %61, %62
%64:i64 = mulnuw %38, %25
%65:i64 = add %63, %64
%66:i64 = mulnuw %34, %58
%67:i64 = add %65, %66
%68:i32 = mul 5:i32, %0
%69:i64 = zext %68
%70:i64 = mulnuw %47, %69
%71:i64 = add %67, %70
%72:i64 = mulnuw %29, %15
%73:i64 = mulnuw %38, %7
%74:i64 = add %72, %73
%75:i64 = mulnuw %25, %58
%76:i64 = add %74, %75
%77:i64 = mulnuw %34, %69
%78:i64 = add %76, %77
%79:i32 = mul 5:i32, %18
%80:i64 = zext %79
%81:i64 = mulnuw %47, %80
%82:i64 = add %78, %81
%83:i64 = mulnuw %38, %15
%84:i64 = mulnuw %7, %58
%85:i64 = add %83, %84
%86:i64 = mulnuw %25, %69
%87:i64 = add %85, %86
%88:i64 = mulnuw %34, %80
%89:i64 = add %87, %88
%90:i32 = mul 5:i32, %28
%91:i64 = zext %90
%92:i64 = mulnuw %47, %91
%93:i64 = add %89, %92
%94:i64 = lshr %93, 26:i64
%95:i64 = and 4294967295:i64, %94
%96:i64 = add %82, %95 (hasExternalUses)
%97:i64 = lshr %96, 26:i64
%98:i64 = and 4294967295:i64, %97
%99:i64 = add %71, %98 (hasExternalUses)
%100:i64 = lshr %99, 26:i64
%101:i64 = and 4294967295:i64, %100
%102:i64 = add %60, %101 (hasExternalUses)
%103:i64 = lshr %102, 26:i64
%104:i64 = and 4294967295:i64, %103
%105:i64 = add %49, %104 (hasExternalUses)
%106:i64 = lshr %105, 26:i64
%107:i32 = trunc %106
%108:i32 = mul 5:i32, %107
%109:i32 = trunc %93
%110:i32 = and 67108863:i32, %109
%111:i32 = add %108, %110 (hasExternalUses)
%112:i32 = lshr %111, 26:i32
infer %112

; *****
; For LLVM instruction:
;  %155 = and i32 %153, 67108863
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
%28:i32 = var
%29:i64 = zext %28
%30:i32 = var
%31:i32 = var
%32:i32 = lshr %31, 6:i32
%33:i32 = add %30, %32
%34:i64 = zext %33
%35:i64 = mulnuw %29, %34
%36:i64 = add %27, %35
%37:i32 = var
%38:i64 = zext %37
%39:i32 = var
%40:i32 = var
%41:i32 = lshr %40, 8:i32
%42:i8 = var
%43:i1 = eq 0:i8, %42
%44:i32 = select %43, 16777216:i32, 0:i32
%45:i32 = or %41, %44
%46:i32 = add %39, %45
%47:i64 = zext %46
%48:i64 = mulnuw %38, %47
%49:i64 = add %36, %48
%50:i64 = mulnuw %19, %7
%51:i64 = mulnuw %1, %15
%52:i64 = add %50, %51
%53:i64 = mulnuw %29, %25
%54:i64 = add %52, %53
%55:i64 = mulnuw %38, %34
%56:i64 = add %54, %55
%57:i32 = mul 5:i32, %9
%58:i64 = zext %57
%59:i64 = mulnuw %47, %58
%60:i64 = add %56, %59
%61:i64 = mulnuw %29, %7
%62:i64 = mulnuw %19, %15
%63:i64 = add %61, %62
%64:i64 = mulnuw %38, %25
%65:i64 = add %63, %64
%66:i64 = mulnuw %34, %58
%67:i64 = add %65, %66
%68:i32 = mul 5:i32, %0
%69:i64 = zext %68
%70:i64 = mulnuw %47, %69
%71:i64 = add %67, %70
%72:i64 = mulnuw %29, %15
%73:i64 = mulnuw %38, %7
%74:i64 = add %72, %73
%75:i64 = mulnuw %25, %58
%76:i64 = add %74, %75
%77:i64 = mulnuw %34, %69
%78:i64 = add %76, %77
%79:i32 = mul 5:i32, %18
%80:i64 = zext %79
%81:i64 = mulnuw %47, %80
%82:i64 = add %78, %81
%83:i64 = mulnuw %38, %15
%84:i64 = mulnuw %7, %58
%85:i64 = add %83, %84
%86:i64 = mulnuw %25, %69
%87:i64 = add %85, %86
%88:i64 = mulnuw %34, %80
%89:i64 = add %87, %88
%90:i32 = mul 5:i32, %28
%91:i64 = zext %90
%92:i64 = mulnuw %47, %91
%93:i64 = add %89, %92
%94:i64 = lshr %93, 26:i64
%95:i64 = and 4294967295:i64, %94
%96:i64 = add %82, %95 (hasExternalUses)
%97:i64 = lshr %96, 26:i64
%98:i64 = and 4294967295:i64, %97
%99:i64 = add %71, %98 (hasExternalUses)
%100:i64 = lshr %99, 26:i64
%101:i64 = and 4294967295:i64, %100
%102:i64 = add %60, %101 (hasExternalUses)
%103:i64 = lshr %102, 26:i64
%104:i64 = and 4294967295:i64, %103
%105:i64 = add %49, %104 (hasExternalUses)
%106:i64 = lshr %105, 26:i64
%107:i32 = trunc %106
%108:i32 = mul 5:i32, %107
%109:i32 = trunc %93
%110:i32 = and 67108863:i32, %109
%111:i32 = add %108, %110 (hasExternalUses)
%112:i32 = and 67108863:i32, %111
infer %112

; *****
; For LLVM instruction:
;  %156 = add nuw nsw i32 %154, %135
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = and 67108863:i32, %3
%5:i32 = add %2, %4
%6:i64 = zext %5
%7:i64 = mulnuw %1, %6
%8:i32 = var
%9:i64 = zext %8
%10:i32 = var
%11:i32 = var
%12:i32 = lshr %11, 2:i32
%13:i32 = and 67108863:i32, %12
%14:i32 = add %10, %13
%15:i64 = zext %14
%16:i64 = mulnuw %9, %15
%17:i64 = add %7, %16
%18:i32 = var
%19:i32 = var
%20:i32 = lshr %19, 4:i32
%21:i32 = and 67108863:i32, %20
%22:i32 = add %18, %21
%23:i64 = zext %22
%24:i32 = var
%25:i32 = mul 5:i32, %24
%26:i64 = zext %25
%27:i64 = mulnuw %23, %26
%28:i64 = add %17, %27
%29:i32 = var
%30:i32 = var
%31:i32 = lshr %30, 6:i32
%32:i32 = add %29, %31
%33:i64 = zext %32
%34:i32 = var
%35:i32 = mul 5:i32, %34
%36:i64 = zext %35
%37:i64 = mulnuw %33, %36
%38:i64 = add %28, %37
%39:i32 = var
%40:i32 = var
%41:i32 = lshr %40, 8:i32
%42:i8 = var
%43:i1 = eq 0:i8, %42
%44:i32 = select %43, 16777216:i32, 0:i32
%45:i32 = or %41, %44
%46:i32 = add %39, %45
%47:i64 = zext %46
%48:i32 = var
%49:i32 = mul 5:i32, %48
%50:i64 = zext %49
%51:i64 = mulnuw %47, %50
%52:i64 = add %38, %51
%53:i64 = mulnuw %9, %6
%54:i64 = mulnuw %15, %26
%55:i64 = add %53, %54
%56:i64 = mulnuw %23, %36
%57:i64 = add %55, %56
%58:i64 = mulnuw %33, %50
%59:i64 = add %57, %58
%60:i32 = mul 5:i32, %0
%61:i64 = zext %60
%62:i64 = mulnuw %47, %61
%63:i64 = add %59, %62
%64:i64 = lshr %63, 26:i64
%65:i64 = and 4294967295:i64, %64
%66:i64 = add %52, %65
%67:i32 = trunc %66
%68:i32 = and 67108863:i32, %67
%69:i64 = zext %34
%70:i64 = mulnuw %69, %15
%71:i64 = zext %24
%72:i64 = mulnuw %71, %6
%73:i64 = add %70, %72
%74:i64 = zext %48
%75:i64 = mulnuw %74, %23
%76:i64 = add %73, %75
%77:i64 = mulnuw %1, %33
%78:i64 = add %76, %77
%79:i64 = mulnuw %9, %47
%80:i64 = add %78, %79
%81:i64 = mulnuw %74, %15
%82:i64 = mulnuw %69, %6
%83:i64 = add %81, %82
%84:i64 = mulnuw %1, %23
%85:i64 = add %83, %84
%86:i64 = mulnuw %9, %33
%87:i64 = add %85, %86
%88:i64 = mulnuw %47, %26
%89:i64 = add %87, %88
%90:i64 = mulnuw %1, %15
%91:i64 = mulnuw %74, %6
%92:i64 = add %90, %91
%93:i64 = mulnuw %9, %23
%94:i64 = add %92, %93
%95:i64 = mulnuw %33, %26
%96:i64 = add %94, %95
%97:i64 = mulnuw %47, %36
%98:i64 = add %96, %97
%99:i64 = lshr %66, 26:i64
%100:i64 = and 4294967295:i64, %99
%101:i64 = add %98, %100 (hasExternalUses)
%102:i64 = lshr %101, 26:i64
%103:i64 = and 4294967295:i64, %102
%104:i64 = add %89, %103 (hasExternalUses)
%105:i64 = lshr %104, 26:i64
%106:i64 = and 4294967295:i64, %105
%107:i64 = add %80, %106 (hasExternalUses)
%108:i64 = lshr %107, 26:i64
%109:i32 = trunc %108
%110:i32 = mul 5:i32, %109
%111:i32 = trunc %63
%112:i32 = and 67108863:i32, %111
%113:i32 = add %110, %112 (hasExternalUses)
%114:i32 = lshr %113, 26:i32
%115:i32 = addnw %68, %114
infer %115

; *****
; For LLVM instruction:
;  %158 = add i64 %45, -16
; Looking for a replacement for:
%0:i64 = var (range=[16,0))
%1:i64 = add 18446744073709551600:i64, %0
infer %1

; *****
; For LLVM instruction:
;  %159 = icmp ugt i64 %158, 15
; Looking for a replacement for:
%0:i64 = var (range=[16,0))
%1:i64 = add 18446744073709551600:i64, %0 (hasExternalUses)
%2:i1 = ult 15:i64, %1
infer %2

; *****
; For LLVM instruction:
;  %161 = phi i32 [ %25, %3 ], [ %151, %43 ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i64 = zext %2
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %5, 2:i32
%7:i32 = and 67108863:i32, %6
%8:i32 = add %4, %7
%9:i64 = zext %8
%10:i64 = mulnuw %3, %9
%11:i32 = var
%12:i64 = zext %11
%13:i32 = var
%14:i32 = var
%15:i32 = and 67108863:i32, %14
%16:i32 = add %13, %15
%17:i64 = zext %16
%18:i64 = mulnuw %12, %17
%19:i64 = add %10, %18
%20:i32 = var
%21:i64 = zext %20
%22:i32 = var
%23:i32 = var
%24:i32 = lshr %23, 4:i32
%25:i32 = and 67108863:i32, %24
%26:i32 = add %22, %25
%27:i64 = zext %26
%28:i64 = mulnuw %21, %27
%29:i64 = add %19, %28
%30:i32 = var
%31:i64 = zext %30
%32:i32 = var
%33:i32 = var
%34:i32 = lshr %33, 6:i32
%35:i32 = add %32, %34
%36:i64 = zext %35
%37:i64 = mulnuw %31, %36
%38:i64 = add %29, %37
%39:i32 = var
%40:i64 = zext %39
%41:i32 = var
%42:i32 = var
%43:i32 = lshr %42, 8:i32
%44:i8 = var
%45:i1 = eq 0:i8, %44
%46:i32 = select %45, 16777216:i32, 0:i32
%47:i32 = or %43, %46
%48:i32 = add %41, %47
%49:i64 = zext %48
%50:i64 = mulnuw %40, %49
%51:i64 = add %38, %50
%52:i64 = mulnuw %21, %9
%53:i64 = mulnuw %3, %17
%54:i64 = add %52, %53
%55:i64 = mulnuw %31, %27
%56:i64 = add %54, %55
%57:i64 = mulnuw %40, %36
%58:i64 = add %56, %57
%59:i32 = mul 5:i32, %11
%60:i64 = zext %59
%61:i64 = mulnuw %49, %60
%62:i64 = add %58, %61
%63:i64 = mulnuw %31, %9
%64:i64 = mulnuw %21, %17
%65:i64 = add %63, %64
%66:i64 = mulnuw %40, %27
%67:i64 = add %65, %66
%68:i64 = mulnuw %36, %60
%69:i64 = add %67, %68
%70:i32 = mul 5:i32, %2
%71:i64 = zext %70
%72:i64 = mulnuw %49, %71
%73:i64 = add %69, %72
%74:i64 = mulnuw %31, %17
%75:i64 = mulnuw %40, %9
%76:i64 = add %74, %75
%77:i64 = mulnuw %27, %60
%78:i64 = add %76, %77
%79:i64 = mulnuw %36, %71
%80:i64 = add %78, %79
%81:i32 = mul 5:i32, %20
%82:i64 = zext %81
%83:i64 = mulnuw %49, %82
%84:i64 = add %80, %83
%85:i64 = mulnuw %40, %17
%86:i64 = mulnuw %9, %60
%87:i64 = add %85, %86
%88:i64 = mulnuw %27, %71
%89:i64 = add %87, %88
%90:i64 = mulnuw %36, %82
%91:i64 = add %89, %90
%92:i32 = mul 5:i32, %30
%93:i64 = zext %92
%94:i64 = mulnuw %49, %93
%95:i64 = add %91, %94 (hasExternalUses)
%96:i64 = lshr %95, 26:i64
%97:i64 = and 4294967295:i64, %96
%98:i64 = add %84, %97 (hasExternalUses)
%99:i64 = lshr %98, 26:i64
%100:i64 = and 4294967295:i64, %99
%101:i64 = add %73, %100 (hasExternalUses)
%102:i64 = lshr %101, 26:i64
%103:i64 = and 4294967295:i64, %102
%104:i64 = add %62, %103 (hasExternalUses)
%105:i64 = lshr %104, 26:i64
%106:i64 = and 4294967295:i64, %105
%107:i64 = add %51, %106 (hasExternalUses)
%108:i32 = trunc %107
%109:i32 = and 67108863:i32, %108 (hasExternalUses)
%110:i32 = phi %0, %1, %109
infer %110

; *****
; For LLVM instruction:
;  %162 = phi i32 [ %23, %3 ], [ %145, %43 ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i64 = zext %2 (hasExternalUses)
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %5, 2:i32
%7:i32 = and 67108863:i32, %6
%8:i32 = add %4, %7
%9:i64 = zext %8 (hasExternalUses)
%10:i64 = mulnuw %3, %9
%11:i32 = var
%12:i64 = zext %11 (hasExternalUses)
%13:i32 = var
%14:i32 = var
%15:i32 = and 67108863:i32, %14
%16:i32 = add %13, %15
%17:i64 = zext %16 (hasExternalUses)
%18:i64 = mulnuw %12, %17
%19:i64 = add %10, %18
%20:i32 = var
%21:i64 = zext %20 (hasExternalUses)
%22:i32 = var
%23:i32 = var
%24:i32 = lshr %23, 4:i32
%25:i32 = and 67108863:i32, %24
%26:i32 = add %22, %25
%27:i64 = zext %26 (hasExternalUses)
%28:i64 = mulnuw %21, %27
%29:i64 = add %19, %28
%30:i32 = var
%31:i64 = zext %30 (hasExternalUses)
%32:i32 = var
%33:i32 = var
%34:i32 = lshr %33, 6:i32
%35:i32 = add %32, %34
%36:i64 = zext %35 (hasExternalUses)
%37:i64 = mulnuw %31, %36
%38:i64 = add %29, %37
%39:i32 = var
%40:i32 = var
%41:i32 = lshr %40, 8:i32
%42:i8 = var
%43:i1 = eq 0:i8, %42
%44:i32 = select %43, 16777216:i32, 0:i32
%45:i32 = or %41, %44
%46:i32 = add %39, %45
%47:i64 = zext %46 (hasExternalUses)
%48:i32 = var
%49:i32 = mul 5:i32, %48
%50:i64 = zext %49
%51:i64 = mulnuw %47, %50
%52:i64 = add %38, %51
%53:i64 = mulnuw %21, %9
%54:i64 = mulnuw %3, %17
%55:i64 = add %53, %54
%56:i64 = mulnuw %31, %27
%57:i64 = add %55, %56
%58:i64 = mulnuw %36, %50
%59:i64 = add %57, %58
%60:i32 = mul 5:i32, %11
%61:i64 = zext %60
%62:i64 = mulnuw %47, %61
%63:i64 = add %59, %62
%64:i64 = mulnuw %21, %17
%65:i64 = mulnuw %31, %9
%66:i64 = add %64, %65
%67:i64 = mulnuw %27, %50
%68:i64 = add %66, %67
%69:i64 = mulnuw %36, %61
%70:i64 = add %68, %69
%71:i32 = mul 5:i32, %2
%72:i64 = zext %71
%73:i64 = mulnuw %47, %72
%74:i64 = add %70, %73
%75:i64 = mulnuw %31, %17
%76:i64 = mulnuw %9, %50
%77:i64 = add %75, %76
%78:i64 = mulnuw %27, %61
%79:i64 = add %77, %78
%80:i64 = mulnuw %36, %72
%81:i64 = add %79, %80
%82:i32 = mul 5:i32, %20
%83:i64 = zext %82
%84:i64 = mulnuw %47, %83
%85:i64 = add %81, %84 (hasExternalUses)
%86:i64 = lshr %85, 26:i64
%87:i64 = and 4294967295:i64, %86
%88:i64 = add %74, %87 (hasExternalUses)
%89:i64 = lshr %88, 26:i64
%90:i64 = and 4294967295:i64, %89
%91:i64 = add %63, %90 (hasExternalUses)
%92:i64 = lshr %91, 26:i64
%93:i64 = and 4294967295:i64, %92
%94:i64 = add %52, %93 (hasExternalUses)
%95:i32 = trunc %94
%96:i32 = and 67108863:i32, %95 (hasExternalUses)
%97:i32 = phi %0, %1, %96
infer %97

; *****
; For LLVM instruction:
;  %163 = phi i32 [ %21, %3 ], [ %140, %43 ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i64 = zext %2 (hasExternalUses)
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %5, 2:i32
%7:i32 = and 67108863:i32, %6
%8:i32 = add %4, %7
%9:i64 = zext %8 (hasExternalUses)
%10:i64 = mulnuw %3, %9
%11:i32 = var
%12:i64 = zext %11 (hasExternalUses)
%13:i32 = var
%14:i32 = var
%15:i32 = and 67108863:i32, %14
%16:i32 = add %13, %15
%17:i64 = zext %16 (hasExternalUses)
%18:i64 = mulnuw %12, %17
%19:i64 = add %10, %18
%20:i32 = var
%21:i64 = zext %20 (hasExternalUses)
%22:i32 = var
%23:i32 = var
%24:i32 = lshr %23, 4:i32
%25:i32 = and 67108863:i32, %24
%26:i32 = add %22, %25
%27:i64 = zext %26 (hasExternalUses)
%28:i64 = mulnuw %21, %27
%29:i64 = add %19, %28
%30:i32 = var
%31:i32 = var
%32:i32 = lshr %31, 6:i32
%33:i32 = add %30, %32
%34:i64 = zext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = mul 5:i32, %35
%37:i64 = zext %36 (hasExternalUses)
%38:i64 = mulnuw %34, %37
%39:i64 = add %29, %38
%40:i32 = var
%41:i32 = var
%42:i32 = lshr %41, 8:i32
%43:i8 = var
%44:i1 = eq 0:i8, %43
%45:i32 = select %44, 16777216:i32, 0:i32
%46:i32 = or %42, %45
%47:i32 = add %40, %46
%48:i64 = zext %47 (hasExternalUses)
%49:i32 = var
%50:i32 = mul 5:i32, %49
%51:i64 = zext %50
%52:i64 = mulnuw %48, %51
%53:i64 = add %39, %52
%54:i64 = mulnuw %3, %17
%55:i64 = mulnuw %21, %9
%56:i64 = add %54, %55
%57:i64 = mulnuw %27, %37
%58:i64 = add %56, %57
%59:i64 = mulnuw %34, %51
%60:i64 = add %58, %59
%61:i32 = mul 5:i32, %11
%62:i64 = zext %61
%63:i64 = mulnuw %48, %62
%64:i64 = add %60, %63
%65:i64 = mulnuw %21, %17
%66:i64 = mulnuw %9, %37
%67:i64 = add %65, %66
%68:i64 = mulnuw %27, %51
%69:i64 = add %67, %68
%70:i64 = mulnuw %34, %62
%71:i64 = add %69, %70
%72:i32 = mul 5:i32, %2
%73:i64 = zext %72
%74:i64 = mulnuw %48, %73
%75:i64 = add %71, %74 (hasExternalUses)
%76:i64 = lshr %75, 26:i64
%77:i64 = and 4294967295:i64, %76
%78:i64 = add %64, %77 (hasExternalUses)
%79:i64 = lshr %78, 26:i64
%80:i64 = and 4294967295:i64, %79
%81:i64 = add %53, %80 (hasExternalUses)
%82:i32 = trunc %81
%83:i32 = and 67108863:i32, %82 (hasExternalUses)
%84:i32 = phi %0, %1, %83
infer %84

; *****
; For LLVM instruction:
;  %164 = phi i32 [ %19, %3 ], [ %156, %43 ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i64 = zext %2
%4:i32 = var
%5:i32 = var
%6:i32 = and 67108863:i32, %5
%7:i32 = add %4, %6
%8:i64 = zext %7
%9:i64 = mulnuw %3, %8
%10:i32 = var
%11:i64 = zext %10
%12:i32 = var
%13:i32 = var
%14:i32 = lshr %13, 2:i32
%15:i32 = and 67108863:i32, %14
%16:i32 = add %12, %15
%17:i64 = zext %16
%18:i64 = mulnuw %11, %17
%19:i64 = add %9, %18
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24
%26:i32 = var
%27:i32 = mul 5:i32, %26
%28:i64 = zext %27
%29:i64 = mulnuw %25, %28
%30:i64 = add %19, %29
%31:i32 = var
%32:i32 = var
%33:i32 = lshr %32, 6:i32
%34:i32 = add %31, %33
%35:i64 = zext %34
%36:i32 = var
%37:i32 = mul 5:i32, %36
%38:i64 = zext %37
%39:i64 = mulnuw %35, %38
%40:i64 = add %30, %39
%41:i32 = var
%42:i32 = var
%43:i32 = lshr %42, 8:i32
%44:i8 = var
%45:i1 = eq 0:i8, %44
%46:i32 = select %45, 16777216:i32, 0:i32
%47:i32 = or %43, %46
%48:i32 = add %41, %47
%49:i64 = zext %48
%50:i32 = var
%51:i32 = mul 5:i32, %50
%52:i64 = zext %51
%53:i64 = mulnuw %49, %52
%54:i64 = add %40, %53
%55:i64 = mulnuw %11, %8
%56:i64 = mulnuw %17, %28
%57:i64 = add %55, %56
%58:i64 = mulnuw %25, %38
%59:i64 = add %57, %58
%60:i64 = mulnuw %35, %52
%61:i64 = add %59, %60
%62:i32 = mul 5:i32, %2
%63:i64 = zext %62
%64:i64 = mulnuw %49, %63
%65:i64 = add %61, %64
%66:i64 = lshr %65, 26:i64
%67:i64 = and 4294967295:i64, %66
%68:i64 = add %54, %67
%69:i32 = trunc %68
%70:i32 = and 67108863:i32, %69
%71:i64 = zext %36
%72:i64 = mulnuw %71, %17
%73:i64 = zext %26
%74:i64 = mulnuw %73, %8
%75:i64 = add %72, %74
%76:i64 = zext %50
%77:i64 = mulnuw %76, %25
%78:i64 = add %75, %77
%79:i64 = mulnuw %3, %35
%80:i64 = add %78, %79
%81:i64 = mulnuw %11, %49
%82:i64 = add %80, %81
%83:i64 = mulnuw %76, %17
%84:i64 = mulnuw %71, %8
%85:i64 = add %83, %84
%86:i64 = mulnuw %3, %25
%87:i64 = add %85, %86
%88:i64 = mulnuw %11, %35
%89:i64 = add %87, %88
%90:i64 = mulnuw %49, %28
%91:i64 = add %89, %90
%92:i64 = mulnuw %3, %17
%93:i64 = mulnuw %76, %8
%94:i64 = add %92, %93
%95:i64 = mulnuw %11, %25
%96:i64 = add %94, %95
%97:i64 = mulnuw %35, %28
%98:i64 = add %96, %97
%99:i64 = mulnuw %49, %38
%100:i64 = add %98, %99
%101:i64 = lshr %68, 26:i64
%102:i64 = and 4294967295:i64, %101
%103:i64 = add %100, %102 (hasExternalUses)
%104:i64 = lshr %103, 26:i64
%105:i64 = and 4294967295:i64, %104
%106:i64 = add %91, %105 (hasExternalUses)
%107:i64 = lshr %106, 26:i64
%108:i64 = and 4294967295:i64, %107
%109:i64 = add %82, %108 (hasExternalUses)
%110:i64 = lshr %109, 26:i64
%111:i32 = trunc %110
%112:i32 = mul 5:i32, %111
%113:i32 = trunc %65
%114:i32 = and 67108863:i32, %113
%115:i32 = add %112, %114 (hasExternalUses)
%116:i32 = lshr %115, 26:i32
%117:i32 = addnw %70, %116 (hasExternalUses)
%118:i32 = phi %0, %1, %117
infer %118

; *****
; For LLVM instruction:
;  %165 = phi i32 [ %17, %3 ], [ %155, %43 ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i64 = zext %2
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %5, 2:i32
%7:i32 = and 67108863:i32, %6
%8:i32 = add %4, %7
%9:i64 = zext %8
%10:i64 = mulnuw %3, %9
%11:i32 = var
%12:i64 = zext %11
%13:i32 = var
%14:i32 = var
%15:i32 = and 67108863:i32, %14
%16:i32 = add %13, %15
%17:i64 = zext %16
%18:i64 = mulnuw %12, %17
%19:i64 = add %10, %18
%20:i32 = var
%21:i64 = zext %20
%22:i32 = var
%23:i32 = var
%24:i32 = lshr %23, 4:i32
%25:i32 = and 67108863:i32, %24
%26:i32 = add %22, %25
%27:i64 = zext %26
%28:i64 = mulnuw %21, %27
%29:i64 = add %19, %28
%30:i32 = var
%31:i64 = zext %30
%32:i32 = var
%33:i32 = var
%34:i32 = lshr %33, 6:i32
%35:i32 = add %32, %34
%36:i64 = zext %35
%37:i64 = mulnuw %31, %36
%38:i64 = add %29, %37
%39:i32 = var
%40:i64 = zext %39
%41:i32 = var
%42:i32 = var
%43:i32 = lshr %42, 8:i32
%44:i8 = var
%45:i1 = eq 0:i8, %44
%46:i32 = select %45, 16777216:i32, 0:i32
%47:i32 = or %43, %46
%48:i32 = add %41, %47
%49:i64 = zext %48
%50:i64 = mulnuw %40, %49
%51:i64 = add %38, %50
%52:i64 = mulnuw %21, %9
%53:i64 = mulnuw %3, %17
%54:i64 = add %52, %53
%55:i64 = mulnuw %31, %27
%56:i64 = add %54, %55
%57:i64 = mulnuw %40, %36
%58:i64 = add %56, %57
%59:i32 = mul 5:i32, %11
%60:i64 = zext %59
%61:i64 = mulnuw %49, %60
%62:i64 = add %58, %61
%63:i64 = mulnuw %31, %9
%64:i64 = mulnuw %21, %17
%65:i64 = add %63, %64
%66:i64 = mulnuw %40, %27
%67:i64 = add %65, %66
%68:i64 = mulnuw %36, %60
%69:i64 = add %67, %68
%70:i32 = mul 5:i32, %2
%71:i64 = zext %70
%72:i64 = mulnuw %49, %71
%73:i64 = add %69, %72
%74:i64 = mulnuw %31, %17
%75:i64 = mulnuw %40, %9
%76:i64 = add %74, %75
%77:i64 = mulnuw %27, %60
%78:i64 = add %76, %77
%79:i64 = mulnuw %36, %71
%80:i64 = add %78, %79
%81:i32 = mul 5:i32, %20
%82:i64 = zext %81
%83:i64 = mulnuw %49, %82
%84:i64 = add %80, %83
%85:i64 = mulnuw %40, %17
%86:i64 = mulnuw %9, %60
%87:i64 = add %85, %86
%88:i64 = mulnuw %27, %71
%89:i64 = add %87, %88
%90:i64 = mulnuw %36, %82
%91:i64 = add %89, %90
%92:i32 = mul 5:i32, %30
%93:i64 = zext %92
%94:i64 = mulnuw %49, %93
%95:i64 = add %91, %94
%96:i64 = lshr %95, 26:i64
%97:i64 = and 4294967295:i64, %96
%98:i64 = add %84, %97 (hasExternalUses)
%99:i64 = lshr %98, 26:i64
%100:i64 = and 4294967295:i64, %99
%101:i64 = add %73, %100 (hasExternalUses)
%102:i64 = lshr %101, 26:i64
%103:i64 = and 4294967295:i64, %102
%104:i64 = add %62, %103 (hasExternalUses)
%105:i64 = lshr %104, 26:i64
%106:i64 = and 4294967295:i64, %105
%107:i64 = add %51, %106 (hasExternalUses)
%108:i64 = lshr %107, 26:i64
%109:i32 = trunc %108
%110:i32 = mul 5:i32, %109
%111:i32 = trunc %95
%112:i32 = and 67108863:i32, %111
%113:i32 = add %110, %112 (hasExternalUses)
%114:i32 = and 67108863:i32, %113 (hasExternalUses)
%115:i32 = phi %0, %1, %114
infer %115
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i1 = eq 0:i8, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i1 = eq 0:i8, %0
%2:i32 = select %1, 16777216:i32, 0:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 16777216
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i1 = ult 15:i64, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 5:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -5
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0
infer %1 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4294967295
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 5:i32, %0
%2:i64 = zext %1
infer %2 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4294967291
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i64 = var (range=[16,0))
infer %0


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 16
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -9223372036854775808
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = and 67108863:i32, %1
%3:i32 = add %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = and 67108863:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=00001111111111111111111111111100)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435452
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = lshr %0, 2:i32
infer %1 (demandedBits=00000011111111111111111111111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 67108863
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = lshr %0, 2:i32
%2:i32 = and 67108863:i32, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 67108863
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = lshr %0, 2:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 2:i32
%3:i32 = and 67108863:i32, %2
%4:i32 = add %0, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = lshr %0, 2:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = lshr %0, 2:i32
%2:i32 = and 67108863:i32, %1

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=00111111111111111111111111110000)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741808
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = lshr %0, 4:i32
infer %1 (demandedBits=00000011111111111111111111111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 67108863
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = lshr %0, 4:i32
%2:i32 = and 67108863:i32, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 67108863
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = lshr %0, 4:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 4:i32
%3:i32 = and 67108863:i32, %2
%4:i32 = add %0, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = lshr %0, 4:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = lshr %0, 4:i32
%2:i32 = and 67108863:i32, %1

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=11111111111111111111111111000000)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -64
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = lshr %0, 6:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 67108863
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 6:i32
%3:i32 = add %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = lshr %0, 6:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=11111111111111111111111100000000)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -256
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = lshr %0, 8:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 16777215
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = lshr %0, 8:i32
%2:i8 = var
%3:i1 = eq 0:i8, %2
%4:i32 = select %3, 16777216:i32, 0:i32
%5:i32 = or %1, %4
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 16777216
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = lshr %0, 8:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var
%1:i1 = eq 0:i8, %0
%2:i32 = select %1, 16777216:i32, 0:i32

Cost = 4
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 8:i32
%3:i8 = var
%4:i1 = eq 0:i8, %3
%5:i32 = select %4, 16777216:i32, 0:i32
%6:i32 = or %2, %5
%7:i32 = add %0, %6
infer %7


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 16777216
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -16777217
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = lshr %0, 8:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i1 = eq 0:i8, %0
%2:i32 = select %1, 16777216:i32, 0:i32

Cost = 4
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var
%1:i32 = lshr %0, 8:i32
%2:i8 = var
%3:i1 = eq 0:i8, %2
%4:i32 = select %3, 16777216:i32, 0:i32
%5:i32 = or %1, %4

Cost = 6
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 6 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = and 67108863:i32, %1
%3:i32 = add %0, %2
%4:i64 = zext %3
infer %4 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4294967295
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = and 67108863:i32, %3
%5:i32 = add %2, %4
%6:i64 = zext %5 (hasExternalUses)
%7:i64 = mulnuw %1, %6
infer %7 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 2:i32
%3:i32 = and 67108863:i32, %2
%4:i32 = add %0, %3
%5:i64 = zext %4
infer %5 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4294967295
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 2:i32
%3:i32 = and 67108863:i32, %2
%4:i32 = add %0, %3
%5:i64 = zext %4 (hasExternalUses)
%6:i32 = var
%7:i32 = mul 5:i32, %6
%8:i64 = zext %7 (hasExternalUses)
%9:i64 = mulnuw %5, %8
infer %9 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = and 67108863:i32, %3
%5:i32 = add %2, %4
%6:i64 = zext %5 (hasExternalUses)
%7:i64 = mulnuw %1, %6
%8:i32 = var
%9:i32 = var
%10:i32 = lshr %9, 2:i32
%11:i32 = and 67108863:i32, %10
%12:i32 = add %8, %11
%13:i64 = zext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = mul 5:i32, %14
%16:i64 = zext %15 (hasExternalUses)
%17:i64 = mulnuw %13, %16
%18:i64 = add %7, %17
infer %18 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = zext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 4:i32
%3:i32 = and 67108863:i32, %2
%4:i32 = add %0, %3
%5:i64 = zext %4
infer %5 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4294967295
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 4:i32
%3:i32 = and 67108863:i32, %2
%4:i32 = add %0, %3
%5:i64 = zext %4 (hasExternalUses)
%6:i32 = var
%7:i32 = mul 5:i32, %6
%8:i64 = zext %7 (hasExternalUses)
%9:i64 = mulnuw %5, %8
infer %9 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = and 67108863:i32, %3
%5:i32 = add %2, %4
%6:i64 = zext %5 (hasExternalUses)
%7:i64 = mulnuw %1, %6
%8:i32 = var
%9:i32 = var
%10:i32 = lshr %9, 2:i32
%11:i32 = and 67108863:i32, %10
%12:i32 = add %8, %11
%13:i64 = zext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = mul 5:i32, %14
%16:i64 = zext %15 (hasExternalUses)
%17:i64 = mulnuw %13, %16
%18:i64 = add %7, %17
%19:i32 = var
%20:i32 = var
%21:i32 = lshr %20, 4:i32
%22:i32 = and 67108863:i32, %21
%23:i32 = add %19, %22
%24:i64 = zext %23 (hasExternalUses)
%25:i32 = var
%26:i32 = mul 5:i32, %25
%27:i64 = zext %26 (hasExternalUses)
%28:i64 = mulnuw %24, %27
%29:i64 = add %18, %28
infer %29 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i32 = mul 5:i32, %0
%2:i64 = zext %1

Cost = 2
verification query failed!
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 6:i32
%3:i32 = add %0, %2
%4:i64 = zext %3
infer %4 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4294967295
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 6:i32
%3:i32 = add %0, %2
%4:i64 = zext %3 (hasExternalUses)
%5:i32 = var
%6:i32 = mul 5:i32, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %4, %7
infer %8 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = and 67108863:i32, %3
%5:i32 = add %2, %4
%6:i64 = zext %5 (hasExternalUses)
%7:i64 = mulnuw %1, %6
%8:i32 = var
%9:i32 = var
%10:i32 = lshr %9, 2:i32
%11:i32 = and 67108863:i32, %10
%12:i32 = add %8, %11
%13:i64 = zext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = mul 5:i32, %14
%16:i64 = zext %15 (hasExternalUses)
%17:i64 = mulnuw %13, %16
%18:i64 = add %7, %17
%19:i32 = var
%20:i32 = var
%21:i32 = lshr %20, 4:i32
%22:i32 = and 67108863:i32, %21
%23:i32 = add %19, %22
%24:i64 = zext %23 (hasExternalUses)
%25:i32 = var
%26:i32 = mul 5:i32, %25
%27:i64 = zext %26 (hasExternalUses)
%28:i64 = mulnuw %24, %27
%29:i64 = add %18, %28
%30:i32 = var
%31:i32 = var
%32:i32 = lshr %31, 6:i32
%33:i32 = add %30, %32
%34:i64 = zext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = mul 5:i32, %35
%37:i64 = zext %36 (hasExternalUses)
%38:i64 = mulnuw %34, %37
%39:i64 = add %29, %38
infer %39 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i32 = mul 5:i32, %0
%2:i64 = zext %1

Cost = 2
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 8:i32
%3:i8 = var
%4:i1 = eq 0:i8, %3
%5:i32 = select %4, 16777216:i32, 0:i32
%6:i32 = or %2, %5
%7:i32 = add %0, %6
%8:i64 = zext %7
infer %8 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4294967295
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 8:i32
%3:i8 = var
%4:i1 = eq 0:i8, %3
%5:i32 = select %4, 16777216:i32, 0:i32
%6:i32 = or %2, %5
%7:i32 = add %0, %6
%8:i64 = zext %7 (hasExternalUses)
%9:i32 = var
%10:i32 = mul 5:i32, %9
%11:i64 = zext %10
%12:i64 = mulnuw %8, %11
infer %12 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i32 = mul 5:i32, %0
%2:i64 = zext %1

Cost = 2
verification query failed!
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = and 67108863:i32, %3
%5:i32 = add %2, %4
%6:i64 = zext %5 (hasExternalUses)
%7:i64 = mulnuw %1, %6
%8:i32 = var
%9:i32 = var
%10:i32 = lshr %9, 2:i32
%11:i32 = and 67108863:i32, %10
%12:i32 = add %8, %11
%13:i64 = zext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = mul 5:i32, %14
%16:i64 = zext %15 (hasExternalUses)
%17:i64 = mulnuw %13, %16
%18:i64 = add %7, %17
%19:i32 = var
%20:i32 = var
%21:i32 = lshr %20, 4:i32
%22:i32 = and 67108863:i32, %21
%23:i32 = add %19, %22
%24:i64 = zext %23 (hasExternalUses)
%25:i32 = var
%26:i32 = mul 5:i32, %25
%27:i64 = zext %26 (hasExternalUses)
%28:i64 = mulnuw %24, %27
%29:i64 = add %18, %28
%30:i32 = var
%31:i32 = var
%32:i32 = lshr %31, 6:i32
%33:i32 = add %30, %32
%34:i64 = zext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = mul 5:i32, %35
%37:i64 = zext %36 (hasExternalUses)
%38:i64 = mulnuw %34, %37
%39:i64 = add %29, %38
%40:i32 = var
%41:i32 = var
%42:i32 = lshr %41, 8:i32
%43:i8 = var
%44:i1 = eq 0:i8, %43
%45:i32 = select %44, 16777216:i32, 0:i32
%46:i32 = or %42, %45
%47:i32 = add %40, %46
%48:i64 = zext %47 (hasExternalUses)
%49:i32 = var
%50:i32 = mul 5:i32, %49
%51:i64 = zext %50
%52:i64 = mulnuw %48, %51
%53:i64 = add %39, %52
infer %53 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i32 = mul 5:i32, %0
%2:i64 = zext %1

Cost = 2
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %1, %7
infer %8 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = and 67108863:i32, %3
%5:i32 = add %2, %4
%6:i64 = zext %5 (hasExternalUses)
%7:i64 = mulnuw %1, %6
%8:i32 = var
%9:i64 = zext %8 (hasExternalUses)
%10:i32 = var
%11:i32 = var
%12:i32 = lshr %11, 2:i32
%13:i32 = and 67108863:i32, %12
%14:i32 = add %10, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %9, %15
%17:i64 = add %7, %16
infer %17 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = zext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = and 67108863:i32, %3
%5:i32 = add %2, %4
%6:i64 = zext %5 (hasExternalUses)
%7:i64 = mulnuw %1, %6
%8:i32 = var
%9:i64 = zext %8 (hasExternalUses)
%10:i32 = var
%11:i32 = var
%12:i32 = lshr %11, 2:i32
%13:i32 = and 67108863:i32, %12
%14:i32 = add %10, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %9, %15
%17:i64 = add %7, %16
%18:i32 = var
%19:i32 = var
%20:i32 = lshr %19, 4:i32
%21:i32 = and 67108863:i32, %20
%22:i32 = add %18, %21
%23:i64 = zext %22 (hasExternalUses)
%24:i32 = var
%25:i32 = mul 5:i32, %24
%26:i64 = zext %25 (hasExternalUses)
%27:i64 = mulnuw %23, %26
%28:i64 = add %17, %27
infer %28 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i32 = mul 5:i32, %0
%2:i64 = zext %1

Cost = 2
verification query failed!
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = and 67108863:i32, %3
%5:i32 = add %2, %4
%6:i64 = zext %5 (hasExternalUses)
%7:i64 = mulnuw %1, %6
%8:i32 = var
%9:i64 = zext %8 (hasExternalUses)
%10:i32 = var
%11:i32 = var
%12:i32 = lshr %11, 2:i32
%13:i32 = and 67108863:i32, %12
%14:i32 = add %10, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %9, %15
%17:i64 = add %7, %16
%18:i32 = var
%19:i32 = var
%20:i32 = lshr %19, 4:i32
%21:i32 = and 67108863:i32, %20
%22:i32 = add %18, %21
%23:i64 = zext %22 (hasExternalUses)
%24:i32 = var
%25:i32 = mul 5:i32, %24
%26:i64 = zext %25 (hasExternalUses)
%27:i64 = mulnuw %23, %26
%28:i64 = add %17, %27
%29:i32 = var
%30:i32 = var
%31:i32 = lshr %30, 6:i32
%32:i32 = add %29, %31
%33:i64 = zext %32 (hasExternalUses)
%34:i32 = var
%35:i32 = mul 5:i32, %34
%36:i64 = zext %35 (hasExternalUses)
%37:i64 = mulnuw %33, %36
%38:i64 = add %28, %37
infer %38 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i32 = mul 5:i32, %0
%2:i64 = zext %1

Cost = 2
verification query failed!
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 8:i32
%3:i8 = var
%4:i1 = eq 0:i8, %3
%5:i32 = select %4, 16777216:i32, 0:i32
%6:i32 = or %2, %5
%7:i32 = add %0, %6
%8:i64 = zext %7 (hasExternalUses)
%9:i32 = var
%10:i32 = mul 5:i32, %9
%11:i64 = zext %10 (hasExternalUses)
%12:i64 = mulnuw %8, %11
infer %12 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = and 67108863:i32, %3
%5:i32 = add %2, %4
%6:i64 = zext %5 (hasExternalUses)
%7:i64 = mulnuw %1, %6
%8:i32 = var
%9:i64 = zext %8 (hasExternalUses)
%10:i32 = var
%11:i32 = var
%12:i32 = lshr %11, 2:i32
%13:i32 = and 67108863:i32, %12
%14:i32 = add %10, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %9, %15
%17:i64 = add %7, %16
%18:i32 = var
%19:i32 = var
%20:i32 = lshr %19, 4:i32
%21:i32 = and 67108863:i32, %20
%22:i32 = add %18, %21
%23:i64 = zext %22 (hasExternalUses)
%24:i32 = var
%25:i32 = mul 5:i32, %24
%26:i64 = zext %25 (hasExternalUses)
%27:i64 = mulnuw %23, %26
%28:i64 = add %17, %27
%29:i32 = var
%30:i32 = var
%31:i32 = lshr %30, 6:i32
%32:i32 = add %29, %31
%33:i64 = zext %32 (hasExternalUses)
%34:i32 = var
%35:i32 = mul 5:i32, %34
%36:i64 = zext %35 (hasExternalUses)
%37:i64 = mulnuw %33, %36
%38:i64 = add %28, %37
%39:i32 = var
%40:i32 = var
%41:i32 = lshr %40, 8:i32
%42:i8 = var
%43:i1 = eq 0:i8, %42
%44:i32 = select %43, 16777216:i32, 0:i32
%45:i32 = or %41, %44
%46:i32 = add %39, %45
%47:i64 = zext %46 (hasExternalUses)
%48:i32 = var
%49:i32 = mul 5:i32, %48
%50:i64 = zext %49 (hasExternalUses)
%51:i64 = mulnuw %47, %50
%52:i64 = add %38, %51
infer %52 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i32 = mul 5:i32, %0
%2:i64 = zext %1

Cost = 2
verification query failed!
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9 (hasExternalUses)
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
infer %17 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = zext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 4:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %1, %7
infer %8 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9 (hasExternalUses)
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24 (hasExternalUses)
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
infer %27 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = zext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9 (hasExternalUses)
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24 (hasExternalUses)
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
%28:i32 = var
%29:i32 = var
%30:i32 = lshr %29, 6:i32
%31:i32 = add %28, %30
%32:i64 = zext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = mul 5:i32, %33
%35:i64 = zext %34 (hasExternalUses)
%36:i64 = mulnuw %32, %35
%37:i64 = add %27, %36
infer %37 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i32 = mul 5:i32, %0
%2:i64 = zext %1

Cost = 2
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9 (hasExternalUses)
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24 (hasExternalUses)
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
%28:i32 = var
%29:i32 = var
%30:i32 = lshr %29, 6:i32
%31:i32 = add %28, %30
%32:i64 = zext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = mul 5:i32, %33
%35:i64 = zext %34 (hasExternalUses)
%36:i64 = mulnuw %32, %35
%37:i64 = add %27, %36
%38:i32 = var
%39:i32 = var
%40:i32 = lshr %39, 8:i32
%41:i8 = var
%42:i1 = eq 0:i8, %41
%43:i32 = select %42, 16777216:i32, 0:i32
%44:i32 = or %40, %43
%45:i32 = add %38, %44
%46:i64 = zext %45 (hasExternalUses)
%47:i32 = var
%48:i32 = mul 5:i32, %47
%49:i64 = zext %48 (hasExternalUses)
%50:i64 = mulnuw %46, %49
%51:i64 = add %37, %50
infer %51 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i32 = mul 5:i32, %0
%2:i64 = zext %1

Cost = 2
verification query failed!
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 6:i32
%5:i32 = add %2, %4
%6:i64 = zext %5 (hasExternalUses)
%7:i64 = mulnuw %1, %6
infer %7 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9 (hasExternalUses)
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24 (hasExternalUses)
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
%28:i32 = var
%29:i64 = zext %28 (hasExternalUses)
%30:i32 = var
%31:i32 = var
%32:i32 = lshr %31, 6:i32
%33:i32 = add %30, %32
%34:i64 = zext %33 (hasExternalUses)
%35:i64 = mulnuw %29, %34
%36:i64 = add %27, %35
infer %36 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = zext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 6 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9 (hasExternalUses)
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24 (hasExternalUses)
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
%28:i32 = var
%29:i64 = zext %28 (hasExternalUses)
%30:i32 = var
%31:i32 = var
%32:i32 = lshr %31, 6:i32
%33:i32 = add %30, %32
%34:i64 = zext %33 (hasExternalUses)
%35:i64 = mulnuw %29, %34
%36:i64 = add %27, %35
%37:i32 = var
%38:i32 = var
%39:i32 = lshr %38, 8:i32
%40:i8 = var
%41:i1 = eq 0:i8, %40
%42:i32 = select %41, 16777216:i32, 0:i32
%43:i32 = or %39, %42
%44:i32 = add %37, %43
%45:i64 = zext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = mul 5:i32, %46
%48:i64 = zext %47 (hasExternalUses)
%49:i64 = mulnuw %45, %48
%50:i64 = add %36, %49
infer %50 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i32 = mul 5:i32, %0
%2:i64 = zext %1

Cost = 2
verification query failed!
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = and 67108863:i32, %3
%5:i32 = add %2, %4
%6:i64 = zext %5 (hasExternalUses)
%7:i64 = mulnuw %1, %6
infer %7 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = zext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
infer %17 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = zext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24 (hasExternalUses)
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
infer %27 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = zext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24 (hasExternalUses)
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
%28:i32 = var
%29:i64 = zext %28 (hasExternalUses)
%30:i32 = var
%31:i32 = var
%32:i32 = lshr %31, 6:i32
%33:i32 = add %30, %32
%34:i64 = zext %33 (hasExternalUses)
%35:i64 = mulnuw %29, %34
%36:i64 = add %27, %35
infer %36 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = zext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 8:i32
%5:i8 = var
%6:i1 = eq 0:i8, %5
%7:i32 = select %6, 16777216:i32, 0:i32
%8:i32 = or %4, %7
%9:i32 = add %2, %8
%10:i64 = zext %9 (hasExternalUses)
%11:i64 = mulnuw %1, %10
infer %11 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24 (hasExternalUses)
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
%28:i32 = var
%29:i64 = zext %28 (hasExternalUses)
%30:i32 = var
%31:i32 = var
%32:i32 = lshr %31, 6:i32
%33:i32 = add %30, %32
%34:i64 = zext %33 (hasExternalUses)
%35:i64 = mulnuw %29, %34
%36:i64 = add %27, %35
%37:i32 = var
%38:i64 = zext %37 (hasExternalUses)
%39:i32 = var
%40:i32 = var
%41:i32 = lshr %40, 8:i32
%42:i8 = var
%43:i1 = eq 0:i8, %42
%44:i32 = select %43, 16777216:i32, 0:i32
%45:i32 = or %41, %44
%46:i32 = add %39, %45
%47:i64 = zext %46 (hasExternalUses)
%48:i64 = mulnuw %38, %47
%49:i64 = add %36, %48
infer %49 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = zext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = and 67108863:i32, %3
%5:i32 = add %2, %4
%6:i64 = zext %5 (hasExternalUses)
%7:i64 = mulnuw %1, %6
%8:i32 = var
%9:i32 = var
%10:i32 = lshr %9, 2:i32
%11:i32 = and 67108863:i32, %10
%12:i32 = add %8, %11
%13:i64 = zext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = mul 5:i32, %14
%16:i64 = zext %15 (hasExternalUses)
%17:i64 = mulnuw %13, %16
%18:i64 = add %7, %17
%19:i32 = var
%20:i32 = var
%21:i32 = lshr %20, 4:i32
%22:i32 = and 67108863:i32, %21
%23:i32 = add %19, %22
%24:i64 = zext %23 (hasExternalUses)
%25:i32 = var
%26:i32 = mul 5:i32, %25
%27:i64 = zext %26 (hasExternalUses)
%28:i64 = mulnuw %24, %27
%29:i64 = add %18, %28
%30:i32 = var
%31:i32 = var
%32:i32 = lshr %31, 6:i32
%33:i32 = add %30, %32
%34:i64 = zext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = mul 5:i32, %35
%37:i64 = zext %36 (hasExternalUses)
%38:i64 = mulnuw %34, %37
%39:i64 = add %29, %38
%40:i32 = var
%41:i32 = var
%42:i32 = lshr %41, 8:i32
%43:i8 = var
%44:i1 = eq 0:i8, %43
%45:i32 = select %44, 16777216:i32, 0:i32
%46:i32 = or %42, %45
%47:i32 = add %40, %46
%48:i64 = zext %47 (hasExternalUses)
%49:i32 = var
%50:i32 = mul 5:i32, %49
%51:i64 = zext %50
%52:i64 = mulnuw %48, %51
%53:i64 = add %39, %52 (hasExternalUses)
%54:i64 = lshr %53, 26:i64
infer %54 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
ConstantSynthesis: solver returns error on first query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = and 67108863:i32, %3
%5:i32 = add %2, %4
%6:i64 = zext %5 (hasExternalUses)
%7:i64 = mulnuw %1, %6
%8:i32 = var
%9:i32 = var
%10:i32 = lshr %9, 2:i32
%11:i32 = and 67108863:i32, %10
%12:i32 = add %8, %11
%13:i64 = zext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = mul 5:i32, %14
%16:i64 = zext %15 (hasExternalUses)
%17:i64 = mulnuw %13, %16
%18:i64 = add %7, %17
%19:i32 = var
%20:i32 = var
%21:i32 = lshr %20, 4:i32
%22:i32 = and 67108863:i32, %21
%23:i32 = add %19, %22
%24:i64 = zext %23 (hasExternalUses)
%25:i32 = var
%26:i32 = mul 5:i32, %25
%27:i64 = zext %26 (hasExternalUses)
%28:i64 = mulnuw %24, %27
%29:i64 = add %18, %28
%30:i32 = var
%31:i32 = var
%32:i32 = lshr %31, 6:i32
%33:i32 = add %30, %32
%34:i64 = zext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = mul 5:i32, %35
%37:i64 = zext %36 (hasExternalUses)
%38:i64 = mulnuw %34, %37
%39:i64 = add %29, %38
%40:i32 = var
%41:i32 = var
%42:i32 = lshr %41, 8:i32
%43:i8 = var
%44:i1 = eq 0:i8, %43
%45:i32 = select %44, 16777216:i32, 0:i32
%46:i32 = or %42, %45
%47:i32 = add %40, %46
%48:i64 = zext %47 (hasExternalUses)
%49:i32 = var
%50:i32 = mul 5:i32, %49
%51:i64 = zext %50
%52:i64 = mulnuw %48, %51
%53:i64 = add %39, %52 (hasExternalUses)
%54:i32 = trunc %53
infer %54 (demandedBits=00000011111111111111111111111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = and 67108863:i32, %3
%5:i32 = add %2, %4
%6:i64 = zext %5 (hasExternalUses)
%7:i64 = mulnuw %1, %6
%8:i32 = var
%9:i32 = var
%10:i32 = lshr %9, 2:i32
%11:i32 = and 67108863:i32, %10
%12:i32 = add %8, %11
%13:i64 = zext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = mul 5:i32, %14
%16:i64 = zext %15 (hasExternalUses)
%17:i64 = mulnuw %13, %16
%18:i64 = add %7, %17
%19:i32 = var
%20:i32 = var
%21:i32 = lshr %20, 4:i32
%22:i32 = and 67108863:i32, %21
%23:i32 = add %19, %22
%24:i64 = zext %23 (hasExternalUses)
%25:i32 = var
%26:i32 = mul 5:i32, %25
%27:i64 = zext %26 (hasExternalUses)
%28:i64 = mulnuw %24, %27
%29:i64 = add %18, %28
%30:i32 = var
%31:i32 = var
%32:i32 = lshr %31, 6:i32
%33:i32 = add %30, %32
%34:i64 = zext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = mul 5:i32, %35
%37:i64 = zext %36 (hasExternalUses)
%38:i64 = mulnuw %34, %37
%39:i64 = add %29, %38
%40:i32 = var
%41:i32 = var
%42:i32 = lshr %41, 8:i32
%43:i8 = var
%44:i1 = eq 0:i8, %43
%45:i32 = select %44, 16777216:i32, 0:i32
%46:i32 = or %42, %45
%47:i32 = add %40, %46
%48:i64 = zext %47 (hasExternalUses)
%49:i32 = var
%50:i32 = mul 5:i32, %49
%51:i64 = zext %50
%52:i64 = mulnuw %48, %51
%53:i64 = add %39, %52 (hasExternalUses)
%54:i32 = trunc %53
%55:i32 = and 67108863:i32, %54
infer %55


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = and 67108863:i32, %3
%5:i32 = add %2, %4
%6:i64 = zext %5 (hasExternalUses)
%7:i64 = mulnuw %1, %6
%8:i32 = var
%9:i32 = var
%10:i32 = lshr %9, 2:i32
%11:i32 = and 67108863:i32, %10
%12:i32 = add %8, %11
%13:i64 = zext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = mul 5:i32, %14
%16:i64 = zext %15 (hasExternalUses)
%17:i64 = mulnuw %13, %16
%18:i64 = add %7, %17
%19:i32 = var
%20:i32 = var
%21:i32 = lshr %20, 4:i32
%22:i32 = and 67108863:i32, %21
%23:i32 = add %19, %22
%24:i64 = zext %23 (hasExternalUses)
%25:i32 = var
%26:i32 = mul 5:i32, %25
%27:i64 = zext %26 (hasExternalUses)
%28:i64 = mulnuw %24, %27
%29:i64 = add %18, %28
%30:i32 = var
%31:i32 = var
%32:i32 = lshr %31, 6:i32
%33:i32 = add %30, %32
%34:i64 = zext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = mul 5:i32, %35
%37:i64 = zext %36 (hasExternalUses)
%38:i64 = mulnuw %34, %37
%39:i64 = add %29, %38
%40:i32 = var
%41:i32 = var
%42:i32 = lshr %41, 8:i32
%43:i8 = var
%44:i1 = eq 0:i8, %43
%45:i32 = select %44, 16777216:i32, 0:i32
%46:i32 = or %42, %45
%47:i32 = add %40, %46
%48:i64 = zext %47 (hasExternalUses)
%49:i32 = var
%50:i32 = mul 5:i32, %49
%51:i64 = zext %50
%52:i64 = mulnuw %48, %51
%53:i64 = add %39, %52 (hasExternalUses)
%54:i64 = lshr %53, 26:i64
%55:i64 = and 4294967295:i64, %54
infer %55 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
ConstantSynthesis: solver returns error on first query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = and 67108863:i32, %3
%5:i32 = add %2, %4
%6:i64 = zext %5 (hasExternalUses)
%7:i64 = mulnuw %1, %6
%8:i32 = var
%9:i64 = zext %8 (hasExternalUses)
%10:i32 = var
%11:i32 = var
%12:i32 = lshr %11, 2:i32
%13:i32 = and 67108863:i32, %12
%14:i32 = add %10, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %9, %15
%17:i64 = add %7, %16
%18:i32 = var
%19:i32 = var
%20:i32 = lshr %19, 4:i32
%21:i32 = and 67108863:i32, %20
%22:i32 = add %18, %21
%23:i64 = zext %22 (hasExternalUses)
%24:i32 = var
%25:i32 = mul 5:i32, %24
%26:i64 = zext %25 (hasExternalUses)
%27:i64 = mulnuw %23, %26
%28:i64 = add %17, %27
%29:i32 = var
%30:i32 = var
%31:i32 = lshr %30, 6:i32
%32:i32 = add %29, %31
%33:i64 = zext %32 (hasExternalUses)
%34:i32 = var
%35:i32 = mul 5:i32, %34
%36:i64 = zext %35 (hasExternalUses)
%37:i64 = mulnuw %33, %36
%38:i64 = add %28, %37
%39:i32 = var
%40:i32 = var
%41:i32 = lshr %40, 8:i32
%42:i8 = var
%43:i1 = eq 0:i8, %42
%44:i32 = select %43, 16777216:i32, 0:i32
%45:i32 = or %41, %44
%46:i32 = add %39, %45
%47:i64 = zext %46 (hasExternalUses)
%48:i32 = var
%49:i32 = mul 5:i32, %48
%50:i64 = zext %49
%51:i64 = mulnuw %47, %50
%52:i64 = add %38, %51
%53:i64 = mulnuw %9, %6
%54:i64 = mulnuw %15, %26
%55:i64 = add %53, %54
%56:i64 = mulnuw %23, %36
%57:i64 = add %55, %56
%58:i64 = mulnuw %33, %50
%59:i64 = add %57, %58
%60:i32 = mul 5:i32, %0
%61:i64 = zext %60
%62:i64 = mulnuw %47, %61
%63:i64 = add %59, %62 (hasExternalUses)
%64:i64 = lshr %63, 26:i64
%65:i64 = and 4294967295:i64, %64
%66:i64 = add %52, %65
infer %66 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i32 = mul 5:i32, %0
%2:i64 = zext %1

Cost = 2
verification query failed!
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = and 67108863:i32, %3
%5:i32 = add %2, %4
%6:i64 = zext %5 (hasExternalUses)
%7:i64 = mulnuw %1, %6
%8:i32 = var
%9:i64 = zext %8 (hasExternalUses)
%10:i32 = var
%11:i32 = var
%12:i32 = lshr %11, 2:i32
%13:i32 = and 67108863:i32, %12
%14:i32 = add %10, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %9, %15
%17:i64 = add %7, %16
%18:i32 = var
%19:i32 = var
%20:i32 = lshr %19, 4:i32
%21:i32 = and 67108863:i32, %20
%22:i32 = add %18, %21
%23:i64 = zext %22 (hasExternalUses)
%24:i32 = var
%25:i32 = mul 5:i32, %24
%26:i64 = zext %25 (hasExternalUses)
%27:i64 = mulnuw %23, %26
%28:i64 = add %17, %27
%29:i32 = var
%30:i32 = var
%31:i32 = lshr %30, 6:i32
%32:i32 = add %29, %31
%33:i64 = zext %32 (hasExternalUses)
%34:i32 = var
%35:i32 = mul 5:i32, %34
%36:i64 = zext %35 (hasExternalUses)
%37:i64 = mulnuw %33, %36
%38:i64 = add %28, %37
%39:i32 = var
%40:i32 = var
%41:i32 = lshr %40, 8:i32
%42:i8 = var
%43:i1 = eq 0:i8, %42
%44:i32 = select %43, 16777216:i32, 0:i32
%45:i32 = or %41, %44
%46:i32 = add %39, %45
%47:i64 = zext %46 (hasExternalUses)
%48:i32 = var
%49:i32 = mul 5:i32, %48
%50:i64 = zext %49
%51:i64 = mulnuw %47, %50
%52:i64 = add %38, %51
%53:i64 = mulnuw %9, %6
%54:i64 = mulnuw %15, %26
%55:i64 = add %53, %54
%56:i64 = mulnuw %23, %36
%57:i64 = add %55, %56
%58:i64 = mulnuw %33, %50
%59:i64 = add %57, %58
%60:i32 = mul 5:i32, %0
%61:i64 = zext %60
%62:i64 = mulnuw %47, %61
%63:i64 = add %59, %62 (hasExternalUses)
%64:i64 = lshr %63, 26:i64
%65:i64 = and 4294967295:i64, %64
%66:i64 = add %52, %65 (hasExternalUses)
%67:i64 = lshr %66, 26:i64
infer %67 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = and 67108863:i32, %3
%5:i32 = add %2, %4
%6:i64 = zext %5 (hasExternalUses)
%7:i64 = mulnuw %1, %6
%8:i32 = var
%9:i64 = zext %8 (hasExternalUses)
%10:i32 = var
%11:i32 = var
%12:i32 = lshr %11, 2:i32
%13:i32 = and 67108863:i32, %12
%14:i32 = add %10, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %9, %15
%17:i64 = add %7, %16
%18:i32 = var
%19:i32 = var
%20:i32 = lshr %19, 4:i32
%21:i32 = and 67108863:i32, %20
%22:i32 = add %18, %21
%23:i64 = zext %22 (hasExternalUses)
%24:i32 = var
%25:i32 = mul 5:i32, %24
%26:i64 = zext %25 (hasExternalUses)
%27:i64 = mulnuw %23, %26
%28:i64 = add %17, %27
%29:i32 = var
%30:i32 = var
%31:i32 = lshr %30, 6:i32
%32:i32 = add %29, %31
%33:i64 = zext %32 (hasExternalUses)
%34:i32 = var
%35:i32 = mul 5:i32, %34
%36:i64 = zext %35 (hasExternalUses)
%37:i64 = mulnuw %33, %36
%38:i64 = add %28, %37
%39:i32 = var
%40:i32 = var
%41:i32 = lshr %40, 8:i32
%42:i8 = var
%43:i1 = eq 0:i8, %42
%44:i32 = select %43, 16777216:i32, 0:i32
%45:i32 = or %41, %44
%46:i32 = add %39, %45
%47:i64 = zext %46 (hasExternalUses)
%48:i32 = var
%49:i32 = mul 5:i32, %48
%50:i64 = zext %49
%51:i64 = mulnuw %47, %50
%52:i64 = add %38, %51
%53:i64 = mulnuw %9, %6
%54:i64 = mulnuw %15, %26
%55:i64 = add %53, %54
%56:i64 = mulnuw %23, %36
%57:i64 = add %55, %56
%58:i64 = mulnuw %33, %50
%59:i64 = add %57, %58
%60:i32 = mul 5:i32, %0
%61:i64 = zext %60
%62:i64 = mulnuw %47, %61
%63:i64 = add %59, %62 (hasExternalUses)
%64:i64 = lshr %63, 26:i64
%65:i64 = and 4294967295:i64, %64
%66:i64 = add %52, %65 (hasExternalUses)
%67:i32 = trunc %66
infer %67 (demandedBits=00000011111111111111111111111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = and 67108863:i32, %3
%5:i32 = add %2, %4
%6:i64 = zext %5 (hasExternalUses)
%7:i64 = mulnuw %1, %6
%8:i32 = var
%9:i64 = zext %8 (hasExternalUses)
%10:i32 = var
%11:i32 = var
%12:i32 = lshr %11, 2:i32
%13:i32 = and 67108863:i32, %12
%14:i32 = add %10, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %9, %15
%17:i64 = add %7, %16
%18:i32 = var
%19:i32 = var
%20:i32 = lshr %19, 4:i32
%21:i32 = and 67108863:i32, %20
%22:i32 = add %18, %21
%23:i64 = zext %22 (hasExternalUses)
%24:i32 = var
%25:i32 = mul 5:i32, %24
%26:i64 = zext %25 (hasExternalUses)
%27:i64 = mulnuw %23, %26
%28:i64 = add %17, %27
%29:i32 = var
%30:i32 = var
%31:i32 = lshr %30, 6:i32
%32:i32 = add %29, %31
%33:i64 = zext %32 (hasExternalUses)
%34:i32 = var
%35:i32 = mul 5:i32, %34
%36:i64 = zext %35 (hasExternalUses)
%37:i64 = mulnuw %33, %36
%38:i64 = add %28, %37
%39:i32 = var
%40:i32 = var
%41:i32 = lshr %40, 8:i32
%42:i8 = var
%43:i1 = eq 0:i8, %42
%44:i32 = select %43, 16777216:i32, 0:i32
%45:i32 = or %41, %44
%46:i32 = add %39, %45
%47:i64 = zext %46 (hasExternalUses)
%48:i32 = var
%49:i32 = mul 5:i32, %48
%50:i64 = zext %49
%51:i64 = mulnuw %47, %50
%52:i64 = add %38, %51
%53:i64 = mulnuw %9, %6
%54:i64 = mulnuw %15, %26
%55:i64 = add %53, %54
%56:i64 = mulnuw %23, %36
%57:i64 = add %55, %56
%58:i64 = mulnuw %33, %50
%59:i64 = add %57, %58
%60:i32 = mul 5:i32, %0
%61:i64 = zext %60
%62:i64 = mulnuw %47, %61
%63:i64 = add %59, %62 (hasExternalUses)
%64:i64 = lshr %63, 26:i64
%65:i64 = and 4294967295:i64, %64
%66:i64 = add %52, %65 (hasExternalUses)
%67:i32 = trunc %66
%68:i32 = and 67108863:i32, %67
infer %68


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = and 67108863:i32, %3
%5:i32 = add %2, %4
%6:i64 = zext %5 (hasExternalUses)
%7:i64 = mulnuw %1, %6
%8:i32 = var
%9:i64 = zext %8 (hasExternalUses)
%10:i32 = var
%11:i32 = var
%12:i32 = lshr %11, 2:i32
%13:i32 = and 67108863:i32, %12
%14:i32 = add %10, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %9, %15
%17:i64 = add %7, %16
%18:i32 = var
%19:i32 = var
%20:i32 = lshr %19, 4:i32
%21:i32 = and 67108863:i32, %20
%22:i32 = add %18, %21
%23:i64 = zext %22 (hasExternalUses)
%24:i32 = var
%25:i32 = mul 5:i32, %24
%26:i64 = zext %25 (hasExternalUses)
%27:i64 = mulnuw %23, %26
%28:i64 = add %17, %27
%29:i32 = var
%30:i32 = var
%31:i32 = lshr %30, 6:i32
%32:i32 = add %29, %31
%33:i64 = zext %32 (hasExternalUses)
%34:i32 = var
%35:i32 = mul 5:i32, %34
%36:i64 = zext %35 (hasExternalUses)
%37:i64 = mulnuw %33, %36
%38:i64 = add %28, %37
%39:i32 = var
%40:i32 = var
%41:i32 = lshr %40, 8:i32
%42:i8 = var
%43:i1 = eq 0:i8, %42
%44:i32 = select %43, 16777216:i32, 0:i32
%45:i32 = or %41, %44
%46:i32 = add %39, %45
%47:i64 = zext %46 (hasExternalUses)
%48:i32 = var
%49:i32 = mul 5:i32, %48
%50:i64 = zext %49
%51:i64 = mulnuw %47, %50
%52:i64 = add %38, %51
%53:i64 = mulnuw %9, %6
%54:i64 = mulnuw %15, %26
%55:i64 = add %53, %54
%56:i64 = mulnuw %23, %36
%57:i64 = add %55, %56
%58:i64 = mulnuw %33, %50
%59:i64 = add %57, %58
%60:i32 = mul 5:i32, %0
%61:i64 = zext %60
%62:i64 = mulnuw %47, %61
%63:i64 = add %59, %62 (hasExternalUses)
%64:i64 = lshr %63, 26:i64
%65:i64 = and 4294967295:i64, %64
%66:i64 = add %52, %65 (hasExternalUses)
%67:i64 = lshr %66, 26:i64
%68:i64 = and 4294967295:i64, %67
infer %68 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
ConstantSynthesis: solver returns error on first query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9 (hasExternalUses)
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24 (hasExternalUses)
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
%28:i32 = var
%29:i32 = var
%30:i32 = lshr %29, 6:i32
%31:i32 = add %28, %30
%32:i64 = zext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = mul 5:i32, %33
%35:i64 = zext %34 (hasExternalUses)
%36:i64 = mulnuw %32, %35
%37:i64 = add %27, %36
%38:i32 = var
%39:i32 = var
%40:i32 = lshr %39, 8:i32
%41:i8 = var
%42:i1 = eq 0:i8, %41
%43:i32 = select %42, 16777216:i32, 0:i32
%44:i32 = or %40, %43
%45:i32 = add %38, %44
%46:i64 = zext %45 (hasExternalUses)
%47:i32 = var
%48:i32 = mul 5:i32, %47
%49:i64 = zext %48
%50:i64 = mulnuw %46, %49
%51:i64 = add %37, %50
%52:i64 = mulnuw %1, %15
%53:i64 = mulnuw %19, %7
%54:i64 = add %52, %53
%55:i64 = mulnuw %25, %35
%56:i64 = add %54, %55
%57:i64 = mulnuw %32, %49
%58:i64 = add %56, %57
%59:i32 = mul 5:i32, %9
%60:i64 = zext %59
%61:i64 = mulnuw %46, %60
%62:i64 = add %58, %61
%63:i64 = mulnuw %19, %15
%64:i64 = mulnuw %7, %35
%65:i64 = add %63, %64
%66:i64 = mulnuw %25, %49
%67:i64 = add %65, %66
%68:i64 = mulnuw %32, %60
%69:i64 = add %67, %68
%70:i32 = mul 5:i32, %0
%71:i64 = zext %70
%72:i64 = mulnuw %46, %71
%73:i64 = add %69, %72 (hasExternalUses)
%74:i64 = lshr %73, 26:i64
%75:i64 = and 4294967295:i64, %74
%76:i64 = add %62, %75 (hasExternalUses)
%77:i64 = lshr %76, 26:i64
%78:i64 = and 4294967295:i64, %77
%79:i64 = add %51, %78
infer %79 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i32 = mul 5:i32, %0
%2:i64 = zext %1

Cost = 2
verification query failed!
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9 (hasExternalUses)
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24 (hasExternalUses)
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
%28:i32 = var
%29:i32 = var
%30:i32 = lshr %29, 6:i32
%31:i32 = add %28, %30
%32:i64 = zext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = mul 5:i32, %33
%35:i64 = zext %34 (hasExternalUses)
%36:i64 = mulnuw %32, %35
%37:i64 = add %27, %36
%38:i32 = var
%39:i32 = var
%40:i32 = lshr %39, 8:i32
%41:i8 = var
%42:i1 = eq 0:i8, %41
%43:i32 = select %42, 16777216:i32, 0:i32
%44:i32 = or %40, %43
%45:i32 = add %38, %44
%46:i64 = zext %45 (hasExternalUses)
%47:i32 = var
%48:i32 = mul 5:i32, %47
%49:i64 = zext %48
%50:i64 = mulnuw %46, %49
%51:i64 = add %37, %50
%52:i64 = mulnuw %1, %15
%53:i64 = mulnuw %19, %7
%54:i64 = add %52, %53
%55:i64 = mulnuw %25, %35
%56:i64 = add %54, %55
%57:i64 = mulnuw %32, %49
%58:i64 = add %56, %57
%59:i32 = mul 5:i32, %9
%60:i64 = zext %59
%61:i64 = mulnuw %46, %60
%62:i64 = add %58, %61
%63:i64 = mulnuw %19, %15
%64:i64 = mulnuw %7, %35
%65:i64 = add %63, %64
%66:i64 = mulnuw %25, %49
%67:i64 = add %65, %66
%68:i64 = mulnuw %32, %60
%69:i64 = add %67, %68
%70:i32 = mul 5:i32, %0
%71:i64 = zext %70
%72:i64 = mulnuw %46, %71
%73:i64 = add %69, %72 (hasExternalUses)
%74:i64 = lshr %73, 26:i64
%75:i64 = and 4294967295:i64, %74
%76:i64 = add %62, %75 (hasExternalUses)
%77:i64 = lshr %76, 26:i64
%78:i64 = and 4294967295:i64, %77
%79:i64 = add %51, %78 (hasExternalUses)
%80:i64 = lshr %79, 26:i64
infer %80 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9 (hasExternalUses)
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24 (hasExternalUses)
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
%28:i32 = var
%29:i32 = var
%30:i32 = lshr %29, 6:i32
%31:i32 = add %28, %30
%32:i64 = zext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = mul 5:i32, %33
%35:i64 = zext %34 (hasExternalUses)
%36:i64 = mulnuw %32, %35
%37:i64 = add %27, %36
%38:i32 = var
%39:i32 = var
%40:i32 = lshr %39, 8:i32
%41:i8 = var
%42:i1 = eq 0:i8, %41
%43:i32 = select %42, 16777216:i32, 0:i32
%44:i32 = or %40, %43
%45:i32 = add %38, %44
%46:i64 = zext %45 (hasExternalUses)
%47:i32 = var
%48:i32 = mul 5:i32, %47
%49:i64 = zext %48
%50:i64 = mulnuw %46, %49
%51:i64 = add %37, %50
%52:i64 = mulnuw %1, %15
%53:i64 = mulnuw %19, %7
%54:i64 = add %52, %53
%55:i64 = mulnuw %25, %35
%56:i64 = add %54, %55
%57:i64 = mulnuw %32, %49
%58:i64 = add %56, %57
%59:i32 = mul 5:i32, %9
%60:i64 = zext %59
%61:i64 = mulnuw %46, %60
%62:i64 = add %58, %61
%63:i64 = mulnuw %19, %15
%64:i64 = mulnuw %7, %35
%65:i64 = add %63, %64
%66:i64 = mulnuw %25, %49
%67:i64 = add %65, %66
%68:i64 = mulnuw %32, %60
%69:i64 = add %67, %68
%70:i32 = mul 5:i32, %0
%71:i64 = zext %70
%72:i64 = mulnuw %46, %71
%73:i64 = add %69, %72 (hasExternalUses)
%74:i64 = lshr %73, 26:i64
%75:i64 = and 4294967295:i64, %74
%76:i64 = add %62, %75 (hasExternalUses)
%77:i64 = lshr %76, 26:i64
%78:i64 = and 4294967295:i64, %77
%79:i64 = add %51, %78 (hasExternalUses)
%80:i32 = trunc %79
infer %80 (demandedBits=00000011111111111111111111111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9 (hasExternalUses)
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24 (hasExternalUses)
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
%28:i32 = var
%29:i32 = var
%30:i32 = lshr %29, 6:i32
%31:i32 = add %28, %30
%32:i64 = zext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = mul 5:i32, %33
%35:i64 = zext %34 (hasExternalUses)
%36:i64 = mulnuw %32, %35
%37:i64 = add %27, %36
%38:i32 = var
%39:i32 = var
%40:i32 = lshr %39, 8:i32
%41:i8 = var
%42:i1 = eq 0:i8, %41
%43:i32 = select %42, 16777216:i32, 0:i32
%44:i32 = or %40, %43
%45:i32 = add %38, %44
%46:i64 = zext %45 (hasExternalUses)
%47:i32 = var
%48:i32 = mul 5:i32, %47
%49:i64 = zext %48
%50:i64 = mulnuw %46, %49
%51:i64 = add %37, %50
%52:i64 = mulnuw %1, %15
%53:i64 = mulnuw %19, %7
%54:i64 = add %52, %53
%55:i64 = mulnuw %25, %35
%56:i64 = add %54, %55
%57:i64 = mulnuw %32, %49
%58:i64 = add %56, %57
%59:i32 = mul 5:i32, %9
%60:i64 = zext %59
%61:i64 = mulnuw %46, %60
%62:i64 = add %58, %61
%63:i64 = mulnuw %19, %15
%64:i64 = mulnuw %7, %35
%65:i64 = add %63, %64
%66:i64 = mulnuw %25, %49
%67:i64 = add %65, %66
%68:i64 = mulnuw %32, %60
%69:i64 = add %67, %68
%70:i32 = mul 5:i32, %0
%71:i64 = zext %70
%72:i64 = mulnuw %46, %71
%73:i64 = add %69, %72 (hasExternalUses)
%74:i64 = lshr %73, 26:i64
%75:i64 = and 4294967295:i64, %74
%76:i64 = add %62, %75 (hasExternalUses)
%77:i64 = lshr %76, 26:i64
%78:i64 = and 4294967295:i64, %77
%79:i64 = add %51, %78 (hasExternalUses)
%80:i32 = trunc %79
%81:i32 = and 67108863:i32, %80
infer %81


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9 (hasExternalUses)
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24 (hasExternalUses)
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
%28:i32 = var
%29:i32 = var
%30:i32 = lshr %29, 6:i32
%31:i32 = add %28, %30
%32:i64 = zext %31 (hasExternalUses)
%33:i32 = var
%34:i32 = mul 5:i32, %33
%35:i64 = zext %34 (hasExternalUses)
%36:i64 = mulnuw %32, %35
%37:i64 = add %27, %36
%38:i32 = var
%39:i32 = var
%40:i32 = lshr %39, 8:i32
%41:i8 = var
%42:i1 = eq 0:i8, %41
%43:i32 = select %42, 16777216:i32, 0:i32
%44:i32 = or %40, %43
%45:i32 = add %38, %44
%46:i64 = zext %45 (hasExternalUses)
%47:i32 = var
%48:i32 = mul 5:i32, %47
%49:i64 = zext %48
%50:i64 = mulnuw %46, %49
%51:i64 = add %37, %50
%52:i64 = mulnuw %1, %15
%53:i64 = mulnuw %19, %7
%54:i64 = add %52, %53
%55:i64 = mulnuw %25, %35
%56:i64 = add %54, %55
%57:i64 = mulnuw %32, %49
%58:i64 = add %56, %57
%59:i32 = mul 5:i32, %9
%60:i64 = zext %59
%61:i64 = mulnuw %46, %60
%62:i64 = add %58, %61
%63:i64 = mulnuw %19, %15
%64:i64 = mulnuw %7, %35
%65:i64 = add %63, %64
%66:i64 = mulnuw %25, %49
%67:i64 = add %65, %66
%68:i64 = mulnuw %32, %60
%69:i64 = add %67, %68
%70:i32 = mul 5:i32, %0
%71:i64 = zext %70
%72:i64 = mulnuw %46, %71
%73:i64 = add %69, %72 (hasExternalUses)
%74:i64 = lshr %73, 26:i64
%75:i64 = and 4294967295:i64, %74
%76:i64 = add %62, %75 (hasExternalUses)
%77:i64 = lshr %76, 26:i64
%78:i64 = and 4294967295:i64, %77
%79:i64 = add %51, %78 (hasExternalUses)
%80:i64 = lshr %79, 26:i64
%81:i64 = and 4294967295:i64, %80
infer %81 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
ConstantSynthesis: solver returns error on first query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9 (hasExternalUses)
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24 (hasExternalUses)
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
%28:i32 = var
%29:i64 = zext %28 (hasExternalUses)
%30:i32 = var
%31:i32 = var
%32:i32 = lshr %31, 6:i32
%33:i32 = add %30, %32
%34:i64 = zext %33 (hasExternalUses)
%35:i64 = mulnuw %29, %34
%36:i64 = add %27, %35
%37:i32 = var
%38:i32 = var
%39:i32 = lshr %38, 8:i32
%40:i8 = var
%41:i1 = eq 0:i8, %40
%42:i32 = select %41, 16777216:i32, 0:i32
%43:i32 = or %39, %42
%44:i32 = add %37, %43
%45:i64 = zext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = mul 5:i32, %46
%48:i64 = zext %47
%49:i64 = mulnuw %45, %48
%50:i64 = add %36, %49
%51:i64 = mulnuw %19, %7
%52:i64 = mulnuw %1, %15
%53:i64 = add %51, %52
%54:i64 = mulnuw %29, %25
%55:i64 = add %53, %54
%56:i64 = mulnuw %34, %48
%57:i64 = add %55, %56
%58:i32 = mul 5:i32, %9
%59:i64 = zext %58
%60:i64 = mulnuw %45, %59
%61:i64 = add %57, %60
%62:i64 = mulnuw %19, %15
%63:i64 = mulnuw %29, %7
%64:i64 = add %62, %63
%65:i64 = mulnuw %25, %48
%66:i64 = add %64, %65
%67:i64 = mulnuw %34, %59
%68:i64 = add %66, %67
%69:i32 = mul 5:i32, %0
%70:i64 = zext %69
%71:i64 = mulnuw %45, %70
%72:i64 = add %68, %71
%73:i64 = mulnuw %29, %15
%74:i64 = mulnuw %7, %48
%75:i64 = add %73, %74
%76:i64 = mulnuw %25, %59
%77:i64 = add %75, %76
%78:i64 = mulnuw %34, %70
%79:i64 = add %77, %78
%80:i32 = mul 5:i32, %18
%81:i64 = zext %80
%82:i64 = mulnuw %45, %81
%83:i64 = add %79, %82 (hasExternalUses)
%84:i64 = lshr %83, 26:i64
%85:i64 = and 4294967295:i64, %84
%86:i64 = add %72, %85 (hasExternalUses)
%87:i64 = lshr %86, 26:i64
%88:i64 = and 4294967295:i64, %87
%89:i64 = add %61, %88 (hasExternalUses)
%90:i64 = lshr %89, 26:i64
%91:i64 = and 4294967295:i64, %90
%92:i64 = add %50, %91
infer %92 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 8:i32
%3:i8 = var
%4:i1 = eq 0:i8, %3
%5:i32 = select %4, 16777216:i32, 0:i32
%6:i32 = or %2, %5
%7:i32 = add %0, %6
%8:i64 = zext %7 (hasExternalUses)
%9:i32 = var
%10:i32 = mul 5:i32, %9
%11:i64 = zext %10 (hasExternalUses)
%12:i64 = mulnuw %8, %11

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9 (hasExternalUses)
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24 (hasExternalUses)
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
%28:i32 = var
%29:i64 = zext %28 (hasExternalUses)
%30:i32 = var
%31:i32 = var
%32:i32 = lshr %31, 6:i32
%33:i32 = add %30, %32
%34:i64 = zext %33 (hasExternalUses)
%35:i64 = mulnuw %29, %34
%36:i64 = add %27, %35
%37:i32 = var
%38:i32 = var
%39:i32 = lshr %38, 8:i32
%40:i8 = var
%41:i1 = eq 0:i8, %40
%42:i32 = select %41, 16777216:i32, 0:i32
%43:i32 = or %39, %42
%44:i32 = add %37, %43
%45:i64 = zext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = mul 5:i32, %46
%48:i64 = zext %47
%49:i64 = mulnuw %45, %48
%50:i64 = add %36, %49
%51:i64 = mulnuw %19, %7
%52:i64 = mulnuw %1, %15
%53:i64 = add %51, %52
%54:i64 = mulnuw %29, %25
%55:i64 = add %53, %54
%56:i64 = mulnuw %34, %48
%57:i64 = add %55, %56
%58:i32 = mul 5:i32, %9
%59:i64 = zext %58
%60:i64 = mulnuw %45, %59
%61:i64 = add %57, %60
%62:i64 = mulnuw %19, %15
%63:i64 = mulnuw %29, %7
%64:i64 = add %62, %63
%65:i64 = mulnuw %25, %48
%66:i64 = add %64, %65
%67:i64 = mulnuw %34, %59
%68:i64 = add %66, %67
%69:i32 = mul 5:i32, %0
%70:i64 = zext %69
%71:i64 = mulnuw %45, %70
%72:i64 = add %68, %71
%73:i64 = mulnuw %29, %15
%74:i64 = mulnuw %7, %48
%75:i64 = add %73, %74
%76:i64 = mulnuw %25, %59
%77:i64 = add %75, %76
%78:i64 = mulnuw %34, %70
%79:i64 = add %77, %78
%80:i32 = mul 5:i32, %18
%81:i64 = zext %80
%82:i64 = mulnuw %45, %81
%83:i64 = add %79, %82 (hasExternalUses)
%84:i64 = lshr %83, 26:i64
%85:i64 = and 4294967295:i64, %84
%86:i64 = add %72, %85 (hasExternalUses)
%87:i64 = lshr %86, 26:i64
%88:i64 = and 4294967295:i64, %87
%89:i64 = add %61, %88 (hasExternalUses)
%90:i64 = lshr %89, 26:i64
%91:i64 = and 4294967295:i64, %90
%92:i64 = add %50, %91 (hasExternalUses)
%93:i64 = lshr %92, 26:i64
infer %93 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9 (hasExternalUses)
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24 (hasExternalUses)
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
%28:i32 = var
%29:i64 = zext %28 (hasExternalUses)
%30:i32 = var
%31:i32 = var
%32:i32 = lshr %31, 6:i32
%33:i32 = add %30, %32
%34:i64 = zext %33 (hasExternalUses)
%35:i64 = mulnuw %29, %34
%36:i64 = add %27, %35
%37:i32 = var
%38:i32 = var
%39:i32 = lshr %38, 8:i32
%40:i8 = var
%41:i1 = eq 0:i8, %40
%42:i32 = select %41, 16777216:i32, 0:i32
%43:i32 = or %39, %42
%44:i32 = add %37, %43
%45:i64 = zext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = mul 5:i32, %46
%48:i64 = zext %47
%49:i64 = mulnuw %45, %48
%50:i64 = add %36, %49
%51:i64 = mulnuw %19, %7
%52:i64 = mulnuw %1, %15
%53:i64 = add %51, %52
%54:i64 = mulnuw %29, %25
%55:i64 = add %53, %54
%56:i64 = mulnuw %34, %48
%57:i64 = add %55, %56
%58:i32 = mul 5:i32, %9
%59:i64 = zext %58
%60:i64 = mulnuw %45, %59
%61:i64 = add %57, %60
%62:i64 = mulnuw %19, %15
%63:i64 = mulnuw %29, %7
%64:i64 = add %62, %63
%65:i64 = mulnuw %25, %48
%66:i64 = add %64, %65
%67:i64 = mulnuw %34, %59
%68:i64 = add %66, %67
%69:i32 = mul 5:i32, %0
%70:i64 = zext %69
%71:i64 = mulnuw %45, %70
%72:i64 = add %68, %71
%73:i64 = mulnuw %29, %15
%74:i64 = mulnuw %7, %48
%75:i64 = add %73, %74
%76:i64 = mulnuw %25, %59
%77:i64 = add %75, %76
%78:i64 = mulnuw %34, %70
%79:i64 = add %77, %78
%80:i32 = mul 5:i32, %18
%81:i64 = zext %80
%82:i64 = mulnuw %45, %81
%83:i64 = add %79, %82 (hasExternalUses)
%84:i64 = lshr %83, 26:i64
%85:i64 = and 4294967295:i64, %84
%86:i64 = add %72, %85 (hasExternalUses)
%87:i64 = lshr %86, 26:i64
%88:i64 = and 4294967295:i64, %87
%89:i64 = add %61, %88 (hasExternalUses)
%90:i64 = lshr %89, 26:i64
%91:i64 = and 4294967295:i64, %90
%92:i64 = add %50, %91 (hasExternalUses)
%93:i32 = trunc %92
infer %93 (demandedBits=00000011111111111111111111111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9 (hasExternalUses)
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24 (hasExternalUses)
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
%28:i32 = var
%29:i64 = zext %28 (hasExternalUses)
%30:i32 = var
%31:i32 = var
%32:i32 = lshr %31, 6:i32
%33:i32 = add %30, %32
%34:i64 = zext %33 (hasExternalUses)
%35:i64 = mulnuw %29, %34
%36:i64 = add %27, %35
%37:i32 = var
%38:i32 = var
%39:i32 = lshr %38, 8:i32
%40:i8 = var
%41:i1 = eq 0:i8, %40
%42:i32 = select %41, 16777216:i32, 0:i32
%43:i32 = or %39, %42
%44:i32 = add %37, %43
%45:i64 = zext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = mul 5:i32, %46
%48:i64 = zext %47
%49:i64 = mulnuw %45, %48
%50:i64 = add %36, %49
%51:i64 = mulnuw %19, %7
%52:i64 = mulnuw %1, %15
%53:i64 = add %51, %52
%54:i64 = mulnuw %29, %25
%55:i64 = add %53, %54
%56:i64 = mulnuw %34, %48
%57:i64 = add %55, %56
%58:i32 = mul 5:i32, %9
%59:i64 = zext %58
%60:i64 = mulnuw %45, %59
%61:i64 = add %57, %60
%62:i64 = mulnuw %19, %15
%63:i64 = mulnuw %29, %7
%64:i64 = add %62, %63
%65:i64 = mulnuw %25, %48
%66:i64 = add %64, %65
%67:i64 = mulnuw %34, %59
%68:i64 = add %66, %67
%69:i32 = mul 5:i32, %0
%70:i64 = zext %69
%71:i64 = mulnuw %45, %70
%72:i64 = add %68, %71
%73:i64 = mulnuw %29, %15
%74:i64 = mulnuw %7, %48
%75:i64 = add %73, %74
%76:i64 = mulnuw %25, %59
%77:i64 = add %75, %76
%78:i64 = mulnuw %34, %70
%79:i64 = add %77, %78
%80:i32 = mul 5:i32, %18
%81:i64 = zext %80
%82:i64 = mulnuw %45, %81
%83:i64 = add %79, %82 (hasExternalUses)
%84:i64 = lshr %83, 26:i64
%85:i64 = and 4294967295:i64, %84
%86:i64 = add %72, %85 (hasExternalUses)
%87:i64 = lshr %86, 26:i64
%88:i64 = and 4294967295:i64, %87
%89:i64 = add %61, %88 (hasExternalUses)
%90:i64 = lshr %89, 26:i64
%91:i64 = and 4294967295:i64, %90
%92:i64 = add %50, %91 (hasExternalUses)
%93:i32 = trunc %92
%94:i32 = and 67108863:i32, %93
infer %94


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6 (hasExternalUses)
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9 (hasExternalUses)
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14 (hasExternalUses)
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24 (hasExternalUses)
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
%28:i32 = var
%29:i64 = zext %28 (hasExternalUses)
%30:i32 = var
%31:i32 = var
%32:i32 = lshr %31, 6:i32
%33:i32 = add %30, %32
%34:i64 = zext %33 (hasExternalUses)
%35:i64 = mulnuw %29, %34
%36:i64 = add %27, %35
%37:i32 = var
%38:i32 = var
%39:i32 = lshr %38, 8:i32
%40:i8 = var
%41:i1 = eq 0:i8, %40
%42:i32 = select %41, 16777216:i32, 0:i32
%43:i32 = or %39, %42
%44:i32 = add %37, %43
%45:i64 = zext %44 (hasExternalUses)
%46:i32 = var
%47:i32 = mul 5:i32, %46
%48:i64 = zext %47
%49:i64 = mulnuw %45, %48
%50:i64 = add %36, %49
%51:i64 = mulnuw %19, %7
%52:i64 = mulnuw %1, %15
%53:i64 = add %51, %52
%54:i64 = mulnuw %29, %25
%55:i64 = add %53, %54
%56:i64 = mulnuw %34, %48
%57:i64 = add %55, %56
%58:i32 = mul 5:i32, %9
%59:i64 = zext %58
%60:i64 = mulnuw %45, %59
%61:i64 = add %57, %60
%62:i64 = mulnuw %19, %15
%63:i64 = mulnuw %29, %7
%64:i64 = add %62, %63
%65:i64 = mulnuw %25, %48
%66:i64 = add %64, %65
%67:i64 = mulnuw %34, %59
%68:i64 = add %66, %67
%69:i32 = mul 5:i32, %0
%70:i64 = zext %69
%71:i64 = mulnuw %45, %70
%72:i64 = add %68, %71
%73:i64 = mulnuw %29, %15
%74:i64 = mulnuw %7, %48
%75:i64 = add %73, %74
%76:i64 = mulnuw %25, %59
%77:i64 = add %75, %76
%78:i64 = mulnuw %34, %70
%79:i64 = add %77, %78
%80:i32 = mul 5:i32, %18
%81:i64 = zext %80
%82:i64 = mulnuw %45, %81
%83:i64 = add %79, %82 (hasExternalUses)
%84:i64 = lshr %83, 26:i64
%85:i64 = and 4294967295:i64, %84
%86:i64 = add %72, %85 (hasExternalUses)
%87:i64 = lshr %86, 26:i64
%88:i64 = and 4294967295:i64, %87
%89:i64 = add %61, %88 (hasExternalUses)
%90:i64 = lshr %89, 26:i64
%91:i64 = and 4294967295:i64, %90
%92:i64 = add %50, %91 (hasExternalUses)
%93:i64 = lshr %92, 26:i64
%94:i64 = and 4294967295:i64, %93
infer %94 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
ConstantSynthesis: solver returns error on first query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
%28:i32 = var
%29:i64 = zext %28
%30:i32 = var
%31:i32 = var
%32:i32 = lshr %31, 6:i32
%33:i32 = add %30, %32
%34:i64 = zext %33
%35:i64 = mulnuw %29, %34
%36:i64 = add %27, %35
%37:i32 = var
%38:i64 = zext %37
%39:i32 = var
%40:i32 = var
%41:i32 = lshr %40, 8:i32
%42:i8 = var
%43:i1 = eq 0:i8, %42
%44:i32 = select %43, 16777216:i32, 0:i32
%45:i32 = or %41, %44
%46:i32 = add %39, %45
%47:i64 = zext %46
%48:i64 = mulnuw %38, %47
%49:i64 = add %36, %48
%50:i64 = mulnuw %19, %7
%51:i64 = mulnuw %1, %15
%52:i64 = add %50, %51
%53:i64 = mulnuw %29, %25
%54:i64 = add %52, %53
%55:i64 = mulnuw %38, %34
%56:i64 = add %54, %55
%57:i32 = mul 5:i32, %9
%58:i64 = zext %57
%59:i64 = mulnuw %47, %58
%60:i64 = add %56, %59
%61:i64 = mulnuw %29, %7
%62:i64 = mulnuw %19, %15
%63:i64 = add %61, %62
%64:i64 = mulnuw %38, %25
%65:i64 = add %63, %64
%66:i64 = mulnuw %34, %58
%67:i64 = add %65, %66
%68:i32 = mul 5:i32, %0
%69:i64 = zext %68
%70:i64 = mulnuw %47, %69
%71:i64 = add %67, %70
%72:i64 = mulnuw %29, %15
%73:i64 = mulnuw %38, %7
%74:i64 = add %72, %73
%75:i64 = mulnuw %25, %58
%76:i64 = add %74, %75
%77:i64 = mulnuw %34, %69
%78:i64 = add %76, %77
%79:i32 = mul 5:i32, %18
%80:i64 = zext %79
%81:i64 = mulnuw %47, %80
%82:i64 = add %78, %81
%83:i64 = mulnuw %38, %15
%84:i64 = mulnuw %7, %58
%85:i64 = add %83, %84
%86:i64 = mulnuw %25, %69
%87:i64 = add %85, %86
%88:i64 = mulnuw %34, %80
%89:i64 = add %87, %88
%90:i32 = mul 5:i32, %28
%91:i64 = zext %90
%92:i64 = mulnuw %47, %91
%93:i64 = add %89, %92 (hasExternalUses)
%94:i64 = lshr %93, 26:i64
%95:i64 = and 4294967295:i64, %94
%96:i64 = add %82, %95 (hasExternalUses)
%97:i64 = lshr %96, 26:i64
%98:i64 = and 4294967295:i64, %97
%99:i64 = add %71, %98 (hasExternalUses)
%100:i64 = lshr %99, 26:i64
%101:i64 = and 4294967295:i64, %100
%102:i64 = add %60, %101 (hasExternalUses)
%103:i64 = lshr %102, 26:i64
%104:i64 = and 4294967295:i64, %103
%105:i64 = add %49, %104
infer %105 (demandedBits=0000001111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = zext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 6 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
%28:i32 = var
%29:i64 = zext %28
%30:i32 = var
%31:i32 = var
%32:i32 = lshr %31, 6:i32
%33:i32 = add %30, %32
%34:i64 = zext %33
%35:i64 = mulnuw %29, %34
%36:i64 = add %27, %35
%37:i32 = var
%38:i64 = zext %37
%39:i32 = var
%40:i32 = var
%41:i32 = lshr %40, 8:i32
%42:i8 = var
%43:i1 = eq 0:i8, %42
%44:i32 = select %43, 16777216:i32, 0:i32
%45:i32 = or %41, %44
%46:i32 = add %39, %45
%47:i64 = zext %46
%48:i64 = mulnuw %38, %47
%49:i64 = add %36, %48
%50:i64 = mulnuw %19, %7
%51:i64 = mulnuw %1, %15
%52:i64 = add %50, %51
%53:i64 = mulnuw %29, %25
%54:i64 = add %52, %53
%55:i64 = mulnuw %38, %34
%56:i64 = add %54, %55
%57:i32 = mul 5:i32, %9
%58:i64 = zext %57
%59:i64 = mulnuw %47, %58
%60:i64 = add %56, %59
%61:i64 = mulnuw %29, %7
%62:i64 = mulnuw %19, %15
%63:i64 = add %61, %62
%64:i64 = mulnuw %38, %25
%65:i64 = add %63, %64
%66:i64 = mulnuw %34, %58
%67:i64 = add %65, %66
%68:i32 = mul 5:i32, %0
%69:i64 = zext %68
%70:i64 = mulnuw %47, %69
%71:i64 = add %67, %70
%72:i64 = mulnuw %29, %15
%73:i64 = mulnuw %38, %7
%74:i64 = add %72, %73
%75:i64 = mulnuw %25, %58
%76:i64 = add %74, %75
%77:i64 = mulnuw %34, %69
%78:i64 = add %76, %77
%79:i32 = mul 5:i32, %18
%80:i64 = zext %79
%81:i64 = mulnuw %47, %80
%82:i64 = add %78, %81
%83:i64 = mulnuw %38, %15
%84:i64 = mulnuw %7, %58
%85:i64 = add %83, %84
%86:i64 = mulnuw %25, %69
%87:i64 = add %85, %86
%88:i64 = mulnuw %34, %80
%89:i64 = add %87, %88
%90:i32 = mul 5:i32, %28
%91:i64 = zext %90
%92:i64 = mulnuw %47, %91
%93:i64 = add %89, %92 (hasExternalUses)
%94:i64 = lshr %93, 26:i64
%95:i64 = and 4294967295:i64, %94
%96:i64 = add %82, %95 (hasExternalUses)
%97:i64 = lshr %96, 26:i64
%98:i64 = and 4294967295:i64, %97
%99:i64 = add %71, %98 (hasExternalUses)
%100:i64 = lshr %99, 26:i64
%101:i64 = and 4294967295:i64, %100
%102:i64 = add %60, %101 (hasExternalUses)
%103:i64 = lshr %102, 26:i64
%104:i64 = and 4294967295:i64, %103
%105:i64 = add %49, %104 (hasExternalUses)
%106:i64 = lshr %105, 26:i64
infer %106 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
%28:i32 = var
%29:i64 = zext %28
%30:i32 = var
%31:i32 = var
%32:i32 = lshr %31, 6:i32
%33:i32 = add %30, %32
%34:i64 = zext %33
%35:i64 = mulnuw %29, %34
%36:i64 = add %27, %35
%37:i32 = var
%38:i64 = zext %37
%39:i32 = var
%40:i32 = var
%41:i32 = lshr %40, 8:i32
%42:i8 = var
%43:i1 = eq 0:i8, %42
%44:i32 = select %43, 16777216:i32, 0:i32
%45:i32 = or %41, %44
%46:i32 = add %39, %45
%47:i64 = zext %46
%48:i64 = mulnuw %38, %47
%49:i64 = add %36, %48
%50:i64 = mulnuw %19, %7
%51:i64 = mulnuw %1, %15
%52:i64 = add %50, %51
%53:i64 = mulnuw %29, %25
%54:i64 = add %52, %53
%55:i64 = mulnuw %38, %34
%56:i64 = add %54, %55
%57:i32 = mul 5:i32, %9
%58:i64 = zext %57
%59:i64 = mulnuw %47, %58
%60:i64 = add %56, %59
%61:i64 = mulnuw %29, %7
%62:i64 = mulnuw %19, %15
%63:i64 = add %61, %62
%64:i64 = mulnuw %38, %25
%65:i64 = add %63, %64
%66:i64 = mulnuw %34, %58
%67:i64 = add %65, %66
%68:i32 = mul 5:i32, %0
%69:i64 = zext %68
%70:i64 = mulnuw %47, %69
%71:i64 = add %67, %70
%72:i64 = mulnuw %29, %15
%73:i64 = mulnuw %38, %7
%74:i64 = add %72, %73
%75:i64 = mulnuw %25, %58
%76:i64 = add %74, %75
%77:i64 = mulnuw %34, %69
%78:i64 = add %76, %77
%79:i32 = mul 5:i32, %18
%80:i64 = zext %79
%81:i64 = mulnuw %47, %80
%82:i64 = add %78, %81
%83:i64 = mulnuw %38, %15
%84:i64 = mulnuw %7, %58
%85:i64 = add %83, %84
%86:i64 = mulnuw %25, %69
%87:i64 = add %85, %86
%88:i64 = mulnuw %34, %80
%89:i64 = add %87, %88
%90:i32 = mul 5:i32, %28
%91:i64 = zext %90
%92:i64 = mulnuw %47, %91
%93:i64 = add %89, %92 (hasExternalUses)
%94:i64 = lshr %93, 26:i64
%95:i64 = and 4294967295:i64, %94
%96:i64 = add %82, %95 (hasExternalUses)
%97:i64 = lshr %96, 26:i64
%98:i64 = and 4294967295:i64, %97
%99:i64 = add %71, %98 (hasExternalUses)
%100:i64 = lshr %99, 26:i64
%101:i64 = and 4294967295:i64, %100
%102:i64 = add %60, %101 (hasExternalUses)
%103:i64 = lshr %102, 26:i64
%104:i64 = and 4294967295:i64, %103
%105:i64 = add %49, %104 (hasExternalUses)
%106:i64 = lshr %105, 26:i64
%107:i32 = trunc %106
infer %107


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
%28:i32 = var
%29:i64 = zext %28
%30:i32 = var
%31:i32 = var
%32:i32 = lshr %31, 6:i32
%33:i32 = add %30, %32
%34:i64 = zext %33
%35:i64 = mulnuw %29, %34
%36:i64 = add %27, %35
%37:i32 = var
%38:i64 = zext %37
%39:i32 = var
%40:i32 = var
%41:i32 = lshr %40, 8:i32
%42:i8 = var
%43:i1 = eq 0:i8, %42
%44:i32 = select %43, 16777216:i32, 0:i32
%45:i32 = or %41, %44
%46:i32 = add %39, %45
%47:i64 = zext %46
%48:i64 = mulnuw %38, %47
%49:i64 = add %36, %48
%50:i64 = mulnuw %19, %7
%51:i64 = mulnuw %1, %15
%52:i64 = add %50, %51
%53:i64 = mulnuw %29, %25
%54:i64 = add %52, %53
%55:i64 = mulnuw %38, %34
%56:i64 = add %54, %55
%57:i32 = mul 5:i32, %9
%58:i64 = zext %57
%59:i64 = mulnuw %47, %58
%60:i64 = add %56, %59
%61:i64 = mulnuw %29, %7
%62:i64 = mulnuw %19, %15
%63:i64 = add %61, %62
%64:i64 = mulnuw %38, %25
%65:i64 = add %63, %64
%66:i64 = mulnuw %34, %58
%67:i64 = add %65, %66
%68:i32 = mul 5:i32, %0
%69:i64 = zext %68
%70:i64 = mulnuw %47, %69
%71:i64 = add %67, %70
%72:i64 = mulnuw %29, %15
%73:i64 = mulnuw %38, %7
%74:i64 = add %72, %73
%75:i64 = mulnuw %25, %58
%76:i64 = add %74, %75
%77:i64 = mulnuw %34, %69
%78:i64 = add %76, %77
%79:i32 = mul 5:i32, %18
%80:i64 = zext %79
%81:i64 = mulnuw %47, %80
%82:i64 = add %78, %81
%83:i64 = mulnuw %38, %15
%84:i64 = mulnuw %7, %58
%85:i64 = add %83, %84
%86:i64 = mulnuw %25, %69
%87:i64 = add %85, %86
%88:i64 = mulnuw %34, %80
%89:i64 = add %87, %88
%90:i32 = mul 5:i32, %28
%91:i64 = zext %90
%92:i64 = mulnuw %47, %91
%93:i64 = add %89, %92 (hasExternalUses)
%94:i64 = lshr %93, 26:i64
%95:i64 = and 4294967295:i64, %94
%96:i64 = add %82, %95 (hasExternalUses)
%97:i64 = lshr %96, 26:i64
%98:i64 = and 4294967295:i64, %97
%99:i64 = add %71, %98 (hasExternalUses)
%100:i64 = lshr %99, 26:i64
%101:i64 = and 4294967295:i64, %100
%102:i64 = add %60, %101 (hasExternalUses)
%103:i64 = lshr %102, 26:i64
%104:i64 = and 4294967295:i64, %103
%105:i64 = add %49, %104 (hasExternalUses)
%106:i32 = trunc %105
infer %106 (demandedBits=00000011111111111111111111111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
%28:i32 = var
%29:i64 = zext %28
%30:i32 = var
%31:i32 = var
%32:i32 = lshr %31, 6:i32
%33:i32 = add %30, %32
%34:i64 = zext %33
%35:i64 = mulnuw %29, %34
%36:i64 = add %27, %35
%37:i32 = var
%38:i64 = zext %37
%39:i32 = var
%40:i32 = var
%41:i32 = lshr %40, 8:i32
%42:i8 = var
%43:i1 = eq 0:i8, %42
%44:i32 = select %43, 16777216:i32, 0:i32
%45:i32 = or %41, %44
%46:i32 = add %39, %45
%47:i64 = zext %46
%48:i64 = mulnuw %38, %47
%49:i64 = add %36, %48
%50:i64 = mulnuw %19, %7
%51:i64 = mulnuw %1, %15
%52:i64 = add %50, %51
%53:i64 = mulnuw %29, %25
%54:i64 = add %52, %53
%55:i64 = mulnuw %38, %34
%56:i64 = add %54, %55
%57:i32 = mul 5:i32, %9
%58:i64 = zext %57
%59:i64 = mulnuw %47, %58
%60:i64 = add %56, %59
%61:i64 = mulnuw %29, %7
%62:i64 = mulnuw %19, %15
%63:i64 = add %61, %62
%64:i64 = mulnuw %38, %25
%65:i64 = add %63, %64
%66:i64 = mulnuw %34, %58
%67:i64 = add %65, %66
%68:i32 = mul 5:i32, %0
%69:i64 = zext %68
%70:i64 = mulnuw %47, %69
%71:i64 = add %67, %70
%72:i64 = mulnuw %29, %15
%73:i64 = mulnuw %38, %7
%74:i64 = add %72, %73
%75:i64 = mulnuw %25, %58
%76:i64 = add %74, %75
%77:i64 = mulnuw %34, %69
%78:i64 = add %76, %77
%79:i32 = mul 5:i32, %18
%80:i64 = zext %79
%81:i64 = mulnuw %47, %80
%82:i64 = add %78, %81
%83:i64 = mulnuw %38, %15
%84:i64 = mulnuw %7, %58
%85:i64 = add %83, %84
%86:i64 = mulnuw %25, %69
%87:i64 = add %85, %86
%88:i64 = mulnuw %34, %80
%89:i64 = add %87, %88
%90:i32 = mul 5:i32, %28
%91:i64 = zext %90
%92:i64 = mulnuw %47, %91
%93:i64 = add %89, %92 (hasExternalUses)
%94:i64 = lshr %93, 26:i64
%95:i64 = and 4294967295:i64, %94
%96:i64 = add %82, %95 (hasExternalUses)
%97:i64 = lshr %96, 26:i64
%98:i64 = and 4294967295:i64, %97
%99:i64 = add %71, %98 (hasExternalUses)
%100:i64 = lshr %99, 26:i64
%101:i64 = and 4294967295:i64, %100
%102:i64 = add %60, %101 (hasExternalUses)
%103:i64 = lshr %102, 26:i64
%104:i64 = and 4294967295:i64, %103
%105:i64 = add %49, %104 (hasExternalUses)
%106:i32 = trunc %105
%107:i32 = and 67108863:i32, %106
infer %107


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
%28:i32 = var
%29:i64 = zext %28
%30:i32 = var
%31:i32 = var
%32:i32 = lshr %31, 6:i32
%33:i32 = add %30, %32
%34:i64 = zext %33
%35:i64 = mulnuw %29, %34
%36:i64 = add %27, %35
%37:i32 = var
%38:i64 = zext %37
%39:i32 = var
%40:i32 = var
%41:i32 = lshr %40, 8:i32
%42:i8 = var
%43:i1 = eq 0:i8, %42
%44:i32 = select %43, 16777216:i32, 0:i32
%45:i32 = or %41, %44
%46:i32 = add %39, %45
%47:i64 = zext %46
%48:i64 = mulnuw %38, %47
%49:i64 = add %36, %48
%50:i64 = mulnuw %19, %7
%51:i64 = mulnuw %1, %15
%52:i64 = add %50, %51
%53:i64 = mulnuw %29, %25
%54:i64 = add %52, %53
%55:i64 = mulnuw %38, %34
%56:i64 = add %54, %55
%57:i32 = mul 5:i32, %9
%58:i64 = zext %57
%59:i64 = mulnuw %47, %58
%60:i64 = add %56, %59
%61:i64 = mulnuw %29, %7
%62:i64 = mulnuw %19, %15
%63:i64 = add %61, %62
%64:i64 = mulnuw %38, %25
%65:i64 = add %63, %64
%66:i64 = mulnuw %34, %58
%67:i64 = add %65, %66
%68:i32 = mul 5:i32, %0
%69:i64 = zext %68
%70:i64 = mulnuw %47, %69
%71:i64 = add %67, %70
%72:i64 = mulnuw %29, %15
%73:i64 = mulnuw %38, %7
%74:i64 = add %72, %73
%75:i64 = mulnuw %25, %58
%76:i64 = add %74, %75
%77:i64 = mulnuw %34, %69
%78:i64 = add %76, %77
%79:i32 = mul 5:i32, %18
%80:i64 = zext %79
%81:i64 = mulnuw %47, %80
%82:i64 = add %78, %81
%83:i64 = mulnuw %38, %15
%84:i64 = mulnuw %7, %58
%85:i64 = add %83, %84
%86:i64 = mulnuw %25, %69
%87:i64 = add %85, %86
%88:i64 = mulnuw %34, %80
%89:i64 = add %87, %88
%90:i32 = mul 5:i32, %28
%91:i64 = zext %90
%92:i64 = mulnuw %47, %91
%93:i64 = add %89, %92 (hasExternalUses)
%94:i64 = lshr %93, 26:i64
%95:i64 = and 4294967295:i64, %94
%96:i64 = add %82, %95 (hasExternalUses)
%97:i64 = lshr %96, 26:i64
%98:i64 = and 4294967295:i64, %97
%99:i64 = add %71, %98 (hasExternalUses)
%100:i64 = lshr %99, 26:i64
%101:i64 = and 4294967295:i64, %100
%102:i64 = add %60, %101 (hasExternalUses)
%103:i64 = lshr %102, 26:i64
%104:i64 = and 4294967295:i64, %103
%105:i64 = add %49, %104 (hasExternalUses)
%106:i64 = lshr %105, 26:i64
%107:i32 = trunc %106
%108:i32 = mul 5:i32, %107
infer %108


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
%28:i32 = var
%29:i64 = zext %28
%30:i32 = var
%31:i32 = var
%32:i32 = lshr %31, 6:i32
%33:i32 = add %30, %32
%34:i64 = zext %33
%35:i64 = mulnuw %29, %34
%36:i64 = add %27, %35
%37:i32 = var
%38:i64 = zext %37
%39:i32 = var
%40:i32 = var
%41:i32 = lshr %40, 8:i32
%42:i8 = var
%43:i1 = eq 0:i8, %42
%44:i32 = select %43, 16777216:i32, 0:i32
%45:i32 = or %41, %44
%46:i32 = add %39, %45
%47:i64 = zext %46
%48:i64 = mulnuw %38, %47
%49:i64 = add %36, %48
%50:i64 = mulnuw %19, %7
%51:i64 = mulnuw %1, %15
%52:i64 = add %50, %51
%53:i64 = mulnuw %29, %25
%54:i64 = add %52, %53
%55:i64 = mulnuw %38, %34
%56:i64 = add %54, %55
%57:i32 = mul 5:i32, %9
%58:i64 = zext %57
%59:i64 = mulnuw %47, %58
%60:i64 = add %56, %59
%61:i64 = mulnuw %29, %7
%62:i64 = mulnuw %19, %15
%63:i64 = add %61, %62
%64:i64 = mulnuw %38, %25
%65:i64 = add %63, %64
%66:i64 = mulnuw %34, %58
%67:i64 = add %65, %66
%68:i32 = mul 5:i32, %0
%69:i64 = zext %68
%70:i64 = mulnuw %47, %69
%71:i64 = add %67, %70
%72:i64 = mulnuw %29, %15
%73:i64 = mulnuw %38, %7
%74:i64 = add %72, %73
%75:i64 = mulnuw %25, %58
%76:i64 = add %74, %75
%77:i64 = mulnuw %34, %69
%78:i64 = add %76, %77
%79:i32 = mul 5:i32, %18
%80:i64 = zext %79
%81:i64 = mulnuw %47, %80
%82:i64 = add %78, %81
%83:i64 = mulnuw %38, %15
%84:i64 = mulnuw %7, %58
%85:i64 = add %83, %84
%86:i64 = mulnuw %25, %69
%87:i64 = add %85, %86
%88:i64 = mulnuw %34, %80
%89:i64 = add %87, %88
%90:i32 = mul 5:i32, %28
%91:i64 = zext %90
%92:i64 = mulnuw %47, %91
%93:i64 = add %89, %92
%94:i64 = lshr %93, 26:i64
%95:i64 = and 4294967295:i64, %94
%96:i64 = add %82, %95 (hasExternalUses)
%97:i64 = lshr %96, 26:i64
%98:i64 = and 4294967295:i64, %97
%99:i64 = add %71, %98 (hasExternalUses)
%100:i64 = lshr %99, 26:i64
%101:i64 = and 4294967295:i64, %100
%102:i64 = add %60, %101 (hasExternalUses)
%103:i64 = lshr %102, 26:i64
%104:i64 = and 4294967295:i64, %103
%105:i64 = add %49, %104 (hasExternalUses)
%106:i64 = lshr %105, 26:i64
%107:i32 = trunc %106
%108:i32 = mul 5:i32, %107
%109:i32 = trunc %93
%110:i32 = and 67108863:i32, %109
%111:i32 = add %108, %110
infer %111


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = and 67108863:i32, %3
%5:i32 = add %2, %4
%6:i64 = zext %5 (hasExternalUses)
%7:i64 = mulnuw %1, %6
%8:i32 = var
%9:i32 = var
%10:i32 = lshr %9, 2:i32
%11:i32 = and 67108863:i32, %10
%12:i32 = add %8, %11
%13:i64 = zext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = mul 5:i32, %14
%16:i64 = zext %15 (hasExternalUses)
%17:i64 = mulnuw %13, %16
%18:i64 = add %7, %17
%19:i32 = var
%20:i32 = var
%21:i32 = lshr %20, 4:i32
%22:i32 = and 67108863:i32, %21
%23:i32 = add %19, %22
%24:i64 = zext %23 (hasExternalUses)
%25:i32 = var
%26:i32 = mul 5:i32, %25
%27:i64 = zext %26 (hasExternalUses)
%28:i64 = mulnuw %24, %27
%29:i64 = add %18, %28
%30:i32 = var
%31:i32 = var
%32:i32 = lshr %31, 6:i32
%33:i32 = add %30, %32
%34:i64 = zext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = mul 5:i32, %35
%37:i64 = zext %36 (hasExternalUses)
%38:i64 = mulnuw %34, %37
%39:i64 = add %29, %38
%40:i32 = var
%41:i32 = var
%42:i32 = lshr %41, 8:i32
%43:i8 = var
%44:i1 = eq 0:i8, %43
%45:i32 = select %44, 16777216:i32, 0:i32
%46:i32 = or %42, %45
%47:i32 = add %40, %46
%48:i64 = zext %47 (hasExternalUses)
%49:i32 = var
%50:i32 = mul 5:i32, %49
%51:i64 = zext %50
%52:i64 = mulnuw %48, %51
%53:i64 = add %39, %52 (hasExternalUses)
%54:i32 = trunc %53

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
%28:i32 = var
%29:i64 = zext %28
%30:i32 = var
%31:i32 = var
%32:i32 = lshr %31, 6:i32
%33:i32 = add %30, %32
%34:i64 = zext %33
%35:i64 = mulnuw %29, %34
%36:i64 = add %27, %35
%37:i32 = var
%38:i64 = zext %37
%39:i32 = var
%40:i32 = var
%41:i32 = lshr %40, 8:i32
%42:i8 = var
%43:i1 = eq 0:i8, %42
%44:i32 = select %43, 16777216:i32, 0:i32
%45:i32 = or %41, %44
%46:i32 = add %39, %45
%47:i64 = zext %46
%48:i64 = mulnuw %38, %47
%49:i64 = add %36, %48
%50:i64 = mulnuw %19, %7
%51:i64 = mulnuw %1, %15
%52:i64 = add %50, %51
%53:i64 = mulnuw %29, %25
%54:i64 = add %52, %53
%55:i64 = mulnuw %38, %34
%56:i64 = add %54, %55
%57:i32 = mul 5:i32, %9
%58:i64 = zext %57
%59:i64 = mulnuw %47, %58
%60:i64 = add %56, %59
%61:i64 = mulnuw %29, %7
%62:i64 = mulnuw %19, %15
%63:i64 = add %61, %62
%64:i64 = mulnuw %38, %25
%65:i64 = add %63, %64
%66:i64 = mulnuw %34, %58
%67:i64 = add %65, %66
%68:i32 = mul 5:i32, %0
%69:i64 = zext %68
%70:i64 = mulnuw %47, %69
%71:i64 = add %67, %70
%72:i64 = mulnuw %29, %15
%73:i64 = mulnuw %38, %7
%74:i64 = add %72, %73
%75:i64 = mulnuw %25, %58
%76:i64 = add %74, %75
%77:i64 = mulnuw %34, %69
%78:i64 = add %76, %77
%79:i32 = mul 5:i32, %18
%80:i64 = zext %79
%81:i64 = mulnuw %47, %80
%82:i64 = add %78, %81
%83:i64 = mulnuw %38, %15
%84:i64 = mulnuw %7, %58
%85:i64 = add %83, %84
%86:i64 = mulnuw %25, %69
%87:i64 = add %85, %86
%88:i64 = mulnuw %34, %80
%89:i64 = add %87, %88
%90:i32 = mul 5:i32, %28
%91:i64 = zext %90
%92:i64 = mulnuw %47, %91
%93:i64 = add %89, %92
%94:i64 = lshr %93, 26:i64
%95:i64 = and 4294967295:i64, %94
%96:i64 = add %82, %95 (hasExternalUses)
%97:i64 = lshr %96, 26:i64
%98:i64 = and 4294967295:i64, %97
%99:i64 = add %71, %98 (hasExternalUses)
%100:i64 = lshr %99, 26:i64
%101:i64 = and 4294967295:i64, %100
%102:i64 = add %60, %101 (hasExternalUses)
%103:i64 = lshr %102, 26:i64
%104:i64 = and 4294967295:i64, %103
%105:i64 = add %49, %104 (hasExternalUses)
%106:i64 = lshr %105, 26:i64
%107:i32 = trunc %106
%108:i32 = mul 5:i32, %107
%109:i32 = trunc %93
%110:i32 = and 67108863:i32, %109
%111:i32 = add %108, %110 (hasExternalUses)
%112:i32 = lshr %111, 26:i32
infer %112


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = lshr %3, 2:i32
%5:i32 = and 67108863:i32, %4
%6:i32 = add %2, %5
%7:i64 = zext %6
%8:i64 = mulnuw %1, %7
%9:i32 = var
%10:i64 = zext %9
%11:i32 = var
%12:i32 = var
%13:i32 = and 67108863:i32, %12
%14:i32 = add %11, %13
%15:i64 = zext %14
%16:i64 = mulnuw %10, %15
%17:i64 = add %8, %16
%18:i32 = var
%19:i64 = zext %18
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24
%26:i64 = mulnuw %19, %25
%27:i64 = add %17, %26
%28:i32 = var
%29:i64 = zext %28
%30:i32 = var
%31:i32 = var
%32:i32 = lshr %31, 6:i32
%33:i32 = add %30, %32
%34:i64 = zext %33
%35:i64 = mulnuw %29, %34
%36:i64 = add %27, %35
%37:i32 = var
%38:i64 = zext %37
%39:i32 = var
%40:i32 = var
%41:i32 = lshr %40, 8:i32
%42:i8 = var
%43:i1 = eq 0:i8, %42
%44:i32 = select %43, 16777216:i32, 0:i32
%45:i32 = or %41, %44
%46:i32 = add %39, %45
%47:i64 = zext %46
%48:i64 = mulnuw %38, %47
%49:i64 = add %36, %48
%50:i64 = mulnuw %19, %7
%51:i64 = mulnuw %1, %15
%52:i64 = add %50, %51
%53:i64 = mulnuw %29, %25
%54:i64 = add %52, %53
%55:i64 = mulnuw %38, %34
%56:i64 = add %54, %55
%57:i32 = mul 5:i32, %9
%58:i64 = zext %57
%59:i64 = mulnuw %47, %58
%60:i64 = add %56, %59
%61:i64 = mulnuw %29, %7
%62:i64 = mulnuw %19, %15
%63:i64 = add %61, %62
%64:i64 = mulnuw %38, %25
%65:i64 = add %63, %64
%66:i64 = mulnuw %34, %58
%67:i64 = add %65, %66
%68:i32 = mul 5:i32, %0
%69:i64 = zext %68
%70:i64 = mulnuw %47, %69
%71:i64 = add %67, %70
%72:i64 = mulnuw %29, %15
%73:i64 = mulnuw %38, %7
%74:i64 = add %72, %73
%75:i64 = mulnuw %25, %58
%76:i64 = add %74, %75
%77:i64 = mulnuw %34, %69
%78:i64 = add %76, %77
%79:i32 = mul 5:i32, %18
%80:i64 = zext %79
%81:i64 = mulnuw %47, %80
%82:i64 = add %78, %81
%83:i64 = mulnuw %38, %15
%84:i64 = mulnuw %7, %58
%85:i64 = add %83, %84
%86:i64 = mulnuw %25, %69
%87:i64 = add %85, %86
%88:i64 = mulnuw %34, %80
%89:i64 = add %87, %88
%90:i32 = mul 5:i32, %28
%91:i64 = zext %90
%92:i64 = mulnuw %47, %91
%93:i64 = add %89, %92
%94:i64 = lshr %93, 26:i64
%95:i64 = and 4294967295:i64, %94
%96:i64 = add %82, %95 (hasExternalUses)
%97:i64 = lshr %96, 26:i64
%98:i64 = and 4294967295:i64, %97
%99:i64 = add %71, %98 (hasExternalUses)
%100:i64 = lshr %99, 26:i64
%101:i64 = and 4294967295:i64, %100
%102:i64 = add %60, %101 (hasExternalUses)
%103:i64 = lshr %102, 26:i64
%104:i64 = and 4294967295:i64, %103
%105:i64 = add %49, %104 (hasExternalUses)
%106:i64 = lshr %105, 26:i64
%107:i32 = trunc %106
%108:i32 = mul 5:i32, %107
%109:i32 = trunc %93
%110:i32 = and 67108863:i32, %109
%111:i32 = add %108, %110 (hasExternalUses)
%112:i32 = and 67108863:i32, %111
infer %112


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i32 = var
%4:i32 = and 67108863:i32, %3
%5:i32 = add %2, %4
%6:i64 = zext %5
%7:i64 = mulnuw %1, %6
%8:i32 = var
%9:i64 = zext %8
%10:i32 = var
%11:i32 = var
%12:i32 = lshr %11, 2:i32
%13:i32 = and 67108863:i32, %12
%14:i32 = add %10, %13
%15:i64 = zext %14
%16:i64 = mulnuw %9, %15
%17:i64 = add %7, %16
%18:i32 = var
%19:i32 = var
%20:i32 = lshr %19, 4:i32
%21:i32 = and 67108863:i32, %20
%22:i32 = add %18, %21
%23:i64 = zext %22
%24:i32 = var
%25:i32 = mul 5:i32, %24
%26:i64 = zext %25
%27:i64 = mulnuw %23, %26
%28:i64 = add %17, %27
%29:i32 = var
%30:i32 = var
%31:i32 = lshr %30, 6:i32
%32:i32 = add %29, %31
%33:i64 = zext %32
%34:i32 = var
%35:i32 = mul 5:i32, %34
%36:i64 = zext %35
%37:i64 = mulnuw %33, %36
%38:i64 = add %28, %37
%39:i32 = var
%40:i32 = var
%41:i32 = lshr %40, 8:i32
%42:i8 = var
%43:i1 = eq 0:i8, %42
%44:i32 = select %43, 16777216:i32, 0:i32
%45:i32 = or %41, %44
%46:i32 = add %39, %45
%47:i64 = zext %46
%48:i32 = var
%49:i32 = mul 5:i32, %48
%50:i64 = zext %49
%51:i64 = mulnuw %47, %50
%52:i64 = add %38, %51
%53:i64 = mulnuw %9, %6
%54:i64 = mulnuw %15, %26
%55:i64 = add %53, %54
%56:i64 = mulnuw %23, %36
%57:i64 = add %55, %56
%58:i64 = mulnuw %33, %50
%59:i64 = add %57, %58
%60:i32 = mul 5:i32, %0
%61:i64 = zext %60
%62:i64 = mulnuw %47, %61
%63:i64 = add %59, %62
%64:i64 = lshr %63, 26:i64
%65:i64 = and 4294967295:i64, %64
%66:i64 = add %52, %65
%67:i32 = trunc %66
%68:i32 = and 67108863:i32, %67
%69:i64 = zext %34
%70:i64 = mulnuw %69, %15
%71:i64 = zext %24
%72:i64 = mulnuw %71, %6
%73:i64 = add %70, %72
%74:i64 = zext %48
%75:i64 = mulnuw %74, %23
%76:i64 = add %73, %75
%77:i64 = mulnuw %1, %33
%78:i64 = add %76, %77
%79:i64 = mulnuw %9, %47
%80:i64 = add %78, %79
%81:i64 = mulnuw %74, %15
%82:i64 = mulnuw %69, %6
%83:i64 = add %81, %82
%84:i64 = mulnuw %1, %23
%85:i64 = add %83, %84
%86:i64 = mulnuw %9, %33
%87:i64 = add %85, %86
%88:i64 = mulnuw %47, %26
%89:i64 = add %87, %88
%90:i64 = mulnuw %1, %15
%91:i64 = mulnuw %74, %6
%92:i64 = add %90, %91
%93:i64 = mulnuw %9, %23
%94:i64 = add %92, %93
%95:i64 = mulnuw %33, %26
%96:i64 = add %94, %95
%97:i64 = mulnuw %47, %36
%98:i64 = add %96, %97
%99:i64 = lshr %66, 26:i64
%100:i64 = and 4294967295:i64, %99
%101:i64 = add %98, %100 (hasExternalUses)
%102:i64 = lshr %101, 26:i64
%103:i64 = and 4294967295:i64, %102
%104:i64 = add %89, %103 (hasExternalUses)
%105:i64 = lshr %104, 26:i64
%106:i64 = and 4294967295:i64, %105
%107:i64 = add %80, %106 (hasExternalUses)
%108:i64 = lshr %107, 26:i64
%109:i32 = trunc %108
%110:i32 = mul 5:i32, %109
%111:i32 = trunc %63
%112:i32 = and 67108863:i32, %111
%113:i32 = add %110, %112 (hasExternalUses)
%114:i32 = lshr %113, 26:i32
%115:i32 = addnw %68, %114
infer %115


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = zext %0 (hasExternalUses)
%2:i32 = var
%3:i32 = var
%4:i32 = and 67108863:i32, %3
%5:i32 = add %2, %4
%6:i64 = zext %5 (hasExternalUses)
%7:i64 = mulnuw %1, %6
%8:i32 = var
%9:i32 = var
%10:i32 = lshr %9, 2:i32
%11:i32 = and 67108863:i32, %10
%12:i32 = add %8, %11
%13:i64 = zext %12 (hasExternalUses)
%14:i32 = var
%15:i32 = mul 5:i32, %14
%16:i64 = zext %15 (hasExternalUses)
%17:i64 = mulnuw %13, %16
%18:i64 = add %7, %17
%19:i32 = var
%20:i32 = var
%21:i32 = lshr %20, 4:i32
%22:i32 = and 67108863:i32, %21
%23:i32 = add %19, %22
%24:i64 = zext %23 (hasExternalUses)
%25:i32 = var
%26:i32 = mul 5:i32, %25
%27:i64 = zext %26 (hasExternalUses)
%28:i64 = mulnuw %24, %27
%29:i64 = add %18, %28
%30:i32 = var
%31:i32 = var
%32:i32 = lshr %31, 6:i32
%33:i32 = add %30, %32
%34:i64 = zext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = mul 5:i32, %35
%37:i64 = zext %36 (hasExternalUses)
%38:i64 = mulnuw %34, %37
%39:i64 = add %29, %38
%40:i32 = var
%41:i32 = var
%42:i32 = lshr %41, 8:i32
%43:i8 = var
%44:i1 = eq 0:i8, %43
%45:i32 = select %44, 16777216:i32, 0:i32
%46:i32 = or %42, %45
%47:i32 = add %40, %46
%48:i64 = zext %47 (hasExternalUses)
%49:i32 = var
%50:i32 = mul 5:i32, %49
%51:i64 = zext %50
%52:i64 = mulnuw %48, %51
%53:i64 = add %39, %52 (hasExternalUses)
%54:i32 = trunc %53
%55:i32 = and 67108863:i32, %54

Cost = 2
verification query failed!
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var (range=[16,0))
%1:i64 = add 18446744073709551600:i64, %0
infer %1


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 9223372036854775792
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var (range=[16,0))

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i64 = var (range=[16,0))
%1:i64 = add 18446744073709551600:i64, %0 (hasExternalUses)
%2:i1 = ult 15:i64, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i64 = zext %2
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %5, 2:i32
%7:i32 = and 67108863:i32, %6
%8:i32 = add %4, %7
%9:i64 = zext %8
%10:i64 = mulnuw %3, %9
%11:i32 = var
%12:i64 = zext %11
%13:i32 = var
%14:i32 = var
%15:i32 = and 67108863:i32, %14
%16:i32 = add %13, %15
%17:i64 = zext %16
%18:i64 = mulnuw %12, %17
%19:i64 = add %10, %18
%20:i32 = var
%21:i64 = zext %20
%22:i32 = var
%23:i32 = var
%24:i32 = lshr %23, 4:i32
%25:i32 = and 67108863:i32, %24
%26:i32 = add %22, %25
%27:i64 = zext %26
%28:i64 = mulnuw %21, %27
%29:i64 = add %19, %28
%30:i32 = var
%31:i64 = zext %30
%32:i32 = var
%33:i32 = var
%34:i32 = lshr %33, 6:i32
%35:i32 = add %32, %34
%36:i64 = zext %35
%37:i64 = mulnuw %31, %36
%38:i64 = add %29, %37
%39:i32 = var
%40:i64 = zext %39
%41:i32 = var
%42:i32 = var
%43:i32 = lshr %42, 8:i32
%44:i8 = var
%45:i1 = eq 0:i8, %44
%46:i32 = select %45, 16777216:i32, 0:i32
%47:i32 = or %43, %46
%48:i32 = add %41, %47
%49:i64 = zext %48
%50:i64 = mulnuw %40, %49
%51:i64 = add %38, %50
%52:i64 = mulnuw %21, %9
%53:i64 = mulnuw %3, %17
%54:i64 = add %52, %53
%55:i64 = mulnuw %31, %27
%56:i64 = add %54, %55
%57:i64 = mulnuw %40, %36
%58:i64 = add %56, %57
%59:i32 = mul 5:i32, %11
%60:i64 = zext %59
%61:i64 = mulnuw %49, %60
%62:i64 = add %58, %61
%63:i64 = mulnuw %31, %9
%64:i64 = mulnuw %21, %17
%65:i64 = add %63, %64
%66:i64 = mulnuw %40, %27
%67:i64 = add %65, %66
%68:i64 = mulnuw %36, %60
%69:i64 = add %67, %68
%70:i32 = mul 5:i32, %2
%71:i64 = zext %70
%72:i64 = mulnuw %49, %71
%73:i64 = add %69, %72
%74:i64 = mulnuw %31, %17
%75:i64 = mulnuw %40, %9
%76:i64 = add %74, %75
%77:i64 = mulnuw %27, %60
%78:i64 = add %76, %77
%79:i64 = mulnuw %36, %71
%80:i64 = add %78, %79
%81:i32 = mul 5:i32, %20
%82:i64 = zext %81
%83:i64 = mulnuw %49, %82
%84:i64 = add %80, %83
%85:i64 = mulnuw %40, %17
%86:i64 = mulnuw %9, %60
%87:i64 = add %85, %86
%88:i64 = mulnuw %27, %71
%89:i64 = add %87, %88
%90:i64 = mulnuw %36, %82
%91:i64 = add %89, %90
%92:i32 = mul 5:i32, %30
%93:i64 = zext %92
%94:i64 = mulnuw %49, %93
%95:i64 = add %91, %94 (hasExternalUses)
%96:i64 = lshr %95, 26:i64
%97:i64 = and 4294967295:i64, %96
%98:i64 = add %84, %97 (hasExternalUses)
%99:i64 = lshr %98, 26:i64
%100:i64 = and 4294967295:i64, %99
%101:i64 = add %73, %100 (hasExternalUses)
%102:i64 = lshr %101, 26:i64
%103:i64 = and 4294967295:i64, %102
%104:i64 = add %62, %103 (hasExternalUses)
%105:i64 = lshr %104, 26:i64
%106:i64 = and 4294967295:i64, %105
%107:i64 = add %51, %106 (hasExternalUses)
%108:i32 = trunc %107
%109:i32 = and 67108863:i32, %108 (hasExternalUses)
%110:i32 = phi %0, %1, %109
infer %110


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i64 = zext %2 (hasExternalUses)
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %5, 2:i32
%7:i32 = and 67108863:i32, %6
%8:i32 = add %4, %7
%9:i64 = zext %8 (hasExternalUses)
%10:i64 = mulnuw %3, %9
%11:i32 = var
%12:i64 = zext %11 (hasExternalUses)
%13:i32 = var
%14:i32 = var
%15:i32 = and 67108863:i32, %14
%16:i32 = add %13, %15
%17:i64 = zext %16 (hasExternalUses)
%18:i64 = mulnuw %12, %17
%19:i64 = add %10, %18
%20:i32 = var
%21:i64 = zext %20 (hasExternalUses)
%22:i32 = var
%23:i32 = var
%24:i32 = lshr %23, 4:i32
%25:i32 = and 67108863:i32, %24
%26:i32 = add %22, %25
%27:i64 = zext %26 (hasExternalUses)
%28:i64 = mulnuw %21, %27
%29:i64 = add %19, %28
%30:i32 = var
%31:i64 = zext %30 (hasExternalUses)
%32:i32 = var
%33:i32 = var
%34:i32 = lshr %33, 6:i32
%35:i32 = add %32, %34
%36:i64 = zext %35 (hasExternalUses)
%37:i64 = mulnuw %31, %36
%38:i64 = add %29, %37
%39:i32 = var
%40:i32 = var
%41:i32 = lshr %40, 8:i32
%42:i8 = var
%43:i1 = eq 0:i8, %42
%44:i32 = select %43, 16777216:i32, 0:i32
%45:i32 = or %41, %44
%46:i32 = add %39, %45
%47:i64 = zext %46 (hasExternalUses)
%48:i32 = var
%49:i32 = mul 5:i32, %48
%50:i64 = zext %49
%51:i64 = mulnuw %47, %50
%52:i64 = add %38, %51
%53:i64 = mulnuw %21, %9
%54:i64 = mulnuw %3, %17
%55:i64 = add %53, %54
%56:i64 = mulnuw %31, %27
%57:i64 = add %55, %56
%58:i64 = mulnuw %36, %50
%59:i64 = add %57, %58
%60:i32 = mul 5:i32, %11
%61:i64 = zext %60
%62:i64 = mulnuw %47, %61
%63:i64 = add %59, %62
%64:i64 = mulnuw %21, %17
%65:i64 = mulnuw %31, %9
%66:i64 = add %64, %65
%67:i64 = mulnuw %27, %50
%68:i64 = add %66, %67
%69:i64 = mulnuw %36, %61
%70:i64 = add %68, %69
%71:i32 = mul 5:i32, %2
%72:i64 = zext %71
%73:i64 = mulnuw %47, %72
%74:i64 = add %70, %73
%75:i64 = mulnuw %31, %17
%76:i64 = mulnuw %9, %50
%77:i64 = add %75, %76
%78:i64 = mulnuw %27, %61
%79:i64 = add %77, %78
%80:i64 = mulnuw %36, %72
%81:i64 = add %79, %80
%82:i32 = mul 5:i32, %20
%83:i64 = zext %82
%84:i64 = mulnuw %47, %83
%85:i64 = add %81, %84 (hasExternalUses)
%86:i64 = lshr %85, 26:i64
%87:i64 = and 4294967295:i64, %86
%88:i64 = add %74, %87 (hasExternalUses)
%89:i64 = lshr %88, 26:i64
%90:i64 = and 4294967295:i64, %89
%91:i64 = add %63, %90 (hasExternalUses)
%92:i64 = lshr %91, 26:i64
%93:i64 = and 4294967295:i64, %92
%94:i64 = add %52, %93 (hasExternalUses)
%95:i32 = trunc %94
%96:i32 = and 67108863:i32, %95 (hasExternalUses)
%97:i32 = phi %0, %1, %96
infer %97


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i64 = zext %2 (hasExternalUses)
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %5, 2:i32
%7:i32 = and 67108863:i32, %6
%8:i32 = add %4, %7
%9:i64 = zext %8 (hasExternalUses)
%10:i64 = mulnuw %3, %9
%11:i32 = var
%12:i64 = zext %11 (hasExternalUses)
%13:i32 = var
%14:i32 = var
%15:i32 = and 67108863:i32, %14
%16:i32 = add %13, %15
%17:i64 = zext %16 (hasExternalUses)
%18:i64 = mulnuw %12, %17
%19:i64 = add %10, %18
%20:i32 = var
%21:i64 = zext %20 (hasExternalUses)
%22:i32 = var
%23:i32 = var
%24:i32 = lshr %23, 4:i32
%25:i32 = and 67108863:i32, %24
%26:i32 = add %22, %25
%27:i64 = zext %26 (hasExternalUses)
%28:i64 = mulnuw %21, %27
%29:i64 = add %19, %28
%30:i32 = var
%31:i32 = var
%32:i32 = lshr %31, 6:i32
%33:i32 = add %30, %32
%34:i64 = zext %33 (hasExternalUses)
%35:i32 = var
%36:i32 = mul 5:i32, %35
%37:i64 = zext %36 (hasExternalUses)
%38:i64 = mulnuw %34, %37
%39:i64 = add %29, %38
%40:i32 = var
%41:i32 = var
%42:i32 = lshr %41, 8:i32
%43:i8 = var
%44:i1 = eq 0:i8, %43
%45:i32 = select %44, 16777216:i32, 0:i32
%46:i32 = or %42, %45
%47:i32 = add %40, %46
%48:i64 = zext %47 (hasExternalUses)
%49:i32 = var
%50:i32 = mul 5:i32, %49
%51:i64 = zext %50
%52:i64 = mulnuw %48, %51
%53:i64 = add %39, %52
%54:i64 = mulnuw %3, %17
%55:i64 = mulnuw %21, %9
%56:i64 = add %54, %55
%57:i64 = mulnuw %27, %37
%58:i64 = add %56, %57
%59:i64 = mulnuw %34, %51
%60:i64 = add %58, %59
%61:i32 = mul 5:i32, %11
%62:i64 = zext %61
%63:i64 = mulnuw %48, %62
%64:i64 = add %60, %63
%65:i64 = mulnuw %21, %17
%66:i64 = mulnuw %9, %37
%67:i64 = add %65, %66
%68:i64 = mulnuw %27, %51
%69:i64 = add %67, %68
%70:i64 = mulnuw %34, %62
%71:i64 = add %69, %70
%72:i32 = mul 5:i32, %2
%73:i64 = zext %72
%74:i64 = mulnuw %48, %73
%75:i64 = add %71, %74 (hasExternalUses)
%76:i64 = lshr %75, 26:i64
%77:i64 = and 4294967295:i64, %76
%78:i64 = add %64, %77 (hasExternalUses)
%79:i64 = lshr %78, 26:i64
%80:i64 = and 4294967295:i64, %79
%81:i64 = add %53, %80 (hasExternalUses)
%82:i32 = trunc %81
%83:i32 = and 67108863:i32, %82 (hasExternalUses)
%84:i32 = phi %0, %1, %83
infer %84


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i64 = zext %2
%4:i32 = var
%5:i32 = var
%6:i32 = and 67108863:i32, %5
%7:i32 = add %4, %6
%8:i64 = zext %7
%9:i64 = mulnuw %3, %8
%10:i32 = var
%11:i64 = zext %10
%12:i32 = var
%13:i32 = var
%14:i32 = lshr %13, 2:i32
%15:i32 = and 67108863:i32, %14
%16:i32 = add %12, %15
%17:i64 = zext %16
%18:i64 = mulnuw %11, %17
%19:i64 = add %9, %18
%20:i32 = var
%21:i32 = var
%22:i32 = lshr %21, 4:i32
%23:i32 = and 67108863:i32, %22
%24:i32 = add %20, %23
%25:i64 = zext %24
%26:i32 = var
%27:i32 = mul 5:i32, %26
%28:i64 = zext %27
%29:i64 = mulnuw %25, %28
%30:i64 = add %19, %29
%31:i32 = var
%32:i32 = var
%33:i32 = lshr %32, 6:i32
%34:i32 = add %31, %33
%35:i64 = zext %34
%36:i32 = var
%37:i32 = mul 5:i32, %36
%38:i64 = zext %37
%39:i64 = mulnuw %35, %38
%40:i64 = add %30, %39
%41:i32 = var
%42:i32 = var
%43:i32 = lshr %42, 8:i32
%44:i8 = var
%45:i1 = eq 0:i8, %44
%46:i32 = select %45, 16777216:i32, 0:i32
%47:i32 = or %43, %46
%48:i32 = add %41, %47
%49:i64 = zext %48
%50:i32 = var
%51:i32 = mul 5:i32, %50
%52:i64 = zext %51
%53:i64 = mulnuw %49, %52
%54:i64 = add %40, %53
%55:i64 = mulnuw %11, %8
%56:i64 = mulnuw %17, %28
%57:i64 = add %55, %56
%58:i64 = mulnuw %25, %38
%59:i64 = add %57, %58
%60:i64 = mulnuw %35, %52
%61:i64 = add %59, %60
%62:i32 = mul 5:i32, %2
%63:i64 = zext %62
%64:i64 = mulnuw %49, %63
%65:i64 = add %61, %64
%66:i64 = lshr %65, 26:i64
%67:i64 = and 4294967295:i64, %66
%68:i64 = add %54, %67
%69:i32 = trunc %68
%70:i32 = and 67108863:i32, %69
%71:i64 = zext %36
%72:i64 = mulnuw %71, %17
%73:i64 = zext %26
%74:i64 = mulnuw %73, %8
%75:i64 = add %72, %74
%76:i64 = zext %50
%77:i64 = mulnuw %76, %25
%78:i64 = add %75, %77
%79:i64 = mulnuw %3, %35
%80:i64 = add %78, %79
%81:i64 = mulnuw %11, %49
%82:i64 = add %80, %81
%83:i64 = mulnuw %76, %17
%84:i64 = mulnuw %71, %8
%85:i64 = add %83, %84
%86:i64 = mulnuw %3, %25
%87:i64 = add %85, %86
%88:i64 = mulnuw %11, %35
%89:i64 = add %87, %88
%90:i64 = mulnuw %49, %28
%91:i64 = add %89, %90
%92:i64 = mulnuw %3, %17
%93:i64 = mulnuw %76, %8
%94:i64 = add %92, %93
%95:i64 = mulnuw %11, %25
%96:i64 = add %94, %95
%97:i64 = mulnuw %35, %28
%98:i64 = add %96, %97
%99:i64 = mulnuw %49, %38
%100:i64 = add %98, %99
%101:i64 = lshr %68, 26:i64
%102:i64 = and 4294967295:i64, %101
%103:i64 = add %100, %102 (hasExternalUses)
%104:i64 = lshr %103, 26:i64
%105:i64 = and 4294967295:i64, %104
%106:i64 = add %91, %105 (hasExternalUses)
%107:i64 = lshr %106, 26:i64
%108:i64 = and 4294967295:i64, %107
%109:i64 = add %82, %108 (hasExternalUses)
%110:i64 = lshr %109, 26:i64
%111:i32 = trunc %110
%112:i32 = mul 5:i32, %111
%113:i32 = trunc %65
%114:i32 = and 67108863:i32, %113
%115:i32 = add %112, %114 (hasExternalUses)
%116:i32 = lshr %115, 26:i32
%117:i32 = addnw %70, %116 (hasExternalUses)
%118:i32 = phi %0, %1, %117
infer %118


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i64 = zext %2
%4:i32 = var
%5:i32 = var
%6:i32 = lshr %5, 2:i32
%7:i32 = and 67108863:i32, %6
%8:i32 = add %4, %7
%9:i64 = zext %8
%10:i64 = mulnuw %3, %9
%11:i32 = var
%12:i64 = zext %11
%13:i32 = var
%14:i32 = var
%15:i32 = and 67108863:i32, %14
%16:i32 = add %13, %15
%17:i64 = zext %16
%18:i64 = mulnuw %12, %17
%19:i64 = add %10, %18
%20:i32 = var
%21:i64 = zext %20
%22:i32 = var
%23:i32 = var
%24:i32 = lshr %23, 4:i32
%25:i32 = and 67108863:i32, %24
%26:i32 = add %22, %25
%27:i64 = zext %26
%28:i64 = mulnuw %21, %27
%29:i64 = add %19, %28
%30:i32 = var
%31:i64 = zext %30
%32:i32 = var
%33:i32 = var
%34:i32 = lshr %33, 6:i32
%35:i32 = add %32, %34
%36:i64 = zext %35
%37:i64 = mulnuw %31, %36
%38:i64 = add %29, %37
%39:i32 = var
%40:i64 = zext %39
%41:i32 = var
%42:i32 = var
%43:i32 = lshr %42, 8:i32
%44:i8 = var
%45:i1 = eq 0:i8, %44
%46:i32 = select %45, 16777216:i32, 0:i32
%47:i32 = or %43, %46
%48:i32 = add %41, %47
%49:i64 = zext %48
%50:i64 = mulnuw %40, %49
%51:i64 = add %38, %50
%52:i64 = mulnuw %21, %9
%53:i64 = mulnuw %3, %17
%54:i64 = add %52, %53
%55:i64 = mulnuw %31, %27
%56:i64 = add %54, %55
%57:i64 = mulnuw %40, %36
%58:i64 = add %56, %57
%59:i32 = mul 5:i32, %11
%60:i64 = zext %59
%61:i64 = mulnuw %49, %60
%62:i64 = add %58, %61
%63:i64 = mulnuw %31, %9
%64:i64 = mulnuw %21, %17
%65:i64 = add %63, %64
%66:i64 = mulnuw %40, %27
%67:i64 = add %65, %66
%68:i64 = mulnuw %36, %60
%69:i64 = add %67, %68
%70:i32 = mul 5:i32, %2
%71:i64 = zext %70
%72:i64 = mulnuw %49, %71
%73:i64 = add %69, %72
%74:i64 = mulnuw %31, %17
%75:i64 = mulnuw %40, %9
%76:i64 = add %74, %75
%77:i64 = mulnuw %27, %60
%78:i64 = add %76, %77
%79:i64 = mulnuw %36, %71
%80:i64 = add %78, %79
%81:i32 = mul 5:i32, %20
%82:i64 = zext %81
%83:i64 = mulnuw %49, %82
%84:i64 = add %80, %83
%85:i64 = mulnuw %40, %17
%86:i64 = mulnuw %9, %60
%87:i64 = add %85, %86
%88:i64 = mulnuw %27, %71
%89:i64 = add %87, %88
%90:i64 = mulnuw %36, %82
%91:i64 = add %89, %90
%92:i32 = mul 5:i32, %30
%93:i64 = zext %92
%94:i64 = mulnuw %49, %93
%95:i64 = add %91, %94
%96:i64 = lshr %95, 26:i64
%97:i64 = and 4294967295:i64, %96
%98:i64 = add %84, %97 (hasExternalUses)
%99:i64 = lshr %98, 26:i64
%100:i64 = and 4294967295:i64, %99
%101:i64 = add %73, %100 (hasExternalUses)
%102:i64 = lshr %101, 26:i64
%103:i64 = and 4294967295:i64, %102
%104:i64 = add %62, %103 (hasExternalUses)
%105:i64 = lshr %104, 26:i64
%106:i64 = and 4294967295:i64, %105
%107:i64 = add %51, %106 (hasExternalUses)
%108:i64 = lshr %107, 26:i64
%109:i32 = trunc %108
%110:i32 = mul 5:i32, %109
%111:i32 = trunc %95
%112:i32 = and 67108863:i32, %111
%113:i32 = add %110, %112 (hasExternalUses)
%114:i32 = and 67108863:i32, %113 (hasExternalUses)
%115:i32 = phi %0, %1, %114
infer %115


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for ./poly1305_donna.c.bc:poly1305_blocks()
Total of 3 replacements done on this module
Total of 3 replacements candidates on this module
