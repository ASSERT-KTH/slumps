; entering Souper's runOnFunction() for crypto_core_ed25519_is_valid_point()

; ModuleID = './core_ed25519.c.bc'
source_filename = "crypto_core/ed25519/core_ed25519.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.ge25519_p3 = type { [10 x i32], [10 x i32], [10 x i32], [10 x i32] }
%struct.ge25519_p1p1 = type { [10 x i32], [10 x i32], [10 x i32], [10 x i32] }
%struct.ge25519_cached = type { [10 x i32], [10 x i32], [10 x i32], [10 x i32] }

@L = internal unnamed_addr constant [32 x i8] c"\ED\D3\F5\\\1Ac\12X\D6\9C\F7\A2\DE\F9\DE\14\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\10", align 16

; Function Attrs: nounwind
define i32 @crypto_core_ed25519_is_valid_point(i8* nonnull %0) local_unnamed_addr #0 {
  %2 = alloca %struct.ge25519_p3, align 4
  %3 = bitcast %struct.ge25519_p3* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %3) #5
  %4 = tail call i32 @ge25519_is_canonical(i8* nonnull %0) #5
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %19, label %6

6:                                                ; preds = %1
  %7 = tail call i32 @ge25519_has_small_order(i8* nonnull %0) #5
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %19

9:                                                ; preds = %6
  %10 = call i32 @ge25519_frombytes(%struct.ge25519_p3* nonnull %2, i8* nonnull %0) #5
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %19

12:                                               ; preds = %9
  %13 = call i32 @ge25519_is_on_curve(%struct.ge25519_p3* nonnull %2) #5
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %19, label %15

15:                                               ; preds = %12
  %16 = call i32 @ge25519_is_on_main_subgroup(%struct.ge25519_p3* nonnull %2) #5
  %17 = icmp ne i32 %16, 0
  %18 = zext i1 %17 to i32
  br label %19

19:                                               ; preds = %15, %1, %12, %6, %9
  %20 = phi i32 [ 0, %9 ], [ 0, %6 ], [ 0, %12 ], [ 0, %1 ], [ %18, %15 ]
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %3) #5
  ret i32 %20
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #1

declare i32 @ge25519_is_canonical(i8* %0) local_unnamed_addr #2

declare i32 @ge25519_has_small_order(i8* %0) local_unnamed_addr #2

declare i32 @ge25519_frombytes(%struct.ge25519_p3* %0, i8* %1) local_unnamed_addr #2

declare i32 @ge25519_is_on_curve(%struct.ge25519_p3* %0) local_unnamed_addr #2

declare i32 @ge25519_is_on_main_subgroup(%struct.ge25519_p3* %0) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #1

; Function Attrs: nounwind
define i32 @crypto_core_ed25519_add(i8* nonnull %0, i8* nonnull %1, i8* nonnull %2) local_unnamed_addr #0 {
  %4 = alloca %struct.ge25519_p3, align 4
  %5 = alloca %struct.ge25519_p3, align 4
  %6 = alloca %struct.ge25519_p3, align 4
  %7 = alloca %struct.ge25519_p1p1, align 4
  %8 = alloca %struct.ge25519_cached, align 4
  %9 = bitcast %struct.ge25519_p3* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %9) #5
  %10 = bitcast %struct.ge25519_p3* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %10) #5
  %11 = bitcast %struct.ge25519_p3* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %11) #5
  %12 = bitcast %struct.ge25519_p1p1* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %12) #5
  %13 = bitcast %struct.ge25519_cached* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %13) #5
  %14 = call i32 @ge25519_frombytes(%struct.ge25519_p3* nonnull %4, i8* nonnull %1) #5
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %26

16:                                               ; preds = %3
  %17 = call i32 @ge25519_is_on_curve(%struct.ge25519_p3* nonnull %4) #5
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %26, label %19

19:                                               ; preds = %16
  %20 = call i32 @ge25519_frombytes(%struct.ge25519_p3* nonnull %5, i8* nonnull %2) #5
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %26

22:                                               ; preds = %19
  %23 = call i32 @ge25519_is_on_curve(%struct.ge25519_p3* nonnull %5) #5
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %26, label %25

25:                                               ; preds = %22
  call void @ge25519_p3_to_cached(%struct.ge25519_cached* nonnull %8, %struct.ge25519_p3* nonnull %5) #5
  call void @ge25519_add(%struct.ge25519_p1p1* nonnull %7, %struct.ge25519_p3* nonnull %4, %struct.ge25519_cached* nonnull %8) #5
  call void @ge25519_p1p1_to_p3(%struct.ge25519_p3* nonnull %6, %struct.ge25519_p1p1* nonnull %7) #5
  call void @ge25519_p3_tobytes(i8* nonnull %0, %struct.ge25519_p3* nonnull %6) #5
  br label %26

26:                                               ; preds = %16, %22, %3, %19, %25
  %27 = phi i32 [ 0, %25 ], [ -1, %19 ], [ -1, %3 ], [ -1, %22 ], [ -1, %16 ]
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %13) #5
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %9) #5
  ret i32 %27
}

declare void @ge25519_p3_to_cached(%struct.ge25519_cached* %0, %struct.ge25519_p3* %1) local_unnamed_addr #2

declare void @ge25519_add(%struct.ge25519_p1p1* %0, %struct.ge25519_p3* %1, %struct.ge25519_cached* %2) local_unnamed_addr #2

declare void @ge25519_p1p1_to_p3(%struct.ge25519_p3* %0, %struct.ge25519_p1p1* %1) local_unnamed_addr #2

declare void @ge25519_p3_tobytes(i8* %0, %struct.ge25519_p3* %1) local_unnamed_addr #2

; Function Attrs: nounwind
define i32 @crypto_core_ed25519_sub(i8* nonnull %0, i8* nonnull %1, i8* nonnull %2) local_unnamed_addr #0 {
  %4 = alloca %struct.ge25519_p3, align 4
  %5 = alloca %struct.ge25519_p3, align 4
  %6 = alloca %struct.ge25519_p3, align 4
  %7 = alloca %struct.ge25519_p1p1, align 4
  %8 = alloca %struct.ge25519_cached, align 4
  %9 = bitcast %struct.ge25519_p3* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %9) #5
  %10 = bitcast %struct.ge25519_p3* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %10) #5
  %11 = bitcast %struct.ge25519_p3* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %11) #5
  %12 = bitcast %struct.ge25519_p1p1* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %12) #5
  %13 = bitcast %struct.ge25519_cached* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %13) #5
  %14 = call i32 @ge25519_frombytes(%struct.ge25519_p3* nonnull %4, i8* nonnull %1) #5
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %26

16:                                               ; preds = %3
  %17 = call i32 @ge25519_is_on_curve(%struct.ge25519_p3* nonnull %4) #5
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %26, label %19

19:                                               ; preds = %16
  %20 = call i32 @ge25519_frombytes(%struct.ge25519_p3* nonnull %5, i8* nonnull %2) #5
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %26

22:                                               ; preds = %19
  %23 = call i32 @ge25519_is_on_curve(%struct.ge25519_p3* nonnull %5) #5
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %26, label %25

25:                                               ; preds = %22
  call void @ge25519_p3_to_cached(%struct.ge25519_cached* nonnull %8, %struct.ge25519_p3* nonnull %5) #5
  call void @ge25519_sub(%struct.ge25519_p1p1* nonnull %7, %struct.ge25519_p3* nonnull %4, %struct.ge25519_cached* nonnull %8) #5
  call void @ge25519_p1p1_to_p3(%struct.ge25519_p3* nonnull %6, %struct.ge25519_p1p1* nonnull %7) #5
  call void @ge25519_p3_tobytes(i8* nonnull %0, %struct.ge25519_p3* nonnull %6) #5
  br label %26

26:                                               ; preds = %16, %22, %3, %19, %25
  %27 = phi i32 [ 0, %25 ], [ -1, %19 ], [ -1, %3 ], [ -1, %22 ], [ -1, %16 ]
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %13) #5
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %9) #5
  ret i32 %27
}

declare void @ge25519_sub(%struct.ge25519_p1p1* %0, %struct.ge25519_p3* %1, %struct.ge25519_cached* %2) local_unnamed_addr #2

; Function Attrs: nounwind
define i32 @crypto_core_ed25519_from_uniform(i8* nonnull %0, i8* nonnull %1) local_unnamed_addr #0 {
  tail call void @ge25519_from_uniform(i8* nonnull %0, i8* nonnull %1) #5
  ret i32 0
}

declare void @ge25519_from_uniform(i8* %0, i8* %1) local_unnamed_addr #2

; Function Attrs: nounwind
define i32 @crypto_core_ed25519_from_hash(i8* nonnull %0, i8* nonnull %1) local_unnamed_addr #0 {
  tail call void @ge25519_from_hash(i8* nonnull %0, i8* nonnull %1) #5
  ret i32 0
}

declare void @ge25519_from_hash(i8* %0, i8* %1) local_unnamed_addr #2

; Function Attrs: nounwind
define void @crypto_core_ed25519_random(i8* nonnull %0) local_unnamed_addr #0 {
  %2 = alloca [32 x i8], align 16
  %3 = getelementptr inbounds [32 x i8], [32 x i8]* %2, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %3) #5
  call void @randombytes_buf(i8* nonnull %3, i32 32) #5
  call void @ge25519_from_uniform(i8* nonnull %0, i8* nonnull %3) #5
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %3) #5
  ret void
}

declare void @randombytes_buf(i8* %0, i32 %1) local_unnamed_addr #2

; Function Attrs: nounwind
define void @crypto_core_ed25519_scalar_random(i8* nonnull %0) local_unnamed_addr #0 {
  %2 = getelementptr i8, i8* %0, i32 31
  br label %3

3:                                                ; preds = %8, %1
  tail call void @randombytes_buf(i8* nonnull %0, i32 32) #5
  %4 = load i8, i8* %2, align 1
  %5 = and i8 %4, 31
  store i8 %5, i8* %2, align 1
  %6 = tail call i32 @sc25519_is_canonical(i8* nonnull %0) #5
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %9

8:                                                ; preds = %3, %9
  br label %3

9:                                                ; preds = %3
  %10 = tail call i32 @sodium_is_zero(i8* nonnull %0, i32 32) #5
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %8

12:                                               ; preds = %9
  ret void
}

declare i32 @sc25519_is_canonical(i8* %0) local_unnamed_addr #2

declare i32 @sodium_is_zero(i8* %0, i32 %1) local_unnamed_addr #2

; Function Attrs: nounwind
define i32 @crypto_core_ed25519_scalar_invert(i8* nonnull %0, i8* nonnull %1) local_unnamed_addr #0 {
  tail call void @sc25519_invert(i8* nonnull %0, i8* nonnull %1) #5
  %3 = tail call i32 @sodium_is_zero(i8* nonnull %1, i32 32) #5
  %4 = sub i32 0, %3
  ret i32 %4
}

declare void @sc25519_invert(i8* %0, i8* %1) local_unnamed_addr #2

; Function Attrs: nounwind
define void @crypto_core_ed25519_scalar_negate(i8* nocapture nonnull %0, i8* nocapture nonnull readonly %1) local_unnamed_addr #0 {
  %3 = alloca [64 x i8], align 16
  %4 = alloca [64 x i8], align 16
  %5 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %5) #5
  %6 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %6) #5
  call void @llvm.memset.p0i8.i32(i8* nonnull align 16 dereferenceable(64) %5, i8 0, i32 32, i1 false)
  %7 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i32 0, i32 32
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 16 dereferenceable(32) %7, i8* nonnull align 16 dereferenceable(32) getelementptr inbounds ([32 x i8], [32 x i8]* @L, i32 0, i32 0), i32 32, i1 false)
  %8 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i32 0, i32 32
  call void @llvm.memset.p0i8.i32(i8* nonnull align 16 dereferenceable(32) %8, i8 0, i32 32, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 16 dereferenceable(32) %6, i8* nonnull align 1 dereferenceable(32) %1, i32 32, i1 false)
  call void @sodium_sub(i8* nonnull %5, i8* nonnull %6, i32 64) #5
  call void @sc25519_reduce(i8* nonnull %5) #5
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 1 dereferenceable(32) %0, i8* nonnull align 16 dereferenceable(32) %5, i32 32, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %5) #5
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

declare void @sodium_sub(i8* %0, i8* %1, i32 %2) local_unnamed_addr #2

declare void @sc25519_reduce(i8* %0) local_unnamed_addr #2

; Function Attrs: nounwind
define void @crypto_core_ed25519_scalar_complement(i8* nocapture nonnull %0, i8* nocapture nonnull readonly %1) local_unnamed_addr #0 {
  %3 = alloca [64 x i8], align 16
  %4 = alloca [64 x i8], align 16
  %5 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %5) #5
  %6 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %6) #5
  call void @llvm.memset.p0i8.i32(i8* nonnull align 16 dereferenceable(64) %5, i8 0, i32 32, i1 false)
  store i8 1, i8* %5, align 16
  %7 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i32 0, i32 32
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 16 dereferenceable(32) %7, i8* nonnull align 16 dereferenceable(32) getelementptr inbounds ([32 x i8], [32 x i8]* @L, i32 0, i32 0), i32 32, i1 false)
  %8 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i32 0, i32 32
  call void @llvm.memset.p0i8.i32(i8* nonnull align 16 dereferenceable(32) %8, i8 0, i32 32, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 16 dereferenceable(32) %6, i8* nonnull align 1 dereferenceable(32) %1, i32 32, i1 false)
  call void @sodium_sub(i8* nonnull %5, i8* nonnull %6, i32 64) #5
  call void @sc25519_reduce(i8* nonnull %5) #5
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 1 dereferenceable(32) %0, i8* nonnull align 16 dereferenceable(32) %5, i32 32, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %5) #5
  ret void
}

; Function Attrs: nounwind
define void @crypto_core_ed25519_scalar_add(i8* nocapture nonnull %0, i8* nocapture nonnull readonly %1, i8* nocapture nonnull readonly %2) local_unnamed_addr #0 {
  %4 = alloca [64 x i8], align 16
  %5 = alloca [64 x i8], align 16
  %6 = alloca [64 x i8], align 16
  %7 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %7) #5
  %8 = getelementptr inbounds [64 x i8], [64 x i8]* %6, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %8) #5
  %9 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i32 0, i32 32
  call void @llvm.memset.p0i8.i32(i8* nonnull align 16 dereferenceable(32) %9, i8 0, i32 32, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 16 dereferenceable(32) %7, i8* nonnull align 1 dereferenceable(32) %1, i32 32, i1 false)
  %10 = getelementptr inbounds [64 x i8], [64 x i8]* %6, i32 0, i32 32
  call void @llvm.memset.p0i8.i32(i8* nonnull align 16 dereferenceable(32) %10, i8 0, i32 32, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 16 dereferenceable(32) %8, i8* nonnull align 1 dereferenceable(32) %2, i32 32, i1 false)
  call void @sodium_add(i8* nonnull %7, i8* nonnull %8, i32 32) #5
  %11 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %11) #5
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 16 dereferenceable(64) %11, i8* nonnull align 16 dereferenceable(64) %7, i32 64, i1 false) #5
  call void @sc25519_reduce(i8* nonnull %11) #5
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 1 dereferenceable(32) %0, i8* nonnull align 16 dereferenceable(32) %11, i32 32, i1 false) #5
  call void @sodium_memzero(i8* nonnull %11, i32 64) #5
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %7) #5
  ret void
}

declare void @sodium_add(i8* %0, i8* %1, i32 %2) local_unnamed_addr #2

; Function Attrs: nounwind
define void @crypto_core_ed25519_scalar_reduce(i8* nocapture nonnull %0, i8* nocapture nonnull readonly %1) local_unnamed_addr #0 {
  %3 = alloca [64 x i8], align 16
  %4 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %4) #5
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 16 dereferenceable(64) %4, i8* nonnull align 1 dereferenceable(64) %1, i32 64, i1 false)
  call void @sc25519_reduce(i8* nonnull %4) #5
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 1 dereferenceable(32) %0, i8* nonnull align 16 dereferenceable(32) %4, i32 32, i1 false)
  call void @sodium_memzero(i8* nonnull %4, i32 64) #5
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %4) #5
  ret void
}

; Function Attrs: nounwind
define void @crypto_core_ed25519_scalar_sub(i8* nocapture nonnull %0, i8* nocapture nonnull readonly %1, i8* nocapture nonnull readonly %2) local_unnamed_addr #0 {
  %4 = alloca [64 x i8], align 16
  %5 = alloca [64 x i8], align 16
  %6 = alloca [64 x i8], align 16
  %7 = alloca [32 x i8], align 16
  %8 = getelementptr inbounds [32 x i8], [32 x i8]* %7, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %8)
  %9 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %9) #5
  %10 = getelementptr inbounds [64 x i8], [64 x i8]* %6, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %10) #5
  call void @llvm.memset.p0i8.i32(i8* nonnull align 16 dereferenceable(64) %9, i8 0, i32 32, i1 false) #5
  %11 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i32 0, i32 32
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 16 dereferenceable(32) %11, i8* nonnull align 16 dereferenceable(32) getelementptr inbounds ([32 x i8], [32 x i8]* @L, i32 0, i32 0), i32 32, i1 false) #5
  %12 = getelementptr inbounds [64 x i8], [64 x i8]* %6, i32 0, i32 32
  call void @llvm.memset.p0i8.i32(i8* nonnull align 16 dereferenceable(32) %12, i8 0, i32 32, i1 false) #5
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 16 dereferenceable(32) %10, i8* nonnull align 1 dereferenceable(32) %2, i32 32, i1 false) #5
  call void @sodium_sub(i8* nonnull %9, i8* nonnull %10, i32 64) #5
  call void @sc25519_reduce(i8* nonnull %9) #5
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 16 dereferenceable(32) %8, i8* nonnull align 16 dereferenceable(32) %9, i32 32, i1 false) #5
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %9) #5
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %10) #5
  %13 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %13) #5
  call void @llvm.memset.p0i8.i32(i8* nonnull align 16 dereferenceable(32) %12, i8 0, i32 32, i1 false) #5
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 16 dereferenceable(32) %10, i8* nonnull align 1 dereferenceable(32) %1, i32 32, i1 false) #5
  %14 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i32 0, i32 32
  call void @llvm.memset.p0i8.i32(i8* nonnull align 16 dereferenceable(32) %14, i8 0, i32 32, i1 false) #5
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 16 dereferenceable(32) %13, i8* nonnull align 16 dereferenceable(32) %8, i32 32, i1 false) #5
  call void @sodium_add(i8* nonnull %10, i8* nonnull %13, i32 32) #5
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %9) #5
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 16 dereferenceable(64) %9, i8* nonnull align 16 dereferenceable(64) %10, i32 64, i1 false) #5
  call void @sc25519_reduce(i8* nonnull %9) #5
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 1 dereferenceable(32) %0, i8* nonnull align 16 dereferenceable(32) %9, i32 32, i1 false) #5
  call void @sodium_memzero(i8* nonnull %9, i32 64) #5
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %13) #5
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %8)
  ret void
}

; Function Attrs: nounwind
define void @crypto_core_ed25519_scalar_mul(i8* nonnull %0, i8* nonnull %1, i8* nonnull %2) local_unnamed_addr #0 {
  tail call void @sc25519_mul(i8* nonnull %0, i8* nonnull %1, i8* nonnull %2) #5
  ret void
}

declare void @sc25519_mul(i8* %0, i8* %1, i8* %2) local_unnamed_addr #2

declare void @sodium_memzero(i8* %0, i32 %1) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_core_ed25519_bytes() local_unnamed_addr #4 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_core_ed25519_nonreducedscalarbytes() local_unnamed_addr #4 {
  ret i32 64
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_core_ed25519_uniformbytes() local_unnamed_addr #4 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_core_ed25519_hashbytes() local_unnamed_addr #4 {
  ret i32 64
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_core_ed25519_scalarbytes() local_unnamed_addr #4 {
  ret i32 32
}

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn writeonly }
attributes #4 = { norecurse nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %4 = tail call i32 @ge25519_is_canonical(i8* nonnull %0) #5
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = icmp eq i32 %4, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = tail call i32 @ge25519_has_small_order(i8* nonnull %0) #5
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = icmp eq i32 %7, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %10 = call i32 @ge25519_frombytes(%struct.ge25519_p3* nonnull %2, i8* nonnull %0) #5
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = icmp eq i32 %10, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %13 = call i32 @ge25519_is_on_curve(%struct.ge25519_p3* nonnull %2) #5
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = icmp eq i32 %13, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %16 = call i32 @ge25519_is_on_main_subgroup(%struct.ge25519_p3* nonnull %2) #5
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = icmp ne i32 %16, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %18 = zext i1 %17 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %20 = phi i32 [ 0, %9 ], [ 0, %6 ], [ 0, %12 ], [ 0, %1 ], [ %18, %15 ]
; Looking for a replacement for:
%0 = block 5
%1:i32 = var
%2:i1 = ne 0:i32, %1
%3:i32 = zext %2
%4:i32 = phi %0, 0:i32, 0:i32, 0:i32, 0:i32, %3
infer %4
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i32 = zext %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0 = block 5
%1:i32 = var
%2:i1 = ne 0:i32, %1
%3:i32 = zext %2
%4:i32 = phi %0, 0:i32, 0:i32, 0:i32, 0:i32, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i32 = zext %1

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for crypto_core_ed25519_is_valid_point()

