; entering Souper's runOnFunction() for crypto_core_hchacha20()

; ModuleID = './core_hchacha20.c.bc'
source_filename = "crypto_core/hchacha20/core_hchacha20.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

; Function Attrs: nofree norecurse nounwind
define i32 @crypto_core_hchacha20(i8* nocapture nonnull %0, i8* nocapture nonnull readonly %1, i8* nocapture nonnull readonly %2, i8* readonly %3) local_unnamed_addr #0 {
  %5 = icmp eq i8* %3, null
  br i1 %5, label %18, label %6

6:                                                ; preds = %4
  %7 = bitcast i8* %3 to i32*
  %8 = load i32, i32* %7, align 1
  %9 = getelementptr i8, i8* %3, i32 4
  %10 = bitcast i8* %9 to i32*
  %11 = load i32, i32* %10, align 1
  %12 = getelementptr i8, i8* %3, i32 8
  %13 = bitcast i8* %12 to i32*
  %14 = load i32, i32* %13, align 1
  %15 = getelementptr i8, i8* %3, i32 12
  %16 = bitcast i8* %15 to i32*
  %17 = load i32, i32* %16, align 1
  br label %18

18:                                               ; preds = %4, %6
  %19 = phi i32 [ %8, %6 ], [ 1634760805, %4 ]
  %20 = phi i32 [ %11, %6 ], [ 857760878, %4 ]
  %21 = phi i32 [ %14, %6 ], [ 2036477234, %4 ]
  %22 = phi i32 [ %17, %6 ], [ 1797285236, %4 ]
  %23 = bitcast i8* %2 to i32*
  %24 = load i32, i32* %23, align 1
  %25 = getelementptr i8, i8* %2, i32 4
  %26 = bitcast i8* %25 to i32*
  %27 = load i32, i32* %26, align 1
  %28 = getelementptr i8, i8* %2, i32 8
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 1
  %31 = getelementptr i8, i8* %2, i32 12
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 1
  %34 = getelementptr i8, i8* %2, i32 16
  %35 = bitcast i8* %34 to i32*
  %36 = load i32, i32* %35, align 1
  %37 = getelementptr i8, i8* %2, i32 20
  %38 = bitcast i8* %37 to i32*
  %39 = load i32, i32* %38, align 1
  %40 = getelementptr i8, i8* %2, i32 24
  %41 = bitcast i8* %40 to i32*
  %42 = load i32, i32* %41, align 1
  %43 = getelementptr i8, i8* %2, i32 28
  %44 = bitcast i8* %43 to i32*
  %45 = load i32, i32* %44, align 1
  %46 = bitcast i8* %1 to i32*
  %47 = load i32, i32* %46, align 1
  %48 = getelementptr i8, i8* %1, i32 4
  %49 = bitcast i8* %48 to i32*
  %50 = load i32, i32* %49, align 1
  %51 = getelementptr i8, i8* %1, i32 8
  %52 = bitcast i8* %51 to i32*
  %53 = load i32, i32* %52, align 1
  %54 = getelementptr i8, i8* %1, i32 12
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 1
  br label %57

57:                                               ; preds = %57, %18
  %58 = phi i32 [ %56, %18 ], [ %169, %57 ]
  %59 = phi i32 [ %53, %18 ], [ %229, %57 ]
  %60 = phi i32 [ %50, %18 ], [ %209, %57 ]
  %61 = phi i32 [ %47, %18 ], [ %189, %57 ]
  %62 = phi i32 [ %45, %18 ], [ %190, %57 ]
  %63 = phi i32 [ %42, %18 ], [ %170, %57 ]
  %64 = phi i32 [ %39, %18 ], [ %230, %57 ]
  %65 = phi i32 [ %36, %18 ], [ %210, %57 ]
  %66 = phi i32 [ %33, %18 ], [ %214, %57 ]
  %67 = phi i32 [ %30, %18 ], [ %194, %57 ]
  %68 = phi i32 [ %27, %18 ], [ %174, %57 ]
  %69 = phi i32 [ %24, %18 ], [ %234, %57 ]
  %70 = phi i32 [ %22, %18 ], [ %225, %57 ]
  %71 = phi i32 [ %21, %18 ], [ %205, %57 ]
  %72 = phi i32 [ %20, %18 ], [ %185, %57 ]
  %73 = phi i32 [ %19, %18 ], [ %165, %57 ]
  %74 = phi i32 [ 0, %18 ], [ %235, %57 ]
  %75 = add i32 %69, %73
  %76 = xor i32 %61, %75
  %77 = shl i32 %76, 16
  %78 = lshr i32 %76, 16
  %79 = or i32 %78, %77
  %80 = add i32 %79, %65
  %81 = xor i32 %80, %69
  %82 = shl i32 %81, 12
  %83 = lshr i32 %81, 20
  %84 = or i32 %83, %82
  %85 = add i32 %84, %75
  %86 = xor i32 %85, %79
  %87 = shl i32 %86, 8
  %88 = lshr i32 %86, 24
  %89 = or i32 %88, %87
  %90 = add i32 %89, %80
  %91 = xor i32 %90, %84
  %92 = shl i32 %91, 7
  %93 = lshr i32 %91, 25
  %94 = or i32 %93, %92
  %95 = add i32 %68, %72
  %96 = xor i32 %60, %95
  %97 = shl i32 %96, 16
  %98 = lshr i32 %96, 16
  %99 = or i32 %98, %97
  %100 = add i32 %99, %64
  %101 = xor i32 %100, %68
  %102 = shl i32 %101, 12
  %103 = lshr i32 %101, 20
  %104 = or i32 %103, %102
  %105 = add i32 %104, %95
  %106 = xor i32 %105, %99
  %107 = shl i32 %106, 8
  %108 = lshr i32 %106, 24
  %109 = or i32 %108, %107
  %110 = add i32 %109, %100
  %111 = xor i32 %110, %104
  %112 = shl i32 %111, 7
  %113 = lshr i32 %111, 25
  %114 = or i32 %113, %112
  %115 = add i32 %67, %71
  %116 = xor i32 %59, %115
  %117 = shl i32 %116, 16
  %118 = lshr i32 %116, 16
  %119 = or i32 %118, %117
  %120 = add i32 %119, %63
  %121 = xor i32 %120, %67
  %122 = shl i32 %121, 12
  %123 = lshr i32 %121, 20
  %124 = or i32 %123, %122
  %125 = add i32 %124, %115
  %126 = xor i32 %125, %119
  %127 = shl i32 %126, 8
  %128 = lshr i32 %126, 24
  %129 = or i32 %128, %127
  %130 = add i32 %129, %120
  %131 = xor i32 %130, %124
  %132 = shl i32 %131, 7
  %133 = lshr i32 %131, 25
  %134 = or i32 %133, %132
  %135 = add i32 %66, %70
  %136 = xor i32 %58, %135
  %137 = shl i32 %136, 16
  %138 = lshr i32 %136, 16
  %139 = or i32 %138, %137
  %140 = add i32 %139, %62
  %141 = xor i32 %140, %66
  %142 = shl i32 %141, 12
  %143 = lshr i32 %141, 20
  %144 = or i32 %143, %142
  %145 = add i32 %144, %135
  %146 = xor i32 %145, %139
  %147 = shl i32 %146, 8
  %148 = lshr i32 %146, 24
  %149 = or i32 %148, %147
  %150 = add i32 %149, %140
  %151 = xor i32 %150, %144
  %152 = shl i32 %151, 7
  %153 = lshr i32 %151, 25
  %154 = or i32 %153, %152
  %155 = add i32 %114, %85
  %156 = xor i32 %155, %149
  %157 = shl i32 %156, 16
  %158 = lshr i32 %156, 16
  %159 = or i32 %158, %157
  %160 = add i32 %159, %130
  %161 = xor i32 %160, %114
  %162 = shl i32 %161, 12
  %163 = lshr i32 %161, 20
  %164 = or i32 %163, %162
  %165 = add i32 %164, %155
  %166 = xor i32 %165, %159
  %167 = shl i32 %166, 8
  %168 = lshr i32 %166, 24
  %169 = or i32 %168, %167
  %170 = add i32 %169, %160
  %171 = xor i32 %170, %164
  %172 = shl i32 %171, 7
  %173 = lshr i32 %171, 25
  %174 = or i32 %173, %172
  %175 = add i32 %134, %105
  %176 = xor i32 %175, %89
  %177 = shl i32 %176, 16
  %178 = lshr i32 %176, 16
  %179 = or i32 %178, %177
  %180 = add i32 %179, %150
  %181 = xor i32 %180, %134
  %182 = shl i32 %181, 12
  %183 = lshr i32 %181, 20
  %184 = or i32 %183, %182
  %185 = add i32 %184, %175
  %186 = xor i32 %185, %179
  %187 = shl i32 %186, 8
  %188 = lshr i32 %186, 24
  %189 = or i32 %188, %187
  %190 = add i32 %189, %180
  %191 = xor i32 %190, %184
  %192 = shl i32 %191, 7
  %193 = lshr i32 %191, 25
  %194 = or i32 %193, %192
  %195 = add i32 %154, %125
  %196 = xor i32 %195, %109
  %197 = shl i32 %196, 16
  %198 = lshr i32 %196, 16
  %199 = or i32 %198, %197
  %200 = add i32 %199, %90
  %201 = xor i32 %200, %154
  %202 = shl i32 %201, 12
  %203 = lshr i32 %201, 20
  %204 = or i32 %203, %202
  %205 = add i32 %204, %195
  %206 = xor i32 %205, %199
  %207 = shl i32 %206, 8
  %208 = lshr i32 %206, 24
  %209 = or i32 %208, %207
  %210 = add i32 %209, %200
  %211 = xor i32 %210, %204
  %212 = shl i32 %211, 7
  %213 = lshr i32 %211, 25
  %214 = or i32 %213, %212
  %215 = add i32 %94, %145
  %216 = xor i32 %215, %129
  %217 = shl i32 %216, 16
  %218 = lshr i32 %216, 16
  %219 = or i32 %218, %217
  %220 = add i32 %219, %110
  %221 = xor i32 %220, %94
  %222 = shl i32 %221, 12
  %223 = lshr i32 %221, 20
  %224 = or i32 %223, %222
  %225 = add i32 %224, %215
  %226 = xor i32 %225, %219
  %227 = shl i32 %226, 8
  %228 = lshr i32 %226, 24
  %229 = or i32 %228, %227
  %230 = add i32 %229, %220
  %231 = xor i32 %230, %224
  %232 = shl i32 %231, 7
  %233 = lshr i32 %231, 25
  %234 = or i32 %233, %232
  %235 = add nuw nsw i32 %74, 1
  %236 = icmp eq i32 %235, 10
  br i1 %236, label %237, label %57

237:                                              ; preds = %57
  %238 = bitcast i8* %0 to i32*
  store i32 %165, i32* %238, align 1
  %239 = getelementptr i8, i8* %0, i32 4
  %240 = bitcast i8* %239 to i32*
  store i32 %185, i32* %240, align 1
  %241 = getelementptr i8, i8* %0, i32 8
  %242 = bitcast i8* %241 to i32*
  store i32 %205, i32* %242, align 1
  %243 = getelementptr i8, i8* %0, i32 12
  %244 = bitcast i8* %243 to i32*
  store i32 %225, i32* %244, align 1
  %245 = getelementptr i8, i8* %0, i32 16
  %246 = bitcast i8* %245 to i32*
  store i32 %189, i32* %246, align 1
  %247 = getelementptr i8, i8* %0, i32 20
  %248 = bitcast i8* %247 to i32*
  store i32 %209, i32* %248, align 1
  %249 = getelementptr i8, i8* %0, i32 24
  %250 = bitcast i8* %249 to i32*
  store i32 %229, i32* %250, align 1
  %251 = getelementptr i8, i8* %0, i32 28
  %252 = bitcast i8* %251 to i32*
  store i32 %169, i32* %252, align 1
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_core_hchacha20_outputbytes() local_unnamed_addr #1 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_core_hchacha20_inputbytes() local_unnamed_addr #1 {
  ret i32 16
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_core_hchacha20_keybytes() local_unnamed_addr #1 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_core_hchacha20_constbytes() local_unnamed_addr #1 {
  ret i32 16
}

attributes #0 = { nofree norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %5 = icmp eq i8* %3, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %7, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %10, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %13, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %16, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = phi i32 [ %8, %6 ], [ 1634760805, %4 ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = phi %0, %1, 1634760805:i32
infer %2

; *****
; For LLVM instruction:
;  %20 = phi i32 [ %11, %6 ], [ 857760878, %4 ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = phi %0, %1, 857760878:i32
infer %2

; *****
; For LLVM instruction:
;  %21 = phi i32 [ %14, %6 ], [ 2036477234, %4 ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = phi %0, %1, 2036477234:i32
infer %2

; *****
; For LLVM instruction:
;  %22 = phi i32 [ %17, %6 ], [ 1797285236, %4 ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = phi %0, %1, 1797285236:i32
infer %2

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %23, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %26, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %29, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %32, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %35, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %38, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %42 = load i32, i32* %41, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %45 = load i32, i32* %44, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %46, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %50 = load i32, i32* %49, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %53 = load i32, i32* %52, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %56 = load i32, i32* %55, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %58 = phi i32 [ %56, %18 ], [ %169, %57 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %59 = phi i32 [ %53, %18 ], [ %229, %57 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %60 = phi i32 [ %50, %18 ], [ %209, %57 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %61 = phi i32 [ %47, %18 ], [ %189, %57 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %62 = phi i32 [ %45, %18 ], [ %190, %57 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %63 = phi i32 [ %42, %18 ], [ %170, %57 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %64 = phi i32 [ %39, %18 ], [ %230, %57 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %65 = phi i32 [ %36, %18 ], [ %210, %57 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %66 = phi i32 [ %33, %18 ], [ %214, %57 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %67 = phi i32 [ %30, %18 ], [ %194, %57 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %68 = phi i32 [ %27, %18 ], [ %174, %57 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %69 = phi i32 [ %24, %18 ], [ %234, %57 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %70 = phi i32 [ %22, %18 ], [ %225, %57 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %71 = phi i32 [ %21, %18 ], [ %205, %57 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %72 = phi i32 [ %20, %18 ], [ %185, %57 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %73 = phi i32 [ %19, %18 ], [ %165, %57 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %74 = phi i32 [ 0, %18 ], [ %235, %57 ]
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,10))
infer %0

; *****
; For LLVM instruction:
;  %75 = add i32 %69, %73
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %76 = xor i32 %61, %75
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3
infer %4

; *****
; For LLVM instruction:
;  %77 = shl i32 %76, 16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3 (hasExternalUses)
%5:i32 = shl %4, 16:i32
infer %5

; *****
; For LLVM instruction:
;  %78 = lshr i32 %76, 16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3 (hasExternalUses)
%5:i32 = lshr %4, 16:i32
infer %5

; *****
; For LLVM instruction:
;  %79 = or i32 %78, %77
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3
%5:i32 = shl %4, 16:i32
%6:i32 = lshr %4, 16:i32
%7:i32 = or %5, %6
infer %7

; *****
; For LLVM instruction:
;  %80 = add i32 %79, %65
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3 (hasExternalUses)
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %0, %8
infer %9

; *****
; For LLVM instruction:
;  %81 = xor i32 %80, %69
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3 (hasExternalUses)
%5:i32 = xor %2, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %1, %8 (hasExternalUses)
%10:i32 = xor %0, %9
infer %10

; *****
; For LLVM instruction:
;  %82 = shl i32 %81, 12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3 (hasExternalUses)
%5:i32 = xor %2, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %1, %8 (hasExternalUses)
%10:i32 = xor %0, %9 (hasExternalUses)
%11:i32 = shl %10, 12:i32
infer %11

; *****
; For LLVM instruction:
;  %83 = lshr i32 %81, 20
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3 (hasExternalUses)
%5:i32 = xor %2, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %1, %8 (hasExternalUses)
%10:i32 = xor %0, %9 (hasExternalUses)
%11:i32 = lshr %10, 20:i32
infer %11

; *****
; For LLVM instruction:
;  %84 = or i32 %83, %82
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3 (hasExternalUses)
%5:i32 = xor %2, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %1, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12
infer %13

; *****
; For LLVM instruction:
;  %85 = add i32 %84, %75
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13
infer %14

; *****
; For LLVM instruction:
;  %86 = xor i32 %85, %79
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = xor %14, %8
infer %15

; *****
; For LLVM instruction:
;  %87 = shl i32 %86, 8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = xor %14, %8 (hasExternalUses)
%16:i32 = shl %15, 8:i32
infer %16

; *****
; For LLVM instruction:
;  %88 = lshr i32 %86, 24
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = xor %14, %8 (hasExternalUses)
%16:i32 = lshr %15, 24:i32
infer %16

; *****
; For LLVM instruction:
;  %89 = or i32 %88, %87
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17
infer %18

; *****
; For LLVM instruction:
;  %90 = add i32 %89, %80
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18
infer %19

; *****
; For LLVM instruction:
;  %91 = xor i32 %90, %84
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = xor %19, %13
infer %20

; *****
; For LLVM instruction:
;  %92 = shl i32 %91, 7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = xor %19, %13 (hasExternalUses)
%21:i32 = shl %20, 7:i32
infer %21

; *****
; For LLVM instruction:
;  %93 = lshr i32 %91, 25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = xor %19, %13 (hasExternalUses)
%21:i32 = lshr %20, 25:i32
infer %21

; *****
; For LLVM instruction:
;  %94 = or i32 %93, %92
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = xor %19, %13
%21:i32 = shl %20, 7:i32
%22:i32 = lshr %20, 25:i32
%23:i32 = or %21, %22
infer %23

; *****
; For LLVM instruction:
;  %95 = add i32 %68, %72
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %96 = xor i32 %60, %95
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3
infer %4

; *****
; For LLVM instruction:
;  %97 = shl i32 %96, 16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3 (hasExternalUses)
%5:i32 = shl %4, 16:i32
infer %5

; *****
; For LLVM instruction:
;  %98 = lshr i32 %96, 16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3 (hasExternalUses)
%5:i32 = lshr %4, 16:i32
infer %5

; *****
; For LLVM instruction:
;  %99 = or i32 %98, %97
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3
%5:i32 = shl %4, 16:i32
%6:i32 = lshr %4, 16:i32
%7:i32 = or %5, %6
infer %7

; *****
; For LLVM instruction:
;  %100 = add i32 %99, %64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3 (hasExternalUses)
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %0, %8
infer %9

; *****
; For LLVM instruction:
;  %101 = xor i32 %100, %68
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3 (hasExternalUses)
%5:i32 = xor %2, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %1, %8 (hasExternalUses)
%10:i32 = xor %0, %9
infer %10

; *****
; For LLVM instruction:
;  %102 = shl i32 %101, 12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3 (hasExternalUses)
%5:i32 = xor %2, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %1, %8 (hasExternalUses)
%10:i32 = xor %0, %9 (hasExternalUses)
%11:i32 = shl %10, 12:i32
infer %11

; *****
; For LLVM instruction:
;  %103 = lshr i32 %101, 20
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3 (hasExternalUses)
%5:i32 = xor %2, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %1, %8 (hasExternalUses)
%10:i32 = xor %0, %9 (hasExternalUses)
%11:i32 = lshr %10, 20:i32
infer %11

; *****
; For LLVM instruction:
;  %104 = or i32 %103, %102
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3 (hasExternalUses)
%5:i32 = xor %2, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %1, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12
infer %13

; *****
; For LLVM instruction:
;  %105 = add i32 %104, %95
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13
infer %14

; *****
; For LLVM instruction:
;  %106 = xor i32 %105, %99
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = xor %14, %8
infer %15

; *****
; For LLVM instruction:
;  %107 = shl i32 %106, 8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = xor %14, %8 (hasExternalUses)
%16:i32 = shl %15, 8:i32
infer %16

; *****
; For LLVM instruction:
;  %108 = lshr i32 %106, 24
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = xor %14, %8 (hasExternalUses)
%16:i32 = lshr %15, 24:i32
infer %16

; *****
; For LLVM instruction:
;  %109 = or i32 %108, %107
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17
infer %18

; *****
; For LLVM instruction:
;  %110 = add i32 %109, %100
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18
infer %19

; *****
; For LLVM instruction:
;  %111 = xor i32 %110, %104
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = xor %19, %13
infer %20

; *****
; For LLVM instruction:
;  %112 = shl i32 %111, 7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = xor %19, %13 (hasExternalUses)
%21:i32 = shl %20, 7:i32
infer %21

; *****
; For LLVM instruction:
;  %113 = lshr i32 %111, 25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = xor %19, %13 (hasExternalUses)
%21:i32 = lshr %20, 25:i32
infer %21

; *****
; For LLVM instruction:
;  %114 = or i32 %113, %112
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = xor %19, %13
%21:i32 = shl %20, 7:i32
%22:i32 = lshr %20, 25:i32
%23:i32 = or %21, %22
infer %23

; *****
; For LLVM instruction:
;  %115 = add i32 %67, %71
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %116 = xor i32 %59, %115
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3
infer %4

; *****
; For LLVM instruction:
;  %117 = shl i32 %116, 16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3 (hasExternalUses)
%5:i32 = shl %4, 16:i32
infer %5

; *****
; For LLVM instruction:
;  %118 = lshr i32 %116, 16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3 (hasExternalUses)
%5:i32 = lshr %4, 16:i32
infer %5

; *****
; For LLVM instruction:
;  %119 = or i32 %118, %117
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3
%5:i32 = shl %4, 16:i32
%6:i32 = lshr %4, 16:i32
%7:i32 = or %5, %6
infer %7

; *****
; For LLVM instruction:
;  %120 = add i32 %119, %63
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3 (hasExternalUses)
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %0, %8
infer %9

; *****
; For LLVM instruction:
;  %121 = xor i32 %120, %67
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3 (hasExternalUses)
%5:i32 = xor %2, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %1, %8 (hasExternalUses)
%10:i32 = xor %0, %9
infer %10

; *****
; For LLVM instruction:
;  %122 = shl i32 %121, 12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3 (hasExternalUses)
%5:i32 = xor %2, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %1, %8 (hasExternalUses)
%10:i32 = xor %0, %9 (hasExternalUses)
%11:i32 = shl %10, 12:i32
infer %11

; *****
; For LLVM instruction:
;  %123 = lshr i32 %121, 20
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3 (hasExternalUses)
%5:i32 = xor %2, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %1, %8 (hasExternalUses)
%10:i32 = xor %0, %9 (hasExternalUses)
%11:i32 = lshr %10, 20:i32
infer %11

; *****
; For LLVM instruction:
;  %124 = or i32 %123, %122
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3 (hasExternalUses)
%5:i32 = xor %2, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %1, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12
infer %13

; *****
; For LLVM instruction:
;  %125 = add i32 %124, %115
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13
infer %14

; *****
; For LLVM instruction:
;  %126 = xor i32 %125, %119
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = xor %14, %8
infer %15

; *****
; For LLVM instruction:
;  %127 = shl i32 %126, 8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = xor %14, %8 (hasExternalUses)
%16:i32 = shl %15, 8:i32
infer %16

; *****
; For LLVM instruction:
;  %128 = lshr i32 %126, 24
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = xor %14, %8 (hasExternalUses)
%16:i32 = lshr %15, 24:i32
infer %16

; *****
; For LLVM instruction:
;  %129 = or i32 %128, %127
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17
infer %18

; *****
; For LLVM instruction:
;  %130 = add i32 %129, %120
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18
infer %19

; *****
; For LLVM instruction:
;  %131 = xor i32 %130, %124
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = xor %19, %13
infer %20

; *****
; For LLVM instruction:
;  %132 = shl i32 %131, 7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = xor %19, %13 (hasExternalUses)
%21:i32 = shl %20, 7:i32
infer %21

; *****
; For LLVM instruction:
;  %133 = lshr i32 %131, 25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = xor %19, %13 (hasExternalUses)
%21:i32 = lshr %20, 25:i32
infer %21

; *****
; For LLVM instruction:
;  %134 = or i32 %133, %132
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = xor %19, %13
%21:i32 = shl %20, 7:i32
%22:i32 = lshr %20, 25:i32
%23:i32 = or %21, %22
infer %23

; *****
; For LLVM instruction:
;  %135 = add i32 %66, %70
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %136 = xor i32 %58, %135
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3
infer %4

; *****
; For LLVM instruction:
;  %137 = shl i32 %136, 16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3 (hasExternalUses)
%5:i32 = shl %4, 16:i32
infer %5

; *****
; For LLVM instruction:
;  %138 = lshr i32 %136, 16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3 (hasExternalUses)
%5:i32 = lshr %4, 16:i32
infer %5

; *****
; For LLVM instruction:
;  %139 = or i32 %138, %137
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3
%5:i32 = shl %4, 16:i32
%6:i32 = lshr %4, 16:i32
%7:i32 = or %5, %6
infer %7

; *****
; For LLVM instruction:
;  %140 = add i32 %139, %62
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3 (hasExternalUses)
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %0, %8
infer %9

; *****
; For LLVM instruction:
;  %141 = xor i32 %140, %66
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3 (hasExternalUses)
%5:i32 = xor %2, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %1, %8 (hasExternalUses)
%10:i32 = xor %0, %9
infer %10

; *****
; For LLVM instruction:
;  %142 = shl i32 %141, 12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3 (hasExternalUses)
%5:i32 = xor %2, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %1, %8 (hasExternalUses)
%10:i32 = xor %0, %9 (hasExternalUses)
%11:i32 = shl %10, 12:i32
infer %11

; *****
; For LLVM instruction:
;  %143 = lshr i32 %141, 20
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3 (hasExternalUses)
%5:i32 = xor %2, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %1, %8 (hasExternalUses)
%10:i32 = xor %0, %9 (hasExternalUses)
%11:i32 = lshr %10, 20:i32
infer %11

; *****
; For LLVM instruction:
;  %144 = or i32 %143, %142
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3 (hasExternalUses)
%5:i32 = xor %2, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %1, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12
infer %13

; *****
; For LLVM instruction:
;  %145 = add i32 %144, %135
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13
infer %14

; *****
; For LLVM instruction:
;  %146 = xor i32 %145, %139
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = xor %14, %8
infer %15

; *****
; For LLVM instruction:
;  %147 = shl i32 %146, 8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = xor %14, %8 (hasExternalUses)
%16:i32 = shl %15, 8:i32
infer %16

; *****
; For LLVM instruction:
;  %148 = lshr i32 %146, 24
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = xor %14, %8 (hasExternalUses)
%16:i32 = lshr %15, 24:i32
infer %16

; *****
; For LLVM instruction:
;  %149 = or i32 %148, %147
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17
infer %18

; *****
; For LLVM instruction:
;  %150 = add i32 %149, %140
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18
infer %19

; *****
; For LLVM instruction:
;  %151 = xor i32 %150, %144
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = xor %19, %13
infer %20

; *****
; For LLVM instruction:
;  %152 = shl i32 %151, 7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = xor %19, %13 (hasExternalUses)
%21:i32 = shl %20, 7:i32
infer %21

; *****
; For LLVM instruction:
;  %153 = lshr i32 %151, 25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = xor %19, %13 (hasExternalUses)
%21:i32 = lshr %20, 25:i32
infer %21

; *****
; For LLVM instruction:
;  %154 = or i32 %153, %152
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = xor %19, %13
%21:i32 = shl %20, 7:i32
%22:i32 = lshr %20, 25:i32
%23:i32 = or %21, %22
infer %23

; *****
; For LLVM instruction:
;  %155 = add i32 %114, %85
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %17, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37 (hasExternalUses)
%39:i32 = add %14, %38
infer %39

; *****
; For LLVM instruction:
;  %156 = xor i32 %155, %149
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %17, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37 (hasExternalUses)
%39:i32 = add %14, %38 (hasExternalUses)
%40:i32 = var
%41:i32 = var
%42:i32 = add %40, %41
%43:i32 = var
%44:i32 = var
%45:i32 = xor %44, %42
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %43, %48 (hasExternalUses)
%50:i32 = xor %40, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %42, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = xor %39, %58
infer %59

; *****
; For LLVM instruction:
;  %157 = shl i32 %156, 16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %17, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37 (hasExternalUses)
%39:i32 = add %14, %38 (hasExternalUses)
%40:i32 = var
%41:i32 = var
%42:i32 = add %40, %41
%43:i32 = var
%44:i32 = var
%45:i32 = xor %44, %42
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %43, %48 (hasExternalUses)
%50:i32 = xor %40, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %42, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = xor %39, %58 (hasExternalUses)
%60:i32 = shl %59, 16:i32
infer %60

; *****
; For LLVM instruction:
;  %158 = lshr i32 %156, 16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %17, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37 (hasExternalUses)
%39:i32 = add %14, %38 (hasExternalUses)
%40:i32 = var
%41:i32 = var
%42:i32 = add %40, %41
%43:i32 = var
%44:i32 = var
%45:i32 = xor %44, %42
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %43, %48 (hasExternalUses)
%50:i32 = xor %40, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %42, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = xor %39, %58 (hasExternalUses)
%60:i32 = lshr %59, 16:i32
infer %60

; *****
; For LLVM instruction:
;  %159 = or i32 %158, %157
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %17, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37 (hasExternalUses)
%39:i32 = add %14, %38 (hasExternalUses)
%40:i32 = var
%41:i32 = var
%42:i32 = add %40, %41
%43:i32 = var
%44:i32 = var
%45:i32 = xor %44, %42
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %43, %48 (hasExternalUses)
%50:i32 = xor %40, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %42, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = xor %39, %58
%60:i32 = shl %59, 16:i32
%61:i32 = lshr %59, 16:i32
%62:i32 = or %60, %61
infer %62

; *****
; For LLVM instruction:
;  %160 = add i32 %159, %130
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %20, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %37, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %34, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %19, %82
infer %83

; *****
; For LLVM instruction:
;  %161 = xor i32 %160, %114
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %20, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %37, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %19, %82 (hasExternalUses)
%84:i32 = xor %83, %58
infer %84

; *****
; For LLVM instruction:
;  %162 = shl i32 %161, 12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %20, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %37, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %19, %82 (hasExternalUses)
%84:i32 = xor %83, %58 (hasExternalUses)
%85:i32 = shl %84, 12:i32
infer %85

; *****
; For LLVM instruction:
;  %163 = lshr i32 %161, 20
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %20, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %37, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %19, %82 (hasExternalUses)
%84:i32 = xor %83, %58 (hasExternalUses)
%85:i32 = lshr %84, 20:i32
infer %85

; *****
; For LLVM instruction:
;  %164 = or i32 %163, %162
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %20, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %37, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %19, %82 (hasExternalUses)
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86
infer %87

; *****
; For LLVM instruction:
;  %165 = add i32 %164, %155
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %17, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37
%39:i32 = add %14, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %42, %43
%45:i32 = xor %41, %44
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %40, %48
%50:i32 = xor %42, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %49, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %39, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %59, %82 (hasExternalUses)
%84:i32 = xor %83, %38
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %39, %87
infer %88

; *****
; For LLVM instruction:
;  %166 = xor i32 %165, %159
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %17, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37
%39:i32 = add %14, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %42, %43
%45:i32 = xor %41, %44
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %40, %48
%50:i32 = xor %42, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %49, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %39, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %59, %82 (hasExternalUses)
%84:i32 = xor %83, %38
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %39, %87 (hasExternalUses)
%89:i32 = xor %88, %82
infer %89

; *****
; For LLVM instruction:
;  %167 = shl i32 %166, 8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %17, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37
%39:i32 = add %14, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %42, %43
%45:i32 = xor %41, %44
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %40, %48
%50:i32 = xor %42, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %49, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %39, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %59, %82 (hasExternalUses)
%84:i32 = xor %83, %38
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %39, %87 (hasExternalUses)
%89:i32 = xor %88, %82 (hasExternalUses)
%90:i32 = shl %89, 8:i32
infer %90

; *****
; For LLVM instruction:
;  %168 = lshr i32 %166, 24
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %17, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37
%39:i32 = add %14, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %42, %43
%45:i32 = xor %41, %44
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %40, %48
%50:i32 = xor %42, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %49, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %39, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %59, %82 (hasExternalUses)
%84:i32 = xor %83, %38
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %39, %87 (hasExternalUses)
%89:i32 = xor %88, %82 (hasExternalUses)
%90:i32 = lshr %89, 24:i32
infer %90

; *****
; For LLVM instruction:
;  %169 = or i32 %168, %167
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %17, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37
%39:i32 = add %14, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %42, %43
%45:i32 = xor %41, %44
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %40, %48
%50:i32 = xor %42, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %49, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %39, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %59, %82 (hasExternalUses)
%84:i32 = xor %83, %38
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %39, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91
infer %92

; *****
; For LLVM instruction:
;  %170 = add i32 %169, %160
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %20, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %37, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %19, %82
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %59, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91 (hasExternalUses)
%93:i32 = add %83, %92
infer %93

; *****
; For LLVM instruction:
;  %171 = xor i32 %170, %164
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %20, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %37, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %19, %82
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86
%88:i32 = add %59, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91 (hasExternalUses)
%93:i32 = add %83, %92 (hasExternalUses)
%94:i32 = xor %93, %87
infer %94

; *****
; For LLVM instruction:
;  %172 = shl i32 %171, 7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %20, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %37, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %19, %82
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86
%88:i32 = add %59, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91 (hasExternalUses)
%93:i32 = add %83, %92 (hasExternalUses)
%94:i32 = xor %93, %87 (hasExternalUses)
%95:i32 = shl %94, 7:i32
infer %95

; *****
; For LLVM instruction:
;  %173 = lshr i32 %171, 25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %20, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %37, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %19, %82
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86
%88:i32 = add %59, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91 (hasExternalUses)
%93:i32 = add %83, %92 (hasExternalUses)
%94:i32 = xor %93, %87 (hasExternalUses)
%95:i32 = lshr %94, 25:i32
infer %95

; *****
; For LLVM instruction:
;  %174 = or i32 %173, %172
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %20, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %37, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %19, %82
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86
%88:i32 = add %59, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91 (hasExternalUses)
%93:i32 = add %83, %92 (hasExternalUses)
%94:i32 = xor %93, %87
%95:i32 = shl %94, 7:i32
%96:i32 = lshr %94, 25:i32
%97:i32 = or %95, %96
infer %97

; *****
; For LLVM instruction:
;  %175 = add i32 %134, %105
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %17, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37 (hasExternalUses)
%39:i32 = add %14, %38
infer %39

; *****
; For LLVM instruction:
;  %176 = xor i32 %175, %89
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %17, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37 (hasExternalUses)
%39:i32 = add %14, %38 (hasExternalUses)
%40:i32 = var
%41:i32 = var
%42:i32 = add %40, %41
%43:i32 = var
%44:i32 = var
%45:i32 = xor %44, %42
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %43, %48 (hasExternalUses)
%50:i32 = xor %40, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %42, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = xor %39, %58
infer %59

; *****
; For LLVM instruction:
;  %177 = shl i32 %176, 16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %17, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37 (hasExternalUses)
%39:i32 = add %14, %38 (hasExternalUses)
%40:i32 = var
%41:i32 = var
%42:i32 = add %40, %41
%43:i32 = var
%44:i32 = var
%45:i32 = xor %44, %42
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %43, %48 (hasExternalUses)
%50:i32 = xor %40, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %42, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = xor %39, %58 (hasExternalUses)
%60:i32 = shl %59, 16:i32
infer %60

; *****
; For LLVM instruction:
;  %178 = lshr i32 %176, 16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %17, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37 (hasExternalUses)
%39:i32 = add %14, %38 (hasExternalUses)
%40:i32 = var
%41:i32 = var
%42:i32 = add %40, %41
%43:i32 = var
%44:i32 = var
%45:i32 = xor %44, %42
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %43, %48 (hasExternalUses)
%50:i32 = xor %40, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %42, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = xor %39, %58 (hasExternalUses)
%60:i32 = lshr %59, 16:i32
infer %60

; *****
; For LLVM instruction:
;  %179 = or i32 %178, %177
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %17, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37 (hasExternalUses)
%39:i32 = add %14, %38 (hasExternalUses)
%40:i32 = var
%41:i32 = var
%42:i32 = add %40, %41
%43:i32 = var
%44:i32 = var
%45:i32 = xor %44, %42
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %43, %48 (hasExternalUses)
%50:i32 = xor %40, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %42, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = xor %39, %58
%60:i32 = shl %59, 16:i32
%61:i32 = lshr %59, 16:i32
%62:i32 = or %60, %61
infer %62

; *****
; For LLVM instruction:
;  %180 = add i32 %179, %150
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %20, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %37, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %34, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %19, %82
infer %83

; *****
; For LLVM instruction:
;  %181 = xor i32 %180, %134
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %20, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %37, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %19, %82 (hasExternalUses)
%84:i32 = xor %83, %58
infer %84

; *****
; For LLVM instruction:
;  %182 = shl i32 %181, 12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %20, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %37, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %19, %82 (hasExternalUses)
%84:i32 = xor %83, %58 (hasExternalUses)
%85:i32 = shl %84, 12:i32
infer %85

; *****
; For LLVM instruction:
;  %183 = lshr i32 %181, 20
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %20, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %37, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %19, %82 (hasExternalUses)
%84:i32 = xor %83, %58 (hasExternalUses)
%85:i32 = lshr %84, 20:i32
infer %85

; *****
; For LLVM instruction:
;  %184 = or i32 %183, %182
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %20, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %37, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %19, %82 (hasExternalUses)
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86
infer %87

; *****
; For LLVM instruction:
;  %185 = add i32 %184, %175
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %17, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37
%39:i32 = add %14, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %42, %43
%45:i32 = xor %41, %44
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %40, %48
%50:i32 = xor %42, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %49, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %39, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %59, %82 (hasExternalUses)
%84:i32 = xor %83, %38
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %39, %87
infer %88

; *****
; For LLVM instruction:
;  %186 = xor i32 %185, %179
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %17, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37
%39:i32 = add %14, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %42, %43
%45:i32 = xor %41, %44
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %40, %48
%50:i32 = xor %42, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %49, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %39, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %59, %82 (hasExternalUses)
%84:i32 = xor %83, %38
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %39, %87 (hasExternalUses)
%89:i32 = xor %88, %82
infer %89

; *****
; For LLVM instruction:
;  %187 = shl i32 %186, 8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %17, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37
%39:i32 = add %14, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %42, %43
%45:i32 = xor %41, %44
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %40, %48
%50:i32 = xor %42, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %49, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %39, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %59, %82 (hasExternalUses)
%84:i32 = xor %83, %38
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %39, %87 (hasExternalUses)
%89:i32 = xor %88, %82 (hasExternalUses)
%90:i32 = shl %89, 8:i32
infer %90

; *****
; For LLVM instruction:
;  %188 = lshr i32 %186, 24
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %17, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37
%39:i32 = add %14, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %42, %43
%45:i32 = xor %41, %44
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %40, %48
%50:i32 = xor %42, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %49, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %39, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %59, %82 (hasExternalUses)
%84:i32 = xor %83, %38
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %39, %87 (hasExternalUses)
%89:i32 = xor %88, %82 (hasExternalUses)
%90:i32 = lshr %89, 24:i32
infer %90

; *****
; For LLVM instruction:
;  %189 = or i32 %188, %187
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %17, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37
%39:i32 = add %14, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %42, %43
%45:i32 = xor %41, %44
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %40, %48
%50:i32 = xor %42, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %49, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %39, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %59, %82 (hasExternalUses)
%84:i32 = xor %83, %38
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %39, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91
infer %92

; *****
; For LLVM instruction:
;  %190 = add i32 %189, %180
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %20, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %37, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %19, %82
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %59, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91 (hasExternalUses)
%93:i32 = add %83, %92
infer %93

; *****
; For LLVM instruction:
;  %191 = xor i32 %190, %184
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %20, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %37, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %19, %82
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86
%88:i32 = add %59, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91 (hasExternalUses)
%93:i32 = add %83, %92 (hasExternalUses)
%94:i32 = xor %93, %87
infer %94

; *****
; For LLVM instruction:
;  %192 = shl i32 %191, 7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %20, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %37, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %19, %82
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86
%88:i32 = add %59, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91 (hasExternalUses)
%93:i32 = add %83, %92 (hasExternalUses)
%94:i32 = xor %93, %87 (hasExternalUses)
%95:i32 = shl %94, 7:i32
infer %95

; *****
; For LLVM instruction:
;  %193 = lshr i32 %191, 25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %20, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %37, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %19, %82
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86
%88:i32 = add %59, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91 (hasExternalUses)
%93:i32 = add %83, %92 (hasExternalUses)
%94:i32 = xor %93, %87 (hasExternalUses)
%95:i32 = lshr %94, 25:i32
infer %95

; *****
; For LLVM instruction:
;  %194 = or i32 %193, %192
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %20, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %37, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %19, %82
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86
%88:i32 = add %59, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91 (hasExternalUses)
%93:i32 = add %83, %92 (hasExternalUses)
%94:i32 = xor %93, %87
%95:i32 = shl %94, 7:i32
%96:i32 = lshr %94, 25:i32
%97:i32 = or %95, %96
infer %97

; *****
; For LLVM instruction:
;  %195 = add i32 %154, %125
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %17, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37 (hasExternalUses)
%39:i32 = add %14, %38
infer %39

; *****
; For LLVM instruction:
;  %196 = xor i32 %195, %109
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %17, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37 (hasExternalUses)
%39:i32 = add %14, %38 (hasExternalUses)
%40:i32 = var
%41:i32 = var
%42:i32 = add %40, %41
%43:i32 = var
%44:i32 = var
%45:i32 = xor %44, %42
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %43, %48 (hasExternalUses)
%50:i32 = xor %40, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %42, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = xor %39, %58
infer %59

; *****
; For LLVM instruction:
;  %197 = shl i32 %196, 16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %17, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37 (hasExternalUses)
%39:i32 = add %14, %38 (hasExternalUses)
%40:i32 = var
%41:i32 = var
%42:i32 = add %40, %41
%43:i32 = var
%44:i32 = var
%45:i32 = xor %44, %42
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %43, %48 (hasExternalUses)
%50:i32 = xor %40, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %42, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = xor %39, %58 (hasExternalUses)
%60:i32 = shl %59, 16:i32
infer %60

; *****
; For LLVM instruction:
;  %198 = lshr i32 %196, 16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %17, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37 (hasExternalUses)
%39:i32 = add %14, %38 (hasExternalUses)
%40:i32 = var
%41:i32 = var
%42:i32 = add %40, %41
%43:i32 = var
%44:i32 = var
%45:i32 = xor %44, %42
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %43, %48 (hasExternalUses)
%50:i32 = xor %40, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %42, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = xor %39, %58 (hasExternalUses)
%60:i32 = lshr %59, 16:i32
infer %60

; *****
; For LLVM instruction:
;  %199 = or i32 %198, %197
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %17, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37 (hasExternalUses)
%39:i32 = add %14, %38 (hasExternalUses)
%40:i32 = var
%41:i32 = var
%42:i32 = add %40, %41
%43:i32 = var
%44:i32 = var
%45:i32 = xor %44, %42
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %43, %48 (hasExternalUses)
%50:i32 = xor %40, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %42, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = xor %39, %58
%60:i32 = shl %59, 16:i32
%61:i32 = lshr %59, 16:i32
%62:i32 = or %60, %61
infer %62

; *****
; For LLVM instruction:
;  %200 = add i32 %199, %90
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %20, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %37, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %34, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %19, %82
infer %83

; *****
; For LLVM instruction:
;  %201 = xor i32 %200, %154
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %20, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %37, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %19, %82 (hasExternalUses)
%84:i32 = xor %83, %58
infer %84

; *****
; For LLVM instruction:
;  %202 = shl i32 %201, 12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %20, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %37, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %19, %82 (hasExternalUses)
%84:i32 = xor %83, %58 (hasExternalUses)
%85:i32 = shl %84, 12:i32
infer %85

; *****
; For LLVM instruction:
;  %203 = lshr i32 %201, 20
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %20, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %37, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %19, %82 (hasExternalUses)
%84:i32 = xor %83, %58 (hasExternalUses)
%85:i32 = lshr %84, 20:i32
infer %85

; *****
; For LLVM instruction:
;  %204 = or i32 %203, %202
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %20, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %37, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %19, %82 (hasExternalUses)
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86
infer %87

; *****
; For LLVM instruction:
;  %205 = add i32 %204, %195
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %17, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37
%39:i32 = add %14, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %42, %43
%45:i32 = xor %41, %44
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %40, %48
%50:i32 = xor %42, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %49, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %39, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %59, %82 (hasExternalUses)
%84:i32 = xor %83, %38
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %39, %87
infer %88

; *****
; For LLVM instruction:
;  %206 = xor i32 %205, %199
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %17, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37
%39:i32 = add %14, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %42, %43
%45:i32 = xor %41, %44
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %40, %48
%50:i32 = xor %42, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %49, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %39, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %59, %82 (hasExternalUses)
%84:i32 = xor %83, %38
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %39, %87 (hasExternalUses)
%89:i32 = xor %88, %82
infer %89

; *****
; For LLVM instruction:
;  %207 = shl i32 %206, 8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %17, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37
%39:i32 = add %14, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %42, %43
%45:i32 = xor %41, %44
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %40, %48
%50:i32 = xor %42, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %49, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %39, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %59, %82 (hasExternalUses)
%84:i32 = xor %83, %38
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %39, %87 (hasExternalUses)
%89:i32 = xor %88, %82 (hasExternalUses)
%90:i32 = shl %89, 8:i32
infer %90

; *****
; For LLVM instruction:
;  %208 = lshr i32 %206, 24
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %17, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37
%39:i32 = add %14, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %42, %43
%45:i32 = xor %41, %44
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %40, %48
%50:i32 = xor %42, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %49, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %39, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %59, %82 (hasExternalUses)
%84:i32 = xor %83, %38
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %39, %87 (hasExternalUses)
%89:i32 = xor %88, %82 (hasExternalUses)
%90:i32 = lshr %89, 24:i32
infer %90

; *****
; For LLVM instruction:
;  %209 = or i32 %208, %207
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %17, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37
%39:i32 = add %14, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %42, %43
%45:i32 = xor %41, %44
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %40, %48
%50:i32 = xor %42, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %49, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %39, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %59, %82 (hasExternalUses)
%84:i32 = xor %83, %38
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %39, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91
infer %92

; *****
; For LLVM instruction:
;  %210 = add i32 %209, %200
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %20, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %37, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %19, %82
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %59, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91 (hasExternalUses)
%93:i32 = add %83, %92
infer %93

; *****
; For LLVM instruction:
;  %211 = xor i32 %210, %204
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %20, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %37, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %19, %82
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86
%88:i32 = add %59, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91 (hasExternalUses)
%93:i32 = add %83, %92 (hasExternalUses)
%94:i32 = xor %93, %87
infer %94

; *****
; For LLVM instruction:
;  %212 = shl i32 %211, 7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %20, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %37, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %19, %82
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86
%88:i32 = add %59, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91 (hasExternalUses)
%93:i32 = add %83, %92 (hasExternalUses)
%94:i32 = xor %93, %87 (hasExternalUses)
%95:i32 = shl %94, 7:i32
infer %95

; *****
; For LLVM instruction:
;  %213 = lshr i32 %211, 25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %20, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %37, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %19, %82
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86
%88:i32 = add %59, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91 (hasExternalUses)
%93:i32 = add %83, %92 (hasExternalUses)
%94:i32 = xor %93, %87 (hasExternalUses)
%95:i32 = lshr %94, 25:i32
infer %95

; *****
; For LLVM instruction:
;  %214 = or i32 %213, %212
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %20, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %37, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %19, %82
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86
%88:i32 = add %59, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91 (hasExternalUses)
%93:i32 = add %83, %92 (hasExternalUses)
%94:i32 = xor %93, %87
%95:i32 = shl %94, 7:i32
%96:i32 = lshr %94, 25:i32
%97:i32 = or %95, %96
infer %97

; *****
; For LLVM instruction:
;  %215 = add i32 %94, %145
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %17, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37 (hasExternalUses)
%39:i32 = add %14, %38
infer %39

; *****
; For LLVM instruction:
;  %216 = xor i32 %215, %129
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %17, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37 (hasExternalUses)
%39:i32 = add %14, %38 (hasExternalUses)
%40:i32 = var
%41:i32 = var
%42:i32 = add %40, %41
%43:i32 = var
%44:i32 = var
%45:i32 = xor %44, %42
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %43, %48 (hasExternalUses)
%50:i32 = xor %40, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %42, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = xor %39, %58
infer %59

; *****
; For LLVM instruction:
;  %217 = shl i32 %216, 16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %17, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37 (hasExternalUses)
%39:i32 = add %14, %38 (hasExternalUses)
%40:i32 = var
%41:i32 = var
%42:i32 = add %40, %41
%43:i32 = var
%44:i32 = var
%45:i32 = xor %44, %42
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %43, %48 (hasExternalUses)
%50:i32 = xor %40, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %42, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = xor %39, %58 (hasExternalUses)
%60:i32 = shl %59, 16:i32
infer %60

; *****
; For LLVM instruction:
;  %218 = lshr i32 %216, 16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %17, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37 (hasExternalUses)
%39:i32 = add %14, %38 (hasExternalUses)
%40:i32 = var
%41:i32 = var
%42:i32 = add %40, %41
%43:i32 = var
%44:i32 = var
%45:i32 = xor %44, %42
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %43, %48 (hasExternalUses)
%50:i32 = xor %40, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %42, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = xor %39, %58 (hasExternalUses)
%60:i32 = lshr %59, 16:i32
infer %60

; *****
; For LLVM instruction:
;  %219 = or i32 %218, %217
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %17, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37 (hasExternalUses)
%39:i32 = add %14, %38 (hasExternalUses)
%40:i32 = var
%41:i32 = var
%42:i32 = add %40, %41
%43:i32 = var
%44:i32 = var
%45:i32 = xor %44, %42
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %43, %48 (hasExternalUses)
%50:i32 = xor %40, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %42, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = xor %39, %58
%60:i32 = shl %59, 16:i32
%61:i32 = lshr %59, 16:i32
%62:i32 = or %60, %61
infer %62

; *****
; For LLVM instruction:
;  %220 = add i32 %219, %110
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %20, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %37, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %34, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %19, %82
infer %83

; *****
; For LLVM instruction:
;  %221 = xor i32 %220, %94
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %20, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %37, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %19, %82 (hasExternalUses)
%84:i32 = xor %83, %58
infer %84

; *****
; For LLVM instruction:
;  %222 = shl i32 %221, 12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %20, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %37, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %19, %82 (hasExternalUses)
%84:i32 = xor %83, %58 (hasExternalUses)
%85:i32 = shl %84, 12:i32
infer %85

; *****
; For LLVM instruction:
;  %223 = lshr i32 %221, 20
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %20, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %37, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %19, %82 (hasExternalUses)
%84:i32 = xor %83, %58 (hasExternalUses)
%85:i32 = lshr %84, 20:i32
infer %85

; *****
; For LLVM instruction:
;  %224 = or i32 %223, %222
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %20, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %37, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %19, %82 (hasExternalUses)
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86
infer %87

; *****
; For LLVM instruction:
;  %225 = add i32 %224, %215
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %17, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37
%39:i32 = add %14, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %42, %43
%45:i32 = xor %41, %44
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %40, %48
%50:i32 = xor %42, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %49, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %39, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %59, %82 (hasExternalUses)
%84:i32 = xor %83, %38
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %39, %87
infer %88

; *****
; For LLVM instruction:
;  %226 = xor i32 %225, %219
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %17, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37
%39:i32 = add %14, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %42, %43
%45:i32 = xor %41, %44
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %40, %48
%50:i32 = xor %42, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %49, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %39, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %59, %82 (hasExternalUses)
%84:i32 = xor %83, %38
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %39, %87 (hasExternalUses)
%89:i32 = xor %88, %82
infer %89

; *****
; For LLVM instruction:
;  %227 = shl i32 %226, 8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %17, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37
%39:i32 = add %14, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %42, %43
%45:i32 = xor %41, %44
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %40, %48
%50:i32 = xor %42, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %49, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %39, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %59, %82 (hasExternalUses)
%84:i32 = xor %83, %38
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %39, %87 (hasExternalUses)
%89:i32 = xor %88, %82 (hasExternalUses)
%90:i32 = shl %89, 8:i32
infer %90

; *****
; For LLVM instruction:
;  %228 = lshr i32 %226, 24
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %17, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37
%39:i32 = add %14, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %42, %43
%45:i32 = xor %41, %44
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %40, %48
%50:i32 = xor %42, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %49, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %39, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %59, %82 (hasExternalUses)
%84:i32 = xor %83, %38
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %39, %87 (hasExternalUses)
%89:i32 = xor %88, %82 (hasExternalUses)
%90:i32 = lshr %89, 24:i32
infer %90

; *****
; For LLVM instruction:
;  %229 = or i32 %228, %227
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %17, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37
%39:i32 = add %14, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %42, %43
%45:i32 = xor %41, %44
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %40, %48
%50:i32 = xor %42, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %49, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %39, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %59, %82 (hasExternalUses)
%84:i32 = xor %83, %38
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %39, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91
infer %92

; *****
; For LLVM instruction:
;  %230 = add i32 %229, %220
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %20, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %37, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %19, %82
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %59, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91 (hasExternalUses)
%93:i32 = add %83, %92
infer %93

; *****
; For LLVM instruction:
;  %231 = xor i32 %230, %224
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %20, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %37, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %19, %82
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86
%88:i32 = add %59, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91 (hasExternalUses)
%93:i32 = add %83, %92 (hasExternalUses)
%94:i32 = xor %93, %87
infer %94

; *****
; For LLVM instruction:
;  %232 = shl i32 %231, 7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %20, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %37, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %19, %82
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86
%88:i32 = add %59, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91 (hasExternalUses)
%93:i32 = add %83, %92 (hasExternalUses)
%94:i32 = xor %93, %87 (hasExternalUses)
%95:i32 = shl %94, 7:i32
infer %95

; *****
; For LLVM instruction:
;  %233 = lshr i32 %231, 25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %20, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %37, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %19, %82
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86
%88:i32 = add %59, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91 (hasExternalUses)
%93:i32 = add %83, %92 (hasExternalUses)
%94:i32 = xor %93, %87 (hasExternalUses)
%95:i32 = lshr %94, 25:i32
infer %95

; *****
; For LLVM instruction:
;  %234 = or i32 %233, %232
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %20, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %37, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %19, %82
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86
%88:i32 = add %59, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91 (hasExternalUses)
%93:i32 = add %83, %92 (hasExternalUses)
%94:i32 = xor %93, %87
%95:i32 = shl %94, 7:i32
%96:i32 = lshr %94, 25:i32
%97:i32 = or %95, %96
infer %97

; *****
; For LLVM instruction:
;  %235 = add nuw nsw i32 %74, 1
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,10))
%1:i32 = addnw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %236 = icmp eq i32 %235, 10
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,10))
%1:i32 = addnw 1:i32, %0 (hasExternalUses)
%2:i1 = eq 10:i32, %1
infer %2
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = phi %0, %1, 1634760805:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1634760805
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1634760806
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = phi %0, %1, 857760878:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 857760878
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -857760879
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = phi %0, %1, 2036477234:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 2036477234
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2036477235
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = phi %0, %1, 1797285236:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1797285236
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1797285237
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,10))
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3 (hasExternalUses)
%5:i32 = shl %4, 16:i32
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3 (hasExternalUses)
%5:i32 = lshr %4, 16:i32
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 32768
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3
%5:i32 = shl %4, 16:i32
%6:i32 = lshr %4, 16:i32
%7:i32 = or %5, %6
infer %7


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3 (hasExternalUses)
%5:i32 = shl %4, 16:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3 (hasExternalUses)
%5:i32 = lshr %4, 16:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3 (hasExternalUses)
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %0, %8
infer %9


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3 (hasExternalUses)
%5:i32 = xor %2, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %1, %8 (hasExternalUses)
%10:i32 = xor %0, %9
infer %10


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3 (hasExternalUses)
%5:i32 = xor %2, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %1, %8 (hasExternalUses)
%10:i32 = xor %0, %9 (hasExternalUses)
%11:i32 = shl %10, 12:i32
infer %11


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3 (hasExternalUses)
%5:i32 = xor %2, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %1, %8 (hasExternalUses)
%10:i32 = xor %0, %9 (hasExternalUses)
%11:i32 = lshr %10, 20:i32
infer %11


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2048
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3 (hasExternalUses)
%5:i32 = xor %2, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %1, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12
infer %13


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13
infer %14


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = xor %14, %8
infer %15


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2143027200
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3 (hasExternalUses)
%5:i32 = shl %4, 16:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3 (hasExternalUses)
%5:i32 = lshr %4, 16:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3
%5:i32 = shl %4, 16:i32
%6:i32 = lshr %4, 16:i32
%7:i32 = or %5, %6

Cost = 4
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = xor %14, %8 (hasExternalUses)
%16:i32 = shl %15, 8:i32
infer %16


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2105196544
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = xor %14, %8 (hasExternalUses)
%16:i32 = lshr %15, 24:i32
infer %16


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 128
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17
infer %18


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2120986452
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3
%5:i32 = shl %4, 16:i32
%6:i32 = lshr %4, 16:i32
%7:i32 = or %5, %6

Cost = 4
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18
infer %19


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1016111154
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3
%5:i32 = shl %4, 16:i32
%6:i32 = lshr %4, 16:i32
%7:i32 = or %5, %6

Cost = 4
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3 (hasExternalUses)
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %0, %8

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = xor %19, %13
infer %20


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1050058910
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3 (hasExternalUses)
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %0, %8

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3 (hasExternalUses)
%5:i32 = xor %2, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %1, %8 (hasExternalUses)
%10:i32 = xor %0, %9 (hasExternalUses)
%11:i32 = shl %10, 12:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3 (hasExternalUses)
%5:i32 = xor %2, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %1, %8 (hasExternalUses)
%10:i32 = xor %0, %9 (hasExternalUses)
%11:i32 = lshr %10, 20:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3 (hasExternalUses)
%5:i32 = xor %2, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %1, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12

Cost = 4
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = xor %19, %13 (hasExternalUses)
%21:i32 = shl %20, 7:i32
infer %21


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268616192
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = xor %19, %13 (hasExternalUses)
%21:i32 = lshr %20, 25:i32
infer %21


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 64
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = xor %19, %13
%21:i32 = shl %20, 7:i32
%22:i32 = lshr %20, 25:i32
%23:i32 = or %21, %22
infer %23


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -97477916
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3 (hasExternalUses)
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %0, %8

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3 (hasExternalUses)
%5:i32 = xor %2, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %1, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12

Cost = 4
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %17, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37 (hasExternalUses)
%39:i32 = add %14, %38
infer %39


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 397659464
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %17, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37 (hasExternalUses)
%39:i32 = add %14, %38 (hasExternalUses)
%40:i32 = var
%41:i32 = var
%42:i32 = add %40, %41
%43:i32 = var
%44:i32 = var
%45:i32 = xor %44, %42
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %43, %48 (hasExternalUses)
%50:i32 = xor %40, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %42, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = xor %39, %58
infer %59


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1610890515
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %17, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37 (hasExternalUses)
%39:i32 = add %14, %38 (hasExternalUses)
%40:i32 = var
%41:i32 = var
%42:i32 = add %40, %41
%43:i32 = var
%44:i32 = var
%45:i32 = xor %44, %42
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %43, %48 (hasExternalUses)
%50:i32 = xor %40, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %42, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = xor %39, %58 (hasExternalUses)
%60:i32 = shl %59, 16:i32
infer %60


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1962934272
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %17, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37 (hasExternalUses)
%39:i32 = add %14, %38 (hasExternalUses)
%40:i32 = var
%41:i32 = var
%42:i32 = add %40, %41
%43:i32 = var
%44:i32 = var
%45:i32 = xor %44, %42
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %43, %48 (hasExternalUses)
%50:i32 = xor %40, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %42, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = xor %39, %58 (hasExternalUses)
%60:i32 = lshr %59, 16:i32
infer %60


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 38410
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %17, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37 (hasExternalUses)
%39:i32 = add %14, %38 (hasExternalUses)
%40:i32 = var
%41:i32 = var
%42:i32 = add %40, %41
%43:i32 = var
%44:i32 = var
%45:i32 = xor %44, %42
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %43, %48 (hasExternalUses)
%50:i32 = xor %40, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %42, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = xor %39, %58
%60:i32 = shl %59, 16:i32
%61:i32 = lshr %59, 16:i32
%62:i32 = or %60, %61
infer %62


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -501923322
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %20, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %37, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %34, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %19, %82
infer %83


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 524555991
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %20, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %37, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %19, %82 (hasExternalUses)
%84:i32 = xor %83, %58
infer %84


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2136107981
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %20, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %37, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %19, %82 (hasExternalUses)
%84:i32 = xor %83, %58 (hasExternalUses)
%85:i32 = shl %84, 12:i32
infer %85


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 481886208
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %20, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %37, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %19, %82 (hasExternalUses)
%84:i32 = xor %83, %58 (hasExternalUses)
%85:i32 = lshr %84, 20:i32
infer %85


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 3488
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %20, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %37, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %19, %82 (hasExternalUses)
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86
infer %87


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1686586195
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %17, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37
%39:i32 = add %14, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %42, %43
%45:i32 = xor %41, %44
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %40, %48
%50:i32 = xor %42, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %49, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %39, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %59, %82 (hasExternalUses)
%84:i32 = xor %83, %38
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %39, %87
infer %88


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1228967344
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %0, %3 (hasExternalUses)
%5:i32 = xor %2, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %1, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12

Cost = 4
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %17, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37
%39:i32 = add %14, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %42, %43
%45:i32 = xor %41, %44
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %40, %48
%50:i32 = xor %42, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %49, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %39, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %59, %82 (hasExternalUses)
%84:i32 = xor %83, %38
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %39, %87 (hasExternalUses)
%89:i32 = xor %88, %82
infer %89


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1046742014
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %17, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37
%39:i32 = add %14, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %42, %43
%45:i32 = xor %41, %44
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %40, %48
%50:i32 = xor %42, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %49, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %39, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %59, %82 (hasExternalUses)
%84:i32 = xor %83, %38
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %39, %87 (hasExternalUses)
%89:i32 = xor %88, %82 (hasExternalUses)
%90:i32 = shl %89, 8:i32
infer %90


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1102134016
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %17, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37
%39:i32 = add %14, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %42, %43
%45:i32 = xor %41, %44
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %40, %48
%50:i32 = xor %42, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %49, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %39, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %59, %82 (hasExternalUses)
%84:i32 = xor %83, %38
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %39, %87 (hasExternalUses)
%89:i32 = xor %88, %82 (hasExternalUses)
%90:i32 = lshr %89, 24:i32
infer %90


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 144
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %17, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37
%39:i32 = add %14, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %42, %43
%45:i32 = xor %41, %44
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %40, %48
%50:i32 = xor %42, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %49, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %39, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %59, %82 (hasExternalUses)
%84:i32 = xor %83, %38
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %39, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91
infer %92


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1753208228
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %20, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %37, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %19, %82
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %59, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91 (hasExternalUses)
%93:i32 = add %83, %92
infer %93


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 132205387
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17

Cost = 9
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18

Cost = 7
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %20, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %37, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %19, %82
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86
%88:i32 = add %59, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91 (hasExternalUses)
%93:i32 = add %83, %92 (hasExternalUses)
%94:i32 = xor %93, %87
infer %94


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -755387345
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %20, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %37, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %19, %82
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86
%88:i32 = add %59, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91 (hasExternalUses)
%93:i32 = add %83, %92 (hasExternalUses)
%94:i32 = xor %93, %87 (hasExternalUses)
%95:i32 = shl %94, 7:i32
infer %95


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2145812736
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %20, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %37, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %19, %82
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86
%88:i32 = add %59, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91 (hasExternalUses)
%93:i32 = add %83, %92 (hasExternalUses)
%94:i32 = xor %93, %87 (hasExternalUses)
%95:i32 = lshr %94, 25:i32
infer %95


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 123
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %2, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %20, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %37, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %60, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %19, %82
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86
%88:i32 = add %59, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91 (hasExternalUses)
%93:i32 = add %83, %92 (hasExternalUses)
%94:i32 = xor %93, %87
%95:i32 = shl %94, 7:i32
%96:i32 = lshr %94, 25:i32
%97:i32 = or %95, %96
infer %97


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
ConstantSynthesis: solver returns error on first query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,10))
%1:i32 = addnw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,10))

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) (nonNegative) (range=[0,10))
%1:i32 = addnw 1:i32, %0 (hasExternalUses)
%2:i1 = eq 10:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for crypto_core_hchacha20()

